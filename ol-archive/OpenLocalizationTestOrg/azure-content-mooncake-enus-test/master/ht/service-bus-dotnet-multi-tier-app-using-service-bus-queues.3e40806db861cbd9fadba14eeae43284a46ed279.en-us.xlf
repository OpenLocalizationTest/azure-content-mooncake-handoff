<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c6360e95b8264fbe06188a09257a7f4f67574279</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET 多层应用程序 | Azure</source>
          <target state="new">.NET 多层应用程序 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>本 .NET 教程可帮助你在 Azure 中开发使用服务总线队列在各层之间进行通信的多层应用。</source>
          <target state="new">本 .NET 教程可帮助你在 Azure 中开发使用服务总线队列在各层之间进行通信的多层应用。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用 Azure 服务总线队列创建 .NET 多层应用程序</source>
          <target state="new">使用 Azure 服务总线队列创建 .NET 多层应用程序</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>介绍</source>
          <target state="new">介绍</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>使用 Visual Studio 和免费的 Azure SDK for .NET，可以轻松针对 Azure 进行开发。如果你还没有 Visual Studio，则此 SDK 将自动安装 Visual Studio Express，以便你能完全免费地开始针对 Azure 进行开发。本文假设你之前未使用过 Azure。完成本教程之后，你将拥有使用多项 Azure 资源的应用程序，该应用程序在本地环境中运行并演示多层应用程序的工作方式。</source>
          <target state="new">使用 Visual Studio 和免费的 Azure SDK for .NET，可以轻松针对 Azure 进行开发。如果你还没有 Visual Studio，则此 SDK 将自动安装 Visual Studio Express，以便你能完全免费地开始针对 Azure 进行开发。本文假设你之前未使用过 Azure。完成本教程之后，你将拥有使用多项 Azure 资源的应用程序，该应用程序在本地环境中运行并演示多层应用程序的工作方式。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>你将学习以下内容：</source>
          <target state="new">你将学习以下内容：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>如何通过单个下载和安装来使你的计算机能够进行 Azure 开发。</source>
          <target state="new">如何通过单个下载和安装来使你的计算机能够进行 Azure 开发。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>如何使用 Visual Studio 针对 Azure 进行开发。</source>
          <target state="new">如何使用 Visual Studio 针对 Azure 进行开发。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>如何使用 Web 角色和辅助角色在 Azure 中创建多层应用程序。</source>
          <target state="new">如何使用 Web 角色和辅助角色在 Azure 中创建多层应用程序。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>如何使用服务总线队列在各层之间进行通信。</source>
          <target state="new">如何使用服务总线队列在各层之间进行通信。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>在本教程中，你将生成多层应用程序并在 Azure 云服务中运行它。前端将为 ASP.NET MVC Web 角色，后端将为辅助角色。你可以创建与前端相同的多层应用程序，作为将部署到 Azure Web 应用而不是云服务的 Web 项目。有关如何以不同方式处理 Azure Web 应用前端的说明，请参阅<bpt id="p1">[</bpt>后续步骤<ept id="p1">](#nextsteps)</ept>部分。</source>
          <target state="new">在本教程中，你将生成多层应用程序并在 Azure 云服务中运行它。前端将为 ASP.NET MVC Web 角色，后端将为辅助角色。你可以创建与前端相同的多层应用程序，作为将部署到 Azure Web 应用而不是云服务的 Web 项目。有关如何以不同方式处理 Azure Web 应用前端的说明，请参阅<bpt id="p1">[</bpt>后续步骤<ept id="p1">](#nextsteps)</ept>部分。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>以下屏幕截图显示了已完成的应用程序。</source>
          <target state="new">以下屏幕截图显示了已完成的应用程序。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>Azure 还提供了存储队列功能。有关 Azure 存储队列和服务总线队列的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 队列和 Azure 服务总线队列 - 比较与对照<ept id="p1">][sbqueuecomparison]</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>Azure 还提供了存储队列功能。有关 Azure 存储队列和服务总线队列的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 队列和 Azure 服务总线队列 - 比较与对照<ept id="p1">][sbqueuecomparison]</ept>。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>方案概述：角色间通信</source>
          <target state="new">方案概述：角色间通信</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>若要提交处理命令，以 Web 角色运行的前端 UI 组件必须与以辅助角色运行的中间层逻辑进行交互。此示例使用服务总线中转消息传送在各层之间进行通信。</source>
          <target state="new">若要提交处理命令，以 Web 角色运行的前端 UI 组件必须与以辅助角色运行的中间层逻辑进行交互。此示例使用服务总线中转消息传送在各层之间进行通信。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在 Web 层和中间层之间使用中转消息传送将分离这两个组件。与直接消息传送（即 TCP 或 HTTP）不同，Web 层不会直接连接到中间层，而是将工作单元作为消息推送到服务总线，服务总线将以可靠方式保留这些工作单元，直到中间层准备好使用和处理它们。</source>
          <target state="new">在 Web 层和中间层之间使用中转消息传送将分离这两个组件。与直接消息传送（即 TCP 或 HTTP）不同，Web 层不会直接连接到中间层，而是将工作单元作为消息推送到服务总线，服务总线将以可靠方式保留这些工作单元，直到中间层准备好使用和处理它们。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>服务总线提供了两个实体以支持中转消息传送、队列和主题。通过队列，发送到队列的每个消息均由一个接收方使用。主题支持发布/订阅模式，在该模式中，会为注册到主题中的订阅提供每个已发布消息。每个订阅都会以逻辑方式保留其自己的消息队列。此外，还可以使用筛选规则配置订阅，这些规则可将传递给订阅队列的消息集限制为符合筛选条件的消息集。以下示例使用服务总线队列。</source>
          <target state="new">服务总线提供了两个实体以支持中转消息传送、队列和主题。通过队列，发送到队列的每个消息均由一个接收方使用。主题支持发布/订阅模式，在该模式中，会为注册到主题中的订阅提供每个已发布消息。每个订阅都会以逻辑方式保留其自己的消息队列。此外，还可以使用筛选规则配置订阅，这些规则可将传递给订阅队列的消息集限制为符合筛选条件的消息集。以下示例使用服务总线队列。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>与直接消息传送相比，此通信机制具有多项优势：</source>
          <target state="new">与直接消息传送相比，此通信机制具有多项优势：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>暂时分离。<ept id="p1">**</ept> 使用异步消息传送模式，生产者和使用者不需要在同一时间联机。服务总线可靠地存储消息，直到使用方准备好接收它们。这将允许分布式应用程序的组件断开连接，例如，为进行维护而自动断开，或因组件故障断开连接，而不会影响系统的整体性能。此外，使用方应用程序可能只需在一天的特定时段内联机。</source>
          <target state="new"><bpt id="p1">**</bpt>暂时分离。<ept id="p1">**</ept> 使用异步消息传送模式，生产者和使用者不需要在同一时间联机。服务总线可靠地存储消息，直到使用方准备好接收它们。这将允许分布式应用程序的组件断开连接，例如，为进行维护而自动断开，或因组件故障断开连接，而不会影响系统的整体性能。此外，使用方应用程序可能只需在一天的特定时段内联机。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>负载量。<ept id="p1">**</ept> 在许多应用程序中，系统负载随时间而变化，而每个工作单元所需的处理时间通常为常量。使用队列在消息创建者与使用者之间中继意味着，只需将使用方应用程序（辅助）预配为适应平均负载而非最大负载。队列深度将随传入负载的变化而加大和减小。这将直接根据为应用程序加载提供服务所需的基础结构的数目来节省成本。</source>
          <target state="new"><bpt id="p1">**</bpt>负载量。<ept id="p1">**</ept> 在许多应用程序中，系统负载随时间而变化，而每个工作单元所需的处理时间通常为常量。使用队列在消息创建者与使用者之间中继意味着，只需将使用方应用程序（辅助）预配为适应平均负载而非最大负载。队列深度将随传入负载的变化而加大和减小。这将直接根据为应用程序加载提供服务所需的基础结构的数目来节省成本。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>负载平衡。<ept id="p1">**</ept> 随着负载增加，可添加更多的工作进程以从队列中读取。每条消息仅由一个辅助进程处理。另外，可通过此基于拉取的负载平衡来以最合理的方式使用辅助计算机，即使这些辅助计算机具有不同的处理能力（因为它们将以其最大速率拉取消息）也是如此。此模式通常称为<bpt id="p2">*</bpt>使用者竞争<ept id="p2">*</ept>模式。</source>
          <target state="new"><bpt id="p1">**</bpt>负载平衡。<ept id="p1">**</ept> 随着负载增加，可添加更多的工作进程以从队列中读取。每条消息仅由一个辅助进程处理。另外，可通过此基于拉取的负载平衡来以最合理的方式使用辅助计算机，即使这些辅助计算机具有不同的处理能力（因为它们将以其最大速率拉取消息）也是如此。此模式通常称为<bpt id="p2">*</bpt>使用者竞争<ept id="p2">*</ept>模式。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>以下各节讨论了实现此体系结构的代码。</source>
          <target state="new">以下各节讨论了实现此体系结构的代码。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>设置开发环境</source>
          <target state="new">设置开发环境</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>在你可以开始开发 Azure 应用程序之前，需要下载相应工具并设置开发环境：</source>
          <target state="new">在你可以开始开发 Azure 应用程序之前，需要下载相应工具并设置开发环境：</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>若要安装 Azure SDK for .NET，请单击以下链接。</source>
          <target state="new">若要安装 Azure SDK for .NET，请单击以下链接。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>获取工具和 SDK</source>
          <target state="new">获取工具和 SDK</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>单击要使用的 Visual Studio 版本的链接。本教程中的步骤使用 Visual Studio 2013。</source>
          <target state="new">单击要使用的 Visual Studio 版本的链接。本教程中的步骤使用 Visual Studio 2013。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>当提示你运行或保存安装文件时，请单击“运行”。</source>
          <target state="new">当提示你运行或保存安装文件时，请单击“运行”。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>在 Web 平台安装程序中，单击“安装”，然后继续安装。</source>
          <target state="new">在 Web 平台安装程序中，单击“安装”，然后继续安装。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>安装完成后，你便做好了开发应用的准备工作。SDK 包含了一些工具，可利用这些工具在 Visual Studio 中开发 Azure 应用程序。如果你未安装 Visual Studio，它还会安装免费的Visual Studio Express for Web。</source>
          <target state="new">安装完成后，你便做好了开发应用的准备工作。SDK 包含了一些工具，可利用这些工具在 Visual Studio 中开发 Azure 应用程序。如果你未安装 Visual Studio，它还会安装免费的Visual Studio Express for Web。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>设置服务总线命名空间</source>
          <target state="new">设置服务总线命名空间</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>下一步是创建服务命名空间并获取共享访问签名 (SAS) 密钥。命名空间为每个通过服务总线公开的应用程序提供应用程序边界。创建服务命名空间时，系统将会生成 SAS 密钥。命名空间与 SAS 密钥的组合为服务总线提供了用于验证应用程序访问权限的凭据。</source>
          <target state="new">下一步是创建服务命名空间并获取共享访问签名 (SAS) 密钥。命名空间为每个通过服务总线公开的应用程序提供应用程序边界。创建服务命名空间时，系统将会生成 SAS 密钥。命名空间与 SAS 密钥的组合为服务总线提供了用于验证应用程序访问权限的凭据。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>使用 Azure 经典门户设置命名空间</source>
          <target state="new">使用 Azure 经典门户设置命名空间</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>登录到 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>。</source>
          <target state="new">登录到 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>在门户的左侧导航窗格中，单击“服务总线”。</source>
          <target state="new">在门户的左侧导航窗格中，单击“服务总线”。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>在门户的下方窗格中，单击“创建”。</source>
          <target state="new">在门户的下方窗格中，单击“创建”。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>在“添加新命名空间”页中，输入命名空间名称。系统会立即检查该名称是否可用。</source>
          <target state="new">在“添加新命名空间”页中，输入命名空间名称。系统会立即检查该名称是否可用。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>在确保命名空间名称可用后，选择应承载您的命名空间的国家或地区（确保使用在其中部署计算资源的同一国家/地区）。此外，请确保在命名空间“类型”字段中选择“消息”，在“消息层”字段中选择“标准”。</source>
          <target state="new">在确保命名空间名称可用后，选择应承载您的命名空间的国家或地区（确保使用在其中部署计算资源的同一国家/地区）。此外，请确保在命名空间“类型”字段中选择“消息”，在“消息层”字段中选择“标准”。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph>选取要部署应用程序的<bpt id="p1">**</bpt>相同区域<ept id="p1">**</ept>。这将为您提供最佳性能。</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph>选取要部署应用程序的<bpt id="p1">**</bpt>相同区域<ept id="p1">**</ept>。这将为您提供最佳性能。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>单击“确定”复选标记。系统现已创建您的服务命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户配置资源。</source>
          <target state="new">单击“确定”复选标记。系统现已创建您的服务命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户配置资源。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>在主窗口中，单击你的服务命名空间的名称。</source>
          <target state="new">在主窗口中，单击你的服务命名空间的名称。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>单击“连接信息”。</source>
          <target state="new">单击“连接信息”。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>在“访问连接信息”窗格中，找到包含 SAS 密钥和密钥名称的连接字符串。</source>
          <target state="new">在“访问连接信息”窗格中，找到包含 SAS 密钥和密钥名称的连接字符串。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>记下这些凭据，或将它们复制到剪贴板。</source>
          <target state="new">记下这些凭据，或将它们复制到剪贴板。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>创建 Web 角色</source>
          <target state="new">创建 Web 角色</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>在本部分中，你将生成应用程序的前端。首先，你将创建应用程序显示的各种页面。之后，你将添加代码，以便将项提交到服务总线队列并显示有关队列的状态信息。</source>
          <target state="new">在本部分中，你将生成应用程序的前端。首先，你将创建应用程序显示的各种页面。之后，你将添加代码，以便将项提交到服务总线队列并显示有关队列的状态信息。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>创建项目</source>
          <target state="new">创建项目</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>使用管理员权限启动 Microsoft VisualStudio 2013 或 Microsoft Visual Studio Express。若要使用管理员权限启动 Visual Studio，请右键单击“Microsoft Visual Studio 2013”（或“Microsoft Visual Studio Express”），然后单击“以管理员身份运行”。Azure 计算模拟器（本文后面会讨论）要求使用管理员权限启动 Visual Studio。</source>
          <target state="new">使用管理员权限启动 Microsoft VisualStudio 2013 或 Microsoft Visual Studio Express。若要使用管理员权限启动 Visual Studio，请右键单击“Microsoft Visual Studio 2013”（或“Microsoft Visual Studio Express”），然后单击“以管理员身份运行”。Azure 计算模拟器（本文后面会讨论）要求使用管理员权限启动 Visual Studio。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的“文件”菜单中，单击“新建”，然后单击“项目”。</source>
          <target state="new">在 Visual Studio 的“文件”菜单中，单击“新建”，然后单击“项目”。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>从“Visual C#”下的“已安装模板”中，单击“云”，然后单击“Azure 云服务”。将项目命名为 <bpt id="p1">**</bpt>MultiTierApp<ept id="p1">**</ept>。然后，单击“确定”。</source>
          <target state="new">从“Visual C#”下的“已安装模板”中，单击“云”，然后单击“Azure 云服务”。将项目命名为 <bpt id="p1">**</bpt>MultiTierApp<ept id="p1">**</ept>。然后，单击“确定”。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>在“.NET Framework 4.5”角色中，双击“ASP.NET Web 角色”。</source>
          <target state="new">在“.NET Framework 4.5”角色中，双击“ASP.NET Web 角色”。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>将鼠标指针停留在“Azure 云服务解决方案”下的“WebRole1”上，单击铅笔图标，并将 Web 角色重命名为“FrontendWebRole”。然后，单击“确定”。（请确保你输入“Frontend”而不是“FrontEnd”，此处为小写“e”。）</source>
          <target state="new">将鼠标指针停留在“Azure 云服务解决方案”下的“WebRole1”上，单击铅笔图标，并将 Web 角色重命名为“FrontendWebRole”。然后，单击“确定”。（请确保你输入“Frontend”而不是“FrontEnd”，此处为小写“e”。）</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>从“新建 ASP.NET 项目”对话框的“选择模板”列表中，单击“MVC”，然后单击“确定”。</source>
          <target state="new">从“新建 ASP.NET 项目”对话框的“选择模板”列表中，单击“MVC”，然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击“引用”，然后单击“管理 NuGet 包”或“添加库程序包引用”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击“引用”，然后单击“管理 NuGet 包”或“添加库程序包引用”。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>在该对话框的左侧选择“联机”。搜索“服务总线”并选择“Azure 服务总线”项。然后，完成安装过程并关闭此对话框。</source>
          <target state="new">在该对话框的左侧选择“联机”。搜索“服务总线”并选择“Azure 服务总线”项。然后，完成安装过程并关闭此对话框。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>请注意，现已引用所需的客户端程序集并已添加部分新代码文件。</source>
          <target state="new">请注意，现已引用所需的客户端程序集并已添加部分新代码文件。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击“模型”，然后依次单击“添加”和“类”。在“名称”框中，键入名称 <bpt id="p1">**</bpt>OnlineOrder.cs<ept id="p1">**</ept>。然后单击“添加”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击“模型”，然后依次单击“添加”和“类”。在“名称”框中，键入名称 <bpt id="p1">**</bpt>OnlineOrder.cs<ept id="p1">**</ept>。然后单击“添加”。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>为你的 Web 角色编写代码</source>
          <target state="new">为你的 Web 角色编写代码</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>在本部分，你将创建应用程序显示的各种页面。</source>
          <target state="new">在本部分，你将创建应用程序显示的各种页面。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的 OnlineOrder.cs 文件中将现有命名空间定义替换为以下代码：</source>
          <target state="new">在 Visual Studio 的 OnlineOrder.cs 文件中将现有命名空间定义替换为以下代码：</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，双击“Controllers\HomeController.cs”。在文件顶部添加以下 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句以包括针对你刚创建的模型以及服务总线的命名空间。</source>
          <target state="new">在“解决方案资源管理器”中，双击“Controllers\HomeController.cs”。在文件顶部添加以下 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句以包括针对你刚创建的模型以及服务总线的命名空间。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>仍在 Visual Studio 的 HomeController.cs 文件中，将现有命名空间定义替换为以下代码。此代码包含用于处理将项提交到队列这一任务的方法。</source>
          <target state="new">仍在 Visual Studio 的 HomeController.cs 文件中，将现有命名空间定义替换为以下代码。此代码包含用于处理将项提交到队列这一任务的方法。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>在“生成”菜单中，单击“生成解决方案”以测试工作的准确性。</source>
          <target state="new">在“生成”菜单中，单击“生成解决方案”以测试工作的准确性。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>现在，你将为前面创建的 <bpt id="p1">**</bpt>Submit()<ept id="p1">**</ept> 方法创建视图。在 <bpt id="p2">**</bpt>Submit()<ept id="p2">**</ept> 方法内右键单击，然后选择“添加视图”。</source>
          <target state="new">现在，你将为前面创建的 <bpt id="p1">**</bpt>Submit()<ept id="p1">**</ept> 方法创建视图。在 <bpt id="p2">**</bpt>Submit()<ept id="p2">**</ept> 方法内右键单击，然后选择“添加视图”。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>此时将显示一个用于创建视图的对话框。在“模板”列表中，选择“创建”。在“模型类”列表中，单击“OnlineOrder”类。</source>
          <target state="new">此时将显示一个用于创建视图的对话框。在“模板”列表中，选择“创建”。在“模型类”列表中，单击“OnlineOrder”类。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>单击<bpt id="p1">**</bpt>“添加”<ept id="p1">**</ept>。</source>
          <target state="new">单击<bpt id="p1">**</bpt>“添加”<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>现在，请更改应用程序的显示名称。在“解决方案资源管理器”中，双击“Views\Shared\_Layout.cshtml”文件以在 Visual Studio 编辑器中将其打开。</source>
          <target state="new">现在，请更改应用程序的显示名称。在“解决方案资源管理器”中，双击“Views\Shared\_Layout.cshtml”文件以在 Visual Studio 编辑器中将其打开。</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>将每一处 <bpt id="p1">**</bpt>My ASP.NET Application<ept id="p1">**</ept> 替换为 <bpt id="p2">**</bpt>LITWARE'S Products<ept id="p2">**</ept>。</source>
          <target state="new">将每一处 <bpt id="p1">**</bpt>My ASP.NET Application<ept id="p1">**</ept> 替换为 <bpt id="p2">**</bpt>LITWARE'S Products<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>删除“Home”、“About”和“Contact”链接。删除突出显示的代码：</source>
          <target state="new">删除“Home”、“About”和“Contact”链接。删除突出显示的代码：</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>最后，修改提交页以包含有关队列的一些信息。在“解决方案资源管理器”中，双击“Views\Home\Submit.cshtml”文件以在 Visual Studio 编辑器中将其打开。在 <bpt id="p1">**</bpt>&amp;lt;h2&gt;Submit&amp;lt;/h2&gt;<ept id="p1">**</ept> 后面添加以下行。<bpt id="p2">**</bpt>ViewBag.MessageCount<ept id="p2">**</ept> 目前为空。稍后你将填充它。</source>
          <target state="new">最后，修改提交页以包含有关队列的一些信息。在“解决方案资源管理器”中，双击“Views\Home\Submit.cshtml”文件以在 Visual Studio 编辑器中将其打开。在 <bpt id="p1">**</bpt>&amp;lt;h2&gt;Submit&amp;lt;/h2&gt;<ept id="p1">**</ept> 后面添加以下行。<bpt id="p2">**</bpt>ViewBag.MessageCount<ept id="p2">**</ept> 目前为空。稍后你将填充它。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>现在，你已实现你的 UI。你可以按 <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 运行应用程序并确认其按预期方式运行。</source>
          <target state="new">现在，你已实现你的 UI。你可以按 <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 运行应用程序并确认其按预期方式运行。</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>编写用于将项提交到 Service Bus 队列的代码</source>
          <target state="new">编写用于将项提交到 Service Bus 队列的代码</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>现在，你将添加用于将项提交到队列的代码。首先，你将创建一个包含服务总线队列连接信息的类。然后，你将从 Global.aspx.cs 初始化你的连接。最后，你将更新你之前在 HomeController.cs 中创建的提交代码以便实际将项提交到服务总线队列。</source>
          <target state="new">现在，你将添加用于将项提交到队列的代码。首先，你将创建一个包含服务总线队列连接信息的类。然后，你将从 Global.aspx.cs 初始化你的连接。最后，你将更新你之前在 HomeController.cs 中创建的提交代码以便实际将项提交到服务总线队列。</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击“FrontendWebRole”（右键单击项目而不是角色）。单击“添加”，然后单击“类”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击“FrontendWebRole”（右键单击项目而不是角色）。单击“添加”，然后单击“类”。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>将类命名为 QueueConnector.cs。单击“添加”以创建类。</source>
          <target state="new">将类命名为 QueueConnector.cs。单击“添加”以创建类。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>现在，将添加可封装连接信息并初始化服务总线队列连接的代码。在 QueueConnector.cs 中添加以下代码，并输入 <bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept>（你的服务命名空间）和 <bpt id="p2">**</bpt>yourKey<ept id="p2">**</ept>（前面通过 <bpt id="p3">[</bpt>Azure 经典门户<ept id="p3">][]</ept>获取的 SAS 密钥）的值。</source>
          <target state="new">现在，将添加可封装连接信息并初始化服务总线队列连接的代码。在 QueueConnector.cs 中添加以下代码，并输入 <bpt id="p1">**</bpt>Namespace<ept id="p1">**</ept>（你的服务命名空间）和 <bpt id="p2">**</bpt>yourKey<ept id="p2">**</ept>（前面通过 <bpt id="p3">[</bpt>Azure 经典门户<ept id="p3">][]</ept>获取的 SAS 密钥）的值。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>稍后在本教程中，你将学习如何将<bpt id="p1">**</bpt>命名空间<ept id="p1">**</ept>名称和 SAS 密钥值存储在配置文件中。</source>
          <target state="new">稍后在本教程中，你将学习如何将<bpt id="p1">**</bpt>命名空间<ept id="p1">**</ept>名称和 SAS 密钥值存储在配置文件中。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>现在，请确保你的 <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> 方法会被调用。在“解决方案资源管理器”中，双击“Global.asax\Global.asax.cs”。</source>
          <target state="new">现在，请确保你的 <bpt id="p1">**</bpt>Initialize<ept id="p1">**</ept> 方法会被调用。在“解决方案资源管理器”中，双击“Global.asax\Global.asax.cs”。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>将以下行添加到 <bpt id="p1">**</bpt>Application_Start<ept id="p1">**</ept> 方法的底部。</source>
          <target state="new">将以下行添加到 <bpt id="p1">**</bpt>Application_Start<ept id="p1">**</ept> 方法的底部。</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>最后，更新之前创建的 Web 代码以便将项提交到队列。在“解决方案资源管理器”中，双击“Controllers\HomeController.cs”。</source>
          <target state="new">最后，更新之前创建的 Web 代码以便将项提交到队列。在“解决方案资源管理器”中，双击“Controllers\HomeController.cs”。</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>更新 <bpt id="p1">**</bpt>Submit()<ept id="p1">**</ept> 方法（如下所示）获取队列的消息计数。</source>
          <target state="new">更新 <bpt id="p1">**</bpt>Submit()<ept id="p1">**</ept> 方法（如下所示）获取队列的消息计数。</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>更新 <bpt id="p1">**</bpt>Submit(OnlineOrder order)<ept id="p1">**</ept> 方法（如下所示）将订单信息提交到队列。</source>
          <target state="new">更新 <bpt id="p1">**</bpt>Submit(OnlineOrder order)<ept id="p1">**</ept> 方法（如下所示）将订单信息提交到队列。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>现在，你可以重新运行应用程序。每当你提交订单时，消息计数都会增大。</source>
          <target state="new">现在，你可以重新运行应用程序。每当你提交订单时，消息计数都会增大。</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>云配置管理器</source>
          <target state="new">云配置管理器</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft.WindowsAzure.Configuration.CloudConfigurationManager<ept id="p1">][]</ept> 类中的 <bpt id="p2">[</bpt>GetSetting<ept id="p2">][]</ept> 方法可让你从平台的配置存储中读取配置设置。例如，如果代码在 Web 或辅助角色中运行，则 <bpt id="p3">[</bpt>GetSetting<ept id="p3">][]</ept> 方法将读取 ServiceConfiguration.cscfg 文件；如果代码在标准的控制台应用中运行，则 <bpt id="p4">[</bpt>GetSetting<ept id="p4">][]</ept> 方法将读取 app.config 文件。</source>
          <target state="new"><bpt id="p1">[</bpt>Microsoft.WindowsAzure.Configuration.CloudConfigurationManager<ept id="p1">][]</ept> 类中的 <bpt id="p2">[</bpt>GetSetting<ept id="p2">][]</ept> 方法可让你从平台的配置存储中读取配置设置。例如，如果代码在 Web 或辅助角色中运行，则 <bpt id="p3">[</bpt>GetSetting<ept id="p3">][]</ept> 方法将读取 ServiceConfiguration.cscfg 文件；如果代码在标准的控制台应用中运行，则 <bpt id="p4">[</bpt>GetSetting<ept id="p4">][]</ept> 方法将读取 app.config 文件。</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>如果你将服务总线命名空间的连接字符串存储在配置文件中，则可以使用 <bpt id="p1">[</bpt>GetSetting<ept id="p1">][]</ept> 方法来读取可用于实例化 <bpt id="p2">[</bpt>NamespaceMananger<ept id="p2">][]</ept> 对象的连接字符串。你可以使用 <bpt id="p3">[</bpt>NamespaceMananger<ept id="p3">][]</ept> 实例以编程方式来配置服务总线命名空间。可以使用同一连接字符串来实例化可用于执行运行时操作（例如发送和接收消息）的客户端对象（例如 <bpt id="p4">[</bpt>QueueClient<ept id="p4">][]</ept>、<bpt id="p5">[</bpt>TopicClient<ept id="p5">][]</ept> 和 <bpt id="p6">[</bpt>EventHubClient<ept id="p6">][]</ept> 对象）。</source>
          <target state="new">如果你将服务总线命名空间的连接字符串存储在配置文件中，则可以使用 <bpt id="p1">[</bpt>GetSetting<ept id="p1">][]</ept> 方法来读取可用于实例化 <bpt id="p2">[</bpt>NamespaceMananger<ept id="p2">][]</ept> 对象的连接字符串。你可以使用 <bpt id="p3">[</bpt>NamespaceMananger<ept id="p3">][]</ept> 实例以编程方式来配置服务总线命名空间。可以使用同一连接字符串来实例化可用于执行运行时操作（例如发送和接收消息）的客户端对象（例如 <bpt id="p4">[</bpt>QueueClient<ept id="p4">][]</ept>、<bpt id="p5">[</bpt>TopicClient<ept id="p5">][]</ept> 和 <bpt id="p6">[</bpt>EventHubClient<ept id="p6">][]</ept> 对象）。</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>连接字符串</source>
          <target state="new">连接字符串</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>若要实例化客户端（例如服务总线 <bpt id="p1">[</bpt>QueueClient<ept id="p1">][]</ept>），可以将配置信息表示为连接字符串。在客户端，有一个通过使用该连接字符串实例化客户端类型的 <ph id="ph1">`CreateFromConnectionString()`</ph> 方法。例如，考虑下面的配置部分</source>
          <target state="new">若要实例化客户端（例如服务总线 <bpt id="p1">[</bpt>QueueClient<ept id="p1">][]</ept>），可以将配置信息表示为连接字符串。在客户端，有一个通过使用该连接字符串实例化客户端类型的 <ph id="ph1">`CreateFromConnectionString()`</ph> 方法。例如，考虑下面的配置部分</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>以下代码检索连接字符串，创建队列并初始化与队列的连接。</source>
          <target state="new">以下代码检索连接字符串，创建队列并初始化与队列的连接。</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>以下部分中的代码使用 <bpt id="p1">[</bpt>CloudConfigurationManager<ept id="p1">][Microsoft.WindowsAzure.Configuration.CloudConfigurationManager]</ept> 类。</source>
          <target state="new">以下部分中的代码使用 <bpt id="p1">[</bpt>CloudConfigurationManager<ept id="p1">][Microsoft.WindowsAzure.Configuration.CloudConfigurationManager]</ept> 类。</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>创建辅助角色</source>
          <target state="new">创建辅助角色</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>现在，你将创建用于处理订单提交的辅助角色。此示例使用“服务总线队列的辅助角色”Visual Studio 项目模板。首先，请使用 Visual Studio 中的“服务器资源管理器”获取所需凭据。</source>
          <target state="new">现在，你将创建用于处理订单提交的辅助角色。此示例使用“服务总线队列的辅助角色”Visual Studio 项目模板。首先，请使用 Visual Studio 中的“服务器资源管理器”获取所需凭据。</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>确保已将 Visual Studio 连接到你的 Azure 帐户。</source>
          <target state="new">确保已将 Visual Studio 连接到你的 Azure 帐户。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的“解决方案资源管理器”中，右键单击“MultiTierApp”项目下的“角色”文件夹。</source>
          <target state="new">在 Visual Studio 的“解决方案资源管理器”中，右键单击“MultiTierApp”项目下的“角色”文件夹。</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>单击“添加”，然后单击“新建辅助角色项目”。此时将显示“添加新角色项目”对话框。</source>
          <target state="new">单击“添加”，然后单击“新建辅助角色项目”。此时将显示“添加新角色项目”对话框。</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>在“添加新角色项目”对话框中，单击“服务总线队列的辅助角色”。</source>
          <target state="new">在“添加新角色项目”对话框中，单击“服务总线队列的辅助角色”。</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>在“名称”框中，将项目命名为 <bpt id="p1">**</bpt>OrderProcessingRole<ept id="p1">**</ept>。然后单击“添加”。</source>
          <target state="new">在“名称”框中，将项目命名为 <bpt id="p1">**</bpt>OrderProcessingRole<ept id="p1">**</ept>。然后单击“添加”。</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>在“服务器资源管理器”中，右键单击服务命名空间的名称，然后单击“属性”。在 Visual Studio 的“属性”窗格中，第一个条目包含使用包含所需授权凭据的命名空间终结点填充的连接字符串。例如，请参阅以下屏幕截图。双击“ConnectionString”，然后按 <bpt id="p1">**</bpt>Ctrl+C<ept id="p1">**</ept> 将此字符串复制到剪贴板中。</source>
          <target state="new">在“服务器资源管理器”中，右键单击服务命名空间的名称，然后单击“属性”。在 Visual Studio 的“属性”窗格中，第一个条目包含使用包含所需授权凭据的命名空间终结点填充的连接字符串。例如，请参阅以下屏幕截图。双击“ConnectionString”，然后按 <bpt id="p1">**</bpt>Ctrl+C<ept id="p1">**</ept> 将此字符串复制到剪贴板中。</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击你在步骤 5 中创建的“OrderProcessingRole”（确保右键单击“角色”下的“OrderProcessingRole”而不是类）。然后单击“属性”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击你在步骤 5 中创建的“OrderProcessingRole”（确保右键单击“角色”下的“OrderProcessingRole”而不是类）。然后单击“属性”。</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>在“属性”对话框的“设置”选项卡中，在“Microsoft.ServiceBus.ConnectionString”的“值”框内单击，然后粘贴你在步骤 6 中复制的终结点值。</source>
          <target state="new">在“属性”对话框的“设置”选项卡中，在“Microsoft.ServiceBus.ConnectionString”的“值”框内单击，然后粘贴你在步骤 6 中复制的终结点值。</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>当你从队列中处理订单时，创建一个 <bpt id="p1">**</bpt>OnlineOrder<ept id="p1">**</ept> 类来表示这些订单。你可以重用已创建的类。在“解决方案资源管理器”中，右键单击“OrderProcessingRole”项目（右键单击项目而不是角色）。单击“添加”，然后单击“现有项”。</source>
          <target state="new">当你从队列中处理订单时，创建一个 <bpt id="p1">**</bpt>OnlineOrder<ept id="p1">**</ept> 类来表示这些订单。你可以重用已创建的类。在“解决方案资源管理器”中，右键单击“OrderProcessingRole”项目（右键单击项目而不是角色）。单击“添加”，然后单击“现有项”。</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>浏览到 <bpt id="p1">**</bpt>FrontendWebRole\Models<ept id="p1">**</ept> 的子文件夹，然后双击“OnlineOrder.cs”以将其添加到此项目中。</source>
          <target state="new">浏览到 <bpt id="p1">**</bpt>FrontendWebRole\Models<ept id="p1">**</ept> 的子文件夹，然后双击“OnlineOrder.cs”以将其添加到此项目中。</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>WorkerRole.cs<ept id="p1">**</ept> 中，将 <bpt id="p2">**</bpt>WorkerRole.cs<ept id="p2">**</ept> 中 <bpt id="p3">**</bpt>QueueName<ept id="p3">**</ept> 变量的值 <ph id="ph1">`"ProcessingQueue"`</ph> 替换为 <ph id="ph2">`"OrdersQueue"`</ph>，如以下代码所示。</source>
          <target state="new">在 <bpt id="p1">**</bpt>WorkerRole.cs<ept id="p1">**</ept> 中，将 <bpt id="p2">**</bpt>WorkerRole.cs<ept id="p2">**</ept> 中 <bpt id="p3">**</bpt>QueueName<ept id="p3">**</ept> 变量的值 <ph id="ph1">`"ProcessingQueue"`</ph> 替换为 <ph id="ph2">`"OrdersQueue"`</ph>，如以下代码所示。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>在 WorkerRole.cs 文件顶部添加以下 using 语句。</source>
          <target state="new">在 WorkerRole.cs 文件顶部添加以下 using 语句。</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Run()`</ph> 函数的 <ph id="ph2">`OnMessage`</ph> 调用中，添加以下代码到 <ph id="ph3">`try`</ph> 子句。</source>
          <target state="new">在 <ph id="ph1">`Run()`</ph> 函数的 <ph id="ph2">`OnMessage`</ph> 调用中，添加以下代码到 <ph id="ph3">`try`</ph> 子句。</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>你已完成此应用程序。你可以测试整个应用程序，方法是右键单击“解决方案资源管理器”中的 MultiTierApp 项目，选择“设置为启动项目”，然后按 F5。请注意，消息计数不会递增，因为辅助角色会处理队列中的项并将其标记为完成。你可以通过查看 Azure 计算模拟器 UI 来查看辅助角色的跟踪输出。可通过右击任务栏的通知区域中的模拟器图标并选择“显示计算模拟器 UI”来执行此操作。</source>
          <target state="new">你已完成此应用程序。你可以测试整个应用程序，方法是右键单击“解决方案资源管理器”中的 MultiTierApp 项目，选择“设置为启动项目”，然后按 F5。请注意，消息计数不会递增，因为辅助角色会处理队列中的项并将其标记为完成。你可以通过查看 Azure 计算模拟器 UI 来查看辅助角色的跟踪输出。可通过右击任务栏的通知区域中的模拟器图标并选择“显示计算模拟器 UI”来执行此操作。</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>若要了解有关 Service Bus 的详细信息，请参阅以下资源：</source>
          <target state="new">若要了解有关 Service Bus 的详细信息，请参阅以下资源：</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Azure 服务总线</source>
          <target state="new">Azure 服务总线</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>服务总线服务页</source>
          <target state="new">服务总线服务页</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>如何使用 Service Bus 队列</source>
          <target state="new">如何使用 Service Bus 队列</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>若要了解有关多层方案的详细信息，或者要了解如何将应用程序部署到云服务，请参阅：</source>
          <target state="new">若要了解有关多层方案的详细信息，或者要了解如何将应用程序部署到云服务，请参阅：</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>使用存储表、队列和 Blob 的 .NET 多层应用程序</source>
          <target state="new">使用存储表、队列和 Blob 的 .NET 多层应用程序</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>你可能需要在 Azure Web 应用而不是 Azure 云服务中实现多层应用程序的前端。若要详细了解 Web 应用和云服务之间的差异，请参阅 <bpt id="p1">[</bpt>Azure 执行模型<ept id="p1">][executionmodels]</ept>。</source>
          <target state="new">你可能需要在 Azure Web 应用而不是 Azure 云服务中实现多层应用程序的前端。若要详细了解 Web 应用和云服务之间的差异，请参阅 <bpt id="p1">[</bpt>Azure 执行模型<ept id="p1">][executionmodels]</ept>。</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>若要实施在本教程中以标准 Web 项目而不是云服务 Web 角色方式创建的应用程序，请遵循本教程中的步骤，但需注意以下差异：</source>
          <target state="new">若要实施在本教程中以标准 Web 项目而不是云服务 Web 角色方式创建的应用程序，请遵循本教程中的步骤，但需注意以下差异：</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>创建项目时，请选择 Web 类别中的“ASP.NET MVC Web 应用程序”项目模板，而不是“云”类别中的“云服务”模板。然后，请遵循创建 MVC 应用程序时遵循的相同指导，直到你转到“云配置管理器”部分。</source>
          <target state="new">创建项目时，请选择 Web 类别中的“ASP.NET MVC Web 应用程序”项目模板，而不是“云”类别中的“云服务”模板。然后，请遵循创建 MVC 应用程序时遵循的相同指导，直到你转到“云配置管理器”部分。</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>创建辅助角色时，请在新的独立解决方案中创建它，采用的说明与创建 Web 角色所用的原始说明类似。不过现在，你只是在云服务项目中创建辅助角色。然后，请遵循创建辅助角色所用的相同说明。</source>
          <target state="new">创建辅助角色时，请在新的独立解决方案中创建它，采用的说明与创建 Web 角色所用的原始说明类似。不过现在，你只是在云服务项目中创建辅助角色。然后，请遵循创建辅助角色所用的相同说明。</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>你可以分别测试前端和后端，也可以在单独的 Visual Studio 实例中同时运行这二者。</source>
          <target state="new">你可以分别测试前端和后端，也可以在单独的 Visual Studio 实例中同时运行这二者。</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>若要了解如何将前端部署到 Azure Web 应用，请参阅[在 Azure App Service 中创建 ASP.NET Web 应用]](/documentation/articles/web-sites-dotnet-get-started)。若要了解如何将后端部署到 Azure 云服务，请参阅<bpt id="p1">[</bpt>使用存储表、队列和 Blob 的 .NET 多层应用程序<ept id="p1">][mutitierstorage]</ept>。</source>
          <target state="new">若要了解如何将前端部署到 Azure Web 应用，请参阅[在 Azure App Service 中创建 ASP.NET Web 应用]](/documentation/articles/web-sites-dotnet-get-started)。若要了解如何将后端部署到 Azure 云服务，请参阅<bpt id="p1">[</bpt>使用存储表、队列和 Blob 的 .NET 多层应用程序<ept id="p1">][mutitierstorage]</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>