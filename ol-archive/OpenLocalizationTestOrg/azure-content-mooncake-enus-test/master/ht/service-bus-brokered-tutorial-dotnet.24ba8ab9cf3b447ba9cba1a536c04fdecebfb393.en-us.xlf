<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">96460a03c856093da0b6409def8b216fcb353ea2</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>服务总线中转消息传送 .NET 教程 | Azure</source>
          <target state="new">服务总线中转消息传送 .NET 教程 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>中转消息传送 .NET 教程。</source>
          <target state="new">中转消息传送 .NET 教程。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>服务总线中转消息传送 .NET 教程</source>
          <target state="new">服务总线中转消息传送 .NET 教程</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure 服务总线提供两个综合性消息传送解决方案：一是通过在云中运行的集中“中继”服务，它支持各种不同的传输协议和 Web 服务标准（包括 SOAP、WS-* 和 REST）。客户端不需要与本地服务建立直接连接，也不需要了解服务所在的位置，并且本地服务无需在防火墙上打开任何入站端口。</source>
          <target state="new">Azure 服务总线提供两个综合性消息传送解决方案：一是通过在云中运行的集中“中继”服务，它支持各种不同的传输协议和 Web 服务标准（包括 SOAP、WS-* 和 REST）。客户端不需要与本地服务建立直接连接，也不需要了解服务所在的位置，并且本地服务无需在防火墙上打开任何入站端口。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>第二个消息传送解决方案启用了“中转”消息传送功能。可将它们视为异步或分离式消息传送功能，支持使用服务总线消息传送基础结构的发布-订阅、临时分离和负载平衡方案。分离式通信具有很多优点；例如，客户端和服务器可以根据需要进行连接并以异步方式执行其操作。</source>
          <target state="new">第二个消息传送解决方案启用了“中转”消息传送功能。可将它们视为异步或分离式消息传送功能，支持使用服务总线消息传送基础结构的发布-订阅、临时分离和负载平衡方案。分离式通信具有很多优点；例如，客户端和服务器可以根据需要进行连接并以异步方式执行其操作。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>本教程旨在提供有关队列的概述和实践经验，队列是服务总线中转消息传送的一个核心组件。完成本教程中的一系列主题后，你将获得一个应用程序，它能填充消息列表、创建队列和向队列发送消息。最后，该应用程序从队列接收消息并将其显示出来，然后清理其资源并退出。有关介绍如何构建使用“中继”消息传送功能的应用程序的相应教程，请参阅<bpt id="p1">[</bpt>服务总线中继消息传送教程<ept id="p1">](/documentation/articles/service-bus-relay-tutorial)</ept>。</source>
          <target state="new">本教程旨在提供有关队列的概述和实践经验，队列是服务总线中转消息传送的一个核心组件。完成本教程中的一系列主题后，你将获得一个应用程序，它能填充消息列表、创建队列和向队列发送消息。最后，该应用程序从队列接收消息并将其显示出来，然后清理其资源并退出。有关介绍如何构建使用“中继”消息传送功能的应用程序的相应教程，请参阅<bpt id="p1">[</bpt>服务总线中继消息传送教程<ept id="p1">](/documentation/articles/service-bus-relay-tutorial)</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>简介和先决条件</source>
          <target state="new">简介和先决条件</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>队列为一个或多个竞争使用方提供“先入先出 (FIFO)”消息传递方式。FIFO 表示接收方通常按照消息排队的临时顺序来接收并处理消息，并且每条消息将仅由一个消息使用方接收并处理。使用队列的主要优点是实现应用程序组件的<bpt id="p1">*</bpt>暂时分离<ept id="p1">*</ept>：换而言之，创建方和使用方无需同时发送和接收消息，因为消息被持久存储在队列中。相关的优点是<bpt id="p2">*</bpt>负载分级<ept id="p2">*</ept>，它允许创建方和使用方以不同速率发送和接收消息。</source>
          <target state="new">队列为一个或多个竞争使用方提供“先入先出 (FIFO)”消息传递方式。FIFO 表示接收方通常按照消息排队的临时顺序来接收并处理消息，并且每条消息将仅由一个消息使用方接收并处理。使用队列的主要优点是实现应用程序组件的<bpt id="p1">*</bpt>暂时分离<ept id="p1">*</ept>：换而言之，创建方和使用方无需同时发送和接收消息，因为消息被持久存储在队列中。相关的优点是<bpt id="p2">*</bpt>负载分级<ept id="p2">*</ept>，它允许创建方和使用方以不同速率发送和接收消息。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>以下是开始本教程之前应遵循的一些管理步骤和前提步骤。首先是创建服务命名空间，并获取共享的访问签名 (SAS) 密钥。服务命名空间为每个通过服务总线公开的应用程序提供应用程序边界。创建服务命名空间时，系统将自动生成 SAS 密钥。服务命名空间与 SAS 密钥的组合提供了一个凭据，服务总线可用其验证应用程序访问权限。</source>
          <target state="new">以下是开始本教程之前应遵循的一些管理步骤和前提步骤。首先是创建服务命名空间，并获取共享的访问签名 (SAS) 密钥。服务命名空间为每个通过服务总线公开的应用程序提供应用程序边界。创建服务命名空间时，系统将自动生成 SAS 密钥。服务命名空间与 SAS 密钥的组合提供了一个凭据，服务总线可用其验证应用程序访问权限。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>创建服务命名空间并获取 SAS 密钥</source>
          <target state="new">创建服务命名空间并获取 SAS 密钥</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>若要创建服务命名空间，请遵循<bpt id="p1">[</bpt>如何：创建或修改服务总线服务命名空间<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh690931.aspx)</ept>中概述的步骤。</source>
          <target state="new">若要创建服务命名空间，请遵循<bpt id="p1">[</bpt>如何：创建或修改服务总线服务命名空间<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh690931.aspx)</ept>中概述的步骤。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>的主窗口中，单击在上一步中创建的命名空间的名称。</source>
          <target state="new">在 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>的主窗口中，单击在上一步中创建的命名空间的名称。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>单击<bpt id="p1">**</bpt>“配置”<ept id="p1">**</ept>。</source>
          <target state="new">单击<bpt id="p1">**</bpt>“配置”<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在“共享访问签名生成器”部分中，记下与 <bpt id="p1">**</bpt>RootManagerSharedAccessKey<ept id="p1">**</ept> 策略关联的主密钥，或将其复制到剪贴板。你将在本教程的后面部分使用此值。</source>
          <target state="new">在“共享访问签名生成器”部分中，记下与 <bpt id="p1">**</bpt>RootManagerSharedAccessKey<ept id="p1">**</ept> 策略关联的主密钥，或将其复制到剪贴板。你将在本教程的后面部分使用此值。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>下一步是创建一个 Visual Studio 项目并编写两个帮助程序函数，用于将以逗号分隔的消息列表加载到强类型的 <bpt id="p1">[</bpt>BrokeredMessage<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> .NET <bpt id="p2">[</bpt>List<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/6sh2ey19.aspx)</ept> 对象。</source>
          <target state="new">下一步是创建一个 Visual Studio 项目并编写两个帮助程序函数，用于将以逗号分隔的消息列表加载到强类型的 <bpt id="p1">[</bpt>BrokeredMessage<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> .NET <bpt id="p2">[</bpt>List<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/6sh2ey19.aspx)</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>创建 Visual Studio 项目</source>
          <target state="new">创建 Visual Studio 项目</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>在“开始”菜单中右键单击 Visual Studio，以便以管理员身份启动该程序，然后单击“以管理员身份运行”。</source>
          <target state="new">在“开始”菜单中右键单击 Visual Studio，以便以管理员身份启动该程序，然后单击“以管理员身份运行”。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>创建新的控制台应用程序项目。单击“文件”菜单并选择“新建”，然后单击“项目”。在“新建项目”对话框中，选择“Visual C#”（如果不显示“Visual C#”，则在“其他语言”下方查看），单击“控制台应用程序”模板，然后将其命名为 <bpt id="p1">**</bpt>QueueSample<ept id="p1">**</ept>。使用默认“位置”。单击“确定”以创建该项目。</source>
          <target state="new">创建新的控制台应用程序项目。单击“文件”菜单并选择“新建”，然后单击“项目”。在“新建项目”对话框中，选择“Visual C#”（如果不显示“Visual C#”，则在“其他语言”下方查看），单击“控制台应用程序”模板，然后将其命名为 <bpt id="p1">**</bpt>QueueSample<ept id="p1">**</ept>。使用默认“位置”。单击“确定”以创建该项目。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>使用 NuGet 包管理器将服务总线库添加到你的项目：</source>
          <target state="new">使用 NuGet 包管理器将服务总线库添加到你的项目：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>在解决方案资源管理器中，右键单击项目文件夹，然后单击“管理 NuGet 包”。</source>
          <target state="new">在解决方案资源管理器中，右键单击项目文件夹，然后单击“管理 NuGet 包”。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>在“管理 Nuget 包”对话框中，在线搜索“服务总线”并单击“安装”。</source>
          <target state="new">在“管理 Nuget 包”对话框中，在线搜索“服务总线”并单击“安装”。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>在解决方案资源管理器中，双击 Program.cs 文件以在 Visual Studio 编辑器中将其打开。将命名空间名称从其默认名称 <ph id="ph1">`QueueSample`</ph> 更改为 <ph id="ph2">`Microsoft.ServiceBus.Samples`</ph>。</source>
          <target state="new">在解决方案资源管理器中，双击 Program.cs 文件以在 Visual Studio 编辑器中将其打开。将命名空间名称从其默认名称 <ph id="ph1">`QueueSample`</ph> 更改为 <ph id="ph2">`Microsoft.ServiceBus.Samples`</ph>。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>修改 <ph id="ph1">`using`</ph> 语句，如以下代码中所示。</source>
          <target state="new">修改 <ph id="ph1">`using`</ph> 语句，如以下代码中所示。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>创建一个名为 Data.csv 的文本文件，并将以下逗号分隔文本中的内容复制到其中。</source>
          <target state="new">创建一个名为 Data.csv 的文本文件，并将以下逗号分隔文本中的内容复制到其中。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>保存并关闭该 Data.csv 文件，并记住保存位置。</source>
          <target state="new">保存并关闭该 Data.csv 文件，并记住保存位置。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>在解决方案资源管理器中，右键单击项目的名称（此示例中为 <bpt id="p1">**</bpt>QueueSample<ept id="p1">**</ept>），并依次单击“添加”和“现有项”。</source>
          <target state="new">在解决方案资源管理器中，右键单击项目的名称（此示例中为 <bpt id="p1">**</bpt>QueueSample<ept id="p1">**</ept>），并依次单击“添加”和“现有项”。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>浏览到你在步骤 6 中创建的 Data.csv 文件。单击该文件，然后单击“添加”。确保选择了文件类型列表中的“所有文件”(<bpt id="p1">*</bpt>.<ept id="p1">*</ept>)。</source>
          <target state="new">浏览到你在步骤 6 中创建的 Data.csv 文件。单击该文件，然后单击“添加”。确保选择了文件类型列表中的“所有文件”(<bpt id="p1">*</bpt>.<ept id="p1">*</ept>)。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>创建用于解析消息列表的函数</source>
          <target state="new">创建用于解析消息列表的函数</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Main()`</ph> 方法之前，声明两个变量，用于包含 Data.csv 中的消息列表：其中之一为 <bpt id="p1">**</bpt>DataTable<ept id="p1">**</ept> 类型。另一个应为 List 对象类型，强类型化为 <bpt id="p2">[</bpt>BrokeredMessage<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept>。后者是中转消息列表，本教程中的后续步骤将用到它。</source>
          <target state="new">在 <ph id="ph1">`Main()`</ph> 方法之前，声明两个变量，用于包含 Data.csv 中的消息列表：其中之一为 <bpt id="p1">**</bpt>DataTable<ept id="p1">**</ept> 类型。另一个应为 List 对象类型，强类型化为 <bpt id="p2">[</bpt>BrokeredMessage<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept>。后者是中转消息列表，本教程中的后续步骤将用到它。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Main()`</ph> 之外，定义 <ph id="ph2">`ParseCSV()`</ph> 方法，用于解析 Data.csv 中的消息列表并将消息加载到 <bpt id="p1">[</bpt>DataTable<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/system.data.datatable.aspx)</ept> 表，如下所示。该方法将返回 <bpt id="p2">**</bpt>DataTable<ept id="p2">**</ept> 对象。</source>
          <target state="new">在 <ph id="ph1">`Main()`</ph> 之外，定义 <ph id="ph2">`ParseCSV()`</ph> 方法，用于解析 Data.csv 中的消息列表并将消息加载到 <bpt id="p1">[</bpt>DataTable<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/system.data.datatable.aspx)</ept> 表，如下所示。该方法将返回 <bpt id="p2">**</bpt>DataTable<ept id="p2">**</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Main()`</ph> 方法中，添加一条用于调用 <ph id="ph2">`ParseCSVFile()`</ph> 方法的语句：</source>
          <target state="new">在 <ph id="ph1">`Main()`</ph> 方法中，添加一条用于调用 <ph id="ph2">`ParseCSVFile()`</ph> 方法的语句：</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>创建用于加载消息列表的函数</source>
          <target state="new">创建用于加载消息列表的函数</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Main()`</ph> 之外，定义 <ph id="ph2">`GenerateMessages()`</ph> 方法，用于接收 <ph id="ph3">`ParseCSVFile()`</ph> 返回的 <bpt id="p1">**</bpt>DataTable<ept id="p1">**</ept> 对象，并将该表加载到强类型化的中转消息列表中。该方法随后返回 <bpt id="p2">**</bpt>List<ept id="p2">**</ept> 对象，如下面的示例所示。</source>
          <target state="new">在 <ph id="ph1">`Main()`</ph> 之外，定义 <ph id="ph2">`GenerateMessages()`</ph> 方法，用于接收 <ph id="ph3">`ParseCSVFile()`</ph> 返回的 <bpt id="p1">**</bpt>DataTable<ept id="p1">**</ept> 对象，并将该表加载到强类型化的中转消息列表中。该方法随后返回 <bpt id="p2">**</bpt>List<ept id="p2">**</ept> 对象，如下面的示例所示。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Main()`</ph> 中，在调用 <ph id="ph2">`ParseCSVFile()`</ph> 后立即添加一条语句，从而以 <ph id="ph3">`ParseCSVFile()`</ph> 的返回值作为参数调用 <ph id="ph4">`GenerateMessages()`</ph> 方法：</source>
          <target state="new">在 <ph id="ph1">`Main()`</ph> 中，在调用 <ph id="ph2">`ParseCSVFile()`</ph> 后立即添加一条语句，从而以 <ph id="ph3">`ParseCSVFile()`</ph> 的返回值作为参数调用 <ph id="ph4">`GenerateMessages()`</ph> 方法：</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>获取用户凭据</source>
          <target state="new">获取用户凭据</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>首先创建三个全局字符串变量，用于保存这些值。在以前的变量声明之后直接声明这些变量，例如：</source>
          <target state="new">首先创建三个全局字符串变量，用于保存这些值。在以前的变量声明之后直接声明这些变量，例如：</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>接下来，创建一个函数，用于接受并存储服务命名空间和 SAS 密钥。在 <ph id="ph1">`Main()`</ph> 之外添加此方法。例如：</source>
          <target state="new">接下来，创建一个函数，用于接受并存储服务命名空间和 SAS 密钥。在 <ph id="ph1">`Main()`</ph> 之外添加此方法。例如：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Main()`</ph> 中，在调用 <ph id="ph2">`GenerateMessages()`</ph> 之下直接添加一条语句以调用 <ph id="ph3">`CollectUserInput()`</ph> 方法：</source>
          <target state="new">在 <ph id="ph1">`Main()`</ph> 中，在调用 <ph id="ph2">`GenerateMessages()`</ph> 之下直接添加一条语句以调用 <ph id="ph3">`CollectUserInput()`</ph> 方法：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>生成解决方案</source>
          <target state="new">生成解决方案</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的“生成”菜单中，单击“生成解决方案”或按 F6 以确认到目前为止工作的准确性。</source>
          <target state="new">在 Visual Studio 的“生成”菜单中，单击“生成解决方案”或按 F6 以确认到目前为止工作的准确性。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>创建管理凭据</source>
          <target state="new">创建管理凭据</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>这是服务总线消息传送功能教程中的第二步。在此步骤中，你可以定义将用于创建共享访问签名 (SAS) 凭据（用于授权应用程序）的管理操作。</source>
          <target state="new">这是服务总线消息传送功能教程中的第二步。在此步骤中，你可以定义将用于创建共享访问签名 (SAS) 凭据（用于授权应用程序）的管理操作。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>创建管理凭据</source>
          <target state="new">创建管理凭据</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>在此步骤中，你可以定义将用于创建共享访问签名 (SAS) 凭据（用于授权应用程序）的管理操作。</source>
          <target state="new">在此步骤中，你可以定义将用于创建共享访问签名 (SAS) 凭据（用于授权应用程序）的管理操作。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>为清楚起见，本教程将所有队列操作置于单独的方法中。在 <ph id="ph1">`Program`</ph> 类中的 <ph id="ph2">`Main()`</ph> 方法之下创建 <ph id="ph3">`Queue()`</ph> 方法。例如：</source>
          <target state="new">为清楚起见，本教程将所有队列操作置于单独的方法中。在 <ph id="ph1">`Program`</ph> 类中的 <ph id="ph2">`Main()`</ph> 方法之下创建 <ph id="ph3">`Queue()`</ph> 方法。例如：</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>下一步是使用 <bpt id="p1">[</bpt>TokenProvider<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.tokenprovider.aspx)</ept> 对象创建 SAS 凭据。此创建方法用于接受在 <ph id="ph1">`CollectUserInput()`</ph> 方法中获取的 SAS 密钥名称和值。将以下代码添加到 <ph id="ph2">`Queue()`</ph> 方法中：</source>
          <target state="new">下一步是使用 <bpt id="p1">[</bpt>TokenProvider<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.tokenprovider.aspx)</ept> 对象创建 SAS 凭据。此创建方法用于接受在 <ph id="ph1">`CollectUserInput()`</ph> 方法中获取的 SAS 密钥名称和值。将以下代码添加到 <ph id="ph2">`Queue()`</ph> 方法中：</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>创建命名空间管理器</source>
          <target state="new">创建命名空间管理器</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>创建新的命名空间管理对象，以包含在在上一步中获得的命名空间名称和管理凭据的 URI 作为参数。直接在上一步中添加的代码之下添加以下代码：</source>
          <target state="new">创建新的命名空间管理对象，以包含在在上一步中获得的命名空间名称和管理凭据的 URI 作为参数。直接在上一步中添加的代码之下添加以下代码：</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>示例</source>
          <target state="new">示例</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>此时，你的代码应如下所示：</source>
          <target state="new">此时，你的代码应如下所示：</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>在下一步中，你可以创建要向其发送消息的队列。</source>
          <target state="new">在下一步中，你可以创建要向其发送消息的队列。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>将消息发送到队列</source>
          <target state="new">将消息发送到队列</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>在此步骤中，你将创建一个队列，然后将中转消息列表中包含的消息发送到该队列。</source>
          <target state="new">在此步骤中，你将创建一个队列，然后将中转消息列表中包含的消息发送到该队列。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>创建队列并向队列发送消息</source>
          <target state="new">创建队列并向队列发送消息</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>首先创建队列。例如，将其命名为 <ph id="ph1">`myQueue`</ph>，并在上一步中添加的管理操作后面直接声明它：</source>
          <target state="new">首先创建队列。例如，将其命名为 <ph id="ph1">`myQueue`</ph>，并在上一步中添加的管理操作后面直接声明它：</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Queue()`</ph> 方法中，使用新创建的服务总线 URI 作为参数创建一个消息工厂对象。在上一步中添加的管理操作后面直接添加以下代码：</source>
          <target state="new">在 <ph id="ph1">`Queue()`</ph> 方法中，使用新创建的服务总线 URI 作为参数创建一个消息工厂对象。在上一步中添加的管理操作后面直接添加以下代码：</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>接下来，使用 <bpt id="p1">[</bpt>QueueClient<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.aspx)</ept> 类创建队列对象。在最后一步中添加的代码后直接添加以下代码：</source>
          <target state="new">接下来，使用 <bpt id="p1">[</bpt>QueueClient<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.aspx)</ept> 类创建队列对象。在最后一步中添加的代码后直接添加以下代码：</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>然后添加以下代码，用于循环遍历你之前创建的中转消息列表，并将其中每条消息发送到队列。在上一步中的 <ph id="ph1">`CreateQueueClient()`</ph> 声明后直接添加以下代码：</source>
          <target state="new">然后添加以下代码，用于循环遍历你之前创建的中转消息列表，并将其中每条消息发送到队列。在上一步中的 <ph id="ph1">`CreateQueueClient()`</ph> 声明后直接添加以下代码：</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>从队列接收消息</source>
          <target state="new">从队列接收消息</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>在此步骤中，你将从上一步中创建的队列获取消息列表。</source>
          <target state="new">在此步骤中，你将从上一步中创建的队列获取消息列表。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>创建接收器并从队列接收消息</source>
          <target state="new">创建接收器并从队列接收消息</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Queue()`</ph> 方法中，使用 <bpt id="p1">[</bpt>Microsoft.ServiceBus.Messaging.QueueClient.Receive<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh322678.aspx)</ept> 方法循环访问队列和接收消息，并将每条消息输出到控制台。在上一步中添加的代码之下直接添加以下代码：</source>
          <target state="new">在 <ph id="ph1">`Queue()`</ph> 方法中，使用 <bpt id="p1">[</bpt>Microsoft.ServiceBus.Messaging.QueueClient.Receive<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh322678.aspx)</ept> 方法循环访问队列和接收消息，并将每条消息输出到控制台。在上一步中添加的代码之下直接添加以下代码：</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>结束 <ph id="ph1">`Queue()`</ph> 方法并清理资源</source>
          <target state="new">结束 <ph id="ph1">`Queue()`</ph> 方法并清理资源</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>在前面的代码之下直接添加以下代码，以清理消息工厂和队列资源：</source>
          <target state="new">在前面的代码之下直接添加以下代码，以清理消息工厂和队列资源：</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>调用 <ph id="ph1">`Queue()`</ph> 方法</source>
          <target state="new">调用 <ph id="ph1">`Queue()`</ph> 方法</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>最后一步是添加用于从 <ph id="ph1">`Main()`</ph> 调用 <ph id="ph2">`Queue()`</ph> 方法的代码。在 Main() 的末尾添加以下突出显示的行：</source>
          <target state="new">最后一步是添加用于从 <ph id="ph1">`Main()`</ph> 调用 <ph id="ph2">`Queue()`</ph> 方法的代码。在 Main() 的末尾添加以下突出显示的行：</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>示例</source>
          <target state="new">示例</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>下面的代码包含完整的 <bpt id="p1">**</bpt>QueueSample<ept id="p1">**</ept> 应用程序。</source>
          <target state="new">下面的代码包含完整的 <bpt id="p1">**</bpt>QueueSample<ept id="p1">**</ept> 应用程序。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>生成并运行 QueueSample 应用程序</source>
          <target state="new">生成并运行 QueueSample 应用程序</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>完成上述步骤后，即可生成并运行 <bpt id="p1">**</bpt>QueueSample<ept id="p1">**</ept> 应用程序。</source>
          <target state="new">完成上述步骤后，即可生成并运行 <bpt id="p1">**</bpt>QueueSample<ept id="p1">**</ept> 应用程序。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>生成 QueueSample 应用程序</source>
          <target state="new">生成 QueueSample 应用程序</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中的“生成”菜单上，单击“生成解决方案”，或按 F6。如果遇到错误，请验证你的代码是否正确以上一步末尾提供的完整示例为基础。</source>
          <target state="new">在 Visual Studio 中的“生成”菜单上，单击“生成解决方案”，或按 F6。如果遇到错误，请验证你的代码是否正确以上一步末尾提供的完整示例为基础。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>运行 QueueSample 应用程序</source>
          <target state="new">运行 QueueSample 应用程序</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>运行该应用程序之前，必须确保已创建服务命名空间并已获得 SAS 密钥，如<bpt id="p1">[</bpt>简介和先决条件<ept id="p1">](#introduction-and-prerequisites)</ept>中所述。</source>
          <target state="new">运行该应用程序之前，必须确保已创建服务命名空间并已获得 SAS 密钥，如<bpt id="p1">[</bpt>简介和先决条件<ept id="p1">](#introduction-and-prerequisites)</ept>中所述。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>打开浏览器并转到 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>。</source>
          <target state="new">打开浏览器并转到 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>单击左侧树中的“服务总线”。</source>
          <target state="new">单击左侧树中的“服务总线”。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>单击要使用的命名空间的名称。在页面底部，单击“连接信息”。记下包含 SAS 密钥的连接字符串或将其复制到剪贴板。</source>
          <target state="new">单击要使用的命名空间的名称。在页面底部，单击“连接信息”。记下包含 SAS 密钥的连接字符串或将其复制到剪贴板。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中的“调试”菜单中，单击“启动调试”，或按 F5。出现提示时，输入服务命名空间的名称，以及在上一步中获取的密钥。</source>
          <target state="new">在 Visual Studio 中的“调试”菜单中，单击“启动调试”，或按 F5。出现提示时，输入服务命名空间的名称，以及在上一步中获取的密钥。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>本教程介绍了如何使用服务总线中转消息传送功能构建服务总线客户端应用程序和服务。有关使用服务总线<bpt id="p1">[</bpt>中继消息传送<ept id="p1">](service-bus-messaging-overview.md/#Relayed-messaging)</ept>的类似教程，请参阅<bpt id="p2">[</bpt>服务总线中继消息传送教程<ept id="p2">](service-bus-relay-tutorial.md)</ept>。</source>
          <target state="new">本教程介绍了如何使用服务总线中转消息传送功能构建服务总线客户端应用程序和服务。有关使用服务总线<bpt id="p1">[</bpt>中继消息传送<ept id="p1">](service-bus-messaging-overview.md/#Relayed-messaging)</ept>的类似教程，请参阅<bpt id="p2">[</bpt>服务总线中继消息传送教程<ept id="p2">](service-bus-relay-tutorial.md)</ept>。</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>若要了解有关<bpt id="p1">[</bpt>服务总线<ept id="p1">](/home/features/messaging)</ept>的详细信息，请参阅以下主题。</source>
          <target state="new">若要了解有关<bpt id="p1">[</bpt>服务总线<ept id="p1">](/home/features/messaging)</ept>的详细信息，请参阅以下主题。</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>服务总线消息传送概述</source>
          <target state="new">服务总线消息传送概述</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>服务总线基础知识</source>
          <target state="new">服务总线基础知识</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>服务总线体系结构</source>
          <target state="new">服务总线体系结构</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>