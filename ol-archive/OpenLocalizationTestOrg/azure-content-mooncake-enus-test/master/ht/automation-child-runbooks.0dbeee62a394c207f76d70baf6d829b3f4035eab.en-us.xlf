<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b1da1eb28167cf996a28d8e3959a20cf07a3d41</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure 自动化中的子 Runbook | Azure</source>
          <target state="new">Azure 自动化中的子 Runbook | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>介绍从 Azure 自动化中的一个 Runbook 启动另一个 Runbook 并在它们之间共享信息的不同方法。</source>
          <target state="new">介绍从 Azure 自动化中的一个 Runbook 启动另一个 Runbook 并在它们之间共享信息的不同方法。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure 自动化中的子 Runbook</source>
          <target state="new">Azure 自动化中的子 Runbook</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>在 Azure 自动化中，最佳实践之一是编写可重用、模块化且提供可由其他 Runbook 使用的离散功能的 Runbook。父 Runbook 通常会调用一个或多个子 Runbook 来执行所需的功能。可通过两种方法调用子 Runbook，每种方法都有明显不同的差异，你应该了解这些差异，以确定哪种方法最适合你的方案。</source>
          <target state="new">在 Azure 自动化中，最佳实践之一是编写可重用、模块化且提供可由其他 Runbook 使用的离散功能的 Runbook。父 Runbook 通常会调用一个或多个子 Runbook 来执行所需的功能。可通过两种方法调用子 Runbook，每种方法都有明显不同的差异，你应该了解这些差异，以确定哪种方法最适合你的方案。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>使用内联执行调用子 Runbook</source>
          <target state="new">使用内联执行调用子 Runbook</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>若要从另一个 Runbook 调用某个内嵌 Runbook，请使用被调用 Runbook 的名称并提供其参数值，就像使用活动或 cmdlet 时一样。同一自动化帐户中的所有 Runbook 可按此方式相互使用。父 Runbook 将等待子 Runbook 完成，然后转移到下一行，并直接向父级返回任何输出。</source>
          <target state="new">若要从另一个 Runbook 调用某个内嵌 Runbook，请使用被调用 Runbook 的名称并提供其参数值，就像使用活动或 cmdlet 时一样。同一自动化帐户中的所有 Runbook 可按此方式相互使用。父 Runbook 将等待子 Runbook 完成，然后转移到下一行，并直接向父级返回任何输出。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>在调用某个内联 Runbook 时，它将在与父 Runbook 所在的同一个作业中运行。父 Runbook 运行的子 Runbook 的作业历史记录中不会提供相应的指示。子 Runbook 发生的任何异常和任何流输出将与父级关联。这减少了作业数，简化了作业的跟踪，并便于排查自从子 Runbook 引发任何异常以及将其流输出与父作业关联以来发生的问题。</source>
          <target state="new">在调用某个内联 Runbook 时，它将在与父 Runbook 所在的同一个作业中运行。父 Runbook 运行的子 Runbook 的作业历史记录中不会提供相应的指示。子 Runbook 发生的任何异常和任何流输出将与父级关联。这减少了作业数，简化了作业的跟踪，并便于排查自从子 Runbook 引发任何异常以及将其流输出与父作业关联以来发生的问题。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>发布某个 Runbook 时，必须事先发布它所调用的任何子 Runbook。这是因为，在编译 Runbook 时，Azure 自动化将会生成与任何子 Runbook 的关联。如果未进行这种关联，父 Runbook 看似发布正常，但在启动时会生成异常。如果发生这种情况，你可以重新发布父 Runbook，以正确引用子 Runbook。如果由于已创建关联而更改了任何子 Runbook，则你不需重新发布父 Runbook。</source>
          <target state="new">发布某个 Runbook 时，必须事先发布它所调用的任何子 Runbook。这是因为，在编译 Runbook 时，Azure 自动化将会生成与任何子 Runbook 的关联。如果未进行这种关联，父 Runbook 看似发布正常，但在启动时会生成异常。如果发生这种情况，你可以重新发布父 Runbook，以正确引用子 Runbook。如果由于已创建关联而更改了任何子 Runbook，则你不需重新发布父 Runbook。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>调用内联的子 Runbook 的参数可以是任意数据类型（包括复杂对象），并且不会进行 <bpt id="p1">[</bpt>JSON 序列化<ept id="p1">](/documentation/articles/automation-starting-a-runbook#runbook-parameters)</ept>，因为当你使用 Azure 管理门户或 Start-AzureAutomationRunbook cmdlet 启动 Runbook 时会进行这种序列化。</source>
          <target state="new">调用内联的子 Runbook 的参数可以是任意数据类型（包括复杂对象），并且不会进行 <bpt id="p1">[</bpt>JSON 序列化<ept id="p1">](/documentation/articles/automation-starting-a-runbook#runbook-parameters)</ept>，因为当你使用 Azure 管理门户或 Start-AzureAutomationRunbook cmdlet 启动 Runbook 时会进行这种序列化。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>示例</source>
          <target state="new">示例</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>下面的示例将调用一个测试子 Runbook，该 Runbook 接受三个参数：一个复杂对象、一个整数和一个布尔值。该子 Runbook 的输出将分配到某个变量。在本示例中，子 Runbook 属于 PowerShell 工作流 Runbook</source>
          <target state="new">下面的示例将调用一个测试子 Runbook，该 Runbook 接受三个参数：一个复杂对象、一个整数和一个布尔值。该子 Runbook 的输出将分配到某个变量。在本示例中，子 Runbook 属于 PowerShell 工作流 Runbook</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>使用 cmdlet 启动子 Runbook</source>
          <target state="new">使用 cmdlet 启动子 Runbook</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>可以根据<bpt id="p1">[</bpt>使用 Windows PowerShell 启动 Runbook<ept id="p1">](/documentation/articles/automation-starting-a-runbook#starting-a-runbook-with-windows-powershell)</ept> 中所述，使用 <bpt id="p2">[</bpt>Start-AzureAutomationRunbook<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/dn690259.aspx)</ept> cmdlet 来启动 Runbook。当你从 cmdlet 启动子 Runbook 时，为该子 Runbook 创建作业后，父 Runbook 将立即转移到下一行。如果需要从 Runbook 中检索任何输出，则需要使用 <bpt id="p3">[</bpt>Get-AzureAutomationJobOutput<ept id="p3">](http://msdn.microsoft.com/zh-cn/library/dn690268.aspx)</ept> 访问作业。</source>
          <target state="new">可以根据<bpt id="p1">[</bpt>使用 Windows PowerShell 启动 Runbook<ept id="p1">](/documentation/articles/automation-starting-a-runbook#starting-a-runbook-with-windows-powershell)</ept> 中所述，使用 <bpt id="p2">[</bpt>Start-AzureAutomationRunbook<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/dn690259.aspx)</ept> cmdlet 来启动 Runbook。当你从 cmdlet 启动子 Runbook 时，为该子 Runbook 创建作业后，父 Runbook 将立即转移到下一行。如果需要从 Runbook 中检索任何输出，则需要使用 <bpt id="p3">[</bpt>Get-AzureAutomationJobOutput<ept id="p3">](http://msdn.microsoft.com/zh-cn/library/dn690268.aspx)</ept> 访问作业。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>使用 cmdlet 启动的子 Runbook 的作业将在父 Runbook 的某个独立作业中运行。这会导致调用内联脚本的作业增多，并使这些作业更难以跟踪。不过，父级可以启动多个子 Runbook，而无需等待每个子 Runbook 完成。对于调用内嵌子 Runbook 的同一种并行执行，父 Runbook 需要使用并行关键字。</source>
          <target state="new">使用 cmdlet 启动的子 Runbook 的作业将在父 Runbook 的某个独立作业中运行。这会导致调用内联脚本的作业增多，并使这些作业更难以跟踪。不过，父级可以启动多个子 Runbook，而无需等待每个子 Runbook 完成。对于调用内嵌子 Runbook 的同一种并行执行，父 Runbook 需要使用并行关键字。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>使用 cmdlet 启动的子 Runbook 的参数以哈希表形式提供，如 <bpt id="p1">[</bpt>Runbook 参数<ept id="p1">](/documentation/articles/automation-starting-a-runbook#runbook-parameters)</ept>中所述。只能使用简单数据类型。如果 Runbook 的参数使用复杂数据类型，则必须内联调用该 Runbook。</source>
          <target state="new">使用 cmdlet 启动的子 Runbook 的参数以哈希表形式提供，如 <bpt id="p1">[</bpt>Runbook 参数<ept id="p1">](/documentation/articles/automation-starting-a-runbook#runbook-parameters)</ept>中所述。只能使用简单数据类型。如果 Runbook 的参数使用复杂数据类型，则必须内联调用该 Runbook。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>示例</source>
          <target state="new">示例</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>以下示例将启动一个包含参数的子 Runbook，然后等待其完成。完成后，父 Runbook 的作业将收集其输出。</source>
          <target state="new">以下示例将启动一个包含参数的子 Runbook，然后等待其完成。完成后，父 Runbook 的作业将收集其输出。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Start-ChildRunbook<ept id="p1">](http://gallery.technet.microsoft.com/scriptcenter/Start-Azure-Automation-1ac858a9)</ept> 是 TechNet 库中提供的一个帮助器 Runbook，用于从 cmdlet 启动 Runbook。使用该 Runbook，你可以选择等待子 Runbook 完成，然后检索其输出。除了可在你自己的 Azure 自动化环境中使用此 Runbook 以外，还可以使用此 Runbook 作为参考来处理 Runbook 和使用 cmdlet 执行作业。该帮助器 Runbook 本身必须以内嵌方式调用，因为它要求使用一个哈希表参数来接受子 Runbook 的参数值。</source>
          <target state="new"><bpt id="p1">[</bpt>Start-ChildRunbook<ept id="p1">](http://gallery.technet.microsoft.com/scriptcenter/Start-Azure-Automation-1ac858a9)</ept> 是 TechNet 库中提供的一个帮助器 Runbook，用于从 cmdlet 启动 Runbook。使用该 Runbook，你可以选择等待子 Runbook 完成，然后检索其输出。除了可在你自己的 Azure 自动化环境中使用此 Runbook 以外，还可以使用此 Runbook 作为参考来处理 Runbook 和使用 cmdlet 执行作业。该帮助器 Runbook 本身必须以内嵌方式调用，因为它要求使用一个哈希表参数来接受子 Runbook 的参数值。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>子 Runbook 调用方法的比较</source>
          <target state="new">子 Runbook 调用方法的比较</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>下表汇总了从一个 Runbook 调用另一个 Runbook 的两种方法的差异。</source>
          <target state="new">下表汇总了从一个 Runbook 调用另一个 Runbook 的两种方法的差异。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>内联</source>
          <target state="new">内联</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Cmdlet</source>
          <target state="new">Cmdlet</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>作业</source>
          <target state="new">作业</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>子 Runbook 在父级所在的同一个作业中运行。</source>
          <target state="new">子 Runbook 在父级所在的同一个作业中运行。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>为子 Runbook 创建单独的作业。</source>
          <target state="new">为子 Runbook 创建单独的作业。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>执行</source>
          <target state="new">执行</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>父 Runbook 等待子 Runbook 完成，然后继续。</source>
          <target state="new">父 Runbook 等待子 Runbook 完成，然后继续。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>子 Runbook 启动后，父 Runbook 立即继续。</source>
          <target state="new">子 Runbook 启动后，父 Runbook 立即继续。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>输出</source>
          <target state="new">输出</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>父 Runbook 可以直接从子 Runbook 获取输出。</source>
          <target state="new">父 Runbook 可以直接从子 Runbook 获取输出。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>父 Runbook 必须从子 Runbook 作业检索输出。</source>
          <target state="new">父 Runbook 必须从子 Runbook 作业检索输出。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="new">Parameters</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>子 Runbook 参数的值需单独指定，并且可以使用任意数据类型。</source>
          <target state="new">子 Runbook 参数的值需单独指定，并且可以使用任意数据类型。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>子 Runbook 参数值必须组合成单个哈希表，并且只能包含简单数据类型、数组和利用 JSON 序列化的对象数据类型。</source>
          <target state="new">子 Runbook 参数值必须组合成单个哈希表，并且只能包含简单数据类型、数组和利用 JSON 序列化的对象数据类型。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>自动化帐户</source>
          <target state="new">自动化帐户</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>父 Runbook 只能使用同一自动化帐户中的子 Runbook。</source>
          <target state="new">父 Runbook 只能使用同一自动化帐户中的子 Runbook。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>父 Runbook 可以使用同一 Azure 订阅（甚至还包括不同的订阅，如果你已连接到该订阅的话）中任意自动化帐户内的子 Runbook。</source>
          <target state="new">父 Runbook 可以使用同一 Azure 订阅（甚至还包括不同的订阅，如果你已连接到该订阅的话）中任意自动化帐户内的子 Runbook。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>发布</source>
          <target state="new">发布</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>在发布父 Runbook 之前必须先发布子 Runbook。</source>
          <target state="new">在发布父 Runbook 之前必须先发布子 Runbook。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>必须在启动父 Runbook 前的任意时间发布子 Runbook。</source>
          <target state="new">必须在启动父 Runbook 前的任意时间发布子 Runbook。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>相关文章</source>
          <target state="new">相关文章</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>在 Azure Automation 中启动 Runbook</source>
          <target state="new">在 Azure Automation 中启动 Runbook</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Azure 自动化中的 Runbook 输出和消息</source>
          <target state="new">Azure 自动化中的 Runbook 输出和消息</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>