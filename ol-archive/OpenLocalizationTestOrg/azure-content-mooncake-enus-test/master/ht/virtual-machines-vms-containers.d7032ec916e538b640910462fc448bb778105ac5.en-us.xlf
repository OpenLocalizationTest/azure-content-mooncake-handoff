<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c4fd11bdd9e55577ba96a5d2a682f5c8989ad40</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>虚拟机和容器 | Azure</source>
          <target state="new">虚拟机和容器 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>介绍虚拟机、Docker 和 Linux 容器及其在 Azure 中各自组的使用情况，包括各自的好处以及每种方法的适用情况。</source>
          <target state="new">介绍虚拟机、Docker 和 Linux 容器及其在 Azure 中各自组的使用情况，包括各自的好处以及每种方法的适用情况。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure 中的虚拟机和容器</source>
          <target state="new">Azure 中的虚拟机和容器</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-both-include.md)</ept>]</source>
          <target state="new">[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-both-include.md)</ept>]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure 提供出色的云解决方案，以虚拟机为基础构建（基于物理计算机硬件的模拟），可实现软件部署的灵活移动，以及相比于物理硬件大大优化的资源整合。在过去几年内，Linux 容器技术已显著拓展出了许多可用于开发和管理分布式软件的方式，这在很大程度上要归功于访问容器的 <bpt id="p1">[</bpt>Docker<ept id="p1">](https://www.docker.com)</ept> 方法以及 docker 生态系统。容器中的应用程序代码独立于主机 Azure VM 以及同一 VM 上的其他容器，这样除了 Azure VM 已经提供的灵活性之外，你还能在应用程序级别获得更大的开发和部署灵活性。</source>
          <target state="new">Azure 提供出色的云解决方案，以虚拟机为基础构建（基于物理计算机硬件的模拟），可实现软件部署的灵活移动，以及相比于物理硬件大大优化的资源整合。在过去几年内，Linux 容器技术已显著拓展出了许多可用于开发和管理分布式软件的方式，这在很大程度上要归功于访问容器的 <bpt id="p1">[</bpt>Docker<ept id="p1">](https://www.docker.com)</ept> 方法以及 docker 生态系统。容器中的应用程序代码独立于主机 Azure VM 以及同一 VM 上的其他容器，这样除了 Azure VM 已经提供的灵活性之外，你还能在应用程序级别获得更大的开发和部署灵活性。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>但是，这个新闻已经过时了。<ept id="p1">**</ept> <bpt id="p2">*</bpt>最新<ept id="p2">*</ept> 的新闻是 Azure 可带来更多的 Docker 好处：</source>
          <target state="new"><bpt id="p1">**</bpt>但是，这个新闻已经过时了。<ept id="p1">**</ept> <bpt id="p2">*</bpt>最新<ept id="p2">*</ept> 的新闻是 Azure 可带来更多的 Docker 好处：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>可通过 Azure CLI <bpt id="p1">[</bpt>创建 Docker 主机<ept id="p1">](/documentation/articles/virtual-machines-docker-with-xplat-cli)</ept>。</source>
          <target state="new">可通过 Azure CLI <bpt id="p1">[</bpt>创建 Docker 主机<ept id="p1">](/documentation/articles/virtual-machines-docker-with-xplat-cli)</ept>。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>可与许多专有和开放源配置管理工具集成</source>
          <target state="new">可与许多专有和开放源配置管理工具集成</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>而且由于可通过编程方式在 Azure 上创建 VM 和 Linux 容器，因此还可以使用 VM 和容器<bpt id="p1">*</bpt>协调<ept id="p1">*</ept>工具来创建多组虚拟机 (VM)，并在 Linux 容器和很快即将支持的 <bpt id="p2">[</bpt>Windows 容器<ept id="p2">](https://msdn.microsoft.com/virtualization/windowscontainers/about/about_overview)</ept>中部署应用程序。</source>
          <target state="new">而且由于可通过编程方式在 Azure 上创建 VM 和 Linux 容器，因此还可以使用 VM 和容器<bpt id="p1">*</bpt>协调<ept id="p1">*</ept>工具来创建多组虚拟机 (VM)，并在 Linux 容器和很快即将支持的 <bpt id="p2">[</bpt>Windows 容器<ept id="p2">](https://msdn.microsoft.com/virtualization/windowscontainers/about/about_overview)</ept>中部署应用程序。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>本文不仅从较高水平讨论了这些概念，还包含了很多链接，可帮助你了解与 Azure 上的容器和群集使用相关的详细信息、教程和产品。如果你已了解全部内容，而只是需要这些链接，这些链接就在<bpt id="p1">[</bpt>使用容器的工具<ept id="p1">](#tools-for-working-with-containers)</ept>中。</source>
          <target state="new">本文不仅从较高水平讨论了这些概念，还包含了很多链接，可帮助你了解与 Azure 上的容器和群集使用相关的详细信息、教程和产品。如果你已了解全部内容，而只是需要这些链接，这些链接就在<bpt id="p1">[</bpt>使用容器的工具<ept id="p1">](#tools-for-working-with-containers)</ept>中。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>虚拟机与容器之间的区别</source>
          <target state="new">虚拟机与容器之间的区别</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>虚拟机是在<bpt id="p1">[</bpt>虚拟机监控程序<ept id="p1">](http://zh.wikipedia.org/wiki/Hypervisor)</ept>提供的单独硬件虚拟化环境中运行。在 Azure 中，<bpt id="p2">[</bpt>虚拟机<ept id="p2">](/home/features/virtual-machines/)</ept>服务可为你处理所有事务：你只需选择操作系统并将其配置为按你所需方式运行（或上载你自己的自定义 VM 映像），由此创建虚拟机即可。虚拟机是经过时间考验、“久经沙场”的技术，可使用许多工具来管理操作系统并配置你所安装和运行的应用程序。虚拟机中运行的所有内容对主机操作系统隐藏，而且从虚拟机内运行的应用程序或用户的角度来看，虚拟机似乎是一个自治物理计算机。</source>
          <target state="new">虚拟机是在<bpt id="p1">[</bpt>虚拟机监控程序<ept id="p1">](http://zh.wikipedia.org/wiki/Hypervisor)</ept>提供的单独硬件虚拟化环境中运行。在 Azure 中，<bpt id="p2">[</bpt>虚拟机<ept id="p2">](/home/features/virtual-machines/)</ept>服务可为你处理所有事务：你只需选择操作系统并将其配置为按你所需方式运行（或上载你自己的自定义 VM 映像），由此创建虚拟机即可。虚拟机是经过时间考验、“久经沙场”的技术，可使用许多工具来管理操作系统并配置你所安装和运行的应用程序。虚拟机中运行的所有内容对主机操作系统隐藏，而且从虚拟机内运行的应用程序或用户的角度来看，虚拟机似乎是一个自治物理计算机。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Linux 容器<ept id="p1">](http://en.wikipedia.org/wiki/LXC)</ept>中包括使用 docker 工具创建和托管的对象以及其他方法，不需要或不使用虚拟机监控程序来提供隔离。相反，容器主机会利用 Linux 内核的流程和文件系统隔离功能，仅向容器（及其应用程序）显示特定的内核功能和其自己的隔离文件系统（最低程度上）。从容器内运行的应用程序的角度来看，该容器似乎是一个独特的操作系统实例。包含在容器内的应用程序无法查看该容器以外的流程或其他任何资源。</source>
          <target state="new"><bpt id="p1">[</bpt>Linux 容器<ept id="p1">](http://en.wikipedia.org/wiki/LXC)</ept>中包括使用 docker 工具创建和托管的对象以及其他方法，不需要或不使用虚拟机监控程序来提供隔离。相反，容器主机会利用 Linux 内核的流程和文件系统隔离功能，仅向容器（及其应用程序）显示特定的内核功能和其自己的隔离文件系统（最低程度上）。从容器内运行的应用程序的角度来看，该容器似乎是一个独特的操作系统实例。包含在容器内的应用程序无法查看该容器以外的流程或其他任何资源。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>因为在该隔离和执行模型中，Docker 主机计算机的内核是共享的，而且由于容器的磁盘要求现在不包括整个操作系统，所以容器的启动时间和所需的磁盘存储开销都非常非常少。</source>
          <target state="new">因为在该隔离和执行模型中，Docker 主机计算机的内核是共享的，而且由于容器的磁盘要求现在不包括整个操作系统，所以容器的启动时间和所需的磁盘存储开销都非常非常少。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>这一点很厉害。</source>
          <target state="new">这一点很厉害。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>但是，对于在 Windows 上运行的应用程序，Windows 容器可提供与 Linux 容器相同的好处。Windows 容器支持 Docker 映像格式和 Docker API，但还可以使用 PowerShell 进行管理。两种容器运行时随 Windows 容器、Windows Server 容器和 Hyper-V 容器提供。Hyper-V 容器通过在超级优化虚拟机中托管每个容器提供了附加隔离层。若要了解有关 Windows 容器的详细信息，请参阅<bpt id="p1">[</bpt>关于 Windows 容器<ept id="p1">](https://msdn.microsoft.com/virtualization/windowscontainers/about/about_overview)</ept>。若要在 Azure 中试用 Windows 容器，请参阅 <bpt id="p2">[</bpt>Windows 容器 Azure 快速入门<ept id="p2">](https://msdn.microsoft.com/virtualization/windowscontainers/quick_start/azure_setup)</ept>。</source>
          <target state="new">但是，对于在 Windows 上运行的应用程序，Windows 容器可提供与 Linux 容器相同的好处。Windows 容器支持 Docker 映像格式和 Docker API，但还可以使用 PowerShell 进行管理。两种容器运行时随 Windows 容器、Windows Server 容器和 Hyper-V 容器提供。Hyper-V 容器通过在超级优化虚拟机中托管每个容器提供了附加隔离层。若要了解有关 Windows 容器的详细信息，请参阅<bpt id="p1">[</bpt>关于 Windows 容器<ept id="p1">](https://msdn.microsoft.com/virtualization/windowscontainers/about/about_overview)</ept>。若要在 Azure 中试用 Windows 容器，请参阅 <bpt id="p2">[</bpt>Windows 容器 Azure 快速入门<ept id="p2">](https://msdn.microsoft.com/virtualization/windowscontainers/quick_start/azure_setup)</ept>。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>这一点也很厉害。</source>
          <target state="new">这一点也很厉害。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>是不是好得让人不敢相信？</source>
          <target state="new">是不是好得让人不敢相信？</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>其实，既是又不是。容器和其他任何技术一样，无法像有魔法一般消除分布式应用程序所需的所有繁琐工作。但是同时，容器又的确改变了：</source>
          <target state="new">其实，既是又不是。容器和其他任何技术一样，无法像有魔法一般消除分布式应用程序所需的所有繁琐工作。但是同时，容器又的确改变了：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>应用程序代码进行广泛开发和共享的速度</source>
          <target state="new">应用程序代码进行广泛开发和共享的速度</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>代码测试的速度和可信度</source>
          <target state="new">代码测试的速度和可信度</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>代码部署的速度和可信度</source>
          <target state="new">代码部署的速度和可信度</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>即便如此，请记住，容器是在容器主机（一种操作系统）上和 Azure（指 Azure 虚拟机）中执行。即使已经喜欢容器的设计理念，你仍然需要一个 VM 基础结构用于托管容器，但好处是容器可以在任意 VM 上运行（不过举例来说，容器是否希望 Linux 或 Windows 执行环境将具有重要意义）。</source>
          <target state="new">即便如此，请记住，容器是在容器主机（一种操作系统）上和 Azure（指 Azure 虚拟机）中执行。即使已经喜欢容器的设计理念，你仍然需要一个 VM 基础结构用于托管容器，但好处是容器可以在任意 VM 上运行（不过举例来说，容器是否希望 Linux 或 Windows 执行环境将具有重要意义）。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>容器适合于哪些方面？</source>
          <target state="new">容器适合于哪些方面？</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>它们适用于许多情况，但鼓励（正如执行 <bpt id="p1">[</bpt>Azure 云服务<ept id="p1">](/home/features/cloud-services/)</ept>）创建单一服务、以<bpt id="p2">[</bpt><ept id="p2">微服务]</ept>为导向的分布式应用程序，其中的应用程序设计是基于更多小规模的组合部件，而非基于更大规模、耦合更强的组件。</source>
          <target state="new">它们适用于许多情况，但鼓励（正如执行 <bpt id="p1">[</bpt>Azure 云服务<ept id="p1">](/home/features/cloud-services/)</ept>）创建单一服务、以<bpt id="p2">[</bpt><ept id="p2">微服务]</ept>为导向的分布式应用程序，其中的应用程序设计是基于更多小规模的组合部件，而非基于更大规模、耦合更强的组件。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>在公有云环境（例如 Azure）中尤其如此，你可随时随地租用 VM。你不仅能获得独立且快速的部署和协调工具，还能做出更高效的应用程序基础结构决策。</source>
          <target state="new">在公有云环境（例如 Azure）中尤其如此，你可随时随地租用 VM。你不仅能获得独立且快速的部署和协调工具，还能做出更高效的应用程序基础结构决策。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>例如，当前你可能有一个包含 9 个大规模 Azure VM 的部署，适用于高度可用的分布式应用程序。如果此应用程序的组件可在容器中进行部署，则你可能只能使用 4 个 VM 并将你的应用程序组件部署在 20 个容器内，以实现冗余和负载平衡。</source>
          <target state="new">例如，当前你可能有一个包含 9 个大规模 Azure VM 的部署，适用于高度可用的分布式应用程序。如果此应用程序的组件可在容器中进行部署，则你可能只能使用 4 个 VM 并将你的应用程序组件部署在 20 个容器内，以实现冗余和负载平衡。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>当然，这只是一个示例，但是如果你能在自己的方案中做到这一点，那么就能利用更多容器而非更多 Azure VM 来调整以适应用量尖峰，并能比从前更高效地使用剩余的总体 CPU 负载。</source>
          <target state="new">当然，这只是一个示例，但是如果你能在自己的方案中做到这一点，那么就能利用更多容器而非更多 Azure VM 来调整以适应用量尖峰，并能比从前更高效地使用剩余的总体 CPU 负载。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>此外，还有许多方案不适合于微服务方法；你最了解微服务和容器是否能为你带来帮助。</source>
          <target state="new">此外，还有许多方案不适合于微服务方法；你最了解微服务和容器是否能为你带来帮助。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>容器为开发人员带来的好处</source>
          <target state="new">容器为开发人员带来的好处</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>一般而言，很容易能看出容器技术代表了技术的进步，但还有其他更具体的优点好处。我们以 Docker 容器为例展开讨论。本主题不会立即深入探究 Docker（有关这部分内容，请参阅<bpt id="p1">[</bpt>什么是 Docker？<ept id="p1">](https://www.docker.com/whatisdocker/)</ept>，或查阅<bpt id="p2">[</bpt>wikipedia<ept id="p2">](http://wikipedia.org/wiki/Docker_%28software%29)</ept>），但 Docker 及其生态系统可为开发人员和 IT 专业人士带来巨大好处。</source>
          <target state="new">一般而言，很容易能看出容器技术代表了技术的进步，但还有其他更具体的优点好处。我们以 Docker 容器为例展开讨论。本主题不会立即深入探究 Docker（有关这部分内容，请参阅<bpt id="p1">[</bpt>什么是 Docker？<ept id="p1">](https://www.docker.com/whatisdocker/)</ept>，或查阅<bpt id="p2">[</bpt>wikipedia<ept id="p2">](http://wikipedia.org/wiki/Docker_%28software%29)</ept>），但 Docker 及其生态系统可为开发人员和 IT 专业人士带来巨大好处。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>开发人员很快就会开始喜欢 Docker 容器，因为首先它有助于轻松使用 Linux 容器：</source>
          <target state="new">开发人员很快就会开始喜欢 Docker 容器，因为首先它有助于轻松使用 Linux 容器：</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>他们可以使用简单的增量命令来创建易于部署的固定映像，并可使用 dockerfile 自动构建这些映像。</source>
          <target state="new">他们可以使用简单的增量命令来创建易于部署的固定映像，并可使用 dockerfile 自动构建这些映像。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>通过对<bpt id="p1">[</bpt>公有<ept id="p1">](https://registry.hub.docker.com/)</ept>或<bpt id="p2">[</bpt>私有 docker 注册表<ept id="p2">](/documentation/articles/virtual-machines-docker-registry-on-azure-blob-storage)</ept>使用简单的 <bpt id="p3">[</bpt>Git<ept id="p3">](https://git-scm.com/)</ept> 式推送和拉取命令，就可对这些映像进行共享。</source>
          <target state="new">通过对<bpt id="p1">[</bpt>公有<ept id="p1">](https://registry.hub.docker.com/)</ept>或<bpt id="p2">[</bpt>私有 docker 注册表<ept id="p2">](/documentation/articles/virtual-machines-docker-registry-on-azure-blob-storage)</ept>使用简单的 <bpt id="p3">[</bpt>Git<ept id="p3">](https://git-scm.com/)</ept> 式推送和拉取命令，就可对这些映像进行共享。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>他们可以考虑用单独的应用程序组件来代替计算机</source>
          <target state="new">他们可以考虑用单独的应用程序组件来代替计算机</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>他们可以使用大量适合于 docker 容器的工具以及不同的基础映像。</source>
          <target state="new">他们可以使用大量适合于 docker 容器的工具以及不同的基础映像。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>容器可为运营和 IT 专业人士带来的好处</source>
          <target state="new">容器可为运营和 IT 专业人士带来的好处</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>IT 和运营专家还可以从容器与虚拟机的组合中获益。</source>
          <target state="new">IT 和运营专家还可以从容器与虚拟机的组合中获益。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>包含在容器内的服务独立于 VM 主机执行环境</source>
          <target state="new">包含在容器内的服务独立于 VM 主机执行环境</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>包含在容器内的代码能证实是相同的</source>
          <target state="new">包含在容器内的代码能证实是相同的</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>包含在容器内的服务可快速启动、停止并在开发、测试和生产环境之间快速移动</source>
          <target state="new">包含在容器内的服务可快速启动、停止并在开发、测试和生产环境之间快速移动</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>这些以及其他更多特性对大型企业具有很大的吸引力，这些企业中的专业信息技术组织的工作是将资源（包括纯粹的处理能力）合理分配到多项任务中，这些任务不仅是为了维持业务，更是要提高客户满意度并实现目标。小型企业、ISV 和初创企业也具有完全相同的要求，但他们对此的描述可能有所不同。</source>
          <target state="new">这些以及其他更多特性对大型企业具有很大的吸引力，这些企业中的专业信息技术组织的工作是将资源（包括纯粹的处理能力）合理分配到多项任务中，这些任务不仅是为了维持业务，更是要提高客户满意度并实现目标。小型企业、ISV 和初创企业也具有完全相同的要求，但他们对此的描述可能有所不同。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>虚拟机适合于哪些方面？</source>
          <target state="new">虚拟机适合于哪些方面？</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>虚拟机是云计算的支柱，这一点不会发生改变。如果虚拟机启动速度更慢、磁盘占用空间更大且不能直接映射到微服务体系结构，则它们具有非常重要的好处：</source>
          <target state="new">虚拟机是云计算的支柱，这一点不会发生改变。如果虚拟机启动速度更慢、磁盘占用空间更大且不能直接映射到微服务体系结构，则它们具有非常重要的好处：</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>默认情况下，它们可为主机计算机提供更稳健的默认安全保护</source>
          <target state="new">默认情况下，它们可为主机计算机提供更稳健的默认安全保护</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>它们支持任一种常用的操作系统和应用程序配置</source>
          <target state="new">它们支持任一种常用的操作系统和应用程序配置</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>它们提供长久持续的工具生态系统以用于命令和控制</source>
          <target state="new">它们提供长久持续的工具生态系统以用于命令和控制</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>它们提供执行环境以托管容器</source>
          <target state="new">它们提供执行环境以托管容器</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>最后一项很重要，因为包含在容器内的应用程序仍然需要特定的操作系统和 CPU 类型，具体取决于应用程序的调用。务必要牢记的一点是，在 VM 上安装容器是因为其中包含你希望部署的应用程序；容器不能代替 VM 或操作系统。</source>
          <target state="new">最后一项很重要，因为包含在容器内的应用程序仍然需要特定的操作系统和 CPU 类型，具体取决于应用程序的调用。务必要牢记的一点是，在 VM 上安装容器是因为其中包含你希望部署的应用程序；容器不能代替 VM 或操作系统。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>VM 和容器的高级功能对比</source>
          <target state="new">VM 和容器的高级功能对比</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>下表从非常高的水平描述了 VM 与 Linux 容器之间存在的功能差异类型（没有太多额外工作）。请注意，一些功能可能或多或少都能满足需要，具体取决于你自己的应用程序需求，而且与所有软件一样，额外工作可提供增强的功能支持，在安全性方面尤其如此。</source>
          <target state="new">下表从非常高的水平描述了 VM 与 Linux 容器之间存在的功能差异类型（没有太多额外工作）。请注意，一些功能可能或多或少都能满足需要，具体取决于你自己的应用程序需求，而且与所有软件一样，额外工作可提供增强的功能支持，在安全性方面尤其如此。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>功能</source>
          <target state="new">功能</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>VM</source>
          <target state="new">VM</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>容器</source>
          <target state="new">容器</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>“默认”安全支持</source>
          <target state="new">“默认”安全支持</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>达到更高程度</source>
          <target state="new">达到更高程度</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>程度略低</source>
          <target state="new">程度略低</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>所需的磁盘内存</source>
          <target state="new">所需的磁盘内存</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>完整操作系统加上应用</source>
          <target state="new">完整操作系统加上应用</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>仅限应用要求</source>
          <target state="new">仅限应用要求</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>启动所需时间</source>
          <target state="new">启动所需时间</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>明显更长：操作系统引导和应用程序加载</source>
          <target state="new">明显更长：操作系统引导和应用程序加载</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>明显短很多：仅应用程序需要启动，因为内核已经在运行</source>
          <target state="new">明显短很多：仅应用程序需要启动，因为内核已经在运行</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>可移植性</source>
          <target state="new">可移植性</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>通过适当的准备实现可移植</source>
          <target state="new">通过适当的准备实现可移植</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>在映像格式内可移植；通常更小</source>
          <target state="new">在映像格式内可移植；通常更小</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>映像自动化</source>
          <target state="new">映像自动化</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>相差很大，具体取决于操作系统和应用程序</source>
          <target state="new">相差很大，具体取决于操作系统和应用程序</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Docker 注册表<ept id="p1">](https://registry.hub.docker.com/)</ept>；其他</source>
          <target state="new"><bpt id="p1">[</bpt>Docker 注册表<ept id="p1">](https://registry.hub.docker.com/)</ept>；其他</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>创建和管理多组 VM 和容器</source>
          <target state="new">创建和管理多组 VM 和容器</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>这时候，任何架构师、开发人员或 IT 运营专家可能会想“我可以自动完成所有这些事情；这真的是数据中心即服务！”。</source>
          <target state="new">这时候，任何架构师、开发人员或 IT 运营专家可能会想“我可以自动完成所有这些事情；这真的是数据中心即服务！”。</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>你说得对，的确可以这样，而且有任意数量的系统，你可能已经使用了其中的许多系统，可管理 Azure VM 组和使用脚本（通常使用 <bpt id="p1">[</bpt>CustomScriptingExtension for Windows<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/dn781373.aspx)</ept> 或 <bpt id="p2">[</bpt>CustomScriptingExtension for Linux<ept id="p2">](http://azure.microsoft.com/blog/2014/08/20/automate-linux-vm-customization-tasks-using-customscript-extension/)</ept>）注入自定义代码。你可以（可能已经）使用 PowerShell 或者<bpt id="p3">[</bpt>像这样<ept id="p3">](/documentation/articles/virtual-machines-create-multi-vm-deployment-xplat-cli)</ept>的 Azure CLI 实现 Azure 自动部署。</source>
          <target state="new">你说得对，的确可以这样，而且有任意数量的系统，你可能已经使用了其中的许多系统，可管理 Azure VM 组和使用脚本（通常使用 <bpt id="p1">[</bpt>CustomScriptingExtension for Windows<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/dn781373.aspx)</ept> 或 <bpt id="p2">[</bpt>CustomScriptingExtension for Linux<ept id="p2">](http://azure.microsoft.com/blog/2014/08/20/automate-linux-vm-customization-tasks-using-customscript-extension/)</ept>）注入自定义代码。你可以（可能已经）使用 PowerShell 或者<bpt id="p3">[</bpt>像这样<ept id="p3">](/documentation/articles/virtual-machines-create-multi-vm-deployment-xplat-cli)</ept>的 Azure CLI 实现 Azure 自动部署。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>随后，这些功能通常迁移到 <bpt id="p1">[</bpt>Puppet<ept id="p1">](https://puppetlabs.com/)</ept> 和 <bpt id="p2">[</bpt>Chef<ept id="p2">](https://www.chef.io/)</ept> 等工具，以实现大规模的自动创建和配置 VM。（此处有一些链接指向<bpt id="p3">[</bpt>在 Azure 中使用这些工具<ept id="p3">](#tools-for-working-with-containers)</ept>的说明。）</source>
          <target state="new">随后，这些功能通常迁移到 <bpt id="p1">[</bpt>Puppet<ept id="p1">](https://puppetlabs.com/)</ept> 和 <bpt id="p2">[</bpt>Chef<ept id="p2">](https://www.chef.io/)</ept> 等工具，以实现大规模的自动创建和配置 VM。（此处有一些链接指向<bpt id="p3">[</bpt>在 Azure 中使用这些工具<ept id="p3">](#tools-for-working-with-containers)</ept>的说明。）</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>部署和管理整个组的 Azure VM 和容器</source>
          <target state="new">部署和管理整个组的 Azure VM 和容器</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>有多个常用系统可部署整个组的 VM，并在其上安装 Docker（或其他 Linux 容器主机系统）作为可自动化组。有关直接链接，请参阅下文的<bpt id="p1">[</bpt>容器和工具<ept id="p1">](#containers-and-vm-technologies)</ept>节。有许多系统都或多或少能实现这一点，此列表不能尽录。根据你的技能组合和具体情况，它们可能有用，也可能不发挥作用。</source>
          <target state="new">有多个常用系统可部署整个组的 VM，并在其上安装 Docker（或其他 Linux 容器主机系统）作为可自动化组。有关直接链接，请参阅下文的<bpt id="p1">[</bpt>容器和工具<ept id="p1">](#containers-and-vm-technologies)</ept>节。有许多系统都或多或少能实现这一点，此列表不能尽录。根据你的技能组合和具体情况，它们可能有用，也可能不发挥作用。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Docker 有自己的 VM 创建工具集 (<bpt id="p1">[</bpt>docker-machine<ept id="p1">](/documentation/articles/virtual-machines-docker-machine)</ept>) 和一个负载平衡、docker-container 群集管理工具 (<bpt id="p2">[</bpt>swarm<ept id="p2">](/documentation/articles/virtual-machines-docker-swarm)</ept>)。此外，<bpt id="p3">[</bpt>Azure Docker VM 扩展程序<ept id="p3">](https://github.com/Azure/azure-docker-extension/blob/master/README.md)</ept>附带了默认的 <bpt id="p4">[</bpt><ph id="ph1">`docker-compose`</ph><ept id="p4">](https://docs.docker.com/compose/)</ept> 支持，此功能可在多个容器内部署已配置的应用程序容器。</source>
          <target state="new">Docker 有自己的 VM 创建工具集 (<bpt id="p1">[</bpt>docker-machine<ept id="p1">](/documentation/articles/virtual-machines-docker-machine)</ept>) 和一个负载平衡、docker-container 群集管理工具 (<bpt id="p2">[</bpt>swarm<ept id="p2">](/documentation/articles/virtual-machines-docker-swarm)</ept>)。此外，<bpt id="p3">[</bpt>Azure Docker VM 扩展程序<ept id="p3">](https://github.com/Azure/azure-docker-extension/blob/master/README.md)</ept>附带了默认的 <bpt id="p4">[</bpt><ph id="ph1">`docker-compose`</ph><ept id="p4">](https://docs.docker.com/compose/)</ept> 支持，此功能可在多个容器内部署已配置的应用程序容器。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>另外，你还可以尝试使用 <bpt id="p1">[</bpt>Mesosphere 的数据中心操作系统 (DCOS)<ept id="p1">](http://docs.mesosphere.com/install/azurecluster/)</ept>。DCOS 基于开放源 <bpt id="p2">[</bpt>mesos<ept id="p2">](http://mesos.apache.org/)</ept>“分布式系统内核”，有助于你将数据中心视为一个可寻址服务进行处理。DCOS 拥有适合于多个重要系统（<bpt id="p3">[</bpt>Spark<ept id="p3">](http://spark.apache.org/)</ept> 和 <bpt id="p4">[</bpt>Kafka<ept id="p4">](http://kafka.apache.org/)</ept> 及其他）的内置程序包，以及 <bpt id="p5">[</bpt>Marathon<ept id="p5">](https://mesosphere.github.io/marathon/)</ept>（一种容器控制系统）和 <bpt id="p6">[</bpt>Chronos<ept id="p6">](https://mesosphere.github.io/chronos/)</ept>（一种分布式计划程序）等内置服务。Mesos 是借鉴了从 Twitter、AirBnb 和其他网络级企业学到的经验。</source>
          <target state="new">另外，你还可以尝试使用 <bpt id="p1">[</bpt>Mesosphere 的数据中心操作系统 (DCOS)<ept id="p1">](http://docs.mesosphere.com/install/azurecluster/)</ept>。DCOS 基于开放源 <bpt id="p2">[</bpt>mesos<ept id="p2">](http://mesos.apache.org/)</ept>“分布式系统内核”，有助于你将数据中心视为一个可寻址服务进行处理。DCOS 拥有适合于多个重要系统（<bpt id="p3">[</bpt>Spark<ept id="p3">](http://spark.apache.org/)</ept> 和 <bpt id="p4">[</bpt>Kafka<ept id="p4">](http://kafka.apache.org/)</ept> 及其他）的内置程序包，以及 <bpt id="p5">[</bpt>Marathon<ept id="p5">](https://mesosphere.github.io/marathon/)</ept>（一种容器控制系统）和 <bpt id="p6">[</bpt>Chronos<ept id="p6">](https://mesosphere.github.io/chronos/)</ept>（一种分布式计划程序）等内置服务。Mesos 是借鉴了从 Twitter、AirBnb 和其他网络级企业学到的经验。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>另外，<bpt id="p1">[</bpt>kubernetes<ept id="p1">](http://azure.microsoft.com/blog/2014/08/28/hackathon-with-kubernetes-on-azure)</ept> 是一种用于 VM 和容器组管理的开放源系统，借鉴了从 Google 学习的经验。你甚至可以将 <bpt id="p2">[</bpt>kubernetes 与 weave 配合使用，以提供网络支持<ept id="p2">](https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/coreos/azure/README.md#kubernetes-on-azure-with-coreos-and-weave)</ept>。</source>
          <target state="new">另外，<bpt id="p1">[</bpt>kubernetes<ept id="p1">](http://azure.microsoft.com/blog/2014/08/28/hackathon-with-kubernetes-on-azure)</ept> 是一种用于 VM 和容器组管理的开放源系统，借鉴了从 Google 学习的经验。你甚至可以将 <bpt id="p2">[</bpt>kubernetes 与 weave 配合使用，以提供网络支持<ept id="p2">](https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/coreos/azure/README.md#kubernetes-on-azure-with-coreos-and-weave)</ept>。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Deis<ept id="p1">](http://deis.io/overview/)</ept> 是一种开放源“平台即服务”(PaaS)，可帮助在你自己的服务器上轻松部署和管理应用程序。Deis 构建在 Docker 和 CoreOS 的基础之上，可提供轻型 PaaS，其中包含一个受 Heroku 启发的工作流。</source>
          <target state="new"><bpt id="p1">[</bpt>Deis<ept id="p1">](http://deis.io/overview/)</ept> 是一种开放源“平台即服务”(PaaS)，可帮助在你自己的服务器上轻松部署和管理应用程序。Deis 构建在 Docker 和 CoreOS 的基础之上，可提供轻型 PaaS，其中包含一个受 Heroku 启发的工作流。</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CoreOS<ept id="p1">](/documentation/articles/virtual-machines-linux-coreos-how-to)</ept> 是一种 Linux 分发，可提供优化的占用空间和 Docker 支持，且具有名为 <bpt id="p2">[</bpt>rkt<ept id="p2">](https://github.com/coreos/rkt)</ept> 的自有容器系统，还有一个名为 <bpt id="p3">[</bpt>fleet<ept id="p3">](/documentation/articles/virtual-machines-linux-coreos-fleet-get-started)</ept> 的容器组管理工具。</source>
          <target state="new"><bpt id="p1">[</bpt>CoreOS<ept id="p1">](/documentation/articles/virtual-machines-linux-coreos-how-to)</ept> 是一种 Linux 分发，可提供优化的占用空间和 Docker 支持，且具有名为 <bpt id="p2">[</bpt>rkt<ept id="p2">](https://github.com/coreos/rkt)</ept> 的自有容器系统，还有一个名为 <bpt id="p3">[</bpt>fleet<ept id="p3">](/documentation/articles/virtual-machines-linux-coreos-fleet-get-started)</ept> 的容器组管理工具。</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Ubuntu 是另一个非常受欢迎的 Linux 分发，可以非常好地支持 Docker，还支持 <bpt id="p1">[</bpt>Linux（LXC 式）群集<ept id="p1">](https://help.ubuntu.com/lts/serverguide/lxc.html)</ept>。</source>
          <target state="new">Ubuntu 是另一个非常受欢迎的 Linux 分发，可以非常好地支持 Docker，还支持 <bpt id="p1">[</bpt>Linux（LXC 式）群集<ept id="p1">](https://help.ubuntu.com/lts/serverguide/lxc.html)</ept>。</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>使用 Azure VM 和容器所需的工具</source>
          <target state="new">使用 Azure VM 和容器所需的工具</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>使用容器和 Azure VM 时需借助工具。本节仅列出了部分与容器和组相关的最有用或最重要的概念和工具，以及与其搭配使用的更大配置和协调工具。</source>
          <target state="new">使用容器和 Azure VM 时需借助工具。本节仅列出了部分与容器和组相关的最有用或最重要的概念和工具，以及与其搭配使用的更大配置和协调工具。</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>此领域正迅速发生着令人惊奇的变化，尽管我们尽最大努力使本主题及其中的链接保持最新，依然无法做到详尽。请确保搜索有兴趣的科目，以便掌握最新动态！</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>此领域正迅速发生着令人惊奇的变化，尽管我们尽最大努力使本主题及其中的链接保持最新，依然无法做到详尽。请确保搜索有兴趣的科目，以便掌握最新动态！</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>容器和 VM 技术</source>
          <target state="new">容器和 VM 技术</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>部分 Linux 容器技术：</source>
          <target state="new">部分 Linux 容器技术：</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Docker</source>
          <target state="new">Docker</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>LXC</source>
          <target state="new">LXC</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CoreOS 和 rkt</source>
          <target state="new">CoreOS 和 rkt</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>开放容器项目</source>
          <target state="new">开放容器项目</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>RancherOS</source>
          <target state="new">RancherOS</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Windows 容器链接：</source>
          <target state="new">Windows 容器链接：</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Windows 容器</source>
          <target state="new">Windows 容器</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Visual Studio Docker 链接：</source>
          <target state="new">Visual Studio Docker 链接：</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015 RC Tools for Docker - 预览版</source>
          <target state="new">Visual Studio 2015 RC Tools for Docker - 预览版</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Docker 工具：</source>
          <target state="new">Docker 工具：</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Docker 后台程序</source>
          <target state="new">Docker 后台程序</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Docker 客户端</source>
          <target state="new">Docker 客户端</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Windows Docker Client on Chocolatey</source>
          <target state="new">Windows Docker Client on Chocolatey</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Docker 安装说明</source>
          <target state="new">Docker 安装说明</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Azure 上的 Docker：</source>
          <target state="new">Azure 上的 Docker：</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>适用于 Azure 上 的 Linux 的 Docker VM 扩展</source>
          <target state="new">适用于 Azure 上 的 Linux 的 Docker VM 扩展</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Azure Docker VM 扩展用户指南</source>
          <target state="new">Azure Docker VM 扩展用户指南</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>从 Azure 命令行界面 (Azure CLI) 使用 Docker VM 扩展</source>
          <target state="new">从 Azure 命令行界面 (Azure CLI) 使用 Docker VM 扩展</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>如何在 Azure 上使用 docker-machine</source>
          <target state="new">如何在 Azure 上使用 docker-machine</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>如何在 Azure 上将 docker 与 swarm 一起使用</source>
          <target state="new">如何在 Azure 上将 docker 与 swarm 一起使用</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>在 Azure 上使用 Docker 和 Compose 入门</source>
          <target state="new">在 Azure 上使用 Docker 和 Compose 入门</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>对包含在容器内的应用程序的 <ph id="ph1">`compose`</ph><ept id="p1">](https://github.com/Azure/azure-docker-extension#11-public-configuration-keys)</ept> 提供内置支持</source>
          <target state="new"><bpt id="p1">[</bpt>对包含在容器内的应用程序的 <ph id="ph1">`compose`</ph><ept id="p1">](https://github.com/Azure/azure-docker-extension#11-public-configuration-keys)</ept> 提供内置支持</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>在 Azure 上实施 Docker 专有注册表</source>
          <target state="new">在 Azure 上实施 Docker 专有注册表</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Linux 分发和 Azure 示例：</source>
          <target state="new">Linux 分发和 Azure 示例：</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CoreOS</source>
          <target state="new">CoreOS</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>配置、群集管理和容器协调：</source>
          <target state="new">配置、群集管理和容器协调：</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CoreOS 上的 Fleet</source>
          <target state="new">CoreOS 上的 Fleet</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Kubernetes</source>
          <target state="new">Kubernetes</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>使用 CoreOS 和 Weave 实现 Kubernetes 群集部署自动化的完整指南</source>
          <target state="new">使用 CoreOS 和 Weave 实现 Kubernetes 群集部署自动化的完整指南</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Kubernetes 可视化工具</source>
          <target state="new">Kubernetes 可视化工具</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Mesos</source>
          <target state="new">Mesos</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Mesosphere 的数据中心操作系统 (DCOS)</source>
          <target state="new">Mesosphere 的数据中心操作系统 (DCOS)</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Jenkins<ept id="p1">](https://jenkins-ci.org/)</ept> 和 <bpt id="p2">[</bpt>Hudson<ept id="p2">](http://hudson-ci.org/)</ept></source>
          <target state="new"><bpt id="p1">[</bpt>Jenkins<ept id="p1">](https://jenkins-ci.org/)</ept> 和 <bpt id="p2">[</bpt>Hudson<ept id="p2">](http://hudson-ci.org/)</ept></target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>博客：适用于 Azure 的 Jenkins Slave 插件</source>
          <target state="new">博客：适用于 Azure 的 Jenkins Slave 插件</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>GitHub repo：适用于 Azure 的 Jenkins Storage 插件</source>
          <target state="new">GitHub repo：适用于 Azure 的 Jenkins Storage 插件</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>第三方：适用于 Azure 的 Hudson Slave 插件</source>
          <target state="new">第三方：适用于 Azure 的 Hudson Slave 插件</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>第三方：适用于 Azure 的 Hudson Storage 插件</source>
          <target state="new">第三方：适用于 Azure 的 Hudson Storage 插件</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Chef</source>
          <target state="new">Chef</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Chef 和虚拟机</source>
          <target state="new">Chef 和虚拟机</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>视频：Chef 是什么及其工作原理</source>
          <target state="new">视频：Chef 是什么及其工作原理</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Azure 自动化</source>
          <target state="new">Azure 自动化</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Powershell DSC for Linux</source>
          <target state="new">Powershell DSC for Linux</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>博客：如何执行 Powershell DSC for Linux</source>
          <target state="new">博客：如何执行 Powershell DSC for Linux</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>GitHub：Docker 客户端 DSC</source>
          <target state="new">GitHub：Docker 客户端 DSC</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>了解 <bpt id="p1">[</bpt>Docker<ept id="p1">](https://www.docker.com)</ept> 和 <bpt id="p2">[</bpt>Windows 容器<ept id="p2">](https://msdn.microsoft.com/virtualization/windowscontainers/about/about_overview)</ept>。</source>
          <target state="new">了解 <bpt id="p1">[</bpt>Docker<ept id="p1">](https://www.docker.com)</ept> 和 <bpt id="p2">[</bpt>Windows 容器<ept id="p2">](https://msdn.microsoft.com/virtualization/windowscontainers/about/about_overview)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>