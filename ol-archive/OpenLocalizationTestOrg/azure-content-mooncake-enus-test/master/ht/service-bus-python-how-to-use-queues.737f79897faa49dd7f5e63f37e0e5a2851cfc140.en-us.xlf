<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c11839905a6eee8d2c0a4750a2eba495e3e33c12</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何通过 Python 使用服务总线队列 | Microsoft Azure</source>
          <target state="new">如何通过 Python 使用服务总线队列 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用 Python 中的 Azure 服务总线队列</source>
          <target state="new">了解如何使用 Python 中的 Azure 服务总线队列</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何使用 Service Bus 队列</source>
          <target state="new">如何使用 Service Bus 队列</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本文介绍了如何使用服务总线队列。相关示例是使用 Python 编写的，并使用 <bpt id="p1">[</bpt>Python Azure 包<ept id="p1">][]</ept>。涉及的任务包括<bpt id="p2">**</bpt>创建队列、发送和接收消息<ept id="p2">**</ept>以及<bpt id="p3">**</bpt>删除队列<ept id="p3">**</ept>。</source>
          <target state="new">本文介绍了如何使用服务总线队列。相关示例是使用 Python 编写的，并使用 <bpt id="p1">[</bpt>Python Azure 包<ept id="p1">][]</ept>。涉及的任务包括<bpt id="p2">**</bpt>创建队列、发送和接收消息<ept id="p2">**</ept>以及<bpt id="p3">**</bpt>删除队列<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 若要安装 Python 或 <bpt id="p1">[</bpt>Python Azure 包<ept id="p1">][]</ept>，请参阅 <bpt id="p2">[</bpt>Python 安装指南<ept id="p2">](/documentation/articles/python-how-to-install)</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 若要安装 Python 或 <bpt id="p1">[</bpt>Python Azure 包<ept id="p1">][]</ept>，请参阅 <bpt id="p2">[</bpt>Python 安装指南<ept id="p2">](/documentation/articles/python-how-to-install)</ept>。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>创建队列</source>
          <target state="new">创建队列</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>可以通过 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象处理队列。将以下代码添加到任何 Python 文件的顶部附近，你希望在其中以编程方式访问服务总线：</source>
          <target state="new">可以通过 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象处理队列。将以下代码添加到任何 Python 文件的顶部附近，你希望在其中以编程方式访问服务总线：</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>以下代码创建 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象。将 <ph id="ph1">`mynamespace`</ph>、<ph id="ph2">`sharedaccesskeyname`</ph> 和 <ph id="ph3">`sharedaccesskey`</ph> 替换为你的命名空间、共享访问签名 (SAS) 密钥名称和值。</source>
          <target state="new">以下代码创建 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象。将 <ph id="ph1">`mynamespace`</ph>、<ph id="ph2">`sharedaccesskeyname`</ph> 和 <ph id="ph3">`sharedaccesskey`</ph> 替换为你的命名空间、共享访问签名 (SAS) 密钥名称和值。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>SAS 密钥名称和值可以在 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>连接信息中找到，也可以在服务器资源管理器中选择服务总线命名空间后，在 Visual Studio “属性”窗格中找到（如前一部分中所示）。</source>
          <target state="new">SAS 密钥名称和值可以在 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>连接信息中找到，也可以在服务器资源管理器中选择服务总线命名空间后，在 Visual Studio “属性”窗格中找到（如前一部分中所示）。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>create\_queue<ept id="p1">**</ept> 还支持其他选项，使你可以重写默认队列设置，例如消息生存时间 (TTL) 或最大队列大小。以下示例将最大队列大小设置为 5GB，将 TTL 值设置为 1 分钟：</source>
          <target state="new"><bpt id="p1">**</bpt>create\_queue<ept id="p1">**</ept> 还支持其他选项，使你可以重写默认队列设置，例如消息生存时间 (TTL) 或最大队列大小。以下示例将最大队列大小设置为 5GB，将 TTL 值设置为 1 分钟：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>向队列发送消息</source>
          <target state="new">向队列发送消息</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>若要向服务总线队列发送消息，你的应用程序需对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象调用 <bpt id="p2">**</bpt>send\_queue\_message<ept id="p2">**</ept> 方法。</source>
          <target state="new">若要向服务总线队列发送消息，你的应用程序需对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象调用 <bpt id="p2">**</bpt>send\_queue\_message<ept id="p2">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>以下示例演示如何使用 <bpt id="p1">**</bpt>send\_queue\_message<ept id="p1">**</ept> 向名为 <bpt id="p2">*</bpt>taskqueue<ept id="p2">*</ept> 的队列发送测试消息：</source>
          <target state="new">以下示例演示如何使用 <bpt id="p1">**</bpt>send\_queue\_message<ept id="p1">**</ept> 向名为 <bpt id="p2">*</bpt>taskqueue<ept id="p2">*</ept> 的队列发送测试消息：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。有关配额的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 队列和服务总线队列<ept id="p1">][]</ept>。</source>
          <target state="new">Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。有关配额的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 队列和服务总线队列<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>从队列接收消息</source>
          <target state="new">从队列接收消息</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象使用 <bpt id="p2">**</bpt>receive\_queue\_message<ept id="p2">**</ept> 方法可从队列接收消息：</source>
          <target state="new">对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象使用 <bpt id="p2">**</bpt>receive\_queue\_message<ept id="p2">**</ept> 方法可从队列接收消息：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>当 <bpt id="p1">**</bpt>peek‑lock<ept id="p1">**</ept> 参数设置为 <bpt id="p2">**</bpt>False<ept id="p2">**</ept> 时，将在读取消息后将其从队列中删除。通过将参数 <bpt id="p3">**</bpt>peek\_lock<ept id="p3">**</ept> 设置为 <bpt id="p4">**</bpt>True<ept id="p4">**</ept>，你可以读取（扫视）并锁定消息而不会从队列中删除它。</source>
          <target state="new">当 <bpt id="p1">**</bpt>peek‑lock<ept id="p1">**</ept> 参数设置为 <bpt id="p2">**</bpt>False<ept id="p2">**</ept> 时，将在读取消息后将其从队列中删除。通过将参数 <bpt id="p3">**</bpt>peek\_lock<ept id="p3">**</ept> 设置为 <bpt id="p4">**</bpt>True<ept id="p4">**</ept>，你可以读取（扫视）并锁定消息而不会从队列中删除它。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>在接收过程中读取并删除消息的行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。</source>
          <target state="new">在接收过程中读取并删除消息的行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>如果将 <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> 参数设置为 <bpt id="p2">**</bpt>True<ept id="p2">**</ept>，则接收将变成一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。在应用程序处理完消息（或安全存储该消息以供将来处理）后，它会通过对 <bpt id="p3">**</bpt>Message<ept id="p3">**</ept> 对象调用 <bpt id="p4">**</bpt>delete<ept id="p4">**</ept> 方法来完成接收过程的第二个阶段。<bpt id="p5">**</bpt>delete<ept id="p5">**</ept> 方法会将消息标记为已使用，并从队列中删除它。</source>
          <target state="new">如果将 <bpt id="p1">**</bpt>peek\_lock<ept id="p1">**</ept> 参数设置为 <bpt id="p2">**</bpt>True<ept id="p2">**</ept>，则接收将变成一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。在应用程序处理完消息（或安全存储该消息以供将来处理）后，它会通过对 <bpt id="p3">**</bpt>Message<ept id="p3">**</ept> 对象调用 <bpt id="p4">**</bpt>delete<ept id="p4">**</ept> 方法来完成接收过程的第二个阶段。<bpt id="p5">**</bpt>delete<ept id="p5">**</ept> 方法会将消息标记为已使用，并从队列中删除它。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>如何处理应用程序崩溃和不可读消息</source>
          <target state="new">如何处理应用程序崩溃和不可读消息</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <bpt id="p1">**</bpt>Message<ept id="p1">**</ept> 对象调用 <bpt id="p2">**</bpt>unlock<ept id="p2">**</ept> 方法。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。</source>
          <target state="new">Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <bpt id="p1">**</bpt>Message<ept id="p1">**</ept> 对象调用 <bpt id="p2">**</bpt>unlock<ept id="p2">**</ept> 方法。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使它可再次被接收。</source>
          <target state="new">还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使它可再次被接收。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>如果应用程序在处理消息之后，但在调用 <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作<bpt id="p2">**</bpt>至少处理一次<ept id="p2">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 <bpt id="p3">**</bpt>MessageId<ept id="p3">**</ept> 属性来实现，该属性在多次传送尝试中保持不变。</source>
          <target state="new">如果应用程序在处理消息之后，但在调用 <bpt id="p1">**</bpt>delete<ept id="p1">**</ept> 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作<bpt id="p2">**</bpt>至少处理一次<ept id="p2">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 <bpt id="p3">**</bpt>MessageId<ept id="p3">**</ept> 属性来实现，该属性在多次传送尝试中保持不变。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>现在，你已了解有关服务总线队列的基础知识，单击下面的链接可了解更多信息。</source>
          <target state="new">现在，你已了解有关服务总线队列的基础知识，单击下面的链接可了解更多信息。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>请参阅<bpt id="p1">[</bpt>队列、主题和订阅<ept id="p1">][]</ept>。</source>
          <target state="new">请参阅<bpt id="p1">[</bpt>队列、主题和订阅<ept id="p1">][]</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>