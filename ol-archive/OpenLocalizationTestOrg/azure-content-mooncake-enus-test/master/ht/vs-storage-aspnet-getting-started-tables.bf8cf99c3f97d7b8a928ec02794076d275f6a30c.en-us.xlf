<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">186927830e1955e90cfd992987804e90fc4e0535</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>开始使用表存储和 Visual Studio 连接服务 (ASP.NET) | Azure</source>
          <target state="new">开始使用表存储和 Visual Studio 连接服务 (ASP.NET) | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的 ASP.NET 项目中使用 Azure 表存储</source>
          <target state="new">在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的 ASP.NET 项目中使用 Azure 表存储</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>&lt;tags ms.service="storage"</source>
          <target state="new">&lt;tags ms.service="storage"</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>开始使用表存储和 Visual Studio 连接服务 (ASP.NET)</source>
          <target state="new">开始使用表存储和 Visual Studio 连接服务 (ASP.NET)</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 项目中创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure 表存储。本文向你展示如何使用 Azure 表执行常见任务，包括创建和删除表以及使用表实体。示例是用 C# 代码编写的，并使用了 <bpt id="p1">[</bpt>Azure .NET 存储客户端库<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)</ept>。有关使用 Azure 表存储的更多常规信息，请参阅<bpt id="p2">[</bpt>如何通过 .NET 使用表存储<ept id="p2">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。</source>
          <target state="new">本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 项目中创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure 表存储。本文向你展示如何使用 Azure 表执行常见任务，包括创建和删除表以及使用表实体。示例是用 C# 代码编写的，并使用了 <bpt id="p1">[</bpt>Azure .NET 存储客户端库<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)</ept>。有关使用 Azure 表存储的更多常规信息，请参阅<bpt id="p2">[</bpt>如何通过 .NET 使用表存储<ept id="p2">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。</source>
          <target state="new">Azure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>使用代码访问表</source>
          <target state="new">使用代码访问表</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>请确保 C# 文件顶部的命名空间声明包括这些 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句。</source>
          <target state="new">请确保 C# 文件顶部的命名空间声明包括这些 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>获取表示存储帐户信息的 <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。</source>
          <target state="new">获取表示存储帐户信息的 <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意<ept id="p1">**</ept> - 在下列示例中，在代码的前面使用上述全部代码。</source>
          <target state="new"><bpt id="p1">**</bpt>注意<ept id="p1">**</ept> - 在下列示例中，在代码的前面使用上述全部代码。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>获取 <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> 对象，以引用存储帐户中的表对象。</source>
          <target state="new">获取 <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> 对象，以引用存储帐户中的表对象。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>获取 <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> 引用对象，以引用特定的表和实体。</source>
          <target state="new">获取 <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> 引用对象，以引用特定的表和实体。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>使用代码创建表</source>
          <target state="new">使用代码创建表</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>若要创建 Azure 表，只需在前面的代码中添加对 <bpt id="p1">**</bpt>CreateIfNotExistsAsync()<ept id="p1">**</ept> 的调用即可。</source>
          <target state="new">若要创建 Azure 表，只需在前面的代码中添加对 <bpt id="p1">**</bpt>CreateIfNotExistsAsync()<ept id="p1">**</ept> 的调用即可。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>插入一批实体</source>
          <target state="new">插入一批实体</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（“Jeff Smith”和“Ben Smith”），使用 Insert 方法将它们添加到 <bpt id="p1">**</bpt>TableBatchOperation<ept id="p1">**</ept> 对象，然后通过调用 <bpt id="p2">**</bpt>CloudTable.ExecuteBatchAsync<ept id="p2">**</ept> 启动操作。</source>
          <target state="new">您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（“Jeff Smith”和“Ben Smith”），使用 Insert 方法将它们添加到 <bpt id="p1">**</bpt>TableBatchOperation<ept id="p1">**</ept> 对象，然后通过调用 <bpt id="p2">**</bpt>CloudTable.ExecuteBatchAsync<ept id="p2">**</ept> 启动操作。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>获取分区中的所有实体</source>
          <target state="new">获取分区中的所有实体</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>若要查询表以获取分区中的所有实体，请使用 <bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。</source>
          <target state="new">若要查询表以获取分区中的所有实体，请使用 <bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>获取单个实体</source>
          <target state="new">获取单个实体</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>您可以编写查询以获取单个特定实体。以下代码使用 <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> 对象来指定名为“Ben Smith”的客户。此方法仅返回一个实体，而不是一个集合，并且 <bpt id="p2">**</bpt>TableResult.Result<ept id="p2">**</ept> 中的返回值是一个 <bpt id="p3">**</bpt>CustomerEntity<ept id="p3">**</ept> 对象。在查询中同时指定分区键和行键是从表服务中检索单个实体的最快方法。</source>
          <target state="new">您可以编写查询以获取单个特定实体。以下代码使用 <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> 对象来指定名为“Ben Smith”的客户。此方法仅返回一个实体，而不是一个集合，并且 <bpt id="p2">**</bpt>TableResult.Result<ept id="p2">**</ept> 中的返回值是一个 <bpt id="p3">**</bpt>CustomerEntity<ept id="p3">**</ept> 对象。在查询中同时指定分区键和行键是从表服务中检索单个实体的最快方法。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>删除实体</source>
          <target state="new">删除实体</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>您可以在找到实体后将其删除。以下代码将查找名为“Ben Smith”的客户实体，如果找到，会将其删除。</source>
          <target state="new">您可以在找到实体后将其删除。以下代码将查找名为“Ben Smith”的客户实体，如果找到，会将其删除。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>