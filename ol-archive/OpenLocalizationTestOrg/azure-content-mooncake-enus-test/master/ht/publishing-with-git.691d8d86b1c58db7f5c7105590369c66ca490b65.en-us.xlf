<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5dc8c27316d59f62f9d28cacb675e52d9acc6e9d</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Azure Web 应用<ept id="p1">](/documentation/services/web-sites/)</ept>支持从源代码控件和存储库工具（例如，Git、GitHub、Mercurial 和 TFS）连续部署到 Web 应用。可以使用这些工具维护你 Web 应用的内容和代码，然后在需要时快速轻松地将更改推送到你的 Azure Web 应用。</source>
          <target state="new"><bpt id="p1">[</bpt>Azure Web 应用<ept id="p1">](/documentation/services/web-sites/)</ept>支持从源代码控件和存储库工具（例如，Git、GitHub、Mercurial 和 TFS）连续部署到 Web 应用。可以使用这些工具维护你 Web 应用的内容和代码，然后在需要时快速轻松地将更改推送到你的 Azure Web 应用。</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在本文中，你将了解如何使用 Git 从本地计算机直接发布到 Web 应用（在 Azure 中，此发布方法称为<bpt id="p1">**</bpt>本地 Git<ept id="p1">**</ept>）。你还将了解如何启用从存储库站点（例如，GitHub 或 Mercurial）进行的连续部署。</source>
          <target state="new">在本文中，你将了解如何使用 Git 从本地计算机直接发布到 Web 应用（在 Azure 中，此发布方法称为<bpt id="p1">**</bpt>本地 Git<ept id="p1">**</ept>）。你还将了解如何启用从存储库站点（例如，GitHub 或 Mercurial）进行的连续部署。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 在使用<bpt id="p1">[</bpt>适用于 Mac 和 Linux 的 Azure 命令行工具<ept id="p1">](/documentation/articles/xplat-cli-install)</ept>创建 Web 应用时，将自动执行本文中所述的许多 Git 命令。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 在使用<bpt id="p1">[</bpt>适用于 Mac 和 Linux 的 Azure 命令行工具<ept id="p1">](/documentation/articles/xplat-cli-install)</ept>创建 Web 应用时，将自动执行本文中所述的许多 Git 命令。</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>此任务包括下列步骤：</source>
          <target state="new">此任务包括下列步骤：</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>安装 Git</source>
          <target state="new">安装 Git</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>创建本地存储库</source>
          <target state="new">创建本地存储库</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>添加网页</source>
          <target state="new">添加网页</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>启用 Web 应用存储库</source>
          <target state="new">启用 Web 应用存储库</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>部署项目</source>
          <target state="new">部署项目</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>将本地文件推送到 Azure（本地 Git）</source>
          <target state="new">将本地文件推送到 Azure（本地 Git）</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>从存储库 Web 应用（例如，GitHub 或 Mercurial）部署文件</source>
          <target state="new">从存储库 Web 应用（例如，GitHub 或 Mercurial）部署文件</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>故障排除</source>
          <target state="new">故障排除</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step1"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>步骤 1：安装 Git</source>
          <target state="new"><ph id="ph1">&lt;a id="Step1"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>步骤 1：安装 Git</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>安装 Git 所需的步骤因操作系统的不同而异。有关操作系统特定的分发和安装指南，请参阅<bpt id="p1">[</bpt><ept id="p1">安装 Git]</ept>。</source>
          <target state="new">安装 Git 所需的步骤因操作系统的不同而异。有关操作系统特定的分发和安装指南，请参阅<bpt id="p1">[</bpt><ept id="p1">安装 Git]</ept>。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 在某些操作系统上，命令行和 GUI 版本的 Git 都可用。本文中提供的说明使用命令行版本。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 在某些操作系统上，命令行和 GUI 版本的 Git 都可用。本文中提供的说明使用命令行版本。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step2"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>步骤 2：创建本地存储库</source>
          <target state="new"><ph id="ph1">&lt;a id="Step2"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>步骤 2：创建本地存储库</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>执行下列任务可创建新的 Git 存储库。</source>
          <target state="new">执行下列任务可创建新的 Git 存储库。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>创建名为 MyGitRepository 的目录，用于包含 Git 存储库和 Web 应用文件。</source>
          <target state="new">创建名为 MyGitRepository 的目录，用于包含 Git 存储库和 Web 应用文件。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>打开一个命令行工具，例如 <bpt id="p1">**</bpt>GitBash<ept id="p1">**</ept> (Windows) 或 <bpt id="p2">**</bpt>Bash<ept id="p2">**</ept> (Unix Shell)。在 OS X 系统上，可以通过 <bpt id="p3">**</bpt>Terminal<ept id="p3">**</ept> 应用程序访问命令行。</source>
          <target state="new">打开一个命令行工具，例如 <bpt id="p1">**</bpt>GitBash<ept id="p1">**</ept> (Windows) 或 <bpt id="p2">**</bpt>Bash<ept id="p2">**</ept> (Unix Shell)。在 OS X 系统上，可以通过 <bpt id="p3">**</bpt>Terminal<ept id="p3">**</ept> 应用程序访问命令行。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>在命令行中，更改为 MyGitRepository 目录。</source>
          <target state="new">在命令行中，更改为 MyGitRepository 目录。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>使用以下命令可初始化新的 Git 存储库：</source>
          <target state="new">使用以下命令可初始化新的 Git 存储库：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>这将返回一条消息，例如“已在 [路径] 中初始化空 Git 存储库”。</source>
          <target state="new">这将返回一条消息，例如“已在 [路径] 中初始化空 Git 存储库”。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step3"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>步骤 3：添加网页</source>
          <target state="new"><ph id="ph1">&lt;a id="Step3"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>步骤 3：添加网页</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Web 应用支持用各种编程语言创建的应用程序。对于此示例，你将使用静态 .html 文件。</source>
          <target state="new">Web 应用支持用各种编程语言创建的应用程序。对于此示例，你将使用静态 .html 文件。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>通过使用文本编辑器，在 Git 存储库的根目录下（你先前创建的 MyGitRepository 目录）创建一个名为 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept> 的新文件。</source>
          <target state="new">通过使用文本编辑器，在 Git 存储库的根目录下（你先前创建的 MyGitRepository 目录）创建一个名为 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept> 的新文件。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>添加以下文本作为 index.html 文件的内容并保存该文件。</source>
          <target state="new">添加以下文本作为 index.html 文件的内容并保存该文件。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>在命令行中，验证当前位置是否在 Git 存储库的根目录下。然后使用以下命令将 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept> 文件添加到存储库：</source>
          <target state="new">在命令行中，验证当前位置是否在 Git 存储库的根目录下。然后使用以下命令将 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept> 文件添加到存储库：</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 你可以通过在命令后键入 -help 或 --help，查找有关任何 git 命令的帮助。例如，若要了解 add 命令的参数选项，请键入“git add -help”以获取命令行帮助，或键入“git add --help”以获取更加详细的帮助。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 你可以通过在命令后键入 -help 或 --help，查找有关任何 git 命令的帮助。例如，若要了解 add 命令的参数选项，请键入“git add -help”以获取命令行帮助，或键入“git add --help”以获取更加详细的帮助。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>接下来，使用以下命令将更改提交到存储库：</source>
          <target state="new">接下来，使用以下命令将更改提交到存储库：</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>您应该会看到与下面类似的输出：</source>
          <target state="new">您应该会看到与下面类似的输出：</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step4"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>启用 Web 应用存储库</source>
          <target state="new"><ph id="ph1">&lt;a id="Step4"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>启用 Web 应用存储库</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>执行以下步骤可为你的 Web 应用启用 Git 存储库。</source>
          <target state="new">执行以下步骤可为你的 Web 应用启用 Git 存储库。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>登录到 <bpt id="p1">[</bpt><ept id="p1">Azure 管理门户]</ept>。</source>
          <target state="new">登录到 <bpt id="p1">[</bpt><ept id="p1">Azure 管理门户]</ept>。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>单击“新建”按钮以创建将为其启用存储库的新 Web 应用。</source>
          <target state="new">单击“新建”按钮以创建将为其启用存储库的新 Web 应用。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>等待至 Web 应用创建过程在“ Web 应用”视图中完成，然后选择该 Web 应用。</source>
          <target state="new">等待至 Web 应用创建过程在“ Web 应用”视图中完成，然后选择该 Web 应用。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>显示选定 Web 应用的图像</source>
          <target state="new">显示选定 Web 应用的图像</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>选择“仪表板”选项卡。</source>
          <target state="new">选择“仪表板”选项卡。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>在“速览”部分中，选择“从源控件设置部署”。此时将显示以下“设置部署”对话框。</source>
          <target state="new">在“速览”部分中，选择“从源控件设置部署”。此时将显示以下“设置部署”对话框。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>git-WhereIsYourSourceCode</source>
          <target state="new">git-WhereIsYourSourceCode</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>选择“本地 Git”，然后单击“下一页”箭头。</source>
          <target state="new">选择“本地 Git”，然后单击“下一页”箭头。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>如果这是你第一次在 Azure 中设置存储库，则需要为其创建登录凭据。你将使用它们从本地 Git 存储库登录到 Azure 的存储库和推送更改。</source>
          <target state="new">如果这是你第一次在 Azure 中设置存储库，则需要为其创建登录凭据。你将使用它们从本地 Git 存储库登录到 Azure 的存储库和推送更改。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>一小段延迟后，将显示一条指明存储库已就绪的消息。</source>
          <target state="new">一小段延迟后，将显示一条指明存储库已就绪的消息。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>git 说明</source>
          <target state="new">git 说明</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step5"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>部署项目</source>
          <target state="new"><ph id="ph1">&lt;a id="Step5"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>部署项目</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>将本地文件推送到 Azure（本地 Git）</source>
          <target state="new">将本地文件推送到 Azure（本地 Git）</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>从存储库 Web 应用（例如，GitHub 或 Mercurial）部署文件</source>
          <target state="new">从存储库 Web 应用（例如，GitHub 或 Mercurial）部署文件</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>从 GitHub 或 Mercurial 部署 Visual Studio 解决方案</source>
          <target state="new">从 GitHub 或 Mercurial 部署 Visual Studio 解决方案</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step6"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>按照以下步骤，使用本地 Git 将你的 Web 应用发布到 Azure。</source>
          <target state="new"><ph id="ph1">&lt;a id="Step6"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>按照以下步骤，使用本地 Git 将你的 Web 应用发布到 Azure。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>此时，门户将显示有关初始化本地存储库和添加文件的说明。你已经在本主题的前几个步骤中执行了此操作。但是，如果没有设置你的部署凭据，你必须转回至门户中的“仪表板”选项卡并单击“重置部署凭据”。</source>
          <target state="new">此时，门户将显示有关初始化本地存储库和添加文件的说明。你已经在本主题的前几个步骤中执行了此操作。但是，如果没有设置你的部署凭据，你必须转回至门户中的“仪表板”选项卡并单击“重置部署凭据”。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>按照以下步骤，使用本地 Git 将你的 Web 应用发布到 Azure：</source>
          <target state="new">按照以下步骤，使用本地 Git 将你的 Web 应用发布到 Azure：</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>通过使用命令行，确认当前位置是包含以前创建的 index.html 文件的本地 Git 存储库的根目录。</source>
          <target state="new">通过使用命令行，确认当前位置是包含以前创建的 index.html 文件的本地 Git 存储库的根目录。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>复制 git remote add 命令，该命令已在门户所返回说明的步骤 3 中列出。它将类似于以下命令：</source>
          <target state="new">复制 git remote add 命令，该命令已在门户所返回说明的步骤 3 中列出。它将类似于以下命令：</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> <bpt id="p1">**</bpt>remote<ept id="p1">**</ept> 命令可将命名引用添加到远程存储库。在本例中，它为 Web 应用存储库创建名为“azure”的引用。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> <bpt id="p1">**</bpt>remote<ept id="p1">**</ept> 命令可将命名引用添加到远程存储库。在本例中，它为 Web 应用存储库创建名为“azure”的引用。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>从命令行中使用以下命令可将当前存储库内容从本地存储库推送到“azure”远程 Web 应用：</source>
          <target state="new">从命令行中使用以下命令可将当前存储库内容从本地存储库推送到“azure”远程 Web 应用：</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>当你在门户中重置部署凭据时，系统将提示你输入以前创建的密码。输入该密码（请注意，在键入密码时，Gitbash 不会将星号回显到控制台）。您应该会看到与下面类似的输出：</source>
          <target state="new">当你在门户中重置部署凭据时，系统将提示你输入以前创建的密码。输入该密码（请注意，在键入密码时，Gitbash 不会将星号回显到控制台）。您应该会看到与下面类似的输出：</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 为 Web 应用创建的存储库应推送请求以便面向其存储库的 <ph id="ph2">&lt;strong&gt;</ph>master<ph id="ph3">&lt;/strong&gt;</ph> 分支，后者将用作该 Web 应用的内容。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 为 Web 应用创建的存储库应推送请求以便面向其存储库的 <ph id="ph2">&lt;strong&gt;</ph>master<ph id="ph3">&lt;/strong&gt;</ph> 分支，后者将用作该 Web 应用的内容。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>在门户中，单击门户底部的“浏览”链接以验证是否已部署 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept>。这将显示一个包含“Hello Git!”的页面。</source>
          <target state="new">在门户中，单击门户底部的“浏览”链接以验证是否已部署 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept>。这将显示一个包含“Hello Git!”的页面。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>包含“Hello Git!”的网页</source>
          <target state="new">包含“Hello Git!”的网页</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>通过使用文本编辑器，更改 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept> 文件以使其包含“Yay!”，然后保存该文件。</source>
          <target state="new">通过使用文本编辑器，更改 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept> 文件以使其包含“Yay!”，然后保存该文件。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>从命令行使用以下命令可<bpt id="p1">**</bpt>添加<ept id="p1">**</ept>和<bpt id="p2">**</bpt>提交<ept id="p2">**</ept>更改，然后将更改<bpt id="p3">**</bpt>推送<ept id="p3">**</ept>到远程存储库：</source>
          <target state="new">从命令行使用以下命令可<bpt id="p1">**</bpt>添加<ept id="p1">**</ept>和<bpt id="p2">**</bpt>提交<ept id="p2">**</ept>更改，然后将更改<bpt id="p3">**</bpt>推送<ept id="p3">**</ept>到远程存储库：</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>完成 <bpt id="p1">**</bpt>push<ept id="p1">**</ept> 命令后，请刷新浏览器（你可能必须按 Ctrl+F5 才能正确刷新浏览器），你会发现该页面的内容此时将反映最新提交的更改。</source>
          <target state="new">完成 <bpt id="p1">**</bpt>push<ept id="p1">**</ept> 命令后，请刷新浏览器（你可能必须按 Ctrl+F5 才能正确刷新浏览器），你会发现该页面的内容此时将反映最新提交的更改。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step7"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>从存储库站点（例如，GitHub 或 Mercurial）部署文件</source>
          <target state="new"><ph id="ph1">&lt;a id="Step7"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>从存储库站点（例如，GitHub 或 Mercurial）部署文件</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>通过使用“本地 Git”将本地文件推送到 Azure，可以手动将更新从本地项目推送到 Azure 中的 Web 应用，而从 GitHub 或 Mercurial 进行部署会生成一个连续部署过程，在此过程中，Azure 会从项目中拉入最新的更新。</source>
          <target state="new">通过使用“本地 Git”将本地文件推送到 Azure，可以手动将更新从本地项目推送到 Azure 中的 Web 应用，而从 GitHub 或 Mercurial 进行部署会生成一个连续部署过程，在此过程中，Azure 会从项目中拉入最新的更新。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>这两种方法都会将项目部署到 Web 应用，如果你有多个人员在处理同一个项目并希望确保始终发布最新版本（不管是谁执行了最新更新），则连续部署会很有用。此外，如果你将上述工具之一用作应用程序的中央存储库，则连续部署也很有用。</source>
          <target state="new">这两种方法都会将项目部署到 Web 应用，如果你有多个人员在处理同一个项目并希望确保始终发布最新版本（不管是谁执行了最新更新），则连续部署会很有用。此外，如果你将上述工具之一用作应用程序的中央存储库，则连续部署也很有用。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>从 GitHub 部署文件需要你已将本地项目发布到这些服务之一。有关将项目发布到这些服务的详细信息，请参阅<bpt id="p1">[</bpt><ept id="p1">创建存储库 (GitHub)]</ept> 或<bpt id="p2">[</bpt><ept id="p2">快速入门 - Mercurial]</ept>。</source>
          <target state="new">从 GitHub 部署文件需要你已将本地项目发布到这些服务之一。有关将项目发布到这些服务的详细信息，请参阅<bpt id="p1">[</bpt><ept id="p1">创建存储库 (GitHub)]</ept> 或<bpt id="p2">[</bpt><ept id="p2">快速入门 - Mercurial]</ept>。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>首先，将您的 Web 应用文件放到将用于连续部署的选定存储库中。</source>
          <target state="new">首先，将您的 Web 应用文件放到将用于连续部署的选定存储库中。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>在 Web 应用的 Azure 管理门户中，转到“仪表板”选项卡。在“速览”部分中，选择“从源控件设置部署”。这将显示“设置部署”对话框，该对话框会询问“你的源代码在哪里?”。</source>
          <target state="new">在 Web 应用的 Azure 管理门户中，转到“仪表板”选项卡。在“速览”部分中，选择“从源控件设置部署”。这将显示“设置部署”对话框，该对话框会询问“你的源代码在哪里?”。</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>选择“外部存储库”。</source>
          <target state="new">选择“外部存储库”。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>出现提示时，请输入存储库 URL 以及你需要部署的分支的名称（默认为 master）。</source>
          <target state="new">出现提示时，请输入存储库 URL 以及你需要部署的分支的名称（默认为 master）。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Azure 创建与所选存储库的关联，并从 master 分支拉入文件。在此过程完成后，“部署”页面上的“部署历史记录”将显示与下面类似的“活动部署”消息：</source>
          <target state="new">Azure 创建与所选存储库的关联，并从 master 分支拉入文件。在此过程完成后，“部署”页面上的“部署历史记录”将显示与下面类似的“活动部署”消息：</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>git-githubdeployed</source>
          <target state="new">git-githubdeployed</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>此时，已将你的项目从所选存储库部署到 Azure Web 应用。若要验证该站点是否处于活动状态，请单击门户底部的“浏览”链接。浏览器应导航到该 Web 应用。</source>
          <target state="new">此时，已将你的项目从所选存储库部署到 Azure Web 应用。若要验证该站点是否处于活动状态，请单击门户底部的“浏览”链接。浏览器应导航到该 Web 应用。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>若要验证连续部署是否正在进行，请更改你的项目，然后将所做的更新推送到已与此 Web 应用关联的存储库。推送到存储库完成后，你的 Web 应用应很快更新以反映更改。可以在 Web 应用的“部署”页面上验证是否已拉入更新。</source>
          <target state="new">若要验证连续部署是否正在进行，请更改你的项目，然后将所做的更新推送到已与此 Web 应用关联的存储库。推送到存储库完成后，你的 Web 应用应很快更新以反映更改。可以在 Web 应用的“部署”页面上验证是否已拉入更新。</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step75"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>从 GitHub 或 Mercurial 部署 Visual Studio 解决方案</source>
          <target state="new"><ph id="ph1">&lt;a id="Step75"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>从 GitHub 或 Mercurial 部署 Visual Studio 解决方案</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>将 Visual Studio 解决方案推送到 Azure Web 应用中的 Web 应用就像推送简单的 index.html 文件一样容易。 Web 应用部署过程简化了所有细节，包括还原 NuGet 依赖项和构建应用程序二进制文件。可以按照仅在你的 Git 存储库中维护代码的源控制最佳实践操作，并让 Web 应用部署处理其余工作。</source>
          <target state="new">将 Visual Studio 解决方案推送到 Azure Web 应用中的 Web 应用就像推送简单的 index.html 文件一样容易。 Web 应用部署过程简化了所有细节，包括还原 NuGet 依赖项和构建应用程序二进制文件。可以按照仅在你的 Git 存储库中维护代码的源控制最佳实践操作，并让 Web 应用部署处理其余工作。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>将 Visual Studio 解决方案推送到 Web 应用的步骤与<bpt id="p1">[</bpt>上一部分<ept id="p1">](#Step7)</ept>中的步骤相同，前提是按以下方式配置你的解决方案和存储库：</source>
          <target state="new">将 Visual Studio 解决方案推送到 Web 应用的步骤与<bpt id="p1">[</bpt>上一部分<ept id="p1">](#Step7)</ept>中的步骤相同，前提是按以下方式配置你的解决方案和存储库：</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>在你的存储库根中，添加 <ph id="ph1">`.gitignore`</ph> 文件，然后指定想要从你的存储库中排除的所有文件和文件夹，例如，<ph id="ph2">`Obj`</ph>、<ph id="ph3">`Bin`</ph> 和 <ph id="ph4">`packages`</ph> 文件夹（有关格式信息，请参阅 <bpt id="p1">[</bpt>gitignore 文档<ept id="p1">](http://git-scm.com/docs/gitignore)</ept>）。例如：</source>
          <target state="new">在你的存储库根中，添加 <ph id="ph1">`.gitignore`</ph> 文件，然后指定想要从你的存储库中排除的所有文件和文件夹，例如，<ph id="ph2">`Obj`</ph>、<ph id="ph3">`Bin`</ph> 和 <ph id="ph4">`packages`</ph> 文件夹（有关格式信息，请参阅 <bpt id="p1">[</bpt>gitignore 文档<ept id="p1">](http://git-scm.com/docs/gitignore)</ept>）。例如：</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 如果你使用 GitHub，可以选择在创建存储库时生成 Visual Studio 特定 .gitignore 文件，其中包括所有常见的临时文件和生成结果等。然后可以对其进行自定义以满足你的特定需求。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 如果你使用 GitHub，可以选择在创建存储库时生成 Visual Studio 特定 .gitignore 文件，其中包括所有常见的临时文件和生成结果等。然后可以对其进行自定义以满足你的特定需求。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>将整个解决方案的目录树添加到你的存储库中，其中 .sln 文件位于存储库根中。</source>
          <target state="new">将整个解决方案的目录树添加到你的存储库中，其中 .sln 文件位于存储库根中。</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>你按照说明设置存储库并将 Azure 中的 Web 应用配置为从某个联机 Git 存储库连续发布后，你就可以在 Visual Studio 中从本地开发 ASP.NET 应用程序，并且只需通过将所做的更改推送到联机的 Git 存储库即可连续部署代码。</source>
          <target state="new">你按照说明设置存储库并将 Azure 中的 Web 应用配置为从某个联机 Git 存储库连续发布后，你就可以在 Visual Studio 中从本地开发 ASP.NET 应用程序，并且只需通过将所做的更改推送到联机的 Git 存储库即可连续部署代码。</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>禁用连续部署</source>
          <target state="new">禁用连续部署</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>可从 Azure“仪表板”禁用连续部署。在“速览”部分下，选择用于断开与所使用存储库的连接的选项：</source>
          <target state="new">可从 Azure“仪表板”禁用连续部署。在“速览”部分下，选择用于断开与所使用存储库的连接的选项：</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>git-DisconnectFromGitHub</source>
          <target state="new">git-DisconnectFromGitHub</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>在显示确认消息时回答“是”后，若要从其他源设置发布，你可以返回到“速览”并单击“从源控件设置部署”。</source>
          <target state="new">在显示确认消息时回答“是”后，若要从其他源设置发布，你可以返回到“速览”并单击“从源控件设置部署”。</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Step8"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>故障排除</source>
          <target state="new"><ph id="ph1">&lt;a id="Step8"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>故障排除</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>以下是使用 Git 发布到 Azure 中的 Web 应用时遇到的常见错误或问题：</source>
          <target state="new">以下是使用 Git 发布到 Azure 中的 Web 应用时遇到的常见错误或问题：</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：无法访问“[siteURL]”：无法连接到 [scmAddress]</source>
          <target state="new"><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：无法访问“[siteURL]”：无法连接到 [scmAddress]</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果 Web 应用无法正常工作，则可能发生此错误。</source>
          <target state="new"><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果 Web 应用无法正常工作，则可能发生此错误。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：在 Azure 管理门户中启动 Web 应用。在 Web 应用运行之前，Git 部署无法进行。</source>
          <target state="new"><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：在 Azure 管理门户中启动 Web 应用。在 Web 应用运行之前，Git 部署无法进行。</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：无法解析主机“主机名”</source>
          <target state="new"><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：无法解析主机“主机名”</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果创建“azure”远程 Web 应用时输入的地址信息不正确，则会发生该错误。</source>
          <target state="new"><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果创建“azure”远程 Web 应用时输入的地址信息不正确，则会发生该错误。</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：使用 <ph id="ph1">`git remote -v`</ph> 命令列出所有远程 Web 应用以及关联的 URL。确认“azure”远程 Web 应用的 URL 正确。如果需要，请删除此远程 Web 应用并使用正确的 URL 重新创建它。</source>
          <target state="new"><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：使用 <ph id="ph1">`git remote -v`</ph> 命令列出所有远程 Web 应用以及关联的 URL。确认“azure”远程 Web 应用的 URL 正确。如果需要，请删除此远程 Web 应用并使用正确的 URL 重新创建它。</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：无通用引用且未指定任何引用；不采取任何措施。或许你应指定一个分支，例如“master”。</source>
          <target state="new"><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：无通用引用且未指定任何引用；不采取任何措施。或许你应指定一个分支，例如“master”。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果你在执行 Git 推送操作时未指定分支且未设置 Git 使用的 push.default 值，则会发生该错误。</source>
          <target state="new"><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果你在执行 Git 推送操作时未指定分支且未设置 Git 使用的 push.default 值，则会发生该错误。</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：请再次执行推送操作，并指定 master 分支。例如：</source>
          <target state="new"><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：请再次执行推送操作，并指定 master 分支。例如：</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：src refspec [分支名] 不匹配任何内容。</source>
          <target state="new"><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：src refspec [分支名] 不匹配任何内容。</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果你尝试推送到“azure”远程 Web 应用上 master 分支之外的分支，则会发生该错误。</source>
          <target state="new"><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果你尝试推送到“azure”远程 Web 应用上 master 分支之外的分支，则会发生该错误。</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：请再次执行推送操作，并指定 master 分支。例如：</source>
          <target state="new"><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：请再次执行推送操作，并指定 master 分支。例如：</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：错误 - 已将更改提交到远程存储库，但未更新你的 Web 应用。</source>
          <target state="new"><bpt id="p1">**</bpt>症状<ept id="p1">**</ept>：错误 - 已将更改提交到远程存储库，但未更新你的 Web 应用。</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果你部署的是 Node.js 应用程序，其中包含用于指定其他必需模块的 package.json 文件，则会发生该错误。</source>
          <target state="new"><bpt id="p1">**</bpt>原因<ept id="p1">**</ept>：如果你部署的是 Node.js 应用程序，其中包含用于指定其他必需模块的 package.json 文件，则会发生该错误。</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：应在发生此错误前记录包含“npm ERR!”的其他消息，并可提供有关失败的其他上下文。以下是该错误的已知原因和相应的“npm ERR!”消息：</source>
          <target state="new"><bpt id="p1">**</bpt>解决方法<ept id="p1">**</ept>：应在发生此错误前记录包含“npm ERR!”的其他消息，并可提供有关失败的其他上下文。以下是该错误的已知原因和相应的“npm ERR!”消息：</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>package.json 文件格式不正确<ept id="p1">**</ept>：npm ERR!</source>
          <target state="new"><bpt id="p1">**</bpt>package.json 文件格式不正确<ept id="p1">**</ept>：npm ERR!</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>无法读取依赖项。</source>
          <target state="new">无法读取依赖项。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>不具有 Windows 的二进制分发的本机模块<ept id="p1">**</ept>：</source>
          <target state="new"><bpt id="p1">**</bpt>不具有 Windows 的二进制分发的本机模块<ept id="p1">**</ept>：</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>npm ERR!</source>
          <target state="new">npm ERR!</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`cmd "/c" "node-gyp rebuild"`</ph> failed with 1</source>
          <target state="new"><ph id="ph1">`cmd "/c" "node-gyp rebuild"`</ph> failed with 1</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>或者</source>
          <target state="new">或者</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>npm ERR!</source>
          <target state="new">npm ERR!</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>[modulename@version] preinstall: <ph id="ph1">`make || gmake`</ph></source>
          <target state="new">[modulename@version] preinstall: <ph id="ph1">`make || gmake`</ph></target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>其他资源</source>
          <target state="new">其他资源</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>如何使用适用于 Azure 的 PowerShell</source>
          <target state="new">如何使用适用于 Azure 的 PowerShell</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>如何使用针对 Mac 和 Linux 的 Azure 命令行工具</source>
          <target state="new">如何使用针对 Mac 和 Linux 的 Azure 命令行工具</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Git 文档</source>
          <target state="new">Git 文档</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>