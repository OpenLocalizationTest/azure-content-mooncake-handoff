<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eed0cfbba80595ec18617bfd96e3b6069d1323db</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在移动服务中使用脱机数据 (Xamarin Android) | Microsoft Azure</source>
          <target state="new">在移动服务中使用脱机数据 (Xamarin Android) | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用 Azure 移动服务向 Xamarin.android 应用程序中的缓存和同步离线数据</source>
          <target state="new">了解如何使用 Azure 移动服务向 Xamarin.android 应用程序中的缓存和同步离线数据</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在移动服务中使用脱机数据同步</source>
          <target state="new">在移动服务中使用脱机数据同步</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本主题将指导你通过 Azure 移动服务的脱机同步功能在 todo 列表快速入门应用程序中。脱机同步可轻松地创建应用程序即使在最终用户不具有任何网络访问权限时才可用。</source>
          <target state="new">本主题将指导你通过 Azure 移动服务的脱机同步功能在 todo 列表快速入门应用程序中。脱机同步可轻松地创建应用程序即使在最终用户不具有任何网络访问权限时才可用。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>脱机同步具有几种可能的用法：</source>
          <target state="new">脱机同步具有几种可能的用法：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>通过缓存在设备上的本地服务器数据来提高应用程序响应能力</source>
          <target state="new">通过缓存在设备上的本地服务器数据来提高应用程序响应能力</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>使应用程序可灵活地应对间歇性网络连接</source>
          <target state="new">使应用程序可灵活地应对间歇性网络连接</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>允许最终用户创建和修改数据，甚至在没有网络访问权限，并支持方案具有很少或没有连接时</source>
          <target state="new">允许最终用户创建和修改数据，甚至在没有网络访问权限，并支持方案具有很少或没有连接时</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>跨多个设备同步数据和同一个记录修改由两个设备时检测冲突</source>
          <target state="new">跨多个设备同步数据和同一个记录修改由两个设备时检测冲突</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>若要完成本教程，你需要一个 Azure 帐户。如果你没有帐户，可以注册 Azure 试用版并取得多达 10 个免费的移动服务，即使在试用期结束之后仍可继续使用这些服务。有关详细信息，请参阅 <bpt id="p1">[</bpt>Azure 试用<ept id="p1">](/pricing/1rmb-trial)</ept><ph id="ph2">&lt;/a&gt;</ph>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>若要完成本教程，你需要一个 Azure 帐户。如果你没有帐户，可以注册 Azure 试用版并取得多达 10 个免费的移动服务，即使在试用期结束之后仍可继续使用这些服务。有关详细信息，请参阅 <bpt id="p1">[</bpt>Azure 试用<ept id="p1">](/pricing/1rmb-trial)</ept><ph id="ph2">&lt;/a&gt;</ph>。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>如果这是你第一次体验移动服务，你应首先完成<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>。</source>
          <target state="new">如果这是你第一次体验移动服务，你应首先完成<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>本教程将指导你完成以下基本步骤：</source>
          <target state="new">本教程将指导你完成以下基本步骤：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>查看移动服务同步代码</source>
          <target state="new">查看移动服务同步代码</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>更新应用程序的同步行为</source>
          <target state="new">更新应用程序的同步行为</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>更新应用程序以重新连接移动服务</source>
          <target state="new">更新应用程序以重新连接移动服务</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>本教程需要的内容如下：</source>
          <target state="new">本教程需要的内容如下：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>带 <bpt id="p1">[</bpt><ept id="p1">Xamarin 扩展]</ept><bpt id="p2">**</bpt>或<ept id="p2">**</ept> <bpt id="p3">[</bpt><ept id="p3">Xamarin Studio]</ept> 的 Visual Studio</source>
          <target state="new">带 <bpt id="p1">[</bpt><ept id="p1">Xamarin 扩展]</ept><bpt id="p2">**</bpt>或<ept id="p2">**</ept> <bpt id="p3">[</bpt><ept id="p3">Xamarin Studio]</ept> 的 Visual Studio</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>完成<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>教程</source>
          <target state="new">完成<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>教程</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="review-offline"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>查看移动服务同步代码</source>
          <target state="new"><ph id="ph1">&lt;a name="review-offline"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>查看移动服务同步代码</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Azure 移动服务脱机同步允许最终用户在无法访问网络时与本地数据库交互。若要在你的应用程序中使用这些功能，请将 <ph id="ph1">`MobileServiceClient.SyncContext`</ph> 初始化到本地存储。然后，通过 <ph id="ph2">`IMobileServiceSyncTable`</ph> 接口引用你的表。本部分将指导完成脱机同步 <ph id="ph3">`ToDoActivity.cs`</ph> 中的相关代码。</source>
          <target state="new">Azure 移动服务脱机同步允许最终用户在无法访问网络时与本地数据库交互。若要在你的应用程序中使用这些功能，请将 <ph id="ph1">`MobileServiceClient.SyncContext`</ph> 初始化到本地存储。然后，通过 <ph id="ph2">`IMobileServiceSyncTable`</ph> 接口引用你的表。本部分将指导完成脱机同步 <ph id="ph3">`ToDoActivity.cs`</ph> 中的相关代码。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 或 Xamarin Studio 中，打开你在完成<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>教程后创建的项目。打开 <ph id="ph1">`ToDoActivity.cs`</ph> 文件。</source>
          <target state="new">在 Visual Studio 或 Xamarin Studio 中，打开你在完成<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>教程后创建的项目。打开 <ph id="ph1">`ToDoActivity.cs`</ph> 文件。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>请注意成员 <ph id="ph1">`toDoTable`</ph> 的类型是 <ph id="ph2">`IMobileServiceSyncTable`</ph>。脱机同步使用此同步表接口而不是 <ph id="ph3">`IMobileServiceTable`</ph>。当使用同步表时，所有操作转到本地存储区，并仅同步与远程服务与显式的推和请求操作。</source>
          <target state="new">请注意成员 <ph id="ph1">`toDoTable`</ph> 的类型是 <ph id="ph2">`IMobileServiceSyncTable`</ph>。脱机同步使用此同步表接口而不是 <ph id="ph3">`IMobileServiceTable`</ph>。当使用同步表时，所有操作转到本地存储区，并仅同步与远程服务与显式的推和请求操作。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>若要获取对同步表的引用，请使用 <ph id="ph1">`GetSyncTable()`</ph> 方法。若要删除脱机同步功能，应改用 <ph id="ph2">`GetTable()`</ph>。</source>
          <target state="new">若要获取对同步表的引用，请使用 <ph id="ph1">`GetSyncTable()`</ph> 方法。若要删除脱机同步功能，应改用 <ph id="ph2">`GetTable()`</ph>。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>表操作之前，必须初始化本地存储区。这可以在 <ph id="ph1">`InitLocalStoreAsync`</ph> 方法中完成：</source>
          <target state="new">表操作之前，必须初始化本地存储区。这可以在 <ph id="ph1">`InitLocalStoreAsync`</ph> 方法中完成：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>这将使用移动服务 SDK 中提供的类 <ph id="ph1">`MobileServiceSQLiteStore`</ph> 创建本地存储。你还可以通过实现 <ph id="ph2">`IMobileServiceLocalStore`</ph> 提供不同的本地存储实现。</source>
          <target state="new">这将使用移动服务 SDK 中提供的类 <ph id="ph1">`MobileServiceSQLiteStore`</ph> 创建本地存储。你还可以通过实现 <ph id="ph2">`IMobileServiceLocalStore`</ph> 提供不同的本地存储实现。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DefineTable`</ph> 方法与所提供的类型中的字段相匹配的本地存储中创建一个表 <ph id="ph2">`ToDoItem`</ph> 这种情况下。该类型无需包括所有的列，同时在远程数据库中就可以存储列的子集。</source>
          <target state="new"><ph id="ph1">`DefineTable`</ph> 方法与所提供的类型中的字段相匹配的本地存储中创建一个表 <ph id="ph2">`ToDoItem`</ph> 这种情况下。该类型无需包括所有的列，同时在远程数据库中就可以存储列的子集。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>此重载 <ph id="ph1">`InitializeAsync`</ph> 使用默认冲突处理程序，只要有冲突，则将失败。若要提供自定义冲突处理程序，请参阅教程<bpt id="p1">[</bpt><ept id="p1">处理脱机支持的移动服务与冲突]</ept>。</source>
          <target state="new">此重载 <ph id="ph1">`InitializeAsync`</ph> 使用默认冲突处理程序，只要有冲突，则将失败。若要提供自定义冲突处理程序，请参阅教程<bpt id="p1">[</bpt><ept id="p1">处理脱机支持的移动服务与冲突]</ept>。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>方法 <ph id="ph1">`SyncAsync`</ph> 触发实际同步操作：</source>
          <target state="new">方法 <ph id="ph1">`SyncAsync`</ph> 触发实际同步操作：</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>首先，将调用 <ph id="ph1">`IMobileServiceSyncContext.PushAsync()`</ph>。此方法属于 <ph id="ph2">`IMobileServicesSyncContext`</ph> 而不是同步表，因为它会将更改推送到所有表中。只有已在本地以某种方式修改（通过 CUD 操作来完成）的记录才会发送到服务器。</source>
          <target state="new">首先，将调用 <ph id="ph1">`IMobileServiceSyncContext.PushAsync()`</ph>。此方法属于 <ph id="ph2">`IMobileServicesSyncContext`</ph> 而不是同步表，因为它会将更改推送到所有表中。只有已在本地以某种方式修改（通过 CUD 操作来完成）的记录才会发送到服务器。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>接下来，该方法调用 <ph id="ph1">`IMobileServiceSyncTable.PullAsync()`</ph> 向应用程序的服务器上表中提取数据。请注意是否有任何挂起的更改的同步上下文中，请求始终先发出推送操作。这是为了确保一致的本地存储区以及关系中的所有表。在这种情况下，我们必须显式调用推送。</source>
          <target state="new">接下来，该方法调用 <ph id="ph1">`IMobileServiceSyncTable.PullAsync()`</ph> 向应用程序的服务器上表中提取数据。请注意是否有任何挂起的更改的同步上下文中，请求始终先发出推送操作。这是为了确保一致的本地存储区以及关系中的所有表。在这种情况下，我们必须显式调用推送。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>在此示例中，我们检索远程中的所有记录 <ph id="ph1">`TodoItem`</ph> 表中，但它也可能是要作为筛选依据传递查询的记录。<ph id="ph2">`PullAsync()`</ph> 的第一个参数是用于增量同步的查询 ID；增量同步使用 <ph id="ph3">`UpdatedAt`</ph> 时间戳以仅获取自上次同步以来修改的那些记录。查询 ID 应对于你的应用程序中的每个逻辑查询都是唯一的描述性字符串。若选择不要增量同步，请传递 <ph id="ph4">`null`</ph> 作为查询 ID。此命令会检索每个请求的操作，这是可能效率低下上的所有记录。</source>
          <target state="new">在此示例中，我们检索远程中的所有记录 <ph id="ph1">`TodoItem`</ph> 表中，但它也可能是要作为筛选依据传递查询的记录。<ph id="ph2">`PullAsync()`</ph> 的第一个参数是用于增量同步的查询 ID；增量同步使用 <ph id="ph3">`UpdatedAt`</ph> 时间戳以仅获取自上次同步以来修改的那些记录。查询 ID 应对于你的应用程序中的每个逻辑查询都是唯一的描述性字符串。若选择不要增量同步，请传递 <ph id="ph4">`null`</ph> 作为查询 ID。此命令会检索每个请求的操作，这是可能效率低下上的所有记录。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>若要从设备本地存储区中删除已在移动设备数据库中删除的记录，应启用<bpt id="p1">[</bpt><ept id="p1">软删除]</ept>。否则，你的应用程序应定期调用 <ph id="ph2">`IMobileServiceSyncTable.PurgeAsync()`</ph> 以清除本地存储。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>若要从设备本地存储区中删除已在移动设备数据库中删除的记录，应启用<bpt id="p1">[</bpt><ept id="p1">软删除]</ept>。否则，你的应用程序应定期调用 <ph id="ph2">`IMobileServiceSyncTable.PurgeAsync()`</ph> 以清除本地存储。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>请注意，推送和请求操作可能会发生 <ph id="ph1">`MobileServicePushFailedException`</ph>。下一篇教程<bpt id="p1">[</bpt><ept id="p1">使用移动服务脱机支持处理冲突]</ept>说明了如何处理这些同步相关的异常。</source>
          <target state="new">请注意，推送和请求操作可能会发生 <ph id="ph1">`MobileServicePushFailedException`</ph>。下一篇教程<bpt id="p1">[</bpt><ept id="p1">使用移动服务脱机支持处理冲突]</ept>说明了如何处理这些同步相关的异常。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`ToDoActivity`</ph> 类中，<ph id="ph2">`SyncAsync()`</ph> 方法之后修改数据的操作，将调用 <ph id="ph3">`AddItem()`</ph> 和 <ph id="ph4">`CheckItem()`</ph>。它也称为从 <ph id="ph5">`OnRefreshItemsSelected()`</ph>，以便用户获取最新数据，只要它们推送“刷新”按钮。该应用程序还执行同步启动，因为 <ph id="ph6">`ToDoActivity.OnCreate()`</ph> 调用 <ph id="ph7">`OnRefreshItemsSelected()`</ph>。</source>
          <target state="new">在 <ph id="ph1">`ToDoActivity`</ph> 类中，<ph id="ph2">`SyncAsync()`</ph> 方法之后修改数据的操作，将调用 <ph id="ph3">`AddItem()`</ph> 和 <ph id="ph4">`CheckItem()`</ph>。它也称为从 <ph id="ph5">`OnRefreshItemsSelected()`</ph>，以便用户获取最新数据，只要它们推送“刷新”按钮。该应用程序还执行同步启动，因为 <ph id="ph6">`ToDoActivity.OnCreate()`</ph> 调用 <ph id="ph7">`OnRefreshItemsSelected()`</ph>。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>因为 <ph id="ph1">`SyncAsync()`</ph> 只要修改数据时，就将调用此应用程序假定用户处于联机状态，只要他们正在编辑的数据。在下一部分中，我们将更新应用程序，以便用户可以编辑甚至当它们处于脱机状态。</source>
          <target state="new">因为 <ph id="ph1">`SyncAsync()`</ph> 只要修改数据时，就将调用此应用程序假定用户处于联机状态，只要他们正在编辑的数据。在下一部分中，我们将更新应用程序，以便用户可以编辑甚至当它们处于脱机状态。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="update-sync"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新应用程序的同步行为</source>
          <target state="new"><ph id="ph1">&lt;a name="update-sync"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新应用程序的同步行为</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>在本部分中，将修改应用程序，以便它不会同步应用程序启动或 insert 和 update 操作，而只推送刷新按钮。然后，将中断与移动服务以模拟脱机情况下的应用程序连接。在添加数据项时，它们将保存在本地存储区，但不是会立即同步到移动服务。</source>
          <target state="new">在本部分中，将修改应用程序，以便它不会同步应用程序启动或 insert 和 update 操作，而只推送刷新按钮。然后，将中断与移动服务以模拟脱机情况下的应用程序连接。在添加数据项时，它们将保存在本地存储区，但不是会立即同步到移动服务。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`ToDoActivity`</ph> 类中，编辑方法 <ph id="ph2">`AddItem()`</ph> 和 <ph id="ph3">`CheckItem()`</ph>，并注释掉对 <ph id="ph4">`SyncAsync()`</ph> 的调用。</source>
          <target state="new">在 <ph id="ph1">`ToDoActivity`</ph> 类中，编辑方法 <ph id="ph2">`AddItem()`</ph> 和 <ph id="ph3">`CheckItem()`</ph>，并注释掉对 <ph id="ph4">`SyncAsync()`</ph> 的调用。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`ToDoActivity`</ph> 中，注释掉成员 <ph id="ph2">`applicationURL`</ph> 和 <ph id="ph3">`applicationKey`</ph> 的定义。添加以下行，通过引用无效的移动服务 URL：</source>
          <target state="new">在 <ph id="ph1">`ToDoActivity`</ph> 中，注释掉成员 <ph id="ph2">`applicationURL`</ph> 和 <ph id="ph3">`applicationKey`</ph> 的定义。添加以下行，通过引用无效的移动服务 URL：</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`ToDoActivity.OnCreate()`</ph> 中，删除对 <ph id="ph2">`OnRefreshItemsSelected()`</ph> 的调用并将其替换为：</source>
          <target state="new">在 <ph id="ph1">`ToDoActivity.OnCreate()`</ph> 中，删除对 <ph id="ph2">`OnRefreshItemsSelected()`</ph> 的调用并将其替换为：</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>构建并运行应用程序。添加一些新的 todo 项。新的 Todo 项目在推送到移动服务之前，只存在于本地存储中。客户端应用程序的行为就像它已连接到支持所有创建、读取、更新、删除 (CRUD) 操作的移动服务一样。</source>
          <target state="new">构建并运行应用程序。添加一些新的 todo 项。新的 Todo 项目在推送到移动服务之前，只存在于本地存储中。客户端应用程序的行为就像它已连接到支持所有创建、读取、更新、删除 (CRUD) 操作的移动服务一样。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>关闭应用程序并重新启动它，以验证你创建的新项目是否已永久保存到本地存储中。</source>
          <target state="new">关闭应用程序并重新启动它，以验证你创建的新项目是否已永久保存到本地存储中。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="update-online-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新应用程序以重新连接移动服务</source>
          <target state="new"><ph id="ph1">&lt;a name="update-online-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新应用程序以重新连接移动服务</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>在本节中，你会将应用程序重新连接到移动服务。这模拟的是通过移动服务从脱机状态转为联机状态的应用程序。推送“刷新”按钮时，数据将同步到你的移动服务。</source>
          <target state="new">在本节中，你会将应用程序重新连接到移动服务。这模拟的是通过移动服务从脱机状态转为联机状态的应用程序。推送“刷新”按钮时，数据将同步到你的移动服务。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>打开 <ph id="ph1">`ToDoActivity.cs`</ph>。删除无效的移动服务 URL，并添加回正确的 URL 和应用程序密钥。</source>
          <target state="new">打开 <ph id="ph1">`ToDoActivity.cs`</ph>。删除无效的移动服务 URL，并添加回正确的 URL 和应用程序密钥。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>构建并运行应用程序。请注意，数据看上去与脱机情况下相同，即使应用程序现已连接到移动服务。这是因为此应用程序始终使用指向本地存储的 <ph id="ph1">`IMobileServiceSyncTable`</ph>。</source>
          <target state="new">构建并运行应用程序。请注意，数据看上去与脱机情况下相同，即使应用程序现已连接到移动服务。这是因为此应用程序始终使用指向本地存储的 <ph id="ph1">`IMobileServiceSyncTable`</ph>。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>登录到 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>，查看你的移动服务数据库。如果服务使用 JavaScript 后端，则你可以从移动服务的“数据”选项卡浏览数据。</source>
          <target state="new">登录到 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>，查看你的移动服务数据库。如果服务使用 JavaScript 后端，则你可以从移动服务的“数据”选项卡浏览数据。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>如果将 .NET 后端用于移动服务，请在 Visual Studio 中，转到“服务器资源管理器”-&gt;“Azure”-&gt;“SQL 数据库”。右键单击数据库并选择“在 SQL Server 对象资源管理器中打开”。</source>
          <target state="new">如果将 .NET 后端用于移动服务，请在 Visual Studio 中，转到“服务器资源管理器”-&gt;“Azure”-&gt;“SQL 数据库”。右键单击数据库并选择“在 SQL Server 对象资源管理器中打开”。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>请注意，数据<bpt id="p1">*</bpt>尚未<ept id="p1">*</ept>在数据库和本地存储之间同步。</source>
          <target state="new">请注意，数据<bpt id="p1">*</bpt>尚未<ept id="p1">*</ept>在数据库和本地存储之间同步。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>在应用程序中，按刷新按钮。这将调用 <ph id="ph1">`OnRefreshItemsSelected()`</ph>，从而又会调用 <ph id="ph2">`SyncAsync()`</ph>。这将执行推送和请求的操作，首先将本地存储项发送到移动服务中，然后从服务中检索新数据。</source>
          <target state="new">在应用程序中，按刷新按钮。这将调用 <ph id="ph1">`OnRefreshItemsSelected()`</ph>，从而又会调用 <ph id="ph2">`SyncAsync()`</ph>。这将执行推送和请求的操作，首先将本地存储项发送到移动服务中，然后从服务中检索新数据。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>请检查你的移动服务以确认更改都已同步的数据库。</source>
          <target state="new">请检查你的移动服务以确认更改都已同步的数据库。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>摘要</source>
          <target state="new">摘要</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>使用移动服务脱机支持处理冲突</source>
          <target state="new">使用移动服务脱机支持处理冲突</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>如何使用适用于 Azure 移动服务的 Xamarin 组件客户端</source>
          <target state="new">如何使用适用于 Azure 移动服务的 Xamarin 组件客户端</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>