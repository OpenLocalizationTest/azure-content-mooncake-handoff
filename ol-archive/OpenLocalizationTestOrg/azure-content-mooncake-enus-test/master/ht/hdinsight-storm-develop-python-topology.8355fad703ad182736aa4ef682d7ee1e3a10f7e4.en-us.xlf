<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a8233b7398cba41ee32ec74d2dacd07548a2827</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 HDinsight 上的 Storm 拓扑中使用 Python 组件 | Azure</source>
          <target state="new">在 HDinsight 上的 Storm 拓扑中使用 Python 组件 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在 Azure HDInsight 上的 Apache Storm 中使用 Python 组件。你将学习如何通过基于 Java 和 Clojure 的 Storm 拓扑使用 Python 组件。</source>
          <target state="new">了解如何在 Azure HDInsight 上的 Apache Storm 中使用 Python 组件。你将学习如何通过基于 Java 和 Clojure 的 Storm 拓扑使用 Python 组件。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 HDInsight 上使用 Python 开发 Apache Storm 拓扑</source>
          <target state="new">在 HDInsight 上使用 Python 开发 Apache Storm 拓扑</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Apache Storm 支持多种语言，甚至可让你将多种语言的组件合并成一个拓扑。在本文档中，你将学习如何在 HDInsight 上的基于 Java 和 Clojure 的 Storm 拓扑中使用 Python 组件。</source>
          <target state="new">Apache Storm 支持多种语言，甚至可让你将多种语言的组件合并成一个拓扑。在本文档中，你将学习如何在 HDInsight 上的基于 Java 和 Clojure 的 Storm 拓扑中使用 Python 组件。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>先决条件</source>
          <target state="new">先决条件</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Python 2.7 或更高版本</source>
          <target state="new">Python 2.7 或更高版本</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Java JDK 1.7 或更高版本</source>
          <target state="new">Java JDK 1.7 或更高版本</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Leiningen</source>
          <target state="new">Leiningen</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Storm 多语言支持</source>
          <target state="new">Storm 多语言支持</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Storm 在设计上可与使用任何编程语言编写的组件配合使用，但这些组件必须知道如何使用 <bpt id="p1">[</bpt>Storm 的 Thrift 定义<ept id="p1">](https://github.com/apache/storm/blob/master/storm-core/src/storm.thrift)</ept>。在 Python 中，Apache Storm 项目随附了一个可让你轻松与 Strom 交互的模块。你可以在 <bpt id="p2">[</bpt>https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py<ept id="p2">](https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py)</ept> 上找到此模块。</source>
          <target state="new">Storm 在设计上可与使用任何编程语言编写的组件配合使用，但这些组件必须知道如何使用 <bpt id="p1">[</bpt>Storm 的 Thrift 定义<ept id="p1">](https://github.com/apache/storm/blob/master/storm-core/src/storm.thrift)</ept>。在 Python 中，Apache Storm 项目随附了一个可让你轻松与 Strom 交互的模块。你可以在 <bpt id="p2">[</bpt>https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py<ept id="p2">](https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py)</ept> 上找到此模块。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>由于 Apache Storm 是在 Java 虚拟机 (JVM) 上运行的 Java 进程，以其他语言编写的组件将以子进程的形式执行。JVM 中运行的 Storm 代码使用通过 stdin/stdout 发送的 JSON 消息来与这些子进程通信。有关各组件之间通信的详细信息，请参阅<bpt id="p1">[</bpt>多语言协议<ept id="p1">](https://storm.apache.org/documentation/Multilang-protocol.html)</ept>文档。</source>
          <target state="new">由于 Apache Storm 是在 Java 虚拟机 (JVM) 上运行的 Java 进程，以其他语言编写的组件将以子进程的形式执行。JVM 中运行的 Storm 代码使用通过 stdin/stdout 发送的 JSON 消息来与这些子进程通信。有关各组件之间通信的详细信息，请参阅<bpt id="p1">[</bpt>多语言协议<ept id="p1">](https://storm.apache.org/documentation/Multilang-protocol.html)</ept>文档。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Storm 模块</source>
          <target state="new">Storm 模块</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Storm 模块 (https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py,) 提供所需的代码用于创建可与 Storm 配合使用的 Python 组件。</source>
          <target state="new">Storm 模块 (https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py,) 提供所需的代码用于创建可与 Storm 配合使用的 Python 组件。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>例如，<ph id="ph1">`storm.emit`</ph> 可以发出 Tuple，<ph id="ph2">`storm.logInfo`</ph> 可以写入日志。建议通读本文件，以了解该模块所提供的功能。</source>
          <target state="new">例如，<ph id="ph1">`storm.emit`</ph> 可以发出 Tuple，<ph id="ph2">`storm.logInfo`</ph> 可以写入日志。建议通读本文件，以了解该模块所提供的功能。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>挑战</source>
          <target state="new">挑战</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>借助 <bpt id="p1">__</bpt>storm.py<ept id="p1">__</ept> 模块可以创建 Python spout 来使用数据、创建 Bolt 来处理数据，但是，负责在组件之间建立通信的整个 Storm 拓扑定义仍需使用 Java 或 Clojure 编写。此外，如果你使用 Java，还必须创建充当 Python 组件接口的 Java 组件。</source>
          <target state="new">借助 <bpt id="p1">__</bpt>storm.py<ept id="p1">__</ept> 模块可以创建 Python spout 来使用数据、创建 Bolt 来处理数据，但是，负责在组件之间建立通信的整个 Storm 拓扑定义仍需使用 Java 或 Clojure 编写。此外，如果你使用 Java，还必须创建充当 Python 组件接口的 Java 组件。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>此外，由于 Storm 群集以分布方式运行，因此你必须确保 Python 组件所需的任何模块可供群集中的所有辅助节点使用。对于多语言资源，Storm 无法让你轻松实现此目的 - 你必须将所有依赖项包含在拓扑的 jar 文件中，或者在群集的每个辅助节点上手动安装依赖项。</source>
          <target state="new">此外，由于 Storm 群集以分布方式运行，因此你必须确保 Python 组件所需的任何模块可供群集中的所有辅助节点使用。对于多语言资源，Storm 无法让你轻松实现此目的 - 你必须将所有依赖项包含在拓扑的 jar 文件中，或者在群集的每个辅助节点上手动安装依赖项。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Java 与Clojure 拓扑定义的比较</source>
          <target state="new">Java 与Clojure 拓扑定义的比较</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>在两种定义拓扑的方法，Clojure 是目前为止最简单直接的方法，因为你可以在拓朴定义中直接引用 python 组件。对于基于 Java 的拓朴定义，你还必须定义 Java 组件用于处理一些操作，例如在 Python 组件返回的 Tuple 中声明字段。</source>
          <target state="new">在两种定义拓扑的方法，Clojure 是目前为止最简单直接的方法，因为你可以在拓朴定义中直接引用 python 组件。对于基于 Java 的拓朴定义，你还必须定义 Java 组件用于处理一些操作，例如在 Python 组件返回的 Tuple 中声明字段。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>本文档将介绍这两种方法，并附上示例项目。</source>
          <target state="new">本文档将介绍这两种方法，并附上示例项目。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>使用 Java 拓扑的 Python 组件</source>
          <target state="new">使用 Java 拓扑的 Python 组件</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>此示例位于 <bpt id="p1">[</bpt>https://github.com/Azure-Samples/hdinsight-python-storm-wordcount<ept id="p1">](https://github.com/Azure-Samples/hdinsight-python-storm-wordcount)</ept> 上的 <bpt id="p2">__</bpt>JavaTopology<ept id="p2">__</ept> 目录中。这是一个基于 Maven 的项目。如果你不熟悉 Maven，请参阅<bpt id="p3">[</bpt>在 HDInsight 上使用 Apache Storm 开发基于 Java 的拓扑<ept id="p3">](/documentation/articles/hdinsight-storm-develop-java-topology)</ept>，以获取有关如何为 Storm 拓扑创建 Maven 项目的详细信息。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>此示例位于 <bpt id="p1">[</bpt>https://github.com/Azure-Samples/hdinsight-python-storm-wordcount<ept id="p1">](https://github.com/Azure-Samples/hdinsight-python-storm-wordcount)</ept> 上的 <bpt id="p2">__</bpt>JavaTopology<ept id="p2">__</ept> 目录中。这是一个基于 Maven 的项目。如果你不熟悉 Maven，请参阅<bpt id="p3">[</bpt>在 HDInsight 上使用 Apache Storm 开发基于 Java 的拓扑<ept id="p3">](/documentation/articles/hdinsight-storm-develop-java-topology)</ept>，以获取有关如何为 Storm 拓扑创建 Maven 项目的详细信息。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>使用 Python（或其他 JVM 语言组件）的基于 Java 的拓朴乍看之下是使用了 Java 组件，但如果你仔细查看每个 Java Spout/Bolt，将看到类似于以下代码：</source>
          <target state="new">使用 Python（或其他 JVM 语言组件）的基于 Java 的拓朴乍看之下是使用了 Java 组件，但如果你仔细查看每个 Java Spout/Bolt，将看到类似于以下代码：</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Java 在此处调用 Python，并运行包含实际 Blot 逻辑的脚本。Java Spout/Bolt（对于本示例）只是在基础 Python 组件要发出的 Tuple 中声明字段。</source>
          <target state="new">Java 在此处调用 Python，并运行包含实际 Blot 逻辑的脚本。Java Spout/Bolt（对于本示例）只是在基础 Python 组件要发出的 Tuple 中声明字段。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在本示例中，实际 Python 文件存储在 <ph id="ph1">`/multilang/resources`</ph> 目录中。<ph id="ph2">`/multilang`</ph> 目录在 <bpt id="p1">__</bpt>pom.xml<ept id="p1">__</ept> 中引用：</source>
          <target state="new">在本示例中，实际 Python 文件存储在 <ph id="ph1">`/multilang/resources`</ph> 目录中。<ph id="ph2">`/multilang`</ph> 目录在 <bpt id="p1">__</bpt>pom.xml<ept id="p1">__</ept> 中引用：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>这会将 <ph id="ph1">`/multilang`</ph> 文件夹中的所有文件包含在基于此项目构建的 jar 中。</source>
          <target state="new">这会将 <ph id="ph1">`/multilang`</ph> 文件夹中的所有文件包含在基于此项目构建的 jar 中。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph>请注意，这只会指定 <ph id="ph2">`/multilang`</ph> 目录，而不是 <ph id="ph3">`/multilang/resources`</ph>。Storm 预期非 JVM 资源都位于 <ph id="ph4">`resources`</ph> 目录中，因此已在内部查找过该目录。将组件放入此文件夹可以在 Java 代码中直接按名称引用。例如，<ph id="ph5">`super("python", "countbolt.py");`</ph>。另一种思路是 Storm 在访问多语言资源时会将 <ph id="ph6">`resources`</ph> 目录视为根目录 (/)。</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph>请注意，这只会指定 <ph id="ph2">`/multilang`</ph> 目录，而不是 <ph id="ph3">`/multilang/resources`</ph>。Storm 预期非 JVM 资源都位于 <ph id="ph4">`resources`</ph> 目录中，因此已在内部查找过该目录。将组件放入此文件夹可以在 Java 代码中直接按名称引用。例如，<ph id="ph5">`super("python", "countbolt.py");`</ph>。另一种思路是 Storm 在访问多语言资源时会将 <ph id="ph6">`resources`</ph> 目录视为根目录 (/)。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>针对本示例项目，<ph id="ph1">`storm.py`</ph> 模块位于 <ph id="ph2">`/multilang/resources`</ph> 目录中。</source>
          <target state="new">针对本示例项目，<ph id="ph1">`storm.py`</ph> 模块位于 <ph id="ph2">`/multilang/resources`</ph> 目录中。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>构建并运行项目</source>
          <target state="new">构建并运行项目</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>若要在本地运行此项目，只需使用以下 Maven 命令构建并以本地模式运行此项目：</source>
          <target state="new">若要在本地运行此项目，只需使用以下 Maven 命令构建并以本地模式运行此项目：</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>使用 Ctrl+C 可终止进程。</source>
          <target state="new">使用 Ctrl+C 可终止进程。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>若要将项目部署到运行 Apache Storm 的 HDInsight 群集，请使用以下步骤：</source>
          <target state="new">若要将项目部署到运行 Apache Storm 的 HDInsight 群集，请使用以下步骤：</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>构建 uber jar：</source>
          <target state="new">构建 uber jar：</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>这会在此项目的 <ph id="ph1">`/target`</ph> 目录中创建名为 <bpt id="p1">__</bpt>WordCount--1.0-SNAPSHOT.jar<ept id="p1">__</ept> 的文件。</source>
          <target state="new">这会在此项目的 <ph id="ph1">`/target`</ph> 目录中创建名为 <bpt id="p1">__</bpt>WordCount--1.0-SNAPSHOT.jar<ept id="p1">__</ept> 的文件。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>使用以下方法之一将 jar 文件上载到 Hadoop 群集：</source>
          <target state="new">使用以下方法之一将 jar 文件上载到 Hadoop 群集：</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>对于<bpt id="p1">__</bpt>基于 Windows<ept id="p1">__</ept> 的 HDInsight 群集：在浏览器中转到 HTTPS://CLUSTERNAME.azurehdinsight.cn/，以连接到 Storm 仪表板。将 CLUSTERNAME 替换为你的 HDInsight 群集名称，并在出现提示时提供管理员名称和密码。</source>
          <target state="new">对于<bpt id="p1">__</bpt>基于 Windows<ept id="p1">__</ept> 的 HDInsight 群集：在浏览器中转到 HTTPS://CLUSTERNAME.azurehdinsight.cn/，以连接到 Storm 仪表板。将 CLUSTERNAME 替换为你的 HDInsight 群集名称，并在出现提示时提供管理员名称和密码。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>使用窗体执行以下操作：</source>
          <target state="new">使用窗体执行以下操作：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>Jar 文件<ept id="p1">__</ept>：选择“浏览”，然后选择 <bpt id="p2">__</bpt>WordCount-1.0-SNAPSHOT.jar<ept id="p2">__</ept> 文件</source>
          <target state="new"><bpt id="p1">__</bpt>Jar 文件<ept id="p1">__</ept>：选择“浏览”，然后选择 <bpt id="p2">__</bpt>WordCount-1.0-SNAPSHOT.jar<ept id="p2">__</ept> 文件</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>类名<ept id="p1">__</ept>：输入 <ph id="ph1">`com.microsoft.example.WordCount`</ph></source>
          <target state="new"><bpt id="p1">__</bpt>类名<ept id="p1">__</ept>：输入 <ph id="ph1">`com.microsoft.example.WordCount`</ph></target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>其他参数<ept id="p1">__</ept>：输入一个用于标识拓扑的友好名称，例如 <ph id="ph1">`wordcount`</ph></source>
          <target state="new"><bpt id="p1">__</bpt>其他参数<ept id="p1">__</ept>：输入一个用于标识拓扑的友好名称，例如 <ph id="ph1">`wordcount`</ph></target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>最后，选择“提交”以启动拓扑。</source>
          <target state="new">最后，选择“提交”以启动拓扑。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>Storm 拓扑在启动之后将一直运行，直到被停止（终止）。 若要停止拓扑，请从命令行使用 <ph id="ph2">`storm kill TOPOLOGYNAME`</ph> 命令，或使用 Storm UI 选择拓扑，然后选择“终止”按钮。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>Storm 拓扑在启动之后将一直运行，直到被停止（终止）。 若要停止拓扑，请从命令行使用 <ph id="ph2">`storm kill TOPOLOGYNAME`</ph> 命令，或使用 Storm UI 选择拓扑，然后选择“终止”按钮。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>使用 Clojure 拓扑的 Python 组件</source>
          <target state="new">使用 Clojure 拓扑的 Python 组件</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>此示例位于 <bpt id="p1">[</bpt>https://github.com/Azure-Samples/hdinsight-python-storm-wordcount<ept id="p1">](https://github.com/Azure-Samples/hdinsight-python-storm-wordcount)</ept> 上的 <bpt id="p2">__</bpt>ClojureTopology<ept id="p2">__</ept> 目录中。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>此示例位于 <bpt id="p1">[</bpt>https://github.com/Azure-Samples/hdinsight-python-storm-wordcount<ept id="p1">](https://github.com/Azure-Samples/hdinsight-python-storm-wordcount)</ept> 上的 <bpt id="p2">__</bpt>ClojureTopology<ept id="p2">__</ept> 目录中。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>此拓扑是使用 <bpt id="p1">[</bpt>Leiningen<ept id="p1">](http://leiningen.org)</ept> 创建的，用于<bpt id="p2">[</bpt>创建新的 Clojure 项目<ept id="p2">](https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md#creating-a-project)</ept>。之后，对基架项目做了以下修改：</source>
          <target state="new">此拓扑是使用 <bpt id="p1">[</bpt>Leiningen<ept id="p1">](http://leiningen.org)</ept> 创建的，用于<bpt id="p2">[</bpt>创建新的 Clojure 项目<ept id="p2">](https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md#creating-a-project)</ept>。之后，对基架项目做了以下修改：</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>project.clj<ept id="p1">__</ept>：为 Storm 添加的依赖项，以及在部署到 HDInsight 服务器时可能会造成问题的排除项。</source>
          <target state="new"><bpt id="p1">__</bpt>project.clj<ept id="p1">__</ept>：为 Storm 添加的依赖项，以及在部署到 HDInsight 服务器时可能会造成问题的排除项。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>resources/resources<ept id="p1">__</ept>：Leiningen 将创建默认的 <ph id="ph1">`resources`</ph> 目录，但是，此处存储的文件似乎已添加到基于此项目创建的 jar 文件所在的根目录，但 Storm 预期这些文件位于名为 <ph id="ph2">`resources`</ph> 的子目录中。因此添加了一个子目录，而 Python 文件就存储在 <ph id="ph3">`resources/resources`</ph> 中。在运行时，此目录被视为访问 Python 组件时的根目录 (/)。</source>
          <target state="new"><bpt id="p1">__</bpt>resources/resources<ept id="p1">__</ept>：Leiningen 将创建默认的 <ph id="ph1">`resources`</ph> 目录，但是，此处存储的文件似乎已添加到基于此项目创建的 jar 文件所在的根目录，但 Storm 预期这些文件位于名为 <ph id="ph2">`resources`</ph> 的子目录中。因此添加了一个子目录，而 Python 文件就存储在 <ph id="ph3">`resources/resources`</ph> 中。在运行时，此目录被视为访问 Python 组件时的根目录 (/)。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>src/wordcount/core.clj<ept id="p1">__</ept>：此文件包含拓扑定义，并通过 <bpt id="p2">__</bpt>project.clj<ept id="p2">__</ept> 文件引用。有关使用 Clojure 定义 Storm 拓扑的详细信息，请参阅 <bpt id="p3">[</bpt>Clojure DSL<ept id="p3">](https://storm.apache.org/documentation/Clojure-DSL.html)</ept>。</source>
          <target state="new"><bpt id="p1">__</bpt>src/wordcount/core.clj<ept id="p1">__</ept>：此文件包含拓扑定义，并通过 <bpt id="p2">__</bpt>project.clj<ept id="p2">__</ept> 文件引用。有关使用 Clojure 定义 Storm 拓扑的详细信息，请参阅 <bpt id="p3">[</bpt>Clojure DSL<ept id="p3">](https://storm.apache.org/documentation/Clojure-DSL.html)</ept>。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>构建并运行项目</source>
          <target state="new">构建并运行项目</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>若要在本地构建并运行项目<ept id="p1">__</ept>，请使用以下命令：</source>
          <target state="new"><bpt id="p1">__</bpt>若要在本地构建并运行项目<ept id="p1">__</ept>，请使用以下命令：</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>若要停止拓扑，请使用 <bpt id="p1">__</bpt>Ctrl+C<ept id="p1">__</ept>。</source>
          <target state="new">若要停止拓扑，请使用 <bpt id="p1">__</bpt>Ctrl+C<ept id="p1">__</ept>。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>若要构建 Uberjar 并部署到 HDInsight<ept id="p1">__</ept>，请使用以下步骤：</source>
          <target state="new"><bpt id="p1">__</bpt>若要构建 Uberjar 并部署到 HDInsight<ept id="p1">__</ept>，请使用以下步骤：</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>创建包含拓扑和所需依赖项的 uberjar：</source>
          <target state="new">创建包含拓扑和所需依赖项的 uberjar：</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>这会在 <ph id="ph1">`target\uberjar+uberjar`</ph> 目录中创建名为 <ph id="ph2">`wordcount-1.0-SNAPSHOT.jar`</ph> 的新文件。</source>
          <target state="new">这会在 <ph id="ph1">`target\uberjar+uberjar`</ph> 目录中创建名为 <ph id="ph2">`wordcount-1.0-SNAPSHOT.jar`</ph> 的新文件。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>使用以下方法之一将拓扑部署到 HDInsight 群集并运行该拓扑：</source>
          <target state="new">使用以下方法之一将拓扑部署到 HDInsight 群集并运行该拓扑：</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>基于 Windows 的 HDInsight</source>
          <target state="new">基于 Windows 的 HDInsight</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>在浏览器中转到 HTTPS://CLUSTERNAME.azurehdinsight.cn/，以连接到 Storm 仪表板。将 CLUSTERNAME 替换为你的 HDInsight 群集名称，并在出现提示时提供管理员名称和密码。</source>
          <target state="new">在浏览器中转到 HTTPS://CLUSTERNAME.azurehdinsight.cn/，以连接到 Storm 仪表板。将 CLUSTERNAME 替换为你的 HDInsight 群集名称，并在出现提示时提供管理员名称和密码。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>使用窗体执行以下操作：</source>
          <target state="new">使用窗体执行以下操作：</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>Jar 文件<ept id="p1">__</ept>：选择“浏览”，然后选择 <bpt id="p2">__</bpt>wordcount-1.0-SNAPSHOT.jar<ept id="p2">__</ept> 文件</source>
          <target state="new"><bpt id="p1">__</bpt>Jar 文件<ept id="p1">__</ept>：选择“浏览”，然后选择 <bpt id="p2">__</bpt>wordcount-1.0-SNAPSHOT.jar<ept id="p2">__</ept> 文件</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>类名<ept id="p1">__</ept>：输入 <ph id="ph1">`wordcount.core`</ph></source>
          <target state="new"><bpt id="p1">__</bpt>类名<ept id="p1">__</ept>：输入 <ph id="ph1">`wordcount.core`</ph></target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">__</bpt>其他参数<ept id="p1">__</ept>：输入一个用于标识拓扑的友好名称，例如 <ph id="ph1">`wordcount`</ph></source>
          <target state="new"><bpt id="p1">__</bpt>其他参数<ept id="p1">__</ept>：输入一个用于标识拓扑的友好名称，例如 <ph id="ph1">`wordcount`</ph></target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>最后，选择“提交”以启动拓扑。</source>
          <target state="new">最后，选择“提交”以启动拓扑。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>Storm 拓扑在启动之后将一直运行，直到被停止（终止）。 若要停止拓扑，请从命令行使用 <ph id="ph2">`storm kill TOPOLOGYNAME`</ph> 命令，或使用 Storm UI 选择拓扑，然后选择“终止”按钮。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>Storm 拓扑在启动之后将一直运行，直到被停止（终止）。 若要停止拓扑，请从命令行使用 <ph id="ph2">`storm kill TOPOLOGYNAME`</ph> 命令，或使用 Storm UI 选择拓扑，然后选择“终止”按钮。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>在本文档中，你已学习如何通过 Storm 拓扑使用 Python 组件。请参阅以下文档，了解将 Python 与 HDInsight 配合使用的其他方式：</source>
          <target state="new">在本文档中，你已学习如何通过 Storm 拓扑使用 Python 组件。请参阅以下文档，了解将 Python 与 HDInsight 配合使用的其他方式：</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>如何在 Pig 和 Hive 中使用 Python 用户定义的函数 (UDF)</source>
          <target state="new">如何在 Pig 和 Hive 中使用 Python 用户定义的函数 (UDF)</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>