<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">056af7e9474bcfe52680f6c1d5ad37da901c5063</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 SQL 数据仓库中透视和逆透视数据 | Azure</source>
          <target state="new">在 SQL 数据仓库中透视和逆透视数据 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>有关在开发解决方案时于 Azure SQL 数据仓库中透视和逆透视数据的技巧。</source>
          <target state="new">有关在开发解决方案时于 Azure SQL 数据仓库中透视和逆透视数据的技巧。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 SQL 数据仓库中透视和逆透视数据</source>
          <target state="new">在 SQL 数据仓库中透视和逆透视数据</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>可以使用 CASE 语句透视 SQL 数据仓库中的数据。</source>
          <target state="new">可以使用 CASE 语句透视 SQL 数据仓库中的数据。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本文包含两个简单示例，说明如何在不使用 SQL Server 中的透视和逆透视语法情况下，来透视和逆透视某个表。</source>
          <target state="new">本文包含两个简单示例，说明如何在不使用 SQL Server 中的透视和逆透视语法情况下，来透视和逆透视某个表。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>透视</source>
          <target state="new">透视</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>逆透视</source>
          <target state="new">逆透视</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>逆透视有点复杂。但是，仍然可以使用 <ph id="ph1">`CASE`</ph> 来实现。为此，首先还需要判断要逆透视多少列。在前面的示例中，我们透视了四列。让我们沿用此示例。若要执行逆透视，我们需要暂时使用系数 4 放大数据集。这就要执行一个双步骤过程：</source>
          <target state="new">逆透视有点复杂。但是，仍然可以使用 <ph id="ph1">`CASE`</ph> 来实现。为此，首先还需要判断要逆透视多少列。在前面的示例中，我们透视了四列。让我们沿用此示例。若要执行逆透视，我们需要暂时使用系数 4 放大数据集。这就要执行一个双步骤过程：</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>首先，创建一个包含四行的临时表。我们将使用此表来扩大数据：</source>
          <target state="new">首先，创建一个包含四行的临时表。我们将使用此表来扩大数据：</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>第二步是使用 CASE 条件性地逆透视数据，将数据集转换回行。若要实现此目的，我们需要通过联接到第一步中创建的临时表 #Nmbr，来创建笛卡儿积：</source>
          <target state="new">第二步是使用 CASE 条件性地逆透视数据，将数据集转换回行。若要实现此目的，我们需要通过联接到第一步中创建的临时表 #Nmbr，来创建笛卡儿积：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>最后，别忘了删除临时表以清理数据。</source>
          <target state="new">最后，别忘了删除临时表以清理数据。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>有关更多开发技巧，请参阅<bpt id="p1">[</bpt>开发概述<ept id="p1">][]</ept>。</source>
          <target state="new">有关更多开发技巧，请参阅<bpt id="p1">[</bpt>开发概述<ept id="p1">][]</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>