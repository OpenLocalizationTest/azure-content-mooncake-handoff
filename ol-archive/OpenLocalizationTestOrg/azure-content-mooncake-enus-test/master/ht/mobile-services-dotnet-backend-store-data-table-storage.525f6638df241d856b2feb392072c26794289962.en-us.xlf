<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4a808d2cc2a57012074662ae027baae0795cf402</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>构建使用表存储的 .NET 后端移动服务 | Azure 移动服务</source>
          <target state="new">构建使用表存储的 .NET 后端移动服务 | Azure 移动服务</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何对 .NET 后端移动服务使用 Azure 表存储。</source>
          <target state="new">了解如何对 .NET 后端移动服务使用 Azure 表存储。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>构建使用表存储的 .NET 后端移动服务</source>
          <target state="new">构建使用表存储的 .NET 后端移动服务</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本主题说明如何将非关系数据存储用于 .NET 后端移动服务。在本教程中，你将要修改移动服务快速入门项目，以使用 Azure 表存储而不是默认的 SQL 数据库数据存储。</source>
          <target state="new">本主题说明如何将非关系数据存储用于 .NET 后端移动服务。在本教程中，你将要修改移动服务快速入门项目，以使用 Azure 表存储而不是默认的 SQL 数据库数据存储。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>在学习本教程之前，需要先完成<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>教程。你还需要一个 Azure 存储帐户。</source>
          <target state="new">在学习本教程之前，需要先完成<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>教程。你还需要一个 Azure 存储帐户。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>在 .NET 后端移动服务中配置 Azure 表存储</source>
          <target state="new">在 .NET 后端移动服务中配置 Azure 表存储</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>首先，需要配置移动服务和 .NET 后端代码项目以连接到 Azure 存储空间。</source>
          <target state="new">首先，需要配置移动服务和 .NET 后端代码项目以连接到 Azure 存储空间。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中的“解决方案资源管理器”内，右键单击 .NET 后端项目，然后选择“管理 NuGet 包”。</source>
          <target state="new">在 Visual Studio 中的“解决方案资源管理器”内，右键单击 .NET 后端项目，然后选择“管理 NuGet 包”。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>在左窗格中，依次选择“联机”类别、“仅限稳定版本”，搜索 <bpt id="p1">**</bpt>MobileServices<ept id="p1">**</ept>，单击“Azure 移动服务 .NET 后端 Azure 存储空间扩展”包对应的“安装”，然后接受许可协议。</source>
          <target state="new">在左窗格中，依次选择“联机”类别、“仅限稳定版本”，搜索 <bpt id="p1">**</bpt>MobileServices<ept id="p1">**</ept>，单击“Azure 移动服务 .NET 后端 Azure 存储空间扩展”包对应的“安装”，然后接受许可协议。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>这会将 Azure 存储空间服务支持添加到 .NET 后端移动服务项目。</source>
          <target state="new">这会将 Azure 存储空间服务支持添加到 .NET 后端移动服务项目。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>如果你尚未创建你的存储帐户，请参阅<bpt id="p1">[</bpt>如何创建存储帐户<ept id="p1">](/documentation/articles/storage-create-storage-account)</ept>。</source>
          <target state="new">如果你尚未创建你的存储帐户，请参阅<bpt id="p1">[</bpt>如何创建存储帐户<ept id="p1">](/documentation/articles/storage-create-storage-account)</ept>。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中，单击“存储”，单击存储帐户，然后单击“管理密钥”。</source>
          <target state="new">在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中，单击“存储”，单击存储帐户，然后单击“管理密钥”。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>记下“存储帐户名称”和“访问密钥”。</source>
          <target state="new">记下“存储帐户名称”和“访问密钥”。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>在移动服务中，单击“配置”选项卡，向下滚动到“连接字符串”并输入新的连接字符串（其“名称”为 <ph id="ph1">`StorageConnectionString`</ph>，其“值”为存储帐户连接字符串且格式如下）。</source>
          <target state="new">在移动服务中，单击“配置”选项卡，向下滚动到“连接字符串”并输入新的连接字符串（其“名称”为 <ph id="ph1">`StorageConnectionString`</ph>，其“值”为存储帐户连接字符串且格式如下）。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在上述字符串中，使用门户中的值替换 <ph id="ph1">`&lt;ACCOUNT_NAME&gt;`</ph> 和 <ph id="ph2">`&lt;ACCESS_KEY&gt;`</ph> 的值，然后单击“保存”。</source>
          <target state="new">在上述字符串中，使用门户中的值替换 <ph id="ph1">`&lt;ACCOUNT_NAME&gt;`</ph> 和 <ph id="ph2">`&lt;ACCESS_KEY&gt;`</ph> 的值，然后单击“保存”。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>存储帐户连接字符串将以加密形式存储在应用设置中。你可以在运行时在任何表控制器中访问此字符串。</source>
          <target state="new">存储帐户连接字符串将以加密形式存储在应用设置中。你可以在运行时在任何表控制器中访问此字符串。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的解决方案资源管理器中，打开移动服务项目的 Web.config 文件，并添加以下新连接字符串：</source>
          <target state="new">在 Visual Studio 的解决方案资源管理器中，打开移动服务项目的 Web.config 文件，并添加以下新连接字符串：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>将 <ph id="ph1">`&lt;STORAGE_CONNECTION_STRING&gt;`</ph> 占位符替换为步骤 6 中的连接字符串。</source>
          <target state="new">将 <ph id="ph1">`&lt;STORAGE_CONNECTION_STRING&gt;`</ph> 占位符替换为步骤 6 中的连接字符串。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>移动服务在本地计算机上运行时将使用此连接字符串，使你可以在发布之前测试代码。在 Azure 中运行时，移动服务将改用门户中设置的连接字符串值，并忽略项目中的连接字符串。</source>
          <target state="new">移动服务在本地计算机上运行时将使用此连接字符串，使你可以在发布之前测试代码。在 Azure 中运行时，移动服务将改用门户中设置的连接字符串值，并忽略项目中的连接字符串。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="modify-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>修改数据类型和表控制器</source>
          <target state="new"><ph id="ph1">&lt;a name="modify-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>修改数据类型和表控制器</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>由于 TodoList 快速入门项目设计用于处理使用 Entity Framework 的 SQL 数据库，因此你需要在项目中进行一些更新才能使用表存储。</source>
          <target state="new">由于 TodoList 快速入门项目设计用于处理使用 Entity Framework 的 SQL 数据库，因此你需要在项目中进行一些更新才能使用表存储。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 数据类型修改为派生自 <bpt id="p2">**</bpt>StorageData<ept id="p2">**</ept> 而不是 <bpt id="p3">**</bpt>EntityData<ept id="p3">**</ept>，如下所示。</source>
          <target state="new">将 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 数据类型修改为派生自 <bpt id="p2">**</bpt>StorageData<ept id="p2">**</ept> 而不是 <bpt id="p3">**</bpt>EntityData<ept id="p3">**</ept>，如下所示。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph><bpt id="p1">**</bpt>StorageData<ept id="p1">**</ept> 类型的 Id 属性需要一个复合键，该键是格式为 <bpt id="p2">*</bpt>partitionId<ept id="p2">*</ept>,<bpt id="p3">*</bpt>rowValue<ept id="p3">*</ept> 的字符串。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph><bpt id="p1">**</bpt>StorageData<ept id="p1">**</ept> 类型的 Id 属性需要一个复合键，该键是格式为 <bpt id="p2">*</bpt>partitionId<ept id="p2">*</ept>,<bpt id="p3">*</bpt>rowValue<ept id="p3">*</ept> 的字符串。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>TodoItemController<ept id="p1">**</ept> 中添加以下 using 语句。</source>
          <target state="new">在 <bpt id="p1">**</bpt>TodoItemController<ept id="p1">**</ept> 中添加以下 using 语句。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">**</bpt>TodoItemController<ept id="p1">**</ept> 的 <bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept> 方法替换为以下内容。</source>
          <target state="new">将 <bpt id="p1">**</bpt>TodoItemController<ept id="p1">**</ept> 的 <bpt id="p2">**</bpt>Initialize<ept id="p2">**</ept> 方法替换为以下内容。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>这将使用存储帐户连接字符串为请求的控制站创建新的存储域管理器。</source>
          <target state="new">这将使用存储帐户连接字符串为请求的控制站创建新的存储域管理器。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>将现有的 <bpt id="p1">**</bpt>GetAllTodoItems<ept id="p1">**</ept> 方法替换为以下代码。</source>
          <target state="new">将现有的 <bpt id="p1">**</bpt>GetAllTodoItems<ept id="p1">**</ept> 方法替换为以下代码。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>不同于 SQL 数据库，此版本不返回 IQueryable</source>
          <target state="new">不同于 SQL 数据库，此版本不返回 IQueryable</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>，因此可以绑定到结果，但无法在查询中进一步编写。</source>
          <target state="new">，因此可以绑定到结果，但无法在查询中进一步编写。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>更新客户端应用</source>
          <target state="new">更新客户端应用</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>需要在客户端上进行一项更改，使快速入门应用能够处理使用表存储的 .NET 后端。这是因为表存储提供程序需要复合键。</source>
          <target state="new">需要在客户端上进行一项更改，使快速入门应用能够处理使用表存储的 .NET 后端。这是因为表存储提供程序需要复合键。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>打开包含数据访问代码的客户端代码文件，并查找执行插入操作的方法。</source>
          <target state="new">打开包含数据访问代码的客户端代码文件，并查找执行插入操作的方法。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>更新正在添加的 TodoItem 实例，以显式设置采用字符串格式 <ph id="ph1">`&lt;partitionID&gt;,&lt;rowValue&gt;`</ph> 的 Id 字段。</source>
          <target state="new">更新正在添加的 TodoItem 实例，以显式设置采用字符串格式 <ph id="ph1">`&lt;partitionID&gt;,&lt;rowValue&gt;`</ph> 的 Id 字段。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>这是一个说明如何在 C# 应用中设置此 ID 的示例，其中 partition 部分是固定的，row 部分基于 GUID 。</source>
          <target state="new">这是一个说明如何在 C# 应用中设置此 ID 的示例，其中 partition 部分是固定的，row 部分基于 GUID 。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>现在，可以测试应用。</source>
          <target state="new">现在，可以测试应用。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="test-application"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>测试应用程序</source>
          <target state="new"><ph id="ph1">&lt;a name="test-application"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>测试应用程序</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>（可选）重新发布移动服务 .NET 后端项目。</source>
          <target state="new">（可选）重新发布移动服务 .NET 后端项目。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>你也可以先在本地测试移动服务，然后将 .NET 后端项目发布到 Azure。无论是在本地还是在 Azure 中测试，移动服务都使用 Azure 表存储。</source>
          <target state="new">你也可以先在本地测试移动服务，然后将 .NET 后端项目发布到 Azure。无论是在本地还是在 Azure 中测试，移动服务都使用 Azure 表存储。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>运行已连接到移动服务的快速入门客户端应用。</source>
          <target state="new">运行已连接到移动服务的快速入门客户端应用。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>请注意，你看不见以前使用快速入门教程添加的项。这是因为表存储目前是空的。</source>
          <target state="new">请注意，你看不见以前使用快速入门教程添加的项。这是因为表存储目前是空的。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>添加新项以生成数据库更改。</source>
          <target state="new">添加新项以生成数据库更改。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>应用和移动服务的行为应如同以往，不过，数据现在将存储在非关系存储而不是 SQL 数据库中。</source>
          <target state="new">应用和移动服务的行为应如同以往，不过，数据现在将存储在非关系存储而不是 SQL 数据库中。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>现在你已知道，为 .NET 后端使用表存储是如此简单，接下来建议你了解其他一些后端存储选项：</source>
          <target state="new">现在你已知道，为 .NET 后端使用表存储是如此简单，接下来建议你了解其他一些后端存储选项：</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>使用混合连接来连接到本地 SQL Server</source>
          <target state="new">使用混合连接来连接到本地 SQL Server</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>混合连接可让移动服务安全地连接到本地资产。这样，移动客户端便可以使用 Azure 访问你的本地数据。支持的资产包括静态 TCP 端口上运行的任何资源，例如 Microsoft SQL Server、MySQL、HTTP Web API 和大多数自定义 Web 服务。</source>
          <target state="new">混合连接可让移动服务安全地连接到本地资产。这样，移动客户端便可以使用 Azure 访问你的本地数据。支持的资产包括静态 TCP 端口上运行的任何资源，例如 Microsoft SQL Server、MySQL、HTTP Web API 和大多数自定义 Web 服务。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>使用移动服务将图像上载到 Azure 存储空间</source>
          <target state="new">使用移动服务将图像上载到 Azure 存储空间</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>说明如何扩展 TodoList 示例项目，以便将图像从应用上载到 Azure Blob 存储。</source>
          <target state="new">说明如何扩展 TodoList 示例项目，以便将图像从应用上载到 Azure Blob 存储。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>