<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de9f55a25f88039943bd2915f6de39e5981962a0</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 Azure 上部署自己的私有 Docker 注册表 | Azure</source>
          <target state="new">在 Azure 上部署自己的私有 Docker 注册表 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>介绍如何使用 Docker 注册表在 Azure Blob 存储服务上托管你的容器映像。</source>
          <target state="new">介绍如何使用 Docker 注册表在 Azure Blob 存储服务上托管你的容器映像。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 Azure 上部署自己的私有 Docker 注册表</source>
          <target state="new">在 Azure 上部署自己的私有 Docker 注册表</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-include.md)</ept>]</source>
          <target state="new">[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-include.md)</ept>]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本文档描述什么是 Docker 私有注册表，并说明如何使用 Azure Blob 存储将 Docker 注册表 2.0 容器映像部署到 Azure 上的 Docker 私有注册表。</source>
          <target state="new">本文档描述什么是 Docker 私有注册表，并说明如何使用 Azure Blob 存储将 Docker 注册表 2.0 容器映像部署到 Azure 上的 Docker 私有注册表。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>本文档假设：</source>
          <target state="new">本文档假设：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>你知道如何使用 Docker 并具有要存储的 Docker 映像。（你不知道？ <bpt id="p1">[</bpt>了解 Docker<ept id="p1">](https://www.docker.com)</ept>）</source>
          <target state="new">你知道如何使用 Docker 并具有要存储的 Docker 映像。（你不知道？ <bpt id="p1">[</bpt>了解 Docker<ept id="p1">](https://www.docker.com)</ept>）</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>什么是私有 Docker 注册表？</source>
          <target state="new">什么是私有 Docker 注册表？</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>若要将容器化应用程序传送到云，你需要构建 Docker 容器映像，并将其存储到某个位置，供自己和他人使用。</source>
          <target state="new">若要将容器化应用程序传送到云，你需要构建 Docker 容器映像，并将其存储到某个位置，供自己和他人使用。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>创建容器映像并将其传送到云的过程十分轻松，但要可靠地存储生成的映像则是个难题。因此，Docker 提供了一个称为 <bpt id="p1">[</bpt>Docker Hub<ept id="p1">][docker-hub]</ept> 的集中式服务，可将容器映像存储在云中，并让你随时使用这些映像创建容器。</source>
          <target state="new">创建容器映像并将其传送到云的过程十分轻松，但要可靠地存储生成的映像则是个难题。因此，Docker 提供了一个称为 <bpt id="p1">[</bpt>Docker Hub<ept id="p1">][docker-hub]</ept> 的集中式服务，可将容器映像存储在云中，并让你随时使用这些映像创建容器。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>尽管 <bpt id="p1">[</bpt>Docker Hub<ept id="p1">][docker-hub]</ept> 是存储私有应用程序容器映像的付费服务，但 Docker 仍会遵循开发人员的需求并提供开放源代码工具集，用于在防火墙后面或本地你自己的私有 Docker 注册表中存储映像，而无需使用公共 Internet。由于可以轻松保护 Azure Blob 存储，因此你可以快速地使用它在自行控制的 Azure 中创建并使用私有 Docker 注册表。</source>
          <target state="new">尽管 <bpt id="p1">[</bpt>Docker Hub<ept id="p1">][docker-hub]</ept> 是存储私有应用程序容器映像的付费服务，但 Docker 仍会遵循开发人员的需求并提供开放源代码工具集，用于在防火墙后面或本地你自己的私有 Docker 注册表中存储映像，而无需使用公共 Internet。由于可以轻松保护 Azure Blob 存储，因此你可以快速地使用它在自行控制的 Azure 中创建并使用私有 Docker 注册表。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>为何应在 Azure 上托管 Docker 注册表？</source>
          <target state="new">为何应在 Azure 上托管 Docker 注册表？</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>通过在 Azure 上托管 Docker 注册表实例并将映像存储在 Azure Blob 存储上，可以获得多种好处：</source>
          <target state="new">通过在 Azure 上托管 Docker 注册表实例并将映像存储在 Azure Blob 存储上，可以获得多种好处：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>安全性：<ept id="p1">**</ept>Docker 映像不会离开 Azure 数据中心，因此它们不会像使用 Docker Hub 时一样跨公共 Internet。</source>
          <target state="new"><bpt id="p1">**</bpt>安全性：<ept id="p1">**</ept>Docker 映像不会离开 Azure 数据中心，因此它们不会像使用 Docker Hub 时一样跨公共 Internet。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>性能：<ept id="p1">**</ept>Docker 映像存储在与应用程序相同的数据中心或区域内。这意味着，可以比 Docker Hub 更快、更可靠地提取映像。</source>
          <target state="new"><bpt id="p1">**</bpt>性能：<ept id="p1">**</ept>Docker 映像存储在与应用程序相同的数据中心或区域内。这意味着，可以比 Docker Hub 更快、更可靠地提取映像。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>可靠性：<ept id="p1">**</ept>通过使用 Azure Blob 存储，你可以利用许多存储属性，例如高可用性、冗余、高级存储 (SSD) 等等。</source>
          <target state="new"><bpt id="p1">**</bpt>可靠性：<ept id="p1">**</ept>通过使用 Azure Blob 存储，你可以利用许多存储属性，例如高可用性、冗余、高级存储 (SSD) 等等。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>将 Docker 注册表配置为使用 Azure Blob 存储</source>
          <target state="new">将 Docker 注册表配置为使用 Azure Blob 存储</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>（继续下一步之前，建议你先阅读 <bpt id="p1">[</bpt>Docker 注册表 2.0 文档<ept id="p1">][registry-docs]</ept>。）</source>
          <target state="new">（继续下一步之前，建议你先阅读 <bpt id="p1">[</bpt>Docker 注册表 2.0 文档<ept id="p1">][registry-docs]</ept>。）</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>你可以使用两种不同的方式<bpt id="p1">[</bpt>配置<ept id="p1">][registry-config]</ept> Docker 注册表。你可以：</source>
          <target state="new">你可以使用两种不同的方式<bpt id="p1">[</bpt>配置<ept id="p1">][registry-config]</ept> Docker 注册表。你可以：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>使用 <ph id="ph1">`config.yml`</ph> 文件。在此情况下，必须在 <ph id="ph2">`registry`</ph> 映像顶部创建独立的 Docker 映像。</source>
          <target state="new">使用 <ph id="ph1">`config.yml`</ph> 文件。在此情况下，必须在 <ph id="ph2">`registry`</ph> 映像顶部创建独立的 Docker 映像。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>通过环境变量重写默认配置文件：在不创建和维护单独 Docker 映像的情况下完成操作。</source>
          <target state="new">通过环境变量重写默认配置文件：在不创建和维护单独 Docker 映像的情况下完成操作。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>为简单起见，本主题遵循选项 2，即使用环境变量。</source>
          <target state="new">为简单起见，本主题遵循选项 2，即使用环境变量。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>若要运行 Docker 注册表实例：</source>
          <target state="new">若要运行 Docker 注册表实例：</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>使用 Azure 存储帐户存储映像</source>
          <target state="new">使用 Azure 存储帐户存储映像</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>侦听虚拟机的通信端口 5000</source>
          <target state="new">侦听虚拟机的通信端口 5000</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>未配置验证（不建议，请参阅以下注释）</source>
          <target state="new">未配置验证（不建议，请参阅以下注释）</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>需要在 bash 终端中运行以下 Docker 命令（将 <ph id="ph1">`&lt;storage-account&gt;`</ph> 和 <ph id="ph2">`&lt;storage-key&gt;`</ph> 和替换为你的凭据）：</source>
          <target state="new">需要在 bash 终端中运行以下 Docker 命令（将 <ph id="ph1">`&lt;storage-account&gt;`</ph> 和 <ph id="ph2">`&lt;storage-key&gt;`</ph> 和替换为你的凭据）：</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>命令退出后，你可以通过在主机上运行 <ph id="ph1">`docker ps`</ph> 命令，查看托管私有 Docker 注册表实例的容器：</source>
          <target state="new">命令退出后，你可以通过在主机上运行 <ph id="ph1">`docker ps`</ph> 命令，查看托管私有 Docker 注册表实例的容器：</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph>本文档未涵盖配置 Docker 注册表安全性的操作，如果打开连接到虚拟机终结点上注册表端口的端口，则默认情况下，任何未经身份验证的用户都可以访问注册表；如果使用上述部署命令，则可以访问负载平衡器。</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph>本文档未涵盖配置 Docker 注册表安全性的操作，如果打开连接到虚拟机终结点上注册表端口的端口，则默认情况下，任何未经身份验证的用户都可以访问注册表；如果使用上述部署命令，则可以访问负载平衡器。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>请参阅[配置 Docker 注册表][registry-config]文档，以了解如何保护注册表实例和映像。</source>
          <target state="new">请参阅[配置 Docker 注册表][registry-config]文档，以了解如何保护注册表实例和映像。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>设置注册表之后，你可以充分地利用它。首先从 docker <bpt id="p1">[</bpt><ept id="p1">registry-docs]</ept> 开始。</source>
          <target state="new">设置注册表之后，你可以充分地利用它。首先从 docker <bpt id="p1">[</bpt><ept id="p1">registry-docs]</ept> 开始。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>