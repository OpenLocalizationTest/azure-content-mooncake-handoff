<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">769156952b452a2c7e6be1b5db481288e74db09c</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何使用 .NET 检查作业进度</source>
          <target state="new">如何使用 .NET 检查作业进度</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用事件处理程序代码来跟踪作业进度并发送状态更新。代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。</source>
          <target state="new">了解如何使用事件处理程序代码来跟踪作业进度并发送状态更新。代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何：检查作业进度</source>
          <target state="new">如何：检查作业进度</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>门户</source>
          <target state="new">门户</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET</source>
          <target state="new">.NET</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>REST</source>
          <target state="new">REST</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>当你运行作业时，通常需要采用某种方式来跟踪作业进度。你可以通过<bpt id="p1">[</bpt>定义 StateChanged 事件处理程序<ept id="p1">](#statechange_event_handler)</ept>或<bpt id="p2">[</bpt>使用 Azure 队列存储监视媒体服务作业通知<ept id="p2">](#check_progress_with_queues)</ept>，来检查进度。本主题将介绍这两种方法。</source>
          <target state="new">当你运行作业时，通常需要采用某种方式来跟踪作业进度。你可以通过<bpt id="p1">[</bpt>定义 StateChanged 事件处理程序<ept id="p1">](#statechange_event_handler)</ept>或<bpt id="p2">[</bpt>使用 Azure 队列存储监视媒体服务作业通知<ept id="p2">](#check_progress_with_queues)</ept>，来检查进度。本主题将介绍这两种方法。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="statechange_event_handler"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>定义 StateChanged 事件处理程序以监视作业进度</source>
          <target state="new"><ph id="ph1">&lt;a id="statechange_event_handler"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>定义 StateChanged 事件处理程序以监视作业进度</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>以下代码示例定义了 StateChanged 事件处理程序。此事件处理程序将跟踪作业进度，并根据现状提供更新的状态。该代码还定义了 LogJobStop 方法。此帮助器方法将记录错误详细信息。</source>
          <target state="new">以下代码示例定义了 StateChanged 事件处理程序。此事件处理程序将跟踪作业进度，并根据现状提供更新的状态。该代码还定义了 LogJobStop 方法。此帮助器方法将记录错误详细信息。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="check_progress_with_queues"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用 Azure 队列存储监视媒体服务作业通知</source>
          <target state="new"><ph id="ph1">&lt;a id="check_progress_with_queues"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用 Azure 队列存储监视媒体服务作业通知</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Azure 媒体服务可以在处理媒体作业时向 <bpt id="p1">[</bpt>Azure 队列存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-queues#what-is)</ept>发送通知消息。本主题说明如何从队列存储获取这些通知消息。</source>
          <target state="new">Azure 媒体服务可以在处理媒体作业时向 <bpt id="p1">[</bpt>Azure 队列存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-queues#what-is)</ept>发送通知消息。本主题说明如何从队列存储获取这些通知消息。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>用户可以从任何位置访问已传给到队列存储中的消息。Azure 队列消息体系结构十分可靠，而且具有高度可缩放性。建议使用其他方法轮询队列存储。</source>
          <target state="new">用户可以从任何位置访问已传给到队列存储中的消息。Azure 队列消息体系结构十分可靠，而且具有高度可缩放性。建议使用其他方法轮询队列存储。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>一个常见的侦听媒体服务通知方案：你正在开发一个内容管理系统，在完成编码作业后，该系统需要执行其他一些任务（例如，触发工作流的下一个步骤或者发布内容）。</source>
          <target state="new">一个常见的侦听媒体服务通知方案：你正在开发一个内容管理系统，在完成编码作业后，该系统需要执行其他一些任务（例如，触发工作流的下一个步骤或者发布内容）。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>注意事项</source>
          <target state="new">注意事项</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在开发使用 Azure 存储队列的媒体服务应用程序时，请注意以下几点。</source>
          <target state="new">在开发使用 Azure 存储队列的媒体服务应用程序时，请注意以下几点。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>队列服务不保证按照先进先出 (FIFO) 的顺序传递消息。有关详细信息，请参阅 <bpt id="p1">[</bpt>Azure 队列和 Azure 服务总线队列比较与对照<ept id="p1">](/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/)</ept>。</source>
          <target state="new">队列服务不保证按照先进先出 (FIFO) 的顺序传递消息。有关详细信息，请参阅 <bpt id="p1">[</bpt>Azure 队列和 Azure 服务总线队列比较与对照<ept id="p1">](/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/)</ept>。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Azure 存储队列不是推送服务；你必须轮询队列。</source>
          <target state="new">Azure 存储队列不是推送服务；你必须轮询队列。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>可以有任意数目的队列。有关详细信息，请参阅<bpt id="p1">[</bpt>队列服务 REST API<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/dd179363.aspx)</ept>。</source>
          <target state="new">可以有任意数目的队列。有关详细信息，请参阅<bpt id="p1">[</bpt>队列服务 REST API<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/dd179363.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Azure 存储队列存在一些限制，有关具体的说明，请参阅以下文章：<bpt id="p1">[</bpt>Azure 队列和 Azure 服务总线队列比较与对照<ept id="p1">](/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/)</ept>。</source>
          <target state="new">Azure 存储队列存在一些限制，有关具体的说明，请参阅以下文章：<bpt id="p1">[</bpt>Azure 队列和 Azure 服务总线队列比较与对照<ept id="p1">](/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/)</ept>。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>代码示例</source>
          <target state="new">代码示例</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>本部分中的代码示例将执行以下操作：</source>
          <target state="new">本部分中的代码示例将执行以下操作：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>定义一个映射为通知消息格式的 <bpt id="p1">**</bpt>EncodingJobMessage<ept id="p1">**</ept> 类。代码将那些从队列接收到的消息反序列化为 <bpt id="p2">**</bpt>EncodingJobMessage<ept id="p2">**</ept> 类型的对象。</source>
          <target state="new">定义一个映射为通知消息格式的 <bpt id="p1">**</bpt>EncodingJobMessage<ept id="p1">**</ept> 类。代码将那些从队列接收到的消息反序列化为 <bpt id="p2">**</bpt>EncodingJobMessage<ept id="p2">**</ept> 类型的对象。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>从 app.config 文件中加载媒体服务和存储帐户信息。使用此信息创建 <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>CloudQueue<ept id="p2">**</ept> 对象。</source>
          <target state="new">从 app.config 文件中加载媒体服务和存储帐户信息。使用此信息创建 <bpt id="p1">**</bpt>CloudMediaContext<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>CloudQueue<ept id="p2">**</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>创建一个接收编码作业相关通知消息的队列。</source>
          <target state="new">创建一个接收编码作业相关通知消息的队列。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>创建一个映射到队列的通知终结点。</source>
          <target state="new">创建一个映射到队列的通知终结点。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>将通知终结点附加到作业，然后提交编码作业。可以将多个通知终结点附加到一个作业。</source>
          <target state="new">将通知终结点附加到作业，然后提交编码作业。可以将多个通知终结点附加到一个作业。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>在本示例中，我们只想知道作业的最终状态，因此我们将 <bpt id="p1">**</bpt>NotificationJobState.FinalStatesOnly<ept id="p1">**</ept> 传递给 <bpt id="p2">**</bpt>AddNew<ept id="p2">**</ept> 方法。</source>
          <target state="new">在本示例中，我们只想知道作业的最终状态，因此我们将 <bpt id="p1">**</bpt>NotificationJobState.FinalStatesOnly<ept id="p1">**</ept> 传递给 <bpt id="p2">**</bpt>AddNew<ept id="p2">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>如果传递 NotificationJobState.All，则会获得所有状态更改通知：“已排队”-&gt;“已计划”-&gt;“处理中”-&gt;“已完成”。不过，如前所述，Azure 存储队列服务不保证按顺序传递。可以使用 Timestamp 属性（在以下示例的 EncodingJobMessage 类型中定义）来为消息排序。你可能会收到重复的通知消息。使用 ETag 属性（在 EncodingJobMessage 类型中定义）可以检查重复项。请注意，某些状态更改通知也有可能被跳过。</source>
          <target state="new">如果传递 NotificationJobState.All，则会获得所有状态更改通知：“已排队”-&gt;“已计划”-&gt;“处理中”-&gt;“已完成”。不过，如前所述，Azure 存储队列服务不保证按顺序传递。可以使用 Timestamp 属性（在以下示例的 EncodingJobMessage 类型中定义）来为消息排序。你可能会收到重复的通知消息。使用 ETag 属性（在 EncodingJobMessage 类型中定义）可以检查重复项。请注意，某些状态更改通知也有可能被跳过。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>每隔 10 秒检查队列一次，等待作业进入“已完成”状态。处理消息后删除消息。</source>
          <target state="new">每隔 10 秒检查队列一次，等待作业进入“已完成”状态。处理消息后删除消息。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>删除队列和通知终结点。</source>
          <target state="new">删除队列和通知终结点。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>监视作业状态的建议方法是侦听通知消息，如以下示例所示。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>监视作业状态的建议方法是侦听通知消息，如以下示例所示。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>或者，你可以使用 <bpt id="p1">**</bpt>IJob.State<ept id="p1">**</ept> 属性检查作业状态。请注意，在 <bpt id="p2">**</bpt>IJob<ept id="p2">**</ept> 的状态尚未设置为“已完成”之前，你可能会先收到一条指出作业已完成的通知消息。<bpt id="p3">**</bpt>IJob.State<ept id="p3">**</ept> 属性在延迟片刻之后将反映正确的状态。</source>
          <target state="new">或者，你可以使用 <bpt id="p1">**</bpt>IJob.State<ept id="p1">**</ept> 属性检查作业状态。请注意，在 <bpt id="p2">**</bpt>IJob<ept id="p2">**</ept> 的状态尚未设置为“已完成”之前，你可能会先收到一条指出作业已完成的通知消息。<bpt id="p3">**</bpt>IJob.State<ept id="p3">**</ept> 属性在延迟片刻之后将反映正确的状态。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>以上示例将生成以下输出。值会有所变化。</source>
          <target state="new">以上示例将生成以下输出。值会有所变化。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>