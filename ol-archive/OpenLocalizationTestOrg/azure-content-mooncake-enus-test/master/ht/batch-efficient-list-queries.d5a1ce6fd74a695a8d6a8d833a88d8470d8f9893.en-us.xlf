<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">665b5a31307279602b82c1b089a7f45669102baf</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Batch 中的高效列表查询 | Azure</source>
          <target state="new">Azure Batch 中的高效列表查询 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在查询 Azure Batch 实体（例如池、作业、任务和计算节点）时通过减少返回的数据量来提高性能。</source>
          <target state="new">在查询 Azure Batch 实体（例如池、作业、任务和计算节点）时通过减少返回的数据量来提高性能。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>有效地查询 Azure 批处理 ( batch ) 服务</source>
          <target state="new">有效地查询 Azure 批处理 ( batch ) 服务</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>在本文中，你将了解在使用 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 查询 Azure Batch 服务以获取作业、任务、计算节点等项的列表时，如何减少返回的项数和数据量。</source>
          <target state="new">在本文中，你将了解在使用 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 查询 Azure Batch 服务以获取作业、任务、计算节点等项的列表时，如何减少返回的项数和数据量。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure Batch 提供大型计算功能 -- 在生产环境中，作业、任务和计算节点等实体的数目成千上万。因此，获取这些项的信息时，可能会生成大量的数据，这些数据在每次查询时都必须进行传输。通过限制每次查询时返回的项数和信息类型，可以提高查询速度，因此也会提高应用程序的性能。</source>
          <target state="new">Azure Batch 提供大型计算功能 -- 在生产环境中，作业、任务和计算节点等实体的数目成千上万。因此，获取这些项的信息时，可能会生成大量的数据，这些数据在每次查询时都必须进行传输。通过限制每次查询时返回的项数和信息类型，可以提高查询速度，因此也会提高应用程序的性能。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>列出作业、列出任务、列出计算节点 -- 这些是几乎每个使用 Azure Batch 的应用程序都会执行的操作示例，而且这些操作的执行频率很高。常见的用例是监视。例如，若要确定池的容量和状态，必须查询该池中的所有计算节点。另一个示例是查询作业的任务，以便确定是否有任务仍在排队。</source>
          <target state="new">列出作业、列出任务、列出计算节点 -- 这些是几乎每个使用 Azure Batch 的应用程序都会执行的操作示例，而且这些操作的执行频率很高。常见的用例是监视。例如，若要确定池的容量和状态，必须查询该池中的所有计算节点。另一个示例是查询作业的任务，以便确定是否有任务仍在排队。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>此 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 代码段检索所有与作业关联的任务，以及这些任务的全部属性：</source>
          <target state="new">此 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 代码段检索所有与作业关联的任务，以及这些任务的全部属性：</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>但是，可以执行高效得多的列表查询。在 <bpt id="p1">[</bpt>JobOperations.ListTasks<ept id="p1">][net_list_tasks]</ept> 方法中提供 <bpt id="p2">[</bpt>ODATADetailLevel<ept id="p2">][odata]</ept> 对象即可实现此目的。此代码段仅返回已完成任务的 ID、命令行和计算节点信息属性：</source>
          <target state="new">但是，可以执行高效得多的列表查询。在 <bpt id="p1">[</bpt>JobOperations.ListTasks<ept id="p1">][net_list_tasks]</ept> 方法中提供 <bpt id="p2">[</bpt>ODATADetailLevel<ept id="p2">][odata]</ept> 对象即可实现此目的。此代码段仅返回已完成任务的 ID、命令行和计算节点信息属性：</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在上面的示例方案中，如果作业中存在数以千计的任务，则通常情况下，第二个查询的结果的返回速度将远远快于第一个查询。下面提供了有关使用 Batch .NET API 列出项时使用 ODATADetailLevel 的详细信息。</source>
          <target state="new">在上面的示例方案中，如果作业中存在数以千计的任务，则通常情况下，第二个查询的结果的返回速度将远远快于第一个查询。下面提供了有关使用 Batch .NET API 列出项时使用 ODATADetailLevel 的详细信息。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>强烈建议你 <bpt id="p1">*</bpt>始终<ept id="p1">*</ept> 将 ODATADetailLevel 对象提供给 .NET API 列表调用，以确保最大程度地提高应用程序的效率和性能。指定详细程度有助于缩短 Batch 服务响应时间、提高网络利用率，以及最大程度减少客户端应用程序的内存使用量。</source>
          <target state="new">强烈建议你 <bpt id="p1">*</bpt>始终<ept id="p1">*</ept> 将 ODATADetailLevel 对象提供给 .NET API 列表调用，以确保最大程度地提高应用程序的效率和性能。指定详细程度有助于缩短 Batch 服务响应时间、提高网络利用率，以及最大程度减少客户端应用程序的内存使用量。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>高效查询工具</source>
          <target state="new">高效查询工具</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> 和 <bpt id="p2">[</bpt>Batch REST<ept id="p2">][api_rest]</ept> API 可以减少列表中返回的项数以及针对每个查询返回的信息量。在执行列表查询时可以通过指定 <bpt id="p3">*</bpt>filter<ept id="p3">*</ept> 、 <bpt id="p4">*</bpt>select<ept id="p4">*</ept> 和 <bpt id="p5">*</bpt>expand<ept id="p5">*</ept> 字符串来实现此目的。</source>
          <target state="new"><bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> 和 <bpt id="p2">[</bpt>Batch REST<ept id="p2">][api_rest]</ept> API 可以减少列表中返回的项数以及针对每个查询返回的信息量。在执行列表查询时可以通过指定 <bpt id="p3">*</bpt>filter<ept id="p3">*</ept> 、 <bpt id="p4">*</bpt>select<ept id="p4">*</ept> 和 <bpt id="p5">*</bpt>expand<ept id="p5">*</ept> 字符串来实现此目的。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> -- <bpt id="p2">*</bpt>filter 字符串<ept id="p2">*</ept> 是一个表达式，用于减少返回的项数。例如，只列出作业的运行中任务，或者只列出已做好运行任务准备的计算节点。</source>
          <target state="new"><bpt id="p1">**</bpt>Filter<ept id="p1">**</ept> -- <bpt id="p2">*</bpt>filter 字符串<ept id="p2">*</ept> 是一个表达式，用于减少返回的项数。例如，只列出作业的运行中任务，或者只列出已做好运行任务准备的计算节点。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>filter 字符串包含一个或多个表达式，其中一个表达式包含属性名称、运算符和值。能够指定哪些属性取决于每个 API 调用类型，每个属性所支持的运算符也是这样。</source>
          <target state="new">filter 字符串包含一个或多个表达式，其中一个表达式包含属性名称、运算符和值。能够指定哪些属性取决于每个 API 调用类型，每个属性所支持的运算符也是这样。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>可以使用逻辑运算符 <ph id="ph1">`and`</ph> 和 <ph id="ph2">`or`</ph> 将多个表达式组合到一起。</source>
          <target state="new">可以使用逻辑运算符 <ph id="ph1">`and`</ph> 和 <ph id="ph2">`or`</ph> 将多个表达式组合到一起。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>仅列出正在运行的呈现任务的 filter 字符串示例：<ph id="ph1">`startswith(id, 'renderTask') and (state eq 'running')`</ph></source>
          <target state="new">仅列出正在运行的呈现任务的 filter 字符串示例：<ph id="ph1">`startswith(id, 'renderTask') and (state eq 'running')`</ph></target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Select<ept id="p1">**</ept> -- <bpt id="p2">*</bpt>select 字符串<ept id="p2">*</ept> 用于限制为每个项返回的属性值。可以在 select 字符串中指定项的属性列表。然后，查询结果中只会针对每个项返回这些属性值。</source>
          <target state="new"><bpt id="p1">**</bpt>Select<ept id="p1">**</ept> -- <bpt id="p2">*</bpt>select 字符串<ept id="p2">*</ept> 用于限制为每个项返回的属性值。可以在 select 字符串中指定项的属性列表。然后，查询结果中只会针对每个项返回这些属性值。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>select 字符串包含逗号分隔的属性名称列表。可以指定列表操作所返回项的任意属性。</source>
          <target state="new">select 字符串包含逗号分隔的属性名称列表。可以指定列表操作所返回项的任意属性。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>示例 select 字符串（仅指定每个任务要返回的三项属性）：<ph id="ph1">`id, state, stateTransitionTime`</ph></source>
          <target state="new">示例 select 字符串（仅指定每个任务要返回的三项属性）：<ph id="ph1">`id, state, stateTransitionTime`</ph></target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Expand<ept id="p1">**</ept> -- <bpt id="p2">*</bpt>expand 字符串<ept id="p2">*</ept> 用于减少获取特定信息所需的 API 调用数。可以通过对单个列表进行 API 调用来获取每个列表项的更多详细信息，不需先获取列表，然后再针对列表中的每个项进行调用。</source>
          <target state="new"><bpt id="p1">**</bpt>Expand<ept id="p1">**</ept> -- <bpt id="p2">*</bpt>expand 字符串<ept id="p2">*</ept> 用于减少获取特定信息所需的 API 调用数。可以通过对单个列表进行 API 调用来获取每个列表项的更多详细信息，不需先获取列表，然后再针对列表中的每个项进行调用。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>与 select 字符串类似，expand 字符串用于控制是否允许某些数据包括在列表查询结果中。</source>
          <target state="new">与 select 字符串类似，expand 字符串用于控制是否允许某些数据包括在列表查询结果中。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>expand 字符串只有在列出作业、作业计划、任务和池中使用时才受支持。目前仅支持统计信息。</source>
          <target state="new">expand 字符串只有在列出作业、作业计划、任务和池中使用时才受支持。目前仅支持统计信息。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>示例 expand 字符串（指定每个项都应返回统计信息）：<ph id="ph1">`stats`</ph></source>
          <target state="new">示例 expand 字符串（指定每个项都应返回统计信息）：<ph id="ph1">`stats`</ph></target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>当所有属性都是必需属性且没有指定 select 字符串时，<bpt id="p1">*</bpt>必须<ept id="p1">*</ept> 使用 expand 字符串来获取统计信息。如果使用了 select 字符串来获取属性的子集，则可在 select 字符串中指定 <ph id="ph1">`stats`</ph>，不需指定 expand 字符串。</source>
          <target state="new">当所有属性都是必需属性且没有指定 select 字符串时，<bpt id="p1">*</bpt>必须<ept id="p1">*</ept> 使用 expand 字符串来获取统计信息。如果使用了 select 字符串来获取属性的子集，则可在 select 字符串中指定 <ph id="ph1">`stats`</ph>，不需指定 expand 字符串。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>构造这三种查询字符串类型（filter、select、expand）中的任意一种类型时，必须确保属性名称和大小写与其 REST API 元素的对应项相匹配。例如，在使用 .NET <bpt id="p1">[</bpt>CloudTask<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudtask)</ept> 时，你必须指定 <bpt id="p2">**</bpt>state<ept id="p2">**</ept> 而非 <bpt id="p3">**</bpt>State<ept id="p3">**</ept>，即使 .NET 属性为 <bpt id="p4">[</bpt>CloudTask.State<ept id="p4">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudtask.state)</ept>。请参阅下表中 .NET 和 REST API 之间的属性映射。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>构造这三种查询字符串类型（filter、select、expand）中的任意一种类型时，必须确保属性名称和大小写与其 REST API 元素的对应项相匹配。例如，在使用 .NET <bpt id="p1">[</bpt>CloudTask<ept id="p1">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudtask)</ept> 时，你必须指定 <bpt id="p2">**</bpt>state<ept id="p2">**</ept> 而非 <bpt id="p3">**</bpt>State<ept id="p3">**</ept>，即使 .NET 属性为 <bpt id="p4">[</bpt>CloudTask.State<ept id="p4">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudtask.state)</ept>。请参阅下表中 .NET 和 REST API 之间的属性映射。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Filter、select 和 expand 字符串规范</source>
          <target state="new">Filter、select 和 expand 字符串规范</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>在 filter、select 和 expand 字符串中指定的属性与 <bpt id="p1">[</bpt>Batch REST<ept id="p1">][api_rest]</ept> API 中出现的属性名称等同 -- 即使使用 <bpt id="p2">[</bpt>Batch .NET<ept id="p2">][api_net]</ept> 库时也是如此。</source>
          <target state="new">在 filter、select 和 expand 字符串中指定的属性与 <bpt id="p1">[</bpt>Batch REST<ept id="p1">][api_rest]</ept> API 中出现的属性名称等同 -- 即使使用 <bpt id="p2">[</bpt>Batch .NET<ept id="p2">][api_net]</ept> 库时也是如此。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>所有属性名称均区分大小写，但属性值不区分大小写。</source>
          <target state="new">所有属性名称均区分大小写，但属性值不区分大小写。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>日期/时间字符串可以采用两种格式中的一种，并且必须在前面加上 <ph id="ph1">`DateTime`</ph>。</source>
          <target state="new">日期/时间字符串可以采用两种格式中的一种，并且必须在前面加上 <ph id="ph1">`DateTime`</ph>。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>W3C-DTF 格式示例：<ph id="ph1">`creationTime gt DateTime'2011-05-08T08:49:37Z'`</ph></source>
          <target state="new">W3C-DTF 格式示例：<ph id="ph1">`creationTime gt DateTime'2011-05-08T08:49:37Z'`</ph></target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>RFC 1123 格式示例：<ph id="ph1">`creationTime gt DateTime'Sun, 08 May 2011 08:49:37 GMT'`</ph></source>
          <target state="new">RFC 1123 格式示例：<ph id="ph1">`creationTime gt DateTime'Sun, 08 May 2011 08:49:37 GMT'`</ph></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>布尔值字符串为 <ph id="ph1">`true`</ph> 或 <ph id="ph2">`false`</ph>。</source>
          <target state="new">布尔值字符串为 <ph id="ph1">`true`</ph> 或 <ph id="ph2">`false`</ph>。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>如果指定了无效的属性或运算符，则会导致 <ph id="ph1">`400 (Bad Request)`</ph> 错误。</source>
          <target state="new">如果指定了无效的属性或运算符，则会导致 <ph id="ph1">`400 (Bad Request)`</ph> 错误。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>在 Batch .NET 中进行高效查询</source>
          <target state="new">在 Batch .NET 中进行高效查询</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 中，将通过 <bpt id="p2">[</bpt>ODATADetailLevel<ept id="p2">][odata]</ept> 类来提供 filter、select 和 expand 字符串以列出相应操作。一个 ODataDetailLevel 对象有三个公共字符串属性，这些属性可以在构造函数中指定，也可以直接设置。然后，系统会将此对象作为参数传递给不同的列表操作，例如 <bpt id="p3">[</bpt>ListPools<ept id="p3">][net_list_pools]</ept>、<bpt id="p4">[</bpt>ListJobs<ept id="p4">][net_list_jobs]</ept> 和 <bpt id="p5">[</bpt>ListTasks<ept id="p5">][net_list_tasks]</ept>。</source>
          <target state="new">在 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 中，将通过 <bpt id="p2">[</bpt>ODATADetailLevel<ept id="p2">][odata]</ept> 类来提供 filter、select 和 expand 字符串以列出相应操作。一个 ODataDetailLevel 对象有三个公共字符串属性，这些属性可以在构造函数中指定，也可以直接设置。然后，系统会将此对象作为参数传递给不同的列表操作，例如 <bpt id="p3">[</bpt>ListPools<ept id="p3">][net_list_pools]</ept>、<bpt id="p4">[</bpt>ListJobs<ept id="p4">][net_list_jobs]</ept> 和 <bpt id="p5">[</bpt>ListTasks<ept id="p5">][net_list_tasks]</ept>。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ODATADetailLevel.FilterClause<ept id="p1">][odata_filter]</ept> -- 限制返回的项数。</source>
          <target state="new"><bpt id="p1">[</bpt>ODATADetailLevel.FilterClause<ept id="p1">][odata_filter]</ept> -- 限制返回的项数。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ODATADetailLevel.SelectClause<ept id="p1">][odata_select]</ept> -- 指定随每个项返回的部分属性值。</source>
          <target state="new"><bpt id="p1">[</bpt>ODATADetailLevel.SelectClause<ept id="p1">][odata_select]</ept> -- 指定随每个项返回的部分属性值。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>ODATADetailLevel.ExpandClause<ept id="p1">][odata_expand]</ept> -- 在单个 API 调用中检索项数据，不必针对每个项发出调用。</source>
          <target state="new"><bpt id="p1">[</bpt>ODATADetailLevel.ExpandClause<ept id="p1">][odata_expand]</ept> -- 在单个 API 调用中检索项数据，不必针对每个项发出调用。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>以下代码段使用 Batch .NET API 对 Batch 服务进行有效的查询，查询其中是否存在特定池集的统计信息。在此方案中，Batch 用户既有测试池又有生产池，测试池 ID 具有“test”前缀，生产池 ID 具有“prod”前缀。在代码段中，<bpt id="p1">*</bpt>myBatchClient<ept id="p1">*</ept> 是正确初始化的 <bpt id="p2">[</bpt>BatchClient<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient)</ept> 实例。</source>
          <target state="new">以下代码段使用 Batch .NET API 对 Batch 服务进行有效的查询，查询其中是否存在特定池集的统计信息。在此方案中，Batch 用户既有测试池又有生产池，测试池 ID 具有“test”前缀，生产池 ID 具有“prod”前缀。在代码段中，<bpt id="p1">*</bpt>myBatchClient<ept id="p1">*</ept> 是正确初始化的 <bpt id="p2">[</bpt>BatchClient<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient)</ept> 实例。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> 使用 Select 和 Expand 子句配置的 <bpt id="p1">[</bpt>ODATADetailLevel<ept id="p1">][odata]</ept> 实例也可以传递给相应的 Get 方法（例如 <bpt id="p2">[</bpt>PoolOperations.GetPool<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.getpool.aspx)</ept>），以便限制返回的数据量。</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> 使用 Select 和 Expand 子句配置的 <bpt id="p1">[</bpt>ODATADetailLevel<ept id="p1">][odata]</ept> 实例也可以传递给相应的 Get 方法（例如 <bpt id="p2">[</bpt>PoolOperations.GetPool<ept id="p2">](https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.getpool.aspx)</ept>），以便限制返回的数据量。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Batch REST 到 .NET API 映射</source>
          <target state="new">Batch REST 到 .NET API 映射</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>filter、select 和 expand 字符串中的属性名称<bpt id="p1">*</bpt>必须<ept id="p1">*</ept>反映其 REST API 对应项，不管是名称本身还是大小写。下表提供了 .NET 和 REST API 的对应项之间的映射。</source>
          <target state="new">filter、select 和 expand 字符串中的属性名称<bpt id="p1">*</bpt>必须<ept id="p1">*</ept>反映其 REST API 对应项，不管是名称本身还是大小写。下表提供了 .NET 和 REST API 的对应项之间的映射。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>filter 字符串的映射</source>
          <target state="new">filter 字符串的映射</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>.NET 列表方法<ept id="p1">**</ept> -- 此列中的每个 .NET API 方法都接受 <bpt id="p2">[</bpt>ODATADetailLevel<ept id="p2">][odata]</ept> 对象作为参数。</source>
          <target state="new"><bpt id="p1">**</bpt>.NET 列表方法<ept id="p1">**</ept> -- 此列中的每个 .NET API 方法都接受 <bpt id="p2">[</bpt>ODATADetailLevel<ept id="p2">][odata]</ept> 对象作为参数。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>REST 列表请求<ept id="p1">**</ept> -- 此列中的每个 REST API 页面都包含一个表，该表指定了 <bpt id="p2">*</bpt>filter<ept id="p2">*</ept> 字符串中允许的属性和操作。在构造 <bpt id="p3">[</bpt>ODATADetailLevel.FilterClause<ept id="p3">][odata_filter]</ept> 字符串时，你会使用这些属性名称和操作。</source>
          <target state="new"><bpt id="p1">**</bpt>REST 列表请求<ept id="p1">**</ept> -- 此列中的每个 REST API 页面都包含一个表，该表指定了 <bpt id="p2">*</bpt>filter<ept id="p2">*</ept> 字符串中允许的属性和操作。在构造 <bpt id="p3">[</bpt>ODATADetailLevel.FilterClause<ept id="p3">][odata_filter]</ept> 字符串时，你会使用这些属性名称和操作。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>.NET 列表方法</source>
          <target state="new">.NET 列表方法</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>REST 列表请求</source>
          <target state="new">REST 列表请求</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CertificateOperations.ListCertificates</source>
          <target state="new">CertificateOperations.ListCertificates</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>列出帐户中的证书</source>
          <target state="new">列出帐户中的证书</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CloudTask.ListNodeFiles</source>
          <target state="new">CloudTask.ListNodeFiles</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>列出与任务关联的文件</source>
          <target state="new">列出与任务关联的文件</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>JobOperations.ListJobPreparationAndReleaseTaskStatus</source>
          <target state="new">JobOperations.ListJobPreparationAndReleaseTaskStatus</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>列出作业准备状态以及作业的作业版本任务</source>
          <target state="new">列出作业准备状态以及作业的作业版本任务</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>JobOperations.ListJobs</source>
          <target state="new">JobOperations.ListJobs</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>列出帐户中的作业</source>
          <target state="new">列出帐户中的作业</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>JobOperations.ListNodeFiles</source>
          <target state="new">JobOperations.ListNodeFiles</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>列出节点上的文件</source>
          <target state="new">列出节点上的文件</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>JobOperations.ListTasks</source>
          <target state="new">JobOperations.ListTasks</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>列出与作业关联的任务</source>
          <target state="new">列出与作业关联的任务</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>JobScheduleOperations.ListJobSchedules</source>
          <target state="new">JobScheduleOperations.ListJobSchedules</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>列出帐户中的作业计划</source>
          <target state="new">列出帐户中的作业计划</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>JobScheduleOperations.ListJobs</source>
          <target state="new">JobScheduleOperations.ListJobs</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>列出与作业计划关联的作业</source>
          <target state="new">列出与作业计划关联的作业</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>PoolOperations.ListComputeNodes</source>
          <target state="new">PoolOperations.ListComputeNodes</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>列出池中的计算节点</source>
          <target state="new">列出池中的计算节点</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>PoolOperations.ListPools</source>
          <target state="new">PoolOperations.ListPools</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>列出帐户中的池</source>
          <target state="new">列出帐户中的池</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>select 字符串的映射</source>
          <target state="new">select 字符串的映射</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Batch .NET 类型<ept id="p1">**</ept> -- Batch .NET API 类型。</source>
          <target state="new"><bpt id="p1">**</bpt>Batch .NET 类型<ept id="p1">**</ept> -- Batch .NET API 类型。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>REST API 实体<ept id="p1">**</ept> -- 此列中的每一页都包含一个或多个表，其中列出了类型的 REST API 属性名称。在构造 <bpt id="p2">*</bpt>select<ept id="p2">*</ept> 字符串时使用这些属性名称。在构造 <bpt id="p3">[</bpt>ODATADetailLevel.SelectClause<ept id="p3">][odata_select]</ept> 字符串时，你会使用这些相同的属性名称。</source>
          <target state="new"><bpt id="p1">**</bpt>REST API 实体<ept id="p1">**</ept> -- 此列中的每一页都包含一个或多个表，其中列出了类型的 REST API 属性名称。在构造 <bpt id="p2">*</bpt>select<ept id="p2">*</ept> 字符串时使用这些属性名称。在构造 <bpt id="p3">[</bpt>ODATADetailLevel.SelectClause<ept id="p3">][odata_select]</ept> 字符串时，你会使用这些相同的属性名称。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Batch .NET 类型</source>
          <target state="new">Batch .NET 类型</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>REST API 实体</source>
          <target state="new">REST API 实体</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>证书</source>
          <target state="new">证书</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>获取有关证书的信息</source>
          <target state="new">获取有关证书的信息</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CloudJob</source>
          <target state="new">CloudJob</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>获取有关作业的信息</source>
          <target state="new">获取有关作业的信息</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CloudJobSchedule</source>
          <target state="new">CloudJobSchedule</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>获取有关作业计划的信息</source>
          <target state="new">获取有关作业计划的信息</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>ComputeNode</source>
          <target state="new">ComputeNode</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>获取有关节点的信息</source>
          <target state="new">获取有关节点的信息</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CloudPool</source>
          <target state="new">CloudPool</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>获取有关池的信息</source>
          <target state="new">获取有关池的信息</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CloudTask</source>
          <target state="new">CloudTask</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>获取有关任务的信息</source>
          <target state="new">获取有关任务的信息</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>示例：构造 filter 字符串</source>
          <target state="new">示例：构造 filter 字符串</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>针对 <bpt id="p1">[</bpt>ODATADetailLevel.FilterClause<ept id="p1">][odata_filter]</ept> 构造 filter 字符串时，请查阅上表，在“filter 字符串的映射”下找到与你所希望执行的列表操作相对应的 REST API 文档页。你会在该页第一个多行表中找到可筛选属性及其支持的运算符。例如，如果你希望检索其退出代码不为零的所有任务，则可查看<bpt id="p2">[</bpt>列出与作业相关联的任务<ept id="p2">][rest_list_tasks]</ept>上的此行，此行指定了相应的属性字符串以及允许的运算符：</source>
          <target state="new">针对 <bpt id="p1">[</bpt>ODATADetailLevel.FilterClause<ept id="p1">][odata_filter]</ept> 构造 filter 字符串时，请查阅上表，在“filter 字符串的映射”下找到与你所希望执行的列表操作相对应的 REST API 文档页。你会在该页第一个多行表中找到可筛选属性及其支持的运算符。例如，如果你希望检索其退出代码不为零的所有任务，则可查看<bpt id="p2">[</bpt>列出与作业相关联的任务<ept id="p2">][rest_list_tasks]</ept>上的此行，此行指定了相应的属性字符串以及允许的运算符：</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>属性</source>
          <target state="new">属性</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>允许的操作</source>
          <target state="new">允许的操作</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>类型</source>
          <target state="new">类型</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>因此，若要列出退出代码不为零的所有任务，可使用以下 filter 字符串：</source>
          <target state="new">因此，若要列出退出代码不为零的所有任务，可使用以下 filter 字符串：</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>示例：构造 select 字符串</source>
          <target state="new">示例：构造 select 字符串</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>若要构造 <bpt id="p1">[</bpt>ODATADetailLevel.SelectClause<ept id="p1">][odata_select]</ept>，请查阅上表，在“select 字符串的映射”下导航到与所列实体类型相对应的 REST API 页。你会在该页第一个多行表中找到可选择属性及其支持的运算符。例如，如果你希望仅检索列表中每个任务的 ID 和命令行，则可在<bpt id="p2">[</bpt>获取有关任务的信息<ept id="p2">][rest_get_task]</ept>的相应表中找到这些行：</source>
          <target state="new">若要构造 <bpt id="p1">[</bpt>ODATADetailLevel.SelectClause<ept id="p1">][odata_select]</ept>，请查阅上表，在“select 字符串的映射”下导航到与所列实体类型相对应的 REST API 页。你会在该页第一个多行表中找到可选择属性及其支持的运算符。例如，如果你希望仅检索列表中每个任务的 ID 和命令行，则可在<bpt id="p2">[</bpt>获取有关任务的信息<ept id="p2">][rest_get_task]</ept>的相应表中找到这些行：</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>属性</source>
          <target state="new">属性</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>类型</source>
          <target state="new">类型</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>说明</source>
          <target state="new">说明</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>因此，若要只包括每个所列任务的 ID 和命令行，可使用以下 select 字符串：</source>
          <target state="new">因此，若要只包括每个所列任务的 ID 和命令行，可使用以下 select 字符串：</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>请查看 GitHub 上的 <bpt id="p1">[</bpt>EfficientListQueries<ept id="p1">][efficient_query_sample]</ept> 示例项目，了解列表查询如何有效地影响应用程序的性能。此 C# 控制台应用程序创建大量的任务并将其添加到作业。然后，它对 <bpt id="p2">[</bpt>JobOperations.ListTasks<ept id="p2">][net_list_tasks]</ept> 方法进行多次调用，并传递配置了不同属性值的 <bpt id="p3">[</bpt>ODATADetailLevel<ept id="p3">][odata]</ept> 对象，以改变要返回的数据量。生成的输出如下所示：</source>
          <target state="new">请查看 GitHub 上的 <bpt id="p1">[</bpt>EfficientListQueries<ept id="p1">][efficient_query_sample]</ept> 示例项目，了解列表查询如何有效地影响应用程序的性能。此 C# 控制台应用程序创建大量的任务并将其添加到作业。然后，它对 <bpt id="p2">[</bpt>JobOperations.ListTasks<ept id="p2">][net_list_tasks]</ept> 方法进行多次调用，并传递配置了不同属性值的 <bpt id="p3">[</bpt>ODATADetailLevel<ept id="p3">][odata]</ept> 对象，以改变要返回的数据量。生成的输出如下所示：</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>如所用时间信息中所示，限制返回的属性和项数可以大大缩短查询响应时间。你可以在 GitHub 的 <bpt id="p1">[</bpt>azure-batch-samples<ept id="p1">][github_samples]</ept> 存储库中查找此项目和其他示例项目。</source>
          <target state="new">如所用时间信息中所示，限制返回的属性和项数可以大大缩短查询响应时间。你可以在 GitHub 的 <bpt id="p1">[</bpt>azure-batch-samples<ept id="p1">][github_samples]</ept> 存储库中查找此项目和其他示例项目。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>