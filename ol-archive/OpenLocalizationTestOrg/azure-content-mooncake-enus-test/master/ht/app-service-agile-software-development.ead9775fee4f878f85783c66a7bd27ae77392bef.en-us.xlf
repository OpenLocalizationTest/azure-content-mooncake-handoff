<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9702da347c4b82df4cffa7d37c037988c96dbc7f</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用 Azure Web 应用进行灵便软件开发</source>
          <target state="new">使用 Azure Web 应用进行灵便软件开发</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>学习如何使用支持灵便软件开发的方式，通过 Azure Web 应用创建高缩放性的复杂应用程序。</source>
          <target state="new">学习如何使用支持灵便软件开发的方式，通过 Azure Web 应用创建高缩放性的复杂应用程序。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用 Azure Web 应用进行灵便软件开发</source>
          <target state="new">使用 Azure Web 应用进行灵便软件开发</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>在本教程中，你将学习如何使用支持<bpt id="p1">[</bpt>灵便软件开发<ept id="p1">](https://en.wikipedia.org/wiki/Agile_software_development)</ept>的方式，通过 <bpt id="p2">[</bpt>Azure Web 应用<ept id="p2">](/home/features/web-site/)</ept>创建高缩放性的复杂应用程序。</source>
          <target state="new">在本教程中，你将学习如何使用支持<bpt id="p1">[</bpt>灵便软件开发<ept id="p1">](https://en.wikipedia.org/wiki/Agile_software_development)</ept>的方式，通过 <bpt id="p2">[</bpt>Azure Web 应用<ept id="p2">](/home/features/web-site/)</ept>创建高缩放性的复杂应用程序。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>技术流程限制通常会妨碍成功的实施灵便方法。如果在 <bpt id="p1">[</bpt>Azure 资源管理器<ept id="p1">](/documentation/articles/resource-group-overview)</ept>中合理地结合了部署的协调与管理，则具有<bpt id="p2">[</bpt>连续发布<ept id="p2">](/documentation/articles/web-sites-publish-source-control)</ept>、<bpt id="p3">[</bpt>过渡环境<ept id="p3">](/documentation/articles/web-sites-staged-publishing)</ept>（槽）和<bpt id="p4">[</bpt>监视<ept id="p4">](/documentation/articles/web-sites-monitor)</ept>等功能的 Azure Web 应用是非常适合采用灵便软件开发的开发人员的解决方案。</source>
          <target state="new">技术流程限制通常会妨碍成功的实施灵便方法。如果在 <bpt id="p1">[</bpt>Azure 资源管理器<ept id="p1">](/documentation/articles/resource-group-overview)</ept>中合理地结合了部署的协调与管理，则具有<bpt id="p2">[</bpt>连续发布<ept id="p2">](/documentation/articles/web-sites-publish-source-control)</ept>、<bpt id="p3">[</bpt>过渡环境<ept id="p3">](/documentation/articles/web-sites-staged-publishing)</ept>（槽）和<bpt id="p4">[</bpt>监视<ept id="p4">](/documentation/articles/web-sites-monitor)</ept>等功能的 Azure Web 应用是非常适合采用灵便软件开发的开发人员的解决方案。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>下表是灵便开发的相关要求以及 Azure 服务如何启用它们的简短列表。</source>
          <target state="new">下表是灵便开发的相关要求以及 Azure 服务如何启用它们的简短列表。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>要求</source>
          <target state="new">要求</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Azure 如何实现</source>
          <target state="new">Azure 如何实现</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>- 将构建版本设为自我测试</source>
          <target state="new">- 将构建版本设为自我测试</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>负载测试、Web 测试等可以使用 Azure 资源管理器模板进行部署。</source>
          <target state="new">负载测试、Web 测试等可以使用 Azure 资源管理器模板进行部署。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>- 在生产环境的复本中运行测试</source>
          <target state="new">- 在生产环境的复本中运行测试</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Azure 资源管理器模板可以用来创建 Azure 生产环境的复本（包括应用设置、连接字符串模板、缩放等）以通过快速且可预测的方式测试。</source>
          <target state="new">Azure 资源管理器模板可以用来创建 Azure 生产环境的复本（包括应用设置、连接字符串模板、缩放等）以通过快速且可预测的方式测试。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>执行的操作</source>
          <target state="new">执行的操作</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>你将逐步执行典型的“开发-测试-过渡-生产”工作流，以将新更改发布到 <bpt id="p1">[</bpt>ToDoApp<ept id="p1">](https://github.com/azure-appservice-samples/ToDoApp)</ept> 示例应用程序（包含两个<bpt id="p2">[</bpt> Web 应用<ept id="p2">](/home/features/web-site/)</ept>：一个是前端 (FE)，另一个是 Web API 后端 (BE)）和 <bpt id="p3">[</bpt>SQL 数据库<ept id="p3">](/home/features/sql-database/)</ept>。将按如下所示使用部署体系结构：</source>
          <target state="new">你将逐步执行典型的“开发-测试-过渡-生产”工作流，以将新更改发布到 <bpt id="p1">[</bpt>ToDoApp<ept id="p1">](https://github.com/azure-appservice-samples/ToDoApp)</ept> 示例应用程序（包含两个<bpt id="p2">[</bpt> Web 应用<ept id="p2">](/home/features/web-site/)</ept>：一个是前端 (FE)，另一个是 Web API 后端 (BE)）和 <bpt id="p3">[</bpt>SQL 数据库<ept id="p3">](/home/features/sql-database/)</ept>。将按如下所示使用部署体系结构：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>将图片放入文字：</source>
          <target state="new">将图片放入文字：</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>部署体系结构分成三个不同的环境（或 Azure 中的<bpt id="p1">[</bpt>资源组<ept id="p1">](/documentation/articles/resource-group-overview)</ept>），各有其自身的 App Service 计划、<bpt id="p2">[</bpt>缩放<ept id="p2">](/documentation/articles/web-sites-scale)</ept>设置和 SQL 数据库。</source>
          <target state="new">部署体系结构分成三个不同的环境（或 Azure 中的<bpt id="p1">[</bpt>资源组<ept id="p1">](/documentation/articles/resource-group-overview)</ept>），各有其自身的 App Service 计划、<bpt id="p2">[</bpt>缩放<ept id="p2">](/documentation/articles/web-sites-scale)</ept>设置和 SQL 数据库。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>你可以单独管理每个环境。它们甚至可以存在于不同的订阅中。</source>
          <target state="new">你可以单独管理每个环境。它们甚至可以存在于不同的订阅中。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>过渡和生产环境实现为相同 Web 应用应用的两个槽。</source>
          <target state="new">过渡和生产环境实现为相同 Web 应用应用的两个槽。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>在过渡槽（包含生产数据）上验证主分支的提交时，已验证的过渡应用将交换到生产槽，且<bpt id="p1">[</bpt>不会造成停机<ept id="p1">](/documentation/articles/web-sites-staged-publishing)</ept>。</source>
          <target state="new">在过渡槽（包含生产数据）上验证主分支的提交时，已验证的过渡应用将交换到生产槽，且<bpt id="p1">[</bpt>不会造成停机<ept id="p1">](/documentation/articles/web-sites-staged-publishing)</ept>。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>生产和过渡环境由 <bpt id="p1">[</bpt><bpt id="p2">*</bpt>&amp;lt;repository\_root&gt;<ept id="p2">*</ept>/ARMTemplates/ProdandStage.json<ept id="p1">](https://github.com/azure-appservice-samples/ToDoApp/blob/master/ARMTemplates/ProdAndStage.json)</ept> 中的模板定义。</source>
          <target state="new">生产和过渡环境由 <bpt id="p1">[</bpt><bpt id="p2">*</bpt>&amp;lt;repository\_root&gt;<ept id="p2">*</ept>/ARMTemplates/ProdandStage.json<ept id="p1">](https://github.com/azure-appservice-samples/ToDoApp/blob/master/ARMTemplates/ProdAndStage.json)</ept> 中的模板定义。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>开发和测试环境由 <bpt id="p1">[</bpt><bpt id="p2">*</bpt>&amp;lt;repository\_root&gt;<ept id="p2">*</ept>/ARMTemplates/Dev.json<ept id="p1">](https://github.com/azure-appservice-samples/ToDoApp/blob/master/ARMTemplates/Dev.json)</ept> 中的模板定义。</source>
          <target state="new">开发和测试环境由 <bpt id="p1">[</bpt><bpt id="p2">*</bpt>&amp;lt;repository\_root&gt;<ept id="p2">*</ept>/ARMTemplates/Dev.json<ept id="p1">](https://github.com/azure-appservice-samples/ToDoApp/blob/master/ARMTemplates/Dev.json)</ept> 中的模板定义。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>你还要使用典型分支策略，其中，代码从开发分支移到测试分支，然后移到主分支（所谓的质量提升）。</source>
          <target state="new">你还要使用典型分支策略，其中，代码从开发分支移到测试分支，然后移到主分支（所谓的质量提升）。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>所需的项目</source>
          <target state="new">所需的项目</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>一个 Azure 帐户</source>
          <target state="new">一个 Azure 帐户</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>一个 <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/)</ept> 帐户</source>
          <target state="new">一个 <bpt id="p1">[</bpt>GitHub<ept id="p1">](https://github.com/)</ept> 帐户</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Git Shell（与 <bpt id="p1">[</bpt>GitHub for Windows<ept id="p1">](https://windows.github.com/)</ept> 一起安装）- 可让你在相同的会话中运行 Git 和 PowerShell 命令</source>
          <target state="new">Git Shell（与 <bpt id="p1">[</bpt>GitHub for Windows<ept id="p1">](https://windows.github.com/)</ept> 一起安装）- 可让你在相同的会话中运行 Git 和 PowerShell 命令</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>最新的 <bpt id="p1">[</bpt>Azure PowerShell<ept id="p1">](https://github.com/Azure/azure-powershell/releases/download/0.9.4-June2015/azure-powershell.0.9.4.msi)</ept> 软件</source>
          <target state="new">最新的 <bpt id="p1">[</bpt>Azure PowerShell<ept id="p1">](https://github.com/Azure/azure-powershell/releases/download/0.9.4-June2015/azure-powershell.0.9.4.msi)</ept> 软件</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 如果使用的是 Auzre PowerShell 1.0 或更高版本，需要对“deploy.ps1”进行大量修改。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 如果使用的是 Auzre PowerShell 1.0 或更高版本，需要对“deploy.ps1”进行大量修改。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>需要删除所有 <ph id="ph1">`Switch-AzureMode`</ph> 命令。</source>
          <target state="new">需要删除所有 <ph id="ph1">`Switch-AzureMode`</ph> 命令。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>将 <ph id="ph1">`Get-AzureResource`</ph> 替换为 <ph id="ph2">`Get-AzureRmResource`</ph>，并删除 <ph id="ph3">`-OutputObjectFormat`</ph> 参数</source>
          <target state="new">将 <ph id="ph1">`Get-AzureResource`</ph> 替换为 <ph id="ph2">`Get-AzureRmResource`</ph>，并删除 <ph id="ph3">`-OutputObjectFormat`</ph> 参数</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>将 <ph id="ph1">`New-AzureResourceGroup`</ph> 解构为 <ph id="ph2">`New-AzureRmResourceGroup`</ph> 和 <ph id="ph3">`New-AzureRmResourceGroupDeployment`</ph>，例如 <ph id="ph4">`New-AzureRmResourceGroup -Name $RG_Name -Location $RG_Location`</ph> 和 <ph id="ph5">`New-AzureRmResourceGroupDeployment -Verbose -name $RG_Name -ResourceGroupName $RG_Name -TemplateFile ".\$TemplateFile" -TemplateParameterFile ".\temp.json" -ErrorAction Stop`</ph></source>
          <target state="new">将 <ph id="ph1">`New-AzureResourceGroup`</ph> 解构为 <ph id="ph2">`New-AzureRmResourceGroup`</ph> 和 <ph id="ph3">`New-AzureRmResourceGroupDeployment`</ph>，例如 <ph id="ph4">`New-AzureRmResourceGroup -Name $RG_Name -Location $RG_Location`</ph> 和 <ph id="ph5">`New-AzureRmResourceGroupDeployment -Verbose -name $RG_Name -ResourceGroupName $RG_Name -TemplateFile ".\$TemplateFile" -TemplateParameterFile ".\temp.json" -ErrorAction Stop`</ph></target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>基本了解以下知识：</source>
          <target state="new">基本了解以下知识：</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Azure 资源管理器<ept id="p1">](/documentation/articles/resource-group-overview)</ept>模板部署</source>
          <target state="new"><bpt id="p1">[</bpt>Azure 资源管理器<ept id="p1">](/documentation/articles/resource-group-overview)</ept>模板部署</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Git</source>
          <target state="new">Git</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>PowerShell</source>
          <target state="new">PowerShell</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 完成本教程需要有一个 Azure 帐户：</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 完成本教程需要有一个 Azure 帐户：</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>你可以<bpt id="p1">[</bpt>建立一个试用 Azure 帐户<ept id="p1">](/pricing/1rmb-trial/)</ept> - 获取可用来试用付费版 Azure 服务的信用额度，甚至在用完信用额度后，你仍可以保留帐户和使用免费的 Azure 服务（如 Web 应用）。</source>
          <target state="new">你可以<bpt id="p1">[</bpt>建立一个试用 Azure 帐户<ept id="p1">](/pricing/1rmb-trial/)</ept> - 获取可用来试用付费版 Azure 服务的信用额度，甚至在用完信用额度后，你仍可以保留帐户和使用免费的 Azure 服务（如 Web 应用）。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>设置生产环境</source>
          <target state="new">设置生产环境</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>在典型的 DevOps 方案中，应用程序在 Azure 中实时运行，并且你可以对它进行更改。此方案将会提供你开发、测试和使用的模板来部署生产环境。本部分将介绍如何设置生产环境。</source>
          <target state="new">在典型的 DevOps 方案中，应用程序在 Azure 中实时运行，并且你可以对它进行更改。此方案将会提供你开发、测试和使用的模板来部署生产环境。本部分将介绍如何设置生产环境。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>创建 <bpt id="p1">[</bpt>ToDoApp<ept id="p1">](https://github.com/azure-appservice-samples/ToDoApp)</ept> 存储库的专属分叉。有关创建分叉的信息，请参阅<bpt id="p2">[</bpt>分叉存储库<ept id="p2">](https://help.github.com/articles/fork-a-repo/)</ept>。创建分叉后，可以在浏览器中查看它。</source>
          <target state="new">创建 <bpt id="p1">[</bpt>ToDoApp<ept id="p1">](https://github.com/azure-appservice-samples/ToDoApp)</ept> 存储库的专属分叉。有关创建分叉的信息，请参阅<bpt id="p2">[</bpt>分叉存储库<ept id="p2">](https://help.github.com/articles/fork-a-repo/)</ept>。创建分叉后，可以在浏览器中查看它。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>打开 Git Shell 会话。如果你还没有 Git Shell，请立即安装 <bpt id="p1">[</bpt>GitHub for Windows<ept id="p1">](https://windows.github.com/)</ept>。</source>
          <target state="new">打开 Git Shell 会话。如果你还没有 Git Shell，请立即安装 <bpt id="p1">[</bpt>GitHub for Windows<ept id="p1">](https://windows.github.com/)</ept>。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>通过执行以下命令创建分叉的本地复本：</source>
          <target state="new">通过执行以下命令创建分叉的本地复本：</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>创建本地复本后，请导航到 <bpt id="p1">*</bpt>&amp;lt;repository\_root&gt;<ept id="p1">*</ept>\\ARMTemplates 并运行 deploy.ps1 脚本，如下所示：</source>
          <target state="new">创建本地复本后，请导航到 <bpt id="p1">*</bpt>&amp;lt;repository\_root&gt;<ept id="p1">*</ept>\\ARMTemplates 并运行 deploy.ps1 脚本，如下所示：</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 在使用这些模板之前，你需要进行以下编辑，以适应 Azure 中国区的云环境：</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 在使用这些模板之前，你需要进行以下编辑，以适应 Azure 中国区的云环境：</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>打开文件“ProdAndStage.json”，然后搜索“sourcecontrols”。</source>
          <target state="new">打开文件“ProdAndStage.json”，然后搜索“sourcecontrols”。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>在块和 fater <ph id="ph1">`"branch": "[parameters('branch')]"`</ph> 中添加 <ph id="ph2">`"IsManualIntegration": true`</ph></source>
          <target state="new">在块和 fater <ph id="ph1">`"branch": "[parameters('branch')]"`</ph> 中添加 <ph id="ph2">`"IsManualIntegration": true`</ph></target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>在“ProdAndStage.json”和“deploy.ps1”中，将“West US”或“East US”替换为“China East”或“China North”</source>
          <target state="new">在“ProdAndStage.json”和“deploy.ps1”中，将“West US”或“East US”替换为“China East”或“China North”</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>由于 Ibiza 门户尚未在 Azure 中国区推出，因此我们无法设置 GitHub 凭据。</source>
          <target state="new">由于 Ibiza 门户尚未在 Azure 中国区推出，因此我们无法设置 GitHub 凭据。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>出现提示时，键入所需的用户名和密码来访问数据库。</source>
          <target state="new">出现提示时，键入所需的用户名和密码来访问数据库。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>你应会看到各种 Azure 资源的设置进度。部署完成后，脚本将在浏览器中启动应用程序，并发出友好的提示音。</source>
          <target state="new">你应会看到各种 Azure 资源的设置进度。部署完成后，脚本将在浏览器中启动应用程序，并发出友好的提示音。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> 查看 <bpt id="p1">*</bpt>&amp;lt;repository\_root&gt;<ept id="p1">*</ept>\\ARMTemplates\\Deploy.ps1，以了解它如何生成具有唯一 ID 的资源。可以使用相同的方法来创建相同部署的复本，而不必担心资源名称冲突。</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> 查看 <bpt id="p1">*</bpt>&amp;lt;repository\_root&gt;<ept id="p1">*</ept>\\ARMTemplates\\Deploy.ps1，以了解它如何生成具有唯一 ID 的资源。可以使用相同的方法来创建相同部署的复本，而不必担心资源名称冲突。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>返回 Git Shell 会话，运行：</source>
          <target state="new">返回 Git Shell 会话，运行：</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 对于 Azure PowerShell 1.0 和更高版本，请删除“swap.ps1”中的所有 <ph id="ph2">`Switch-AzureMode`</ph> 命令。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 对于 Azure PowerShell 1.0 和更高版本，请删除“swap.ps1”中的所有 <ph id="ph2">`Switch-AzureMode`</ph> 命令。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>脚本完成后，请返回浏览到前端的地址 (http://ToDoApp<bpt id="p1">*</bpt>&amp;lt;unique_string&gt;<ept id="p1">*</ept>master.chinacloudsites.cn/)，以查看在生产环境中运行的应用程序。</source>
          <target state="new">脚本完成后，请返回浏览到前端的地址 (http://ToDoApp<bpt id="p1">*</bpt>&amp;lt;unique_string&gt;<ept id="p1">*</ept>master.chinacloudsites.cn/)，以查看在生产环境中运行的应用程序。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>登录到 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](https://manage.windowsazure.cn/)</ept>并查看创建的内容。</source>
          <target state="new">登录到 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](https://manage.windowsazure.cn/)</ept>并查看创建的内容。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>你应该可以看到两个 Web 应用，其中一个 Web 应用的名称包含 <ph id="ph1">`Api`</ph> 后缀。你还会看到 SQL 数据库和服务器、App Service 计划，以及 Web 应用的过渡槽。浏览不同的资源，并将它们与 <bpt id="p1">*</bpt>&amp;lt;repository\_root&gt;<ept id="p1">*</ept>\\ARMTemplates\\ProdAndStage.json 进行比较，以查看它们在模板中的配置方式。</source>
          <target state="new">你应该可以看到两个 Web 应用，其中一个 Web 应用的名称包含 <ph id="ph1">`Api`</ph> 后缀。你还会看到 SQL 数据库和服务器、App Service 计划，以及 Web 应用的过渡槽。浏览不同的资源，并将它们与 <bpt id="p1">*</bpt>&amp;lt;repository\_root&gt;<ept id="p1">*</ept>\\ARMTemplates\\ProdAndStage.json 进行比较，以查看它们在模板中的配置方式。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>你现在已经设置了生产环境。接下来，将要开始更新应用程序。</source>
          <target state="new">你现在已经设置了生产环境。接下来，将要开始更新应用程序。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>创建开发和测试分支</source>
          <target state="new">创建开发和测试分支</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>现在，你已在 Azure 的生产环境中创建了一个复杂应用程序，接下来，你要使用灵便方法来更新应用程序。在本部分中，你将要创建需要进行必要更新的开发和测试分支。</source>
          <target state="new">现在，你已在 Azure 的生产环境中创建了一个复杂应用程序，接下来，你要使用灵便方法来更新应用程序。在本部分中，你将要创建需要进行必要更新的开发和测试分支。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>首先创建测试环境。在 Git Shell 会话中，运行以下命令来创建名为 <bpt id="p1">**</bpt>NewUpdate<ept id="p1">**</ept> 的新分支的环境。</source>
          <target state="new">首先创建测试环境。在 Git Shell 会话中，运行以下命令来创建名为 <bpt id="p1">**</bpt>NewUpdate<ept id="p1">**</ept> 的新分支的环境。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 应该对“Dev.json”进行相同的修改，就像你对“ProdAndStage.json”所做的修改一样</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 应该对“Dev.json”进行相同的修改，就像你对“ProdAndStage.json”所做的修改一样</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>出现提示时，键入所需的用户名和密码来访问数据库。</source>
          <target state="new">出现提示时，键入所需的用户名和密码来访问数据库。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>部署完成后，脚本将在浏览器中启动应用程序，并发出友好的提示音。这时，你已创建了带有自身测试环境的新分支。请花点时间来了解有关此测试环境的一些要点：</source>
          <target state="new">部署完成后，脚本将在浏览器中启动应用程序，并发出友好的提示音。这时，你已创建了带有自身测试环境的新分支。请花点时间来了解有关此测试环境的一些要点：</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>你可以在任何 Azure 订阅中创建测试环境。这意味着，你可以分开管理生产环境和测试环境。</source>
          <target state="new">你可以在任何 Azure 订阅中创建测试环境。这意味着，你可以分开管理生产环境和测试环境。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>测试环境在 Azure 中实时运行。</source>
          <target state="new">测试环境在 Azure 中实时运行。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>测试环境类似于生产环境，差别在于过渡槽和缩放设置。因为这是 ProdandStage.json 与 Dev.json 之间的唯一差别，所以你可以得知这项信息。</source>
          <target state="new">测试环境类似于生产环境，差别在于过渡槽和缩放设置。因为这是 ProdandStage.json 与 Dev.json 之间的唯一差别，所以你可以得知这项信息。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>你可以在其自身 App Service 计划与不同的价格层（例如<bpt id="p1">**</bpt>免费<ept id="p1">**</ept>）中管理测试环境。</source>
          <target state="new">你可以在其自身 App Service 计划与不同的价格层（例如<bpt id="p1">**</bpt>免费<ept id="p1">**</ept>）中管理测试环境。</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>删除这个测试环境就像删除资源组一样简单。<bpt id="p1">[</bpt>稍后<ept id="p1">](#delete)</ept>你将学习如何执行这项操作。</source>
          <target state="new">删除这个测试环境就像删除资源组一样简单。<bpt id="p1">[</bpt>稍后<ept id="p1">](#delete)</ept>你将学习如何执行这项操作。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>运行以下命令，以继续创建开发分支：</source>
          <target state="new">运行以下命令，以继续创建开发分支：</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>出现提示时，键入所需的用户名和密码来访问数据库。</source>
          <target state="new">出现提示时，键入所需的用户名和密码来访问数据库。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>请花点时间来了解有关此开发环境的一些要点：</source>
          <target state="new">请花点时间来了解有关此开发环境的一些要点：</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>开发环境的配置与测试环境相同，因为它是使用相同模板部署的。</source>
          <target state="new">开发环境的配置与测试环境相同，因为它是使用相同模板部署的。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>在开发人员自己的 Azure 订阅中，可以创建每个开发环境，但分开管理测试环境。</source>
          <target state="new">在开发人员自己的 Azure 订阅中，可以创建每个开发环境，但分开管理测试环境。</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>开发环境在 Azure 中实时运行。</source>
          <target state="new">开发环境在 Azure 中实时运行。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>删除开发环境就像删除资源组一样简单。<bpt id="p1">[</bpt>稍后<ept id="p1">](#delete)</ept>你将学习如何执行这项操作。</source>
          <target state="new">删除开发环境就像删除资源组一样简单。<bpt id="p1">[</bpt>稍后<ept id="p1">](#delete)</ept>你将学习如何执行这项操作。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 有多位开发人员处理新的更新时，只要执行以下操作，每一位都可以轻松创建分支和专用开发环境：</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 有多位开发人员处理新的更新时，只要执行以下操作，每一位都可以轻松创建分支和专用开发环境：</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>在 GitHub 中创建其在存储库中的专属分叉（请参阅<bpt id="p1">[</bpt>分叉存储库<ept id="p1">](https://help.github.com/articles/fork-a-repo/)</ept>）。</source>
          <target state="new">在 GitHub 中创建其在存储库中的专属分叉（请参阅<bpt id="p1">[</bpt>分叉存储库<ept id="p1">](https://help.github.com/articles/fork-a-repo/)</ept>）。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>克隆其本地计算机上的分叉</source>
          <target state="new">克隆其本地计算机上的分叉</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>运行相同的命令，以创建其自身的开发分支和环境。</source>
          <target state="new">运行相同的命令，以创建其自身的开发分支和环境。</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>完成后，GitHub 分叉应有三个分支：</source>
          <target state="new">完成后，GitHub 分叉应有三个分支：</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>中应该有六个 Web 应用（一共三组，每组两个 Web 应用）：</source>
          <target state="new"><bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>中应该有六个 Web 应用（一共三组，每组两个 Web 应用）：</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 请注意，ProdandStage.json 将生产环境指定为使用<bpt id="p1">**</bpt>标准<ept id="p1">**</ept>定价层，这适合生产应用程序的缩放性。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 请注意，ProdandStage.json 将生产环境指定为使用<bpt id="p1">**</bpt>标准<ept id="p1">**</ept>定价层，这适合生产应用程序的缩放性。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>将代码合并到测试环境</source>
          <target state="new">将代码合并到测试环境</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>准备好将代码从 Dev 分支推送到 NewUpdate 分支后，请执行标准的 git 过程：</source>
          <target state="new">准备好将代码从 Dev 分支推送到 NewUpdate 分支后，请执行标准的 git 过程：</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>在 GitHub 中，将 NewUpdate 的任何新提交（例如其他开发人员所创建的提交）合并到 Dev 分支。GitHub 上的任何新提交都会在开发环境中触发代码推送和构建。然后可以确保开发分支中的代码仍能与 NewUpdate 分支中的最新位一起运行。</source>
          <target state="new">在 GitHub 中，将 NewUpdate 的任何新提交（例如其他开发人员所创建的提交）合并到 Dev 分支。GitHub 上的任何新提交都会在开发环境中触发代码推送和构建。然后可以确保开发分支中的代码仍能与 NewUpdate 分支中的最新位一起运行。</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>在 GitHub 中，将所有新提交从 Dev 分支合并到 NewUpdate 分支。此操作将在测试环境中触发代码推送和构建。</source>
          <target state="new">在 GitHub 中，将所有新提交从 Dev 分支合并到 NewUpdate 分支。此操作将在测试环境中触发代码推送和构建。</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>现在，请将你的代码推送到 <bpt id="p1">**</bpt>NewUpdate<ept id="p1">**</ept> 分支。在 Git Shell 中运行以下命令：</source>
          <target state="new">现在，请将你的代码推送到 <bpt id="p1">**</bpt>NewUpdate<ept id="p1">**</ept> 分支。在 Git Shell 中运行以下命令：</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>就这么简单！</source>
          <target state="new">就这么简单！</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>转到测试环境的 Web 应用边栏选项卡，以查看新提交是否已推送到测试环境（合并到 NewUpdate 分支）。然后，单击“浏览”查看样式更改是否在 Azure 中实时运行。</source>
          <target state="new">转到测试环境的 Web 应用边栏选项卡，以查看新提交是否已推送到测试环境（合并到 NewUpdate 分支）。然后，单击“浏览”查看样式更改是否在 Azure 中实时运行。</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>将更新部署到生产环境</source>
          <target state="new">将更新部署到生产环境</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>将代码推送到过渡和生产环境的过程类似于前面将代码所推送到测试环境。真的就这么简单。</source>
          <target state="new">将代码推送到过渡和生产环境的过程类似于前面将代码所推送到测试环境。真的就这么简单。</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>在 Git Shell 中运行以下命令：</source>
          <target state="new">在 Git Shell 中运行以下命令：</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>请记住，根据在 ProdandStage.json 中设置过渡和生产环境的方式，新代码将推送到“过渡”槽，并在该处运行。因此，如果你导航到过渡槽的 URL，则会看到新代码正在该处运行。为此，请在 Git Shell 中运行 <ph id="ph1">`Show-AzureWebsite`</ph> cmdlet。</source>
          <target state="new">请记住，根据在 ProdandStage.json 中设置过渡和生产环境的方式，新代码将推送到“过渡”槽，并在该处运行。因此，如果你导航到过渡槽的 URL，则会看到新代码正在该处运行。为此，请在 Git Shell 中运行 <ph id="ph1">`Show-AzureWebsite`</ph> cmdlet。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>现在，在过渡槽中验证更新之后，唯一要做的就是将它交换到生产环境。在 Git Shell 中，只要运行以下命令：</source>
          <target state="new">现在，在过渡槽中验证更新之后，唯一要做的就是将它交换到生产环境。在 Git Shell 中，只要运行以下命令：</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>祝贺你！ 你已成功地将新的更新发布到生产 Web 应用。不仅如此，完成的方式也只是轻松地创建开发和测试环境，以及构建和测试每项提交。这些是灵便软件开发的重要构建块。</source>
          <target state="new">祝贺你！ 你已成功地将新的更新发布到生产 Web 应用。不仅如此，完成的方式也只是轻松地创建开发和测试环境，以及构建和测试每项提交。这些是灵便软件开发的重要构建块。</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>删除开发和测试环境</source>
          <target state="new">删除开发和测试环境</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>由于你特意将开发和测试环境构建为独立的资源组，因此可以很容易删除它们。若要删除你在本教程中创建的环境（GitHub 分支和 Azure 项目），只需在 Git Shell 中运行以下命令：</source>
          <target state="new">由于你特意将开发和测试环境构建为独立的资源组，因此可以很容易删除它们。若要删除你在本教程中创建的环境（GitHub 分支和 Azure 项目），只需在 Git Shell 中运行以下命令：</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>摘要</source>
          <target state="new">摘要</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>对于许多想要采用 Azure 作为其应用程序平台的公司而言，灵便软件开发是必不可少的。在本教程中，你已学习如何轻松创建和删除生产环境的确切副本或近似副本，即使对于复杂应用程序也是一样。你还学习了如何利用此功能创建开发过程，以便在 Azure 中构建和测试每项提交。本教程旨在演示如何最恰当地将 Azure Web 应用和 Azure 资源管理器配合使用，以创建提供灵便方法的 DevOps 解决方案。接下来，你可以通过执行高级 DevOps 技术，基于此方案生成项目。</source>
          <target state="new">对于许多想要采用 Azure 作为其应用程序平台的公司而言，灵便软件开发是必不可少的。在本教程中，你已学习如何轻松创建和删除生产环境的确切副本或近似副本，即使对于复杂应用程序也是一样。你还学习了如何利用此功能创建开发过程，以便在 Azure 中构建和测试每项提交。本教程旨在演示如何最恰当地将 Azure Web 应用和 Azure 资源管理器配合使用，以创建提供灵便方法的 DevOps 解决方案。接下来，你可以通过执行高级 DevOps 技术，基于此方案生成项目。</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>更多资源</source>
          <target state="new">更多资源</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>灵便开发实践：有关现代化开发周期的提示和技巧</source>
          <target state="new">灵便开发实践：有关现代化开发周期的提示和技巧</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>使用资源管理器模板为 Azure Web 应用制定高级部署策略</source>
          <target state="new">使用资源管理器模板为 Azure Web 应用制定高级部署策略</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>创作 Azure 资源管理器模板</source>
          <target state="new">创作 Azure 资源管理器模板</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>JSONLint – JSON 验证程序</source>
          <target state="new">JSONLint – JSON 验证程序</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>ARMClient - 设置从 GitHub 到站点的发布</source>
          <target state="new">ARMClient - 设置从 GitHub 到站点的发布</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Git 分支 - 基本分支和合并</source>
          <target state="new">Git 分支 - 基本分支和合并</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>David Ebbo 的博客</source>
          <target state="new">David Ebbo 的博客</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Azure PowerShell</source>
          <target state="new">Azure PowerShell</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Azure 跨平台命令行工具</source>
          <target state="new">Azure 跨平台命令行工具</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>在 Azure AD 中创建或编辑用户</source>
          <target state="new">在 Azure AD 中创建或编辑用户</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>