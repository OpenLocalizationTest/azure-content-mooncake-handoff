<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ffdb938b0e94a454fab95d53ba83d64971ae2352</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何通过 PHP 使用服务总线队列 | Microsoft Azure</source>
          <target state="new">如何通过 PHP 使用服务总线队列 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在 Azure 中使用 Service Bus 队列。采用 PHP 编写的代码示例。</source>
          <target state="new">了解如何在 Azure 中使用 Service Bus 队列。采用 PHP 编写的代码示例。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何使用 Service Bus 队列</source>
          <target state="new">如何使用 Service Bus 队列</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本指南说明如何使用服务总线队列。示例是用 PHP 编写的并使用了 <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">](/documentation/articles/php-download-sdk)</ept>。涉及的任务包括<bpt id="p2">**</bpt>创建队列<ept id="p2">**</ept>、<bpt id="p3">**</bpt>发送和接收消息<ept id="p3">**</ept>以及<bpt id="p4">**</bpt>删除队列<ept id="p4">**</ept>。</source>
          <target state="new">本指南说明如何使用服务总线队列。示例是用 PHP 编写的并使用了 <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">](/documentation/articles/php-download-sdk)</ept>。涉及的任务包括<bpt id="p2">**</bpt>创建队列<ept id="p2">**</ept>、<bpt id="p3">**</bpt>发送和接收消息<ept id="p3">**</ept>以及<bpt id="p4">**</bpt>删除队列<ept id="p4">**</ept>。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>创建 PHP 应用程序</source>
          <target state="new">创建 PHP 应用程序</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用 <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">](/documentation/articles/php-download-sdk)</ept> 中的类。你可以使用任何开发工具或记事本创建应用程序。</source>
          <target state="new">创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用 <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">](/documentation/articles/php-download-sdk)</ept> 中的类。你可以使用任何开发工具或记事本创建应用程序。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>你的 PHP 安装还必须已安装并启用 <bpt id="p1">[</bpt>OpenSSL 扩展<ept id="p1">](http://php.net/openssl)</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>你的 PHP 安装还必须已安装并启用 <bpt id="p1">[</bpt>OpenSSL 扩展<ept id="p1">](http://php.net/openssl)</ept>。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在本指南中，你将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。</source>
          <target state="new">在本指南中，你将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>获取 Azure 客户端库</source>
          <target state="new">获取 Azure 客户端库</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>配置应用程序以使用 Service Bus</source>
          <target state="new">配置应用程序以使用 Service Bus</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>若要使用服务总线队列 API，请执行以下操作：</source>
          <target state="new">若要使用服务总线队列 API，请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">[</bpt>require_once<ept id="p1">][require_once]</ept> 语句引用 autoloader 文件。</source>
          <target state="new">使用 <bpt id="p1">[</bpt>require_once<ept id="p1">][require_once]</ept> 语句引用 autoloader 文件。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>引用可使用的所有类。</source>
          <target state="new">引用可使用的所有类。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>下面的示例演示了如何包括 autoloader 文件并引用 <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> 类。</source>
          <target state="new">下面的示例演示了如何包括 autoloader 文件并引用 <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> 类。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>本示例（以及本文中的其他示例）假定你已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果你已手动安装这些库或将其作为 PEAR 包安装，则必须引用 <bpt id="p1">**</bpt>WindowsAzure.php<ept id="p1">**</ept> autoloader 文件。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>本示例（以及本文中的其他示例）假定你已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果你已手动安装这些库或将其作为 PEAR 包安装，则必须引用 <bpt id="p1">**</bpt>WindowsAzure.php<ept id="p1">**</ept> autoloader 文件。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在以下示例中，<ph id="ph1">`require_once`</ph> 语句将始终显示，但只会引用执行该示例所需的类。</source>
          <target state="new">在以下示例中，<ph id="ph1">`require_once`</ph> 语句将始终显示，但只会引用执行该示例所需的类。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>设置服务总线连接</source>
          <target state="new">设置服务总线连接</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>若要实例化服务总线客户端，必须先设置采用以下格式的有效连接字符串：</source>
          <target state="new">若要实例化服务总线客户端，必须先设置采用以下格式的有效连接字符串：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>其中，<bpt id="p1">**</bpt>Endpoint<ept id="p1">**</ept> 的格式通常为 <ph id="ph1">`https://[yourNamespace].servicebus.chinacloudapi.cn`</ph>。</source>
          <target state="new">其中，<bpt id="p1">**</bpt>Endpoint<ept id="p1">**</ept> 的格式通常为 <ph id="ph1">`https://[yourNamespace].servicebus.chinacloudapi.cn`</ph>。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>若要创建任何 Azure 服务客户端，必须使用 <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> 类。你可以：</source>
          <target state="new">若要创建任何 Azure 服务客户端，必须使用 <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> 类。你可以：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>将连接字符串直接传递给它。</source>
          <target state="new">将连接字符串直接传递给它。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>CloudConfigurationManager (CCM)<ept id="p1">**</ept> 检查多个外部源以获取连接字符串：</source>
          <target state="new">使用 <bpt id="p1">**</bpt>CloudConfigurationManager (CCM)<ept id="p1">**</ept> 检查多个外部源以获取连接字符串：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>默认情况下，它附带了对一个外部源的支持 - 环境变量</source>
          <target state="new">默认情况下，它附带了对一个外部源的支持 - 环境变量</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>你可以通过扩展 <bpt id="p1">**</bpt>ConnectionStringSource<ept id="p1">**</ept> 类添加新的源</source>
          <target state="new">你可以通过扩展 <bpt id="p1">**</bpt>ConnectionStringSource<ept id="p1">**</ept> 类添加新的源</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在此处列出的示例中，将直接传递连接字符串。</source>
          <target state="new">在此处列出的示例中，将直接传递连接字符串。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>如何：创建队列</source>
          <target state="new">如何：创建队列</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>可通过 <bpt id="p1">**</bpt>ServiceBusRestProxy<ept id="p1">**</ept> 类对服务总线队列执行管理操作。<bpt id="p2">**</bpt>ServiceBusRestProxy<ept id="p2">**</ept> 对象是通过 <bpt id="p3">**</bpt>ServicesBuilder::createServiceBusService<ept id="p3">**</ept> 工厂方法与一个适当的连接字符串（该字符串封装了令牌权限以进行管理）构造的。</source>
          <target state="new">可通过 <bpt id="p1">**</bpt>ServiceBusRestProxy<ept id="p1">**</ept> 类对服务总线队列执行管理操作。<bpt id="p2">**</bpt>ServiceBusRestProxy<ept id="p2">**</ept> 对象是通过 <bpt id="p3">**</bpt>ServicesBuilder::createServiceBusService<ept id="p3">**</ept> 工厂方法与一个适当的连接字符串（该字符串封装了令牌权限以进行管理）构造的。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>下面的示例演示了如何实例化 <bpt id="p1">**</bpt>ServiceBusRestProxy<ept id="p1">**</ept> 并调用 <bpt id="p2">**</bpt>servicebusrestproxy-&gt;createqueue<ept id="p2">**</ept> 以创建 <ph id="ph1">`MySBNamespace`</ph> 服务命名空间中名为 <ph id="ph2">`myqueue`</ph> 的队列：</source>
          <target state="new">下面的示例演示了如何实例化 <bpt id="p1">**</bpt>ServiceBusRestProxy<ept id="p1">**</ept> 并调用 <bpt id="p2">**</bpt>servicebusrestproxy-&gt;createqueue<ept id="p2">**</ept> 以创建 <ph id="ph1">`MySBNamespace`</ph> 服务命名空间中名为 <ph id="ph2">`myqueue`</ph> 的队列：</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>你可以使用 <ph id="ph2">`ServiceBusRestProxy`</ph> 对象上的 <ph id="ph3">`listQueues`</ph> 方法检查队列是否在服务命名空间中已存在指定名称。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>你可以使用 <ph id="ph2">`ServiceBusRestProxy`</ph> 对象上的 <ph id="ph3">`listQueues`</ph> 方法检查队列是否在服务命名空间中已存在指定名称。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>如何：向队列发送消息</source>
          <target state="new">如何：向队列发送消息</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>若要将消息发送到服务总线队列，应用程序应调用 <bpt id="p1">**</bpt>servicebusrestproxy-&gt;sendqueuemessage<ept id="p1">**</ept> 方法。下面的代码演示了如何将消息发送到在 <ph id="ph1">`MySBNamespace`</ph> 服务命名空间先前创建的 <ph id="ph2">`myqueue`</ph> 队列。</source>
          <target state="new">若要将消息发送到服务总线队列，应用程序应调用 <bpt id="p1">**</bpt>servicebusrestproxy-&gt;sendqueuemessage<ept id="p1">**</ept> 方法。下面的代码演示了如何将消息发送到在 <ph id="ph1">`MySBNamespace`</ph> 服务命名空间先前创建的 <ph id="ph2">`myqueue`</ph> 队列。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>发送至服务总线队列（和接收自服务总线队列）的消息是 <bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> 类实例。<bpt id="p2">**</bpt>BrokeredMessage<ept id="p2">**</ept> 对象具有一组标准方法（例如 <bpt id="p3">**</bpt>getLabel<ept id="p3">**</ept>、<bpt id="p4">**</bpt>getTimeToLive<ept id="p4">**</ept>、<bpt id="p5">**</bpt>setLabel<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>setTimeToLive<ept id="p6">**</ept>）和用来保存自定义的特定于应用程序的属性和任意应用程序数据正文的属性。</source>
          <target state="new">发送至服务总线队列（和接收自服务总线队列）的消息是 <bpt id="p1">**</bpt>BrokeredMessage<ept id="p1">**</ept> 类实例。<bpt id="p2">**</bpt>BrokeredMessage<ept id="p2">**</ept> 对象具有一组标准方法（例如 <bpt id="p3">**</bpt>getLabel<ept id="p3">**</ept>、<bpt id="p4">**</bpt>getTimeToLive<ept id="p4">**</ept>、<bpt id="p5">**</bpt>setLabel<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>setTimeToLive<ept id="p6">**</ept>）和用来保存自定义的特定于应用程序的属性和任意应用程序数据正文的属性。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。队列大小的上限为 5 GB。</source>
          <target state="new">Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。队列大小的上限为 5 GB。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>如何从队列接收消息</source>
          <target state="new">如何从队列接收消息</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>从队列接收消息的最佳方法是使用 <bpt id="p1">**</bpt>servicebusrestproxy-&gt;receivequeuemessage<ept id="p1">**</ept> 方法。可以采用两种不同的模式接收消息：<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept>（默认）和 <bpt id="p3">**</bpt>PeekLock<ept id="p3">**</ept>。</source>
          <target state="new">从队列接收消息的最佳方法是使用 <bpt id="p1">**</bpt>servicebusrestproxy-&gt;receivequeuemessage<ept id="p1">**</ept> 方法。可以采用两种不同的模式接收消息：<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept>（默认）和 <bpt id="p3">**</bpt>PeekLock<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>当使用 <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> 模式时，接收是一项单次操作，即，当服务总线接收到队列中某条消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept> 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。</source>
          <target state="new">当使用 <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> 模式时，接收是一项单次操作，即，当服务总线接收到队列中某条消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept> 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式下，接收消息会变成一个两阶段操作，这将能够支持不能允许丢失消息的应用程序。当 Service Bus 收到请求时，它会找到要使用的下一个消息，将其锁定以防其他使用方接收它，然后将该消息返回给应用程序。在应用程序处理完消息（或以可靠方式存储消息以供将来处理）后，它通过将收到的消息传送到 <bpt id="p2">**</bpt>ServiceBusRestProxy-&gt;deleteMessage<ept id="p2">**</ept> 来完成接收过程的第二个阶段。当服务总线发现 <bpt id="p3">**</bpt>deleteMessage<ept id="p3">**</ept> 调用时，它会将消息标记为“正在使用”并将其从队列中删除。</source>
          <target state="new">在 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式下，接收消息会变成一个两阶段操作，这将能够支持不能允许丢失消息的应用程序。当 Service Bus 收到请求时，它会找到要使用的下一个消息，将其锁定以防其他使用方接收它，然后将该消息返回给应用程序。在应用程序处理完消息（或以可靠方式存储消息以供将来处理）后，它通过将收到的消息传送到 <bpt id="p2">**</bpt>ServiceBusRestProxy-&gt;deleteMessage<ept id="p2">**</ept> 来完成接收过程的第二个阶段。当服务总线发现 <bpt id="p3">**</bpt>deleteMessage<ept id="p3">**</ept> 调用时，它会将消息标记为“正在使用”并将其从队列中删除。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>以下示例演示了如何使用 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式（非默认模式）接收和处理消息。</source>
          <target state="new">以下示例演示了如何使用 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式（非默认模式）接收和处理消息。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>如何：处理应用程序崩溃和不可读消息</source>
          <target state="new">如何：处理应用程序崩溃和不可读消息</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id="p1">**</bpt>unlockMessage<ept id="p1">**</ept> 方法（而不是 <bpt id="p2">**</bpt>deleteMessage<ept id="p2">**</ept> 方法）。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。</source>
          <target state="new">Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id="p1">**</bpt>unlockMessage<ept id="p1">**</ept> 方法（而不是 <bpt id="p2">**</bpt>deleteMessage<ept id="p2">**</ept> 方法）。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线将自动解锁该消息并使它可再次被接收。</source>
          <target state="new">还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线将自动解锁该消息并使它可再次被接收。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>如果在处理消息之后但在发出 <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> 请求之前应用程序发生崩溃，该消息将在应用程序重新启动时重新传送给它。此情况通常称作<bpt id="p2">**</bpt>至少处理一次<ept id="p2">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案不允许重复处理，则建议向应用程序添加其他逻辑来处理重复消息传送。通常可使用消息的 <bpt id="p3">**</bpt>getMessageId<ept id="p3">**</ept> 方法实现此操作，这在多个传送尝试中保持不变。</source>
          <target state="new">如果在处理消息之后但在发出 <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> 请求之前应用程序发生崩溃，该消息将在应用程序重新启动时重新传送给它。此情况通常称作<bpt id="p2">**</bpt>至少处理一次<ept id="p2">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案不允许重复处理，则建议向应用程序添加其他逻辑来处理重复消息传送。通常可使用消息的 <bpt id="p3">**</bpt>getMessageId<ept id="p3">**</ept> 方法实现此操作，这在多个传送尝试中保持不变。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>现在，你已了解服务总线队列的基础知识，请参阅<bpt id="p1">[</bpt>队列、主题和订阅<ept id="p1">][]</ept>以获取更多信息。</source>
          <target state="new">现在，你已了解服务总线队列的基础知识，请参阅<bpt id="p1">[</bpt>队列、主题和订阅<ept id="p1">][]</ept>以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅 <bpt id="p1">[</bpt>PHP 开发人员中心<ept id="p1">](/develop/php/)</ept>。</source>
          <target state="new">有关详细信息，请参阅 <bpt id="p1">[</bpt>PHP 开发人员中心<ept id="p1">](/develop/php/)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>