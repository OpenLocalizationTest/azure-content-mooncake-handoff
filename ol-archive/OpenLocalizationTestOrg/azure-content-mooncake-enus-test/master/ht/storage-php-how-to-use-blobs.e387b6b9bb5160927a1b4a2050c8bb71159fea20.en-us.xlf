<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">55aff2f293e5f7761b466bfe705b12838a63aa88</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何通过 PHP 使用 Blob 存储 | Azure</source>
          <target state="new">如何通过 PHP 使用 Blob 存储 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用 Azure Blob 服务上载、列出、下载和删除 Blob。通过 PHP 编写代码示例。</source>
          <target state="new">了解如何使用 Azure Blob 服务上载、列出、下载和删除 Blob。通过 PHP 编写代码示例。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何通过 PHP 使用 Blob 存储</source>
          <target state="new">如何通过 PHP 使用 Blob 存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本指南将演示如何使用 Azure Blob 服务执行常见方案。示例是用 PHP 编写的并使用了 <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">][download]</ept>。涉及的任务包括<bpt id="p2">**</bpt>上传<ept id="p2">**</ept>、<bpt id="p3">**</bpt>列出<ept id="p3">**</ept>、<bpt id="p4">**</bpt>下载<ept id="p4">**</ept>和<bpt id="p5">**</bpt>删除<ept id="p5">**</ept> Blob。有关 Blob 的详细信息，请参阅<bpt id="p6">[</bpt>后续步骤<ept id="p6">](#next-steps)</ept>部分。</source>
          <target state="new">本指南将演示如何使用 Azure Blob 服务执行常见方案。示例是用 PHP 编写的并使用了 <bpt id="p1">[</bpt>Azure SDK for PHP<ept id="p1">][download]</ept>。涉及的任务包括<bpt id="p2">**</bpt>上传<ept id="p2">**</ept>、<bpt id="p3">**</bpt>列出<ept id="p3">**</ept>、<bpt id="p4">**</bpt>下载<ept id="p4">**</ept>和<bpt id="p5">**</bpt>删除<ept id="p5">**</ept> Blob。有关 Blob 的详细信息，请参阅<bpt id="p6">[</bpt>后续步骤<ept id="p6">](#next-steps)</ept>部分。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>创建 PHP 应用程序</source>
          <target state="new">创建 PHP 应用程序</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用 Azure SDK for PHP 中的类。你可以使用任何开发工具（包括“记事本”）创建应用程序。</source>
          <target state="new">创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用 Azure SDK for PHP 中的类。你可以使用任何开发工具（包括“记事本”）创建应用程序。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在本指南中，你将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。</source>
          <target state="new">在本指南中，你将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="GetClientLibrary"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>获取 Azure 客户端库</source>
          <target state="new"><ph id="ph1">&lt;a id="GetClientLibrary"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>获取 Azure 客户端库</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="ConfigureStorage"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置你的应用程序以访问 Blob 服务</source>
          <target state="new"><ph id="ph1">&lt;a id="ConfigureStorage"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置你的应用程序以访问 Blob 服务</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>若要使用 Azure Blob 服务 API，你需要：</source>
          <target state="new">若要使用 Azure Blob 服务 API，你需要：</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">[</bpt>require_once<ept id="p1">][require_once]</ept> 语句引用 autoloader 文件，并</source>
          <target state="new">使用 <bpt id="p1">[</bpt>require_once<ept id="p1">][require_once]</ept> 语句引用 autoloader 文件，并</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>引用可使用的所有类。</source>
          <target state="new">引用可使用的所有类。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>下面的示例演示了如何包括 autoloader 文件并引用 <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> 类。</source>
          <target state="new">下面的示例演示了如何包括 autoloader 文件并引用 <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> 类。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 本示例（以及本文中的其他示例）假定您已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果您已手动安装这些库或将其作为 PEAR 包安装，则需要引用 <ph id="ph2">`WindowsAzure.php`</ph> autoloader 文件。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 本示例（以及本文中的其他示例）假定您已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果您已手动安装这些库或将其作为 PEAR 包安装，则需要引用 <ph id="ph2">`WindowsAzure.php`</ph> autoloader 文件。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在下面的示例中，<ph id="ph1">`require_once`</ph> 语句将始终显示，但只会引用执行该示例所需的类。</source>
          <target state="new">在下面的示例中，<ph id="ph1">`require_once`</ph> 语句将始终显示，但只会引用执行该示例所需的类。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="ConnectionString"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>设置 Azure 存储连接</source>
          <target state="new"><ph id="ph1">&lt;a id="ConnectionString"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>设置 Azure 存储连接</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>若要实例化 Azure Blob 服务客户端，你必须首先具有有效的连接字符串。Blob 服务连接字符串的格式为：</source>
          <target state="new">若要实例化 Azure Blob 服务客户端，你必须首先具有有效的连接字符串。Blob 服务连接字符串的格式为：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>对于访问实时服务：</source>
          <target state="new">对于访问实时服务：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>访问存储模拟器：</source>
          <target state="new">访问存储模拟器：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>若要创建任何 Azure 服务客户端，你将需要使用 <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> 类。你可以：</source>
          <target state="new">若要创建任何 Azure 服务客户端，你将需要使用 <bpt id="p1">**</bpt>ServicesBuilder<ept id="p1">**</ept> 类。你可以：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>将连接字符串直接传递给此类或</source>
          <target state="new">将连接字符串直接传递给此类或</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>CloudConfigurationManager (CCM)<ept id="p1">**</ept> 检查多个外部源以获取连接字符串：</source>
          <target state="new">使用 <bpt id="p1">**</bpt>CloudConfigurationManager (CCM)<ept id="p1">**</ept> 检查多个外部源以获取连接字符串：</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>默认情况下，它附带了对一个外部源的支持 - 环境变量。</source>
          <target state="new">默认情况下，它附带了对一个外部源的支持 - 环境变量。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>您可通过扩展 <bpt id="p1">**</bpt>ConnectionStringSource<ept id="p1">**</ept> 类来添加新源。</source>
          <target state="new">您可通过扩展 <bpt id="p1">**</bpt>ConnectionStringSource<ept id="p1">**</ept> 类来添加新源。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>在此处列出的示例中，将直接传递连接字符串。</source>
          <target state="new">在此处列出的示例中，将直接传递连接字符串。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="CreateContainer"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：创建容器</source>
          <target state="new"><ph id="ph1">&lt;a id="CreateContainer"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：创建容器</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>利用 <bpt id="p1">**</bpt>BlobRestProxy<ept id="p1">**</ept> 对象，您可以使用 <bpt id="p2">**</bpt>createContainer<ept id="p2">**</ept> 方法创建 Blob 容器。创建容器时，可以在该容器上设置选项，但此操作不是必需的。（下面的示例演示了如何设置容器访问控制列表 (ACL) 和容器元数据。）</source>
          <target state="new">利用 <bpt id="p1">**</bpt>BlobRestProxy<ept id="p1">**</ept> 对象，您可以使用 <bpt id="p2">**</bpt>createContainer<ept id="p2">**</ept> 方法创建 Blob 容器。创建容器时，可以在该容器上设置选项，但此操作不是必需的。（下面的示例演示了如何设置容器访问控制列表 (ACL) 和容器元数据。）</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>调用 setPublicAccess(PublicAccessType::CONTAINER_AND_BLOBS) 将使容器和 Blob 数据可通过匿名请求访问。通过调用 setPublicAccess(PublicAccessType::BLOBS_ONLY)，仅使 Blob 数据可通过匿名请求访问。有关容器 ACL 的详细信息，请参阅 <bpt id="p1">[</bpt>设置容器 ACL (REST API)<ept id="p1">][container-acl]</ept>。</source>
          <target state="new">调用 setPublicAccess(PublicAccessType::CONTAINER_AND_BLOBS) 将使容器和 Blob 数据可通过匿名请求访问。通过调用 setPublicAccess(PublicAccessType::BLOBS_ONLY)，仅使 Blob 数据可通过匿名请求访问。有关容器 ACL 的详细信息，请参阅 <bpt id="p1">[</bpt>设置容器 ACL (REST API)<ept id="p1">][container-acl]</ept>。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>有关 Blob 服务错误代码的详细信息，请参阅 <bpt id="p1">[</bpt>Blob 服务错误代码<ept id="p1">][error-codes]</ept>。</source>
          <target state="new">有关 Blob 服务错误代码的详细信息，请参阅 <bpt id="p1">[</bpt>Blob 服务错误代码<ept id="p1">][error-codes]</ept>。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="UploadBlob"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：将 Blob 上载到容器</source>
          <target state="new"><ph id="ph1">&lt;a id="UploadBlob"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：将 Blob 上载到容器</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>若要将文件作为 Blob 上载，请使用 <bpt id="p1">**</bpt>BlobRestProxy-&gt;createBlockBlob<ept id="p1">**</ept> 方法。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的代码示例假定已创建了容器，并使用 <bpt id="p2">[</bpt>fopen<ept id="p2">][fopen]</ept> 将文件作为流打开。</source>
          <target state="new">若要将文件作为 Blob 上载，请使用 <bpt id="p1">**</bpt>BlobRestProxy-&gt;createBlockBlob<ept id="p1">**</ept> 方法。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的代码示例假定已创建了容器，并使用 <bpt id="p2">[</bpt>fopen<ept id="p2">][fopen]</ept> 将文件作为流打开。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>请注意，上面的示例将 Blob 作为流上载。但是，也可使用 <bpt id="p1">[</bpt>file_get_contents<ept id="p1">][file_get_contents]</ept> 函数将 Blob 作为字符串上载。若要使用前面的示例执行此操作，请将 <ph id="ph1">`$content = fopen("c:\myfile.txt", "r");`</ph> 更改为 <ph id="ph2">`$content = file_get_contents("c:\myfile.txt");`</ph>。</source>
          <target state="new">请注意，上面的示例将 Blob 作为流上载。但是，也可使用 <bpt id="p1">[</bpt>file_get_contents<ept id="p1">][file_get_contents]</ept> 函数将 Blob 作为字符串上载。若要使用前面的示例执行此操作，请将 <ph id="ph1">`$content = fopen("c:\myfile.txt", "r");`</ph> 更改为 <ph id="ph2">`$content = file_get_contents("c:\myfile.txt");`</ph>。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="ListBlobs"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：列出容器中的 Blob</source>
          <target state="new"><ph id="ph1">&lt;a id="ListBlobs"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：列出容器中的 Blob</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>若要列出容器中的 Blob，请将 <bpt id="p1">**</bpt>BlobRestProxy-&gt;listBlobs<ept id="p1">**</ept> 方法与 <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> 循环一起使用来循环访问结果。以下代码将容器中的每个 Blob 的名称作为容器中的输出并将其 URI 显示到浏览器。</source>
          <target state="new">若要列出容器中的 Blob，请将 <bpt id="p1">**</bpt>BlobRestProxy-&gt;listBlobs<ept id="p1">**</ept> 方法与 <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> 循环一起使用来循环访问结果。以下代码将容器中的每个 Blob 的名称作为容器中的输出并将其 URI 显示到浏览器。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="DownloadBlob"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：下载 Blob</source>
          <target state="new"><ph id="ph1">&lt;a id="DownloadBlob"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：下载 Blob</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>若要下载 Blob，请调用 <bpt id="p1">**</bpt>BlobRestProxy-&gt;getBlob<ept id="p1">**</ept> 方法，然后对生成的 <bpt id="p2">**</bpt>GetBlobResult<ept id="p2">**</ept> 对象调用 <bpt id="p3">**</bpt>getContentStream<ept id="p3">**</ept> 方法。</source>
          <target state="new">若要下载 Blob，请调用 <bpt id="p1">**</bpt>BlobRestProxy-&gt;getBlob<ept id="p1">**</ept> 方法，然后对生成的 <bpt id="p2">**</bpt>GetBlobResult<ept id="p2">**</ept> 对象调用 <bpt id="p3">**</bpt>getContentStream<ept id="p3">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>请注意，上面的示例将 Blob 作为流资源获取（默认行为）。但是，你可以使用 <bpt id="p1">[</bpt>stream_get_contents<ept id="p1">][stream-get-contents]</ept> 函数将返回的流转换为字符串。</source>
          <target state="new">请注意，上面的示例将 Blob 作为流资源获取（默认行为）。但是，你可以使用 <bpt id="p1">[</bpt>stream_get_contents<ept id="p1">][stream-get-contents]</ept> 函数将返回的流转换为字符串。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="DeleteBlob"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：删除 Blob</source>
          <target state="new"><ph id="ph1">&lt;a id="DeleteBlob"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：删除 Blob</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>若要删除 Blob，请将容器名称和 Blob 名称传递到 <bpt id="p1">**</bpt>BlobRestProxy-&gt;deleteBlob<ept id="p1">**</ept>。</source>
          <target state="new">若要删除 Blob，请将容器名称和 Blob 名称传递到 <bpt id="p1">**</bpt>BlobRestProxy-&gt;deleteBlob<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="DeleteContainer"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：删除 Blob 容器</source>
          <target state="new"><ph id="ph1">&lt;a id="DeleteContainer"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如何：删除 Blob 容器</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>最后，若要删除 Blob 容器，请将容器名称传递到 <bpt id="p1">**</bpt>BlobRestProxy-&gt;deleteContainer<ept id="p1">**</ept>。</source>
          <target state="new">最后，若要删除 Blob 容器，请将容器名称传递到 <bpt id="p1">**</bpt>BlobRestProxy-&gt;deleteContainer<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="next-steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</source>
          <target state="new"><ph id="ph1">&lt;a id="next-steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>现在，您已了解了 Azure Blob 服务的基础知识，单击下面的链接可了解有关更复杂的存储任务的详细信息。</source>
          <target state="new">现在，您已了解了 Azure Blob 服务的基础知识，单击下面的链接可了解有关更复杂的存储任务的详细信息。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>访问 <bpt id="p1">[</bpt>Azure 存储团队博客<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/)</ept></source>
          <target state="new">访问 <bpt id="p1">[</bpt>Azure 存储团队博客<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/)</ept></target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>参阅位于以下位置的 PHP 块 Blob 示例：<bpt id="p1">&lt;</bpt><ept id="p1">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/BlockBlobExample.php&gt;</ept>。</source>
          <target state="new">参阅位于以下位置的 PHP 块 Blob 示例：<bpt id="p1">&lt;</bpt><ept id="p1">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/BlockBlobExample.php&gt;</ept>。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>参阅位于以下位置的 PHP 页 Blob 示例：<bpt id="p1">&lt;</bpt><ept id="p1">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/PageBlobExample.php&gt;</ept></source>
          <target state="new">参阅位于以下位置的 PHP 页 Blob 示例：<bpt id="p1">&lt;</bpt><ept id="p1">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/PageBlobExample.php&gt;</ept></target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>使用 AzCopy 命令行实用程序传输数据</source>
          <target state="new">使用 AzCopy 命令行实用程序传输数据</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>有关详细信息，另请参阅 <bpt id="p1">[</bpt>PHP 开发中心<ept id="p1">](/develop/php/)</ept>。</source>
          <target state="new">有关详细信息，另请参阅 <bpt id="p1">[</bpt>PHP 开发中心<ept id="p1">](/develop/php/)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>