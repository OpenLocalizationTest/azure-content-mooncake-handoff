<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9119073d1eb22388344dccb538d90fcf788f3379</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用 Node.js 模块</source>
          <target state="new">使用 Node.js 模块</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在使用 Azure 网站或云服务的同时使用 Node.js 模块。</source>
          <target state="new">了解如何在使用 Azure 网站或云服务的同时使用 Node.js 模块。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>将 Node.js 模块与 Azure 应用程序一起使用</source>
          <target state="new">将 Node.js 模块与 Azure 应用程序一起使用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本文档提供有关将 Node.js 模块与托管在 Azure 中的应用程序一起使用的指南。其中提供有关确保你的应用程序使用特定版本的模块，以及对 Azure 使用本机模块的指南。</source>
          <target state="new">本文档提供有关将 Node.js 模块与托管在 Azure 中的应用程序一起使用的指南。其中提供有关确保你的应用程序使用特定版本的模块，以及对 Azure 使用本机模块的指南。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>如果您已了解如何使用 Node.js 模块、<bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件，可参考本文中所讨论内容的以下快速摘要：</source>
          <target state="new">如果您已了解如何使用 Node.js 模块、<bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件，可参考本文中所讨论内容的以下快速摘要：</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure 网站了解 <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件，可基于这些文件中的条目安装模块。</source>
          <target state="new">Azure 网站了解 <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件，可基于这些文件中的条目安装模块。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure 云服务希望所有模块都安装在开发环境中，并将 <bpt id="p1">**</bpt>node\_modules<ept id="p1">**</ept> 目录包含为部署包的一部分。</source>
          <target state="new">Azure 云服务希望所有模块都安装在开发环境中，并将 <bpt id="p1">**</bpt>node\_modules<ept id="p1">**</ept> 目录包含为部署包的一部分。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>本文不讨论 Azure 虚拟机，因为 VM 中的开发体验将取决于由虚拟机托管的操作系统。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>本文不讨论 Azure 虚拟机，因为 VM 中的开发体验将取决于由虚拟机托管的操作系统。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>可以为使用 <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件在 Azure 上安装模块提供相应支持，但这需要自定义云服务项目使用的默认脚本。有关如何实现此目的的示例，请参阅<bpt id="p3">[</bpt>运行 npm 安装以避免部署 Node 模块的 Azure 启动任务<ept id="p3">](http://nodeblog.chinacloudsites.cn/startup-task-to-run-npm-in-azure)</ept></source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>可以为使用 <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件在 Azure 上安装模块提供相应支持，但这需要自定义云服务项目使用的默认脚本。有关如何实现此目的的示例，请参阅<bpt id="p3">[</bpt>运行 npm 安装以避免部署 Node 模块的 Azure 启动任务<ept id="p3">](http://nodeblog.chinacloudsites.cn/startup-task-to-run-npm-in-azure)</ept></target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Node.js 模块</source>
          <target state="new">Node.js 模块</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>模块是可加载的 JavaScript 包，可为你的应用程序提供特定功能。通常使用 <bpt id="p1">**</bpt>npm<ept id="p1">**</ept> 命令行工具安装模块，但一些模块（如 http 模块）是作为核心 Node.js 包的一部分提供的。</source>
          <target state="new">模块是可加载的 JavaScript 包，可为你的应用程序提供特定功能。通常使用 <bpt id="p1">**</bpt>npm<ept id="p1">**</ept> 命令行工具安装模块，但一些模块（如 http 模块）是作为核心 Node.js 包的一部分提供的。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>在安装模块后，这些模块存储在您的应用程序目录结构根目录下的 <bpt id="p1">**</bpt>node\_modules<ept id="p1">**</ept> 目录中。<bpt id="p2">**</bpt>node\_modules<ept id="p2">**</ept> 目录中的每个模块都保留自己的 <bpt id="p3">**</bpt>node\_modules<ept id="p3">**</ept> 目录，其中包含它依赖的所有模块，依赖项链上的每个模块均是如此。这使得所安装的每个模块都对它所依赖的模块具有自己的版本要求，但这样会生成很大的目录结构。</source>
          <target state="new">在安装模块后，这些模块存储在您的应用程序目录结构根目录下的 <bpt id="p1">**</bpt>node\_modules<ept id="p1">**</ept> 目录中。<bpt id="p2">**</bpt>node\_modules<ept id="p2">**</ept> 目录中的每个模块都保留自己的 <bpt id="p3">**</bpt>node\_modules<ept id="p3">**</ept> 目录，其中包含它依赖的所有模块，依赖项链上的每个模块均是如此。这使得所安装的每个模块都对它所依赖的模块具有自己的版本要求，但这样会生成很大的目录结构。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>与使用 <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件相比，在您的应用程序中部署 <bpt id="p3">**</bpt>node\_modules<ept id="p3">**</ept> 目录会增加部署的大小；但是，它确实可以保证在生产中使用的模块版本与在开发中使用的模块版本是相同的。</source>
          <target state="new">与使用 <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件相比，在您的应用程序中部署 <bpt id="p3">**</bpt>node\_modules<ept id="p3">**</ept> 目录会增加部署的大小；但是，它确实可以保证在生产中使用的模块版本与在开发中使用的模块版本是相同的。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>本机模块</source>
          <target state="new">本机模块</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>虽然多数模块都只是纯文本 JavaScript 文件，但一些模块是特定于平台的二进制映像。这些模块通常是在安装时使用 Python 和 node-gyp 编译的。由于 Azure 云服务依赖作为应用程序一部分部署的 <bpt id="p1">**</bpt>node\_modules<ept id="p1">**</ept> 文件夹，因此只要作为已安装模块一部分包含的任何本机模块是在 Windows 开发系统中安装和编译的，那么该模块都应在云服务中运行。</source>
          <target state="new">虽然多数模块都只是纯文本 JavaScript 文件，但一些模块是特定于平台的二进制映像。这些模块通常是在安装时使用 Python 和 node-gyp 编译的。由于 Azure 云服务依赖作为应用程序一部分部署的 <bpt id="p1">**</bpt>node\_modules<ept id="p1">**</ept> 文件夹，因此只要作为已安装模块一部分包含的任何本机模块是在 Windows 开发系统中安装和编译的，那么该模块都应在云服务中运行。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Azure 网站不支持所有本机模块，并且在编译那要求具有非常特定的系统组建的模块时可能会失败。一些常用模块（如 MongoDB）需要的本机依赖项是可选的，如果没有这些依赖项可勉强正常工作。对于当今几乎所有的可用本机模块而言，有两种成功的解决方法：</source>
          <target state="new">Azure 网站不支持所有本机模块，并且在编译那要求具有非常特定的系统组建的模块时可能会失败。一些常用模块（如 MongoDB）需要的本机依赖项是可选的，如果没有这些依赖项可勉强正常工作。对于当今几乎所有的可用本机模块而言，有两种成功的解决方法：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>在安装了所有系统必备组件的 Windows 计算机运行 <bpt id="p1">**</bpt>npm install<ept id="p1">**</ept> 。然后，将创建的 <bpt id="p2">**</bpt>node\_modules<ept id="p2">**</ept> 文件夹作为 Azure 网站应用程序的一部分进行部署。</source>
          <target state="new">在安装了所有系统必备组件的 Windows 计算机运行 <bpt id="p1">**</bpt>npm install<ept id="p1">**</ept> 。然后，将创建的 <bpt id="p2">**</bpt>node\_modules<ept id="p2">**</ept> 文件夹作为 Azure 网站应用程序的一部分进行部署。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>可以将 Azure 网站配置为在部署期间执行自定义 bash 或 shell 脚本，从而使您能够执行自定义命令和精确地配置运行 <bpt id="p1">**</bpt>npm install<ept id="p1">**</ept> 的方式。</source>
          <target state="new">可以将 Azure 网站配置为在部署期间执行自定义 bash 或 shell 脚本，从而使您能够执行自定义命令和精确地配置运行 <bpt id="p1">**</bpt>npm install<ept id="p1">**</ept> 的方式。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>使用 package.json 文件</source>
          <target state="new">使用 package.json 文件</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>可使用 <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 文件来指定您的应用程序所需的顶级依赖项，以便托管平台能够安装这些依赖项，而不是要求您在部署中包含 <bpt id="p2">**</bpt>node\_packages<ept id="p2">**</ept> 文件夹。部署应用程序后，可使用 <bpt id="p3">**</bpt>npm install<ept id="p3">**</ept> 命令解析 <bpt id="p4">**</bpt>package.json<ept id="p4">**</ept> 文件并安装列出的所有依赖项。</source>
          <target state="new">可使用 <bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 文件来指定您的应用程序所需的顶级依赖项，以便托管平台能够安装这些依赖项，而不是要求您在部署中包含 <bpt id="p2">**</bpt>node\_packages<ept id="p2">**</ept> 文件夹。部署应用程序后，可使用 <bpt id="p3">**</bpt>npm install<ept id="p3">**</ept> 命令解析 <bpt id="p4">**</bpt>package.json<ept id="p4">**</ept> 文件并安装列出的所有依赖项。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>在开发期间，您可以在安装模块时使用 <bpt id="p1">**</bpt>--save<ept id="p1">**</ept>、<bpt id="p2">**</bpt>--save-dev<ept id="p2">**</ept> 或 <bpt id="p3">**</bpt>--save-optional<ept id="p3">**</ept> 参数，以便自动将模块条目添加到 <bpt id="p4">**</bpt>package.json<ept id="p4">**</ept> 文件中。有关详细信息，请参阅 <bpt id="p5">[</bpt>npm-install<ept id="p5">](https://npmjs.org/doc/install.html)</ept>。</source>
          <target state="new">在开发期间，您可以在安装模块时使用 <bpt id="p1">**</bpt>--save<ept id="p1">**</ept>、<bpt id="p2">**</bpt>--save-dev<ept id="p2">**</ept> 或 <bpt id="p3">**</bpt>--save-optional<ept id="p3">**</ept> 参数，以便自动将模块条目添加到 <bpt id="p4">**</bpt>package.json<ept id="p4">**</ept> 文件中。有关详细信息，请参阅 <bpt id="p5">[</bpt>npm-install<ept id="p5">](https://npmjs.org/doc/install.html)</ept>。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 文件的一个潜在问题是它仅指定顶级依赖项的版本。安装的每个模块不一定会指定它所依赖的模块的版本，所以你最终使用的依赖项链可能与开发过程中使用的不同。</source>
          <target state="new"><bpt id="p1">**</bpt>package.json<ept id="p1">**</ept> 文件的一个潜在问题是它仅指定顶级依赖项的版本。安装的每个模块不一定会指定它所依赖的模块的版本，所以你最终使用的依赖项链可能与开发过程中使用的不同。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>部署到 Azure 网站时，如果 <ph id="ph1">&lt;b&gt;</ph>package.json<ph id="ph2">&lt;/b&gt;</ph> 文件引用本机模块，那么在使用 Git 发布应用程序时您会看到如下错误：</source>
          <target state="new">部署到 Azure 网站时，如果 <ph id="ph1">&lt;b&gt;</ph>package.json<ph id="ph2">&lt;/b&gt;</ph> 文件引用本机模块，那么在使用 Git 发布应用程序时您会看到如下错误：</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>使用 npm-shrinkwrap.json 文件</source>
          <target state="new">使用 npm-shrinkwrap.json 文件</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>npm-shrinkwrap.json<ept id="p1">**</ept> 文件用于尝试消除 <bpt id="p2">**</bpt>package.json<ept id="p2">**</ept> 文件的模块版本控制限制。虽然 <bpt id="p3">**</bpt>package.json<ept id="p3">**</ept> 文件仅包含顶级模块的版本，但 <bpt id="p4">**</bpt>npm-shrinkwrap.json<ept id="p4">**</ept> 文件包含所有模块依赖项链的版本要求。</source>
          <target state="new"><bpt id="p1">**</bpt>npm-shrinkwrap.json<ept id="p1">**</ept> 文件用于尝试消除 <bpt id="p2">**</bpt>package.json<ept id="p2">**</ept> 文件的模块版本控制限制。虽然 <bpt id="p3">**</bpt>package.json<ept id="p3">**</ept> 文件仅包含顶级模块的版本，但 <bpt id="p4">**</bpt>npm-shrinkwrap.json<ept id="p4">**</ept> 文件包含所有模块依赖项链的版本要求。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>您的应用程序准备好生产后，便可锁定版本要求，并使用 <bpt id="p1">**</bpt>npm shrinkwrap<ept id="p1">**</ept> 命令创建 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件。这将使用当前安装在 <bpt id="p3">**</bpt>node\_modules<ept id="p3">**</ept> 文件夹中的版本，并将这些信息记录到 <bpt id="p4">**</bpt>npm-shrinkwrap.json<ept id="p4">**</ept> 文件。将应用程序部署到托管环境后，可使用 <bpt id="p5">**</bpt>npm install<ept id="p5">**</ept> 命令来解析 <bpt id="p6">**</bpt>npm-shrinkwrap.json<ept id="p6">**</ept> 文件并安装列出的所有依赖项。有关详细信息，请参阅 <bpt id="p7">[</bpt>npm-install<ept id="p7">](https://npmjs.org/doc/install.html)</ept>。</source>
          <target state="new">您的应用程序准备好生产后，便可锁定版本要求，并使用 <bpt id="p1">**</bpt>npm shrinkwrap<ept id="p1">**</ept> 命令创建 <bpt id="p2">**</bpt>npm-shrinkwrap.json<ept id="p2">**</ept> 文件。这将使用当前安装在 <bpt id="p3">**</bpt>node\_modules<ept id="p3">**</ept> 文件夹中的版本，并将这些信息记录到 <bpt id="p4">**</bpt>npm-shrinkwrap.json<ept id="p4">**</ept> 文件。将应用程序部署到托管环境后，可使用 <bpt id="p5">**</bpt>npm install<ept id="p5">**</ept> 命令来解析 <bpt id="p6">**</bpt>npm-shrinkwrap.json<ept id="p6">**</ept> 文件并安装列出的所有依赖项。有关详细信息，请参阅 <bpt id="p7">[</bpt>npm-install<ept id="p7">](https://npmjs.org/doc/install.html)</ept>。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>部署到 Azure 网站时，如果 <ph id="ph1">&lt;b&gt;</ph>npm-shrinkwrap.json<ph id="ph2">&lt;/b&gt;</ph> 文件引用本机模块，那么在使用 Git 发布应用程序时，您会看到如下错误：</source>
          <target state="new">部署到 Azure 网站时，如果 <ph id="ph1">&lt;b&gt;</ph>npm-shrinkwrap.json<ph id="ph2">&lt;/b&gt;</ph> 文件引用本机模块，那么在使用 Git 发布应用程序时，您会看到如下错误：</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>了解如何将 Node.js 模块与 Azure 一起使用后，请学习如何<bpt id="p1">[</bpt><ept id="p1">指定 Node.js 版本]</ept>、<bpt id="p2">[</bpt><ept id="p2">生成和部署 Node.js 网站]</ept>，以及<bpt id="p3">[</bpt><ept id="p3">如何使用适用于 Mac 和 Linux 的 Azure 命令行界面]</ept>。</source>
          <target state="new">了解如何将 Node.js 模块与 Azure 一起使用后，请学习如何<bpt id="p1">[</bpt><ept id="p1">指定 Node.js 版本]</ept>、<bpt id="p2">[</bpt><ept id="p2">生成和部署 Node.js 网站]</ept>，以及<bpt id="p3">[</bpt><ept id="p3">如何使用适用于 Mac 和 Linux 的 Azure 命令行界面]</ept>。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅 <bpt id="p1">[</bpt>Node.js 开发人员中心<ept id="p1">](/develop/nodejs/)</ept>。</source>
          <target state="new">有关详细信息，请参阅 <bpt id="p1">[</bpt>Node.js 开发人员中心<ept id="p1">](/develop/nodejs/)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>