<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26af5012a570e0d3f644138a4fc96b7d63d9c511</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>创建 SAS 并将 SAS 用于 Blob 存储 | Azure</source>
          <target state="new">创建 SAS 并将 SAS 用于 Blob 存储 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>本教程演示如何创建共享访问签名以用于 Blob 存储，以及如何从客户端应用程序使用这些签名。</source>
          <target state="new">本教程演示如何创建共享访问签名以用于 Blob 存储，以及如何从客户端应用程序使用这些签名。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>共享访问签名，第 2 部分：创建 SAS 并将 SAS 用于 Blob 存储</source>
          <target state="new">共享访问签名，第 2 部分：创建 SAS 并将 SAS 用于 Blob 存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本教程的<bpt id="p1">[</bpt>第 1 部分<ept id="p1">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>介绍了共享访问签名 (SAS) 并且说明了有关使用共享访问签名的最佳实践。第 2 部分将演示如何生成共享访问签名以及如何将共享访问签名用于 Azure Blob 服务。示例是用 C# 编写的并使用了 Azure .NET 存储客户端库。涉及的任务包括使用共享访问签名的以下方面：</source>
          <target state="new">本教程的<bpt id="p1">[</bpt>第 1 部分<ept id="p1">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>介绍了共享访问签名 (SAS) 并且说明了有关使用共享访问签名的最佳实践。第 2 部分将演示如何生成共享访问签名以及如何将共享访问签名用于 Azure Blob 服务。示例是用 C# 编写的并使用了 Azure .NET 存储客户端库。涉及的任务包括使用共享访问签名的以下方面：</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>在容器上生成共享访问签名</source>
          <target state="new">在容器上生成共享访问签名</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>在 Blob 上生成共享访问签名</source>
          <target state="new">在 Blob 上生成共享访问签名</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>创建用于管理容器资源上的签名的存储访问策略</source>
          <target state="new">创建用于管理容器资源上的签名的存储访问策略</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>从客户端应用程序测试共享访问签名</source>
          <target state="new">从客户端应用程序测试共享访问签名</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>关于本教程</source>
          <target state="new">关于本教程</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>在本教程中，我们将通过创建两个控制台应用程序重点说明如何为容器和 Blob 创建共享访问签名。第一个控制台应用程序将在一个容器和 Blob 上生成共享访问签名。该应用程序知道存储帐户密钥。第二个控制台应用程序（将充当客户端应用程序）使用第一个应用程序创建的共享访问签名访问容器和 Blob 资源。该应用程序仅使用共享访问签名验证其对容器和 Blob 资源的访问 – 它不知道帐户密钥。</source>
          <target state="new">在本教程中，我们将通过创建两个控制台应用程序重点说明如何为容器和 Blob 创建共享访问签名。第一个控制台应用程序将在一个容器和 Blob 上生成共享访问签名。该应用程序知道存储帐户密钥。第二个控制台应用程序（将充当客户端应用程序）使用第一个应用程序创建的共享访问签名访问容器和 Blob 资源。该应用程序仅使用共享访问签名验证其对容器和 Blob 资源的访问 – 它不知道帐户密钥。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>第 1 部分：创建控制台应用程序以便生成共享访问签名</source>
          <target state="new">第 1 部分：创建控制台应用程序以便生成共享访问签名</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>首先，确保你安装了 Azure .NET 存储客户端库。你可以安装包含该客户端库的最新程序集的 <bpt id="p1">[</bpt>NuGet 程序包<ept id="p1">]</ept><bpt id="p2">(http://nuget.org/packages/WindowsAzure.Storage/ "</bpt>NuGet 包<ept id="p2">")</ept>；这是确保你具有最新修补程序的建议方法。你还可以通过下载包含该客户端库的最新 <bpt id="p3">[</bpt>Azure SDK for .NET<ept id="p3">](/downloads/)</ept> 版本来下载该客户端库。</source>
          <target state="new">首先，确保你安装了 Azure .NET 存储客户端库。你可以安装包含该客户端库的最新程序集的 <bpt id="p1">[</bpt>NuGet 程序包<ept id="p1">]</ept><bpt id="p2">(http://nuget.org/packages/WindowsAzure.Storage/ "</bpt>NuGet 包<ept id="p2">")</ept>；这是确保你具有最新修补程序的建议方法。你还可以通过下载包含该客户端库的最新 <bpt id="p3">[</bpt>Azure SDK for .NET<ept id="p3">](/downloads/)</ept> 版本来下载该客户端库。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 <bpt id="p1">**</bpt>GenerateSharedAccessSignatures<ept id="p1">**</ept>。使用以下方法之一添加对 <bpt id="p2">**</bpt>Microsoft.WindowsAzure.Configuration.dll<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Microsoft.WindowsAzure.Storage.dll<ept id="p3">**</ept> 的引用：</source>
          <target state="new">在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 <bpt id="p1">**</bpt>GenerateSharedAccessSignatures<ept id="p1">**</ept>。使用以下方法之一添加对 <bpt id="p2">**</bpt>Microsoft.WindowsAzure.Configuration.dll<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Microsoft.WindowsAzure.Storage.dll<ept id="p3">**</ept> 的引用：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>如果你想要安装 NuGet 程序包，请首先安装 <bpt id="p1">[</bpt>NuGet Package Manager Extension for Visual Studio<ept id="p1">](http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c)</ept>。在 Visual Studio 中，选择“项目”|“管理 NuGet 包”，在线搜索“Azure 存储空间”，然后按照说明进行安装。</source>
          <target state="new">如果你想要安装 NuGet 程序包，请首先安装 <bpt id="p1">[</bpt>NuGet Package Manager Extension for Visual Studio<ept id="p1">](http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c)</ept>。在 Visual Studio 中，选择“项目”|“管理 NuGet 包”，在线搜索“Azure 存储空间”，然后按照说明进行安装。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>另外，还可以在你安装的 Azure SDK 中找到这些程序集，然后添加对它们的引用。</source>
          <target state="new">另外，还可以在你安装的 Azure SDK 中找到这些程序集，然后添加对它们的引用。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>在 Program.cs 文件的顶部，添加以下 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句：</source>
          <target state="new">在 Program.cs 文件的顶部，添加以下 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>编辑 app.config 文件，使其所含配置设置中的连接字符串指向你的存储帐户。你的 app.config 文件应如下所示：</source>
          <target state="new">编辑 app.config 文件，使其所含配置设置中的连接字符串指向你的存储帐户。你的 app.config 文件应如下所示：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>为容器生成共享访问签名 URI</source>
          <target state="new">为容器生成共享访问签名 URI</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>开始时，我们将添加一个方法以便在新容器上生成共享访问签名。在这个例子中，该签名不与某一存储访问策略相关联，因此，它在 URI 上携带信息，指示其到期时间以及将授予的权限。</source>
          <target state="new">开始时，我们将添加一个方法以便在新容器上生成共享访问签名。在这个例子中，该签名不与某一存储访问策略相关联，因此，它在 URI 上携带信息，指示其到期时间以及将授予的权限。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>首先，向 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法中添加代码，以便验证对你的存储帐户的访问并且创建一个新容器：</source>
          <target state="new">首先，向 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法中添加代码，以便验证对你的存储帐户的访问并且创建一个新容器：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>接下来，添加一个新方法，该方法为容器生成共享访问签名并且返回签名 URI：</source>
          <target state="new">接下来，添加一个新方法，该方法为容器生成共享访问签名并且返回签名 URI：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以调用 <bpt id="p3">**</bpt>GetContainerSasUri()<ept id="p3">**</ept> 并将签名 URI 写入控制台窗口：</source>
          <target state="new">在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以调用 <bpt id="p3">**</bpt>GetContainerSasUri()<ept id="p3">**</ept> 并将签名 URI 写入控制台窗口：</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>编译并且运行以输出新容器的共享访问签名 URI。该 URI 将类似以下 URI：</source>
          <target state="new">编译并且运行以输出新容器的共享访问签名 URI。该 URI 将类似以下 URI：</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在你运行代码后，你在容器上创建的共享访问签名将在接下来的 24 个小时内有效。该签名向客户端授予列出容器中的 Blob 以及将新 Blob 写入容器的权限。</source>
          <target state="new">在你运行代码后，你在容器上创建的共享访问签名将在接下来的 24 个小时内有效。该签名向客户端授予列出容器中的 Blob 以及将新 Blob 写入容器的权限。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>为 Blob 生成共享访问签名 URI</source>
          <target state="new">为 Blob 生成共享访问签名 URI</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>接下来，我们将编写类似的代码，以便在容器内创建新 Blob 并且为其生成共享访问签名。该共享访问签名不与某一存储访问策略相关联，因此，它包含有关 URI 的开始时间、到期时间和权限。</source>
          <target state="new">接下来，我们将编写类似的代码，以便在容器内创建新 Blob 并且为其生成共享访问签名。该共享访问签名不与某一存储访问策略相关联，因此，它包含有关 URI 的开始时间、到期时间和权限。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>添加一个新方法，该方法创建一个新 Blob 并且向其写入某些文本，然后生成共享访问签名并且返回签名 URI：</source>
          <target state="new">添加一个新方法，该方法创建一个新 Blob 并且向其写入某些文本，然后生成共享访问签名并且返回签名 URI：</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以调用 <bpt id="p3">**</bpt>GetBlobSasUri()<ept id="p3">**</ept>，并将共享访问签名 URI 写入控制台窗口：</source>
          <target state="new">在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以调用 <bpt id="p3">**</bpt>GetBlobSasUri()<ept id="p3">**</ept>，并将共享访问签名 URI 写入控制台窗口：</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>编译并且运行以输出新 Blob 的共享访问签名 URI。该 URI 将类似以下 URI：</source>
          <target state="new">编译并且运行以输出新 Blob 的共享访问签名 URI。该 URI 将类似以下 URI：</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>在容器上创建存储访问策略</source>
          <target state="new">在容器上创建存储访问策略</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>现在来在容器上创建一个存储访问策略，该策略定义与其相关联的任何共享访问签名的约束。</source>
          <target state="new">现在来在容器上创建一个存储访问策略，该策略定义与其相关联的任何共享访问签名的约束。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>在前面的示例中，我们指定了开始时间（隐式或显式的）、到期时间以及共享访问签名 URI 本身的权限。在接下来的示例中，我们将在存储访问策略上指定它们，而不是在共享访问签名上指定它们。这样做将使我们不必重新发布共享访问签名即可更改这些约束。</source>
          <target state="new">在前面的示例中，我们指定了开始时间（隐式或显式的）、到期时间以及共享访问签名 URI 本身的权限。在接下来的示例中，我们将在存储访问策略上指定它们，而不是在共享访问签名上指定它们。这样做将使我们不必重新发布共享访问签名即可更改这些约束。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>可以使一个或多个约束作用于共享访问签名上，使其余的约束作用于存储访问策略上。但是，你只能在这两者之一中指定开始时间、到期时间和权限；例如，不能对共享访问签名指定权限，同时也对存储访问策略指定权限。</source>
          <target state="new">可以使一个或多个约束作用于共享访问签名上，使其余的约束作用于存储访问策略上。但是，你只能在这两者之一中指定开始时间、到期时间和权限；例如，不能对共享访问签名指定权限，同时也对存储访问策略指定权限。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>注意，当你向容器添加一个访问策略时，你必须获取容器的现有权限，添加新的访问策略，然后设置容器的权限。</source>
          <target state="new">注意，当你向容器添加一个访问策略时，你必须获取容器的现有权限，添加新的访问策略，然后设置容器的权限。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>添加一个新方法，该方法在窗口上创建一个新的存储访问策略并返回该策略的名称：</source>
          <target state="new">添加一个新方法，该方法在窗口上创建一个新的存储访问策略并返回该策略的名称：</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以首先清除任何现有访问策略，然后调用 <bpt id="p3">**</bpt>CreateSharedAccessPolicy()<ept id="p3">**</ept> 方法：</source>
          <target state="new">在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以首先清除任何现有访问策略，然后调用 <bpt id="p3">**</bpt>CreateSharedAccessPolicy()<ept id="p3">**</ept> 方法：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>注意，当清除容器上的访问策略时，你必须首先获取容器的现有权限，接着清除权限，然后再次设置权限。</source>
          <target state="new">注意，当清除容器上的访问策略时，你必须首先获取容器的现有权限，接着清除权限，然后再次设置权限。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>在使用访问策略的容器上生成共享访问签名 URI</source>
          <target state="new">在使用访问策略的容器上生成共享访问签名 URI</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>接下来，我们将在之前创建的容器上创建另一个共享访问签名，但这次，我们要将该签名与我们在之前示例中创建的访问策略相关联。</source>
          <target state="new">接下来，我们将在之前创建的容器上创建另一个共享访问签名，但这次，我们要将该签名与我们在之前示例中创建的访问策略相关联。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>添加一个新方法以便在容器上生成另一个共享访问签名：</source>
          <target state="new">添加一个新方法以便在容器上生成另一个共享访问签名：</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以调用 <bpt id="p3">**</bpt>GetContainerSasUriWithPolicy<ept id="p3">**</ept> 方法：</source>
          <target state="new">在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以调用 <bpt id="p3">**</bpt>GetContainerSasUriWithPolicy<ept id="p3">**</ept> 方法：</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>在使用访问策略的 Blob 上生成共享访问签名 URI</source>
          <target state="new">在使用访问策略的 Blob 上生成共享访问签名 URI</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>最后，我们将添加一个类似方法，以便创建另一个 Blob 并且生成与某一访问策略相关联的共享访问签名。</source>
          <target state="new">最后，我们将添加一个类似方法，以便创建另一个 Blob 并且生成与某一访问策略相关联的共享访问签名。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>添加一个新方法以便创建 Blob 并且生成共享访问签名：</source>
          <target state="new">添加一个新方法以便创建 Blob 并且生成共享访问签名：</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以调用 <bpt id="p3">**</bpt>GetBlobSasUriWithPolicy<ept id="p3">**</ept> 方法：</source>
          <target state="new">在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的底部，在调用 <bpt id="p2">**</bpt>Console.ReadLine()<ept id="p2">**</ept> 之前，添加以下代码行以调用 <bpt id="p3">**</bpt>GetBlobSasUriWithPolicy<ept id="p3">**</ept> 方法：</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>现在，完整的 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法看起来应如下所示。运行它以将共享访问签名 URI 写入控制台窗口，然后将它们复制并粘贴到一个文本文件中以在本教程的第二部分中使用。</source>
          <target state="new">现在，完整的 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法看起来应如下所示。运行它以将共享访问签名 URI 写入控制台窗口，然后将它们复制并粘贴到一个文本文件中以在本教程的第二部分中使用。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>运行 GenerateSharedAccessSignatures 控制台应用程序时，你将会在控制台窗口中看到如下输出。它们是你在本教程的第 2 部分中将使用的共享访问签名。</source>
          <target state="new">运行 GenerateSharedAccessSignatures 控制台应用程序时，你将会在控制台窗口中看到如下输出。它们是你在本教程的第 2 部分中将使用的共享访问签名。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>sas-console-output-1</source>
          <target state="new">sas-console-output-1</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>第 2 部分：创建控制台应用程序来测试共享访问签名</source>
          <target state="new">第 2 部分：创建控制台应用程序来测试共享访问签名</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>为了测试在之前的示例中创建的共享访问签名，我们将创建第二个控制台应用程序，该应用程序将使用这些签名在容器和 Blob 上执行操作。</source>
          <target state="new">为了测试在之前的示例中创建的共享访问签名，我们将创建第二个控制台应用程序，该应用程序将使用这些签名在容器和 Blob 上执行操作。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 如果自你完成本教程的第一部分后超过 24 小时，则你生成的签名将不再有效。在这种情况下，你应该在第一个控制台应用程序中运行代码，生成全新的共享访问签名以供在本教程的第二部分使用。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 如果自你完成本教程的第一部分后超过 24 小时，则你生成的签名将不再有效。在这种情况下，你应该在第一个控制台应用程序中运行代码，生成全新的共享访问签名以供在本教程的第二部分使用。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 <bpt id="p1">**</bpt>ConsumeSharedAccessSignatures<ept id="p1">**</ept>。像之前所做的一样添加对 <bpt id="p2">**</bpt>Microsoft.WindowsAzure.Configuration.dll<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Microsoft.WindowsAzure.Storage.dll<ept id="p3">**</ept> 的引用：</source>
          <target state="new">在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 <bpt id="p1">**</bpt>ConsumeSharedAccessSignatures<ept id="p1">**</ept>。像之前所做的一样添加对 <bpt id="p2">**</bpt>Microsoft.WindowsAzure.Configuration.dll<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Microsoft.WindowsAzure.Storage.dll<ept id="p3">**</ept> 的引用：</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>在 Program.cs 文件的顶部，添加以下 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句：</source>
          <target state="new">在 Program.cs 文件的顶部，添加以下 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句：</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的主体中，添加以下约束，并且将其值更新为你在本教程的第 1 部分中生成的共享访问签名。</source>
          <target state="new">在 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法的主体中，添加以下约束，并且将其值更新为你在本教程的第 1 部分中生成的共享访问签名。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>添加方法以便尝试使用共享访问签名执行容器操作</source>
          <target state="new">添加方法以便尝试使用共享访问签名执行容器操作</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>接下来，我们将添加一个方法，该方法将在容器上使用共享访问签名测试一些有代表性的容器操作。请注意，使用共享访问签名返回对容器的引用，并且单独基于该签名验证对容器的访问。</source>
          <target state="new">接下来，我们将添加一个方法，该方法将在容器上使用共享访问签名测试一些有代表性的容器操作。请注意，使用共享访问签名返回对容器的引用，并且单独基于该签名验证对容器的访问。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>将以下方法添加到 Program.cs：</source>
          <target state="new">将以下方法添加到 Program.cs：</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>更新 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法以使用你在容器上创建的两个共享访问签名调用 <bpt id="p2">**</bpt>UseContainerSAS()<ept id="p2">**</ept>：</source>
          <target state="new">更新 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法以使用你在容器上创建的两个共享访问签名调用 <bpt id="p2">**</bpt>UseContainerSAS()<ept id="p2">**</ept>：</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>添加方法以便尝试使用共享访问签名执行 Blob 操作</source>
          <target state="new">添加方法以便尝试使用共享访问签名执行 Blob 操作</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>最后，我们将添加一个方法，该方法将在 Blob 上使用共享访问签名测试一些有代表性的 Blob 操作。在这个例子中，我们使用在共享访问签名中传入的构造函数 <bpt id="p1">**</bpt>CloudBlockBlob(String)<ept id="p1">**</ept> 返回对该 Blob 的引用。无需其他身份验证；它仅基于签名。</source>
          <target state="new">最后，我们将添加一个方法，该方法将在 Blob 上使用共享访问签名测试一些有代表性的 Blob 操作。在这个例子中，我们使用在共享访问签名中传入的构造函数 <bpt id="p1">**</bpt>CloudBlockBlob(String)<ept id="p1">**</ept> 返回对该 Blob 的引用。无需其他身份验证；它仅基于签名。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>将以下方法添加到 Program.cs：</source>
          <target state="new">将以下方法添加到 Program.cs：</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>更新 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法以使用你在 Blob 上创建的两个共享访问签名调用 <bpt id="p2">**</bpt>UseBlobSAS()<ept id="p2">**</ept>：</source>
          <target state="new">更新 <bpt id="p1">**</bpt>Main()<ept id="p1">**</ept> 方法以使用你在 Blob 上创建的两个共享访问签名调用 <bpt id="p2">**</bpt>UseBlobSAS()<ept id="p2">**</ept>：</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>运行该控制台应用程序并观察输出，查看对各个签名允许的操作。控制台窗口中的输出将与下面的输出类似：</source>
          <target state="new">运行该控制台应用程序并观察输出，查看对各个签名允许的操作。控制台窗口中的输出将与下面的输出类似：</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>sas-console-output-2</source>
          <target state="new">sas-console-output-2</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>共享访问签名，第 1 部分：了解 SAS 模型</source>
          <target state="new">共享访问签名，第 1 部分：了解 SAS 模型</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>管理对 Azure 存储资源的访问</source>
          <target state="new">管理对 Azure 存储资源的访问</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>使用共享访问签名委托访问 (REST API)</source>
          <target state="new">使用共享访问签名委托访问 (REST API)</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>介绍表和队列 SAS</source>
          <target state="new">介绍表和队列 SAS</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>