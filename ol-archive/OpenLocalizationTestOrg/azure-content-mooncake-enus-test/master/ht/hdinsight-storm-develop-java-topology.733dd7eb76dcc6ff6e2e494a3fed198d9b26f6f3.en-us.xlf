<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b647fbc30b7c162804f9c8025b425917cd12c2d0</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>为 Apache Storm 开发基于 Java 的拓扑 | Azure</source>
          <target state="new">为 Apache Storm 开发基于 Java 的拓扑 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何通过创建一个简单的单词计数拓扑，来以 Java 语言创建一个 Storm 拓扑。</source>
          <target state="new">了解如何通过创建一个简单的单词计数拓扑，来以 Java 语言创建一个 Storm 拓扑。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用 Apache Storm 和 HDInsight 上的 Maven 为基本的单词计数应用程序开发基于 Java 的拓扑</source>
          <target state="new">使用 Apache Storm 和 HDInsight 上的 Maven 为基本的单词计数应用程序开发基于 Java 的拓扑</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>了解使用 Maven 为 Apache Storm on HDInsight 创建基于 Java 的拓扑的基本过程。将会演练使用 Maven 和 Java 创建基本单词计数应用程序的过程。虽然本文提供了有关使用 Eclipse 的说明，但你也可以使用所选的文本编辑器。</source>
          <target state="new">了解使用 Maven 为 Apache Storm on HDInsight 创建基于 Java 的拓扑的基本过程。将会演练使用 Maven 和 Java 创建基本单词计数应用程序的过程。虽然本文提供了有关使用 Eclipse 的说明，但你也可以使用所选的文本编辑器。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>完成本文档中的步骤之后，你将会获得一个用于部署到 Apache Storm on HDInsight 的基本拓扑。</source>
          <target state="new">完成本文档中的步骤之后，你将会获得一个用于部署到 Apache Storm on HDInsight 的基本拓扑。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>：此拓扑的完整版本在 <bpt id="p1">[</bpt>https://github.com/Azure-Samples/hdinsight-java-storm-wordcount<ept id="p1">](https://github.com/Azure-Samples/hdinsight-java-storm-wordcount)</ept> 中提供。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>：此拓扑的完整版本在 <bpt id="p1">[</bpt>https://github.com/Azure-Samples/hdinsight-java-storm-wordcount<ept id="p1">](https://github.com/Azure-Samples/hdinsight-java-storm-wordcount)</ept> 中提供。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>先决条件</source>
          <target state="new">先决条件</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank"&gt;</ph>Java 开发人员工具包 (JDK) 版本 7<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank"&gt;</ph>Java 开发人员工具包 (JDK) 版本 7<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a href="https://maven.apache.org/download.cgi" target="_blank"&gt;</ph>Maven<ph id="ph2">&lt;/a&gt;</ph>：Maven 是 Java 项目的项目生成系统。</source>
          <target state="new"><ph id="ph1">&lt;a href="https://maven.apache.org/download.cgi" target="_blank"&gt;</ph>Maven<ph id="ph2">&lt;/a&gt;</ph>：Maven 是 Java 项目的项目生成系统。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>文本编辑器，例如记事本、<ph id="ph1">&lt;a href="http://www.gnu.org/software/emacs/" target="_blank"&gt;</ph>Emacs<ph id="ph2">&lt;a&gt;</ph>、<ph id="ph3">&lt;a href="http://www.sublimetext.com/" target="_blank"&gt;</ph>Sublime Text<ph id="ph4">&lt;/a&gt;</ph>、<ph id="ph5">&lt;a href="https://atom.io/" target="_blank"&gt;</ph>Atom.io<ph id="ph6">&lt;/a&gt;</ph>、<ph id="ph7">&lt;a href="http://brackets.io/" target="_blank"&gt;</ph>Brackets.io<ph id="ph8">&lt;/a&gt;</ph>。或者使用集成开发环境 (IDE)，例如 <ph id="ph9">&lt;a href="https://eclipse.org/" target="_blank"&gt;</ph>Eclipse<ph id="ph10">&lt;/a&gt;</ph>（Luna 或更高版本）。</source>
          <target state="new">文本编辑器，例如记事本、<ph id="ph1">&lt;a href="http://www.gnu.org/software/emacs/" target="_blank"&gt;</ph>Emacs<ph id="ph2">&lt;a&gt;</ph>、<ph id="ph3">&lt;a href="http://www.sublimetext.com/" target="_blank"&gt;</ph>Sublime Text<ph id="ph4">&lt;/a&gt;</ph>、<ph id="ph5">&lt;a href="https://atom.io/" target="_blank"&gt;</ph>Atom.io<ph id="ph6">&lt;/a&gt;</ph>、<ph id="ph7">&lt;a href="http://brackets.io/" target="_blank"&gt;</ph>Brackets.io<ph id="ph8">&lt;/a&gt;</ph>。或者使用集成开发环境 (IDE)，例如 <ph id="ph9">&lt;a href="https://eclipse.org/" target="_blank"&gt;</ph>Eclipse<ph id="ph10">&lt;/a&gt;</ph>（Luna 或更高版本）。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 你的编辑器或 IDE 可能具有处理 Maven 的特定功能，但本文档中未提供说明。有关环境编辑功能的详细信息，请参阅所使用产品的文档。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 你的编辑器或 IDE 可能具有处理 Maven 的特定功能，但本文档中未提供说明。有关环境编辑功能的详细信息，请参阅所使用产品的文档。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>配置环境变量</source>
          <target state="new">配置环境变量</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>可以在安装 Java 和 JDK 时设置以下环境变量。不过，你应该检查它们是否存在并且包含系统的正确值。</source>
          <target state="new">可以在安装 Java 和 JDK 时设置以下环境变量。不过，你应该检查它们是否存在并且包含系统的正确值。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>JAVA\_HOME<ept id="p1">**</ept> - 应该指向已安装 Java 运行时环境 (JRE) 的目录。例如，在 Windows 中，它的值类似于 <ph id="ph1">`c:\Program Files (x86)\Java\jre1.7`</ph></source>
          <target state="new"><bpt id="p1">**</bpt>JAVA\_HOME<ept id="p1">**</ept> - 应该指向已安装 Java 运行时环境 (JRE) 的目录。例如，在 Windows 中，它的值类似于 <ph id="ph1">`c:\Program Files (x86)\Java\jre1.7`</ph></target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PATH<ept id="p1">**</ept> - 应该包含以下路径：</source>
          <target state="new"><bpt id="p1">**</bpt>PATH<ept id="p1">**</ept> - 应该包含以下路径：</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>JAVA\_HOME<ept id="p1">**</ept>（或等效的路径）</source>
          <target state="new"><bpt id="p1">**</bpt>JAVA\_HOME<ept id="p1">**</ept>（或等效的路径）</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>JAVA\_HOME\\bin<ept id="p1">**</ept>（或等效的路径）</source>
          <target state="new"><bpt id="p1">**</bpt>JAVA\_HOME\\bin<ept id="p1">**</ept>（或等效的路径）</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>安装 Maven 的目录</source>
          <target state="new">安装 Maven 的目录</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>创建新的 Maven 项目</source>
          <target state="new">创建新的 Maven 项目</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>从命令行中，使用以下代码创建名为 <bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> 的新 Maven 项目：</source>
          <target state="new">从命令行中，使用以下代码创建名为 <bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> 的新 Maven 项目：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>这会在当前位置创建名为 <bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> 的新目录，其中包含基本 Maven 项目。</source>
          <target state="new">这会在当前位置创建名为 <bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> 的新目录，其中包含基本 Maven 项目。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> 目录将包含以下项：</source>
          <target state="new"><bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept> 目录将包含以下项：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept>：包含 Maven 项目的设置。</source>
          <target state="new"><bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept>：包含 Maven 项目的设置。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id="p1">**</ept>：包含应用程序代码。</source>
          <target state="new"><bpt id="p1">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id="p1">**</ept>：包含应用程序代码。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>src\\test\\java\\com\\microsoft\\example<ept id="p1">**</ept>：包含应用程序的测试。对于本示例，我们将不创建测试。</source>
          <target state="new"><bpt id="p1">**</bpt>src\\test\\java\\com\\microsoft\\example<ept id="p1">**</ept>：包含应用程序的测试。对于本示例，我们将不创建测试。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>删除示例代码</source>
          <target state="new">删除示例代码</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>由于我们要创建应用程序，因此请删除生成的测试和应用程序文件：</source>
          <target state="new">由于我们要创建应用程序，因此请删除生成的测试和应用程序文件：</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>src\\test\\java\\com\\microsoft\\example\\AppTest.java</source>
          <target state="new">src\\test\\java\\com\\microsoft\\example\\AppTest.java</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>src\\main\\java\\com\\microsoft\\example\\App.java</source>
          <target state="new">src\\main\\java\\com\\microsoft\\example\\App.java</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>添加依赖项</source>
          <target state="new">添加依赖项</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>由于这是一个 Storm 拓扑，因此你必须添加 Storm 组件的依赖项。打开 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept>，并在 <bpt id="p2">**</bpt>&amp;lt;dependencies&gt;<ept id="p2">**</ept> 节中添加以下代码：</source>
          <target state="new">由于这是一个 Storm 拓扑，因此你必须添加 Storm 组件的依赖项。打开 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept>，并在 <bpt id="p2">**</bpt>&amp;lt;dependencies&gt;<ept id="p2">**</ept> 节中添加以下代码：</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>在编译时，Maven 会使用此信息来查找 Maven 存储库中的 <bpt id="p1">**</bpt>storm-core<ept id="p1">**</ept>。它会先查找本地计算机上的存储库。如果文件不存在，它会从公共 Maven 存储库下载这些文件，并将其存储在本地存储库中。</source>
          <target state="new">在编译时，Maven 会使用此信息来查找 Maven 存储库中的 <bpt id="p1">**</bpt>storm-core<ept id="p1">**</ept>。它会先查找本地计算机上的存储库。如果文件不存在，它会从公共 Maven 存储库下载这些文件，并将其存储在本地存储库中。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 请注意我们在该节中添加的 <ph id="ph2">`&lt;scope&gt;provided&lt;/scope&gt;`</ph> 行。这会告诉 Maven 从我们创建的任何 JAR 文件中排除 <bpt id="p1">**</bpt>storm-core<ept id="p1">**</ept>，因为系统将会予以提供。这样，便可以稍微减小所创建的包，并确保它们使用 Storm on HDInsight 群集中包含的 <bpt id="p2">**</bpt>storm-core<ept id="p2">**</ept> 位。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 请注意我们在该节中添加的 <ph id="ph2">`&lt;scope&gt;provided&lt;/scope&gt;`</ph> 行。这会告诉 Maven 从我们创建的任何 JAR 文件中排除 <bpt id="p1">**</bpt>storm-core<ept id="p1">**</ept>，因为系统将会予以提供。这样，便可以稍微减小所创建的包，并确保它们使用 Storm on HDInsight 群集中包含的 <bpt id="p2">**</bpt>storm-core<ept id="p2">**</ept> 位。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>生成配置</source>
          <target state="new">生成配置</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Maven 插件可让你自定义项目的生成阶段，例如，如何编译项目，或者如何将它打包成 JAR 文件。打开 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept>，并紧靠在 <ph id="ph1">`&lt;/project&gt;`</ph> 行的上方添加以下代码。</source>
          <target state="new">Maven 插件可让你自定义项目的生成阶段，例如，如何编译项目，或者如何将它打包成 JAR 文件。打开 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept>，并紧靠在 <ph id="ph1">`&lt;/project&gt;`</ph> 行的上方添加以下代码。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>此节将用来添加插件和其他生成配置选项。</source>
          <target state="new">此节将用来添加插件和其他生成配置选项。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>添加插件</source>
          <target state="new">添加插件</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>针对 Storm 拓扑，<ph id="ph1">&lt;a href="http://mojo.codehaus.org/exec-maven-plugin/" target="_blank"&gt;</ph>Exec Maven 插件<ph id="ph2">&lt;/a&gt;</ph>十分有用，因为它可让你轻松地在开发环境本地运行拓扑。将以下内容添加至 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept> 文件的 <ph id="ph3">`&lt;plugins&gt;`</ph> 节，以包括 Exec Maven 插件：</source>
          <target state="new">针对 Storm 拓扑，<ph id="ph1">&lt;a href="http://mojo.codehaus.org/exec-maven-plugin/" target="_blank"&gt;</ph>Exec Maven 插件<ph id="ph2">&lt;/a&gt;</ph>十分有用，因为它可让你轻松地在开发环境本地运行拓扑。将以下内容添加至 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept> 文件的 <ph id="ph3">`&lt;plugins&gt;`</ph> 节，以包括 Exec Maven 插件：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>另一个有用的插件是用于更改编译选项的 <ph id="ph1">&lt;a href="http://maven.apache.org/plugins/maven-compiler-plugin/" target="_blank"&gt;</ph>Apache Maven Compiler 插件<ph id="ph2">&lt;/a&gt;</ph>。我们需要此插件的主要原因是要更改 Maven 用作应用程序源和目标的 Java 版本。我们需要的是版本 1.7。</source>
          <target state="new">另一个有用的插件是用于更改编译选项的 <ph id="ph1">&lt;a href="http://maven.apache.org/plugins/maven-compiler-plugin/" target="_blank"&gt;</ph>Apache Maven Compiler 插件<ph id="ph2">&lt;/a&gt;</ph>。我们需要此插件的主要原因是要更改 Maven 用作应用程序源和目标的 Java 版本。我们需要的是版本 1.7。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept> 的 <ph id="ph1">`&lt;plugins&gt;`</ph> 节中添加以下内容，以包括 Apache Maven Compiler 插件并将源和目标版本设置为 1.7。</source>
          <target state="new">在 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept> 的 <ph id="ph1">`&lt;plugins&gt;`</ph> 节中添加以下内容，以包括 Apache Maven Compiler 插件并将源和目标版本设置为 1.7。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>创建拓扑</source>
          <target state="new">创建拓扑</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>基于 Java 的 Storm 拓扑包含你必须编写（或引用）为依赖项的三个组件。</source>
          <target state="new">基于 Java 的 Storm 拓扑包含你必须编写（或引用）为依赖项的三个组件。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Spout<ept id="p1">**</ept>：读取外部源中的数据，并发出进入拓扑的数据流。</source>
          <target state="new"><bpt id="p1">**</bpt>Spout<ept id="p1">**</ept>：读取外部源中的数据，并发出进入拓扑的数据流。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Bolt<ept id="p1">**</ept>：对 Spout 或其他 Bolt 所发出的数据流执行处理，并发出一个或多个数据流。</source>
          <target state="new"><bpt id="p1">**</bpt>Bolt<ept id="p1">**</ept>：对 Spout 或其他 Bolt 所发出的数据流执行处理，并发出一个或多个数据流。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>拓扑<ept id="p1">**</ept>：定义如何排列 Spout 和 Bolt，并提供拓扑的入口点。</source>
          <target state="new"><bpt id="p1">**</bpt>拓扑<ept id="p1">**</ept>：定义如何排列 Spout 和 Bolt，并提供拓扑的入口点。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>创建 Spout</source>
          <target state="new">创建 Spout</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>为了降低设置外部数据源的要求，以下 Spout 只会发出随机句子。它是 <ph id="ph1">&lt;a href="https://github.com/apache/storm/blob/master/examples/storm-starter/" target="_blank"&gt;</ph>Storm-Starter 示例<ph id="ph2">&lt;/a&gt;</ph>随附的 Spout 的修改版本。</source>
          <target state="new">为了降低设置外部数据源的要求，以下 Spout 只会发出随机句子。它是 <ph id="ph1">&lt;a href="https://github.com/apache/storm/blob/master/examples/storm-starter/" target="_blank"&gt;</ph>Storm-Starter 示例<ph id="ph2">&lt;/a&gt;</ph>随附的 Spout 的修改版本。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 有关从外部数据源读取的 Spout 的示例，请参阅以下示例：<ph id="ph2">&lt;a href="https://github.com/apache/storm/tree/master/external/storm-kafka" target="_blank"&gt;</ph>Storm-Kafka<ph id="ph3">&lt;/a&gt;</ph>：从 Kafka 读取数据的 Spout</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 有关从外部数据源读取的 Spout 的示例，请参阅以下示例：<ph id="ph2">&lt;a href="https://github.com/apache/storm/tree/master/external/storm-kafka" target="_blank"&gt;</ph>Storm-Kafka<ph id="ph3">&lt;/a&gt;</ph>：从 Kafka 读取数据的 Spout</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>对于 Spout，在 <bpt id="p1">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id="p1">**</ept> 目录中创建名为 <bpt id="p2">**</bpt>RandomSentenceSpout.java<ept id="p2">**</ept> 的新文件，并使用以下内容做为内容：</source>
          <target state="new">对于 Spout，在 <bpt id="p1">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id="p1">**</ept> 目录中创建名为 <bpt id="p2">**</bpt>RandomSentenceSpout.java<ept id="p2">**</ept> 的新文件，并使用以下内容做为内容：</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>请花费片刻时间通读代码注释，以了解此 Spout 的工作原理。</source>
          <target state="new">请花费片刻时间通读代码注释，以了解此 Spout 的工作原理。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 虽然此拓扑只使用一个 Spout，但其他拓扑可能存在将数据从不同源送入拓扑的多个 Spout。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 虽然此拓扑只使用一个 Spout，但其他拓扑可能存在将数据从不同源送入拓扑的多个 Spout。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>创建 Bolt</source>
          <target state="new">创建 Bolt</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Bolt 用于处理数据。此拓扑有两个 Bolt：</source>
          <target state="new">Bolt 用于处理数据。此拓扑有两个 Bolt：</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SplitSentence<ept id="p1">**</ept>：将 <bpt id="p2">**</bpt>RandomSentenceSpout<ept id="p2">**</ept> 发出的句子分割成不同的单词。</source>
          <target state="new"><bpt id="p1">**</bpt>SplitSentence<ept id="p1">**</ept>：将 <bpt id="p2">**</bpt>RandomSentenceSpout<ept id="p2">**</ept> 发出的句子分割成不同的单词。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept>：统计每个单词的出现次数。</source>
          <target state="new"><bpt id="p1">**</bpt>WordCount<ept id="p1">**</ept>：统计每个单词的出现次数。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> Bolt 几乎可以执行任何操作，例如，计算、保存，或者与外部组件通信。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> Bolt 几乎可以执行任何操作，例如，计算、保存，或者与外部组件通信。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id="p1">**</ept> 目录中创建两个新文件：<bpt id="p2">**</bpt>SplitSentence.java<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>WordCount.Java<ept id="p3">**</ept>。将以下内容用作这些文件的内容：</source>
          <target state="new">在 <bpt id="p1">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id="p1">**</ept> 目录中创建两个新文件：<bpt id="p2">**</bpt>SplitSentence.java<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>WordCount.Java<ept id="p3">**</ept>。将以下内容用作这些文件的内容：</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>SplitSentence</source>
          <target state="new">SplitSentence</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>WordCount</source>
          <target state="new">WordCount</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>请花费片刻时间通读代码注释，以了解每个 Bolt 的工作原理。</source>
          <target state="new">请花费片刻时间通读代码注释，以了解每个 Bolt 的工作原理。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>创建拓扑</source>
          <target state="new">创建拓扑</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>拓扑将 Spout 和 Bolt 一起绑定到图形，该图形定义了组件之间的数据流动方式。它还提供 Storm 在群集内创建组件的实例时使用的并行度提示。</source>
          <target state="new">拓扑将 Spout 和 Bolt 一起绑定到图形，该图形定义了组件之间的数据流动方式。它还提供 Storm 在群集内创建组件的实例时使用的并行度提示。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>以下是此拓扑的组件的基本原理图。</source>
          <target state="new">以下是此拓扑的组件的基本原理图。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>显示 Spout 和 Bolt 排列方式的示意图</source>
          <target state="new">显示 Spout 和 Bolt 排列方式的示意图</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>若要实现该拓扑，请在 <bpt id="p1">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id="p1">**</ept> 目录中创建名为 <bpt id="p2">**</bpt>WordCountTopology.java<ept id="p2">**</ept> 的新文件。将以下内容用作该文件的内容：</source>
          <target state="new">若要实现该拓扑，请在 <bpt id="p1">**</bpt>src\\main\\java\\com\\microsoft\\example<ept id="p1">**</ept> 目录中创建名为 <bpt id="p2">**</bpt>WordCountTopology.java<ept id="p2">**</ept> 的新文件。将以下内容用作该文件的内容：</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>请花片刻时间通读代码注释以了解拓扑的定义方式，然后将拓扑提交到群集。</source>
          <target state="new">请花片刻时间通读代码注释以了解拓扑的定义方式，然后将拓扑提交到群集。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>在本地测试拓扑</source>
          <target state="new">在本地测试拓扑</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>保存文件之后，请使用以下命令在本地测试拓扑。</source>
          <target state="new">保存文件之后，请使用以下命令在本地测试拓扑。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>运行该命令时，拓扑会显示启动信息。然后开始显示与下面类似的行，因为句子是从 Spout 发出，然后由 Bolt 处理的。</source>
          <target state="new">运行该命令时，拓扑会显示启动信息。然后开始显示与下面类似的行，因为句子是从 Spout 发出，然后由 Bolt 处理的。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>从此输出中可以看到发生了以下情况：</source>
          <target state="new">从此输出中可以看到发生了以下情况：</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Spout 发出“an apple a day keeps the doctor away”。</source>
          <target state="new">Spout 发出“an apple a day keeps the doctor away”。</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Split Bolt 开始发出句子中的各个单词。</source>
          <target state="new">Split Bolt 开始发出句子中的各个单词。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Count Bolt 开始发出每个单词及其发出次数。</source>
          <target state="new">Count Bolt 开始发出每个单词及其发出次数。</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>查看 Count Bolt 所发出的数据，“apple”已发出 53 次。只要拓扑运行，计数就会持续增加，因为系统会随机反复发出相同的句子，并且永不会重置计数。</source>
          <target state="new">查看 Count Bolt 所发出的数据，“apple”已发出 53 次。只要拓扑运行，计数就会持续增加，因为系统会随机反复发出相同的句子，并且永不会重置计数。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Trident</source>
          <target state="new">Trident</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Trident 是 Storm 提供的高级抽象。它支持有状态处理。Trident 的主要优点在于，它可以保证进入拓扑的每个消息只会处理一次。这在保证消息至少处理一次的原始 Java 拓扑中很难实现。两者还有其他方面的差异，例如，可以使用内置组件，而无需创建 Bolt。事实上，可以使用低泛型组件（例如筛选、投影和函数）来完全取代 Bolt。</source>
          <target state="new">Trident 是 Storm 提供的高级抽象。它支持有状态处理。Trident 的主要优点在于，它可以保证进入拓扑的每个消息只会处理一次。这在保证消息至少处理一次的原始 Java 拓扑中很难实现。两者还有其他方面的差异，例如，可以使用内置组件，而无需创建 Bolt。事实上，可以使用低泛型组件（例如筛选、投影和函数）来完全取代 Bolt。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>你可以使用 Maven 项目来创建 Trident 应用程序。使用本文前面所述的相同基本步骤 - 只有代码不同。</source>
          <target state="new">你可以使用 Maven 项目来创建 Trident 应用程序。使用本文前面所述的相同基本步骤 - 只有代码不同。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>有关 Trident 的详细信息，请参阅 <ph id="ph1">&lt;a href="http://storm.apache.org/documentation/Trident-API-Overview.html" target="_blank"&gt;</ph>Trident API 概述<ph id="ph2">&lt;/a&gt;</ph>。</source>
          <target state="new">有关 Trident 的详细信息，请参阅 <ph id="ph1">&lt;a href="http://storm.apache.org/documentation/Trident-API-Overview.html" target="_blank"&gt;</ph>Trident API 概述<ph id="ph2">&lt;/a&gt;</ph>。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>你已学习如何使用 Java 创建 Storm 拓扑。接下来，请学习如何：</source>
          <target state="new">你已学习如何使用 Java 创建 Storm 拓扑。接下来，请学习如何：</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>在 HDInsight 上部署和管理 Apache Storm 拓扑</source>
          <target state="new">在 HDInsight 上部署和管理 Apache Storm 拓扑</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>使用 Visual Studio 开发 Apache Storm on HDInsight 的 C# 拓扑</source>
          <target state="new">使用 Visual Studio 开发 Apache Storm on HDInsight 的 C# 拓扑</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>如需更多 Storm 拓扑示例，请访问 <bpt id="p1">[</bpt>Storm on HDInsight 拓扑示例<ept id="p1">](/documentation/articles/hdinsight-storm-example-topology)</ept>。</source>
          <target state="new">如需更多 Storm 拓扑示例，请访问 <bpt id="p1">[</bpt>Storm on HDInsight 拓扑示例<ept id="p1">](/documentation/articles/hdinsight-storm-example-topology)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>