<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d25eb22717298e5afff6e44e3d4171bf15848eb</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 HDInsight 中将 Python 与 Hive 和 Pig 配合使用 | Azure</source>
          <target state="new">在 HDInsight 中将 Python 与 Hive 和 Pig 配合使用 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在 HDInsight（Azure 上的 Hadoop 技术堆栈）中通过 Hive 和 Pig 使用 Python 用户定义的函数 (UDF)。</source>
          <target state="new">了解如何在 HDInsight（Azure 上的 Hadoop 技术堆栈）中通过 Hive 和 Pig 使用 Python 用户定义的函数 (UDF)。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 HDInsight 中将 Python 与 Hive 和 Pig 配合使用</source>
          <target state="new">在 HDInsight 中将 Python 与 Hive 和 Pig 配合使用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Hive 和 Pig 非常适用于在 HDInsight 中处理数据，但有时你需要一种更通用的语言。Hive 和 Pig 都可让你使用各种编程语言创建用户定义的功能 (UDF)。在本文中，你将了解如何通过 Hive 和 Pig 使用 Python UDF。</source>
          <target state="new">Hive 和 Pig 非常适用于在 HDInsight 中处理数据，但有时你需要一种更通用的语言。Hive 和 Pig 都可让你使用各种编程语言创建用户定义的功能 (UDF)。在本文中，你将了解如何通过 Hive 和 Pig 使用 Python UDF。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 本文中的步骤适用于 HDInsight 群集版本 2.1、3.0、3.1 和 3.2。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 本文中的步骤适用于 HDInsight 群集版本 2.1、3.0、3.1 和 3.2。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>要求</source>
          <target state="new">要求</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>HDInsight 群集（基于 Windows）</source>
          <target state="new">HDInsight 群集（基于 Windows）</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>文本编辑器</source>
          <target state="new">文本编辑器</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="python"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>HDInsight 上的 Python</source>
          <target state="new"><ph id="ph1">&lt;a name="python"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>HDInsight 上的 Python</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>默认情况下，Python2.7 安装在 HDInsight 3.0 和更高版本的群集上。可以将 Hive 与此版本的 Python 配合使用，以进行流式处理（使用 STDOUT/STDIN 在 Hive 和 Python 之间传递数据）。</source>
          <target state="new">默认情况下，Python2.7 安装在 HDInsight 3.0 和更高版本的群集上。可以将 Hive 与此版本的 Python 配合使用，以进行流式处理（使用 STDOUT/STDIN 在 Hive 和 Python 之间传递数据）。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>HDInsight 还包含 Jython，后者是用 Java 编写的 Python 实现。Pig 无需采用流式处理即可知道如何与 Jython 通信，因此，在使用 Pig 时，Jython 是首选。</source>
          <target state="new">HDInsight 还包含 Jython，后者是用 Java 编写的 Python 实现。Pig 无需采用流式处理即可知道如何与 Jython 通信，因此，在使用 Pig 时，Jython 是首选。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="hivepython"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Hive 和 Python</source>
          <target state="new"><ph id="ph1">&lt;a name="hivepython"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Hive 和 Python</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>可以通过 HiveQL <bpt id="p1">**</bpt>TRANSFORM<ept id="p1">**</ept> 语句将 Python 用作 Hive 中的 UDF。例如，以下 HiveQL 将调用 <bpt id="p2">**</bpt>streaming.py<ept id="p2">**</ept> 文件中存储的 Python 脚本。</source>
          <target state="new">可以通过 HiveQL <bpt id="p1">**</bpt>TRANSFORM<ept id="p1">**</ept> 语句将 Python 用作 Hive 中的 UDF。例如，以下 HiveQL 将调用 <bpt id="p2">**</bpt>streaming.py<ept id="p2">**</ept> 文件中存储的 Python 脚本。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>基于 Windows 的 HDInsight</source>
          <target state="new">基于 Windows 的 HDInsight</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 在基于 Windows 的 HDInsight 群集上，<bpt id="p1">**</bpt>USING<ept id="p1">**</ept> 子句必须指定 python.exe 的完整路径。这始终是 <ph id="ph2">`D:\Python27\python.exe`</ph>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 在基于 Windows 的 HDInsight 群集上，<bpt id="p1">**</bpt>USING<ept id="p1">**</ept> 子句必须指定 python.exe 的完整路径。这始终是 <ph id="ph2">`D:\Python27\python.exe`</ph>。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>下面是本示例执行的操作：</source>
          <target state="new">下面是本示例执行的操作：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>文件开头的 <bpt id="p1">**</bpt>add file<ept id="p1">**</ept> 语句将 <bpt id="p2">**</bpt>streaming.py<ept id="p2">**</ept> 文件添加到分布式缓存，使群集中的所有节点都可访问该文件。</source>
          <target state="new">文件开头的 <bpt id="p1">**</bpt>add file<ept id="p1">**</ept> 语句将 <bpt id="p2">**</bpt>streaming.py<ept id="p2">**</ept> 文件添加到分布式缓存，使群集中的所有节点都可访问该文件。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SELECT TRANSFORM ...USING<ept id="p1">**</ept> 语句从 <bpt id="p2">**</bpt>hivesampletable<ept id="p2">**</ept> 中选择数据，并将 clientid、devicemake 和 devicemodel 传递到 <bpt id="p3">**</bpt>streaming.py<ept id="p3">**</ept> 脚本。</source>
          <target state="new"><bpt id="p1">**</bpt>SELECT TRANSFORM ...USING<ept id="p1">**</ept> 语句从 <bpt id="p2">**</bpt>hivesampletable<ept id="p2">**</ept> 中选择数据，并将 clientid、devicemake 和 devicemodel 传递到 <bpt id="p3">**</bpt>streaming.py<ept id="p3">**</ept> 脚本。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>AS<ept id="p1">**</ept> 子句描述从 <bpt id="p2">**</bpt>streaming.py<ept id="p2">**</ept> 返回的字段</source>
          <target state="new"><bpt id="p1">**</bpt>AS<ept id="p1">**</ept> 子句描述从 <bpt id="p2">**</bpt>streaming.py<ept id="p2">**</ept> 返回的字段</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>下面是该 HiveQL 示例使用的 <bpt id="p1">**</bpt>streaming.py<ept id="p1">**</ept> 文件。</source>
          <target state="new">下面是该 HiveQL 示例使用的 <bpt id="p1">**</bpt>streaming.py<ept id="p1">**</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>由于我们要使用流式处理，因此此脚本必须执行以下操作：</source>
          <target state="new">由于我们要使用流式处理，因此此脚本必须执行以下操作：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>从 STDIN 中读取数据。在本示例中，这是使用 <ph id="ph1">`sys.stdin.readline()`</ph> 来完成的。</source>
          <target state="new">从 STDIN 中读取数据。在本示例中，这是使用 <ph id="ph1">`sys.stdin.readline()`</ph> 来完成的。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>已使用 <ph id="ph1">`string.strip(line, "\n ")`</ph> 删除尾部的换行符，因为我们只需要文本数据，而不需要行尾指示符。</source>
          <target state="new">已使用 <ph id="ph1">`string.strip(line, "\n ")`</ph> 删除尾部的换行符，因为我们只需要文本数据，而不需要行尾指示符。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>执行流式处理时，一个行就包含了所有值，每两个值之间有一个制表符。因此，<ph id="ph1">`string.split(line, "\t")`</ph> 可用于在每个制表符处拆分输入，并只返回字段。</source>
          <target state="new">执行流式处理时，一个行就包含了所有值，每两个值之间有一个制表符。因此，<ph id="ph1">`string.split(line, "\t")`</ph> 可用于在每个制表符处拆分输入，并只返回字段。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在处理完成后，必须将输出以单行形式写入到 STDOUT，并在每两个字段之间提供一个制表符。这可以通过使用 <ph id="ph1">`print "\t".join([clientid, phone_label, hashlib.md5(phone_label).hexdigest()])`</ph> 来实现。</source>
          <target state="new">在处理完成后，必须将输出以单行形式写入到 STDOUT，并在每两个字段之间提供一个制表符。这可以通过使用 <ph id="ph1">`print "\t".join([clientid, phone_label, hashlib.md5(phone_label).hexdigest()])`</ph> 来实现。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>这全都发生在 <ph id="ph1">`while`</ph> 循环中，该循环将不断重复，直到不再读到任何 <ph id="ph2">`line`</ph> 为止，此时 <ph id="ph3">`break`</ph> 退出循环且脚本终止。</source>
          <target state="new">这全都发生在 <ph id="ph1">`while`</ph> 循环中，该循环将不断重复，直到不再读到任何 <ph id="ph2">`line`</ph> 为止，此时 <ph id="ph3">`break`</ph> 退出循环且脚本终止。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>除此之外，脚本只会连接 <ph id="ph1">`devicemake`</ph> 和 <ph id="ph2">`devicemodel`</ph> 的输入值，并计算连接值的哈希。很简单，但说明了从 Hive 调用的任何 Python 脚本工作原理的基本知识：循环，读取输入直到没有更多的输入，用制表符拆分每个输入行，处理，写入以制表符分隔的单行输出。</source>
          <target state="new">除此之外，脚本只会连接 <ph id="ph1">`devicemake`</ph> 和 <ph id="ph2">`devicemodel`</ph> 的输入值，并计算连接值的哈希。很简单，但说明了从 Hive 调用的任何 Python 脚本工作原理的基本知识：循环，读取输入直到没有更多的输入，用制表符拆分每个输入行，处理，写入以制表符分隔的单行输出。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>有关如何在 HDInsight 群集上运行此示例的信息，请参阅<bpt id="p1">[</bpt>运行示例<ept id="p1">](#running)</ept>。</source>
          <target state="new">有关如何在 HDInsight 群集上运行此示例的信息，请参阅<bpt id="p1">[</bpt>运行示例<ept id="p1">](#running)</ept>。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="pigpython"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Pig 和 Python</source>
          <target state="new"><ph id="ph1">&lt;a name="pigpython"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Pig 和 Python</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>在整个 <bpt id="p1">**</bpt>GENERATE<ept id="p1">**</ept> 语句中，Python 脚本可用作 Pig 中的 UDF。例如，以下示例使用 <bpt id="p2">**</bpt>jython.py<ept id="p2">**</ept> 文件中存储的 Python 脚本。</source>
          <target state="new">在整个 <bpt id="p1">**</bpt>GENERATE<ept id="p1">**</ept> 语句中，Python 脚本可用作 Pig 中的 UDF。例如，以下示例使用 <bpt id="p2">**</bpt>jython.py<ept id="p2">**</ept> 文件中存储的 Python 脚本。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>下面是此示例的工作原理：</source>
          <target state="new">下面是此示例的工作原理：</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>Jython<ept id="p1">**</ept> 注册包含 Python 脚本 (<bpt id="p2">**</bpt>jython.py<ept id="p2">**</ept>) 的文件，并将该脚本作为 <bpt id="p3">**</bpt>myfuncs<ept id="p3">**</ept> 公开给 Pig。Jython 是用 Java 编写的 Python 实现，可在 Pig 所在的同一个 Java 虚拟机中运行。这样，我们便可将 Python 脚本视为传统的函数调用，而不是对 Hive 使用的流式处理方法。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>Jython<ept id="p1">**</ept> 注册包含 Python 脚本 (<bpt id="p2">**</bpt>jython.py<ept id="p2">**</ept>) 的文件，并将该脚本作为 <bpt id="p3">**</bpt>myfuncs<ept id="p3">**</ept> 公开给 Pig。Jython 是用 Java 编写的 Python 实现，可在 Pig 所在的同一个 Java 虚拟机中运行。这样，我们便可将 Python 脚本视为传统的函数调用，而不是对 Hive 使用的流式处理方法。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>下一代码行将示例数据文件 <bpt id="p1">**</bpt>sample.log<ept id="p1">**</ept> 加载到 <bpt id="p2">**</bpt>LOGS<ept id="p2">**</ept> 中。由于此日志文件不包含一致的架构，因此它还将每条记录（在本例中为 <bpt id="p3">**</bpt>LINE<ept id="p3">**</ept>）定义为 <bpt id="p4">**</bpt>chararray<ept id="p4">**</ept>。简单而言，Chararray 就是一个字符串。</source>
          <target state="new">下一代码行将示例数据文件 <bpt id="p1">**</bpt>sample.log<ept id="p1">**</ept> 加载到 <bpt id="p2">**</bpt>LOGS<ept id="p2">**</ept> 中。由于此日志文件不包含一致的架构，因此它还将每条记录（在本例中为 <bpt id="p3">**</bpt>LINE<ept id="p3">**</ept>）定义为 <bpt id="p4">**</bpt>chararray<ept id="p4">**</ept>。简单而言，Chararray 就是一个字符串。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>第三个代码行筛选出所有 null 值，并将操作结果存储在 <bpt id="p1">**</bpt>LOG<ept id="p1">**</ept> 中。</source>
          <target state="new">第三个代码行筛选出所有 null 值，并将操作结果存储在 <bpt id="p1">**</bpt>LOG<ept id="p1">**</ept> 中。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>接下来，它将循环访问 <bpt id="p1">**</bpt>LOG<ept id="p1">**</ept> 中的记录，并使用 <bpt id="p2">**</bpt>GENERATE<ept id="p2">**</ept> 来调用作为 <bpt id="p3">**</bpt>myfuncs<ept id="p3">**</ept> 加载的 <bpt id="p4">**</bpt>jython.py<ept id="p4">**</ept> 脚本中包含的 <bpt id="p5">**</bpt>create\_structure<ept id="p5">**</ept> 方法。<bpt id="p6">**</bpt>LINE<ept id="p6">**</ept> 用于将当前记录传递给函数。</source>
          <target state="new">接下来，它将循环访问 <bpt id="p1">**</bpt>LOG<ept id="p1">**</ept> 中的记录，并使用 <bpt id="p2">**</bpt>GENERATE<ept id="p2">**</ept> 来调用作为 <bpt id="p3">**</bpt>myfuncs<ept id="p3">**</ept> 加载的 <bpt id="p4">**</bpt>jython.py<ept id="p4">**</ept> 脚本中包含的 <bpt id="p5">**</bpt>create\_structure<ept id="p5">**</ept> 方法。<bpt id="p6">**</bpt>LINE<ept id="p6">**</ept> 用于将当前记录传递给函数。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>最后，使用 <bpt id="p1">**</bpt>DUMP<ept id="p1">**</ept> 命令将输出转储到 STDOUT。这只是为了在完成操作后立即显示结果；在实际脚本中，你通常会使用 <bpt id="p2">**</bpt>STORE<ept id="p2">**</ept> 将数据存储到新文件中。</source>
          <target state="new">最后，使用 <bpt id="p1">**</bpt>DUMP<ept id="p1">**</ept> 命令将输出转储到 STDOUT。这只是为了在完成操作后立即显示结果；在实际脚本中，你通常会使用 <bpt id="p2">**</bpt>STORE<ept id="p2">**</ept> 将数据存储到新文件中。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>下面是该 Pig 示例使用的 <bpt id="p1">**</bpt>jython.py<ept id="p1">**</ept> 文件：</source>
          <target state="new">下面是该 Pig 示例使用的 <bpt id="p1">**</bpt>jython.py<ept id="p1">**</ept> 文件：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>还记得吗？我们前面只是将 <bpt id="p1">**</bpt>LINE<ept id="p1">**</ept> 输入定义为 chararray，因为输入没有一致的架构。 <bpt id="p2">**</bpt>jython.py<ept id="p2">**</ept> 的任务是将数据转换成用于输出的一致架构。其工作方式如下所述：</source>
          <target state="new">还记得吗？我们前面只是将 <bpt id="p1">**</bpt>LINE<ept id="p1">**</ept> 输入定义为 chararray，因为输入没有一致的架构。 <bpt id="p2">**</bpt>jython.py<ept id="p2">**</ept> 的任务是将数据转换成用于输出的一致架构。其工作方式如下所述：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>@outputSchema<ept id="p1">**</ept> 语句定义要返回到 Pig 的数据的格式。在本例中，该格式为<bpt id="p2">**</bpt>数据袋<ept id="p2">**</ept>，这是一种 Pig 数据类型。该数据袋包含以下字段，所有这些字段都是 chararray（字符串）：</source>
          <target state="new"><bpt id="p1">**</bpt>@outputSchema<ept id="p1">**</ept> 语句定义要返回到 Pig 的数据的格式。在本例中，该格式为<bpt id="p2">**</bpt>数据袋<ept id="p2">**</ept>，这是一种 Pig 数据类型。该数据袋包含以下字段，所有这些字段都是 chararray（字符串）：</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>date - 创建日志条目的日期</source>
          <target state="new">date - 创建日志条目的日期</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>time - 创建日志条目的时间</source>
          <target state="new">time - 创建日志条目的时间</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>classname - 为其创建该条目的类名</source>
          <target state="new">classname - 为其创建该条目的类名</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>level - 日志级别</source>
          <target state="new">level - 日志级别</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>detail - 日志条目的详细信息</source>
          <target state="new">detail - 日志条目的详细信息</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>接下来，<bpt id="p1">**</bpt>def create\_structure(input)<ept id="p1">**</ept> 将定义 Pig 要将行项传递到的函数。</source>
          <target state="new">接下来，<bpt id="p1">**</bpt>def create\_structure(input)<ept id="p1">**</ept> 将定义 Pig 要将行项传递到的函数。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>示例数据 <bpt id="p1">**</bpt>sample.log<ept id="p1">**</ept> 基本上符合我们要返回的日期、时间、类名、级别和详细信息架构。但是，它还包含了一些以字符串“<bpt id="p2">*</bpt>java.lang.Exception<ept id="p2">*</ept>”开头的行，我们需要修改这些行，使之与架构匹配。<bpt id="p3">**</bpt>if<ept id="p3">**</ept> 语句将检查这些行，然后调整输入数据以将“<bpt id="p4">*</bpt>java.lang.Exception<ept id="p4">*</ept>”字符串移到末尾，使数据与预期的输出架构相一致。</source>
          <target state="new">示例数据 <bpt id="p1">**</bpt>sample.log<ept id="p1">**</ept> 基本上符合我们要返回的日期、时间、类名、级别和详细信息架构。但是，它还包含了一些以字符串“<bpt id="p2">*</bpt>java.lang.Exception<ept id="p2">*</ept>”开头的行，我们需要修改这些行，使之与架构匹配。<bpt id="p3">**</bpt>if<ept id="p3">**</ept> 语句将检查这些行，然后调整输入数据以将“<bpt id="p4">*</bpt>java.lang.Exception<ept id="p4">*</ept>”字符串移到末尾，使数据与预期的输出架构相一致。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>接下来，使用 <bpt id="p1">**</bpt>split<ept id="p1">**</ept> 命令在前四个空格字符处拆分数据。这将生成五个值，它们将分配到“日期”、“时间”、“类名”、“级别”和“详细信息”。</source>
          <target state="new">接下来，使用 <bpt id="p1">**</bpt>split<ept id="p1">**</ept> 命令在前四个空格字符处拆分数据。这将生成五个值，它们将分配到“日期”、“时间”、“类名”、“级别”和“详细信息”。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>最后，将值返回到 Pig。</source>
          <target state="new">最后，将值返回到 Pig。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>当数据返回到 Pig 时，其架构将与 <bpt id="p1">**</bpt>@outputSchema<ept id="p1">**</ept> 语句中的定义一致。</source>
          <target state="new">当数据返回到 Pig 时，其架构将与 <bpt id="p1">**</bpt>@outputSchema<ept id="p1">**</ept> 语句中的定义一致。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="running"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>运行示例</source>
          <target state="new"><ph id="ph1">&lt;a name="running"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>运行示例</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>如果使用的是基于 Windows 的 HDInsight 群集和 Windows 客户端，请使用 <bpt id="p1">**</bpt>PowerShell<ept id="p1">**</ept> 步骤。</source>
          <target state="new">如果使用的是基于 Windows 的 HDInsight 群集和 Windows 客户端，请使用 <bpt id="p1">**</bpt>PowerShell<ept id="p1">**</ept> 步骤。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Hive</source>
          <target state="new">Hive</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>使用 <ph id="ph1">`hive`</ph> 命令来启动 hive shell。在 shell 加载后，你应会看到 <ph id="ph2">`hive&gt;`</ph> 提示符。</source>
          <target state="new">使用 <ph id="ph1">`hive`</ph> 命令来启动 hive shell。在 shell 加载后，你应会看到 <ph id="ph2">`hive&gt;`</ph> 提示符。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`hive&gt;`</ph> 提示符下输入以下命令。</source>
          <target state="new">在 <ph id="ph1">`hive&gt;`</ph> 提示符下输入以下命令。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>在输入最后一行后，该作业应该启动。最终，它将返回类似于以下内容的输出。</source>
          <target state="new">在输入最后一行后，该作业应该启动。最终，它将返回类似于以下内容的输出。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Pig</source>
          <target state="new">Pig</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>使用 <ph id="ph1">`pig`</ph> 命令来启动该 shell。在 shell 加载后，你应会看到 <ph id="ph2">`grunt&gt;`</ph> 提示符。</source>
          <target state="new">使用 <ph id="ph1">`pig`</ph> 命令来启动该 shell。在 shell 加载后，你应会看到 <ph id="ph2">`grunt&gt;`</ph> 提示符。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`grunt&gt;`</ph> 提示符下输入以下语句。</source>
          <target state="new">在 <ph id="ph1">`grunt&gt;`</ph> 提示符下输入以下语句。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>在输入以下行后，作业应会启动。最终，它将返回类似于以下内容的输出。</source>
          <target state="new">在输入以下行后，作业应会启动。最终，它将返回类似于以下内容的输出。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>PowerShell</source>
          <target state="new">PowerShell</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>这些步骤使用 Azure PowerShell。如果尚未在开发计算机上安装并配置 Azure PowerShell，请在使用以下步骤之前，参阅<bpt id="p1">[</bpt>如何安装和配置 Azure PowerShell<ept id="p1">](/documentation/articles/powershell-install-configure)</ept>。</source>
          <target state="new">这些步骤使用 Azure PowerShell。如果尚未在开发计算机上安装并配置 Azure PowerShell，请在使用以下步骤之前，参阅<bpt id="p1">[</bpt>如何安装和配置 Azure PowerShell<ept id="p1">](/documentation/articles/powershell-install-configure)</ept>。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>使用 Python 示例 <bpt id="p1">[</bpt>streaming.py<ept id="p1">](#streamingpy)</ept> 和 <bpt id="p2">[</bpt>jython.py<ept id="p2">](#jythonpy)</ept> 创建开发计算机上的文件的本地副本。</source>
          <target state="new">使用 Python 示例 <bpt id="p1">[</bpt>streaming.py<ept id="p1">](#streamingpy)</ept> 和 <bpt id="p2">[</bpt>jython.py<ept id="p2">](#jythonpy)</ept> 创建开发计算机上的文件的本地副本。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>使用以下 PowerShell 脚本将 <bpt id="p1">**</bpt>streaming.py<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>jython.py<ept id="p2">**</ept> 文件上载到服务器。在脚本的前三行中替换为你的 Azure HDInsight 群集的名称，并替换为 <bpt id="p3">**</bpt>streaming.py<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>jython.py<ept id="p4">**</ept> 文件的路径。</source>
          <target state="new">使用以下 PowerShell 脚本将 <bpt id="p1">**</bpt>streaming.py<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>jython.py<ept id="p2">**</ept> 文件上载到服务器。在脚本的前三行中替换为你的 Azure HDInsight 群集的名称，并替换为 <bpt id="p3">**</bpt>streaming.py<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>jython.py<ept id="p4">**</ept> 文件的路径。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>此脚本将检索 HDInsight 群集的信息，然后提取默认存储帐户的名称和密钥，并将文件上载到容器的根目录。</source>
          <target state="new">此脚本将检索 HDInsight 群集的信息，然后提取默认存储帐户的名称和密钥，并将文件上载到容器的根目录。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> <bpt id="p1">[</bpt>在 HDInsight 中上载 Hadoop 作业的数据<ept id="p1">](/documentation/articles/hdinsight-upload-data)</ept>文档中介绍了上载脚本的其他方法。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> <bpt id="p1">[</bpt>在 HDInsight 中上载 Hadoop 作业的数据<ept id="p1">](/documentation/articles/hdinsight-upload-data)</ept>文档中介绍了上载脚本的其他方法。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>上载文件后，使用以下 PowerShell 脚本启动作业。在完成作业时，会将输出写入到 PowerShell 控制台。</source>
          <target state="new">上载文件后，使用以下 PowerShell 脚本启动作业。在完成作业时，会将输出写入到 PowerShell 控制台。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Hive</source>
          <target state="new">Hive</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Hive<ept id="p1">**</ept> 作业的输出应该如下所示：</source>
          <target state="new"><bpt id="p1">**</bpt>Hive<ept id="p1">**</ept> 作业的输出应该如下所示：</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Pig</source>
          <target state="new">Pig</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Pig<ept id="p1">**</ept> 作业的输出应该如下所示：</source>
          <target state="new"><bpt id="p1">**</bpt>Pig<ept id="p1">**</ept> 作业的输出应该如下所示：</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="troubleshooting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>故障排除</source>
          <target state="new"><ph id="ph1">&lt;a name="troubleshooting"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>故障排除</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>运行作业时出现错误</source>
          <target state="new">运行作业时出现错误</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>在运行 hive 作业时，你可能会遇到如下错误：</source>
          <target state="new">在运行 hive 作业时，你可能会遇到如下错误：</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>此问题可能是由 streaming.py 文件中的行尾结束符号导致的。许多 Windows 编辑器默认为使用 CRLF 作为行尾结束符号，但 Linux 应用程序通常应使用 LF。</source>
          <target state="new">此问题可能是由 streaming.py 文件中的行尾结束符号导致的。许多 Windows 编辑器默认为使用 CRLF 作为行尾结束符号，但 Linux 应用程序通常应使用 LF。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>如果你使用的编辑器无法创建 LF 行尾结束符号，或者不确定要使用什么行尾结束符号，在将文件上载到 HDInsight 之前，请使用以下 PowerShell 语句删除 CR 字符：</source>
          <target state="new">如果你使用的编辑器无法创建 LF 行尾结束符号，或者不确定要使用什么行尾结束符号，在将文件上载到 HDInsight 之前，请使用以下 PowerShell 语句删除 CR 字符：</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>PowerShell 脚本</source>
          <target state="new">PowerShell 脚本</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>用于运行示例的两个示例 PowerShell 脚本都包含一个带注释的行，该行将显示作业的错误输出。如果你未看到作业的预期输出，请取消注释以下行，并查看错误信息中是否指明了问题。</source>
          <target state="new">用于运行示例的两个示例 PowerShell 脚本都包含一个带注释的行，该行将显示作业的错误输出。如果你未看到作业的预期输出，请取消注释以下行，并查看错误信息中是否指明了问题。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>错误信息 (STDERR) 和作业的结果 (STDOUT) 还会记录到群集默认 Blob 容器中的以下位置。</source>
          <target state="new">错误信息 (STDERR) 和作业的结果 (STDOUT) 还会记录到群集默认 Blob 容器中的以下位置。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>对于此作业...</source>
          <target state="new">对于此作业...</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>在 Blob 容器中查看这些文件</source>
          <target state="new">在 Blob 容器中查看这些文件</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Hive</source>
          <target state="new">Hive</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>/HivePython/stderr</source>
          <target state="new">/HivePython/stderr</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>/HivePython/stdout</source>
          <target state="new">/HivePython/stdout</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Pig</source>
          <target state="new">Pig</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>/PigPython/stderr</source>
          <target state="new">/PigPython/stderr</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>/PigPython/stdout</source>
          <target state="new">/PigPython/stdout</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="next"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</source>
          <target state="new"><ph id="ph1">&lt;a name="next"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>如果需要加载默认情况下未提供的 Python 模块，请参阅<bpt id="p1">[</bpt>如何将模块部署到 Azure HDInsight<ept id="p1">](http://blogs.msdn.com/b/benjguin/archive/2014/03/03/how-to-deploy-a-python-module-to-windows-azure-hdinsight.aspx)</ept>，以获取有关如何执行此操作的示例。</source>
          <target state="new">如果需要加载默认情况下未提供的 Python 模块，请参阅<bpt id="p1">[</bpt>如何将模块部署到 Azure HDInsight<ept id="p1">](http://blogs.msdn.com/b/benjguin/archive/2014/03/03/how-to-deploy-a-python-module-to-windows-azure-hdinsight.aspx)</ept>，以获取有关如何执行此操作的示例。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>若要了解使用 Pig、Hive 的其他方式以及如何使用 MapReduce，请参阅以下内容。</source>
          <target state="new">若要了解使用 Pig、Hive 的其他方式以及如何使用 MapReduce，请参阅以下内容。</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>将 Hive 与 HDInsight 配合使用</source>
          <target state="new">将 Hive 与 HDInsight 配合使用</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>将 Pig 与 HDInsight 配合使用</source>
          <target state="new">将 Pig 与 HDInsight 配合使用</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>将 MapReduce 与 HDInsight 配合使用</source>
          <target state="new">将 MapReduce 与 HDInsight 配合使用</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>