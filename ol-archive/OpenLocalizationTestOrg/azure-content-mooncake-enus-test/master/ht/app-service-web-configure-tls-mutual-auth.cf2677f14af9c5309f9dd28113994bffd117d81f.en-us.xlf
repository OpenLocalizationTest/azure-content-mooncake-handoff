<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a33df302eb987679071f37ddbca6704ec93cceff</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何为 Web 应用配置 TLS 相互身份验证</source>
          <target state="new">如何为 Web 应用配置 TLS 相互身份验证</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何将 Web 应用配置为使用 TLS 客户端证书身份验证。</source>
          <target state="new">了解如何将 Web 应用配置为使用 TLS 客户端证书身份验证。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何为 Web 应用配置 TLS 相互身份验证</source>
          <target state="new">如何为 Web 应用配置 TLS 相互身份验证</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>通过为 Azure Web 应用启用不同类型的身份验证可以限制对网站的访问。执行此操作的方法之一是在通过 TLS/SSL 发送请求时使用客户端证书进行身份验证。此机制称为 TLS 相互身份验证或客户端证书身份验证，本文将详细说明如何将 Web 应用设置为使用客户端证书身份验证。</source>
          <target state="new">通过为 Azure Web 应用启用不同类型的身份验证可以限制对网站的访问。执行此操作的方法之一是在通过 TLS/SSL 发送请求时使用客户端证书进行身份验证。此机制称为 TLS 相互身份验证或客户端证书身份验证，本文将详细说明如何将 Web 应用设置为使用客户端证书身份验证。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>将 Web 应用配置为使用客户端证书身份验证</source>
          <target state="new">将 Web 应用配置为使用客户端证书身份验证</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>若要将 Web 应用设置为要求使用客户端证书，你需要为 Web 应用添加 clientCertEnabled 站点设置并将该设置指定为 true。目前无法通过门户中的管理体验进行此设置，你需要使用 REST API 来实现此目的。</source>
          <target state="new">若要将 Web 应用设置为要求使用客户端证书，你需要为 Web 应用添加 clientCertEnabled 站点设置并将该设置指定为 true。目前无法通过门户中的管理体验进行此设置，你需要使用 REST API 来实现此目的。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>你可以使用 <bpt id="p1">[</bpt>ARMClient 工具<ept id="p1">](https://github.com/projectkudu/ARMClient)</ept>轻松创建 REST API 调用。使用该工具登录之后，需要发出以下命令：</source>
          <target state="new">你可以使用 <bpt id="p1">[</bpt>ARMClient 工具<ept id="p1">](https://github.com/projectkudu/ARMClient)</ept>轻松创建 REST API 调用。使用该工具登录之后，需要发出以下命令：</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 使用 <ph id="ph2">`ARMClient.exe login [environment name]`</ph> 登陆时， <ph id="ph3">`[environment name]`</ph> 应为 <ph id="ph4">`MOONCAKE`</ph>。也就是说，完成登陆 Azure 中国的命令为 <ph id="ph5">`ARMClient.exe login MOONCAKE`</ph>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 使用 <ph id="ph2">`ARMClient.exe login [environment name]`</ph> 登陆时， <ph id="ph3">`[environment name]`</ph> 应为 <ph id="ph4">`MOONCAKE`</ph>。也就是说，完成登陆 Azure 中国的命令为 <ph id="ph5">`ARMClient.exe login MOONCAKE`</ph>。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>将 {} 中的所有内容替换为 Web 应用的信息，并创建包含以下 JSON 内容的 enableclientcert.json 文件：</source>
          <target state="new">将 {} 中的所有内容替换为 Web 应用的信息，并创建包含以下 JSON 内容的 enableclientcert.json 文件：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>确保将“location”的值更改为 Web 应用所在的位置，例如 China North 或 China East。</source>
          <target state="new">确保将“location”的值更改为 Web 应用所在的位置，例如 China North 或 China East。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>从 Web 应用访问客户端证书</source>
          <target state="new">从 Web 应用访问客户端证书</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>将 Web 应用配置为使用客户端证书身份验证后，可以通过“X-ARR-ClientCert”请求标头中的 base64 编码值在应用中使用客户端证书。应用程序可以基于此值创建证书，然后将它用于应用程序中的身份验证和授权。</source>
          <target state="new">将 Web 应用配置为使用客户端证书身份验证后，可以通过“X-ARR-ClientCert”请求标头中的 base64 编码值在应用中使用客户端证书。应用程序可以基于此值创建证书，然后将它用于应用程序中的身份验证和授权。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>有关证书验证的特殊注意事项</source>
          <target state="new">有关证书验证的特殊注意事项</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Azure Web Apps 平台不会针对发送到应用程序的客户端证书进行任何验证。验证此证书是 Web 应用的责任。下面是为了进行身份验证而验证证书属性的示例 ASP.NET 代码。</source>
          <target state="new">Azure Web Apps 平台不会针对发送到应用程序的客户端证书进行任何验证。验证此证书是 Web 应用的责任。下面是为了进行身份验证而验证证书属性的示例 ASP.NET 代码。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>