<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bedb56cf9687983fc1fed71f30d112b0bb0ea78</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>通过 .NET 开始使用 Azure 表存储 | Azure</source>
          <target state="new">通过 .NET 开始使用 Azure 表存储 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>使用 Azure 表存储和 Microsoft 的 NoSQL 数据存储将非结构化的数据存储在云中。立即开始使用简单的表存储操作，包括创建和删除表和插入、更新、删除和查询数据。</source>
          <target state="new">使用 Azure 表存储和 Microsoft 的 NoSQL 数据存储将非结构化的数据存储在云中。立即开始使用简单的表存储操作，包括创建和删除表和插入、更新、删除和查询数据。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>通过 .NET 开始使用 Azure 表存储</source>
          <target state="new">通过 .NET 开始使用 Azure 表存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure 表存储是一种将非结构化的 NoSQL 数据存储在云中的服务。表存储是采用无架构设计的键/属性存储。因为表存储无架构，因此可以很容易地随着你的应用程序需求的发展使数据适应存储。对于所有类型的应用程序，都可以快速并经济高效地访问数据。对于相似的数据量，表存储的成本通常显著低于传统的 SQL。</source>
          <target state="new">Azure 表存储是一种将非结构化的 NoSQL 数据存储在云中的服务。表存储是采用无架构设计的键/属性存储。因为表存储无架构，因此可以很容易地随着你的应用程序需求的发展使数据适应存储。对于所有类型的应用程序，都可以快速并经济高效地访问数据。对于相似的数据量，表存储的成本通常显著低于传统的 SQL。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>你可以使用表存储来存储灵活的数据集，例如 Web 应用程序的用户数据、通讯簿、设备信息，以及你的服务需要的任何其他类型的元数据。可以在表中存储任意数量的实体，并且一个存储帐户可以包含任意数量的表，直至达到存储帐户的容量极限。</source>
          <target state="new">你可以使用表存储来存储灵活的数据集，例如 Web 应用程序的用户数据、通讯簿、设备信息，以及你的服务需要的任何其他类型的元数据。可以在表中存储任意数量的实体，并且一个存储帐户可以包含任意数量的表，直至达到存储帐户的容量极限。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>本教程演示如何对使用 Azure 表存储的某些常见情形（包括创建和删除表和插入、更新、删除和查询表数据）编写 .NET 代码。</source>
          <target state="new">本教程演示如何对使用 Azure 表存储的某些常见情形（包括创建和删除表和插入、更新、删除和查询表数据）编写 .NET 代码。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>以编程方式访问表存储</source>
          <target state="new">以编程方式访问表存储</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>命名空间声明</source>
          <target state="new">命名空间声明</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>在您希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。</source>
          <target state="new">在您希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>确保你引用 <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。</source>
          <target state="new">确保你引用 <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>创建表</source>
          <target state="new">创建表</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>利用 <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> 对象，您可以获得表和实体的引用对象。以下代码将创建 <bpt id="p2">**</bpt>CloudTableClient<ept id="p2">**</ept> 对象并使用它创建新表。本文中的所有代码假定将构建的应用程序是 Azure 云服务项目，并且使用存储在 Azure 应用程序的服务配置中的存储连接字符串。</source>
          <target state="new">利用 <bpt id="p1">**</bpt>CloudTableClient<ept id="p1">**</ept> 对象，您可以获得表和实体的引用对象。以下代码将创建 <bpt id="p2">**</bpt>CloudTableClient<ept id="p2">**</ept> 对象并使用它创建新表。本文中的所有代码假定将构建的应用程序是 Azure 云服务项目，并且使用存储在 Azure 应用程序的服务配置中的存储连接字符串。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>将实体添加到表</source>
          <target state="new">将实体添加到表</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>实体使用派生自 <bpt id="p1">**</bpt>TableEntity<ept id="p1">**</ept> 的自定义类映射到 C# 对象。若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义将客户的名字和姓氏分别用作行键和分区键的实体类。实体的分区键和行键共同唯一地标识表中的实体。查询分区键相同的实体的速度快于查询分区键不同的实体的速度，但使用不同的分区键可实现更高的并行操作可伸缩性。对于应存储在表服务中的任何属性，该属性必须是公开 <ph id="ph1">`get`</ph> 和 <ph id="ph2">`set`</ph> 的受支持类型的公共属性。此外，你的实体类型 <bpt id="p2">*</bpt>必须<ept id="p2">*</ept> 公开不带参数的构造函数。</source>
          <target state="new">实体使用派生自 <bpt id="p1">**</bpt>TableEntity<ept id="p1">**</ept> 的自定义类映射到 C# 对象。若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义将客户的名字和姓氏分别用作行键和分区键的实体类。实体的分区键和行键共同唯一地标识表中的实体。查询分区键相同的实体的速度快于查询分区键不同的实体的速度，但使用不同的分区键可实现更高的并行操作可伸缩性。对于应存储在表服务中的任何属性，该属性必须是公开 <ph id="ph1">`get`</ph> 和 <ph id="ph2">`set`</ph> 的受支持类型的公共属性。此外，你的实体类型 <bpt id="p2">*</bpt>必须<ept id="p2">*</ept> 公开不带参数的构造函数。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>涉及实体的表操作通过你先前在“创建表”部分中创建的 <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> 对象执行。用一个 <bpt id="p2">**</bpt>TableOperation<ept id="p2">**</ept> 对象表示要执行的操作。以下代码示例演示如何创建 <bpt id="p3">**</bpt>CloudTable<ept id="p3">**</ept> 对象以及 <bpt id="p4">**</bpt>CustomerEntity<ept id="p4">**</ept> 对象。为准备此操作，会创建一个 <bpt id="p5">**</bpt>TableOperation<ept id="p5">**</ept> 对象以将客户实体插入该表中。最后，通过调用 <bpt id="p6">**</bpt>CloudTable.Execute<ept id="p6">**</ept> 执行此操作。</source>
          <target state="new">涉及实体的表操作通过你先前在“创建表”部分中创建的 <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> 对象执行。用一个 <bpt id="p2">**</bpt>TableOperation<ept id="p2">**</ept> 对象表示要执行的操作。以下代码示例演示如何创建 <bpt id="p3">**</bpt>CloudTable<ept id="p3">**</ept> 对象以及 <bpt id="p4">**</bpt>CustomerEntity<ept id="p4">**</ept> 对象。为准备此操作，会创建一个 <bpt id="p5">**</bpt>TableOperation<ept id="p5">**</ept> 对象以将客户实体插入该表中。最后，通过调用 <bpt id="p6">**</bpt>CloudTable.Execute<ept id="p6">**</ept> 执行此操作。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>插入一批实体</source>
          <target state="new">插入一批实体</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>你可以通过一次写入操作将一批实体插入表中。批处理操作的一些其他注意事项：</source>
          <target state="new">你可以通过一次写入操作将一批实体插入表中。批处理操作的一些其他注意事项：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>你可以在同一批处理操作中执行更新、删除和插入操作。</source>
          <target state="new">你可以在同一批处理操作中执行更新、删除和插入操作。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>单个批处理操作最多可包含 100 个实体。</source>
          <target state="new">单个批处理操作最多可包含 100 个实体。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>单次批处理操作中的所有实体都必须具有相同的分区键。</source>
          <target state="new">单次批处理操作中的所有实体都必须具有相同的分区键。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>虽然可以将某个查询作为批处理操作执行，但该操作必须是批处理中仅有的操作。</source>
          <target state="new">虽然可以将某个查询作为批处理操作执行，但该操作必须是批处理中仅有的操作。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>以下代码示例创建两个实体对象，并使用 <bpt id="p1">**</bpt>Insert<ept id="p1">**</ept> 方法将其中每个对象都添加到 <bpt id="p2">**</bpt>TableBatchOperation<ept id="p2">**</ept> 中。然后调用 <bpt id="p3">**</bpt>CloudTable.Execute<ept id="p3">**</ept> 以执行此操作。</source>
          <target state="new">以下代码示例创建两个实体对象，并使用 <bpt id="p1">**</bpt>Insert<ept id="p1">**</ept> 方法将其中每个对象都添加到 <bpt id="p2">**</bpt>TableBatchOperation<ept id="p2">**</ept> 中。然后调用 <bpt id="p3">**</bpt>CloudTable.Execute<ept id="p3">**</ept> 以执行此操作。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>检索分区中的所有实体</source>
          <target state="new">检索分区中的所有实体</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>若要查询表以获取分区中的所有实体，请使用 <bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。</source>
          <target state="new">若要查询表以获取分区中的所有实体，请使用 <bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>检索分区中的一部分实体</source>
          <target state="new">检索分区中的一部分实体</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>如果不想查询分区中的所有实体，则可以通过结合使用分区键筛选器与行键筛选器来指定一个范围。以下代码示例使用两个筛选器来获取分区“Smith”中的、行键（名字）以字母“E”前面的字母开头的所有实体，然后输出查询结果。</source>
          <target state="new">如果不想查询分区中的所有实体，则可以通过结合使用分区键筛选器与行键筛选器来指定一个范围。以下代码示例使用两个筛选器来获取分区“Smith”中的、行键（名字）以字母“E”前面的字母开头的所有实体，然后输出查询结果。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>检索单个实体</source>
          <target state="new">检索单个实体</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>你可以编写查询以检索单个特定实体。以下代码使用 <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> 来指定客户“Ben Smith”。此方法仅返回一个实体，而不是一个集合，并且 <bpt id="p2">**</bpt>TableResult.Result<ept id="p2">**</ept> 中的返回值是一个 <bpt id="p3">**</bpt>CustomerEntity<ept id="p3">**</ept> 对象。在查询中指定分区键和行键是从表服务中检索单个实体的最快方法。</source>
          <target state="new">你可以编写查询以检索单个特定实体。以下代码使用 <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> 来指定客户“Ben Smith”。此方法仅返回一个实体，而不是一个集合，并且 <bpt id="p2">**</bpt>TableResult.Result<ept id="p2">**</ept> 中的返回值是一个 <bpt id="p3">**</bpt>CustomerEntity<ept id="p3">**</ept> 对象。在查询中指定分区键和行键是从表服务中检索单个实体的最快方法。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>替换实体</source>
          <target state="new">替换实体</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>若要更新实体，请从表服务中检索它，修改实体对象，然后将更改保存回表服务。以下代码将更改现有客户的电话号码。此代码使用 <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept>，而不是调用 <bpt id="p2">**</bpt>Insert<ept id="p2">**</ept>。这将导致在服务器上完全替换该实体，除非服务器上的该实体自检索到它以后发生更改，在此情况下，该操作将失败。操作失败将防止你的应用程序无意中覆盖应用程序的其他组件在检索与更新之间所做的更改。正确处理此失败问题的方法是再次检索实体，进行更改（如果仍有效），然后再次执行 <bpt id="p3">**</bpt>Replace<ept id="p3">**</ept> 操作。下一节将为你演示如何重写此行为。</source>
          <target state="new">若要更新实体，请从表服务中检索它，修改实体对象，然后将更改保存回表服务。以下代码将更改现有客户的电话号码。此代码使用 <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept>，而不是调用 <bpt id="p2">**</bpt>Insert<ept id="p2">**</ept>。这将导致在服务器上完全替换该实体，除非服务器上的该实体自检索到它以后发生更改，在此情况下，该操作将失败。操作失败将防止你的应用程序无意中覆盖应用程序的其他组件在检索与更新之间所做的更改。正确处理此失败问题的方法是再次检索实体，进行更改（如果仍有效），然后再次执行 <bpt id="p3">**</bpt>Replace<ept id="p3">**</ept> 操作。下一节将为你演示如何重写此行为。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>插入或替换实体</source>
          <target state="new">插入或替换实体</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>如果该实体自从服务器中检索到它以后发生更改，则 <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> 操作将失败。此外，必须首先从服务器中检索该实体，<bpt id="p2">**</bpt>Replace<ept id="p2">**</ept> 操作才能成功。但是，有时你不知道服务器上是否存在该实体以及存储在其中的当前值是否无关。更新操作会将其全部覆盖。为此，你应使用 <bpt id="p3">**</bpt>InsertOrReplace<ept id="p3">**</ept> 操作。如果该实体不存在，此操作将插入它，如果存在，则替换它，而不管上次更新是何时进行的。在以下代码示例中，仍将检索 Ben Smith 的客户实体，但稍后会使用 <bpt id="p4">**</bpt>InsertOrReplace<ept id="p4">**</ept> 将其保存回服务器。将覆盖在检索与更新操作之间对实体进行的任何更新。</source>
          <target state="new">如果该实体自从服务器中检索到它以后发生更改，则 <bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> 操作将失败。此外，必须首先从服务器中检索该实体，<bpt id="p2">**</bpt>Replace<ept id="p2">**</ept> 操作才能成功。但是，有时你不知道服务器上是否存在该实体以及存储在其中的当前值是否无关。更新操作会将其全部覆盖。为此，你应使用 <bpt id="p3">**</bpt>InsertOrReplace<ept id="p3">**</ept> 操作。如果该实体不存在，此操作将插入它，如果存在，则替换它，而不管上次更新是何时进行的。在以下代码示例中，仍将检索 Ben Smith 的客户实体，但稍后会使用 <bpt id="p4">**</bpt>InsertOrReplace<ept id="p4">**</ept> 将其保存回服务器。将覆盖在检索与更新操作之间对实体进行的任何更新。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>查询一部分实体属性</source>
          <target state="new">查询一部分实体属性</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>表查询可以只检索实体中的少数几个属性而不是所有实体属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。以下代码中的查询只返回表中实体的电子邮件地址。这可通过使用 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>EntityResolver<ept id="p2">**</ept> 的查询来实现。你可以在[“Upsert 和查询投影介绍”博客文章][]中更加详细地了解投影。注意，本地存储模拟器不支持投影，因此，此代码仅在使用表服务中的帐户时才能运行。</source>
          <target state="new">表查询可以只检索实体中的少数几个属性而不是所有实体属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。以下代码中的查询只返回表中实体的电子邮件地址。这可通过使用 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>EntityResolver<ept id="p2">**</ept> 的查询来实现。你可以在[“Upsert 和查询投影介绍”博客文章][]中更加详细地了解投影。注意，本地存储模拟器不支持投影，因此，此代码仅在使用表服务中的帐户时才能运行。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>删除实体</source>
          <target state="new">删除实体</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>在检索实体之后，可使用更新实体的相同演示模式轻松删除该实体。以下代码检索并删除一个客户实体。</source>
          <target state="new">在检索实体之后，可使用更新实体的相同演示模式轻松删除该实体。以下代码检索并删除一个客户实体。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>删除表</source>
          <target state="new">删除表</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>最后，以下代码示例将从存储帐户中删除表。在删除表之后的一段时间内无法重新创建它。</source>
          <target state="new">最后，以下代码示例将从存储帐户中删除表。在删除表之后的一段时间内无法重新创建它。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>以异步方式检索页中的实体</source>
          <target state="new">以异步方式检索页中的实体</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>如果你正在读取大量实体，并且想要在检索进行时处理/显示实体，而非等待返回全部实体，则可以通过使用分段查询检索实体。此示例显示如何通过 Async-Await 模式以页面形式返回结果，这样就不会在等待返回大量结果时阻止操作的执行。有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 <bpt id="p1">[</bpt>使用 Async 和 Await 进行异步编程（C# 和 Visual Basic）<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。</source>
          <target state="new">如果你正在读取大量实体，并且想要在检索进行时处理/显示实体，而非等待返回全部实体，则可以通过使用分段查询检索实体。此示例显示如何通过 Async-Await 模式以页面形式返回结果，这样就不会在等待返回大量结果时阻止操作的执行。有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 <bpt id="p1">[</bpt>使用 Async 和 Await 进行异步编程（C# 和 Visual Basic）<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>现在，你已了解有关表存储的基础知识，请按照下面的链接了解更复杂的存储任务：</source>
          <target state="new">现在，你已了解有关表存储的基础知识，请按照下面的链接了解更复杂的存储任务：</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>查看表服务参考文档，了解有关可用 API 的完整详情：</source>
          <target state="new">查看表服务参考文档，了解有关可用 API 的完整详情：</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>.NET 存储客户端库参考</source>
          <target state="new">.NET 存储客户端库参考</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>REST API 参考</source>
          <target state="new">REST API 参考</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>了解如何使用 <bpt id="p1">[</bpt>Azure WebJobs SDK<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)</ept> 简化你编写的用于 Azure 存储空间的代码</source>
          <target state="new">了解如何使用 <bpt id="p1">[</bpt>Azure WebJobs SDK<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)</ept> 简化你编写的用于 Azure 存储空间的代码</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>查看更多功能指南，以了解在 Azure 中存储数据的其他方式。</source>
          <target state="new">查看更多功能指南，以了解在 Azure 中存储数据的其他方式。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">[</bpt>Blob 存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>来存储非结构化数据。</source>
          <target state="new">使用 <bpt id="p1">[</bpt>Blob 存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>来存储非结构化数据。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">[</bpt>SQL 数据库<ept id="p1">](/documentation/articles/sql-database-dotnet-how-to-use)</ept>来存储关系数据。</source>
          <target state="new">使用 <bpt id="p1">[</bpt>SQL 数据库<ept id="p1">](/documentation/articles/sql-database-dotnet-how-to-use)</ept>来存储关系数据。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>