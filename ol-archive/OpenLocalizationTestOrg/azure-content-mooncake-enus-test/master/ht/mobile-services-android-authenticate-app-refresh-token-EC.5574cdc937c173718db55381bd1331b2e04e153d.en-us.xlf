<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff9f7fa535f01f4a6a205945981c482c88e2f91f</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在简单的情况下，我们的令牌缓存应该有效，但是，在令牌到期或撤销时，会发生什么情况？该应用未运行时，该令牌可能会到期。这就意味着令牌缓存无效。在应用直接进行的调用或移动服务库进行的调用期间，该应用实际运行时，令牌也可能到期。结果将是 HTTP 状态码 401"未授权"。</source>
          <target state="new">在简单的情况下，我们的令牌缓存应该有效，但是，在令牌到期或撤销时，会发生什么情况？该应用未运行时，该令牌可能会到期。这就意味着令牌缓存无效。在应用直接进行的调用或移动服务库进行的调用期间，该应用实际运行时，令牌也可能到期。结果将是 HTTP 状态码 401"未授权"。</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>我们需要能够检测到期的令牌，并刷新它。为此，我们从 <bpt id="p1">[</bpt>Android 客户端库<ept id="p1">](http://dl.windowsazure.com/androiddocs/)</ept>使用 <bpt id="p2">[</bpt>ServiceFilter<ept id="p2">](http://dl.windowsazure.cn/androiddocs/com/microsoft/windowsazure/mobileservices/ServiceFilter.html)</ept>。</source>
          <target state="new">我们需要能够检测到期的令牌，并刷新它。为此，我们从 <bpt id="p1">[</bpt>Android 客户端库<ept id="p1">](http://dl.windowsazure.com/androiddocs/)</ept>使用 <bpt id="p2">[</bpt>ServiceFilter<ept id="p2">](http://dl.windowsazure.cn/androiddocs/com/microsoft/windowsazure/mobileservices/ServiceFilter.html)</ept>。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在本节中，您将定义 ServiceFilter，它将检测 HTTP 状态码 401 响应，并触发令牌和令牌缓存的刷新。此外，在身份验证期间，此 ServiceFilter 将阻止其他出站请求，以便这些请求可以使用刷新的令牌。</source>
          <target state="new">在本节中，您将定义 ServiceFilter，它将检测 HTTP 状态码 401 响应，并触发令牌和令牌缓存的刷新。此外，在身份验证期间，此 ServiceFilter 将阻止其他出站请求，以便这些请求可以使用刷新的令牌。</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>在 Eclipse 中，打开 ToDoActivity.java 文件并添加以下 import 语句：</source>
          <target state="new">在 Eclipse 中，打开 ToDoActivity.java 文件并添加以下 import 语句：</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>将以下成员添加到  <ph id="ph1">`ToDoActivity`</ph> 类。</source>
          <target state="new">将以下成员添加到  <ph id="ph1">`ToDoActivity`</ph> 类。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>这些将用于帮助同步用户的身份验证。我们只希望进行一次身份验证。在身份验证过程中，任何调用应等待并使用来自正在进行的身份验证的新令牌。</source>
          <target state="new">这些将用于帮助同步用户的身份验证。我们只希望进行一次身份验证。在身份验证过程中，任何调用应等待并使用来自正在进行的身份验证的新令牌。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>在 ToDoActivity.java 文件中，将以下方法添加到 ToDoActivity 类，该类将用于在正在进行身份验证时阻止其他线程中的出站调用。</source>
          <target state="new">在 ToDoActivity.java 文件中，将以下方法添加到 ToDoActivity 类，该类将用于在正在进行身份验证时阻止其他线程中的出站调用。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在 ToDoActivity.java 文件中，将以下方法添加到 ToDoActivity 类。此方法将实际触发等待，然后在身份验证完成时更新出站请求中的令牌。</source>
          <target state="new">在 ToDoActivity.java 文件中，将以下方法添加到 ToDoActivity 类。此方法将实际触发等待，然后在身份验证完成时更新出站请求中的令牌。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在 ToDoActivity.java 文件中，更新 ToDoActivity 类的  <ph id="ph1">`authenticate`</ph> 方法，使它接受一个布尔型参数，以允许强制刷新令牌和令牌缓存。我们还需要在身份验证完成时，通知任何被阻止的线程以便其可以选取新令牌。</source>
          <target state="new">在 ToDoActivity.java 文件中，更新 ToDoActivity 类的  <ph id="ph1">`authenticate`</ph> 方法，使它接受一个布尔型参数，以允许强制刷新令牌和令牌缓存。我们还需要在身份验证完成时，通知任何被阻止的线程以便其可以选取新令牌。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>在 ToDoActivity.java 文件中，在 ToDoActivity 类中，为新  <ph id="ph1">`RefreshTokenCacheFilter`</ph> 类添加此代码：</source>
          <target state="new">在 ToDoActivity.java 文件中，在 ToDoActivity 类中，为新  <ph id="ph1">`RefreshTokenCacheFilter`</ph> 类添加此代码：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>该服务过滤器将检查每个响应以查找 HTTP 状态码 401“未授权”。如果遇到 401，将在 UI 线程上设置用于获取新令牌的新登录请求。其他调用将被阻止，直到完成该登录，或 5 次尝试都已失败。如果获得新令牌，则将使用新令牌重试触发 401 的请求，将使用新令牌重试任何被阻止的调用。</source>
          <target state="new">该服务过滤器将检查每个响应以查找 HTTP 状态码 401“未授权”。如果遇到 401，将在 UI 线程上设置用于获取新令牌的新登录请求。其他调用将被阻止，直到完成该登录，或 5 次尝试都已失败。如果获得新令牌，则将使用新令牌重试触发 401 的请求，将使用新令牌重试任何被阻止的调用。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>在 ToDoActivity.java 文件中，在 ToDoActivity 类中，为新 <ph id="ph1">`ProgressFilter`</ph> 类添加此代码：</source>
          <target state="new">在 ToDoActivity.java 文件中，在 ToDoActivity 类中，为新 <ph id="ph1">`ProgressFilter`</ph> 类添加此代码：</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>此筛选器将在请求开始时显示进度条，在响应传达时隐藏进度条。</source>
          <target state="new">此筛选器将在请求开始时显示进度条，在响应传达时隐藏进度条。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在 ToDoActivity.java 文件中，更新 <ph id="ph1">`onCreate`</ph> 方法，如下所示：</source>
          <target state="new">在 ToDoActivity.java 文件中，更新 <ph id="ph1">`onCreate`</ph> 方法，如下所示：</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>