<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6140a228505b1223dc9e1570b23187e702d8982</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>通过并行任务最大限度地使用批处理 ( Batch ) 节点 | Azure</source>
          <target state="new">通过并行任务最大限度地使用批处理 ( Batch ) 节点 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在 Azure Batch 池的每个节点上运行并发任务时，通过减少所使用的计算节点数来提高效率并降低成本</source>
          <target state="new">在 Azure Batch 池的每个节点上运行并发任务时，通过减少所使用的计算节点数来提高效率并降低成本</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>通过并发节点任务最大限度提高 Azure 批处理 ( Batch ) 计算资源的使用量</source>
          <target state="new">通过并发节点任务最大限度提高 Azure 批处理 ( Batch ) 计算资源的使用量</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>大规模地并行执行任务是 Azure 批处理 ( Batch ) 的核心功能，利用此功能，你不仅可以在多个计算节点上运行任务，而且可以并行运行这些任务。利用批处理 ( Batch ) ，你可以横向和纵向扩展任务的并行执行规模。</source>
          <target state="new">大规模地并行执行任务是 Azure 批处理 ( Batch ) 的核心功能，利用此功能，你不仅可以在多个计算节点上运行任务，而且可以并行运行这些任务。利用批处理 ( Batch ) ，你可以横向和纵向扩展任务的并行执行规模。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>允许在池的计算节点上并行执行任务可以最大程度地利用池中的资源，减少所需的节点数目。虽然某些情况下将一个节点的所有资源分配给单个任务更有利，但在更多情况下，最好是让多个任务共享这些资源：</source>
          <target state="new">允许在池的计算节点上并行执行任务可以最大程度地利用池中的资源，减少所需的节点数目。虽然某些情况下将一个节点的所有资源分配给单个任务更有利，但在更多情况下，最好是让多个任务共享这些资源：</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>尽量减少数据传输<ept id="p1">**</ept>：适用于任务可以共享数据的情况。在此方案中，将共享数据复制到较小数目的节点并在每个节点上并行执行任务可以大大减少数据传输费用，尤其是在复制到每个节点的数据必须跨地理区域传输的情况下。</source>
          <target state="new"><bpt id="p1">**</bpt>尽量减少数据传输<ept id="p1">**</ept>：适用于任务可以共享数据的情况。在此方案中，将共享数据复制到较小数目的节点并在每个节点上并行执行任务可以大大减少数据传输费用，尤其是在复制到每个节点的数据必须跨地理区域传输的情况下。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>尽量增加内存使用<ept id="p1">**</ept>：适用于任务需要大量的内存，但这种需要仅在执行过程中短时出现且时间不固定的情况。你可以减少节点实例的数量但增加实例的大小，同时提供更多的内存，以便有效地应对此类高峰负载。这些节点实例将在每个节点上运行并行任务，充分利用节点在不同时间的大量内存。</source>
          <target state="new"><bpt id="p1">**</bpt>尽量增加内存使用<ept id="p1">**</ept>：适用于任务需要大量的内存，但这种需要仅在执行过程中短时出现且时间不固定的情况。你可以减少节点实例的数量但增加实例的大小，同时提供更多的内存，以便有效地应对此类高峰负载。这些节点实例将在每个节点上运行并行任务，充分利用节点在不同时间的大量内存。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>减少节点数目限制<ept id="p1">**</ept>：适用于需要在池中进行节点间通信的情况。目前，经过配置可以进行节点间通信的池仅限 50 个节点，因此，如果此类池中的每个节点都可以并行执行任务，则可同时执行更大数目的任务。</source>
          <target state="new"><bpt id="p1">**</bpt>减少节点数目限制<ept id="p1">**</ept>：适用于需要在池中进行节点间通信的情况。目前，经过配置可以进行节点间通信的池仅限 50 个节点，因此，如果此类池中的每个节点都可以并行执行任务，则可同时执行更大数目的任务。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>复制本地计算群集<ept id="p1">**</ept>：适用于首次将计算环境移至 Azure 等情况。可以通过增大节点任务的最大数目来更紧密地完成现有物理配置的镜像操作，前提是该配置目前允许在单个计算节点上执行多个任务。</source>
          <target state="new"><bpt id="p1">**</bpt>复制本地计算群集<ept id="p1">**</ept>：适用于首次将计算环境移至 Azure 等情况。可以通过增大节点任务的最大数目来更紧密地完成现有物理配置的镜像操作，前提是该配置目前允许在单个计算节点上执行多个任务。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>示例方案</source>
          <target state="new">示例方案</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>以下示例说明了并行执行任务的好处。假设你的任务应用程序具有特定的 CPU 和内存要求，根据该要求，节点大小为 Standard\_D1 很合适。但若要在所需时间内执行作业，则需使用 1,000 个这样的节点。</source>
          <target state="new">以下示例说明了并行执行任务的好处。假设你的任务应用程序具有特定的 CPU 和内存要求，根据该要求，节点大小为 Standard\_D1 很合适。但若要在所需时间内执行作业，则需使用 1,000 个这样的节点。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>如果不使用 Standard\_D1 节点，则可使用 16 核的 Standard\_D14 节点，同时允许并行执行任务。因此，在这种情况下，可以使用 <bpt id="p1">*</bpt>1/16 数目的节点<ept id="p1">*</ept> ，即只需使用 63 个节点，不需使用 1,000 个节点。如果每个节点都需要大型应用程序文件或引用数据，这会大大缩短作业执行时间并提高效率。</source>
          <target state="new">如果不使用 Standard\_D1 节点，则可使用 16 核的 Standard\_D14 节点，同时允许并行执行任务。因此，在这种情况下，可以使用 <bpt id="p1">*</bpt>1/16 数目的节点<ept id="p1">*</ept> ，即只需使用 63 个节点，不需使用 1,000 个节点。如果每个节点都需要大型应用程序文件或引用数据，这会大大缩短作业执行时间并提高效率。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>允许并行执行任务</source>
          <target state="new">允许并行执行任务</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>将在批处理 ( Batch ) 解决方案中进行池级别的计算节点配置，以便并行执行任务。在创建池时，可以通过批处理 ( Batch ) .NET API 设置 <bpt id="p1">[</bpt>CloudPool.MaxTasksPerComputeNode<ept id="p1">][maxtasks_net]</ept> 属性。在批处理 ( Batch ) REST API 中，<bpt id="p2">[</bpt>maxTasksPerNode<ept id="p2">][maxtasks_rest]</ept> 元素是在创建池时在请求正文中设置的。</source>
          <target state="new">将在批处理 ( Batch ) 解决方案中进行池级别的计算节点配置，以便并行执行任务。在创建池时，可以通过批处理 ( Batch ) .NET API 设置 <bpt id="p1">[</bpt>CloudPool.MaxTasksPerComputeNode<ept id="p1">][maxtasks_net]</ept> 属性。在批处理 ( Batch ) REST API 中，<bpt id="p2">[</bpt>maxTasksPerNode<ept id="p2">][maxtasks_rest]</ept> 元素是在创建池时在请求正文中设置的。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>使用 Azure 批处理 ( Batch ) 时，可以通过节点设置来设置多达四倍 (4x) 的节点核心数，从而最大限度地提高任务数。例如，如果将池的节点大小配置为“大型”（四核），则可将 <ph id="ph1">`maxTasksPerNode`</ph> 设置为 16。有关每个节点大小的核心数的详细信息，请参阅<bpt id="p1">[</bpt>虚拟机的大小<ept id="p1">](/documentation/articles/virtual-machines-size-specs)</ept>；有关服务限制的详细信息，请参阅 <bpt id="p2">[</bpt>Azure 订阅和服务限制、配额和约束<ept id="p2">](/documentation/articles/azure-subscription-service-limits)</ept>。</source>
          <target state="new">使用 Azure 批处理 ( Batch ) 时，可以通过节点设置来设置多达四倍 (4x) 的节点核心数，从而最大限度地提高任务数。例如，如果将池的节点大小配置为“大型”（四核），则可将 <ph id="ph1">`maxTasksPerNode`</ph> 设置为 16。有关每个节点大小的核心数的详细信息，请参阅<bpt id="p1">[</bpt>虚拟机的大小<ept id="p1">](/documentation/articles/virtual-machines-size-specs)</ept>；有关服务限制的详细信息，请参阅 <bpt id="p2">[</bpt>Azure 订阅和服务限制、配额和约束<ept id="p2">](/documentation/articles/azure-subscription-service-limits)</ept>。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph>为池构造<bpt id="p1">[</bpt>自动缩放公式<ept id="p1">][enable_autoscaling]</ept>时，请务必考虑 <ph id="ph2">`maxTasksPerNode`</ph> 值。例如，如果增加每个节点的任务数，则可能会极大地影响对 <ph id="ph3">`$RunningTasks`</ph> 求值的公式。有关详细信息，请参阅<bpt id="p2">[</bpt>自动缩放 Azure 批处理 ( Batch ) 池中的计算节点<ept id="p2">](/documentation/articles/batch-automatic-scaling)</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph>为池构造<bpt id="p1">[</bpt>自动缩放公式<ept id="p1">][enable_autoscaling]</ept>时，请务必考虑 <ph id="ph2">`maxTasksPerNode`</ph> 值。例如，如果增加每个节点的任务数，则可能会极大地影响对 <ph id="ph3">`$RunningTasks`</ph> 求值的公式。有关详细信息，请参阅<bpt id="p2">[</bpt>自动缩放 Azure 批处理 ( Batch ) 池中的计算节点<ept id="p2">](/documentation/articles/batch-automatic-scaling)</ept>。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>任务分发</source>
          <target state="new">任务分发</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>当池中的计算节点可以并行执行任务时，必须指定任务在池中各节点之间的分发情况。</source>
          <target state="new">当池中的计算节点可以并行执行任务时，必须指定任务在池中各节点之间的分发情况。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>你可以通过 <bpt id="p1">[</bpt>CloudPool.TaskSchedulingPolicy<ept id="p1">][task_schedule]</ept> 属性来指定任务，即让任务在池中所有节点之间平均分配（“散布式”）。或者，先给池中的每个节点分配尽量多的任务，然后再将任务分配给池中的其他节点（“装箱式”）。</source>
          <target state="new">你可以通过 <bpt id="p1">[</bpt>CloudPool.TaskSchedulingPolicy<ept id="p1">][task_schedule]</ept> 属性来指定任务，即让任务在池中所有节点之间平均分配（“散布式”）。或者，先给池中的每个节点分配尽量多的任务，然后再将任务分配给池中的其他节点（“装箱式”）。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>此功能十分重要，如需示例，请参阅上面示例中节点数为 Standard\_D14 的池，该池配置后的 <bpt id="p1">[</bpt>CloudPool.MaxTasksPerComputeNode<ept id="p1">][maxtasks_net]</ept> 值为 16。如果对 <bpt id="p2">[</bpt>CloudPool.TaskSchedulingPolicy<ept id="p2">][task_schedule]</ept> 进行配置时，将 <bpt id="p3">[</bpt>ComputeNodeFillType<ept id="p3">][fill_type]</ept> 设置为 <bpt id="p4">*</bpt>Pack<ept id="p4">*</ept>，则会充分使用每个节点的所有 16 个核心，并可通过<bpt id="p5">[</bpt>自动缩放池<ept id="p5">](/documentation/articles/batch-automatic-scaling)</ept>将不使用的节点（没有分配任何任务的节点）从池中删除，从而尽量减少资源使用量，以便节省资金。</source>
          <target state="new">此功能十分重要，如需示例，请参阅上面示例中节点数为 Standard\_D14 的池，该池配置后的 <bpt id="p1">[</bpt>CloudPool.MaxTasksPerComputeNode<ept id="p1">][maxtasks_net]</ept> 值为 16。如果对 <bpt id="p2">[</bpt>CloudPool.TaskSchedulingPolicy<ept id="p2">][task_schedule]</ept> 进行配置时，将 <bpt id="p3">[</bpt>ComputeNodeFillType<ept id="p3">][fill_type]</ept> 设置为 <bpt id="p4">*</bpt>Pack<ept id="p4">*</ept>，则会充分使用每个节点的所有 16 个核心，并可通过<bpt id="p5">[</bpt>自动缩放池<ept id="p5">](/documentation/articles/batch-automatic-scaling)</ept>将不使用的节点（没有分配任何任务的节点）从池中删除，从而尽量减少资源使用量，以便节省资金。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>批处理 ( Batch ) .NET 示例</source>
          <target state="new">批处理 ( Batch ) .NET 示例</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>此 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 代码段演示了一个请求，该请求要求创建一个包含四个大型节点的池，每个节点最多四个任务。它指定了一个任务计划策略，要求先用任务填充一个节点，然后再将任务分配给池中的其他节点。有关如何使用 Batch .NET API 添加池的详细信息，请参阅 <bpt id="p2">[</bpt>BatchClient.PoolOperations.CreatePool<ept id="p2">][poolcreate_net]</ept>。</source>
          <target state="new">此 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 代码段演示了一个请求，该请求要求创建一个包含四个大型节点的池，每个节点最多四个任务。它指定了一个任务计划策略，要求先用任务填充一个节点，然后再将任务分配给池中的其他节点。有关如何使用 Batch .NET API 添加池的详细信息，请参阅 <bpt id="p2">[</bpt>BatchClient.PoolOperations.CreatePool<ept id="p2">][poolcreate_net]</ept>。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Batch REST 示例</source>
          <target state="new">Batch REST 示例</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>此 <bpt id="p1">[</bpt>Batch REST<ept id="p1">][api_rest]</ept> API 代码段演示了一个请求，该请求要求创建一个包含两个大型节点的池，每个节点最多四个任务。有关如何使用 REST API 添加池的详细信息，请参阅<bpt id="p2">[</bpt>将池添加到帐户<ept id="p2">][maxtasks_rest]</ept>。</source>
          <target state="new">此 <bpt id="p1">[</bpt>Batch REST<ept id="p1">][api_rest]</ept> API 代码段演示了一个请求，该请求要求创建一个包含两个大型节点的池，每个节点最多四个任务。有关如何使用 REST API 添加池的详细信息，请参阅<bpt id="p2">[</bpt>将池添加到帐户<ept id="p2">][maxtasks_rest]</ept>。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>只能在创建池时设置 <ph id="ph2">`maxTasksPerNode`</ph> 元素和 <bpt id="p1">[</bpt>MaxTasksPerComputeNode<ept id="p1">][maxtasks_net]</ept> 属性。创建完池以后，不能对上述元素和属性进行修改。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>只能在创建池时设置 <ph id="ph2">`maxTasksPerNode`</ph> 元素和 <bpt id="p1">[</bpt>MaxTasksPerComputeNode<ept id="p1">][maxtasks_net]</ept> 属性。创建完池以后，不能对上述元素和属性进行修改。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>探究示例项目</source>
          <target state="new">探究示例项目</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>请查看 GitHub 上的 <bpt id="p1">[</bpt>ParallelNodeTasks<ept id="p1">][parallel_tasks_sample]</ept> 项目。这是一个工作代码示例，说明了如何使用 <bpt id="p2">[</bpt>CloudPool.MaxTasksPerComputeNode<ept id="p2">][maxtasks_net]</ept>。</source>
          <target state="new">请查看 GitHub 上的 <bpt id="p1">[</bpt>ParallelNodeTasks<ept id="p1">][parallel_tasks_sample]</ept> 项目。这是一个工作代码示例，说明了如何使用 <bpt id="p2">[</bpt>CloudPool.MaxTasksPerComputeNode<ept id="p2">][maxtasks_net]</ept>。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>此 C# 控制台应用程序使用 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> 库来创建包含一个或多个计算节点的池，并在这些节点上执行其数量可以配置的任务，以便模拟可变负荷。应用程序的输出指定了哪些节点执行了每个任务。该应用程序还提供了作业参数和持续时间的摘要。下面显示了同一个应用程序运行两次后的输出摘要部分。</source>
          <target state="new">此 C# 控制台应用程序使用 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> 库来创建包含一个或多个计算节点的池，并在这些节点上执行其数量可以配置的任务，以便模拟可变负荷。应用程序的输出指定了哪些节点执行了每个任务。该应用程序还提供了作业参数和持续时间的摘要。下面显示了同一个应用程序运行两次后的输出摘要部分。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>第一次执行示例应用程序时，结果显示，在池中只有一个节点且使用默认的一个节点一个任务设置的情况下，作业持续时间超过 30 分钟。</source>
          <target state="new">第一次执行示例应用程序时，结果显示，在池中只有一个节点且使用默认的一个节点一个任务设置的情况下，作业持续时间超过 30 分钟。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>第二次运行示例应用程序时，显示作业持续时间显著缩短。这是因为该池已被配置为每个节点四个任务，因此可以并行执行任务，使得作业可以在大约四分之一的时间内完成。</source>
          <target state="new">第二次运行示例应用程序时，显示作业持续时间显著缩短。这是因为该池已被配置为每个节点四个任务，因此可以并行执行任务，使得作业可以在大约四分之一的时间内完成。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>上述摘要中的作业持续时间不包括创建池的时间。上述每个作业都提交到此前已创建的池，这些池的计算节点在提交时处于<bpt id="p1">*</bpt>空闲<ept id="p1">*</ept> 状态。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>上述摘要中的作业持续时间不包括创建池的时间。上述每个作业都提交到此前已创建的池，这些池的计算节点在提交时处于<bpt id="p1">*</bpt>空闲<ept id="p1">*</ept> 状态。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>批处理 ( Batch ) 资源管理器热度地图</source>
          <target state="new">批处理 ( Batch ) 资源管理器热度地图</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>批处理 ( Batch ) 资源管理器<ept id="p1">][batch_explorer]</ept>是 Azure 批处理 ( Batch ) <bpt id="p2">[</bpt>示例应用程序<ept id="p2">][github_samples]</ept>之一，包含<bpt id="p3">*</bpt>热度地图<ept id="p3">*</ept> 功能，允许以可视方式来呈现池中节点核心的使用情况。执行 <bpt id="p4">[</bpt>ParallelTasks<ept id="p4">][parallel_tasks_sample]</ept> 示例应用程序时，可使用热度地图功能来方便地呈现节点核心的活动。</source>
          <target state="new"><bpt id="p1">[</bpt>批处理 ( Batch ) 资源管理器<ept id="p1">][batch_explorer]</ept>是 Azure 批处理 ( Batch ) <bpt id="p2">[</bpt>示例应用程序<ept id="p2">][github_samples]</ept>之一，包含<bpt id="p3">*</bpt>热度地图<ept id="p3">*</ept> 功能，允许以可视方式来呈现池中节点核心的使用情况。执行 <bpt id="p4">[</bpt>ParallelTasks<ept id="p4">][parallel_tasks_sample]</ept> 示例应用程序时，可使用热度地图功能来方便地呈现节点核心的活动。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>批处理 ( Batch ) 资源管理器热度地图</source>
          <target state="new">批处理 ( Batch ) 资源管理器热度地图</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>批处理 ( Batch ) 资源管理器热图，其中显示了包含四个节点的池，每个节点当前正在执行四个任务</source>
          <target state="new">批处理 ( Batch ) 资源管理器热图，其中显示了包含四个节点的池，每个节点当前正在执行四个任务</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>