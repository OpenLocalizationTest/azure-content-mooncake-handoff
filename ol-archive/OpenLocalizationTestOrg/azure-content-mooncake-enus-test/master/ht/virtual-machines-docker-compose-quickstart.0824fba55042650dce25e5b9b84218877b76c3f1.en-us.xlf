<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">103a7343137f97af71395838424a4304357ff9b9</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>虚拟机上的 Docker 和 Compose | Azure</source>
          <target state="new">虚拟机上的 Docker 和 Compose | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在 Azure 虚拟机上使用 Compose 和 Docker 的快速简介。</source>
          <target state="new">在 Azure 虚拟机上使用 Compose 和 Docker 的快速简介。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>开始使用 Docker 和 Compose，在 Azure 虚拟机上定义和运行多容器应用程序</source>
          <target state="new">开始使用 Docker 和 Compose，在 Azure 虚拟机上定义和运行多容器应用程序</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本文介绍如何开始使用 Docker 和 <bpt id="p1">[</bpt>Compose<ept id="p1">](http://github.com/docker/compose)</ept> 在 Azure 中的 Linux 虚拟机上定义和运行复杂的应用程序。借助 Compose（ <bpt id="p2">*</bpt>Fig<ept id="p2">*</ept> 的后继版本），你可以使用简单的文本文件定义由多个 Docker 容器组成的应用程序。然后使用单个命令启动应用程序，该命令会执行使该应用程序在 VM 上运行的所有操作。作为示例，本文说明如何使用后端 MariaDB SQL 数据库快速设置 WordPress 博客，但你也可以使用 Compose 设置更复杂的应用程序。</source>
          <target state="new">本文介绍如何开始使用 Docker 和 <bpt id="p1">[</bpt>Compose<ept id="p1">](http://github.com/docker/compose)</ept> 在 Azure 中的 Linux 虚拟机上定义和运行复杂的应用程序。借助 Compose（ <bpt id="p2">*</bpt>Fig<ept id="p2">*</ept> 的后继版本），你可以使用简单的文本文件定义由多个 Docker 容器组成的应用程序。然后使用单个命令启动应用程序，该命令会执行使该应用程序在 VM 上运行的所有操作。作为示例，本文说明如何使用后端 MariaDB SQL 数据库快速设置 WordPress 博客，但你也可以使用 Compose 设置更复杂的应用程序。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-classic-include.md)</ept>]。</source>
          <target state="new">[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-classic-include.md)</ept>]。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>步骤 1：将 Linux VM 设置为 Docker 主机</source>
          <target state="new">步骤 1：将 Linux VM 设置为 Docker 主机</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>可以使用各种 Azure 过程和 Azure 应用商店中提供的映像创建 Linux VM 并将其设置为 Docker 主机。有关示例，请参阅<bpt id="p1">[</bpt>从 Azure 命令行界面使用 Docker VM 扩展<ept id="p1">](/documentation/articles/virtual-machines-docker-with-xplat-cli)</ept>，了解使用 Docker VM 扩展创建 Ubuntu VM 的快速过程。使用 Docker VM 扩展时，你的 VM 将自动设置为 Docker 主机。该文中的示例演示如何在服务管理模式下使用<bpt id="p2">[</bpt>适用于 Mac、Linux 和 Windows 的 Azure 命令行界面<ept id="p2">](/documentation/articles/xplat-cli-install)</ept> (Azure CLI) 创建 VM。</source>
          <target state="new">可以使用各种 Azure 过程和 Azure 应用商店中提供的映像创建 Linux VM 并将其设置为 Docker 主机。有关示例，请参阅<bpt id="p1">[</bpt>从 Azure 命令行界面使用 Docker VM 扩展<ept id="p1">](/documentation/articles/virtual-machines-docker-with-xplat-cli)</ept>，了解使用 Docker VM 扩展创建 Ubuntu VM 的快速过程。使用 Docker VM 扩展时，你的 VM 将自动设置为 Docker 主机。该文中的示例演示如何在服务管理模式下使用<bpt id="p2">[</bpt>适用于 Mac、Linux 和 Windows 的 Azure 命令行界面<ept id="p2">](/documentation/articles/xplat-cli-install)</ept> (Azure CLI) 创建 VM。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>步骤 2：安装 Compose</source>
          <target state="new">步骤 2：安装 Compose</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在 Linux VM 使用 Docker 运行后，从客户端计算机使用 SSH 连接到它。如果需要，可通过运行以下两个命令安装 <bpt id="p1">[</bpt>Compose<ept id="p1">](https://github.com/docker/compose/blob/882dc673ce84b0b29cd59b6815cb93f74a6c4134/docs/install.md)</ept>。</source>
          <target state="new">在 Linux VM 使用 Docker 运行后，从客户端计算机使用 SSH 连接到它。如果需要，可通过运行以下两个命令安装 <bpt id="p1">[</bpt>Compose<ept id="p1">](https://github.com/docker/compose/blob/882dc673ce84b0b29cd59b6815cb93f74a6c4134/docs/install.md)</ept>。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph> 如果你已使用 Docker VM 扩展创建 VM，则已为你安装 Compose。跳过这些命令并转到步骤 3。仅当你自己将 Docker 安装在 VM 上时，才需要安装 Compose。</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph> 如果你已使用 Docker VM 扩展创建 VM，则已为你安装 Compose。跳过这些命令并转到步骤 3。仅当你自己将 Docker 安装在 VM 上时，才需要安装 Compose。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>如果你收到“权限被拒绝”错误，则 VM 上的 /usr/local/bin 目录不是可写的，你将需要以超级用户身份安装 Compose。依次运行 <ph id="ph2">`sudo -i`</ph>、上述两个命令和 <ph id="ph3">`exit`</ph>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>如果你收到“权限被拒绝”错误，则 VM 上的 /usr/local/bin 目录不是可写的，你将需要以超级用户身份安装 Compose。依次运行 <ph id="ph2">`sudo -i`</ph>、上述两个命令和 <ph id="ph3">`exit`</ph>。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>若要测试 Compose 安装，请运行以下命令。</source>
          <target state="new">若要测试 Compose 安装，请运行以下命令。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>你将看到与 <ph id="ph1">`docker-compose 1.4.1`</ph> 类似的输出。</source>
          <target state="new">你将看到与 <ph id="ph1">`docker-compose 1.4.1`</ph> 类似的输出。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>步骤 3：创建 docker-compose.yml 配置文件</source>
          <target state="new">步骤 3：创建 docker-compose.yml 配置文件</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>接下来，将创建 <ph id="ph1">`docker-compose.yml`</ph> 文件，它只是一个文本配置文件，用于定义要在 VM 上运行的 Docker 容器。该文件指定要在每个容器中运行的映像（或者它可能从 Dockerfile 生成）、必要的环境变量和依赖关系、端口、容器之间的链接等。有关 yml 文件语法的详细信息，请参阅 <bpt id="p1">[</bpt>docker-compose.yml 参考<ept id="p1">](http://docs.docker.com/compose/yml/)</ept>。</source>
          <target state="new">接下来，将创建 <ph id="ph1">`docker-compose.yml`</ph> 文件，它只是一个文本配置文件，用于定义要在 VM 上运行的 Docker 容器。该文件指定要在每个容器中运行的映像（或者它可能从 Dockerfile 生成）、必要的环境变量和依赖关系、端口、容器之间的链接等。有关 yml 文件语法的详细信息，请参阅 <bpt id="p1">[</bpt>docker-compose.yml 参考<ept id="p1">](http://docs.docker.com/compose/yml/)</ept>。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在 VM 上创建工作目录，并使用你最喜欢的文本编辑器创建 <ph id="ph1">`docker-compose.yml`</ph>。若要试用一个简单示例，请将以下文本复制到该文件中。此配置将使用 <bpt id="p1">[</bpt>DockerHub 注册表<ept id="p1">](https://registry.hub.docker.com/_/wordpress/)</ept>中的映像安装 WordPress（开源博客和内容管理系统）和链接的后端 MariaDB 数据库。</source>
          <target state="new">在 VM 上创建工作目录，并使用你最喜欢的文本编辑器创建 <ph id="ph1">`docker-compose.yml`</ph>。若要试用一个简单示例，请将以下文本复制到该文件中。此配置将使用 <bpt id="p1">[</bpt>DockerHub 注册表<ept id="p1">](https://registry.hub.docker.com/_/wordpress/)</ept>中的映像安装 WordPress（开源博客和内容管理系统）和链接的后端 MariaDB 数据库。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>步骤 4: 使用“撰写”启动容器</source>
          <target state="new">步骤 4: 使用“撰写”启动容器</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>在 VM 上的工作目录中，直接运行以下命令。</source>
          <target state="new">在 VM 上的工作目录中，直接运行以下命令。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>这将启动“docker-compose.yml”中指定的 Docker 容器。你将看到类似于以下内容的输出：</source>
          <target state="new">这将启动“docker-compose.yml”中指定的 Docker 容器。你将看到类似于以下内容的输出：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 启动时请务必使用 <bpt id="p1">**</bpt>-d<ept id="p1">**</ept> 选项，以使容器在后台继续运行。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 启动时请务必使用 <bpt id="p1">**</bpt>-d<ept id="p1">**</ept> 选项，以使容器在后台继续运行。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>若要验证容器是否已启动，请键入 <ph id="ph1">`docker-compose ps`</ph>。你应看到类似如下的内容：</source>
          <target state="new">若要验证容器是否已启动，请键入 <ph id="ph1">`docker-compose ps`</ph>。你应看到类似如下的内容：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>现在可以通过浏览到 <ph id="ph1">`http://localhost:8080`</ph> 在 VM 上直接连接到 WordPress。如果要通过 Internet 连接到 VM，请先在 VM 上配置 HTTP 终结点，以便将公共端口 80 映射到专用端口 8080。例如，在 Azure 服务管理部署中，运行以下 Azure CLI 命令：</source>
          <target state="new">现在可以通过浏览到 <ph id="ph1">`http://localhost:8080`</ph> 在 VM 上直接连接到 WordPress。如果要通过 Internet 连接到 VM，请先在 VM 上配置 HTTP 终结点，以便将公共端口 80 映射到专用端口 8080。例如，在 Azure 服务管理部署中，运行以下 Azure CLI 命令：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>现在，你应看到 WordPress 开始屏幕，你可以在其中完成安装并开始使用应用程序。</source>
          <target state="new">现在，你应看到 WordPress 开始屏幕，你可以在其中完成安装并开始使用应用程序。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>WordPress 开始屏幕</source>
          <target state="new">WordPress 开始屏幕</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>有关构建和部署多容器应用的更多示例，请查阅 <bpt id="p1">[</bpt>Compose CLI 参考<ept id="p1">](http://docs.docker.com/compose/reference/)</ept>和<bpt id="p2">[</bpt>用户指南<ept id="p2">](http://docs.docker.com/compose/)</ept>。</source>
          <target state="new">有关构建和部署多容器应用的更多示例，请查阅 <bpt id="p1">[</bpt>Compose CLI 参考<ept id="p1">](http://docs.docker.com/compose/reference/)</ept>和<bpt id="p2">[</bpt>用户指南<ept id="p2">](http://docs.docker.com/compose/)</ept>。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>请尝试将 Docker Compose 与 <bpt id="p1">[</bpt>Docker Swarm<ept id="p1">](/documentation/articles/virtual-machines-docker-swarm)</ept> 群集集成。有关方案，请参阅 <bpt id="p2">[</bpt>Docker Compose/Swarm 集成<ept id="p2">](https://github.com/docker/compose/blob/master/SWARM.md)</ept>。</source>
          <target state="new">请尝试将 Docker Compose 与 <bpt id="p1">[</bpt>Docker Swarm<ept id="p1">](/documentation/articles/virtual-machines-docker-swarm)</ept> 群集集成。有关方案，请参阅 <bpt id="p2">[</bpt>Docker Compose/Swarm 集成<ept id="p2">](https://github.com/docker/compose/blob/master/SWARM.md)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>