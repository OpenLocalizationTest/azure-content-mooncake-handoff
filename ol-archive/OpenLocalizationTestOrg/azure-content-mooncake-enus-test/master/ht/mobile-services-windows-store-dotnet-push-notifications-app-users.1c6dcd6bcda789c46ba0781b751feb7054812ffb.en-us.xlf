<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35518bd4c12c59fd4b0e6672804486a5cbe38c0e</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>接下来，需要更改注册推送通知的方式，以确保在尝试注册之前对用户进行身份验证。客户端应用更新取决于实现推送通知的方式。</source>
          <target state="new">接下来，需要更改注册推送通知的方式，以确保在尝试注册之前对用户进行身份验证。客户端应用更新取决于实现推送通知的方式。</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>使用 Visual Studio 2013 Update 2 或更高版本中的添加推送通知向导</source>
          <target state="new">使用 Visual Studio 2013 Update 2 或更高版本中的添加推送通知向导</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用这种方法时，向导会在你的项目中生成新的 push.register.cs 文件。</source>
          <target state="new">使用这种方法时，向导会在你的项目中生成新的 push.register.cs 文件。</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的解决方案资源管理器中，打开 app.xaml.cs 项目文件，然后在 <bpt id="p1">**</bpt>OnLaunched<ept id="p1">**</ept> 事件处理程序中注释掉或删除对 <bpt id="p2">**</bpt>UploadChannel<ept id="p2">**</ept> 方法的调用。</source>
          <target state="new">在 Visual Studio 的解决方案资源管理器中，打开 app.xaml.cs 项目文件，然后在 <bpt id="p1">**</bpt>OnLaunched<ept id="p1">**</ept> 事件处理程序中注释掉或删除对 <bpt id="p2">**</bpt>UploadChannel<ept id="p2">**</ept> 方法的调用。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>打开 push.register.cs 项目文件，并将 <bpt id="p1">**</bpt>UploadChannel<ept id="p1">**</ept> 方法替换为以下代码：</source>
          <target state="new">打开 push.register.cs 项目文件，并将 <bpt id="p1">**</bpt>UploadChannel<ept id="p1">**</ept> 方法替换为以下代码：</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>这可以确保使用包含已验证用户凭据的同一客户端实例完成注册。否则，注册将会失败并返回“未授权(401)”错误。</source>
          <target state="new">这可以确保使用包含已验证用户凭据的同一客户端实例完成注册。否则，注册将会失败并返回“未授权(401)”错误。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>打开共享的 MainPage.cs 项目文件中，并将 <bpt id="p1">**</bpt>ButtonLogin\_Click<ept id="p1">**</ept> 处理程序替换为以下内容：</source>
          <target state="new">打开共享的 MainPage.cs 项目文件中，并将 <bpt id="p1">**</bpt>ButtonLogin\_Click<ept id="p1">**</ept> 处理程序替换为以下内容：</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>这将确保在尝试注册推送之前进行身份验证。</source>
          <target state="new">这将确保在尝试注册推送之前进行身份验证。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在前面的代码中，将生成的推送类名称 (<ph id="ph1">`todolistPush`</ph>) 替换为向导生成的类名称，其格式通常为 <ph id="ph2">&lt;code&gt;</ph><ph id="ph3">&lt;em&gt;</ph><ph id="ph4">mobile\_service</ph><ph id="ph5">&lt;/em&gt;</ph><ph id="ph6">Push</ph><ph id="ph7">&lt;/code&gt;</ph>。</source>
          <target state="new">在前面的代码中，将生成的推送类名称 (<ph id="ph1">`todolistPush`</ph>) 替换为向导生成的类名称，其格式通常为 <ph id="ph2">&lt;code&gt;</ph><ph id="ph3">&lt;em&gt;</ph><ph id="ph4">mobile\_service</ph><ph id="ph5">&lt;/em&gt;</ph><ph id="ph6">Push</ph><ph id="ph7">&lt;/code&gt;</ph>。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>手动启用推送通知</source>
          <target state="new">手动启用推送通知</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>使用此方法时，需要将本教程中的注册代码直接添加到 app.xaml.cs 项目文件。</source>
          <target state="new">使用此方法时，需要将本教程中的注册代码直接添加到 app.xaml.cs 项目文件。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的 Solution Explorer 中，打开 app.xaml.cs 项目文件，然后在 <bpt id="p1">**</bpt>OnLaunched<ept id="p1">**</ept> 事件处理程序中注释掉或删除对 <bpt id="p2">**</bpt>InitNotificationsAsync<ept id="p2">**</ept> 的调用。</source>
          <target state="new">在 Visual Studio 的 Solution Explorer 中，打开 app.xaml.cs 项目文件，然后在 <bpt id="p1">**</bpt>OnLaunched<ept id="p1">**</ept> 事件处理程序中注释掉或删除对 <bpt id="p2">**</bpt>InitNotificationsAsync<ept id="p2">**</ept> 的调用。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">**</bpt>InitNotificationsAsync<ept id="p1">**</ept> 方法的可访问性从 <ph id="ph1">`private`</ph> 更改为 <ph id="ph2">`public`</ph>，并添加 <ph id="ph3">`static`</ph> 修饰符。</source>
          <target state="new">将 <bpt id="p1">**</bpt>InitNotificationsAsync<ept id="p1">**</ept> 方法的可访问性从 <ph id="ph1">`private`</ph> 更改为 <ph id="ph2">`public`</ph>，并添加 <ph id="ph3">`static`</ph> 修饰符。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>打开共享的 MainPage.cs 项目文件中，并将 <bpt id="p1">**</bpt>ButtonLogin\_Click<ept id="p1">**</ept> 处理程序替换为以下内容：</source>
          <target state="new">打开共享的 MainPage.cs 项目文件中，并将 <bpt id="p1">**</bpt>ButtonLogin\_Click<ept id="p1">**</ept> 处理程序替换为以下内容：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>这将确保在尝试注册推送之前进行身份验证。</source>
          <target state="new">这将确保在尝试注册推送之前进行身份验证。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>