<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c3e7cc136aa2bf7a2c46dcee285cfe1dd842ff78</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>通过 .NET 开始使用 Azure Blob 存储 | Azure</source>
          <target state="new">通过 .NET 开始使用 Azure Blob 存储 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>使用 Azure Blob（对象）存储在云中存储文件数据。立即开始简单的 Blob 存储操作，包括创建容器并上载、下载、列出和删除 blob 内容。</source>
          <target state="new">使用 Azure Blob（对象）存储在云中存储文件数据。立即开始简单的 Blob 存储操作，包括创建容器并上载、下载、列出和删除 blob 内容。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>通过 .NET 开始使用 Azure Blob 存储</source>
          <target state="new">通过 .NET 开始使用 Azure Blob 存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure Blob 存储是在云中存储文件数据的服务。Blob 存储可以存储任何类型的文本或二进制数据，例如文档、媒体文件或应用程序安装程序。Blob 存储有时称为对象存储。</source>
          <target state="new">Azure Blob 存储是在云中存储文件数据的服务。Blob 存储可以存储任何类型的文本或二进制数据，例如文档、媒体文件或应用程序安装程序。Blob 存储有时称为对象存储。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>本教程演示如何针对使用 Azure Blob 存储一些常见情形编写 .NET 代码。涉及的任务包括上载、列出、下载和删除 Blob。完成本教程中仅仅只需一小时。</source>
          <target state="new">本教程演示如何针对使用 Azure Blob 存储一些常见情形编写 .NET 代码。涉及的任务包括上载、列出、下载和删除 Blob。完成本教程中仅仅只需一小时。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>以编程方式访问 Blob 存储</source>
          <target state="new">以编程方式访问 Blob 存储</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>命名空间声明</source>
          <target state="new">命名空间声明</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在您希望在其中以编程方式访问 Azure 存储空间的任何 C# 文件中，将以下命名空间声明添加到文件的顶部：</source>
          <target state="new">在您希望在其中以编程方式访问 Azure 存储空间的任何 C# 文件中，将以下命名空间声明添加到文件的顶部：</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>确保你引用 <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。</source>
          <target state="new">确保你引用 <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>您可以使用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 类型来检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。以下代码使用我们在上面检索到的存储帐户对象创建 <bpt id="p2">**</bpt>CloudBlobClient<ept id="p2">**</ept> 对象：</source>
          <target state="new">您可以使用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 类型来检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。以下代码使用我们在上面检索到的存储帐户对象创建 <bpt id="p2">**</bpt>CloudBlobClient<ept id="p2">**</ept> 对象：</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>创建容器</source>
          <target state="new">创建容器</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>此示例演示如何创建一个容器（如果该容器不存在）：</source>
          <target state="new">此示例演示如何创建一个容器（如果该容器不存在）：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>默认情况下，新容器是专用容器，因此您必须指定存储访问密钥才能从该容器下载 Blob。如果您要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器：</source>
          <target state="new">默认情况下，新容器是专用容器，因此您必须指定存储访问密钥才能从该容器下载 Blob。如果您要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Internet 中的所有人都可以查看公共容器中的 Blob，但是，仅在您具有相应的访问密钥时，才能修改或删除它们。</source>
          <target state="new">Internet 中的所有人都可以查看公共容器中的 Blob，但是，仅在您具有相应的访问密钥时，才能修改或删除它们。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>将 Blob 上载到容器中</source>
          <target state="new">将 Blob 上载到容器中</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Azure Blob 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。</source>
          <target state="new">Azure Blob 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。获取 Blob 引用后，可以通过调用 <bpt id="p1">**</bpt>UploadFromStream<ept id="p1">**</ept> 方法，将任何数据流上载到该 Blob。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。</source>
          <target state="new">若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。获取 Blob 引用后，可以通过调用 <bpt id="p1">**</bpt>UploadFromStream<ept id="p1">**</ept> 方法，将任何数据流上载到该 Blob。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。</source>
          <target state="new">下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>列出容器中的 Blob</source>
          <target state="new">列出容器中的 Blob</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> 方法来检索其中的 Blob 和/或目录。若要访问返回的 <bpt id="p2">**</bpt>IListBlobItem<ept id="p2">**</ept> 的丰富属性和方法，您必须将它转换到 <bpt id="p3">**</bpt>CloudBlockBlob<ept id="p3">**</ept>、<bpt id="p4">**</bpt>CloudPageBlob<ept id="p4">**</ept> 或 <bpt id="p5">**</bpt>CloudBlobDirectory<ept id="p5">**</ept> 对象。如果类型未知，您可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出 <ph id="ph1">`photos`</ph> 容器中每一项的 URI：</source>
          <target state="new">若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> 方法来检索其中的 Blob 和/或目录。若要访问返回的 <bpt id="p2">**</bpt>IListBlobItem<ept id="p2">**</ept> 的丰富属性和方法，您必须将它转换到 <bpt id="p3">**</bpt>CloudBlockBlob<ept id="p3">**</ept>、<bpt id="p4">**</bpt>CloudPageBlob<ept id="p4">**</ept> 或 <bpt id="p5">**</bpt>CloudBlobDirectory<ept id="p5">**</ept> 对象。如果类型未知，您可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出 <ph id="ph1">`photos`</ph> 容器中每一项的 URI：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>如上所示，您可以命名 Blob，在其名称中包含路径信息。这将创建一个虚拟目录结构，你可以像传统文件系统一样组织和遍历。注意，该目录结构仅仅是虚拟的 -  Blob 存储中唯一可用的资源是容器和 Blob。但是，存储空间客户端库提供 <bpt id="p1">**</bpt>CloudBlobDirectory<ept id="p1">**</ept> 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。</source>
          <target state="new">如上所示，您可以命名 Blob，在其名称中包含路径信息。这将创建一个虚拟目录结构，你可以像传统文件系统一样组织和遍历。注意，该目录结构仅仅是虚拟的 -  Blob 存储中唯一可用的资源是容器和 Blob。但是，存储空间客户端库提供 <bpt id="p1">**</bpt>CloudBlobDirectory<ept id="p1">**</ept> 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>例如，考虑名为 <ph id="ph1">`photos`</ph> 的容器中包含的下面一组块 Blob：</source>
          <target state="new">例如，考虑名为 <ph id="ph1">`photos`</ph> 的容器中包含的下面一组块 Blob：</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>当您在“photos”容器上调用 <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept>（如上面的示例中）时，返回一个层次结构列表。它包含 <bpt id="p2">**</bpt>CloudBlobDirectory<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>CloudBlockBlob<ept id="p3">**</ept> 对象，分别表示容器中的目录和 Blob。生成的输出如下所示：</source>
          <target state="new">当您在“photos”容器上调用 <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept>（如上面的示例中）时，返回一个层次结构列表。它包含 <bpt id="p2">**</bpt>CloudBlobDirectory<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>CloudBlockBlob<ept id="p3">**</ept> 对象，分别表示容器中的目录和 Blob。生成的输出如下所示：</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>另外，也可以将 <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> 方法的 <bpt id="p2">**</bpt>UseFlatBlobListing<ept id="p2">**</ept> 参数设置为 <bpt id="p3">**</bpt>true<ept id="p3">**</ept>。在这种情况下，作为 <bpt id="p4">**</bpt>CloudBlockBlob<ept id="p4">**</ept> 对象返回容器中的每一个 Blob。对 <bpt id="p5">**</bpt>ListBlobs<ept id="p5">**</ept> 的调用返回一个平面列表，如下所示：</source>
          <target state="new">另外，也可以将 <bpt id="p1">**</bpt>ListBlobs<ept id="p1">**</ept> 方法的 <bpt id="p2">**</bpt>UseFlatBlobListing<ept id="p2">**</ept> 参数设置为 <bpt id="p3">**</bpt>true<ept id="p3">**</ept>。在这种情况下，作为 <bpt id="p4">**</bpt>CloudBlockBlob<ept id="p4">**</ept> 对象返回容器中的每一个 Blob。对 <bpt id="p5">**</bpt>ListBlobs<ept id="p5">**</ept> 的调用返回一个平面列表，如下所示：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>结果如下所示：</source>
          <target state="new">结果如下所示：</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>下载 Blob</source>
          <target state="new">下载 Blob</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>若要下载 Blob，请首先检索 Blob 引用，然后调用 <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> 方法。以下示例使用 <bpt id="p2">**</bpt>DownloadToStream<ept id="p2">**</ept> 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。</source>
          <target state="new">若要下载 Blob，请首先检索 Blob 引用，然后调用 <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> 方法。以下示例使用 <bpt id="p2">**</bpt>DownloadToStream<ept id="p2">**</ept> 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>也可以使用 <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> 方法以文本字符串形式下载 Blob 的内容。</source>
          <target state="new">也可以使用 <bpt id="p1">**</bpt>DownloadToStream<ept id="p1">**</ept> 方法以文本字符串形式下载 Blob 的内容。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>删除 Blob</source>
          <target state="new">删除 Blob</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>若要删除 Blob，首先要获取 Blob 引用，然后对其调用 <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> 方法。</source>
          <target state="new">若要删除 Blob，首先要获取 Blob 引用，然后对其调用 <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>以异步方式列出页中的 Blob</source>
          <target state="new">以异步方式列出页中的 Blob</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>如果要列出大量 Blob，或需要控制一个列操作中返回的结果数，则可以结果页的方式列出 Blob。此示例显示如何以页面形式异步返回结果，这样就不会在等待返回大型结果集时阻止操作的执行。</source>
          <target state="new">如果要列出大量 Blob，或需要控制一个列操作中返回的结果数，则可以结果页的方式列出 Blob。此示例显示如何以页面形式异步返回结果，这样就不会在等待返回大型结果集时阻止操作的执行。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>此示例演示平面 Blob 列表，但您也可以执行分层列表，只需将 <bpt id="p1">**</bpt>ListBlobsSegmentedAsync<ept id="p1">**</ept> 方法的 <ph id="ph1">`useFlatBlobListing`</ph> 参数设置为 <ph id="ph2">`false`</ph> 即可。</source>
          <target state="new">此示例演示平面 Blob 列表，但您也可以执行分层列表，只需将 <bpt id="p1">**</bpt>ListBlobsSegmentedAsync<ept id="p1">**</ept> 方法的 <ph id="ph1">`useFlatBlobListing`</ph> 参数设置为 <ph id="ph2">`false`</ph> 即可。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>由于示例方法调用异步方法，因此必须以 <ph id="ph1">`async`</ph> 关键字开头，且必须返回 <bpt id="p1">**</bpt>Task<ept id="p1">**</ept> 对象。为 <bpt id="p2">**</bpt>ListBlobsSegmentedAsync<ept id="p2">**</ept> 方法指定的 await 关键字将挂起示例方法的执行，直至列操作任务完成。</source>
          <target state="new">由于示例方法调用异步方法，因此必须以 <ph id="ph1">`async`</ph> 关键字开头，且必须返回 <bpt id="p1">**</bpt>Task<ept id="p1">**</ept> 对象。为 <bpt id="p2">**</bpt>ListBlobsSegmentedAsync<ept id="p2">**</ept> 方法指定的 await 关键字将挂起示例方法的执行，直至列操作任务完成。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>写入追加 Blob</source>
          <target state="new">写入追加 Blob</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>追加 Blob 是一个新类型的 Blob，由用于 .NET 的 Azure 存储服务客户端库 5.x 版引入。追加 Blob 针对追加操作（例如日志记录）进行了优化。类似于块 Blob，追加 Blob 由块组成，但是当您将新的块添加到追加 Blob 时，始终追加到该 Blob 的末尾。您不能更新或删除追加 Blob 中现有的块。追加 Blob 的块 ID 不公开，因为它们是用于一个块存储(block blob)。</source>
          <target state="new">追加 Blob 是一个新类型的 Blob，由用于 .NET 的 Azure 存储服务客户端库 5.x 版引入。追加 Blob 针对追加操作（例如日志记录）进行了优化。类似于块 Blob，追加 Blob 由块组成，但是当您将新的块添加到追加 Blob 时，始终追加到该 Blob 的末尾。您不能更新或删除追加 Blob 中现有的块。追加 Blob 的块 ID 不公开，因为它们是用于一个块存储(block blob)。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>追加 Blob 中的每个块可以有不同的大小，最大为 4 MB，并且追加 Blob 最多可包含 50000 个块。因此，追加 Blob 的最大容量稍微大于 195 GB（4 MB X 50000 块）。</source>
          <target state="new">追加 Blob 中的每个块可以有不同的大小，最大为 4 MB，并且追加 Blob 最多可包含 50000 个块。因此，追加 Blob 的最大容量稍微大于 195 GB（4 MB X 50000 块）。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>下面的示例创建一个新的追加 Blob 并向其追加某些数据，模拟一个简单的日志记录操作。</source>
          <target state="new">下面的示例创建一个新的追加 Blob 并向其追加某些数据，模拟一个简单的日志记录操作。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>请参阅<bpt id="p1">[</bpt>了解块 Blob、页 Blob 和追加 Blob<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/ee691964.aspx)</ept>，就有关三种 Blob 之间的差异了解详细信息。</source>
          <target state="new">请参阅<bpt id="p1">[</bpt>了解块 Blob、页 Blob 和追加 Blob<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/ee691964.aspx)</ept>，就有关三种 Blob 之间的差异了解详细信息。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>现在，你已了解 Blob 存储的基础知识，可单击下面的链接了解详细信息。</source>
          <target state="new">现在，你已了解 Blob 存储的基础知识，可单击下面的链接了解详细信息。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Blob 存储参考文档</source>
          <target state="new">Blob 存储参考文档</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>.NET 存储客户端库参考</source>
          <target state="new">.NET 存储客户端库参考</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>REST API 参考</source>
          <target state="new">REST API 参考</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>其他功能指南</source>
          <target state="new">其他功能指南</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>开始使用适用于 .NET 的表存储</source>
          <target state="new">开始使用适用于 .NET 的表存储</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>开始使用适用于 .NET 的队列存储</source>
          <target state="new">开始使用适用于 .NET 的队列存储</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>开始使用适用于 .NET 的文件存储</source>
          <target state="new">开始使用适用于 .NET 的文件存储</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>使用 AzCopy 命令行实用程序传输数据</source>
          <target state="new">使用 AzCopy 命令行实用程序传输数据</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>使用 SQL 数据库存储关系数据</source>
          <target state="new">使用 SQL 数据库存储关系数据</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>如何通过 WebJobs SDK 使用 Azure Blob 存储</source>
          <target state="new">如何通过 WebJobs SDK 使用 Azure Blob 存储</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>