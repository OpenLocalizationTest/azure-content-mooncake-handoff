<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a36b2a6c7e3ea4d8756e8c98d23dad34d8ab6f2</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>编写使用服务总线队列的应用程序 | Azure</source>
          <target state="new">编写使用服务总线队列的应用程序 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>如何编写一个基于队列的、使用服务总线的简单应用程序。</source>
          <target state="new">如何编写一个基于队列的、使用服务总线的简单应用程序。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>创建使用服务总线队列的应用程序</source>
          <target state="new">创建使用服务总线队列的应用程序</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本主题介绍了服务总线队列，并说明了如何编写一个基于队列的、使用服务总线的简单应用程序。</source>
          <target state="new">本主题介绍了服务总线队列，并说明了如何编写一个基于队列的、使用服务总线的简单应用程序。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>考虑零售业中的这样一种场景，其中来自各销售点 (POS) 终端的销售数据必须路由到库存管理系统，该系统使用此数据来确定何时需要补充库存。此解决方案使用服务总线进行消息传送，以便在终端与库存管理系统之间进行通信，如下图所示：</source>
          <target state="new">考虑零售业中的这样一种场景，其中来自各销售点 (POS) 终端的销售数据必须路由到库存管理系统，该系统使用此数据来确定何时需要补充库存。此解决方案使用服务总线进行消息传送，以便在终端与库存管理系统之间进行通信，如下图所示：</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Service-Bus-Queues-Img1</source>
          <target state="new">Service-Bus-Queues-Img1</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>每个 POS 终端通过将消息发送到 <bpt id="p1">**</bpt>DataCollectionQueue<ept id="p1">**</ept> 来报告其销售数据。这些消息将保留在此队列中，直到库存管理系统检索到它们。此模式通常称为<bpt id="p2">*</bpt>异步消息传送<ept id="p2">*</ept>，因为 POS 终端无需等待库存管理系统的回应即可继续进行处理。</source>
          <target state="new">每个 POS 终端通过将消息发送到 <bpt id="p1">**</bpt>DataCollectionQueue<ept id="p1">**</ept> 来报告其销售数据。这些消息将保留在此队列中，直到库存管理系统检索到它们。此模式通常称为<bpt id="p2">*</bpt>异步消息传送<ept id="p2">*</ept>，因为 POS 终端无需等待库存管理系统的回应即可继续进行处理。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>为什么要使用队列？</source>
          <target state="new">为什么要使用队列？</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在查看设置此应用程序所需的代码之前，请考虑在此方案中使用队列而不是让 POS 终端库存管理系统直接对话（同步）的优点。</source>
          <target state="new">在查看设置此应用程序所需的代码之前，请考虑在此方案中使用队列而不是让 POS 终端库存管理系统直接对话（同步）的优点。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>暂时分离</source>
          <target state="new">暂时分离</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>使用异步消息传送模式，创建方和使用方不需要在同一时间联机。消息传送基础结构可靠地存储消息，直到使用方准备好接收它们。这将允许分布式应用程序的组件断开连接，例如，为进行维护而自动断开，或因组件故障断开连接，而不会影响整个系统。此外，使用方应用程序可能只需在一天的特定时段内联机。例如，在此零售方案中，库存管理系统可能只需要在营业日结束后进入联机状态。</source>
          <target state="new">使用异步消息传送模式，创建方和使用方不需要在同一时间联机。消息传送基础结构可靠地存储消息，直到使用方准备好接收它们。这将允许分布式应用程序的组件断开连接，例如，为进行维护而自动断开，或因组件故障断开连接，而不会影响整个系统。此外，使用方应用程序可能只需在一天的特定时段内联机。例如，在此零售方案中，库存管理系统可能只需要在营业日结束后进入联机状态。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>负载分级</source>
          <target state="new">负载分级</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>在许多应用程序中，系统负载随时间而变化，而每个工作单元所需的处理时间通常为常量。使用队列在消息创建方与使用方之间中继意味着，只需将使用方应用程序（辅助角色）预配为处理平均负载而非最大负载。队列深度将随传入负载的变化而加大和减小。这将直接根据为应用程序加载提供服务所需的基础结构的数目来节省成本。</source>
          <target state="new">在许多应用程序中，系统负载随时间而变化，而每个工作单元所需的处理时间通常为常量。使用队列在消息创建方与使用方之间中继意味着，只需将使用方应用程序（辅助角色）预配为处理平均负载而非最大负载。队列深度将随传入负载的变化而加大和减小。这将直接根据为应用程序加载提供服务所需的基础结构的数目来节省成本。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Service-Bus-Queues-Img2</source>
          <target state="new">Service-Bus-Queues-Img2</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>负载平衡</source>
          <target state="new">负载平衡</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>随着负载增加，可添加更多的辅助角色以从辅助角色队列中读取。每条消息仅由一个辅助进程处理。另外，可通过此基于拉取的负载平衡来以最合理的方式使用辅助计算机，即使这些辅助计算机具有不同的处理能力（因为它们将以其最大速率拉取消息）也是如此。此模式通常称为“使用者竞争模式”。</source>
          <target state="new">随着负载增加，可添加更多的辅助角色以从辅助角色队列中读取。每条消息仅由一个辅助进程处理。另外，可通过此基于拉取的负载平衡来以最合理的方式使用辅助计算机，即使这些辅助计算机具有不同的处理能力（因为它们将以其最大速率拉取消息）也是如此。此模式通常称为“使用者竞争模式”。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Service-Bus-Queues-Img3</source>
          <target state="new">Service-Bus-Queues-Img3</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>松散耦合</source>
          <target state="new">松散耦合</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>使用消息队列在消息创建方与使用方之间中继可在个组件之间提供固有的松散耦合。由于创建方和使用方互不相识，因此，可升级使用方，不会对创建方产生任何影响。此外，消息传送拓扑结构还可以演化而不影响现有终结点。我们将在讲解发布/订阅时介绍此内容的详细信息。</source>
          <target state="new">使用消息队列在消息创建方与使用方之间中继可在个组件之间提供固有的松散耦合。由于创建方和使用方互不相识，因此，可升级使用方，不会对创建方产生任何影响。此外，消息传送拓扑结构还可以演化而不影响现有终结点。我们将在讲解发布/订阅时介绍此内容的详细信息。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>显示相关代码</source>
          <target state="new">显示相关代码</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>以下部分介绍了使用服务总线生成此应用程序的方法。</source>
          <target state="new">以下部分介绍了使用服务总线生成此应用程序的方法。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>注册服务总线帐户和订阅</source>
          <target state="new">注册服务总线帐户和订阅</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>需要 Azure 帐户才能开始使用服务总线。如果你尚无订阅，可以在<bpt id="p1">[</bpt>此处<ept id="p1">](/pricing/1rmb-trial/?WT.mc_id=A85619ABF)</ept>注册试用版。</source>
          <target state="new">需要 Azure 帐户才能开始使用服务总线。如果你尚无订阅，可以在<bpt id="p1">[</bpt>此处<ept id="p1">](/pricing/1rmb-trial/?WT.mc_id=A85619ABF)</ept>注册试用版。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>创建服务命名空间</source>
          <target state="new">创建服务命名空间</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>拥有订阅后，即可创建新命名空间。必须为新命名空间指定在所有服务总线帐户之间唯一的名称。每个命名空间都可充当一组服务总线实体的容器。有关详细信息，请参阅<bpt id="p1">[</bpt>如何：创建或修改服务总线服务命名空间<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh690931.aspx)</ept>。</source>
          <target state="new">拥有订阅后，即可创建新命名空间。必须为新命名空间指定在所有服务总线帐户之间唯一的名称。每个命名空间都可充当一组服务总线实体的容器。有关详细信息，请参阅<bpt id="p1">[</bpt>如何：创建或修改服务总线服务命名空间<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh690931.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>安装 NuGet 包</source>
          <target state="new">安装 NuGet 包</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>若要使用服务总线服务命名空间，应用程序必须引用服务总线程序集，特别是 Microsoft.ServiceBus.dll。你可以在 Azure SDK 的一部分中找到此程序集，也可在 <bpt id="p1">[</bpt>Azure SDK 下载页<ept id="p1">](/downloads/)</ept>下载。但是，服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。有关使用 NuGet 和服务总线包的详细信息，请参阅<bpt id="p2">[</bpt>使用 NuGet 服务总线包<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/dn741354.aspx)</ept>。</source>
          <target state="new">若要使用服务总线服务命名空间，应用程序必须引用服务总线程序集，特别是 Microsoft.ServiceBus.dll。你可以在 Azure SDK 的一部分中找到此程序集，也可在 <bpt id="p1">[</bpt>Azure SDK 下载页<ept id="p1">](/downloads/)</ept>下载。但是，服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。有关使用 NuGet 和服务总线包的详细信息，请参阅<bpt id="p2">[</bpt>使用 NuGet 服务总线包<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/dn741354.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>创建队列</source>
          <target state="new">创建队列</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>服务总线消息传送实体（队列和发布/订阅主题）的管理操作通过 <bpt id="p1">[</bpt>NamespaceManager<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 类执行。服务总线使用基于安全模型的<bpt id="p2">[</bpt>共享访问签名 (SAS)<ept id="p2">](/documentation/articles/service-bus-sas-overview)</ept>。<bpt id="p3">[</bpt>TokenProvider<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.tokenprovider.aspx)</ept> 类代表具有内置工厂方法的安全令牌提供程序，这些方法可返回一些众所周知的令牌提供程序。我们将使用 <bpt id="p4">[</bpt>CreateSharedAccessSignatureTokenProvider<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.tokenprovider.createsharedaccesssignaturetokenprovider.aspx)</ept> 方法来保留 SAS 凭据。然后使用服务总线命名空间和令牌提供程序的基址构建 <bpt id="p5">[</bpt>NamespaceManager<ept id="p5">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 实例。</source>
          <target state="new">服务总线消息传送实体（队列和发布/订阅主题）的管理操作通过 <bpt id="p1">[</bpt>NamespaceManager<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 类执行。服务总线使用基于安全模型的<bpt id="p2">[</bpt>共享访问签名 (SAS)<ept id="p2">](/documentation/articles/service-bus-sas-overview)</ept>。<bpt id="p3">[</bpt>TokenProvider<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.tokenprovider.aspx)</ept> 类代表具有内置工厂方法的安全令牌提供程序，这些方法可返回一些众所周知的令牌提供程序。我们将使用 <bpt id="p4">[</bpt>CreateSharedAccessSignatureTokenProvider<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.tokenprovider.createsharedaccesssignaturetokenprovider.aspx)</ept> 方法来保留 SAS 凭据。然后使用服务总线命名空间和令牌提供程序的基址构建 <bpt id="p5">[</bpt>NamespaceManager<ept id="p5">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 实例。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>NamespaceManager<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 类提供了创建、枚举和删除消息传送实体的方法。此处显示的代码介绍了创建 <bpt id="p2">[</bpt>NamespaceManager<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 实例并用它创建 <bpt id="p3">**</bpt>DataCollectionQueue<ept id="p3">**</ept> 队列的方法。</source>
          <target state="new"><bpt id="p1">[</bpt>NamespaceManager<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 类提供了创建、枚举和删除消息传送实体的方法。此处显示的代码介绍了创建 <bpt id="p2">[</bpt>NamespaceManager<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 实例并用它创建 <bpt id="p3">**</bpt>DataCollectionQueue<ept id="p3">**</ept> 队列的方法。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>请注意，存在 <bpt id="p1">[</bpt>CreateQueue<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh322663.aspx)</ept> 方法的重载，你可以通过该方法设置队列的属性。例如，可为发送给队列的消息设置默认生存期 (TTL) 值。</source>
          <target state="new">请注意，存在 <bpt id="p1">[</bpt>CreateQueue<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh322663.aspx)</ept> 方法的重载，你可以通过该方法设置队列的属性。例如，可为发送给队列的消息设置默认生存期 (TTL) 值。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>将消息发送到队列</source>
          <target state="new">将消息发送到队列</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>为了对服务总线实体进行运行时操作（例如发送和接收消息），应用程序必须首先创建 <bpt id="p1">[</bpt>MessagingFactory<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 对象。类似于 <bpt id="p2">[</bpt>NamespaceManager<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 类，<bpt id="p3">[</bpt>MessagingFactory<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 实例也从服务命名空间和令牌提供程序的基址创建。</source>
          <target state="new">为了对服务总线实体进行运行时操作（例如发送和接收消息），应用程序必须首先创建 <bpt id="p1">[</bpt>MessagingFactory<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 对象。类似于 <bpt id="p2">[</bpt>NamespaceManager<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 类，<bpt id="p3">[</bpt>MessagingFactory<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 实例也从服务命名空间和令牌提供程序的基址创建。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>在服务总线队列中发送和接收的消息是 <bpt id="p1">[</bpt>BrokeredMessage<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> 类的实例。此类包含一组标准属性（如 <bpt id="p2">[</bpt>Label<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> 和 <bpt id="p3">[</bpt>TimeToLive<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>）、一个用来保存应用程序属性的词典以及大量随机应用程序数据。应用程序可以通过传入任何可序列化对象来设置正文（下面的示例传入 <bpt id="p4">**</bpt>SalesData<ept id="p4">**</ept> 对象，表示来自 POS 终端的销售数据），它将使用 <bpt id="p5">[</bpt>DataContractSerializer<ept id="p5">](https://msdn.microsoft.com/zh-cn/library/azure/system.runtime.serialization.datacontractserializer.aspx)</ept> 来序列化该对象。或者，也可以提供 <bpt id="p6">[</bpt>Stream<ept id="p6">](https://msdn.microsoft.com/zh-cn/library/azure/system.io.stream.aspx)</ept> 对象。</source>
          <target state="new">在服务总线队列中发送和接收的消息是 <bpt id="p1">[</bpt>BrokeredMessage<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> 类的实例。此类包含一组标准属性（如 <bpt id="p2">[</bpt>Label<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> 和 <bpt id="p3">[</bpt>TimeToLive<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>）、一个用来保存应用程序属性的词典以及大量随机应用程序数据。应用程序可以通过传入任何可序列化对象来设置正文（下面的示例传入 <bpt id="p4">**</bpt>SalesData<ept id="p4">**</ept> 对象，表示来自 POS 终端的销售数据），它将使用 <bpt id="p5">[</bpt>DataContractSerializer<ept id="p5">](https://msdn.microsoft.com/zh-cn/library/azure/system.runtime.serialization.datacontractserializer.aspx)</ept> 来序列化该对象。或者，也可以提供 <bpt id="p6">[</bpt>Stream<ept id="p6">](https://msdn.microsoft.com/zh-cn/library/azure/system.io.stream.aspx)</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>将消息发送到队列（在本例中即 <bpt id="p1">**</bpt>DataCollectionQueue<ept id="p1">**</ept>）的最简单方法是使用 <bpt id="p2">[</bpt>CreateMessageSender<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/hh322659.aspx)</ept> 从 <bpt id="p3">[</bpt>MessagingFactory<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 实例直接创建 <bpt id="p4">[</bpt>MessageSender<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagesender.aspx)</ept> 对象。</source>
          <target state="new">将消息发送到队列（在本例中即 <bpt id="p1">**</bpt>DataCollectionQueue<ept id="p1">**</ept>）的最简单方法是使用 <bpt id="p2">[</bpt>CreateMessageSender<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/hh322659.aspx)</ept> 从 <bpt id="p3">[</bpt>MessagingFactory<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 实例直接创建 <bpt id="p4">[</bpt>MessageSender<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagesender.aspx)</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>从队列接收消息</source>
          <target state="new">从队列接收消息</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>从订阅接收消息的最简单方法是使用 <bpt id="p1">[</bpt>MessageReceiver<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagereceiver.aspx)</ept> 对象，可使用 <bpt id="p2">[</bpt>CreateMessageReceiver<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/hh322642.aspx)</ept> 从 <bpt id="p3">[</bpt>MessagingFactory<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 直接创建它。消息接收方可在两种不同模式下工作：<bpt id="p4">**</bpt>ReceiveAndDelete<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>PeekLock<ept id="p5">**</ept>。创建消息接收方时，<bpt id="p6">[</bpt>ReceiveMode<ept id="p6">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> 将会被设置为 <bpt id="p7">[</bpt>CreateMessageReceiver<ept id="p7">](https://msdn.microsoft.com/zh-cn/library/azure/hh322642.aspx)</ept> 调用的一个参数。</source>
          <target state="new">从订阅接收消息的最简单方法是使用 <bpt id="p1">[</bpt>MessageReceiver<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagereceiver.aspx)</ept> 对象，可使用 <bpt id="p2">[</bpt>CreateMessageReceiver<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/hh322642.aspx)</ept> 从 <bpt id="p3">[</bpt>MessagingFactory<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 直接创建它。消息接收方可在两种不同模式下工作：<bpt id="p4">**</bpt>ReceiveAndDelete<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>PeekLock<ept id="p5">**</ept>。创建消息接收方时，<bpt id="p6">[</bpt>ReceiveMode<ept id="p6">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> 将会被设置为 <bpt id="p7">[</bpt>CreateMessageReceiver<ept id="p7">](https://msdn.microsoft.com/zh-cn/library/azure/hh322642.aspx)</ept> 调用的一个参数。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>当使用 <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> 模式时，接收是一个单次操作。即，当服务总线收到请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept> 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于服务总线将消息标记为“已使用”，因此当应用程序重新启动并重新开始使用消息时，它会漏掉在发生崩溃前使用的消息。</source>
          <target state="new">当使用 <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> 模式时，接收是一个单次操作。即，当服务总线收到请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept> 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于服务总线将消息标记为“已使用”，因此当应用程序重新启动并重新开始使用消息时，它会漏掉在发生崩溃前使用的消息。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式下，接收变成了一个两阶段操作，从而可以支持无法容忍遗漏消息的应用程序。当服务总线收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用方接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 <bpt id="p2">[</bpt>Complete<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 完成接收过程的第二个阶段。当服务总线发现 <bpt id="p3">[</bpt>Complete<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 调用时，它会将消息标记为“已使用”。</source>
          <target state="new">在 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式下，接收变成了一个两阶段操作，从而可以支持无法容忍遗漏消息的应用程序。当服务总线收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用方接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 <bpt id="p2">[</bpt>Complete<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 完成接收过程的第二个阶段。当服务总线发现 <bpt id="p3">[</bpt>Complete<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 调用时，它会将消息标记为“已使用”。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>可能会出现另外两种结果。第一种，如果应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id="p1">[</bpt>Abandon<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh181837.aspx)</ept>（而不是 <bpt id="p2">[</bpt>Complete<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept>）。这将引起服务总线解锁消息，使得同一个使用方或其他竞争使用方能够重新接收它。第二种，存在与锁定关联的超时，如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线将解锁该消息并使它可再次被接收。</source>
          <target state="new">可能会出现另外两种结果。第一种，如果应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id="p1">[</bpt>Abandon<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh181837.aspx)</ept>（而不是 <bpt id="p2">[</bpt>Complete<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept>）。这将引起服务总线解锁消息，使得同一个使用方或其他竞争使用方能够重新接收它。第二种，存在与锁定关联的超时，如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线将解锁该消息并使它可再次被接收。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>请注意，如果应用程序在处理消息之后，但在发出 <bpt id="p1">[</bpt>Complete<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 请求之前发生崩溃，则在应用程序重新启动时会将该消息重新传送给它。这通常称为<bpt id="p2">*</bpt>至少一次<ept id="p2">*</ept>处理。这表示每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案不容许重复处理，则应用程序中需要用于检测重复的其他逻辑。可以根据消息的 <bpt id="p3">[</bpt>MessageId<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx)</ept> 属性实现此要求。在多次传送尝试中，此属性的值将保持不变。这称为<bpt id="p4">*</bpt>仅一次<ept id="p4">*</ept>处理。</source>
          <target state="new">请注意，如果应用程序在处理消息之后，但在发出 <bpt id="p1">[</bpt>Complete<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 请求之前发生崩溃，则在应用程序重新启动时会将该消息重新传送给它。这通常称为<bpt id="p2">*</bpt>至少一次<ept id="p2">*</ept>处理。这表示每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案不容许重复处理，则应用程序中需要用于检测重复的其他逻辑。可以根据消息的 <bpt id="p3">[</bpt>MessageId<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx)</ept> 属性实现此要求。在多次传送尝试中，此属性的值将保持不变。这称为<bpt id="p4">*</bpt>仅一次<ept id="p4">*</ept>处理。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>此处显示的代码使用 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式接收和处理消息，如果未显式提供 <bpt id="p2">[</bpt>ReceiveMode<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> 值，则这是默认设置。</source>
          <target state="new">此处显示的代码使用 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式接收和处理消息，如果未显式提供 <bpt id="p2">[</bpt>ReceiveMode<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> 值，则这是默认设置。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>使用队列客户端</source>
          <target state="new">使用队列客户端</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>此部分中前面的示例从 <bpt id="p1">[</bpt>MessagingFactory<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 直接创建了 <bpt id="p2">[</bpt>MessageSender<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagesender.aspx)</ept> 和 <bpt id="p3">[</bpt>MessageReceiver<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagereceiver.aspx)</ept> 对象，分别用于向队列发送消息和从队列接收消息。另一种方法是使用 <bpt id="p4">[</bpt>QueueClient<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.aspx)</ept> 类，它也支持发送和接收操作，并且还具有更高级的功能，例如会话。</source>
          <target state="new">此部分中前面的示例从 <bpt id="p1">[</bpt>MessagingFactory<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagingfactory.aspx)</ept> 直接创建了 <bpt id="p2">[</bpt>MessageSender<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagesender.aspx)</ept> 和 <bpt id="p3">[</bpt>MessageReceiver<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.messagereceiver.aspx)</ept> 对象，分别用于向队列发送消息和从队列接收消息。另一种方法是使用 <bpt id="p4">[</bpt>QueueClient<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.aspx)</ept> 类，它也支持发送和接收操作，并且还具有更高级的功能，例如会话。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>了解了有关队列的基础知识，即可参阅<bpt id="p1">[</bpt>创建使用服务总线主题和订阅的应用程序<ept id="p1">](/documentation/articles/service-bus-create-topics-subscriptions)</ept>，使用服务总线中转消息传送的发布/订阅功能继续这一讨论。</source>
          <target state="new">了解了有关队列的基础知识，即可参阅<bpt id="p1">[</bpt>创建使用服务总线主题和订阅的应用程序<ept id="p1">](/documentation/articles/service-bus-create-topics-subscriptions)</ept>，使用服务总线中转消息传送的发布/订阅功能继续这一讨论。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>