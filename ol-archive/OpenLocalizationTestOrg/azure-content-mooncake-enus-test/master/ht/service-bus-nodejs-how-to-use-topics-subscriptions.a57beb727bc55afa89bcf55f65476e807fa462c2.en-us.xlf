<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27a07faa481e7b601b4b7334b11126b4ca737378</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何通过 Node.js 使用服务总线主题 | Microsoft Azure</source>
          <target state="new">如何通过 Node.js 使用服务总线主题 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在来自 Node.js 应用的 Azure 中使用服务总线主题和订阅。</source>
          <target state="new">了解如何在来自 Node.js 应用的 Azure 中使用服务总线主题和订阅。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何使用服务总线主题和订阅</source>
          <target state="new">如何使用服务总线主题和订阅</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本指南介绍如何从 Node.js 应用程序使用服务总线主题和订阅。涉及的任务包括<bpt id="p1">**</bpt>创建主题和订阅<ept id="p1">**</ept>、<bpt id="p2">**</bpt>创建订阅筛选器<ept id="p2">**</ept>、<bpt id="p3">**</bpt>将消息发送到主题<ept id="p3">**</ept>、<bpt id="p4">**</bpt>从订阅接收消息<ept id="p4">**</ept>以及<bpt id="p5">**</bpt>删除主题和订阅<ept id="p5">**</ept>。有关主题和订阅的详细信息，请参阅<bpt id="p6">[</bpt>后续步骤<ept id="p6">](#next-steps)</ept>部分。</source>
          <target state="new">本指南介绍如何从 Node.js 应用程序使用服务总线主题和订阅。涉及的任务包括<bpt id="p1">**</bpt>创建主题和订阅<ept id="p1">**</ept>、<bpt id="p2">**</bpt>创建订阅筛选器<ept id="p2">**</ept>、<bpt id="p3">**</bpt>将消息发送到主题<ept id="p3">**</ept>、<bpt id="p4">**</bpt>从订阅接收消息<ept id="p4">**</ept>以及<bpt id="p5">**</bpt>删除主题和订阅<ept id="p5">**</ept>。有关主题和订阅的详细信息，请参阅<bpt id="p6">[</bpt>后续步骤<ept id="p6">](#next-steps)</ept>部分。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>创建 Node.js 应用程序</source>
          <target state="new">创建 Node.js 应用程序</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>创建一个空的 Node.js 应用程序。有关创建 Node.js 应用程序的说明，请参阅<bpt id="p1">[</bpt><ept id="p1">创建 Node.js 应用程序并将其部署到 Azure 网站]</ept>、<bpt id="p2">[</bpt>Node.js 云服务<ept id="p2">][Node.js Cloud Service]</ept>（使用 Windows PowerShell）或“使用 WebMatrix 创建网站”。</source>
          <target state="new">创建一个空的 Node.js 应用程序。有关创建 Node.js 应用程序的说明，请参阅<bpt id="p1">[</bpt><ept id="p1">创建 Node.js 应用程序并将其部署到 Azure 网站]</ept>、<bpt id="p2">[</bpt>Node.js 云服务<ept id="p2">][Node.js Cloud Service]</ept>（使用 Windows PowerShell）或“使用 WebMatrix 创建网站”。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>配置应用程序以使用 Service Bus</source>
          <target state="new">配置应用程序以使用 Service Bus</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>若要使用服务总线，请下载 Node.js Azure 包。此包包括一组用来与服务总线 REST 服务通信的库。</source>
          <target state="new">若要使用服务总线，请下载 Node.js Azure 包。此包包括一组用来与服务总线 REST 服务通信的库。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>使用 Node 包管理器 (NPM) 可获取该程序包</source>
          <target state="new">使用 Node 包管理器 (NPM) 可获取该程序包</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>PowerShell<ept id="p1">**</ept> (Windows)、<bpt id="p2">**</bpt>Terminal<ept id="p2">**</ept> (Mac) 或 <bpt id="p3">**</bpt>Bash<ept id="p3">**</ept> (Unix) 等命令行界面导航到您在其中创建了示例应用程序的文件夹。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>PowerShell<ept id="p1">**</ept> (Windows)、<bpt id="p2">**</bpt>Terminal<ept id="p2">**</ept> (Mac) 或 <bpt id="p3">**</bpt>Bash<ept id="p3">**</ept> (Unix) 等命令行界面导航到您在其中创建了示例应用程序的文件夹。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>在命令窗口中键入 <bpt id="p1">**</bpt>npm install azure<ept id="p1">**</ept>，这应会生成以下输出：</source>
          <target state="new">在命令窗口中键入 <bpt id="p1">**</bpt>npm install azure<ept id="p1">**</ept>，这应会生成以下输出：</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>可以手动运行 <bpt id="p1">**</bpt>ls<ept id="p1">**</ept> 命令来验证是否创建了 <bpt id="p2">**</bpt>node_modules<ept id="p2">**</ept> 文件夹。在该文件夹中，找到 <bpt id="p3">**</bpt>azure<ept id="p3">**</ept> 程序包，其中包含访问服务总线主题所需的库。</source>
          <target state="new">可以手动运行 <bpt id="p1">**</bpt>ls<ept id="p1">**</ept> 命令来验证是否创建了 <bpt id="p2">**</bpt>node_modules<ept id="p2">**</ept> 文件夹。在该文件夹中，找到 <bpt id="p3">**</bpt>azure<ept id="p3">**</ept> 程序包，其中包含访问服务总线主题所需的库。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>导入模块</source>
          <target state="new">导入模块</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>使用记事本或其他文本编辑器将以下内容添加到应用程序的 <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> 文件的顶部：</source>
          <target state="new">使用记事本或其他文本编辑器将以下内容添加到应用程序的 <bpt id="p1">**</bpt>server.js<ept id="p1">**</ept> 文件的顶部：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>设置服务总线连接</source>
          <target state="new">设置服务总线连接</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Azure 模块将读取环境变量 AZURE_SERVICEBUS_NAMESPACE 和 AZURE_SERVICEBUS_ACCESS_KEY 以获取连接到服务总线所需的信息。如果未设置这些环境变量，则在调用 <bpt id="p1">**</bpt>createServiceBusService<ept id="p1">**</ept> 时必须指定帐户信息。</source>
          <target state="new">Azure 模块将读取环境变量 AZURE_SERVICEBUS_NAMESPACE 和 AZURE_SERVICEBUS_ACCESS_KEY 以获取连接到服务总线所需的信息。如果未设置这些环境变量，则在调用 <bpt id="p1">**</bpt>createServiceBusService<ept id="p1">**</ept> 时必须指定帐户信息。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>有关在 Azure 云服务的配置文件中设置环境变量的示例，请参阅<bpt id="p1">[</bpt>使用存储构建 Node.js 云服务<ept id="p1">][]</ept>。</source>
          <target state="new">有关在 Azure 云服务的配置文件中设置环境变量的示例，请参阅<bpt id="p1">[</bpt>使用存储构建 Node.js 云服务<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>有关在 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>中为 Azure 网站设置环境变量的示例，请参阅<bpt id="p2">[</bpt>使用存储构建 Node.js Web 应用程序<ept id="p2">][]</ept>。</source>
          <target state="new">有关在 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>中为 Azure 网站设置环境变量的示例，请参阅<bpt id="p2">[</bpt>使用存储构建 Node.js Web 应用程序<ept id="p2">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>创建主题</source>
          <target state="new">创建主题</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>可以通过 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象处理主题。以下代码创建 <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> 对象。将它添加到靠近 <bpt id="p3">**</bpt>server.js<ept id="p3">**</ept> 文件顶部、用于导入 azure 模块的语句之后的位置：</source>
          <target state="new">可以通过 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象处理主题。以下代码创建 <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> 对象。将它添加到靠近 <bpt id="p3">**</bpt>server.js<ept id="p3">**</ept> 文件顶部、用于导入 azure 模块的语句之后的位置：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>通过对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象调用 <bpt id="p2">**</bpt>createTopicIfNotExists<ept id="p2">**</ept>，将返回指定的主题（如果存在），否则将使用指定名称创建新主题。以下代码使用 <bpt id="p3">**</bpt>createTopicIfNotExists<ept id="p3">**</ept> 创建或连接到名为“MyTopic”的主题：</source>
          <target state="new">通过对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象调用 <bpt id="p2">**</bpt>createTopicIfNotExists<ept id="p2">**</ept>，将返回指定的主题（如果存在），否则将使用指定名称创建新主题。以下代码使用 <bpt id="p3">**</bpt>createTopicIfNotExists<ept id="p3">**</ept> 创建或连接到名为“MyTopic”的主题：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>createServiceBusService<ept id="p1">**</ept> 还支持其他选项，以允许你重写默认主题设置，如消息生存时间或最大主题大小。以下示例将最大主题大小设置为 5GB，将生存时间设置为 1 分钟：</source>
          <target state="new"><bpt id="p1">**</bpt>createServiceBusService<ept id="p1">**</ept> 还支持其他选项，以允许你重写默认主题设置，如消息生存时间或最大主题大小。以下示例将最大主题大小设置为 5GB，将生存时间设置为 1 分钟：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>筛选器</source>
          <target state="new">筛选器</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>可选的筛选操作可应用于使用 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 执行的操作。筛选操作可包括日志记录、自动重试等。筛选器是实现具有签名的方法的对象：</source>
          <target state="new">可选的筛选操作可应用于使用 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 执行的操作。筛选操作可包括日志记录、自动重试等。筛选器是实现具有签名的方法的对象：</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在对请求选项执行预处理后，该方法将调用 <ph id="ph1">`next`</ph> 并传递具有以下签名的回调：</source>
          <target state="new">在对请求选项执行预处理后，该方法将调用 <ph id="ph1">`next`</ph> 并传递具有以下签名的回调：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>在此回调中并且在处理 returnObject（来自对服务器请求的响应）后，回调需要调用 next（如果它存在以便继续处理其他筛选器）或只调用 finalCallback 以便结束服务调用。</source>
          <target state="new">在此回调中并且在处理 returnObject（来自对服务器请求的响应）后，回调需要调用 next（如果它存在以便继续处理其他筛选器）或只调用 finalCallback 以便结束服务调用。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Azure SDK for Node.js 中附带了两个实现了重试逻辑的筛选器，分别是 <bpt id="p1">**</bpt>ExponentialRetryPolicyFilter<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>LinearRetryPolicyFilter<ept id="p2">**</ept>。以下代码创建一个 <bpt id="p3">**</bpt>ServiceBusService<ept id="p3">**</ept> 对象，该对象使用 <bpt id="p4">**</bpt>ExponentialRetryPolicyFilter<ept id="p4">**</ept>：</source>
          <target state="new">Azure SDK for Node.js 中附带了两个实现了重试逻辑的筛选器，分别是 <bpt id="p1">**</bpt>ExponentialRetryPolicyFilter<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>LinearRetryPolicyFilter<ept id="p2">**</ept>。以下代码创建一个 <bpt id="p3">**</bpt>ServiceBusService<ept id="p3">**</ept> 对象，该对象使用 <bpt id="p4">**</bpt>ExponentialRetryPolicyFilter<ept id="p4">**</ept>：</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>创建订阅</source>
          <target state="new">创建订阅</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>主题订阅也是使用 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象创建的。订阅已命名，并且具有一个限制传递到订阅的虚拟队列的消息集的可选筛选器。</source>
          <target state="new">主题订阅也是使用 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象创建的。订阅已命名，并且具有一个限制传递到订阅的虚拟队列的消息集的可选筛选器。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>订阅是永久性的，并且除非删除它或删除与之相关的主题，否则订阅将一直存在。如果你的应用程序包含创建订阅的逻辑，则它应首先使用 <bpt id="p1">**</bpt>getSubscription<ept id="p1">**</ept> 方法检查该订阅是否已经存在。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>订阅是永久性的，并且除非删除它或删除与之相关的主题，否则订阅将一直存在。如果你的应用程序包含创建订阅的逻辑，则它应首先使用 <bpt id="p1">**</bpt>getSubscription<ept id="p1">**</ept> 方法检查该订阅是否已经存在。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>创建具有默认 (MatchAll) 筛选器的订阅</source>
          <target state="new">创建具有默认 (MatchAll) 筛选器的订阅</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> 筛选器是默认筛选器，在创建新订阅时未指定筛选器的情况下使用。使用 <bpt id="p2">**</bpt>MatchAll<ept id="p2">**</ept> 筛选器时，发布到主题的所有消息都将置于订阅的虚拟队列中。以下示例创建名为“AllMessages”的订阅，并使用默认的 <bpt id="p3">**</bpt>MatchAll<ept id="p3">**</ept> 筛选器。</source>
          <target state="new"><bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> 筛选器是默认筛选器，在创建新订阅时未指定筛选器的情况下使用。使用 <bpt id="p2">**</bpt>MatchAll<ept id="p2">**</ept> 筛选器时，发布到主题的所有消息都将置于订阅的虚拟队列中。以下示例创建名为“AllMessages”的订阅，并使用默认的 <bpt id="p3">**</bpt>MatchAll<ept id="p3">**</ept> 筛选器。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>创建具有筛选器的订阅</source>
          <target state="new">创建具有筛选器的订阅</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>还可以创建筛选器，以确定发送到主题的哪些消息应该在特定主题订阅中显示。</source>
          <target state="new">还可以创建筛选器，以确定发送到主题的哪些消息应该在特定主题订阅中显示。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>订阅支持的最灵活的一种筛选器是 <bpt id="p1">**</bpt>SqlFilter<ept id="p1">**</ept>，它实现了一部分 SQL92 功能。SQL 筛选器将对发布到主题的消息的属性进行操作。有关可用于 SQL 筛选器的表达式的更多详细信息，请参阅 <bpt id="p2">[</bpt>SqlFilter.SqlExpression<ept id="p2">][SqlFilter.SqlExpression]</ept> 语法。</source>
          <target state="new">订阅支持的最灵活的一种筛选器是 <bpt id="p1">**</bpt>SqlFilter<ept id="p1">**</ept>，它实现了一部分 SQL92 功能。SQL 筛选器将对发布到主题的消息的属性进行操作。有关可用于 SQL 筛选器的表达式的更多详细信息，请参阅 <bpt id="p2">[</bpt>SqlFilter.SqlExpression<ept id="p2">][SqlFilter.SqlExpression]</ept> 语法。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>可以使用 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象的 <bpt id="p2">**</bpt>createRule<ept id="p2">**</ept> 方法向订阅中添加筛选器。此方法允许你向现有订阅中添加新筛选器。</source>
          <target state="new">可以使用 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象的 <bpt id="p2">**</bpt>createRule<ept id="p2">**</ept> 方法向订阅中添加筛选器。此方法允许你向现有订阅中添加新筛选器。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 由于默认筛选器会自动应用到所有新订阅，因此，你必须首先删除默认筛选器，否则 <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> 会替代你可能指定的任何其他筛选器。可以使用 <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> 对象的 <bpt id="p3">**</bpt>deleteRule<ept id="p3">**</ept> 方法删除默认规则。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 由于默认筛选器会自动应用到所有新订阅，因此，你必须首先删除默认筛选器，否则 <bpt id="p1">**</bpt>MatchAll<ept id="p1">**</ept> 会替代你可能指定的任何其他筛选器。可以使用 <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> 对象的 <bpt id="p3">**</bpt>deleteRule<ept id="p3">**</ept> 方法删除默认规则。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>以下示例创建了一个名为 <ph id="ph1">`HighMessages`</ph> 的订阅（带有只选择自定义 <bpt id="p1">**</bpt>messagenumber<ept id="p1">**</ept> 属性大于 3 的消息的 <bpt id="p2">**</bpt>SqlFilter<ept id="p2">**</ept>）：</source>
          <target state="new">以下示例创建了一个名为 <ph id="ph1">`HighMessages`</ph> 的订阅（带有只选择自定义 <bpt id="p1">**</bpt>messagenumber<ept id="p1">**</ept> 属性大于 3 的消息的 <bpt id="p2">**</bpt>SqlFilter<ept id="p2">**</ept>）：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>类似地，以下示例创建一个名为 <ph id="ph1">`LowMessages`</ph> 的订阅，其 <bpt id="p1">**</bpt>SqlFilter<ept id="p1">**</ept> 只选择 <bpt id="p2">**</bpt>messagenumber<ept id="p2">**</ept> 属性小于或等于 3 的消息：</source>
          <target state="new">类似地，以下示例创建一个名为 <ph id="ph1">`LowMessages`</ph> 的订阅，其 <bpt id="p1">**</bpt>SqlFilter<ept id="p1">**</ept> 只选择 <bpt id="p2">**</bpt>messagenumber<ept id="p2">**</ept> 属性小于或等于 3 的消息：</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>现在，当消息发送到 <ph id="ph1">`MyTopic`</ph> 时，它始终会传送给订阅了 <ph id="ph2">`AllMessages`</ph> 主题订阅的接收者，并且选择性地传送给订阅了 <ph id="ph3">`HighMessages`</ph> 和 <ph id="ph4">`LowMessages`</ph> 主题订阅的接收者（具体取决于消息内容）。</source>
          <target state="new">现在，当消息发送到 <ph id="ph1">`MyTopic`</ph> 时，它始终会传送给订阅了 <ph id="ph2">`AllMessages`</ph> 主题订阅的接收者，并且选择性地传送给订阅了 <ph id="ph3">`HighMessages`</ph> 和 <ph id="ph4">`LowMessages`</ph> 主题订阅的接收者（具体取决于消息内容）。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>如何将消息发送到主题</source>
          <target state="new">如何将消息发送到主题</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>若要将消息发送到服务总线主题，你的应用程序必须使用 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象的 <bpt id="p2">**</bpt>sendTopicMessage<ept id="p2">**</ept> 方法。发送到服务总线主题的消息是 <bpt id="p3">**</bpt>BrokeredMessage<ept id="p3">**</ept> 对象。<bpt id="p4">**</bpt>BrokeredMessage<ept id="p4">**</ept> 对象具有一组标准属性（如 <bpt id="p5">**</bpt>Label<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>TimeToLive<ept id="p6">**</ept>）、一个用来保存自定义应用程序特定属性的字典以及一段字符串数据正文。应用程序可以通过将字符串值传递给 <bpt id="p7">**</bpt>sendTopicMessage<ept id="p7">**</ept> 来设置消息正文，并且任何必需的标准属性将用默认值填充。</source>
          <target state="new">若要将消息发送到服务总线主题，你的应用程序必须使用 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象的 <bpt id="p2">**</bpt>sendTopicMessage<ept id="p2">**</ept> 方法。发送到服务总线主题的消息是 <bpt id="p3">**</bpt>BrokeredMessage<ept id="p3">**</ept> 对象。<bpt id="p4">**</bpt>BrokeredMessage<ept id="p4">**</ept> 对象具有一组标准属性（如 <bpt id="p5">**</bpt>Label<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>TimeToLive<ept id="p6">**</ept>）、一个用来保存自定义应用程序特定属性的字典以及一段字符串数据正文。应用程序可以通过将字符串值传递给 <bpt id="p7">**</bpt>sendTopicMessage<ept id="p7">**</ept> 来设置消息正文，并且任何必需的标准属性将用默认值填充。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>下面的示例演示如何向“MyTopic”发送五条测试消息。请注意，每条消息的 <bpt id="p1">**</bpt>messagenumber<ept id="p1">**</ept> 属性值因循环迭代而异（这将确定由哪些订阅接收它）：</source>
          <target state="new">下面的示例演示如何向“MyTopic”发送五条测试消息。请注意，每条消息的 <bpt id="p1">**</bpt>messagenumber<ept id="p1">**</ept> 属性值因循环迭代而异（这将确定由哪些订阅接收它）：</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Service Bus 主题支持最大为 256 MB 的消息（标头最大为 64 MB，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。</source>
          <target state="new">Service Bus 主题支持最大为 256 MB 的消息（标头最大为 64 MB，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>从订阅接收消息</source>
          <target state="new">从订阅接收消息</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象使用 <bpt id="p2">**</bpt>receiveSubscriptionMessage<ept id="p2">**</ept> 方法可从订阅接收消息。默认情况下，在读取消息后将从订阅中删除它们；但是，你可以读取（速览）并锁定消息，以避免将其从订阅中删除，只要将可选参数 <bpt id="p3">**</bpt>isPeekLock<ept id="p3">**</ept> 设置为 <bpt id="p4">**</bpt>true<ept id="p4">**</ept> 即可。</source>
          <target state="new">对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象使用 <bpt id="p2">**</bpt>receiveSubscriptionMessage<ept id="p2">**</ept> 方法可从订阅接收消息。默认情况下，在读取消息后将从订阅中删除它们；但是，你可以读取（速览）并锁定消息，以避免将其从订阅中删除，只要将可选参数 <bpt id="p3">**</bpt>isPeekLock<ept id="p3">**</ept> 设置为 <bpt id="p4">**</bpt>true<ept id="p4">**</ept> 即可。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>在接收过程中读取并删除消息的默认行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。</source>
          <target state="new">在接收过程中读取并删除消息的默认行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>如果将 <bpt id="p1">**</bpt>isPeekLock<ept id="p1">**</ept> 参数设置为 <bpt id="p2">**</bpt>true<ept id="p2">**</ept>，则接收将变成一个两阶段操作，这样就可以支持无法允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序处理完该消息（或将它可靠地存储起来留待将来处理）后，通过调用 <bpt id="p3">**</bpt>deleteMessage<ept id="p3">**</ept> 方法并提供要删除的消息作为参数来完成接收过程的第二阶段。<bpt id="p4">**</bpt>deleteMessage<ept id="p4">**</ept> 方法会将消息标记为已使用，并从订阅中删除它。</source>
          <target state="new">如果将 <bpt id="p1">**</bpt>isPeekLock<ept id="p1">**</ept> 参数设置为 <bpt id="p2">**</bpt>true<ept id="p2">**</ept>，则接收将变成一个两阶段操作，这样就可以支持无法允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序处理完该消息（或将它可靠地存储起来留待将来处理）后，通过调用 <bpt id="p3">**</bpt>deleteMessage<ept id="p3">**</ept> 方法并提供要删除的消息作为参数来完成接收过程的第二阶段。<bpt id="p4">**</bpt>deleteMessage<ept id="p4">**</ept> 方法会将消息标记为已使用，并从订阅中删除它。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>以下示例演示如何使用 <bpt id="p1">**</bpt>receiveSubscriptionMessage<ept id="p1">**</ept> 接收和处理消息。该示例先从“LowMessages”订阅接收并删除一条消息，然后使用设置为 true 的 <bpt id="p2">**</bpt>isPeekLock<ept id="p2">**</ept> 从“HighMessages”订阅接收一条消息。最后使用 <bpt id="p3">**</bpt>deleteMessage<ept id="p3">**</ept> 删除该消息：</source>
          <target state="new">以下示例演示如何使用 <bpt id="p1">**</bpt>receiveSubscriptionMessage<ept id="p1">**</ept> 接收和处理消息。该示例先从“LowMessages”订阅接收并删除一条消息，然后使用设置为 true 的 <bpt id="p2">**</bpt>isPeekLock<ept id="p2">**</ept> 从“HighMessages”订阅接收一条消息。最后使用 <bpt id="p3">**</bpt>deleteMessage<ept id="p3">**</ept> 删除该消息：</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>如何处理应用程序崩溃和不可读消息</source>
          <target state="new">如何处理应用程序崩溃和不可读消息</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象调用 <bpt id="p2">**</bpt>unlockMessage<ept id="p2">**</ept> 方法。这会导致 Service Bus 在订阅中将该消息解锁，使之再次可供同一使用方应用程序或其他使用方应用程序接收。</source>
          <target state="new">Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 对象调用 <bpt id="p2">**</bpt>unlockMessage<ept id="p2">**</ept> 方法。这会导致 Service Bus 在订阅中将该消息解锁，使之再次可供同一使用方应用程序或其他使用方应用程序接收。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>还存在与订阅中的锁定消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使之重新可供接收。</source>
          <target state="new">还存在与订阅中的锁定消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使之重新可供接收。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>如果应用程序在处理消息之后，调用 <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作<bpt id="p2">**</bpt>至少处理一次<ept id="p2">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 <bpt id="p3">**</bpt>MessageId<ept id="p3">**</ept> 属性来实现，该属性在多次传送尝试中保持不变。</source>
          <target state="new">如果应用程序在处理消息之后，调用 <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作<bpt id="p2">**</bpt>至少处理一次<ept id="p2">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 <bpt id="p3">**</bpt>MessageId<ept id="p3">**</ept> 属性来实现，该属性在多次传送尝试中保持不变。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>删除主题和订阅</source>
          <target state="new">删除主题和订阅</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>主题和订阅具有持久性，必须通过 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>或以编程方式显式删除。以下示例演示了如何删除名为 <ph id="ph1">`MyTopic`</ph> 的主题：</source>
          <target state="new">主题和订阅具有持久性，必须通过 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>或以编程方式显式删除。以下示例演示了如何删除名为 <ph id="ph1">`MyTopic`</ph> 的主题：</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。以下示例演示了如何从 <ph id="ph1">`MyTopic`</ph> 主题中删除名为 <ph id="ph2">`HighMessages`</ph> 的订阅：</source>
          <target state="new">删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。以下示例演示了如何从 <ph id="ph1">`MyTopic`</ph> 主题中删除名为 <ph id="ph2">`HighMessages`</ph> 的订阅：</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>现在，你已了解有关 Service Bus 主题的基础知识，单击下面的链接可了解更多信息。</source>
          <target state="new">现在，你已了解有关 Service Bus 主题的基础知识，单击下面的链接可了解更多信息。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>请参阅<bpt id="p1">[</bpt>队列、主题和订阅<ept id="p1">][]</ept>。</source>
          <target state="new">请参阅<bpt id="p1">[</bpt>队列、主题和订阅<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>SqlFilter<ept id="p1">][]</ept> 的 API 参考。</source>
          <target state="new"><bpt id="p1">[</bpt>SqlFilter<ept id="p1">][]</ept> 的 API 参考。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>访问 GitHub 上的 <bpt id="p1">[</bpt>Azure SDK for Node<ept id="p1">][]</ept> 存储库。</source>
          <target state="new">访问 GitHub 上的 <bpt id="p1">[</bpt>Azure SDK for Node<ept id="p1">][]</ept> 存储库。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>