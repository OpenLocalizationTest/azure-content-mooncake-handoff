<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">345b125e55e90c4f2e58c4c927094229d935b401</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Batch 中的作业准备和清理 | Azure</source>
          <target state="new">Batch 中的作业准备和清理 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>采用作业级准备任务最大程度地减少 Azure 批处理 ( Batch )计算节点的数据传输，并在完成作业时执行释放任务来清理节点。</source>
          <target state="new">采用作业级准备任务最大程度地减少 Azure 批处理 ( Batch )计算节点的数据传输，并在完成作业时执行释放任务来清理节点。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 Azure 批处理( Batch ) 计算节点上运行作业准备和完成任务</source>
          <target state="new">在 Azure 批处理( Batch ) 计算节点上运行作业准备和完成任务</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure 批处理( Batch ) 任务在执行之前通常需要进行某种形式的设置，同样，在作业的任务完成之后需要进行某种形式的作业后维护。批处理( Batch ) 以可选的<bpt id="p1">*</bpt>作业准备<ept id="p1">*</ept>和<bpt id="p2">*</bpt>作业解放<ept id="p2">*</ept>任务的形式提供这种准备和维护机制。</source>
          <target state="new">Azure 批处理( Batch ) 任务在执行之前通常需要进行某种形式的设置，同样，在作业的任务完成之后需要进行某种形式的作业后维护。批处理( Batch ) 以可选的<bpt id="p1">*</bpt>作业准备<ept id="p1">*</ept>和<bpt id="p2">*</bpt>作业解放<ept id="p2">*</ept>任务的形式提供这种准备和维护机制。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>在任何作业任务运行之前，作业准备任务在计划要运行任务的所有计算节点上运行。作业完成后，作业释放任务将在池中至少运行了一个任务的每个节点上运行。作业准备和释放任务允许你指定命令行在任务被调用时运行，并提供许多功能，例如文件下载、提升权限的执行、自定义环境变量、最大执行持续时间、重试计数和文件保留时间。</source>
          <target state="new">在任何作业任务运行之前，作业准备任务在计划要运行任务的所有计算节点上运行。作业完成后，作业释放任务将在池中至少运行了一个任务的每个节点上运行。作业准备和释放任务允许你指定命令行在任务被调用时运行，并提供许多功能，例如文件下载、提升权限的执行、自定义环境变量、最大执行持续时间、重试计数和文件保留时间。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>在以下部分中，你将了解如何在 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 中利用 <bpt id="p2">[</bpt>JobPreparationTask<ept id="p2">][net_job_prep]</ept> 和 <bpt id="p3">[</bpt>JobReleaseTask<ept id="p3">][net_job_release]</ept> 来使用这两种特殊类型的任务。</source>
          <target state="new">在以下部分中，你将了解如何在 <bpt id="p1">[</bpt>Batch .NET<ept id="p1">][api_net]</ept> API 中利用 <bpt id="p2">[</bpt>JobPreparationTask<ept id="p2">][net_job_prep]</ept> 和 <bpt id="p3">[</bpt>JobReleaseTask<ept id="p3">][net_job_release]</ept> 来使用这两种特殊类型的任务。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.TIP]</ph>作业准备和释放任务在“共享池”环境中特别有用；在这种环境中，计算节点的池在任务运行之间保留，并在许多不同的作业之间共享。</source>
          <target state="new"><ph id="ph1">[AZURE.TIP]</ph>作业准备和释放任务在“共享池”环境中特别有用；在这种环境中，计算节点的池在任务运行之间保留，并在许多不同的作业之间共享。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>何时使用作业准备和释放任务</source>
          <target state="new">何时使用作业准备和释放任务</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>许多情况可受益于作业准备和释放任务。下面只是其中的几种情况：</source>
          <target state="new">许多情况可受益于作业准备和释放任务。下面只是其中的几种情况：</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>通用任务数据的传输<ept id="p1">**</ept> - 批处理( Batch ) 作业通常需要一组通用的数据作为作业任务的输入。例如，在每日风险分析计算中，市场数据特定于作业，同时也是作业中所有任务通用的数据。这些市场数据（大小通常为若干 GB）应该只下载到每个计算节点一次，以供节点上运行的每个任务使用。在执行其他任务之前使用<bpt id="p2">*</bpt>作业准备任务<ept id="p2">*</ept>将数据下载到每个节点。</source>
          <target state="new"><bpt id="p1">**</bpt>通用任务数据的传输<ept id="p1">**</ept> - 批处理( Batch ) 作业通常需要一组通用的数据作为作业任务的输入。例如，在每日风险分析计算中，市场数据特定于作业，同时也是作业中所有任务通用的数据。这些市场数据（大小通常为若干 GB）应该只下载到每个计算节点一次，以供节点上运行的每个任务使用。在执行其他任务之前使用<bpt id="p2">*</bpt>作业准备任务<ept id="p2">*</ept>将数据下载到每个节点。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>作业数据删除<ept id="p1">**</ept> - 在共享池环境中，池的计算节点不在作业之间取消保留，为了要节省节点上的磁盘空间或满足组织的安全政策，可能需要在运行之间删除作业数据。使用<bpt id="p2">*</bpt>作业释放任务<ept id="p2">*</ept>可以删除作业准备任务下载的数据或者在任务执行期间生成的数据。</source>
          <target state="new"><bpt id="p1">**</bpt>作业数据删除<ept id="p1">**</ept> - 在共享池环境中，池的计算节点不在作业之间取消保留，为了要节省节点上的磁盘空间或满足组织的安全政策，可能需要在运行之间删除作业数据。使用<bpt id="p2">*</bpt>作业释放任务<ept id="p2">*</ept>可以删除作业准备任务下载的数据或者在任务执行期间生成的数据。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>日志保留<ept id="p1">**</ept> - 你可能想要保留任务生成的日志，或失败应用程序所生成的崩溃转储文件。在这种情况下，使用<bpt id="p2">*</bpt>作业释放任务<ept id="p2">*</ept>可将这些数据压缩并上载到 <bpt id="p3">[</bpt>Azure 存储<ept id="p3">][azure_storage]</ept>帐户。</source>
          <target state="new"><bpt id="p1">**</bpt>日志保留<ept id="p1">**</ept> - 你可能想要保留任务生成的日志，或失败应用程序所生成的崩溃转储文件。在这种情况下，使用<bpt id="p2">*</bpt>作业释放任务<ept id="p2">*</ept>可将这些数据压缩并上载到 <bpt id="p3">[</bpt>Azure 存储<ept id="p3">][azure_storage]</ept>帐户。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>作业准备任务</source>
          <target state="new">作业准备任务</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在执行作业的任务之前，将在计划运行任务的每个计算节点上执行作业准备任务。默认情况下，Batch 服务将等待作业准备任务完成，然后才在节点上运行计划的任务，但你可以将该服务配置为不要等待。如果计算节点重新启动，作业准备任务将在该节点上再次运行，但你也可以禁用此行为。</source>
          <target state="new">在执行作业的任务之前，将在计划运行任务的每个计算节点上执行作业准备任务。默认情况下，Batch 服务将等待作业准备任务完成，然后才在节点上运行计划的任务，但你可以将该服务配置为不要等待。如果计算节点重新启动，作业准备任务将在该节点上再次运行，但你也可以禁用此行为。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>作业准备任务只会在计划运行任务的节点上运行。例如，这可以防止未分配任务的节点不必要地执行准备任务，从而节省数据传输费用。当作业的任务数小于池中的节点数，或者在任务计数小于可能的并行任务总数的情况下启用了<bpt id="p1">[</bpt>并行任务执行<ept id="p1">](/documentation/articles/batch-parallel-node-tasks)</ept>，从而留出一些空闲节点时，便可以实现上述目的。</source>
          <target state="new">作业准备任务只会在计划运行任务的节点上运行。例如，这可以防止未分配任务的节点不必要地执行准备任务，从而节省数据传输费用。当作业的任务数小于池中的节点数，或者在任务计数小于可能的并行任务总数的情况下启用了<bpt id="p1">[</bpt>并行任务执行<ept id="p1">](/documentation/articles/batch-parallel-node-tasks)</ept>，从而留出一些空闲节点时，便可以实现上述目的。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> <bpt id="p1">[</bpt>JobPreparationTask<ept id="p1">][net\_job\_prep\_cloudjob]</ept> 与 <bpt id="p2">[</bpt>CloudPool.StartTask<ept id="p2">][pool_starttask]</ept> 的不同之处在于，JobPreparationTask 在每个作业启动时执行，而 StartTask 只在计算节点首次加入池或重新启动时执行。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> <bpt id="p1">[</bpt>JobPreparationTask<ept id="p1">][net\_job\_prep\_cloudjob]</ept> 与 <bpt id="p2">[</bpt>CloudPool.StartTask<ept id="p2">][pool_starttask]</ept> 的不同之处在于，JobPreparationTask 在每个作业启动时执行，而 StartTask 只在计算节点首次加入池或重新启动时执行。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>作业释放任务</source>
          <target state="new">作业释放任务</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>作业完成后，作业释放任务将在池中至少运行了一个任务的每个节点上执行。可以通过发出终止请求将作业标记为已完成。然后，Batch 服务会将作业状态设置为<bpt id="p1">*</bpt>正在终止<ept id="p1">*</ept>，终止与任务关联的任何活动任务或正在运行的任务，并运行作业释放任务。然后，该作业将进入<bpt id="p2">*</bpt>已完成<ept id="p2">*</ept>状态。</source>
          <target state="new">作业完成后，作业释放任务将在池中至少运行了一个任务的每个节点上执行。可以通过发出终止请求将作业标记为已完成。然后，Batch 服务会将作业状态设置为<bpt id="p1">*</bpt>正在终止<ept id="p1">*</ept>，终止与任务关联的任何活动任务或正在运行的任务，并运行作业释放任务。然后，该作业将进入<bpt id="p2">*</bpt>已完成<ept id="p2">*</ept>状态。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>作业删除操作也会执行作业释放任务。但是，如果以前终止了某个作业，则以后删除该作业时，释放任务不会再次运行。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>作业删除操作也会执行作业释放任务。但是，如果以前终止了某个作业，则以后删除该作业时，释放任务不会再次运行。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Batch .NET API 中的作业准备和释放任务</source>
          <target state="new">Batch .NET API 中的作业准备和释放任务</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>若要指定作业准备任务，可以创建并配置 <bpt id="p1">[</bpt>JobPreparationTask<ept id="p1">][net_job_prep]</ept> 对象，然后将它分配到作业的 <bpt id="p2">[</bpt>CloudJob.JobPreparationTask<ept id="p2">][net_job_prep_cloudjob]</ept> 属性。同样，初始化 <bpt id="p3">[</bpt>JobReleaseTask<ept id="p3">][net_job_release]</ept> 并将它分配到作业的 <bpt id="p4">[</bpt>CloudJob.JobReleaseTask<ept id="p4">][net_job_prep_cloudjob]</ept> 属性可以设置作业的释放任务。</source>
          <target state="new">若要指定作业准备任务，可以创建并配置 <bpt id="p1">[</bpt>JobPreparationTask<ept id="p1">][net_job_prep]</ept> 对象，然后将它分配到作业的 <bpt id="p2">[</bpt>CloudJob.JobPreparationTask<ept id="p2">][net_job_prep_cloudjob]</ept> 属性。同样，初始化 <bpt id="p3">[</bpt>JobReleaseTask<ept id="p3">][net_job_release]</ept> 并将它分配到作业的 <bpt id="p4">[</bpt>CloudJob.JobReleaseTask<ept id="p4">][net_job_prep_cloudjob]</ept> 属性可以设置作业的释放任务。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>在此代码段中，<ph id="ph1">`myBatchClient`</ph> 是完全初始化的 <bpt id="p1">[</bpt>BatchClient<ept id="p1">][net_batch_client]</ept> 实例，<ph id="ph2">`myPool`</ph> 是 Batch 帐户中的现有池。</source>
          <target state="new">在此代码段中，<ph id="ph1">`myBatchClient`</ph> 是完全初始化的 <bpt id="p1">[</bpt>BatchClient<ept id="p1">][net_batch_client]</ept> 实例，<ph id="ph2">`myPool`</ph> 是 Batch 帐户中的现有池。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>如上所述，终止或删除作业时会执行释放任务。可以通过调用 <bpt id="p1">[</bpt>PoolOperations.TerminateJobAsync<ept id="p1">][net_job_terminate]</ept> 使用 Batch .NET API 终止作业。可以使用 <bpt id="p2">[</bpt>PoolOperations.DeleteJobAsync<ept id="p2">][net_job_delete]</ept> 删除作业。这两项操作通常都是在作业的任务已完成或者达到了你定义的超时时完成。</source>
          <target state="new">如上所述，终止或删除作业时会执行释放任务。可以通过调用 <bpt id="p1">[</bpt>PoolOperations.TerminateJobAsync<ept id="p1">][net_job_terminate]</ept> 使用 Batch .NET API 终止作业。可以使用 <bpt id="p2">[</bpt>PoolOperations.DeleteJobAsync<ept id="p2">][net_job_delete]</ept> 删除作业。这两项操作通常都是在作业的任务已完成或者达到了你定义的超时时完成。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>GitHub 上的示例项目</source>
          <target state="new">GitHub 上的示例项目</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>查看 GitHub 上的 <bpt id="p1">[</bpt>JobPrepRelease<ept id="p1">][job_prep_release_sample]</ept> 示例项目，了解作业准备和释放的操作实践。此控制台应用程序将执行以下操作：</source>
          <target state="new">查看 GitHub 上的 <bpt id="p1">[</bpt>JobPrepRelease<ept id="p1">][job_prep_release_sample]</ept> 示例项目，了解作业准备和释放的操作实践。此控制台应用程序将执行以下操作：</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>创建包含两个“小”节点的池</source>
          <target state="new">创建包含两个“小”节点的池</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>创建具有作业准备、释放和标准任务的作业</source>
          <target state="new">创建具有作业准备、释放和标准任务的作业</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>运行作业准备任务，该任务首先会将节点 ID 写入节点的“共享”目录中的文本文件内</source>
          <target state="new">运行作业准备任务，该任务首先会将节点 ID 写入节点的“共享”目录中的文本文件内</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>在每个节点上运行一个任务，该任务将其任务 ID 写入同一文本文件</source>
          <target state="new">在每个节点上运行一个任务，该任务将其任务 ID 写入同一文本文件</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>完成所有任务（或达到超时）后，将每个节点的文本文件内容输出到控制台</source>
          <target state="new">完成所有任务（或达到超时）后，将每个节点的文本文件内容输出到控制台</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>完成作业后，运行作业释放任务以从节点中删除该文件</source>
          <target state="new">完成作业后，运行作业释放任务以从节点中删除该文件</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>输出执行作业准备和释放任务的每个节点上的这些任务的退出代码</source>
          <target state="new">输出执行作业准备和释放任务的每个节点上的这些任务的退出代码</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>暂停执行，以便确认删除作业和/或池</source>
          <target state="new">暂停执行，以便确认删除作业和/或池</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>示例应用程序的输出类似于：</source>
          <target state="new">示例应用程序的输出类似于：</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>使用 Batch 资源管理器检查作业准备和释放任务</source>
          <target state="new">使用 Batch 资源管理器检查作业准备和释放任务</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>批处理( Batch ) 资源管理器<ept id="p1">][batch_explorer_article]</ept>（在 GitHub 上的<bpt id="p2">[</bpt>示例代码存储库<ept id="p2">][batch_explorer_project]</ept>中也能找到）是在 Azure 批处理( Batch ) 中开发解决方案时可以使用的绝佳工具。例如，在运行上述示例应用程序时，你可以使用批处理( Batch ) 资源管理器查看作业及其任务的属性，甚至可以下载作业任务修改的共享文本文件。</source>
          <target state="new"><bpt id="p1">[</bpt>批处理( Batch ) 资源管理器<ept id="p1">][batch_explorer_article]</ept>（在 GitHub 上的<bpt id="p2">[</bpt>示例代码存储库<ept id="p2">][batch_explorer_project]</ept>中也能找到）是在 Azure 批处理( Batch ) 中开发解决方案时可以使用的绝佳工具。例如，在运行上述示例应用程序时，你可以使用批处理( Batch ) 资源管理器查看作业及其任务的属性，甚至可以下载作业任务修改的共享文本文件。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>以下屏幕截图突出显示了当你在“作业”选项卡中选择 <bpt id="p1">*</bpt>JobPrepReleaseSampleJob<ept id="p1">*</ept> 作业时，“作业详细信息”窗格中显示的作业准备和释放任务属性。</source>
          <target state="new">以下屏幕截图突出显示了当你在“作业”选项卡中选择 <bpt id="p1">*</bpt>JobPrepReleaseSampleJob<ept id="p1">*</ept> 作业时，“作业详细信息”窗格中显示的作业准备和释放任务属性。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>批处理( Batch )资源管理器</source>
          <target state="new">批处理( Batch )资源管理器</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>显示作业准备和释放任务的 Batch 资源管理器屏幕截图</source>
          <target state="new">显示作业准备和释放任务的 Batch 资源管理器屏幕截图</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>