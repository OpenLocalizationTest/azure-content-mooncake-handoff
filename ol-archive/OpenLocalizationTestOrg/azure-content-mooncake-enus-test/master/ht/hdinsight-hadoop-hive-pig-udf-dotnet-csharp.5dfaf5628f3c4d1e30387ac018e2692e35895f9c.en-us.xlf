<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1422bfd0265527275868f29bcdeacf44fc16d78c</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 HDInsight 中的 Hadoop 上将 C# 与 Hive 和 Pig 配合使用 | Azure</source>
          <target state="new">在 HDInsight 中的 Hadoop 上将 C# 与 Hive 和 Pig 配合使用 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解在 Azure HDInsight 中如何将 C# 用户定义的函数 (UDF) 与 Hive 和 Pig 流式处理配合使用。</source>
          <target state="new">了解在 Azure HDInsight 中如何将 C# 用户定义的函数 (UDF) 与 Hive 和 Pig 流式处理配合使用。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 HDInsight 中的 Hadoop 上将 C# 用户定义函数与 Hive 和 Pig 流式处理配合使用</source>
          <target state="new">在 HDInsight 中的 Hadoop 上将 C# 用户定义函数与 Hive 和 Pig 流式处理配合使用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Hive 和 Pig 非常适合用于处理 Azure HDInsight 中的数据，但有时你需要一种更通用的语言。Hive 和 Pig 都允许你通过用户定义的函数 (UDF) 或流式处理来调用外部代码。</source>
          <target state="new">Hive 和 Pig 非常适合用于处理 Azure HDInsight 中的数据，但有时你需要一种更通用的语言。Hive 和 Pig 都允许你通过用户定义的函数 (UDF) 或流式处理来调用外部代码。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>在本文档中，你将了解如何将 C# 与 Hive 和 Pig 配合使用。</source>
          <target state="new">在本文档中，你将了解如何将 C# 与 Hive 和 Pig 配合使用。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>先决条件</source>
          <target state="new">先决条件</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Windows 7、Windows 8 或 Windows 8.1。</source>
          <target state="new">Windows 7、Windows 8 或 Windows 8.1。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>以下版本的 Visual Studio：</source>
          <target state="new">以下版本的 Visual Studio：</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>包含 <bpt id="p1">[</bpt>Update 4<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=39305)</ept> 的 Visual Studio 2012 Professional/Premium/Ultimate</source>
          <target state="new">包含 <bpt id="p1">[</bpt>Update 4<ept id="p1">](http://www.microsoft.com/download/details.aspx?id=39305)</ept> 的 Visual Studio 2012 Professional/Premium/Ultimate</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>包含 <bpt id="p1">[</bpt>Update 4<ept id="p1">](https://www.microsoft.com/download/details.aspx?id=44921)</ept> 的 Visual Studio 2013 Community/Professional/Premium/Ultimate</source>
          <target state="new">包含 <bpt id="p1">[</bpt>Update 4<ept id="p1">](https://www.microsoft.com/download/details.aspx?id=44921)</ept> 的 Visual Studio 2013 Community/Professional/Premium/Ultimate</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Visual Studio 2015 预览版</source>
          <target state="new">Visual Studio 2015 预览版</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>HDInsight 群集上的 Hadoop - 有关创建群集的步骤，请参阅<bpt id="p1">[</bpt>设置 HDInsight 群集<ept id="p1">](/documentation/articles/hdinsight-provision-clusters-v1)</ept></source>
          <target state="new">HDInsight 群集上的 Hadoop - 有关创建群集的步骤，请参阅<bpt id="p1">[</bpt>设置 HDInsight 群集<ept id="p1">](/documentation/articles/hdinsight-provision-clusters-v1)</ept></target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Hadoop Tools for Visual Studio。有关安装和配置该工具的步骤，请参阅<bpt id="p1">[</bpt>开始使用 HDInsight Hadoop Tools for Visual Studio<ept id="p1">](/documentation/articles/hdinsight-hadoop-visual-studio-tools-get-started)</ept>。</source>
          <target state="new">Hadoop Tools for Visual Studio。有关安装和配置该工具的步骤，请参阅<bpt id="p1">[</bpt>开始使用 HDInsight Hadoop Tools for Visual Studio<ept id="p1">](/documentation/articles/hdinsight-hadoop-visual-studio-tools-get-started)</ept>。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>HDInsight 上的 .NET</source>
          <target state="new">HDInsight 上的 .NET</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>基于 Windows 的 HDInsight 群集上会默认安装 .NET 通用语言运行时 (CLR) 和框架。这允许你将 C# 应用程序与 Hive 和 Pig 流式处理配合使用（通过 stdout/stdin 在 Hive/Pig 与 C# 应用程序之间传递数据）。</source>
          <target state="new">基于 Windows 的 HDInsight 群集上会默认安装 .NET 通用语言运行时 (CLR) 和框架。这允许你将 C# 应用程序与 Hive 和 Pig 流式处理配合使用（通过 stdout/stdin 在 Hive/Pig 与 C# 应用程序之间传递数据）。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>.NET 和流式处理</source>
          <target state="new">.NET 和流式处理</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>流式处理涉及 Hive 和 Pig 将数据通过 stdout 传递到外部应用程序，并通过 stdin 接收结果。对于 C# 应用程序，这可以通过 <ph id="ph1">`Console.ReadLine()`</ph> 和 <ph id="ph2">`Console.WriteLine()`</ph> 非常轻松地实现。</source>
          <target state="new">流式处理涉及 Hive 和 Pig 将数据通过 stdout 传递到外部应用程序，并通过 stdin 接收结果。对于 C# 应用程序，这可以通过 <ph id="ph1">`Console.ReadLine()`</ph> 和 <ph id="ph2">`Console.WriteLine()`</ph> 非常轻松地实现。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>因为 Hive 和 Pig 在运行时需要调用应用程序，因此，应当为你的 C# 项目使用<bpt id="p1">**</bpt>控制台应用程序<ept id="p1">**</ept>模板。</source>
          <target state="new">因为 Hive 和 Pig 在运行时需要调用应用程序，因此，应当为你的 C# 项目使用<bpt id="p1">**</bpt>控制台应用程序<ept id="p1">**</ept>模板。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Hive 和 C&amp;#35;</source>
          <target state="new">Hive 和 C&amp;#35;</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>创建 C# 项目</source>
          <target state="new">创建 C# 项目</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>打开 Visual Studio 并创建一个新的解决方案。对于项目类型，选择“控制台应用程序”，并将新项目命名为“HiveCSharp”。</source>
          <target state="new">打开 Visual Studio 并创建一个新的解决方案。对于项目类型，选择“控制台应用程序”，并将新项目命名为“HiveCSharp”。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> 的内容替换为以下内容：</source>
          <target state="new">将 <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> 的内容替换为以下内容：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>生成项目。</source>
          <target state="new">生成项目。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>上载到存储</source>
          <target state="new">上载到存储</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，打开“服务器资源管理器”。</source>
          <target state="new">在 Visual Studio 中，打开“服务器资源管理器”。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>依次展开“Azure”和“HDInsight”。</source>
          <target state="new">依次展开“Azure”和“HDInsight”。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>如果出现提示，请输入你的 Azure 订阅凭据，然后单击“登录”。</source>
          <target state="new">如果出现提示，请输入你的 Azure 订阅凭据，然后单击“登录”。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>展开你要将此应用程序部署到的 HDInsight 群集，然后展开“默认存储帐户”。</source>
          <target state="new">展开你要将此应用程序部署到的 HDInsight 群集，然后展开“默认存储帐户”。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>显示群集存储帐户的服务器资源管理器</source>
          <target state="new">显示群集存储帐户的服务器资源管理器</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>双击群集的“默认容器”。这将打开一个新窗口，其中显示了默认容器的内容。</source>
          <target state="new">双击群集的“默认容器”。这将打开一个新窗口，其中显示了默认容器的内容。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>单击上载图标，然后浏览到 <bpt id="p1">**</bpt>HiveCSharp<ept id="p1">**</ept> 项目的 <bpt id="p2">**</bpt>bin\\debug<ept id="p2">**</ept> 文件夹。最后，选择 HiveCSharp.exe 文件并单击“确定”。</source>
          <target state="new">单击上载图标，然后浏览到 <bpt id="p1">**</bpt>HiveCSharp<ept id="p1">**</ept> 项目的 <bpt id="p2">**</bpt>bin\\debug<ept id="p2">**</ept> 文件夹。最后，选择 HiveCSharp.exe 文件并单击“确定”。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>上载图标</source>
          <target state="new">上载图标</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>在上载完成后，你将能够通过 Hive 查询使用应用程序。</source>
          <target state="new">在上载完成后，你将能够通过 Hive 查询使用应用程序。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Hive 查询</source>
          <target state="new">Hive 查询</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，打开“服务器资源管理器”。</source>
          <target state="new">在 Visual Studio 中，打开“服务器资源管理器”。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>依次展开“Azure”和“HDInsight”。</source>
          <target state="new">依次展开“Azure”和“HDInsight”。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>右键单击你已将“HiveCSharp”应用程序部署到的群集，然后选择“编写 Hive 查询”。</source>
          <target state="new">右键单击你已将“HiveCSharp”应用程序部署到的群集，然后选择“编写 Hive 查询”。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>请为 Hive 查询使用以下内容：</source>
          <target state="new">请为 Hive 查询使用以下内容：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>这将从 <ph id="ph1">`hivesampletable`</ph> 中选择 <ph id="ph2">`clientid`</ph>、<ph id="ph3">`devicemake`</ph> 和 <ph id="ph4">`devicemodel`</ph> 字段并将这些字段传递到 HiveCSharp.exe 应用程序。该查询预期应用程序返回三个字段，它们将存储为 <ph id="ph5">`clientid`</ph>、<ph id="ph6">`phoneLabel`</ph> 和 <ph id="ph7">`phoneHash`</ph>。该查询还预期在默认存储容器的根目录中找到 HiveCSharp.exe (<ph id="ph8">`add file wasb:///HiveCSharp.exe`</ph>)。</source>
          <target state="new">这将从 <ph id="ph1">`hivesampletable`</ph> 中选择 <ph id="ph2">`clientid`</ph>、<ph id="ph3">`devicemake`</ph> 和 <ph id="ph4">`devicemodel`</ph> 字段并将这些字段传递到 HiveCSharp.exe 应用程序。该查询预期应用程序返回三个字段，它们将存储为 <ph id="ph5">`clientid`</ph>、<ph id="ph6">`phoneLabel`</ph> 和 <ph id="ph7">`phoneHash`</ph>。该查询还预期在默认存储容器的根目录中找到 HiveCSharp.exe (<ph id="ph8">`add file wasb:///HiveCSharp.exe`</ph>)。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>单击“提交”将作业提交到 HDInsight 群集。此时将打开“Hive 作业摘要”窗口。</source>
          <target state="new">单击“提交”将作业提交到 HDInsight 群集。此时将打开“Hive 作业摘要”窗口。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>单击“刷新”以刷新摘要，直到“作业状态”变为“已完成”。若要查看作业输出，请单击“作业输出”。</source>
          <target state="new">单击“刷新”以刷新摘要，直到“作业状态”变为“已完成”。若要查看作业输出，请单击“作业输出”。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Pig 和 C&amp;#35;</source>
          <target state="new">Pig 和 C&amp;#35;</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>创建 C# 项目</source>
          <target state="new">创建 C# 项目</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>打开 Visual Studio 并创建一个新的解决方案。对于项目类型，选择“控制台应用程序”，并将新项目命名为“PigUDF”。</source>
          <target state="new">打开 Visual Studio 并创建一个新的解决方案。对于项目类型，选择“控制台应用程序”，并将新项目命名为“PigUDF”。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> 文件的内容替换为以下内容：</source>
          <target state="new">将 <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> 文件的内容替换为以下内容：</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>此应用程序将分析发送自 Pig 的行，并对以 <ph id="ph1">`java.lang.Exception`</ph> 开头的行重新设置格式。</source>
          <target state="new">此应用程序将分析发送自 Pig 的行，并对以 <ph id="ph1">`java.lang.Exception`</ph> 开头的行重新设置格式。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>保存 <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>，然后生成项目。</source>
          <target state="new">保存 <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept>，然后生成项目。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>上载应用程序</source>
          <target state="new">上载应用程序</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Pig 流式处理预期应用程序位于群集文件系统本地。为 HDInsight 群集启用远程桌面，然后根据<bpt id="p1">[</bpt>使用 RDP 连接到 HDInsight 群集<ept id="p1">](/documentation/articles/hdinsight-administer-use-management-portal-v1#rdp)</ept>中的说明连接到该群集。</source>
          <target state="new">Pig 流式处理预期应用程序位于群集文件系统本地。为 HDInsight 群集启用远程桌面，然后根据<bpt id="p1">[</bpt>使用 RDP 连接到 HDInsight 群集<ept id="p1">](/documentation/articles/hdinsight-administer-use-management-portal-v1#rdp)</ept>中的说明连接到该群集。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>在连接后，从你的本地计算机上 PigUDF 项目的 <bpt id="p1">**</bpt>bin/debug<ept id="p1">**</ept> 目录中复制 <bpt id="p2">**</bpt>PigUDF.exe<ept id="p2">**</ept>，并将其粘贴到群集上的 <bpt id="p3">**</bpt>%PIG\_HOME%<ept id="p3">**</ept> 目录中。</source>
          <target state="new">在连接后，从你的本地计算机上 PigUDF 项目的 <bpt id="p1">**</bpt>bin/debug<ept id="p1">**</ept> 目录中复制 <bpt id="p2">**</bpt>PigUDF.exe<ept id="p2">**</ept>，并将其粘贴到群集上的 <bpt id="p3">**</bpt>%PIG\_HOME%<ept id="p3">**</ept> 目录中。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>通过 Pig Latin 使用应用程序</source>
          <target state="new">通过 Pig Latin 使用应用程序</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>从远程桌面会话中，使用桌面上的“Hadoop 命令行”图标启动 Hadoop 命令行。</source>
          <target state="new">从远程桌面会话中，使用桌面上的“Hadoop 命令行”图标启动 Hadoop 命令行。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>使用以下命令来启动 Pig 命令行：</source>
          <target state="new">使用以下命令来启动 Pig 命令行：</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>系统将为你提供 <ph id="ph1">`grunt&gt;`</ph> 提示符。</source>
          <target state="new">系统将为你提供 <ph id="ph1">`grunt&gt;`</ph> 提示符。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>输入以下命令以使用 .NET Framework 应用程序运行简单的 Pig 作业：</source>
          <target state="new">输入以下命令以使用 .NET Framework 应用程序运行简单的 Pig 作业：</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`DEFINE`</ph> 语句为 pigudf.exe 应用程序创建别名 <ph id="ph2">`streamer`</ph>，<ph id="ph3">`SHIP`</ph> 将其在群集的节点中进行分发。以后，可以将 <ph id="ph4">`streamer`</ph> 与 <ph id="ph5">`STREAM`</ph> 运算符配合使用来处理 LOG 中包含的单一行，并将数据返回为一系列的列。</source>
          <target state="new"><ph id="ph1">`DEFINE`</ph> 语句为 pigudf.exe 应用程序创建别名 <ph id="ph2">`streamer`</ph>，<ph id="ph3">`SHIP`</ph> 将其在群集的节点中进行分发。以后，可以将 <ph id="ph4">`streamer`</ph> 与 <ph id="ph5">`STREAM`</ph> 运算符配合使用来处理 LOG 中包含的单一行，并将数据返回为一系列的列。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>用于流式处理的应用程序名称在使用别名时必须用 <ph id="ph2">`（反引号）字符括起来，当与 `</ph>SHIP` 一起使用时必须用 '（单引号）括起来。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>用于流式处理的应用程序名称在使用别名时必须用 <ph id="ph2">`（反引号）字符括起来，当与 `</ph>SHIP` 一起使用时必须用 '（单引号）括起来。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>在输入最后一行后，该作业应该启动。最终，它将返回类似于以下内容的输出：</source>
          <target state="new">在输入最后一行后，该作业应该启动。最终，它将返回类似于以下内容的输出：</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>摘要</source>
          <target state="new">摘要</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>在本文档中，你已了解了如何在 HDInsight 上通过 Hive 和 Pig 使用 .NET Framework 应用程序。如果希望了解如何将 Python 与 Hive 和 Pig 配合使用，请参阅<bpt id="p1">[</bpt>在 HDInsight 中将 Python 与 Hive 和 Pig 配合使用<ept id="p1">](/documentation/articles/hdinsight-python)</ept>。</source>
          <target state="new">在本文档中，你已了解了如何在 HDInsight 上通过 Hive 和 Pig 使用 .NET Framework 应用程序。如果希望了解如何将 Python 与 Hive 和 Pig 配合使用，请参阅<bpt id="p1">[</bpt>在 HDInsight 中将 Python 与 Hive 和 Pig 配合使用<ept id="p1">](/documentation/articles/hdinsight-python)</ept>。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>若要了解使用 Pig、Hive 的其他方式以及如何使用 MapReduce，请参阅以下文章：</source>
          <target state="new">若要了解使用 Pig、Hive 的其他方式以及如何使用 MapReduce，请参阅以下文章：</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>将 Hive 与 HDInsight 配合使用</source>
          <target state="new">将 Hive 与 HDInsight 配合使用</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>将 Pig 与 HDInsight 配合使用</source>
          <target state="new">将 Pig 与 HDInsight 配合使用</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>将 MapReduce 与 HDInsight 配合使用</source>
          <target state="new">将 MapReduce 与 HDInsight 配合使用</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>