<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4cb1699590351717bf1cecdead0cbed9148bddd8</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>用于 SQL 数据库的非 1433 端口 | Azure</source>
          <target state="new">用于 SQL 数据库的非 1433 端口 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>从 ADO.NET 到 Azure SQL 数据库 V12 的客户端连接有时会绕过代理直接与数据库交互。除 1433 以外的端口变得非常重要。</source>
          <target state="new">从 ADO.NET 到 Azure SQL 数据库 V12 的客户端连接有时会绕过代理直接与数据库交互。除 1433 以外的端口变得非常重要。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>用于 ADO.NET 4.5 和 SQL 数据库 V12 的非 1433 端口</source>
          <target state="new">用于 ADO.NET 4.5 和 SQL 数据库 V12 的非 1433 端口</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本主题介绍 Azure SQL 数据库 V12 对于使用 ADO.NET 4.5 或更高版本的客户端连接行为所带来的变化。</source>
          <target state="new">本主题介绍 Azure SQL 数据库 V12 对于使用 ADO.NET 4.5 或更高版本的客户端连接行为所带来的变化。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>SQL 数据库 V11：端口 1433</source>
          <target state="new">SQL 数据库 V11：端口 1433</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>当客户端程序使用 ADO.NET 4.5 来连接并查询 SQL 数据库 V11 时，内部顺序如下：</source>
          <target state="new">当客户端程序使用 ADO.NET 4.5 来连接并查询 SQL 数据库 V11 时，内部顺序如下：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>ADO.NET 尝试连接到 SQL 数据库。</source>
          <target state="new">ADO.NET 尝试连接到 SQL 数据库。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ADO.NET 使用端口 1433 来调用中间件模块，中间件将连接到 SQL 数据库。</source>
          <target state="new">ADO.NET 使用端口 1433 来调用中间件模块，中间件将连接到 SQL 数据库。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>SQL 数据库将其响应发回给中间件，中间件将响应转发给 ADO.NET 端口 1433。</source>
          <target state="new">SQL 数据库将其响应发回给中间件，中间件将响应转发给 ADO.NET 端口 1433。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>术语：<ept id="p1">**</ept>我们使用<bpt id="p2">*</bpt>代理 路由<ept id="p2">*</ept>来描述 ADO.NET 与 SQL 数据库交互的上述顺序。如果没有涉及到中间件，我们说使用的是<bpt id="p3">*</bpt>直接路由<ept id="p3">*</ept>。</source>
          <target state="new"><bpt id="p1">**</bpt>术语：<ept id="p1">**</ept>我们使用<bpt id="p2">*</bpt>代理 路由<ept id="p2">*</ept>来描述 ADO.NET 与 SQL 数据库交互的上述顺序。如果没有涉及到中间件，我们说使用的是<bpt id="p3">*</bpt>直接路由<ept id="p3">*</ept>。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>SQL 数据库 V12：内部与外部</source>
          <target state="new">SQL 数据库 V12：内部与外部</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>对于现 V12 的连接，我们必须询问你的客户端程序是在 Azure 云边界<bpt id="p1">*</bpt>外部<ept id="p1">*</ept>还是<bpt id="p2">*</bpt>内部<ept id="p2">*</ept>运行。以下小节讨论了两种常见案例。</source>
          <target state="new">对于现 V12 的连接，我们必须询问你的客户端程序是在 Azure 云边界<bpt id="p1">*</bpt>外部<ept id="p1">*</ept>还是<bpt id="p2">*</bpt>内部<ept id="p2">*</ept>运行。以下小节讨论了两种常见案例。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>外部：<ept id="p1">*</ept>客户端在台式机上运行</source>
          <target state="new"><bpt id="p1">*</bpt>外部：<ept id="p1">*</ept>客户端在台式机上运行</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>端口 1433 是托管 SQL 数据库客户端应用程序的台式机上唯一必须打开的端口。</source>
          <target state="new">端口 1433 是托管 SQL 数据库客户端应用程序的台式机上唯一必须打开的端口。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>内部：<ept id="p1">*</ept>客户端在 Azure 上运行</source>
          <target state="new"><bpt id="p1">*</bpt>内部：<ept id="p1">*</ept>客户端在 Azure 上运行</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>如果你的客户端在 Azure 云边界内部运行，则它使用我们所谓的<bpt id="p1">*</bpt>直接路由<ept id="p1">*</ept>来与 SQL 数据库服务器交互。建立连接后，客户端与数据库之间的进一步交互不涉及到任何中间件代理。</source>
          <target state="new">如果你的客户端在 Azure 云边界内部运行，则它使用我们所谓的<bpt id="p1">*</bpt>直接路由<ept id="p1">*</ept>来与 SQL 数据库服务器交互。建立连接后，客户端与数据库之间的进一步交互不涉及到任何中间件代理。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>顺序如下：</source>
          <target state="new">顺序如下：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>ADO.NET 4.5（或更高版本）发起与 Azure 云的简短交互，并接收动态识别的端口号。</source>
          <target state="new">ADO.NET 4.5（或更高版本）发起与 Azure 云的简短交互，并接收动态识别的端口号。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>动态识别的端口号范围为 11000-11999 或 14000-14999。</source>
          <target state="new">动态识别的端口号范围为 11000-11999 或 14000-14999。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>然后，ADO.NET 不通过任何中间件直接连接到 SQL 数据库服务器。</source>
          <target state="new">然后，ADO.NET 不通过任何中间件直接连接到 SQL 数据库服务器。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>查询直接发送到数据库，结果直接返回到客户端。</source>
          <target state="new">查询直接发送到数据库，结果直接返回到客户端。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>请确保 Azure 客户端计算机上 11000-11999 和 14000-14999 的端口范围已保留给 ADO.NET 4.5 客户端与 SQL 数据库 V12 之间的交互。</source>
          <target state="new">请确保 Azure 客户端计算机上 11000-11999 和 14000-14999 的端口范围已保留给 ADO.NET 4.5 客户端与 SQL 数据库 V12 之间的交互。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>具体而言，范围中的端口必须没有其他任何出站阻塞器。</source>
          <target state="new">具体而言，范围中的端口必须没有其他任何出站阻塞器。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>在 Azure VM 上，<bpt id="p1">**</bpt>高级安全 Windows 防火墙<ept id="p1">**</ept>控制端口设置。</source>
          <target state="new">在 Azure VM 上，<bpt id="p1">**</bpt>高级安全 Windows 防火墙<ept id="p1">**</ept>控制端口设置。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>你可以使用<bpt id="p1">[</bpt>防火墙的用户界面<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/cc646023.aspx)</ept>为指定 <bpt id="p2">**</bpt>TCP<ept id="p2">**</ept> 协议以及语法类似于 <bpt id="p3">**</bpt>11000-11999<ept id="p3">**</ept> 的端口范围添加规则。</source>
          <target state="new">你可以使用<bpt id="p1">[</bpt>防火墙的用户界面<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/cc646023.aspx)</ept>为指定 <bpt id="p2">**</bpt>TCP<ept id="p2">**</ept> 协议以及语法类似于 <bpt id="p3">**</bpt>11000-11999<ept id="p3">**</ept> 的端口范围添加规则。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>版本澄清</source>
          <target state="new">版本澄清</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>本部分澄清引用产品版本的 Moniker。此外还列出了产品之间的版本配对。</source>
          <target state="new">本部分澄清引用产品版本的 Moniker。此外还列出了产品之间的版本配对。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>ADO.NET</source>
          <target state="new">ADO.NET</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>ADO.NET 4.0 支持 TDS 7.3 协议，但不支持 7.4。</source>
          <target state="new">ADO.NET 4.0 支持 TDS 7.3 协议，但不支持 7.4。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>ADO.NET 4.5 和更高版本支持 TDS 7.4 协议。</source>
          <target state="new">ADO.NET 4.5 和更高版本支持 TDS 7.4 协议。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>SQL 数据库 V11 和 V12</source>
          <target state="new">SQL 数据库 V11 和 V12</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>本主题重点说明 SQL 数据库 V11 和 V12 之间的客户端连接差异。</source>
          <target state="new">本主题重点说明 SQL 数据库 V11 和 V12 之间的客户端连接差异。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>注意：<ept id="p1">*</ept>Transact-SQL 语句 <ph id="ph1">`SELECT @@version;`</ph> 返回一个以数字（例如“11”或“12”）开头的值，这些值与 SQL 数据库 V11 和 V12 的版本名称相匹配。</source>
          <target state="new"><bpt id="p1">*</bpt>注意：<ept id="p1">*</ept>Transact-SQL 语句 <ph id="ph1">`SELECT @@version;`</ph> 返回一个以数字（例如“11”或“12”）开头的值，这些值与 SQL 数据库 V11 和 V12 的版本名称相匹配。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>相关链接</source>
          <target state="new">相关链接</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>ADO.NET 4.6 已于 2015 年 7 月 20 日发布。可以在<bpt id="p1">[</bpt>这里<ept id="p1">](http://blogs.msdn.com/b/dotnet/archive/2015/07/20/announcing-net-framework-4-6.aspx)</ept>访问 .NET 团队的博客通告。</source>
          <target state="new">ADO.NET 4.6 已于 2015 年 7 月 20 日发布。可以在<bpt id="p1">[</bpt>这里<ept id="p1">](http://blogs.msdn.com/b/dotnet/archive/2015/07/20/announcing-net-framework-4-6.aspx)</ept>访问 .NET 团队的博客通告。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>ADO.NET 4.5 已于 2012 年 8 月 15 日发布。可以在<bpt id="p1">[</bpt>这里<ept id="p1">](http://blogs.msdn.com/b/dotnet/archive/2012/08/15/announcing-the-release-of-net-framework-4-5-rtm-product-and-source-code.aspx)</ept>访问 .NET 团队的博客通告。</source>
          <target state="new">ADO.NET 4.5 已于 2012 年 8 月 15 日发布。可以在<bpt id="p1">[</bpt>这里<ept id="p1">](http://blogs.msdn.com/b/dotnet/archive/2012/08/15/announcing-the-release-of-net-framework-4-5-rtm-product-and-source-code.aspx)</ept>访问 .NET 团队的博客通告。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>可以在<bpt id="p1">[</bpt>这里<ept id="p1">](http://blogs.msdn.com/b/dotnet/archive/2013/06/26/announcing-the-net-framework-4-5-1-preview.aspx)</ept>访问有关 ADO.NET 4.5.1 的博客文章。</source>
          <target state="new">可以在<bpt id="p1">[</bpt>这里<ept id="p1">](http://blogs.msdn.com/b/dotnet/archive/2013/06/26/announcing-the-net-framework-4-5-1-preview.aspx)</ept>访问有关 ADO.NET 4.5.1 的博客文章。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>TDS 协议版本列表</source>
          <target state="new">TDS 协议版本列表</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>连接到 SQL 数据库：链接、最佳实践和设计准则</source>
          <target state="new">连接到 SQL 数据库：链接、最佳实践和设计准则</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>