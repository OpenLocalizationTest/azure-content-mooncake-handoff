<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">021bc7d038c8167952cf8ccaf28bc1a60d74ea69</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 Azure 上将 docker 与 swarm 一起使用入门</source>
          <target state="new">在 Azure 上将 docker 与 swarm 一起使用入门</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>介绍如何使用 Docker VM 扩展创建一组 VM，以及如何使用 swarm 创建 Docker 群集。</source>
          <target state="new">介绍如何使用 Docker VM 扩展创建一组 VM，以及如何使用 swarm 创建 Docker 群集。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何将 docker 与 swarm 一起使用</source>
          <target state="new">如何将 docker 与 swarm 一起使用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-classic-include.md)</ept>]</source>
          <target state="new">[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-classic-include.md)</ept>]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本主题介绍非常简单的方法，以将 <bpt id="p1">[</bpt>docker<ept id="p1">](https://www.docker.com/)</ept> 与 <bpt id="p2">[</bpt>swarm<ept id="p2">](https://github.com/docker/swarm)</ept> 一起使用在 Azure 上创建 swarm 托管群集。它在 Azure 中创建四个虚拟机，其中一个虚拟机充当 swarm 管理器，而另外三个虚拟机则为 docker 主机群集的一部分。完成时，可以使用 swarm 查看群集，然后开始在其上使用 docker。此外，本主题中的 Azure CLI 调用将使用服务管理 (asm) 模式。</source>
          <target state="new">本主题介绍非常简单的方法，以将 <bpt id="p1">[</bpt>docker<ept id="p1">](https://www.docker.com/)</ept> 与 <bpt id="p2">[</bpt>swarm<ept id="p2">](https://github.com/docker/swarm)</ept> 一起使用在 Azure 上创建 swarm 托管群集。它在 Azure 中创建四个虚拟机，其中一个虚拟机充当 swarm 管理器，而另外三个虚拟机则为 docker 主机群集的一部分。完成时，可以使用 swarm 查看群集，然后开始在其上使用 docker。此外，本主题中的 Azure CLI 调用将使用服务管理 (asm) 模式。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 本主题会将 docker 与 swarm 和 Azure CLI 一起使用，<bpt id="p1">*</bpt>而不<ept id="p1">*</ept>使用 <bpt id="p2">**</bpt>docker-machine<ept id="p2">**</ept> 以显示不同工具如何协同工作，但又保持独立。<bpt id="p3">**</bpt>docker-machine<ept id="p3">**</ept> 具有 <bpt id="p4">**</bpt>--swarm<ept id="p4">**</ept> 开关，让你能够使用 <bpt id="p5">**</bpt>docker-machine<ept id="p5">**</ept> 直接将节点添加到 swarm 中。有关示例，请参阅 <bpt id="p6">[</bpt>docker-machine<ept id="p6">](https://github.com/docker/machine)</ept> 文档。如果你错过了针对 Azure VM 运行的 <bpt id="p7">**</bpt>docker-machine<ept id="p7">**</ept>，请参阅<bpt id="p8">[</bpt>如何在 Azure 上使用 docker-machine<ept id="p8">](/documentation/articles/virtual-machines-docker-machine)</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 本主题会将 docker 与 swarm 和 Azure CLI 一起使用，<bpt id="p1">*</bpt>而不<ept id="p1">*</ept>使用 <bpt id="p2">**</bpt>docker-machine<ept id="p2">**</ept> 以显示不同工具如何协同工作，但又保持独立。<bpt id="p3">**</bpt>docker-machine<ept id="p3">**</ept> 具有 <bpt id="p4">**</bpt>--swarm<ept id="p4">**</ept> 开关，让你能够使用 <bpt id="p5">**</bpt>docker-machine<ept id="p5">**</ept> 直接将节点添加到 swarm 中。有关示例，请参阅 <bpt id="p6">[</bpt>docker-machine<ept id="p6">](https://github.com/docker/machine)</ept> 文档。如果你错过了针对 Azure VM 运行的 <bpt id="p7">**</bpt>docker-machine<ept id="p7">**</ept>，请参阅<bpt id="p8">[</bpt>如何在 Azure 上使用 docker-machine<ept id="p8">](/documentation/articles/virtual-machines-docker-machine)</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>使用 Azure 虚拟机创建 docker 主机</source>
          <target state="new">使用 Azure 虚拟机创建 docker 主机</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>本主题将创建四个 VM，但你可以使用所需的任何数量。调用以下命令，并将 <bpt id="p1">*</bpt>&amp;lt;password&amp;gt;<ept id="p1">*</ept> 替换为你选择的密码。</source>
          <target state="new">本主题将创建四个 VM，但你可以使用所需的任何数量。调用以下命令，并将 <bpt id="p1">*</bpt>&amp;lt;password&amp;gt;<ept id="p1">*</ept> 替换为你选择的密码。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>完成后，应能够使用 <bpt id="p1">**</bpt>azure vm list<ept id="p1">**</ept> 查看你的 Azure VM：</source>
          <target state="new">完成后，应能够使用 <bpt id="p1">**</bpt>azure vm list<ept id="p1">**</ept> 查看你的 Azure VM：</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>在 swarm 主 VM 上安装 swarm</source>
          <target state="new">在 swarm 主 VM 上安装 swarm</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>本主题使用<bpt id="p1">[</bpt>从 docker swarm 安装容器模型文档<ept id="p1">](https://github.com/docker/swarm#1---docker-image)</ept> - 但你也可以使用 SSH 连接到 <bpt id="p2">**</bpt>swarm-master<ept id="p2">**</ept>。在此模型中，将下载 <bpt id="p3">**</bpt>swarm<ept id="p3">**</ept> 作为运行 swarm 的 docker 容器。下面，我们将执行此步骤<bpt id="p4">*</bpt>使用 docker 从笔记本电脑远程<ept id="p4">*</ept>连接到 <bpt id="p5">**</bpt>swarm-master<ept id="p5">**</ept> VM，并指示它使用群集 ID 创建命令 <bpt id="p6">**</bpt>swarm create<ept id="p6">**</ept>。通过群集 ID，<bpt id="p7">**</bpt>swarm<ept id="p7">**</ept> 可以发现 swarm 组的成员。（你也可以克隆存储库并自己生成它，从而可以对其完全控制并启用调试。）</source>
          <target state="new">本主题使用<bpt id="p1">[</bpt>从 docker swarm 安装容器模型文档<ept id="p1">](https://github.com/docker/swarm#1---docker-image)</ept> - 但你也可以使用 SSH 连接到 <bpt id="p2">**</bpt>swarm-master<ept id="p2">**</ept>。在此模型中，将下载 <bpt id="p3">**</bpt>swarm<ept id="p3">**</ept> 作为运行 swarm 的 docker 容器。下面，我们将执行此步骤<bpt id="p4">*</bpt>使用 docker 从笔记本电脑远程<ept id="p4">*</ept>连接到 <bpt id="p5">**</bpt>swarm-master<ept id="p5">**</ept> VM，并指示它使用群集 ID 创建命令 <bpt id="p6">**</bpt>swarm create<ept id="p6">**</ept>。通过群集 ID，<bpt id="p7">**</bpt>swarm<ept id="p7">**</ept> 可以发现 swarm 组的成员。（你也可以克隆存储库并自己生成它，从而可以对其完全控制并启用调试。）</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>最后一行是群集 ID；请将其复制到某处，因为当你将节点 VM 加入 swarm 主机以创建“swarm”时将再次使用它。在此示例中，群集 ID 为 <bpt id="p1">**</bpt>36731c17189fd8f450c395db8437befd<ept id="p1">**</ept>。</source>
          <target state="new">最后一行是群集 ID；请将其复制到某处，因为当你将节点 VM 加入 swarm 主机以创建“swarm”时将再次使用它。在此示例中，群集 ID 为 <bpt id="p1">**</bpt>36731c17189fd8f450c395db8437befd<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 只是为了清楚起见，我们将使用本地 docker 安装连接到 Azure 中的 <bpt id="p1">**</bpt>swarm-master<ept id="p1">**</ept> VM，并指示 <bpt id="p2">**</bpt>swarm-master<ept id="p2">**</ept> 下载、安装和运行 <bpt id="p3">**</bpt>create<ept id="p3">**</ept> 命令，该命令会返回群集 ID，稍后我们会将该 ID 用于发现目的。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 只是为了清楚起见，我们将使用本地 docker 安装连接到 Azure 中的 <bpt id="p1">**</bpt>swarm-master<ept id="p1">**</ept> VM，并指示 <bpt id="p2">**</bpt>swarm-master<ept id="p2">**</ept> 下载、安装和运行 <bpt id="p3">**</bpt>create<ept id="p3">**</ept> 命令，该命令会返回群集 ID，稍后我们会将该 ID 用于发现目的。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>若要确认此 ID，请运行 <ph id="ph1">`docker -H tcp://`</ph><bpt id="p1">*</bpt>&amp;lt;hostname&amp;gt;<ept id="p1">*</ept> <ph id="ph2">` images`</ph> 以列出 <bpt id="p2">**</bpt>swarm-master<ept id="p2">**</ept> 计算机和另一个节点上的容器进程以进行比较（因为我们在运行前一 swarm 命令时使用了 <bpt id="p3">**</bpt>--rm<ept id="p3">**</ept> 开关，在它完成后将删除该容器，因此使用 <bpt id="p4">**</bpt>docker ps-a<ept id="p4">**</ept> 不会返回任何内容）。</source>
          <target state="new">若要确认此 ID，请运行 <ph id="ph1">`docker -H tcp://`</ph><bpt id="p1">*</bpt>&amp;lt;hostname&amp;gt;<ept id="p1">*</ept> <ph id="ph2">` images`</ph> 以列出 <bpt id="p2">**</bpt>swarm-master<ept id="p2">**</ept> 计算机和另一个节点上的容器进程以进行比较（因为我们在运行前一 swarm 命令时使用了 <bpt id="p3">**</bpt>--rm<ept id="p3">**</ept> 开关，在它完成后将删除该容器，因此使用 <bpt id="p4">**</bpt>docker ps-a<ept id="p4">**</ept> 不会返回任何内容）。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><ph id="ph1">
&gt;</ph> 如果你熟悉 <bpt id="p1">**</bpt>docker<ept id="p1">**</ept>，就会知道其他节点没有任何条目，因为还没有下载并运行任何映像。</source>
          <target state="new"><ph id="ph1">
&gt;</ph> 如果你熟悉 <bpt id="p1">**</bpt>docker<ept id="p1">**</ept>，就会知道其他节点没有任何条目，因为还没有下载并运行任何映像。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>将节点 VM 加入 docker 群集</source>
          <target state="new">将节点 VM 加入 docker 群集</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>对于每个节点，使用 Azure CLI 列出终结点信息。下面我们对 <bpt id="p1">**</bpt>swarm-node-1<ept id="p1">**</ept> docker 主机执行该操作以获取该节点的 docker 端口。</source>
          <target state="new">对于每个节点，使用 Azure CLI 列出终结点信息。下面我们对 <bpt id="p1">**</bpt>swarm-node-1<ept id="p1">**</ept> docker 主机执行该操作以获取该节点的 docker 端口。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>docker<ept id="p1">**</ept> 和 <ph id="ph1">`-H`</ph> 选项将 docker 客户端指向你的节点 VM，通过传递群集 ID 和节点的 docker 端口将该节点加入要创建的 swarm（后者使用 <bpt id="p2">**</bpt>--addr<ept id="p2">**</ept>）：</source>
          <target state="new">使用 <bpt id="p1">**</bpt>docker<ept id="p1">**</ept> 和 <ph id="ph1">`-H`</ph> 选项将 docker 客户端指向你的节点 VM，通过传递群集 ID 和节点的 docker 端口将该节点加入要创建的 swarm（后者使用 <bpt id="p2">**</bpt>--addr<ept id="p2">**</ept>）：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>这看起来不错。若要确认 <bpt id="p1">**</bpt>swarm<ept id="p1">**</ept> 正在 <bpt id="p2">**</bpt>swarm-node-1<ept id="p2">**</ept> 上运行，请键入：</source>
          <target state="new">这看起来不错。若要确认 <bpt id="p1">**</bpt>swarm<ept id="p1">**</ept> 正在 <bpt id="p2">**</bpt>swarm-node-1<ept id="p2">**</ept> 上运行，请键入：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>对群集中的所有其他节点重复上述操作。在本示例中，我们对 <bpt id="p1">**</bpt>swarm-node-2<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>swarm-node-3<ept id="p2">**</ept> 执行该操作。</source>
          <target state="new">对群集中的所有其他节点重复上述操作。在本示例中，我们对 <bpt id="p1">**</bpt>swarm-node-2<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>swarm-node-3<ept id="p2">**</ept> 执行该操作。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>开始管理 swarm 群集</source>
          <target state="new">开始管理 swarm 群集</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>然后可以列出群集中的节点：</source>
          <target state="new">然后可以列出群集中的节点：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>转到 swarm 上运行操作。若要寻找灵感，请参阅 <bpt id="p1">[</bpt>https://github.com/docker/swarm/<ept id="p1">](https://github.com/docker/swarm/)</ept>。</source>
          <target state="new">转到 swarm 上运行操作。若要寻找灵感，请参阅 <bpt id="p1">[</bpt>https://github.com/docker/swarm/<ept id="p1">](https://github.com/docker/swarm/)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>