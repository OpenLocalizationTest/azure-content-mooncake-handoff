<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7352308f0dbe2da15ee8ff02af8a6406b401242c</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用用于 C++ 的 Azure 存储客户端库列出 Azure 存储资源 | Azure</source>
          <target state="new">使用用于 C++ 的 Azure 存储客户端库列出 Azure 存储资源 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在用于 C++ 的 Azure 存储客户端库中使用列表 API 来枚举容器、blob、队列、表和实体。</source>
          <target state="new">了解如何在用于 C++ 的 Azure 存储客户端库中使用列表 API 来枚举容器、blob、队列、表和实体。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>&lt;tags</source>
          <target state="new">&lt;tags</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ms.service="storage"</source>
          <target state="new">ms.service="storage"</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>使用 C++ 列出 Azure 存储资源</source>
          <target state="new">使用 C++ 列出 Azure 存储资源</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>使用 Azure 存储空间进行开发时，很多情况下列表操作很重要。本文介绍如何使用用于 C++ 的 Azure 存储客户端库中提供的列表 API 最有效率地枚举 Azure 存储空间中的对象。</source>
          <target state="new">使用 Azure 存储空间进行开发时，很多情况下列表操作很重要。本文介绍如何使用用于 C++ 的 Azure 存储客户端库中提供的列表 API 最有效率地枚举 Azure 存储空间中的对象。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 本指南主要面向适用于 C++ 版本 1.x 的 Azure 存储客户端库，该库可通过 <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://www.nuget.org/packages/wastorage)</ept> 或 <bpt id="p2">[</bpt>GitHub<ept id="p2">](https://github.com/Azure/azure-storage-cpp)</ept> 获取。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 本指南主要面向适用于 C++ 版本 1.x 的 Azure 存储客户端库，该库可通过 <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://www.nuget.org/packages/wastorage)</ept> 或 <bpt id="p2">[</bpt>GitHub<ept id="p2">](https://github.com/Azure/azure-storage-cpp)</ept> 获取。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>存储客户端库提供了多种方法，用于列出或查询 Azure 存储空间中的对象。本文将探讨以下方案：</source>
          <target state="new">存储客户端库提供了多种方法，用于列出或查询 Azure 存储空间中的对象。本文将探讨以下方案：</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>列出帐户中的容器</source>
          <target state="new">列出帐户中的容器</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>列出容器或虚拟 blob 目录中的 blob</source>
          <target state="new">列出容器或虚拟 blob 目录中的 blob</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>列出帐户中的队列</source>
          <target state="new">列出帐户中的队列</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>列出帐户中的表</source>
          <target state="new">列出帐户中的表</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>查询表中的实体</source>
          <target state="new">查询表中的实体</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>将使用不同的重载针对不同的方案演示上述每种方法。</source>
          <target state="new">将使用不同的重载针对不同的方案演示上述每种方法。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>异步与同步</source>
          <target state="new">异步与同步</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>由于 C++ 的存储客户端库是在 <bpt id="p1">[</bpt>C++ REST 库 (Project Casablanca)<ept id="p1">](http://casablanca.codeplex.com/)</ept> 基础上构建的，因此我们实际上也支持使用 <bpt id="p2">[</bpt>pplx::task<ept id="p2">](http://microsoft.github.io/cpprestsdk/classpplx_1_1task.html)</ept> 进行异步操作。例如：</source>
          <target state="new">由于 C++ 的存储客户端库是在 <bpt id="p1">[</bpt>C++ REST 库 (Project Casablanca)<ept id="p1">](http://casablanca.codeplex.com/)</ept> 基础上构建的，因此我们实际上也支持使用 <bpt id="p2">[</bpt>pplx::task<ept id="p2">](http://microsoft.github.io/cpprestsdk/classpplx_1_1task.html)</ept> 进行异步操作。例如：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>同步操作封装了相应的异步操作：</source>
          <target state="new">同步操作封装了相应的异步操作：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>如果你要使用多个线程应用程序或服务，我们建议你直接使用异步 API，不必创建线程来调用同步 API，那样会严重影响性能。</source>
          <target state="new">如果你要使用多个线程应用程序或服务，我们建议你直接使用异步 API，不必创建线程来调用同步 API，那样会严重影响性能。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>分段列表</source>
          <target state="new">分段列表</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>云存储的规模决定了要使用分段列表。例如，你可能在 Azure blob 容器中有超过一百万个 blob，或者在 Azure 表中有十亿个以上的实体。这些不是理论上的数字，而是实际的客户使用情况。</source>
          <target state="new">云存储的规模决定了要使用分段列表。例如，你可能在 Azure blob 容器中有超过一百万个 blob，或者在 Azure 表中有十亿个以上的实体。这些不是理论上的数字，而是实际的客户使用情况。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>因此，要在单个响应中列出所有对象是不实际的。与之相反，你可以使用分页来列出对象。每个列表 API 都有 <bpt id="p1">*</bpt>分段<ept id="p1">*</ept> 重载。</source>
          <target state="new">因此，要在单个响应中列出所有对象是不实际的。与之相反，你可以使用分页来列出对象。每个列表 API 都有 <bpt id="p1">*</bpt>分段<ept id="p1">*</ept> 重载。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>分段列表操作的响应包括：</source>
          <target state="new">分段列表操作的响应包括：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;i&gt;</ph>_segment<ph id="ph2">&lt;/i&gt;</ph>，其中包含针对列表 API 进行单个调用时返回的结果集。</source>
          <target state="new"><ph id="ph1">&lt;i&gt;</ph>_segment<ph id="ph2">&lt;/i&gt;</ph>，其中包含针对列表 API 进行单个调用时返回的结果集。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>continuation_token<ept id="p1">*</ept>，它将被传递给下一个调用，以获取下一页结果。当没有后续结果可以返回时，continuation_token为null。</source>
          <target state="new"><bpt id="p1">*</bpt>continuation_token<ept id="p1">*</ept>，它将被传递给下一个调用，以获取下一页结果。当没有后续结果可以返回时，continuation_token为null。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>例如，进行典型调用以列出容器中的所有 blob 时，该调用的代码段可能如下所示。我们的<bpt id="p1">[</bpt>示例<ept id="p1">](https://github.com/Azure/azure-storage-cpp/blob/master/Microsoft.WindowsAzure.Storage/samples/BlobsGettingStarted/Application.cpp)</ept>中提供了该代码：</source>
          <target state="new">例如，进行典型调用以列出容器中的所有 blob 时，该调用的代码段可能如下所示。我们的<bpt id="p1">[</bpt>示例<ept id="p1">](https://github.com/Azure/azure-storage-cpp/blob/master/Microsoft.WindowsAzure.Storage/samples/BlobsGettingStarted/Application.cpp)</ept>中提供了该代码：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>请注意，一页中返回的结果数可以通过每个 API 的重载中的参数 <bpt id="p1">*</bpt>max_results<ept id="p1">*</ept> 进行控制，例如：</source>
          <target state="new">请注意，一页中返回的结果数可以通过每个 API 的重载中的参数 <bpt id="p1">*</bpt>max_results<ept id="p1">*</ept> 进行控制，例如：</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>如果未指定 <bpt id="p1">*</bpt>max_results<ept id="p1">*</ept> 参数，则会在单个页面中返回默认的最大值（最多 5000 个结果）。</source>
          <target state="new">如果未指定 <bpt id="p1">*</bpt>max_results<ept id="p1">*</ept> 参数，则会在单个页面中返回默认的最大值（最多 5000 个结果）。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>另请注意，针对 Azure 表存储进行查询时，可能不会返回任何记录，或者返回的记录数小于你所指定的 <bpt id="p1">*</bpt>max_results<ept id="p1">*</ept> 参数的值，即使continuation_token不为空。可能的一个原因是，查询可能无法在 5 秒钟内完成。只要continuation_token不为空，查询就会继续，你的代码不应假定分段结果的大小。</source>
          <target state="new">另请注意，针对 Azure 表存储进行查询时，可能不会返回任何记录，或者返回的记录数小于你所指定的 <bpt id="p1">*</bpt>max_results<ept id="p1">*</ept> 参数的值，即使continuation_token不为空。可能的一个原因是，查询可能无法在 5 秒钟内完成。只要continuation_token不为空，查询就会继续，你的代码不应假定分段结果的大小。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>大多数情况下，建议采用分段列表编码模式，因为这样可以明确地了解列表或查询的进度，以及服务对每个请求是如何响应的。具体说来，对于 C++ 应用程序或服务来说，对列表进程进行低级别的控制可以更好地控制内存和性能。</source>
          <target state="new">大多数情况下，建议采用分段列表编码模式，因为这样可以明确地了解列表或查询的进度，以及服务对每个请求是如何响应的。具体说来，对于 C++ 应用程序或服务来说，对列表进程进行低级别的控制可以更好地控制内存和性能。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>贪婪列表</source>
          <target state="new">贪婪列表</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>早期版本的用于 C++ 的存储客户端库（0.5.0 预览版以及更低版本）包括适用于表和查询的不分段列表 API，如以下示例所示：</source>
          <target state="new">早期版本的用于 C++ 的存储客户端库（0.5.0 预览版以及更低版本）包括适用于表和查询的不分段列表 API，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>这些方法在实现时，以分段 API 封装器的方式进行。每次对分段列表进行响应时，代码会将结果附加到一个矢量，并在对完整的容器进行扫描后返回所有结果。</source>
          <target state="new">这些方法在实现时，以分段 API 封装器的方式进行。每次对分段列表进行响应时，代码会将结果附加到一个矢量，并在对完整的容器进行扫描后返回所有结果。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>当存储帐户或表所包含的对象数量较少时，此方法可以使用。但是，随着对象数目的增加，所需的内存可能会增加且没有限制，因为所有结果都保留在内存中。一个列表操作可能需要很长时间，调用方在此期间无法获得进度方面的信息。</source>
          <target state="new">当存储帐户或表所包含的对象数量较少时，此方法可以使用。但是，随着对象数目的增加，所需的内存可能会增加且没有限制，因为所有结果都保留在内存中。一个列表操作可能需要很长时间，调用方在此期间无法获得进度方面的信息。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>SDK 中的此类贪婪列表 API 在 C#、Java 或 JavaScript Node.js 环境中不存在。若要避免使用这些贪婪 API 带来的潜在问题，我们在 0.6.0 预览版中删除了它们。</source>
          <target state="new">SDK 中的此类贪婪列表 API 在 C#、Java 或 JavaScript Node.js 环境中不存在。若要避免使用这些贪婪 API 带来的潜在问题，我们在 0.6.0 预览版中删除了它们。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>如果你的代码调用这些贪婪 API：</source>
          <target state="new">如果你的代码调用这些贪婪 API：</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>你应该修改代码，改用分段列表 API：</source>
          <target state="new">你应该修改代码，改用分段列表 API：</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>你可以指定该段的 <bpt id="p1">*</bpt>max_results<ept id="p1">*</ept> 参数，在请求数和内存使用量之间进行平衡，以便满足应用程序的性能要求。</source>
          <target state="new">你可以指定该段的 <bpt id="p1">*</bpt>max_results<ept id="p1">*</ept> 参数，在请求数和内存使用量之间进行平衡，以便满足应用程序的性能要求。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>此外，如果你使用了分段列表 API，但采用“贪婪”方式将数据存储在本地集合中，则我们也强烈建议你对代码进行重构，谨慎地应对数据处理规模扩大时将数据存储在本地集合中带来的问题。</source>
          <target state="new">此外，如果你使用了分段列表 API，但采用“贪婪”方式将数据存储在本地集合中，则我们也强烈建议你对代码进行重构，谨慎地应对数据处理规模扩大时将数据存储在本地集合中带来的问题。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>懒惰列表</source>
          <target state="new">懒惰列表</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>虽然贪婪列表带来了各种潜在的问题，但如果容器中的对象不是很多，则使用起来还是很方便的。</source>
          <target state="new">虽然贪婪列表带来了各种潜在的问题，但如果容器中的对象不是很多，则使用起来还是很方便的。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>如果你还使用 C# 或 Oracle Java SDK，则应熟悉枚举型编程模式，该模式提供懒惰形式的列表，仅在需要时才提取具有特定偏移量的数据。在 C++ 中，基于迭代器的模板也提供了类似方法。</source>
          <target state="new">如果你还使用 C# 或 Oracle Java SDK，则应熟悉枚举型编程模式，该模式提供懒惰形式的列表，仅在需要时才提取具有特定偏移量的数据。在 C++ 中，基于迭代器的模板也提供了类似方法。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>典型的懒惰列表 API（使用 <bpt id="p1">**</bpt>list_blobs<ept id="p1">**</ept> 作为示例）如下所示：</source>
          <target state="new">典型的懒惰列表 API（使用 <bpt id="p1">**</bpt>list_blobs<ept id="p1">**</ept> 作为示例）如下所示：</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>使用懒惰列表模式的典型代码段可能会如下所示：</source>
          <target state="new">使用懒惰列表模式的典型代码段可能会如下所示：</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>请注意，懒惰列表仅在同步模式下可用。</source>
          <target state="new">请注意，懒惰列表仅在同步模式下可用。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>与贪婪列表相比，懒惰列表仅在必要时提取数据。实际上，它仅在下一个迭代器进入下一段的情况下，才从 Azure 存储空间提取数据。因此，内存使用量被控制为界定的大小，而且运行速度也快。</source>
          <target state="new">与贪婪列表相比，懒惰列表仅在必要时提取数据。实际上，它仅在下一个迭代器进入下一段的情况下，才从 Azure 存储空间提取数据。因此，内存使用量被控制为界定的大小，而且运行速度也快。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>懒惰列表 API 包括在用于 C++ 的存储客户端库的 1.0.0 版中。</source>
          <target state="new">懒惰列表 API 包括在用于 C++ 的存储客户端库的 1.0.0 版中。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>结束语</source>
          <target state="new">结束语</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>在本文中，我们针对用于 C++ 的存储客户端库中的各种对象，对列表 API 的不同重载进行了讨论。总结：</source>
          <target state="new">在本文中，我们针对用于 C++ 的存储客户端库中的各种对象，对列表 API 的不同重载进行了讨论。总结：</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>在出现多个线程的情况下，强烈建议使用异步 API。</source>
          <target state="new">在出现多个线程的情况下，强烈建议使用异步 API。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>大多数情况下，建议使用分段的列表。</source>
          <target state="new">大多数情况下，建议使用分段的列表。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>在库中提供懒惰列表是将其作为封装器，适合在同步方案中使用。</source>
          <target state="new">在库中提供懒惰列表是将其作为封装器，适合在同步方案中使用。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>不建议使用贪婪列表，因此已将其从库中删除。</source>
          <target state="new">不建议使用贪婪列表，因此已将其从库中删除。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>有关 Azure 存储空间以及用于 C++ 的客户端库的更多信息，请参阅以下资源。</source>
          <target state="new">有关 Azure 存储空间以及用于 C++ 的客户端库的更多信息，请参阅以下资源。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用 Blob 存储</source>
          <target state="new">如何通过 C++ 使用 Blob 存储</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用表存储</source>
          <target state="new">如何通过 C++ 使用表存储</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用队列存储</source>
          <target state="new">如何通过 C++ 使用队列存储</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>适用于 C++ 的 Azure 存储客户端库 API 文档。</source>
          <target state="new">适用于 C++ 的 Azure 存储客户端库 API 文档。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Azure 存储团队博客</source>
          <target state="new">Azure 存储团队博客</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Azure 存档文档</source>
          <target state="new">Azure 存档文档</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>