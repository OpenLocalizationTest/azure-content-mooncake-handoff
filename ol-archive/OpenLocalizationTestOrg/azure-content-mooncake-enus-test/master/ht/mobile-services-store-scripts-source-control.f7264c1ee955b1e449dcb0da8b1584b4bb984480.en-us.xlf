<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">877b4c9670739a3eaf9e5da2abff37e6a756bb76</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在源代码管理中存储 JavaScript 后端项目代码 | Azure 移动服务</source>
          <target state="new">在源代码管理中存储 JavaScript 后端项目代码 | Azure 移动服务</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在您的计算机本地 Git 存储库中存储您的服务器脚本文件和模块。</source>
          <target state="new">了解如何在您的计算机本地 Git 存储库中存储您的服务器脚本文件和模块。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在源代码管理中存储移动服务项目代码</source>
          <target state="new">在源代码管理中存储移动服务项目代码</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>.NET backend</source>
          <target state="new">.NET backend</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Javascript backend</source>
          <target state="new">Javascript backend</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>本主题向您展示了如何使用 Azure 移动服务提供的源代码管理来存储服务器脚本。脚本和其他 JavaScript 后端代码文件可从您的本地 Git 存储库提升到生产移动服务。另外，本主题还说明了如何定义可在多个脚本之间使用的共享代码，以及如何使用 package.json 文件来为您的移动服务添加 Node.js 模块。</source>
          <target state="new">本主题向您展示了如何使用 Azure 移动服务提供的源代码管理来存储服务器脚本。脚本和其他 JavaScript 后端代码文件可从您的本地 Git 存储库提升到生产移动服务。另外，本主题还说明了如何定义可在多个脚本之间使用的共享代码，以及如何使用 package.json 文件来为您的移动服务添加 Node.js 模块。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>若要完成本教程，你必须事先参考<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>教程创建一个移动服务。</source>
          <target state="new">若要完成本教程，你必须事先参考<bpt id="p1">[</bpt><ept id="p1">移动服务入门]</ept>教程创建一个移动服务。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="enable-source-control"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在移动服务中启用源代码管理</source>
          <target state="new"><ph id="ph1">&lt;a name="enable-source-control"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在移动服务中启用源代码管理</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="clone-repo"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>安装 Git 并创建本地存储库</source>
          <target state="new"><ph id="ph1">&lt;a name="clone-repo"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>安装 Git 并创建本地存储库</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>在本地计算机上安装 Git。</source>
          <target state="new">在本地计算机上安装 Git。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>安装 Git 所需的步骤因操作系统的不同而异。有关操作系统特定的分发和安装指南，请参阅<bpt id="p1">[</bpt><ept id="p1">安装 Git]</ept>。</source>
          <target state="new">安装 Git 所需的步骤因操作系统的不同而异。有关操作系统特定的分发和安装指南，请参阅<bpt id="p1">[</bpt><ept id="p1">安装 Git]</ept>。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>在某些操作系统上，命令行和 GUI 版本的 Git 都可用。本文中提供的说明使用命令行版本。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>在某些操作系统上，命令行和 GUI 版本的 Git 都可用。本文中提供的说明使用命令行版本。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>打开一个命令行，例如 <bpt id="p1">**</bpt>GitBash<ept id="p1">**</ept> (Windows) 或 <bpt id="p2">**</bpt>Bash<ept id="p2">**</ept> (Unix Shell)。在 OS X 系统上，可以通过 <bpt id="p3">**</bpt>Terminal<ept id="p3">**</ept> 应用程序访问命令行。</source>
          <target state="new">打开一个命令行，例如 <bpt id="p1">**</bpt>GitBash<ept id="p1">**</ept> (Windows) 或 <bpt id="p2">**</bpt>Bash<ept id="p2">**</ept> (Unix Shell)。在 OS X 系统上，可以通过 <bpt id="p3">**</bpt>Terminal<ept id="p3">**</ept> 应用程序访问命令行。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在命令行中，切换到要在其中存储脚本的目录。例如，<ph id="ph1">`cd SourceControl`</ph>。</source>
          <target state="new">在命令行中，切换到要在其中存储脚本的目录。例如，<ph id="ph1">`cd SourceControl`</ph>。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>使用以下命令创建新 Git 存储库的本地副本，并将 <ph id="ph1">`&lt;your_git_URL&gt;`</ph> 替换为移动服务的 Git 存储库的 URL：</source>
          <target state="new">使用以下命令创建新 Git 存储库的本地副本，并将 <ph id="ph1">`&lt;your_git_URL&gt;`</ph> 替换为移动服务的 Git 存储库的 URL：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>出现提示时，请键入你在移动服务中启用源代码管理时设置的用户名和密码。身份验证成功后，你将看到类似于下面的一系列响应：</source>
          <target state="new">出现提示时，请键入你在移动服务中启用源代码管理时设置的用户名和密码。身份验证成功后，你将看到类似于下面的一系列响应：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>浏览到你从中运行了 <ph id="ph1">`git clone`</ph> 命令的目录，并留意以下目录结构：</source>
          <target state="new">浏览到你从中运行了 <ph id="ph1">`git clone`</ph> 命令的目录，并留意以下目录结构：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="new">4</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>此时已创建了一个使用移动服务名称的新目录，即数据服务的本地存储库。</source>
          <target state="new">此时已创建了一个使用移动服务名称的新目录，即数据服务的本地存储库。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>打开 .\\service\\table 子文件夹，可以看到，它包含一个 TodoItem.json 文件，该文件是对 TodoItem 表的操作权限的 JSON 表示形式。</source>
          <target state="new">打开 .\\service\\table 子文件夹，可以看到，它包含一个 TodoItem.json 文件，该文件是对 TodoItem 表的操作权限的 JSON 表示形式。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>如果在此表中定义了服务器脚本，则还会出现一个或多个名为 <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">TodoItem.</ph><ph id="ph3">_</ph><ph id="ph4">&amp;lt;operation&amp;gt;</ph><ph id="ph5">_</ph><ph id="ph6">.js</ph><ph id="ph7">&lt;/code&gt;</ph> 的文件，其中包含给定表操作的脚本。计划程序和自定义 API 脚本保留在与其名称相对应的不同文件夹中。有关详细信息，请参阅<bpt id="p1">[</bpt><ept id="p1">源代码管理]</ept>。</source>
          <target state="new">如果在此表中定义了服务器脚本，则还会出现一个或多个名为 <ph id="ph1">&lt;code&gt;</ph><ph id="ph2">TodoItem.</ph><ph id="ph3">_</ph><ph id="ph4">&amp;lt;operation&amp;gt;</ph><ph id="ph5">_</ph><ph id="ph6">.js</ph><ph id="ph7">&lt;/code&gt;</ph> 的文件，其中包含给定表操作的脚本。计划程序和自定义 API 脚本保留在与其名称相对应的不同文件夹中。有关详细信息，请参阅<bpt id="p1">[</bpt><ept id="p1">源代码管理]</ept>。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>创建本地存储库后，您可以更改服务器脚本，以及将更改推送回到移动服务。</source>
          <target state="new">创建本地存储库后，您可以更改服务器脚本，以及将更改推送回到移动服务。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="deploy-scripts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>将更新的脚本文件部署到移动服务</source>
          <target state="new"><ph id="ph1">&lt;a name="deploy-scripts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>将更新的脚本文件部署到移动服务</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>浏览到 .\\service\\table 子文件夹，如果 todoitem.insert.js 文件不存在，现在请创建该文件。</source>
          <target state="new">浏览到 .\\service\\table 子文件夹，如果 todoitem.insert.js 文件不存在，现在请创建该文件。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>在文本编辑器中打开新文件 todoitem.insert.js 并在其中粘贴以下代码，然后保存更改：</source>
          <target state="new">在文本编辑器中打开新文件 todoitem.insert.js 并在其中粘贴以下代码，然后保存更改：</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>此代码只是将插入的项写入日志。如果此文件已包含代码，则你只需在此文件中添加一些有效的 JavaScript 代码（例如，对 <ph id="ph1">`console.log()`</ph> 的调用），然后保存更改。</source>
          <target state="new">此代码只是将插入的项写入日志。如果此文件已包含代码，则你只需在此文件中添加一些有效的 JavaScript 代码（例如，对 <ph id="ph1">`console.log()`</ph> 的调用），然后保存更改。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>在 Git 命令提示符下，键入以下命令以开始跟踪新脚本文件：</source>
          <target state="new">在 Git 命令提示符下，键入以下命令以开始跟踪新脚本文件：</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>键入以下命令以提交更改：</source>
          <target state="new">键入以下命令以提交更改：</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>键入以下命令以将更改上载到远程存储库：</source>
          <target state="new">键入以下命令以将更改上载到远程存储库：</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>您应该会看到一系列命令，指出已将提交的内容部署到移动服务。</source>
          <target state="new">您应该会看到一系列命令，指出已将提交的内容部署到移动服务。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>返回 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>，单击“数据”选项卡，单击“TodoItem”表，单击“脚本”，然后选择“插入”操作。可以看到，显示的插入操作脚本与您刚刚上载到存储库的 JavaScript 代码相同。</source>
          <target state="new">返回 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>，单击“数据”选项卡，单击“TodoItem”表，单击“脚本”，然后选择“插入”操作。可以看到，显示的插入操作脚本与您刚刚上载到存储库的 JavaScript 代码相同。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="use-npm"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在服务器脚本中利用共享代码和 Node.js 模块</source>
          <target state="new"><ph id="ph1">&lt;a name="use-npm"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在服务器脚本中利用共享代码和 Node.js 模块</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>移动服务允许你访问整个核心 Node.js 模块集，你可以通过 <bpt id="p1">**</bpt>require<ept id="p1">**</ept> 函数在代码中使用这些模块。移动服务还可使用不属于核心 Node.js 程序包的 Node.js 模块，您甚至可以定义自己的共享代码作为 Node.js 模块。有关创建模块的详细信息，请参阅 Node.js API 参考文档中的<bpt id="p2">[</bpt><ept id="p2">模块]</ept>。</source>
          <target state="new">移动服务允许你访问整个核心 Node.js 模块集，你可以通过 <bpt id="p1">**</bpt>require<ept id="p1">**</ept> 函数在代码中使用这些模块。移动服务还可使用不属于核心 Node.js 程序包的 Node.js 模块，您甚至可以定义自己的共享代码作为 Node.js 模块。有关创建模块的详细信息，请参阅 Node.js API 参考文档中的<bpt id="p2">[</bpt><ept id="p2">模块]</ept>。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>将 Node.js 模块添加到移动服务的建议方法为对服务的 package.json 文件添加引用。然后通过更新 package.json 文件为你的移动服务添加 <bpt id="p1">[</bpt><ept id="p1">node-uuid]</ept> Node.js 模块。当更新推送到 Azure 时，移动服务重新启动，模块安装完成。然后，你可以使用此模块为已插入项的 <bpt id="p2">**</bpt>uuid<ept id="p2">**</ept> 属性生成新的 GUID 值。</source>
          <target state="new">将 Node.js 模块添加到移动服务的建议方法为对服务的 package.json 文件添加引用。然后通过更新 package.json 文件为你的移动服务添加 <bpt id="p1">[</bpt><ept id="p1">node-uuid]</ept> Node.js 模块。当更新推送到 Azure 时，移动服务重新启动，模块安装完成。然后，你可以使用此模块为已插入项的 <bpt id="p2">**</bpt>uuid<ept id="p2">**</ept> 属性生成新的 GUID 值。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>导航到本地 Git 存储库的 <ph id="ph1">`.\service`</ph> 文件夹，在文本编辑器中打开 package.json 文件，然后将以下字段添加到 <bpt id="p1">**</bpt>dependencies<ept id="p1">**</ept> 对象：</source>
          <target state="new">导航到本地 Git 存储库的 <ph id="ph1">`.\service`</ph> 文件夹，在文本编辑器中打开 package.json 文件，然后将以下字段添加到 <bpt id="p1">**</bpt>dependencies<ept id="p1">**</ept> 对象：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>对 package.json 文件执行这项更新会导致推送提交内容后重新启动移动服务。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>对 package.json 文件执行这项更新会导致推送提交内容后重新启动移动服务。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>现在，请浏览到 .\\service\\table 子文件夹，打开 todoitem.insert.js 文件并按如下所示修改该文件：</source>
          <target state="new">现在，请浏览到 .\\service\\table 子文件夹，打开 todoitem.insert.js 文件并按如下所示修改该文件：</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>此代码将在表中添加一个 uuid 列，并使用唯一的 GUID 标识符填充该列。</source>
          <target state="new">此代码将在表中添加一个 uuid 列，并使用唯一的 GUID 标识符填充该列。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>像在前一部分中一样，在 Git 命令提示符下键入以下命令：</source>
          <target state="new">像在前一部分中一样，在 Git 命令提示符下键入以下命令：</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>这样就会添加新的文件，提交您的更改，并将新的 node-uuid 模块以及对 todoitem.insert.js 脚本所做的更改推送到您的移动服务。</source>
          <target state="new">这样就会添加新的文件，提交您的更改，并将新的 node-uuid 模块以及对 todoitem.insert.js 脚本所做的更改推送到您的移动服务。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="next-steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</source>
          <target state="new"><ph id="ph1">&lt;a name="next-steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>完成本教程后，你便知道了如何在源代码管理中存储脚本。我们建议您了解有关如何使用服务器脚本和自定义 API 的详细信息：</source>
          <target state="new">完成本教程后，你便知道了如何在源代码管理中存储脚本。我们建议您了解有关如何使用服务器脚本和自定义 API 的详细信息：</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>说明如何使用服务器脚本、作业计划程序和自定义 API。</source>
          <target state="new">说明如何使用服务器脚本、作业计划程序和自定义 API。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>