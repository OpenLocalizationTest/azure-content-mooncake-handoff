<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a83d1321a5e6aa41626def10e74526ad5a1598e</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在本节中，我们将通过添加一个名为 <bpt id="p1">**</bpt>CompleteDate<ept id="p1">**</ept> 的新时间戳字段，修改数据库的模型。此字段将记录上一次完成 Todo 项的时间。实体框架将使用派生自 <bpt id="p2">[</bpt>DropCreateDatabaseIfModelChanges<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=394621)</ept> 的默认数据库初始程序类，基于我们的模型更改来更新数据库。</source>
          <target state="new">在本节中，我们将通过添加一个名为 <bpt id="p1">**</bpt>CompleteDate<ept id="p1">**</ept> 的新时间戳字段，修改数据库的模型。此字段将记录上一次完成 Todo 项的时间。实体框架将使用派生自 <bpt id="p2">[</bpt>DropCreateDatabaseIfModelChanges<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=394621)</ept> 的默认数据库初始程序类，基于我们的模型更改来更新数据库。</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的解决方案资源管理器中，展开 todolist 服务项目中的 <bpt id="p1">**</bpt>App\_Start<ept id="p1">**</ept> 文件夹。打开 WebApiConfig.cs 文件。</source>
          <target state="new">在 Visual Studio 的解决方案资源管理器中，展开 todolist 服务项目中的 <bpt id="p1">**</bpt>App\_Start<ept id="p1">**</ept> 文件夹。打开 WebApiConfig.cs 文件。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>请注意，在 WebApiConfig.cs 文件中，默认数据库初始值设定项类是从  <ph id="ph1">`DropCreateDatabaseIfModelChanges`</ph> 类派生的。这意味着，对该模型的任何更改将导致表被删除并重新创建，以适应新模型。因此表中的数据将丢失，并且表将重新植入。修改数据库初始值设定项的 Seed 方法，使得种子数据如下所示，然后保存 WebApiConfig.cs 文件。</source>
          <target state="new">请注意，在 WebApiConfig.cs 文件中，默认数据库初始值设定项类是从  <ph id="ph1">`DropCreateDatabaseIfModelChanges`</ph> 类派生的。这意味着，对该模型的任何更改将导致表被删除并重新创建，以适应新模型。因此表中的数据将丢失，并且表将重新植入。修改数据库初始值设定项的 Seed 方法，使得种子数据如下所示，然后保存 WebApiConfig.cs 文件。</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>使用默认数据库初始值设定项时，只要实体框架在代码优先模型定义中检测到数据模型更改，它就会删除并重新创建数据库。若要进行此数据模型更改并维护数据库中的现有数据，必须使用代码优先迁移。有关更多信息，请参阅<bpt id="p1">[</bpt>如何使用代码优先迁移来更新数据模型<ept id="p1">](/zh-cn/documentation/articles/mobile-services-dotnet-backend-how-to-use-code-first-migrations)</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>使用默认数据库初始值设定项时，只要实体框架在代码优先模型定义中检测到数据模型更改，它就会删除并重新创建数据库。若要进行此数据模型更改并维护数据库中的现有数据，必须使用代码优先迁移。有关更多信息，请参阅<bpt id="p1">[</bpt>如何使用代码优先迁移来更新数据模型<ept id="p1">](/zh-cn/documentation/articles/mobile-services-dotnet-backend-how-to-use-code-first-migrations)</ept>。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的解决方案资源管理器中，展开 todolist 服务项目中的 <bpt id="p1">**</bpt>DataObjects<ept id="p1">**</ept> 文件夹。打开 TodoItem.cs 文件并更新 TodoItem 类以包括 CompleteDate 字段，如下所示。然后保存 TodoItem.cs 文件。</source>
          <target state="new">在 Visual Studio 的解决方案资源管理器中，展开 todolist 服务项目中的 <bpt id="p1">**</bpt>DataObjects<ept id="p1">**</ept> 文件夹。打开 TodoItem.cs 文件并更新 TodoItem 类以包括 CompleteDate 字段，如下所示。然后保存 TodoItem.cs 文件。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的解决方案资源管理器中，展开 todolist 服务项目中的 <bpt id="p1">**</bpt>Controllers<ept id="p1">**</ept> 文件夹。打开 TodoItemController.cs 文件并更新  <ph id="ph1">`PatchTodoItem`</ph> 方法，这样当 <bpt id="p2">**</bpt>Complete<ept id="p2">**</ept> 属性从 false 更改为 true 时，该方法将会设置 <bpt id="p3">**</bpt>CompleteDate<ept id="p3">**</ept>。然后保存 TodoItemController.cs 文件。</source>
          <target state="new">在 Visual Studio 的解决方案资源管理器中，展开 todolist 服务项目中的 <bpt id="p1">**</bpt>Controllers<ept id="p1">**</ept> 文件夹。打开 TodoItemController.cs 文件并更新  <ph id="ph1">`PatchTodoItem`</ph> 方法，这样当 <bpt id="p2">**</bpt>Complete<ept id="p2">**</ept> 属性从 false 更改为 true 时，该方法将会设置 <bpt id="p3">**</bpt>CompleteDate<ept id="p3">**</ept>。然后保存 TodoItemController.cs 文件。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>重新生成 todolist .NET 后端服务项目，并确认没有生成错误。</source>
          <target state="new">重新生成 todolist .NET 后端服务项目，并确认没有生成错误。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>接下来，您将更新客户端应用，以显示新的 <bpt id="p1">**</bpt>CompleteDate<ept id="p1">**</ept> 数据。</source>
          <target state="new">接下来，您将更新客户端应用，以显示新的 <bpt id="p1">**</bpt>CompleteDate<ept id="p1">**</ept> 数据。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>