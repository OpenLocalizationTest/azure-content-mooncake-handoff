<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">16ead64a7bb4074be83e965829afebf798604e45</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何使用 Blob 存储 (C++) | Azure</source>
          <target state="new">如何使用 Blob 存储 (C++) | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在 Azure 中使用 blob 存储服务。示例用 C++ 编写。</source>
          <target state="new">了解如何在 Azure 中使用 blob 存储服务。示例用 C++ 编写。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用 Blob 存储</source>
          <target state="new">如何通过 C++ 使用 Blob 存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本指南将演示如何使用 Azure Blob 存储服务执行常见方案。示例用 C++ 编写，并使用<bpt id="p1">[</bpt>适用于 C++ 的 Azure 存储空间客户端库<ept id="p1">](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)</ept>。涉及的任务包括<bpt id="p2">**</bpt>上载<ept id="p2">**</ept>、<bpt id="p3">**</bpt>列出<ept id="p3">**</ept>、<bpt id="p4">**</bpt>下载<ept id="p4">**</ept>和<bpt id="p5">**</bpt>删除<ept id="p5">**</ept> Blob。</source>
          <target state="new">本指南将演示如何使用 Azure Blob 存储服务执行常见方案。示例用 C++ 编写，并使用<bpt id="p1">[</bpt>适用于 C++ 的 Azure 存储空间客户端库<ept id="p1">](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)</ept>。涉及的任务包括<bpt id="p2">**</bpt>上载<ept id="p2">**</ept>、<bpt id="p3">**</bpt>列出<ept id="p3">**</ept>、<bpt id="p4">**</bpt>下载<ept id="p4">**</ept>和<bpt id="p5">**</bpt>删除<ept id="p5">**</ept> Blob。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 本指南主要面向适用于 C++ 的 Azure 存储空间客户端库 1.0.0 版及更高版本。建议的版本是存储空间客户端库 1.0.0，它可以通过 <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://www.nuget.org/packages/wastorage)</ept> 或 <bpt id="p2">[</bpt>GitHub<ept id="p2">](https://github.com/Azure/azure-storage-cpp)</ept> 获得。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 本指南主要面向适用于 C++ 的 Azure 存储空间客户端库 1.0.0 版及更高版本。建议的版本是存储空间客户端库 1.0.0，它可以通过 <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://www.nuget.org/packages/wastorage)</ept> 或 <bpt id="p2">[</bpt>GitHub<ept id="p2">](https://github.com/Azure/azure-storage-cpp)</ept> 获得。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>创建 C++ 应用程序</source>
          <target state="new">创建 C++ 应用程序</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在本指南中，你将使用存储功能，这些功能可以在 C++ 应用程序中运行。</source>
          <target state="new">在本指南中，你将使用存储功能，这些功能可以在 C++ 应用程序中运行。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>为此，你将需要安装适用于 C++ 的 Azure 存储客户端库，并在你的 Azure 订阅中创建 Azure 存储帐户。</source>
          <target state="new">为此，你将需要安装适用于 C++ 的 Azure 存储客户端库，并在你的 Azure 订阅中创建 Azure 存储帐户。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>若要安装适用于 C++ 的 Azure 存储客户端库，你可以使用以下方法：</source>
          <target state="new">若要安装适用于 C++ 的 Azure 存储客户端库，你可以使用以下方法：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Linux：<ept id="p1">**</ept>按照<bpt id="p2">[</bpt>适用于 C++ 的 Azure 存储空间客户端库自述文件<ept id="p2">](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)</ept>页中提供的说明操作。</source>
          <target state="new"><bpt id="p1">**</bpt>Linux：<ept id="p1">**</ept>按照<bpt id="p2">[</bpt>适用于 C++ 的 Azure 存储空间客户端库自述文件<ept id="p2">](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)</ept>页中提供的说明操作。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows：<ept id="p1">**</ept>在 Visual Studio 主菜单中，单击“工具”-&gt;“NuGet 程序包管理器”-&gt;“程序包管理器控制台”。在 <bpt id="p2">[</bpt>NuGet 程序包管理器控制台<ept id="p2">](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)</ept>窗口中输入以下命令，然后按 <bpt id="p3">**</bpt>ENTER<ept id="p3">**</ept>。</source>
          <target state="new"><bpt id="p1">**</bpt>Windows：<ept id="p1">**</ept>在 Visual Studio 主菜单中，单击“工具”-&gt;“NuGet 程序包管理器”-&gt;“程序包管理器控制台”。在 <bpt id="p2">[</bpt>NuGet 程序包管理器控制台<ept id="p2">](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)</ept>窗口中输入以下命令，然后按 <bpt id="p3">**</bpt>ENTER<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>配置你的应用程序以访问 Blob 存储</source>
          <target state="new">配置你的应用程序以访问 Blob 存储</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>将以下 include 语句添加到 C++ 文件的顶部，你要在此使用 Azure 存储 API 来访问 blob：</source>
          <target state="new">将以下 include 语句添加到 C++ 文件的顶部，你要在此使用 Azure 存储 API 来访问 blob：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>设置 Azure 存储连接字符串</source>
          <target state="new">设置 Azure 存储连接字符串</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并使用<bpt id="p1">[</bpt>管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的存储帐户名称和存储访问密钥作为 <bpt id="p2">*</bpt>AccountName<ept id="p2">*</ept> 和 <bpt id="p3">*</bpt>AccountKey<ept id="p3">*</ept> 值。有关存储帐户和访问密钥的信息，请参阅<bpt id="p4">[</bpt>关于 Azure 存储帐户<ept id="p4">](/documentation/articles/storage-create-storage-account)</ept>。此示例演示如何声明一个静态字段以保存连接字符串：</source>
          <target state="new">Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并使用<bpt id="p1">[</bpt>管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的存储帐户名称和存储访问密钥作为 <bpt id="p2">*</bpt>AccountName<ept id="p2">*</ept> 和 <bpt id="p3">*</bpt>AccountKey<ept id="p3">*</ept> 值。有关存储帐户和访问密钥的信息，请参阅<bpt id="p4">[</bpt>关于 Azure 存储帐户<ept id="p4">](/documentation/articles/storage-create-storage-account)</ept>。此示例演示如何声明一个静态字段以保存连接字符串：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>若要在本地 Windows 计算机中测试您的应用程序，可以使用随同 <bpt id="p1">[</bpt>Azure SDK<ept id="p1">](/downloads/)</ept> 一起安装的 Azure <bpt id="p2">[</bpt>存储模拟器<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/hh403989.aspx)</ept>。存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。以下示例演示如何声明一个静态字段以将连接字符串保存到你的本地存储模拟器：</source>
          <target state="new">若要在本地 Windows 计算机中测试您的应用程序，可以使用随同 <bpt id="p1">[</bpt>Azure SDK<ept id="p1">](/downloads/)</ept> 一起安装的 Azure <bpt id="p2">[</bpt>存储模拟器<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/hh403989.aspx)</ept>。存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。以下示例演示如何声明一个静态字段以将连接字符串保存到你的本地存储模拟器：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>若要启动 Azure 存储模拟器，请选择“开始”按钮或按 <bpt id="p1">**</bpt>Windows<ept id="p1">**</ept> 键。开始键入“Azure 存储模拟器”，然后从应用程序列表中选择“Azure 存储模拟器”。</source>
          <target state="new">若要启动 Azure 存储模拟器，请选择“开始”按钮或按 <bpt id="p1">**</bpt>Windows<ept id="p1">**</ept> 键。开始键入“Azure 存储模拟器”，然后从应用程序列表中选择“Azure 存储模拟器”。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>下面的示例假定你使用了这两个方法之一来获取存储连接字符串。</source>
          <target state="new">下面的示例假定你使用了这两个方法之一来获取存储连接字符串。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>检索你的连接字符串</source>
          <target state="new">检索你的连接字符串</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>可以使用 <bpt id="p1">**</bpt>cloud_storage_account<ept id="p1">**</ept> 类来表示您的存储帐户信息。若要从存储连接字符串中检索您的存储帐户信息，您可以使用 <bpt id="p2">**</bpt>parse<ept id="p2">**</ept> 方法。</source>
          <target state="new">可以使用 <bpt id="p1">**</bpt>cloud_storage_account<ept id="p1">**</ept> 类来表示您的存储帐户信息。若要从存储连接字符串中检索您的存储帐户信息，您可以使用 <bpt id="p2">**</bpt>parse<ept id="p2">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>其次，获取对 <bpt id="p1">**</bpt>cloud_blob_client<ept id="p1">**</ept> 类的引用，因为它允许您检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。以下代码使用我们在上面检索到的存储帐户对象创建 <bpt id="p2">**</bpt>cloud_blob_client<ept id="p2">**</ept> 对象：</source>
          <target state="new">其次，获取对 <bpt id="p1">**</bpt>cloud_blob_client<ept id="p1">**</ept> 类的引用，因为它允许您检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。以下代码使用我们在上面检索到的存储帐户对象创建 <bpt id="p2">**</bpt>cloud_blob_client<ept id="p2">**</ept> 对象：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>如何：创建容器</source>
          <target state="new">如何：创建容器</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>此示例演示如何创建一个容器（如果该容器不存在）：</source>
          <target state="new">此示例演示如何创建一个容器（如果该容器不存在）：</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>默认情况下，新容器是专用容器，因此你必须指定存储访问密钥才能从该容器下载 Blob。如果要使容器中的文件 (blob) 对任何人都可用，则可以使用以下代码将容器设置为公用：</source>
          <target state="new">默认情况下，新容器是专用容器，因此你必须指定存储访问密钥才能从该容器下载 Blob。如果要使容器中的文件 (blob) 对任何人都可用，则可以使用以下代码将容器设置为公用：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Internet 中的所有人都可以查看公共容器中的 Blob，但是，仅在你具有相应的访问密钥时，才能修改或删除它们。</source>
          <target state="new">Internet 中的所有人都可以查看公共容器中的 Blob，但是，仅在你具有相应的访问密钥时，才能修改或删除它们。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>如何：将 Blob 上载到容器</source>
          <target state="new">如何：将 Blob 上载到容器</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Azure Blob 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。</source>
          <target state="new">Azure Blob 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。拥有 Blob 引用后，您可以通过调用 <bpt id="p1">**</bpt>upload_from_stream<ept id="p1">**</ept> 方法将任何数据流上载到其中。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。</source>
          <target state="new">若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。拥有 Blob 引用后，您可以通过调用 <bpt id="p1">**</bpt>upload_from_stream<ept id="p1">**</ept> 方法将任何数据流上载到其中。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>你还可以使用 <bpt id="p1">**</bpt>upload_from_file<ept id="p1">**</ept> 方法将文件上载到块 blob。</source>
          <target state="new">你还可以使用 <bpt id="p1">**</bpt>upload_from_file<ept id="p1">**</ept> 方法将文件上载到块 blob。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>如何：列出容器中的 Blob</source>
          <target state="new">如何：列出容器中的 Blob</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 <bpt id="p1">**</bpt>list_blobs<ept id="p1">**</ept> 方法来检索其中的 blob 和/或目录。若要针对一个返回的 <bpt id="p2">**</bpt>list_blob_item<ept id="p2">**</ept> 访问其丰富的属性和方法，您必须调用 <bpt id="p3">**</bpt>list_blob_item.as_blob<ept id="p3">**</ept> 方法以获取一个 <bpt id="p4">**</bpt>cloud_blob<ept id="p4">**</ept> 对象，或调用 <bpt id="p5">**</bpt>list_blob.as_directory<ept id="p5">**</ept> 方法以获取 cloud_blob_directory 对象。以下代码演示如何检索和输出 <bpt id="p6">**</bpt>my-sample-container<ept id="p6">**</ept> 容器中每一项的 URI：</source>
          <target state="new">若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 <bpt id="p1">**</bpt>list_blobs<ept id="p1">**</ept> 方法来检索其中的 blob 和/或目录。若要针对一个返回的 <bpt id="p2">**</bpt>list_blob_item<ept id="p2">**</ept> 访问其丰富的属性和方法，您必须调用 <bpt id="p3">**</bpt>list_blob_item.as_blob<ept id="p3">**</ept> 方法以获取一个 <bpt id="p4">**</bpt>cloud_blob<ept id="p4">**</ept> 对象，或调用 <bpt id="p5">**</bpt>list_blob.as_directory<ept id="p5">**</ept> 方法以获取 cloud_blob_directory 对象。以下代码演示如何检索和输出 <bpt id="p6">**</bpt>my-sample-container<ept id="p6">**</ept> 容器中每一项的 URI：</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>有关列出操作的更多详细信息，请参阅<bpt id="p1">[</bpt>使用 C++ 列出 Azure 存储资源<ept id="p1">](/documentation/articles/storage-c-plus-plus-enumeration)</ept>。</source>
          <target state="new">有关列出操作的更多详细信息，请参阅<bpt id="p1">[</bpt>使用 C++ 列出 Azure 存储资源<ept id="p1">](/documentation/articles/storage-c-plus-plus-enumeration)</ept>。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>如何：下载 Blob</source>
          <target state="new">如何：下载 Blob</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>若要下载 Blob，请首先检索 Blob 引用，然后调用 <bpt id="p1">**</bpt>download_to_stream<ept id="p1">**</ept> 方法。以下示例使用 <bpt id="p2">**</bpt>download_to_stream<ept id="p2">**</ept> 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。</source>
          <target state="new">若要下载 Blob，请首先检索 Blob 引用，然后调用 <bpt id="p1">**</bpt>download_to_stream<ept id="p1">**</ept> 方法。以下示例使用 <bpt id="p2">**</bpt>download_to_stream<ept id="p2">**</ept> 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>或者，可以使用 <bpt id="p1">**</bpt>download_to_file<ept id="p1">**</ept> 方法将 blob 的内容下载到文件。</source>
          <target state="new">或者，可以使用 <bpt id="p1">**</bpt>download_to_file<ept id="p1">**</ept> 方法将 blob 的内容下载到文件。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>此外，也可以使用 <bpt id="p1">**</bpt>download_text<ept id="p1">**</ept> 方法以文本字符串形式下载 Blob 的内容。</source>
          <target state="new">此外，也可以使用 <bpt id="p1">**</bpt>download_text<ept id="p1">**</ept> 方法以文本字符串形式下载 Blob 的内容。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>如何：删除 Blob</source>
          <target state="new">如何：删除 Blob</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>若要删除 Blob，请先获取 Blob 引用，然后对其调用 <bpt id="p1">**</bpt>delete_blob<ept id="p1">**</ept> 方法。</source>
          <target state="new">若要删除 Blob，请先获取 Blob 引用，然后对其调用 <bpt id="p1">**</bpt>delete_blob<ept id="p1">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>既然你已了解 blob 存储的基础知识，请按照下面的链接了解有关 Azure 存储的详细信息。</source>
          <target state="new">既然你已了解 blob 存储的基础知识，请按照下面的链接了解有关 Azure 存储的详细信息。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用队列存储</source>
          <target state="new">如何通过 C++ 使用队列存储</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用表存储</source>
          <target state="new">如何通过 C++ 使用表存储</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>使用 C++ 列出 Azure 存储资源</source>
          <target state="new">使用 C++ 列出 Azure 存储资源</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>适用于 C++ 的存储空间客户端库参考</source>
          <target state="new">适用于 C++ 的存储空间客户端库参考</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Azure 存档文档</source>
          <target state="new">Azure 存档文档</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>使用 AzCopy 命令行实用程序传输数据</source>
          <target state="new">使用 AzCopy 命令行实用程序传输数据</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>