<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b6005b699bfe393dde69dc90bcb2ef6b04c938e</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在通用 Windows 应用中处理与脱机数据的冲突 | Microsoft Azure</source>
          <target state="new">在通用 Windows 应用中处理与脱机数据的冲突 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解在通用 Windows 应用程序中同步脱机数据时如何使用 Azure 移动服务处理冲突</source>
          <target state="new">了解在通用 Windows 应用程序中同步脱机数据时如何使用 Azure 移动服务处理冲突</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在“移动服务”中处理与脱机数据同步的冲突</source>
          <target state="new">在“移动服务”中处理与脱机数据同步的冲突</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>本主题演示在使用 Azure 移动服务的脱机功能时如何同步数据和处理冲突。</source>
          <target state="new">本主题演示在使用 Azure 移动服务的脱机功能时如何同步数据和处理冲突。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>在本教程中，你将为支持处理脱机同步冲突的应用下载通用 Windows C# 解决方案。您要将移动服务与应用程序集成，然后再运行的 Windows 应用商店 8.1 和 Windows Phone 8.1 客户端生成同步冲突，并解决冲突。</source>
          <target state="new">在本教程中，你将为支持处理脱机同步冲突的应用下载通用 Windows C# 解决方案。您要将移动服务与应用程序集成，然后再运行的 Windows 应用商店 8.1 和 Windows Phone 8.1 客户端生成同步冲突，并解决冲突。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>本教程以前一教程<bpt id="p1">[</bpt><ept id="p1">脱机数据处理入门]</ept>中的步骤和示例应用程序为基础。在开始本教程之前，应先完成<bpt id="p2">[</bpt><ept id="p2">脱机数据入门]</ept>。</source>
          <target state="new">本教程以前一教程<bpt id="p1">[</bpt><ept id="p1">脱机数据处理入门]</ept>中的步骤和示例应用程序为基础。在开始本教程之前，应先完成<bpt id="p2">[</bpt><ept id="p2">脱机数据入门]</ept>。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>先决条件</source>
          <target state="new">先决条件</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>本教程需要运行在 Windows 8.1 上的 Visual Studio 2013。</source>
          <target state="new">本教程需要运行在 Windows 8.1 上的 Visual Studio 2013。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>下载示例项目</source>
          <target state="new">下载示例项目</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>本教程逐步介绍 <bpt id="p1">[</bpt><ept id="p1">Todo 脱机移动服务示例]</ept>如何处理本地脱机存储与 Azure 中的移动服务数据库之间的冲突。</source>
          <target state="new">本教程逐步介绍 <bpt id="p1">[</bpt><ept id="p1">Todo 脱机移动服务示例]</ept>如何处理本地脱机存储与 Azure 中的移动服务数据库之间的冲突。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>下载<bpt id="p1">[</bpt><ept id="p1">移动服务示例 GitHub 存储库]</ept>的 zip 文件，并将其解压缩到工作目录。</source>
          <target state="new">下载<bpt id="p1">[</bpt><ept id="p1">移动服务示例 GitHub 存储库]</ept>的 zip 文件，并将其解压缩到工作目录。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>如果尚未安装<bpt id="p1">[</bpt><ept id="p1">脱机数据入门]</ept>教程中所述的适用于 Windows 8.1 和 Windows Phone 8.1 的 SQLite，请安装这两个运行时。</source>
          <target state="new">如果尚未安装<bpt id="p1">[</bpt><ept id="p1">脱机数据入门]</ept>教程中所述的适用于 Windows 8.1 和 Windows Phone 8.1 的 SQLite，请安装这两个运行时。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 2013 中，打开 <bpt id="p1">*</bpt>mobile-services-samples\\TodoOffline\\WindowsUniversal\\TodoOffline-Universal.sln<ept id="p1">*</ept> 解决方案文件。按 <bpt id="p2">**</bpt>F5<ept id="p2">**</ept> 键重新生成并运行项目。验证是否还原了 NuGet 包以及是否正确设置了引用。</source>
          <target state="new">在 Visual Studio 2013 中，打开 <bpt id="p1">*</bpt>mobile-services-samples\\TodoOffline\\WindowsUniversal\\TodoOffline-Universal.sln<ept id="p1">*</ept> 解决方案文件。按 <bpt id="p2">**</bpt>F5<ept id="p2">**</ept> 键重新生成并运行项目。验证是否还原了 NuGet 包以及是否正确设置了引用。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>可能需要删除对 SQLite 运行时的任何旧引用，并将其替换为已更新的引用（如<bpt id="p1">[</bpt><ept id="p1">脱机数据入门]</ept>教程中所述）。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>可能需要删除对 SQLite 运行时的任何旧引用，并将其替换为已更新的引用（如<bpt id="p1">[</bpt><ept id="p1">脱机数据入门]</ept>教程中所述）。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>在应用中，在“插入 TodoItem”中键入一些文本，然后单击“保存”将某些 todo 项添加到本地存储中。然后关闭应用程序。</source>
          <target state="new">在应用中，在“插入 TodoItem”中键入一些文本，然后单击“保存”将某些 todo 项添加到本地存储中。然后关闭应用程序。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>请注意，此应用程序尚未连接到任何移动服务，因此“推送”和“拉取”按钮将引发异常。</source>
          <target state="new">请注意，此应用程序尚未连接到任何移动服务，因此“推送”和“拉取”按钮将引发异常。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>针对移动服务测试应用程序</source>
          <target state="new">针对移动服务测试应用程序</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>现在可以针对移动服务测试应用程序了。</source>
          <target state="new">现在可以针对移动服务测试应用程序了。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中，通过单击“仪表板”选项卡的命令栏上的“管理密钥”找到移动服务的应用程序密钥。复制“应用程序密钥”。</source>
          <target state="new">在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中，通过单击“仪表板”选项卡的命令栏上的“管理密钥”找到移动服务的应用程序密钥。复制“应用程序密钥”。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的解决方案资源管理器中，打开客户端示例项目中的 App.xaml.cs 文件。更改 <bpt id="p1">**</bpt>MobileServiceClient<ept id="p1">**</ept> 的初始化以使用你的移动服务 URL 和应用程序密钥：</source>
          <target state="new">在 Visual Studio 的解决方案资源管理器中，打开客户端示例项目中的 App.xaml.cs 文件。更改 <bpt id="p1">**</bpt>MobileServiceClient<ept id="p1">**</ept> 的初始化以使用你的移动服务 URL 和应用程序密钥：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，按 <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 键重新生成并运行应用。</source>
          <target state="new">在 Visual Studio 中，按 <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 键重新生成并运行应用。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>更新后端中的数据以制造冲突</source>
          <target state="new">更新后端中的数据以制造冲突</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在实际情况中，当一个应用程序将更新推送到数据库中的一条记录，然后另一个应用程序尝试使用该记录中过时的版本字段将更新推送到同一条记录时，会发生同步冲突。如<bpt id="p1">[</bpt><ept id="p1">脱机数据入门]</ept>中所述，要支持脱机同步功能需要版本系统属性。通过每次数据库更新检查此版本信息。如果应用的实例尝试使用过时版本更新记录，则将发生冲突，并且会在应用中捕获为 <ph id="ph1">`MobileServicePreconditionFailedException`</ph>。如果应用未捕获 <ph id="ph2">`MobileServicePreconditionFailedException`</ph>，则最终将引发 <ph id="ph3">`MobileServicePushFailedException`</ph>，描述遇到了多少同步错误。</source>
          <target state="new">在实际情况中，当一个应用程序将更新推送到数据库中的一条记录，然后另一个应用程序尝试使用该记录中过时的版本字段将更新推送到同一条记录时，会发生同步冲突。如<bpt id="p1">[</bpt><ept id="p1">脱机数据入门]</ept>中所述，要支持脱机同步功能需要版本系统属性。通过每次数据库更新检查此版本信息。如果应用的实例尝试使用过时版本更新记录，则将发生冲突，并且会在应用中捕获为 <ph id="ph1">`MobileServicePreconditionFailedException`</ph>。如果应用未捕获 <ph id="ph2">`MobileServicePreconditionFailedException`</ph>，则最终将引发 <ph id="ph3">`MobileServicePushFailedException`</ph>，描述遇到了多少同步错误。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>若要通过脱机数据同步支持同步已删除的记录，应启用“<bpt id="p1">[</bpt>软删除<ept id="p1">](/documentation/articles/mobile-services-using-soft-delete)</ept>”。否则，必须手动删除本地存储中的记录，或者调用 <ph id="ph2">`IMobileServiceSyncTable::PurgeAsync()`</ph> 以清除本地存储。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>若要通过脱机数据同步支持同步已删除的记录，应启用“<bpt id="p1">[</bpt>软删除<ept id="p1">](/documentation/articles/mobile-services-using-soft-delete)</ept>”。否则，必须手动删除本地存储中的记录，或者调用 <ph id="ph2">`IMobileServiceSyncTable::PurgeAsync()`</ph> 以清除本地存储。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>下面的步骤演示使用示例同时运行 Windows Phone 8.1 和 Windows 应用商店 8.1 客户端以引发冲突并解决冲突。</source>
          <target state="new">下面的步骤演示使用示例同时运行 Windows Phone 8.1 和 Windows 应用商店 8.1 客户端以引发冲突并解决冲突。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，右键单击 Windows Phone 8.1 项目，然后单击“设为启动项目”。然后按 <bpt id="p1">**</bpt>Ctrl+F5<ept id="p1">**</ept> 键以运行 Windows Phone 8.1 客户端而不进行调试。在模拟器中运行 Windows Phone 8.1 客户端之后，单击“拉取”按钮将本地存储与数据库的当前状态同步。</source>
          <target state="new">在 Visual Studio 中，右键单击 Windows Phone 8.1 项目，然后单击“设为启动项目”。然后按 <bpt id="p1">**</bpt>Ctrl+F5<ept id="p1">**</ept> 键以运行 Windows Phone 8.1 客户端而不进行调试。在模拟器中运行 Windows Phone 8.1 客户端之后，单击“拉取”按钮将本地存储与数据库的当前状态同步。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，右键单击 Windows 8.1 运行时项目，然后单击“设为启动项目”以将其重设为启动项目。然后按 <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 运行该项目。在运行 Windows 应用商店 8.1 客户端之后，单击“拉取”按钮将本地存储与数据库的当前状态同步。</source>
          <target state="new">在 Visual Studio 中，右键单击 Windows 8.1 运行时项目，然后单击“设为启动项目”以将其重设为启动项目。然后按 <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 运行该项目。在运行 Windows 应用商店 8.1 客户端之后，单击“拉取”按钮将本地存储与数据库的当前状态同步。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>此时，两个客户端都将与数据库同步。这两个客户端的代码还使用增量同步，以便仅同步不完整的 todo 项。已完成的 todo 项将被忽略。选择其中的一个项，并在两个客户端中将同一个项的文本编辑为不同的值。单击“推送”按钮将这两个更改与服务器上的数据库同步。</source>
          <target state="new">此时，两个客户端都将与数据库同步。这两个客户端的代码还使用增量同步，以便仅同步不完整的 todo 项。已完成的 todo 项将被忽略。选择其中的一个项，并在两个客户端中将同一个项的文本编辑为不同的值。单击“推送”按钮将这两个更改与服务器上的数据库同步。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>最后执行其推送的客户端会遇到冲突，并让用户决定要将哪个值提交到数据库。该异常提供了用于解决冲突的正确版本值。</source>
          <target state="new">最后执行其推送的客户端会遇到冲突，并让用户决定要将哪个值提交到数据库。该异常提供了用于解决冲突的正确版本值。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>查看处理同步冲突的代码</source>
          <target state="new">查看处理同步冲突的代码</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>若要使用移动服务脱机功能，必须在本地数据库和数据传输对象中都包括版本列。这是通过更新 <ph id="ph1">`TodoItem`</ph> 类的以下成员实现的：</source>
          <target state="new">若要使用移动服务脱机功能，必须在本地数据库和数据传输对象中都包括版本列。这是通过更新 <ph id="ph1">`TodoItem`</ph> 类的以下成员实现的：</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>当使用 <ph id="ph1">`TodoItem`</ph> 类来定义本地存储时，<ph id="ph2">`__version`</ph> 列包括在本地数据库的 <ph id="ph3">`OnNavigatedTo()`</ph> 方法中。</source>
          <target state="new">当使用 <ph id="ph1">`TodoItem`</ph> 类来定义本地存储时，<ph id="ph2">`__version`</ph> 列包括在本地数据库的 <ph id="ph3">`OnNavigatedTo()`</ph> 方法中。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>若要使用代码处理脱机同步冲突，请创建一个实现 <ph id="ph1">`IMobileServiceSyncHandler`</ph> 的类。调用 <ph id="ph2">`MobileServiceClient.SyncContext.InitializeAsync()`</ph> 时传递这种类型的对象。在示例的 <ph id="ph3">`OnNavigatedTo()`</ph> 方法中也会发生这种情况。</source>
          <target state="new">若要使用代码处理脱机同步冲突，请创建一个实现 <ph id="ph1">`IMobileServiceSyncHandler`</ph> 的类。调用 <ph id="ph2">`MobileServiceClient.SyncContext.InitializeAsync()`</ph> 时传递这种类型的对象。在示例的 <ph id="ph3">`OnNavigatedTo()`</ph> 方法中也会发生这种情况。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>SyncHandler.cs<ept id="p1">**</ept> 中的类 <ph id="ph1">`SyncHandler`</ph> 实现了 <ph id="ph2">`IMobileServiceSyncHandler`</ph>。将每个推送操作发送到服务器时均调用 <ph id="ph3">`ExecuteTableOperationAsync`</ph> 方法。如果引发了 <ph id="ph4">`MobileServicePreconditionFailedException`</ph> 类型的异常，则意味着某个项目的本地版本和远程版本之间存在冲突。</source>
          <target state="new"><bpt id="p1">**</bpt>SyncHandler.cs<ept id="p1">**</ept> 中的类 <ph id="ph1">`SyncHandler`</ph> 实现了 <ph id="ph2">`IMobileServiceSyncHandler`</ph>。将每个推送操作发送到服务器时均调用 <ph id="ph3">`ExecuteTableOperationAsync`</ph> 方法。如果引发了 <ph id="ph4">`MobileServicePreconditionFailedException`</ph> 类型的异常，则意味着某个项目的本地版本和远程版本之间存在冲突。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>若要在解决冲突时考虑到本地项目，则只需重试该操作。发生冲突后，需更新本地项目版本，使之与服务器版本匹配，因此重新执行该操作将使用本地更改覆盖服务器更改：</source>
          <target state="new">若要在解决冲突时考虑到本地项目，则只需重试该操作。发生冲突后，需更新本地项目版本，使之与服务器版本匹配，因此重新执行该操作将使用本地更改覆盖服务器更改：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>若要在解决冲突时考虑到服务器项目，则只需从 <ph id="ph1">`ExecuteTableOperationAsync`</ph> 返回。将放弃该对象的本地版本，将其替换为服务器中的值。</source>
          <target state="new">若要在解决冲突时考虑到服务器项目，则只需从 <ph id="ph1">`ExecuteTableOperationAsync`</ph> 返回。将放弃该对象的本地版本，将其替换为服务器中的值。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>若要停止推送操作（但保留已排队的更改），请使用方法 <ph id="ph1">`AbortPush()`</ph>：</source>
          <target state="new">若要停止推送操作（但保留已排队的更改），请使用方法 <ph id="ph1">`AbortPush()`</ph>：</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>这将停止当前的推送操作，但会保留所有挂起的更改，包括当前操作（如果从 <ph id="ph1">`ExecuteTableOperationAsync`</ph> 调用了 <ph id="ph2">`AbortPush`</ph>）。下次调用 <ph id="ph3">`PushAsync()`</ph> 时，这些更改将发送到服务器。</source>
          <target state="new">这将停止当前的推送操作，但会保留所有挂起的更改，包括当前操作（如果从 <ph id="ph1">`ExecuteTableOperationAsync`</ph> 调用了 <ph id="ph2">`AbortPush`</ph>）。下次调用 <ph id="ph3">`PushAsync()`</ph> 时，这些更改将发送到服务器。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>在取消推送时，<ph id="ph1">`PushAsync`</ph> 将引发 <ph id="ph2">`MobileServicePushFailedException`</ph>，而异常属性 <ph id="ph3">`PushResult.Status`</ph> 将具有值 <ph id="ph4">`MobileServicePushStatus.CancelledByOperation`</ph>。</source>
          <target state="new">在取消推送时，<ph id="ph1">`PushAsync`</ph> 将引发 <ph id="ph2">`MobileServicePushFailedException`</ph>，而异常属性 <ph id="ph3">`PushResult.Status`</ph> 将具有值 <ph id="ph4">`MobileServicePushStatus.CancelledByOperation`</ph>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>