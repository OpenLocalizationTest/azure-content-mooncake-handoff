{
  "nodes": [
    {
      "content": "使用 .NET SDK 开始传送点播内容",
      "pos": [
        27,
        47
      ]
    },
    {
      "content": "本教程将引导你完成使用 Azure 媒体服务和 .NET 实施点播内容传送应用程序的步骤。",
      "pos": [
        66,
        111
      ]
    },
    {
      "content": "使用 .NET SDK 开始传送点播内容",
      "pos": [
        327,
        347
      ]
    },
    {
      "pos": [
        459,
        559
      ],
      "content": "[AZURE.NOTE]\n若要完成本教程，你需要一个 Azure 帐户。有关详细信息，请参阅 [Azure 试用](/pricing/1rmb-trial/?WT.mc_id=A261C142F)。",
      "leadings": [
        "",
        ">"
      ],
      "nodes": [
        {
          "content": "若要完成本教程，你需要一个 Azure 帐户。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 试用<ept id=\"p1\">](/pricing/1rmb-trial/?WT.mc_id=A261C142F)</ept>。",
          "pos": [
            13,
            99
          ]
        }
      ]
    },
    {
      "content": "概述",
      "pos": [
        564,
        566
      ]
    },
    {
      "content": "本教程将引导你完成使用用于 .NET 的 Azure 媒体服务 (AMS) SDK 实施视频点播 (VoD) 内容传送应用程序的步骤。",
      "pos": [
        569,
        636
      ]
    },
    {
      "content": "本教程介绍了基本的媒体服务工作流，以及进行媒体服务开发需要用到的最常见编程对象和任务。完成本教程后，你就能够流式传输或渐进下载你已上载、编码和下载的示例媒体文件。",
      "pos": [
        639,
        720
      ]
    },
    {
      "content": "学习内容",
      "pos": [
        725,
        729
      ]
    },
    {
      "content": "本教程说明如何完成以下任务：",
      "pos": [
        731,
        745
      ]
    },
    {
      "content": "创建媒体服务帐户（使用 Azure 管理门户）。",
      "pos": [
        751,
        775
      ]
    },
    {
      "content": "配置流式处理终结点（使用门户）。",
      "pos": [
        780,
        796
      ]
    },
    {
      "content": "创建和配置 Visual Studio 项目。",
      "pos": [
        801,
        824
      ]
    },
    {
      "content": "连接到媒体服务帐户。",
      "pos": [
        829,
        839
      ]
    },
    {
      "content": "创建新资产并上载视频文件。",
      "pos": [
        844,
        857
      ]
    },
    {
      "content": "将源文件编码为一组自适应比特率 MP4 文件。",
      "pos": [
        862,
        885
      ]
    },
    {
      "content": "发布资产并获取用于流式处理和渐进式下载的 URL。",
      "pos": [
        890,
        915
      ]
    },
    {
      "content": "通过播放内容进行测试。",
      "pos": [
        920,
        931
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        936,
        940
      ]
    },
    {
      "content": "以下是完成本教程所需具备的条件。",
      "pos": [
        942,
        958
      ]
    },
    {
      "content": "若要完成本教程，你需要一个 Azure 帐户。",
      "pos": [
        962,
        985
      ]
    },
    {
      "pos": [
        996,
        1176
      ],
      "content": "如果你没有帐户，可以创建一个试用帐户，只需几分钟即可完成。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 试用<ept id=\"p1\">](/pricing/1rmb-trial/?WT.mc_id=A261C142F)</ept>。获取可用来尝试付费版 Azure 服务的信用额度。即使在信用额度用完之后，你也可以保留该帐户，使用那些免费的 Azure 服务和功能，例如 Azure 中的 Web 应用功能。"
    },
    {
      "content": "操作系统：Windows 8 或更高版本、Windows 2008 R2、Windows 7。",
      "pos": [
        1179,
        1226
      ]
    },
    {
      "content": ".NET Framework 4.0 或更高版本",
      "pos": [
        1229,
        1253
      ]
    },
    {
      "content": "Visual Studio 2010 SP1（Professional、Premium、Ultimate 或 Express）或更高版本。",
      "pos": [
        1256,
        1325
      ]
    },
    {
      "content": "下载示例",
      "pos": [
        1330,
        1334
      ]
    },
    {
      "pos": [
        1336,
        1469
      ],
      "content": "从<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](http://azure.microsoft.com/documentation/samples/media-services-dotnet-on-demand-encoding-with-media-encoder-standard/)</ept>获取并运行示例。"
    },
    {
      "content": "使用门户创建媒体服务帐户",
      "pos": [
        1473,
        1485
      ]
    },
    {
      "content": "在 Azure 管理门户中，依次单击“新建”、“媒体服务”和“快速创建”。",
      "pos": [
        1490,
        1527
      ]
    },
    {
      "content": "媒体服务快速创建",
      "pos": [
        1535,
        1543
      ]
    },
    {
      "content": "在“名称”中，输入新帐户的名称。媒体服务帐户名称由小写字母或数字构成（不含空格），长度为 3 - 24 个字符。",
      "pos": [
        1613,
        1669
      ]
    },
    {
      "content": "在“区域”中，选择将用于存储媒体服务帐户的元数据记录的地理区域。下拉列表中仅显示可用的媒体服务区域。",
      "pos": [
        1674,
        1724
      ]
    },
    {
      "content": "在“存储帐户”中，选择一个存储帐户以便为媒体服务帐户中的媒体内容提供 Blob 存储。你可以选择位于媒体服务帐户所在的地理区域内的现有存储帐户，也可以创建一个新的存储帐户。将在同一区域内创建一个新的存储帐户。",
      "pos": [
        1729,
        1833
      ]
    },
    {
      "content": "如果你创建了一个新的存储帐户，请在“新建存储帐户名称”中输入该存储帐户的名称。适用于存储帐户名的规则对媒体服务帐户同样适用。",
      "pos": [
        1838,
        1900
      ]
    },
    {
      "content": "单击窗体底部的“快速创建”。",
      "pos": [
        1905,
        1919
      ]
    },
    {
      "content": "可以在窗口底部的消息区域中监视过程的状态。",
      "pos": [
        1921,
        1942
      ]
    },
    {
      "content": "成功创建帐户后，状态将更改为“活动”。",
      "pos": [
        1944,
        1963
      ]
    },
    {
      "content": "在页面底部，将出现“管理密钥”按钮。当你单击此按钮时，将会显示一个对话框，其中包含媒体服务帐户名以及主密钥和辅助密钥。你必须要有帐户名和主要密钥信息，才能以编程方式访问媒体服务帐户。",
      "pos": [
        1965,
        2056
      ]
    },
    {
      "content": "“媒体服务”页",
      "pos": [
        2060,
        2067
      ]
    },
    {
      "content": "当你双击帐户名时，默认情况下将显示“快速启动”页。可从此页执行某些管理任务，而这些管理任务也可从该门户的其他页执行。例如，你可以从此页上载视频文件，也可以从“内容”页执行此操作。",
      "pos": [
        2141,
        2230
      ]
    },
    {
      "content": "使用门户配置流式处理终结点",
      "pos": [
        2234,
        2247
      ]
    },
    {
      "content": "使用 Azure 媒体服务时最常见的方案之一是将自适应比特率流传送至你的客户端。通过自适应比特率流，客户端可以在视频显示时，根据当前网络带宽、CPU 利用率和其他因素，切换至较高或较低的比特率流。媒体服务支持以下自适应比特率流式处理技术：HTTP 实时流式处理 (HLS)、平滑流式处理、MPEG DASH 和 HDS（仅适用于 Adobe PrimeTime/Access 许可证持有人）。",
      "pos": [
        2249,
        2445
      ]
    },
    {
      "content": "媒体服务所提供的动态打包可让你以媒体服务支持的流格式（MPEG DASH、HLS、Smooth Streaming、HDS）传送自适应比特率 MP4 或平滑流编码内容，而无须重新打包成这些流格式。",
      "pos": [
        2447,
        2545
      ]
    },
    {
      "content": "若要使用动态打包，必须执行下列操作：",
      "pos": [
        2547,
        2565
      ]
    },
    {
      "content": "将夹层（源）文件编码或转换成一组自适应比特率 MP4 文件或自适应比特率平滑流文件（本教程稍后将演示编码步骤）。",
      "pos": [
        2569,
        2625
      ]
    },
    {
      "pos": [
        2628,
        2662
      ],
      "content": "针对你要传送内容的<bpt id=\"p1\">**</bpt>流式处理终结点<ept id=\"p1\">**</ept>，获取至少一个流式处理单位。"
    },
    {
      "content": "通过动态打包，你只需要存储及支付一种存储格式的文件，媒体服务将会根据客户端的要求创建并提供适当的响应。",
      "pos": [
        2664,
        2715
      ]
    },
    {
      "content": "若要更改流式处理保留单元数，请执行以下操作：",
      "pos": [
        2717,
        2739
      ]
    },
    {
      "pos": [
        2744,
        2805
      ],
      "content": "在<bpt id=\"p1\">[</bpt>门户<ept id=\"p1\">](https://manage.windowsazure.cn/)</ept>中单击“媒体服务”。然后，单击媒体服务的名称。"
    },
    {
      "content": "选择“流式处理终结点”页。然后，单击要修改的流式处理终结点。",
      "pos": [
        2810,
        2840
      ]
    },
    {
      "content": "若要指定流式处理单元数，请单击“缩放”选项卡，然后移动“保留容量”滑块。",
      "pos": [
        2845,
        2881
      ]
    },
    {
      "content": "“缩放”页",
      "pos": [
        2889,
        2894
      ]
    },
    {
      "content": "按“保存”以保存更改。",
      "pos": [
        2975,
        2986
      ]
    },
    {
      "content": "分配所有新的单元大约需要 20 分钟才能完成。",
      "pos": [
        2988,
        3011
      ]
    },
    {
      "pos": [
        3014,
        3066
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 当前，将流式处理单位的任何正值设置回“无”可将流式处理功能禁用最多 1 小时。"
    },
    {
      "pos": [
        3071,
        3159
      ],
      "content": "为 24 小时期间指定的最大单位数将用于计算成本。有关定价详细信息，请参阅<bpt id=\"p1\">[</bpt>媒体服务定价详细信息<ept id=\"p1\">](/home/features/media-services/#price)</ept>。"
    },
    {
      "content": "创建和配置 Visual Studio 项目",
      "pos": [
        3165,
        3187
      ]
    },
    {
      "content": "在 Visual Studio 2013、Visual Studio 2012 或 Visual Studio 2010 SP1 中创建一个新的 C# 控制台应用程序。输入“名称”、“位置”和“解决方案名称”，然后单击“确定”。",
      "pos": [
        3192,
        3306
      ]
    },
    {
      "pos": [
        3311,
        3567
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>windowsazure.mediaservices.extensions<ept id=\"p1\">](https://www.nuget.org/packages/windowsazure.mediaservices.extensions)</ept> Nuget 包安装 <bpt id=\"p2\">**</bpt>Azure 媒体服务 .NET SDK 扩展<ept id=\"p2\">**</ept>。媒体服务 .NET SDK Extensions 是一组扩展方法和帮助器函数，可简化你的代码，并令使用媒体服务进行开发变得更加容易。安装此包也会安装<bpt id=\"p3\">**</bpt>媒体服务 .NET SDK<ept id=\"p3\">**</ept> 并添加所有其他必需的依赖项。"
    },
    {
      "pos": [
        3572,
        3683
      ],
      "content": "添加对 System.Configuration 程序集的引用。此程序集包含用于访问配置文件（例如，App.config）的 <bpt id=\"p1\">**</bpt>System.Configuration.ConfigurationManager<ept id=\"p1\">**</ept> 类。"
    },
    {
      "pos": [
        3688,
        3834
      ],
      "content": "打开 App.config 文件（如果该文件未按默认添加到项目中，请添加）并在该文件中添加 <bpt id=\"p1\">*</bpt>appSettings<ept id=\"p1\">*</ept> 节。如以下示例中所示设置 Azure 媒体服务帐户名和帐户密钥的值。若要获取帐户名和密钥信息，请打开 Azure 管理门户，选择你的媒体服务帐户，然后单击“管理密钥”按钮。"
    },
    {
      "pos": [
        4133,
        4176
      ],
      "content": "使用以下代码覆盖位于 Program.cs 文件开头的现有 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句。"
    },
    {
      "content": "在 projects 目录下创建新的文件夹，然后复制你要编码和流处理或渐进式下载的 .mp4 或 .wmv 文件。在此示例中，我们使用了“C:\\\\VideoFiles”路径。",
      "pos": [
        4499,
        4586
      ]
    },
    {
      "content": "连接到媒体服务帐户",
      "pos": [
        4590,
        4599
      ]
    },
    {
      "pos": [
        4601,
        4708
      ],
      "content": "使用采用 .NET 的媒体服务时，你必须将 <bpt id=\"p1\">**</bpt>CloudMediaContext<ept id=\"p1\">**</ept> 类用于大多数媒体服务编程任务：连接到媒体服务帐户；创建、更新、访问和删除以下对象：资产、资产文件、作业、访问策略、定位符等等。"
    },
    {
      "pos": [
        4710,
        4914
      ],
      "content": "使用以下代码覆盖默认程序类。该代码演示如何从 App.config 文件中读取连接值，以及如何创建 <bpt id=\"p1\">**</bpt>CloudMediaContext<ept id=\"p1\">**</ept> 对象以连接到媒体服务。有关连接到媒体服务的详细信息，请参阅<bpt id=\"p2\">[</bpt>使用适用于 .NET 的媒体服务 SDK 连接到媒体服务<ept id=\"p2\">](/documentation/articles/media-services-dotnet-connect_programmatically)</ept>。"
    },
    {
      "pos": [
        4916,
        4944
      ],
      "content": "<bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> 函数调用将在本部分中进一步定义的方法。"
    },
    {
      "content": "创建新资产并上载视频文件",
      "pos": [
        7513,
        7525
      ]
    },
    {
      "pos": [
        7527,
        7655
      ],
      "content": "在媒体服务中，可以将数字文件上载（引入）到资产中。<bpt id=\"p1\">**</bpt>资产<ept id=\"p1\">**</ept>实体可以包含视频、音频、图像、缩略图集合、图文轨迹和隐藏字幕文件（以及有关这些文件的元数据。） 上载文件完成后，相关内容即安全地存储在云中供后续处理和流式处理。资产中的文件称为<bpt id=\"p2\">**</bpt>资产文件<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        7657,
        7766
      ],
      "content": "下面定义的 <bpt id=\"p1\">**</bpt>UploadFile<ept id=\"p1\">**</ept> 方法调用 <bpt id=\"p2\">**</bpt>CreateFromFile<ept id=\"p2\">**</ept>（在 .NET SDK Extensions 中定义）。<bpt id=\"p3\">**</bpt>CreateFromFile<ept id=\"p3\">**</ept> 创建指定的源文件所要上载到的新资产。"
    },
    {
      "pos": [
        7768,
        7836
      ],
      "content": "<bpt id=\"p1\">**</bpt>CreateFromFile<ept id=\"p1\">**</ept> 方法采用 <bpt id=\"p2\">**</bpt>AssetCreationOptions<ept id=\"p2\">**</ept>，它可让你指定以下其中一个资产创建选项："
    },
    {
      "pos": [
        7840,
        7922
      ],
      "content": "<bpt id=\"p1\">**</bpt>无<ept id=\"p1\">**</ept> - 不使用加密。这是默认值。请注意，使用此选项时，你的内容在传送过程中或静态存储过程中都不会受到保护。如果计划使用渐进式下载交付 MP4，则使用此选项。"
    },
    {
      "pos": [
        7925,
        8111
      ],
      "content": "<bpt id=\"p1\">**</bpt>StorageEncrypted<ept id=\"p1\">**</ept> - 使用此选项可以通过高级加密标准 (AES) 256 位加密在本地加密明文内容，然后将其上载到 Azure 存储空间中以加密形式静态存储相关内容。受存储加密保护的资产将在编码前自动解密并放入经过加密的文件系统中，并可选择在重新上载为新的输出资产前重新加密。存储加密的主要用例是在磁盘上通过静态增强加密来保护高品质的输入媒体文件。"
    },
    {
      "pos": [
        8114,
        8214
      ],
      "content": "<bpt id=\"p1\">**</bpt>CommonEncryptionProtected<ept id=\"p1\">**</ept> - 上载经过通用加密或 PlayReady DRM 加密并受其保护的内容（例如，受 PlayReady DRM 保护的平滑流）时使用此选项。"
    },
    {
      "pos": [
        8217,
        8314
      ],
      "content": "<bpt id=\"p1\">**</bpt>EnvelopeEncryptionProtected<ept id=\"p1\">**</ept> - 如果要上载使用 AES 加密的 HLS，请使用此选项。请注意，Transform Manager 必须已对文件进行编码和加密。"
    },
    {
      "pos": [
        8316,
        8357
      ],
      "content": "<bpt id=\"p1\">**</bpt>CreateFromFile<ept id=\"p1\">**</ept> 方法还允许你指定回调，以报告文件的上载进度。"
    },
    {
      "pos": [
        8359,
        8386
      ],
      "content": "在以下示例中，指定了 <bpt id=\"p1\">**</bpt>None<ept id=\"p1\">**</ept> 作为资产选项。"
    },
    {
      "content": "将以下方法添加到 Program 类。",
      "pos": [
        8388,
        8407
      ]
    },
    {
      "content": "将源文件编码为一组自适应比特率 MP4 文件",
      "pos": [
        8854,
        8876
      ]
    },
    {
      "content": "将资产引入媒体服务后，即可对媒体进行编码、传输复用、打水印等处理，然后将其传送至客户端。将根据多个后台角色实例调度把那个运行这些活动，以确保较高的性能和可用性。这些活动称为作业，每个作业由原子任务构成，这些原子任务将在资产文件上执行具体的工作。",
      "pos": [
        8878,
        9000
      ]
    },
    {
      "content": "如前所述，使用 Azure 媒体服务时最常见的方案之一是将自适应比特率流传送至你的客户端。媒体服务可以将一组自适应比特率 MP4 文件动态打包为以下其中一种格式：HTTP 实时流式处理 (HLS)、平滑流式处理、MPEG DASH 和 HDS（仅适用于 Adobe PrimeTime/Access 许可证持有人）。",
      "pos": [
        9002,
        9160
      ]
    },
    {
      "content": "若要使用动态打包，必须执行下列操作：",
      "pos": [
        9162,
        9180
      ]
    },
    {
      "content": "将夹层（源）文件编码或转换成一组自适应比特率 MP4 文件或自适应比特率平滑流文件，",
      "pos": [
        9184,
        9226
      ]
    },
    {
      "content": "针对你要传送内容的“流式处理终结点”，获取至少一个流式处理单位。",
      "pos": [
        9231,
        9263
      ]
    },
    {
      "pos": [
        9265,
        9350
      ],
      "content": "以下代码演示如何提交编码作业。该作业所包含的一项任务会指定要使用 <bpt id=\"p1\">**</bpt>Azure 媒体编码器<ept id=\"p1\">**</ept>将夹层文件转码成一组自适应比特率 MP4。代码会提交作业，并等待作业完成。"
    },
    {
      "content": "作业完成后，你即可流式处理资产，或渐进式下载转码后所创建的 MP4 文件。请注意，你不需要拥有超过 0 个流式处理单位才能渐进式下载 MP4 文件。",
      "pos": [
        9352,
        9426
      ]
    },
    {
      "content": "将以下方法添加到 Program 类。",
      "pos": [
        9428,
        9447
      ]
    },
    {
      "content": "发布资产并获取用于流式处理和渐进式下载的 URL",
      "pos": [
        10497,
        10521
      ]
    },
    {
      "content": "若要流处理或下载资产，你必须先创建定位符来“发布”资产。定位符提供对资产中所含文件的访问权限。媒体服务支持两种类型的定位符：用于流媒体（例如 MPEG DASH、HLS 或平滑流式处理）的 OnDemandOrigin 定位符，以及用于下载媒体文件的访问签名 (SAS) 定位符。",
      "pos": [
        10523,
        10663
      ]
    },
    {
      "content": "创建定位符后，可以创建用来流式处理或下载文件的 URL。",
      "pos": [
        10665,
        10693
      ]
    },
    {
      "content": "平滑流式处理的流 URL 采用以下格式：",
      "pos": [
        10696,
        10716
      ]
    },
    {
      "content": "HLS 的流 URL 采用以下格式：",
      "pos": [
        10856,
        10874
      ]
    },
    {
      "content": "MPEG DASH 的流 URL 采用以下格式：",
      "pos": [
        11032,
        11056
      ]
    },
    {
      "content": "用于下载文件的 SAS URL 采用以下格式：",
      "pos": [
        11216,
        11239
      ]
    },
    {
      "content": "媒体服务 .NET SDK Extensions 提供了便利的帮助器方法，可针对已发布的资产返回格式化 URL。",
      "pos": [
        11309,
        11365
      ]
    },
    {
      "content": "以下代码使用 .NET SDK 扩展创建定位符，获取流和渐进式下载 URL。该代码还演示了如何将文件下载到本地文件夹。",
      "pos": [
        11367,
        11426
      ]
    },
    {
      "content": "将以下方法添加到 Program 类。",
      "pos": [
        11428,
        11447
      ]
    },
    {
      "content": "通过播放内容进行测试",
      "pos": [
        13855,
        13865
      ]
    },
    {
      "content": "在执行上一部分中定义的程序后，控制台窗口中会显示如下所示的 URL。",
      "pos": [
        13869,
        13903
      ]
    },
    {
      "content": "自适应流式处理 URL：",
      "pos": [
        13905,
        13917
      ]
    },
    {
      "content": "平滑流",
      "pos": [
        13919,
        13922
      ]
    },
    {
      "content": "HLS",
      "pos": [
        14058,
        14061
      ]
    },
    {
      "content": "MPEG DASH",
      "pos": [
        14215,
        14224
      ]
    },
    {
      "content": "渐进式下载 URL（音频和视频）。",
      "pos": [
        14381,
        14398
      ]
    },
    {
      "pos": [
        16699,
        16786
      ],
      "content": "若要流式处理视频，请使用 <bpt id=\"p1\">[</bpt>Azure 媒体服务播放器<ept id=\"p1\">](http://amsplayer.azurewebsites.net/azuremediaplayer.html)</ept>。"
    },
    {
      "content": "若要测试渐进式下载，请将 URL 粘贴到浏览器（例如 Internet Explorer、Chrome 或 Safari）中。",
      "pos": [
        16788,
        16851
      ]
    },
    {
      "content": "想要寻找其他内容吗？",
      "pos": [
        16962,
        16972
      ]
    },
    {
      "content": "如果本主题不包含你所期待的内容、缺少某些内容，或在其他方面不符合你的需求，请使用下面的 Disqus 会话向我们提供反馈。",
      "pos": [
        16974,
        17035
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"使用 .NET SDK 开始传送点播内容\"\n    description=\"本教程将引导你完成使用 Azure 媒体服务和 .NET 实施点播内容传送应用程序的步骤。\"\n    services=\"media-services\"\n    documentationCenter=\"\"\n    authors=\"Juliako\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\" \n    wacn.date=\"03/17/2016\"/>\n\n\n# 使用 .NET SDK 开始传送点播内容\n\n\n[AZURE.INCLUDE [media-services-selector-get-started](../includes/media-services-selector-get-started.md)]\n\n\n>[AZURE.NOTE]\n>若要完成本教程，你需要一个 Azure 帐户。有关详细信息，请参阅 [Azure 试用](/pricing/1rmb-trial/?WT.mc_id=A261C142F)。\n \n##概述 \n\n本教程将引导你完成使用用于 .NET 的 Azure 媒体服务 (AMS) SDK 实施视频点播 (VoD) 内容传送应用程序的步骤。\n\n\n本教程介绍了基本的媒体服务工作流，以及进行媒体服务开发需要用到的最常见编程对象和任务。完成本教程后，你就能够流式传输或渐进下载你已上载、编码和下载的示例媒体文件。\n\n## 学习内容\n\n本教程说明如何完成以下任务：\n\n1.  创建媒体服务帐户（使用 Azure 管理门户）。\n2.  配置流式处理终结点（使用门户）。\n3.  创建和配置 Visual Studio 项目。\n5.  连接到媒体服务帐户。\n6.  创建新资产并上载视频文件。\n7.  将源文件编码为一组自适应比特率 MP4 文件。\n8.  发布资产并获取用于流式处理和渐进式下载的 URL。\n9.  通过播放内容进行测试。\n\n## 先决条件\n\n以下是完成本教程所需具备的条件。\n\n- 若要完成本教程，你需要一个 Azure 帐户。 \n    \n    如果你没有帐户，可以创建一个试用帐户，只需几分钟即可完成。有关详细信息，请参阅 [Azure 试用](/pricing/1rmb-trial/?WT.mc_id=A261C142F)。获取可用来尝试付费版 Azure 服务的信用额度。即使在信用额度用完之后，你也可以保留该帐户，使用那些免费的 Azure 服务和功能，例如 Azure 中的 Web 应用功能。\n- 操作系统：Windows 8 或更高版本、Windows 2008 R2、Windows 7。\n- .NET Framework 4.0 或更高版本\n- Visual Studio 2010 SP1（Professional、Premium、Ultimate 或 Express）或更高版本。\n\n\n##下载示例\n\n从[此处](http://azure.microsoft.com/documentation/samples/media-services-dotnet-on-demand-encoding-with-media-encoder-standard/)获取并运行示例。\n\n##使用门户创建媒体服务帐户\n\n1. 在 Azure 管理门户中，依次单击“新建”、“媒体服务”和“快速创建”。\n\n    ![媒体服务快速创建](./media/media-services-dotnet-get-started/wams-QuickCreate.png)\n\n2. 在“名称”中，输入新帐户的名称。媒体服务帐户名称由小写字母或数字构成（不含空格），长度为 3 - 24 个字符。\n\n3. 在“区域”中，选择将用于存储媒体服务帐户的元数据记录的地理区域。下拉列表中仅显示可用的媒体服务区域。\n\n4. 在“存储帐户”中，选择一个存储帐户以便为媒体服务帐户中的媒体内容提供 Blob 存储。你可以选择位于媒体服务帐户所在的地理区域内的现有存储帐户，也可以创建一个新的存储帐户。将在同一区域内创建一个新的存储帐户。\n\n5. 如果你创建了一个新的存储帐户，请在“新建存储帐户名称”中输入该存储帐户的名称。适用于存储帐户名的规则对媒体服务帐户同样适用。\n\n6. 单击窗体底部的“快速创建”。\n\n可以在窗口底部的消息区域中监视过程的状态。\n\n成功创建帐户后，状态将更改为“活动”。\n\n在页面底部，将出现“管理密钥”按钮。当你单击此按钮时，将会显示一个对话框，其中包含媒体服务帐户名以及主密钥和辅助密钥。你必须要有帐户名和主要密钥信息，才能以编程方式访问媒体服务帐户。\n\n![“媒体服务”页](./media/media-services-dotnet-get-started/wams-mediaservices-page.png)\n\n当你双击帐户名时，默认情况下将显示“快速启动”页。可从此页执行某些管理任务，而这些管理任务也可从该门户的其他页执行。例如，你可以从此页上载视频文件，也可以从“内容”页执行此操作。\n\n##使用门户配置流式处理终结点\n\n使用 Azure 媒体服务时最常见的方案之一是将自适应比特率流传送至你的客户端。通过自适应比特率流，客户端可以在视频显示时，根据当前网络带宽、CPU 利用率和其他因素，切换至较高或较低的比特率流。媒体服务支持以下自适应比特率流式处理技术：HTTP 实时流式处理 (HLS)、平滑流式处理、MPEG DASH 和 HDS（仅适用于 Adobe PrimeTime/Access 许可证持有人）。\n\n媒体服务所提供的动态打包可让你以媒体服务支持的流格式（MPEG DASH、HLS、Smooth Streaming、HDS）传送自适应比特率 MP4 或平滑流编码内容，而无须重新打包成这些流格式。\n\n若要使用动态打包，必须执行下列操作：\n\n- 将夹层（源）文件编码或转换成一组自适应比特率 MP4 文件或自适应比特率平滑流文件（本教程稍后将演示编码步骤）。\n- 针对你要传送内容的**流式处理终结点**，获取至少一个流式处理单位。\n\n通过动态打包，你只需要存储及支付一种存储格式的文件，媒体服务将会根据客户端的要求创建并提供适当的响应。\n\n若要更改流式处理保留单元数，请执行以下操作：\n\n1. 在[门户](https://manage.windowsazure.cn/)中单击“媒体服务”。然后，单击媒体服务的名称。\n\n2. 选择“流式处理终结点”页。然后，单击要修改的流式处理终结点。\n\n3. 若要指定流式处理单元数，请单击“缩放”选项卡，然后移动“保留容量”滑块。\n\n    ![“缩放”页](./media/media-services-dotnet-get-started/media-services-origin-scale.png)\n\n4. 按“保存”以保存更改。\n\n分配所有新的单元大约需要 20 分钟才能完成。\n\n>[AZURE.NOTE] 当前，将流式处理单位的任何正值设置回“无”可将流式处理功能禁用最多 1 小时。\n>\n> 为 24 小时期间指定的最大单位数将用于计算成本。有关定价详细信息，请参阅[媒体服务定价详细信息](/home/features/media-services/#price)。\n\n\n\n##创建和配置 Visual Studio 项目\n\n1. 在 Visual Studio 2013、Visual Studio 2012 或 Visual Studio 2010 SP1 中创建一个新的 C# 控制台应用程序。输入“名称”、“位置”和“解决方案名称”，然后单击“确定”。\n\n2. 使用 [windowsazure.mediaservices.extensions](https://www.nuget.org/packages/windowsazure.mediaservices.extensions) Nuget 包安装 **Azure 媒体服务 .NET SDK 扩展**。媒体服务 .NET SDK Extensions 是一组扩展方法和帮助器函数，可简化你的代码，并令使用媒体服务进行开发变得更加容易。安装此包也会安装**媒体服务 .NET SDK** 并添加所有其他必需的依赖项。\n\n3. 添加对 System.Configuration 程序集的引用。此程序集包含用于访问配置文件（例如，App.config）的 **System.Configuration.ConfigurationManager** 类。\n\n4. 打开 App.config 文件（如果该文件未按默认添加到项目中，请添加）并在该文件中添加 *appSettings* 节。如以下示例中所示设置 Azure 媒体服务帐户名和帐户密钥的值。若要获取帐户名和密钥信息，请打开 Azure 管理门户，选择你的媒体服务帐户，然后单击“管理密钥”按钮。\n\n        <configuration>\n        ...\n          <appSettings>\n            <add key=\"MediaServicesAccountName\" value=\"Media-Services-Account-Name\" />\n            <add key=\"MediaServicesAccountKey\" value=\"Media-Services-Account-Key\" />\n          </appSettings>\n          \n        </configuration>\n\n5. 使用以下代码覆盖位于 Program.cs 文件开头的现有 **using** 语句。\n\n        using System;\n        using System.Collections.Generic;\n        using System.Linq;\n        using System.Text;\n        using System.Threading.Tasks;\n        using System.Configuration;\n        using System.Threading;\n        using System.IO;\n        using Microsoft.WindowsAzure.MediaServices.Client;\n        \n\n6. 在 projects 目录下创建新的文件夹，然后复制你要编码和流处理或渐进式下载的 .mp4 或 .wmv 文件。在此示例中，我们使用了“C:\\\\VideoFiles”路径。\n\n##连接到媒体服务帐户\n\n使用采用 .NET 的媒体服务时，你必须将 **CloudMediaContext** 类用于大多数媒体服务编程任务：连接到媒体服务帐户；创建、更新、访问和删除以下对象：资产、资产文件、作业、访问策略、定位符等等。\n\n使用以下代码覆盖默认程序类。该代码演示如何从 App.config 文件中读取连接值，以及如何创建 **CloudMediaContext** 对象以连接到媒体服务。有关连接到媒体服务的详细信息，请参阅[使用适用于 .NET 的媒体服务 SDK 连接到媒体服务](/documentation/articles/media-services-dotnet-connect_programmatically)。\n\n**Main** 函数调用将在本部分中进一步定义的方法。\n\n    class Program\n    {\n        // Read values from the App.config file.\n        private static readonly string _mediaServicesAccountName =\n            ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n        private static readonly string _mediaServicesAccountKey =\n            ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n\n        private static readonly String _defaultScope = \"urn:WindowsAzureMediaServices\";\n\n        // Azure China uses a different API server and a different ACS Base Address from the Global.\n        private static readonly String _chinaApiServerUrl = \"https://wamsshaclus001rest-hs.chinacloudapp.cn/API/\";\n        private static readonly String _chinaAcsBaseAddressUrl = \"https://wamsprodglobal001acs.accesscontrol.chinacloudapi.cn\";\n\n        // Field for service context.\n        private static CloudMediaContext _context = null;\n        private static MediaServicesCredentials _cachedCredentials = null;\n        private static Uri _apiServer = null;\n\n        static void Main(string[] args)\n        {\n            try\n            {\n                // Create and cache the Media Services credentials in a static class variable.\n                _cachedCredentials = new MediaServicesCredentials(\n                                _mediaServicesAccountName,\n                                _mediaServicesAccountKey,\n                                _defaultScope,\n                                _chinaAcsBaseAddressUrl);\n\n                // Create the API server Uri\n                _apiServer = new Uri(_chinaApiServerUrl);\n\n                // Used the chached credentials to create CloudMediaContext.\n                _context = new CloudMediaContext(_apiServer, _cachedCredentials);\n\n                // Add calls to methods defined in this section.\n\n                IAsset inputAsset =\n                    UploadFile(@\"C:\\VideoFiles\\BigBuckBunny.mp4\", AssetCreationOptions.None);\n\n                IAsset encodedAsset =\n                    EncodeToAdaptiveBitrateMP4s(inputAsset, AssetCreationOptions.None);\n\n                PublishAssetGetURLs(encodedAsset);\n            }\n            catch (Exception exception)\n            {\n                // Parse the XML error message in the Media Services response and create a new\n                // exception with its content.\n                exception = MediaServicesExceptionParser.Parse(exception);\n\n                Console.Error.WriteLine(exception.Message);\n            }\n            finally\n            {\n                Console.ReadLine();\n            }\n        }\n\n##创建新资产并上载视频文件\n\n在媒体服务中，可以将数字文件上载（引入）到资产中。**资产**实体可以包含视频、音频、图像、缩略图集合、图文轨迹和隐藏字幕文件（以及有关这些文件的元数据。） 上载文件完成后，相关内容即安全地存储在云中供后续处理和流式处理。资产中的文件称为**资产文件**。\n\n下面定义的 **UploadFile** 方法调用 **CreateFromFile**（在 .NET SDK Extensions 中定义）。**CreateFromFile** 创建指定的源文件所要上载到的新资产。\n\n**CreateFromFile** 方法采用 **AssetCreationOptions**，它可让你指定以下其中一个资产创建选项：\n\n- **无** - 不使用加密。这是默认值。请注意，使用此选项时，你的内容在传送过程中或静态存储过程中都不会受到保护。如果计划使用渐进式下载交付 MP4，则使用此选项。\n- **StorageEncrypted** - 使用此选项可以通过高级加密标准 (AES) 256 位加密在本地加密明文内容，然后将其上载到 Azure 存储空间中以加密形式静态存储相关内容。受存储加密保护的资产将在编码前自动解密并放入经过加密的文件系统中，并可选择在重新上载为新的输出资产前重新加密。存储加密的主要用例是在磁盘上通过静态增强加密来保护高品质的输入媒体文件。\n- **CommonEncryptionProtected** - 上载经过通用加密或 PlayReady DRM 加密并受其保护的内容（例如，受 PlayReady DRM 保护的平滑流）时使用此选项。\n- **EnvelopeEncryptionProtected** - 如果要上载使用 AES 加密的 HLS，请使用此选项。请注意，Transform Manager 必须已对文件进行编码和加密。\n\n**CreateFromFile** 方法还允许你指定回调，以报告文件的上载进度。\n\n在以下示例中，指定了 **None** 作为资产选项。\n\n将以下方法添加到 Program 类。\n\n    static public IAsset UploadFile(string fileName, AssetCreationOptions options)\n    {\n        IAsset inputAsset = _context.Assets.CreateFromFile(\n            fileName,\n            options,\n            (af, p) =>\n            {\n                Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\n            });\n\n        Console.WriteLine(\"Asset {0} created.\", inputAsset.Id);\n\n        return inputAsset;\n    }\n\n\n##将源文件编码为一组自适应比特率 MP4 文件\n\n将资产引入媒体服务后，即可对媒体进行编码、传输复用、打水印等处理，然后将其传送至客户端。将根据多个后台角色实例调度把那个运行这些活动，以确保较高的性能和可用性。这些活动称为作业，每个作业由原子任务构成，这些原子任务将在资产文件上执行具体的工作。\n\n如前所述，使用 Azure 媒体服务时最常见的方案之一是将自适应比特率流传送至你的客户端。媒体服务可以将一组自适应比特率 MP4 文件动态打包为以下其中一种格式：HTTP 实时流式处理 (HLS)、平滑流式处理、MPEG DASH 和 HDS（仅适用于 Adobe PrimeTime/Access 许可证持有人）。\n\n若要使用动态打包，必须执行下列操作：\n\n- 将夹层（源）文件编码或转换成一组自适应比特率 MP4 文件或自适应比特率平滑流文件，  \n- 针对你要传送内容的“流式处理终结点”，获取至少一个流式处理单位。\n\n以下代码演示如何提交编码作业。该作业所包含的一项任务会指定要使用 **Azure 媒体编码器**将夹层文件转码成一组自适应比特率 MP4。代码会提交作业，并等待作业完成。\n\n作业完成后，你即可流式处理资产，或渐进式下载转码后所创建的 MP4 文件。请注意，你不需要拥有超过 0 个流式处理单位才能渐进式下载 MP4 文件。\n\n将以下方法添加到 Program 类。\n\n    static public IAsset EncodeToAdaptiveBitrateMP4s(IAsset asset, AssetCreationOptions options)\n    {\n    \n        // Prepare a job with a single task to transcode the specified asset\n        // into a multi-bitrate asset.\n    \n        IJob job = _context.Jobs.CreateWithSingleTask(\n            \"Media Encoder Standard\",\n            \"H264 Multiple Bitrate 720p\",\n            asset,\n            \"Adaptive Bitrate MP4\",\n            options);\n    \n        Console.WriteLine(\"Submitting transcoding job...\");\n    \n    \n        // Submit the job and wait until it is completed.\n        job.Submit();\n    \n        job = job.StartExecutionProgressTask(\n            j =>\n            {\n                Console.WriteLine(\"Job state: {0}\", j.State);\n                Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n            },\n            CancellationToken.None).Result;\n    \n        Console.WriteLine(\"Transcoding job finished.\");\n    \n        IAsset outputAsset = job.OutputMediaAssets[0];\n    \n        return outputAsset;\n    }\n\n##发布资产并获取用于流式处理和渐进式下载的 URL\n\n若要流处理或下载资产，你必须先创建定位符来“发布”资产。定位符提供对资产中所含文件的访问权限。媒体服务支持两种类型的定位符：用于流媒体（例如 MPEG DASH、HLS 或平滑流式处理）的 OnDemandOrigin 定位符，以及用于下载媒体文件的访问签名 (SAS) 定位符。\n\n创建定位符后，可以创建用来流式处理或下载文件的 URL。\n\n\n平滑流式处理的流 URL 采用以下格式：\n\n     {streaming endpoint name-media services account name}.streaming.mediaservices.chinacloudapi.cn/{locator ID}/{filename}.ism/Manifest\n\nHLS 的流 URL 采用以下格式：\n\n     {streaming endpoint name-media services account name}.streaming.mediaservices.chinacloudapi.cn/{locator ID}/{filename}.ism/Manifest(format=m3u8-aapl)\n\nMPEG DASH 的流 URL 采用以下格式：\n\n    {streaming endpoint name-media services account name}.streaming.mediaservices.chinacloudapi.cn/{locator ID}/{filename}.ism/Manifest(format=mpd-time-csf)\n\n用于下载文件的 SAS URL 采用以下格式：\n\n    {blob container name}/{asset name}/{file name}/{SAS signature}\n\n媒体服务 .NET SDK Extensions 提供了便利的帮助器方法，可针对已发布的资产返回格式化 URL。\n\n以下代码使用 .NET SDK 扩展创建定位符，获取流和渐进式下载 URL。该代码还演示了如何将文件下载到本地文件夹。\n\n将以下方法添加到 Program 类。\n\n    static public void PublishAssetGetURLs(IAsset asset)\n    {\n        // Publish the output asset by creating an Origin locator for adaptive streaming,\n        // and a SAS locator for progressive download.\n\n        _context.Locators.Create(\n            LocatorType.OnDemandOrigin,\n            asset,\n            AccessPermissions.Read,\n            TimeSpan.FromDays(30));\n\n        _context.Locators.Create(\n            LocatorType.Sas,\n            asset,\n            AccessPermissions.Read,\n            TimeSpan.FromDays(30));\n\n\n        IEnumerable<IAssetFile> mp4AssetFiles = asset\n                .AssetFiles\n                .ToList()\n                .Where(af => af.Name.EndsWith(\".mp4\", StringComparison.OrdinalIgnoreCase));\n\n        // Get the Smooth Streaming, HLS and MPEG-DASH URLs for adaptive streaming,\n        // and the Progressive Download URL.\n        Uri smoothStreamingUri = asset.GetSmoothStreamingUri();\n        Uri hlsUri = asset.GetHlsUri();\n        Uri mpegDashUri = asset.GetMpegDashUri();\n\n        // Get the URls for progressive download for each MP4 file that was generated as a result\n        // of encoding.\n        List<Uri> mp4ProgressiveDownloadUris = mp4AssetFiles.Select(af => af.GetSasUri()).ToList();\n\n\n        // Display  the streaming URLs.\n        Console.WriteLine(\"Use the following URLs for adaptive streaming: \");\n        Console.WriteLine(smoothStreamingUri);\n        Console.WriteLine(hlsUri);\n        Console.WriteLine(mpegDashUri);\n        Console.WriteLine();\n\n        // Display the URLs for progressive download.\n        Console.WriteLine(\"Use the following URLs for progressive download.\");\n        mp4ProgressiveDownloadUris.ForEach(uri => Console.WriteLine(uri + \"\\n\"));\n        Console.WriteLine();\n\n        // Download the output asset to a local folder.\n        string outputFolder = \"job-output\";\n        if (!Directory.Exists(outputFolder))\n        {\n            Directory.CreateDirectory(outputFolder);\n        }\n\n        Console.WriteLine();\n        Console.WriteLine(\"Downloading output asset files to a local folder...\");\n        asset.DownloadToFolder(\n            outputFolder,\n            (af, p) =>\n            {\n                Console.WriteLine(\"Downloading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\n            });\n\n        Console.WriteLine(\"Output asset files available at '{0}'.\", Path.GetFullPath(outputFolder));\n    }\n\n##通过播放内容进行测试  \n\n在执行上一部分中定义的程序后，控制台窗口中会显示如下所示的 URL。\n\n自适应流式处理 URL：\n\n平滑流\n\n    http://amstestaccount001.streaming.mediaservices.chinacloudapi.cn/ebf733c4-3e2e-4a68-b67b-cc5159d1d7f2/BigBuckBunny.ism/manifest\n\nHLS\n\n    http://amstestaccount001.streaming.mediaservices.chinacloudapi.cn/ebf733c4-3e2e-4a68-b67b-cc5159d1d7f2/BigBuckBunny.ism/manifest(format=m3u8-aapl)\n\nMPEG DASH\n\n    http://amstestaccount001.streaming.mediaservices.chinacloudapi.cn/ebf733c4-3e2e-4a68-b67b-cc5159d1d7f2/BigBuckBunny.ism/manifest(format=mpd-time-csf)\n\n渐进式下载 URL（音频和视频）。\n\n    https://storagetestaccount001.blob.core.chinacloudapi.cn/asset-38058602-a4b8-4b33-b9f0-6880dc1490ea/BigBuckBunny_H264_650kbps_AAC_und_ch2_96kbps.mp4?sv=2012-02-12&sr=c&si=166d5154-b801-410b-a226-ee2f8eac1929&sig=P2iNZJAvAWpp%2Bj9yV6TQjoz5DIIaj7ve8ARynmEM6Xk%3D&se=2015-02-14T01:13:05Z\n\n    https://storagetestaccount001.blob.core.chinacloudapi.cn/asset-38058602-a4b8-4b33-b9f0-6880dc1490ea/BigBuckBunny_H264_400kbps_AAC_und_ch2_96kbps.mp4?sv=2012-02-12&sr=c&si=166d5154-b801-410b-a226-ee2f8eac1929&sig=P2iNZJAvAWpp%2Bj9yV6TQjoz5DIIaj7ve8ARynmEM6Xk%3D&se=2015-02-14T01:13:05Z\n\n    https://storagetestaccount001.blob.core.chinacloudapi.cn/asset-38058602-a4b8-4b33-b9f0-6880dc1490ea/BigBuckBunny_H264_3400kbps_AAC_und_ch2_96kbps.mp4?sv=2012-02-12&sr=c&si=166d5154-b801-410b-a226-ee2f8eac1929&sig=P2iNZJAvAWpp%2Bj9yV6TQjoz5DIIaj7ve8ARynmEM6Xk%3D&se=2015-02-14T01:13:05Z\n\n    https://storagetestaccount001.blob.core.chinacloudapi.cn/asset-38058602-a4b8-4b33-b9f0-6880dc1490ea/BigBuckBunny_H264_2250kbps_AAC_und_ch2_96kbps.mp4?sv=2012-02-12&sr=c&si=166d5154-b801-410b-a226-ee2f8eac1929&sig=P2iNZJAvAWpp%2Bj9yV6TQjoz5DIIaj7ve8ARynmEM6Xk%3D&se=2015-02-14T01:13:05Z\n\n    https://storagetestaccount001.blob.core.chinacloudapi.cn/asset-38058602-a4b8-4b33-b9f0-6880dc1490ea/BigBuckBunny_H264_1500kbps_AAC_und_ch2_96kbps.mp4?sv=2012-02-12&sr=c&si=166d5154-b801-410b-a226-ee2f8eac1929&sig=P2iNZJAvAWpp%2Bj9yV6TQjoz5DIIaj7ve8ARynmEM6Xk%3D&se=2015-02-14T01:13:05Z\n\n    https://storagetestaccount001.blob.core.chinacloudapi.cn/asset-38058602-a4b8-4b33-b9f0-6880dc1490ea/BigBuckBunny_H264_1000kbps_AAC_und_ch2_96kbps.mp4?sv=2012-02-12&sr=c&si=166d5154-b801-410b-a226-ee2f8eac1929&sig=P2iNZJAvAWpp%2Bj9yV6TQjoz5DIIaj7ve8ARynmEM6Xk%3D&se=2015-02-14T01:13:05Z\n\n    https://storagetestaccount001.blob.core.chinacloudapi.cn/asset-38058602-a4b8-4b33-b9f0-6880dc1490ea/BigBuckBunny_AAC_und_ch2_96kbps.mp4?sv=2012-02-12&sr=c&si=166d5154-b801-410b-a226-ee2f8eac1929&sig=P2iNZJAvAWpp%2Bj9yV6TQjoz5DIIaj7ve8ARynmEM6Xk%3D&se=2015-02-14T01:13:05Z\n\n    https://storagetestaccount001.blob.core.chinacloudapi.cn/asset-38058602-a4b8-4b33-b9f0-6880dc1490ea/BigBuckBunny_AAC_und_ch2_56kbps.mp4?sv=2012-02-12&sr=c&si=166d5154-b801-410b-a226-ee2f8eac1929&sig=P2iNZJAvAWpp%2Bj9yV6TQjoz5DIIaj7ve8ARynmEM6Xk%3D&se=2015-02-14T01:13:05Z\n\n\n若要流式处理视频，请使用 [Azure 媒体服务播放器](http://amsplayer.azurewebsites.net/azuremediaplayer.html)。\n\n若要测试渐进式下载，请将 URL 粘贴到浏览器（例如 Internet Explorer、Chrome 或 Safari）中。\n\n\n[AZURE.INCLUDE [media-services-user-voice-include](../includes/media-services-user-voice-include.md)]\n\n\n### 想要寻找其他内容吗？\n\n如果本主题不包含你所期待的内容、缺少某些内容，或在其他方面不符合你的需求，请使用下面的 Disqus 会话向我们提供反馈。\n\n\n<!-- Anchors. -->\n\n\n<!-- URLs. -->\n  [Web Platform Installer]: http://go.microsoft.com/fwlink/?linkid=255386\n  [Portal]: http://manage.windowsazure.cn/\n\n<!---HONumber=Mooncake_0307_2016-->"
}