{
  "nodes": [
    {
      "content": "注册管理",
      "pos": [
        27,
        31
      ]
    },
    {
      "content": "本主题说明如何向通知中心注册设备以接收推送通知。",
      "pos": [
        50,
        74
      ]
    },
    {
      "content": "注册管理",
      "pos": [
        300,
        304
      ]
    },
    {
      "content": "概述",
      "pos": [
        308,
        310
      ]
    },
    {
      "content": "本主题说明如何向通知中心注册设备以接收推送通知。本主题将概要介绍注册，然后介绍注册设备的两种主要模式：直接从设备向通知中心注册，以及通过应用程序后端注册。",
      "pos": [
        312,
        389
      ]
    },
    {
      "content": "什么是设备注册",
      "pos": [
        394,
        401
      ]
    },
    {
      "content": "向通知中心注册设备是通过使用“注册”或“安装”来完成的。",
      "pos": [
        403,
        431
      ]
    },
    {
      "content": "注册",
      "pos": [
        438,
        440
      ]
    },
    {
      "pos": [
        441,
        714
      ],
      "content": "注册是通知中心的子实体，它将设备的平台通知服务 (PNS) 句柄与标记（有时还包括模板）相关联。PNS 句柄可能是 ChannelURI、设备令牌或 GCM 注册 ID。标记用于将通知路由到一组正确的设备句柄。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>路由和标记表达式<ept id=\"p1\">](/documentation/articles/notification-hubs-routing-tag-expressions)</ept>。模板用于实现按注册转换。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>模板<ept id=\"p2\">](/documentation/articles/notification-hubs-templates)</ept>。"
    },
    {
      "content": "安装",
      "pos": [
        721,
        723
      ]
    },
    {
      "content": "安装是增强型的注册，包含推送相关的属性包。不过，它是最新且最佳的设备注册方式。",
      "pos": [
        724,
        763
      ]
    },
    {
      "content": "以下是使用安装的一些主要优点：",
      "pos": [
        765,
        780
      ]
    },
    {
      "content": "创建或更新安装是完全幂等的。因此可以重试该操作，而不需要顾虑重复注册的情况。",
      "pos": [
        784,
        822
      ]
    },
    {
      "pos": [
        825,
        956
      ],
      "content": "安装模型可让你轻松地执行每次推送（以特定设备为目标）。每次执行基于安装的注册时，都会自动添加一个系统标记 <bpt id=\"p1\">**</bpt>\"$InstallationId:[installationId]\"<ept id=\"p1\">**</ept>。因此，你无需编写任何额外的代码，就能对此标记调用 send 以针对特定的设备。"
    },
    {
      "pos": [
        959,
        1105
      ],
      "content": "使用安装还能执行部分注册更新。可以使用 <bpt id=\"p1\">[</bpt>JSON-Patch standard<ept id=\"p1\">](https://tools.ietf.org/html/rfc6902)</ept> 以 PATCH 方法来请求部分安装更新。当你想要更新注册中的标记时，此方法特别有用。你不需要删除整个注册，然后重新发送前面的所有标记。"
    },
    {
      "pos": [
        1107,
        1412
      ],
      "content": "目前只有<bpt id=\"p1\">[</bpt>适用于后端操作的通知中心 SDK<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)</ept> 支持安装。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>安装类<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.azure.notificationhubs.installation.aspx)</ept>。若要在没有后端的情况下使用安装 ID 从客户端设备进行注册，目前需要使用<bpt id=\"p3\">[</bpt>通知中心 REST API<ept id=\"p3\">](https://msdn.microsoft.com/library/mt621153.aspx)</ept>。"
    },
    {
      "pos": [
        1414,
        1625
      ],
      "content": "安装可以包含以下属性。有关完整的安装属性列表，请参阅<bpt id=\"p1\">[</bpt>使用 REST 创建或覆盖安装<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/mt621153.aspx)</ept>或<bpt id=\"p2\">[</bpt>安装属性<ept id=\"p2\">](https://msdn.microsoft.com/library/azure/microsoft.azure.notificationhubs.installation_properties.aspx)</ept>。"
    },
    {
      "content": "请务必注意，注册与安装以及它们所包含的 PNS 句柄会过期。可以在通知中心上设置最长 90 天的生存期。此项限制意味着必须定期刷新这些注册与安装，此外，也意味着不应将其用作重要信息的唯一存储区。此自动过期机制也简化了卸载移动应用程序时的清理操作。",
      "pos": [
        2542,
        2665
      ]
    },
    {
      "content": "注册与安装必须包含每个设备/通道的最新 PNS 句柄。由于只能在设备上的客户端应用中获取 PNS 句柄，因此有一种模式是直接在该设备上使用客户端应用进行注册。另一方面，与标记相关的安全性考虑和业务逻辑可能要求你在应用后端管理设备注册。",
      "pos": [
        2667,
        2784
      ]
    },
    {
      "content": "模板",
      "pos": [
        2791,
        2793
      ]
    },
    {
      "pos": [
        2795,
        2922
      ],
      "content": "如果你使用<bpt id=\"p1\">[</bpt>模板<ept id=\"p1\">](/documentation/articles/notification-hubs-templates)</ept>，则设备安装还会保存与设备关联的、采用 JSON 格式的所有模板（请参阅上面的示例）。模板名称有助于将目标指向相同设备的不同模板。"
    },
    {
      "pos": [
        2924,
        3153
      ],
      "content": "请注意，每个模板名称将映射到一个模板主体和一组可选的标记。此外，每个平台可能有附加的模板属性。对于 Windows 应用商店（使用 WNS）和 Windows Phone 8（使用 MPNS），模板中还可能会有一组附加标头。对于 APNs，可以将过期属性设为常量或模板表达式。有关完整的安装属性列表，请参阅<bpt id=\"p1\">[</bpt>使用 REST 创建或覆盖安装<ept id=\"p1\">](https://msdn.microsoft.com/library/azure/mt621153.aspx)</ept>主题。"
    },
    {
      "content": "Windows 应用商店应用的辅助磁贴",
      "pos": [
        3160,
        3179
      ]
    },
    {
      "content": "对于 Windows 应用商店客户端应用程序，将通知发送到辅助磁贴与将通知发送到主磁贴相同。安装中也支持此行为。请注意，辅助磁贴具有不同的 ChannelUri，客户端应用上的 SDK 会在后台处理此 ChannelUri。",
      "pos": [
        3181,
        3293
      ]
    },
    {
      "content": "SecondaryTiles 字典使用的 TileId 与在 Windows 应用商店应用中创建 SecondaryTiles 时使用的 TileId 相同。与主 ChannelUri 一样，辅助磁贴的 ChannelUri 可随时更改。为了使通知中心中的安装保持更新，设备必须使用辅助磁贴的当前 ChannelUri 刷新这些安装。",
      "pos": [
        3295,
        3462
      ]
    },
    {
      "content": "从设备管理注册",
      "pos": [
        3467,
        3474
      ]
    },
    {
      "content": "从客户端应用管理设备注册时，后端只负责发送通知。客户端应用使 PNS 句柄保持最新状态，并且会注册标记。下图演示了此模式。",
      "pos": [
        3476,
        3537
      ]
    },
    {
      "content": "设备首先从 PNS 检索 PNS 句柄，然后直接向通知中心进行注册。注册成功之后，应用后端即可发送以该注册为目标的通知。有关如何发送通知的详细信息，请参阅<bpt id=\"p1\">[</bpt>路由和标记表达式<ept id=\"p1\">](/documentation/articles/notification-hubs-routing-tag-expressions.md)</ept>。",
      "pos": [
        3639,
        3797
      ]
    },
    {
      "content": "请注意，在此情况下，将只使用“侦听”权限从设备访问通知中心。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>安全性<ept id=\"p1\">](/documentation/articles/notification-hubs-security)</ept>。",
      "pos": [
        3798,
        3896
      ]
    },
    {
      "content": "从设备注册是最简单的方法，但存在一些缺点。第一个缺点是客户端应用只能在它处于活动状态时更新其标记。例如，如果用户有两台设备要注册与体育团队相关的标记，则当第一台设备注册附加标记（例如，Seahawks）时，第二台设备将不会收到有关 Seahawks 的通知，直到第二次在第二台设备上执行应用程序为止。更概括地说，如果标记受多个设备的影响，则从后端管理标记是理想的选择。从客户端应用管理注册的第二个缺点是，由于应用可能会受到攻击，因此保护特定标记的注册需要格外小心，如“标记级安全性”部分中所述。",
      "pos": [
        3898,
        4145
      ]
    },
    {
      "content": "使用安装从设备向通知中心注册的示例代码",
      "pos": [
        4154,
        4173
      ]
    },
    {
      "pos": [
        4176,
        4256
      ],
      "content": "此时，仅支持使用<bpt id=\"p1\">[</bpt>通知中心 REST API<ept id=\"p1\">](https://msdn.microsoft.com/library/mt621153.aspx)</ept> 执行此操作。"
    },
    {
      "pos": [
        4258,
        4339
      ],
      "content": "你也可以使用 <bpt id=\"p1\">[</bpt>JSON-Patch standard<ept id=\"p1\">](https://tools.ietf.org/html/rfc6902)</ept> 以 PATCH 方法更新安装。"
    },
    {
      "content": "使用注册从设备向通知中心注册的示例代码",
      "pos": [
        7348,
        7367
      ]
    },
    {
      "content": "这些方法为调用它们的设备创建或更新注册。这意味着，若要更新句柄或标记，必须覆盖整个注册。请记住，注册是暂时性的，因此，你始终应使用具有特定设备所需的当前标记的可靠存储。",
      "pos": [
        7370,
        7454
      ]
    },
    {
      "content": "从后端管理注册",
      "pos": [
        9469,
        9476
      ]
    },
    {
      "content": "从后端管理注册需要编写附加代码。每次设备中的应用启动时，该应用都必须为后端提供已更新的 PNS 句柄（以及标记和模板），然后后端必须在通知中心上更新此句柄。下图演示了此设计。",
      "pos": [
        9478,
        9565
      ]
    },
    {
      "content": "从后端管理注册的优点是即使在设备上的相应应用处于非活动状态也能修改注册标记，并且在向其注册添加标记之前能够对客户端应用进行身份验证。",
      "pos": [
        9668,
        9734
      ]
    },
    {
      "content": "使用安装从后端向通知中心注册的示例代码",
      "pos": [
        9742,
        9761
      ]
    },
    {
      "pos": [
        9763,
        9914
      ],
      "content": "客户端设备仍会像前面一样获取其 PNS 句柄及相关的安装属性，然后在可以执行注册和授权标记等的后端上调用自定义 API。后端可以利用<bpt id=\"p1\">[</bpt>适用于后端操作的通知中心 SDK<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)</ept>。"
    },
    {
      "pos": [
        9916,
        9997
      ],
      "content": "你也可以使用 <bpt id=\"p1\">[</bpt>JSON-Patch standard<ept id=\"p1\">](https://tools.ietf.org/html/rfc6902)</ept> 以 PATCH 方法更新安装。"
    },
    {
      "content": "使用注册 ID 从设备向通知中心注册的示例代码",
      "pos": [
        11453,
        11476
      ]
    },
    {
      "content": "从应用后端可以对注册执行基本 CRUDS 操作。例如：",
      "pos": [
        11478,
        11505
      ]
    },
    {
      "content": "后端必须处理注册更新之间的并发性。服务总线为注册管理提供了乐观并发控制。在 HTTP 级别，这是通过对注册管理操作使用 ETag 来实现的。Microsoft SDK 以透明方式使用此功能，如果由于并发原因拒绝了更新，则会引发异常。应用后端负责处理这些异常并在需要时重试更新。",
      "pos": [
        12080,
        12218
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"注册管理\"\n    description=\"本主题说明如何向通知中心注册设备以接收推送通知。\"\n    services=\"notification-hubs\"\n    documentationCenter=\".net\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"11/25/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 注册管理\n\n##概述\n\n本主题说明如何向通知中心注册设备以接收推送通知。本主题将概要介绍注册，然后介绍注册设备的两种主要模式：直接从设备向通知中心注册，以及通过应用程序后端注册。\n\n\n##什么是设备注册\n\n向通知中心注册设备是通过使用“注册”或“安装”来完成的。\n\n#### 注册\n注册是通知中心的子实体，它将设备的平台通知服务 (PNS) 句柄与标记（有时还包括模板）相关联。PNS 句柄可能是 ChannelURI、设备令牌或 GCM 注册 ID。标记用于将通知路由到一组正确的设备句柄。有关详细信息，请参阅[路由和标记表达式](/documentation/articles/notification-hubs-routing-tag-expressions)。模板用于实现按注册转换。有关详细信息，请参阅[模板](/documentation/articles/notification-hubs-templates)。\n\n#### 安装\n安装是增强型的注册，包含推送相关的属性包。不过，它是最新且最佳的设备注册方式。\n\n以下是使用安装的一些主要优点：\n\n* 创建或更新安装是完全幂等的。因此可以重试该操作，而不需要顾虑重复注册的情况。\n* 安装模型可让你轻松地执行每次推送（以特定设备为目标）。每次执行基于安装的注册时，都会自动添加一个系统标记 **\"$InstallationId:[installationId]\"**。因此，你无需编写任何额外的代码，就能对此标记调用 send 以针对特定的设备。\n* 使用安装还能执行部分注册更新。可以使用 [JSON-Patch standard](https://tools.ietf.org/html/rfc6902) 以 PATCH 方法来请求部分安装更新。当你想要更新注册中的标记时，此方法特别有用。你不需要删除整个注册，然后重新发送前面的所有标记。\n\n目前只有[适用于后端操作的通知中心 SDK](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/) 支持安装。有关详细信息，请参阅[安装类](https://msdn.microsoft.com/library/azure/microsoft.azure.notificationhubs.installation.aspx)。若要在没有后端的情况下使用安装 ID 从客户端设备进行注册，目前需要使用[通知中心 REST API](https://msdn.microsoft.com/library/mt621153.aspx)。\n\n安装可以包含以下属性。有关完整的安装属性列表，请参阅[使用 REST 创建或覆盖安装](https://msdn.microsoft.com/library/azure/mt621153.aspx)或[安装属性](https://msdn.microsoft.com/library/azure/microsoft.azure.notificationhubs.installation_properties.aspx)。\n\n    // Example installation format to show some supported properties\n    {\n        installationId: \"\",\n        expirationTime: \"\",\n        tags: [],\n        platform: \"\",\n        pushChannel: \"\",\n        ………\n        templates: {\n            \"templateName1\" : {\n                body: \"\",\n                tags: [] },\n            \"templateName2\" : {\n                body: \"\",\n                // Headers are for Windows Store only\n                headers: {\n                    \"X-WNS-Type\": \"wns/tile\" }\n                tags: [] }\n        },\n        secondaryTiles: {\n            \"tileId1\": {\n                pushChannel: \"\",\n                tags: [],\n                templates: {\n                    \"otherTemplate\": {\n                        bodyTemplate: \"\",\n                        headers: {\n                            ... }\n                        tags: [] }\n                }\n            }\n        }\n    }\n\n \n\n请务必注意，注册与安装以及它们所包含的 PNS 句柄会过期。可以在通知中心上设置最长 90 天的生存期。此项限制意味着必须定期刷新这些注册与安装，此外，也意味着不应将其用作重要信息的唯一存储区。此自动过期机制也简化了卸载移动应用程序时的清理操作。\n\n注册与安装必须包含每个设备/通道的最新 PNS 句柄。由于只能在设备上的客户端应用中获取 PNS 句柄，因此有一种模式是直接在该设备上使用客户端应用进行注册。另一方面，与标记相关的安全性考虑和业务逻辑可能要求你在应用后端管理设备注册。\n\n#### 模板\n\n如果你使用[模板](/documentation/articles/notification-hubs-templates)，则设备安装还会保存与设备关联的、采用 JSON 格式的所有模板（请参阅上面的示例）。模板名称有助于将目标指向相同设备的不同模板。\n\n请注意，每个模板名称将映射到一个模板主体和一组可选的标记。此外，每个平台可能有附加的模板属性。对于 Windows 应用商店（使用 WNS）和 Windows Phone 8（使用 MPNS），模板中还可能会有一组附加标头。对于 APNs，可以将过期属性设为常量或模板表达式。有关完整的安装属性列表，请参阅[使用 REST 创建或覆盖安装](https://msdn.microsoft.com/library/azure/mt621153.aspx)主题。\n\n#### Windows 应用商店应用的辅助磁贴\n\n对于 Windows 应用商店客户端应用程序，将通知发送到辅助磁贴与将通知发送到主磁贴相同。安装中也支持此行为。请注意，辅助磁贴具有不同的 ChannelUri，客户端应用上的 SDK 会在后台处理此 ChannelUri。\n\nSecondaryTiles 字典使用的 TileId 与在 Windows 应用商店应用中创建 SecondaryTiles 时使用的 TileId 相同。与主 ChannelUri 一样，辅助磁贴的 ChannelUri 可随时更改。为了使通知中心中的安装保持更新，设备必须使用辅助磁贴的当前 ChannelUri 刷新这些安装。\n\n\n##从设备管理注册\n\n从客户端应用管理设备注册时，后端只负责发送通知。客户端应用使 PNS 句柄保持最新状态，并且会注册标记。下图演示了此模式。\n\n![](./media/notification-hubs-registration-management/notification-hubs-registering-on-device.png)\n\n设备首先从 PNS 检索 PNS 句柄，然后直接向通知中心进行注册。注册成功之后，应用后端即可发送以该注册为目标的通知。有关如何发送通知的详细信息，请参阅[路由和标记表达式](/documentation/articles/notification-hubs-routing-tag-expressions.md)。\n请注意，在此情况下，将只使用“侦听”权限从设备访问通知中心。有关详细信息，请参阅[安全性](/documentation/articles/notification-hubs-security)。\n\n从设备注册是最简单的方法，但存在一些缺点。第一个缺点是客户端应用只能在它处于活动状态时更新其标记。例如，如果用户有两台设备要注册与体育团队相关的标记，则当第一台设备注册附加标记（例如，Seahawks）时，第二台设备将不会收到有关 Seahawks 的通知，直到第二次在第二台设备上执行应用程序为止。更概括地说，如果标记受多个设备的影响，则从后端管理标记是理想的选择。从客户端应用管理注册的第二个缺点是，由于应用可能会受到攻击，因此保护特定标记的注册需要格外小心，如“标记级安全性”部分中所述。\n\n\n\n#### 使用安装从设备向通知中心注册的示例代码 \n\n此时，仅支持使用[通知中心 REST API](https://msdn.microsoft.com/library/mt621153.aspx) 执行此操作。\n\n你也可以使用 [JSON-Patch standard](https://tools.ietf.org/html/rfc6902) 以 PATCH 方法更新安装。\n\n    class DeviceInstallation\n    {\n        public string installationId { get; set; }\n        public string platform { get; set; }\n        public string pushChannel { get; set; }\n        public string[] tags { get; set; }\n    }\n\n    private async Task<HttpStatusCode> CreateOrUpdateInstallationAsync(DeviceInstallation deviceInstallation,\n         string hubName, string listenConnectionString)\n    {\n        if (deviceInstallation.installationId == null)\n            return HttpStatusCode.BadRequest;\n\n        // Parse connection string (https://msdn.microsoft.com/library/azure/dn495627.aspx)\n        ConnectionStringUtility connectionSaSUtil = new ConnectionStringUtility(listenConnectionString);\n        string hubResource = \"installations/\" + deviceInstallation.installationId + \"?\";\n        string apiVersion = \"api-version=2015-04\";\n\n        // Determine the targetUri that we will sign\n        string uri = connectionSaSUtil.Endpoint + hubName + \"/\" + hubResource + apiVersion;\n\n        //=== Generate SaS Security Token for Authorization header ===\n        // See, https://msdn.microsoft.com/library/azure/dn495627.aspx\n        string SasToken = connectionSaSUtil.getSaSToken(uri, 60);\n\n        using (var httpClient = new HttpClient())\n        {\n            string json = JsonConvert.SerializeObject(deviceInstallation);\n\n            httpClient.DefaultRequestHeaders.Add(\"Authorization\", SasToken);\n\n            var response = await httpClient.PutAsync(uri, new StringContent(json, System.Text.Encoding.UTF8, \"application/json\"));\n            return response.StatusCode;\n        }\n    }\n\n    var channel = await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();\n\n    string installationId = null;\n    var settings = ApplicationData.Current.LocalSettings.Values;\n\n    // If we have not stored a installation id in application data, create and store as application data.\n    if (!settings.ContainsKey(\"__NHInstallationId\"))\n    {\n        installationId = Guid.NewGuid().ToString();\n        settings.Add(\"__NHInstallationId\", installationId);\n    }\n\n    installationId = (string)settings[\"__NHInstallationId\"];\n\n    var deviceInstallation = new DeviceInstallation\n    {\n        installationId = installationId,\n        platform = \"wns\",\n        pushChannel = channel.Uri,\n        //tags = tags.ToArray<string>()\n    };\n\n    var statusCode = await CreateOrUpdateInstallationAsync(deviceInstallation, \n                        \"<HUBNAME>\", \"<SHARED LISTEN CONNECTION STRING>\");\n\n    if (statusCode != HttpStatusCode.Accepted)\n    {\n        var dialog = new MessageDialog(statusCode.ToString(), \"Registration failed. Installation Id : \" + installationId);\n        dialog.Commands.Add(new UICommand(\"OK\"));\n        await dialog.ShowAsync();\n    }\n    else\n    {\n        var dialog = new MessageDialog(\"Registration successful using installation Id : \" + installationId);\n        dialog.Commands.Add(new UICommand(\"OK\"));\n        await dialog.ShowAsync();\n    }\n\n   \n\n#### 使用注册从设备向通知中心注册的示例代码\n\n\n这些方法为调用它们的设备创建或更新注册。这意味着，若要更新句柄或标记，必须覆盖整个注册。请记住，注册是暂时性的，因此，你始终应使用具有特定设备所需的当前标记的可靠存储。\n\n\n    // Initialize the Notification Hub\n    NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(listenConnString, hubName);\n\n    // The Device id from the PNS\n    var pushChannel = await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();\n\n    // If you are registering from the client itself, then store this registration id in device\n    // storage. Then when the app starts, you can check if a registration id already exists or not before\n    // creating.\n    var settings = ApplicationData.Current.LocalSettings.Values;\n\n    // If we have not stored a registration id in application data, store in application data.\n    if (!settings.ContainsKey(\"__NHRegistrationId\"))\n    {\n        // make sure there are no existing registrations for this push handle (used for iOS and Android)    \n        string newRegistrationId = null;\n        var registrations = await hub.GetRegistrationsByChannelAsync(pushChannel.Uri, 100);\n        foreach (RegistrationDescription registration in registrations)\n        {\n            if (newRegistrationId == null)\n            {\n                newRegistrationId = registration.RegistrationId;\n            }\n            else\n            {\n                await hub.DeleteRegistrationAsync(registration);\n            }\n        }\n\n        newRegistrationId = await hub.CreateRegistrationIdAsync();\n\n        settings.Add(\"__NHRegistrationId\", newRegistrationId);\n    }\n     \n    string regId = (string)settings[\"__NHRegistrationId\"];\n\n    RegistrationDescription registration = new WindowsRegistrationDescription(pushChannel.Uri);\n    registration.RegistrationId = regId;\n    registration.Tags = new HashSet<string>(YourTags);\n\n    try\n    {\n        await hub.CreateOrUpdateRegistrationAsync(registration);\n    }\n    catch (Microsoft.WindowsAzure.Messaging.RegistrationGoneException e)\n    {\n        // regId likely expired, delete from local storage and try again\n        settings.Remove(\"__NHRegistrationId\");\n    }\n\n\n## 从后端管理注册\n\n从后端管理注册需要编写附加代码。每次设备中的应用启动时，该应用都必须为后端提供已更新的 PNS 句柄（以及标记和模板），然后后端必须在通知中心上更新此句柄。下图演示了此设计。\n\n![](./media/notification-hubs-registration-management/notification-hubs-registering-on-backend.png)\n\n从后端管理注册的优点是即使在设备上的相应应用处于非活动状态也能修改注册标记，并且在向其注册添加标记之前能够对客户端应用进行身份验证。\n\n\n#### 使用安装从后端向通知中心注册的示例代码\n\n客户端设备仍会像前面一样获取其 PNS 句柄及相关的安装属性，然后在可以执行注册和授权标记等的后端上调用自定义 API。后端可以利用[适用于后端操作的通知中心 SDK](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)。\n\n你也可以使用 [JSON-Patch standard](https://tools.ietf.org/html/rfc6902) 以 PATCH 方法更新安装。\n \n\n    // Initialize the Notification Hub\n    NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(listenConnString, hubName);\n\n    // Custom API on the backend\n    public async Task<HttpResponseMessage> Put(DeviceInstallation deviceUpdate)\n    {\n\n        Installation installation = new Installation();\n        installation.InstallationId = deviceUpdate.InstallationId;\n        installation.PushChannel = deviceUpdate.Handle;\n        installation.Tags = deviceUpdate.Tags;\n\n        switch (deviceUpdate.Platform)\n        {\n            case \"mpns\":\n                installation.Platform = NotificationPlatform.Mpns;\n                break;\n            case \"wns\":\n                installation.Platform = NotificationPlatform.Wns;\n                break;\n            case \"apns\":\n                installation.Platform = NotificationPlatform.Apns;\n                break;\n            case \"gcm\":\n                installation.Platform = NotificationPlatform.Gcm;\n                break;\n            default:\n                throw new HttpResponseException(HttpStatusCode.BadRequest);\n        }\n\n\n        // In the backend we can control if a user is allowed to add tags\n        //installation.Tags = new List<string>(deviceUpdate.Tags);\n        //installation.Tags.Add(\"username:\" + username);\n\n        await hub.CreateOrUpdateInstallationAsync(installation);\n\n        return Request.CreateResponse(HttpStatusCode.OK);\n    }\n\n\n#### 使用注册 ID 从设备向通知中心注册的示例代码\n\n从应用后端可以对注册执行基本 CRUDS 操作。例如：\n\n    var hub = NotificationHubClient.CreateClientFromConnectionString(\"{connectionString}\", \"hubName\");\n            \n    // create a registration description object of the correct type, e.g.\n    var reg = new WindowsRegistrationDescription(channelUri, tags);\n\n    // Create\n    await hub.CreateRegistrationAsync(reg);\n\n    // Get by id\n    var r = await hub.GetRegistrationAsync<RegistrationDescription>(\"id\");\n\n    // update\n    r.Tags.Add(\"myTag\");\n\n    // update on hub\n    await hub.UpdateRegistrationAsync(r);\n\n    // delete\n    await hub.DeleteRegistrationAsync(r);\n\n\n后端必须处理注册更新之间的并发性。服务总线为注册管理提供了乐观并发控制。在 HTTP 级别，这是通过对注册管理操作使用 ETag 来实现的。Microsoft SDK 以透明方式使用此功能，如果由于并发原因拒绝了更新，则会引发异常。应用后端负责处理这些异常并在需要时重试更新。\n\n<!---HONumber=Mooncake_0104_2016-->"
}