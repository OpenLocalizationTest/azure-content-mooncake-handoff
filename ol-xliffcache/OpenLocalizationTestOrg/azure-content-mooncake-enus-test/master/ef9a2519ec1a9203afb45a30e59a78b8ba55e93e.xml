{
  "nodes": [
    {
      "content": "向移动服务应用 (Xamarin.Forms) 添加推送通知 - 移动服务",
      "pos": [
        28,
        65
      ]
    },
    {
      "content": "了解如何借助 Azure 移动服务在 Xamarin.Forms 应用中使用推送通知。",
      "pos": [
        84,
        127
      ]
    },
    {
      "content": "向 Xamarin.Forms 应用添加推送通知",
      "pos": [
        352,
        376
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        478,
        484
      ]
    },
    {
      "content": "概述",
      "pos": [
        606,
        608
      ]
    },
    {
      "content": "本教程演示如何使用 Azure 移动服务将推送通知发送到 Xamarin.Forms 解决方案的 iOS、Android 和 Windows Phone 应用。首先，创建移动服务。然后，将下载初学者示例、注册到相应的推送通知服务，并将代码添加到解决方案以从这些新服务接收通知。",
      "pos": [
        610,
        748
      ]
    },
    {
      "pos": [
        750,
        839
      ],
      "content": "你完成本教程后，每当用户向其中一个应用添加任务时，你的移动服务都会发送推送通知。你可以在此处找到已完成的示例：<bpt id=\"p1\">[</bpt><ept id=\"p1\">已完成的 Xamarin.Forms Azure 推送通知示例]</ept>。"
    },
    {
      "content": "本教程需要的内容如下：",
      "pos": [
        841,
        852
      ]
    },
    {
      "content": "IOS 8 设备（无法在 iOS 模拟器中测试推送通知）",
      "pos": [
        856,
        884
      ]
    },
    {
      "content": "iOS 开发人员计划成员身份",
      "pos": [
        887,
        901
      ]
    },
    {
      "content": "Xamarin.iOS Studio",
      "pos": [
        905,
        923
      ]
    },
    {
      "content": "Azure 移动服务组件",
      "pos": [
        928,
        940
      ]
    },
    {
      "content": "有效的 Google 帐户",
      "pos": [
        944,
        957
      ]
    },
    {
      "pos": [
        960,
        1011
      ],
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">Google Cloud Messaging 客户端组件]</ept>。在学习本教程的过程中，你将要添加此组件。"
    },
    {
      "content": "本主题内容：",
      "pos": [
        1013,
        1019
      ]
    },
    {
      "content": "创建新的移动服务",
      "pos": [
        1025,
        1033
      ]
    },
    {
      "content": "下载并配置初学者示例",
      "pos": [
        1056,
        1066
      ]
    },
    {
      "content": "向 Xamarin.Forms.iOS 应用添加推送通知",
      "pos": [
        1098,
        1126
      ]
    },
    {
      "content": "向 Xamarin.Forms.Android 应用添加推送通知",
      "pos": [
        1138,
        1170
      ]
    },
    {
      "content": "向 Xamarin.Forms.Windows 应用添加推送通知",
      "pos": [
        1186,
        1218
      ]
    },
    {
      "content": "更新 Azure 表插入脚本将推送通知发送到所有应用",
      "pos": [
        1234,
        1260
      ]
    },
    {
      "pos": [
        1277,
        1314
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-service\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>创建新的移动服务"
    },
    {
      "content": "为了能够在新移动服务中存储应用程序数据，必须先创建一个新表。",
      "pos": [
        1431,
        1461
      ]
    },
    {
      "pos": [
        1466,
        1507
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Azure 经典门户<ept id=\"p1\">**</ept>中单击“移动服务”，然后单击你刚刚创建的移动服务。"
    },
    {
      "content": "单击“数据”选项卡，然后单击“+创建”。",
      "pos": [
        1512,
        1532
      ]
    },
    {
      "content": "此时将显示“创建新表”对话框。",
      "pos": [
        1552,
        1567
      ]
    },
    {
      "pos": [
        1572,
        1601
      ],
      "content": "在“表名”中键入 <bpt id=\"p1\">_</bpt>TodoItem<ept id=\"p1\">_</ept>，然后单击勾选按钮。"
    },
    {
      "pos": [
        1621,
        1680
      ],
      "content": "这将创建一个新的设置了默认权限的存储表 <bpt id=\"p1\">**</bpt>TodoItem<ept id=\"p1\">**</ept>，这意味着任何应用程序用户均可访问和更改该表中的数据。"
    },
    {
      "pos": [
        1688,
        1771
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>移动服务快速入门中使用了相同的表名。但是，每个表是在特定于给定移动服务的架构中创建的。这是为了防止当多个移动服务使用同一数据库时发生数据冲突。"
    },
    {
      "pos": [
        1776,
        1811
      ],
      "content": "单击新的 <bpt id=\"p1\">**</bpt>TodoItem<ept id=\"p1\">**</ept> 表，然后验证是否不存在任何数据行。"
    },
    {
      "content": "单击“列”选项卡，并验证是否只有一个“ID”列，该列是自动为你创建的。",
      "pos": [
        1816,
        1851
      ]
    },
    {
      "content": "这是对移动服务中的表的最低要求。",
      "pos": [
        1857,
        1873
      ]
    },
    {
      "pos": [
        1881,
        1944
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果在移动服务中启用了动态架构，则通过插入或更新操作向移动服务发送 JSON 对象时，将自动创建新列。"
    },
    {
      "content": "现在，您可以将新移动服务用作应用的数据存储。",
      "pos": [
        1946,
        1968
      ]
    },
    {
      "pos": [
        1973,
        2021
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"download-starter-sample\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>下载并配置初学者示例"
    },
    {
      "content": "我们将向现有示例添加推送通知。",
      "pos": [
        2022,
        2037
      ]
    },
    {
      "pos": [
        2044,
        2083
      ],
      "content": "下载以下示例：<bpt id=\"p1\">[</bpt><ept id=\"p1\">Xamarin.Forms Azure 推送通知初学者示例]</ept>。"
    },
    {
      "pos": [
        2088,
        2190
      ],
      "content": "在 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 经典门户]</ept>中单击“移动服务”，然后单击该移动服务。单击“仪表板”选项卡，并记下“站点 URL”。然后单击“管理密钥”，并记下“应用程序密钥”。从应用代码访问移动服务时，你需要使用这些值。"
    },
    {
      "pos": [
        2195,
        2318
      ],
      "content": "在解决方案的 <bpt id=\"p1\">**</bpt>ToDoAzure(Portable)<ept id=\"p1\">**</ept> 项目中，打开 <bpt id=\"p2\">**</bpt>Constants.cs<ept id=\"p2\">**</ept> 文件，将 <ph id=\"ph1\">`ApplicationURL`</ph> 和 <ph id=\"ph2\">`ApplicationKey`</ph> 替换为你在上一步中获得的站点 URL 和应用程序密钥。"
    },
    {
      "pos": [
        2323,
        2369
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"iOS\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>向 Xamarin.Forms.iOS 应用添加推送通知"
    },
    {
      "pos": [
        2371,
        2461
      ],
      "content": "你将使用 Apple 推送通知服务 (APNS) 向 iOS 应用添加推送通知。你将需要有效的 Google 帐户和 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Google Cloud Messaging 客户端组件]</ept>。"
    },
    {
      "pos": [
        2464,
        2555
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>由于 Apple 推送通知服务 (APNS) 要求，你必须在支持 iOS 的设备（iPhone 或 iPad），而不是在模拟器上部署和测试推送通知。"
    },
    {
      "pos": [
        2557,
        2641
      ],
      "content": "APNS 使用证书对你的移动服务进行身份验证。按照以下说明创建必要的证书并将其上载到你的移动服务。有关正式的 APNS 功能文档，请参阅 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Apple 推送通知服务]</ept>。"
    },
    {
      "pos": [
        2647,
        2684
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"certificates\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>生成证书签名请求文件"
    },
    {
      "content": "首先，你必须生成证书签名请求 (CSR) 文件，Apple 将使用该文件生成签名证书。",
      "pos": [
        2686,
        2729
      ]
    },
    {
      "pos": [
        2734,
        2780
      ],
      "content": "从“Utilities”（实用工具）中，运行 <bpt id=\"p1\">**</bpt>Keychain Access<ept id=\"p1\">**</ept> 工具。"
    },
    {
      "content": "单击“Keychain Access”，展开“Certificate Assistant”（证书助理），然后单击“Request a Certificate from a Certificate Authority...”（从证书颁发机构请求证书...）。",
      "pos": [
        2785,
        2913
      ]
    },
    {
      "content": "输入你的“User Email Address”（用户电子邮件地址），键入“Common Name”（公用名）值，确保已选择“Saved to disk”（保存到磁盘），然后单击“Continue”（继续）。",
      "pos": [
        2930,
        3034
      ]
    },
    {
      "content": "在“Save As”（另存为）中为证书签名请求 (CSR) 文件键入一个名称，在“Where”（位置）中选择一个位置，然后单击“Save”（保存）。",
      "pos": [
        3051,
        3125
      ]
    },
    {
      "content": "请记住你选择的位置。",
      "pos": [
        3143,
        3153
      ]
    },
    {
      "content": "接下来，你将要向 Apple 注册你的应用程序、启用推送通知并上载这个导出的 CSR 以创建一个推送证书。",
      "pos": [
        3155,
        3208
      ]
    },
    {
      "pos": [
        3214,
        3248
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"register\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>为推送通知注册应用程序"
    },
    {
      "content": "若要将推送通知从移动服务发送到 iOS 应用程序，你必须向 Apple 注册应用程序，并注册推送通知。",
      "pos": [
        3250,
        3301
      ]
    },
    {
      "pos": [
        3306,
        3507
      ],
      "content": "如果你尚未注册应用程序，请导航到 Apple 开发人员中心的 <ph id=\"ph1\">&lt;a href=\"http://go.microsoft.com/fwlink/p/?LinkId=272456\" target=\"_blank\"&gt;</ph>iOS 设置门户<ph id=\"ph2\">&lt;/a&gt;</ph>，使用 Apple ID 登录，单击“Identifiers”（标识符），然后单击“App IDs”（应用程序 ID），最后单击“+”符号创建应用程序的应用程序 ID。"
    },
    {
      "pos": [
        3526,
        3766
      ],
      "content": "在“Description”（说明）中为应用程序键入一个名称，记住唯一的“Bundle Identifier”（捆绑标识符），在“App Services”（应用程序服务）部分中选中“Push Notifications”（推送通知）选项，然后单击“Continue”（继续）。此示例将使用 ID <bpt id=\"p1\">**</bpt>MobileServices.Quickstart<ept id=\"p1\">**</ept>，但你不可以重用这个 ID，因为应用程序 ID 在所有用户之间必须唯一。因此，建议在应用程序名称的后面附加完整名称或首字母。"
    },
    {
      "pos": [
        3786,
        3823
      ],
      "content": "此时将会生成你的应用程序 ID 并请求你<bpt id=\"p1\">**</bpt>提交<ept id=\"p1\">**</ept>该信息。单击“提交”。"
    },
    {
      "content": "单击“Submit”（提交）后，你将会看到如下所示的“Registration complete”（注册已完成）屏幕。单击“Done”（完成）。",
      "pos": [
        3843,
        3915
      ]
    },
    {
      "content": "找到你刚刚创建的应用程序 ID，然后单击其行。",
      "pos": [
        3934,
        3957
      ]
    },
    {
      "content": "单击应用程序 ID 会显示有关应用程序和应用程序 ID 的详细信息。单击“设置”按钮。",
      "pos": [
        3977,
        4020
      ]
    },
    {
      "content": "滚动到屏幕底部并单击“Development Push SSL Certificate”（开发推送 SSL 证书 ）部分下的“Create Certificate...”（创建证书...）按钮。",
      "pos": [
        4039,
        4136
      ]
    },
    {
      "content": "将显示“Add iOS Certificate”（添加 iOS 证书）助手。",
      "pos": [
        4156,
        4194
      ]
    },
    {
      "content": "注意：本教程使用开发证书。注册生产证书时使用相同的过程。将证书上载至移动服务时，只需确保设置了相同的证书类型即可。",
      "pos": [
        4200,
        4257
      ]
    },
    {
      "content": "单击“Choose File”（选择文件），浏览到前面保存 CSR 文件的位置，然后单击“Generate”（生成）。",
      "pos": [
        4262,
        4321
      ]
    },
    {
      "content": "门户创建证书之后，请单击“Download”（下载）按钮，然后单击“Done”（完成）。",
      "pos": [
        4340,
        4384
      ]
    },
    {
      "content": "随后将会下载签名证书并将其保存到计算机上的 Downloads 文件夹。",
      "pos": [
        4404,
        4440
      ]
    },
    {
      "pos": [
        4458,
        4519
      ],
      "content": "注意：默认情况下，下载的文件（开发证书）名为 <ph id=\"ph1\">&lt;strong&gt;</ph>aps\\_development.cer<ph id=\"ph2\">&lt;/strong&gt;</ph>。"
    },
    {
      "pos": [
        4524,
        4559
      ],
      "content": "双击下载的推送证书 <bpt id=\"p1\">**</bpt>aps\\_development.cer<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "将在 Keychain 中安装新证书，如下所示：",
      "pos": [
        4565,
        4589
      ]
    },
    {
      "pos": [
        4608,
        4698
      ],
      "content": "注意：证书中的名称可能不同，但将以 <ph id=\"ph1\">&lt;strong&gt;</ph>Apple Development iOS Push Notification Services:<ph id=\"ph2\">&lt;/strong&gt;</ph> 作为前缀。"
    },
    {
      "content": "稍后，你将要使用此证书生成一个 .p12 文件，并将其上载到移动服务以使用 APNS 启用身份验证。",
      "pos": [
        4700,
        4750
      ]
    },
    {
      "pos": [
        4756,
        4789
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"profile\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>为应用程序创建配置文件"
    },
    {
      "pos": [
        4794,
        5001
      ],
      "content": "返回 <ph id=\"ph1\">&lt;a href=\"http://go.microsoft.com/fwlink/p/?LinkId=272456\" target=\"_blank\"&gt;</ph>iOS 设置门户<ph id=\"ph2\">&lt;/a&gt;</ph>，选择“Provisioning Profiles”（设置配置文件），选择“All”（全部），然后单击“+”按钮创建一个新的配置文件。此时会启动“Add iOS Provisiong Profile”（添加 iOS 设置配置文件）向导。"
    },
    {
      "content": "选择“Development”（开发）下的“iOS App Development”（iOS 应用程序开发）作为设置配置文件类型，然后单击“Continue”（继续）。",
      "pos": [
        5020,
        5104
      ]
    },
    {
      "content": "接下来，从“App ID”（应用程序 ID）下拉列表中选择移动服务快速入门应用程序的应用程序 ID，然后单击“Continue”（继续）。",
      "pos": [
        5109,
        5178
      ]
    },
    {
      "content": "在“Select certificates”（选择证书）屏幕中，选择前面创建的证书，然后单击“Continue”（继续）。",
      "pos": [
        5197,
        5258
      ]
    },
    {
      "content": "接下来，选择要用于测试的“Devices”（设备），然后单击“Continue”（继续）。",
      "pos": [
        5277,
        5322
      ]
    },
    {
      "content": "最后，在“Profile Name”（配置文件名称）中为配置文件选取一个名称，单击“Generate”（生成），然后单击“Done”（完成）。",
      "pos": [
        5341,
        5412
      ]
    },
    {
      "content": "此操作可创建新的配置文件。",
      "pos": [
        5432,
        5445
      ]
    },
    {
      "content": "在 Xcode 中，打开“Organizer”（组织程序）并选择“Devices”（设备）视图，在左窗格的“Library”（库）部分选择“Provisioning Profiles”（预配配置文件），然后单击中间窗格底部的“刷新”按钮。",
      "pos": [
        5464,
        5583
      ]
    },
    {
      "pos": [
        5589,
        5641
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"configure-mobileServices\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>配置移动服务以发送推送请求"
    },
    {
      "content": "将应用注册到 APNS 并配置项目后，接下来必须配置移动服务以便与 APNS 集成。",
      "pos": [
        5643,
        5685
      ]
    },
    {
      "pos": [
        5690,
        5769
      ],
      "content": "在 Keychain Access 中，右键单击新证书，单击“Export”（导出），为文件命名，选择 <bpt id=\"p1\">**</bpt>.p12<ept id=\"p1\">**</ept> 格式，然后单击“Save”（保存）。"
    },
    {
      "content": "记下文件名和导出的证书的位置。",
      "pos": [
        5788,
        5803
      ]
    },
    {
      "pos": [
        5808,
        5843
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 经典门户]</ept>，单击“移动服务”，然后单击你的应用。"
    },
    {
      "content": "单击“推送”选项卡，单击“Apple 推送通知设置”下的“上载”。",
      "pos": [
        5861,
        5894
      ]
    },
    {
      "content": "此时将显示“上载证书”对话框。",
      "pos": [
        5913,
        5928
      ]
    },
    {
      "content": "单击“文件”，选择导出的 .p12 证书文件，输入“密码”，确保已选择正确的“模式”，单击勾选图标，然后单击“保存”。",
      "pos": [
        5933,
        5992
      ]
    },
    {
      "content": "现在，你的移动服务已配置为使用 APNS。",
      "pos": [
        6007,
        6028
      ]
    },
    {
      "pos": [
        6034,
        6081
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"configure-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>配置 Xamarin.iOS 应用程序"
    },
    {
      "pos": [
        6086,
        6162
      ],
      "content": "在 Xamarin.Studio 或 Visual Studio 中，打开 <bpt id=\"p1\">**</bpt>Info.plist<ept id=\"p1\">**</ept>，然后使用前面创建的 ID 更新“捆绑标识符”。"
    },
    {
      "content": "向下滚动到“Background Modes”（后台模式）并选中“Enable Background Modes”（启用后台模式）框和“Remote notifications”（远程通知）框。",
      "pos": [
        6181,
        6278
      ]
    },
    {
      "content": "在解决方案面板中双击你的项目以打开“Project Options”（项目选项）。",
      "pos": [
        6297,
        6338
      ]
    },
    {
      "content": "在“Build”（生成）下面选择“iOS Bundle Signing”（iOS 捆绑签名），并选择你刚刚为此项目设置的“Identity”（标识）和“Provisioning profile”（设置配置文件）。",
      "pos": [
        6344,
        6450
      ]
    },
    {
      "pos": [
        6470,
        6540
      ],
      "content": "这可以确保 Xamarin 项目使用新配置文件进行代码签名。有关正式的 Xamarin 设备设置文档，请参阅 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Xamarin 设备设置]</ept>。"
    },
    {
      "pos": [
        6546,
        6580
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add-push\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>向应用程序添加推送通知"
    },
    {
      "pos": [
        6585,
        6701
      ],
      "content": "在 Xamarin.Studio 或 Visual Studio 中，展开 <bpt id=\"p1\">**</bpt>ToDoAzure.iOS<ept id=\"p1\">**</ept> 项目，打开 <bpt id=\"p2\">**</bpt>AppDelegate<ept id=\"p2\">**</ept> 类，然后将 <bpt id=\"p3\">**</bpt>FinishedLaunching<ept id=\"p3\">**</ept> 事件替换为以下代码："
    },
    {
      "pos": [
        7615,
        7678
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate<ept id=\"p1\">**</ept> 中，重写 <bpt id=\"p2\">**</bpt>RegisteredForRemoteNotifications<ept id=\"p2\">**</ept> 事件："
    },
    {
      "pos": [
        8587,
        8644
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate<ept id=\"p1\">**</ept> 中，重写 <bpt id=\"p2\">**</bpt>ReceivedRemoteNotification<ept id=\"p2\">**</ept> 事件："
    },
    {
      "content": "你的应用现已更新，可支持推送通知。",
      "pos": [
        9103,
        9120
      ]
    },
    {
      "pos": [
        9126,
        9178
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"update-scripts\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>在 Azure 经典门户中更新已注册的插入脚本"
    },
    {
      "content": "在 Azure 经典门户中，单击“数据”选项卡，然后单击“TodoItem”表。",
      "pos": [
        9183,
        9223
      ]
    },
    {
      "pos": [
        9241,
        9277
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>todoitem<ept id=\"p1\">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。"
    },
    {
      "pos": [
        9296,
        9328
      ],
      "content": "将显示当 <bpt id=\"p1\">**</bpt>TodoItem<ept id=\"p1\">**</ept> 表中发生插入时所调用的函数。"
    },
    {
      "content": "将 insert 函数替换为以下代码，然后单击“保存”：",
      "pos": [
        9333,
        9361
      ]
    },
    {
      "content": "这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。",
      "pos": [
        10472,
        10515
      ]
    },
    {
      "pos": [
        10521,
        10571
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此脚本将延迟发送通知，使你有足够的时间关闭应用程序以接收 toast 通知。"
    },
    {
      "pos": [
        10577,
        10608
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"test\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>在应用程序中测试推送通知"
    },
    {
      "content": "在支持 iOS 的设备中按“运行”按钮以生成项目并启动应用程序，然后单击“确定”接受推送通知",
      "pos": [
        10613,
        10659
      ]
    },
    {
      "pos": [
        10666,
        10715
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你必须显式接受来自应用程序的推送通知。此请求只会在首次运行应用程序时出现。"
    },
    {
      "content": "在应用中，单击“添加”按钮，添加任务标题，然后单击“保存”按钮。",
      "pos": [
        10720,
        10752
      ]
    },
    {
      "content": "检查是否已收到通知，然后单击“确定”以取消通知。",
      "pos": [
        10758,
        10782
      ]
    },
    {
      "content": "你已成功完成本教程。",
      "pos": [
        10785,
        10795
      ]
    },
    {
      "pos": [
        10800,
        10854
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"Android\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>向 Xamarin.Forms.Android 应用添加推送通知"
    },
    {
      "pos": [
        10856,
        10961
      ],
      "content": "你将使用 Google Cloud Messaging (GCM) 服务向 Android 应用添加推送通知。你将需要有效的 Google 帐户和 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Google Cloud Messaging 客户端组件]</ept>。"
    },
    {
      "pos": [
        10966,
        11012
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"register\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>启用 Google Cloud Messaging"
    },
    {
      "pos": [
        11144,
        11179
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"configure\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>配置移动服务以发送推送请求"
    },
    {
      "pos": [
        11297,
        11339
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"update-scripts\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>更新已注册的插入脚本以发送通知"
    },
    {
      "pos": [
        11342,
        11461
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>以下步骤说明了如何在 Azure 经典门户中，更新已注册到 TodoItem 表上的插入操作的脚本。你也可以在 Visual Studio 的“服务器资源管理器”的“Azure”节点中直接访问和编辑此移动服务脚本。"
    },
    {
      "pos": [
        11463,
        11505
      ],
      "content": "在 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 经典门户]</ept>中，单击“数据”选项卡，然后单击“TodoItem”表。"
    },
    {
      "pos": [
        11523,
        11559
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>todoitem<ept id=\"p1\">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。"
    },
    {
      "pos": [
        11578,
        11610
      ],
      "content": "将显示当 <bpt id=\"p1\">**</bpt>TodoItem<ept id=\"p1\">**</ept> 表中发生插入时所调用的函数。"
    },
    {
      "content": "将 insert 函数替换为以下代码，然后单击“保存”：",
      "pos": [
        11615,
        11643
      ]
    },
    {
      "content": "这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。",
      "pos": [
        12755,
        12798
      ]
    },
    {
      "pos": [
        12804,
        12854
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此脚本将延迟发送通知，使你有足够的时间关闭应用程序以接收 toast 通知。"
    },
    {
      "pos": [
        12860,
        12897
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"configure-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>为推送通知配置现有项目"
    },
    {
      "pos": [
        12902,
        12974
      ],
      "content": "在“解决方案”视图中，展开 Xamarin.Android 应用中的 <bpt id=\"p1\">**</bpt>Components<ept id=\"p1\">**</ept> 文件夹，确保 Azure 移动服务包已安装。"
    },
    {
      "pos": [
        12980,
        13064
      ],
      "content": "右键单击 <bpt id=\"p1\">**</bpt>Components<ept id=\"p1\">**</ept> 文件夹，单击“获取更多组件...”，搜索 <bpt id=\"p2\">**</bpt>Google Cloud Messaging 客户端<ept id=\"p2\">**</ept>组件，并将其添加到项目中。"
    },
    {
      "content": "打开 MainActivity.cs 项目文件，将以下 using 语句添加到该类：",
      "pos": [
        13069,
        13111
      ]
    },
    {
      "pos": [
        13145,
        13221
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainActivity<ept id=\"p1\">**</ept> 类中，将以下代码添加到 <bpt id=\"p2\">**</bpt>OnCreate<ept id=\"p2\">**</ept> 方法中调用 <bpt id=\"p3\">**</bpt>LoadApplication<ept id=\"p3\">**</ept> 方法的后面："
    },
    {
      "pos": [
        13952,
        13989
      ],
      "content": "你的 <bpt id=\"p1\">**</bpt>MainActivity<ept id=\"p1\">**</ept> 现已准备就绪，可以添加推送通知了。"
    },
    {
      "pos": [
        13994,
        14028
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"add-push\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>向应用程序添加推送通知代码"
    },
    {
      "pos": [
        14033,
        14079
      ],
      "content": "在 ToDoAzure.Droid 项目中，创建一个名为 <ph id=\"ph1\">`GcmService`</ph> 的新类。"
    },
    {
      "pos": [
        14084,
        14117
      ],
      "content": "将以下 using 语句添加到 <bpt id=\"p1\">**</bpt>GcmService<ept id=\"p1\">**</ept> 类："
    },
    {
      "pos": [
        14202,
        14245
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句和 <bpt id=\"p2\">**</bpt>namespace<ept id=\"p2\">**</ept> 声明之间添加以下权限请求："
    },
    {
      "pos": [
        14801,
        14833
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>GcmService.cs<ept id=\"p1\">**</ept> 项目文件中，添加以下类："
    },
    {
      "pos": [
        15554,
        15628
      ],
      "content": "在上述代码中，你必须将 <bpt id=\"p1\">_</bpt><ph id=\"ph1\">`&lt;PROJECT_NUMBER&gt;`</ph><ept id=\"p1\">_</ept> 替换为你在 Google 开发人员门户中预配应用时 Google 分配的项目编号。"
    },
    {
      "pos": [
        15633,
        15682
      ],
      "content": "在 GcmService.cs 项目文件中，添加定义 <bpt id=\"p1\">**</bpt>GcmService<ept id=\"p1\">**</ept> 类的以下代码："
    },
    {
      "pos": [
        15954,
        16005
      ],
      "content": "请注意，此类派生自 <bpt id=\"p1\">**</bpt>GcmServiceBase<ept id=\"p1\">**</ept>，<bpt id=\"p2\">**</bpt>Service<ept id=\"p2\">**</ept> 属性必须应用于此类。"
    },
    {
      "pos": [
        16012,
        16150
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph><bpt id=\"p1\">**</bpt>GcmServiceBase<ept id=\"p1\">**</ept> 类实现 <bpt id=\"p2\">**</bpt>OnRegistered()<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>OnUnRegistered()<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>OnMessage()<ept id=\"p4\">**</ept> 和 <bpt id=\"p5\">**</bpt>OnError()<ept id=\"p5\">**</ept> 方法。必须在 <bpt id=\"p6\">**</bpt>GcmService<ept id=\"p6\">**</ept> 类中重写这些方法。"
    },
    {
      "pos": [
        16155,
        16210
      ],
      "content": "将以下代码添加到 <bpt id=\"p1\">**</bpt>GcmService<ept id=\"p1\">**</ept> 类，以便重写 <bpt id=\"p2\">**</bpt>OnRegistered<ept id=\"p2\">**</ept> 事件处理程序。"
    },
    {
      "content": "此方法使用返回的 GCM 注册 ID 向 Azure 注册以获取推送通知。",
      "pos": [
        17316,
        17353
      ]
    },
    {
      "pos": [
        17358,
        17402
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>GcmService<ept id=\"p1\">**</ept> 中使用以下代码重写 <bpt id=\"p2\">**</bpt>OnMessage<ept id=\"p2\">**</ept> 方法："
    },
    {
      "pos": [
        19639,
        19876
      ],
      "content": "为项目编译所需的 **OnUnRegistered()** 和 **OnError()** 添加以下方法重写。\n protected override void OnUnRegistered(Context context, string registrationId)\n {\n       Log.Error(\"GcmService\", \"Unregistered RegisterationId : \" + registrationId);\n }",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "为项目编译所需的 <bpt id=\"p1\">**</bpt>OnUnRegistered()<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>OnError()<ept id=\"p2\">**</ept> 添加以下方法重写。",
          "pos": [
            0,
            55
          ]
        },
        {
          "content": "protected override void OnUnRegistered(Context context, string registrationId)",
          "pos": [
            57,
            135
          ]
        },
        {
          "content": "{",
          "pos": [
            137,
            138
          ]
        },
        {
          "content": "Log.Error(\"GcmService\", \"Unregistered RegisterationId : \" + registrationId);",
          "pos": [
            146,
            222
          ]
        },
        {
          "content": "}",
          "pos": [
            224,
            225
          ]
        }
      ]
    },
    {
      "pos": [
        20059,
        20088
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"test\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>在应用程序中测试推送通知"
    },
    {
      "content": "你可以通过以下方式测试应用程序：使用 USB 电缆直接连接 Android 手机，或者在模拟器中使用虚拟设备。",
      "pos": [
        20090,
        20145
      ]
    },
    {
      "content": "当你在模拟器中运行此应用程序时，请确保使用支持 Google API 的 Android 虚拟设备 (AVD)。",
      "pos": [
        20147,
        20203
      ]
    },
    {
      "pos": [
        20207,
        20318
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>为了接收推送通知，你必须在 Android 虚拟设备上设置 Google 帐户（方法如下：在模拟器中，导航到“设置”，然后单击“添加帐户”）。此外，请确保模拟器已连接到 Internet。"
    },
    {
      "content": "从“工具”中，单击“打开 Android 模拟器管理器”，选择你的设备，然后单击“编辑”。",
      "pos": [
        20323,
        20368
      ]
    },
    {
      "content": "在“目标”中选择“Google API”，然后单击“确定”。",
      "pos": [
        20391,
        20421
      ]
    },
    {
      "content": "在顶部工具栏中，单击“运行”，然后选择你的应用。这将启动模拟器并运行该应用程序。",
      "pos": [
        20444,
        20484
      ]
    },
    {
      "pos": [
        20490,
        20528
      ],
      "content": "应用将从 GCM 检索 <bpt id=\"p1\">*</bpt>registrationId<ept id=\"p1\">*</ept> 并注册到通知中心。"
    },
    {
      "content": "在应用中，添加新的任务。",
      "pos": [
        20533,
        20545
      ]
    },
    {
      "content": "从屏幕顶部向下轻扫，打开设备的通知中心以查看通知。",
      "pos": [
        20550,
        20575
      ]
    },
    {
      "pos": [
        20594,
        20648
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"Windows\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>向 Xamarin.Forms.Windows 应用添加推送通知"
    },
    {
      "content": "本节演示如何使用 Azure 移动服务将推送通知发送到 Xamarin.Forms 解决方案包含的 Windows Phone Silverlight 应用。",
      "pos": [
        20650,
        20729
      ]
    },
    {
      "pos": [
        20734,
        20768
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"update-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>更新应用程序以注册通知"
    },
    {
      "content": "只有在你注册通知通道后，你的应用程序才能接收推送通知。",
      "pos": [
        20770,
        20797
      ]
    },
    {
      "pos": [
        20802,
        20854
      ],
      "content": "在 Visual Studio 中，打开文件 App.xaml.cs 并添加以下 <ph id=\"ph1\">`using`</ph> 语句："
    },
    {
      "content": "将以下代码添加到 App.xaml.cs：",
      "pos": [
        20904,
        20925
      ]
    },
    {
      "content": "此代码检索 ChannelURI 以查找来自 Microsoft 推送通知服务 (MPNS) （由 Windows Phone 8.x \"Silverlight\" 使用）的应用程序， 然后注册该 ChannelURI 以支持推送通知。",
      "pos": [
        22038,
        22155
      ]
    },
    {
      "pos": [
        22162,
        22245
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在本教程中，移动服务将向设备发送一条 toast 通知。而当你发送磁贴通知时，必须在通道上调用 <bpt id=\"p1\">**</bpt>BindToShellTile<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "pos": [
        22250,
        22340
      ],
      "content": "在 App.xaml.cs 中 <bpt id=\"p1\">**</bpt>Application\\_Launching<ept id=\"p1\">**</ept> 事件处理程序的顶部，添加对新的 <bpt id=\"p2\">**</bpt>AcquirePushChannel<ept id=\"p2\">**</ept> 方法的以下调用："
    },
    {
      "content": "这可以确保每次加载页时都会请求注册。在应用程序中，你可能只需要定期执行此注册以确保注册是最新的。",
      "pos": [
        22377,
        22425
      ]
    },
    {
      "pos": [
        22430,
        22463
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> 键以运行应用。将显示包含注册密钥的弹出式对话框。"
    },
    {
      "pos": [
        22471,
        22572
      ],
      "content": "在解决方案资源管理器中，展开“属性”，打开 WMAppManifest.xml 文件，单击“功能”选项卡并确保选中 <bpt id=\"p1\">**</bpt>ID\\_\\_\\_CAP\\_\\_\\_PUSH\\_NOTIFICATION<ept id=\"p1\">**</ept> 功能。"
    },
    {
      "content": "在 VS 中启用通知",
      "pos": [
        22580,
        22590
      ]
    },
    {
      "content": "这可以确保你的应用程序能够引发 toast 通知。",
      "pos": [
        22700,
        22725
      ]
    },
    {
      "pos": [
        22730,
        22771
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"update-scripts\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>更新服务器脚本以发送推送通知"
    },
    {
      "content": "最后，您必须更新注册到 TodoItem 表上的插入操作的脚本，以便发送通知。",
      "pos": [
        22773,
        22812
      ]
    },
    {
      "pos": [
        22817,
        22859
      ],
      "content": "在 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 经典门户]</ept>中，单击“数据”选项卡，然后单击“TodoItem”表。"
    },
    {
      "pos": [
        22877,
        22913
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>todoitem<ept id=\"p1\">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。"
    },
    {
      "pos": [
        22932,
        22964
      ],
      "content": "将显示当 <bpt id=\"p1\">**</bpt>TodoItem<ept id=\"p1\">**</ept> 表中发生插入时所调用的函数。"
    },
    {
      "content": "将 insert 函数替换为以下代码，然后单击“保存”：",
      "pos": [
        22969,
        22997
      ]
    },
    {
      "content": "这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。",
      "pos": [
        24119,
        24162
      ]
    },
    {
      "content": "单击“推送”选项卡，选中“启用未经身份验证的推送通知”，然后单击“保存”。",
      "pos": [
        24167,
        24204
      ]
    },
    {
      "content": "这样，移动服务便可以连接到处于未经身份验证模式的 MPNS 以发送推送通知。",
      "pos": [
        24210,
        24248
      ]
    },
    {
      "pos": [
        24255,
        24417
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本教程使用未经身份验证模式下的 MPNS。在此模式下，MPNS 将限制可发送到某个设备通道的通知数。若要解除此限制，必须生成一个证书，然后通过单击“上载”并选择该证书来上载该证书。有关生成证书的详细信息，请参阅 [设置已经过身份验证的 Web 服务以便为 Windows Phone 发送推送通知]。"
    },
    {
      "pos": [
        24422,
        24451
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"test\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>在应用程序中测试推送通知"
    },
    {
      "content": "在 Visual Studio 中，按 F5 键运行应用程序。",
      "pos": [
        24456,
        24487
      ]
    },
    {
      "pos": [
        24494,
        24702
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在 Windows Phone 模拟器测试时，你可能会遇到 401 错误“未授权的 RegistrationAuthorizationException”。由于 Windows Phone 模拟器时钟与主机电脑时钟的同步问题，在调用 <ph id=\"ph2\">`RegisterNativeAsync()`</ph> 期间可能会出现此错误。这可能会导致安全令牌被拒绝。若要解决此问题，只需在模拟器中手动设置时钟，然后再开始测试。"
    },
    {
      "pos": [
        24707,
        24768
      ],
      "content": "在应用中，创建具有标题 <bpt id=\"p1\">**</bpt>Hello push<ept id=\"p1\">**</ept> 的新任务，然后立即单击“开始”按钮，或者单击“后退”按钮以退出应用。"
    },
    {
      "pos": [
        24774,
        24843
      ],
      "content": "此时会将一个插入请求发送到移动服务，以存储添加的项。可以看到，设备收到了一条包含 <bpt id=\"p1\">**</bpt>hello push<ept id=\"p1\">**</ept> 字样的 toast 通知。"
    },
    {
      "content": "收到的 Toast 通知",
      "pos": [
        24851,
        24863
      ]
    },
    {
      "pos": [
        24975,
        25235
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果你仍未退出应用程序，则不会收到该通知。若要在应用处于活动状态时接收 toast 通知，你必须处理 <bpt id=\"p1\">[</bpt>ShellToastNotificationReceived<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/windowsphone/develop/microsoft.phone.notification.httpnotificationchannel.shelltoastnotificationreceived(v=vs.105).aspx)</ept> 事件。"
    }
  ],
  "content": " <properties\n    pageTitle=\"向移动服务应用 (Xamarin.Forms) 添加推送通知 - 移动服务\"\n    description=\"了解如何借助 Azure 移动服务在 Xamarin.Forms 应用中使用推送通知。\"\n    documentationCenter=\"xamarin\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    services=\"mobile-services\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.date=\"01/22/2016\"\n    wacn.date=\"03/21/2016\"/>\n\n# 向 Xamarin.Forms 应用添加推送通知\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n[AZURE.INCLUDE [mobile-services-selector-get-started-push](../includes/mobile-services-selector-get-started-push.md)]\n\n##概述\n\n本教程演示如何使用 Azure 移动服务将推送通知发送到 Xamarin.Forms 解决方案的 iOS、Android 和 Windows Phone 应用。首先，创建移动服务。然后，将下载初学者示例、注册到相应的推送通知服务，并将代码添加到解决方案以从这些新服务接收通知。\n\n你完成本教程后，每当用户向其中一个应用添加任务时，你的移动服务都会发送推送通知。你可以在此处找到已完成的示例：[已完成的 Xamarin.Forms Azure 推送通知示例]。\n\n本教程需要的内容如下：\n\n+ IOS 8 设备（无法在 iOS 模拟器中测试推送通知）\n+ iOS 开发人员计划成员身份\n+ [Xamarin.iOS Studio]\n+ [Azure 移动服务组件]\n+ 有效的 Google 帐户\n+ [Google Cloud Messaging 客户端组件]。在学习本教程的过程中，你将要添加此组件。\n\n本主题内容：\n\n1. [创建新的移动服务](#create-service)\n2. [下载并配置初学者示例](#download-starter-sample)\n4. [向 Xamarin.Forms.iOS 应用添加推送通知](#iOS)\n5. [向 Xamarin.Forms.Android 应用添加推送通知](#Android)\n6. [向 Xamarin.Forms.Windows 应用添加推送通知](#Windows)\n7. [更新 Azure 表插入脚本将推送通知发送到所有应用](#all-apps)\n\n## <a name=\"create-service\"></a>创建新的移动服务\n\n[AZURE.INCLUDE [mobile-services-create-new-service-data](../includes/mobile-services-create-new-service-data.md)]\n\n为了能够在新移动服务中存储应用程序数据，必须先创建一个新表。\n\n1. 在 **Azure 经典门户**中单击“移动服务”，然后单击你刚刚创建的移动服务。\n\n2. 单击“数据”选项卡，然后单击“+创建”。\n\n    ![][123]\n\n    此时将显示“创建新表”对话框。\n\n3. 在“表名”中键入 _TodoItem_，然后单击勾选按钮。\n\n    ![][124]\n\n    这将创建一个新的设置了默认权限的存储表 **TodoItem**，这意味着任何应用程序用户均可访问和更改该表中的数据。\n\n    > [AZURE.NOTE]移动服务快速入门中使用了相同的表名。但是，每个表是在特定于给定移动服务的架构中创建的。这是为了防止当多个移动服务使用同一数据库时发生数据冲突。\n\n4. 单击新的 **TodoItem** 表，然后验证是否不存在任何数据行。\n\n5. 单击“列”选项卡，并验证是否只有一个“ID”列，该列是自动为你创建的。\n\n    这是对移动服务中的表的最低要求。\n\n    > [AZURE.NOTE]如果在移动服务中启用了动态架构，则通过插入或更新操作向移动服务发送 JSON 对象时，将自动创建新列。\n\n现在，您可以将新移动服务用作应用的数据存储。\n\n## <a name=\"download-starter-sample\"></a>下载并配置初学者示例\n我们将向现有示例添加推送通知。\n  \n1. 下载以下示例：[Xamarin.Forms Azure 推送通知初学者示例]。\n\n2. 在 [Azure 经典门户]中单击“移动服务”，然后单击该移动服务。单击“仪表板”选项卡，并记下“站点 URL”。然后单击“管理密钥”，并记下“应用程序密钥”。从应用代码访问移动服务时，你需要使用这些值。\n\n3. 在解决方案的 **ToDoAzure(Portable)** 项目中，打开 **Constants.cs** 文件，将 `ApplicationURL` 和 `ApplicationKey` 替换为你在上一步中获得的站点 URL 和应用程序密钥。\n\n## <a name=\"iOS\"></a>向 Xamarin.Forms.iOS 应用添加推送通知\n\n你将使用 Apple 推送通知服务 (APNS) 向 iOS 应用添加推送通知。你将需要有效的 Google 帐户和 [Google Cloud Messaging 客户端组件]。\n\n>[AZURE.IMPORTANT]由于 Apple 推送通知服务 (APNS) 要求，你必须在支持 iOS 的设备（iPhone 或 iPad），而不是在模拟器上部署和测试推送通知。\n\nAPNS 使用证书对你的移动服务进行身份验证。按照以下说明创建必要的证书并将其上载到你的移动服务。有关正式的 APNS 功能文档，请参阅 [Apple 推送通知服务]。\n\n### <a name=\"certificates\"></a>生成证书签名请求文件\n\n首先，你必须生成证书签名请求 (CSR) 文件，Apple 将使用该文件生成签名证书。\n\n1. 从“Utilities”（实用工具）中，运行 **Keychain Access** 工具。\n\n2. 单击“Keychain Access”，展开“Certificate Assistant”（证书助理），然后单击“Request a Certificate from a Certificate Authority...”（从证书颁发机构请求证书...）。\n\n    ![][5]\n\n3. 输入你的“User Email Address”（用户电子邮件地址），键入“Common Name”（公用名）值，确保已选择“Saved to disk”（保存到磁盘），然后单击“Continue”（继续）。\n\n    ![][6]\n\n4. 在“Save As”（另存为）中为证书签名请求 (CSR) 文件键入一个名称，在“Where”（位置）中选择一个位置，然后单击“Save”（保存）。\n\n    ![][7]\n\n    请记住你选择的位置。\n\n接下来，你将要向 Apple 注册你的应用程序、启用推送通知并上载这个导出的 CSR 以创建一个推送证书。\n\n### <a name=\"register\"></a>为推送通知注册应用程序\n\n若要将推送通知从移动服务发送到 iOS 应用程序，你必须向 Apple 注册应用程序，并注册推送通知。\n\n1. 如果你尚未注册应用程序，请导航到 Apple 开发人员中心的 <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=272456\" target=\"_blank\">iOS 设置门户</a>，使用 Apple ID 登录，单击“Identifiers”（标识符），然后单击“App IDs”（应用程序 ID），最后单击“+”符号创建应用程序的应用程序 ID。\n\n    ![][102]\n\n2. 在“Description”（说明）中为应用程序键入一个名称，记住唯一的“Bundle Identifier”（捆绑标识符），在“App Services”（应用程序服务）部分中选中“Push Notifications”（推送通知）选项，然后单击“Continue”（继续）。此示例将使用 ID **MobileServices.Quickstart**，但你不可以重用这个 ID，因为应用程序 ID 在所有用户之间必须唯一。因此，建议在应用程序名称的后面附加完整名称或首字母。\n\n    ![][103]\n\n    此时将会生成你的应用程序 ID 并请求你**提交**该信息。单击“提交”。\n\n    ![][104]\n\n    单击“Submit”（提交）后，你将会看到如下所示的“Registration complete”（注册已完成）屏幕。单击“Done”（完成）。\n\n    ![][105]\n\n3. 找到你刚刚创建的应用程序 ID，然后单击其行。\n\n    ![][106]\n\n    单击应用程序 ID 会显示有关应用程序和应用程序 ID 的详细信息。单击“设置”按钮。\n\n    ![][107]\n\n4. 滚动到屏幕底部并单击“Development Push SSL Certificate”（开发推送 SSL 证书 ）部分下的“Create Certificate...”（创建证书...）按钮。\n\n    ![][108]\n\n    将显示“Add iOS Certificate”（添加 iOS 证书）助手。\n\n    注意：本教程使用开发证书。注册生产证书时使用相同的过程。将证书上载至移动服务时，只需确保设置了相同的证书类型即可。\n\n5. 单击“Choose File”（选择文件），浏览到前面保存 CSR 文件的位置，然后单击“Generate”（生成）。\n\n    ![][110]\n\n6. 门户创建证书之后，请单击“Download”（下载）按钮，然后单击“Done”（完成）。\n\n    ![][111]\n\n    随后将会下载签名证书并将其保存到计算机上的 Downloads 文件夹。\n\n    ![][9]\n\n    注意：默认情况下，下载的文件（开发证书）名为 <strong>aps\\_development.cer</strong>。\n\n7. 双击下载的推送证书 **aps\\_development.cer**。\n\n    将在 Keychain 中安装新证书，如下所示：\n\n    ![][10]\n\n    注意：证书中的名称可能不同，但将以 <strong>Apple Development iOS Push Notification Services:</strong> 作为前缀。\n\n稍后，你将要使用此证书生成一个 .p12 文件，并将其上载到移动服务以使用 APNS 启用身份验证。\n\n### <a name=\"profile\"></a>为应用程序创建配置文件\n\n1. 返回 <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=272456\" target=\"_blank\">iOS 设置门户</a>，选择“Provisioning Profiles”（设置配置文件），选择“All”（全部），然后单击“+”按钮创建一个新的配置文件。此时会启动“Add iOS Provisiong Profile”（添加 iOS 设置配置文件）向导。\n\n    ![][112]\n\n2. 选择“Development”（开发）下的“iOS App Development”（iOS 应用程序开发）作为设置配置文件类型，然后单击“Continue”（继续）。\n\n3. 接下来，从“App ID”（应用程序 ID）下拉列表中选择移动服务快速入门应用程序的应用程序 ID，然后单击“Continue”（继续）。\n\n    ![][113]\n\n4. 在“Select certificates”（选择证书）屏幕中，选择前面创建的证书，然后单击“Continue”（继续）。\n\n    ![][114]\n\n5. 接下来，选择要用于测试的“Devices”（设备），然后单击“Continue”（继续）。\n\n    ![][115]\n\n6. 最后，在“Profile Name”（配置文件名称）中为配置文件选取一个名称，单击“Generate”（生成），然后单击“Done”（完成）。\n\n    ![][116]\n\n    此操作可创建新的配置文件。\n\n    ![][117]\n\n7. 在 Xcode 中，打开“Organizer”（组织程序）并选择“Devices”（设备）视图，在左窗格的“Library”（库）部分选择“Provisioning Profiles”（预配配置文件），然后单击中间窗格底部的“刷新”按钮。\n\n### <a name=\"configure-mobileServices\"></a>配置移动服务以发送推送请求\n\n将应用注册到 APNS 并配置项目后，接下来必须配置移动服务以便与 APNS 集成。\n\n1. 在 Keychain Access 中，右键单击新证书，单击“Export”（导出），为文件命名，选择 **.p12** 格式，然后单击“Save”（保存）。\n\n    ![][28]\n\n    记下文件名和导出的证书的位置。\n\n2. 登录到 [Azure 经典门户]，单击“移动服务”，然后单击你的应用。\n\n    ![][18]\n\n3. 单击“推送”选项卡，单击“Apple 推送通知设置”下的“上载”。\n\n    ![][19]\n\n    此时将显示“上载证书”对话框。\n\n4. 单击“文件”，选择导出的 .p12 证书文件，输入“密码”，确保已选择正确的“模式”，单击勾选图标，然后单击“保存”。\n\n    ![][20]\n\n现在，你的移动服务已配置为使用 APNS。\n\n### <a name=\"configure-app\"></a>配置 Xamarin.iOS 应用程序\n\n1. 在 Xamarin.Studio 或 Visual Studio 中，打开 **Info.plist**，然后使用前面创建的 ID 更新“捆绑标识符”。\n\n    ![][121]\n\n2. 向下滚动到“Background Modes”（后台模式）并选中“Enable Background Modes”（启用后台模式）框和“Remote notifications”（远程通知）框。\n\n    ![][122]\n\n3. 在解决方案面板中双击你的项目以打开“Project Options”（项目选项）。\n\n4.  在“Build”（生成）下面选择“iOS Bundle Signing”（iOS 捆绑签名），并选择你刚刚为此项目设置的“Identity”（标识）和“Provisioning profile”（设置配置文件）。\n\n    ![][120]\n\n    这可以确保 Xamarin 项目使用新配置文件进行代码签名。有关正式的 Xamarin 设备设置文档，请参阅 [Xamarin 设备设置]。\n\n### <a name=\"add-push\"></a>向应用程序添加推送通知\n\n1. 在 Xamarin.Studio 或 Visual Studio 中，展开 **ToDoAzure.iOS** 项目，打开 **AppDelegate** 类，然后将 **FinishedLaunching** 事件替换为以下代码：\n\n        public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n        {\n             // registers for push for iOS8\n            var settings = UIUserNotificationSettings.GetSettingsForTypes(\n                UIUserNotificationType.Alert\n                | UIUserNotificationType.Badge\n                | UIUserNotificationType.Sound,\n                new NSSet());\n\n            global::Xamarin.Forms.Forms.Init();\n            instance = this;\n            CurrentPlatform.Init();\n            \n            todoItemManager = new ToDoItemManager();\n            App.SetTodoItemManager(todoItemManager);\n\n\n            UIApplication.SharedApplication.RegisterUserNotificationSettings(settings);\n            UIApplication.SharedApplication.RegisterForRemoteNotifications();\n            \n            LoadApplication(new App());\n            return base.FinishedLaunching(app, options);\n        }\n\n2. 在 **AppDelegate** 中，重写 **RegisteredForRemoteNotifications** 事件：\n\n        public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)\n        {\n            // Modify device token\n            string _deviceToken = deviceToken.Description;\n            _deviceToken = _deviceToken.Trim('<', '>').Replace(\" \", \"\");\n\n            // Get Mobile Services client\n            MobileServiceClient client = todoItemManager.GetClient;\n\n            // Register for push with Mobile Services\n            IEnumerable<string> tag = new List<string>() { \"uniqueTag\" };\n            \n            const string template = \"{\"aps\":{\"alert\":\"$(message)\"}}\";\n\n            var expiryDate = DateTime.Now.AddDays(90).ToString\n                (System.Globalization.CultureInfo.CreateSpecificCulture(\"zh-CN\"));\n\n            var push = client.GetPush();\n\n            push.RegisterTemplateAsync(_deviceToken, template, expiryDate, \"myTemplate\", tag)\n        }\n\n3. 在 **AppDelegate** 中，重写 **ReceivedRemoteNotification** 事件：\n\n        public override void ReceivedRemoteNotification(UIApplication application, NSDictionary userInfo)\n        {\n            NSObject inAppMessage;\n\n            bool success = userInfo.TryGetValue(new NSString(\"inAppMessage\"), out inAppMessage);\n\n            if (success)\n            {\n                var alert = new UIAlertView(\"Got push notification\", inAppMessage.ToString(), null, \"OK\", null);\n                alert.Show();\n            }\n        }\n\n你的应用现已更新，可支持推送通知。\n\n### <a name=\"update-scripts\"></a>在 Azure 经典门户中更新已注册的插入脚本\n\n1. 在 Azure 经典门户中，单击“数据”选项卡，然后单击“TodoItem”表。\n\n    ![][21]\n\n2. 在 **todoitem** 中，单击“脚本”选项卡，然后选择“插入”。\n\n    ![][22]\n\n    将显示当 **TodoItem** 表中发生插入时所调用的函数。\n\n3. 将 insert 函数替换为以下代码，然后单击“保存”：\n\n          function insert(item, user, request) {\n          // Execute the request and send notifications.\n             request.execute({\n             success: function() {                      \n              // Create a template-based payload.\n              var payload = '{ \"message\" : \"New item added: ' + item.text + '\" }';            \n\n              // Write the default response and send a notification\n              // to all platforms.            \n              push.send(null, payload, {               \n                  success: function(pushResponse){\n                  console.log(\"Sent push:\", pushResponse);\n                  // Send the default response.\n                  request.respond();\n                  },              \n                  error: function (pushResponse) {\n                      console.log(\"Error Sending push:\", pushResponse);\n                       // Send the an error response.\n                      request.respond(500, { error: pushResponse });\n                      }           \n               });                 \n              }\n           });   \n          }\n\n    这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。\n\n   >[AZURE.NOTE]此脚本将延迟发送通知，使你有足够的时间关闭应用程序以接收 toast 通知。\n\n### <a name=\"test\"></a>在应用程序中测试推送通知\n\n1. 在支持 iOS 的设备中按“运行”按钮以生成项目并启动应用程序，然后单击“确定”接受推送通知\n\n    >[AZURE.NOTE]你必须显式接受来自应用程序的推送通知。此请求只会在首次运行应用程序时出现。\n\n2. 在应用中，单击“添加”按钮，添加任务标题，然后单击“保存”按钮。 \n\n3. 检查是否已收到通知，然后单击“确定”以取消通知。\n\n\n你已成功完成本教程。\n\n## <a name=\"Android\"></a>向 Xamarin.Forms.Android 应用添加推送通知\n\n你将使用 Google Cloud Messaging (GCM) 服务向 Android 应用添加推送通知。你将需要有效的 Google 帐户和 [Google Cloud Messaging 客户端组件]。\n\n###<a id=\"register\"></a>启用 Google Cloud Messaging\n\n[AZURE.INCLUDE [mobile-services-enable-Google-cloud-messaging](../includes/mobile-services-enable-google-cloud-messaging.md)]\n\n###<a id=\"configure\"></a>配置移动服务以发送推送请求\n\n[AZURE.INCLUDE [mobile-services-android-configure-push](../includes/mobile-services-android-configure-push.md)]\n\n###<a id=\"update-scripts\"></a>更新已注册的插入脚本以发送通知\n\n>[AZURE.NOTE]以下步骤说明了如何在 Azure 经典门户中，更新已注册到 TodoItem 表上的插入操作的脚本。你也可以在 Visual Studio 的“服务器资源管理器”的“Azure”节点中直接访问和编辑此移动服务脚本。\n\n在 [Azure 经典门户]中，单击“数据”选项卡，然后单击“TodoItem”表。\n\n    ![][21]\n\n2. 在 **todoitem** 中，单击“脚本”选项卡，然后选择“插入”。\n\n    ![][22]\n\n    将显示当 **TodoItem** 表中发生插入时所调用的函数。\n\n3. 将 insert 函数替换为以下代码，然后单击“保存”：\n\n          function insert(item, user, request) {\n          // Execute the request and send notifications.\n             request.execute({\n             success: function() {                      \n              // Create a template-based payload.\n              var payload = '{ \"message\" : \"New item added: ' + item.text + '\" }';            \n\n              // Write the default response and send a notification\n              // to all platforms.            \n              push.send(null, payload, {               \n                  success: function(pushResponse){\n                  console.log(\"Sent push:\", pushResponse);\n                  // Send the default response.\n                  request.respond();\n                  },              \n                  error: function (pushResponse) {\n                      console.log(\"Error Sending push:\", pushResponse);\n                       // Send the an error response.\n                      request.respond(500, { error: pushResponse });\n                      }           \n               });                 \n              }\n           });   \n          }\n\n\n    这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。\n\n   >[AZURE.NOTE]此脚本将延迟发送通知，使你有足够的时间关闭应用程序以接收 toast 通知。\n\n\n###<a id=\"configure-app\"></a>为推送通知配置现有项目\n\n1. 在“解决方案”视图中，展开 Xamarin.Android 应用中的 **Components** 文件夹，确保 Azure 移动服务包已安装。 \n\n2. 右键单击 **Components** 文件夹，单击“获取更多组件...”，搜索 **Google Cloud Messaging 客户端**组件，并将其添加到项目中。\n\n3. 打开 MainActivity.cs 项目文件，将以下 using 语句添加到该类：\n\n        using Gcm.Client;\n\n\n4.  在 **MainActivity** 类中，将以下代码添加到 **OnCreate** 方法中调用 **LoadApplication** 方法的后面：\n            \n            try\n            {\n                // Check to ensure everything's setup right\n                GcmClient.CheckDevice(this);\n                GcmClient.CheckManifest(this);\n\n                // Register for push notifications\n                System.Diagnostics.Debug.WriteLine(\"Registering...\");\n                GcmClient.Register(this, PushHandlerBroadcastReceiver.SENDER_IDS);\n            }\n            catch (Java.Net.MalformedURLException)\n            {\n                CreateAndShowDialog(new Exception(\"There was an error creating the Mobile Service. Verify the URL\"), \"Error\");\n            }\n            catch (Exception e)\n            {\n                CreateAndShowDialog(e, \"Error\");\n            }\n\n你的 **MainActivity** 现已准备就绪，可以添加推送通知了。\n\n###<a id=\"add-push\"></a>向应用程序添加推送通知代码\n\n1. 在 ToDoAzure.Droid 项目中，创建一个名为 `GcmService` 的新类。\n\n2. 将以下 using 语句添加到 **GcmService** 类：\n\n        using Gcm.Client;\n        using Microsoft.WindowsAzure.MobileServices;\n\n3. 在 **using** 语句和 **namespace** 声明之间添加以下权限请求：\n\n        [assembly: Permission(Name = \"@PACKAGE_NAME@.permission.C2D_MESSAGE\")]\n        [assembly: UsesPermission(Name = \"@PACKAGE_NAME@.permission.C2D_MESSAGE\")]\n        [assembly: UsesPermission(Name = \"com.google.android.c2dm.permission.RECEIVE\")]\n\n        //GET_ACCOUNTS is only needed for android versions 4.0.3 and below\n        [assembly: UsesPermission(Name = \"android.permission.GET_ACCOUNTS\")]\n        [assembly: UsesPermission(Name = \"android.permission.INTERNET\")]\n        [assembly: UsesPermission(Name = \"android.permission.WAKE_LOCK\")]\n\n4. 在 **GcmService.cs** 项目文件中，添加以下类：\n \n        [BroadcastReceiver(Permission = Gcm.Client.Constants.PERMISSION_GCM_INTENTS)]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_MESSAGE }, Categories = new string[] { \"@PACKAGE_NAME@\" })]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_REGISTRATION_CALLBACK }, Categories = new string[] { \"@PACKAGE_NAME@\" })]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_LIBRARY_RETRY }, Categories = new string[] { \"@PACKAGE_NAME@\" })]\n\n        public class PushHandlerBroadcastReceiver : GcmBroadcastReceiverBase<GcmService>\n        {\n        \n            public static string[] SENDER_IDS = new string[] { \"<PROJECT_NUMBER>\" };\n\n        }\n\n    在上述代码中，你必须将 _`<PROJECT_NUMBER>`_ 替换为你在 Google 开发人员门户中预配应用时 Google 分配的项目编号。\n\n5. 在 GcmService.cs 项目文件中，添加定义 **GcmService** 类的以下代码：\n \n         [Service]\n         public class GcmService : GcmServiceBase\n         {\n             public static string RegistrationID { get; private set; }\n\n             public GcmService()\n                 : base(PushHandlerBroadcastReceiver.SENDER_IDS){}\n         }\n\n\n    请注意，此类派生自 **GcmServiceBase**，**Service** 属性必须应用于此类。\n\n    >[AZURE.NOTE]**GcmServiceBase** 类实现 **OnRegistered()**、**OnUnRegistered()**、**OnMessage()** 和 **OnError()** 方法。必须在 **GcmService** 类中重写这些方法。\n\n6. 将以下代码添加到 **GcmService** 类，以便重写 **OnRegistered** 事件处理程序。\n\n        protected override void OnRegistered(Context context, string registrationId)\n        {\n            Log.Verbose(PushHandlerBroadcastReceiver.TAG, \"GCM Registered: \" + registrationId);\n            RegistrationID = registrationId;\n\n            createNotification(\"GcmService Registered...\", \"The device has been Registered, Tap to View!\");\n\n            MobileServiceClient client =  MainActivity.DefaultService.todoItemManager.GetClient;\n            \n            var push = client.GetPush();\n\n            MainActivity.DefaultService.RunOnUiThread(() => Register(push, null));\n\n        }\n        public async void Register(Microsoft.WindowsAzure.MobileServices.Push push, IEnumerable<string> tags)\n        {\n            try\n            {\n                const string template = \"{\"data\":{\"message\":\"$(message)\"}}\";\n\n                await push.RegisterTemplateAsync(RegistrationID, template, \"mytemplate\", tags);\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine(ex.Message);\n                Debugger.Break();\n            }\n        }\n\n    此方法使用返回的 GCM 注册 ID 向 Azure 注册以获取推送通知。\n\n7. 在 **GcmService** 中使用以下代码重写 **OnMessage** 方法：\n\n        protected override void OnMessage(Context context, Intent intent)\n        {\n            Log.Info(PushHandlerBroadcastReceiver.TAG, \"GCM Message Received!\");\n\n            var msg = new StringBuilder();\n\n            if (intent != null && intent.Extras != null)\n            {\n                foreach (var key in intent.Extras.KeySet())\n                    msg.AppendLine(key + \"=\" + intent.Extras.Get(key).ToString());\n            }\n\n            //Store the message\n            var prefs = GetSharedPreferences(context.PackageName, FileCreationMode.Private);\n            var edit = prefs.Edit();\n            edit.PutString(\"last_msg\", msg.ToString());\n            edit.Commit();\n\n            string message = intent.Extras.GetString(\"message\");\n            if (!string.IsNullOrEmpty(message))\n            {\n                createNotification(\"New todo item!\", \"Todo item: \" + message);\n                return;\n            }\n\n            string msg2 = intent.Extras.GetString(\"msg\");\n            if (!string.IsNullOrEmpty(msg2))\n            {\n                createNotification(\"New hub message!\", msg2);\n                return;\n            }\n\n            createNotification(\"Unknown message details\", msg.ToString());\n        }\n\n        void createNotification(string title, string desc)\n        {\n            //Create notification\n            var notificationManager = GetSystemService(Context.NotificationService) as NotificationManager;\n\n            //Create an intent to show ui\n            var uiIntent = new Intent(this, typeof(MainActivity));\n\n            //Create the notification\n            var notification = new Notification(Android.Resource.Drawable.SymActionEmail, title);\n\n            //Auto cancel will remove the notification once the user touches it\n            notification.Flags = NotificationFlags.AutoCancel;\n\n            //Set the notification info\n            //we use the pending intent, passing our ui intent over which will get called\n            //when the notification is tapped.\n            notification.SetLatestEventInfo(this, title, desc, PendingIntent.GetActivity(this, 0, uiIntent, 0));\n\n            //Show the notification\n            notificationManager.Notify(1, notification);\n        }\n\n8. 为项目编译所需的 **OnUnRegistered()** 和 **OnError()** 添加以下方法重写。\n    protected override void OnUnRegistered(Context context, string registrationId)\n    {\n          Log.Error(\"GcmService\", \"Unregistered RegisterationId : \" + registrationId);\n    }\n\n        protected override void OnError(Context context, string errorId)\n        {\n              Log.Error(PushHandlerBroadcastReceiver.TAG, \"GCM Error: \" + errorId);\n        }\n\n###<a id=\"test\"></a>在应用程序中测试推送通知\n\n你可以通过以下方式测试应用程序：使用 USB 电缆直接连接 Android 手机，或者在模拟器中使用虚拟设备。\n\n当你在模拟器中运行此应用程序时，请确保使用支持 Google API 的 Android 虚拟设备 (AVD)。\n\n> [AZURE.IMPORTANT]为了接收推送通知，你必须在 Android 虚拟设备上设置 Google 帐户（方法如下：在模拟器中，导航到“设置”，然后单击“添加帐户”）。此外，请确保模拟器已连接到 Internet。\n\n1. 从“工具”中，单击“打开 Android 模拟器管理器”，选择你的设备，然后单击“编辑”。\n    \n    ![][125]\n\n2. 在“目标”中选择“Google API”，然后单击“确定”。\n    \n    ![][126]\n\n3. 在顶部工具栏中，单击“运行”，然后选择你的应用。这将启动模拟器并运行该应用程序。\n\n    应用将从 GCM 检索 *registrationId* 并注册到通知中心。\n\n4. 在应用中，添加新的任务。\n\n5. 从屏幕顶部向下轻扫，打开设备的通知中心以查看通知。\n\n    ![][127]\n\n## <a name=\"Windows\"></a>向 Xamarin.Forms.Windows 应用添加推送通知\n\n本节演示如何使用 Azure 移动服务将推送通知发送到 Xamarin.Forms 解决方案包含的 Windows Phone Silverlight 应用。\n\n###<a id=\"update-app\"></a>更新应用程序以注册通知\n\n只有在你注册通知通道后，你的应用程序才能接收推送通知。\n\n1. 在 Visual Studio 中，打开文件 App.xaml.cs 并添加以下 `using` 语句：\n\n        using Microsoft.Phone.Notification;\n\n2. 将以下代码添加到 App.xaml.cs：\n    \n        public static HttpNotificationChannel CurrentChannel { get; private set; }\n\n        private void AcquirePushChannel()\n        {\n            CurrentChannel = HttpNotificationChannel.Find(\"MyPushChannel\");\n\n            if (CurrentChannel == null)\n            {\n                CurrentChannel = new HttpNotificationChannel(\"MyPushChannel\");\n                CurrentChannel.Open();\n                CurrentChannel.BindToShellToast();\n            }\n\n            CurrentChannel.ChannelUriUpdated +=\n                new EventHandler<NotificationChannelUriEventArgs>(async (o, args) =>\n                {\n\n                   // Register for notifications using the new channel\n                    const string template =\n                    \"<?xml version=\"1.0\" encoding=\"utf-8\"?><wp:Notification \" +\n                    \"xmlns:wp=\"WPNotification\"><wp:Toast><wp:Text1>$(message)</wp:Text1></wp:Toast></wp:Notification>\";\n\n                    await client.GetPush()\n                        .RegisterTemplateAsync(CurrentChannel.ChannelUri.ToString(), template, \"mytemplate\");\n                });\n        }\n\n    此代码检索 ChannelURI 以查找来自 Microsoft 推送通知服务 (MPNS) （由 Windows Phone 8.x \"Silverlight\" 使用）的应用程序， 然后注册该 ChannelURI 以支持推送通知。\n\n    >[AZURE.NOTE]在本教程中，移动服务将向设备发送一条 toast 通知。而当你发送磁贴通知时，必须在通道上调用 **BindToShellTile** 方法。\n\n3. 在 App.xaml.cs 中 **Application\\_Launching** 事件处理程序的顶部，添加对新的 **AcquirePushChannel** 方法的以下调用：\n\n        AcquirePushChannel();\n\n    这可以确保每次加载页时都会请求注册。在应用程序中，你可能只需要定期执行此注册以确保注册是最新的。\n\n4. 按 **F5** 键以运行应用。将显示包含注册密钥的弹出式对话框。\n  \n5.  在解决方案资源管理器中，展开“属性”，打开 WMAppManifest.xml 文件，单击“功能”选项卡并确保选中 **ID\\_\\_\\_CAP\\_\\_\\_PUSH\\_NOTIFICATION** 功能。\n\n    ![在 VS 中启用通知](./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-app-enable-push-wp8.png)\n\n    这可以确保你的应用程序能够引发 toast 通知。\n\n###<a id=\"update-scripts\"></a>更新服务器脚本以发送推送通知\n\n最后，您必须更新注册到 TodoItem 表上的插入操作的脚本，以便发送通知。\n\n1. 在 [Azure 经典门户]中，单击“数据”选项卡，然后单击“TodoItem”表。\n\n    ![][21]\n\n2. 在 **todoitem** 中，单击“脚本”选项卡，然后选择“插入”。\n\n    ![][22]\n\n    将显示当 **TodoItem** 表中发生插入时所调用的函数。\n\n3. 将 insert 函数替换为以下代码，然后单击“保存”：\n          \n          function insert(item, user, request) {\n          // Execute the request and send notifications.\n             request.execute({\n             success: function() {                      \n              // Create a template-based payload.\n              var payload = '{ \"message\" : \"New item added: ' + item.text + '\" }';            \n\n              // Write the default response and send a notification\n              // to all platforms.            \n              push.send(null, payload, {               \n                  success: function(pushResponse){\n                  console.log(\"Sent push:\", pushResponse);\n                  // Send the default response.\n                  request.respond();\n                  },              \n                  error: function (pushResponse) {\n                      console.log(\"Error Sending push:\", pushResponse);\n                       // Send the an error response.\n                      request.respond(500, { error: pushResponse });\n                      }           \n               });                 \n              }\n           });   \n          }\n\n\n    这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。\n\n4. 单击“推送”选项卡，选中“启用未经身份验证的推送通知”，然后单击“保存”。\n\n    这样，移动服务便可以连接到处于未经身份验证模式的 MPNS 以发送推送通知。\n\n    >[AZURE.NOTE]本教程使用未经身份验证模式下的 MPNS。在此模式下，MPNS 将限制可发送到某个设备通道的通知数。若要解除此限制，必须生成一个证书，然后通过单击“上载”并选择该证书来上载该证书。有关生成证书的详细信息，请参阅 [设置已经过身份验证的 Web 服务以便为 Windows Phone 发送推送通知]。\n\n###<a id=\"test\"></a>在应用程序中测试推送通知\n\n1. 在 Visual Studio 中，按 F5 键运行应用程序。\n\n    >[AZURE.NOTE]在 Windows Phone 模拟器测试时，你可能会遇到 401 错误“未授权的 RegistrationAuthorizationException”。由于 Windows Phone 模拟器时钟与主机电脑时钟的同步问题，在调用 `RegisterNativeAsync()` 期间可能会出现此错误。这可能会导致安全令牌被拒绝。若要解决此问题，只需在模拟器中手动设置时钟，然后再开始测试。\n\n2. 在应用中，创建具有标题 **Hello push** 的新任务，然后立即单击“开始”按钮，或者单击“后退”按钮以退出应用。\n\n    此时会将一个插入请求发送到移动服务，以存储添加的项。可以看到，设备收到了一条包含 **hello push** 字样的 toast 通知。\n\n    ![收到的 Toast 通知](./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-quickstart-push5-wp8.png)\n\n    >[AZURE.NOTE]如果你仍未退出应用程序，则不会收到该通知。若要在应用处于活动状态时接收 toast 通知，你必须处理 [ShellToastNotificationReceived](http://msdn.microsoft.com/zh-cn/library/windowsphone/develop/microsoft.phone.notification.httpnotificationchannel.shelltoastnotificationreceived(v=vs.105).aspx) 事件。\n   \n<!-- Anchors. -->\n[Generate the certificate signing request]: #certificates\n[Register your app and enable push notifications]: #register\n[Create a provisioning profile for the app]: #profile\n[Configure Mobile Services]: #configure-mobileServices\n[Configure the Xamarin.iOS App]: #configure-app\n[Update scripts to send push notifications]: #update-scripts\n[Add push notifications to the app]: #add-push\n[Insert data to receive notifications]: #test\n\n<!-- Images. -->\n\n[5]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-step5.png\n[6]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-step6.png\n[7]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-step7.png\n\n[9]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-step9.png\n[10]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-step10.png\n\n[17]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-step17.png\n[18]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-selection.png\n[19]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-push-tab-ios.png\n[20]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-push-tab-ios-upload.png\n[21]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-portal-data-tables.png\n[22]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-insert-script-push2.png\n[23]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-quickstart-push1-ios.png\n[24]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-quickstart-push2-ios.png\n[25]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-quickstart-push3-ios.png\n[26]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-quickstart-push4-ios.png\n[28]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-step18.png\n\n[101]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-01.png\n[102]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-02.png\n[103]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-03.png\n[104]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-04.png\n[105]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-05.png\n[106]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-06.png\n[107]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-07.png\n[108]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-08.png\n\n[110]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-10.png\n[111]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-11.png\n[112]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-12.png\n[113]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-13.png\n[114]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-14.png\n[115]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-15.png\n[116]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-16.png\n[117]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-17.png\n\n[120]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-20.png\n[121]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-21.png\n[122]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-services-ios-push-22.png\n[123]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-data-tab-empty.png\n[124]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/mobile-create-todoitem-table.png\n[125]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/notification-hub-create-android-app7.png\n[126]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/notification-hub-create-android-app8.png\n[127]: ./media/partner-xamarin-mobile-services-xamarin-forms-get-started-push/notification-area-received.png\n\n\n[Xamarin.iOS Studio]: http://xamarin.com/platform\n[Install Xcode]: https://go.microsoft.com/fwLink/p/?LinkID=266532\n[iOS Provisioning Portal]: http://go.microsoft.com/fwlink/p/?LinkId=272456\n[Mobile Services iOS SDK]: https://go.microsoft.com/fwLink/p/?LinkID=266533\n[Apple 推送通知服务]: http://go.microsoft.com/fwlink/p/?LinkId=272584\n[Get started with Mobile Services]: /documentation/articles/mobile-services-ios-get-started\n\n[Xamarin 设备设置]: http://developer.xamarin.com/guides/ios/getting_started/installation/device_provisioning/\n\n\n[Azure 经典门户]: https://manage.windowsazure.cn/\n[apns object]: http://go.microsoft.com/fwlink/p/?LinkId=272333\n[Azure 移动服务组件]: http://components.xamarin.com/view/azure-mobile-services/\n[completed example project]: http://go.microsoft.com/fwlink/p/?LinkId=331303\n[Xamarin.iOS]: http://xamarin.com/download\n[Google Cloud Messaging 客户端组件]: http://components.xamarin.com/view/GCMClient/\n[Xamarin.Forms Azure 推送通知初学者示例]: https://github.com/Azure/mobile-services-samples/tree/master/TodoListXamarinForms\n[已完成的 Xamarin.Forms Azure 推送通知示例]: https://github.com/Azure/mobile-services-samples/tree/master/GettingStartedWithPushXamarinForms\n \n\n<!---HONumber=Mooncake_0118_2016-->"
}