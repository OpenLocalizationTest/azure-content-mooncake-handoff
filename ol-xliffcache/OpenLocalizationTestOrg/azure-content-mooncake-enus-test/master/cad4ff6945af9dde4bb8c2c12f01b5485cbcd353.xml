{
  "nodes": [
    {
      "content": "通过 .NET 使用服务总线主题 | Azure",
      "pos": [
        27,
        51
      ]
    },
    {
      "content": "了解如何在 Azure 中通过 .NET 使用服务总线主题和订阅。代码示例是针对 .NET 应用程序编写的。",
      "pos": [
        70,
        124
      ]
    },
    {
      "content": "如何使用服务总线主题和订阅",
      "pos": [
        339,
        352
      ]
    },
    {
      "pos": [
        445,
        577
      ],
      "content": "本文介绍了如何使用服务总线主题和订阅。相关示例用 C# 编写且使用 .NET API。涉及的应用场景包括创建主题和订阅、创建订阅筛选器、将消息发送到主题、从订阅接收消息以及删除主题和订阅。有关主题和订阅的详细信息，请参阅<bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#Next-steps)</ept>部分。"
    },
    {
      "content": "配置应用程序以使用 Service Bus",
      "pos": [
        742,
        763
      ]
    },
    {
      "content": "在您创建使用 Service Bus 的应用程序时，必须添加对 Service Bus 程序集的引用并包括相应的命名空间。",
      "pos": [
        765,
        826
      ]
    },
    {
      "content": "获取服务总线 NuGet 包",
      "pos": [
        831,
        845
      ]
    },
    {
      "content": "服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。利用 NuGet Visual Studio 扩展，可以轻松地在 Visual Studio 和 Visual Studio Express 中安装和更新库和工具。服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。",
      "pos": [
        847,
        1027
      ]
    },
    {
      "content": "要在你的应用程序中安装 NuGet 包，请执行以下操作：",
      "pos": [
        1029,
        1057
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“引用”，然后单击“管理 NuGet 包”。",
      "pos": [
        1063,
        1101
      ]
    },
    {
      "content": "搜索“服务总线”并选择“Azure 服务总线”项。单击“安装”以完成安装，然后关闭以下对话框。",
      "pos": [
        1106,
        1153
      ]
    },
    {
      "content": "你现在可以为服务总线编写代码。",
      "pos": [
        1167,
        1182
      ]
    },
    {
      "content": "设置服务总线连接字符串",
      "pos": [
        1187,
        1198
      ]
    },
    {
      "content": "服务总线使用连接字符串来存储终结点和凭据。你可以将连接字符串置于配置文件中，而不是对其进行硬编码：",
      "pos": [
        1200,
        1249
      ]
    },
    {
      "content": "当使用 Azure 云服务时，建议你使用 Azure 服务配置系统（.csdef 和 .cscfg 文件）来存储连接字符串。",
      "pos": [
        1253,
        1315
      ]
    },
    {
      "content": "在使用 Azure 网站或 Azure 虚拟机时，建议使用 .NET 配置系统（如 Web.config 文件）来存储连接字符串。",
      "pos": [
        1318,
        1383
      ]
    },
    {
      "pos": [
        1385,
        1464
      ],
      "content": "在上述两种情况下，你都可以使用 <ph id=\"ph1\">`CloudConfigurationManager.GetSetting`</ph> 方法检索连接字符串，本文稍后部分将对此进行介绍。"
    },
    {
      "content": "使用云服务时配置连接字符串",
      "pos": [
        1470,
        1483
      ]
    },
    {
      "pos": [
        1485,
        1604
      ],
      "content": "该服务配置机制是 Azure 云服务项目特有的，它使你能够从 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">][]</ept>动态更改配置设置，而无需重新部署你的应用程序。例如，向服务定义 (****.csdef**) 文件中添加 <ph id=\"ph1\">`Setting`</ph> 标签，如以下示例所示。"
    },
    {
      "content": "然后在服务配置 (.cscfg) 文件中指定值。",
      "pos": [
        1877,
        1901
      ]
    },
    {
      "content": "使用从 Azure 经典门户检索到的共享访问签名 (SAS) 密钥名称和密钥值，如上一部分中所述。",
      "pos": [
        2329,
        2378
      ]
    },
    {
      "content": "在使用 Azure 网站或 Azure 虚拟机时配置连接字符串",
      "pos": [
        2384,
        2415
      ]
    },
    {
      "pos": [
        2417,
        2490
      ],
      "content": "在使用网站或虚拟机时，建议你使用 .NET 配置系统（如 Web.config）。你可以使用 <ph id=\"ph1\">`&lt;appSettings&gt;`</ph> 元素存储连接字符串。"
    },
    {
      "content": "使用从 Azure 经典门户检索到的 SAS 名称和密钥值，如上一部分中所述。",
      "pos": [
        2786,
        2825
      ]
    },
    {
      "content": "创建主题",
      "pos": [
        2830,
        2834
      ]
    },
    {
      "pos": [
        2836,
        2989
      ],
      "content": "你可以通过 <bpt id=\"p1\">[</bpt>NamespaceManager<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 类为服务总线主题和订阅执行管理操作。此类提供了创建、枚举和删除主题的方法。"
    },
    {
      "pos": [
        2991,
        3119
      ],
      "content": "以下示例使用带连接字符串的 Azure <ph id=\"ph1\">`CloudConfigurationManager`</ph> 类构造 <ph id=\"ph2\">`NamespaceManager`</ph> 对象，此连接字符串包含服务总线服务命名空间的基址和有权管理该命名空间的相应 SAS 凭据。此连接字符串的形式如下。"
    },
    {
      "content": "使用以下示例，考虑上一节中的配置设置。",
      "pos": [
        3266,
        3285
      ]
    },
    {
      "pos": [
        3646,
        4005
      ],
      "content": "<bpt id=\"p1\">[</bpt>CreateTopic<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.createtopic.aspx)</ept> 方法存在一些重载，允许你调整主题的属性，例如，将默认的生存时间 (TTL) 值设置为应用于发送到主题的消息。使用 <bpt id=\"p2\">[</bpt>TopicDescription<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicdescription.aspx)</ept> 类应用这些设置。以下示例演示如何创建名为 <bpt id=\"p3\">**</bpt>TestTopic<ept id=\"p3\">**</ept>、最大大小为 5 GB、默认消息 TTL 为 1 分钟的主题。"
    },
    {
      "pos": [
        4523,
        4800
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你可以对 <bpt id=\"p1\">[</bpt>NamespaceManager<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 对象使用 <bpt id=\"p2\">[</bpt>TopicExists<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.topicexists.aspx)</ept> 方法来检查具有指定名称的主题在某个命名空间中是否已存在。"
    },
    {
      "content": "创建订阅",
      "pos": [
        4805,
        4809
      ]
    },
    {
      "pos": [
        4811,
        4973
      ],
      "content": "你还可以使用 <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`NamespaceManager`</ph><ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx)</ept> 类创建主题订阅。订阅已命名，并且具有一个限制传递到订阅的虚拟队列的消息集的可选筛选器。"
    },
    {
      "content": "创建具有默认 (MatchAll) 筛选器的订阅",
      "pos": [
        4979,
        5003
      ]
    },
    {
      "pos": [
        5005,
        5143
      ],
      "content": "<bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> 筛选器是默认筛选器，在创建新订阅时未指定筛选器的情况下使用。当你使用 <bpt id=\"p2\">**</bpt>MatchAll<ept id=\"p2\">**</ept> 筛选器时，发布到主题的所有消息都将置于订阅的虚拟队列中。以下示例创建名为“AllMessages”的订阅，并使用默认的 <bpt id=\"p3\">**</bpt>MatchAll<ept id=\"p3\">**</ept> 筛选器。"
    },
    {
      "content": "创建具有筛选器的订阅",
      "pos": [
        5502,
        5512
      ]
    },
    {
      "content": "还可以设置筛选器，以指定发送到主题的哪些消息应该在特定主题订阅中显示。",
      "pos": [
        5514,
        5549
      ]
    },
    {
      "pos": [
        5551,
        5683
      ],
      "content": "订阅支持的最灵活的一种筛选器是 <bpt id=\"p1\">[</bpt>SqlFilter<ept id=\"p1\">][]</ept> 类，它实现了一部分 SQL92 功能。SQL 筛选器将对发布到主题的消息的属性进行操作。有关可用于 SQL 筛选器的表达式的详细信息，请参阅 <bpt id=\"p2\">[</bpt>SqlFilter.SqlExpression<ept id=\"p2\">][]</ept> 语法。"
    },
    {
      "pos": [
        5685,
        5775
      ],
      "content": "以下示例创建了一个名为 <bpt id=\"p1\">**</bpt>HighMessages<ept id=\"p1\">**</ept> 的订阅，该订阅仅选择具有大于 3 的自定义 <bpt id=\"p2\">**</bpt>MessageNumber<ept id=\"p2\">**</ept> 属性的 <bpt id=\"p3\">[</bpt>SqlFilter<ept id=\"p3\">][]</ept> 对象。"
    },
    {
      "pos": [
        5999,
        6086
      ],
      "content": "类似地，以下示例创建一个名为 <bpt id=\"p1\">**</bpt>LowMessages<ept id=\"p1\">**</ept> 的订阅，其 <bpt id=\"p2\">[</bpt>SqlFilter<ept id=\"p2\">][]</ept> 只选择 <bpt id=\"p3\">**</bpt>MessageNumber<ept id=\"p3\">**</ept> 属性小于或等于 3 的消息："
    },
    {
      "pos": [
        6307,
        6435
      ],
      "content": "现在，当消息发送到 <ph id=\"ph1\">`TestTopic`</ph> 时，始终会将它传送到订阅了 <bpt id=\"p1\">**</bpt>AllMessages<ept id=\"p1\">**</ept> 主题订阅的接收方，并选择性地传送到订阅了 <bpt id=\"p2\">**</bpt>HighMessages<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>LowMessages<ept id=\"p3\">**</ept> 主题订阅的接收方（具体取决于消息内容）。"
    },
    {
      "content": "将消息发送到主题",
      "pos": [
        6440,
        6448
      ]
    },
    {
      "pos": [
        6450,
        6595
      ],
      "content": "若要向服务总线主题发送消息，你的应用程序需要使用连接字符串创建 <bpt id=\"p1\">[</bpt>TopicClient<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> 对象。"
    },
    {
      "pos": [
        6597,
        6908
      ],
      "content": "以下代码演示了如何使用 <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`CreateFromConnectionString`</ph><ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.createfromconnectionstring.aspx)</ept> API 调用为以前创建的 <bpt id=\"p2\">**</bpt>TestTopic<ept id=\"p2\">**</ept> 主题创建 <bpt id=\"p3\">[</bpt>TopicClient<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> 对象。"
    },
    {
      "pos": [
        7162,
        7931
      ],
      "content": "发送到服务总线主题的消息是 <bpt id=\"p1\">[</bpt>BrokeredMessage<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> 类的实例。<bpt id=\"p2\">[</bpt>BrokeredMessage<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> 对象包含一组标准属性（如 <bpt id=\"p3\">[</bpt>Label<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> 和 <bpt id=\"p4\">[</bpt>TimeToLive<ept id=\"p4\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>）、一个用来保存自定义应用程序特定属性的词典以及大量随机应用程序数据。应用程序可通过将任何可序列化对象传入到 <bpt id=\"p5\">[</bpt>BrokeredMessage<ept id=\"p5\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx)</ept> 对象的构造函数中来设置消息的正文，然后将使用适当的 <bpt id=\"p6\">**</bpt>DataContractSerializer<ept id=\"p6\">**</ept> 序列化对象。或者，也可以提供 <bpt id=\"p7\">**</bpt>System.IO.Stream<ept id=\"p7\">**</ept>。"
    },
    {
      "pos": [
        7933,
        8253
      ],
      "content": "以下示例演示了如何将五条测试消息发送到在前面的代码示例中获取的 <bpt id=\"p1\">**</bpt>TestTopic<ept id=\"p1\">**</ept> <bpt id=\"p2\">[</bpt>TopicClient<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.aspx)</ept> 对象。请注意，每条消息的 <bpt id=\"p3\">[</bpt>MessageNumber<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.properties.aspx)</ept> 属性值因循环迭代而异（这将确定哪些订阅接收它）。"
    },
    {
      "pos": [
        8573,
        8818
      ],
      "content": "服务总线主题支持<bpt id=\"p1\">[</bpt>最大为 256 Kb 的消息<ept id=\"p1\">](/documentation/articles/service-bus-quotas)</ept>（标头最大为 64 Kb，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。如果启用了分区，则上限更高。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>分区消息实体<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/dn520246.aspx)</ept>。"
    },
    {
      "content": "如何从订阅接收消息",
      "pos": [
        8823,
        8832
      ]
    },
    {
      "pos": [
        8834,
        9241
      ],
      "content": "从订阅接收消息的建议方法是使用 <bpt id=\"p1\">[</bpt>SubscriptionClient<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.aspx)</ept> 对象。<bpt id=\"p2\">[</bpt>SubscriptionClient<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.aspx)</ept> 对象可在两种不同模式下工作：<bpt id=\"p3\">[</bpt>ReceiveAndDelete 和 PeekLock<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept>。"
    },
    {
      "pos": [
        9243,
        9484
      ],
      "content": "当使用 <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> 模式时，接收是一个单步操作 - 即，当服务总线接收订阅中的消息读取请求时，它会将消息标记为“正在使用”并将其返回给应用程序。<bpt id=\"p2\">**</bpt>ReceiveAndDelete<ept id=\"p2\">**</ept> 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于服务总线会将消息标记为“已使用”，因此当应用程序重新启动并重新开始使用消息时，它会漏掉在发生崩溃前使用的消息。"
    },
    {
      "pos": [
        9486,
        9835
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> 模式（这是默认模式）下，接收过程变成了一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 <bpt id=\"p2\">[</bpt>Complete<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 完成接收过程的第二个阶段。当服务总线发现 <bpt id=\"p3\">**</bpt>Complete<ept id=\"p3\">**</ept> 调用时，它会将消息标记为“正在使用”并将其从订阅中删除。"
    },
    {
      "pos": [
        9837,
        10327
      ],
      "content": "以下示例演示如何使用默认的 <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> 模式接收和处理消息。若要指定不同的 <bpt id=\"p2\">[</bpt>ReceiveMode<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> 值，可以使用 <bpt id=\"p3\">[</bpt>CreateFromConnectionString<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.createfromconnectionstring.aspx)</ept> 的另一个重载。此示例使用 <bpt id=\"p4\">[</bpt>OnMessage<ept id=\"p4\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx)</ept> 回调来处理传入 <bpt id=\"p5\">**</bpt>HighMessages<ept id=\"p5\">**</ept> 订阅的消息。"
    },
    {
      "pos": [
        11341,
        12104
      ],
      "content": "此示例使用 <bpt id=\"p1\">[</bpt>OnMessageOptions<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx)</ept> 对象配置 <bpt id=\"p2\">[</bpt>OnMessage<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx)</ept> 回调。将 <bpt id=\"p3\">[</bpt>AutoComplete<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx)</ept> 设置为 <bpt id=\"p4\">**</bpt>false<ept id=\"p4\">**</ept> 以允许手动控制何时对收到的消息调用 <bpt id=\"p5\">[</bpt>Complete<ept id=\"p5\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept>。将 <bpt id=\"p6\">[</bpt>AutoRenewTimeout<ept id=\"p6\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx)</ept> 设置为 1 分钟，这会导致客户端最多等待消息一分钟，然后调用会超时并且客户端将发出新的调用以检查是否有消息。此属性值会减少客户端无法检索消息时产生的应计费调用次数。"
    },
    {
      "content": "如何处理应用程序崩溃和不可读消息",
      "pos": [
        12109,
        12125
      ]
    },
    {
      "pos": [
        12127,
        12504
      ],
      "content": "Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则可以对收到的消息调用 <bpt id=\"p1\">[</bpt>Abandon<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx)</ept> 方法（而不是 <bpt id=\"p2\">[</bpt>Complete<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 方法）。这会导致服务总线解锁订阅中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。"
    },
    {
      "content": "还存在与订阅中的锁定消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，如果应用程序崩溃），服务总线将自动解锁该消息并使它重新可供接收。",
      "pos": [
        12506,
        12580
      ]
    },
    {
      "pos": [
        12582,
        13006
      ],
      "content": "如果应用程序在处理消息之后，但在发出 <bpt id=\"p1\">[</bpt>Complete<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)</ept> 请求之前发生崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作<bpt id=\"p2\">*</bpt>至少处理一次<ept id=\"p2\">*</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 <bpt id=\"p3\">[</bpt>MessageId<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx)</ept> 属性来实现，该属性在多次传送尝试中保持不变。"
    },
    {
      "content": "删除主题和订阅",
      "pos": [
        13011,
        13018
      ]
    },
    {
      "pos": [
        13020,
        13077
      ],
      "content": "以下示例演示了如何从 <bpt id=\"p1\">**</bpt>HowToSample<ept id=\"p1\">**</ept> 服务命名空间中删除名为 <bpt id=\"p2\">**</bpt>TestTopic<ept id=\"p2\">**</ept> 的主题。"
    },
    {
      "pos": [
        13148,
        13233
      ],
      "content": "删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。以下代码演示如何从 <bpt id=\"p1\">**</bpt>TestTopic<ept id=\"p1\">**</ept> 主题中删除名为 <bpt id=\"p2\">**</bpt>HighMessages<ept id=\"p2\">**</ept> 的订阅。"
    },
    {
      "content": "后续步骤",
      "pos": [
        13313,
        13317
      ]
    },
    {
      "content": "现在，您已了解有关 Service Bus 主题和订阅的基础知识，单击下面的链接可了解更多信息。",
      "pos": [
        13319,
        13367
      ]
    },
    {
      "pos": [
        13373,
        13389
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>队列、主题和订阅<ept id=\"p1\">][]</ept>。"
    },
    {
      "pos": [
        13394,
        13417
      ],
      "content": "<bpt id=\"p1\">[</bpt>SqlFilter<ept id=\"p1\">][]</ept> 的 API 参考。"
    },
    {
      "pos": [
        13422,
        13474
      ],
      "content": "构建向服务总线队列发送消息以及从中接收消息的工作应用程序：<bpt id=\"p1\">[</bpt>服务总线中转消息传送 .NET 教程<ept id=\"p1\">][]</ept>。"
    },
    {
      "pos": [
        13479,
        13556
      ],
      "content": "服务总线示例：从 <bpt id=\"p1\">[</bpt>Azure 示例<ept id=\"p1\">][]</ept>下载，或参阅<bpt id=\"p2\">[</bpt>概述<ept id=\"p2\">](/documentation/articles/service-bus-samples)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"通过 .NET 使用服务总线主题 | Azure\"\n    description=\"了解如何在 Azure 中通过 .NET 使用服务总线主题和订阅。代码示例是针对 .NET 应用程序编写的。\"\n    services=\"service-bus\"\n    documentationCenter=\".net\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.date=\"10/15/2015\"\n    wacn.date=\"02/26/2016\"/>\n\n# 如何使用服务总线主题和订阅\n\n[AZURE.INCLUDE [service-bus-selector-topics](../includes/service-bus-selector-topics.md)]\n\n本文介绍了如何使用服务总线主题和订阅。相关示例用 C# 编写且使用 .NET API。涉及的应用场景包括创建主题和订阅、创建订阅筛选器、将消息发送到主题、从订阅接收消息以及删除主题和订阅。有关主题和订阅的详细信息，请参阅[后续步骤](#Next-steps)部分。\n\n[AZURE.INCLUDE [create-account-note](../includes/create-account-note.md)]\n\n[AZURE.INCLUDE [howto-service-bus-topics](../includes/howto-service-bus-topics.md)]\n\n## 配置应用程序以使用 Service Bus\n\n在您创建使用 Service Bus 的应用程序时，必须添加对 Service Bus 程序集的引用并包括相应的命名空间。\n\n## 获取服务总线 NuGet 包\n\n服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。利用 NuGet Visual Studio 扩展，可以轻松地在 Visual Studio 和 Visual Studio Express 中安装和更新库和工具。服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。\n\n要在你的应用程序中安装 NuGet 包，请执行以下操作：\n\n1.  在解决方案资源管理器中，右键单击“引用”，然后单击“管理 NuGet 包”。\n2.  搜索“服务总线”并选择“Azure 服务总线”项。单击“安装”以完成安装，然后关闭以下对话框。\n\n    ![][7]\n\n你现在可以为服务总线编写代码。\n\n## 设置服务总线连接字符串\n\n服务总线使用连接字符串来存储终结点和凭据。你可以将连接字符串置于配置文件中，而不是对其进行硬编码：\n\n- 当使用 Azure 云服务时，建议你使用 Azure 服务配置系统（.csdef 和 .cscfg 文件）来存储连接字符串。\n- 在使用 Azure 网站或 Azure 虚拟机时，建议使用 .NET 配置系统（如 Web.config 文件）来存储连接字符串。\n\n在上述两种情况下，你都可以使用 `CloudConfigurationManager.GetSetting` 方法检索连接字符串，本文稍后部分将对此进行介绍。\n\n### 使用云服务时配置连接字符串\n\n该服务配置机制是 Azure 云服务项目特有的，它使你能够从 [Azure 经典门户][]动态更改配置设置，而无需重新部署你的应用程序。例如，向服务定义 (****.csdef**) 文件中添加 `Setting` 标签，如以下示例所示。\n\n```\n<ServiceDefinition name=\"WindowsAzure1\">\n...\n    <WebRole name=\"MyRole\" vmsize=\"Small\">\n        <ConfigurationSettings>\n            <Setting name=\"Microsoft.ServiceBus.ConnectionString\" />\n        </ConfigurationSettings>\n    </WebRole>\n...\n</ServiceDefinition>\n```\n\n然后在服务配置 (.cscfg) 文件中指定值。\n\n```\n<ServiceConfiguration serviceName=\"WindowsAzure1\">\n...\n    <Role name=\"MyRole\">\n        <ConfigurationSettings>\n            <Setting name=\"Microsoft.ServiceBus.ConnectionString\"\n                     value=\"Endpoint=sb://yourServiceNamespace.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\" />\n        </ConfigurationSettings>\n    </Role>\n...\n</ServiceConfiguration>\n```\n\n使用从 Azure 经典门户检索到的共享访问签名 (SAS) 密钥名称和密钥值，如上一部分中所述。\n\n### 在使用 Azure 网站或 Azure 虚拟机时配置连接字符串\n\n在使用网站或虚拟机时，建议你使用 .NET 配置系统（如 Web.config）。你可以使用 `<appSettings>` 元素存储连接字符串。\n\n```\n<configuration>\n    <appSettings>\n        <add key=\"Microsoft.ServiceBus.ConnectionString\"\n             value=\"Endpoint=sb://yourServiceNamespace.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\" />\n    </appSettings>\n</configuration>\n```\n\n使用从 Azure 经典门户检索到的 SAS 名称和密钥值，如上一部分中所述。\n\n## 创建主题\n\n你可以通过 [NamespaceManager](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx) 类为服务总线主题和订阅执行管理操作。此类提供了创建、枚举和删除主题的方法。\n\n以下示例使用带连接字符串的 Azure `CloudConfigurationManager` 类构造 `NamespaceManager` 对象，此连接字符串包含服务总线服务命名空间的基址和有权管理该命名空间的相应 SAS 凭据。此连接字符串的形式如下。\n\n```\nEndpoint=sb://<yourServiceNamespace>.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\n```\n\n使用以下示例，考虑上一节中的配置设置。\n\n```\n// Create the topic if it does not exist already.\nstring connectionString =\n    CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\nvar namespaceManager =\n    NamespaceManager.CreateFromConnectionString(connectionString);\n\nif (!namespaceManager.TopicExists(\"TestTopic\"))\n{\n    namespaceManager.CreateTopic(\"TestTopic\");\n}\n```\n\n[CreateTopic](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.createtopic.aspx) 方法存在一些重载，允许你调整主题的属性，例如，将默认的生存时间 (TTL) 值设置为应用于发送到主题的消息。使用 [TopicDescription](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicdescription.aspx) 类应用这些设置。以下示例演示如何创建名为 **TestTopic**、最大大小为 5 GB、默认消息 TTL 为 1 分钟的主题。\n\n```\n// Configure Topic Settings.\nTopicDescription td = new TopicDescription(\"TestTopic\");\ntd.MaxSizeInMegabytes = 5120;\ntd.DefaultMessageTimeToLive = new TimeSpan(0, 1, 0);\n\n// Create a new Topic with custom settings.\nstring connectionString =\n    CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\nvar namespaceManager =\n    NamespaceManager.CreateFromConnectionString(connectionString);\n\nif (!namespaceManager.TopicExists(\"TestTopic\"))\n{\n    namespaceManager.CreateTopic(td);\n}\n```\n\n> [AZURE.NOTE]你可以对 [NamespaceManager](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx) 对象使用 [TopicExists](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.topicexists.aspx) 方法来检查具有指定名称的主题在某个命名空间中是否已存在。\n\n## 创建订阅\n\n你还可以使用 [`NamespaceManager`](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx) 类创建主题订阅。订阅已命名，并且具有一个限制传递到订阅的虚拟队列的消息集的可选筛选器。\n\n### 创建具有默认 (MatchAll) 筛选器的订阅\n\n**MatchAll** 筛选器是默认筛选器，在创建新订阅时未指定筛选器的情况下使用。当你使用 **MatchAll** 筛选器时，发布到主题的所有消息都将置于订阅的虚拟队列中。以下示例创建名为“AllMessages”的订阅，并使用默认的 **MatchAll** 筛选器。\n\n```\nstring connectionString =\n    CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\nvar namespaceManager =\n    NamespaceManager.CreateFromConnectionString(connectionString);\n\nif (!namespaceManager.SubscriptionExists(\"TestTopic\", \"AllMessages\"))\n{\n    namespaceManager.CreateSubscription(\"TestTopic\", \"AllMessages\");\n}\n```\n\n### 创建具有筛选器的订阅\n\n还可以设置筛选器，以指定发送到主题的哪些消息应该在特定主题订阅中显示。\n\n订阅支持的最灵活的一种筛选器是 [SqlFilter][] 类，它实现了一部分 SQL92 功能。SQL 筛选器将对发布到主题的消息的属性进行操作。有关可用于 SQL 筛选器的表达式的详细信息，请参阅 [SqlFilter.SqlExpression][] 语法。\n\n以下示例创建了一个名为 **HighMessages** 的订阅，该订阅仅选择具有大于 3 的自定义 **MessageNumber** 属性的 [SqlFilter][] 对象。\n\n```\n// Create a \"HighMessages\" filtered subscription.\nSqlFilter highMessagesFilter =\n   new SqlFilter(\"MessageNumber > 3\");\n\nnamespaceManager.CreateSubscription(\"TestTopic\",\n   \"HighMessages\",\n   highMessagesFilter);\n```\n\n类似地，以下示例创建一个名为 **LowMessages** 的订阅，其 [SqlFilter][] 只选择 **MessageNumber** 属性小于或等于 3 的消息：\n\n```\n// Create a \"LowMessages\" filtered subscription.\nSqlFilter lowMessagesFilter =\n   new SqlFilter(\"MessageNumber <= 3\");\n\nnamespaceManager.CreateSubscription(\"TestTopic\",\n   \"LowMessages\",\n   lowMessagesFilter);\n```\n\n现在，当消息发送到 `TestTopic` 时，始终会将它传送到订阅了 **AllMessages** 主题订阅的接收方，并选择性地传送到订阅了 **HighMessages** 和 **LowMessages** 主题订阅的接收方（具体取决于消息内容）。\n\n## 将消息发送到主题\n\n若要向服务总线主题发送消息，你的应用程序需要使用连接字符串创建 [TopicClient](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.aspx) 对象。\n\n以下代码演示了如何使用 [`CreateFromConnectionString`](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.createfromconnectionstring.aspx) API 调用为以前创建的 **TestTopic** 主题创建 [TopicClient](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.aspx) 对象。\n\n```\nstring connectionString =\n    CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\nTopicClient Client =\n    TopicClient.CreateFromConnectionString(connectionString, \"TestTopic\");\n\nClient.Send(new BrokeredMessage());\n```\n\n发送到服务总线主题的消息是 [BrokeredMessage](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx) 类的实例。[BrokeredMessage](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx) 对象包含一组标准属性（如 [Label](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx) 和 [TimeToLive](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)）、一个用来保存自定义应用程序特定属性的词典以及大量随机应用程序数据。应用程序可通过将任何可序列化对象传入到 [BrokeredMessage](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx) 对象的构造函数中来设置消息的正文，然后将使用适当的 **DataContractSerializer** 序列化对象。或者，也可以提供 **System.IO.Stream**。\n\n以下示例演示了如何将五条测试消息发送到在前面的代码示例中获取的 **TestTopic** [TopicClient](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.aspx) 对象。请注意，每条消息的 [MessageNumber](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.properties.aspx) 属性值因循环迭代而异（这将确定哪些订阅接收它）。\n\n```\nfor (int i=0; i<5; i++)\n{\n  // Create message, passing a string message for the body.\n  BrokeredMessage message = new BrokeredMessage(\"Test message \" + i);\n\n  // Set additional custom app-specific property.\n  message.Properties[\"MessageNumber\"] = i;\n\n  // Send message to the topic.\n  Client.Send(message);\n}\n```\n\n服务总线主题支持[最大为 256 Kb 的消息](/documentation/articles/service-bus-quotas)（标头最大为 64 Kb，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。如果启用了分区，则上限更高。有关详细信息，请参阅[分区消息实体](https://msdn.microsoft.com/zh-cn/library/azure/dn520246.aspx)。\n\n## 如何从订阅接收消息\n\n从订阅接收消息的建议方法是使用 [SubscriptionClient](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.aspx) 对象。[SubscriptionClient](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.aspx) 对象可在两种不同模式下工作：[ReceiveAndDelete 和 PeekLock](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)。\n\n当使用 **ReceiveAndDelete** 模式时，接收是一个单步操作 - 即，当服务总线接收订阅中的消息读取请求时，它会将消息标记为“正在使用”并将其返回给应用程序。**ReceiveAndDelete** 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于服务总线会将消息标记为“已使用”，因此当应用程序重新启动并重新开始使用消息时，它会漏掉在发生崩溃前使用的消息。\n\n在 **PeekLock** 模式（这是默认模式）下，接收过程变成了一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 [Complete](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) 完成接收过程的第二个阶段。当服务总线发现 **Complete** 调用时，它会将消息标记为“正在使用”并将其从订阅中删除。\n\n以下示例演示如何使用默认的 **PeekLock** 模式接收和处理消息。若要指定不同的 [ReceiveMode](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx) 值，可以使用 [CreateFromConnectionString](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.createfromconnectionstring.aspx) 的另一个重载。此示例使用 [OnMessage](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx) 回调来处理传入 **HighMessages** 订阅的消息。\n\n```\nstring connectionString =\n    CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\nSubscriptionClient Client =\n    SubscriptionClient.CreateFromConnectionString\n            (connectionString, \"TestTopic\", \"HighMessages\");\n\n// Configure the callback options.\nOnMessageOptions options = new OnMessageOptions();\noptions.AutoComplete = false;\noptions.AutoRenewTimeout = TimeSpan.FromMinutes(1);\n\nClient.OnMessage((message) =>\n{\n    try\n    {\n        // Process message from subscription.\n        Console.WriteLine(\"\\n**High Messages**\");\n        Console.WriteLine(\"Body: \" + message.GetBody<string>());\n        Console.WriteLine(\"MessageID: \" + message.MessageId);\n        Console.WriteLine(\"Message Number: \" +\n            message.Properties[\"MessageNumber\"]);\n\n        // Remove message from subscription.\n        message.Complete();\n    }\n    catch (Exception)\n    {\n        // Indicates a problem, unlock message in subscription.\n        message.Abandon();\n    }\n}, options);\n```\n\n此示例使用 [OnMessageOptions](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx) 对象配置 [OnMessage](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.subscriptionclient.onmessage.aspx) 回调。将 [AutoComplete](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx) 设置为 **false** 以允许手动控制何时对收到的消息调用 [Complete](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx)。将 [AutoRenewTimeout](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx) 设置为 1 分钟，这会导致客户端最多等待消息一分钟，然后调用会超时并且客户端将发出新的调用以检查是否有消息。此属性值会减少客户端无法检索消息时产生的应计费调用次数。\n\n## 如何处理应用程序崩溃和不可读消息\n\nService Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则可以对收到的消息调用 [Abandon](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx) 方法（而不是 [Complete](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) 方法）。这会导致服务总线解锁订阅中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。\n\n还存在与订阅中的锁定消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，如果应用程序崩溃），服务总线将自动解锁该消息并使它重新可供接收。\n\n如果应用程序在处理消息之后，但在发出 [Complete](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx) 请求之前发生崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作*至少处理一次*，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 [MessageId](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx) 属性来实现，该属性在多次传送尝试中保持不变。\n\n## 删除主题和订阅\n\n以下示例演示了如何从 **HowToSample** 服务命名空间中删除名为 **TestTopic** 的主题。\n\n```\n// Delete Topic.\nnamespaceManager.DeleteTopic(\"TestTopic\");\n```\n\n删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。以下代码演示如何从 **TestTopic** 主题中删除名为 **HighMessages** 的订阅。\n\n```\nnamespaceManager.DeleteSubscription(\"TestTopic\", \"HighMessages\");\n```\n\n## 后续步骤\n\n现在，您已了解有关 Service Bus 主题和订阅的基础知识，单击下面的链接可了解更多信息。\n\n-   请参阅[队列、主题和订阅][]。\n-   [SqlFilter][] 的 API 参考。\n-   构建向服务总线队列发送消息以及从中接收消息的工作应用程序：[服务总线中转消息传送 .NET 教程][]。\n-   服务总线示例：从 [Azure 示例][]下载，或参阅[概述](/documentation/articles/service-bus-samples)。\n\n  [Azure 经典门户]: http://manage.windowsazure.cn\n\n  [7]: ./media/service-bus-dotnet-how-to-use-topics-subscriptions/getting-started-multi-tier-13.png\n  \n  [队列、主题和订阅]: /documentation/articles/service-bus-queues-topics-subscriptions\n  [SqlFilter]: http://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.sqlfilter.aspx\n  [SqlFilter.SqlExpression]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx\n  [服务总线中转消息传送 .NET 教程]: /documentation/articles/service-bus-brokered-tutorial-dotnet\n  [Azure 示例]: https://code.msdn.microsoft.com/site/search?query=service%20bus&f%5B0%5D.Value=service%20bus&f%5B0%5D.Type=SearchText&ac=2\n\n<!---HONumber=Mooncake_0215_2016-->"
}