{
  "nodes": [
    {
      "content": "如何通过 WebJobs SDK 使用 Azure Blob 存储",
      "pos": [
        28,
        61
      ]
    },
    {
      "content": "如何通过 WebJobs SDK 使用 Azure Blob 存储在新 Blob 出现在容器中时触发进程并处理“有害 Blob”。",
      "pos": [
        81,
        146
      ]
    },
    {
      "content": "如何通过 WebJobs SDK 使用 Azure Blob 存储",
      "pos": [
        388,
        421
      ]
    },
    {
      "content": "概述",
      "pos": [
        426,
        428
      ]
    },
    {
      "pos": [
        430,
        557
      ],
      "content": "本指南提供 C# 代码示例，用于演示如何在创建或更新 Azure Blob 后触发进程。这些代码示例使用 <bpt id=\"p1\">[</bpt>WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 版本 1.x。"
    },
    {
      "pos": [
        559,
        690
      ],
      "content": "有关演示如何创建 Blob 的代码示例，请参阅<bpt id=\"p1\">[</bpt>如何通过 WebJobs SDK 使用 Azure 队列存储<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to)</ept>。"
    },
    {
      "pos": [
        700,
        976
      ],
      "content": "本指南假设你了解<bpt id=\"p1\">[</bpt>如何使用指向存储帐户的连接字符串在 Visual Studio 中创建 WebJob 项目<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)</ept>或创建<bpt id=\"p2\">[</bpt>多个存储帐户<ept id=\"p2\">](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)</ept>。"
    },
    {
      "pos": [
        981,
        1021
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"trigger\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 如何在创建或更新 Blob 后触发函数"
    },
    {
      "pos": [
        1023,
        1050
      ],
      "content": "本部分说明如何使用 <ph id=\"ph1\">`BlobTrigger`</ph> 属性。"
    },
    {
      "pos": [
        1054,
        1317
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>WebJobs SDK 会扫描日志文件，以观察新的或更改的 blob。此过程非常缓慢；创建 blob 之后数分钟或更长时间内可能仍不会触发函数。如果你的应用程序需要立即处理 blob，推荐的方法是在创建该 blob 时创建队列消息，并在处理该 blob 的函数上使用 <bpt id=\"p2\">[</bpt>QueueTrigger<ept id=\"p2\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#trigger)</ept> 属性（而非 <ph id=\"ph1\">`BlobTrigger`</ph> 属性）。"
    },
    {
      "content": "Blob 名称和扩展名的单个占位符",
      "pos": [
        1323,
        1340
      ]
    },
    {
      "pos": [
        1344,
        1384
      ],
      "content": "以下代码示例将 <bpt id=\"p1\">*</bpt>输入<ept id=\"p1\">*</ept> 容器中显示的文本 blob 复制到 <bpt id=\"p2\">*</bpt>输出<ept id=\"p2\">*</ept> 容器中："
    },
    {
      "pos": [
        1586,
        1702
      ],
      "content": "属性构造函数采用指定容器名称的字符串参数和 Blob 名称的占位符。在此示例中，如果在 <bpt id=\"p1\">*</bpt>输入<ept id=\"p1\">*</ept> 容器中创建了名为 <bpt id=\"p2\">*</bpt>Blob1.txt<ept id=\"p2\">*</ept> 的 blob，则该函数将在 <bpt id=\"p3\">*</bpt>输出<ept id=\"p3\">*</ept> 容器中创建名为 <bpt id=\"p4\">*</bpt>Blob1.txt<ept id=\"p4\">*</ept> 的 blob。"
    },
    {
      "content": "你可以指定包含 Blob 名称占位符的名称模式，如以下代码示例中所示：",
      "pos": [
        1704,
        1739
      ]
    },
    {
      "pos": [
        1955,
        2052
      ],
      "content": "此代码只会复制名称以“original-”开头的 Blob。例如，将 <bpt id=\"p1\">*</bpt>输入<ept id=\"p1\">*</ept> 容器中的 <bpt id=\"p2\">*</bpt>original-Blob1.txt<ept id=\"p2\">*</ept> 复制到 <bpt id=\"p3\">*</bpt>输出<ept id=\"p3\">*</ept> 容器中的 <bpt id=\"p4\">*</bpt>copy-Blob1.txt<ept id=\"p4\">*</ept>。"
    },
    {
      "pos": [
        2054,
        2126
      ],
      "content": "如果你需要指定的名称中包含大括号的 Blob 名称的名称模式，增加大括号。例如，如果你想要在 <bpt id=\"p1\">*</bpt>映像<ept id=\"p1\">*</ept> 容器中查找具有以下类似名称的 blob："
    },
    {
      "content": "为模式使用以下代码：",
      "pos": [
        2162,
        2172
      ]
    },
    {
      "pos": [
        2210,
        2244
      ],
      "content": "在示例中， <bpt id=\"p1\">*</bpt>名称<ept id=\"p1\">*</ept> 占位符值将为 <bpt id=\"p2\">*</bpt>soundfile.mp3<ept id=\"p2\">*</ept>。"
    },
    {
      "content": "单独的 Blob 名称和扩展名占位符",
      "pos": [
        2250,
        2268
      ]
    },
    {
      "pos": [
        2270,
        2367
      ],
      "content": "以下代码示例在将 <bpt id=\"p1\">*</bpt>输入<ept id=\"p1\">*</ept> 容器中显示的 blob 复制到 <bpt id=\"p2\">*</bpt>输出<ept id=\"p2\">*</ept> 容器中时更改文件扩展名。该代码将记录 <bpt id=\"p3\">*</bpt>输入<ept id=\"p3\">*</ept> blob 的扩展名，并将 <bpt id=\"p4\">*</bpt>输出<ept id=\"p4\">*</ept> blob 的扩展名设置为 <bpt id=\"p5\">*</bpt>.txt<ept id=\"p5\">*</ept>。"
    },
    {
      "pos": [
        2777,
        2809
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"types\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 可绑定到 blob 的类型"
    },
    {
      "pos": [
        2811,
        2837
      ],
      "content": "可对以下类型使用 <ph id=\"ph1\">`BlobTrigger`</ph> 属性："
    },
    {
      "pos": [
        3039,
        3081
      ],
      "content": "<bpt id=\"p1\">[</bpt>ICloudBlobStreamBinder<ept id=\"p1\">](#icbsb)</ept> 反序列化的其他类型"
    },
    {
      "pos": [
        3084,
        3142
      ],
      "content": "如果你想要直接使用 Azure 存储帐户，则还可以向方法签名添加 <ph id=\"ph1\">`CloudStorageAccount`</ph> 参数。"
    },
    {
      "pos": [
        3144,
        3334
      ],
      "content": "有关示例，请参阅 <bpt id=\"p1\">[</bpt>GitHub.com 上 azure-webjobs-sdk 存储库中的 blob 绑定代码<ept id=\"p1\">](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/BlobBindingEndToEndTests.cs)</ept>。"
    },
    {
      "pos": [
        3339,
        3379
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"string\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 通过绑定到字符串获取文本 blob 内容"
    },
    {
      "pos": [
        3381,
        3510
      ],
      "content": "如果需要文本 blob，可将 <ph id=\"ph1\">`BlobTrigger`</ph> 应用到 <ph id=\"ph2\">`string`</ph> 参数。以下代码示例将文本 blob 绑定到名为 <ph id=\"ph3\">`logMessage`</ph> 的 <ph id=\"ph4\">`string`</ph> 参数。函数使用该参数将 Blob 的内容写入 WebJobs SDK 仪表板。"
    },
    {
      "pos": [
        3820,
        3878
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"icbsb\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 使用 ICloudBlobStreamBinder 获取序列化 blob 内容"
    },
    {
      "pos": [
        3880,
        3964
      ],
      "content": "以下代码示例使用实现 <ph id=\"ph1\">`ICloudBlobStreamBinder`</ph> 的类来启用 <ph id=\"ph2\">`BlobTrigger`</ph> 属性，将 blob 绑定到 <ph id=\"ph3\">`WebImage`</ph> 类型。"
    },
    {
      "pos": [
        4675,
        4744
      ],
      "content": "派生自 <ph id=\"ph1\">`ICloudBlobStreamBinder`</ph> 的 <ph id=\"ph2\">`WebImageBinder`</ph> 类中提供 <ph id=\"ph3\">`WebImage`</ph> 绑定代码。"
    },
    {
      "pos": [
        5382,
        5413
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"poison\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 如何处理有害 blob"
    },
    {
      "pos": [
        5415,
        5599
      ],
      "content": "当 <ph id=\"ph1\">`BlobTrigger`</ph> 函数失败时，如果失败是暂时性错误导致的，则 SDK 会再次调用该函数。如果失败是由 Blob 的内容导致的，则该函数每次尝试处理 Blob 时都会失败。默认情况下，对于给定的 Blob，SDK 调用一个函数最多 5 次。如果第五次尝试失败，SDK 会将消息添加到名为 <bpt id=\"p1\">*</bpt>webjobs-blobtrigger-poison<ept id=\"p1\">*</ept> 的队列中。"
    },
    {
      "pos": [
        5601,
        5743
      ],
      "content": "最大尝试次数可配置。将使用相同的 <bpt id=\"p1\">[</bpt>MaxDequeueCount<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#configqueue)</ept> 设置处理有害 blob 和有害队列消息。"
    },
    {
      "content": "有害 Blob 的队列消息是包含以下属性的 JSON 对象：",
      "pos": [
        5745,
        5775
      ]
    },
    {
      "pos": [
        5779,
        5868
      ],
      "content": "FunctionId（格式为 <bpt id=\"p1\">*</bpt>{WebJob name}<ept id=\"p1\">*</ept>.Functions.<bpt id=\"p2\">*</bpt>{Function name}<ept id=\"p2\">*</ept>，例如 WebJob1.Functions.CopyBlob）"
    },
    {
      "content": "BlobType（\"BlockBlob\" 或 \"PageBlob\"）",
      "pos": [
        5871,
        5905
      ]
    },
    {
      "content": "ContainerName",
      "pos": [
        5908,
        5921
      ]
    },
    {
      "content": "BlobName",
      "pos": [
        5924,
        5932
      ]
    },
    {
      "content": "ETag（blob 版本标识符，例如：\"0x8D1DC6E70A277EF\"）",
      "pos": [
        5935,
        5974
      ]
    },
    {
      "pos": [
        5976,
        6078
      ],
      "content": "在下面的代码示例中，<ph id=\"ph1\">`CopyBlob`</ph> 函数的代码导致它每次调用时都失败。SDK 进行最大重试次数的调用之后，病毒 blob 队列中会创建消息，该消息通过 <ph id=\"ph2\">`LogPoisonBlob`</ph> 函数进行处理。"
    },
    {
      "pos": [
        6882,
        6927
      ],
      "content": "SDK 自动反序列化 JSON 消息。下面是 <ph id=\"ph1\">`PoisonBlobMessage`</ph> 类："
    },
    {
      "pos": [
        7241,
        7271
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"polling\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Blob 轮询算法"
    },
    {
      "pos": [
        7273,
        7386
      ],
      "content": "启动应用程序时，WebJobs SDK 将扫描 <ph id=\"ph1\">`BlobTrigger`</ph> 属性指定的所有容器。在大型存储帐户中，此扫描可能需要一些时间，因此在查找新 blob 和执行 <ph id=\"ph2\">`BlobTrigger`</ph> 函数之前，可能需要一段时间。"
    },
    {
      "pos": [
        7388,
        7516
      ],
      "content": "若要在应用程序启动后检测新的或已更改的 Blob，SDK 会定期读取从 Blob 存储日志。blob 日志将进行缓冲，仅每隔 10 分钟左右获取物理写入，因此创建或更新 blob 后可能存在很长的延迟，然后才会执行对应的 <ph id=\"ph1\">`BlobTrigger`</ph> 函数。"
    },
    {
      "pos": [
        7518,
        7734
      ],
      "content": "使用 <ph id=\"ph1\">`Blob`</ph> 属性创建的 blob 出现异常。当 WebJobs SDK 创建新 blob 时，会立即将新的 blob 传递给任何匹配的 <ph id=\"ph2\">`BlobTrigger`</ph> 函数。因此，如果建立了 Blob 输入和输出的链接，则 SDK 可以高效地处理它们。但是，如果您想要对通过其他方式创建或更新的 blob 降低运行 blob 处理功能的延迟时间，我们建议使用 <ph id=\"ph3\">`QueueTrigger`</ph>（而不是 <ph id=\"ph4\">`BlobTrigger`</ph>）。"
    },
    {
      "pos": [
        7740,
        7769
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"receipts\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Blob 回执"
    },
    {
      "pos": [
        7771,
        7867
      ],
      "content": "WebJobs SDK 确保没有为相同的新 blob 或更新 blob 多次调用 <ph id=\"ph1\">`BlobTrigger`</ph> 函数。为此，它会维护 <bpt id=\"p1\">*</bpt>blob 回执<ept id=\"p1\">*</ept>，以确定是否已处理给定的 blob 版本。"
    },
    {
      "pos": [
        7869,
        7964
      ],
      "content": "Blob 回执在 AzureWebJobsStorage 连接字符串指定的 Azure 存储帐户中名为 <bpt id=\"p1\">*</bpt>azure-webjobs-hosts<ept id=\"p1\">*</ept> 的容器内存储。Blob 回执包含以下信息："
    },
    {
      "pos": [
        7968,
        8059
      ],
      "content": "为 blob 调用的函数（\"<bpt id=\"p1\">*</bpt>{WebJob name}<ept id=\"p1\">*</ept>.Functions.<bpt id=\"p2\">*</bpt>{Function name}<ept id=\"p2\">*</ept>\"，例如 \"WebJob1.Functions.CopyBlob\"）"
    },
    {
      "content": "容器名称",
      "pos": [
        8062,
        8066
      ]
    },
    {
      "content": "Blob 类型（\"BlockBlob\" 或 \"PageBlob\"）",
      "pos": [
        8069,
        8102
      ]
    },
    {
      "content": "Blob 名称",
      "pos": [
        8105,
        8112
      ]
    },
    {
      "content": "ETag（blob 版本标识符，例如：\"0x8D1DC6E70A277EF\"）",
      "pos": [
        8115,
        8154
      ]
    },
    {
      "pos": [
        8156,
        8226
      ],
      "content": "如果您想要强制重新处理某个 blob，则可以从 <bpt id=\"p1\">*</bpt>azure-webjobs-hosts<ept id=\"p1\">*</ept> 容器中手动删除该 blob 的 blob 回执。"
    },
    {
      "pos": [
        8231,
        8262
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"queues\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 队列文章涵盖的相关主题"
    },
    {
      "pos": [
        8264,
        8431
      ],
      "content": "有关如何处理队列消息触发的 blob 处理，或者不特定于 blob 处理的 WebJobs SDK 方案的信息，请参阅<bpt id=\"p1\">[</bpt>如何通过 WebJobs SDK 使用 Azure 队列存储<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to)</ept>。"
    },
    {
      "content": "该文章涵盖的相关主题包括：",
      "pos": [
        8433,
        8446
      ]
    },
    {
      "content": "异步函数",
      "pos": [
        8450,
        8454
      ]
    },
    {
      "content": "多个实例",
      "pos": [
        8457,
        8461
      ]
    },
    {
      "content": "正常关闭",
      "pos": [
        8464,
        8468
      ]
    },
    {
      "content": "在函数正文中使用 WebJobs SDK 属性",
      "pos": [
        8471,
        8494
      ]
    },
    {
      "content": "在代码中设置 SDK 连接字符串。",
      "pos": [
        8497,
        8514
      ]
    },
    {
      "content": "在代码中设置 WebJobs SDK 构造函数参数的值",
      "pos": [
        8517,
        8544
      ]
    },
    {
      "pos": [
        8547,
        8579
      ],
      "content": "为有害 blob 处理配置 <ph id=\"ph1\">`MaxDequeueCount`</ph>。"
    },
    {
      "content": "手动触发函数",
      "pos": [
        8582,
        8588
      ]
    },
    {
      "content": "写入日志",
      "pos": [
        8591,
        8595
      ]
    },
    {
      "pos": [
        8600,
        8626
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"nextsteps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "pos": [
        8628,
        8783
      ],
      "content": "本指南提供的代码示例演示了如何处理常见方案以操作 Azure Blob。有关如何使用 Azure WebJobs 和 WebJobs SDK 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure WebJobs 推荐资源<ept id=\"p1\">](/documentation/articles/websites-webjobs-resources/)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 WebJobs SDK 使用 Azure Blob 存储\" \n    description=\"如何通过 WebJobs SDK 使用 Azure Blob 存储在新 Blob 出现在容器中时触发进程并处理“有害 Blob”。\" \n    services=\"app-service\\web, storage\" \n    documentationCenter=\".net\" \n    authors=\"tdykstra\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags\n    ms.service=\"app-service-web\"\n    ms.date=\"12/14/2015\"\n    wacn.date=\"02/26/2016\"/>\n\n# 如何通过 WebJobs SDK 使用 Azure Blob 存储\n\n## 概述\n\n本指南提供 C# 代码示例，用于演示如何在创建或更新 Azure Blob 后触发进程。这些代码示例使用 [WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk) 版本 1.x。\n\n有关演示如何创建 Blob 的代码示例，请参阅[如何通过 WebJobs SDK 使用 Azure 队列存储](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to)。\n        \n本指南假设你了解[如何使用指向存储帐户的连接字符串在 Visual Studio 中创建 WebJob 项目](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)或创建[多个存储帐户](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)。\n\n## <a id=\"trigger\"></a> 如何在创建或更新 Blob 后触发函数\n\n本部分说明如何使用 `BlobTrigger` 属性。\n\n> **注意：**WebJobs SDK 会扫描日志文件，以观察新的或更改的 blob。此过程非常缓慢；创建 blob 之后数分钟或更长时间内可能仍不会触发函数。如果你的应用程序需要立即处理 blob，推荐的方法是在创建该 blob 时创建队列消息，并在处理该 blob 的函数上使用 [QueueTrigger](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#trigger) 属性（而非 `BlobTrigger` 属性）。\n\n### Blob 名称和扩展名的单个占位符  \n\n以下代码示例将 *输入* 容器中显示的文本 blob 复制到 *输出* 容器中：\n\n        public static void CopyBlob([BlobTrigger(\"input/{name}\")] TextReader input,\n            [Blob(\"output/{name}\")] out string output)\n        {\n            output = input.ReadToEnd();\n        }\n\n属性构造函数采用指定容器名称的字符串参数和 Blob 名称的占位符。在此示例中，如果在 *输入* 容器中创建了名为 *Blob1.txt* 的 blob，则该函数将在 *输出* 容器中创建名为 *Blob1.txt* 的 blob。\n\n你可以指定包含 Blob 名称占位符的名称模式，如以下代码示例中所示：\n\n        public static void CopyBlob([BlobTrigger(\"input/original-{name}\")] TextReader input,\n            [Blob(\"output/copy-{name}\")] out string output)\n        {\n            output = input.ReadToEnd();\n        }\n\n此代码只会复制名称以“original-”开头的 Blob。例如，将 *输入* 容器中的 *original-Blob1.txt* 复制到 *输出* 容器中的 *copy-Blob1.txt*。\n\n如果你需要指定的名称中包含大括号的 Blob 名称的名称模式，增加大括号。例如，如果你想要在 *映像* 容器中查找具有以下类似名称的 blob：\n\n        {20140101}-soundfile.mp3\n\n为模式使用以下代码：\n\n        images/{{20140101}}-{name}\n\n在示例中， *名称* 占位符值将为 *soundfile.mp3*。\n\n### 单独的 Blob 名称和扩展名占位符\n\n以下代码示例在将 *输入* 容器中显示的 blob 复制到 *输出* 容器中时更改文件扩展名。该代码将记录 *输入* blob 的扩展名，并将 *输出* blob 的扩展名设置为 *.txt*。\n\n        public static void CopyBlobToTxtFile([BlobTrigger(\"input/{name}.{ext}\")] TextReader input,\n            [Blob(\"output/{name}.txt\")] out string output,\n            string name,\n            string ext,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"Blob name:\" + name);\n            logger.WriteLine(\"Blob extension:\" + ext);\n            output = input.ReadToEnd();\n        }\n\n## <a id=\"types\"></a> 可绑定到 blob 的类型\n\n可对以下类型使用 `BlobTrigger` 属性：\n\n* `string`\n* `TextReader`\n* `Stream`\n* `ICloudBlob`\n* `CloudBlockBlob`\n* `CloudPageBlob`\n* `CloudBlobContainer`\n* `CloudBlobDirectory`\n* `IEnumerable<CloudBlockBlob>`\n* `IEnumerable<CloudPageBlob>`\n* [ICloudBlobStreamBinder](#icbsb) 反序列化的其他类型 \n\n如果你想要直接使用 Azure 存储帐户，则还可以向方法签名添加 `CloudStorageAccount` 参数。\n\n有关示例，请参阅 [GitHub.com 上 azure-webjobs-sdk 存储库中的 blob 绑定代码](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/BlobBindingEndToEndTests.cs)。\n\n## <a id=\"string\"></a> 通过绑定到字符串获取文本 blob 内容\n\n如果需要文本 blob，可将 `BlobTrigger` 应用到 `string` 参数。以下代码示例将文本 blob 绑定到名为 `logMessage` 的 `string` 参数。函数使用该参数将 Blob 的内容写入 WebJobs SDK 仪表板。\n \n        public static void WriteLog([BlobTrigger(\"input/{name}\")] string logMessage,\n            string name, \n            TextWriter logger)\n        {\n             logger.WriteLine(\"Blob name: {0}\", name);\n             logger.WriteLine(\"Content:\");\n             logger.WriteLine(logMessage);\n        }\n\n## <a id=\"icbsb\"></a> 使用 ICloudBlobStreamBinder 获取序列化 blob 内容\n\n以下代码示例使用实现 `ICloudBlobStreamBinder` 的类来启用 `BlobTrigger` 属性，将 blob 绑定到 `WebImage` 类型。\n\n        public static void WaterMark(\n            [BlobTrigger(\"images3/{name}\")] WebImage input,\n            [Blob(\"images3-watermarked/{name}\")] out WebImage output)\n        {\n            output = input.AddTextWatermark(\"WebJobs SDK\", \n                horizontalAlign: \"Center\", verticalAlign: \"Middle\",\n                fontSize: 48, opacity: 50);\n        }\n        public static void Resize(\n            [BlobTrigger(\"images3-watermarked/{name}\")] WebImage input,\n            [Blob(\"images3-resized/{name}\")] out WebImage output)\n        {\n            var width = 180;\n            var height = Convert.ToInt32(input.Height * 180 / input.Width);\n            output = input.Resize(width, height);\n        }\n\n派生自 `ICloudBlobStreamBinder` 的 `WebImageBinder` 类中提供 `WebImage` 绑定代码。\n\n        public class WebImageBinder : ICloudBlobStreamBinder<WebImage>\n        {\n            public Task<WebImage> ReadFromStreamAsync(Stream input, \n                System.Threading.CancellationToken cancellationToken)\n            {\n                return Task.FromResult<WebImage>(new WebImage(input));\n            }\n            public Task WriteToStreamAsync(WebImage value, Stream output,\n                System.Threading.CancellationToken cancellationToken)\n            {\n                var bytes = value.GetBytes();\n                return output.WriteAsync(bytes, 0, bytes.Length, cancellationToken);\n            }\n        }\n\n## <a id=\"poison\"></a> 如何处理有害 blob\n\n当 `BlobTrigger` 函数失败时，如果失败是暂时性错误导致的，则 SDK 会再次调用该函数。如果失败是由 Blob 的内容导致的，则该函数每次尝试处理 Blob 时都会失败。默认情况下，对于给定的 Blob，SDK 调用一个函数最多 5 次。如果第五次尝试失败，SDK 会将消息添加到名为 *webjobs-blobtrigger-poison* 的队列中。\n\n最大尝试次数可配置。将使用相同的 [MaxDequeueCount](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#configqueue) 设置处理有害 blob 和有害队列消息。\n\n有害 Blob 的队列消息是包含以下属性的 JSON 对象：\n\n* FunctionId（格式为 *{WebJob name}*.Functions.*{Function name}*，例如 WebJob1.Functions.CopyBlob）\n* BlobType（\"BlockBlob\" 或 \"PageBlob\"）\n* ContainerName\n* BlobName\n* ETag（blob 版本标识符，例如：\"0x8D1DC6E70A277EF\"）\n\n在下面的代码示例中，`CopyBlob` 函数的代码导致它每次调用时都失败。SDK 进行最大重试次数的调用之后，病毒 blob 队列中会创建消息，该消息通过 `LogPoisonBlob` 函数进行处理。\n\n        public static void CopyBlob([BlobTrigger(\"input/{name}\")] TextReader input,\n            [Blob(\"textblobs/output-{name}\")] out string output)\n        {\n            throw new Exception(\"Exception for testing poison blob handling\");\n            output = input.ReadToEnd();\n        }\n        \n        public static void LogPoisonBlob(\n        [QueueTrigger(\"webjobs-blobtrigger-poison\")] PoisonBlobMessage message,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"FunctionId: {0}\", message.FunctionId);\n            logger.WriteLine(\"BlobType: {0}\", message.BlobType);\n            logger.WriteLine(\"ContainerName: {0}\", message.ContainerName);\n            logger.WriteLine(\"BlobName: {0}\", message.BlobName);\n            logger.WriteLine(\"ETag: {0}\", message.ETag);\n        }\n\nSDK 自动反序列化 JSON 消息。下面是 `PoisonBlobMessage` 类：\n\n        public class PoisonBlobMessage\n        {\n            public string FunctionId { get; set; }\n            public string BlobType { get; set; }\n            public string ContainerName { get; set; }\n            public string BlobName { get; set; }\n            public string ETag { get; set; }\n        }\n\n### <a id=\"polling\"></a> Blob 轮询算法\n\n启动应用程序时，WebJobs SDK 将扫描 `BlobTrigger` 属性指定的所有容器。在大型存储帐户中，此扫描可能需要一些时间，因此在查找新 blob 和执行 `BlobTrigger` 函数之前，可能需要一段时间。\n\n若要在应用程序启动后检测新的或已更改的 Blob，SDK 会定期读取从 Blob 存储日志。blob 日志将进行缓冲，仅每隔 10 分钟左右获取物理写入，因此创建或更新 blob 后可能存在很长的延迟，然后才会执行对应的 `BlobTrigger` 函数。\n\n使用 `Blob` 属性创建的 blob 出现异常。当 WebJobs SDK 创建新 blob 时，会立即将新的 blob 传递给任何匹配的 `BlobTrigger` 函数。因此，如果建立了 Blob 输入和输出的链接，则 SDK 可以高效地处理它们。但是，如果您想要对通过其他方式创建或更新的 blob 降低运行 blob 处理功能的延迟时间，我们建议使用 `QueueTrigger`（而不是 `BlobTrigger`）。\n\n### <a id=\"receipts\"></a> Blob 回执\n\nWebJobs SDK 确保没有为相同的新 blob 或更新 blob 多次调用 `BlobTrigger` 函数。为此，它会维护 *blob 回执*，以确定是否已处理给定的 blob 版本。\n\nBlob 回执在 AzureWebJobsStorage 连接字符串指定的 Azure 存储帐户中名为 *azure-webjobs-hosts* 的容器内存储。Blob 回执包含以下信息：\n\n* 为 blob 调用的函数（\"*{WebJob name}*.Functions.*{Function name}*\"，例如 \"WebJob1.Functions.CopyBlob\"）\n* 容器名称\n* Blob 类型（\"BlockBlob\" 或 \"PageBlob\"）\n* Blob 名称\n* ETag（blob 版本标识符，例如：\"0x8D1DC6E70A277EF\"）\n\n如果您想要强制重新处理某个 blob，则可以从 *azure-webjobs-hosts* 容器中手动删除该 blob 的 blob 回执。\n\n## <a id=\"queues\"></a> 队列文章涵盖的相关主题\n\n有关如何处理队列消息触发的 blob 处理，或者不特定于 blob 处理的 WebJobs SDK 方案的信息，请参阅[如何通过 WebJobs SDK 使用 Azure 队列存储](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to)。\n\n该文章涵盖的相关主题包括：\n\n* 异步函数\n* 多个实例\n* 正常关闭\n* 在函数正文中使用 WebJobs SDK 属性\n* 在代码中设置 SDK 连接字符串。\n* 在代码中设置 WebJobs SDK 构造函数参数的值\n* 为有害 blob 处理配置 `MaxDequeueCount`。\n* 手动触发函数\n* 写入日志\n\n## <a id=\"nextsteps\"></a>后续步骤\n\n本指南提供的代码示例演示了如何处理常见方案以操作 Azure Blob。有关如何使用 Azure WebJobs 和 WebJobs SDK 的详细信息，请参阅 [Azure WebJobs 推荐资源](/documentation/articles/websites-webjobs-resources/)。\n \n\n<!---HONumber=Mooncake_0215_2016-->"
}