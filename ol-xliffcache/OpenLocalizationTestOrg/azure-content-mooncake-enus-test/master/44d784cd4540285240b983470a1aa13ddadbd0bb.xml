{
  "nodes": [
    {
      "content": "使用 Azure 媒体服务 .NET SDK 创建筛选器",
      "pos": [
        28,
        56
      ]
    },
    {
      "content": "本主题介绍如何创建筛选器，以便客户端能够使用它们来流式传输流的特定部分。媒体服务将创建动态清单来存档此选择性流。",
      "pos": [
        76,
        132
      ]
    },
    {
      "content": "使用 Azure 媒体服务 .NET SDK 创建筛选器",
      "pos": [
        359,
        387
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        391,
        407
      ]
    },
    {
      "content": ".NET",
      "pos": [
        411,
        415
      ]
    },
    {
      "content": "REST",
      "pos": [
        484,
        488
      ]
    },
    {
      "pos": [
        553,
        717
      ],
      "content": "从 2.11 版开始，媒体服务可让你为资产定义筛选器。这些筛选器是服务器端规则，可让你的客户选择运行如下操作：只播放一段视频（而非播放完整视频），或只指定客户设备可以处理的一部分音频和视频再现内容（而非与该资产相关的所有再现内容）。通过按客户请求创建的<bpt id=\"p1\">**</bpt>动态清单<ept id=\"p1\">**</ept>可以实现对资产进行这种筛选，并基于指定的筛选器流式传输视频。"
    },
    {
      "pos": [
        719,
        818
      ],
      "content": "有关与筛选器和动态清单相关的更多详细信息，请参阅<bpt id=\"p1\">[</bpt>动态清单概述<ept id=\"p1\">](/documentation/articles/media-services-dynamic-manifest-overview)</ept>。"
    },
    {
      "content": "本主题说明如何使用媒体服务 .NET SDK 创建、更新和删除筛选器。",
      "pos": [
        820,
        855
      ]
    },
    {
      "content": "请注意，如果你更新筛选器，则流式处理终结点需要 2 分钟的时间来刷新规则。如果内容是通过使用此筛选器提供的（并在代理和 CDN 缓存中缓存），则更新此筛选器会导致播放器失败。建议在更新筛选器之后清除缓存。如果此选项不可用，请考虑使用其他筛选器。",
      "pos": [
        858,
        980
      ]
    },
    {
      "content": "用于创建筛选器的类型",
      "pos": [
        984,
        994
      ]
    },
    {
      "content": "创建筛选器时将使用以下类型：",
      "pos": [
        996,
        1010
      ]
    },
    {
      "pos": [
        1014,
        1121
      ],
      "content": "<bpt id=\"p1\">**</bpt>IStreamingFilter<ept id=\"p1\">**</ept>。此类型基于以下 REST API <bpt id=\"p2\">[</bpt>Filter<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/mt149056.aspx)</ept>"
    },
    {
      "pos": [
        1124,
        1241
      ],
      "content": "<bpt id=\"p1\">**</bpt>IStreamingAssetFilter<ept id=\"p1\">**</ept>。此类型基于以下 REST API <bpt id=\"p2\">[</bpt>AssetFilter<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/mt149053.aspx)</ept>"
    },
    {
      "pos": [
        1244,
        1370
      ],
      "content": "<bpt id=\"p1\">**</bpt>PresentationTimeRange<ept id=\"p1\">**</ept>此类型基于以下 REST API <bpt id=\"p2\">[</bpt>PresentationTimeRange<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/mt149052.aspx)</ept>"
    },
    {
      "pos": [
        1373,
        1569
      ],
      "content": "<bpt id=\"p1\">**</bpt>FilterTrackSelectStatement<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>IFilterTrackPropertyCondition<ept id=\"p2\">**</ept>。这些类型基于以下 REST API <bpt id=\"p3\">[</bpt>FilterTrackSelect 和 FilterTrackPropertyCondition<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/azure/mt149055.aspx)</ept>"
    },
    {
      "content": "创建/更新/读取/删除全局筛选器",
      "pos": [
        1574,
        1590
      ]
    },
    {
      "content": "下面的代码演示如何使用 .NET 创建、更新、读取和删除资产筛选器。",
      "pos": [
        1592,
        1626
      ]
    },
    {
      "content": "创建/更新/读取/删除资产筛选器",
      "pos": [
        2951,
        2967
      ]
    },
    {
      "content": "下面的代码演示如何使用 .NET 创建、更新、读取和删除资产筛选器。",
      "pos": [
        2969,
        3003
      ]
    },
    {
      "content": "生成使用筛选器的流 URL",
      "pos": [
        3890,
        3903
      ]
    },
    {
      "pos": [
        3905,
        4001
      ],
      "content": "有关如何发布和传送资产的信息，请参阅<bpt id=\"p1\">[</bpt>将内容传送到客户概述<ept id=\"p1\">](/documentation/articles/media-services-deliver-content-overview)</ept>。"
    },
    {
      "content": "以下示例演示了如何将筛选器添加到流 URL。",
      "pos": [
        4004,
        4026
      ]
    },
    {
      "content": "MPEG DASH",
      "pos": [
        4030,
        4039
      ]
    },
    {
      "content": "Apple HTTP 实时流 (HLS) V4",
      "pos": [
        4224,
        4247
      ]
    },
    {
      "content": "Apple HTTP 实时流 (HLS) V3",
      "pos": [
        4429,
        4452
      ]
    },
    {
      "content": "平滑流",
      "pos": [
        4637,
        4640
      ]
    },
    {
      "content": "HDS",
      "pos": [
        4805,
        4808
      ]
    },
    {
      "content": "另请参阅",
      "pos": [
        4990,
        4994
      ]
    },
    {
      "content": "动态清单概述",
      "pos": [
        4998,
        5004
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"使用 Azure 媒体服务 .NET SDK 创建筛选器\" \n    description=\"本主题介绍如何创建筛选器，以便客户端能够使用它们来流式传输流的特定部分。媒体服务将创建动态清单来存档此选择性流。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede,cenkdin\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n\n#使用 Azure 媒体服务 .NET SDK 创建筛选器\n\n> [AZURE.SELECTOR]\n- [.NET](/documentation/articles/media-services-dotnet-dynamic-manifest)\n- [REST](/documentation/articles/media-services-rest-dynamic-manifest)\n\n从 2.11 版开始，媒体服务可让你为资产定义筛选器。这些筛选器是服务器端规则，可让你的客户选择运行如下操作：只播放一段视频（而非播放完整视频），或只指定客户设备可以处理的一部分音频和视频再现内容（而非与该资产相关的所有再现内容）。通过按客户请求创建的**动态清单**可以实现对资产进行这种筛选，并基于指定的筛选器流式传输视频。\n\n有关与筛选器和动态清单相关的更多详细信息，请参阅[动态清单概述](/documentation/articles/media-services-dynamic-manifest-overview)。\n\n本主题说明如何使用媒体服务 .NET SDK 创建、更新和删除筛选器。\n\n\n请注意，如果你更新筛选器，则流式处理终结点需要 2 分钟的时间来刷新规则。如果内容是通过使用此筛选器提供的（并在代理和 CDN 缓存中缓存），则更新此筛选器会导致播放器失败。建议在更新筛选器之后清除缓存。如果此选项不可用，请考虑使用其他筛选器。\n\n##用于创建筛选器的类型\n\n创建筛选器时将使用以下类型：\n\n- **IStreamingFilter**。此类型基于以下 REST API [Filter](http://msdn.microsoft.com/zh-cn/library/azure/mt149056.aspx)\n- **IStreamingAssetFilter**。此类型基于以下 REST API [AssetFilter](http://msdn.microsoft.com/zh-cn/library/azure/mt149053.aspx)\n- **PresentationTimeRange**此类型基于以下 REST API [PresentationTimeRange](http://msdn.microsoft.com/zh-cn/library/azure/mt149052.aspx)\n- **FilterTrackSelectStatement** 和 **IFilterTrackPropertyCondition**。这些类型基于以下 REST API [FilterTrackSelect 和 FilterTrackPropertyCondition](http://msdn.microsoft.com/zh-cn/library/azure/mt149055.aspx)\n\n\n##创建/更新/读取/删除全局筛选器\n\n下面的代码演示如何使用 .NET 创建、更新、读取和删除资产筛选器。\n    \n    string filterName = \"GlobalFilter_\" + Guid.NewGuid().ToString();\n                \n    List<FilterTrackSelectStatement> filterTrackSelectStatements = new List<FilterTrackSelectStatement>();\n    \n    FilterTrackSelectStatement filterTrackSelectStatement = new FilterTrackSelectStatement();\n    filterTrackSelectStatement.PropertyConditions = new List<IFilterTrackPropertyCondition>();\n    filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackNameCondition(\"Track Name\", FilterTrackCompareOperator.NotEqual));\n    filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackBitrateRangeCondition(new FilterTrackBitrateRange(0, 1), FilterTrackCompareOperator.NotEqual));\n    filterTrackSelectStatement.PropertyConditions.Add(new FilterTrackTypeCondition(FilterTrackType.Audio, FilterTrackCompareOperator.NotEqual));\n    filterTrackSelectStatements.Add(filterTrackSelectStatement);\n    \n    // Create\n    IStreamingFilter filter = _context.Filters.Create(filterName, new PresentationTimeRange(), filterTrackSelectStatements);\n    \n    // Update\n    filter.PresentationTimeRange = new PresentationTimeRange(timescale: 500);\n    filter.Update();\n    \n    // Read\n    var filterUpdated = _context.Filters.FirstOrDefault();\n    Console.WriteLine(filterUpdated.Name);\n\n    // Delete\n    filter.Delete();\n\n\n##创建/更新/读取/删除资产筛选器\n\n下面的代码演示如何使用 .NET 创建、更新、读取和删除资产筛选器。\n\n    \n    string assetName = \"AssetFilter_\" + Guid.NewGuid().ToString();\n    var asset = _context.Assets.Create(assetName, AssetCreationOptions.None);\n    \n    string filterName = \"AssetFilter_\" + Guid.NewGuid().ToString();\n    \n        \n    // Create\n    IStreamingAssetFilter filter = asset.AssetFilters.Create(filterName,\n                                        new PresentationTimeRange(), \n                                        new List<FilterTrackSelectStatement>());\n    \n    // Update\n    filter.PresentationTimeRange = \n            new PresentationTimeRange(start: 6000000000, end: 72000000000);\n    \n    filter.Update();\n    \n    // Read\n    asset = _context.Assets.Where(c => c.Id == asset.Id).FirstOrDefault();\n    var filterUpdated = asset.AssetFilters.FirstOrDefault();\n    Console.WriteLine(filterUpdated.Name);\n    \n    // Delete\n    filterUpdated.Delete();\n    \n\n\n\n##生成使用筛选器的流 URL\n\n有关如何发布和传送资产的信息，请参阅[将内容传送到客户概述](/documentation/articles/media-services-deliver-content-overview)。\n\n\n以下示例演示了如何将筛选器添加到流 URL。\n\n**MPEG DASH**\n\n    http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=mpd-time-csf, filter=MyFilter)\n\n**Apple HTTP 实时流 (HLS) V4**\n\n    http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=m3u8-aapl, filter=MyFilter)\n\n**Apple HTTP 实时流 (HLS) V3**\n\n    http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=m3u8-aapl-v3, filter=MyFilter)\n\n**平滑流**\n\n    http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(filter=MyFilter)\n\n\n**HDS**\n\n    http://testendpoint-testaccount.streaming.mediaservices.chinacloudapi.cn/fecebb23-46f6-490d-8b70-203e86b0df58/BigBuckBunny.ism/Manifest(format=f4m-f4f, filter=MyFilter)\n\n\n\n##另请参阅 \n\n[动态清单概述](/documentation/articles/media-services-dynamic-manifest-overview)\n \n\n<!---HONumber=Mooncake_0307_2016-->"
}