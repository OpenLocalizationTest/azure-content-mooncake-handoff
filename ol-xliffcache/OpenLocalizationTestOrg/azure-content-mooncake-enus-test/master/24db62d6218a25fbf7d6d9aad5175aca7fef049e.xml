{
  "nodes": [
    {
      "content": "通过使用 Visual Studio 连接服务添加移动服务后开始使用 Javascript 移动应用 | Microsoft Azure",
      "pos": [
        28,
        96
      ]
    },
    {
      "content": "如何在 Visual Studio 中的 JavaScript 项目内开始使用 Azure 移动服务",
      "pos": [
        116,
        166
      ]
    },
    {
      "content": "通过使用 Visual Studio 连接服务添加 Azure 移动服务后开始使用 Javascript 移动应用",
      "pos": [
        388,
        445
      ]
    },
    {
      "content": "为了跟踪这些代码，您需要首先执行的步骤取决于您连接的移动服务类型。",
      "pos": [
        447,
        480
      ]
    },
    {
      "pos": [
        485,
        617
      ],
      "content": "对于 JavaScript 后端移动服务，需创建一个名为“TodoItem”表。创建表的方法：在服务器资源管理器中的 Azure node 下定位移动服务，右键单击该移动服务的 Node 打开上下文菜单，然后选择<bpt id=\"p1\">**</bpt>创建表<ept id=\"p1\">**</ept>。输入“TodoItem”作为表名称。"
    },
    {
      "pos": [
        622,
        768
      ],
      "content": "如果您使用的是 .NET 后端移动服务，那么 Visual Studio 为您创建的默认项目模板中已经有一个 TodoItem 表，但您需要将其发布到 Azure。发布方法：在解决方案资源管理器中打开移动服务项目的上下文菜单，然后选择<bpt id=\"p1\">**</bpt>发布 Web<ept id=\"p1\">**</ept>。接受默认设置，然后选择<bpt id=\"p2\">**</bpt>发布<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "获取对表的引用",
      "pos": [
        772,
        779
      ]
    },
    {
      "content": "客户端对象已添加到您的项目。其名称是移动服务的名称，后面附加“Client”。以下代码将获取对表（包含 TodoItem 数据）的引用，您可以将该引用用于后续操作以便读取和更新数据表。",
      "pos": [
        781,
        873
      ]
    },
    {
      "content": "添加条目",
      "pos": [
        944,
        948
      ]
    },
    {
      "content": "将新的项目插入数据表。ID（类型字符串的 GUID）将自动创建为新行的主密钥。不要更改 ID 列的类型，因为移动服务基础结构将使用它。",
      "pos": [
        951,
        1018
      ]
    },
    {
      "content": "读取/查询表",
      "pos": [
        1276,
        1282
      ]
    },
    {
      "content": "以下代码将查询表以获取所有项目、更新本地集合并将结果绑定到 UI 元素 listItems。",
      "pos": [
        1284,
        1330
      ]
    },
    {
      "content": "您可以使用 where 方法来修改查询。下面是筛选出已完成项目的示例。",
      "pos": [
        1676,
        1711
      ]
    },
    {
      "pos": [
        1996,
        2083
      ],
      "content": "有关您可以使用的查询的更多示例，请参阅<bpt id=\"p1\">[</bpt>查询对象<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/jj613353.aspx)</ept>。"
    },
    {
      "content": "更新条目",
      "pos": [
        2087,
        2091
      ]
    },
    {
      "pos": [
        2093,
        2371
      ],
      "content": "更新数据表中的行。在此示例中，<bpt id=\"p1\">*</bpt>todoItem<ept id=\"p1\">*</ept> 是更新的项目，而 <bpt id=\"p2\">*</bpt>item<ept id=\"p2\">*</ept> 是从移动服务中返回的同一项目。移动服务响应时，本地 todoItems 列表中的项目将使用 <bpt id=\"p3\">[</bpt>splice<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/windows/apps/Hh700810.aspx)</ept> 方法进行更新。对返回的 <bpt id=\"p4\">[</bpt>Promise<ept id=\"p4\">](https://msdn.microsoft.com/zh-cn/library/dn802826.aspx)</ept> 对象调用  <bpt id=\"p5\">**</bpt>done<ept id=\"p5\">**</ept> 方法以获取插入对象的副本并处理任何错误。"
    },
    {
      "content": "删除条目",
      "pos": [
        2510,
        2514
      ]
    },
    {
      "pos": [
        2516,
        2630
      ],
      "content": "删除数据表中的行。对返回的 <bpt id=\"p1\">[</bpt>Promise<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/dn802826.aspx)</ept> 对象调用 <bpt id=\"p2\">[</bpt>done<ept id=\"p2\">]()</ept> 方法以获取插入对象的副本并处理任何错误。"
    },
    {
      "content": "详细了解移动服务",
      "pos": [
        2747,
        2755
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"通过使用 Visual Studio 连接服务添加移动服务后开始使用 Javascript 移动应用 | Microsoft Azure\" \n    description=\"如何在 Visual Studio 中的 JavaScript 项目内开始使用 Azure 移动服务\" \n    services=\"mobile-services\" \n    documentationCenter=\"\" \n    authors=\"mlhoop\" \n    manager=\"douge\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.date=\"01/05/2016\" \n    wacn.date=\"03/21/2016\"/>\n\n# 通过使用 Visual Studio 连接服务添加 Azure 移动服务后开始使用 Javascript 移动应用\n\n为了跟踪这些代码，您需要首先执行的步骤取决于您连接的移动服务类型。\n\n - 对于 JavaScript 后端移动服务，需创建一个名为“TodoItem”表。创建表的方法：在服务器资源管理器中的 Azure node 下定位移动服务，右键单击该移动服务的 Node 打开上下文菜单，然后选择**创建表**。输入“TodoItem”作为表名称。\n\n - 如果您使用的是 .NET 后端移动服务，那么 Visual Studio 为您创建的默认项目模板中已经有一个 TodoItem 表，但您需要将其发布到 Azure。发布方法：在解决方案资源管理器中打开移动服务项目的上下文菜单，然后选择**发布 Web**。接受默认设置，然后选择**发布**。\n\n##获取对表的引用\n\n客户端对象已添加到您的项目。其名称是移动服务的名称，后面附加“Client”。以下代码将获取对表（包含 TodoItem 数据）的引用，您可以将该引用用于后续操作以便读取和更新数据表。\n\n    var todoTable = yourMobileServiceClient.getTable('TodoItem');\n\n##添加条目 \n\n将新的项目插入数据表。ID（类型字符串的 GUID）将自动创建为新行的主密钥。不要更改 ID 列的类型，因为移动服务基础结构将使用它。\n\n    var todoTable = client.getTable('TodoItem');\n    var todoItems = new WinJS.Binding.List();\n    var insertTodoItem = function (todoItem) {\n        todoTable.insert(todoItem).done(function (item) {\n            todoItems.push(item);\n        });\n    };\n\n##读取/查询表\n\n以下代码将查询表以获取所有项目、更新本地集合并将结果绑定到 UI 元素 listItems。\n\n        // This code refreshes the entries in the list view \n        // by querying the TodoItems table.\n        todoTable.where()\n            .read()\n            .done(function (results) {\n                todoItems = new WinJS.Binding.List(results);\n                listItems.winControl.itemDataSource = todoItems.dataSource;\n            });\n\n您可以使用 where 方法来修改查询。下面是筛选出已完成项目的示例。\n\n    todoTable.where(function () {\n        return (this.complete === false && this.createdAt !== null);\n    })\n    .read()\n    .done(function (results) {\n        todoItems = new WinJS.Binding.List(results);\n        listItems.winControl.itemDataSource = todoItems.dataSource;\n    });\n\n有关您可以使用的查询的更多示例，请参阅[查询对象](http://msdn.microsoft.com/zh-cn/library/azure/jj613353.aspx)。\n\n##更新条目\n\n更新数据表中的行。在此示例中，*todoItem* 是更新的项目，而 *item* 是从移动服务中返回的同一项目。移动服务响应时，本地 todoItems 列表中的项目将使用 [splice](http://msdn.microsoft.com/zh-cn/library/windows/apps/Hh700810.aspx) 方法进行更新。对返回的 [Promise](https://msdn.microsoft.com/zh-cn/library/dn802826.aspx) 对象调用  **done** 方法以获取插入对象的副本并处理任何错误。\n\n        todoTable.update(todoItem).done(function (item) {\n            todoItems.splice(todoItems.indexOf(item), 1, item);\n        });\n\n##删除条目\n\n删除数据表中的行。对返回的 [Promise](https://msdn.microsoft.com/zh-cn/library/dn802826.aspx) 对象调用 [done]() 方法以获取插入对象的副本并处理任何错误。\n\n    todoTable.del(todoItem).done(function (item) {\n        todoItems.splice(todoItems.indexOf(item), 1);\n    }\n\n\n\n[详细了解移动服务](/documentation/services/mobile-services)\n\n<!---HONumber=Mooncake_0215_2016-->"
}