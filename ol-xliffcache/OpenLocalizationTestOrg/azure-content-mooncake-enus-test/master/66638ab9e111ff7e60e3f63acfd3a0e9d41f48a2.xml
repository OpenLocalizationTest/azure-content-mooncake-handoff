{
  "nodes": [
    {
      "content": "通过 .NET 开始使用 Azure 队列存储 | Azure",
      "pos": [
        27,
        58
      ]
    },
    {
      "content": "使用 Azure 队列存储在应用程序组件之间异步发送和接收消息。立即开始使用简单的队列存储操作，包括创建和删除队列以及添加、读取和删除队列消息。",
      "pos": [
        77,
        149
      ]
    },
    {
      "content": "通过 .NET 开始使用 Azure 队列存储",
      "pos": [
        352,
        375
      ]
    },
    {
      "content": "概述",
      "pos": [
        477,
        479
      ]
    },
    {
      "content": "Azure 队列存储是一种在云中提供消息传递队列的服务。在设计应用程序以实现可伸缩性时，通常要将各个应用程序组件分离，使其可以独立地进行伸缩。队列存储为在应用程序组件之间进行异步通信提供了一种可靠的消息传送解决方案，无论这些应用程序组件是在云中、在桌面上、在本地服务器上运行还是在移动设备上运行。队列存储还支持管理异步任务以及构建过程工作流。",
      "pos": [
        481,
        652
      ]
    },
    {
      "content": "本教程演示如何针对使用 Azure 队列存储一些常见情形编写 .NET 代码。涉及的方案包括创建和删除队列、添加、读取和删除队列消息。",
      "pos": [
        654,
        721
      ]
    },
    {
      "content": "以编程方式访问队列存储",
      "pos": [
        1170,
        1181
      ]
    },
    {
      "content": "命名空间声明",
      "pos": [
        1284,
        1290
      ]
    },
    {
      "content": "在你希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部：",
      "pos": [
        1291,
        1342
      ]
    },
    {
      "pos": [
        1482,
        1529
      ],
      "content": "确保你引用 <ph id=\"ph1\">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。"
    },
    {
      "content": "创建队列",
      "pos": [
        1641,
        1645
      ]
    },
    {
      "pos": [
        1647,
        1835
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>CloudQueueClient<ept id=\"p1\">**</ept> 对象，可以获取队列的引用对象。以下代码将创建 <bpt id=\"p2\">**</bpt>CloudQueueClient<ept id=\"p2\">**</ept> 对象。本指南中的所有代码都使用存储在 Azure 应用程序的服务配置中的存储连接字符串。还可采用其他方法创建 <bpt id=\"p3\">**</bpt>CloudStorageAccount<ept id=\"p3\">**</ept> 对象。有关详细信息，请参阅 <bpt id=\"p4\">[</bpt>CloudStorageAccount<ept id=\"p4\">][]</ept> 文档。"
    },
    {
      "pos": [
        2143,
        2192
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>queueClient<ept id=\"p1\">**</ept> 对象获取对要使用的队列的引用。如果队列不存在，你可以创建它。"
    },
    {
      "content": "在队列中插入消息",
      "pos": [
        2386,
        2394
      ]
    },
    {
      "pos": [
        2396,
        2552
      ],
      "content": "若要将消息插入现有队列，请先创建一个新的 <bpt id=\"p1\">**</bpt>CloudQueueMessage<ept id=\"p1\">**</ept>。接下来，调用 <bpt id=\"p2\">**</bpt>AddMessage<ept id=\"p2\">**</ept> 方法。可从字符串（UTF-8 格式）或<bpt id=\"p3\">**</bpt>字节<ept id=\"p3\">**</ept>数组创建 <bpt id=\"p4\">**</bpt>CloudQueueMessage<ept id=\"p4\">**</ept>。以下代码将创建队列（如果该队列不存在）并插入消息“Hello, World”："
    },
    {
      "content": "扫视下一条消息",
      "pos": [
        3208,
        3215
      ]
    },
    {
      "pos": [
        3217,
        3265
      ],
      "content": "通过调用 <bpt id=\"p1\">**</bpt>PeekMessage<ept id=\"p1\">**</ept> 方法，可以查看队列前面的消息，而不必从队列中将其删除。"
    },
    {
      "content": "更改已排队消息的内容",
      "pos": [
        3845,
        3855
      ]
    },
    {
      "pos": [
        3857,
        4092
      ],
      "content": "你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept> ，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。"
    },
    {
      "content": "取消对下一条消息的排队",
      "pos": [
        4871,
        4882
      ]
    },
    {
      "pos": [
        4884,
        5136
      ],
      "content": "你的代码通过两个步骤来取消对队列中某条消息的排队。调用 <bpt id=\"p1\">**</bpt>GetMessage<ept id=\"p1\">**</ept> 时，你将获取队列中的下一条消息。从 <bpt id=\"p2\">**</bpt>GetMessage<ept id=\"p2\">**</ept> 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要从队列中删除消息，你还必须调用 <bpt id=\"p3\">**</bpt>DeleteMessage<ept id=\"p3\">**</ept>。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 <bpt id=\"p4\">**</bpt>DeleteMessage<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "将 Async-Await 模式与公用队列存储 API 配合使用",
      "pos": [
        5765,
        5797
      ]
    },
    {
      "pos": [
        5799,
        6081
      ],
      "content": "此示例演示如何将 Async-Await 模式和公用队列存储 API 配合使用。示例调用每个给定方法的异步版本，如每个方法的 <bpt id=\"p1\">*</bpt>Async<ept id=\"p1\">*</ept> 后缀所示。使用异步方法时，async-await 模式将暂停本地执行，直到调用完成。此行为允许当前的线程执行其他工作，这有助于避免性能瓶颈并提高应用程序的整体响应能力。有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 <bpt id=\"p2\">[</bpt>Async 和 Await（C# 和 Visual Basic）<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>"
    },
    {
      "content": "使用其他方法取消对消息的排队",
      "pos": [
        6915,
        6929
      ]
    },
    {
      "pos": [
        6931,
        7190
      ],
      "content": "你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id=\"p1\">**</bpt>GetMessages<ept id=\"p1\">**</ept> 方法在一次调用中获取 20 条消息。然后，它使用 <bpt id=\"p2\">**</bpt>foreach<ept id=\"p2\">**</ept> 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，5 分钟超时时间对于所有消息都是同时开始的，因此在调用 <bpt id=\"p3\">**</bpt>GetMessages<ept id=\"p3\">**</ept> 5 分钟后，尚未删除的任何消息都将再次变得可见。"
    },
    {
      "content": "获取队列长度",
      "pos": [
        7846,
        7852
      ]
    },
    {
      "pos": [
        7854,
        7990
      ],
      "content": "你可以获取队列中消息的估计数。使用 <bpt id=\"p1\">**</bpt>FetchAttributes<ept id=\"p1\">**</ept> 方法可请求队列服务检索队列属性，包括消息计数。<bpt id=\"p2\">**</bpt>ApproximateMessageCount<ept id=\"p2\">**</ept> 属性返回 <bpt id=\"p3\">**</bpt>FetchAttributes<ept id=\"p3\">**</ept> 方法检索到的最后一个值，而不会调用队列服务。"
    },
    {
      "content": "删除队列",
      "pos": [
        8703,
        8707
      ]
    },
    {
      "pos": [
        8709,
        8748
      ],
      "content": "若要删除队列及其包含的所有消息，请对队列对象调用 <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "content": "后续步骤",
      "pos": [
        9213,
        9217
      ]
    },
    {
      "content": "现在，您已了解有关队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。",
      "pos": [
        9219,
        9258
      ]
    },
    {
      "content": "查看队列服务参考文档，了解有关可用 API 的完整详细信息：",
      "pos": [
        9262,
        9292
      ]
    },
    {
      "content": ".NET 存储客户端库参考",
      "pos": [
        9300,
        9313
      ]
    },
    {
      "content": "REST API 参考",
      "pos": [
        9378,
        9389
      ]
    },
    {
      "pos": [
        9449,
        9553
      ],
      "content": "了解如何通过使用 <bpt id=\"p1\">[</bpt>Azure WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 简化为使用 Azure 存储空间而写的代码。"
    },
    {
      "content": "查看更多功能指南，以了解在 Azure 中存储数据的其他方式。",
      "pos": [
        9556,
        9587
      ]
    },
    {
      "pos": [
        9594,
        9668
      ],
      "content": "使用<bpt id=\"p1\">[</bpt>表存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>来存储结构化数据。"
    },
    {
      "pos": [
        9676,
        9755
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>Blob 存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>来存储非结构化数据。"
    },
    {
      "pos": [
        9762,
        9838
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>SQL 数据库<ept id=\"p1\">](/documentation/articles/sql-database-dotnet-how-to-use)</ept>来存储关系数据。"
    }
  ],
  "content": "<properties\n    pageTitle=\"通过 .NET 开始使用 Azure 队列存储 | Azure\"\n    description=\"使用 Azure 队列存储在应用程序组件之间异步发送和接收消息。立即开始使用简单的队列存储操作，包括创建和删除队列以及添加、读取和删除队列消息。\"\n    services=\"storage\"\n    documentationCenter=\".net\"\n    authors=\"tamram\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"01/24/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n# 通过 .NET 开始使用 Azure 队列存储\n\n[AZURE.INCLUDE [storage-selector-queue-include](../includes/storage-selector-queue-include.md)]\n\n## 概述\n\nAzure 队列存储是一种在云中提供消息传递队列的服务。在设计应用程序以实现可伸缩性时，通常要将各个应用程序组件分离，使其可以独立地进行伸缩。队列存储为在应用程序组件之间进行异步通信提供了一种可靠的消息传送解决方案，无论这些应用程序组件是在云中、在桌面上、在本地服务器上运行还是在移动设备上运行。队列存储还支持管理异步任务以及构建过程工作流。\n\n本教程演示如何针对使用 Azure 队列存储一些常见情形编写 .NET 代码。涉及的方案包括创建和删除队列、添加、读取和删除队列消息。\n\n[AZURE.INCLUDE [storage-dotnet-client-library-version-include](../includes/storage-dotnet-client-library-version-include.md)]\n\n[AZURE.INCLUDE [storage-queue-concepts-include](../includes/storage-queue-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n[AZURE.INCLUDE [storage-configure-connection-string-include](../includes/storage-configure-connection-string-include.md)]\n\n## 以编程方式访问队列存储\n\n[AZURE.INCLUDE [storage-dotnet-obtain-assembly](../includes/storage-dotnet-obtain-assembly.md)]\n\n### 命名空间声明\n在你希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部：\n\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Auth;\n    using Microsoft.WindowsAzure.Storage.Queue;\n\n确保你引用 `Microsoft.WindowsAzure.Storage.dll` 程序集。\n\n[AZURE.INCLUDE [storage-dotnet-retrieve-conn-string](../includes/storage-dotnet-retrieve-conn-string.md)]\n\n## 创建队列\n\n利用 **CloudQueueClient** 对象，可以获取队列的引用对象。以下代码将创建 **CloudQueueClient** 对象。本指南中的所有代码都使用存储在 Azure 应用程序的服务配置中的存储连接字符串。还可采用其他方法创建 **CloudStorageAccount** 对象。有关详细信息，请参阅 [CloudStorageAccount][] 文档。\n\n    // Retrieve storage account from connection string\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n使用 **queueClient** 对象获取对要使用的队列的引用。如果队列不存在，你可以创建它。\n\n    // Retrieve a reference to a queue\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Create the queue if it doesn't already exist\n    queue.CreateIfNotExists();\n\n## 在队列中插入消息\n\n若要将消息插入现有队列，请先创建一个新的 **CloudQueueMessage**。接下来，调用 **AddMessage** 方法。可从字符串（UTF-8 格式）或**字节**数组创建 **CloudQueueMessage**。以下代码将创建队列（如果该队列不存在）并插入消息“Hello, World”：\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Create the queue if it doesn't already exist.\n    queue.CreateIfNotExists();\n\n    // Create a message and add it to the queue.\n    CloudQueueMessage message = new CloudQueueMessage(\"Hello, World\");\n    queue.AddMessage(message);\n\n## 扫视下一条消息\n\n通过调用 **PeekMessage** 方法，可以查看队列前面的消息，而不必从队列中将其删除。\n\n    // Retrieve storage account from connection string\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Peek at the next message\n    CloudQueueMessage peekedMessage = queue.PeekMessage();\n\n    // Display message.\n    Console.WriteLine(peekedMessage.AsString);\n\n## 更改已排队消息的内容\n\n你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 *n* ，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Get the message from the queue and update the message contents.\n    CloudQueueMessage message = queue.GetMessage();\n    message.SetMessageContent(\"Updated contents.\");\n    queue.UpdateMessage(message,\n        TimeSpan.FromSeconds(60.0),  // Make it visible for another 60 seconds.\n        MessageUpdateFields.Content | MessageUpdateFields.Visibility);\n\n## 取消对下一条消息的排队\n\n你的代码通过两个步骤来取消对队列中某条消息的排队。调用 **GetMessage** 时，你将获取队列中的下一条消息。从 **GetMessage** 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要从队列中删除消息，你还必须调用 **DeleteMessage**。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 **DeleteMessage**。\n\n    // Retrieve storage account from connection string\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Get the next message\n    CloudQueueMessage retrievedMessage = queue.GetMessage();\n\n    //Process the message in less than 30 seconds, and then delete the message\n    queue.DeleteMessage(retrievedMessage);\n\n## 将 Async-Await 模式与公用队列存储 API 配合使用\n\n此示例演示如何将 Async-Await 模式和公用队列存储 API 配合使用。示例调用每个给定方法的异步版本，如每个方法的 *Async* 后缀所示。使用异步方法时，async-await 模式将暂停本地执行，直到调用完成。此行为允许当前的线程执行其他工作，这有助于避免性能瓶颈并提高应用程序的整体响应能力。有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 [Async 和 Await（C# 和 Visual Basic）](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)\n\n    // Create the queue if it doesn't already exist\n    if(await queue.CreateIfNotExistsAsync())\n    {\n        Console.WriteLine(\"Queue '{0}' Created\", queue.Name);\n    }\n    else\n    {\n        Console.WriteLine(\"Queue '{0}' Exists\", queue.Name);\n    }\n\n    // Create a message to put in the queue\n    CloudQueueMessage cloudQueueMessage = new CloudQueueMessage(\"My message\");\n\n    // Async enqueue the message\n    await queue.AddMessageAsync(cloudQueueMessage);\n    Console.WriteLine(\"Message added\");\n\n    // Async dequeue the message\n    CloudQueueMessage retrievedMessage = await queue.GetMessageAsync();\n    Console.WriteLine(\"Retrieved message with content '{0}'\", retrievedMessage.AsString);\n\n    // Async delete the message\n    await queue.DeleteMessageAsync(retrievedMessage);\n    Console.WriteLine(\"Deleted message\");\n\n## 使用其他方法取消对消息的排队\n\n你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 **GetMessages** 方法在一次调用中获取 20 条消息。然后，它使用 **foreach** 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，5 分钟超时时间对于所有消息都是同时开始的，因此在调用 **GetMessages** 5 分钟后，尚未删除的任何消息都将再次变得可见。\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    foreach (CloudQueueMessage message in queue.GetMessages(20, TimeSpan.FromMinutes(5)))\n    {\n        // Process all messages in less than 5 minutes, deleting each message after processing.\n        queue.DeleteMessage(message);\n    }\n\n## 获取队列长度\n\n你可以获取队列中消息的估计数。使用 **FetchAttributes** 方法可请求队列服务检索队列属性，包括消息计数。**ApproximateMessageCount** 属性返回 **FetchAttributes** 方法检索到的最后一个值，而不会调用队列服务。\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Fetch the queue attributes.\n    queue.FetchAttributes();\n\n    // Retrieve the cached approximate message count.\n    int? cachedMessageCount = queue.ApproximateMessageCount;\n\n    // Display number of messages.\n    Console.WriteLine(\"Number of messages in queue: \" + cachedMessageCount);\n\n## 删除队列\n\n若要删除队列及其包含的所有消息，请对队列对象调用 **Delete** 方法。\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the queue client.\n    CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n    // Retrieve a reference to a queue.\n    CloudQueue queue = queueClient.GetQueueReference(\"myqueue\");\n\n    // Delete the queue.\n    queue.Delete();\n\n## 后续步骤\n\n现在，您已了解有关队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。\n\n- 查看队列服务参考文档，了解有关可用 API 的完整详细信息：\n    - [.NET 存储客户端库参考](https://msdn.microsoft.com/zh-cn/library/mt347887.aspx)\n    - [REST API 参考](http://msdn.microsoft.com/zh-cn/library/azure/dd179355)\n- 了解如何通过使用 [Azure WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk) 简化为使用 Azure 存储空间而写的代码。\n- 查看更多功能指南，以了解在 Azure 中存储数据的其他方式。\n    - 使用[表存储](/documentation/articles/storage-dotnet-how-to-use-tables)来存储结构化数据。 \n    - 使用 [Blob 存储](/documentation/articles/storage-dotnet-how-to-use-blobs)来存储非结构化数据。\n    - 使用 [SQL 数据库](/documentation/articles/sql-database-dotnet-how-to-use)来存储关系数据。\n\n\n\n  [下载并安装 Azure SDK for.NET]:/develop/net/\n  [.NET 客户端库引用]: https://msdn.microsoft.com/zh-cn/library/mt347887.aspx\n  [在 Visual Studio 中创建 Azure 项目]: http://msdn.microsoft.com/zh-cn/library/azure/ee405487.aspx\n  [CloudStorageAccount]: https://msdn.microsoft.com/zh-cn/library/microsoft.windowsazure.storage.cloudstorageaccount_methods.aspx\n  [在 Azure 中存储和访问数据]: http://msdn.microsoft.com/zh-cn/library/azure/gg433040.aspx\n  [Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n  [配置连接字符串]: http://msdn.microsoft.com/zh-cn/library/azure/ee758697.aspx\n  [OData]: http://nuget.org/packages/Microsoft.Data.OData/5.0.2\n  [Edm]: http://nuget.org/packages/Microsoft.Data.Edm/5.0.2\n  [Spatial]: http://nuget.org/packages/System.Spatial/5.0.2\n \n\n<!---HONumber=Mooncake_0307_2016-->"
}