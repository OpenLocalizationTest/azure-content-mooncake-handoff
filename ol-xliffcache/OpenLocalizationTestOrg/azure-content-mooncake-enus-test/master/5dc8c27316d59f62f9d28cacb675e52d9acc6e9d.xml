{
  "nodes": [
    {
      "pos": [
        0,
        166
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure Web 应用<ept id=\"p1\">](/documentation/services/web-sites/)</ept>支持从源代码控件和存储库工具（例如，Git、GitHub、Mercurial 和 TFS）连续部署到 Web 应用。可以使用这些工具维护你 Web 应用的内容和代码，然后在需要时快速轻松地将更改推送到你的 Azure Web 应用。"
    },
    {
      "pos": [
        168,
        280
      ],
      "content": "在本文中，你将了解如何使用 Git 从本地计算机直接发布到 Web 应用（在 Azure 中，此发布方法称为<bpt id=\"p1\">**</bpt>本地 Git<ept id=\"p1\">**</ept>）。你还将了解如何启用从存储库站点（例如，GitHub 或 Mercurial）进行的连续部署。"
    },
    {
      "pos": [
        284,
        406
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 在使用<bpt id=\"p1\">[</bpt>适用于 Mac 和 Linux 的 Azure 命令行工具<ept id=\"p1\">](/documentation/articles/xplat-cli-install)</ept>创建 Web 应用时，将自动执行本文中所述的许多 Git 命令。"
    },
    {
      "content": "此任务包括下列步骤：",
      "pos": [
        408,
        418
      ]
    },
    {
      "content": "安装 Git",
      "pos": [
        423,
        429
      ]
    },
    {
      "content": "创建本地存储库",
      "pos": [
        442,
        449
      ]
    },
    {
      "content": "添加网页",
      "pos": [
        462,
        466
      ]
    },
    {
      "content": "启用 Web 应用存储库",
      "pos": [
        479,
        491
      ]
    },
    {
      "content": "部署项目",
      "pos": [
        504,
        508
      ]
    },
    {
      "content": "将本地文件推送到 Azure（本地 Git）",
      "pos": [
        525,
        547
      ]
    },
    {
      "content": "从存储库 Web 应用（例如，GitHub 或 Mercurial）部署文件",
      "pos": [
        564,
        602
      ]
    },
    {
      "content": "故障排除",
      "pos": [
        615,
        619
      ]
    },
    {
      "pos": [
        633,
        662
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step1\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>步骤 1：安装 Git"
    },
    {
      "pos": [
        664,
        716
      ],
      "content": "安装 Git 所需的步骤因操作系统的不同而异。有关操作系统特定的分发和安装指南，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">安装 Git]</ept>。"
    },
    {
      "pos": [
        720,
        779
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 在某些操作系统上，命令行和 GUI 版本的 Git 都可用。本文中提供的说明使用命令行版本。"
    },
    {
      "pos": [
        784,
        814
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step2\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>步骤 2：创建本地存储库"
    },
    {
      "content": "执行下列任务可创建新的 Git 存储库。",
      "pos": [
        816,
        836
      ]
    },
    {
      "content": "创建名为 MyGitRepository 的目录，用于包含 Git 存储库和 Web 应用文件。",
      "pos": [
        841,
        889
      ]
    },
    {
      "pos": [
        894,
        992
      ],
      "content": "打开一个命令行工具，例如 <bpt id=\"p1\">**</bpt>GitBash<ept id=\"p1\">**</ept> (Windows) 或 <bpt id=\"p2\">**</bpt>Bash<ept id=\"p2\">**</ept> (Unix Shell)。在 OS X 系统上，可以通过 <bpt id=\"p3\">**</bpt>Terminal<ept id=\"p3\">**</ept> 应用程序访问命令行。"
    },
    {
      "content": "在命令行中，更改为 MyGitRepository 目录。",
      "pos": [
        997,
        1026
      ]
    },
    {
      "content": "使用以下命令可初始化新的 Git 存储库：",
      "pos": [
        1059,
        1080
      ]
    },
    {
      "content": "这将返回一条消息，例如“已在 [路径] 中初始化空 Git 存储库”。",
      "pos": [
        1104,
        1139
      ]
    },
    {
      "pos": [
        1144,
        1171
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step3\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>步骤 3：添加网页"
    },
    {
      "content": "Web 应用支持用各种编程语言创建的应用程序。对于此示例，你将使用静态 .html 文件。",
      "pos": [
        1174,
        1219
      ]
    },
    {
      "pos": [
        1224,
        1302
      ],
      "content": "通过使用文本编辑器，在 Git 存储库的根目录下（你先前创建的 MyGitRepository 目录）创建一个名为 <bpt id=\"p1\">**</bpt>index.html<ept id=\"p1\">**</ept> 的新文件。"
    },
    {
      "content": "添加以下文本作为 index.html 文件的内容并保存该文件。",
      "pos": [
        1307,
        1339
      ]
    },
    {
      "pos": [
        1364,
        1427
      ],
      "content": "在命令行中，验证当前位置是否在 Git 存储库的根目录下。然后使用以下命令将 <bpt id=\"p1\">**</bpt>index.html<ept id=\"p1\">**</ept> 文件添加到存储库："
    },
    {
      "pos": [
        1464,
        1598
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 你可以通过在命令后键入 -help 或 --help，查找有关任何 git 命令的帮助。例如，若要了解 add 命令的参数选项，请键入“git add -help”以获取命令行帮助，或键入“git add --help”以获取更加详细的帮助。"
    },
    {
      "content": "接下来，使用以下命令将更改提交到存储库：",
      "pos": [
        1603,
        1623
      ]
    },
    {
      "content": "您应该会看到与下面类似的输出：",
      "pos": [
        1690,
        1705
      ]
    },
    {
      "pos": [
        1865,
        1895
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step4\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>启用 Web 应用存储库"
    },
    {
      "content": "执行以下步骤可为你的 Web 应用启用 Git 存储库。",
      "pos": [
        1897,
        1925
      ]
    },
    {
      "pos": [
        1930,
        1947
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 管理门户]</ept>。"
    },
    {
      "content": "单击“新建”按钮以创建将为其启用存储库的新 Web 应用。",
      "pos": [
        1952,
        1981
      ]
    },
    {
      "content": "等待至 Web 应用创建过程在“ Web 应用”视图中完成，然后选择该 Web 应用。",
      "pos": [
        1986,
        2029
      ]
    },
    {
      "content": "显示选定 Web 应用的图像",
      "pos": [
        2037,
        2051
      ]
    },
    {
      "content": "选择“仪表板”选项卡。",
      "pos": [
        2080,
        2091
      ]
    },
    {
      "content": "在“速览”部分中，选择“从源控件设置部署”。此时将显示以下“设置部署”对话框。",
      "pos": [
        2096,
        2135
      ]
    },
    {
      "content": "git-WhereIsYourSourceCode",
      "pos": [
        2143,
        2168
      ]
    },
    {
      "content": "选择“本地 Git”，然后单击“下一页”箭头。",
      "pos": [
        2201,
        2224
      ]
    },
    {
      "content": "如果这是你第一次在 Azure 中设置存储库，则需要为其创建登录凭据。你将使用它们从本地 Git 存储库登录到 Azure 的存储库和推送更改。",
      "pos": [
        2229,
        2301
      ]
    },
    {
      "content": "一小段延迟后，将显示一条指明存储库已就绪的消息。",
      "pos": [
        2368,
        2392
      ]
    },
    {
      "content": "git 说明",
      "pos": [
        2400,
        2406
      ]
    },
    {
      "pos": [
        2430,
        2452
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step5\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>部署项目"
    },
    {
      "content": "将本地文件推送到 Azure（本地 Git）",
      "pos": [
        2457,
        2479
      ]
    },
    {
      "content": "从存储库 Web 应用（例如，GitHub 或 Mercurial）部署文件",
      "pos": [
        2492,
        2530
      ]
    },
    {
      "content": "从 GitHub 或 Mercurial 部署 Visual Studio 解决方案",
      "pos": [
        2543,
        2585
      ]
    },
    {
      "pos": [
        2597,
        2651
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step6\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>按照以下步骤，使用本地 Git 将你的 Web 应用发布到 Azure。"
    },
    {
      "content": "此时，门户将显示有关初始化本地存储库和添加文件的说明。你已经在本主题的前几个步骤中执行了此操作。但是，如果没有设置你的部署凭据，你必须转回至门户中的“仪表板”选项卡并单击“重置部署凭据”。",
      "pos": [
        2654,
        2748
      ]
    },
    {
      "content": "按照以下步骤，使用本地 Git 将你的 Web 应用发布到 Azure：",
      "pos": [
        2750,
        2786
      ]
    },
    {
      "content": "通过使用命令行，确认当前位置是包含以前创建的 index.html 文件的本地 Git 存储库的根目录。",
      "pos": [
        2791,
        2843
      ]
    },
    {
      "content": "复制 git remote add 命令，该命令已在门户所返回说明的步骤 3 中列出。它将类似于以下命令：",
      "pos": [
        2848,
        2901
      ]
    },
    {
      "pos": [
        3013,
        3086
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> <bpt id=\"p1\">**</bpt>remote<ept id=\"p1\">**</ept> 命令可将命名引用添加到远程存储库。在本例中，它为 Web 应用存储库创建名为“azure”的引用。"
    },
    {
      "content": "从命令行中使用以下命令可将当前存储库内容从本地存储库推送到“azure”远程 Web 应用：",
      "pos": [
        3091,
        3137
      ]
    },
    {
      "content": "当你在门户中重置部署凭据时，系统将提示你输入以前创建的密码。输入该密码（请注意，在键入密码时，Gitbash 不会将星号回显到控制台）。您应该会看到与下面类似的输出：",
      "pos": [
        3174,
        3257
      ]
    },
    {
      "pos": [
        3813,
        3899
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 为 Web 应用创建的存储库应推送请求以便面向其存储库的 <ph id=\"ph2\">&lt;strong&gt;</ph>master<ph id=\"ph3\">&lt;/strong&gt;</ph> 分支，后者将用作该 Web 应用的内容。"
    },
    {
      "pos": [
        3904,
        3970
      ],
      "content": "在门户中，单击门户底部的“浏览”链接以验证是否已部署 <bpt id=\"p1\">**</bpt>index.html<ept id=\"p1\">**</ept>。这将显示一个包含“Hello Git!”的页面。"
    },
    {
      "content": "包含“Hello Git!”的网页",
      "pos": [
        3978,
        3995
      ]
    },
    {
      "pos": [
        4012,
        4062
      ],
      "content": "通过使用文本编辑器，更改 <bpt id=\"p1\">**</bpt>index.html<ept id=\"p1\">**</ept> 文件以使其包含“Yay!”，然后保存该文件。"
    },
    {
      "pos": [
        4067,
        4112
      ],
      "content": "从命令行使用以下命令可<bpt id=\"p1\">**</bpt>添加<ept id=\"p1\">**</ept>和<bpt id=\"p2\">**</bpt>提交<ept id=\"p2\">**</ept>更改，然后将更改<bpt id=\"p3\">**</bpt>推送<ept id=\"p3\">**</ept>到远程存储库："
    },
    {
      "pos": [
        4212,
        4284
      ],
      "content": "完成 <bpt id=\"p1\">**</bpt>push<ept id=\"p1\">**</ept> 命令后，请刷新浏览器（你可能必须按 Ctrl+F5 才能正确刷新浏览器），你会发现该页面的内容此时将反映最新提交的更改。"
    },
    {
      "pos": [
        4290,
        4341
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step7\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>从存储库站点（例如，GitHub 或 Mercurial）部署文件"
    },
    {
      "content": "通过使用“本地 Git”将本地文件推送到 Azure，可以手动将更新从本地项目推送到 Azure 中的 Web 应用，而从 GitHub 或 Mercurial 进行部署会生成一个连续部署过程，在此过程中，Azure 会从项目中拉入最新的更新。",
      "pos": [
        4343,
        4465
      ]
    },
    {
      "content": "这两种方法都会将项目部署到 Web 应用，如果你有多个人员在处理同一个项目并希望确保始终发布最新版本（不管是谁执行了最新更新），则连续部署会很有用。此外，如果你将上述工具之一用作应用程序的中央存储库，则连续部署也很有用。",
      "pos": [
        4467,
        4577
      ]
    },
    {
      "pos": [
        4579,
        4669
      ],
      "content": "从 GitHub 部署文件需要你已将本地项目发布到这些服务之一。有关将项目发布到这些服务的详细信息，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">创建存储库 (GitHub)]</ept> 或<bpt id=\"p2\">[</bpt><ept id=\"p2\">快速入门 - Mercurial]</ept>。"
    },
    {
      "content": "首先，将您的 Web 应用文件放到将用于连续部署的选定存储库中。",
      "pos": [
        4674,
        4706
      ]
    },
    {
      "content": "在 Web 应用的 Azure 管理门户中，转到“仪表板”选项卡。在“速览”部分中，选择“从源控件设置部署”。这将显示“设置部署”对话框，该对话框会询问“你的源代码在哪里?”。",
      "pos": [
        4711,
        4799
      ]
    },
    {
      "content": "选择“外部存储库”。",
      "pos": [
        4804,
        4814
      ]
    },
    {
      "content": "出现提示时，请输入存储库 URL 以及你需要部署的分支的名称（默认为 master）。",
      "pos": [
        4823,
        4866
      ]
    },
    {
      "content": "Azure 创建与所选存储库的关联，并从 master 分支拉入文件。在此过程完成后，“部署”页面上的“部署历史记录”将显示与下面类似的“活动部署”消息：",
      "pos": [
        4871,
        4948
      ]
    },
    {
      "content": "git-githubdeployed",
      "pos": [
        4956,
        4974
      ]
    },
    {
      "content": "此时，已将你的项目从所选存储库部署到 Azure Web 应用。若要验证该站点是否处于活动状态，请单击门户底部的“浏览”链接。浏览器应导航到该 Web 应用。",
      "pos": [
        5000,
        5079
      ]
    },
    {
      "content": "若要验证连续部署是否正在进行，请更改你的项目，然后将所做的更新推送到已与此 Web 应用关联的存储库。推送到存储库完成后，你的 Web 应用应很快更新以反映更改。可以在 Web 应用的“部署”页面上验证是否已拉入更新。",
      "pos": [
        5084,
        5193
      ]
    },
    {
      "pos": [
        5199,
        5260
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step75\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>从 GitHub 或 Mercurial 部署 Visual Studio 解决方案"
    },
    {
      "content": "将 Visual Studio 解决方案推送到 Azure Web 应用中的 Web 应用就像推送简单的 index.html 文件一样容易。 Web 应用部署过程简化了所有细节，包括还原 NuGet 依赖项和构建应用程序二进制文件。可以按照仅在你的 Git 存储库中维护代码的源控制最佳实践操作，并让 Web 应用部署处理其余工作。",
      "pos": [
        5262,
        5429
      ]
    },
    {
      "pos": [
        5431,
        5507
      ],
      "content": "将 Visual Studio 解决方案推送到 Web 应用的步骤与<bpt id=\"p1\">[</bpt>上一部分<ept id=\"p1\">](#Step7)</ept>中的步骤相同，前提是按以下方式配置你的解决方案和存储库："
    },
    {
      "pos": [
        5513,
        5663
      ],
      "content": "在你的存储库根中，添加 <ph id=\"ph1\">`.gitignore`</ph> 文件，然后指定想要从你的存储库中排除的所有文件和文件夹，例如，<ph id=\"ph2\">`Obj`</ph>、<ph id=\"ph3\">`Bin`</ph> 和 <ph id=\"ph4\">`packages`</ph> 文件夹（有关格式信息，请参阅 <bpt id=\"p1\">[</bpt>gitignore 文档<ept id=\"p1\">](http://git-scm.com/docs/gitignore)</ept>）。例如："
    },
    {
      "pos": [
        5928,
        6040
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 如果你使用 GitHub，可以选择在创建存储库时生成 Visual Studio 特定 .gitignore 文件，其中包括所有常见的临时文件和生成结果等。然后可以对其进行自定义以满足你的特定需求。"
    },
    {
      "content": "将整个解决方案的目录树添加到你的存储库中，其中 .sln 文件位于存储库根中。",
      "pos": [
        6046,
        6085
      ]
    },
    {
      "content": "你按照说明设置存储库并将 Azure 中的 Web 应用配置为从某个联机 Git 存储库连续发布后，你就可以在 Visual Studio 中从本地开发 ASP.NET 应用程序，并且只需通过将所做的更改推送到联机的 Git 存储库即可连续部署代码。",
      "pos": [
        6087,
        6212
      ]
    },
    {
      "content": "禁用连续部署",
      "pos": [
        6217,
        6223
      ]
    },
    {
      "content": "可从 Azure“仪表板”禁用连续部署。在“速览”部分下，选择用于断开与所使用存储库的连接的选项：",
      "pos": [
        6225,
        6274
      ]
    },
    {
      "content": "git-DisconnectFromGitHub",
      "pos": [
        6278,
        6302
      ]
    },
    {
      "content": "在显示确认消息时回答“是”后，若要从其他源设置发布，你可以返回到“速览”并单击“从源控件设置部署”。",
      "pos": [
        6331,
        6381
      ]
    },
    {
      "pos": [
        6386,
        6408
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Step8\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>故障排除"
    },
    {
      "content": "以下是使用 Git 发布到 Azure 中的 Web 应用时遇到的常见错误或问题：",
      "pos": [
        6410,
        6451
      ]
    },
    {
      "pos": [
        6459,
        6500
      ],
      "content": "<bpt id=\"p1\">**</bpt>症状<ept id=\"p1\">**</ept>：无法访问“[siteURL]”：无法连接到 [scmAddress]"
    },
    {
      "pos": [
        6502,
        6534
      ],
      "content": "<bpt id=\"p1\">**</bpt>原因<ept id=\"p1\">**</ept>：如果 Web 应用无法正常工作，则可能发生此错误。"
    },
    {
      "pos": [
        6536,
        6592
      ],
      "content": "<bpt id=\"p1\">**</bpt>解决方法<ept id=\"p1\">**</ept>：在 Azure 管理门户中启动 Web 应用。在 Web 应用运行之前，Git 部署无法进行。"
    },
    {
      "pos": [
        6601,
        6619
      ],
      "content": "<bpt id=\"p1\">**</bpt>症状<ept id=\"p1\">**</ept>：无法解析主机“主机名”"
    },
    {
      "pos": [
        6621,
        6668
      ],
      "content": "<bpt id=\"p1\">**</bpt>原因<ept id=\"p1\">**</ept>：如果创建“azure”远程 Web 应用时输入的地址信息不正确，则会发生该错误。"
    },
    {
      "pos": [
        6670,
        6785
      ],
      "content": "<bpt id=\"p1\">**</bpt>解决方法<ept id=\"p1\">**</ept>：使用 <ph id=\"ph1\">`git remote -v`</ph> 命令列出所有远程 Web 应用以及关联的 URL。确认“azure”远程 Web 应用的 URL 正确。如果需要，请删除此远程 Web 应用并使用正确的 URL 重新创建它。"
    },
    {
      "pos": [
        6793,
        6844
      ],
      "content": "<bpt id=\"p1\">**</bpt>症状<ept id=\"p1\">**</ept>：无通用引用且未指定任何引用；不采取任何措施。或许你应指定一个分支，例如“master”。"
    },
    {
      "pos": [
        6846,
        6910
      ],
      "content": "<bpt id=\"p1\">**</bpt>原因<ept id=\"p1\">**</ept>：如果你在执行 Git 推送操作时未指定分支且未设置 Git 使用的 push.default 值，则会发生该错误。"
    },
    {
      "pos": [
        6912,
        6948
      ],
      "content": "<bpt id=\"p1\">**</bpt>解决方法<ept id=\"p1\">**</ept>：请再次执行推送操作，并指定 master 分支。例如："
    },
    {
      "pos": [
        6983,
        7016
      ],
      "content": "<bpt id=\"p1\">**</bpt>症状<ept id=\"p1\">**</ept>：src refspec [分支名] 不匹配任何内容。"
    },
    {
      "pos": [
        7018,
        7074
      ],
      "content": "<bpt id=\"p1\">**</bpt>原因<ept id=\"p1\">**</ept>：如果你尝试推送到“azure”远程 Web 应用上 master 分支之外的分支，则会发生该错误。"
    },
    {
      "pos": [
        7076,
        7112
      ],
      "content": "<bpt id=\"p1\">**</bpt>解决方法<ept id=\"p1\">**</ept>：请再次执行推送操作，并指定 master 分支。例如："
    },
    {
      "pos": [
        7147,
        7186
      ],
      "content": "<bpt id=\"p1\">**</bpt>症状<ept id=\"p1\">**</ept>：错误 - 已将更改提交到远程存储库，但未更新你的 Web 应用。"
    },
    {
      "pos": [
        7188,
        7256
      ],
      "content": "<bpt id=\"p1\">**</bpt>原因<ept id=\"p1\">**</ept>：如果你部署的是 Node.js 应用程序，其中包含用于指定其他必需模块的 package.json 文件，则会发生该错误。"
    },
    {
      "pos": [
        7258,
        7338
      ],
      "content": "<bpt id=\"p1\">**</bpt>解决方法<ept id=\"p1\">**</ept>：应在发生此错误前记录包含“npm ERR!”的其他消息，并可提供有关失败的其他上下文。以下是该错误的已知原因和相应的“npm ERR!”消息："
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>package.json 文件格式不正确<ept id=\"p1\">**</ept>：npm ERR!",
      "pos": [
        7342,
        7375
      ]
    },
    {
      "content": "无法读取依赖项。",
      "pos": [
        7376,
        7384
      ]
    },
    {
      "pos": [
        7388,
        7416
      ],
      "content": "<bpt id=\"p1\">**</bpt>不具有 Windows 的二进制分发的本机模块<ept id=\"p1\">**</ept>："
    },
    {
      "content": "npm ERR!",
      "pos": [
        7424,
        7432
      ]
    },
    {
      "content": "<ph id=\"ph1\">`cmd \"/c\" \"node-gyp rebuild\"`</ph> failed with 1",
      "pos": [
        7433,
        7476
      ]
    },
    {
      "content": "或者",
      "pos": [
        7486,
        7488
      ]
    },
    {
      "content": "npm ERR!",
      "pos": [
        7496,
        7504
      ]
    },
    {
      "content": "[modulename@version] preinstall: <ph id=\"ph1\">`make || gmake`</ph>",
      "pos": [
        7505,
        7553
      ]
    },
    {
      "content": "其他资源",
      "pos": [
        7559,
        7563
      ]
    },
    {
      "content": "如何使用适用于 Azure 的 PowerShell",
      "pos": [
        7568,
        7594
      ]
    },
    {
      "content": "如何使用针对 Mac 和 Linux 的 Azure 命令行工具",
      "pos": [
        7599,
        7631
      ]
    },
    {
      "content": "Git 文档",
      "pos": [
        7636,
        7642
      ]
    }
  ],
  "content": "[Azure Web 应用](/documentation/services/web-sites/)支持从源代码控件和存储库工具（例如，Git、GitHub、Mercurial 和 TFS）连续部署到 Web 应用。可以使用这些工具维护你 Web 应用的内容和代码，然后在需要时快速轻松地将更改推送到你的 Azure Web 应用。\n\n在本文中，你将了解如何使用 Git 从本地计算机直接发布到 Web 应用（在 Azure 中，此发布方法称为**本地 Git**）。你还将了解如何启用从存储库站点（例如，GitHub 或 Mercurial）进行的连续部署。\n\n> [AZURE.NOTE] 在使用[适用于 Mac 和 Linux 的 Azure 命令行工具](/documentation/articles/xplat-cli-install)创建 Web 应用时，将自动执行本文中所述的许多 Git 命令。\n\n此任务包括下列步骤：\n\n* [安装 Git](#Step1)\n* [创建本地存储库](#Step2)\n* [添加网页](#Step3)\n* [启用 Web 应用存储库](#Step4)\n* [部署项目](#Step5)\n    * [将本地文件推送到 Azure（本地 Git）](#Step6)\n    * [从存储库 Web 应用（例如，GitHub 或 Mercurial）部署文件](#Step7)\n* [故障排除](#Step8)\n\n## <a id=\"Step1\"></a>步骤 1：安装 Git\n\n安装 Git 所需的步骤因操作系统的不同而异。有关操作系统特定的分发和安装指南，请参阅[安装 Git]。\n\n> [AZURE.NOTE] 在某些操作系统上，命令行和 GUI 版本的 Git 都可用。本文中提供的说明使用命令行版本。\n\n## <a id=\"Step2\"></a>步骤 2：创建本地存储库\n\n执行下列任务可创建新的 Git 存储库。\n\n1. 创建名为 MyGitRepository 的目录，用于包含 Git 存储库和 Web 应用文件。\n\n2. 打开一个命令行工具，例如 **GitBash** (Windows) 或 **Bash** (Unix Shell)。在 OS X 系统上，可以通过 **Terminal** 应用程序访问命令行。\n\n3. 在命令行中，更改为 MyGitRepository 目录。\n\n        cd MyGitRepository\n\n4. 使用以下命令可初始化新的 Git 存储库：\n\n        git init\n\n    这将返回一条消息，例如“已在 [路径] 中初始化空 Git 存储库”。\n\n## <a id=\"Step3\"></a>步骤 3：添加网页\n\n Web 应用支持用各种编程语言创建的应用程序。对于此示例，你将使用静态 .html 文件。\n\n1. 通过使用文本编辑器，在 Git 存储库的根目录下（你先前创建的 MyGitRepository 目录）创建一个名为 **index.html** 的新文件。\n\n2. 添加以下文本作为 index.html 文件的内容并保存该文件。\n\n        Hello Git!\n\n3. 在命令行中，验证当前位置是否在 Git 存储库的根目录下。然后使用以下命令将 **index.html** 文件添加到存储库：\n\n        git add index.html \n\n    > [AZURE.NOTE] 你可以通过在命令后键入 -help 或 --help，查找有关任何 git 命令的帮助。例如，若要了解 add 命令的参数选项，请键入“git add -help”以获取命令行帮助，或键入“git add --help”以获取更加详细的帮助。\n\n4. 接下来，使用以下命令将更改提交到存储库：\n\n        git commit -m \"Adding index.html to the repository\"\n\n    您应该会看到与下面类似的输出：\n\n        [master (root-commit) 369a79c] Adding index.html to the repository\n         1 file changed, 1 insertion(+)\n         create mode 100644 index.html\n\n## <a id=\"Step4\"></a>启用 Web 应用存储库\n\n执行以下步骤可为你的 Web 应用启用 Git 存储库。\n\n1. 登录到 [Azure 管理门户]。\n\n2. 单击“新建”按钮以创建将为其启用存储库的新 Web 应用。\n\n2. 等待至 Web 应用创建过程在“ Web 应用”视图中完成，然后选择该 Web 应用。\n\n    ![显示选定 Web 应用的图像][portal-select-website]\n\n3. 选择“仪表板”选项卡。\n\n4. 在“速览”部分中，选择“从源控件设置部署”。此时将显示以下“设置部署”对话框。\n\n    ![git-WhereIsYourSourceCode][git-WhereIsYourSourceCode]\n\n4. 选择“本地 Git”，然后单击“下一页”箭头。\n\n4. 如果这是你第一次在 Azure 中设置存储库，则需要为其创建登录凭据。你将使用它们从本地 Git 存储库登录到 Azure 的存储库和推送更改。\n\n    ![](./media/publishing-with-git/git_credentials.png)\n    \n5. 一小段延迟后，将显示一条指明存储库已就绪的消息。\n\n    ![git 说明][git-instructions]\n\n## <a id=\"Step5\"></a>部署项目\n\n* [将本地文件推送到 Azure（本地 Git）](#Step6)\n* [从存储库 Web 应用（例如，GitHub 或 Mercurial）部署文件](#Step7)\n* [从 GitHub 或 Mercurial 部署 Visual Studio 解决方案](#Step75)\n\n<a id=\"Step6\"></a>按照以下步骤，使用本地 Git 将你的 Web 应用发布到 Azure。\n\n\n此时，门户将显示有关初始化本地存储库和添加文件的说明。你已经在本主题的前几个步骤中执行了此操作。但是，如果没有设置你的部署凭据，你必须转回至门户中的“仪表板”选项卡并单击“重置部署凭据”。\n\n按照以下步骤，使用本地 Git 将你的 Web 应用发布到 Azure：\n\n1. 通过使用命令行，确认当前位置是包含以前创建的 index.html 文件的本地 Git 存储库的根目录。\n\n2. 复制 git remote add 命令，该命令已在门户所返回说明的步骤 3 中列出。它将类似于以下命令：\n\n        git remote add azure https://username@needsmoregit.scm.chinacloudsites.cn:443/NeedsMoreGit.git\n\n    > [AZURE.NOTE] **remote** 命令可将命名引用添加到远程存储库。在本例中，它为 Web 应用存储库创建名为“azure”的引用。\n\n1. 从命令行中使用以下命令可将当前存储库内容从本地存储库推送到“azure”远程 Web 应用：\n\n        git push azure master\n\n    当你在门户中重置部署凭据时，系统将提示你输入以前创建的密码。输入该密码（请注意，在键入密码时，Gitbash 不会将星号回显到控制台）。您应该会看到与下面类似的输出：\n\n        Counting objects: 6, done.\n        Compressing objects: 100% (2/2), done.\n        Writing objects: 100% (6/6), 486 bytes, done.\n        Total 6 (delta 0), reused 0 (delta 0)\n        remote: New deployment received.\n        remote: Updating branch 'master'.\n        remote: Preparing deployment for commit id '369a79c929'.\n        remote: Preparing files for deployment.\n        remote: Deployment successful.\n        To https://username@needsmoregit.scm.chinacloudsites.cn:443/NeedsMoreGit.git\n        * [new branch]      master -> master\n\n    > [AZURE.NOTE] 为 Web 应用创建的存储库应推送请求以便面向其存储库的 <strong>master</strong> 分支，后者将用作该 Web 应用的内容。\n\n2. 在门户中，单击门户底部的“浏览”链接以验证是否已部署 **index.html**。这将显示一个包含“Hello Git!”的页面。\n\n    ![包含“Hello Git!”的网页][hello-git]\n\n3. 通过使用文本编辑器，更改 **index.html** 文件以使其包含“Yay!”，然后保存该文件。\n\n4. 从命令行使用以下命令可**添加**和**提交**更改，然后将更改**推送**到远程存储库：\n\n        git add index.html\n        git commit -m \"Celebration\"\n        git push azure master\n\n    完成 **push** 命令后，请刷新浏览器（你可能必须按 Ctrl+F5 才能正确刷新浏览器），你会发现该页面的内容此时将反映最新提交的更改。\n\n### <a id=\"Step7\"></a>从存储库站点（例如，GitHub 或 Mercurial）部署文件\n\n通过使用“本地 Git”将本地文件推送到 Azure，可以手动将更新从本地项目推送到 Azure 中的 Web 应用，而从 GitHub 或 Mercurial 进行部署会生成一个连续部署过程，在此过程中，Azure 会从项目中拉入最新的更新。\n\n这两种方法都会将项目部署到 Web 应用，如果你有多个人员在处理同一个项目并希望确保始终发布最新版本（不管是谁执行了最新更新），则连续部署会很有用。此外，如果你将上述工具之一用作应用程序的中央存储库，则连续部署也很有用。\n\n从 GitHub 部署文件需要你已将本地项目发布到这些服务之一。有关将项目发布到这些服务的详细信息，请参阅[创建存储库 (GitHub)] 或[快速入门 - Mercurial]。\n\n1. 首先，将您的 Web 应用文件放到将用于连续部署的选定存储库中。\n\n2. 在 Web 应用的 Azure 管理门户中，转到“仪表板”选项卡。在“速览”部分中，选择“从源控件设置部署”。这将显示“设置部署”对话框，该对话框会询问“你的源代码在哪里?”。\n\n2. 选择“外部存储库”。\n    \n3. 出现提示时，请输入存储库 URL 以及你需要部署的分支的名称（默认为 master）。\n\n6. Azure 创建与所选存储库的关联，并从 master 分支拉入文件。在此过程完成后，“部署”页面上的“部署历史记录”将显示与下面类似的“活动部署”消息：\n\n    ![git-githubdeployed][git-githubdeployed]\n\n7. 此时，已将你的项目从所选存储库部署到 Azure Web 应用。若要验证该站点是否处于活动状态，请单击门户底部的“浏览”链接。浏览器应导航到该 Web 应用。\n\n8. 若要验证连续部署是否正在进行，请更改你的项目，然后将所做的更新推送到已与此 Web 应用关联的存储库。推送到存储库完成后，你的 Web 应用应很快更新以反映更改。可以在 Web 应用的“部署”页面上验证是否已拉入更新。\n\n### <a id=\"Step75\"></a>从 GitHub 或 Mercurial 部署 Visual Studio 解决方案\n\n将 Visual Studio 解决方案推送到 Azure Web 应用中的 Web 应用就像推送简单的 index.html 文件一样容易。 Web 应用部署过程简化了所有细节，包括还原 NuGet 依赖项和构建应用程序二进制文件。可以按照仅在你的 Git 存储库中维护代码的源控制最佳实践操作，并让 Web 应用部署处理其余工作。\n\n将 Visual Studio 解决方案推送到 Web 应用的步骤与[上一部分](#Step7)中的步骤相同，前提是按以下方式配置你的解决方案和存储库：\n\n-   在你的存储库根中，添加 `.gitignore` 文件，然后指定想要从你的存储库中排除的所有文件和文件夹，例如，`Obj`、`Bin` 和 `packages` 文件夹（有关格式信息，请参阅 [gitignore 文档](http://git-scm.com/docs/gitignore)）。例如：\n\n        [Oo]bj/\n        [Bb]in/\n        *.user\n        /TestResults\n        *.vspscc\n        *.vssscc\n        *.suo\n        *.cache\n        *.csproj.user\n        packages/*\n        App_Data/\n        /apps\n        msbuild.log\n        _app/\n        nuget.exe\n\n    >[AZURE.NOTE] 如果你使用 GitHub，可以选择在创建存储库时生成 Visual Studio 特定 .gitignore 文件，其中包括所有常见的临时文件和生成结果等。然后可以对其进行自定义以满足你的特定需求。\n\n-   将整个解决方案的目录树添加到你的存储库中，其中 .sln 文件位于存储库根中。\n\n你按照说明设置存储库并将 Azure 中的 Web 应用配置为从某个联机 Git 存储库连续发布后，你就可以在 Visual Studio 中从本地开发 ASP.NET 应用程序，并且只需通过将所做的更改推送到联机的 Git 存储库即可连续部署代码。\n\n## 禁用连续部署\n\n可从 Azure“仪表板”禁用连续部署。在“速览”部分下，选择用于断开与所使用存储库的连接的选项：\n\n![git-DisconnectFromGitHub][git-DisconnectFromGitHub]\n\n在显示确认消息时回答“是”后，若要从其他源设置发布，你可以返回到“速览”并单击“从源控件设置部署”。\n\n## <a id=\"Step8\"></a>故障排除\n\n以下是使用 Git 发布到 Azure 中的 Web 应用时遇到的常见错误或问题：\n\n****\n\n**症状**：无法访问“[siteURL]”：无法连接到 [scmAddress]\n\n**原因**：如果 Web 应用无法正常工作，则可能发生此错误。\n\n**解决方法**：在 Azure 管理门户中启动 Web 应用。在 Web 应用运行之前，Git 部署无法进行。\n\n\n****\n\n**症状**：无法解析主机“主机名”\n\n**原因**：如果创建“azure”远程 Web 应用时输入的地址信息不正确，则会发生该错误。\n\n**解决方法**：使用 `git remote -v` 命令列出所有远程 Web 应用以及关联的 URL。确认“azure”远程 Web 应用的 URL 正确。如果需要，请删除此远程 Web 应用并使用正确的 URL 重新创建它。\n\n****\n\n**症状**：无通用引用且未指定任何引用；不采取任何措施。或许你应指定一个分支，例如“master”。\n\n**原因**：如果你在执行 Git 推送操作时未指定分支且未设置 Git 使用的 push.default 值，则会发生该错误。\n\n**解决方法**：请再次执行推送操作，并指定 master 分支。例如：\n\n    git push azure master\n\n****\n\n**症状**：src refspec [分支名] 不匹配任何内容。\n\n**原因**：如果你尝试推送到“azure”远程 Web 应用上 master 分支之外的分支，则会发生该错误。\n\n**解决方法**：请再次执行推送操作，并指定 master 分支。例如：\n\n    git push azure master\n\n****\n\n**症状**：错误 - 已将更改提交到远程存储库，但未更新你的 Web 应用。\n\n**原因**：如果你部署的是 Node.js 应用程序，其中包含用于指定其他必需模块的 package.json 文件，则会发生该错误。\n\n**解决方法**：应在发生此错误前记录包含“npm ERR!”的其他消息，并可提供有关失败的其他上下文。以下是该错误的已知原因和相应的“npm ERR!”消息：\n\n* **package.json 文件格式不正确**：npm ERR! 无法读取依赖项。\n\n* **不具有 Windows 的二进制分发的本机模块**：\n\n    * npm ERR! `cmd \"/c\" \"node-gyp rebuild\"` failed with 1\n\n        或者\n\n    * npm ERR! [modulename@version] preinstall: `make || gmake`\n\n\n## 其他资源\n\n* [如何使用适用于 Azure 的 PowerShell]\n* [如何使用针对 Mac 和 Linux 的 Azure 命令行工具]\n* [Git 文档]\n\n[Azure Developer Center]: /documentation/\n[Azure 管理门户]: https://manage.windowsazure.cn\n[Git website]: http://git-scm.com\n[安装 Git]: http://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git\n[如何使用适用于 Azure 的 PowerShell]: /documentation/articles/powershell-install-configure\n[如何使用针对 Mac 和 Linux 的 Azure 命令行工具]: /documentation/articles/xplat-cli-install\n[Git 文档]: http://git-scm.com/documentation\n\n[portal-select-website]: ./media/publishing-with-git/git-select-website.png\n[git-WhereIsYourSourceCode]: ./media/publishing-with-git/git-WhereIsYourSourceCode.png\n[git-instructions]: ./media/publishing-with-git/git-instructions.png\n[portal-deployment-credentials]: ./media/publishing-with-git/git-deployment-credentials.png\n\n[git-ChooseARepositoryToDeploy]: ./media/publishing-with-git/git-ChooseARepositoryToDeploy.png\n[hello-git]: ./media/publishing-with-git/git-hello-git.png\n[yay]: ./media/publishing-with-git/git-yay.png\n[git-githubdeployed]: ./media/publishing-with-git/git-GitHubDeployed.png\n[git-GitHubDeployed-Updated]: ./media/publishing-with-git/git-GitHubDeployed-Updated.png\n[git-DisconnectFromGitHub]: ./media/publishing-with-git/git-DisconnectFromGitHub.png\n[git-DeploymentTrigger]: ./media/publishing-with-git/git-DeploymentTrigger.png\n[创建存储库 (GitHub)]: https://help.github.com/articles/create-a-repo\n[使用 Git 和 CodePlex]: http://codeplex.codeplex.com/wikipage?title=Using%20Git%20with%20CodePlex&referringTitle=Source%20control%20clients&ProjectName=codeplex\n[创建存储库 (BitBucket)]: https://confluence.atlassian.com/display/BITBUCKET/Create+an+Account+and+a+Git+Repo\n[快速入门 - Mercurial]: http://mercurial.selenic.com/wiki/QuickStart\n[使用 Dropbox 共享 Git 存储库]: https://gist.github.com/trey/2722927\n[Continuous delivery to Azure using Visual Studio Team Services]: /documentation/articles/cloud-services-continuous-delivery-use-vso/\n\n<!---HONumber=Mooncake_0118_2016-->"
}