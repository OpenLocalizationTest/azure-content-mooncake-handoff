{
  "nodes": [
    {
      "content": "在 Microsoft Azure 存储空间中使用 Azure 密钥保管库加密和解密 blob | Azure",
      "pos": [
        26,
        81
      ]
    },
    {
      "content": "本教程将指导你如何将  Azure 存储空间的客户端加密与 Azure 密钥保管库配合使用来加密和解密 blob。",
      "pos": [
        99,
        156
      ]
    },
    {
      "content": "在 Azure 存储空间中使用 Azure 密钥保管库加密和解密 blob",
      "pos": [
        343,
        380
      ]
    },
    {
      "content": "介绍",
      "pos": [
        385,
        387
      ]
    },
    {
      "content": "本教程介绍如何结合使用客户端存储加密与 Azure 密钥保管库。其中将引导您完成如何在控制台应用程序中使用这些技术加密和解密 blob。",
      "pos": [
        389,
        457
      ]
    },
    {
      "pos": [
        459,
        476
      ],
      "content": "<bpt id=\"p1\">**</bpt>估计完成时间：<ept id=\"p1\">**</ept>20 分钟。"
    },
    {
      "pos": [
        478,
        561
      ],
      "content": "有关 Azure 密钥保管库的概述信息，请参阅<bpt id=\"p1\">[</bpt>什么是 Azure 密钥保管库？<ept id=\"p1\">](/documentation/articles/key-vault-whatis)</ept>"
    },
    {
      "pos": [
        563,
        668
      ],
      "content": "有关 Azure 存储空间的客户端加密的概述信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 存储空间的客户端加密入门<ept id=\"p1\">](/documentation/articles/storage-client-side-encryption)</ept>"
    },
    {
      "content": "先决条件",
      "pos": [
        675,
        679
      ]
    },
    {
      "content": "若要完成本教程，你必须准备好以下各项：",
      "pos": [
        681,
        700
      ]
    },
    {
      "content": "Azure 存储帐户",
      "pos": [
        704,
        714
      ]
    },
    {
      "content": "Visual Studio 2013 或更高版本",
      "pos": [
        717,
        741
      ]
    },
    {
      "content": "Azure PowerShell",
      "pos": [
        744,
        760
      ]
    },
    {
      "content": "客户端加密概述",
      "pos": [
        766,
        773
      ]
    },
    {
      "pos": [
        775,
        878
      ],
      "content": "有关 Azure 存储空间的客户端加密的概述，请参阅 <bpt id=\"p1\">[</bpt>Azure 存储空间的客户端加密入门<ept id=\"p1\">](/documentation/articles/storage-client-side-encryption)</ept>"
    },
    {
      "content": "下面是客户端加密的工作原理的简要说明：",
      "pos": [
        881,
        900
      ]
    },
    {
      "content": "Azure 存储客户端 SDK 生成内容加密密钥 (CEK)，这是一次性使用对称密钥。",
      "pos": [
        905,
        948
      ]
    },
    {
      "content": "使用此 CEK 对客户数据进行加密。",
      "pos": [
        952,
        970
      ]
    },
    {
      "content": "然后，使用密钥加密密钥 (KEK) 对此 CEK 进行包装（加密）。KEK 由密钥标识符标识，可以是非对称密钥对或对称密钥，还可以在本地托管或存储在 Azure 密钥保管库中。存储空间客户端本身永远无法访问 KEK。它只能调用密钥保管库提供的密钥包装算法。客户可以根据需要选择使用自定义提供程序进行密钥包装/解包。",
      "pos": [
        974,
        1131
      ]
    },
    {
      "content": "然后，将已加密的数据上载到 Azure 存储服务。",
      "pos": [
        1135,
        1160
      ]
    },
    {
      "content": "设置你的 Azure 密钥保管库",
      "pos": [
        1166,
        1182
      ]
    },
    {
      "pos": [
        1183,
        1270
      ],
      "content": "若要继续本教程，你需要执行教程 <bpt id=\"p1\">[</bpt>Azure 密钥保管库入门<ept id=\"p1\">](/documentation/articles/key-vault-get-started)</ept>中所述的以下步骤："
    },
    {
      "content": "创建密钥保管库。",
      "pos": [
        1274,
        1282
      ]
    },
    {
      "content": "将密钥或密码添加到密钥保管库。",
      "pos": [
        1285,
        1300
      ]
    },
    {
      "content": "将应用程序注册到 Azure Active Directory。",
      "pos": [
        1303,
        1335
      ]
    },
    {
      "content": "授权应用程序使用密钥或密码。",
      "pos": [
        1338,
        1352
      ]
    },
    {
      "content": "记下将应用程序注册到 Azure Active Directory 时生成的 ClientID 和 ClientSecret。",
      "pos": [
        1354,
        1417
      ]
    },
    {
      "content": "在密钥保管库中创建这两个密钥。我们在本教程的其余部分将假定使用了以下名称：ContosoKeyVault 和 TestRSAKey1。",
      "pos": [
        1419,
        1486
      ]
    },
    {
      "content": "使用程序包和 AppSettings 创建控制台应用程序",
      "pos": [
        1492,
        1520
      ]
    },
    {
      "content": "在 Visual Studio 中创建新的控制台应用程序。",
      "pos": [
        1522,
        1551
      ]
    },
    {
      "content": "在 Package Manager Console 中添加必要的 Nuget 包。",
      "pos": [
        1553,
        1594
      ]
    },
    {
      "content": "将 AppSettings 添加到 App.Config。",
      "pos": [
        1885,
        1914
      ]
    },
    {
      "pos": [
        2212,
        2264
      ],
      "content": "添加以下 <ph id=\"ph1\">`using`</ph> 语句并确保将对 System.Configuration 的引用添加到项目中。"
    },
    {
      "content": "添加方法以便为控制台应用程序获取令牌",
      "pos": [
        2588,
        2606
      ]
    },
    {
      "content": "以下方法由密钥保管库类使用，这些类需要进行身份验证才能访问你的密钥保管库。",
      "pos": [
        2608,
        2645
      ]
    },
    {
      "content": "在你的程序中访问存储和密钥保管库",
      "pos": [
        3249,
        3265
      ]
    },
    {
      "content": "在 Main 函数中，添加以下代码。",
      "pos": [
        3267,
        3285
      ]
    },
    {
      "pos": [
        4025,
        4047
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 密钥保管库对象模型"
    },
    {
      "content": "务必了解，实际上有两个密钥保管库对象模型：一个基于 REST API（KeyVault 命名空间），另一个是客户端加密的扩展。",
      "pos": [
        4051,
        4114
      ]
    },
    {
      "content": "密钥保管库客户端与 REST API 进行交互，并了解密钥保管库中包含的两种模型的 JSON Web 密钥和密码。",
      "pos": [
        4118,
        4175
      ]
    },
    {
      "content": "密钥保管库扩展似乎是专门为 Azure 存储空间中的客户端加密所创建的类。根据密钥解析程序的概念，它们包含密钥 (IKey) 和类的接口。您需要了解两种 IKey 实现：RSAKey 和 SymmetricKey。现在它们碰巧与密钥保管库中包含的内容保持一致，但此时它们是独立的类（因此，密钥保管库客户端检索到的密钥与秘密检索未实现 IKey）。",
      "pos": [
        4179,
        4352
      ]
    },
    {
      "content": "加密 blob 和上载",
      "pos": [
        4358,
        4369
      ]
    },
    {
      "pos": [
        4370,
        4438
      ],
      "content": "添加以下代码以加密 blob 并将其上载到 Azure 存储帐户。使用的 <bpt id=\"p1\">**</bpt>ResolveKeyAsync<ept id=\"p1\">**</ept> 方法会返回 IKey。"
    },
    {
      "pos": [
        5335,
        5490
      ],
      "content": "下面是一个 blob 的 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](manage.windowsazure.cn)</ept>的屏幕截图，该 blob 已使用客户端加密通过密钥保管库中存储的密钥进行加密。<bpt id=\"p2\">**</bpt>KeyId<ept id=\"p2\">**</ept> 属性是密钥保管库中充当 KEK 的密钥的 URI。<bpt id=\"p3\">**</bpt>EncryptedKey<ept id=\"p3\">**</ept> 属性包含 CEK 的加密版本。"
    },
    {
      "content": "显示包含加密元数据的 Blob 元数据的屏幕截图",
      "pos": [
        5494,
        5518
      ]
    },
    {
      "pos": [
        5526,
        5622
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果您看一下 BlobEncryptionPolicy 构造函数，您将看到它可以接受密钥和/或解析程序。请注意，您现在无法将解析程序用于加密，因为它当前不支持默认密钥。"
    },
    {
      "content": "解密 blob 并下载",
      "pos": [
        5629,
        5640
      ]
    },
    {
      "content": "当使用解析程序类有意义时，实际上就是解密。用于加密的密钥的 ID 与其元数据中的 Blob 相关联，因此你没有理由检索该密钥，请记住密钥与 blob 之间的关联关系。你只需确保该密钥保留在密钥保管库中。",
      "pos": [
        5641,
        5742
      ]
    },
    {
      "content": "RSA 密钥的私钥则保留在密钥保管库中，因此，为了进行解密，来自包含 CEK 的 blob 元数据的加密密钥将发送到密钥保管库进行解密。",
      "pos": [
        5744,
        5812
      ]
    },
    {
      "content": "添加以下代码以解密刚刚上载的 blob。",
      "pos": [
        5814,
        5834
      ]
    },
    {
      "pos": [
        6293,
        6376
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 可以通过几个其他类型的解析程序来简化密钥管理，其中包括：AggregateKeyResolver 和 CachingKeyResolver。"
    },
    {
      "content": "使用密钥保管库密码",
      "pos": [
        6382,
        6391
      ]
    },
    {
      "content": "将密码用于客户端加密的方式是通过 SymmetricKey 类，因为密码实际上是一种对称密钥。但是，如上所述，密钥保管库中的密码不会完全映射到 SymmetricKey。这里要注意几个问题：",
      "pos": [
        6392,
        6487
      ]
    },
    {
      "content": "SymmetricKey 中的密钥必须是固定长度：128、192、256、384 或 512 位。",
      "pos": [
        6492,
        6541
      ]
    },
    {
      "content": "SymmetricKey 中的密钥应采用 Base64 编码。",
      "pos": [
        6544,
        6575
      ]
    },
    {
      "content": "用作 SymmetricKey 的密钥保管库密钥需要在密钥保管库中具有“application/octet-stream”内容类型。",
      "pos": [
        6578,
        6644
      ]
    },
    {
      "content": "以下是使用 PowerShell 在密钥保管库中创建可用作 SymmetricKey 的密钥的示例。注意：硬编码值 $key 仅用于演示目的。在你自己的代码中需要生成此密钥。",
      "pos": [
        6646,
        6733
      ]
    },
    {
      "content": "在控制台应用程序中，可以使用与之前相同的调用将此密钥作为 SymmetricKey 进行检索。",
      "pos": [
        7313,
        7360
      ]
    },
    {
      "content": "就这么简单。请尽情享受其中的乐趣！",
      "pos": [
        7570,
        7587
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        7592,
        7596
      ]
    },
    {
      "pos": [
        7598,
        7719
      ],
      "content": "有关将  Azure 存储空间与 C# 配合使用的详细信息，请参阅<bpt id=\"p1\">[</bpt>用于 .NET 的  Azure 存储客户端库<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)</ept>。"
    },
    {
      "pos": [
        7721,
        7829
      ],
      "content": "有关 Blob REST API 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Blob 服务 REST API<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dd135733.aspx)</ept>。"
    },
    {
      "pos": [
        7832,
        7929
      ],
      "content": "有关  Azure 存储空间的最新信息，请转到 <bpt id=\"p1\">[</bpt>Microsoft Azure 存储空间团队博客<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazurestorage/)</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"在 Microsoft Azure 存储空间中使用 Azure 密钥保管库加密和解密 blob | Azure\"\n   description=\"本教程将指导你如何将  Azure 存储空间的客户端加密与 Azure 密钥保管库配合使用来加密和解密 blob。\"\n   services=\"storage\"\n   documentationCenter=\"\"\n   authors=\"adhurwit\"\n   manager=\"\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"storage\"\n   ms.date=\"01/06/2016\"\n   wacn.date=\"02/25/2016\"/>\n\n# 在 Azure 存储空间中使用 Azure 密钥保管库加密和解密 blob\n\n## 介绍\n\n本教程介绍如何结合使用客户端存储加密与 Azure 密钥保管库。其中将引导您完成如何在控制台应用程序中使用这些技术加密和解密 blob。\n\n**估计完成时间：**20 分钟。\n\n有关 Azure 密钥保管库的概述信息，请参阅[什么是 Azure 密钥保管库？](/documentation/articles/key-vault-whatis)\n\n有关 Azure 存储空间的客户端加密的概述信息，请参阅 [Azure 存储空间的客户端加密入门](/documentation/articles/storage-client-side-encryption)\n\n\n\n## 先决条件\n\n若要完成本教程，你必须准备好以下各项：\n\n- Azure 存储帐户\n- Visual Studio 2013 或更高版本\n- Azure PowerShell\n\n\n## 客户端加密概述\n\n有关 Azure 存储空间的客户端加密的概述，请参阅 [Azure 存储空间的客户端加密入门](/documentation/articles/storage-client-side-encryption)\n\n\n下面是客户端加密的工作原理的简要说明：\n\n1. Azure 存储客户端 SDK 生成内容加密密钥 (CEK)，这是一次性使用对称密钥。\n2. 使用此 CEK 对客户数据进行加密。\n3. 然后，使用密钥加密密钥 (KEK) 对此 CEK 进行包装（加密）。KEK 由密钥标识符标识，可以是非对称密钥对或对称密钥，还可以在本地托管或存储在 Azure 密钥保管库中。存储空间客户端本身永远无法访问 KEK。它只能调用密钥保管库提供的密钥包装算法。客户可以根据需要选择使用自定义提供程序进行密钥包装/解包。\n4. 然后，将已加密的数据上载到 Azure 存储服务。\n\n\n## 设置你的 Azure 密钥保管库\n若要继续本教程，你需要执行教程 [Azure 密钥保管库入门](/documentation/articles/key-vault-get-started)中所述的以下步骤：\n\n- 创建密钥保管库。\n- 将密钥或密码添加到密钥保管库。\n- 将应用程序注册到 Azure Active Directory。\n- 授权应用程序使用密钥或密码。\n\n记下将应用程序注册到 Azure Active Directory 时生成的 ClientID 和 ClientSecret。\n\n在密钥保管库中创建这两个密钥。我们在本教程的其余部分将假定使用了以下名称：ContosoKeyVault 和 TestRSAKey1。\n\n\n## 使用程序包和 AppSettings 创建控制台应用程序\n\n在 Visual Studio 中创建新的控制台应用程序。\n\n在 Package Manager Console 中添加必要的 Nuget 包。\n\n    Install-Package WindowsAzure.Storage\n\n    // This is the latest stable release for ADAL.\n    Install-Package Microsoft.IdentityModel.Clients.ActiveDirectory -Version 2.16.204221202\n\n    Install-Package Microsoft.Azure.KeyVault\n    Install-Package Microsoft.Azure.KeyVault.Extensions\n\n\n将 AppSettings 添加到 App.Config。\n\n    <appSettings>\n        <add key=\"accountName\" value=\"myaccount\"/>\n        <add key=\"accountKey\" value=\"theaccountkey\"/>\n        <add key=\"clientId\" value=\"theclientid\"/>\n        <add key=\"clientSecret\" value=\"theclientsecret\"/>\n        <add key=\"container\" value=\"stuff\"/>\n    </appSettings>\n\n添加以下 `using` 语句并确保将对 System.Configuration 的引用添加到项目中。\n\n    using Microsoft.IdentityModel.Clients.ActiveDirectory;\n    using System.Configuration;\n    using Microsoft.WindowsAzure.Storage.Auth;\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Blob;\n    using Microsoft.Azure.KeyVault;\n    using System.Threading;     \n    using System.IO;\n\n\n## 添加方法以便为控制台应用程序获取令牌\n\n以下方法由密钥保管库类使用，这些类需要进行身份验证才能访问你的密钥保管库。\n\n    private async static Task<string> GetToken(string authority, string resource, string scope)\n    {\n        var authContext = new AuthenticationContext(authority);\n        ClientCredential clientCred = new ClientCredential(\n            ConfigurationManager.AppSettings[\"clientId\"],\n            ConfigurationManager.AppSettings[\"clientSecret\"]);\n        AuthenticationResult result = await authContext.AcquireTokenAsync(resource, clientCred);\n\n        if (result == null)\n            throw new InvalidOperationException(\"Failed to obtain the JWT token\");\n\n        return result.AccessToken;\n    }\n\n## 在你的程序中访问存储和密钥保管库\n\n在 Main 函数中，添加以下代码。\n\n    // This is standard code to interact with Blob storage.\n    StorageCredentials creds = new StorageCredentials(\n        ConfigurationManager.AppSettings[\"accountName\"],\n        ConfigurationManager.AppSettings[\"accountKey\"]);\n    CloudStorageAccount account = new CloudStorageAccount(creds, useHttps: true);\n    CloudBlobClient client = account.CreateCloudBlobClient();\n    CloudBlobContainer contain = client.GetContainerReference(ConfigurationManager.AppSettings[\"container\"]);\n    contain.CreateIfNotExists();\n\n    // The Resolver object is used to interact with Key Vault for Azure Storage.\n    // This is where the GetToken method from above is used.\n    KeyVaultKeyResolver cloudResolver = new KeyVaultKeyResolver(GetToken);\n\n\n> [AZURE.NOTE] 密钥保管库对象模型\n>\n>务必了解，实际上有两个密钥保管库对象模型：一个基于 REST API（KeyVault 命名空间），另一个是客户端加密的扩展。\n\n> 密钥保管库客户端与 REST API 进行交互，并了解密钥保管库中包含的两种模型的 JSON Web 密钥和密码。\n\n> 密钥保管库扩展似乎是专门为 Azure 存储空间中的客户端加密所创建的类。根据密钥解析程序的概念，它们包含密钥 (IKey) 和类的接口。您需要了解两种 IKey 实现：RSAKey 和 SymmetricKey。现在它们碰巧与密钥保管库中包含的内容保持一致，但此时它们是独立的类（因此，密钥保管库客户端检索到的密钥与秘密检索未实现 IKey）。\n\n\n## 加密 blob 和上载\n添加以下代码以加密 blob 并将其上载到 Azure 存储帐户。使用的 **ResolveKeyAsync** 方法会返回 IKey。\n\n\n    // Retrieve the key that you created previously.\n    // The IKey that is returned here is an RsaKey.\n    // Remember that we used the names contosokeyvault and testrsakey1.\n    var rsa = cloudResolver.ResolveKeyAsync(\"https://contosokeyvault.vault.chinacloudapi.cn/keys/TestRSAKey1\", CancellationToken.None).GetAwaiter().GetResult();\n\n\n    // Now you simply use the RSA key to encrypt by setting it in the BlobEncryptionPolicy.\n    BlobEncryptionPolicy policy = new BlobEncryptionPolicy(rsa, null);\n    BlobRequestOptions options = new BlobRequestOptions() { EncryptionPolicy = policy };\n\n    // Reference a block blob.\n    CloudBlockBlob blob = contain.GetBlockBlobReference(\"MyFile.txt\");\n\n    // Upload using the UploadFromStream method.\n    using (var stream = System.IO.File.OpenRead(@\"C:\\data\\MyFile.txt\"))\n        blob.UploadFromStream(stream, stream.Length, null, options, null);\n\n\n下面是一个 blob 的 [Azure 管理门户](manage.windowsazure.cn)的屏幕截图，该 blob 已使用客户端加密通过密钥保管库中存储的密钥进行加密。**KeyId** 属性是密钥保管库中充当 KEK 的密钥的 URI。**EncryptedKey** 属性包含 CEK 的加密版本。\n\n![显示包含加密元数据的 Blob 元数据的屏幕截图][1]\n\n> [AZURE.NOTE]如果您看一下 BlobEncryptionPolicy 构造函数，您将看到它可以接受密钥和/或解析程序。请注意，您现在无法将解析程序用于加密，因为它当前不支持默认密钥。\n\n\n\n## 解密 blob 并下载\n当使用解析程序类有意义时，实际上就是解密。用于加密的密钥的 ID 与其元数据中的 Blob 相关联，因此你没有理由检索该密钥，请记住密钥与 blob 之间的关联关系。你只需确保该密钥保留在密钥保管库中。\n\nRSA 密钥的私钥则保留在密钥保管库中，因此，为了进行解密，来自包含 CEK 的 blob 元数据的加密密钥将发送到密钥保管库进行解密。\n\n添加以下代码以解密刚刚上载的 blob。\n\n    // In this case, we will not pass a key and only pass the resolver because\n    // this policy will only be used for downloading / decrypting.\n    BlobEncryptionPolicy policy = new BlobEncryptionPolicy(null, cloudResolver);\n    BlobRequestOptions options = new BlobRequestOptions() { EncryptionPolicy = policy };\n\n    using (var np = File.Open(@\"C:\\data\\MyFileDecrypted.txt\", FileMode.Create))\n        blob.DownloadToStream(np, null, options, null);\n\n\n> [AZURE.NOTE] 可以通过几个其他类型的解析程序来简化密钥管理，其中包括：AggregateKeyResolver 和 CachingKeyResolver。\n\n\n## 使用密钥保管库密码\n将密码用于客户端加密的方式是通过 SymmetricKey 类，因为密码实际上是一种对称密钥。但是，如上所述，密钥保管库中的密码不会完全映射到 SymmetricKey。这里要注意几个问题：\n\n\n- SymmetricKey 中的密钥必须是固定长度：128、192、256、384 或 512 位。\n- SymmetricKey 中的密钥应采用 Base64 编码。\n- 用作 SymmetricKey 的密钥保管库密钥需要在密钥保管库中具有“application/octet-stream”内容类型。\n\n以下是使用 PowerShell 在密钥保管库中创建可用作 SymmetricKey 的密钥的示例。注意：硬编码值 $key 仅用于演示目的。在你自己的代码中需要生成此密钥。\n\n    // Here we are making a 128-bit key so we have 16 characters.\n    //  The characters are in the ASCII range of UTF8 so they are\n    //  each 1 byte. 16 x 8 = 128.\n    $key = \"qwertyuiopasdfgh\"\n    $b = [System.Text.Encoding]::UTF8.GetBytes($key)\n    $enc = [System.Convert]::ToBase64String($b)\n    $secretvalue = ConvertTo-SecureString $enc -AsPlainText -Force\n\n    // Substitute the VaultName and Name in this command.\n    $secret = Set-AzureKeyVaultSecret -VaultName 'ContoseKeyVault' -Name 'TestSecret2' -SecretValue $secretvalue -ContentType \"application/octet-stream\"\n\n在控制台应用程序中，可以使用与之前相同的调用将此密钥作为 SymmetricKey 进行检索。\n\n    SymmetricKey sec = (SymmetricKey) cloudResolver.ResolveKeyAsync(\n        \"https://contosokeyvault.vault.chinacloudapi.cn/secrets/TestSecret2/\", \n        CancellationToken.None).GetAwaiter().GetResult();\n\n就这么简单。请尽情享受其中的乐趣！\n\n## 后续步骤\n\n有关将  Azure 存储空间与 C# 配合使用的详细信息，请参阅[用于 .NET 的  Azure 存储客户端库](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)。\n\n有关 Blob REST API 的详细信息，请参阅 [Blob 服务 REST API](https://msdn.microsoft.com/zh-cn/library/azure/dd135733.aspx)。\n\n\n有关  Azure 存储空间的最新信息，请转到 [Microsoft Azure 存储空间团队博客](http://blogs.msdn.com/b/windowsazurestorage/)。\n\n\n\n<!--Image references-->\n[1]: ./media/storage-encrypt-decrypt-blobs-key-vault/blobmetadata.png\n\n<!---HONumber=Mooncake_0215_2016-->"
}