{
  "nodes": [
    {
      "content": "利用乐观并发处理数据库写入冲突（Windows 应用商店）| Microsoft Azure",
      "pos": [
        28,
        74
      ]
    },
    {
      "content": "了解如何处理服务器上和 Windows 应用商店应用程序中的数据库写入冲突。",
      "pos": [
        94,
        132
      ]
    },
    {
      "content": "处理数据库写入冲突",
      "pos": [
        364,
        373
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        474,
        480
      ]
    },
    {
      "content": "概述",
      "pos": [
        486,
        488
      ]
    },
    {
      "content": "本教程旨在帮助你更好地理解在两个或两个以上客户端写入 Windows 应用商店应用程序中的同一条数据库记录时，如何处理发生的冲突。在某些情况下，两个或两个以上客户端可能会同时将更改写入同一项目。如果没有任何冲突检测，则最后一次写入会覆盖任何以前的更新，即使这并不是所需要的结果。Azure 移动服务为检测和解决这些冲突提供支持。本主题将指导你完成用于处理服务器上和应用程序中数据库写入冲突的步骤。",
      "pos": [
        490,
        688
      ]
    },
    {
      "content": "在本教程中，你将向快速入门应用添加功能以处理更新 TodoItem 数据库时可能发生的争用。",
      "pos": [
        690,
        736
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        741,
        745
      ]
    },
    {
      "content": "本教程需要的内容如下",
      "pos": [
        747,
        757
      ]
    },
    {
      "content": "Microsoft Visual Studio 2013 或更高版本。",
      "pos": [
        761,
        796
      ]
    },
    {
      "content": "本教程基于移动服务快速入门。在开始本教程之前，必须先[完成移动服务入门]。",
      "pos": [
        799,
        836
      ]
    },
    {
      "content": "[Azure 帐户]",
      "pos": [
        840,
        850
      ]
    },
    {
      "content": "Azure 移动服务 NuGet 包 1.1.0 或更高版本。若要获取最新版本，请执行以下步骤：",
      "pos": [
        853,
        901
      ]
    },
    {
      "content": "在 Visual Studio 中，打开项目并右键单击解决方案资源管理器中的项目，然后单击“管理 Nuget 包”。",
      "pos": [
        909,
        967
      ]
    },
    {
      "content": "![][19]",
      "pos": [
        978,
        985
      ]
    },
    {
      "pos": [
        994,
        1078
      ],
      "content": "展开“联机”并单击“Microsoft 和 .NET”。在“搜索”文本框中输入“Azure 移动服务”。针对 <bpt id=\"p1\">**</bpt>Azure 移动服务<ept id=\"p1\">**</ept> NuGet 包单击“安装”。"
    },
    {
      "content": "![][20]",
      "pos": [
        1088,
        1095
      ]
    },
    {
      "content": "更新应用程序以允许更新",
      "pos": [
        1103,
        1114
      ]
    },
    {
      "pos": [
        1116,
        1246
      ],
      "content": "在本节中，你将更新 TodoList 用户界面，以便更新列表框控件中每个项目的文本。列表框将包含针对数据库表中每个项目的复选框和文本框控件。你将能够更新 TodoItem 的文本字段。应用程序将处理该文本框的 <ph id=\"ph1\">`LostFocus`</ph> 事件以更新数据库中的项目。"
    },
    {
      "content": "在 Visual Studio 中，打开在[移动服务入门]教程中下载的 TodoList 项目。",
      "pos": [
        1252,
        1300
      ]
    },
    {
      "pos": [
        1304,
        1390
      ],
      "content": "在 Visual Studio 解决方案资源管理器中，打开 MainPage.xaml 并将 <ph id=\"ph1\">`ListView`</ph> 定义替换为下面所示的 <ph id=\"ph2\">`ListView`</ph> 并保存更改。"
    },
    {
      "pos": [
        2070,
        2167
      ],
      "content": "在 Visual Studio 解决方案资源管理器中，打开共享项目中的 MainPage.cs。将事件处理程序添加到 TextBox <ph id=\"ph1\">`LostFocus`</ph> 事件的 MainPage，如下所示。"
    },
    {
      "pos": [
        2563,
        2636
      ],
      "content": "在共享项目的 MainPage.cs 中，添加事件处理程序中引用的 MainPage <ph id=\"ph1\">`UpdateToDoItem()`</ph> 方法的定义，如下所示。"
    },
    {
      "content": "现在，当文本框失去焦点时，应用程序将对每个项目的文本更改写回到数据库。",
      "pos": [
        3161,
        3196
      ]
    },
    {
      "content": "在应用程序中启用冲突检测",
      "pos": [
        3200,
        3212
      ]
    },
    {
      "pos": [
        3214,
        3615
      ],
      "content": "在某些情况下，两个或两个以上客户端可能会同时将更改写入同一项目。如果没有任何冲突检测，则最后一次写入会覆盖任何以前的更新，即使这并不是所需要的结果。[乐观并发控制]假定每个事务均可以提交，因此不使用任何资源锁定。提交事务之前，乐观并发控制将验证是否没有其他事务修改了数据。如果数据已修改，则将回滚正在提交的事务。Azure 移动服务通过使用添加到每个表的 <ph id=\"ph1\">`__version`</ph> 系统属性列跟踪对每个项的更改，支持乐观并发控制。在本节中，我们将使应用程序能够通过 <ph id=\"ph2\">`__version`</ph> 系统属性检测这些写入冲突。如果记录自上次查询以来已更改，则应用程序在更新尝试期间将收到 <ph id=\"ph3\">`MobileServicePreconditionFailedException`</ph> 发出的通知。然后，它将能够选择是将其更改提交到数据库，还是保持对数据库的上次更改不变。有关移动服务的系统属性的详细信息，请参阅[系统属性]。"
    },
    {
      "pos": [
        3620,
        3700
      ],
      "content": "打开共享项目中的 TodoItem.cs，使用以下代码更新 <ph id=\"ph1\">`TodoItem`</ph> 类定义以包括 <ph id=\"ph2\">`__version`</ph> 系统属性，从而启用对写入冲突检测的支持。"
    },
    {
      "pos": [
        4133,
        4199
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>使用非类型表时，请通过将 Version 标志添加到表的 SystemProperties 来启用乐观并发。"
    }
  ],
  "content": "<properties \n    pageTitle=\"利用乐观并发处理数据库写入冲突（Windows 应用商店）| Microsoft Azure\" \n    description=\"了解如何处理服务器上和 Windows 应用商店应用程序中的数据库写入冲突。\" \n    documentationCenter=\"windows\" \n    authors=\"wesmc7777\" \n    manager=\"dwrede\" \n    editor=\"\" \n    services=\"mobile-services\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.date=\"01/21/2016\"\n    wacn.date=\"03/21/2016\"/>\n\n# 处理数据库写入冲突\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n\n\n\n##概述\n\n本教程旨在帮助你更好地理解在两个或两个以上客户端写入 Windows 应用商店应用程序中的同一条数据库记录时，如何处理发生的冲突。在某些情况下，两个或两个以上客户端可能会同时将更改写入同一项目。如果没有任何冲突检测，则最后一次写入会覆盖任何以前的更新，即使这并不是所需要的结果。Azure 移动服务为检测和解决这些冲突提供支持。本主题将指导你完成用于处理服务器上和应用程序中数据库写入冲突的步骤。\n\n在本教程中，你将向快速入门应用添加功能以处理更新 TodoItem 数据库时可能发生的争用。\n\n\n##先决条件\n\n本教程需要的内容如下\n\n+ Microsoft Visual Studio 2013 或更高版本。\n+ 本教程基于移动服务快速入门。在开始本教程之前，必须先[完成移动服务入门]。 \n+ [Azure 帐户]\n+ Azure 移动服务 NuGet 包 1.1.0 或更高版本。若要获取最新版本，请执行以下步骤：\n    1. 在 Visual Studio 中，打开项目并右键单击解决方案资源管理器中的项目，然后单击“管理 Nuget 包”。 \n\n        ![][19]\n\n    2. 展开“联机”并单击“Microsoft 和 .NET”。在“搜索”文本框中输入“Azure 移动服务”。针对 **Azure 移动服务** NuGet 包单击“安装”。\n\n        ![][20]\n\n\n \n\n##更新应用程序以允许更新\n\n在本节中，你将更新 TodoList 用户界面，以便更新列表框控件中每个项目的文本。列表框将包含针对数据库表中每个项目的复选框和文本框控件。你将能够更新 TodoItem 的文本字段。应用程序将处理该文本框的 `LostFocus` 事件以更新数据库中的项目。\n\n\n1. 在 Visual Studio 中，打开在[移动服务入门]教程中下载的 TodoList 项目。\n2. 在 Visual Studio 解决方案资源管理器中，打开 MainPage.xaml 并将 `ListView` 定义替换为下面所示的 `ListView` 并保存更改。\n\n        <ListView Name=\"ListItems\" Margin=\"62,10,0,0\" Grid.Row=\"1\">\n            <ListView.ItemTemplate>\n                <DataTemplate>\n                    <StackPanel Orientation=\"Horizontal\">\n                        <CheckBox Name=\"CheckBoxComplete\" IsChecked=\"{Binding Complete, Mode=TwoWay}\" Checked=\"CheckBoxComplete_Checked\" Margin=\"10,5\" VerticalAlignment=\"Center\"/>\n                        <TextBox x:Name=\"ToDoText\" Height=\"25\" Width=\"300\" Margin=\"10\" Text=\"{Binding Text, Mode=TwoWay}\" AcceptsReturn=\"False\" LostFocus=\"ToDoText_LostFocus\"/>\n                    </StackPanel>\n                </DataTemplate>\n            </ListView.ItemTemplate>\n        </ListView>\n\n\n3. 在 Visual Studio 解决方案资源管理器中，打开共享项目中的 MainPage.cs。将事件处理程序添加到 TextBox `LostFocus` 事件的 MainPage，如下所示。\n\n\n        private async void ToDoText_LostFocus(object sender, RoutedEventArgs e)\n        {\n            TextBox tb = (TextBox)sender;\n            TodoItem item = tb.DataContext as TodoItem;\n            //let's see if the text changed\n            if (item.Text != tb.Text)\n            {\n                item.Text = tb.Text;\n                await UpdateToDoItem(item);\n            }\n        }\n\n4. 在共享项目的 MainPage.cs 中，添加事件处理程序中引用的 MainPage `UpdateToDoItem()` 方法的定义，如下所示。\n\n        private async Task UpdateToDoItem(TodoItem item)\n        {\n            Exception exception = null;         \n            try\n            {\n                //update at the remote table\n                await todoTable.UpdateAsync(item);\n            }\n            catch (Exception ex)\n            {\n                exception = ex;\n            }           \n            if (exception != null)\n            {\n                await new MessageDialog(exception.Message, \"Update Failed\").ShowAsync();\n            }\n        }\n\n现在，当文本框失去焦点时，应用程序将对每个项目的文本更改写回到数据库。\n\n##在应用程序中启用冲突检测\n\n在某些情况下，两个或两个以上客户端可能会同时将更改写入同一项目。如果没有任何冲突检测，则最后一次写入会覆盖任何以前的更新，即使这并不是所需要的结果。[乐观并发控制]假定每个事务均可以提交，因此不使用任何资源锁定。提交事务之前，乐观并发控制将验证是否没有其他事务修改了数据。如果数据已修改，则将回滚正在提交的事务。Azure 移动服务通过使用添加到每个表的 `__version` 系统属性列跟踪对每个项的更改，支持乐观并发控制。在本节中，我们将使应用程序能够通过 `__version` 系统属性检测这些写入冲突。如果记录自上次查询以来已更改，则应用程序在更新尝试期间将收到 `MobileServicePreconditionFailedException` 发出的通知。然后，它将能够选择是将其更改提交到数据库，还是保持对数据库的上次更改不变。有关移动服务的系统属性的详细信息，请参阅[系统属性]。\n\n1. 打开共享项目中的 TodoItem.cs，使用以下代码更新 `TodoItem` 类定义以包括 `__version` 系统属性，从而启用对写入冲突检测的支持。\n\n        public class TodoItem\n        {\n            public string Id { get; set; }          \n            [JsonProperty(PropertyName = \"text\")]\n            public string Text { get; set; }            \n            [JsonProperty(PropertyName = \"complete\")]\n            public bool Complete { get; set; }          \n            [JsonProperty(PropertyName = \"__version\")]\n            public string Version { set; get; }\n        }\n\n    > [AZURE.NOTE]使用非类型表时，请通过将 Version 标志添加到表的 SystemProperties 来启用乐观并发。\n    >\n    >````` \n    //Enable optimistic concurrency by retrieving __version\ntodoTable.SystemProperties |= MobileServiceSystemProperties.Version;\n    `````\n\n\n2. 将 `Version` 属性添加到 `TodoItem` 类后，如果记录自上次查询以来已更改，则在更新期间将通过 `MobileServicePreconditionFailedException` 异常通知应用程序。此异常包括服务器中该项目的最新版本。在共享项目的 MainPage.cs 中，添加以下代码以在 `UpdateToDoItem()` 方法中处理异常。\n\n        private async Task UpdateToDoItem(TodoItem item)\n        {\n            Exception exception = null;         \n            try\n            {\n                //update at the remote table\n                await todoTable.UpdateAsync(item);\n            }\n            catch (MobileServicePreconditionFailedException<TodoItem> writeException)\n            {\n                exception = writeException;\n            }\n            catch (Exception ex)\n            {\n                exception = ex;\n            }           \n            if (exception != null)\n            {\n                if (exception is MobileServicePreconditionFailedException)\n                {\n                    //Conflict detected, the item has changed since the last query\n                    //Resolve the conflict between the local and server item\n                    await ResolveConflict(item, ((MobileServicePreconditionFailedException<TodoItem>) exception).Item);\n                }\n                else\n                {\n                    await new MessageDialog(exception.Message, \"Update Failed\").ShowAsync();\n                }\n            }\n        }\n\n\n3. 在 MainPage.cs 中，添加在 `UpdateToDoItem()` 中引用的 `ResolveConflict()` 方法的定义。请注意，为了解决冲突，在提交用户的决定之前，请将本地项目的版本设置为服务器中的已更新版本。否则，你将不断遇到冲突。\n\n\n        private async Task ResolveConflict(TodoItem localItem, TodoItem serverItem)\n        {\n            //Ask user to choose the resolution between versions\n            MessageDialog msgDialog = new MessageDialog(String.Format(\"Server Text: \"{0}\" \\nLocal Text: \"{1}\"\\n\", \n                                                        serverItem.Text, localItem.Text), \n                                                        \"CONFLICT DETECTED - Select a resolution:\");\n            UICommand localBtn = new UICommand(\"Commit Local Text\");\n            UICommand ServerBtn = new UICommand(\"Leave Server Text\");\n            msgDialog.Commands.Add(localBtn);\n            msgDialog.Commands.Add(ServerBtn);          \n            localBtn.Invoked = async (IUICommand command) =>\n            {\n                // To resolve the conflict, update the version of the \n                // item being committed. Otherwise, you will keep\n                // catching a MobileServicePreConditionFailedException.\n                localItem.Version = serverItem.Version;             \n                // Updating recursively here just in case another \n                // change happened while the user was making a decision\n                await UpdateToDoItem(localItem);\n            };          \n            ServerBtn.Invoked = async (IUICommand command) =>\n            {\n                RefreshTodoItems();\n            };          \n            await msgDialog.ShowAsync();\n        }\n\n\n\n##测试应用程序中的数据库写入冲突\n\n在本节中，你将生成 Windows 应用商店应用程序包，以便在第二台计算机或虚拟机上安装应用程序。然后，你将在这两台计算机上运行应用程序，并生成写入冲突以测试代码。应用的两个实例将尝试更新同一项目的 `text` 属性，因此需要用户解决该冲突。\n\n\n1. 创建 Windows 应用商店应用程序包，以便在第二台计算机或虚拟机上进行安装。为此，请在 Visual Studio 中单击“项目”->“应用商店”->“创建应用程序包”。\n\n    ![][0]\n\n2. 在“创建包”屏幕上，单击“否”，因为此包将不会上载到 Windows 应用商店。然后，单击“下一步”。\n\n    ![][1]\n\n3. 在“选择和配置包”屏幕上，接受默认设置，然后单击“创建”。\n\n    ![][10]\n\n4. 在“已创建包”屏幕上，单击“输出位置”链接以打开包位置。\n\n    ![][11]\n\n5. 将包文件夹“todolist\\_1.0.0.0\\_AnyCPU\\_Debug\\_Test”复制到第二台计算机。在该计算机上，打开包文件夹并右键单击 **Add-AppDevPackage.ps1** PowerShell 脚本，然后单击“使用 PowerShell 运行”，如下所示。按照提示操作以安装应用程序。\n\n    ![][12]\n  \n6. 通过单击“调试”->“启动调试”在 Visual Studio 中运行应用的第 1 个实例。在第二台计算机的“开始”屏幕上，单击向下箭头以查看“按名称排列的应用程序”。然后单击 **todolist** 应用以运行应用的第 2 个实例。\n\n    应用实例 1  \n    ![][2]\n\n    应用实例 2  \n    ![][2]\n\n\n7. 在应用实例 1 中，将最后一个项目的文本更新为“Test Write 1”，然后单击另一个文本框，以使 `LostFocus` 事件处理程序更新数据库。下面的屏幕快照显示了一个示例。\n    \n    应用实例 1  \n    ![][3]\n\n    应用实例 2  \n    ![][2]\n\n8. 此时，应用程序的第 2 个实例中的相应项目具有该项目的旧版本。在该应用实例中，针对 `text` 属性输入“Test Write 2”。然后单击另一个文本框，以使 `LostFocus` 事件处理程序尝试使用旧的 `_version` 属性更新数据库。\n\n    应用实例 1  \n    ![][4]\n\n    应用实例 2  \n    ![][5]\n\n9. 因为用于更新尝试的 `__version` 值与服务器 `__version` 值不匹配，所以，移动服务 SDK 将引发 `MobileServicePreconditionFailedException`，并且允许应用解决该冲突。若要解决此冲突，可单击“提交本地文本”以提交实例 2 中的值。此外，也可单击“保留服务器文本”以放弃实例 2 中的值，从而保留已提交的应用的实例 1 中的值。\n\n    应用实例 1  \n    ![][4]\n\n    应用实例 2  \n    ![][6]\n\n\n\n##使用服务器脚本自动解决冲突\n\n可以使用服务器脚本检测和解决写入冲突。当你可以使用脚本逻辑而不是用户交互来解决冲突时，这是可行的。在本节中，你将向应用程序的 TodoItem 表添加服务器端脚本。该脚本将用于解决冲突的逻辑如下所示：\n\n+  如果该 TodoItem 的 ` complete` 字段设置为 true，则它将被视为已完成并且不能再更改 `text`。\n+  如果 TodoItem 的 ` complete` 字段仍为 false，则将提交更新 `text` 的尝试。\n\n以下步骤将指导你完成添加服务器更新脚本并对其进行测试的过程。\n\n1. 登录到 [Azure 经典门户]，单击“移动服务”，然后单击你的应用。\n\n    ![][7]\n\n2. 单击“数据”选项卡，然后单击 **TodoItem** 表。\n\n    ![][8]\n\n3. 单击“脚本”，然后选择“更新”操作。\n\n    ![][9]\n\n4. 将现有脚本替换为以下函数，然后单击“保存”。\n\n        function update(item, user, request) { \n            request.execute({ \n                conflict: function (serverRecord) {\n                    // Only committing changes if the item is not completed.\n                    if (serverRecord.complete === false) {\n                        //write the updated item to the table\n                        request.execute();\n                    }\n                    else\n                    {\n                        request.respond(statusCodes.FORBIDDEN, 'The item is already completed.');\n                    }\n                }\n            }); \n        }   \n5. 在两台计算机上运行 **todolist** 应用。更改实例 2 中最后一项的 TodoItem `text`。然后单击另一个文本框，以使 `LostFocus` 事件处理程序更新数据库。\n\n    应用实例 1  \n    ![][4]\n\n    应用实例 2  \n    ![][5]\n\n6. 在应用程序的实例 1 中，针对最后一个 text 属性输入不同的值。然后单击另一个文本框，以使 `LostFocus` 事件处理程序尝试使用错误的 `__version` 属性更新数据库。\n\n    应用实例 1  \n    ![][13]\n\n    应用实例 2  \n    ![][14]\n\n7. 请注意，由于该项目未标记为“完成”而允许更新，服务器脚本解决了冲突，因此在应用程序中未遇到异常。若要查看更新是否确实成功，请单击实例 2 中的“刷新”以重新查询数据库。\n\n    应用实例 1  \n    ![][15]\n\n    应用实例 2  \n    ![][15]\n\n8. 在实例 1 中，单击复选框以完成最后一个 Todo 项目。\n\n    应用实例 1  \n    ![][16]\n\n    应用实例 2  \n    ![][15]\n\n9. 在实例 2 中，尝试更新最后一个 TodoItem 的文本，触发 `LostFocus` 事件。在对冲突进行响应时，由于该项目已完成，此脚本通过拒绝更新解决了冲突。\n\n    应用实例 1  \n    ![][17]\n\n    应用实例 2  \n    ![][18]\n\n##后续步骤\n\n本教程演示了在处理移动服务中的数据时，如何让 Windows 应用商店应用程序处理写入冲突。接下来，请考虑完成以下 Windows 应用商店教程之一：\n\n* [向应用程序添加身份验证] \n  <br/>了解如何对应用程序用户进行身份验证。\n\n* [向应用程序添加推送通知] \n  <br/>了解如何使用移动服务将非常基本的推送通知发送到应用程序。\n \n\n\n<!-- Images. -->\n[0]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-create-app-package1.png\n[1]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-create-app-package2.png\n[2]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-app1.png\n[3]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-app1-write1.png\n[4]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-app1-write2.png\n[5]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-app2-write2.png\n[6]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-app2-write2-conflict.png\n[7]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/mobile-services-selection.png\n[8]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/mobile-portal-data-tables.png\n[9]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/mobile-insert-script-users.png\n[10]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-create-app-package3.png\n[11]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-create-app-package4.png\n[12]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-install-app-package.png\n[13]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-app1-write3.png\n[14]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-app2-write3.png\n[15]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-write3.png\n[16]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-checkbox.png\n[17]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-2-items.png\n[18]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/Mobile-oc-store-already-complete.png\n[19]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/mobile-manage-nuget-packages-VS.png\n[20]: ./media/mobile-services-windows-store-dotnet-handle-database-conflicts/mobile-manage-nuget-packages-dialog.png\n\n<!-- URLs. -->\n[乐观并发控制]: http://go.microsoft.com/fwlink/?LinkId=330935\n[Get started with Mobile Services]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started/#create-new-service\n[Azure 帐户]: /pricing/1rmb-trial/\n[Validate and modify data with scripts]: /documentation/articles/mobile-services-windows-store-dotnet-validate-modify-data-server-scripts\n[Refine queries with paging]: /documentation/articles/mobile-services-windows-store-dotnet-add-paging-data\n[完成移动服务入门]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started\n[移动服务入门]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started\n[Get started with data]: /documentation/articles/mobile-services-windows-store-dotnet-get-started-data\n[向应用程序添加身份验证]: /documentation/articles/mobile-services-windows-store-dotnet-get-started-users\n[向应用程序添加推送通知]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push\n\n[Azure 经典门户]: https://manage.windowsazure.cn/\n[Windows Phone 8 SDK]: http://go.microsoft.com/fwlink/p/?LinkID=268374\n[Mobile Services SDK]: http://go.microsoft.com/fwlink/p/?LinkID=268375\n[Developer Code Samples site]: http://go.microsoft.com/fwlink/p/?LinkId=271146\n[系统属性]: http://go.microsoft.com/fwlink/?LinkId=331143\n\n<!---HONumber=Mooncake_0118_2016-->"
}