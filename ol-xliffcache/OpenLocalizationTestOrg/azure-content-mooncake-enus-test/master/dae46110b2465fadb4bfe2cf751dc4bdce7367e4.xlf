<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dae46110b2465fadb4bfe2cf751dc4bdce7367e4</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用 Blob 存储的本地应用程序 (Java) | Azure</source>
          <target state="new">使用 Blob 存储的本地应用程序 (Java) | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何创建将图像上载到 Azure 并在浏览器中显示图像的控制台应用程序。使用 Java 的代码示例。</source>
          <target state="new">了解如何创建将图像上载到 Azure 并在浏览器中显示图像的控制台应用程序。使用 Java 的代码示例。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用 Blob 存储的本地应用程序</source>
          <target state="new">使用 Blob 存储的本地应用程序</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>以下示例将演示如何使用 Azure 存储空间在 Azure 中存储图像。本文中的代码是一个控制台应用程序的代码，该应用程序将一个图像上载到 Azure，然后创建用于在浏览器中显示该图像的 HTML 文件。</source>
          <target state="new">以下示例将演示如何使用 Azure 存储空间在 Azure 中存储图像。本文中的代码是一个控制台应用程序的代码，该应用程序将一个图像上载到 Azure，然后创建用于在浏览器中显示该图像的 HTML 文件。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>先决条件</source>
          <target state="new">先决条件</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>已安装 Java 开发人员工具包 (JDK) 版本1.6 或更高版本。</source>
          <target state="new">已安装 Java 开发人员工具包 (JDK) 版本1.6 或更高版本。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>已安装 Azure SDK。</source>
          <target state="new">已安装 Azure SDK。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>适用于 Azure Libraries for Java 的 JAR 以及任何适用的依赖项 JAR 已安装并且位于 Java 编译器使用的生成路径中。有关安装 Azure Libraries for Java 的信息，请参阅 [下载 Azure SDK for Java][]。</source>
          <target state="new">适用于 Azure Libraries for Java 的 JAR 以及任何适用的依赖项 JAR 已安装并且位于 Java 编译器使用的生成路径中。有关安装 Azure Libraries for Java 的信息，请参阅 [下载 Azure SDK for Java][]。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>已设置了一个 Azure 存储帐户。本文中的代码将使用存储帐户的帐户名称和帐户密钥。有关创建存储帐户的信息，请参阅<bpt id="p1">[</bpt><ept id="p1">如何创建存储帐户]</ept>；有关检索帐户密钥的信息，请参阅<bpt id="p2">[</bpt>如何管理存储帐户<ept id="p2">][]</ept>。</source>
          <target state="new">已设置了一个 Azure 存储帐户。本文中的代码将使用存储帐户的帐户名称和帐户密钥。有关创建存储帐户的信息，请参阅<bpt id="p1">[</bpt><ept id="p1">如何创建存储帐户]</ept>；有关检索帐户密钥的信息，请参阅<bpt id="p2">[</bpt>如何管理存储帐户<ept id="p2">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>您已创建存储在路径 c:\\myimages\\image1.jpg 处的已命名本地图像文件。或者，在示例中修改 <bpt id="p1">**</bpt>FileInputStream<ept id="p1">**</ept> 构造函数以使用其他图像路径和文件名。</source>
          <target state="new">您已创建存储在路径 c:\\myimages\\image1.jpg 处的已命名本地图像文件。或者，在示例中修改 <bpt id="p1">**</bpt>FileInputStream<ept id="p1">**</ept> 构造函数以使用其他图像路径和文件名。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>使用 Azure Blob 存储上载文件</source>
          <target state="new">使用 Azure Blob 存储上载文件</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>此处提供分步过程。如果你要跳过这些过程，则可在本文后面找到完整的代码。</source>
          <target state="new">此处提供分步过程。如果你要跳过这些过程，则可在本文后面找到完整的代码。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在代码的开头请包括对 Azure 核心存储类、Azure Blob 客户端类、Java IO 类和 <bpt id="p1">**</bpt>URISyntaxException<ept id="p1">**</ept> 类的导入：</source>
          <target state="new">在代码的开头请包括对 Azure 核心存储类、Azure Blob 客户端类、Java IO 类和 <bpt id="p1">**</bpt>URISyntaxException<ept id="p1">**</ept> 类的导入：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>声明一个名为 <bpt id="p1">**</bpt>StorageSample<ept id="p1">**</ept> 的类，包含左大括号 <bpt id="p2">**</bpt>{<ept id="p2">**</ept>。</source>
          <target state="new">声明一个名为 <bpt id="p1">**</bpt>StorageSample<ept id="p1">**</ept> 的类，包含左大括号 <bpt id="p2">**</bpt>{<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在 StorageSample 类中，声明一个将包含<bpt id="p1">**</bpt>默认终结点协议、你的存储帐户名称和存储访问密钥<ept id="p1">**</ept>（在你的 Azure 存储帐户中指定）的字符串变量。将占位符值 <bpt id="p2">**</bpt>your_account_name<ept id="p2">**</ept> 和</source>
          <target state="new">在 StorageSample 类中，声明一个将包含<bpt id="p1">**</bpt>默认终结点协议、你的存储帐户名称和存储访问密钥<ept id="p1">**</ept>（在你的 Azure 存储帐户中指定）的字符串变量。将占位符值 <bpt id="p2">**</bpt>your_account_name<ept id="p2">**</ept> 和</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>your_account_key<ept id="p1">**</ept> 分别替换为你自己的帐户名称和帐户密钥。</source>
          <target state="new"><bpt id="p1">**</bpt>your_account_key<ept id="p1">**</ept> 分别替换为你自己的帐户名称和帐户密钥。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>添加对 <bpt id="p1">**</bpt>main<ept id="p1">**</ept> 的声明，包括 <bpt id="p2">**</bpt>try<ept id="p2">**</ept> 块并包括必需的左大括号 <bpt id="p3">**</bpt>{<ept id="p3">**</ept>。</source>
          <target state="new">添加对 <bpt id="p1">**</bpt>main<ept id="p1">**</ept> 的声明，包括 <bpt id="p2">**</bpt>try<ept id="p2">**</ept> 块并包括必需的左大括号 <bpt id="p3">**</bpt>{<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>声明以下类型的变量（说明针对的是如何在此示例中使用这些变量）：</source>
          <target state="new">声明以下类型的变量（说明针对的是如何在此示例中使用这些变量）：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept>：用于通过 Azure 存储帐户名称和密钥初始化帐户对象，以及用于创建 Blob 客户端对象。</source>
          <target state="new"><bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept>：用于通过 Azure 存储帐户名称和密钥初始化帐户对象，以及用于创建 Blob 客户端对象。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept>：用于访问 Blob 服务。</source>
          <target state="new"><bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept>：用于访问 Blob 服务。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CloudBlobContainer<ept id="p1">**</ept>：用于创建 Blob 容器、列出容器中的 Blob 以及删除容器。</source>
          <target state="new"><bpt id="p1">**</bpt>CloudBlobContainer<ept id="p1">**</ept>：用于创建 Blob 容器、列出容器中的 Blob 以及删除容器。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CloudBlockBlob<ept id="p1">**</ept>：用于将本地图像文件上载到容器。</source>
          <target state="new"><bpt id="p1">**</bpt>CloudBlockBlob<ept id="p1">**</ept>：用于将本地图像文件上载到容器。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>为 <bpt id="p1">**</bpt>account<ept id="p1">**</ept> 变量赋值。</source>
          <target state="new">为 <bpt id="p1">**</bpt>account<ept id="p1">**</ept> 变量赋值。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>为 <bpt id="p1">**</bpt>serviceClient<ept id="p1">**</ept> 变量赋值。</source>
          <target state="new">为 <bpt id="p1">**</bpt>serviceClient<ept id="p1">**</ept> 变量赋值。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>为 <bpt id="p1">**</bpt>container<ept id="p1">**</ept> 变量赋值。我们将获取对名为 <bpt id="p2">**</bpt>gettingstarted<ept id="p2">**</ept> 的容器的引用。</source>
          <target state="new">为 <bpt id="p1">**</bpt>container<ept id="p1">**</ept> 变量赋值。我们将获取对名为 <bpt id="p2">**</bpt>gettingstarted<ept id="p2">**</ept> 的容器的引用。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>创建该容器。如果该容器不存在，此方法将创建该容器（并返回 true）。如果该容器存在，则此方法将返回</source>
          <target state="new">创建该容器。如果该容器不存在，此方法将创建该容器（并返回 true）。如果该容器存在，则此方法将返回</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>false<ept id="p1">**</ept>。createIfNotExist 的一个替代方法是 create 方法（如果该容器已存在，该方法将返回错误）。</source>
          <target state="new"><bpt id="p1">**</bpt>false<ept id="p1">**</ept>。createIfNotExist 的一个替代方法是 create 方法（如果该容器已存在，该方法将返回错误）。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>为容器设置匿名访问。</source>
          <target state="new">为容器设置匿名访问。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>获取对块 Blob 的引用，它将表示</source>
          <target state="new">获取对块 Blob 的引用，它将表示</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Azure 存储空间中的 Blob。</source>
          <target state="new">Azure 存储空间中的 Blob。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>File<ept id="p1">**</ept> 构造函数获取对你将上载的在本地创建的文件的引用。确保在运行代码之前已创建此文件。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>File<ept id="p1">**</ept> 构造函数获取对你将上载的在本地创建的文件的引用。确保在运行代码之前已创建此文件。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>通过调用 CloudBlockBlob.upload 方法上载该本地文件。<bpt id="p1">**</bpt>CloudBlockBlob.upload<ept id="p1">**</ept> 方法的第一个参数为</source>
          <target state="new">通过调用 CloudBlockBlob.upload 方法上载该本地文件。<bpt id="p1">**</bpt>CloudBlockBlob.upload<ept id="p1">**</ept> 方法的第一个参数为</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FileInputStream<ept id="p1">**</ept>对象，它表示将上载到 Azure 存储空间的本地文件。第二个参数是此文件的大小（以字节为单位）。</source>
          <target state="new"><bpt id="p1">**</bpt>FileInputStream<ept id="p1">**</ept>对象，它表示将上载到 Azure 存储空间的本地文件。第二个参数是此文件的大小（以字节为单位）。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>调用一个名为 <bpt id="p1">**</bpt>MakeHTMLPage<ept id="p1">**</ept> 的帮助器函数来生成一个包含 <bpt id="p2">**</bpt>&amp;lt;image&amp;gt;<ept id="p2">**</ept> 元素的基本 HTML 页面，并将元素中的源设置为现在位于你的 Azure 存储帐户中的 Blob。（</source>
          <target state="new">调用一个名为 <bpt id="p1">**</bpt>MakeHTMLPage<ept id="p1">**</ept> 的帮助器函数来生成一个包含 <bpt id="p2">**</bpt>&amp;lt;image&amp;gt;<ept id="p2">**</ept> 元素的基本 HTML 页面，并将元素中的源设置为现在位于你的 Azure 存储帐户中的 Blob。（</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MakeHTMLPage<ept id="p1">**</ept> 的代码将在本主题后面讨论。）</source>
          <target state="new"><bpt id="p1">**</bpt>MakeHTMLPage<ept id="p1">**</ept> 的代码将在本主题后面讨论。）</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>打印输出有关创建的 HTML 页的状态消息和信息。</source>
          <target state="new">打印输出有关创建的 HTML 页的状态消息和信息。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>结束 <bpt id="p1">**</bpt>try<ept id="p1">**</ept> 块的方法是插入右大括号：<bpt id="p2">**</bpt>}<ept id="p2">**</ept></source>
          <target state="new">结束 <bpt id="p1">**</bpt>try<ept id="p1">**</ept> 块的方法是插入右大括号：<bpt id="p2">**</bpt>}<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>处理下列异常：</source>
          <target state="new">处理下列异常：</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>FileNotFoundException<ept id="p1">**</ept>：可由 <bpt id="p2">**</bpt>FileInputStream<ept id="p2">**</ept></source>
          <target state="new"><bpt id="p1">**</bpt>FileNotFoundException<ept id="p1">**</ept>：可由 <bpt id="p2">**</bpt>FileInputStream<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>或 <bpt id="p1">**</bpt>FileOutputStream<ept id="p1">**</ept> 构造函数引发。</source>
          <target state="new">或 <bpt id="p1">**</bpt>FileOutputStream<ept id="p1">**</ept> 构造函数引发。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StorageException<ept id="p1">**</ept>：可由 Azure 客户端存储库引发。</source>
          <target state="new"><bpt id="p1">**</bpt>StorageException<ept id="p1">**</ept>：可由 Azure 客户端存储库引发。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>URISyntaxException<ept id="p1">**</ept>：可由 <bpt id="p2">**</bpt>ListBlobItem.getUri<ept id="p2">**</ept> 方法引发。</source>
          <target state="new"><bpt id="p1">**</bpt>URISyntaxException<ept id="p1">**</ept>：可由 <bpt id="p2">**</bpt>ListBlobItem.getUri<ept id="p2">**</ept> 方法引发。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Exception<ept id="p1">**</ept>：一般异常处理。</source>
          <target state="new"><bpt id="p1">**</bpt>Exception<ept id="p1">**</ept>：一般异常处理。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>结束 <bpt id="p1">**</bpt>main<ept id="p1">**</ept> 的方法是插入右大括号：<bpt id="p2">**</bpt>}<ept id="p2">**</ept></source>
          <target state="new">结束 <bpt id="p1">**</bpt>main<ept id="p1">**</ept> 的方法是插入右大括号：<bpt id="p2">**</bpt>}<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>创建一个名为 <bpt id="p1">**</bpt>MakeHTMLPage<ept id="p1">**</ept> 的方法来创建一个基本的 HTML 页面。此方法具有一个 <bpt id="p2">**</bpt>CloudBlobContainer<ept id="p2">**</ept> 类型的参数，该参数将用于循环访问已上载 Blob 的列表。此方法将引发 <bpt id="p3">**</bpt>FileNotFoundException<ept id="p3">**</ept> 类型的异常（可由 <bpt id="p4">**</bpt>FileOutputStream<ept id="p4">**</ept> 构造函数引发）以及 <bpt id="p5">**</bpt>URISyntaxException<ept id="p5">**</ept>（可由 <bpt id="p6">**</bpt>ListBlobItem.getUri<ept id="p6">**</ept>.getUri 方法引发）。包括左大括号 <bpt id="p7">**</bpt>{<ept id="p7">**</ept>。</source>
          <target state="new">创建一个名为 <bpt id="p1">**</bpt>MakeHTMLPage<ept id="p1">**</ept> 的方法来创建一个基本的 HTML 页面。此方法具有一个 <bpt id="p2">**</bpt>CloudBlobContainer<ept id="p2">**</ept> 类型的参数，该参数将用于循环访问已上载 Blob 的列表。此方法将引发 <bpt id="p3">**</bpt>FileNotFoundException<ept id="p3">**</ept> 类型的异常（可由 <bpt id="p4">**</bpt>FileOutputStream<ept id="p4">**</ept> 构造函数引发）以及 <bpt id="p5">**</bpt>URISyntaxException<ept id="p5">**</ept>（可由 <bpt id="p6">**</bpt>ListBlobItem.getUri<ept id="p6">**</ept>.getUri 方法引发）。包括左大括号 <bpt id="p7">**</bpt>{<ept id="p7">**</ept>。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>创建一个名为 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept> 的本地文件。</source>
          <target state="new">创建一个名为 <bpt id="p1">**</bpt>index.html<ept id="p1">**</ept> 的本地文件。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>写入本地文件，添加 <bpt id="p1">**</bpt>&amp;lt;html&amp;gt;<ept id="p1">**</ept>、<bpt id="p2">**</bpt>&amp;lt;header&amp;gt;<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>&amp;lt;body&amp;gt;<ept id="p3">**</ept> 元素。</source>
          <target state="new">写入本地文件，添加 <bpt id="p1">**</bpt>&amp;lt;html&amp;gt;<ept id="p1">**</ept>、<bpt id="p2">**</bpt>&amp;lt;header&amp;gt;<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>&amp;lt;body&amp;gt;<ept id="p3">**</ept> 元素。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>循环访问已上载 Blob 的列表。对于 HTML 页中的每个 Blob，创建一个 <bpt id="p1">**</bpt>&amp;lt;img&amp;gt;<ept id="p1">**</ept> 元素，并将该元素的 <bpt id="p2">**</bpt>src<ept id="p2">**</ept> 属性发送到 Blob 的 URI（如同它存在于你的 Azure 存储帐户中一样）。</source>
          <target state="new">循环访问已上载 Blob 的列表。对于 HTML 页中的每个 Blob，创建一个 <bpt id="p1">**</bpt>&amp;lt;img&amp;gt;<ept id="p1">**</ept> 元素，并将该元素的 <bpt id="p2">**</bpt>src<ept id="p2">**</ept> 属性发送到 Blob 的 URI（如同它存在于你的 Azure 存储帐户中一样）。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>虽然你仅在此示例中添加了一个图像，但如果添加更多图像，此代码将循环访问所有这些图像。</source>
          <target state="new">虽然你仅在此示例中添加了一个图像，但如果添加更多图像，此代码将循环访问所有这些图像。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>为简单起见，此示例假定上载的每个 Blob 都是一个图像。如果你更新了图像之外的 Blob，或者更新了页面 Blob 而不是块 Blob，则请根据需要调整代码。</source>
          <target state="new">为简单起见，此示例假定上载的每个 Blob 都是一个图像。如果你更新了图像之外的 Blob，或者更新了页面 Blob 而不是块 Blob，则请根据需要调整代码。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>关闭 <bpt id="p1">**</bpt>&amp;lt;body&amp;gt;<ept id="p1">**</ept> 元素和 <bpt id="p2">**</bpt>&amp;lt;html&amp;gt;<ept id="p2">**</ept> 元素。</source>
          <target state="new">关闭 <bpt id="p1">**</bpt>&amp;lt;body&amp;gt;<ept id="p1">**</ept> 元素和 <bpt id="p2">**</bpt>&amp;lt;html&amp;gt;<ept id="p2">**</ept> 元素。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>结束本地文件。</source>
          <target state="new">结束本地文件。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>结束 <bpt id="p1">**</bpt>MakeHTMLPage<ept id="p1">**</ept> 的方法是插入右大括号：<bpt id="p2">**</bpt>}<ept id="p2">**</ept></source>
          <target state="new">结束 <bpt id="p1">**</bpt>MakeHTMLPage<ept id="p1">**</ept> 的方法是插入右大括号：<bpt id="p2">**</bpt>}<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>结束 <bpt id="p1">**</bpt>StorageSample<ept id="p1">**</ept> 的方法是插入右大括号：<bpt id="p2">**</bpt>}<ept id="p2">**</ept></source>
          <target state="new">结束 <bpt id="p1">**</bpt>StorageSample<ept id="p1">**</ept> 的方法是插入右大括号：<bpt id="p2">**</bpt>}<ept id="p2">**</ept></target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>以下是此示例的完整代码。请记得修改占位符值 <bpt id="p1">**</bpt>your_account_name<ept id="p1">**</ept> 和</source>
          <target state="new">以下是此示例的完整代码。请记得修改占位符值 <bpt id="p1">**</bpt>your_account_name<ept id="p1">**</ept> 和</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>your_account_key<ept id="p1">**</ept>，这样才能分别使用你的帐户名和帐户密钥。</source>
          <target state="new"><bpt id="p1">**</bpt>your_account_key<ept id="p1">**</ept>，这样才能分别使用你的帐户名和帐户密钥。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>除了将本地图像文件上载到 Azure 存储空间之外，此示例代码还将创建本地文件 namedindex.html，你可在浏览器中打开该文件以查看上载的图像。</source>
          <target state="new">除了将本地图像文件上载到 Azure 存储空间之外，此示例代码还将创建本地文件 namedindex.html，你可在浏览器中打开该文件以查看上载的图像。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>由于代码包含您的帐户名称和帐户密钥，因此请确保您的源代码是安全的。</source>
          <target state="new">由于代码包含您的帐户名称和帐户密钥，因此请确保您的源代码是安全的。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="bkmk_deletecontainer"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>删除容器</source>
          <target state="new"><ph id="ph1">&lt;a name="bkmk_deletecontainer"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>删除容器</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>由于存储是收费的，因此你在完成本示例的试验以后，可能需要删除</source>
          <target state="new">由于存储是收费的，因此你在完成本示例的试验以后，可能需要删除</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>gettingstarted<ept id="p1">**</ept> 容器。若要删除容器，请使用 CloudBlobContainer.delete 方法：</source>
          <target state="new"><bpt id="p1">**</bpt>gettingstarted<ept id="p1">**</ept> 容器。若要删除容器，请使用 CloudBlobContainer.delete 方法：</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>调用 <bpt id="p1">**</bpt>CloudBlobContainer.delete<ept id="p1">**</ept> 方法时，初始 <bpt id="p2">**</bpt>CloudStorageAccount<ept id="p2">**</ept>、<bpt id="p3">**</bpt>ClodBlobClient<ept id="p3">**</ept>、</source>
          <target state="new">调用 <bpt id="p1">**</bpt>CloudBlobContainer.delete<ept id="p1">**</ept> 方法时，初始 <bpt id="p2">**</bpt>CloudStorageAccount<ept id="p2">**</ept>、<bpt id="p3">**</bpt>ClodBlobClient<ept id="p3">**</ept>、</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CloudBlobContainer<ept id="p1">**</ept> 对象的过程与针对</source>
          <target state="new"><bpt id="p1">**</bpt>CloudBlobContainer<ept id="p1">**</ept> 对象的过程与针对</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>createIfNotExist<ept id="p1">**</ept> 方法显示的过程是相同的。以下是删除名为 gettingstarted 的容器的完整示例。</source>
          <target state="new"><bpt id="p1">**</bpt>createIfNotExist<ept id="p1">**</ept> 方法显示的过程是相同的。以下是删除名为 gettingstarted 的容器的完整示例。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>有关其他 Blob 存储类和方法的概述，请参阅<bpt id="p1">[</bpt><ept id="p1">如何通过 Java 使用 Blob 存储服务]</ept>。</source>
          <target state="new">有关其他 Blob 存储类和方法的概述，请参阅<bpt id="p1">[</bpt><ept id="p1">如何通过 Java 使用 Blob 存储服务]</ept>。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>请访问下面的链接了解有关更复杂的存储任务的详细信息。</source>
          <target state="new">请访问下面的链接了解有关更复杂的存储任务的详细信息。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Azure Storage SDK for Java</source>
          <target state="new">Azure Storage SDK for Java</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Azure 存储客户端 SDK 参考</source>
          <target state="new">Azure 存储客户端 SDK 参考</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Azure 存储 REST API</source>
          <target state="new">Azure 存储 REST API</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Azure 存储团队博客</source>
          <target state="new">Azure 存储团队博客</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>