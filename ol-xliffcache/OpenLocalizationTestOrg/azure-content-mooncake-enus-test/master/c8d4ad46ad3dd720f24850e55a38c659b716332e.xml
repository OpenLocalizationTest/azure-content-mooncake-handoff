{
  "nodes": [
    {
      "pos": [
        3,
        42
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"update-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>更新应用以调用自定义 API"
    },
    {
      "pos": [
        47,
        299
      ],
      "content": "我们将在现有按钮旁边添加一个标记为\"Complete All\"（完成全部）的按钮，并将两个按钮都下移一行。在 Eclipse 中，打开您的快速启动项目中的  <bpt id=\"p1\">*</bpt>res\\layout\\activity_to_do.xml<ept id=\"p1\">*</ept> 文件，找到包含名为  <ph id=\"ph1\">`buttonAddToDo`</ph> 的 <bpt id=\"p2\">**</bpt>Button<ept id=\"p2\">**</ept> 元素的 <bpt id=\"p3\">**</bpt>LinearLayout<ept id=\"p3\">**</ept> 元素。复制 <bpt id=\"p4\">**</bpt>LinearLayout<ept id=\"p4\">**</ept> 并将其紧邻着粘贴在原始元素之后。将 <bpt id=\"p5\">**</bpt>Button<ept id=\"p5\">**</ept> 元素从第一个 <bpt id=\"p6\">**</bpt>LinearLayout<ept id=\"p6\">**</ept> 中删除。"
    },
    {
      "pos": [
        304,
        378
      ],
      "content": "在第二个 <bpt id=\"p1\">**</bpt>LinearLayout<ept id=\"p1\">**</ept> 中，删除 <bpt id=\"p2\">**</bpt>EditText<ept id=\"p2\">**</ept> 元素，并将以下代码紧邻着添加到现有 <bpt id=\"p3\">**</bpt>Button<ept id=\"p3\">**</ept> 元素之后："
    },
    {
      "content": "这样可将新按钮添加到页面中的单独一行上，位于现有按钮旁边。",
      "pos": [
        650,
        679
      ]
    },
    {
      "pos": [
        684,
        712
      ],
      "content": "第二个 <bpt id=\"p1\">**</bpt>LinearLayout<ept id=\"p1\">**</ept> 现在如下所示："
    },
    {
      "content": "打开 res\\values\\string.xml 文件并添加以下代码行：",
      "pos": [
        1509,
        1545
      ]
    },
    {
      "pos": [
        1619,
        1778
      ],
      "content": "在 Package Explorer 的  <bpt id=\"p1\">*</bpt>src<ept id=\"p1\">*</ept> 文件夹中，右键单击项目名称 (<ph id=\"ph1\">`com.example.{your projects name}`</ph>)，然后依次选择<bpt id=\"p2\">**</bpt>\"新建\"<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>\"类\"<ept id=\"p3\">**</ept>。在对话框的类名称字段中，输入 <bpt id=\"p4\">**</bpt>MarkAllResult<ept id=\"p4\">**</ept>、选择\"确定\"，然后使用以下代码替代生成的类定义："
    },
    {
      "content": "此类用于保存自定义 API 返回的行计数值。",
      "pos": [
        2172,
        2194
      ]
    },
    {
      "pos": [
        2200,
        2283
      ],
      "content": "找到 <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> 文件中的 <bpt id=\"p2\">**</bpt>refreshItemsFromTable<ept id=\"p2\">**</ept> 方法，并确认  <ph id=\"ph1\">`try`</ph> 块中的第一行代码如下所示："
    },
    {
      "content": "这样可以筛选项，使得查询不返回已完成的项。",
      "pos": [
        2405,
        2426
      ]
    },
    {
      "pos": [
        2431,
        2477
      ],
      "content": "请确保 <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> 文件的开头包含下列 import 语句："
    },
    {
      "pos": [
        2673,
        2708
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> 文件中，添加以下方法："
    },
    {
      "content": "public void completeItem(View view) {",
      "pos": [
        2714,
        2751
      ]
    },
    {
      "pos": [
        3445,
        3551
      ],
      "content": "此方法可处理新按钮的 <bpt id=\"p1\">**</bpt>Click<ept id=\"p1\">**</ept> 事件。<bpt id=\"p2\">**</bpt>invokeApi<ept id=\"p2\">**</ept> 方法在客户端上调用，该客户端向新的自定义 API 发送 POST 请求。与任何错误相同，自定义 API 返回的结果也显示在消息对话框中。"
    },
    {
      "content": "测试应用程序",
      "pos": [
        3556,
        3562
      ]
    },
    {
      "content": "在\"运行\"菜单中，单击\"运行\"，以便在 Android 模拟器中启动项目。",
      "pos": [
        3567,
        3604
      ]
    },
    {
      "content": "这将执行使用 Android SDK 构建的应用，该应用使用客户端库发送一个查询，该查询从你的移动服务返回项目。",
      "pos": [
        3610,
        3666
      ]
    },
    {
      "content": "在应用的\"插入 TodoItem\"中键入一些文本，然后单击\"添加\"。",
      "pos": [
        3672,
        3706
      ]
    },
    {
      "content": "重复上述步骤，直至您将多个 ToDo 项添加到列表。",
      "pos": [
        3711,
        3737
      ]
    },
    {
      "content": "单击\"完成全部\"按钮。",
      "pos": [
        3742,
        3753
      ]
    },
    {
      "content": "此时会显示一个消息框，指示标记为完成的多个项，并再次执行筛选查询，将所有项从列表中清除。",
      "pos": [
        3857,
        3901
      ]
    }
  ],
  "content": "\n##<a name=\"update-app\"></a>更新应用以调用自定义 API\n\n1. 我们将在现有按钮旁边添加一个标记为\"Complete All\"（完成全部）的按钮，并将两个按钮都下移一行。在 Eclipse 中，打开您的快速启动项目中的  *res\\layout\\activity_to_do.xml* 文件，找到包含名为  `buttonAddToDo` 的 **Button** 元素的 **LinearLayout** 元素。复制 **LinearLayout** 并将其紧邻着粘贴在原始元素之后。将 **Button** 元素从第一个 **LinearLayout** 中删除。\n\n2. 在第二个 **LinearLayout** 中，删除 **EditText** 元素，并将以下代码紧邻着添加到现有 **Button** 元素之后： \n\n        <Button\n            android:id=\"@+id/buttonCompleteItem\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:onClick=\"completeItem\"\n            android:text=\"@string/complete_button_text\" />\n\n    这样可将新按钮添加到页面中的单独一行上，位于现有按钮旁边。\n\n3. 第二个 **LinearLayout** 现在如下所示：\n\n         <LinearLayout\n            android:layout_width=\"match_parent\" \n            android:layout_height=\"wrap_content\" \n            android:background=\"#71BCFA\"\n            android:padding=\"6dip\"  >\n            <Button\n                android:id=\"@+id/buttonAddToDo\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:onClick=\"addItem\"\n                android:text=\"@string/add_button_text\" />\n            <Button\n                android:id=\"@+id/buttonCompleteItem\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:onClick=\"completeItem\"\n                android:text=\"@string/complete_button_text\" />\n        </LinearLayout>\n    \n\n4. 打开 res\\values\\string.xml 文件并添加以下代码行：\n\n        <string name=\"complete_button_text\">Complete All</string>\n\n\n\n5. 在 Package Explorer 的  *src* 文件夹中，右键单击项目名称 (`com.example.{your projects name}`)，然后依次选择**\"新建\"**、**\"类\"**。在对话框的类名称字段中，输入 **MarkAllResult**、选择\"确定\"，然后使用以下代码替代生成的类定义：\n\n        import com.google.gson.annotations.SerializedName;\n        \n        public class MarkAllResult {\n            @SerializedName(\"count\")\n            public int mCount;\n            \n            public int getCount() {\n                return mCount;\n            }\n        \n            public void setCount(int count) {\n                    this.mCount = count;\n            }\n        }\n\n    此类用于保存自定义 API 返回的行计数值。 \n\n6. 找到 **ToDoActivity.java** 文件中的 **refreshItemsFromTable** 方法，并确认  `try` 块中的第一行代码如下所示：\n\n        final MobileServiceList<ToDoItem> result = mToDoTable.where().field(\"complete\").eq(false).execute().get();\n\n    这样可以筛选项，使得查询不返回已完成的项。\n\n7. 请确保 **ToDoActivity.java** 文件的开头包含下列 import 语句：\n\n        import com.google.common.util.concurrent.FutureCallback;\n        import com.google.common.util.concurrent.Futures;\n        import com.google.common.util.concurrent.ListenableFuture;\n\n8. 在 **ToDoActivity.java** 文件中，添加以下方法：\n\n    public void completeItem(View view) {\n        \n        ListenableFuture<MarkAllResult> result = mClient.invokeApi( \"completeAll2\", MarkAllResult.class ); \n            \n            Futures.addCallback(result, new FutureCallback<MarkAllResult>() {\n                @Override\n                public void onFailure(Throwable exc) {\n                    createAndShowDialog((Exception) exc, \"Error\");\n                }\n                \n                @Override\n                public void onSuccess(MarkAllResult result) {\n                    createAndShowDialog(result.getCount() + \" item(s) marked as complete.\", \"Completed Items\");\n                    refreshItemsFromTable();    \n                }\n            });\n        }\n    \n    此方法可处理新按钮的 **Click** 事件。**invokeApi** 方法在客户端上调用，该客户端向新的自定义 API 发送 POST 请求。与任何错误相同，自定义 API 返回的结果也显示在消息对话框中。\n\n## 测试应用程序\n\n1. 在\"运行\"菜单中，单击\"运行\"，以便在 Android 模拟器中启动项目。\n\n    这将执行使用 Android SDK 构建的应用，该应用使用客户端库发送一个查询，该查询从你的移动服务返回项目。\n\n\n2. 在应用的\"插入 TodoItem\"中键入一些文本，然后单击\"添加\"。\n\n3. 重复上述步骤，直至您将多个 ToDo 项添加到列表。\n\n4. 单击\"完成全部\"按钮。\n\n    ![](./media/mobile-services-android-call-custom-api/mobile-custom-api-android-completed.png)\n\n    此时会显示一个消息框，指示标记为完成的多个项，并再次执行筛选查询，将所有项从列表中清除。\n\n<!--HONumber=50-->"
}