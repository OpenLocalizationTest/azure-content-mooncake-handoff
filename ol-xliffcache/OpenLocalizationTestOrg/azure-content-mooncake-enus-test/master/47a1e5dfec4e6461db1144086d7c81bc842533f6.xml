{
  "nodes": [
    {
      "content": "如何通过 Python 使用队列存储 | Azure",
      "pos": [
        28,
        54
      ]
    },
    {
      "content": "了解如何通过 Python 使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。",
      "pos": [
        74,
        122
      ]
    },
    {
      "content": "如何通过 Python 使用队列存储",
      "pos": [
        344,
        362
      ]
    },
    {
      "content": "概述",
      "pos": [
        464,
        466
      ]
    },
    {
      "pos": [
        468,
        622
      ],
      "content": "本指南演示如何使用 Azure 队列存储服务执行常见方案。相关示例是使用 Python 编写的，并使用 [Python Azure 存储服务包][]。介绍的方案包括“插入”、“查看”、“获取”和“删除”队列消息以及“创建和删除队列”。有关队列的详细信息，请参阅 <bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#Next-Steps)</ept> 部分。"
    },
    {
      "pos": [
        821,
        934
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果您需要安装 Python 或 <bpt id=\"p1\">[</bpt>Python Azure 包<ept id=\"p1\">][]</ept>，请参阅 <bpt id=\"p2\">[</bpt>Python 安装指南<ept id=\"p2\">](/documentation/articles/python-how-to-install)</ept>。"
    },
    {
      "content": "如何：创建队列",
      "pos": [
        939,
        946
      ]
    },
    {
      "pos": [
        948,
        1061
      ],
      "content": "可以通过 <bpt id=\"p1\">**</bpt>QueueService<ept id=\"p1\">**</ept> 对象来处理队列。以下代码创建 <bpt id=\"p2\">**</bpt>QueueService<ept id=\"p2\">**</ept> 对象。在你希望在其中以编程方式访问 Azure 存储空间的任何 Python 文件中，将以下代码添加到文件的顶部附近："
    },
    {
      "pos": [
        1113,
        1184
      ],
      "content": "以下代码使用存储帐户名称和帐户密钥创建 <bpt id=\"p1\">**</bpt>QueueService<ept id=\"p1\">**</ept> 对象。使用实际帐户和密钥替换“myaccount”和“mykey”。"
    },
    {
      "content": "如何：在队列中插入消息",
      "pos": [
        1316,
        1327
      ]
    },
    {
      "pos": [
        1329,
        1379
      ],
      "content": "若要在队列中插入消息，可使用 <bpt id=\"p1\">**</bpt>put_message<ept id=\"p1\">**</ept> 方法创建一条新消息并将其添加到队列中。"
    },
    {
      "content": "如何：扫视下一条消息",
      "pos": [
        1444,
        1454
      ]
    },
    {
      "pos": [
        1456,
        1537
      ],
      "content": "通过调用 <bpt id=\"p1\">**</bpt>peek_messages<ept id=\"p1\">**</ept> 方法，可以查看队列前面的消息，而不必从队列中将其删除。默认情况下，<bpt id=\"p2\">**</bpt>peek_messages<ept id=\"p2\">**</ept> 扫视单条消息。"
    },
    {
      "content": "如何：取消对下一条消息的排队",
      "pos": [
        1665,
        1679
      ]
    },
    {
      "pos": [
        1681,
        1935
      ],
      "content": "你的代码分两步从队列中删除消息。在调用 <bpt id=\"p1\">**</bpt>get_messages<ept id=\"p1\">**</ept> 时，默认情况下你会获得队列中的下一条消息。从 <bpt id=\"p2\">**</bpt>get_messages<ept id=\"p2\">**</ept> 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要完成从队列中删除消息，你还必须调用 <bpt id=\"p3\">**</bpt>delete_message<ept id=\"p3\">**</ept>。此删除消息的两步过程可确保当您的代码因硬件或软件故障而无法处理消息时，您的其他代码实例可以获取同一消息并重试。你的代码在处理消息后会立即调用 <bpt id=\"p4\">**</bpt>delete_message<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "如何：更改已排队消息的内容",
      "pos": [
        2153,
        2166
      ]
    },
    {
      "pos": [
        2168,
        2250
      ],
      "content": "你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用 <bpt id=\"p1\">**</bpt>update_message<ept id=\"p1\">**</ept> 方法来更新消息。"
    },
    {
      "content": "如何：用于对消息取消排队的其他选项",
      "pos": [
        2455,
        2472
      ]
    },
    {
      "pos": [
        2474,
        2656
      ],
      "content": "你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，您可以设置更长或更短的不可见超时时间，从而允许您的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id=\"p1\">**</bpt>get_messages<ept id=\"p1\">**</ept> 方法来在一次调用中获取 16 条消息。然后，它会使用 for 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。"
    },
    {
      "content": "如何：获取队列长度",
      "pos": [
        2915,
        2924
      ]
    },
    {
      "pos": [
        2926,
        3075
      ],
      "content": "你可以获取队列中消息的估计数。<bpt id=\"p1\">**</bpt>get_queue_metadata<ept id=\"p1\">**</ept> 方法要求队列服务返回有关队列的元数据，并且 <bpt id=\"p2\">**</bpt>x-ms-approximate-messages-count<ept id=\"p2\">**</ept> 应用作返回的字典中的索引以查找计数。结果仅是近似值，因为在队列服务响应您的请求之后，可能添加或删除了消息。"
    },
    {
      "content": "如何：删除队列",
      "pos": [
        3210,
        3217
      ]
    },
    {
      "pos": [
        3219,
        3260
      ],
      "content": "若要删除队列及其中包含的所有消息，请调用 <bpt id=\"p1\">**</bpt>delete_queue<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "pos": [
        3309,
        3337
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Next-Steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 后续步骤"
    },
    {
      "content": "现在，您已了解有关队列存储的基础知识，请按照下面的链接了解更复杂的存储任务。",
      "pos": [
        3339,
        3377
      ]
    },
    {
      "pos": [
        3383,
        3404
      ],
      "content": "访问 <bpt id=\"p1\">[</bpt>Azure 存储空间团队博客<ept id=\"p1\">][]</ept>"
    },
    {
      "pos": [
        3406,
        3452
      ],
      "content": "有关详细信息，另请参阅 <bpt id=\"p1\">[</bpt>Python 开发人员中心<ept id=\"p1\">](/develop/python/)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Python 使用队列存储 | Azure\" \n    description=\"了解如何通过 Python 使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。\" \n    services=\"storage\" \n    documentationCenter=\"python\" \n    authors=\"emgerner-msft\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"12/11/2015\" \n    wacn.date=\"01/14/2016\"/>\n\n# 如何通过 Python 使用队列存储\n\n[AZURE.INCLUDE [storage-selector-queue-include](../includes/storage-selector-queue-include.md)]\n\n## 概述\n\n本指南演示如何使用 Azure 队列存储服务执行常见方案。相关示例是使用 Python 编写的，并使用 [Python Azure 存储服务包][]。介绍的方案包括“插入”、“查看”、“获取”和“删除”队列消息以及“创建和删除队列”。有关队列的详细信息，请参阅 [后续步骤](#Next-Steps) 部分。\n\n[AZURE.INCLUDE [storage-queue-concepts-include](../includes/storage-queue-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n\n> [AZURE.NOTE]如果您需要安装 Python 或 [Python Azure 包][]，请参阅 [Python 安装指南](/documentation/articles/python-how-to-install)。\n\n## 如何：创建队列\n\n可以通过 **QueueService** 对象来处理队列。以下代码创建 **QueueService** 对象。在你希望在其中以编程方式访问 Azure 存储空间的任何 Python 文件中，将以下代码添加到文件的顶部附近：\n\n    from azure.storage.queue import QueueService\n\n以下代码使用存储帐户名称和帐户密钥创建 **QueueService** 对象。使用实际帐户和密钥替换“myaccount”和“mykey”。\n\n    queue_service = QueueService(account_name='myaccount', account_key='mykey')\n\n    queue_service.create_queue('taskqueue')\n\n\n## 如何：在队列中插入消息\n\n若要在队列中插入消息，可使用 **put_message** 方法创建一条新消息并将其添加到队列中。\n\n    queue_service.put_message('taskqueue', 'Hello World')\n\n\n## 如何：扫视下一条消息\n\n通过调用 **peek_messages** 方法，可以查看队列前面的消息，而不必从队列中将其删除。默认情况下，**peek_messages** 扫视单条消息。\n\n    messages = queue_service.peek_messages('taskqueue')\n    for message in messages:\n        print(message.message_text)\n\n\n## 如何：取消对下一条消息的排队\n\n你的代码分两步从队列中删除消息。在调用 **get_messages** 时，默认情况下你会获得队列中的下一条消息。从 **get_messages** 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要完成从队列中删除消息，你还必须调用 **delete_message**。此删除消息的两步过程可确保当您的代码因硬件或软件故障而无法处理消息时，您的其他代码实例可以获取同一消息并重试。你的代码在处理消息后会立即调用 **delete_message**。\n\n    messages = queue_service.get_messages('taskqueue')\n    for message in messages:\n        print(message.message_text)\n        queue_service.delete_message('taskqueue', message.message_id, message.pop_receipt)\n\n\n## 如何：更改已排队消息的内容\n\n你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用 **update_message** 方法来更新消息。\n\n    messages = queue_service.get_messages('taskqueue')\n    for message in messages:\n        queue_service.update_message('taskqueue', message.message_id, 'Hello World Again', message.pop_receipt, 0)\n\n## 如何：用于对消息取消排队的其他选项\n\n你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，您可以设置更长或更短的不可见超时时间，从而允许您的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 **get_messages** 方法来在一次调用中获取 16 条消息。然后，它会使用 for 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。\n\n    messages = queue_service.get_messages('taskqueue', numofmessages=16, visibilitytimeout=5*60)\n    for message in messages:\n        print(message.message_text)\n        queue_service.delete_message('taskqueue', message.message_id, message.pop_receipt)\n\n## 如何：获取队列长度\n\n你可以获取队列中消息的估计数。**get_queue_metadata** 方法要求队列服务返回有关队列的元数据，并且 **x-ms-approximate-messages-count** 应用作返回的字典中的索引以查找计数。结果仅是近似值，因为在队列服务响应您的请求之后，可能添加或删除了消息。\n\n    queue_metadata = queue_service.get_queue_metadata('taskqueue')\n    count = queue_metadata['x-ms-approximate-messages-count']\n\n## 如何：删除队列\n\n若要删除队列及其中包含的所有消息，请调用 **delete_queue** 方法。\n\n    queue_service.delete_queue('taskqueue')\n\n##<a id=\"Next-Steps\"></a> 后续步骤\n\n现在，您已了解有关队列存储的基础知识，请按照下面的链接了解更复杂的存储任务。\n\n-   访问 [Azure 存储空间团队博客][]\n\n有关详细信息，另请参阅 [Python 开发人员中心](/develop/python/)。\n\n[Azure 存储空间团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n[Python Azure 包]: https://pypi.python.org/pypi/azure\n[Python Azure 存储空间包]: https://pypi.python.org/pypi/azure-storage\n \n\n<!---HONumber=Mooncake_0104_2016-->"
}