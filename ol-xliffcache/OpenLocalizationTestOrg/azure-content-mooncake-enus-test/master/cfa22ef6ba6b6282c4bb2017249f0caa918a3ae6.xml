{
  "nodes": [
    {
      "content": "使用 SCIM 启用从 Azure Active Directory 到应用程序的用户和组自动预配 | Azure",
      "pos": [
        27,
        84
      ]
    },
    {
      "content": "Azure Active Directory 可以使用 SCIM 协议规范中定义的接口，自动将用户和组预配到以 Web 服务为前端的任何应用程序或标识存储",
      "pos": [
        103,
        180
      ]
    },
    {
      "content": "使用 SCIM 启用从 Azure Active Directory 到应用程序的用户和组自动预配",
      "pos": [
        405,
        454
      ]
    },
    {
      "content": "概述",
      "pos": [
        458,
        460
      ]
    },
    {
      "pos": [
        462,
        681
      ],
      "content": "Azure Active Directory 可以使用 <bpt id=\"p1\">[</bpt>SCIM 2.0 协议规范<ept id=\"p1\">](https://tools.ietf.org/html/draft-ietf-scim-api-19)</ept>中定义的接口，将用户和组自动预配到 Web 服务前端的任何应用程序或标识存储。Azure Active Directory 可将请求发送到此 Web 服务以创建、修改和删除分配的用户与组，然后，Web 服务可将这些请求转换为针对目标标识存储的操作。"
    },
    {
      "content": "图：通过 Web 服务从 Azure Active Directory 预配到标识存储",
      "pos": [
        691,
        734
      ]
    },
    {
      "pos": [
        737,
        946
      ],
      "content": "此功能可配合 Azure AD 中的“<bpt id=\"p1\">[</bpt>自带应用<ept id=\"p1\">](http://blogs.technet.com/b/ad/archive/2015/06/17/bring-your-own-app-with-azure-ad-self-service-saml-configuration-gt-now-in-preview.aspx)</ept>”功能，为提供 SCIM Web 服务或位于该服务后端的应用程序启用单一登录和自动用户预配。"
    },
    {
      "content": "Azure Active Directory 中的 SCIM 有两种使用方案：",
      "pos": [
        948,
        987
      ]
    },
    {
      "pos": [
        991,
        1086
      ],
      "content": "<bpt id=\"p1\">**</bpt>将用户和组预配到支持 SCIM 的应用程序<ept id=\"p1\">**</ept> - 支持 SCIM 2.0 并且能够接受来自 Azure AD 的 OAuth 持有者令牌的应用程序可直接与 Azure AD 配合工作。"
    },
    {
      "pos": [
        1090,
        1268
      ],
      "content": "<bpt id=\"p1\">**</bpt>为支持其他基于 API 的预配的应用程序构建自己的预配解决方案<ept id=\"p1\">**</ept> - 对于非 SCIM 应用程序，可以创建一个 SCIM 终结点用于在 Azure AD 的 SCIM 终结点与应用程序为用户预配支持的任何 API 之间进行转换。为了帮助开发 SCIM 终结点，我们连同代码示例提供了 CLI 库，说明如何提供 SCIM 终结点和转换 SCIM 消息。"
    },
    {
      "content": "将用户和组预配到支持 SCIM 的应用程序",
      "pos": [
        1272,
        1293
      ]
    },
    {
      "pos": [
        1295,
        1472
      ],
      "content": "Azure Active Directory 可配置为将已分配的用户和组预配到实现<bpt id=\"p1\">[</bpt>跨域标识管理系统 2 (SCIM)<ept id=\"p1\">](https://tools.ietf.org/html/draft-ietf-scim-api-19)</ept> Web 服务、并接受使用 OAuth 持有者令牌进行身份验证的应用程序。在 SCIM 2.0 规范中，应用程序必须符合以下要求："
    },
    {
      "content": "支持根据 SCIM 协议第 3.3 部分创建用户和/或组。",
      "pos": [
        1476,
        1505
      ]
    },
    {
      "content": "支持根据 SCIM 协议第 3.5.2 部分修改具有修补请求的用户和/或组。",
      "pos": [
        1511,
        1549
      ]
    },
    {
      "content": "支持根据 SCIM 协议第 3.4.1 部分检索已知资源。",
      "pos": [
        1553,
        1582
      ]
    },
    {
      "content": "支持根据 SCIM 协议第 3.4.2 部分查询用户和/或组。默认情况下，用户是根据 externalId 查询的，组是根据 displayName 查询的。",
      "pos": [
        1587,
        1666
      ]
    },
    {
      "content": "支持根据 SCIM 协议第 3.4.2 部分，按 ID 和管理员查询用户。",
      "pos": [
        1670,
        1707
      ]
    },
    {
      "content": "支持根据 SCIM 协议第 3.4.2 部分，按 ID 和成员查询组。",
      "pos": [
        1711,
        1746
      ]
    },
    {
      "content": "接受根据 SCIM 协议第 2.1 部分使用 OAuth 持有者令牌进行授权。",
      "pos": [
        1750,
        1789
      ]
    },
    {
      "content": "支持使用 Azure AD 作为 OAuth 令牌的标识提供者（对外部标识提供者的支持即将推出）",
      "pos": [
        1793,
        1841
      ]
    },
    {
      "content": "你应该咨询应用程序提供者，或参阅应用程序提供者文档中的说明，以了解是否符合这些要求。",
      "pos": [
        1843,
        1885
      ]
    },
    {
      "content": "入门",
      "pos": [
        1891,
        1893
      ]
    },
    {
      "content": "支持上述 SCIM 配置文件的应用程序可以使用 Azure AD 应用程序库中的“自定义”应用功能连接到 Azure Active Directory。连接后，Azure AD 将每隔 5 分钟运行同步过程，此过程将为分配的用户和组查询应用程序的 SCIM 终结点，并根据分配详细信息创建或修改这些用户和组。",
      "pos": [
        1895,
        2049
      ]
    },
    {
      "content": "连接到支持 SCIM 的应用程序：",
      "pos": [
        2053,
        2070
      ]
    },
    {
      "content": "在 Web 浏览器中，通过 https://manage.windowsazure.cn 启动 Azure 管理门户。",
      "pos": [
        2078,
        2137
      ]
    },
    {
      "content": "浏览到“Active Directory”&gt;“目录”&gt; [你的目录] &gt;“应用程序”，然后选择“添加”&gt;“从库中添加应用程序”。",
      "pos": [
        2142,
        2206
      ]
    },
    {
      "content": "选择左侧的“自定义”选项卡，输入应用程序的名称，然后单击复选标记图标以创建应用对象。",
      "pos": [
        2211,
        2253
      ]
    },
    {
      "content": "在出现的屏幕中，选择第二个“配置帐户预配”按钮。",
      "pos": [
        2267,
        2291
      ]
    },
    {
      "content": "在对话框中，输入应用程序SCIM 终结点的 URL。",
      "pos": [
        2296,
        2322
      ]
    },
    {
      "content": "单击“下一步”，然后单击“开始测试”按钮，使 Azure Active Directory 尝试连接到 SCIM 终结点。如果尝试失败，将显示诊断信息。",
      "pos": [
        2329,
        2405
      ]
    },
    {
      "content": "如果尝试连接到应用程序成功，请在余下的屏幕中单击“下一步”，然后单击“完成”以退出对话框。",
      "pos": [
        2412,
        2457
      ]
    },
    {
      "content": "在出现的屏幕中，选择第三个“分配帐户”按钮。在出现的“用户和组”部分中，分配你要预配到应用程序的用户或组。",
      "pos": [
        2462,
        2515
      ]
    },
    {
      "content": "分配用户和组后，单击屏幕顶部附近的“配置”选项卡。",
      "pos": [
        2520,
        2545
      ]
    },
    {
      "content": "在“帐户预配”下，确认“状态”设置为“打开”。",
      "pos": [
        2550,
        2573
      ]
    },
    {
      "content": "在“工具”下，单击“重新开始帐户预配”以开始预配过程。",
      "pos": [
        2579,
        2606
      ]
    },
    {
      "content": "请注意，预配过程可能需要 5-10 分钟才能开始将请求发送到 SCIM 终结点。应用程序的“仪表板”选项卡上提供了连接尝试的摘要，可以从目录的“报告”选项卡下载预配活动报告和任何预配错误。",
      "pos": [
        2608,
        2702
      ]
    },
    {
      "content": "为任何应用程序构建你自己的预配解决方案",
      "pos": [
        2706,
        2725
      ]
    },
    {
      "content": "创建可与 Azure Active Directory 交互的 SCIM Web 服务后，可为提供 REST 或 SOAP 用户预配 API 的几乎所有应用程序启用单一登录和自动用户预配。",
      "pos": [
        2727,
        2821
      ]
    },
    {
      "content": "工作方式如下：",
      "pos": [
        2823,
        2830
      ]
    },
    {
      "pos": [
        2836,
        3064
      ],
      "content": "Azure AD 提供名为 <bpt id=\"p1\">[</bpt>Microsoft.SystemForCrossDomainIdentityManagement<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.SystemForCrossDomainIdentityManagement/)</ept> 的通用语言基础结构库。系统集成商和开发商可以使用此库来创建与部署能够将 Azure AD 连接到任何应用程序的标识存储的、基于 SCIM 的 Web 服务终结点。"
    },
    {
      "content": "将在 Web 服务中实现映射，以将标准化用户架构映射到用户架构和应用程序所需的协议。",
      "pos": [
        3069,
        3111
      ]
    },
    {
      "content": "终结点 URL 在 Azure AD 中注册为应用程序库中自定义应用程序的一部分。",
      "pos": [
        3116,
        3157
      ]
    },
    {
      "content": "用户和组在 Azure AD 中分配到此应用程序。分配后，它们将被放入队列，以同步到目标应用程序。处理队列的同步过程每隔 5 分钟运行一次。",
      "pos": [
        3162,
        3232
      ]
    },
    {
      "content": "代码示例",
      "pos": [
        3237,
        3241
      ]
    },
    {
      "pos": [
        3243,
        3436
      ],
      "content": "为了简化此过程，我们提供了一组<bpt id=\"p1\">[</bpt>代码示例<ept id=\"p1\">](https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master)</ept>，用于创建 SCIM Web 服务终结点并演示自动预配。其中一个示例是维护包含逗号分隔值行（代表用户和组的）的文件的提供程序。另一个是在 Amazon Web 服务标识与访问管理服务上运行的提供程序。"
    },
    {
      "content": "先决条件",
      "pos": [
        3440,
        3444
      ]
    },
    {
      "content": "Visual Studio 2013 或更高版本",
      "pos": [
        3450,
        3474
      ]
    },
    {
      "content": "Azure SDK for .NET",
      "pos": [
        3478,
        3496
      ]
    },
    {
      "content": "支持将 ASP.NET Framework 4.5 用作 SCIM 终结点的 Windows 计算机。必须能够从云访问此计算机",
      "pos": [
        3513,
        3576
      ]
    },
    {
      "content": "具有 Azure AD Premium 试用版或许可版的 Azure 订阅",
      "pos": [
        3580,
        3617
      ]
    },
    {
      "pos": [
        3656,
        3802
      ],
      "content": "Amazon AWS 示例需要 <bpt id=\"p1\">[</bpt>AWS Toolkit for Visual Studio<ept id=\"p1\">](http://docs.aws.amazon.com/AWSToolkitVS/latest/UserGuide/tkv_setup.html)</ept> 中的库。请参阅示例随附的自述文件以获取其他详细信息"
    },
    {
      "content": "入门",
      "pos": [
        3807,
        3809
      ]
    },
    {
      "content": "实现可以接受来自 Azure AD 的预配请求的 SCIM 终结点的最简单方法是构建和部署将预配的用户输出逗号分隔值 (CSV) 文件的代码示例。",
      "pos": [
        3811,
        3884
      ]
    },
    {
      "content": "创建示例 SCIM 终结点：",
      "pos": [
        3888,
        3902
      ]
    },
    {
      "pos": [
        3910,
        4064
      ],
      "content": "通过<bpt id=\"p1\">[</bpt>https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master<ept id=\"p1\">](https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master)</ept> 下载代码示例包"
    },
    {
      "content": "将包解压缩，并将它放在 Windows 计算机上的某个位置，例如 C:\\\\AzureAD-BYOA-Provisioning-Samples。",
      "pos": [
        4069,
        4140
      ]
    },
    {
      "content": "在此文件夹中，使用 Visual Studio 启动 FileProvisioningAgent 解决方案。",
      "pos": [
        4145,
        4199
      ]
    },
    {
      "content": "选择“工具”&gt;“库包管理员”&gt;“包管理员控制台”并执行以下命令，使 FileProvisioningAgent 项目解析解决方案引用：",
      "pos": [
        4204,
        4271
      ]
    },
    {
      "content": "构建 FileProvisioningAgent 项目。",
      "pos": [
        4514,
        4542
      ]
    },
    {
      "pos": [
        4547,
        4673
      ],
      "content": "在 Windows 中启动命令提示符应用程序（以管理员身分），并使用 <bpt id=\"p1\">**</bpt>cd<ept id=\"p1\">**</ept> 命令将目录切换到 <bpt id=\"p2\">**</bpt>\\\\AzureAD-BYOA-Provisioning-Samples\\\\ProvisioningAgent\\\\bin\\\\Debug<ept id=\"p2\">**</ept> 文件夹。"
    },
    {
      "content": "运行以下命令，并将 &lt;ip-address&gt; 替换为 Windows 计算机的 IP 或域名。",
      "pos": [
        4678,
        4725
      ]
    },
    {
      "content": "FileAgnt.exe http://&lt;ip-address&gt;:9000 TargetFile.csv",
      "pos": [
        4731,
        4783
      ]
    },
    {
      "content": "在 Windows 中，于“Windows 设置”&gt;“网络和 Internet 设置”下面，选择“Windows 防火墙”&gt;“高级设置”，然后创建允许对端口 9000 进行入站访问的“入站规则”。",
      "pos": [
        4789,
        4887
      ]
    },
    {
      "content": "如果 Windows 计算机位于路由器后面，则你需要将路由器配置为在面向 Internet 的端口 9000 与 Windows 计算机上的端口 9000 之间执行网络访问转换。为了使 Azure AD 能够在云中访问此终结点，必须执行此操作。",
      "pos": [
        4892,
        5014
      ]
    },
    {
      "content": "在 Azure AD 中注册示例 SCIM 终结点：",
      "pos": [
        5019,
        5045
      ]
    },
    {
      "content": "在 Web 浏览器中，通过 https://manage.windowsazure.cn 启动 Azure 管理门户。",
      "pos": [
        5053,
        5112
      ]
    },
    {
      "content": "浏览到“Active Directory”&gt;“目录”&gt; [你的目录] &gt;“应用程序”，然后选择“添加”&gt;“从库中添加应用程序”。",
      "pos": [
        5117,
        5181
      ]
    },
    {
      "content": "选择左侧的“自定义”选项卡，输入类似于“SCIM 测试应用”的名称，然后单击复选标记图标创建应用对象。请注意，创建的应用程序对象代表要预配和实现登一登入的目标应用程序，而不只是 SCIM 终结点。",
      "pos": [
        5186,
        5284
      ]
    },
    {
      "content": "在出现的屏幕中，选择第二个“配置帐户预配”按钮。",
      "pos": [
        5298,
        5322
      ]
    },
    {
      "content": "在对话框中，输入面向 Internet 的 URL 和 SCIM 终结点的端口。这类似于 http://testmachine.contoso.com:9000 或 http://&lt;ip-address&gt;:9000/，其中 &lt;ip-address&gt; 是面向 Internet 的 IP 地址。",
      "pos": [
        5327,
        5473
      ]
    },
    {
      "content": "单击“下一步”，然后单击“开始测试”按钮，使 Azure Active Directory 尝试连接到 SCIM 终结点。如果尝试失败，将显示诊断信息。",
      "pos": [
        5480,
        5556
      ]
    },
    {
      "content": "如果尝试连接到 Web 服务成功，请在余下的屏幕上单击“下一步”，然后单击“完成”退出对话框。",
      "pos": [
        5563,
        5610
      ]
    },
    {
      "content": "在出现的屏幕中，选择第三个“分配帐户”按钮。在出现的“用户和组”部分中，分配你要预配到应用程序的用户或组。",
      "pos": [
        5615,
        5668
      ]
    },
    {
      "content": "分配用户和组后，单击屏幕顶部附近的“配置”选项卡。",
      "pos": [
        5673,
        5698
      ]
    },
    {
      "content": "在“帐户预配”下，确认“状态”设置为“打开”。",
      "pos": [
        5703,
        5726
      ]
    },
    {
      "content": "在“工具”下，单击“重新开始帐户预配”以开始预配过程。",
      "pos": [
        5732,
        5759
      ]
    },
    {
      "content": "请注意，预配过程可能需要 5-10 分钟才能开始将请求发送到 SCIM 终结点。应用程序的“仪表板”选项卡上提供了连接尝试的摘要，可以从目录的“报告”选项卡下载预配活动报告和任何预配错误。",
      "pos": [
        5761,
        5855
      ]
    },
    {
      "content": "验证此示例的最后一步是打开 Windows 计算机上 \\\\AzureAD-BYOA-Provisioning-Samples\\\\ProvisioningAgent\\\\bin\\\\Debug 文件夹中的 TargetFile.csv 文件。运行预配过程后，此文件将显示所有已分配和预配的用户与组的详细信息。",
      "pos": [
        5857,
        6008
      ]
    },
    {
      "content": "开发库",
      "pos": [
        6013,
        6016
      ]
    },
    {
      "content": "若要开发自己的符合 SCIM 规范的 Web 服务，请先熟悉 Microsoft 提供的、有助于加速开发过程的以下库：",
      "pos": [
        6018,
        6077
      ]
    },
    {
      "pos": [
        6079,
        6491
      ],
      "content": "<bpt id=\"p1\">**</bpt>1：<ept id=\"p1\">**</ept>提供通用语言基础结构库以配合基于该基础结构的语言，例如 C#。其中一个库 <bpt id=\"p2\">[</bpt>Microsoft.SystemForCrossDomainIdentityManagement.Service<ept id=\"p2\">](https://www.nuget.org/packages/Microsoft.SystemForCrossDomainIdentityManagement/)</ept> 声明接口 Microsoft.SystemForCrossDomainIdentityManagement.IProvider，如下图所示。使用这些库的开发人员将对某个类（一般称为提供程序）实现该接口。库可让开发人员轻松部署符合 SCIM 规范的 Web 服务，无论该服务是托管在 Internet 信息服务还是任何可执行的通用语言基础结构程序集中。对该 Web 服务的请求将转换为对提供程序方法的调用，这些方法由开发人员编程，以便对某些标识存储执行操作。"
    },
    {
      "pos": [
        6501,
        6623
      ],
      "content": "<bpt id=\"p1\">**</bpt>2：<ept id=\"p1\">**</ept>提供 <bpt id=\"p2\">[</bpt>ExpressRoute 处理程序<ept id=\"p2\">](http://expressjs.com/guide/routing.html)</ept>用于分析代表对 node.js Web 服务的调用（由 SCIM 规范定义）的 node.js 请求对象。"
    },
    {
      "content": "构建自定义 SCIM 终结点",
      "pos": [
        6628,
        6642
      ]
    },
    {
      "content": "开发人员可以使用上述库将其服务托管在任何可执行的通用语言基础结构程序集或 Internet 信息服务中。以下代码示例用于将服务托管在地址为 http://localhost:9000 的可执行程序集中：",
      "pos": [
        6644,
        6745
      ]
    },
    {
      "content": "请务必注意，此服务必须具有 HTTP 地址，其服务器身份验证凭证的根证书颁发机构是下列其中之一：",
      "pos": [
        8646,
        8694
      ]
    },
    {
      "content": "CNNIC",
      "pos": [
        8698,
        8703
      ]
    },
    {
      "content": "Comodo",
      "pos": [
        8706,
        8712
      ]
    },
    {
      "content": "CyberTrust",
      "pos": [
        8715,
        8725
      ]
    },
    {
      "content": "DigiCert",
      "pos": [
        8728,
        8736
      ]
    },
    {
      "content": "GeoTrust",
      "pos": [
        8739,
        8747
      ]
    },
    {
      "content": "GlobalSign",
      "pos": [
        8750,
        8760
      ]
    },
    {
      "content": "Go Daddy",
      "pos": [
        8763,
        8771
      ]
    },
    {
      "content": "Verisign",
      "pos": [
        8774,
        8782
      ]
    },
    {
      "content": "WoSign",
      "pos": [
        8785,
        8791
      ]
    },
    {
      "content": "可以使用网络 shell 实用程序将服务器身份验证证书绑定到 Windows 主机上的某个端口，例如：",
      "pos": [
        8793,
        8844
      ]
    },
    {
      "content": "此处，为 certhash 参数提供的值为证书指纹，为 appid 参数提供的值为任意全局唯一标识符。",
      "pos": [
        8989,
        9040
      ]
    },
    {
      "content": "若要将服务托管在 Internet 信息服务中，开发人员需构建一个通用语言基础结构代码库程序集，并在该程序集的默认命名空间中使用名为 Startup 的类。以下是这种类的示例：",
      "pos": [
        9042,
        9130
      ]
    },
    {
      "content": "处理终结点身份验证",
      "pos": [
        10139,
        10148
      ]
    },
    {
      "content": "来自 Azure Active Directory 的请求包括 OAuth 2.0 持有者令牌。接收请求的任何服务应该代表所需的 Azure Active Directory 租户将颁发者作为 Azure Active Directory 进行身份验证，以访问 Azure Active Directory 的 Graph Web 服务。在令牌中，颁发者由 iss 声明，例如：\"iss\":\"https://sts.windows.net/cbb1a5ac-f33b-45fa-9bf5-f37db0fed422/\" 。在此示例中，声明值的基地址 https://sts.windows.net 将 Azure Active Directory 标识为颁发者，而相对地址段 cbb1a5ac-f33b-45fa-9bf5-f37db0fed422 代表颁发令牌时 Azure Active Directory 租户的唯一标识符。如果颁发的令牌用于访问 Azure Active Directory 的 Graph Web 服务，该服务的标识符 00000002-0000-0000-c000-000000000000 应在令牌的 aud 声明值中。",
      "pos": [
        10150,
        10674
      ]
    },
    {
      "content": "使用 Microsoft 提供的通用语言基础结构库构建 SCIM 服务的开发人员可以按照以下步骤使用 Microsoft.Owin.Security.ActiveDirectory 包对 Azure Active Directory 的请求进行身份验证：",
      "pos": [
        10676,
        10803
      ]
    },
    {
      "pos": [
        10805,
        10920
      ],
      "content": "<bpt id=\"p1\">**</bpt>1：<ept id=\"p1\">**</ept>在提供程序中，通过每次启动服务时让服务返回要调用的方法来实现 Microsoft.SystemForCrossDomainIdentityManagement.IProvider.StartupBehavior 属性："
    },
    {
      "pos": [
        11324,
        11453
      ],
      "content": "<bpt id=\"p1\">**</bpt>2：<ept id=\"p1\">**</ept>将以下代码添加到该方法，以代表指定的租户对所有服务终结点的所有请求进行身份验证，以确定它们是否持有 Azure Active Directory 颁发的、用于访问 Azure Active Directory 的 Graph Web 服务的令牌："
    },
    {
      "content": "用户和组架构",
      "pos": [
        12936,
        12942
      ]
    },
    {
      "content": "Azure Active Directory 可将两种类型的资源预配到 SCIM Web 服务。这些类型的资源是用户和组。",
      "pos": [
        12944,
        13005
      ]
    },
    {
      "content": "用户资源由协议规范 http://tools.ietf.org/html/draft-ietf-scim-core-schema 中包含的架构标识符 urn:ietf:params:scim:schemas:extension:enterprise:2.0:User 标识。以下表 1 提供了 Azure Active Directory 中用户属性与 urn:ietf:params:scim:schemas:extension:enterprise:2.0:User 资源属性之间的默认映射。",
      "pos": [
        13007,
        13255
      ]
    },
    {
      "content": "组资源由架构标识符 http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group 标识。以下表 2 显示了 Azure Active Directory 中组属性与 http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group 资源属性之间的默认映射。",
      "pos": [
        13257,
        13459
      ]
    },
    {
      "content": "表 1：默认用户属性映射",
      "pos": [
        13464,
        13476
      ]
    },
    {
      "content": "Azure Active Directory 用户",
      "pos": [
        13480,
        13505
      ]
    },
    {
      "content": "urn:ietf:params:scim:schemas:extension:enterprise:2.0:User",
      "pos": [
        13508,
        13566
      ]
    },
    {
      "content": "IsSoftDeleted",
      "pos": [
        13605,
        13618
      ]
    },
    {
      "content": "活动",
      "pos": [
        13621,
        13623
      ]
    },
    {
      "content": "displayName",
      "pos": [
        13628,
        13639
      ]
    },
    {
      "content": "displayName",
      "pos": [
        13642,
        13653
      ]
    },
    {
      "content": "Facsimile-TelephoneNumber",
      "pos": [
        13658,
        13683
      ]
    },
    {
      "content": "phoneNumbers[type eq \"fax\"].value",
      "pos": [
        13686,
        13719
      ]
    },
    {
      "content": "givenName",
      "pos": [
        13724,
        13733
      ]
    },
    {
      "content": "name.givenName",
      "pos": [
        13736,
        13750
      ]
    },
    {
      "content": "jobTitle",
      "pos": [
        13755,
        13763
      ]
    },
    {
      "content": "title",
      "pos": [
        13766,
        13771
      ]
    },
    {
      "content": "mail",
      "pos": [
        13776,
        13780
      ]
    },
    {
      "content": "emails[type eq \"work\"].value",
      "pos": [
        13783,
        13811
      ]
    },
    {
      "content": "mailNickname",
      "pos": [
        13816,
        13828
      ]
    },
    {
      "content": "externalId",
      "pos": [
        13831,
        13841
      ]
    },
    {
      "content": "manager",
      "pos": [
        13846,
        13853
      ]
    },
    {
      "content": "manager",
      "pos": [
        13856,
        13863
      ]
    },
    {
      "content": "mobile",
      "pos": [
        13868,
        13874
      ]
    },
    {
      "content": "phoneNumbers[type eq \"mobile\"].value",
      "pos": [
        13877,
        13913
      ]
    },
    {
      "content": "objectId",
      "pos": [
        13918,
        13926
      ]
    },
    {
      "content": "id",
      "pos": [
        13929,
        13931
      ]
    },
    {
      "content": "postalCode",
      "pos": [
        13936,
        13946
      ]
    },
    {
      "content": "addresses[type eq \"work\"].postalCode",
      "pos": [
        13949,
        13985
      ]
    },
    {
      "content": "proxy-Addresses",
      "pos": [
        13990,
        14005
      ]
    },
    {
      "content": "emails[type eq \"other\"].Value",
      "pos": [
        14008,
        14037
      ]
    },
    {
      "content": "physical-Delivery-OfficeName",
      "pos": [
        14042,
        14070
      ]
    },
    {
      "content": "addresses[type eq \"other\"].Formatted",
      "pos": [
        14073,
        14109
      ]
    },
    {
      "content": "streetAddress",
      "pos": [
        14114,
        14127
      ]
    },
    {
      "content": "addresses[type eq \"work\"].streetAddress",
      "pos": [
        14130,
        14169
      ]
    },
    {
      "content": "surname",
      "pos": [
        14174,
        14181
      ]
    },
    {
      "content": "name.familyName",
      "pos": [
        14184,
        14199
      ]
    },
    {
      "content": "telephone-Number",
      "pos": [
        14204,
        14220
      ]
    },
    {
      "content": "phoneNumbers[type eq \"work\"].value",
      "pos": [
        14223,
        14257
      ]
    },
    {
      "content": "user-PrincipalName",
      "pos": [
        14262,
        14280
      ]
    },
    {
      "content": "userName",
      "pos": [
        14283,
        14291
      ]
    },
    {
      "content": "表 2：默认组属性映射",
      "pos": [
        14299,
        14310
      ]
    },
    {
      "content": "Azure Active Directory 组",
      "pos": [
        14314,
        14338
      ]
    },
    {
      "content": "http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group",
      "pos": [
        14341,
        14409
      ]
    },
    {
      "content": "displayName",
      "pos": [
        14448,
        14459
      ]
    },
    {
      "content": "externalId",
      "pos": [
        14462,
        14472
      ]
    },
    {
      "content": "mail",
      "pos": [
        14477,
        14481
      ]
    },
    {
      "content": "emails[type eq \"work\"].value",
      "pos": [
        14484,
        14512
      ]
    },
    {
      "content": "mailNickname",
      "pos": [
        14517,
        14529
      ]
    },
    {
      "content": "displayName",
      "pos": [
        14532,
        14543
      ]
    },
    {
      "content": "members",
      "pos": [
        14548,
        14555
      ]
    },
    {
      "content": "members",
      "pos": [
        14558,
        14565
      ]
    },
    {
      "content": "objectId",
      "pos": [
        14570,
        14578
      ]
    },
    {
      "content": "id",
      "pos": [
        14581,
        14583
      ]
    },
    {
      "content": "proxyAddresses",
      "pos": [
        14588,
        14602
      ]
    },
    {
      "content": "emails[type eq \"other\"].Value",
      "pos": [
        14605,
        14634
      ]
    },
    {
      "content": "用户预配和取消预配",
      "pos": [
        14641,
        14650
      ]
    },
    {
      "content": "下图显示了 Azure Active Directory 将发送到 SCIM 服务以管理用户在其他标识存储中的生命周期的消息。该图还显示了使用 Microsoft 提供的、用于构建此类服务的通用语言基础结构库所实现的 SCIM 服务如何将这些请求转换为对提供程序的方法调用。",
      "pos": [
        14652,
        14789
      ]
    },
    {
      "content": "图：用户预配和取消预配顺序",
      "pos": [
        14799,
        14812
      ]
    },
    {
      "pos": [
        14815,
        14999
      ],
      "content": "<bpt id=\"p1\">**</bpt>1：<ept id=\"p1\">**</ept>Azure Active Directory 将在服务中查询是否有某个用户的 externalId 属性值与 Azure Active Directory 中用户的 mailNickname 属性值匹配。查询以类似的超文本传输协议请求表示，其中，jyoung 是 Azure Active Directory 中某个用户的 mailNickname 示例："
    },
    {
      "content": "如果使用 Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库构建了服务，则将请求转换为对服务提供者的 Query 方法调用。以下是该方法的签名：",
      "pos": [
        15100,
        15183
      ]
    },
    {
      "content": "以下是 Microsoft.SystemForCrossDomainIdentityManagement.IQueryParameters 接口的定义：",
      "pos": [
        15778,
        15854
      ]
    },
    {
      "content": "在上述查询具有给定 externalId 属性值的用户的示例中，传递给 Query 方法的参数值将是：",
      "pos": [
        17011,
        17062
      ]
    },
    {
      "content": "parameters.AlternateFilters.Count: 1",
      "pos": [
        17066,
        17102
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(0).AttributePath: \"externalId\"",
      "pos": [
        17105,
        17173
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(0).ComparisonOperator: ComparisonOperator.Equals",
      "pos": [
        17176,
        17262
      ]
    },
    {
      "content": "parameters.AlternateFilter.ElementAt(0).ComparisonValue: \"jyoung\"",
      "pos": [
        17265,
        17330
      ]
    },
    {
      "content": "correlationIdentifier: System.Net.Http.HttpRequestMessage.GetOwinEnvironment[\"owin.RequestId\"]",
      "pos": [
        17333,
        17427
      ]
    },
    {
      "pos": [
        17430,
        17599
      ],
      "content": "<bpt id=\"p1\">**</bpt>2：<ept id=\"p1\">**</ept>如果对具有匹配 Azure Active Directory 中用户的 mailNickname 属性值的 externalId 属性值的用户服务查询的响应未返回任何用户，Azure Active Directory 将请求服务预配与 Azure Active Directory 中的用户相对应的用户。以下是此类请求的示例："
    },
    {
      "content": "Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库将请求转换为对服务提供者的 Create 方法调用。Create 方法具有此签名：",
      "pos": [
        18366,
        18443
      ]
    },
    {
      "content": "如果请求预配用户，资源参数的值将是 Microsoft.SystemForCrossDomainIdentityManagement 的实例。Core2EnterpriseUser 类，在 Microsoft.SystemForCrossDomainIdentityManagement.Schemas 库中定义。如果预配用户的请求成功，则方法的实现应返回 Microsoft.SystemForCrossDomainIdentityManagement 的实例。Core2EnterpriseUser 类，其 Identifier 属性值设置为新预配用户的唯一标识符。",
      "pos": [
        18871,
        19156
      ]
    },
    {
      "pos": [
        19158,
        19245
      ],
      "content": "<bpt id=\"p1\">**</bpt>3：<ept id=\"p1\">**</ept>为了更新已知存在于前端为 SCIM 的标识存储中的用户，Azure Active Directory 将通过类似于下面的请求向服务请求该用户的当前状态来继续处理："
    },
    {
      "content": "如果使用 Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库构建了服务，则将请求转换为对服务提供者的 Retrieve 方法调用。以下是 Retrieve 方法的签名：",
      "pos": [
        19345,
        19440
      ]
    },
    {
      "content": "对于上述检索用户当前状态的请求示例，作为参数自变量值提供的对象属性值如下所示：",
      "pos": [
        20564,
        20603
      ]
    },
    {
      "content": "Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"",
      "pos": [
        20607,
        20657
      ]
    },
    {
      "content": "SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
      "pos": [
        20660,
        20738
      ]
    },
    {
      "pos": [
        20740,
        20915
      ],
      "content": "<bpt id=\"p1\">**</bpt>4：<ept id=\"p1\">**</ept>若要更新引用属性，Azure Active Directory 将查询服务以判断前端为该服务的标识存储中引用属性的当前值是否已经与 Azure Active Directory 中该属性的值相匹配。对于用户，以这种方式查询当前值的唯一属性是 manager 属性。确定特定用户对象的 manager 属性当前是否具有特定值的请求示例如下："
    },
    {
      "content": "属性查询参数 id 的值，表示如果满足提供为筛选器查询参数值的表达式的用户对象存在，则服务应以 urn:ietf:params:scim:schemas:core:2.0:User 或 urn:ietf:params:scim:schemas:extension:enterprise:2.0:User 资源做出响应（仅包括该资源的 id 属性值）。当然，请求者知道 id 属性的值 — 它包含在筛选器查询参数的值中；请求它的目的实际上是请求满足筛选表达式的资源的精简表示形式（指示是否存在任何此类对象）。",
      "pos": [
        21094,
        21347
      ]
    },
    {
      "content": "如果使用 Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库构建了服务，则将请求转换为对服务提供者的 Query 方法调用。作为参数自变量值提供的对像属性值如下：",
      "pos": [
        21349,
        21441
      ]
    },
    {
      "content": "parameters.AlternateFilters.Count: 2",
      "pos": [
        21445,
        21481
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(x).AttributePath: \"id\"",
      "pos": [
        21484,
        21544
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(x).ComparisonOperator: ComparisonOperator.Equals",
      "pos": [
        21547,
        21633
      ]
    },
    {
      "content": "parameters.AlternateFilter.ElementAt(x).ComparisonValue: \"54D382A4-2050-4C03-94D1-E769F1D15682\"",
      "pos": [
        21636,
        21731
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(y).AttributePath: \"manager\"",
      "pos": [
        21734,
        21799
      ]
    },
    {
      "content": "parameters.AlternateFilters.ElementAt(y).ComparisonOperator: ComparisonOperator.Equals",
      "pos": [
        21802,
        21888
      ]
    },
    {
      "content": "parameters.AlternateFilter.ElementAt(y).ComparisonValue: \"2819c223-7f76-453a-919d-413861904646\"",
      "pos": [
        21891,
        21986
      ]
    },
    {
      "content": "parameters.RequestedAttributePaths.ElementAt(0): \"id\"",
      "pos": [
        21989,
        22042
      ]
    },
    {
      "content": "parameters.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
      "pos": [
        22045,
        22134
      ]
    },
    {
      "content": "此处，索引 x 的值可以是 0 并且索引 y 的值可以是 1，或者，x 值可以是 1 并且 y 的值可以是 0，具体根据筛选器查询参数表达式的顺序而定。",
      "pos": [
        22136,
        22212
      ]
    },
    {
      "pos": [
        22214,
        22269
      ],
      "content": "<bpt id=\"p1\">**</bpt>5：<ept id=\"p1\">**</ept>以下是从 Azure Active Directory 向 SCIM 服务发出更新用户请求的示例："
    },
    {
      "content": "用于实现 SCIM 服务的 Microsoft 通用语言基础结构库将请求转换为对服务提供者的 Update 方法调用。以下是该方法的签名：",
      "pos": [
        22786,
        22855
      ]
    },
    {
      "content": "对于上述更新用户的请求示例，作为修补参数值提供的对象将具有这些属性值：",
      "pos": [
        25444,
        25479
      ]
    },
    {
      "content": "ResourceIdentifier.Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"",
      "pos": [
        25483,
        25552
      ]
    },
    {
      "content": "ResourceIdentifier.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
      "pos": [
        25555,
        25652
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.Count: 1",
      "pos": [
        25655,
        25706
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).OperationName: OperationName.Add",
      "pos": [
        25709,
        25797
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).Path.AttributePath: \"manager\"",
      "pos": [
        25800,
        25885
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.Count: 1",
      "pos": [
        25888,
        25958
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.ElementAt(0).Reference: http://.../scim/Users/2819c223-7f76-453a-919d-413861904646",
      "pos": [
        25961,
        26105
      ]
    },
    {
      "content": "(PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.ElementAt(0).Value: 2819c223-7f76-453a-919d-413861904646",
      "pos": [
        26108,
        26226
      ]
    },
    {
      "pos": [
        26228,
        26291
      ],
      "content": "<bpt id=\"p1\">**</bpt>6：<ept id=\"p1\">**</ept>为了从前端为 SCIM 服务的标识存储取消预配用户，Azure Active Directory 将发送如下请求："
    },
    {
      "content": "如果使用 Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库构建了服务，则将请求转换为对服务提供者的 Delete 方法调用。该方法具有以下签名：",
      "pos": [
        26398,
        26482
      ]
    },
    {
      "content": "在上述取消预配用户的请求示例中，作为 resourceIdentifier 参数值提供的对象将具有以下属性值：",
      "pos": [
        26894,
        26949
      ]
    },
    {
      "content": "ResourceIdentifier.Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"",
      "pos": [
        26953,
        27022
      ]
    },
    {
      "content": "ResourceIdentifier.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"",
      "pos": [
        27025,
        27122
      ]
    },
    {
      "content": "组预配和取消预配",
      "pos": [
        27126,
        27134
      ]
    },
    {
      "content": "下图显示了 Azure Active Directory 将发送到 SCIM 服务以管理组在其他标识存储中的生命周期的消息。这些消息在以下三个方面与用户相关的消息不同：",
      "pos": [
        27136,
        27220
      ]
    },
    {
      "pos": [
        27224,
        27375
      ],
      "content": "组资源的架构标识为 <bpt id=\"p1\">[</bpt>http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group<ept id=\"p1\">](http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group)</ept>。"
    },
    {
      "content": "检索组的请求规定将成员属性从请求响应中提供的任何资源中排除。",
      "pos": [
        27380,
        27410
      ]
    },
    {
      "content": "确定引用属性是否具有特定值的请求将是有关成员属性的请求。",
      "pos": [
        27415,
        27443
      ]
    },
    {
      "content": "图：组预配和取消预配顺序",
      "pos": [
        27455,
        27467
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"使用 SCIM 启用从 Azure Active Directory 到应用程序的用户和组自动预配 | Azure\"\n    description=\"Azure Active Directory 可以使用 SCIM 协议规范中定义的接口，自动将用户和组预配到以 Web 服务为前端的任何应用程序或标识存储\"\n    services=\"active-directory\"\n    documentationCenter=\"\"\n    authors=\"asmalser-msft\"\n    manager=\"stevenpo\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"active-directory\"\n    ms.date=\"10/29/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n#使用 SCIM 启用从 Azure Active Directory 到应用程序的用户和组自动预配\n\n##概述\n\nAzure Active Directory 可以使用 [SCIM 2.0 协议规范](https://tools.ietf.org/html/draft-ietf-scim-api-19)中定义的接口，将用户和组自动预配到 Web 服务前端的任何应用程序或标识存储。Azure Active Directory 可将请求发送到此 Web 服务以创建、修改和删除分配的用户与组，然后，Web 服务可将这些请求转换为针对目标标识存储的操作。\n\n![][1]\n*图：通过 Web 服务从 Azure Active Directory 预配到标识存储*\n\n此功能可配合 Azure AD 中的“[自带应用](http://blogs.technet.com/b/ad/archive/2015/06/17/bring-your-own-app-with-azure-ad-self-service-saml-configuration-gt-now-in-preview.aspx)”功能，为提供 SCIM Web 服务或位于该服务后端的应用程序启用单一登录和自动用户预配。\n\nAzure Active Directory 中的 SCIM 有两种使用方案：\n\n* **将用户和组预配到支持 SCIM 的应用程序** - 支持 SCIM 2.0 并且能够接受来自 Azure AD 的 OAuth 持有者令牌的应用程序可直接与 Azure AD 配合工作。\n\n* **为支持其他基于 API 的预配的应用程序构建自己的预配解决方案** - 对于非 SCIM 应用程序，可以创建一个 SCIM 终结点用于在 Azure AD 的 SCIM 终结点与应用程序为用户预配支持的任何 API 之间进行转换。为了帮助开发 SCIM 终结点，我们连同代码示例提供了 CLI 库，说明如何提供 SCIM 终结点和转换 SCIM 消息。\n\n##将用户和组预配到支持 SCIM 的应用程序\n\nAzure Active Directory 可配置为将已分配的用户和组预配到实现[跨域标识管理系统 2 (SCIM)](https://tools.ietf.org/html/draft-ietf-scim-api-19) Web 服务、并接受使用 OAuth 持有者令牌进行身份验证的应用程序。在 SCIM 2.0 规范中，应用程序必须符合以下要求：\n\n* 支持根据 SCIM 协议第 3.3 部分创建用户和/或组。  \n\n* 支持根据 SCIM 协议第 3.5.2 部分修改具有修补请求的用户和/或组。\n\n* 支持根据 SCIM 协议第 3.4.1 部分检索已知资源。\n\n*  支持根据 SCIM 协议第 3.4.2 部分查询用户和/或组。默认情况下，用户是根据 externalId 查询的，组是根据 displayName 查询的。\n\n* 支持根据 SCIM 协议第 3.4.2 部分，按 ID 和管理员查询用户。\n\n* 支持根据 SCIM 协议第 3.4.2 部分，按 ID 和成员查询组。\n\n* 接受根据 SCIM 协议第 2.1 部分使用 OAuth 持有者令牌进行授权。\n\n* 支持使用 Azure AD 作为 OAuth 令牌的标识提供者（对外部标识提供者的支持即将推出）\n\n你应该咨询应用程序提供者，或参阅应用程序提供者文档中的说明，以了解是否符合这些要求。\n \n###入门\n\n支持上述 SCIM 配置文件的应用程序可以使用 Azure AD 应用程序库中的“自定义”应用功能连接到 Azure Active Directory。连接后，Azure AD 将每隔 5 分钟运行同步过程，此过程将为分配的用户和组查询应用程序的 SCIM 终结点，并根据分配详细信息创建或修改这些用户和组。\n\n**连接到支持 SCIM 的应用程序：**\n\n1.  在 Web 浏览器中，通过 https://manage.windowsazure.cn 启动 Azure 管理门户。\n2.  浏览到“Active Directory”>“目录”> [你的目录] >“应用程序”，然后选择“添加”>“从库中添加应用程序”。\n3.  选择左侧的“自定义”选项卡，输入应用程序的名称，然后单击复选标记图标以创建应用对象。\n\n![][2]\n\n4.  在出现的屏幕中，选择第二个“配置帐户预配”按钮。\n5.  在对话框中，输入应用程序SCIM 终结点的 URL。  \n6.  单击“下一步”，然后单击“开始测试”按钮，使 Azure Active Directory 尝试连接到 SCIM 终结点。如果尝试失败，将显示诊断信息。  \n7.  如果尝试连接到应用程序成功，请在余下的屏幕中单击“下一步”，然后单击“完成”以退出对话框。\n8.  在出现的屏幕中，选择第三个“分配帐户”按钮。在出现的“用户和组”部分中，分配你要预配到应用程序的用户或组。\n9.  分配用户和组后，单击屏幕顶部附近的“配置”选项卡。\n10. 在“帐户预配”下，确认“状态”设置为“打开”。 \n11. 在“工具”下，单击“重新开始帐户预配”以开始预配过程。\n\n请注意，预配过程可能需要 5-10 分钟才能开始将请求发送到 SCIM 终结点。应用程序的“仪表板”选项卡上提供了连接尝试的摘要，可以从目录的“报告”选项卡下载预配活动报告和任何预配错误。\n\n##为任何应用程序构建你自己的预配解决方案\n\n创建可与 Azure Active Directory 交互的 SCIM Web 服务后，可为提供 REST 或 SOAP 用户预配 API 的几乎所有应用程序启用单一登录和自动用户预配。\n\n工作方式如下：\n\n1.  Azure AD 提供名为 [Microsoft.SystemForCrossDomainIdentityManagement](https://www.nuget.org/packages/Microsoft.SystemForCrossDomainIdentityManagement/) 的通用语言基础结构库。系统集成商和开发商可以使用此库来创建与部署能够将 Azure AD 连接到任何应用程序的标识存储的、基于 SCIM 的 Web 服务终结点。\n2.  将在 Web 服务中实现映射，以将标准化用户架构映射到用户架构和应用程序所需的协议。\n3.  终结点 URL 在 Azure AD 中注册为应用程序库中自定义应用程序的一部分。\n4.  用户和组在 Azure AD 中分配到此应用程序。分配后，它们将被放入队列，以同步到目标应用程序。处理队列的同步过程每隔 5 分钟运行一次。\n\n###代码示例\n\n为了简化此过程，我们提供了一组[代码示例](https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master)，用于创建 SCIM Web 服务终结点并演示自动预配。其中一个示例是维护包含逗号分隔值行（代表用户和组的）的文件的提供程序。另一个是在 Amazon Web 服务标识与访问管理服务上运行的提供程序。\n\n**先决条件**\n\n* Visual Studio 2013 或更高版本\n* [Azure SDK for .NET](/downloads/)\n* 支持将 ASP.NET Framework 4.5 用作 SCIM 终结点的 Windows 计算机。必须能够从云访问此计算机\n* [具有 Azure AD Premium 试用版或许可版的 Azure 订阅](/documentation/services/identity/)\n* Amazon AWS 示例需要 [AWS Toolkit for Visual Studio](http://docs.aws.amazon.com/AWSToolkitVS/latest/UserGuide/tkv_setup.html) 中的库。请参阅示例随附的自述文件以获取其他详细信息\n\n###入门\n\n实现可以接受来自 Azure AD 的预配请求的 SCIM 终结点的最简单方法是构建和部署将预配的用户输出逗号分隔值 (CSV) 文件的代码示例。\n\n**创建示例 SCIM 终结点：**\n\n1.  通过[https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master](https://github.com/Azure/AzureAD-BYOA-Provisioning-Samples/tree/master) 下载代码示例包\n2.  将包解压缩，并将它放在 Windows 计算机上的某个位置，例如 C:\\\\AzureAD-BYOA-Provisioning-Samples。\n3.  在此文件夹中，使用 Visual Studio 启动 FileProvisioningAgent 解决方案。\n4.  选择“工具”>“库包管理员”>“包管理员控制台”并执行以下命令，使 FileProvisioningAgent 项目解析解决方案引用：\n\n    `Install-Package Microsoft.SystemForCrossDomainIdentityManagement\n    Install-Package Microsoft.IdentityModel.Clients.ActiveDirectory\n    Install-Package Microsoft.Owin.Diagnostics\n    Install-Package Microsoft.Owin.Host.SystemWeb`\n\n5.  构建 FileProvisioningAgent 项目。\n6.  在 Windows 中启动命令提示符应用程序（以管理员身分），并使用 **cd** 命令将目录切换到 **\\\\AzureAD-BYOA-Provisioning-Samples\\\\ProvisioningAgent\\\\bin\\\\Debug** 文件夹。\n7.  运行以下命令，并将 <ip-address> 替换为 Windows 计算机的 IP 或域名。\n\n    FileAgnt.exe http://<ip-address>:9000 TargetFile.csv\n\n8.  在 Windows 中，于“Windows 设置”>“网络和 Internet 设置”下面，选择“Windows 防火墙”>“高级设置”，然后创建允许对端口 9000 进行入站访问的“入站规则”。\n9.  如果 Windows 计算机位于路由器后面，则你需要将路由器配置为在面向 Internet 的端口 9000 与 Windows 计算机上的端口 9000 之间执行网络访问转换。为了使 Azure AD 能够在云中访问此终结点，必须执行此操作。\n\n\n**在 Azure AD 中注册示例 SCIM 终结点：**\n\n1.  在 Web 浏览器中，通过 https://manage.windowsazure.cn 启动 Azure 管理门户。\n2.  浏览到“Active Directory”>“目录”> [你的目录] >“应用程序”，然后选择“添加”>“从库中添加应用程序”。\n3.  选择左侧的“自定义”选项卡，输入类似于“SCIM 测试应用”的名称，然后单击复选标记图标创建应用对象。请注意，创建的应用程序对象代表要预配和实现登一登入的目标应用程序，而不只是 SCIM 终结点。\n\n![][2]\n\n4.  在出现的屏幕中，选择第二个“配置帐户预配”按钮。\n5.  在对话框中，输入面向 Internet 的 URL 和 SCIM 终结点的端口。这类似于 http://testmachine.contoso.com:9000 或 http://<ip-address>:9000/，其中 <ip-address> 是面向 Internet 的 IP 地址。  \n6.  单击“下一步”，然后单击“开始测试”按钮，使 Azure Active Directory 尝试连接到 SCIM 终结点。如果尝试失败，将显示诊断信息。  \n7.  如果尝试连接到 Web 服务成功，请在余下的屏幕上单击“下一步”，然后单击“完成”退出对话框。\n8.  在出现的屏幕中，选择第三个“分配帐户”按钮。在出现的“用户和组”部分中，分配你要预配到应用程序的用户或组。\n9.  分配用户和组后，单击屏幕顶部附近的“配置”选项卡。\n10. 在“帐户预配”下，确认“状态”设置为“打开”。 \n11. 在“工具”下，单击“重新开始帐户预配”以开始预配过程。\n\n请注意，预配过程可能需要 5-10 分钟才能开始将请求发送到 SCIM 终结点。应用程序的“仪表板”选项卡上提供了连接尝试的摘要，可以从目录的“报告”选项卡下载预配活动报告和任何预配错误。\n\n验证此示例的最后一步是打开 Windows 计算机上 \\\\AzureAD-BYOA-Provisioning-Samples\\\\ProvisioningAgent\\\\bin\\\\Debug 文件夹中的 TargetFile.csv 文件。运行预配过程后，此文件将显示所有已分配和预配的用户与组的详细信息。\n\n###开发库\n\n若要开发自己的符合 SCIM 规范的 Web 服务，请先熟悉 Microsoft 提供的、有助于加速开发过程的以下库：\n\n**1：**提供通用语言基础结构库以配合基于该基础结构的语言，例如 C#。其中一个库 [Microsoft.SystemForCrossDomainIdentityManagement.Service](https://www.nuget.org/packages/Microsoft.SystemForCrossDomainIdentityManagement/) 声明接口 Microsoft.SystemForCrossDomainIdentityManagement.IProvider，如下图所示。使用这些库的开发人员将对某个类（一般称为提供程序）实现该接口。库可让开发人员轻松部署符合 SCIM 规范的 Web 服务，无论该服务是托管在 Internet 信息服务还是任何可执行的通用语言基础结构程序集中。对该 Web 服务的请求将转换为对提供程序方法的调用，这些方法由开发人员编程，以便对某些标识存储执行操作。\n\n![][3]\n\n**2：**提供 [ExpressRoute 处理程序](http://expressjs.com/guide/routing.html)用于分析代表对 node.js Web 服务的调用（由 SCIM 规范定义）的 node.js 请求对象。\n\n###构建自定义 SCIM 终结点\n\n开发人员可以使用上述库将其服务托管在任何可执行的通用语言基础结构程序集或 Internet 信息服务中。以下代码示例用于将服务托管在地址为 http://localhost:9000 的可执行程序集中：\n\n    private static void Main(string[] arguments)\n    {\n    // Microsoft.SystemForCrossDomainIdentityManagement.IMonitor, \n    // Microsoft.SystemForCrossDomainIdentityManagement.IProvider and \n    // Microsoft.SystemForCrossDomainIdentityManagement.Service are all defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Service.dll.  \n    \n    Microsoft.SystemForCrossDomainIdentityManagement.IMonitor monitor = \n      new DevelopersMonitor();\n    Microsoft.SystemForCrossDomainIdentityManagement.IProvider provider = \n      new DevelopersProvider(arguments[1]);\n    Microsoft.SystemForCrossDomainIdentityManagement.Service webService = null;\n    try\n    {\n        webService = new WebService(monitor, provider);\n        webService.Start(\"http://localhost:9000\");\n\n        Console.ReadKey(true);\n    }\n    finally\n    {\n        if (webService != null)\n        {\n            webService.Dispose();\n            webService = null;\n        }\n    }\n    }\n\n    public class WebService : Microsoft.SystemForCrossDomainIdentityManagement.Service\n    {\n    private Microsoft.SystemForCrossDomainIdentityManagement.IMonitor monitor;\n    private Microsoft.SystemForCrossDomainIdentityManagement.IProvider provider;\n\n    public WebService(\n      Microsoft.SystemForCrossDomainIdentityManagement.IMonitor monitoringBehavior, \n      Microsoft.SystemForCrossDomainIdentityManagement.IProvider providerBehavior)\n    {\n        this.monitor = monitoringBehavior;\n        this.provider = providerBehavior;\n    }\n\n    public override IMonitor MonitoringBehavior\n    {\n        get\n        {\n            return this.monitor;\n        }\n\n        set\n        {\n            this.monitor = value;\n        }\n    }\n\n    public override IProvider ProviderBehavior\n    {\n        get\n        {\n            return this.provider;\n        }\n\n        set\n        {\n            this.provider = value;\n        }\n    }\n    }\n\n请务必注意，此服务必须具有 HTTP 地址，其服务器身份验证凭证的根证书颁发机构是下列其中之一：\n\n* CNNIC\n* Comodo\n* CyberTrust\n* DigiCert\n* GeoTrust\n* GlobalSign\n* Go Daddy\n* Verisign\n* WoSign\n\n可以使用网络 shell 实用程序将服务器身份验证证书绑定到 Windows 主机上的某个端口，例如：\n\n    netsh http add sslcert ipport=0.0.0.0:443 certhash=0000000000003ed9cd0c315bbb6dc1c08da5e6 appid={00112233-4455-6677-8899-AABBCCDDEEFF}  \n \n此处，为 certhash 参数提供的值为证书指纹，为 appid 参数提供的值为任意全局唯一标识符。\n\n若要将服务托管在 Internet 信息服务中，开发人员需构建一个通用语言基础结构代码库程序集，并在该程序集的默认命名空间中使用名为 Startup 的类。以下是这种类的示例：\n\n    public class Startup\n    {\n    // Microsoft.SystemForCrossDomainIdentityManagement.IWebApplicationStarter, \n    // Microsoft.SystemForCrossDomainIdentityManagement.IMonitor and  \n    // Microsoft.SystemForCrossDomainIdentityManagement.Service are all defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Service.dll.  \n\n    Microsoft.SystemForCrossDomainIdentityManagement.IWebApplicationStarter starter;\n\n    public Startup()\n    {\n        Microsoft.SystemForCrossDomainIdentityManagement.IMonitor monitor = \n          new DevelopersMonitor();\n        Microsoft.SystemForCrossDomainIdentityManagement.IProvider provider = \n          new DevelopersProvider();\n        this.starter = \n          new Microsoft.SystemForCrossDomainIdentityManagement.WebApplicationStarter(\n            provider, \n            monitor);\n    }\n\n    public void Configuration(\n      Owin.IAppBuilder builder) // Defined in in Owin.dll.  \n    {\n        this.starter.ConfigureApplication(builder);\n    }\n    }\n\n###处理终结点身份验证\n\n来自 Azure Active Directory 的请求包括 OAuth 2.0 持有者令牌。接收请求的任何服务应该代表所需的 Azure Active Directory 租户将颁发者作为 Azure Active Directory 进行身份验证，以访问 Azure Active Directory 的 Graph Web 服务。在令牌中，颁发者由 iss 声明，例如：\"iss\":\"https://sts.windows.net/cbb1a5ac-f33b-45fa-9bf5-f37db0fed422/\" 。在此示例中，声明值的基地址 https://sts.windows.net 将 Azure Active Directory 标识为颁发者，而相对地址段 cbb1a5ac-f33b-45fa-9bf5-f37db0fed422 代表颁发令牌时 Azure Active Directory 租户的唯一标识符。如果颁发的令牌用于访问 Azure Active Directory 的 Graph Web 服务，该服务的标识符 00000002-0000-0000-c000-000000000000 应在令牌的 aud 声明值中。\n\n使用 Microsoft 提供的通用语言基础结构库构建 SCIM 服务的开发人员可以按照以下步骤使用 Microsoft.Owin.Security.ActiveDirectory 包对 Azure Active Directory 的请求进行身份验证：\n\n**1：**在提供程序中，通过每次启动服务时让服务返回要调用的方法来实现 Microsoft.SystemForCrossDomainIdentityManagement.IProvider.StartupBehavior 属性：\n\n    public override Action<Owin.IAppBuilder, System.Web.Http.HttpConfiguration.HttpConfiguration> StartupBehavior\n    {\n      get\n      {\n        return this.OnServiceStartup;\n      }\n    }\n\n    private void OnServiceStartup(\n      Owin.IAppBuilder applicationBuilder,  // Defined in Owin.dll.  \n      System.Web.Http.HttpConfiguration configuration)  // Defined in System.Web.Http.dll.  \n    {\n    }\n\n**2：**将以下代码添加到该方法，以代表指定的租户对所有服务终结点的所有请求进行身份验证，以确定它们是否持有 Azure Active Directory 颁发的、用于访问 Azure Active Directory 的 Graph Web 服务的令牌：\n\n    private void OnServiceStartup(\n      Owin.IAppBuilder applicationBuilder IAppBuilder applicationBuilder, \n      System.Web.Http.HttpConfiguration HttpConfiguration configuration)\n    {\n      // IFilter is defined in System.Web.Http.dll.  \n      System.Web.Http.Filters.IFilter authorizationFilter = \n        new System.Web.Http.AuthorizeAttribute(); // Defined in System.Web.Http.dll.configuration.Filters.Add(authorizationFilter);\n\n      // SystemIdentityModel.Tokens.TokenValidationParameters is defined in    \n      // System.IdentityModel.Token.Jwt.dll.\n      SystemIdentityModel.Tokens.TokenValidationParameters tokenValidationParameters =     \n        new TokenValidationParameters()\n        {\n          ValidAudience = \"00000002-0000-0000-c000-000000000000\"\n        };\n\n      // WindowsAzureActiveDirectoryBearerAuthenticationOptions is defined in \n      // Microsoft.Owin.Security.ActiveDirectory.dll\n      Microsoft.Owin.Security.ActiveDirectory.\n      WindowsAzureActiveDirectoryBearerAuthenticationOptions authenticationOptions =\n        new WindowsAzureActiveDirectoryBearerAuthenticationOptions()    {\n        TokenValidationParameters = tokenValidationParameters,\n        Tenant = \"03F9FCBC-EA7B-46C2-8466-F81917F3C15E\" // Substitute the appropriate tenant’s \n                                                      // identifier for this one.  \n      };\n\n      applicationBuilder.UseWindowsAzureActiveDirectoryBearerAuthentication(authenticationOptions);\n    }\n\n##用户和组架构\n\nAzure Active Directory 可将两种类型的资源预配到 SCIM Web 服务。这些类型的资源是用户和组。\n\n用户资源由协议规范 http://tools.ietf.org/html/draft-ietf-scim-core-schema 中包含的架构标识符 urn:ietf:params:scim:schemas:extension:enterprise:2.0:User 标识。以下表 1 提供了 Azure Active Directory 中用户属性与 urn:ietf:params:scim:schemas:extension:enterprise:2.0:User 资源属性之间的默认映射。\n\n组资源由架构标识符 http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group 标识。以下表 2 显示了 Azure Active Directory 中组属性与 http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group 资源属性之间的默认映射。\n\n###表 1：默认用户属性映射\n\n| Azure Active Directory 用户 | urn:ietf:params:scim:schemas:extension:enterprise:2.0:User |\n| ------------- | ------------- |\n| IsSoftDeleted | 活动 |\n| displayName | displayName |\n| Facsimile-TelephoneNumber | phoneNumbers[type eq \"fax\"].value |\n| givenName | name.givenName |\n| jobTitle | title |\n| mail | emails[type eq \"work\"].value |\n| mailNickname | externalId |\n| manager | manager |\n| mobile | phoneNumbers[type eq \"mobile\"].value |\n| objectId | id |\n| postalCode | addresses[type eq \"work\"].postalCode |\n| proxy-Addresses | emails[type eq \"other\"].Value |\n| physical-Delivery-OfficeName | addresses[type eq \"other\"].Formatted |\n| streetAddress | addresses[type eq \"work\"].streetAddress |\n| surname | name.familyName |\n| telephone-Number | phoneNumbers[type eq \"work\"].value |\n| user-PrincipalName | userName |\n\n\n###表 2：默认组属性映射\n\n| Azure Active Directory 组 | http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group |\n| ------------- | ------------- |\n| displayName | externalId |\n| mail | emails[type eq \"work\"].value |\n| mailNickname | displayName |\n| members | members |\n| objectId | id |\n| proxyAddresses | emails[type eq \"other\"].Value |\n\n\n##用户预配和取消预配\n\n下图显示了 Azure Active Directory 将发送到 SCIM 服务以管理用户在其他标识存储中的生命周期的消息。该图还显示了使用 Microsoft 提供的、用于构建此类服务的通用语言基础结构库所实现的 SCIM 服务如何将这些请求转换为对提供程序的方法调用。\n\n![][4]\n*图：用户预配和取消预配顺序*\n\n**1：**Azure Active Directory 将在服务中查询是否有某个用户的 externalId 属性值与 Azure Active Directory 中用户的 mailNickname 属性值匹配。查询以类似的超文本传输协议请求表示，其中，jyoung 是 Azure Active Directory 中某个用户的 mailNickname 示例：\n\n    GET https://.../scim/Users?filter=externalId eq jyoung HTTP/1.1\n    Authorization: Bearer ...\n\n如果使用 Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库构建了服务，则将请求转换为对服务提供者的 Query 方法调用。以下是该方法的签名：\n\n    // System.Threading.Tasks.Tasks is defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.Resource is defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Schemas.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.IQueryParameters is defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Protocol.  \n\n    System.Threading.Tasks.Task<Microsoft.SystemForCrossDomainIdentityManagement.Resource[]> Query(\n      Microsoft.SystemForCrossDomainIdentityManagement.IQueryParameters parameters, \n      string correlationIdentifier);\n\n以下是 Microsoft.SystemForCrossDomainIdentityManagement.IQueryParameters 接口的定义：\n\n    public interface IQueryParameters: \n      Microsoft.SystemForCrossDomainIdentityManagement.IRetrievalParameters\n    {\n        System.Collections.Generic.IReadOnlyCollection <Microsoft.SystemForCrossDomainIdentityManagement.IFilter> AlternateFilters \n        { get; }\n    }\n\n    public interface Microsoft.SystemForCrossDomainIdentityManagement.IRetrievalParameters\n    {\n      system.Collections.Generic.IReadOnlyCollection<string> ExcludedAttributePaths \n      { get; }\n      System.Collections.Generic.IReadOnlyCollection<string> RequestedAttributePaths \n      { get; }\n      string SchemaIdentifier \n      { get; }\n    }\n\n    public interface Microsoft.SystemForCrossDomainIdentityManagement.IFilter\n    {\n        Microsoft.SystemForCrossDomainIdentityManagement.IFilter AdditionalFilter \n          { get; set; }\n        string AttributePath \n          { get; } \n        Microsoft.SystemForCrossDomainIdentityManagement.ComparisonOperator FilterOperator \n          { get; }\n        string ComparisonValue \n          { get; }\n    }\n    \n    public enum Microsoft.SystemForCrossDomainIdentityManagement.ComparisonOperator\n    {\n        Equals\n    }\n\n在上述查询具有给定 externalId 属性值的用户的示例中，传递给 Query 方法的参数值将是：\n\n* parameters.AlternateFilters.Count: 1\n* parameters.AlternateFilters.ElementAt(0).AttributePath: \"externalId\"\n* parameters.AlternateFilters.ElementAt(0).ComparisonOperator: ComparisonOperator.Equals\n* parameters.AlternateFilter.ElementAt(0).ComparisonValue: \"jyoung\"\n* correlationIdentifier: System.Net.Http.HttpRequestMessage.GetOwinEnvironment[\"owin.RequestId\"] \n\n**2：**如果对具有匹配 Azure Active Directory 中用户的 mailNickname 属性值的 externalId 属性值的用户服务查询的响应未返回任何用户，Azure Active Directory 将请求服务预配与 Azure Active Directory 中的用户相对应的用户。以下是此类请求的示例：\n\n    POST https://.../scim/Users HTTP/1.1\n    Authorization: Bearer ...\n    Content-type: application/json\n    {\n      \"schemas\":\n      [\n        \"urn:ietf:params:scim:schemas:core:2.0:User\",\n        \"urn:ietf:params:scim:schemas:extension:enterprise:2.0User\"],\n      \"externalId\":\"jyoung\",\n      \"userName\":\"jyoung\",\n      \"active\":true,\n      \"addresses\":null,\n      \"displayName\":\"Joy Young\",\n      \"emails\": [\n        {\n          \"type\":\"work\",\n          \"value\":\"jyoung@Contoso.com\",\n          \"primary\":true}],\n      \"meta\": {\n        \"resourceType\":\"User\"},\n       \"name\":{\n        \"familyName\":\"Young\",\n        \"givenName\":\"Joy\"},\n      \"phoneNumbers\":null,\n      \"preferredLanguage\":null,\n      \"title\":null,\n      \"department\":null,\n      \"manager\":null}\n\nMicrosoft 提供的、用于实现 SCIM 服务的通用语言基础结构库将请求转换为对服务提供者的 Create 方法调用。Create 方法具有此签名：\n\n    // System.Threading.Tasks.Tasks is defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.Resource is defined in \n    // Microsoft.SystemForCrossDomainIdentityManagement.Schemas.  \n\n    System.Threading.Tasks.Task<Microsoft.SystemForCrossDomainIdentityManagement.Resource> Create(\n      Microsoft.SystemForCrossDomainIdentityManagement.Resource resource, \n      string correlationIdentifier);\n\n如果请求预配用户，资源参数的值将是 Microsoft.SystemForCrossDomainIdentityManagement 的实例。Core2EnterpriseUser 类，在 Microsoft.SystemForCrossDomainIdentityManagement.Schemas 库中定义。如果预配用户的请求成功，则方法的实现应返回 Microsoft.SystemForCrossDomainIdentityManagement 的实例。Core2EnterpriseUser 类，其 Identifier 属性值设置为新预配用户的唯一标识符。\n\n**3：**为了更新已知存在于前端为 SCIM 的标识存储中的用户，Azure Active Directory 将通过类似于下面的请求向服务请求该用户的当前状态来继续处理：\n\n    GET ~/scim/Users/54D382A4-2050-4C03-94D1-E769F1D15682 HTTP/1.1\n    Authorization: Bearer ...\n\n如果使用 Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库构建了服务，则将请求转换为对服务提供者的 Retrieve 方法调用。以下是 Retrieve 方法的签名：\n\n    // System.Threading.Tasks.Tasks is defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.Resource and \n    // Microsoft.SystemForCrossDomainIdentityManagement.IResourceRetrievalParameters \n    // are defined in Microsoft.SystemForCrossDomainIdentityManagement.Schemas.  \n    System.Threading.Tasks.Task<Microsoft.SystemForCrossDomainIdentityManagement.Resource> \n       Retrieve(\n         Microsoft.SystemForCrossDomainIdentityManagement.IResourceRetrievalParameters \n           parameters, \n           string correlationIdentifier);\n    \n    public interface \n      Microsoft.SystemForCrossDomainIdentityManagement.IResourceRetrievalParameters:   \n        IRetrievalParameters\n        {\n          Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier \n            ResourceIdentifier \n              { get; }\n    }\n    public interface Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier\n    {\n        string Identifier \n          { get; set; }\n        string Microsoft.SystemForCrossDomainIdentityManagement.SchemaIdentifier \n          { get; set; }\n    }\n\n对于上述检索用户当前状态的请求示例，作为参数自变量值提供的对象属性值如下所示：\n\n* Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"\n* SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n\n**4：**若要更新引用属性，Azure Active Directory 将查询服务以判断前端为该服务的标识存储中引用属性的当前值是否已经与 Azure Active Directory 中该属性的值相匹配。对于用户，以这种方式查询当前值的唯一属性是 manager 属性。确定特定用户对象的 manager 属性当前是否具有特定值的请求示例如下：\n\n    GET ~/scim/Users?filter=id eq 54D382A4-2050-4C03-94D1-E769F1D15682 and manager eq 2819c223-7f76-453a-919d-413861904646&attributes=id HTTP/1.1\n    Authorization: Bearer ...\n\n属性查询参数 id 的值，表示如果满足提供为筛选器查询参数值的表达式的用户对象存在，则服务应以 urn:ietf:params:scim:schemas:core:2.0:User 或 urn:ietf:params:scim:schemas:extension:enterprise:2.0:User 资源做出响应（仅包括该资源的 id 属性值）。当然，请求者知道 id 属性的值 — 它包含在筛选器查询参数的值中；请求它的目的实际上是请求满足筛选表达式的资源的精简表示形式（指示是否存在任何此类对象）。\n\n如果使用 Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库构建了服务，则将请求转换为对服务提供者的 Query 方法调用。作为参数自变量值提供的对像属性值如下：\n\n* parameters.AlternateFilters.Count: 2\n* parameters.AlternateFilters.ElementAt(x).AttributePath: \"id\"\n* parameters.AlternateFilters.ElementAt(x).ComparisonOperator: ComparisonOperator.Equals\n* parameters.AlternateFilter.ElementAt(x).ComparisonValue: \"54D382A4-2050-4C03-94D1-E769F1D15682\"\n* parameters.AlternateFilters.ElementAt(y).AttributePath: \"manager\"\n* parameters.AlternateFilters.ElementAt(y).ComparisonOperator: ComparisonOperator.Equals\n* parameters.AlternateFilter.ElementAt(y).ComparisonValue: \"2819c223-7f76-453a-919d-413861904646\"\n* parameters.RequestedAttributePaths.ElementAt(0): \"id\"\n* parameters.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n\n此处，索引 x 的值可以是 0 并且索引 y 的值可以是 1，或者，x 值可以是 1 并且 y 的值可以是 0，具体根据筛选器查询参数表达式的顺序而定。\n\n**5：**以下是从 Azure Active Directory 向 SCIM 服务发出更新用户请求的示例：\n\n    PATCH ~/scim/Users/54D382A4-2050-4C03-94D1-E769F1D15682 HTTP/1.1\n    Authorization: Bearer ...\n    Content-type: application/json\n    {\n      \"schemas\": \n      [\n        \"urn:ietf:params:scim:api:messages:2.0:PatchOp\"],\n      \"Operations\":\n      [\n        {\n          \"op\":\"Add\",\n          \"path\":\"manager\",\n          \"value\":\n            [\n              {\n                \"$ref\":\"http://.../scim/Users/2819c223-7f76-453a-919d-413861904646\",\n                \"value\":\"2819c223-7f76-453a-919d-413861904646\"}]}]}\n\n用于实现 SCIM 服务的 Microsoft 通用语言基础结构库将请求转换为对服务提供者的 Update 方法调用。以下是该方法的签名：\n\n    // System.Threading.Tasks.Tasks and \n    // System.Collections.Generic.IReadOnlyCollection<T>\n    // are defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.IPatch, \n    // Microsoft.SystemForCrossDomainIdentityManagement.PatchRequestBase, \n    // Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier, \n    // Microsoft.SystemForCrossDomainIdentityManagement.PatchOperation, \n    // Microsoft.SystemForCrossDomainIdentityManagement.OperationName, \n    // Microsoft.SystemForCrossDomainIdentityManagement.IPath and \n    // Microsoft.SystemForCrossDomainIdentityManagement.OperationValue \n    // are all defined in Microsoft.SystemForCrossDomainIdentityManagement.Protocol. \n\n    System.Threading.Tasks.Task Update(\n      Microsoft.SystemForCrossDomainIdentityManagement.IPatch patch, \n      string correlationIdentifier);\n\n    public interface Microsoft.SystemForCrossDomainIdentityManagement.IPatch\n    {\n    Microsoft.SystemForCrossDomainIdentityManagement.PatchRequestBase \n      PatchRequest \n        { get; set; }\n    Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier \n      ResourceIdentifier \n        { get; set; }        \n    }\n\n    public class PatchRequest2: \n      Microsoft.SystemForCrossDomainIdentityManagement.PatchRequestBase\n    {\n    public System.Collections.Generic.IReadOnlyCollection\n      <Microsoft.SystemForCrossDomainIdentityManagement.PatchOperation> \n        Operations\n        { get;}\n\n    public void AddOperation(\n      Microsoft.SystemForCrossDomainIdentityManagement.PatchOperation operation);\n    }\n\n    public class PatchOperation\n    {\n    public Microsoft.SystemForCrossDomainIdentityManagement.OperationName \n      Name\n      { get; set; }\n    \n    public Microsoft.SystemForCrossDomainIdentityManagement.IPath \n      Path\n      { get; set; }\n\n    public System.Collections.Generic.IReadOnlyCollection\n      <Microsoft.SystemForCrossDomainIdentityManagement.OperationValue> Value\n      { get; }\n\n    public void AddValue(\n      Microsoft.SystemForCrossDomainIdentityManagement.OperationValue value);\n    }\n\n    public enum OperationName\n    {\n      Add,\n      Remove,\n      Replace\n    }\n\n    public interface IPath\n    {\n      string AttributePath { get; }\n      System.Collections.Generic.IReadOnlyCollection<IFilter> SubAttributes { get; }\n      Microsoft.SystemForCrossDomainIdentityManagement.IPath ValuePath { get; }\n    }\n\n    public class OperationValue\n    {\n      public string Reference\n      { get; set; }\n      \n      public string Value\n      { get; set; }\n    }\n\n\n\n对于上述更新用户的请求示例，作为修补参数值提供的对象将具有这些属性值：\n\n* ResourceIdentifier.Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"\n* ResourceIdentifier.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n* (PatchRequest as PatchRequest2).Operations.Count: 1\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).OperationName: OperationName.Add\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).Path.AttributePath: \"manager\"\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.Count: 1\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.ElementAt(0).Reference: http://.../scim/Users/2819c223-7f76-453a-919d-413861904646\n* (PatchRequest as PatchRequest2).Operations.ElementAt(0).Value.ElementAt(0).Value: 2819c223-7f76-453a-919d-413861904646\n\n**6：**为了从前端为 SCIM 服务的标识存储取消预配用户，Azure Active Directory 将发送如下请求：\n\n    DELETE ~/scim/Users/54D382A4-2050-4C03-94D1-E769F1D15682 HTTP/1.1\n    Authorization: Bearer ...\n    \n如果使用 Microsoft 提供的、用于实现 SCIM 服务的通用语言基础结构库构建了服务，则将请求转换为对服务提供者的 Delete 方法调用。该方法具有以下签名：\n\n    // System.Threading.Tasks.Tasks is defined in mscorlib.dll.  \n    // Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier, \n    // is defined in Microsoft.SystemForCrossDomainIdentityManagement.Protocol. \n    System.Threading.Tasks.Task Delete(\n      Microsoft.SystemForCrossDomainIdentityManagement.IResourceIdentifier  \n        resourceIdentifier, \n      string correlationIdentifier);\n \n在上述取消预配用户的请求示例中，作为 resourceIdentifier 参数值提供的对象将具有以下属性值：\n\n* ResourceIdentifier.Identifier: \"54D382A4-2050-4C03-94D1-E769F1D15682\"\n* ResourceIdentifier.SchemaIdentifier: \"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"\n\n##组预配和取消预配\n\n下图显示了 Azure Active Directory 将发送到 SCIM 服务以管理组在其他标识存储中的生命周期的消息。这些消息在以下三个方面与用户相关的消息不同：\n\n* 组资源的架构标识为 [http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group](http://schemas.microsoft.com/2006/11/ResourceManagement/ADSCIM/Group)。  \n* 检索组的请求规定将成员属性从请求响应中提供的任何资源中排除。  \n* 确定引用属性是否具有特定值的请求将是有关成员属性的请求。  \n\n![][5]\n*图：组预配和取消预配顺序*\n\n    \n<!--Image references-->\n[1]: ./media/active-directory-scim-provisioning/scim-figure-1.PNG\n[2]: ./media/active-directory-scim-provisioning/scim-figure-2.PNG\n[3]: ./media/active-directory-scim-provisioning/scim-figure-3.PNG\n[4]: ./media/active-directory-scim-provisioning/scim-figure-4.PNG\n[5]: ./media/active-directory-scim-provisioning/scim-figure-5.PNG\n\n<!---HONumber=Mooncake_0118_2016-->"
}