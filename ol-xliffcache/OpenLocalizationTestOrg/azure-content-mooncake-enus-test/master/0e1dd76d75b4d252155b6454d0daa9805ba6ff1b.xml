{
  "nodes": [
    {
      "content": "Azure 存储空间的使用 Java 客户端加密 | Azure",
      "pos": [
        28,
        60
      ]
    },
    {
      "content": "用于 Java 的 Azure 存储客户端库支持客户端加密以及与 Azure 密钥保管库集成以实现 Azure 存储空间应用程序的最佳安全性。",
      "pos": [
        80,
        151
      ]
    },
    {
      "content": "Azure 存储空间的使用 Java 客户端加密",
      "pos": [
        362,
        386
      ]
    },
    {
      "content": "概述",
      "pos": [
        525,
        527
      ]
    },
    {
      "pos": [
        530,
        717
      ],
      "content": "<bpt id=\"p1\">[</bpt>用于 Java 的 Azure 存储空间客户端库<ept id=\"p1\">](https://www.nuget.org/packages/WindowsAzure.Storage)</ept>支持在上载到 Azure 存储空间之前加密客户端应用程序中的数据，以及在下载到客户端时解密数据。此库还支持与 <bpt id=\"p2\">[</bpt>Azure 密钥保管库<ept id=\"p2\">](/home/features/key-vault)</ept>集成，以便管理存储帐户密钥。"
    },
    {
      "content": "通过信封技术加密和解密",
      "pos": [
        722,
        733
      ]
    },
    {
      "content": "加密和解密的过程遵循信封技术。",
      "pos": [
        738,
        753
      ]
    },
    {
      "content": "通过信封技术加密",
      "pos": [
        759,
        767
      ]
    },
    {
      "content": "通过信封技术加密的工作方式如下：",
      "pos": [
        770,
        786
      ]
    },
    {
      "content": "Azure 存储客户端库生成内容加密密钥 (CEK)，这是一次性使用对称密钥。",
      "pos": [
        792,
        831
      ]
    },
    {
      "content": "使用此 CEK 对用户数据进行加密。",
      "pos": [
        839,
        857
      ]
    },
    {
      "content": "然后，使用密钥加密密钥 (KEK) 对此 CEK 进行包装（加密）。KEK 由密钥标识符标识，可以是非对称密钥对或对称密钥，还可以在本地托管或存储在 Azure 密钥保管库中。存储客户端库本身永远无法访问 KEK。该库调用密钥保管库提供的密钥包装算法。用户可以根据需要选择使用自定义提供程序进行密钥包装/解包。",
      "pos": [
        863,
        1018
      ]
    },
    {
      "content": "然后，将已加密的数据上载到 Azure 存储服务。已包装的密钥以及一些附加加密元数据要么存储为元数据（在 Blob 上），要么以内插值替换已加密的数据（消息队列和表实体）。",
      "pos": [
        1024,
        1110
      ]
    },
    {
      "content": "通过信封技术解密",
      "pos": [
        1116,
        1124
      ]
    },
    {
      "content": "通过信封技术解密的工作方式如下：",
      "pos": [
        1127,
        1143
      ]
    },
    {
      "content": "客户端库假定用户在本地或 Azure 密钥保管库中管理密钥加密密钥 (KEK)。用户不需要知道用于加密的特定密钥。但是，可以设置和使用一个密钥解析程序，将不同的密钥标识符解析为密钥。",
      "pos": [
        1149,
        1240
      ]
    },
    {
      "content": "客户端库下载存储在服务中的已加密数据以及任何加密材料。",
      "pos": [
        1248,
        1275
      ]
    },
    {
      "content": "然后，使用密钥加密密钥 (KEK) 对已包装的内容加密密钥 (CEK) 进行解包（解密）。这里同样，客户端库无法访问 KEK。它只是调用自定义提供程序或密钥保管库提供程序的解包算法。",
      "pos": [
        1281,
        1372
      ]
    },
    {
      "content": "然后，使用内容加密密钥 (CEK) 解密已加密的用户数据。",
      "pos": [
        1378,
        1407
      ]
    },
    {
      "content": "加密机制",
      "pos": [
        1412,
        1416
      ]
    },
    {
      "pos": [
        1419,
        1656
      ],
      "content": "存储客户端库使用 <bpt id=\"p1\">[</bpt>AES<ept id=\"p1\">](http://zh.wikipedia.org/wiki/Advanced_Encryption_Standard)</ept> 来加密用户数据。具体而言，是使用 AES 的<bpt id=\"p2\">[</bpt>加密块链接 (CBC)<ept id=\"p2\">](http://zh.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29)</ept> 模式。每个服务的工作方式都稍有不同，因此我们将在此讨论其中每个服务。"
    },
    {
      "content": "Blob",
      "pos": [
        1662,
        1666
      ]
    },
    {
      "pos": [
        1669,
        1764
      ],
      "content": "目前，客户端库仅支持整个 Blob 的加密。具体而言，当用户使用 <bpt id=\"p1\">**</bpt>upload<ept id=\"p1\">**</ept>* 方法或 <bpt id=\"p2\">**</bpt>openOutputStream<ept id=\"p2\">**</ept> 方法时支持加密。对于下载，支持完整下载和范围下载。"
    },
    {
      "content": "在加密过程中，客户端库将生成 16 字节的随机初始化向量 (IV) 和 32 字节的随机内容加密密钥 (CEK) 并将使用此信息对 Blob 数据执行信封加密。然后，已包装的 CEK 和一些附加加密元数据将与服务上的已加密 Blob 一起存储为 Blob 元数据。",
      "pos": [
        1766,
        1898
      ]
    },
    {
      "pos": [
        1901,
        2015
      ],
      "content": "<ph id=\"ph1\">[AZURE.WARNING]</ph> 如果您要针对 Blob 编辑或上载自己的元数据，需要确保此元数据已保留。如果您在没有此元数据的情况下上载新元数据，则已包装的 CEK、IV 和其他元数据将丢失，而 Blob 内容将永远无法再检索。"
    },
    {
      "pos": [
        2017,
        2135
      ],
      "content": "下载已加密的 Blob 需要使用 <bpt id=\"p1\">*</bpt><bpt id=\"p2\">*</bpt>download<ept id=\"p2\">*</ept>/openInputStream<ept id=\"p1\">*</ept>* 便捷方法检索整个 Blob 的内容。将已包装的 CEK 解包，与 IV（在本示例中存储为 Blob 元数据）一起使用将解密后的数据返回给用户。"
    },
    {
      "pos": [
        2137,
        2214
      ],
      "content": "下载已加密的 Blob 中的任意范围（<bpt id=\"p1\">**</bpt>downloadRange<ept id=\"p1\">**</ept>* 方法）涉及调整用户提供的范围以获取少量的可用于成功解密所请求的范围的附加数据。"
    },
    {
      "content": "所有 Blob 类型（块 Blob、页 Blob 和追加 Blob）都可以使用此方案进行加密/解密。",
      "pos": [
        2216,
        2266
      ]
    },
    {
      "content": "队列",
      "pos": [
        2272,
        2274
      ]
    },
    {
      "content": "由于队列消息可以采用任何格式，客户端库定义一个自定义格式，其在消息文本中包括初始化向量 (IV) 和已加密的内容加密密钥 (CEK)。",
      "pos": [
        2277,
        2344
      ]
    },
    {
      "content": "在加密过程中，客户端库将生成 16 字节的随机 IV 和 32 字节的随机 CEK，并使用此信息对队列消息文本执行信封加密。然后，将已包装的 CEK 和一些附加加密元数据添加到已加密的队列消息中。此修改后的消息（如下所示）将存储在服务中。",
      "pos": [
        2346,
        2465
      ]
    },
    {
      "content": "在解密过程中，将从队列消息中提取已包装的密钥并将其解包。还将从队列消息中提取 IV，与解包的密钥一起使用来对队列消息数据进行解密。请注意，加密元数据很少（500 字节以下），因此虽然它计入队列消息的 64KB 限制，但影响应是可管理的。",
      "pos": [
        2616,
        2734
      ]
    },
    {
      "content": "表",
      "pos": [
        2740,
        2741
      ]
    },
    {
      "content": "客户端库支持对插入和替换操作的实体属性进行加密。",
      "pos": [
        2744,
        2768
      ]
    },
    {
      "pos": [
        2771,
        2899
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 当前不支持合并。由于属性的子集可能以前已使用不同的密钥加密，因此只合并新属性和更新元数据将导致数据丢失。合并需要进行额外的服务调用以从服务中读取预先存在的实体，或者需要为属性使用一个新密钥，由于性能方面的原因，这两种方案都不适用。"
    },
    {
      "content": "表数据加密的工作方式如下：",
      "pos": [
        2901,
        2914
      ]
    },
    {
      "content": "用户指定要加密的属性。",
      "pos": [
        2920,
        2931
      ]
    },
    {
      "content": "客户端库为每个实体生成 16 字节的随机初始化向量 (IV) 和 32 字节的随机内容加密密钥 (CEK)，并通过为每个属性派生新的 IV 来对要加密的单个属性执行信封加密。加密的属性存储为二进制数据。",
      "pos": [
        2939,
        3040
      ]
    },
    {
      "content": "然后，已包装的 CEK 和一些附加加密元数据将存储为两个附加保留属性。第一个保留属性 (\\_ClientEncryptionMetadata1) 是一个字符串属性，保存有关 IV、版本和已包装的密钥的信息。第二个保留属性 (\\_ClientEncryptionMetadata2) 是一个二进制属性，保存有关已加密的属性的信息。第二个属性 (\\_ClientEncryptionMetadata2) 中的信息本身是加密的。",
      "pos": [
        3046,
        3257
      ]
    },
    {
      "content": "由于加密需要这两个附加保留属性，用户现在可能只有 250 个自定义属性，而不是 252 个。实体的总大小必须小于 1MB。",
      "pos": [
        3263,
        3324
      ]
    },
    {
      "content": "请注意，只有字符串属性可以加密。如果要对其他类型的属性进行加密，必须将它们转换为字符串。加密的字符串作为二进制属性存储在服务中，并在解密之后转换回字符串。",
      "pos": [
        3330,
        3407
      ]
    },
    {
      "content": "对于表，除了加密策略以外，用户还必须指定要加密的属性。可以通过指定 [Encrypt] 特性（适用于从 TableEntity 派生的 POCO 实体）或在请求选项中指定加密解析程序来完成此操作。加密解析程序是一个委托，它接受分区键、行键和属性名称并返回一个布尔值以指示是否应加密该属性。在加密过程中，客户端库将使用此信息来确定是否应在写入到网络时加密属性。该委托还可以围绕如何加密属性来实现逻辑的可能性。（例如，如果 X，则加密属性 A，否则加密属性 A 和 B。） 请注意，在读取或查询实体时，不需要提供此信息。",
      "pos": [
        3413,
        3671
      ]
    },
    {
      "content": "批处理操作",
      "pos": [
        3677,
        3682
      ]
    },
    {
      "content": "在批处理操作中，将对该批处理操作中的所有行使用同一 KEK，因为客户端库仅允许每个批处理操作使用一个选项对象（因此是一个策略/KEK）。但是，客户端库将为批处理中的每行在内部生成一个新的随机 IV 和随机 CEK。用户还可以选择通过在加密解析程序中定义此行为来加密批处理中的每个操作的不同属性。",
      "pos": [
        3685,
        3832
      ]
    },
    {
      "content": "查询",
      "pos": [
        3838,
        3840
      ]
    },
    {
      "content": "若要执行查询操作，必须指定一个能够解析结果集中的所有密钥的密钥解析程序。如果查询结果中包含的实体不能解析为提供程序，则客户端库将引发错误。对于执行服务器端投影的任何查询，在默认情况下，客户端库将为所选列添加特殊的加密元数据属性（\\_ClientEncryptionMetadata1 和 \\_ClientEncryptionMetadata2）。",
      "pos": [
        3843,
        4016
      ]
    },
    {
      "content": "Azure 密钥保管库",
      "pos": [
        4021,
        4032
      ]
    },
    {
      "pos": [
        4035,
        4226
      ],
      "content": "Azure 密钥保管库可帮助保护云应用程序和服务使用的加密密钥和机密。通过 Azure 密钥保管库，用户可以使用受硬件安全模块 (HSM) 保护的密钥，来加密密钥和机密（例如身份验证密钥、存储帐户密钥、数据加密密钥、.PFX 文件和密码）。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>什么是 Azure 密钥保管库？<ept id=\"p1\">](/documemtation/articles/key-vault-whatis)</ept>。"
    },
    {
      "content": "存储客户端库使用密钥保管库核心库，以便在整个 Azure 上提供一个通用框架进行管理密钥。用户还可以从使用密钥保管库扩展库中获得其他好处。扩展库围绕简单无缝的对称/RSA 本地和云密钥提供程序以及使用聚合和缓存提供有用的功能。",
      "pos": [
        4228,
        4341
      ]
    },
    {
      "content": "接口和依赖项",
      "pos": [
        4347,
        4353
      ]
    },
    {
      "content": "有三个密钥保管库包：",
      "pos": [
        4356,
        4366
      ]
    },
    {
      "content": "azure-keyvault-core 包含 IKey 和 IKeyResolver。它是没有依赖项的小型包。用于 Java 的存储空间客户端库将其定义为一个依赖项。",
      "pos": [
        4370,
        4453
      ]
    },
    {
      "content": "azure-keyvault 包含密钥保管库 REST 客户端。",
      "pos": [
        4456,
        4488
      ]
    },
    {
      "content": "azure-keyvault-extensions 包含扩展代码，其中包括加密算法和 RSAKey 和 SymmetricKey 的实现。它依赖于 Core 和 KeyVault 命名空间，并提供用于定义聚合解析程序（在用户想要使用多个密钥提供程序时）和缓存密钥解析程序的功能。虽然存储客户端库不直接依赖于此包，但是如果用户想要使用 Azure 密钥保管库来存储其密钥或通过密钥保管库扩展来使用本地和云加密提供程序，则他们将需要此包。",
      "pos": [
        4493,
        4710
      ]
    },
    {
      "content": "密钥保管库专为高价值主密钥设计，每个密钥保管库的限流限制的设计也考虑了这一点。使用密钥保管库执行客户端加密时，首选模型是使用在密钥保管库中作为机密存储并在本地缓存的对称主密钥。用户必须执行以下操作：",
      "pos": [
        4716,
        4815
      ]
    },
    {
      "content": "脱机创建一个机密并将其上载到密钥保管库。",
      "pos": [
        4821,
        4841
      ]
    },
    {
      "content": "使用机密的基标识符作为参数来解析机密的当前版本进行加密，并在本地缓存此信息。使用 CachingKeyResolver 进行缓存；用户不需要实现自己的缓存逻辑。",
      "pos": [
        4849,
        4929
      ]
    },
    {
      "content": "创建加密策略时，使用缓存解析程序作为输入。",
      "pos": [
        4937,
        4958
      ]
    },
    {
      "content": "有关密钥保管库用法的详细信息，请查看加密代码示例。",
      "pos": [
        4959,
        4984
      ]
    },
    {
      "content": "最佳实践",
      "pos": [
        5000,
        5004
      ]
    },
    {
      "content": "仅在用于 Java 的存储空间客户端库中提供加密支持。",
      "pos": [
        5007,
        5034
      ]
    },
    {
      "pos": [
        5037,
        5072
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> 使用客户端加密时，请注意以下要点："
    },
    {
      "content": "读取或写入到已加密的 Blob 时，请使用完整 Blob 上载命令和范围/完整 Blob 下载命令。避免使用协议操作（如“放置块”、“放置块列表”、“写入页”、“清除页”或“追加块”）写入到已加密的 Blob，否则可能会损坏已加密的 Blob 并使其不可读。",
      "pos": [
        5080,
        5209
      ]
    },
    {
      "content": "对于表，存在类似的约束。请注意，不要在未更新加密元数据的情况下更新已加密的属性。",
      "pos": [
        5215,
        5255
      ]
    },
    {
      "pos": [
        5261,
        5419
      ],
      "content": "如果你在已加密的 Blob 上设置元数据，则可能会覆盖解密所需的与加密相关的元数据，因为设置元数据不是累加性的。这也适用于快照；避免在创建已加密的 Blob 的快照时指定元数据。如果必须设置元数据，则一定要先调用 <bpt id=\"p1\">**</bpt>downloadAttributes<ept id=\"p1\">**</ept> 方法以获取当前加密元数据，并在设置元数据时避免并发写入。"
    },
    {
      "pos": [
        5425,
        5488
      ],
      "content": "对于应仅使用加密数据的用户，在默认请求选项中启用 <bpt id=\"p1\">**</bpt>requireEncryption<ept id=\"p1\">**</ept> 标志。有关详细信息，请参阅下文。"
    },
    {
      "content": "客户端 API/接口",
      "pos": [
        5493,
        5503
      ]
    },
    {
      "content": "在创建 EncryptionPolicy 对象时，用户可以只提供密钥（实现了 IKey）、只提供解析程序（实现了 IKeyResolver），或两者都提供。IKey 是使用密钥标识符标识的基本密钥类型，它提供了包装/解包逻辑。IKeyResolver 用于在解密过程中解析密钥。它定义了 ResolveKey 方法，该方法根据给定的密钥标识符返回 IKey。由此，用户能够在多个位置中托管的多个密钥之间进行选择。",
      "pos": [
        5506,
        5712
      ]
    },
    {
      "content": "对于加密，始终使用该密钥，而没有密钥将导致错误。",
      "pos": [
        5716,
        5740
      ]
    },
    {
      "content": "对于解密：",
      "pos": [
        5745,
        5750
      ]
    },
    {
      "content": "如果指定为获取密钥，则将调用密钥解析程序。如果指定了解析程序，但该解析程序不具有密钥标识符的映射，则将引发错误。",
      "pos": [
        5759,
        5815
      ]
    },
    {
      "content": "如果未指定解析程序，但指定了密钥，则在该密钥的标识符与所需密钥标识符匹配时使用该密钥。如果标识符不匹配，则将引发错误。",
      "pos": [
        5824,
        5883
      ]
    },
    {
      "content": "加密示例",
      "pos": [
        5894,
        5898
      ]
    },
    {
      "content": "演示了针对 Blob、队列和表的更详细端到端方案，以及密钥保管库集成。",
      "pos": [
        6007,
        6042
      ]
    },
    {
      "content": "RequireEncryption 模式",
      "pos": [
        6048,
        6068
      ]
    },
    {
      "pos": [
        6071,
        6268
      ],
      "content": "用户可以选择启用一个操作模式，让所有上载和下载都必须加密。在此模式下，尝试在没有加密策略的情况下上载数据或下载在服务中未加密的数据，将导致在客户端上失败。请求选项对象的 <bpt id=\"p1\">**</bpt>requireEncryption<ept id=\"p1\">**</ept> 标志控制此行为。如果你的应用程序要对存储在 Azure 存储空间中的所有对象进行加密，则可以在服务客户端对象的默认请求选项上设置 <bpt id=\"p2\">**</bpt>requireEncryption<ept id=\"p2\">**</ept> 属性。"
    },
    {
      "pos": [
        6270,
        6379
      ],
      "content": "例如，使用 <bpt id=\"p1\">**</bpt>CloudBlobClient.getDefaultRequestOptions().setRequireEncryption(true)<ept id=\"p1\">**</ept>，要求对通过该客户端对象执行的所有 Blob 操作进行加密。"
    },
    {
      "content": "Blob 服务加密",
      "pos": [
        6385,
        6394
      ]
    },
    {
      "pos": [
        6397,
        6505
      ],
      "content": "创建 <bpt id=\"p1\">**</bpt>BlobEncryptionPolicy<ept id=\"p1\">**</ept> 对象并在请求选项中设置它（使用 API 或通过使用 <bpt id=\"p2\">**</bpt>DefaultRequestOptions<ept id=\"p2\">**</ept> 在客户端级别设置）。其他所有事项均由客户端库在内部处理。"
    },
    {
      "content": "队列服务加密",
      "pos": [
        7218,
        7224
      ]
    },
    {
      "pos": [
        7227,
        7336
      ],
      "content": "创建 <bpt id=\"p1\">**</bpt>QueueEncryptionPolicy<ept id=\"p1\">**</ept> 对象并在请求选项中设置它（使用 API 或通过使用 <bpt id=\"p2\">**</bpt>DefaultRequestOptions<ept id=\"p2\">**</ept> 在客户端级别设置）。其他所有事项均由客户端库在内部处理。"
    },
    {
      "content": "表服务加密",
      "pos": [
        7877,
        7882
      ]
    },
    {
      "pos": [
        7885,
        8002
      ],
      "content": "除了创建加密策略和在请求选项上设置它以外，你还必须在 <bpt id=\"p1\">**</bpt>TableRequestOptions<ept id=\"p1\">**</ept> 中指定 <bpt id=\"p2\">**</bpt>EncryptionResolver<ept id=\"p2\">**</ept>，或在实体的 getter 和 setter 上设置 [Encrypt] 特性。"
    },
    {
      "content": "使用解析程序",
      "pos": [
        8008,
        8014
      ]
    },
    {
      "content": "使用特性",
      "pos": [
        9139,
        9143
      ]
    },
    {
      "pos": [
        9146,
        9239
      ],
      "content": "如上所述，如果实体实现了 TableEntity，则可以使用 [Encrypt] 特性修饰属性 getter 和 setter，而不用指定 <bpt id=\"p1\">**</bpt>EncryptionResolver<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "加密和性能",
      "pos": [
        9536,
        9541
      ]
    },
    {
      "content": "注意，加密您的存储数据会导致额外的性能开销。必须生成内容密钥和 IV，内容本身必须进行加密，并且其他元数据必须进行格式化并上载。此开销将因所加密的数据量而有所变化。我们建议客户在开发过程中始终测试其应用程序的性能。",
      "pos": [
        9544,
        9651
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        9656,
        9660
      ]
    },
    {
      "pos": [
        9666,
        9748
      ],
      "content": "下载<bpt id=\"p1\">[</bpt>适用于 Java 的 Azure 存储客户端库 Maven 程序包<ept id=\"p1\">](https://github.com/Azure/azure-storage-java)</ept>"
    },
    {
      "content": "从 GitHub 下载 <bpt id=\"p1\">[</bpt>适用于 Java 的 Azure 存储空间客户端库源代码<ept id=\"p1\">](https://github.com/Azure/azure-storage-java)</ept><ph id=\"ph1\"> </ph>",
      "pos": [
        9753,
        9841
      ]
    },
    {
      "content": "下载 Azure 密钥保管库 Maven <bpt id=\"p1\">[</bpt>Core<ept id=\"p1\">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault.Core/)</ept>、<bpt id=\"p2\">[</bpt>Client<ept id=\"p2\">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault/)</ept> 和 <bpt id=\"p3\">[</bpt>Extensions<ept id=\"p3\">](http://www.nuget.org/packages/Microsoft.Azure.KeyVault.Extensions/)</ept> 程序包",
      "pos": [
        9844,
        10086
      ]
    },
    {
      "content": "访问 <bpt id=\"p1\">[</bpt>Azure 密钥保管库文档<ept id=\"p1\">](/documentation/articles/key-vault-whatis)</ept>",
      "pos": [
        10087,
        10147
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Azure 存储空间的使用 Java 客户端加密 | Azure\" \n    description=\"用于 Java 的 Azure 存储客户端库支持客户端加密以及与 Azure 密钥保管库集成以实现 Azure 存储空间应用程序的最佳安全性。\" \n    services=\"storage\" \n    documentationCenter=\"java\" \n    authors=\"dineshm\" \n    manager=\"carolz\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"01/24/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n# Azure 存储空间的使用 Java 客户端加密   \n\n[AZURE.INCLUDE [storage-selector-client-side-encryption-include](../includes/storage-selector-client-side-encryption-include.md)]\n\n## 概述  \n[用于 Java 的 Azure 存储空间客户端库](https://www.nuget.org/packages/WindowsAzure.Storage)支持在上载到 Azure 存储空间之前加密客户端应用程序中的数据，以及在下载到客户端时解密数据。此库还支持与 [Azure 密钥保管库](/home/features/key-vault)集成，以便管理存储帐户密钥。\n\n## 通过信封技术加密和解密    \n加密和解密的过程遵循信封技术。\n\n### 通过信封技术加密  \n通过信封技术加密的工作方式如下：\n\n1.  Azure 存储客户端库生成内容加密密钥 (CEK)，这是一次性使用对称密钥。  \n\n2.  使用此 CEK 对用户数据进行加密。\n\n3.  然后，使用密钥加密密钥 (KEK) 对此 CEK 进行包装（加密）。KEK 由密钥标识符标识，可以是非对称密钥对或对称密钥，还可以在本地托管或存储在 Azure 密钥保管库中。存储客户端库本身永远无法访问 KEK。该库调用密钥保管库提供的密钥包装算法。用户可以根据需要选择使用自定义提供程序进行密钥包装/解包。\n\n4.  然后，将已加密的数据上载到 Azure 存储服务。已包装的密钥以及一些附加加密元数据要么存储为元数据（在 Blob 上），要么以内插值替换已加密的数据（消息队列和表实体）。\n\n### 通过信封技术解密  \n通过信封技术解密的工作方式如下：\n\n1.  客户端库假定用户在本地或 Azure 密钥保管库中管理密钥加密密钥 (KEK)。用户不需要知道用于加密的特定密钥。但是，可以设置和使用一个密钥解析程序，将不同的密钥标识符解析为密钥。  \n\n2.  客户端库下载存储在服务中的已加密数据以及任何加密材料。\n\n3.  然后，使用密钥加密密钥 (KEK) 对已包装的内容加密密钥 (CEK) 进行解包（解密）。这里同样，客户端库无法访问 KEK。它只是调用自定义提供程序或密钥保管库提供程序的解包算法。\n\n4.  然后，使用内容加密密钥 (CEK) 解密已加密的用户数据。\n\n## 加密机制  \n存储客户端库使用 [AES](http://zh.wikipedia.org/wiki/Advanced_Encryption_Standard) 来加密用户数据。具体而言，是使用 AES 的[加密块链接 (CBC)](http://zh.wikipedia.org/wiki/Block_cipher_mode_of_operation#Cipher-block_chaining_.28CBC.29) 模式。每个服务的工作方式都稍有不同，因此我们将在此讨论其中每个服务。\n\n### Blob  \n目前，客户端库仅支持整个 Blob 的加密。具体而言，当用户使用 **upload*** 方法或 **openOutputStream** 方法时支持加密。对于下载，支持完整下载和范围下载。\n\n在加密过程中，客户端库将生成 16 字节的随机初始化向量 (IV) 和 32 字节的随机内容加密密钥 (CEK) 并将使用此信息对 Blob 数据执行信封加密。然后，已包装的 CEK 和一些附加加密元数据将与服务上的已加密 Blob 一起存储为 Blob 元数据。\n\n>[AZURE.WARNING] 如果您要针对 Blob 编辑或上载自己的元数据，需要确保此元数据已保留。如果您在没有此元数据的情况下上载新元数据，则已包装的 CEK、IV 和其他元数据将丢失，而 Blob 内容将永远无法再检索。\n\n下载已加密的 Blob 需要使用 **download*/openInputStream** 便捷方法检索整个 Blob 的内容。将已包装的 CEK 解包，与 IV（在本示例中存储为 Blob 元数据）一起使用将解密后的数据返回给用户。\n\n下载已加密的 Blob 中的任意范围（**downloadRange*** 方法）涉及调整用户提供的范围以获取少量的可用于成功解密所请求的范围的附加数据。\n\n所有 Blob 类型（块 Blob、页 Blob 和追加 Blob）都可以使用此方案进行加密/解密。\n\n### 队列  \n由于队列消息可以采用任何格式，客户端库定义一个自定义格式，其在消息文本中包括初始化向量 (IV) 和已加密的内容加密密钥 (CEK)。\n\n在加密过程中，客户端库将生成 16 字节的随机 IV 和 32 字节的随机 CEK，并使用此信息对队列消息文本执行信封加密。然后，将已包装的 CEK 和一些附加加密元数据添加到已加密的队列消息中。此修改后的消息（如下所示）将存储在服务中。\n\n    <MessageText>{\"EncryptedMessageContents\":\"6kOu8Rq1C3+M1QO4alKLmWthWXSmHV3mEfxBAgP9QGTU++MKn2uPq3t2UjF1DO6w\",\"EncryptionData\":{…}}</MessageText>\n\n在解密过程中，将从队列消息中提取已包装的密钥并将其解包。还将从队列消息中提取 IV，与解包的密钥一起使用来对队列消息数据进行解密。请注意，加密元数据很少（500 字节以下），因此虽然它计入队列消息的 64KB 限制，但影响应是可管理的。\n\n### 表  \n客户端库支持对插入和替换操作的实体属性进行加密。\n\n>[AZURE.NOTE] 当前不支持合并。由于属性的子集可能以前已使用不同的密钥加密，因此只合并新属性和更新元数据将导致数据丢失。合并需要进行额外的服务调用以从服务中读取预先存在的实体，或者需要为属性使用一个新密钥，由于性能方面的原因，这两种方案都不适用。\n\n表数据加密的工作方式如下：\n\n1.  用户指定要加密的属性。  \n\n2.  客户端库为每个实体生成 16 字节的随机初始化向量 (IV) 和 32 字节的随机内容加密密钥 (CEK)，并通过为每个属性派生新的 IV 来对要加密的单个属性执行信封加密。加密的属性存储为二进制数据。\n\n3.  然后，已包装的 CEK 和一些附加加密元数据将存储为两个附加保留属性。第一个保留属性 (\\_ClientEncryptionMetadata1) 是一个字符串属性，保存有关 IV、版本和已包装的密钥的信息。第二个保留属性 (\\_ClientEncryptionMetadata2) 是一个二进制属性，保存有关已加密的属性的信息。第二个属性 (\\_ClientEncryptionMetadata2) 中的信息本身是加密的。\n\n4.  由于加密需要这两个附加保留属性，用户现在可能只有 250 个自定义属性，而不是 252 个。实体的总大小必须小于 1MB。\n\n    请注意，只有字符串属性可以加密。如果要对其他类型的属性进行加密，必须将它们转换为字符串。加密的字符串作为二进制属性存储在服务中，并在解密之后转换回字符串。\n\n    对于表，除了加密策略以外，用户还必须指定要加密的属性。可以通过指定 [Encrypt] 特性（适用于从 TableEntity 派生的 POCO 实体）或在请求选项中指定加密解析程序来完成此操作。加密解析程序是一个委托，它接受分区键、行键和属性名称并返回一个布尔值以指示是否应加密该属性。在加密过程中，客户端库将使用此信息来确定是否应在写入到网络时加密属性。该委托还可以围绕如何加密属性来实现逻辑的可能性。（例如，如果 X，则加密属性 A，否则加密属性 A 和 B。） 请注意，在读取或查询实体时，不需要提供此信息。\n\n### 批处理操作  \n在批处理操作中，将对该批处理操作中的所有行使用同一 KEK，因为客户端库仅允许每个批处理操作使用一个选项对象（因此是一个策略/KEK）。但是，客户端库将为批处理中的每行在内部生成一个新的随机 IV 和随机 CEK。用户还可以选择通过在加密解析程序中定义此行为来加密批处理中的每个操作的不同属性。\n\n### 查询  \n若要执行查询操作，必须指定一个能够解析结果集中的所有密钥的密钥解析程序。如果查询结果中包含的实体不能解析为提供程序，则客户端库将引发错误。对于执行服务器端投影的任何查询，在默认情况下，客户端库将为所选列添加特殊的加密元数据属性（\\_ClientEncryptionMetadata1 和 \\_ClientEncryptionMetadata2）。\n\n## Azure 密钥保管库  \nAzure 密钥保管库可帮助保护云应用程序和服务使用的加密密钥和机密。通过 Azure 密钥保管库，用户可以使用受硬件安全模块 (HSM) 保护的密钥，来加密密钥和机密（例如身份验证密钥、存储帐户密钥、数据加密密钥、.PFX 文件和密码）。有关详细信息，请参阅[什么是 Azure 密钥保管库？](/documemtation/articles/key-vault-whatis)。\n\n存储客户端库使用密钥保管库核心库，以便在整个 Azure 上提供一个通用框架进行管理密钥。用户还可以从使用密钥保管库扩展库中获得其他好处。扩展库围绕简单无缝的对称/RSA 本地和云密钥提供程序以及使用聚合和缓存提供有用的功能。\n\n### 接口和依赖项  \n有三个密钥保管库包：\n\n- azure-keyvault-core 包含 IKey 和 IKeyResolver。它是没有依赖项的小型包。用于 Java 的存储空间客户端库将其定义为一个依赖项。\n- azure-keyvault 包含密钥保管库 REST 客户端。  \n- azure-keyvault-extensions 包含扩展代码，其中包括加密算法和 RSAKey 和 SymmetricKey 的实现。它依赖于 Core 和 KeyVault 命名空间，并提供用于定义聚合解析程序（在用户想要使用多个密钥提供程序时）和缓存密钥解析程序的功能。虽然存储客户端库不直接依赖于此包，但是如果用户想要使用 Azure 密钥保管库来存储其密钥或通过密钥保管库扩展来使用本地和云加密提供程序，则他们将需要此包。  \n\n  密钥保管库专为高价值主密钥设计，每个密钥保管库的限流限制的设计也考虑了这一点。使用密钥保管库执行客户端加密时，首选模型是使用在密钥保管库中作为机密存储并在本地缓存的对称主密钥。用户必须执行以下操作：\n\n1.  脱机创建一个机密并将其上载到密钥保管库。  \n\n2.  使用机密的基标识符作为参数来解析机密的当前版本进行加密，并在本地缓存此信息。使用 CachingKeyResolver 进行缓存；用户不需要实现自己的缓存逻辑。  \n\n3.  创建加密策略时，使用缓存解析程序作为输入。\n有关密钥保管库用法的详细信息，请查看加密代码示例。<fix URL>  \n\n## 最佳实践  \n仅在用于 Java 的存储空间客户端库中提供加密支持。\n\n>[AZURE.IMPORTANT] 使用客户端加密时，请注意以下要点：\n>  \n>- 读取或写入到已加密的 Blob 时，请使用完整 Blob 上载命令和范围/完整 Blob 下载命令。避免使用协议操作（如“放置块”、“放置块列表”、“写入页”、“清除页”或“追加块”）写入到已加密的 Blob，否则可能会损坏已加密的 Blob 并使其不可读。\n>\n>- 对于表，存在类似的约束。请注意，不要在未更新加密元数据的情况下更新已加密的属性。\n>\n>- 如果你在已加密的 Blob 上设置元数据，则可能会覆盖解密所需的与加密相关的元数据，因为设置元数据不是累加性的。这也适用于快照；避免在创建已加密的 Blob 的快照时指定元数据。如果必须设置元数据，则一定要先调用 **downloadAttributes** 方法以获取当前加密元数据，并在设置元数据时避免并发写入。\n>\n>- 对于应仅使用加密数据的用户，在默认请求选项中启用 **requireEncryption** 标志。有关详细信息，请参阅下文。\n\n## 客户端 API/接口  \n在创建 EncryptionPolicy 对象时，用户可以只提供密钥（实现了 IKey）、只提供解析程序（实现了 IKeyResolver），或两者都提供。IKey 是使用密钥标识符标识的基本密钥类型，它提供了包装/解包逻辑。IKeyResolver 用于在解密过程中解析密钥。它定义了 ResolveKey 方法，该方法根据给定的密钥标识符返回 IKey。由此，用户能够在多个位置中托管的多个密钥之间进行选择。\n\n- 对于加密，始终使用该密钥，而没有密钥将导致错误。  \n- 对于解密：  \n    - 如果指定为获取密钥，则将调用密钥解析程序。如果指定了解析程序，但该解析程序不具有密钥标识符的映射，则将引发错误。  \n    - 如果未指定解析程序，但指定了密钥，则在该密钥的标识符与所需密钥标识符匹配时使用该密钥。如果标识符不匹配，则将引发错误。  \n\n      [加密示例](https://github.com/Azure/azure-storage-net/tree/master/Samples/GettingStarted/EncryptionSamples) <fix URL> 演示了针对 Blob、队列和表的更详细端到端方案，以及密钥保管库集成。\n\n### RequireEncryption 模式  \n用户可以选择启用一个操作模式，让所有上载和下载都必须加密。在此模式下，尝试在没有加密策略的情况下上载数据或下载在服务中未加密的数据，将导致在客户端上失败。请求选项对象的 **requireEncryption** 标志控制此行为。如果你的应用程序要对存储在 Azure 存储空间中的所有对象进行加密，则可以在服务客户端对象的默认请求选项上设置 **requireEncryption** 属性。\n\n例如，使用 **CloudBlobClient.getDefaultRequestOptions().setRequireEncryption(true)**，要求对通过该客户端对象执行的所有 Blob 操作进行加密。\n\n### Blob 服务加密  \n创建 **BlobEncryptionPolicy** 对象并在请求选项中设置它（使用 API 或通过使用 **DefaultRequestOptions** 在客户端级别设置）。其他所有事项均由客户端库在内部处理。\n\n    // Create the IKey used for encryption.\n    RsaKey key = new RsaKey(\"private:key1\" /* key identifier */);\n\n    // Create the encryption policy to be used for upload and download.\n    BlobEncryptionPolicy policy = new BlobEncryptionPolicy(key, null);\n\n    // Set the encryption policy on the request options.\n    BlobRequestOptions options = new BlobRequestOptions();\n    options.setEncryptionPolicy(policy);\n\n    // Upload the encrypted contents to the blob.\n    blob.upload(stream, size, null, options, null);\n\n    // Download and decrypt the encrypted contents from the blob.\n    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n    blob.download(outputStream, null, options, null);\n\n### 队列服务加密  \n创建 **QueueEncryptionPolicy** 对象并在请求选项中设置它（使用 API 或通过使用 **DefaultRequestOptions** 在客户端级别设置）。其他所有事项均由客户端库在内部处理。\n\n    // Create the IKey used for encryption.\n    RsaKey key = new RsaKey(\"private:key1\" /* key identifier */);\n\n    // Create the encryption policy to be used for upload and download.\n    QueueEncryptionPolicy policy = new QueueEncryptionPolicy(key, null);\n\n    // Add message\n    QueueRequestOptions options = new QueueRequestOptions();\n    options.setEncryptionPolicy(policy);\n\n    queue.addMessage(message, 0, 0, options, null);\n\n    // Retrieve message\n    CloudQueueMessage retrMessage = queue.retrieveMessage(30, options, null);\n\n### 表服务加密  \n除了创建加密策略和在请求选项上设置它以外，你还必须在 **TableRequestOptions** 中指定 **EncryptionResolver**，或在实体的 getter 和 setter 上设置 [Encrypt] 特性。\n\n### 使用解析程序  \n\n    // Create the IKey used for encryption.\n    RsaKey key = new RsaKey(\"private:key1\" /* key identifier */);\n\n    // Create the encryption policy to be used for upload and download.\n    TableEncryptionPolicy policy = new TableEncryptionPolicy(key, null);\n\n    TableRequestOptions options = new TableRequestOptions()\n    options.setEncryptionPolicy(policy);\n    options.setEncryptionResolver(new EncryptionResolver() {\n        public boolean encryptionResolver(String pk, String rk, String key) {\n            if (key == \"foo\")\n            {\n                return true;\n            }\n            return false;\n        }\n    });\n\n    // Insert Entity\n    currentTable.execute(TableOperation.insert(ent), options, null);\n\n    // Retrieve Entity\n    // No need to specify an encryption resolver for retrieve\n    TableRequestOptions retrieveOptions = new TableRequestOptions()\n    retrieveOptions.setEncryptionPolicy(policy);\n\n    TableOperation operation = TableOperation.retrieve(ent.PartitionKey, ent.RowKey, DynamicTableEntity.class);\n    TableResult result = currentTable.execute(operation, retrieveOptions, null);\n\n### 使用特性  \n如上所述，如果实体实现了 TableEntity，则可以使用 [Encrypt] 特性修饰属性 getter 和 setter，而不用指定 **EncryptionResolver**。\n\n    private string encryptedProperty1;\n\n    @Encrypt\n    public String getEncryptedProperty1 () {\n        return this.encryptedProperty1;\n    }\n\n    @Encrypt\n    public void setEncryptedProperty1(final String encryptedProperty1) {\n        this.encryptedProperty1 = encryptedProperty1;\n    }\n\n## 加密和性能  \n注意，加密您的存储数据会导致额外的性能开销。必须生成内容密钥和 IV，内容本身必须进行加密，并且其他元数据必须进行格式化并上载。此开销将因所加密的数据量而有所变化。我们建议客户在开发过程中始终测试其应用程序的性能。\n\n## 后续步骤  \n\n- 下载[适用于 Java 的 Azure 存储客户端库 Maven 程序包](https://github.com/Azure/azure-storage-java)  \n- 从 GitHub 下载 [适用于 Java 的 Azure 存储空间客户端库源代码](https://github.com/Azure/azure-storage-java)   \n下载 Azure 密钥保管库 Maven [Core](http://www.nuget.org/packages/Microsoft.Azure.KeyVault.Core/)、[Client](http://www.nuget.org/packages/Microsoft.Azure.KeyVault/) 和 [Extensions](http://www.nuget.org/packages/Microsoft.Azure.KeyVault.Extensions/) 程序包\n访问 [Azure 密钥保管库文档](/documentation/articles/key-vault-whatis)  \n\n<!---HONumber=Mooncake_0307_2016-->"
}