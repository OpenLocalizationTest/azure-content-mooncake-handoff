{
  "nodes": [
    {
      "content": "开始使用 blob 存储和 Visual Studio 连接服务 (ASP.NET 5) | Azure",
      "pos": [
        27,
        79
      ]
    },
    {
      "content": "在使用 Visual Studio 连接服务创建存储帐户后，如何开始在 Visual Studio ASP.NET 5 项目中使用 Azure Blob 存储",
      "pos": [
        98,
        177
      ]
    },
    {
      "content": "开始使用 Azure Blob 存储和 Visual Studio 连接服务 (ASP.NET 5)",
      "pos": [
        379,
        429
      ]
    },
    {
      "content": "概述",
      "pos": [
        433,
        435
      ]
    },
    {
      "content": "本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure Blob 存储。",
      "pos": [
        437,
        546
      ]
    },
    {
      "content": "Azure Blob 存储是一项可存储大量非结构化数据的服务，用户可在世界任何地方通过 HTTP 或 HTTPS 访问这些数据。单个 Blob 可以是任意大小。Blob 可以是图像、音频和视频文件、原始数据以及文档文件等。本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建 Azure 存储帐户之后，如何开始使用 blob 存储。",
      "pos": [
        548,
        742
      ]
    },
    {
      "pos": [
        744,
        1043
      ],
      "content": "正如文件位于文件夹中一样，存储 Blob 位于容器中。创建存储账号后，可以在存储账号中创建一个或多个容器。例如，在名为“Scrapbook”的存储空间中，可以在名为“images”的存储空间中创建容器，用于存储图片，还可以在名为“audio”的存储空间中创建另一个容器，用于存储音频文件。创建这些容器后，您可以向它们上载单独的 Blob 文件。有关以编程方式操作 blob 的详细信息，请参阅<bpt id=\"p1\">[</bpt>如何通过 .NET 使用 Blob 存储<ept id=\"p1\">]</ept><bpt id=\"p2\">(/documentation/articles/storage-dotnet-how-to-use-blobs \"</bpt>如何通过 .NET 使用 Blob 存储<ept id=\"p2\">\")</ept>。"
    },
    {
      "content": "使用代码访问 blob 容器",
      "pos": [
        1049,
        1063
      ]
    },
    {
      "content": "若要以编程方式访问 ASP.NET 5 项目中的 Blob，你需要添加以下项（如果尚未存在）。",
      "pos": [
        1065,
        1112
      ]
    },
    {
      "content": "在你希望以编程方式访问 Azure 存储服务的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。",
      "pos": [
        1117,
        1170
      ]
    },
    {
      "pos": [
        1423,
        1499
      ],
      "content": "获取表示存储帐户信息的 <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。"
    },
    {
      "pos": [
        1684,
        1714
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>在接下来的部分中，在代码的前面使用上述全部代码"
    },
    {
      "pos": [
        1720,
        1787
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept> 对象在存储帐户中获取到的现有容器的 <bpt id=\"p2\">**</bpt>CloudBlobContainer<ept id=\"p2\">**</ept> 引用。"
    },
    {
      "content": "使用代码创建容器",
      "pos": [
        2056,
        2064
      ]
    },
    {
      "pos": [
        2066,
        2151
      ],
      "content": "您还可以使用 <bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept> 在存储帐户中创建容器。你需要做的就是按照以下代码为 <bpt id=\"p2\">**</bpt>CreateIfNotExistsAsync<ept id=\"p2\">**</ept> 添加调用："
    },
    {
      "pos": [
        2508,
        2661
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>在 ASP.NET 5 中执行调出 Azure 存储的 API 是异步的。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>使用 Async 和 Await 进行异步编程<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。下面的代码假定正在使用异步编程方法。"
    },
    {
      "content": "如果要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器。",
      "pos": [
        2663,
        2701
      ]
    },
    {
      "content": "将 Blob 上载到容器中",
      "pos": [
        2847,
        2860
      ]
    },
    {
      "pos": [
        2862,
        3045
      ],
      "content": "若要将 Blob 文件上载到容器中，请获取容器引用，并使用它来获取 Blob 引用。获取 blob 引用后，可以通过调用 <bpt id=\"p1\">**</bpt>UploadFromStreamAsync<ept id=\"p1\">**</ept> 方法将任何数据流上载到该 blob。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。"
    },
    {
      "content": "列出容器中的 Blob",
      "pos": [
        3416,
        3427
      ]
    },
    {
      "content": "若要列出容器中的 Blob，首先需要获取容器引用。然后，可以调用容器的 <bpt id=\"p1\">**</bpt>ListBlobsSegmentedAsync<ept id=\"p1\">**</ept> 方法检索 blob 和/或其中的目录。若要访问返回的 <bpt id=\"p2\">**</bpt>IListBlobItem<ept id=\"p2\">**</ept> 的丰富属性和方法，您必须将它转换到 <bpt id=\"p3\">**</bpt>CloudBlockBlob<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>CloudPageBlob<ept id=\"p4\">**</ept> 或 <bpt id=\"p5\">**</bpt>CloudBlobDirectory<ept id=\"p5\">**</ept> 对象。如果 Blob 类型未知，您可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出容器中每项的 URI。",
      "pos": [
        3428,
        3681
      ]
    },
    {
      "pos": [
        4829,
        4969
      ],
      "content": "还有其他方法来列出 Blob 容器内容。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>如何通过 .NET 使用 Blob 存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-blobs#list-the-blobs-in-a-container)</ept>。"
    },
    {
      "content": "下载 Blob",
      "pos": [
        4973,
        4980
      ]
    },
    {
      "content": "若要下载 blob，请首先获取对该 blob 引用，然后调用 <bpt id=\"p1\">**</bpt>DownloadToStreamAsync<ept id=\"p1\">**</ept> 方法。下面的示例使用 <bpt id=\"p2\">**</bpt>DownloadToStreamAsync<ept id=\"p2\">**</ept> 方法将 blob 内容传输到稍后可以另存为本地文件的流对象。",
      "pos": [
        4981,
        5105
      ]
    },
    {
      "pos": [
        5437,
        5561
      ],
      "content": "还有其他方法将 Blob 另存为文件。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>如何通过 .NET 使用 Blob 存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-blobs#download-blobs)</ept>。"
    },
    {
      "content": "删除 Blob",
      "pos": [
        5565,
        5572
      ]
    },
    {
      "content": "若要删除 blob，请首先获取对该 blob 的引用，然后调用用于该 blob 的 <bpt id=\"p1\">**</bpt>DeleteAsync<ept id=\"p1\">**</ept> 方法。",
      "pos": [
        5573,
        5634
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        5831,
        5835
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"开始使用 blob 存储和 Visual Studio 连接服务 (ASP.NET 5) | Azure\"\n    description=\"在使用 Visual Studio 连接服务创建存储帐户后，如何开始在 Visual Studio ASP.NET 5 项目中使用 Azure Blob 存储\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"TomArcher\"\n    manager=\"douge\"\n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 开始使用 Azure Blob 存储和 Visual Studio 连接服务 (ASP.NET 5)\n\n##概述\n\n本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure Blob 存储。\n\nAzure Blob 存储是一项可存储大量非结构化数据的服务，用户可在世界任何地方通过 HTTP 或 HTTPS 访问这些数据。单个 Blob 可以是任意大小。Blob 可以是图像、音频和视频文件、原始数据以及文档文件等。本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建 Azure 存储帐户之后，如何开始使用 blob 存储。\n\n正如文件位于文件夹中一样，存储 Blob 位于容器中。创建存储账号后，可以在存储账号中创建一个或多个容器。例如，在名为“Scrapbook”的存储空间中，可以在名为“images”的存储空间中创建容器，用于存储图片，还可以在名为“audio”的存储空间中创建另一个容器，用于存储音频文件。创建这些容器后，您可以向它们上载单独的 Blob 文件。有关以编程方式操作 blob 的详细信息，请参阅[如何通过 .NET 使用 Blob 存储](/documentation/articles/storage-dotnet-how-to-use-blobs \"如何通过 .NET 使用 Blob 存储\")。\n\n\n\n##使用代码访问 blob 容器\n\n若要以编程方式访问 ASP.NET 5 项目中的 Blob，你需要添加以下项（如果尚未存在）。\n\n1. 在你希望以编程方式访问 Azure 存储服务的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。\n\n        using Microsoft.Framework.Configuration;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Blob;\n        using System.Threading.Tasks;\n        using LogLevel = Microsoft.Framework.Logging.LogLevel;\n\n2. 获取表示存储帐户信息的 **CloudStorageAccount** 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。\n\n         CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n           CloudConfigurationManager.GetSetting(\"<storage-account-name>_AzureStorageConnectionString\"));\n\n    **注意：**在接下来的部分中，在代码的前面使用上述全部代码\n\n\n3. 使用 **CloudBlobClient** 对象在存储帐户中获取到的现有容器的 **CloudBlobContainer** 引用。\n\n        // Create a blob client.\n        CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n        // Get a reference to a container named “mycontainer.”\n        CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n\n\n##使用代码创建容器\n\n您还可以使用 **CloudBlobClient** 在存储帐户中创建容器。你需要做的就是按照以下代码为 **CreateIfNotExistsAsync** 添加调用：\n\n    // Create a blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Get a reference to a container named “my-new-container.”\n    CloudBlobContainer container = blobClient.GetContainerReference(\"my-new-container\");\n\n    // If “mycontainer” doesn’t exist, create it.\n    await container.CreateIfNotExistsAsync();\n\n\n**注意：**在 ASP.NET 5 中执行调出 Azure 存储的 API 是异步的。有关详细信息，请参阅[使用 Async 和 Await 进行异步编程](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)。下面的代码假定正在使用异步编程方法。\n\n如果要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器。\n\n    await container.SetPermissionsAsync(new BlobContainerPermissions\n    {\n        PublicAccess = BlobContainerPublicAccessType.Blob\n    });\n\n##将 Blob 上载到容器中\n\n若要将 Blob 文件上载到容器中，请获取容器引用，并使用它来获取 Blob 引用。获取 blob 引用后，可以通过调用 **UploadFromStreamAsync** 方法将任何数据流上载到该 blob。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。\n\n    // Get a reference to a blob named \"myblob\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob\");\n\n    // Create or overwrite the \"myblob\" blob with the contents of a local file\n    // named “myfile”.\n    using (var fileStream = System.IO.File.OpenRead(@\"path\\myfile\"))\n    {\n        await blockBlob.UploadFromStreamAsync(fileStream);\n    }\n\n##列出容器中的 Blob\n若要列出容器中的 Blob，首先需要获取容器引用。然后，可以调用容器的 **ListBlobsSegmentedAsync** 方法检索 blob 和/或其中的目录。若要访问返回的 **IListBlobItem** 的丰富属性和方法，您必须将它转换到 **CloudBlockBlob**、**CloudPageBlob** 或 **CloudBlobDirectory** 对象。如果 Blob 类型未知，您可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出容器中每项的 URI。\n\n    BlobContinuationToken token = null;\n        do\n        {\n            BlobResultSegment resultSegment = await container.ListBlobsSegmentedAsync(token);\n            token = resultSegment.ContinuationToken;\n\n            foreach (IListBlobItem item in resultSegment.Results)\n            {\n                if (item.GetType() == typeof(CloudBlockBlob))\n                {\n                    CloudBlockBlob blob = (CloudBlockBlob)item;\n                    Console.WriteLine(\"Block blob of length {0}: {1}\", blob.Properties.Length, blob.Uri);\n                }\n\n                else if (item.GetType() == typeof(CloudPageBlob))\n                {\n                    CloudPageBlob pageBlob = (CloudPageBlob)item;\n\n                    Console.WriteLine(\"Page blob of length {0}: {1}\", pageBlob.Properties.Length, pageBlob.Uri);\n                }\n\n                else if (item.GetType() == typeof(CloudBlobDirectory))\n                {\n                    CloudBlobDirectory directory = (CloudBlobDirectory)item;\n\n                    Console.WriteLine(\"Directory: {0}\", directory.Uri);\n                }\n            }\n        } while (token != null);\n\n还有其他方法来列出 Blob 容器内容。有关详细信息，请参阅[如何通过 .NET 使用 Blob 存储](/documentation/articles/storage-dotnet-how-to-use-blobs#list-the-blobs-in-a-container)。\n\n##下载 Blob\n若要下载 blob，请首先获取对该 blob 引用，然后调用 **DownloadToStreamAsync** 方法。下面的示例使用 **DownloadToStreamAsync** 方法将 blob 内容传输到稍后可以另存为本地文件的流对象。\n\n    // Get a reference to a blob named \"photo1.jpg\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"photo1.jpg\");\n\n    // Save the blob contents to a file named “myfile”.\n    using (var fileStream = System.IO.File.OpenWrite(@\"path\\myfile\"))\n    {\n        await blockBlob.DownloadToStreamAsync(fileStream);\n    }\n\n还有其他方法将 Blob 另存为文件。有关详细信息，请参阅[如何通过 .NET 使用 Blob 存储](/documentation/articles/storage-dotnet-how-to-use-blobs#download-blobs)。\n\n##删除 Blob\n若要删除 blob，请首先获取对该 blob 的引用，然后调用用于该 blob 的 **DeleteAsync** 方法。\n\n    // Get a reference to a blob named \"myblob.txt\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob.txt\");\n\n    // Delete the blob.\n    await blockBlob.DeleteAsync();\n\n## 后续步骤\n\n[AZURE.INCLUDE [vs-storage-dotnet-blobs-next-steps](../includes/vs-storage-dotnet-blobs-next-steps.md)]\n\n<!---HONumber=Mooncake_0104_2016-->"
}