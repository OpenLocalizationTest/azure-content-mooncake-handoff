{
  "nodes": [
    {
      "content": "Azure AD Connect Sync：函数引用",
      "pos": [
        27,
        53
      ]
    },
    {
      "content": "在 Azure AD Connect Sync 中引用声明性设置表达式。",
      "pos": [
        72,
        108
      ]
    },
    {
      "content": "Azure AD Connect Sync：函数引用",
      "pos": [
        330,
        356
      ]
    },
    {
      "content": "在 Azure Active Directory Sync 中，函数用于在同步期间操作属性值。",
      "pos": [
        359,
        406
      ]
    },
    {
      "content": "函数的语法使用以下格式表示：",
      "pos": [
        411,
        425
      ]
    },
    {
      "content": "如果函数被重载并接受多个语法，则会列出所有的有效语法。",
      "pos": [
        495,
        522
      ]
    },
    {
      "content": "该函数为强类型函数，并会验证传递的类型是否匹配记录的类型。",
      "pos": [
        527,
        556
      ]
    },
    {
      "content": "如果类型不匹配，则会引发错误。",
      "pos": [
        561,
        576
      ]
    },
    {
      "content": "类型使用以下语法表示：",
      "pos": [
        578,
        589
      ]
    },
    {
      "pos": [
        593,
        606
      ],
      "content": "<bpt id=\"p1\">**</bpt>bin<ept id=\"p1\">**</ept> – 二进制"
    },
    {
      "pos": [
        609,
        623
      ],
      "content": "<bpt id=\"p1\">**</bpt>bool<ept id=\"p1\">**</ept> – 布尔值"
    },
    {
      "pos": [
        626,
        644
      ],
      "content": "<bpt id=\"p1\">**</bpt>dt<ept id=\"p1\">**</ept> – UTC 日期/时间"
    },
    {
      "pos": [
        647,
        665
      ],
      "content": "<bpt id=\"p1\">**</bpt>enum<ept id=\"p1\">**</ept> – 已知常量的枚举"
    },
    {
      "pos": [
        668,
        692
      ],
      "content": "<bpt id=\"p1\">**</bpt>exp<ept id=\"p1\">**</ept> – 表达式，计算结果预计为布尔值"
    },
    {
      "pos": [
        695,
        712
      ],
      "content": "<bpt id=\"p1\">**</bpt>mvbin<ept id=\"p1\">**</ept> – 多值二进制"
    },
    {
      "pos": [
        715,
        731
      ],
      "content": "<bpt id=\"p1\">**</bpt>mvstr<ept id=\"p1\">**</ept> – 多值引用"
    },
    {
      "pos": [
        734,
        746
      ],
      "content": "<bpt id=\"p1\">**</bpt>num<ept id=\"p1\">**</ept> – 数值"
    },
    {
      "pos": [
        749,
        763
      ],
      "content": "<bpt id=\"p1\">**</bpt>ref<ept id=\"p1\">**</ept> – 单值引用"
    },
    {
      "pos": [
        766,
        781
      ],
      "content": "<bpt id=\"p1\">**</bpt>str<ept id=\"p1\">**</ept> – 单值字符串"
    },
    {
      "pos": [
        784,
        807
      ],
      "content": "<bpt id=\"p1\">**</bpt>var<ept id=\"p1\">**</ept> – （几乎）任何其他类型的变体"
    },
    {
      "pos": [
        810,
        825
      ],
      "content": "<bpt id=\"p1\">**</bpt>void<ept id=\"p1\">**</ept> – 不返回值"
    },
    {
      "content": "函数引用",
      "pos": [
        832,
        836
      ]
    },
    {
      "content": "转换：",
      "pos": [
        851,
        854
      ]
    },
    {
      "pos": [
        858,
        1469
      ],
      "content": "<bpt id=\"p1\">[</bpt>CBool<ept id=\"p1\">](#cbool)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>CDate<ept id=\"p2\">](#cdate)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>CGuid<ept id=\"p3\">](#cguid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>ConvertFromBase64<ept id=\"p4\">](#convertfrombase64)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>ConvertToBase64<ept id=\"p5\">](#converttobase64)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>ConvertFromUTF8Hex<ept id=\"p6\">](#convertfromutf8hex)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>ConvertToUTF8Hex<ept id=\"p7\">](#converttoutf8hex)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p8\">[</bpt>CNum<ept id=\"p8\">](#cnum)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p9\">[</bpt>CRef<ept id=\"p9\">](#cref)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p10\">[</bpt>CStr<ept id=\"p10\">](#cstr)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p11\">[</bpt>StringFromGuid<ept id=\"p11\">](#StringFromGuid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p12\">[</bpt>StringFromSid<ept id=\"p12\">](#stringfromsid)</ept>"
    },
    {
      "content": "日期/时间：",
      "pos": [
        1473,
        1479
      ]
    },
    {
      "pos": [
        1483,
        1704
      ],
      "content": "<bpt id=\"p1\">[</bpt>DateAdd<ept id=\"p1\">](#dateadd)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>DateFromNum<ept id=\"p2\">](#datefromnum)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>FormatDateTime<ept id=\"p3\">](#formatdatetime)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>Now<ept id=\"p4\">](#now)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>NumFromDate<ept id=\"p5\">](#numfromdate)</ept>"
    },
    {
      "content": "Directory",
      "pos": [
        1708,
        1717
      ]
    },
    {
      "pos": [
        1721,
        1872
      ],
      "content": "<bpt id=\"p1\">[</bpt>DNComponent<ept id=\"p1\">](#dncomponent)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>DNComponentRev<ept id=\"p2\">](#dncomponentrev)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>EscapeDNComponent<ept id=\"p3\">](#escapedncomponent)</ept>"
    },
    {
      "content": "Insprection：",
      "pos": [
        1876,
        1888
      ]
    },
    {
      "pos": [
        1892,
        2289
      ],
      "content": "<bpt id=\"p1\">[</bpt>IsBitSet<ept id=\"p1\">](#isbitset)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>IsDate<ept id=\"p2\">](#isdate)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>IsEmpty<ept id=\"p3\">](#isempty)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>IsGuid<ept id=\"p4\">](#isguid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>IsNull<ept id=\"p5\">](#isnull)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>IsNullOrEmpty<ept id=\"p6\">](#isnullorempty)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>IsNumeric<ept id=\"p7\">](#isnumeric)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p8\">[</bpt>IsPresent<ept id=\"p8\">](#ispresent)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p9\">[</bpt>IsString<ept id=\"p9\">](#isstring)</ept>"
    },
    {
      "content": "数学：",
      "pos": [
        2293,
        2296
      ]
    },
    {
      "pos": [
        2300,
        2407
      ],
      "content": "<bpt id=\"p1\">[</bpt>BitAnd<ept id=\"p1\">](#bitand)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>BitOr<ept id=\"p2\">](#bitor)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>RandomNum<ept id=\"p3\">](#randomnum)</ept>"
    },
    {
      "content": "多值",
      "pos": [
        2411,
        2413
      ]
    },
    {
      "pos": [
        2417,
        2712
      ],
      "content": "<bpt id=\"p1\">[</bpt>Contains<ept id=\"p1\">](#contains)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>Count<ept id=\"p2\">](#count)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>Item<ept id=\"p3\">](#item)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>ItemOrNull<ept id=\"p4\">](#itemornull)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>Join<ept id=\"p5\">](#join)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>RemoveDuplicates<ept id=\"p6\">](#removeduplicates)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>Split<ept id=\"p7\">](#split)</ept>"
    },
    {
      "content": "程序流：",
      "pos": [
        2716,
        2720
      ]
    },
    {
      "pos": [
        2724,
        2819
      ],
      "content": "<bpt id=\"p1\">[</bpt>Error<ept id=\"p1\">](#error)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>IIF<ept id=\"p2\">](#iif)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>Switch<ept id=\"p3\">](#switch)</ept>"
    },
    {
      "content": "文本",
      "pos": [
        2824,
        2826
      ]
    },
    {
      "pos": [
        2830,
        3559
      ],
      "content": "<bpt id=\"p1\">[</bpt>GUID<ept id=\"p1\">](#guid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p2\">[</bpt>InStr<ept id=\"p2\">](#instr)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p3\">[</bpt>InStrRev<ept id=\"p3\">](#instrrev)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p4\">[</bpt>LCase<ept id=\"p4\">](#lcase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p5\">[</bpt>Left<ept id=\"p5\">](#left)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p6\">[</bpt>Len<ept id=\"p6\">](#len)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p7\">[</bpt>LTrim<ept id=\"p7\">](#ltrim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p8\">[</bpt>Mid<ept id=\"p8\">](#mid)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p9\">[</bpt>PadLeft<ept id=\"p9\">](#padleft)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p10\">[</bpt>PadRight<ept id=\"p10\">](#padright)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p11\">[</bpt>PCase<ept id=\"p11\">](#pcase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p12\">[</bpt>Replace<ept id=\"p12\">](#replace)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p13\">[</bpt>ReplaceChars<ept id=\"p13\">](#replacechars)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p14\">[</bpt>Right<ept id=\"p14\">](#right)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p15\">[</bpt>RTrim<ept id=\"p15\">](rtrim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p16\">[</bpt>Trim<ept id=\"p16\">](#trim)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p17\">[</bpt>UCase<ept id=\"p17\">](#ucase)</ept> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <bpt id=\"p18\">[</bpt>Word<ept id=\"p18\">](#word)</ept>"
    },
    {
      "pos": [
        3576,
        3603
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"bitand\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>BitAnd"
    },
    {
      "content": "说明：",
      "pos": [
        3607,
        3610
      ]
    },
    {
      "content": "BitAnd 函数设置值的指定位。",
      "pos": [
        3617,
        3634
      ]
    },
    {
      "content": "语法：",
      "pos": [
        3639,
        3642
      ]
    },
    {
      "content": "value1、value2：应该 AND 在一起的数字值",
      "pos": [
        3689,
        3717
      ]
    },
    {
      "content": "备注：",
      "pos": [
        3722,
        3725
      ]
    },
    {
      "content": "此函数将两个参数转换为二进制表示形式，并将位设置为：",
      "pos": [
        3731,
        3757
      ]
    },
    {
      "pos": [
        3762,
        3793
      ],
      "content": "0 - 如果<bpt id=\"p1\">*</bpt>掩码<ept id=\"p1\">*</ept>和<bpt id=\"p2\">*</bpt>标志<ept id=\"p2\">*</ept>中相应位的其中一个或两个均为 0"
    },
    {
      "content": "1 - 如果两个相应位均为 1。",
      "pos": [
        3796,
        3812
      ]
    },
    {
      "content": "换而言之，除了当两个参数的相应位均为 1 时之外，所有情况下均返回 0。",
      "pos": [
        3815,
        3851
      ]
    },
    {
      "content": "示例：",
      "pos": [
        3856,
        3859
      ]
    },
    {
      "content": "返回 7，因为十六进制“F”AND“F7”的计算结果为此值。",
      "pos": [
        3890,
        3920
      ]
    },
    {
      "pos": [
        3938,
        3963
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"bitor\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>BitOr"
    },
    {
      "content": "说明：",
      "pos": [
        3967,
        3970
      ]
    },
    {
      "content": "BitOr 函数设置值的指定位。",
      "pos": [
        3977,
        3993
      ]
    },
    {
      "content": "语法：",
      "pos": [
        3997,
        4000
      ]
    },
    {
      "content": "value1、value2：应该 OR 在一起的数字值",
      "pos": [
        4047,
        4074
      ]
    },
    {
      "content": "备注：",
      "pos": [
        4079,
        4082
      ]
    },
    {
      "content": "此函数将两个参数转换为二进制表示形式，并且当掩码和标志中相应位的其中一个或两个均为 1 时，将位设置为 1，当两个相应位均为 0 时，设置为 0。",
      "pos": [
        4089,
        4162
      ]
    },
    {
      "content": "换而言之，除了当两个参数的相应位均为 0 时之外，所有情况下均返回 1。",
      "pos": [
        4167,
        4203
      ]
    },
    {
      "pos": [
        4220,
        4245
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"cbool\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>CBool"
    },
    {
      "content": "说明：",
      "pos": [
        4249,
        4252
      ]
    },
    {
      "content": "CBool 函数基于求值的表达式返回布尔值",
      "pos": [
        4258,
        4279
      ]
    },
    {
      "content": "语法：",
      "pos": [
        4283,
        4286
      ]
    },
    {
      "content": "备注：",
      "pos": [
        4326,
        4329
      ]
    },
    {
      "content": "如果表达式的计算结果为非零值，则 CBool 返回 True，否则则返回 False。",
      "pos": [
        4335,
        4378
      ]
    },
    {
      "content": "示例：",
      "pos": [
        4383,
        4386
      ]
    },
    {
      "content": "如果两个属性具有相同的值，则返回 True。",
      "pos": [
        4430,
        4452
      ]
    },
    {
      "pos": [
        4474,
        4499
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"cdate\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>CDate"
    },
    {
      "content": "说明：",
      "pos": [
        4503,
        4506
      ]
    },
    {
      "content": "CDate 函数通过字符串返回 UTC DateTime。DateTime 不是 Sync 中的原生属性类型，但被某些函数使用。",
      "pos": [
        4512,
        4576
      ]
    },
    {
      "content": "语法：",
      "pos": [
        4580,
        4583
      ]
    },
    {
      "content": "Value：具有日期、时间和可选时区的字符串",
      "pos": [
        4615,
        4637
      ]
    },
    {
      "content": "备注：",
      "pos": [
        4641,
        4644
      ]
    },
    {
      "content": "返回的字符串始终是 UTC 格式。",
      "pos": [
        4650,
        4667
      ]
    },
    {
      "content": "示例：",
      "pos": [
        4671,
        4674
      ]
    },
    {
      "content": "基于员工的开始时间返回 DateTime",
      "pos": [
        4714,
        4734
      ]
    },
    {
      "content": "返回表示“2013-01-11 12:00 AM”的 DateTime",
      "pos": [
        4774,
        4809
      ]
    },
    {
      "pos": [
        4830,
        4855
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"cguid\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>CGuid"
    },
    {
      "content": "说明：",
      "pos": [
        4859,
        4862
      ]
    },
    {
      "content": "CGuid 函数将 GUID 的字符串表示转换为其二进制表示形式。",
      "pos": [
        4868,
        4901
      ]
    },
    {
      "content": "语法：",
      "pos": [
        4906,
        4909
      ]
    },
    {
      "content": "采用这种模式设置格式的字符串：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 或 {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}",
      "pos": [
        4945,
        5037
      ]
    },
    {
      "pos": [
        5058,
        5089
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"contains\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Contains"
    },
    {
      "content": "说明：",
      "pos": [
        5093,
        5096
      ]
    },
    {
      "content": "Contains 函数寻找多值属性内的字符串",
      "pos": [
        5102,
        5124
      ]
    },
    {
      "content": "语法：",
      "pos": [
        5129,
        5132
      ]
    },
    {
      "content": "<ph id=\"ph1\">`num Contains (mvstring attribute, str search)`</ph> - 区分大小写",
      "pos": [
        5139,
        5194
      ]
    },
    {
      "content": "<ph id=\"ph1\">`num Contains (mvref attribute, str search)`</ph> - 区分大小写",
      "pos": [
        5266,
        5318
      ]
    },
    {
      "content": "attribute：要搜索的多值属性。",
      "pos": [
        5322,
        5341
      ]
    },
    {
      "content": "search：在属性中查找的字符串。",
      "pos": [
        5348,
        5366
      ]
    },
    {
      "content": "Casetype：不区分大小写或区分大小写。",
      "pos": [
        5373,
        5395
      ]
    },
    {
      "content": "返回找到字符串的多值属性中的索引。如果未找到字符串，则返回 0。",
      "pos": [
        5401,
        5433
      ]
    },
    {
      "content": "备注：",
      "pos": [
        5439,
        5442
      ]
    },
    {
      "content": "对于多值字符串属性，搜索会在值中查找子字符串。",
      "pos": [
        5448,
        5471
      ]
    },
    {
      "content": "对于引用属性，搜索的字符串必须与视为匹配的值完全匹配。",
      "pos": [
        5476,
        5503
      ]
    },
    {
      "content": "示例：",
      "pos": [
        5508,
        5511
      ]
    },
    {
      "content": "如果 proxyAddress 属性具有主电子邮件地址（由大写“SMTP:”表示)，则返回 proxyAddress 属性，否则返回错误。",
      "pos": [
        5622,
        5691
      ]
    },
    {
      "pos": [
        5713,
        5762
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"convertfrombase64\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ConvertFromBase64"
    },
    {
      "content": "说明：",
      "pos": [
        5766,
        5769
      ]
    },
    {
      "content": "ConvertFromBase64 函数将指定的 base64 编码值转换为规则的字符串。",
      "pos": [
        5775,
        5820
      ]
    },
    {
      "content": "语法：",
      "pos": [
        5825,
        5828
      ]
    },
    {
      "content": "<ph id=\"ph1\">`str ConvertFromBase64(str source)`</ph> - 假定采用 Unicode 编码",
      "pos": [
        5835,
        5888
      ]
    },
    {
      "content": "source：Base64 编码的字符串",
      "pos": [
        5948,
        5968
      ]
    },
    {
      "content": "Encoding：Unicode、ASCII、UTF8",
      "pos": [
        5975,
        6002
      ]
    },
    {
      "content": "示例",
      "pos": [
        6006,
        6008
      ]
    },
    {
      "pos": [
        6122,
        6147
      ],
      "content": "这两个示例均返回 \"<bpt id=\"p1\">*</bpt>Hello world!<ept id=\"p1\">*</ept>\""
    },
    {
      "pos": [
        6169,
        6220
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"convertfromutf8hex\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ConvertFromUTF8Hex"
    },
    {
      "content": "说明：",
      "pos": [
        6224,
        6227
      ]
    },
    {
      "content": "ConvertFromUTF8Hex 函数将指定的 UTF8 Hex 编码值转换为字符串。",
      "pos": [
        6233,
        6278
      ]
    },
    {
      "content": "语法：",
      "pos": [
        6283,
        6286
      ]
    },
    {
      "content": "source：UTF8 2 字节编码的字符串",
      "pos": [
        6333,
        6355
      ]
    },
    {
      "content": "备注：",
      "pos": [
        6360,
        6363
      ]
    },
    {
      "content": "该结果中此函数和 ConvertFromBase64 (,UTF8) 之间的差异对 DN 属性是友好的。",
      "pos": [
        6369,
        6421
      ]
    },
    {
      "content": "此格式被 Azure Active Directory 用作 DN。",
      "pos": [
        6426,
        6460
      ]
    },
    {
      "content": "示例：",
      "pos": [
        6465,
        6468
      ]
    },
    {
      "content": "返回 \"<bpt id=\"p1\">*</bpt>Hello world!<ept id=\"p1\">*</ept>\"",
      "pos": [
        6527,
        6546
      ]
    },
    {
      "pos": [
        6568,
        6613
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"converttobase64\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ConvertToBase64"
    },
    {
      "content": "说明：",
      "pos": [
        6617,
        6620
      ]
    },
    {
      "content": "ConvertToBase64 函数将字符串转换为 Unicode base64 字符串。",
      "pos": [
        6627,
        6672
      ]
    },
    {
      "content": "将整数数组的值转换为其等效字符串表示形式，该表示形式使用 base 64 数字编码。",
      "pos": [
        6677,
        6719
      ]
    },
    {
      "content": "语法：",
      "pos": [
        6723,
        6726
      ]
    },
    {
      "content": "示例：",
      "pos": [
        6772,
        6775
      ]
    },
    {
      "content": "返回 \"SABlAGwAbABvACAAdwBvAHIAbABkACEA\"",
      "pos": [
        6822,
        6859
      ]
    },
    {
      "pos": [
        6881,
        6928
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"converttoutf8hex\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ConvertToUTF8Hex"
    },
    {
      "content": "说明：",
      "pos": [
        6932,
        6935
      ]
    },
    {
      "content": "ConvertToUTF8Hex 函数将字符串转换为 UTF8 Hex 编码的值。",
      "pos": [
        6941,
        6982
      ]
    },
    {
      "content": "语法：",
      "pos": [
        6987,
        6990
      ]
    },
    {
      "content": "备注：",
      "pos": [
        7036,
        7039
      ]
    },
    {
      "content": "此函数的输出格式被 Azure Active Directory 用作 DN 属性。",
      "pos": [
        7045,
        7087
      ]
    },
    {
      "content": "示例：",
      "pos": [
        7092,
        7095
      ]
    },
    {
      "content": "返回 48656C6C6F20776F726C6421",
      "pos": [
        7142,
        7169
      ]
    },
    {
      "pos": [
        7191,
        7213
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"count\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>计数"
    },
    {
      "content": "说明：",
      "pos": [
        7217,
        7220
      ]
    },
    {
      "content": "Count 函数返回多值属性中的元素数量",
      "pos": [
        7226,
        7246
      ]
    },
    {
      "content": "语法：",
      "pos": [
        7251,
        7254
      ]
    },
    {
      "pos": [
        7311,
        7334
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"cnum\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>CNum"
    },
    {
      "content": "说明：",
      "pos": [
        7338,
        7341
      ]
    },
    {
      "content": "CNum 函数使用字符串并返回数值数据类型。",
      "pos": [
        7348,
        7370
      ]
    },
    {
      "content": "语法：",
      "pos": [
        7375,
        7378
      ]
    },
    {
      "pos": [
        7428,
        7451
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"cref\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>CRef"
    },
    {
      "content": "说明：",
      "pos": [
        7455,
        7458
      ]
    },
    {
      "content": "将字符串转换为引用属性",
      "pos": [
        7465,
        7476
      ]
    },
    {
      "content": "语法：",
      "pos": [
        7481,
        7484
      ]
    },
    {
      "content": "示例：",
      "pos": [
        7518,
        7521
      ]
    },
    {
      "pos": [
        7643,
        7666
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"cstr\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>CStr"
    },
    {
      "content": "说明：",
      "pos": [
        7670,
        7673
      ]
    },
    {
      "content": "CStr 函数转换为字符串数据类型。",
      "pos": [
        7680,
        7698
      ]
    },
    {
      "content": "语法：",
      "pos": [
        7703,
        7706
      ]
    },
    {
      "content": "value：可以是数字值、引用属性或布尔值。",
      "pos": [
        7799,
        7821
      ]
    },
    {
      "content": "示例：",
      "pos": [
        7827,
        7830
      ]
    },
    {
      "content": "<ph id=\"ph1\">`CStr([dn]) &lt;br&gt;`</ph>可能返回 “cn=Joe,dc=contoso,dc=com”",
      "pos": [
        7838,
        7886
      ]
    },
    {
      "pos": [
        7908,
        7937
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"dateadd\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>DateAdd"
    },
    {
      "content": "说明：",
      "pos": [
        7941,
        7944
      ]
    },
    {
      "content": "返回包含指定时间间隔已添加到其中的日期的日期。",
      "pos": [
        7951,
        7974
      ]
    },
    {
      "content": "语法：",
      "pos": [
        7979,
        7982
      ]
    },
    {
      "content": "interval：字符串表达式，即你想要添加的时间间隔。字符串必须具有下列值之一：",
      "pos": [
        8040,
        8081
      ]
    },
    {
      "content": "yyyy Year",
      "pos": [
        8085,
        8094
      ]
    },
    {
      "content": "q Quarter",
      "pos": [
        8098,
        8107
      ]
    },
    {
      "content": "m Month",
      "pos": [
        8111,
        8118
      ]
    },
    {
      "content": "y Day of year",
      "pos": [
        8122,
        8135
      ]
    },
    {
      "content": "d Day",
      "pos": [
        8139,
        8144
      ]
    },
    {
      "content": "w Weekday",
      "pos": [
        8148,
        8157
      ]
    },
    {
      "content": "ww Week",
      "pos": [
        8161,
        8168
      ]
    },
    {
      "content": "h Hour",
      "pos": [
        8172,
        8178
      ]
    },
    {
      "content": "n Minute",
      "pos": [
        8182,
        8190
      ]
    },
    {
      "content": "s Second",
      "pos": [
        8194,
        8202
      ]
    },
    {
      "content": "值：你想要添加的单元数。它可以是正值（以获取将来的日期）或负值（以获取过去的日期）。",
      "pos": [
        8205,
        8247
      ]
    },
    {
      "content": "日期：表示间隔添加到其中的日期的 DateTime。",
      "pos": [
        8251,
        8277
      ]
    },
    {
      "content": "示例：",
      "pos": [
        8282,
        8285
      ]
    },
    {
      "content": "添加 3 个月，并返回表示“2001-04-01”的 DateTime",
      "pos": [
        8336,
        8371
      ]
    },
    {
      "pos": [
        8393,
        8430
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"datefromnum\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>DateFromNum"
    },
    {
      "content": "说明：",
      "pos": [
        8434,
        8437
      ]
    },
    {
      "content": "DateFromNum 函数将 AD 的日期格式的值转换为 DateTime 类型。",
      "pos": [
        8444,
        8486
      ]
    },
    {
      "content": "语法：",
      "pos": [
        8491,
        8494
      ]
    },
    {
      "content": "示例：",
      "pos": [
        8534,
        8537
      ]
    },
    {
      "content": "返回表示 2012-01-01 23:00:00 的 DateTime",
      "pos": [
        8624,
        8659
      ]
    },
    {
      "pos": [
        8680,
        8717
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"dncomponent\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>DNComponent"
    },
    {
      "content": "说明：",
      "pos": [
        8721,
        8724
      ]
    },
    {
      "content": "DNComponent 函数返回从左边起的指定 DN 组件的值。",
      "pos": [
        8731,
        8763
      ]
    },
    {
      "content": "语法：",
      "pos": [
        8768,
        8771
      ]
    },
    {
      "content": "dn：要解释的引用属性",
      "pos": [
        8829,
        8840
      ]
    },
    {
      "content": "ComponentNumber：要返回的 DN 中的组件",
      "pos": [
        8843,
        8871
      ]
    },
    {
      "content": "示例：",
      "pos": [
        8876,
        8879
      ]
    },
    {
      "content": "如果 dn 为“cn=Joe,ou=…”，则返回 Joe",
      "pos": [
        8914,
        8942
      ]
    },
    {
      "pos": [
        8963,
        9006
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"dncomponentrev\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>DNComponentRev"
    },
    {
      "content": "说明：",
      "pos": [
        9010,
        9013
      ]
    },
    {
      "content": "DNComponentRev 函数返回从右边起（末尾）的指定 DN 组件的值。",
      "pos": [
        9020,
        9059
      ]
    },
    {
      "content": "语法：",
      "pos": [
        9064,
        9067
      ]
    },
    {
      "content": "dn：要解释的引用属性",
      "pos": [
        9197,
        9208
      ]
    },
    {
      "content": "ComponentNumber - 要返回的 DN 中的组件",
      "pos": [
        9211,
        9241
      ]
    },
    {
      "content": "Options：DC – 忽略具有“dc=”的所有组件",
      "pos": [
        9244,
        9271
      ]
    },
    {
      "content": "示例：",
      "pos": [
        9276,
        9279
      ]
    },
    {
      "content": "两者都返回 US。",
      "pos": [
        9416,
        9425
      ]
    },
    {
      "pos": [
        9447,
        9469
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"error\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>错误"
    },
    {
      "content": "说明：",
      "pos": [
        9473,
        9476
      ]
    },
    {
      "content": "Error 函数用于返回自定义错误。",
      "pos": [
        9483,
        9501
      ]
    },
    {
      "content": "语法：",
      "pos": [
        9506,
        9509
      ]
    },
    {
      "content": "示例：",
      "pos": [
        9552,
        9555
      ]
    },
    {
      "content": "如果属性 accountName 不存在，则对象上引发错误。",
      "pos": [
        9646,
        9676
      ]
    },
    {
      "pos": [
        9698,
        9747
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"escapedncomponent\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>EscapeDNComponent"
    },
    {
      "content": "说明：",
      "pos": [
        9751,
        9754
      ]
    },
    {
      "content": "EscapeDNComponent 函数使用 DN 的一个组件，并对其进行转义，以便它可以在 LDAP 中表示。",
      "pos": [
        9761,
        9817
      ]
    },
    {
      "content": "语法：",
      "pos": [
        9822,
        9825
      ]
    },
    {
      "content": "示例：",
      "pos": [
        9872,
        9875
      ]
    },
    {
      "content": "即使 displayName 属性具有必须在 LDAP 中转义的字符，请确保可以在 LDAP 目录中创建对象。",
      "pos": [
        9951,
        10006
      ]
    },
    {
      "pos": [
        10028,
        10071
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"formatdatetime\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>FormatDateTime"
    },
    {
      "content": "说明：",
      "pos": [
        10075,
        10078
      ]
    },
    {
      "content": "FormatDateTime 函数用于为具有指定格式的字符串设置 DateTime 格式",
      "pos": [
        10085,
        10129
      ]
    },
    {
      "content": "语法：",
      "pos": [
        10134,
        10137
      ]
    },
    {
      "content": "value：DateTime 格式的值",
      "pos": [
        10191,
        10210
      ]
    },
    {
      "content": "format：表示要转换为的格式的字符串。",
      "pos": [
        10218,
        10239
      ]
    },
    {
      "content": "备注：",
      "pos": [
        10244,
        10247
      ]
    },
    {
      "content": "格式的可能值可以在此处找到：<bpt id=\"p1\">[</bpt>用户定义的日期/时间格式（格式函数）<ept id=\"p1\">](http://msdn2.microsoft.com/library/73ctwf33(VS.90).aspx)</ept>",
      "pos": [
        10254,
        10345
      ]
    },
    {
      "content": "示例：",
      "pos": [
        10350,
        10353
      ]
    },
    {
      "content": "结果是“2007-12-25”。",
      "pos": [
        10419,
        10435
      ]
    },
    {
      "content": "结果可能是“20140905081453.0Z”",
      "pos": [
        10506,
        10530
      ]
    },
    {
      "pos": [
        10552,
        10575
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"guid\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>GUID"
    },
    {
      "content": "说明：",
      "pos": [
        10579,
        10582
      ]
    },
    {
      "content": "函数 GUID 生成新的随机 GUID",
      "pos": [
        10589,
        10608
      ]
    },
    {
      "content": "语法：",
      "pos": [
        10613,
        10616
      ]
    },
    {
      "pos": [
        10657,
        10678
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"iif\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IIF"
    },
    {
      "content": "说明：",
      "pos": [
        10682,
        10685
      ]
    },
    {
      "content": "IIF 函数基于指定的条件返回一组可能值中的其中一个值。",
      "pos": [
        10692,
        10720
      ]
    },
    {
      "content": "语法：",
      "pos": [
        10725,
        10728
      ]
    },
    {
      "content": "condition：计算结果可能为 true 或 false 的任何值或表达式。",
      "pos": [
        10799,
        10839
      ]
    },
    {
      "content": "valueIfTrue：如果条件计算结果为 true，则返回的值。",
      "pos": [
        10842,
        10875
      ]
    },
    {
      "content": "valueIfFalse：如果条件计算结果为 false，则返回的值。",
      "pos": [
        10878,
        10913
      ]
    },
    {
      "content": "示例：",
      "pos": [
        10917,
        10920
      ]
    },
    {
      "content": "如果用户是实习生，则返回用户的别名，同时将“t-”添加到其开头，否则按原样返回用户的别名。",
      "pos": [
        10984,
        11029
      ]
    },
    {
      "pos": [
        11051,
        11076
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"instr\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>InStr"
    },
    {
      "content": "说明：",
      "pos": [
        11080,
        11083
      ]
    },
    {
      "content": "InStr 函数查找字符串中第一次出现的子字符串",
      "pos": [
        11090,
        11114
      ]
    },
    {
      "content": "语法：",
      "pos": [
        11119,
        11122
      ]
    },
    {
      "content": "stringcheck：要搜索的字符串",
      "pos": [
        11320,
        11339
      ]
    },
    {
      "content": "stringmatch：要查找的字符串",
      "pos": [
        11347,
        11366
      ]
    },
    {
      "content": "start：查找子字符串的起始位置",
      "pos": [
        11374,
        11391
      ]
    },
    {
      "content": "compare：vbTextCompare 或 vbBinaryCompare",
      "pos": [
        11399,
        11438
      ]
    },
    {
      "content": "备注：",
      "pos": [
        11443,
        11446
      ]
    },
    {
      "content": "返回其中已找到子字符串的位置，如果未找到，则返回 0。",
      "pos": [
        11453,
        11480
      ]
    },
    {
      "content": "示例：",
      "pos": [
        11484,
        11487
      ]
    },
    {
      "content": "计算结果为 5",
      "pos": [
        11538,
        11545
      ]
    },
    {
      "content": "计算结果为 7",
      "pos": [
        11593,
        11600
      ]
    },
    {
      "pos": [
        11622,
        11653
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"instrrev\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>InStrRev"
    },
    {
      "content": "说明：",
      "pos": [
        11657,
        11660
      ]
    },
    {
      "content": "InStrRev 函数查找字符串中最后一次出现的子字符串",
      "pos": [
        11667,
        11695
      ]
    },
    {
      "content": "语法：",
      "pos": [
        11700,
        11703
      ]
    },
    {
      "content": "stringcheck：要搜索的字符串",
      "pos": [
        11907,
        11926
      ]
    },
    {
      "content": "stringmatch：要查找的字符串",
      "pos": [
        11934,
        11953
      ]
    },
    {
      "content": "start：查找子字符串的起始位置",
      "pos": [
        11961,
        11978
      ]
    },
    {
      "content": "compare：vbTextCompare 或 vbBinaryCompare",
      "pos": [
        11986,
        12025
      ]
    },
    {
      "content": "备注：",
      "pos": [
        12029,
        12032
      ]
    },
    {
      "content": "返回其中已找到子字符串的位置，如果未找到，则返回 0。",
      "pos": [
        12039,
        12066
      ]
    },
    {
      "content": "示例：",
      "pos": [
        12070,
        12073
      ]
    },
    {
      "content": "返回 7",
      "pos": [
        12115,
        12119
      ]
    },
    {
      "pos": [
        12141,
        12172
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"isbitset\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsBitSet"
    },
    {
      "content": "说明：",
      "pos": [
        12176,
        12179
      ]
    },
    {
      "content": "函数 IsBitSet 测试是否设置了位",
      "pos": [
        12186,
        12206
      ]
    },
    {
      "content": "语法：",
      "pos": [
        12211,
        12214
      ]
    },
    {
      "content": "value：计算的数字值。标志：表示具有要计算的位的数字值",
      "pos": [
        12262,
        12291
      ]
    },
    {
      "content": "示例：",
      "pos": [
        12296,
        12299
      ]
    },
    {
      "content": "返回 True，因为位“4”在十六进制值“F”中设置",
      "pos": [
        12329,
        12355
      ]
    },
    {
      "pos": [
        12376,
        12403
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"isdate\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsDate"
    },
    {
      "content": "说明：",
      "pos": [
        12407,
        12410
      ]
    },
    {
      "content": "如果表达式可以计算为 DateTime 类型，则 IsDate 函数计算结果为 True。",
      "pos": [
        12417,
        12462
      ]
    },
    {
      "content": "语法：",
      "pos": [
        12467,
        12470
      ]
    },
    {
      "content": "备注：",
      "pos": [
        12512,
        12515
      ]
    },
    {
      "content": "用来确定 CDate() 是否会成功。",
      "pos": [
        12522,
        12541
      ]
    },
    {
      "pos": [
        12562,
        12591
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"isempty\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsEmpty"
    },
    {
      "content": "说明：",
      "pos": [
        12595,
        12598
      ]
    },
    {
      "content": "如果属性是出现在 CS 或 MV 中，但计算结果为空字符串，则 IsEmpty 函数计算结果为 True。",
      "pos": [
        12605,
        12658
      ]
    },
    {
      "content": "语法：",
      "pos": [
        12663,
        12666
      ]
    },
    {
      "pos": [
        12725,
        12752
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"isguid\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsGuid"
    },
    {
      "content": "说明：",
      "pos": [
        12756,
        12759
      ]
    },
    {
      "content": "如果字符串可以转换为 GUID，则 IsGuid 函数计算结果为 true。",
      "pos": [
        12766,
        12804
      ]
    },
    {
      "content": "语法：",
      "pos": [
        12809,
        12812
      ]
    },
    {
      "content": "备注：",
      "pos": [
        12848,
        12851
      ]
    },
    {
      "content": "GUID 定义为遵循以下其中一种模式的字符串：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 或 {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}",
      "pos": [
        12858,
        12958
      ]
    },
    {
      "content": "用来确定 CGuid() 是否会成功。",
      "pos": [
        12960,
        12979
      ]
    },
    {
      "content": "示例：",
      "pos": [
        12984,
        12987
      ]
    },
    {
      "content": "如果 StrAttribute 具有 GUID 格式，则返回二进制表示形式，否则返回 Null。",
      "pos": [
        13056,
        13104
      ]
    },
    {
      "pos": [
        13126,
        13153
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"isnull\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsNull"
    },
    {
      "content": "说明：",
      "pos": [
        13157,
        13160
      ]
    },
    {
      "content": "如果表达式的计算结果为 Null，则 IsNull 函数返回 true。",
      "pos": [
        13167,
        13203
      ]
    },
    {
      "content": "语法：",
      "pos": [
        13208,
        13211
      ]
    },
    {
      "content": "备注：",
      "pos": [
        13253,
        13256
      ]
    },
    {
      "content": "对于属性，Null 表示缺少属性。",
      "pos": [
        13263,
        13280
      ]
    },
    {
      "content": "示例：",
      "pos": [
        13285,
        13288
      ]
    },
    {
      "content": "如果属性没有在 CS 或 MV 中出现，则返回 True。",
      "pos": [
        13324,
        13353
      ]
    },
    {
      "pos": [
        13375,
        13409
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"bitand\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsNullOrEmpty"
    },
    {
      "content": "说明：",
      "pos": [
        13413,
        13416
      ]
    },
    {
      "content": "如果表达式为 null 或空字符串，则 IsNullOrEmpty 函数返回 true。",
      "pos": [
        13423,
        13467
      ]
    },
    {
      "content": "语法：",
      "pos": [
        13472,
        13475
      ]
    },
    {
      "content": "备注：",
      "pos": [
        13524,
        13527
      ]
    },
    {
      "content": "对于属性，如果属性不存在，或存在但为空字符串，此语法计算结果则为 True。",
      "pos": [
        13534,
        13572
      ]
    },
    {
      "content": "此函数的逆函数被命名为 IsPresent。",
      "pos": [
        13577,
        13599
      ]
    },
    {
      "content": "示例：",
      "pos": [
        13604,
        13607
      ]
    },
    {
      "content": "如果属性在 CS 或 MV 中没有出现或为空字符串，则返回 True。",
      "pos": [
        13643,
        13678
      ]
    },
    {
      "pos": [
        13700,
        13737
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"isnullorempty\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsNumeric"
    },
    {
      "content": "说明：",
      "pos": [
        13741,
        13744
      ]
    },
    {
      "content": "IsNumeric 函数返回布尔值，该值指示表达式是否可以计算为数字类型。",
      "pos": [
        13751,
        13788
      ]
    },
    {
      "content": "语法：",
      "pos": [
        13793,
        13796
      ]
    },
    {
      "content": "备注：",
      "pos": [
        13841,
        13844
      ]
    },
    {
      "content": "用来确定 CNum() 是否会成功地分析表达式。",
      "pos": [
        13851,
        13875
      ]
    },
    {
      "pos": [
        13895,
        13926
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"isstring\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsString"
    },
    {
      "content": "说明：",
      "pos": [
        13930,
        13933
      ]
    },
    {
      "content": "如果表达式可以计算为字符串类型，则 IsString 函数计算结果为 True。",
      "pos": [
        13940,
        13980
      ]
    },
    {
      "content": "语法：",
      "pos": [
        13985,
        13988
      ]
    },
    {
      "content": "备注：",
      "pos": [
        14032,
        14035
      ]
    },
    {
      "content": "用来确定 CStr() 是否会成功地分析表达式。",
      "pos": [
        14042,
        14066
      ]
    },
    {
      "pos": [
        14087,
        14120
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"ispresent\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>IsPresent"
    },
    {
      "content": "说明：",
      "pos": [
        14124,
        14127
      ]
    },
    {
      "content": "如果表达式的计算结果为字符串，该字符串不是 Null 且不为空，则 IsPresent 函数返回 true。",
      "pos": [
        14134,
        14188
      ]
    },
    {
      "content": "语法：",
      "pos": [
        14193,
        14196
      ]
    },
    {
      "content": "备注：",
      "pos": [
        14241,
        14244
      ]
    },
    {
      "content": "此函数的逆函数被命名为 IsNullOrEmpty。",
      "pos": [
        14251,
        14277
      ]
    },
    {
      "content": "示例：",
      "pos": [
        14282,
        14285
      ]
    },
    {
      "pos": [
        14453,
        14474
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"item\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>项目"
    },
    {
      "content": "说明：",
      "pos": [
        14478,
        14481
      ]
    },
    {
      "content": "Item 函数返回多值字符串/属性中的一个项。",
      "pos": [
        14488,
        14511
      ]
    },
    {
      "content": "语法：",
      "pos": [
        14516,
        14519
      ]
    },
    {
      "content": "attribute：多值属性",
      "pos": [
        14569,
        14583
      ]
    },
    {
      "content": "index：对多值字符串中某个项的索引。",
      "pos": [
        14591,
        14611
      ]
    },
    {
      "content": "备注：",
      "pos": [
        14616,
        14619
      ]
    },
    {
      "content": "Item 函数与 Contains 函数一起使用很有用，因为后者函数会返回对多值属性中某个项的索引。",
      "pos": [
        14626,
        14676
      ]
    },
    {
      "content": "如果索引超出界限，则引发错误。",
      "pos": [
        14678,
        14693
      ]
    },
    {
      "content": "示例：",
      "pos": [
        14698,
        14701
      ]
    },
    {
      "content": "返回主电子邮件地址。",
      "pos": [
        14777,
        14787
      ]
    },
    {
      "pos": [
        14809,
        14844
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"itemornull\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ItemOrNull"
    },
    {
      "content": "说明：",
      "pos": [
        14848,
        14851
      ]
    },
    {
      "content": "ItemOrNull 函数返回多值字符串/属性中的一个项。",
      "pos": [
        14858,
        14887
      ]
    },
    {
      "content": "语法：",
      "pos": [
        14892,
        14895
      ]
    },
    {
      "content": "attribute：多值属性",
      "pos": [
        14951,
        14965
      ]
    },
    {
      "content": "index：对多值字符串中某个项的索引。",
      "pos": [
        14973,
        14993
      ]
    },
    {
      "content": "备注：",
      "pos": [
        14998,
        15001
      ]
    },
    {
      "content": "ItemOrNull 函数与 Contains 函数一起使用很有用，因为后者函数会返回对多值属性中某个项的索引。",
      "pos": [
        15008,
        15064
      ]
    },
    {
      "content": "如果索引超出界限，则返回 Null 值。",
      "pos": [
        15066,
        15086
      ]
    },
    {
      "pos": [
        15107,
        15130
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"join\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Join"
    },
    {
      "content": "说明：",
      "pos": [
        15134,
        15137
      ]
    },
    {
      "content": "Join 函数使用多值字符串，并返回每个项之间插入指定分隔符的单值字符串。",
      "pos": [
        15144,
        15181
      ]
    },
    {
      "content": "语法：",
      "pos": [
        15186,
        15189
      ]
    },
    {
      "content": "attribute：包含要联接的字符串的多值属性。",
      "pos": [
        15276,
        15301
      ]
    },
    {
      "content": "delimiter：任意字符串，用于分隔返回的字符串中的子字符串。如果省略，则使用空格字符（“ ”）。如果分隔符为零长度字符串（“”）或零，则列表中的所有项都不使用分隔符连接。",
      "pos": [
        15309,
        15397
      ]
    },
    {
      "content": "备注",
      "pos": [
        15402,
        15404
      ]
    },
    {
      "content": "Join 和 Split 函数之间没有奇偶校验。Join 函数使用字符串数组，并使用分隔符字符串将它们联接起来，以返回单个字符串。Split 函数使用字符串并以分隔符分隔，以返回字符串数组。但是，主要区别是 Join 可以使用任何分隔符字符串将字符串连接起来，而 Split 仅可以使用单个字符分隔符分隔字符串。",
      "pos": [
        15410,
        15566
      ]
    },
    {
      "content": "示例：",
      "pos": [
        15571,
        15574
      ]
    },
    {
      "content": "可能返回：“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”",
      "pos": [
        15615,
        15667
      ]
    },
    {
      "pos": [
        15689,
        15714
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"lcase\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>LCase"
    },
    {
      "content": "说明：",
      "pos": [
        15718,
        15721
      ]
    },
    {
      "content": "LCase 函数将字符串中的所有字符都转换为小写。",
      "pos": [
        15728,
        15753
      ]
    },
    {
      "content": "语法：",
      "pos": [
        15758,
        15761
      ]
    },
    {
      "content": "示例：",
      "pos": [
        15796,
        15799
      ]
    },
    {
      "content": "返回 “test”。",
      "pos": [
        15827,
        15837
      ]
    },
    {
      "pos": [
        15859,
        15882
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"left\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Left"
    },
    {
      "content": "说明：",
      "pos": [
        15886,
        15889
      ]
    },
    {
      "content": "Left 函数从字符串左侧起返回指定的字符数。",
      "pos": [
        15896,
        15919
      ]
    },
    {
      "content": "语法：",
      "pos": [
        15924,
        15927
      ]
    },
    {
      "content": "string：从中返回字符的字符串",
      "pos": [
        15975,
        15992
      ]
    },
    {
      "content": "NumChar：标识从字符串开头（左侧）起返回的字符数的数字",
      "pos": [
        16000,
        16030
      ]
    },
    {
      "content": "备注：",
      "pos": [
        16035,
        16038
      ]
    },
    {
      "content": "包含字符串中第一个 numChar 字符的字符串：",
      "pos": [
        16045,
        16070
      ]
    },
    {
      "content": "如果 numChar = 0，则返回空字符串。",
      "pos": [
        16074,
        16097
      ]
    },
    {
      "content": "如果 numChar &lt; 0，则返回输入字符串。",
      "pos": [
        16100,
        16124
      ]
    },
    {
      "content": "如果字符串为 null，则返回空字符串。",
      "pos": [
        16127,
        16147
      ]
    },
    {
      "content": "如果字符串包含的字符数比 numChar 中指定的数量少，则返回与该字符串相同的字符串（即：包含参数 1 中的所有字符）。",
      "pos": [
        16149,
        16210
      ]
    },
    {
      "content": "示例：",
      "pos": [
        16215,
        16218
      ]
    },
    {
      "content": "返回 “Joh”。",
      "pos": [
        16252,
        16261
      ]
    },
    {
      "pos": [
        16282,
        16303
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"len\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Len"
    },
    {
      "content": "说明：",
      "pos": [
        16307,
        16310
      ]
    },
    {
      "content": "Len 函数返回字符串中的字符数。",
      "pos": [
        16317,
        16334
      ]
    },
    {
      "content": "语法：",
      "pos": [
        16339,
        16342
      ]
    },
    {
      "content": "示例：",
      "pos": [
        16375,
        16378
      ]
    },
    {
      "content": "返回 8",
      "pos": [
        16408,
        16412
      ]
    },
    {
      "pos": [
        16433,
        16458
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"ltrim\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>LTrim"
    },
    {
      "content": "说明：",
      "pos": [
        16462,
        16465
      ]
    },
    {
      "content": "LTrim 函数从字符串中删除前导空格。",
      "pos": [
        16472,
        16492
      ]
    },
    {
      "content": "语法：",
      "pos": [
        16497,
        16500
      ]
    },
    {
      "content": "示例：",
      "pos": [
        16535,
        16538
      ]
    },
    {
      "content": "返回 “Test”",
      "pos": [
        16568,
        16577
      ]
    },
    {
      "pos": [
        16599,
        16620
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"mid\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Mid"
    },
    {
      "content": "说明：",
      "pos": [
        16624,
        16627
      ]
    },
    {
      "content": "Mid 函数从字符串指定位置起返回指定的字符数。",
      "pos": [
        16634,
        16658
      ]
    },
    {
      "content": "语法：",
      "pos": [
        16663,
        16666
      ]
    },
    {
      "content": "string：从中返回字符的字符串",
      "pos": [
        16724,
        16741
      ]
    },
    {
      "content": "start：标识从中返回字符的字符串中起始位置的数字",
      "pos": [
        16749,
        16775
      ]
    },
    {
      "content": "NumChar：标识从字符串中的位置返回的字符数的数字",
      "pos": [
        16778,
        16805
      ]
    },
    {
      "content": "备注：",
      "pos": [
        16811,
        16814
      ]
    },
    {
      "content": "从字符串中的开始位置开始返回 numChar 字符。",
      "pos": [
        16821,
        16847
      ]
    },
    {
      "content": "包含字符串中开始位置的 numChar 字符的字符串：",
      "pos": [
        16852,
        16879
      ]
    },
    {
      "content": "如果 numChar = 0，则返回空字符串。",
      "pos": [
        16883,
        16906
      ]
    },
    {
      "content": "如果 numChar &lt; 0，则返回输入字符串。",
      "pos": [
        16909,
        16933
      ]
    },
    {
      "content": "如果 start &gt; 字符串的长度，则返回输入字符串。",
      "pos": [
        16936,
        16963
      ]
    },
    {
      "content": "如果 start &lt;= 0，则返回输入字符串。",
      "pos": [
        16966,
        16989
      ]
    },
    {
      "content": "如果字符串为 null，则返回空字符串。",
      "pos": [
        16992,
        17012
      ]
    },
    {
      "content": "如果字符串中开始位置没有保留的 numChar 字符，则会返回尽可能多可以返回的字符。",
      "pos": [
        17014,
        17057
      ]
    },
    {
      "content": "示例：",
      "pos": [
        17062,
        17065
      ]
    },
    {
      "content": "返回 “hn Do”。",
      "pos": [
        17103,
        17114
      ]
    },
    {
      "content": "返回 “Doe”。",
      "pos": [
        17146,
        17155
      ]
    },
    {
      "pos": [
        17177,
        17198
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"now\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Now"
    },
    {
      "content": "说明：",
      "pos": [
        17202,
        17205
      ]
    },
    {
      "content": "Now 函数根据计算机的系统日期和时间返回指定当前日期和时间的 DateTime。",
      "pos": [
        17212,
        17253
      ]
    },
    {
      "content": "语法：",
      "pos": [
        17258,
        17261
      ]
    },
    {
      "pos": [
        17300,
        17337
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"numfromdate\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>NumFromDate"
    },
    {
      "content": "说明：",
      "pos": [
        17341,
        17344
      ]
    },
    {
      "content": "NumFromDate 函数返回 AD 的日期格式的日期。",
      "pos": [
        17351,
        17380
      ]
    },
    {
      "content": "语法：",
      "pos": [
        17385,
        17388
      ]
    },
    {
      "content": "示例：",
      "pos": [
        17429,
        17432
      ]
    },
    {
      "content": "返回 129699324000000000",
      "pos": [
        17488,
        17509
      ]
    },
    {
      "pos": [
        17531,
        17560
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"padleft\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>PadLeft"
    },
    {
      "content": "说明：",
      "pos": [
        17564,
        17567
      ]
    },
    {
      "content": "PadLeft 函数使用提供的填充字符将字符串从左侧填充到指定长度。",
      "pos": [
        17574,
        17608
      ]
    },
    {
      "content": "语法：",
      "pos": [
        17613,
        17616
      ]
    },
    {
      "content": "string：要填充的字符串。",
      "pos": [
        17683,
        17698
      ]
    },
    {
      "content": "length：表示所需字符串长度的整数。",
      "pos": [
        17706,
        17726
      ]
    },
    {
      "content": "padCharacter：包含用作填充字符的单个字符的字符串",
      "pos": [
        17734,
        17764
      ]
    },
    {
      "content": "备注",
      "pos": [
        17784,
        17786
      ]
    },
    {
      "content": "如果字符串的长度小于 length，则 padCharacter 会重复追加到字符串的开头（左侧），直到其长度等于 length。",
      "pos": [
        17792,
        17857
      ]
    },
    {
      "content": "PadCharacter 可以是空格字符，但不能为 null 值。",
      "pos": [
        17860,
        17893
      ]
    },
    {
      "content": "如果字符串的长度等于或大于 length，则返回不变的字符串。",
      "pos": [
        17896,
        17927
      ]
    },
    {
      "content": "如果字符串的长度大于或等于 length，则返回与 string 相同的字符串。",
      "pos": [
        17930,
        17970
      ]
    },
    {
      "content": "如果字符串的长度小于 length，则返回具有所需长度的新字符串，其中包含用 padCharacter 填充的字符串。",
      "pos": [
        17973,
        18032
      ]
    },
    {
      "content": "如果字符串为 null，该函数则返回空字符串。",
      "pos": [
        18035,
        18058
      ]
    },
    {
      "content": "示例：",
      "pos": [
        18062,
        18065
      ]
    },
    {
      "content": "返回 “000000User”。",
      "pos": [
        18104,
        18120
      ]
    },
    {
      "pos": [
        18142,
        18173
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"padright\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>PadRight"
    },
    {
      "content": "说明：",
      "pos": [
        18177,
        18180
      ]
    },
    {
      "content": "PadRight 函数使用提供的填充字符将字符串从右侧填充到指定长度。",
      "pos": [
        18187,
        18222
      ]
    },
    {
      "content": "语法：",
      "pos": [
        18227,
        18230
      ]
    },
    {
      "content": "string：要填充的字符串。",
      "pos": [
        18298,
        18313
      ]
    },
    {
      "content": "length：表示所需字符串长度的整数。",
      "pos": [
        18317,
        18337
      ]
    },
    {
      "content": "padCharacter：包含用作填充字符的单个字符的字符串",
      "pos": [
        18340,
        18370
      ]
    },
    {
      "content": "备注：",
      "pos": [
        18375,
        18378
      ]
    },
    {
      "content": "如果字符串的长度小于 length，则 padCharacter 会重复追加到字符串的末尾（右侧），直到其长度等于 length。",
      "pos": [
        18385,
        18450
      ]
    },
    {
      "content": "padCharacter 可以是空格字符，但不能为 null 值。",
      "pos": [
        18453,
        18486
      ]
    },
    {
      "content": "如果字符串的长度等于或大于 length，则返回不变的字符串。",
      "pos": [
        18489,
        18520
      ]
    },
    {
      "content": "如果字符串的长度大于或等于 length，则返回与 string 相同的字符串。",
      "pos": [
        18523,
        18563
      ]
    },
    {
      "content": "如果字符串的长度小于 length，则返回具有所需长度的新字符串，其中包含用 padCharacter 填充的字符串。",
      "pos": [
        18566,
        18625
      ]
    },
    {
      "content": "如果字符串为 null，该函数则返回空字符串。",
      "pos": [
        18628,
        18651
      ]
    },
    {
      "content": "示例：",
      "pos": [
        18657,
        18660
      ]
    },
    {
      "content": "返回 “User000000”。",
      "pos": [
        18700,
        18716
      ]
    },
    {
      "pos": [
        18738,
        18763
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"pcase\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>PCase"
    },
    {
      "content": "说明：",
      "pos": [
        18767,
        18770
      ]
    },
    {
      "content": "PCase 函数将字符串中每个空格分隔词的第一个字符转换为大写形式，并将所有其他字符都转换为小写形式。",
      "pos": [
        18777,
        18828
      ]
    },
    {
      "content": "语法：",
      "pos": [
        18833,
        18836
      ]
    },
    {
      "content": "示例：",
      "pos": [
        18871,
        18874
      ]
    },
    {
      "content": "返回 “Test”。",
      "pos": [
        18902,
        18912
      ]
    },
    {
      "pos": [
        18934,
        18967
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"randomnum\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>RandomNum"
    },
    {
      "content": "说明：",
      "pos": [
        18971,
        18974
      ]
    },
    {
      "content": "RandomNum 函数返回指定间隔之间的随机数字。",
      "pos": [
        18981,
        19007
      ]
    },
    {
      "content": "语法：",
      "pos": [
        19012,
        19015
      ]
    },
    {
      "content": "start：标识要生成的随机值的下限的数字",
      "pos": [
        19062,
        19083
      ]
    },
    {
      "content": "end：标识要生成的随机值的上限的数字",
      "pos": [
        19091,
        19110
      ]
    },
    {
      "content": "示例：",
      "pos": [
        19115,
        19118
      ]
    },
    {
      "content": "返回 734。",
      "pos": [
        19148,
        19155
      ]
    },
    {
      "pos": [
        19177,
        19224
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"removeduplicates\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>RemoveDuplicates"
    },
    {
      "content": "说明：",
      "pos": [
        19228,
        19231
      ]
    },
    {
      "content": "RemoveDuplicates 函数使用多值字符串，并确保每个值都是唯一值。",
      "pos": [
        19238,
        19277
      ]
    },
    {
      "content": "语法：",
      "pos": [
        19282,
        19285
      ]
    },
    {
      "content": "示例：",
      "pos": [
        19339,
        19342
      ]
    },
    {
      "content": "返回净化的 proxyAddress 属性，其中所有重复值已被删除。",
      "pos": [
        19391,
        19425
      ]
    },
    {
      "pos": [
        19447,
        19476
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"replace\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Replace"
    },
    {
      "content": "说明：",
      "pos": [
        19480,
        19483
      ]
    },
    {
      "content": "Replace 函数将所有出现的某一字符串替换为另一个字符串。",
      "pos": [
        19490,
        19521
      ]
    },
    {
      "content": "语法：",
      "pos": [
        19526,
        19529
      ]
    },
    {
      "content": "string：替换其中的值的字符串。",
      "pos": [
        19594,
        19612
      ]
    },
    {
      "content": "OldValue：要搜索和替换的字符串。",
      "pos": [
        19620,
        19640
      ]
    },
    {
      "content": "NewValue：要替换的字符串。",
      "pos": [
        19648,
        19665
      ]
    },
    {
      "content": "备注：",
      "pos": [
        19671,
        19674
      ]
    },
    {
      "content": "该函数可以识别以下特殊 moniker:",
      "pos": [
        19681,
        19701
      ]
    },
    {
      "content": "\\\\n – 新行",
      "pos": [
        19705,
        19713
      ]
    },
    {
      "content": "\\\\r – 回车符",
      "pos": [
        19717,
        19726
      ]
    },
    {
      "content": "\\\\t – 选项卡",
      "pos": [
        19729,
        19738
      ]
    },
    {
      "content": "示例：",
      "pos": [
        19744,
        19747
      ]
    },
    {
      "content": "将 CRLF 替换为逗号和空格，可能导致出现“One Microsoft Way, Redmond, WA, USA”",
      "pos": [
        19794,
        19853
      ]
    },
    {
      "pos": [
        19875,
        19914
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"replacechars\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ReplaceChars"
    },
    {
      "content": "说明：",
      "pos": [
        19918,
        19921
      ]
    },
    {
      "content": "ReplaceChars 函数替换 ReplacePattern 字符串中找到的所有出现的字符。",
      "pos": [
        19928,
        19976
      ]
    },
    {
      "content": "语法：",
      "pos": [
        19980,
        19983
      ]
    },
    {
      "content": "string：替换其中值的字符串。",
      "pos": [
        20045,
        20062
      ]
    },
    {
      "content": "ReplacePattern：包含具有要替换字符的字典的字符串。",
      "pos": [
        20065,
        20097
      ]
    },
    {
      "content": "格式为 {source1}:{target1},{source2}:{target2},{sourceN},{targetN}，其中源是要查找并确定要替换的目标字符串的字符。",
      "pos": [
        20101,
        20188
      ]
    },
    {
      "content": "备注：",
      "pos": [
        20194,
        20197
      ]
    },
    {
      "content": "该函数使用每次出现的定义的源，并使用目标替换它们。",
      "pos": [
        20204,
        20229
      ]
    },
    {
      "content": "源必须正好是一个 (unicode) 字符。",
      "pos": [
        20233,
        20255
      ]
    },
    {
      "content": "源不能为空或长度超过一个字符（分析错误）。",
      "pos": [
        20259,
        20280
      ]
    },
    {
      "content": "目标可以具有多个字符，例如 ö:oe、β:ss。",
      "pos": [
        20283,
        20307
      ]
    },
    {
      "content": "目标可以为空，该值指示应删除字符。",
      "pos": [
        20310,
        20327
      ]
    },
    {
      "content": "源区分大小写，并且必须是完全匹配。",
      "pos": [
        20331,
        20348
      ]
    },
    {
      "content": "逗号 (,) 和冒号 (:) 是保留的字符，不能使用此函数进行替换。",
      "pos": [
        20351,
        20385
      ]
    },
    {
      "content": "空格和 ReplacePattern 字符串中的其他空白字符被忽略。",
      "pos": [
        20389,
        20423
      ]
    },
    {
      "content": "示例：",
      "pos": [
        20429,
        20432
      ]
    },
    {
      "content": "'%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o'",
      "pos": [
        20439,
        20485
      ]
    },
    {
      "content": "返回 Raksmorgas",
      "pos": [
        20537,
        20550
      ]
    },
    {
      "content": "返回 “ONeil”，定义要删除单次勾选。",
      "pos": [
        20598,
        20619
      ]
    },
    {
      "pos": [
        20640,
        20665
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"right\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Right"
    },
    {
      "content": "说明：",
      "pos": [
        20669,
        20672
      ]
    },
    {
      "content": "Right 函数从字符串右侧（末尾）起返回指定的字符数。",
      "pos": [
        20679,
        20707
      ]
    },
    {
      "content": "语法：",
      "pos": [
        20712,
        20715
      ]
    },
    {
      "content": "string：从中返回字符的字符串",
      "pos": [
        20764,
        20781
      ]
    },
    {
      "content": "NumChar：标识从字符串末尾（右侧）起返回的字符数的数字",
      "pos": [
        20785,
        20815
      ]
    },
    {
      "content": "备注：",
      "pos": [
        20820,
        20823
      ]
    },
    {
      "content": "NumChar 字符从字符串的最后位置返回。",
      "pos": [
        20830,
        20852
      ]
    },
    {
      "content": "包含字符串中最后的 numChar 字符的字符串：",
      "pos": [
        20854,
        20879
      ]
    },
    {
      "content": "如果 numChar = 0，则返回空字符串。",
      "pos": [
        20883,
        20906
      ]
    },
    {
      "content": "如果 numChar &lt; 0，则返回输入字符串。",
      "pos": [
        20909,
        20933
      ]
    },
    {
      "content": "如果字符串为 null，则返回空字符串。",
      "pos": [
        20936,
        20956
      ]
    },
    {
      "content": "如果字符串包含的字符数比 NumChar 中指定的数量少，则返回与该字符串相同的字符串。",
      "pos": [
        20958,
        21002
      ]
    },
    {
      "content": "示例：",
      "pos": [
        21006,
        21009
      ]
    },
    {
      "content": "返回 “Doe”。",
      "pos": [
        21044,
        21053
      ]
    },
    {
      "pos": [
        21074,
        21099
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"rtrim\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>RTrim"
    },
    {
      "content": "说明：",
      "pos": [
        21103,
        21106
      ]
    },
    {
      "content": "RTrim 函数从字符串中删除尾随空格。",
      "pos": [
        21113,
        21133
      ]
    },
    {
      "content": "语法：",
      "pos": [
        21138,
        21141
      ]
    },
    {
      "content": "示例：",
      "pos": [
        21175,
        21178
      ]
    },
    {
      "content": "返回 “Test”。",
      "pos": [
        21208,
        21218
      ]
    },
    {
      "pos": [
        21238,
        21260
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"split\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>拆分"
    },
    {
      "content": "说明：",
      "pos": [
        21264,
        21267
      ]
    },
    {
      "content": "Split 函数使用采用分隔符分隔的字符串，并使其成为多值字符串。",
      "pos": [
        21274,
        21307
      ]
    },
    {
      "content": "语法：",
      "pos": [
        21313,
        21316
      ]
    },
    {
      "content": "<ph id=\"ph1\">`mvstr Split(str value, str delimiter)`</ph> &lt;br?",
      "pos": [
        21324,
        21368
      ]
    },
    {
      "content": "value：用分隔符字符来分隔的字符串。",
      "pos": [
        21423,
        21443
      ]
    },
    {
      "content": "delimiter：用作分隔符的单个字符。",
      "pos": [
        21446,
        21467
      ]
    },
    {
      "content": "limit：将返回的最大数目的值。",
      "pos": [
        21471,
        21488
      ]
    },
    {
      "content": "示例：",
      "pos": [
        21493,
        21496
      ]
    },
    {
      "content": "返回多值字符串，其中两个元素对 proxyAddress 属性有用",
      "pos": [
        21569,
        21602
      ]
    },
    {
      "pos": [
        21623,
        21666
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"StringFromGuid\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>StringFromGuid"
    },
    {
      "content": "说明：",
      "pos": [
        21670,
        21673
      ]
    },
    {
      "content": "StringFromGuid 函数使用二进制 GUID，并将其转换为字符串",
      "pos": [
        21680,
        21717
      ]
    },
    {
      "content": "语法：",
      "pos": [
        21722,
        21725
      ]
    },
    {
      "pos": [
        21784,
        21825
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"stringfromsid\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>StringFromSid"
    },
    {
      "content": "说明：",
      "pos": [
        21829,
        21832
      ]
    },
    {
      "content": "StringFromSid 函数将字节数组或包含安全标识符的多值字节数组转换为字符串或多值字符串。",
      "pos": [
        21839,
        21888
      ]
    },
    {
      "content": "语法：",
      "pos": [
        21893,
        21896
      ]
    },
    {
      "pos": [
        22003,
        22030
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"switch\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Switch"
    },
    {
      "content": "说明：",
      "pos": [
        22034,
        22037
      ]
    },
    {
      "content": "Switch 函数用于基于计算的条件返回单个值。",
      "pos": [
        22044,
        22068
      ]
    },
    {
      "content": "语法：",
      "pos": [
        22072,
        22075
      ]
    },
    {
      "content": "expr：想要计算结果的变体表达式。",
      "pos": [
        22173,
        22191
      ]
    },
    {
      "content": "value：当相应表达式为 True 时要返回的值。",
      "pos": [
        22195,
        22221
      ]
    },
    {
      "content": "备注：",
      "pos": [
        22226,
        22229
      ]
    },
    {
      "content": "Switch 函数参数列表包含表达式和值对。表达式从左到右计算结果，并返回与计算结果为 True 的第一个表达式相关联的值。如果没有正确配对部件，则会发生运行时错误。",
      "pos": [
        22236,
        22319
      ]
    },
    {
      "content": "例如，如果 expr1 为 True，则 Switch 返回 value1。如果 expr-1 为 False，但 expr-2 为 True，则 Switch 返回 value-2，依此类推。",
      "pos": [
        22321,
        22418
      ]
    },
    {
      "content": "如果表达式均不为 True，第一个 True 表达式中相应值为 Null，则 Switch 返回零。",
      "pos": [
        22420,
        22470
      ]
    },
    {
      "content": "Switch 会对所有表达式计算结果，即使它只返回其中一个结果。为此，你应监视非预期的负面影响。例如，如果任何表达式的计算结果导致除数为零的错误，则会出现错误。",
      "pos": [
        22472,
        22552
      ]
    },
    {
      "content": "值还可以是将返回自定义字符串的错误函数。",
      "pos": [
        22554,
        22574
      ]
    },
    {
      "content": "示例：",
      "pos": [
        22578,
        22581
      ]
    },
    {
      "content": "返回某些主要城市所使用的语言，否则返回错误。",
      "pos": [
        22717,
        22739
      ]
    },
    {
      "pos": [
        22759,
        22782
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"trim\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Trim"
    },
    {
      "content": "说明：",
      "pos": [
        22786,
        22789
      ]
    },
    {
      "content": "Trim 函数从字符串中删除前导空格和尾随空格。",
      "pos": [
        22796,
        22820
      ]
    },
    {
      "content": "语法：",
      "pos": [
        22825,
        22828
      ]
    },
    {
      "content": "示例：",
      "pos": [
        22893,
        22896
      ]
    },
    {
      "content": "返回 “Test”。",
      "pos": [
        22925,
        22935
      ]
    },
    {
      "content": "删除 proxyAddress 属性中每个值的前导空格和尾随空格。",
      "pos": [
        22966,
        22999
      ]
    },
    {
      "pos": [
        23019,
        23044
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"ucase\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>UCase"
    },
    {
      "content": "说明：",
      "pos": [
        23048,
        23051
      ]
    },
    {
      "content": "UCase 函数将字符串中的所有字符都转换为大写形式。",
      "pos": [
        23058,
        23085
      ]
    },
    {
      "content": "语法：",
      "pos": [
        23089,
        23092
      ]
    },
    {
      "content": "示例：",
      "pos": [
        23128,
        23131
      ]
    },
    {
      "content": "返回 “TEST”。",
      "pos": [
        23159,
        23169
      ]
    },
    {
      "pos": [
        23191,
        23214
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"word\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Word"
    },
    {
      "content": "说明：",
      "pos": [
        23218,
        23221
      ]
    },
    {
      "content": "基于描述要使用的分隔符与要返回的单词数的参数，Word 函数返回字符串中包含的单词。",
      "pos": [
        23228,
        23270
      ]
    },
    {
      "content": "语法：",
      "pos": [
        23275,
        23278
      ]
    },
    {
      "content": "string：从中返回单词的字符串。",
      "pos": [
        23344,
        23362
      ]
    },
    {
      "content": "WordNumber：标识应返回单词数的数字。",
      "pos": [
        23365,
        23388
      ]
    },
    {
      "content": "delimiter：表示应该用于标识单词的分隔符的字符串",
      "pos": [
        23392,
        23420
      ]
    },
    {
      "content": "备注：",
      "pos": [
        23425,
        23428
      ]
    },
    {
      "content": "字符串中的字符由分隔符中其中一个字符分隔的每个字符串被标识为单词：",
      "pos": [
        23435,
        23468
      ]
    },
    {
      "content": "如果数字 &lt; 1，则返回空字符串。",
      "pos": [
        23472,
        23489
      ]
    },
    {
      "content": "如果字符串为 null，则返回空字符串。",
      "pos": [
        23492,
        23512
      ]
    },
    {
      "content": "如果字符串包含的单词少于应返回数字或字符串不包含由分隔符标识的任何单词，则返回空字符串。",
      "pos": [
        23514,
        23558
      ]
    },
    {
      "content": "示例：",
      "pos": [
        23564,
        23567
      ]
    },
    {
      "content": "返回 “brown”。",
      "pos": [
        23615,
        23626
      ]
    },
    {
      "content": "会返回 “has”",
      "pos": [
        23683,
        23692
      ]
    },
    {
      "content": "其他资源",
      "pos": [
        23698,
        23702
      ]
    },
    {
      "content": "了解声明性设置表达式",
      "pos": [
        23707,
        23717
      ]
    },
    {
      "content": "Azure AD Connect Sync：自定义同步选项",
      "pos": [
        23830,
        23859
      ]
    },
    {
      "content": "将本地标识与 Azure Active Directory 集成",
      "pos": [
        23928,
        23960
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure AD Connect Sync：函数引用\"\n    description=\"在 Azure AD Connect Sync 中引用声明性设置表达式。\"\n    services=\"active-directory\"\n    documentationCenter=\"\"\n    authors=\"markusvi\"\n    manager=\"swadhwa\"\n    editor=\"\"/>\n\n<tags \n    ms.service=\"active-directory\"\n    ms.date=\"07/27/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n\n# Azure AD Connect Sync：函数引用\n\n\n在 Azure Active Directory Sync 中，函数用于在同步期间操作属性值。<br> 函数的语法使用以下格式表示： <br> `<output type> FunctionName(<input type> <position name>, ..)`\n\n如果函数被重载并接受多个语法，则会列出所有的有效语法。<br> 该函数为强类型函数，并会验证传递的类型是否匹配记录的类型。<br> 如果类型不匹配，则会引发错误。\n\n类型使用以下语法表示：\n\n- **bin** – 二进制\n- **bool** – 布尔值\n- **dt** – UTC 日期/时间\n- **enum** – 已知常量的枚举\n- **exp** – 表达式，计算结果预计为布尔值\n- **mvbin** – 多值二进制\n- **mvstr** – 多值引用\n- **num** – 数值\n- **ref** – 单值引用\n- **str** – 单值字符串\n- **var** – （几乎）任何其他类型的变体\n- **void** – 不返回值\n\n\n\n## 函数引用\n\n----------\n**转换：**\n\n[CBool](#cbool) &nbsp;&nbsp;&nbsp;&nbsp; [CDate](#cdate) &nbsp;&nbsp;&nbsp;&nbsp; [CGuid](#cguid) &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; [ConvertFromBase64](#convertfrombase64) &nbsp;&nbsp;&nbsp;&nbsp; [ConvertToBase64](#converttobase64) &nbsp;&nbsp;&nbsp;&nbsp; [ConvertFromUTF8Hex](#convertfromutf8hex) &nbsp;&nbsp;&nbsp;&nbsp; [ConvertToUTF8Hex](#converttoutf8hex) &nbsp;&nbsp;&nbsp;&nbsp; [CNum](#cnum) &nbsp;&nbsp;&nbsp;&nbsp; [CRef](#cref) &nbsp;&nbsp;&nbsp;&nbsp; [CStr](#cstr) &nbsp;&nbsp;&nbsp;&nbsp; [StringFromGuid](#StringFromGuid) &nbsp;&nbsp;&nbsp;&nbsp; [StringFromSid](#stringfromsid)\n\n**日期/时间：**\n\n[DateAdd](#dateadd) &nbsp;&nbsp;&nbsp;&nbsp; [DateFromNum](#datefromnum) &nbsp;&nbsp;&nbsp;&nbsp; [FormatDateTime](#formatdatetime) &nbsp;&nbsp;&nbsp;&nbsp; [Now](#now) &nbsp;&nbsp;&nbsp;&nbsp; [NumFromDate](#numfromdate)\n\n**Directory**\n\n[DNComponent](#dncomponent) &nbsp;&nbsp;&nbsp;&nbsp; [DNComponentRev](#dncomponentrev) &nbsp;&nbsp;&nbsp;&nbsp; [EscapeDNComponent](#escapedncomponent)\n\n**Insprection：**\n\n[IsBitSet](#isbitset) &nbsp;&nbsp;&nbsp;&nbsp; [IsDate](#isdate) &nbsp;&nbsp;&nbsp;&nbsp; [IsEmpty](#isempty) &nbsp;&nbsp;&nbsp;&nbsp; [IsGuid](#isguid) &nbsp;&nbsp;&nbsp;&nbsp; [IsNull](#isnull) &nbsp;&nbsp;&nbsp;&nbsp; [IsNullOrEmpty](#isnullorempty) &nbsp;&nbsp;&nbsp;&nbsp; [IsNumeric](#isnumeric) &nbsp;&nbsp;&nbsp;&nbsp; [IsPresent](#ispresent) &nbsp;&nbsp;&nbsp;&nbsp; [IsString](#isstring)\n\n**数学：**\n\n[BitAnd](#bitand) &nbsp;&nbsp;&nbsp;&nbsp; [BitOr](#bitor) &nbsp;&nbsp;&nbsp;&nbsp; [RandomNum](#randomnum)\n\n**多值**\n\n[Contains](#contains) &nbsp;&nbsp;&nbsp;&nbsp; [Count](#count) &nbsp;&nbsp;&nbsp;&nbsp; [Item](#item) &nbsp;&nbsp;&nbsp;&nbsp; [ItemOrNull](#itemornull) &nbsp;&nbsp;&nbsp;&nbsp; [Join](#join) &nbsp;&nbsp;&nbsp;&nbsp; [RemoveDuplicates](#removeduplicates) &nbsp;&nbsp;&nbsp;&nbsp; [Split](#split)\n\n**程序流：**\n\n[Error](#error) &nbsp;&nbsp;&nbsp;&nbsp; [IIF](#iif) &nbsp;&nbsp;&nbsp;&nbsp; [Switch](#switch)\n\n\n**文本**\n\n[GUID](#guid) &nbsp;&nbsp;&nbsp;&nbsp; [InStr](#instr) &nbsp;&nbsp;&nbsp;&nbsp; [InStrRev](#instrrev) &nbsp;&nbsp;&nbsp;&nbsp; [LCase](#lcase) &nbsp;&nbsp;&nbsp;&nbsp; [Left](#left) &nbsp;&nbsp;&nbsp;&nbsp; [Len](#len) &nbsp;&nbsp;&nbsp;&nbsp; [LTrim](#ltrim) &nbsp;&nbsp;&nbsp;&nbsp; [Mid](#mid) &nbsp;&nbsp;&nbsp;&nbsp; [PadLeft](#padleft) &nbsp;&nbsp;&nbsp;&nbsp; [PadRight](#padright) &nbsp;&nbsp;&nbsp;&nbsp; [PCase](#pcase) &nbsp;&nbsp;&nbsp;&nbsp; [Replace](#replace) &nbsp;&nbsp;&nbsp;&nbsp; [ReplaceChars](#replacechars) &nbsp;&nbsp;&nbsp;&nbsp; [Right](#right) &nbsp;&nbsp;&nbsp;&nbsp; [RTrim](rtrim) &nbsp;&nbsp;&nbsp;&nbsp; [Trim](#trim) &nbsp;&nbsp;&nbsp;&nbsp; [UCase](#ucase) &nbsp;&nbsp;&nbsp;&nbsp; [Word](#word)\n\n----------\n### <a name=\"bitand\"></a>BitAnd\n\n**说明：** <br>BitAnd 函数设置值的指定位。\n \n**语法：**<br> `num BitAnd(num value1, num value2)`\n\n- value1、value2：应该 AND 在一起的数字值\n \n**备注：**<br>此函数将两个参数转换为二进制表示形式，并将位设置为：\n \n- 0 - 如果*掩码*和*标志*中相应位的其中一个或两个均为 0\n- 1 - 如果两个相应位均为 1。 \n\n换而言之，除了当两个参数的相应位均为 1 时之外，所有情况下均返回 0。\n \n**示例：**<br> `BitAnd(&HF, &HF7)`<br> 返回 7，因为十六进制“F”AND“F7”的计算结果为此值。\n \n----------\n### <a name=\"bitor\"></a>BitOr\n\n**说明：** <br>BitOr 函数设置值的指定位。\n\n**语法：** <br> `num BitOr(num value1, num value2)`\n\n- value1、value2：应该 OR 在一起的数字值 \n\n**备注：** <br>此函数将两个参数转换为二进制表示形式，并且当掩码和标志中相应位的其中一个或两个均为 1 时，将位设置为 1，当两个相应位均为 0 时，设置为 0。<br> 换而言之，除了当两个参数的相应位均为 0 时之外，所有情况下均返回 1。\n\n----------\n### <a name=\"cbool\"></a>CBool\n\n**说明：**<br>CBool 函数基于求值的表达式返回布尔值\n\n**语法：** <br> `bool CBool(exp Expression)`\n\n**备注：**<br>如果表达式的计算结果为非零值，则 CBool 返回 True，否则则返回 False。\n\n\n**示例：**<br> `CBool([attrib1] = [attrib2])` <br>\n\n如果两个属性具有相同的值，则返回 True。\n \n \n\n\n----------\n### <a name=\"cdate\"></a>CDate\n\n**说明：**<br>CDate 函数通过字符串返回 UTC DateTime。DateTime 不是 Sync 中的原生属性类型，但被某些函数使用。\n\n**语法：**<br> `dt CDate(str value)`\n\n- Value：具有日期、时间和可选时区的字符串\n\n**备注：**<br>返回的字符串始终是 UTC 格式。\n\n**示例：**<br> `CDate([employeeStartTime])` <br>基于员工的开始时间返回 DateTime\n\n`CDate(\"2013-01-10 4:00 PM -8\")` <br> 返回表示“2013-01-11 12:00 AM”的 DateTime\n \n\n\n\n----------\n### <a name=\"cguid\"></a>CGuid\n\n**说明：**<br>CGuid 函数将 GUID 的字符串表示转换为其二进制表示形式。\n \n**语法：**<br> `bin CGuid(str GUID)GUID`\n\n- 采用这种模式设置格式的字符串：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 或 {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\n \n\n\n\n----------\n### <a name=\"contains\"></a>Contains\n\n**说明：**<br>Contains 函数寻找多值属性内的字符串\n \n**语法：**<br> `num Contains (mvstring attribute, str search)` - 区分大小写<br> `num Contains (mvstring attribute, str search, enum Casetype)`<br> `num Contains (mvref attribute, str search)` - 区分大小写\n\n- attribute：要搜索的多值属性。<br>\n- search：在属性中查找的字符串。<br>\n- Casetype：不区分大小写或区分大小写。<br>\n\n返回找到字符串的多值属性中的索引。如果未找到字符串，则返回 0。\n \n\n**备注：**<br>对于多值字符串属性，搜索会在值中查找子字符串。<br> 对于引用属性，搜索的字符串必须与视为匹配的值完全匹配。\n \n**示例：**<br> `IIF(Contains([proxyAddresses],”SMTP:”)>0,[proxyAddresses],Error(“No primary SMTP address found.”))`<br>如果 proxyAddress 属性具有主电子邮件地址（由大写“SMTP:”表示)，则返回 proxyAddress 属性，否则返回错误。\n \n \n\n\n----------\n### <a name=\"convertfrombase64\"></a>ConvertFromBase64\n\n**说明：**<br>ConvertFromBase64 函数将指定的 base64 编码值转换为规则的字符串。\n \n**语法：**<br> `str ConvertFromBase64(str source)` - 假定采用 Unicode 编码 <br> `str ConvertFromBase64(str source, enum Encoding)`\n\n- source：Base64 编码的字符串<br>\n- Encoding：Unicode、ASCII、UTF8\n\n**示例**<br> `ConvertFromBase64(\"SABlAGwAbABvACAAdwBvAHIAbABkACEA\")`<br> `ConvertFromBase64(\"SGVsbG8gd29ybGQh\", UTF8)`\n\n这两个示例均返回 \"*Hello world!*\"\n \n \n\n\n----------\n### <a name=\"convertfromutf8hex\"></a>ConvertFromUTF8Hex\n\n**说明：**<br>ConvertFromUTF8Hex 函数将指定的 UTF8 Hex 编码值转换为字符串。\n \n**语法：**<br> `str ConvertFromUTF8Hex(str source)`\n\n- source：UTF8 2 字节编码的字符串\n \n**备注：**<br>该结果中此函数和 ConvertFromBase64 (,UTF8) 之间的差异对 DN 属性是友好的。<br> 此格式被 Azure Active Directory 用作 DN。\n \n**示例：**<br> `ConvertFromUTF8Hex(\"48656C6C6F20776F726C6421\")`<br>返回 \"*Hello world!*\"\n \n \n\n\n----------\n### <a name=\"converttobase64\"></a>ConvertToBase64\n\n**说明：** <br>ConvertToBase64 函数将字符串转换为 Unicode base64 字符串。<br> 将整数数组的值转换为其等效字符串表示形式，该表示形式使用 base 64 数字编码。\n\n**语法：** <br> `str ConvertToBase64(str source)`\n \n**示例：** <br> `ConvertToBase64(\"Hello world!\")` <br> 返回 \"SABlAGwAbABvACAAdwBvAHIAbABkACEA\"\n \n \n\n\n----------\n### <a name=\"converttoutf8hex\"></a>ConvertToUTF8Hex\n\n**说明：**<br>ConvertToUTF8Hex 函数将字符串转换为 UTF8 Hex 编码的值。\n \n**语法：**<br> `str ConvertToUTF8Hex(str source)`\n \n**备注：**<br>此函数的输出格式被 Azure Active Directory 用作 DN 属性。\n \n**示例：** <br> `ConvertToUTF8Hex(\"Hello world!\")` <br>返回 48656C6C6F20776F726C6421\n \n \n\n\n----------\n### <a name=\"count\"></a>计数\n\n**说明：**<br>Count 函数返回多值属性中的元素数量\n \n**语法：** <br> `num Count(mvstr attribute)`\n \n\n\n\n----------\n### <a name=\"cnum\"></a>CNum\n\n**说明：** <br>CNum 函数使用字符串并返回数值数据类型。\n \n**语法：** <br> `num CNum(str value)`\n \n\n\n\n----------\n### <a name=\"cref\"></a>CRef\n\n**说明：** <br>将字符串转换为引用属性\n \n**语法：** <br> `ref CRef(str value)`\n \n**示例：** <br> `CRef(“CN=LC Services,CN=Microsoft,CN=lcspool01, CN=Pools,CN=RTC Service,” & %Forest.LDAP%)`\n \n \n\n\n----------\n### <a name=\"cstr\"></a>CStr\n\n**说明：** <br>CStr 函数转换为字符串数据类型。\n \n**语法：** <br> `str CStr(num value)` <br> `str CStr(ref value)` <br> `str CStr(bool value)` <br>\n\n- value：可以是数字值、引用属性或布尔值。 \n \n**示例：** <br> `CStr([dn]) <br>`可能返回 “cn=Joe,dc=contoso,dc=com”\n \n \n\n\n----------\n### <a name=\"dateadd\"></a>DateAdd\n\n**说明：** <br>返回包含指定时间间隔已添加到其中的日期的日期。\n \n**语法：** <br> `dt DateAdd(str interval, num value, dt date)`\n\n- interval：字符串表达式，即你想要添加的时间间隔。字符串必须具有下列值之一：\n - yyyy Year\n - q Quarter\n - m Month\n - y Day of year\n - d Day\n - w Weekday\n - ww Week\n - h Hour\n - n Minute\n - s Second\n- 值：你想要添加的单元数。它可以是正值（以获取将来的日期）或负值（以获取过去的日期）。 \n- 日期：表示间隔添加到其中的日期的 DateTime。\n \n**示例：** <br> `DateAdd(\"m\", 3, CDate(\"2001-01-01\"))` <br>添加 3 个月，并返回表示“2001-04-01”的 DateTime\n \n \n\n\n----------\n### <a name=\"datefromnum\"></a>DateFromNum\n\n**说明：** <br>DateFromNum 函数将 AD 的日期格式的值转换为 DateTime 类型。\n \n**语法：** <br> `dt DateFromNum(num value)`\n \n**示例：** <br> `DateFromNum([lastLogonTimestamp])` <br> `DateFromNum(129699324000000000)` <br>返回表示 2012-01-01 23:00:00 的 DateTime\n \n\n\n\n----------\n### <a name=\"dncomponent\"></a>DNComponent\n\n**说明：** <br>DNComponent 函数返回从左边起的指定 DN 组件的值。\n \n**语法：** <br> `str DNComponent(ref dn, num ComponentNumber)`\n\n- dn：要解释的引用属性\n- ComponentNumber：要返回的 DN 中的组件\n \n**示例：** <br> `DNComponent([dn],1)` <br> 如果 dn 为“cn=Joe,ou=…”，则返回 Joe\n \n\n\n\n----------\n### <a name=\"dncomponentrev\"></a>DNComponentRev\n\n**说明：** <br>DNComponentRev 函数返回从右边起（末尾）的指定 DN 组件的值。\n \n**语法：** <br> `str DNComponentRev(ref dn, num ComponentNumber)` <br> `str DNComponentRev(ref dn, num ComponentNumber, enum Options)`\n\n- dn：要解释的引用属性\n- ComponentNumber - 要返回的 DN 中的组件\n- Options：DC – 忽略具有“dc=”的所有组件\n \n**示例：** <br> `If dn is “cn=Joe,ou=Atlanta,ou=GA,ou=US, dc=contoso,dc=com” then DNComponentRev([dn],3)` <br> `DNComponentRev([dn],1,”DC”)` <br>两者都返回 US。\n \n \n\n\n----------\n### <a name=\"error\"></a>错误\n\n**说明：** <br>Error 函数用于返回自定义错误。\n \n**语法：** <br> `void Error(str ErrorMessage)`\n \n**示例：** <br> `IIF(IsPresent([accountName]),[accountName],Error(“AccountName is required”))` <br>如果属性 accountName 不存在，则对象上引发错误。\n \n \n\n\n----------\n### <a name=\"escapedncomponent\"></a>EscapeDNComponent\n\n**说明：** <br>EscapeDNComponent 函数使用 DN 的一个组件，并对其进行转义，以便它可以在 LDAP 中表示。\n \n**语法：** <br> `str EscapeDNComponent(str value)`\n \n**示例：** <br> `EscapeDNComponent(“cn=” & [displayName]) & “,” & %ForestLDAP%` <br>即使 displayName 属性具有必须在 LDAP 中转义的字符，请确保可以在 LDAP 目录中创建对象。\n \n \n\n\n----------\n### <a name=\"formatdatetime\"></a>FormatDateTime\n\n**说明：** <br>FormatDateTime 函数用于为具有指定格式的字符串设置 DateTime 格式\n \n**语法：** <br> `str FormatDateTime(dt value, str format)`\n\n- value：DateTime 格式的值 <br>\n- format：表示要转换为的格式的字符串。\n \n**备注：** <br>格式的可能值可以在此处找到：[用户定义的日期/时间格式（格式函数）](http://msdn2.microsoft.com/library/73ctwf33(VS.90).aspx)\n \n**示例：** <br>\n \n`FormatDateTime(CDate(“12/25/2007”),”yyyy-mm-dd”)` <br> 结果是“2007-12-25”。\n\n`FormatDateTime(DateFromNum([pwdLastSet]),”yyyyMMddHHmmss.0Z”)` <br> 结果可能是“20140905081453.0Z”\n \n \n\n\n----------\n### <a name=\"guid\"></a>GUID\n\n**说明：** <br>函数 GUID 生成新的随机 GUID\n \n**语法：** <br> `str GUID()`\n \n\n\n\n----------\n### <a name=\"iif\"></a>IIF\n\n**说明：** <br>IIF 函数基于指定的条件返回一组可能值中的其中一个值。\n \n**语法：** <br> `var IIF(exp condition, var valueIfTrue, var valueIfFalse)`\n\n- condition：计算结果可能为 true 或 false 的任何值或表达式。\n- valueIfTrue：如果条件计算结果为 true，则返回的值。\n- valueIfFalse：如果条件计算结果为 false，则返回的值。\n\n**示例：** <br> `IIF([employeeType]=“Intern”,”t-“&[alias],[alias])` <br>如果用户是实习生，则返回用户的别名，同时将“t-”添加到其开头，否则按原样返回用户的别名。\n \n \n\n\n----------\n### <a name=\"instr\"></a>InStr\n\n**说明：** <br>InStr 函数查找字符串中第一次出现的子字符串\n \n**语法：** <br>\n \n`num InStr(str stringcheck, str stringmatch)` <br> `num InStr(str stringcheck, str stringmatch, num start)` <br> `num InStr(str stringcheck, str stringmatch, num start , enum compare)`\n\n- stringcheck：要搜索的字符串 <br>\n- stringmatch：要查找的字符串 <br>\n- start：查找子字符串的起始位置 <br>\n- compare：vbTextCompare 或 vbBinaryCompare\n \n**备注：** <br>返回其中已找到子字符串的位置，如果未找到，则返回 0。\n\n**示例：** <br> `InStr(\"The quick brown fox\",\"quick\")` <br>计算结果为 5\n\n`InStr(\"repEated\",\"e\",3,vbBinaryCompare)` <br>计算结果为 7\n \n \n\n\n----------\n### <a name=\"instrrev\"></a>InStrRev\n\n**说明：** <br>InStrRev 函数查找字符串中最后一次出现的子字符串\n \n**语法：** <br> `num InstrRev(str stringcheck, str stringmatch)` <br> `num InstrRev(str stringcheck, str stringmatch, num start)` <br> `num InstrRev(str stringcheck, str stringmatch, num start, enum compare)`\n\n- stringcheck：要搜索的字符串 <br>\n- stringmatch：要查找的字符串 <br>\n- start：查找子字符串的起始位置 <br>\n- compare：vbTextCompare 或 vbBinaryCompare\n\n**备注：** <br>返回其中已找到子字符串的位置，如果未找到，则返回 0。\n\n**示例：** <br> `InStrRev(\"abbcdbbbef\",\"bb\")` <br>返回 7\n \n \n\n\n----------\n### <a name=\"isbitset\"></a>IsBitSet\n\n**说明：** <br>函数 IsBitSet 测试是否设置了位\n \n**语法：** <br> `bool IsBitSet(num value, num flag)`\n\n- value：计算的数字值。标志：表示具有要计算的位的数字值\n \n**示例：** <br> `IsBitSet(&HF,4)` <br>返回 True，因为位“4”在十六进制值“F”中设置\n \n\n\n\n----------\n### <a name=\"isdate\"></a>IsDate\n\n**说明：** <br>如果表达式可以计算为 DateTime 类型，则 IsDate 函数计算结果为 True。\n \n**语法：** <br> `bool IsDate(var Expression)`\n \n**备注：** <br>用来确定 CDate() 是否会成功。\n \n\n\n\n----------\n### <a name=\"isempty\"></a>IsEmpty\n\n**说明：** <br>如果属性是出现在 CS 或 MV 中，但计算结果为空字符串，则 IsEmpty 函数计算结果为 True。\n \n**语法：** <br> `bool IsEmpty(var Expression)`\n \n\n\n\n----------\n### <a name=\"isguid\"></a>IsGuid\n\n**说明：** <br>如果字符串可以转换为 GUID，则 IsGuid 函数计算结果为 true。\n \n**语法：** <br> `bool IsGuid(str GUID)`\n \n**备注：** <br>GUID 定义为遵循以下其中一种模式的字符串：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 或 {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\n\n用来确定 CGuid() 是否会成功。\n \n**示例：** <br> `IIF(IsGuid([strAttribute]),CGuid([strAttribute]),NULL)` <br>如果 StrAttribute 具有 GUID 格式，则返回二进制表示形式，否则返回 Null。\n \n \n\n\n----------\n### <a name=\"isnull\"></a>IsNull\n\n**说明：** <br>如果表达式的计算结果为 Null，则 IsNull 函数返回 true。\n \n**语法：** <br> `bool IsNull(var Expression)`\n \n**备注：** <br>对于属性，Null 表示缺少属性。\n \n**示例：** <br> `IsNull([displayName])` <br>如果属性没有在 CS 或 MV 中出现，则返回 True。\n \n \n\n\n----------\n### <a name=\"bitand\"></a>IsNullOrEmpty\n\n**说明：** <br>如果表达式为 null 或空字符串，则 IsNullOrEmpty 函数返回 true。\n \n**语法：** <br> `bool IsNullOrEmpty(var Expression)`\n \n**备注：** <br>对于属性，如果属性不存在，或存在但为空字符串，此语法计算结果则为 True。<br> 此函数的逆函数被命名为 IsPresent。\n \n**示例：** <br> `IsNull([displayName])` <br>如果属性在 CS 或 MV 中没有出现或为空字符串，则返回 True。\n \n \n\n\n----------\n### <a name=\"isnullorempty\"></a>IsNumeric\n\n**说明：** <br>IsNumeric 函数返回布尔值，该值指示表达式是否可以计算为数字类型。\n \n**语法：** <br> `bool IsNumeric(var Expression)`\n \n**备注：** <br>用来确定 CNum() 是否会成功地分析表达式。\n\n\n\n\n----------\n### <a name=\"isstring\"></a>IsString\n\n**说明：** <br>如果表达式可以计算为字符串类型，则 IsString 函数计算结果为 True。\n \n**语法：** <br> `bool IsString(var expression)`\n \n**备注：** <br>用来确定 CStr() 是否会成功地分析表达式。\n \n\n\n\n----------\n### <a name=\"ispresent\"></a>IsPresent\n\n**说明：** <br>如果表达式的计算结果为字符串，该字符串不是 Null 且不为空，则 IsPresent 函数返回 true。\n \n**语法：** <br> `bool IsPresent(var expression)`\n \n**备注：** <br>此函数的逆函数被命名为 IsNullOrEmpty。\n \n**示例：** <br>\n \n`Switch(IsPresent([directManager]),[directManager], IsPresent([skiplevelManager]),[skiplevelManager], IsPresent([director]),[director])`\n  \n\n\n\n----------\n### <a name=\"item\"></a>项目\n\n**说明：** <br>Item 函数返回多值字符串/属性中的一个项。\n \n**语法：** <br> `var Item(mvstr attribute, num index)`\n\n- attribute：多值属性 <br>\n- index：对多值字符串中某个项的索引。\n \n**备注：** <br>Item 函数与 Contains 函数一起使用很有用，因为后者函数会返回对多值属性中某个项的索引。\n\n如果索引超出界限，则引发错误。\n \n**示例：** <br> `Mid(Item([proxyAddress],Contains([proxyAddress], ”SMTP:”)),6)` <br>返回主电子邮件地址。\n \n \n\n\n----------\n### <a name=\"itemornull\"></a>ItemOrNull\n\n**说明：** <br>ItemOrNull 函数返回多值字符串/属性中的一个项。\n \n**语法：** <br> `var ItemOrNull(mvstr attribute, num index)`\n\n- attribute：多值属性 <br>\n- index：对多值字符串中某个项的索引。\n \n**备注：** <br>ItemOrNull 函数与 Contains 函数一起使用很有用，因为后者函数会返回对多值属性中某个项的索引。\n\n如果索引超出界限，则返回 Null 值。\n \n\n\n\n----------\n### <a name=\"join\"></a>Join\n\n**说明：** <br>Join 函数使用多值字符串，并返回每个项之间插入指定分隔符的单值字符串。\n \n**语法：** <br> `str Join(mvstr attribute)` <br> `str Join(mvstr attribute, str Delimiter)`\n\n- attribute：包含要联接的字符串的多值属性。 <br>\n- delimiter：任意字符串，用于分隔返回的字符串中的子字符串。如果省略，则使用空格字符（“ ”）。如果分隔符为零长度字符串（“”）或零，则列表中的所有项都不使用分隔符连接。\n \n**备注**<br>Join 和 Split 函数之间没有奇偶校验。Join 函数使用字符串数组，并使用分隔符字符串将它们联接起来，以返回单个字符串。Split 函数使用字符串并以分隔符分隔，以返回字符串数组。但是，主要区别是 Join 可以使用任何分隔符字符串将字符串连接起来，而 Split 仅可以使用单个字符分隔符分隔字符串。\n \n**示例：** <br> `Join([proxyAddresses],”,”)` <br>可能返回：“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”\n \n \n\n\n----------\n### <a name=\"lcase\"></a>LCase\n\n**说明：** <br>LCase 函数将字符串中的所有字符都转换为小写。\n \n**语法：** <br> `str LCase(str value)`\n \n**示例：** <br> `LCase(“TeSt”)` <br>返回 “test”。\n \n \n\n\n----------\n### <a name=\"left\"></a>Left\n\n**说明：** <br>Left 函数从字符串左侧起返回指定的字符数。\n \n**语法：** <br> `str Left(str string, num NumChars)`\n\n- string：从中返回字符的字符串 <br>\n- NumChar：标识从字符串开头（左侧）起返回的字符数的数字\n \n**备注：** <br>包含字符串中第一个 numChar 字符的字符串：\n\n- 如果 numChar = 0，则返回空字符串。\n- 如果 numChar < 0，则返回输入字符串。\n- 如果字符串为 null，则返回空字符串。\n\n如果字符串包含的字符数比 numChar 中指定的数量少，则返回与该字符串相同的字符串（即：包含参数 1 中的所有字符）。\n \n**示例：** <br> `Left(“John Doe”, 3)` <br>返回 “Joh”。\n \n\n\n\n----------\n### <a name=\"len\"></a>Len\n\n**说明：** <br>Len 函数返回字符串中的字符数。\n \n**语法：** <br> `num Len(str value)`\n \n**示例：** <br> `Len(“John Doe”)` <br>返回 8\n \n\n\n\n----------\n### <a name=\"ltrim\"></a>LTrim\n\n**说明：** <br>LTrim 函数从字符串中删除前导空格。\n \n**语法：** <br> `str LTrim(str value)`\n \n**示例：** <br> `LTrim(“ Test ”)` <br>返回 “Test”\n \n \n\n\n----------\n### <a name=\"mid\"></a>Mid\n\n**说明：** <br>Mid 函数从字符串指定位置起返回指定的字符数。\n \n**语法：** <br> `str Mid(str string, num start, num NumChars)`\n\n- string：从中返回字符的字符串 <br>\n- start：标识从中返回字符的字符串中起始位置的数字\n- NumChar：标识从字符串中的位置返回的字符数的数字\n \n\n**备注：** <br>从字符串中的开始位置开始返回 numChar 字符。<br> 包含字符串中开始位置的 numChar 字符的字符串：\n\n- 如果 numChar = 0，则返回空字符串。\n- 如果 numChar < 0，则返回输入字符串。\n- 如果 start > 字符串的长度，则返回输入字符串。\n- 如果 start <= 0，则返回输入字符串。\n- 如果字符串为 null，则返回空字符串。\n\n如果字符串中开始位置没有保留的 numChar 字符，则会返回尽可能多可以返回的字符。\n \n**示例：** <br>\n \n`Mid(“John Doe”, 3, 5)` <br>返回 “hn Do”。\n\n`Mid(“John Doe”, 6, 999)` <br>返回 “Doe”。\n \n \n\n\n----------\n### <a name=\"now\"></a>Now\n\n**说明：** <br>Now 函数根据计算机的系统日期和时间返回指定当前日期和时间的 DateTime。\n \n**语法：** <br> `dt Now()`\n \n\n\n\n----------\n### <a name=\"numfromdate\"></a>NumFromDate\n\n**说明：** <br>NumFromDate 函数返回 AD 的日期格式的日期。\n \n**语法：** <br> `num NumFromDate(dt value)`\n \n\n**示例：** <br> `NumFromDate(CDate(\"2012-01-01 23:00:00\"))` <br>返回 129699324000000000\n \n \n\n\n----------\n### <a name=\"padleft\"></a>PadLeft\n\n**说明：** <br>PadLeft 函数使用提供的填充字符将字符串从左侧填充到指定长度。\n \n**语法：** <br> `str PadLeft(str string, num length, str padCharacter)`\n\n- string：要填充的字符串。 <br>\n- length：表示所需字符串长度的整数。 <br>\n- padCharacter：包含用作填充字符的单个字符的字符串\n \n\n\n----------\n### 备注 \n \n- 如果字符串的长度小于 length，则 padCharacter 会重复追加到字符串的开头（左侧），直到其长度等于 length。\n- PadCharacter 可以是空格字符，但不能为 null 值。\n- 如果字符串的长度等于或大于 length，则返回不变的字符串。\n- 如果字符串的长度大于或等于 length，则返回与 string 相同的字符串。\n- 如果字符串的长度小于 length，则返回具有所需长度的新字符串，其中包含用 padCharacter 填充的字符串。\n- 如果字符串为 null，该函数则返回空字符串。\n\n**示例：** <br> `PadLeft(“User”, 10, “0”)` <br>返回 “000000User”。\n \n \n\n\n----------\n### <a name=\"padright\"></a>PadRight\n\n**说明：** <br>PadRight 函数使用提供的填充字符将字符串从右侧填充到指定长度。\n \n**语法：** <br> `str PadRight(str string, num length, str padCharacter)`\n\n- string：要填充的字符串。 \n- length：表示所需字符串长度的整数。\n- padCharacter：包含用作填充字符的单个字符的字符串\n \n**备注：**\n \n- 如果字符串的长度小于 length，则 padCharacter 会重复追加到字符串的末尾（右侧），直到其长度等于 length。\n- padCharacter 可以是空格字符，但不能为 null 值。\n- 如果字符串的长度等于或大于 length，则返回不变的字符串。\n- 如果字符串的长度大于或等于 length，则返回与 string 相同的字符串。\n- 如果字符串的长度小于 length，则返回具有所需长度的新字符串，其中包含用 padCharacter 填充的字符串。\n- 如果字符串为 null，该函数则返回空字符串。\n \n\n**示例：** <br> `PadRight(“User”, 10, “0”)` <br>返回 “User000000”。\n \n \n\n\n----------\n### <a name=\"pcase\"></a>PCase\n\n**说明：** <br>PCase 函数将字符串中每个空格分隔词的第一个字符转换为大写形式，并将所有其他字符都转换为小写形式。\n \n**语法：** <br> `String PCase(string)`\n \n**示例：** <br> `PCase(“TEsT”)` <br>返回 “Test”。\n \n \n\n\n----------\n### <a name=\"randomnum\"></a>RandomNum\n\n**说明：** <br>RandomNum 函数返回指定间隔之间的随机数字。\n \n**语法：** <br> `num RandomNum(num start, num end)`\n\n- start：标识要生成的随机值的下限的数字 <br>\n- end：标识要生成的随机值的上限的数字\n \n**示例：** <br> `Random(100,999)` <br>返回 734。\n \n \n\n\n----------\n### <a name=\"removeduplicates\"></a>RemoveDuplicates\n\n**说明：** <br>RemoveDuplicates 函数使用多值字符串，并确保每个值都是唯一值。\n \n**语法：** <br> `mvstr RemoveDuplicates(mvstr attribute)`\n \n**示例：** <br> `RemoveDuplicates([proxyAddresses])` <br>返回净化的 proxyAddress 属性，其中所有重复值已被删除。\n \n \n\n\n----------\n### <a name=\"replace\"></a>Replace\n\n**说明：** <br>Replace 函数将所有出现的某一字符串替换为另一个字符串。\n \n**语法：** <br> `str Replace(str string, str OldValue, str NewValue)`\n\n- string：替换其中的值的字符串。 <br>\n- OldValue：要搜索和替换的字符串。 <br>\n- NewValue：要替换的字符串。\n \n\n**备注：** <br>该函数可以识别以下特殊 moniker:\n\n- \\\\n – 新行 \n- \\\\r – 回车符\n- \\\\t – 选项卡\n \n\n**示例：** <br>\n \n`Replace([address],”\\r\\n”,”, “)` <br>将 CRLF 替换为逗号和空格，可能导致出现“One Microsoft Way, Redmond, WA, USA”\n \n \n\n\n----------\n### <a name=\"replacechars\"></a>ReplaceChars\n\n**说明：** <br>ReplaceChars 函数替换 ReplacePattern 字符串中找到的所有出现的字符。\n\n**语法：** <br> `str ReplaceChars(str string, str ReplacePattern)`\n\n- string：替换其中值的字符串。\n- ReplacePattern：包含具有要替换字符的字典的字符串。 \n \n格式为 {source1}:{target1},{source2}:{target2},{sourceN},{targetN}，其中源是要查找并确定要替换的目标字符串的字符。\n \n\n**备注：**\n \n- 该函数使用每次出现的定义的源，并使用目标替换它们。 \n- 源必须正好是一个 (unicode) 字符。 \n- 源不能为空或长度超过一个字符（分析错误）。\n- 目标可以具有多个字符，例如 ö:oe、β:ss。\n- 目标可以为空，该值指示应删除字符。 \n- 源区分大小写，并且必须是完全匹配。\n- 逗号 (,) 和冒号 (:) 是保留的字符，不能使用此函数进行替换。 \n- 空格和 ReplacePattern 字符串中的其他空白字符被忽略。\n \n\n**示例：** <br>'%ReplaceString% = ’:,Å:A,Ä:A,Ö:O,å:a,ä:a,ö,o'\n\n`ReplaceChars(”Räksmörgås”,%ReplaceString%)` <br> 返回 Raksmorgas\n\n`ReplaceChars(“O’Neil”,%ReplaceString%)` <br> 返回 “ONeil”，定义要删除单次勾选。\n \n\n\n\n----------\n### <a name=\"right\"></a>Right\n\n**说明：** <br>Right 函数从字符串右侧（末尾）起返回指定的字符数。\n \n**语法：** <br> `str Right(str string, num NumChars)`\n\n- string：从中返回字符的字符串 \n- NumChar：标识从字符串末尾（右侧）起返回的字符数的数字\n \n**备注：** <br>NumChar 字符从字符串的最后位置返回。\n\n包含字符串中最后的 numChar 字符的字符串：\n\n- 如果 numChar = 0，则返回空字符串。\n- 如果 numChar < 0，则返回输入字符串。\n- 如果字符串为 null，则返回空字符串。\n\n如果字符串包含的字符数比 NumChar 中指定的数量少，则返回与该字符串相同的字符串。\n\n**示例：** <br> `Right(“John Doe”, 3)` <br>返回 “Doe”。\n \n\n\n\n----------\n### <a name=\"rtrim\"></a>RTrim\n\n**说明：** <br>RTrim 函数从字符串中删除尾随空格。\n \n**语法：** <br> `str RTrim(str value)`\n\n**示例：** <br> `RTrim(“ Test ”)` <br>返回 “Test”。\n\n\n\n\n----------\n### <a name=\"split\"></a>拆分\n\n**说明：** <br>Split 函数使用采用分隔符分隔的字符串，并使其成为多值字符串。\n \n\n**语法：** <br> `mvstr Split(str value, str delimiter)` <br? `mvstr Split(str value, str delimiter, num limit)`\n\n- value：用分隔符字符来分隔的字符串。\n- delimiter：用作分隔符的单个字符。 \n- limit：将返回的最大数目的值。\n \n**示例：** <br> `Split(“SMTP:john.doe@contoso.com,smtp:jd@contoso.com”,”,”)` <br>返回多值字符串，其中两个元素对 proxyAddress 属性有用\n \n\n\n\n----------\n### <a name=\"StringFromGuid\"></a>StringFromGuid\n\n**说明：** <br>StringFromGuid 函数使用二进制 GUID，并将其转换为字符串\n \n**语法：** <br> `str StringFromGuid(bin GUID)`\n \n\n\n\n----------\n### <a name=\"stringfromsid\"></a>StringFromSid\n\n**说明：** <br>StringFromSid 函数将字节数组或包含安全标识符的多值字节数组转换为字符串或多值字符串。\n \n**语法：** <br> `str StringFromSid(bin ObjectSID)` <br> `mvstr StringFromSid(mvbin ObjectSID)`\n \n\n\n\n----------\n### <a name=\"switch\"></a>Switch\n\n**说明：** <br>Switch 函数用于基于计算的条件返回单个值。\n\n**语法：** <br> `var Switch(exp expr1, var value1[, exp expr2, var value … [, exp expr, var valueN]])`\n\n- expr：想要计算结果的变体表达式。 \n- value：当相应表达式为 True 时要返回的值。\n \n**备注：** <br>Switch 函数参数列表包含表达式和值对。表达式从左到右计算结果，并返回与计算结果为 True 的第一个表达式相关联的值。如果没有正确配对部件，则会发生运行时错误。\n\n例如，如果 expr1 为 True，则 Switch 返回 value1。如果 expr-1 为 False，但 expr-2 为 True，则 Switch 返回 value-2，依此类推。\n\n如果表达式均不为 True，第一个 True 表达式中相应值为 Null，则 Switch 返回零。\n\nSwitch 会对所有表达式计算结果，即使它只返回其中一个结果。为此，你应监视非预期的负面影响。例如，如果任何表达式的计算结果导致除数为零的错误，则会出现错误。\n\n值还可以是将返回自定义字符串的错误函数。\n\n**示例：** <br> `Switch([city] = \"London\", \"English\", [city] = \"Rome\", \"Italian\", [city] = \"Paris\", \"French\", True, Error(“Unknown city”))` <br>返回某些主要城市所使用的语言，否则返回错误。\n\n\n\n\n----------\n### <a name=\"trim\"></a>Trim\n\n**说明：** <br>Trim 函数从字符串中删除前导空格和尾随空格。\n \n**语法：** <br> `str Trim(str value)` <br> `mvstr Trim(mvstr value)`\n \n**示例：** <br> `Trim(“ Test ”)` <br>返回 “Test”。\n\n`Trim([proxyAddresses])` <br>删除 proxyAddress 属性中每个值的前导空格和尾随空格。\n\n\n\n\n----------\n### <a name=\"ucase\"></a>UCase\n\n**说明：** <br>UCase 函数将字符串中的所有字符都转换为大写形式。\n\n**语法：** <br> `str UCase(str string)`\n \n**示例：** <br> `UCase(“TeSt”)` <br>返回 “TEST”。\n \n \n\n\n----------\n### <a name=\"word\"></a>Word\n\n**说明：** <br>基于描述要使用的分隔符与要返回的单词数的参数，Word 函数返回字符串中包含的单词。\n \n**语法：** <br> `str Word(str string, num WordNumber, str delimiters)`\n\n- string：从中返回单词的字符串。\n- WordNumber：标识应返回单词数的数字。 \n- delimiter：表示应该用于标识单词的分隔符的字符串\n \n**备注：** <br>字符串中的字符由分隔符中其中一个字符分隔的每个字符串被标识为单词：\n\n- 如果数字 < 1，则返回空字符串。\n- 如果字符串为 null，则返回空字符串。\n\n如果字符串包含的单词少于应返回数字或字符串不包含由分隔符标识的任何单词，则返回空字符串。\n \n\n**示例：** <br> `Word(“The quick brown fox”,3,” “)` <br>返回 “brown”。\n\n`Word(“This,string!has&many seperators”,3,”,!&#”)` <br>会返回 “has”\n\n\n## 其他资源\n\n* [了解声明性设置表达式](/documentation/articles/active-directory-aadconnectsync-understanding-declarative-provisioning-expressions)\n* [Azure AD Connect Sync：自定义同步选项](/documentation/articles/active-directory-aadconnectsync-whatis)\n* [将本地标识与 Azure Active Directory 集成](/documentation/articles/active-directory-aadconnect)\n \n \n<!--Image references-->\n\n<!---HONumber=71-->"
}