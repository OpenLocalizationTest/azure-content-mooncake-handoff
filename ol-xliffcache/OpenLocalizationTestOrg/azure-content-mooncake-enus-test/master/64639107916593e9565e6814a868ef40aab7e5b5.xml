{
  "nodes": [
    {
      "content": "如何通过 Node.js 使用队列存储 | Azure",
      "pos": [
        28,
        55
      ]
    },
    {
      "content": "了解如何使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。相关示例是使用 Node.js 编写的。",
      "pos": [
        75,
        133
      ]
    },
    {
      "content": "如何通过 Node.js 使用队列存储",
      "pos": [
        353,
        372
      ]
    },
    {
      "content": "概述",
      "pos": [
        474,
        476
      ]
    },
    {
      "content": "本指南将演示如何使用 Azure 队列服务执行常见方案。相关示例是使用 Node.js API 编写的。介绍的方案包括“插入”、“扫视”、“获取”和“删除”队列消息以及“创建”和“删除”队列。",
      "pos": [
        478,
        574
      ]
    },
    {
      "content": "创建 Node.js 应用程序",
      "pos": [
        773,
        788
      ]
    },
    {
      "pos": [
        790,
        948
      ],
      "content": "创建一个空的 Node.js 应用程序。有关创建 Node.js 应用程序的说明，请参阅 <bpt id=\"p1\">[</bpt><ept id=\"p1\">创建 Node.js 应用程序并将其部署到 Azure Web 应用]</ept>、<bpt id=\"p2\">[</bpt>Node.js 云服务<ept id=\"p2\">][Node.js 云服务]</ept>（使用 Windows PowerShell）或 <bpt id=\"p3\">[</bpt><ept id=\"p3\">使用 WebMatrix 构建 Web 应用]</ept>。"
    },
    {
      "content": "配置应用程序以访问存储",
      "pos": [
        953,
        964
      ]
    },
    {
      "content": "若要使用 Azure 存储空间，你需要 Azure Storage SDK for Node.js，其中包括一组便于与存储 REST 服务进行通信的库。",
      "pos": [
        966,
        1042
      ]
    },
    {
      "content": "使用 Node 包管理器 (NPM) 可获取该程序包",
      "pos": [
        1048,
        1074
      ]
    },
    {
      "pos": [
        1080,
        1172
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows)、<bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac) 或 <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix) 等命令行界面导航到您在其中创建了示例应用程序的文件夹。"
    },
    {
      "pos": [
        1178,
        1231
      ],
      "content": "在命令窗口中键入 <bpt id=\"p1\">**</bpt>npm install azure-storage<ept id=\"p1\">**</ept>。该命令的输出类似于以下示例。"
    },
    {
      "pos": [
        1944,
        2050
      ],
      "content": "可以手动运行 **ls** 命令来验证是否创建了\n**node_modules** 文件夹。在该文件夹中，你会\n找到 **azure-storage** 包，其中包含你访问\n存储所需的库。",
      "leadings": [
        "",
        "    ",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "可以手动运行 <bpt id=\"p1\">**</bpt>ls<ept id=\"p1\">**</ept> 命令来验证是否创建了",
          "pos": [
            0,
            24
          ]
        },
        {
          "content": "<bpt id=\"p1\">**</bpt>node_modules<ept id=\"p1\">**</ept> 文件夹。在该文件夹中，你会",
          "pos": [
            25,
            55
          ]
        },
        {
          "content": "找到 <bpt id=\"p1\">**</bpt>azure-storage<ept id=\"p1\">**</ept> 包，其中包含你访问",
          "pos": [
            56,
            86
          ]
        },
        {
          "content": "存储所需的库。",
          "pos": [
            87,
            94
          ]
        }
      ]
    },
    {
      "content": "导入包",
      "pos": [
        2056,
        2059
      ]
    },
    {
      "content": "使用记事本或其他文本编辑器将以下内容添加到应用程序的",
      "pos": [
        2061,
        2087
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> 文件的顶部，以便在其中使用存储：",
      "pos": [
        2088,
        2118
      ]
    },
    {
      "content": "设置 Azure 存储连接",
      "pos": [
        2166,
        2179
      ]
    },
    {
      "pos": [
        2181,
        2355
      ],
      "content": "Azure 模块将读取环境变量 AZURE_STORAGE_ACCOUNT 和 AZURE_STORAGE_ACCESS_KEY 或 AZURE_STORAGE_CONNECTION_STRING 以获取连接到您的 Azure 存储帐户所需的信息。如果未设置这些环境变量，则在调用 <bpt id=\"p1\">**</bpt>createQueueService<ept id=\"p1\">**</ept> 时必须指定帐户信息。"
    },
    {
      "pos": [
        2357,
        2415
      ],
      "content": "有关在管理门户中为 Azure Web 应用设置环境变量的示例，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用存储构建 Node.js Web 应用]</ept>"
    },
    {
      "content": "如何：创建队列",
      "pos": [
        2420,
        2427
      ]
    },
    {
      "pos": [
        2429,
        2472
      ],
      "content": "以下代码将创建一个 <bpt id=\"p1\">**</bpt>QueueService<ept id=\"p1\">**</ept> 对象，您可通过该对象来操作队列。"
    },
    {
      "pos": [
        2522,
        2596
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>createQueueIfNotExists<ept id=\"p1\">**</ept> 方法，该方法将返回指定队列（如果它存在），或创建具有指定名称的新队列（如果它尚不存在）。"
    },
    {
      "pos": [
        2750,
        2803
      ],
      "content": "如果创建了队列，则 <ph id=\"ph1\">`result`</ph> 为 true。如果队列已存在，则 <ph id=\"ph2\">`result`</ph> 为 false。"
    },
    {
      "content": "筛选器",
      "pos": [
        2809,
        2812
      ]
    },
    {
      "pos": [
        2814,
        2887
      ],
      "content": "可以向使用 <bpt id=\"p1\">**</bpt>QueueService<ept id=\"p1\">**</ept> 执行的操作应用可选的筛选操作。筛选操作可包括日志记录、自动重试等。筛选器是实现具有签名的方法的对象："
    },
    {
      "content": "在对请求选项执行预处理后，该方法需要调用“next”并且传递具有以下签名的回调：",
      "pos": [
        2937,
        2977
      ]
    },
    {
      "content": "在此回调中并且在处理 returnObject（来自对服务器请求的响应）后，回调需要调用 next（如果它存在以便继续处理其他筛选器）或只调用 finalCallback 以便结束服务调用。",
      "pos": [
        3033,
        3128
      ]
    },
    {
      "pos": [
        3130,
        3307
      ],
      "content": "Azure SDK for Node.js 中附带了两个实现了重试逻辑的筛选器，分别是 <bpt id=\"p1\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>LinearRetryPolicyFilter<ept id=\"p2\">**</ept>。下面的代码将创建一个 <bpt id=\"p3\">**</bpt>QueueService<ept id=\"p3\">**</ept> 对象，该对象使用 <bpt id=\"p4\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p4\">**</ept>："
    },
    {
      "content": "如何：在队列中插入消息",
      "pos": [
        3456,
        3467
      ]
    },
    {
      "pos": [
        3469,
        3521
      ],
      "content": "若要在队列中插入消息，可使用 <bpt id=\"p1\">**</bpt>createMessage<ept id=\"p1\">**</ept> 方法创建一条新消息并将其添加到队列中。"
    },
    {
      "content": "如何：扫视下一条消息",
      "pos": [
        3678,
        3688
      ]
    },
    {
      "content": "通过调用 peekMessages 方法，可以查看队列前面的消息，而不必从队列中将其删除。默认情况下，",
      "pos": [
        3690,
        3741
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>peekMessages<ept id=\"p1\">**</ept> 查看单个消息。",
      "pos": [
        3742,
        3766
      ]
    },
    {
      "pos": [
        3929,
        3944
      ],
      "content": "<ph id=\"ph1\">`result`</ph> 包含该消息。"
    },
    {
      "pos": [
        3948,
        4006
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 在队列中没有消息时使用 <bpt id=\"p1\">**</bpt>peekMessages<ept id=\"p1\">**</ept> 不会返回错误，但也不会返回消息。"
    },
    {
      "content": "如何：取消对下一条消息的排队",
      "pos": [
        4011,
        4025
      ]
    },
    {
      "content": "处理消息是一个两阶段过程：",
      "pos": [
        4027,
        4040
      ]
    },
    {
      "content": "取消消息的排队。",
      "pos": [
        4045,
        4053
      ]
    },
    {
      "content": "删除该消息。",
      "pos": [
        4058,
        4064
      ]
    },
    {
      "pos": [
        4066,
        4190
      ],
      "content": "若要取消消息的排队，请使用 <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept>。这会使消息在队列中不可见，因此其他客户端无法处理它们。一旦应用程序处理完某个消息，即可调用 <bpt id=\"p2\">**</bpt>deleteMessage<ept id=\"p2\">**</ept> 将其从队列中删除。下面的示例获取了一条消息，然后又将其删除："
    },
    {
      "pos": [
        4571,
        4682
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 默认情况下，一条消息只会隐藏 30 秒，然后其他客户端就可以看见它。您可以将 <ph id=\"ph2\">`options.visibilityTimeout`</ph> 与 <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept> 一起使用，以便指定其他值。"
    },
    {
      "pos": [
        4686,
        4743
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 在队列中没有消息时使用 <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept> 不会返回错误，但也不会返回消息。"
    },
    {
      "content": "如何：更改已排队消息的内容",
      "pos": [
        4748,
        4761
      ]
    },
    {
      "pos": [
        4763,
        4817
      ],
      "content": "您可以更改队列中现有消息的内容，只需使用 <bpt id=\"p1\">**</bpt>updateMessage<ept id=\"p1\">**</ept> 即可。以下示例将更新消息文本："
    },
    {
      "content": "如何：用于对消息取消排队的其他选项",
      "pos": [
        5225,
        5242
      ]
    },
    {
      "content": "你可以通过两种方式自定义队列中的消息检索：",
      "pos": [
        5244,
        5265
      ]
    },
    {
      "pos": [
        5269,
        5314
      ],
      "content": "<ph id=\"ph1\">`options.numOfMessages`</ph> - 您可以获取一批消息（最多 32 条）。"
    },
    {
      "pos": [
        5317,
        5362
      ],
      "content": "<ph id=\"ph1\">`options.visibilityTimeout`</ph> - 设置较长或较短的不可见性超时。"
    },
    {
      "pos": [
        5364,
        5457
      ],
      "content": "以下示例使用 <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept> 方法通过一次调用获取 15 条消息。然后，它会使用 for 循环处理每条消息。它还将通过此方法返回的所有消息的不可见性超时设置为 5 分钟。"
    },
    {
      "content": "如何：获取队列长度",
      "pos": [
        5984,
        5993
      ]
    },
    {
      "pos": [
        5995,
        6045
      ],
      "content": "<bpt id=\"p1\">**</bpt>getQueueMetadata<ept id=\"p1\">**</ept> 返回有关队列的元数据，其中包括队列中等待的消息的大致数目。"
    },
    {
      "content": "如何：列出队列",
      "pos": [
        6232,
        6239
      ]
    },
    {
      "pos": [
        6241,
        6332
      ],
      "content": "若要检索队列的列表，请使用 <bpt id=\"p1\">**</bpt>listQueuesSegmented<ept id=\"p1\">**</ept>。若要检索按特定前缀筛选的列表，请使用 <bpt id=\"p2\">**</bpt>listQueuesSegmentedWithPrefix<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        6497,
        6625
      ],
      "content": "如果无法返回所有队列，则可使用 <ph id=\"ph1\">`result.continuationToken`</ph> 作为 <bpt id=\"p1\">**</bpt>listQueuesSegmented<ept id=\"p1\">**</ept> 的第一个参数或 <bpt id=\"p2\">**</bpt>listQueuesSegmentedWithPrefix<ept id=\"p2\">**</ept> 的第二个参数，以便检索更多结果。"
    },
    {
      "content": "如何：删除队列",
      "pos": [
        6630,
        6637
      ]
    },
    {
      "pos": [
        6639,
        6684
      ],
      "content": "若要删除队列及其中包含的所有消息，请对队列对象调用 <bpt id=\"p1\">**</bpt>deleteQueue<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "pos": [
        6826,
        6869
      ],
      "content": "若要清除队列中的所有消息而不删除该队列，则可使用 <bpt id=\"p1\">**</bpt>clearMessages<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "如何：使用共享访问签名",
      "pos": [
        6874,
        6885
      ]
    },
    {
      "content": "共享访问签名 (SAS) 是一种安全的方法，用于对队列进行细致访问而无需提供你的存储帐户名或密钥。通常使用 SAS 来提供对你的队列的有限访问权限，例如允许移动应用程序提交消息。",
      "pos": [
        6887,
        6976
      ]
    },
    {
      "pos": [
        6978,
        7147
      ],
      "content": "受信任的应用程序（例如基于云的服务）可使用 <bpt id=\"p1\">**</bpt>QueueService<ept id=\"p1\">**</ept> 的 <bpt id=\"p2\">**</bpt>generateSharedAccessSignature<ept id=\"p2\">**</ept> 生成 SAS，然后将其提供给不受信任的或不完全受信任的应用程序。例如，移动应用程序。SAS 可使用策略生成，该策略描述了 SAS 的生效日期和失效日期，以及授予 SAS 持有者的访问级别。"
    },
    {
      "content": "下面的示例生成了一个新的共享访问策略，该策略将允许 SAS 持有者向队列添加消息，在创建后 100 分钟过期。",
      "pos": [
        7149,
        7204
      ]
    },
    {
      "content": "请注意，还必须提供主机信息，因为 SAS 持有者尝试访问队列时，必须提供该信息。",
      "pos": [
        7712,
        7752
      ]
    },
    {
      "pos": [
        7754,
        7828
      ],
      "content": "然后，客户端应用程序将 SAS 用于 <bpt id=\"p1\">**</bpt>QueueServiceWithSAS<ept id=\"p1\">**</ept>，以便针对队列执行操作。下面的示例连接到该队列，并创建一条消息。"
    },
    {
      "content": "由于 SAS 在生成时只具有添加访问权限，因此如果尝试读取、更新或删除消息，则会返回错误。",
      "pos": [
        8075,
        8120
      ]
    },
    {
      "content": "访问控制列表",
      "pos": [
        8126,
        8132
      ]
    },
    {
      "content": "你还可以使用访问控制列表 (ACL) 为 SAS 设置访问策略。如果你希望允许多个客户端访问某个队列，但为每个客户端提供了不同的访问策略，则访问控制列表会很有用。",
      "pos": [
        8134,
        8215
      ]
    },
    {
      "content": "ACL 是使用一组访问策略实施的，每个策略都有一个关联的 ID。下面的示例定义了两个策略，一个用于“user1”，一个用于“user2”：",
      "pos": [
        8217,
        8286
      ]
    },
    {
      "pos": [
        8734,
        8799
      ],
      "content": "下面的示例获取 <bpt id=\"p1\">**</bpt>myqueue<ept id=\"p1\">**</ept> 的当前 ACL，然后使用 <bpt id=\"p2\">**</bpt>setQueueAcl<ept id=\"p2\">**</ept> 添加新策略。此方法具有以下用途："
    },
    {
      "content": "设置 ACL 后，你可以根据某个策略的 ID 创建 SAS。以下示例为“user2”创建新的 SAS：",
      "pos": [
        9172,
        9223
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        9312,
        9316
      ]
    },
    {
      "content": "现在，您已了解有关队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。",
      "pos": [
        9318,
        9357
      ]
    },
    {
      "pos": [
        9363,
        9385
      ],
      "content": "访问 <bpt id=\"p1\">[</bpt>Azure 存储空间团队博客<ept id=\"p1\">][]</ept>。"
    },
    {
      "pos": [
        9390,
        9438
      ],
      "content": "访问 GitHub 上的 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Node<ept id=\"p1\">][]</ept> 存储库。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Node.js 使用队列存储 | Azure\" \n    description=\"了解如何使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。相关示例是使用 Node.js 编写的。\" \n    services=\"storage\" \n    documentationCenter=\"nodejs\" \n    authors=\"MikeWasson\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"12/01/2015\" \n    wacn.date=\"01/29/2016\"/>\n\n\n# 如何通过 Node.js 使用队列存储\n\n[AZURE.INCLUDE [storage-selector-queue-include](../includes/storage-selector-queue-include.md)]\n\n## 概述\n\n本指南将演示如何使用 Azure 队列服务执行常见方案。相关示例是使用 Node.js API 编写的。介绍的方案包括“插入”、“扫视”、“获取”和“删除”队列消息以及“创建”和“删除”队列。\n\n[AZURE.INCLUDE [storage-queue-concepts-include](../includes/storage-queue-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 Node.js 应用程序\n\n创建一个空的 Node.js 应用程序。有关创建 Node.js 应用程序的说明，请参阅 [创建 Node.js 应用程序并将其部署到 Azure Web 应用]、[Node.js 云服务][Node.js 云服务]（使用 Windows PowerShell）或 [使用 WebMatrix 构建 Web 应用]。\n\n## 配置应用程序以访问存储\n\n若要使用 Azure 存储空间，你需要 Azure Storage SDK for Node.js，其中包括一组便于与存储 REST 服务进行通信的库。\n\n### 使用 Node 包管理器 (NPM) 可获取该程序包\n\n1.  使用 **PowerShell** (Windows)、**Terminal** (Mac) 或 **Bash** (Unix) 等命令行界面导航到您在其中创建了示例应用程序的文件夹。\n\n2.  在命令窗口中键入 **npm install azure-storage**。该命令的输出类似于以下示例。\n\n        azure-storage@0.5.0 node_modules\\azure-storage\n        +-- extend@1.2.1\n        +-- xmlbuilder@0.4.3\n        +-- mime@1.2.11\n        +-- node-uuid@1.4.3\n        +-- validator@3.22.2\n        +-- underscore@1.4.4\n        +-- readable-stream@1.0.33 (string_decoder@0.10.31, isarray@0.0.1, inherits@2.0.1, core-util-is@1.0.1)\n        +-- xml2js@0.2.7 (sax@0.5.2)\n        +-- request@2.57.0 (caseless@0.10.0, aws-sign2@0.5.0, forever-agent@0.6.1, stringstream@0.0.4, oauth-sign@0.8.0, tunnel-agent@0.4.1, isstream@0.1.2, json-stringify-safe@5.0.1, bl@0.9.4, combined-stream@1.0.5, qs@3.1.0, mime-types@2.0.14, form-data@0.2.0, http-signature@0.11.0, tough-cookie@2.0.0, hawk@2.3.1, har-validator@1.8.0)\n\n3.  可以手动运行 **ls** 命令来验证是否创建了\n    **node_modules** 文件夹。在该文件夹中，你会\n    找到 **azure-storage** 包，其中包含你访问\n    存储所需的库。\n\n### 导入包\n\n使用记事本或其他文本编辑器将以下内容添加到应用程序的\n**server.js** 文件的顶部，以便在其中使用存储：\n\n    var azure = require('azure-storage');\n\n## 设置 Azure 存储连接\n\nAzure 模块将读取环境变量 AZURE_STORAGE_ACCOUNT 和 AZURE_STORAGE_ACCESS_KEY 或 AZURE_STORAGE_CONNECTION_STRING 以获取连接到您的 Azure 存储帐户所需的信息。如果未设置这些环境变量，则在调用 **createQueueService** 时必须指定帐户信息。\n\n有关在管理门户中为 Azure Web 应用设置环境变量的示例，请参阅[使用存储构建 Node.js Web 应用]\n\n## 如何：创建队列\n\n以下代码将创建一个 **QueueService** 对象，您可通过该对象来操作队列。\n\n    var queueSvc = azure.createQueueService();\n\n使用 **createQueueIfNotExists** 方法，该方法将返回指定队列（如果它存在），或创建具有指定名称的新队列（如果它尚不存在）。\n\n    queueSvc.createQueueIfNotExists('myqueue', function(error, result, response){\n      if(!error){\n        // Queue created or exists\n      }\n    });\n\n如果创建了队列，则 `result` 为 true。如果队列已存在，则 `result` 为 false。\n\n### 筛选器\n\n可以向使用 **QueueService** 执行的操作应用可选的筛选操作。筛选操作可包括日志记录、自动重试等。筛选器是实现具有签名的方法的对象：\n\n        function handle (requestOptions, next)\n\n在对请求选项执行预处理后，该方法需要调用“next”并且传递具有以下签名的回调：\n\n        function (returnObject, finalCallback, next)\n\n在此回调中并且在处理 returnObject（来自对服务器请求的响应）后，回调需要调用 next（如果它存在以便继续处理其他筛选器）或只调用 finalCallback 以便结束服务调用。\n\nAzure SDK for Node.js 中附带了两个实现了重试逻辑的筛选器，分别是 **ExponentialRetryPolicyFilter** 和 **LinearRetryPolicyFilter**。下面的代码将创建一个 **QueueService** 对象，该对象使用 **ExponentialRetryPolicyFilter**：\n\n    var retryOperations = new azure.ExponentialRetryPolicyFilter();\n    var queueSvc = azure.createQueueService().withFilter(retryOperations);\n\n## 如何：在队列中插入消息\n\n若要在队列中插入消息，可使用 **createMessage** 方法创建一条新消息并将其添加到队列中。\n\n    queueSvc.createMessage('myqueue', \"Hello world!\", function(error, result, response){\n      if(!error){\n        // Message inserted\n      }\n    });\n\n## 如何：扫视下一条消息\n\n通过调用 peekMessages 方法，可以查看队列前面的消息，而不必从队列中将其删除。默认情况下，\n**peekMessages** 查看单个消息。\n\n    queueSvc.peekMessages('myqueue', function(error, result, response){\n      if(!error){\n        // Message text is in messages[0].messagetext\n      }\n    });\n\n`result` 包含该消息。\n\n> [AZURE.NOTE] 在队列中没有消息时使用 **peekMessages** 不会返回错误，但也不会返回消息。\n\n## 如何：取消对下一条消息的排队\n\n处理消息是一个两阶段过程：\n\n1. 取消消息的排队。\n\n2. 删除该消息。\n\n若要取消消息的排队，请使用 **getMessages**。这会使消息在队列中不可见，因此其他客户端无法处理它们。一旦应用程序处理完某个消息，即可调用 **deleteMessage** 将其从队列中删除。下面的示例获取了一条消息，然后又将其删除：\n\n    queueSvc.getMessages('myqueue', function(error, result, response){\n      if(!error){\n        // Message text is in messages[0].messagetext\n        var message = result[0];\n        queueSvc.deleteMessage('myqueue', message.messageid, message.popreceipt, function(error, response){\n          if(!error){\n            //message deleted\n          }\n        });\n      }\n    });\n\n> [AZURE.NOTE] 默认情况下，一条消息只会隐藏 30 秒，然后其他客户端就可以看见它。您可以将 `options.visibilityTimeout` 与 **getMessages** 一起使用，以便指定其他值。\n\n> [AZURE.NOTE] 在队列中没有消息时使用 **getMessages** 不会返回错误，但也不会返回消息。\n\n## 如何：更改已排队消息的内容\n\n您可以更改队列中现有消息的内容，只需使用 **updateMessage** 即可。以下示例将更新消息文本：\n\n    queueSvc.getMessages('myqueue', function(error, result, response){\n      if(!error){\n        // Got the message\n        var message = result[0];\n        queueSvc.updateMessage('myqueue', message.messageid, message.popreceipt, 10, {messageText: 'new text'}, function(error, result, response){\n          if(!error){\n            // Message updated successfully\n          }\n        });\n      }\n    });\n\n## 如何：用于对消息取消排队的其他选项\n\n你可以通过两种方式自定义队列中的消息检索：\n\n* `options.numOfMessages` - 您可以获取一批消息（最多 32 条）。\n* `options.visibilityTimeout` - 设置较长或较短的不可见性超时。\n\n以下示例使用 **getMessages** 方法通过一次调用获取 15 条消息。然后，它会使用 for 循环处理每条消息。它还将通过此方法返回的所有消息的不可见性超时设置为 5 分钟。\n\n    queueSvc.getMessages('myqueue', {numOfMessages: 15, visibilityTimeout: 5 * 60}, function(error, result, response){\n      if(!error){\n        // Messages retreived\n        for(var index in result){\n          // text is available in result[index].messageText\n          var message = result[index];\n          queueSvc.deleteMessage(queueName, message.messageid, message.popreceipt, function(error, response){\n            if(!error){\n              // Message deleted\n            }\n          });\n        }\n      }\n    });\n\n## 如何：获取队列长度\n\n**getQueueMetadata** 返回有关队列的元数据，其中包括队列中等待的消息的大致数目。\n\n    queueSvc.getQueueMetadata('myqueue', function(error, result, response){\n      if(!error){\n        // Queue length is available in result.approximatemessagecount\n      }\n    });\n\n## 如何：列出队列\n\n若要检索队列的列表，请使用 **listQueuesSegmented**。若要检索按特定前缀筛选的列表，请使用 **listQueuesSegmentedWithPrefix**。\n\n    queueSvc.listQueuesSegmented(null, function(error, result, response){\n      if(!error){\n        // result.entries contains the list of queues\n      }\n    });\n\n如果无法返回所有队列，则可使用 `result.continuationToken` 作为 **listQueuesSegmented** 的第一个参数或 **listQueuesSegmentedWithPrefix** 的第二个参数，以便检索更多结果。\n\n## 如何：删除队列\n\n若要删除队列及其中包含的所有消息，请对队列对象调用 **deleteQueue** 方法。\n\n    queueSvc.deleteQueue(queueName, function(error, response){\n        if(!error){\n            // Queue has been deleted\n        }\n    });\n\n若要清除队列中的所有消息而不删除该队列，则可使用 **clearMessages**。\n\n## 如何：使用共享访问签名\n\n共享访问签名 (SAS) 是一种安全的方法，用于对队列进行细致访问而无需提供你的存储帐户名或密钥。通常使用 SAS 来提供对你的队列的有限访问权限，例如允许移动应用程序提交消息。\n\n受信任的应用程序（例如基于云的服务）可使用 **QueueService** 的 **generateSharedAccessSignature** 生成 SAS，然后将其提供给不受信任的或不完全受信任的应用程序。例如，移动应用程序。SAS 可使用策略生成，该策略描述了 SAS 的生效日期和失效日期，以及授予 SAS 持有者的访问级别。\n\n下面的示例生成了一个新的共享访问策略，该策略将允许 SAS 持有者向队列添加消息，在创建后 100 分钟过期。\n\n    var startDate = new Date();\n    var expiryDate = new Date(startDate);\n    expiryDate.setMinutes(startDate.getMinutes() + 100);\n    startDate.setMinutes(startDate.getMinutes() - 100);\n    \n    var sharedAccessPolicy = {\n      AccessPolicy: {\n        Permissions: azure.QueueUtilities.SharedAccessPermissions.ADD,\n        Start: startDate,\n        Expiry: expiryDate\n      }\n    };\n\n    var queueSAS = queueSvc.generateSharedAccessSignature('myqueue', sharedAccessPolicy);\n    var host = queueSvc.host;\n\n请注意，还必须提供主机信息，因为 SAS 持有者尝试访问队列时，必须提供该信息。\n\n然后，客户端应用程序将 SAS 用于 **QueueServiceWithSAS**，以便针对队列执行操作。下面的示例连接到该队列，并创建一条消息。\n\n    var sharedQueueService = azure.createQueueServiceWithSas(host, queueSAS);\n    sharedQueueService.createMessage('myqueue', 'Hello world from SAS!', function(error, result, response){\n      if(!error){\n        //message added\n      }\n    });\n\n由于 SAS 在生成时只具有添加访问权限，因此如果尝试读取、更新或删除消息，则会返回错误。\n\n### 访问控制列表\n\n你还可以使用访问控制列表 (ACL) 为 SAS 设置访问策略。如果你希望允许多个客户端访问某个队列，但为每个客户端提供了不同的访问策略，则访问控制列表会很有用。\n\nACL 是使用一组访问策略实施的，每个策略都有一个关联的 ID。下面的示例定义了两个策略，一个用于“user1”，一个用于“user2”：\n\n    var sharedAccessPolicy = [\n      {\n        AccessPolicy: {\n          Permissions: azure.QueueUtilities.SharedAccessPermissions.PROCESS,\n          Start: startDate,\n          Expiry: expiryDate\n        },\n        Id: 'user1'\n      },\n      {\n        AccessPolicy: {\n          Permissions: azure.QueueUtilities.SharedAccessPermissions.ADD,\n          Start: startDate,\n          Expiry: expiryDate\n        },\n        Id: 'user2'\n      }\n    ];\n\n下面的示例获取 **myqueue** 的当前 ACL，然后使用 **setQueueAcl** 添加新策略。此方法具有以下用途：\n\n    queueSvc.getQueueAcl('myqueue', function(error, result, response) {\n      if(!error){\n        //push the new policy into signedIdentifiers\n        result.signedIdentifiers.push(sharedAccessPolicy);\n        queueSvc.setQueueAcl('myqueue', result, function(error, result, response){\n          if(!error){\n            // ACL set\n          }\n        });\n      }\n    });\n\n设置 ACL 后，你可以根据某个策略的 ID 创建 SAS。以下示例为“user2”创建新的 SAS：\n\n    queueSAS = queueSvc.generateSharedAccessSignature('myqueue', { Id: 'user2' });\n\n## 后续步骤\n\n现在，您已了解有关队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。\n\n-   访问 [Azure 存储空间团队博客][]。\n-   访问 GitHub 上的 [Azure Storage SDK for Node][] 存储库。\n\n  [Azure Storage SDK for Node]: https://github.com/Azure/azure-storage-node\n  [使用 REST API]: http://msdn.microsoft.com/zh-cn/library/windowsazure/hh264518.aspx\n  [Azure 管理门户]: http://manage.windowsazure.cn\n  [创建 Node.js 应用程序并将其部署到 Azure Web 应用]: /zh-cn/documentation/articles/web-sites-nodejs-develop-deploy-mac/\n  [使用存储构建 Node.js 云服务]: /zh-cn/documentation/articles/storage-nodejs-use-table-storage-cloud-service-app/\n  [使用存储构建 Node.js Web 应用]: /zh-cn/documentation/articles/storage-nodejs-use-table-storage-web-site/\n\n  \n  [Queue1]: ./media/storage-nodejs-how-to-use-queues/queue1.png\n  [plus-new]: ./media/storage-nodejs-how-to-use-queues/plus-new.png\n  [quick-create-storage]: ./media/storage-nodejs-how-to-use-queues/quick-storage.png\n  \n  \n  \n  [Node.js 云服务]: /zh-cn/documentation/articles/cloud-services-nodejs-develop-deploy-app/\n  [Azure 存储空间团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n [使用 WebMatrix 构建 Web 应用]: /zh-cn/documentation/articles/web-sites-nodejs-use-webmatrix/\n\n<!---HONumber=Mooncake_0118_2016-->"
}