{
  "nodes": [
    {
      "content": "在 Visual Studio 中，右键单击“控制器”文件夹，展开“添加”，然后单击“新基架项”。这样将显示“添加基架”对话框。",
      "pos": [
        5,
        69
      ]
    },
    {
      "pos": [
        74,
        166
      ],
      "content": "展开“Azure 移动服务”并单击“Azure 移动服务自定义控制器”，然后单击“添加”，提供 <ph id=\"ph1\">`CompleteAllController`</ph> 的“控制器名称”，然后再次单击“添加”。"
    },
    {
      "content": "Web API“添加基架”对话框",
      "pos": [
        174,
        190
      ]
    },
    {
      "pos": [
        285,
        328
      ],
      "content": "这样将创建新的名为 <bpt id=\"p1\">**</bpt>CompleteAllController<ept id=\"p1\">**</ept> 的空控制器类。"
    },
    {
      "pos": [
        335,
        466
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果你的对话框没有移动服务特定的基架，请创建新的“Web API 控制器 - 空”。在这个新控制器类中，添加公共 <bpt id=\"p1\">**</bpt>Services<ept id=\"p1\">**</ept> 属性，它将返回 <bpt id=\"p2\">**</bpt>ApiServices<ept id=\"p2\">**</ept> 类型。此属性用于从控制器内部访问服务器特定的设置。"
    },
    {
      "pos": [
        471,
        584
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>CompleteAllController.cs<ept id=\"p1\">**</ept> 中，添加以下 <bpt id=\"p2\">**</bpt>using<ept id=\"p2\">**</ept> 语句。将 <ph id=\"ph1\">`todolistService`</ph> 替换为你的移动服务项目的命名空间，它应该是在移动服务名称后追加 <ph id=\"ph2\">`Service`</ph>。"
    },
    {
      "pos": [
        666,
        718
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>CompleteAllController.cs<ept id=\"p1\">**</ept> 中，添加以下类用于包装发送到客户端的响应。"
    },
    {
      "pos": [
        1013,
        1283
      ],
      "content": "将以下代码添加到新控制器。将 <ph id=\"ph1\">`todolistContext`</ph> 替换为你的数据模型的 DbContext 名称，它应该是在移动服务名称后追加 <ph id=\"ph2\">`Context`</ph>。同样，将 UPDATE 语句中的模式名称替换为你的移动服务名称。此代码使用<bpt id=\"p1\">[</bpt>数据库类<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/system.data.entity.database.aspx)</ept>来直接访问 <bpt id=\"p2\">**</bpt>TodoItems<ept id=\"p2\">**</ept> 表，以便在所有项上设置完成标志。此方法支持 POST 请求，已更改行的数量将以整数值形式返回至客户端。"
    }
  ],
  "content": "\n\n1. 在 Visual Studio 中，右键单击“控制器”文件夹，展开“添加”，然后单击“新基架项”。这样将显示“添加基架”对话框。\n\n2. 展开“Azure 移动服务”并单击“Azure 移动服务自定义控制器”，然后单击“添加”，提供 `CompleteAllController` 的“控制器名称”，然后再次单击“添加”。\n\n    ![Web API“添加基架”对话框](./media/mobile-services-dotnet-backend-create-custom-api/add-custom-api-controller.png)\n\n    这样将创建新的名为 **CompleteAllController** 的空控制器类。\n\n    >[AZURE.NOTE]如果你的对话框没有移动服务特定的基架，请创建新的“Web API 控制器 - 空”。在这个新控制器类中，添加公共 **Services** 属性，它将返回 **ApiServices** 类型。此属性用于从控制器内部访问服务器特定的设置。\n\n3. 在 **CompleteAllController.cs** 中，添加以下 **using** 语句。将 `todolistService` 替换为你的移动服务项目的命名空间，它应该是在移动服务名称后追加 `Service`。\n\n        using System.Threading.Tasks;\n        using todolistService.Models;\n\n4. 在 **CompleteAllController.cs** 中，添加以下类用于包装发送到客户端的响应。\n\n        // We use this class to keep parity with other Mobile Services\n        // that use the JavaScript backend. This way the same client\n        // code can call either type of Mobile Service backend.\n        public class MarkAllResult\n        {\n            public int count;\n        }\n\n5. 将以下代码添加到新控制器。将 `todolistContext` 替换为你的数据模型的 DbContext 名称，它应该是在移动服务名称后追加 `Context`。同样，将 UPDATE 语句中的模式名称替换为你的移动服务名称。此代码使用[数据库类](http://msdn.microsoft.com/zh-cn/library/system.data.entity.database.aspx)来直接访问 **TodoItems** 表，以便在所有项上设置完成标志。此方法支持 POST 请求，已更改行的数量将以整数值形式返回至客户端。\n\n\n        // POST api/completeall        \n        public async Task<MarkAllResult> Post()\n        {\n            using (todolistContext context = new todolistContext())\n            {\n                // Get the database from the context.\n                var database = context.Database;\n\n                // Create a SQL statement that sets all uncompleted items\n                // to complete and execute the statement asynchronously.\n                var sql = @\"UPDATE todolist.TodoItems SET Complete = 1 \" +\n                            @\"WHERE Complete = 0; SELECT @@ROWCOUNT as count\";\n\n                var result = new MarkAllResult();\n                result.count = await database.ExecuteSqlCommandAsync(sql);\n\n                // Log the result.\n                Services.Log.Info(string.Format(\"{0} items set to 'complete'.\", \n                    result.count.ToString()));\n                \n                return result;\n            }\n        }\n\n    > [AZURE.NOTE]使用默认权限和应用密钥的任何人都可以调用自定义 API。但是，应用程序密钥不被视为安全的凭据，因为无法安全地分发或存储它。请考虑仅限经过身份验证的用户访问。\n\n<!---HONumber=76-->"
}