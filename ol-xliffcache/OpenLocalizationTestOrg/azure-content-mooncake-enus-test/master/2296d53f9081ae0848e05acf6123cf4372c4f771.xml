{
  "nodes": [
    {
      "content": "SQL 数据仓库中的事务 | Azure",
      "pos": [
        26,
        46
      ]
    },
    {
      "content": "有关在开发解决方案时实现 Azure SQL 数据仓库中的事务的技巧。",
      "pos": [
        64,
        99
      ]
    },
    {
      "content": "SQL 数据仓库中的事务",
      "pos": [
        323,
        335
      ]
    },
    {
      "content": "如你所料，SQL 数据仓库为所有事务属性提供支持。但是，为了确保 SQL 数据仓库的性能维持在一定的程度，相比于 SQL Server，其某些功能会受到限制。本文将突出两者的差异，并列出其他信息。",
      "pos": [
        337,
        435
      ]
    },
    {
      "content": "事务隔离级别",
      "pos": [
        440,
        446
      ]
    },
    {
      "pos": [
        447,
        604
      ],
      "content": "SQL 数据仓库实现 ACID 事务。但是，事务支持的隔离仅限于 <ph id=\"ph1\">`READ UNCOMMITTED`</ph>，这无法更改。你可以实现许多编码方法，以避免脏读数据（如果你对此有所考虑的话）。大多数流行方法利用 CTAS 和表分区切换（通常称为滑动窗口模式），以防止用户查询仍正准备的数据。预先筛选数据的视图也是常用的方法。"
    },
    {
      "content": "事务状态",
      "pos": [
        609,
        613
      ]
    },
    {
      "content": "SQL 数据仓库使用 XACT\\_STATE() 函数（采用值 -2）来报告失败的事务。这表示事务已失败并标记为仅可回滚",
      "pos": [
        614,
        674
      ]
    },
    {
      "pos": [
        678,
        964
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>XACT\\_STATE 函数使用 -2 表示失败的事务，以代表 SQL Server 中不同的行为。SQL Server 使用值 -1 来代表无法提交的事务。SQL Server 可以容忍事务内的某些错误，而无需将其标记为无法提交。例如，SELECT 1/0 导致错误，但不强制事务进入无法提交状态。SQL Server 还允许读取无法提交的事务。但是，在 SQLDW 中，情况并非如此。如果 SQLDW 事务内发生错误，它就会自动进入 -2 状态：包括 SELECT 1/0 错误。因此，必须查看应用程序代码是否使用 XACT\\_STATE()。"
    },
    {
      "content": "在 SQL Server 中，你可能会看到如下所示的代码片段：",
      "pos": [
        966,
        997
      ]
    },
    {
      "pos": [
        1612,
        1690
      ],
      "content": "请注意，<ph id=\"ph1\">`SELECT`</ph> 语句出现在 <ph id=\"ph2\">`ROLLBACK`</ph> 语句的前面。另外请注意，<ph id=\"ph3\">`@xact`</ph> 变量的设置使用 DECLARE 而非 <ph id=\"ph4\">`SELECT`</ph>。"
    },
    {
      "content": "在 SQL 数据仓库中，代码需如下所示：",
      "pos": [
        1692,
        1712
      ]
    },
    {
      "pos": [
        2268,
        2303
      ],
      "content": "请注意，事务的回滚必须发生于在 <ph id=\"ph1\">`CATCH`</ph> 块中读取错误信息之前。"
    },
    {
      "content": "Error\\_Line() 函数",
      "pos": [
        2308,
        2324
      ]
    },
    {
      "content": "另外值得注意的是，SQL 数据仓库不实现或支持 ERROR\\_LINE() 函数。如果你的代码中包含此函数，需要将它删除才能符合 SQL 数据仓库的要求。请在代码中使用查询标签，而不是实现等效的功能。有关此功能的详细信息，请参阅 [查询标签] 一文。",
      "pos": [
        2325,
        2450
      ]
    },
    {
      "content": "使用 THROW 和 RAISERROR",
      "pos": [
        2455,
        2475
      ]
    },
    {
      "content": "THROW 是在 SQL 数据仓库中引发异常的新式做法，但也支持 RAISERROR。不过，有些值得注意的差异。",
      "pos": [
        2476,
        2532
      ]
    },
    {
      "content": "对于 THROW，用户定义的错误消息数目不能在 100,000 - 150,000 的范围内",
      "pos": [
        2536,
        2582
      ]
    },
    {
      "content": "RAISERROR 错误消息固定为 50,000",
      "pos": [
        2585,
        2609
      ]
    },
    {
      "content": "不支持 sys.messages",
      "pos": [
        2612,
        2628
      ]
    },
    {
      "content": "限制",
      "pos": [
        2633,
        2635
      ]
    },
    {
      "content": "SQL 数据仓库有一些与事务相关的其他限制。",
      "pos": [
        2636,
        2658
      ]
    },
    {
      "content": "这些限制如下：",
      "pos": [
        2660,
        2667
      ]
    },
    {
      "content": "无分布式事务",
      "pos": [
        2671,
        2677
      ]
    },
    {
      "content": "不允许嵌套事务",
      "pos": [
        2680,
        2687
      ]
    },
    {
      "content": "不允许保存点",
      "pos": [
        2690,
        2696
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        2701,
        2705
      ]
    },
    {
      "pos": [
        2706,
        2727
      ],
      "content": "有关更多开发技巧，请参阅<bpt id=\"p1\">[</bpt>开发概述<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"SQL 数据仓库中的事务 | Azure\"\n   description=\"有关在开发解决方案时实现 Azure SQL 数据仓库中的事务的技巧。\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.date=\"09/22/2015\"\n   wacn.date=\"01/20/2016\"/>\n\n# SQL 数据仓库中的事务\n\n如你所料，SQL 数据仓库为所有事务属性提供支持。但是，为了确保 SQL 数据仓库的性能维持在一定的程度，相比于 SQL Server，其某些功能会受到限制。本文将突出两者的差异，并列出其他信息。\n\n## 事务隔离级别\nSQL 数据仓库实现 ACID 事务。但是，事务支持的隔离仅限于 `READ UNCOMMITTED`，这无法更改。你可以实现许多编码方法，以避免脏读数据（如果你对此有所考虑的话）。大多数流行方法利用 CTAS 和表分区切换（通常称为滑动窗口模式），以防止用户查询仍正准备的数据。预先筛选数据的视图也是常用的方法。\n\n## 事务状态\nSQL 数据仓库使用 XACT\\_STATE() 函数（采用值 -2）来报告失败的事务。这表示事务已失败并标记为仅可回滚\n\n> [AZURE.NOTE]XACT\\_STATE 函数使用 -2 表示失败的事务，以代表 SQL Server 中不同的行为。SQL Server 使用值 -1 来代表无法提交的事务。SQL Server 可以容忍事务内的某些错误，而无需将其标记为无法提交。例如，SELECT 1/0 导致错误，但不强制事务进入无法提交状态。SQL Server 还允许读取无法提交的事务。但是，在 SQLDW 中，情况并非如此。如果 SQLDW 事务内发生错误，它就会自动进入 -2 状态：包括 SELECT 1/0 错误。因此，必须查看应用程序代码是否使用 XACT\\_STATE()。\n\n在 SQL Server 中，你可能会看到如下所示的代码片段：\n\n\n\n        BEGIN TRAN\n            BEGIN TRY\n                DECLARE @i INT;\n                SET     @i = CONVERT(int,'ABC');\n            END TRY\n            BEGIN CATCH\n        \n                DECLARE @xact smallint = XACT_STATE();\n        \n                SELECT  ERROR_NUMBER()    AS ErrNumber\n                ,       ERROR_SEVERITY()  AS ErrSeverity\n                ,       ERROR_STATE()     AS ErrState\n                ,       ERROR_PROCEDURE() AS ErrProcedure\n                ,       ERROR_MESSAGE()   AS ErrMessage\n                ;\n        \n                ROLLBACK TRAN;\n        \n            END CATCH;\n\n\n请注意，`SELECT` 语句出现在 `ROLLBACK` 语句的前面。另外请注意，`@xact` 变量的设置使用 DECLARE 而非 `SELECT`。\n\n在 SQL 数据仓库中，代码需如下所示：\n\n\n    BEGIN TRAN\n        BEGIN TRY\n            DECLARE @i INT;\n            SET     @i = CONVERT(int,'ABC');\n        END TRY\n        BEGIN CATCH\n    \n            ROLLBACK TRAN;\n    \n            DECLARE @xact smallint = XACT_STATE();\n    \n            SELECT  ERROR_NUMBER()    AS ErrNumber\n            ,       ERROR_SEVERITY()  AS ErrSeverity\n            ,       ERROR_STATE()     AS ErrState\n            ,       ERROR_PROCEDURE() AS ErrProcedure\n            ,       ERROR_MESSAGE()   AS ErrMessage\n            ;\n        END CATCH;\n    \n    SELECT @xact;\n\n\n请注意，事务的回滚必须发生于在 `CATCH` 块中读取错误信息之前。\n\n## Error\\_Line() 函数\n另外值得注意的是，SQL 数据仓库不实现或支持 ERROR\\_LINE() 函数。如果你的代码中包含此函数，需要将它删除才能符合 SQL 数据仓库的要求。请在代码中使用查询标签，而不是实现等效的功能。有关此功能的详细信息，请参阅 [查询标签] 一文。\n\n## 使用 THROW 和 RAISERROR\nTHROW 是在 SQL 数据仓库中引发异常的新式做法，但也支持 RAISERROR。不过，有些值得注意的差异。\n\n- 对于 THROW，用户定义的错误消息数目不能在 100,000 - 150,000 的范围内\n- RAISERROR 错误消息固定为 50,000\n- 不支持 sys.messages\n\n## 限制\nSQL 数据仓库有一些与事务相关的其他限制。\n\n这些限制如下：\n\n- 无分布式事务\n- 不允许嵌套事务\n- 不允许保存点\n\n## 后续步骤\n有关更多开发技巧，请参阅[开发概述][]。\n\n<!--Image references-->\n\n<!--Article references-->\n[开发概述]: /documentation/articles/sql-data-warehouse-overview-develop\n\n<!--MSDN references-->\n\n<!--Other Web references-->\n\n<!---HONumber=Mooncake_1207_2015-->\n"
}