{
  "nodes": [
    {
      "content": "SQL 数据库教程：通过“始终加密”保护敏感数据 | Azure",
      "pos": [
        27,
        59
      ]
    },
    {
      "content": "在数分钟内保护 SQL 数据库中的敏感数据。",
      "pos": [
        78,
        100
      ]
    },
    {
      "content": "SQL 数据库教程：通过“始终加密”（Windows 证书存储）保护敏感数据",
      "pos": [
        369,
        407
      ]
    },
    {
      "pos": [
        410,
        637
      ],
      "content": "始终加密是 Azure SQL 数据库和 SQL Server 中一项新的加密技术，用于保护服务器上的静态敏感数据、在客户端和服务器之间进行移动的敏感数据，以及正在使用中的数据，确保敏感数据永远不会在数据库系统中以明文形式显示。仅客户端应用程序或应用服务器（具有密钥访问权限）能够访问明文数据。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>始终加密（数据库引擎）<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt163865.aspx)</ept>。"
    },
    {
      "content": "本教程演示了如何通过在 SQL 数据库中实现始终加密来确保敏感数据的安全，使用 SQL Server Management Studio (SSMS) 来完成只需数分钟。",
      "pos": [
        639,
        724
      ]
    },
    {
      "content": "将数据库配置为使用始终加密后，我们将通过 Visual Studio 使用 C# 创建一个客户端应用程序，以便处理加密的数据。",
      "pos": [
        726,
        789
      ]
    },
    {
      "content": "按本文所述步骤进行操作，了解如何为 Azure SQL 数据库设置始终加密。在本文中，你将学习如何执行以下任务：",
      "pos": [
        791,
        847
      ]
    },
    {
      "pos": [
        851,
        942
      ],
      "content": "在 SSMS 中使用始终加密向导创建<bpt id=\"p1\">[</bpt>始终加密密钥<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt163865.aspx#Anchor_3)</ept>"
    },
    {
      "pos": [
        949,
        1020
      ],
      "content": "创建<bpt id=\"p1\">[</bpt>列主密钥 (CMK)<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt146393.aspx)</ept>。"
    },
    {
      "pos": [
        1027,
        1099
      ],
      "content": "创建<bpt id=\"p1\">[</bpt>列加密密钥 (CEK)<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt146372.aspx)</ept>。"
    },
    {
      "content": "创建一个数据库表并加密部分列。",
      "pos": [
        1102,
        1117
      ]
    },
    {
      "content": "创建一个可以从已加密列插入、选择和显示数据的应用程序。",
      "pos": [
        1120,
        1147
      ]
    },
    {
      "pos": [
        1151,
        1189
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> Azure SQL 数据库的始终加密目前为预览版。"
    },
    {
      "content": "先决条件",
      "pos": [
        1195,
        1199
      ]
    },
    {
      "content": "在本教程中，你需要：",
      "pos": [
        1201,
        1211
      ]
    },
    {
      "pos": [
        1215,
        1273
      ],
      "content": "在开始之前，你需要有 Azure 帐户和订阅。如果没有，请注册<bpt id=\"p1\">[</bpt>试用版<ept id=\"p1\">](/pricing/1rmb-trial)</ept>。"
    },
    {
      "pos": [
        1276,
        1389
      ],
      "content": "<bpt id=\"p1\">[</bpt>SQL Server Management Studio (SSMS)<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt238290.aspx)</ept> 13.0.700.242 或更高版本。"
    },
    {
      "pos": [
        1392,
        1485
      ],
      "content": "<bpt id=\"p1\">[</bpt>.NET Framework 4.6<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/w0x726c2.aspx)</ept> 或更高版本（在客户端计算机上）。"
    },
    {
      "pos": [
        1488,
        1575
      ],
      "content": "<bpt id=\"p1\">[</bpt>Visual Studio<ept id=\"p1\">](https://www.visualstudio.com/downloads/download-visual-studio-vs.aspx)</ept>。"
    },
    {
      "content": "创建空的 SQL 数据库",
      "pos": [
        1582,
        1594
      ]
    },
    {
      "pos": [
        1598,
        1644
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](http://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "单击“新建”&gt;“数据 + 存储”&gt;“SQL 数据库”。",
      "pos": [
        1648,
        1675
      ]
    },
    {
      "pos": [
        1679,
        1717
      ],
      "content": "在新服务器或现有服务器上创建名为 <bpt id=\"p1\">**</bpt>Clinic<ept id=\"p1\">**</ept> 的<bpt id=\"p2\">**</bpt>空<ept id=\"p2\">**</ept>数据库。"
    },
    {
      "content": "你需要在本教程的后面部分用到该连接字符串，因此，在创建数据库以后，请浏览到新的 Clinic 数据库，然后复制连接字符串（你可以随时获取该连接字符串，但我们已经处于门户中，因此很容易复制它）。",
      "pos": [
        1719,
        1815
      ]
    },
    {
      "content": "单击“SQL 数据库”&gt;“Clinic”&gt;“显示数据库连接字符串”。",
      "pos": [
        1820,
        1854
      ]
    },
    {
      "pos": [
        1858,
        1880
      ],
      "content": "复制 <bpt id=\"p1\">**</bpt>ADO.NET<ept id=\"p1\">**</ept> 的连接字符串："
    },
    {
      "content": "使用 SSMS 连接到数据库",
      "pos": [
        1886,
        1900
      ]
    },
    {
      "content": "打开 SSMS，使用 Clinic 数据库连接到服务器。",
      "pos": [
        1902,
        1930
      ]
    },
    {
      "content": "打开 SSMS（单击“连接”&gt;“数据库引擎...”打开“连接到服务器”窗口（如果尚未打开））。",
      "pos": [
        1936,
        1983
      ]
    },
    {
      "pos": [
        1987,
        2078
      ],
      "content": "输入服务器名称和凭据。服务器名称可以在 SQL 数据库边栏选项卡以及你此前复制的连接字符串中找到。键入完整的服务器名称，例如 <bpt id=\"p1\">*</bpt>database.chinacloudapi.cn<ept id=\"p1\">*</ept>。"
    },
    {
      "content": "复制连接字符串",
      "pos": [
        2086,
        2093
      ]
    },
    {
      "content": "如果“新建防火墙规则”窗口打开，请登录到 Azure，让 SSMS 为你创建防火墙规则。",
      "pos": [
        2155,
        2199
      ]
    },
    {
      "content": "创建表",
      "pos": [
        2205,
        2208
      ]
    },
    {
      "content": "首先，我们将创建一个表来保留患者数据（一开始只需一个普通表 -- 我们会在下一部分配置加密）。",
      "pos": [
        2210,
        2257
      ]
    },
    {
      "content": "展开“数据库”。",
      "pos": [
        2262,
        2270
      ]
    },
    {
      "content": "右键单击“Clinic”数据库，然后单击“新建查询”。",
      "pos": [
        2274,
        2301
      ]
    },
    {
      "content": "将以下 Transact-SQL (T-SQL) 粘贴到新查询窗口中，然后单击“执行”执行该语句：",
      "pos": [
        2305,
        2354
      ]
    },
    {
      "content": "加密某些列（配置始终加密）",
      "pos": [
        2872,
        2885
      ]
    },
    {
      "content": "SSMS 提供了一个向导，可以轻松地配置始终加密，只需为你设置列主密钥 (CMK)、列加密密钥 (CEK) 和已加密列即可。",
      "pos": [
        2887,
        2949
      ]
    },
    {
      "content": "展开“数据库”&gt;“Clinic”&gt;“表”。",
      "pos": [
        2954,
        2975
      ]
    },
    {
      "content": "右键单击“患者”表，然后选择“加密列...”以打开始终加密向导：",
      "pos": [
        2979,
        3011
      ]
    },
    {
      "content": "加密列",
      "pos": [
        3019,
        3022
      ]
    },
    {
      "content": "列选择",
      "pos": [
        3089,
        3092
      ]
    },
    {
      "pos": [
        3100,
        3227
      ],
      "content": "单击“简介”页上的“下一步”打开“列选择”页，在该页中，你可以选择要加密的列、要使用的<bpt id=\"p1\">[</bpt>加密类型和列加密密钥 (CEK)<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt459280.aspx#Anchor_2)</ept>。"
    },
    {
      "pos": [
        3233,
        3333
      ],
      "content": "我们需要加密每位患者的 <bpt id=\"p1\">**</bpt>SSN<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>BirthDate<ept id=\"p2\">**</ept> 信息。SSN 列将使用确定性加密，该加密支持相等性查找、联接和分组方式。BirthDate 列将使用随机加密，该加密不支持操作。"
    },
    {
      "content": "选择 SSN 列的“加密类型”并将其设置为“确定”，将 BirthDate 列设置为“随机”，然后单击“下一步”。",
      "pos": [
        3339,
        3396
      ]
    },
    {
      "content": "加密列",
      "pos": [
        3404,
        3407
      ]
    },
    {
      "pos": [
        3473,
        3488
      ],
      "content": "<bpt id=\"p1\">**</bpt>主密钥配置<ept id=\"p1\">**</ept> (CMK)"
    },
    {
      "content": "“主密钥配置”页是设置列主密钥 (CMK) 和选择密钥存储提供程序（在其中存储 CMK）的地方。目前，你可以将 CMK 存储在 Windows 证书存储、Azure 密钥保管库或硬件安全模块 (HSM) 中。本教程演示如何将密钥存储在 Windows 证书存储中。",
      "pos": [
        3494,
        3626
      ]
    },
    {
      "content": "确保选中“Windows 证书存储”，然后单击“下一步”。",
      "pos": [
        3632,
        3661
      ]
    },
    {
      "content": "主密钥配置",
      "pos": [
        3669,
        3674
      ]
    },
    {
      "content": "验证",
      "pos": [
        3751,
        3753
      ]
    },
    {
      "content": "你可以现在就加密这些列，也可以保存 PowerShell 脚本供以后运行。对于本教程，请选择“现在完成”，然后单击“下一步”。",
      "pos": [
        3761,
        3824
      ]
    },
    {
      "content": "摘要",
      "pos": [
        3831,
        3833
      ]
    },
    {
      "content": "确保设置全都正确，然后单击“完成”完成始终加密的设置。",
      "pos": [
        3841,
        3868
      ]
    },
    {
      "content": "该向导的具体功能是什么？",
      "pos": [
        3938,
        3950
      ]
    },
    {
      "content": "向导完成后，你的数据库就会设置为始终加密，并完成了以下操作：",
      "pos": [
        3952,
        3982
      ]
    },
    {
      "content": "创建了列主密钥 (CMK)。",
      "pos": [
        3986,
        4000
      ]
    },
    {
      "content": "创建了列加密密钥 (CEK)。",
      "pos": [
        4003,
        4018
      ]
    },
    {
      "content": "配置了所选列的加密。（我们的“患者”表目前尚无数据，但所选列中的任何现有数据都会进行加密。）",
      "pos": [
        4021,
        4067
      ]
    },
    {
      "content": "你可以验证 SSMS 中创建的密钥，只需展开“Clinic”&gt;“安全”&gt;“始终加密密钥”即可。现在，你可以看到向导为你生成的新密钥了。",
      "pos": [
        4069,
        4136
      ]
    },
    {
      "content": "创建处理已加密数据的客户端应用程序",
      "pos": [
        4142,
        4159
      ]
    },
    {
      "content": "现在我们已设置始终加密，让我们生成一个应用程序，用其在已加密列上执行某些 INSERT 操作和 SELECT 操作。若要成功运行此示例应用程序，你必需在运行过始终加密向导的计算机上运行它。若要在其他计算机上运行，你必须将始终加密证书部署到运行客户端应用的计算机上。",
      "pos": [
        4161,
        4293
      ]
    },
    {
      "pos": [
        4297,
        4479
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> 通过始终加密列将明文数据传递到服务器时，应用程序必须使用 <bpt id=\"p1\">[</bpt>SqlParameter<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlparameter.aspx)</ept> 对象。在不使用 SqlParameter 对象的情况下传递文本值会导致异常。"
    },
    {
      "pos": [
        4485,
        4559
      ],
      "content": "打开 Visual Studio 并创建新的 C# 控制台应用程序。确保将你的项目设置为 <bpt id=\"p1\">**</bpt>.NET Framework 4.6<ept id=\"p1\">**</ept> 或更高版本。"
    },
    {
      "pos": [
        4563,
        4609
      ],
      "content": "将项目命名为 <bpt id=\"p1\">**</bpt>AlwaysEncryptedConsoleApp<ept id=\"p1\">**</ept>，然后单击“确定”。"
    },
    {
      "content": "修改连接字符串以启用始终加密",
      "pos": [
        4690,
        4704
      ]
    },
    {
      "content": "本节只介绍如何在数据库连接字符串中启用始终加密。在下一节（即“始终加密示例控制台应用程序”）中，你需要实际修改刚创建的控制台应用。",
      "pos": [
        4706,
        4771
      ]
    },
    {
      "pos": [
        4774,
        4850
      ],
      "content": "若要启用始终加密，你需要将 <bpt id=\"p1\">**</bpt>Column Encryption Setting<ept id=\"p1\">**</ept> 关键字添加到加密字符串中，并将其设置为 <bpt id=\"p2\">**</bpt>Enabled<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        4852,
        5055
      ],
      "content": "你可以在连接字符串中直接进行该设置，也可以使用 <bpt id=\"p1\">[</bpt>SqlConnectionStringBuilder<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnectionstringbuilder.aspx)</ept> 进行设置。下一节中的示例应用程序演示如何使用 <bpt id=\"p2\">**</bpt>SqlConnectionStringBuilder<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        5059,
        5159
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 在特定于始终加密的客户端应用程序中，这是需要完成的唯一更改。如果你的某个现有应用程序将其连接字符串存储在外部（即存储在配置文件中），则可在不更改任何代码的情况下启用始终加密。"
    },
    {
      "content": "在连接字符串中启用始终加密",
      "pos": [
        5166,
        5179
      ]
    },
    {
      "content": "将以下关键字添加到连接字符串中：",
      "pos": [
        5181,
        5197
      ]
    },
    {
      "content": "通过 SqlConnectionStringBuilder 启用始终加密",
      "pos": [
        5243,
        5279
      ]
    },
    {
      "pos": [
        5281,
        5595
      ],
      "content": "以下代码显示了如何通过将 <bpt id=\"p1\">[</bpt>SqlConnectionStringBuilder.ColumnEncryptionSetting<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnectionstringbuilder.columnencryptionsetting.aspx)</ept> 设置为 <bpt id=\"p2\">[</bpt>Enabled<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnectioncolumnencryptionsetting.aspx)</ept> 来启用始终加密。"
    },
    {
      "content": "始终加密示例控制台应用程序",
      "pos": [
        5917,
        5930
      ]
    },
    {
      "content": "此示例演示了如何执行以下操作：",
      "pos": [
        5932,
        5947
      ]
    },
    {
      "content": "修改连接字符串以启用始终加密。",
      "pos": [
        5951,
        5966
      ]
    },
    {
      "content": "将数据插入已加密列。",
      "pos": [
        5969,
        5979
      ]
    },
    {
      "content": "通过在已加密列中筛选出特定的值来选择记录。",
      "pos": [
        5982,
        6003
      ]
    },
    {
      "pos": [
        6005,
        6113
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> 的内容替换为以下内容。将 Main 方法上面一行中全局 connectionString 变量的连接字符串替换为 Azure 门户中的有效连接字符串。这是需要对此代码进行的唯一更改。"
    },
    {
      "content": "现在，请运行该应用以查看始终加密操作。",
      "pos": [
        6115,
        6134
      ]
    },
    {
      "content": "确保数据已加密",
      "pos": [
        16720,
        16727
      ]
    },
    {
      "content": "若要快速查看服务器上的实际数据是否已加密，可以通过 SSMS 对患者数据进行轻松查询（使用当前的连接，其中，列加密设置尚未启用）。",
      "pos": [
        16729,
        16794
      ]
    },
    {
      "content": "针对 Clinic 数据库运行以下查找：",
      "pos": [
        16796,
        16816
      ]
    },
    {
      "content": "你可以看到，加密的列不包含任何明文数据。",
      "pos": [
        16881,
        16901
      ]
    },
    {
      "content": "新建控制台应用程序",
      "pos": [
        16908,
        16917
      ]
    },
    {
      "pos": [
        16979,
        17047
      ],
      "content": "若要使用 SSMS 来访问明文数据，可将 <bpt id=\"p1\">**</bpt>Column Encryption Setting=enabled<ept id=\"p1\">**</ept> 参数添加到连接中。"
    },
    {
      "content": "在 SSMS 中，右键单击“对象资源管理器”中的服务器，然后单击“断开连接”。",
      "pos": [
        17052,
        17091
      ]
    },
    {
      "content": "单击“连接”&gt;“数据库引擎”打开“连接到服务器”窗口，然后单击“选项”。",
      "pos": [
        17095,
        17131
      ]
    },
    {
      "pos": [
        17135,
        17189
      ],
      "content": "单击“其他连接参数”，然后键入 <bpt id=\"p1\">**</bpt>Column Encryption Setting=enabled<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "新建控制台应用程序",
      "pos": [
        17197,
        17206
      ]
    },
    {
      "content": "针对 Clinic 数据库运行以下查找：",
      "pos": [
        17281,
        17301
      ]
    },
    {
      "content": "现在，你可以看到已加密列中的明文数据。",
      "pos": [
        17375,
        17394
      ]
    },
    {
      "pos": [
        17477,
        17538
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 如果你从其他计算机使用 SSMS（或任何客户端）进行连接，则无法访问加密密钥，因此无法解密数据。"
    },
    {
      "content": "后续步骤",
      "pos": [
        17545,
        17549
      ]
    },
    {
      "content": "创建使用始终加密的数据库以后，你可能需要执行以下操作：",
      "pos": [
        17550,
        17577
      ]
    },
    {
      "content": "从另一台计算机运行此示例。此示例无法访问加密密钥，因此无法访问明文数据，导致无法成功运行。",
      "pos": [
        17581,
        17626
      ]
    },
    {
      "pos": [
        17630,
        17698
      ],
      "content": "<bpt id=\"p1\">[</bpt>轮换使用和清除密钥<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt607048.aspx)</ept>。"
    },
    {
      "content": "迁移已使用始终加密加密的数据",
      "pos": [
        17702,
        17716
      ]
    },
    {
      "content": "将始终加密证书部署到其他客户端计算机。",
      "pos": [
        17776,
        17795
      ]
    },
    {
      "content": "相关信息",
      "pos": [
        17801,
        17805
      ]
    },
    {
      "content": "始终加密（客户端开发）",
      "pos": [
        17810,
        17821
      ]
    },
    {
      "content": "透明数据加密",
      "pos": [
        17882,
        17888
      ]
    },
    {
      "content": "SQL Server 加密",
      "pos": [
        17949,
        17962
      ]
    },
    {
      "content": "始终加密向导",
      "pos": [
        18023,
        18029
      ]
    },
    {
      "content": "始终加密博客",
      "pos": [
        18090,
        18096
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"SQL 数据库教程：通过“始终加密”保护敏感数据 | Azure\"\n    description=\"在数分钟内保护 SQL 数据库中的敏感数据。\"\n    keywords=\"sql 数据库教程, 加密 sql 数据库中的数据\"    \n    services=\"sql-database\"\n    documentationCenter=\"\"\n    authors=\"stevestein\"\n    manager=\"jeffreyg\"\n    editor=\"cgronlun\"/>\n\n\n<tags\n    ms.service=\"sql-database\"\n    ms.date=\"01/14/2015\"\n    wacn.date=\"02/26/2016\"/>\n\n# SQL 数据库教程：通过“始终加密”（Windows 证书存储）保护敏感数据\n\n\n始终加密是 Azure SQL 数据库和 SQL Server 中一项新的加密技术，用于保护服务器上的静态敏感数据、在客户端和服务器之间进行移动的敏感数据，以及正在使用中的数据，确保敏感数据永远不会在数据库系统中以明文形式显示。仅客户端应用程序或应用服务器（具有密钥访问权限）能够访问明文数据。有关详细信息，请参阅[始终加密（数据库引擎）](https://msdn.microsoft.com/zh-cn/library/mt163865.aspx)。\n\n本教程演示了如何通过在 SQL 数据库中实现始终加密来确保敏感数据的安全，使用 SQL Server Management Studio (SSMS) 来完成只需数分钟。\n\n将数据库配置为使用始终加密后，我们将通过 Visual Studio 使用 C# 创建一个客户端应用程序，以便处理加密的数据。\n\n按本文所述步骤进行操作，了解如何为 Azure SQL 数据库设置始终加密。在本文中，你将学习如何执行以下任务：\n\n- 在 SSMS 中使用始终加密向导创建[始终加密密钥](https://msdn.microsoft.com/zh-cn/library/mt163865.aspx#Anchor_3)\n    - 创建[列主密钥 (CMK)](https://msdn.microsoft.com/zh-cn/library/mt146393.aspx)。\n    - 创建[列加密密钥 (CEK)](https://msdn.microsoft.com/zh-cn/library/mt146372.aspx)。\n- 创建一个数据库表并加密部分列。\n- 创建一个可以从已加密列插入、选择和显示数据的应用程序。\n\n> [AZURE.NOTE] Azure SQL 数据库的始终加密目前为预览版。\n\n\n## 先决条件\n\n在本教程中，你需要：\n\n- 在开始之前，你需要有 Azure 帐户和订阅。如果没有，请注册[试用版](/pricing/1rmb-trial)。\n- [SQL Server Management Studio (SSMS)](https://msdn.microsoft.com/zh-cn/library/mt238290.aspx) 13.0.700.242 或更高版本。\n- [.NET Framework 4.6](https://msdn.microsoft.com/zh-cn/library/w0x726c2.aspx) 或更高版本（在客户端计算机上）。\n- [Visual Studio](https://www.visualstudio.com/downloads/download-visual-studio-vs.aspx)。\n\n\n\n## 创建空的 SQL 数据库\n1. 登录到 [Azure 门户](http://manage.windowsazure.cn)。\n2. 单击“新建”>“数据 + 存储”>“SQL 数据库”。\n3. 在新服务器或现有服务器上创建名为 **Clinic** 的**空**数据库。\n\n你需要在本教程的后面部分用到该连接字符串，因此，在创建数据库以后，请浏览到新的 Clinic 数据库，然后复制连接字符串（你可以随时获取该连接字符串，但我们已经处于门户中，因此很容易复制它）。\n\n1. 单击“SQL 数据库”>“Clinic”>“显示数据库连接字符串”。\n2. 复制 **ADO.NET** 的连接字符串：\n\n\n## 使用 SSMS 连接到数据库\n\n打开 SSMS，使用 Clinic 数据库连接到服务器。\n\n\n1. 打开 SSMS（单击“连接”>“数据库引擎...”打开“连接到服务器”窗口（如果尚未打开））。\n2. 输入服务器名称和凭据。服务器名称可以在 SQL 数据库边栏选项卡以及你此前复制的连接字符串中找到。键入完整的服务器名称，例如 *database.chinacloudapi.cn*。\n\n    ![复制连接字符串](./media/sql-database-always-encrypted/ssms-connect.png)\n\n3. 如果“新建防火墙规则”窗口打开，请登录到 Azure，让 SSMS 为你创建防火墙规则。\n\n\n## 创建表\n\n首先，我们将创建一个表来保留患者数据（一开始只需一个普通表 -- 我们会在下一部分配置加密）。\n\n1. 展开“数据库”。\n1. 右键单击“Clinic”数据库，然后单击“新建查询”。\n2. 将以下 Transact-SQL (T-SQL) 粘贴到新查询窗口中，然后单击“执行”执行该语句：\n\n\n        CREATE TABLE [dbo].[Patients](\n         [PatientId] [int] IDENTITY(1,1), \n         [SSN] [char](11) NOT NULL,\n         [FirstName] [nvarchar](50) NULL,\n         [LastName] [nvarchar](50) NULL, \n         [MiddleName] [nvarchar](50) NULL,\n         [StreetAddress] [nvarchar](50) NULL,\n         [City] [nvarchar](50) NULL,\n         [ZipCode] [char](5) NULL,\n         [State] [char](2) NULL,\n         [BirthDate] [date] NOT NULL\n         PRIMARY KEY CLUSTERED ([PatientId] ASC) ON [PRIMARY] );\n         GO\n\n\n## 加密某些列（配置始终加密）\n\nSSMS 提供了一个向导，可以轻松地配置始终加密，只需为你设置列主密钥 (CMK)、列加密密钥 (CEK) 和已加密列即可。\n\n1. 展开“数据库”>“Clinic”>“表”。\n2. 右键单击“患者”表，然后选择“加密列...”以打开始终加密向导：\n\n    ![加密列](./media/sql-database-always-encrypted/encrypt-columns.png)\n\n3. **列选择**\n\n    单击“简介”页上的“下一步”打开“列选择”页，在该页中，你可以选择要加密的列、要使用的[加密类型和列加密密钥 (CEK)](https://msdn.microsoft.com/zh-cn/library/mt459280.aspx#Anchor_2)。\n\n    我们需要加密每位患者的 **SSN** 和 **BirthDate** 信息。SSN 列将使用确定性加密，该加密支持相等性查找、联接和分组方式。BirthDate 列将使用随机加密，该加密不支持操作。\n\n    选择 SSN 列的“加密类型”并将其设置为“确定”，将 BirthDate 列设置为“随机”，然后单击“下一步”。\n\n    ![加密列](./media/sql-database-always-encrypted/column-selection.png)\n\n4. **主密钥配置** (CMK)\n\n    “主密钥配置”页是设置列主密钥 (CMK) 和选择密钥存储提供程序（在其中存储 CMK）的地方。目前，你可以将 CMK 存储在 Windows 证书存储、Azure 密钥保管库或硬件安全模块 (HSM) 中。本教程演示如何将密钥存储在 Windows 证书存储中。\n\n    确保选中“Windows 证书存储”，然后单击“下一步”。\n\n    ![主密钥配置](./media/sql-database-always-encrypted/master-key-configuration.png)\n\n\n5. **验证**\n\n    你可以现在就加密这些列，也可以保存 PowerShell 脚本供以后运行。对于本教程，请选择“现在完成”，然后单击“下一步”。\n\n6. **摘要**\n\n    确保设置全都正确，然后单击“完成”完成始终加密的设置。\n\n\n    ![摘要](./media/sql-database-always-encrypted/summary.png)\n\n\n### 该向导的具体功能是什么？\n\n向导完成后，你的数据库就会设置为始终加密，并完成了以下操作：\n\n- 创建了列主密钥 (CMK)。\n- 创建了列加密密钥 (CEK)。\n- 配置了所选列的加密。（我们的“患者”表目前尚无数据，但所选列中的任何现有数据都会进行加密。）\n\n你可以验证 SSMS 中创建的密钥，只需展开“Clinic”>“安全”>“始终加密密钥”即可。现在，你可以看到向导为你生成的新密钥了。\n\n\n## 创建处理已加密数据的客户端应用程序\n\n现在我们已设置始终加密，让我们生成一个应用程序，用其在已加密列上执行某些 INSERT 操作和 SELECT 操作。若要成功运行此示例应用程序，你必需在运行过始终加密向导的计算机上运行它。若要在其他计算机上运行，你必须将始终加密证书部署到运行客户端应用的计算机上。\n\n> [AZURE.IMPORTANT] 通过始终加密列将明文数据传递到服务器时，应用程序必须使用 [SqlParameter](https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlparameter.aspx) 对象。在不使用 SqlParameter 对象的情况下传递文本值会导致异常。\n\n\n1. 打开 Visual Studio 并创建新的 C# 控制台应用程序。确保将你的项目设置为 **.NET Framework 4.6** 或更高版本。\n2. 将项目命名为 **AlwaysEncryptedConsoleApp**，然后单击“确定”。\n\n\n    ![新建控制台应用程序](./media/sql-database-always-encrypted/console-app.png)\n\n\n\n## 修改连接字符串以启用始终加密\n\n本节只介绍如何在数据库连接字符串中启用始终加密。在下一节（即“始终加密示例控制台应用程序”）中，你需要实际修改刚创建的控制台应用。\n\n\n若要启用始终加密，你需要将 **Column Encryption Setting** 关键字添加到加密字符串中，并将其设置为 **Enabled**。\n\n你可以在连接字符串中直接进行该设置，也可以使用 [SqlConnectionStringBuilder](https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnectionstringbuilder.aspx) 进行设置。下一节中的示例应用程序演示如何使用 **SqlConnectionStringBuilder**。\n\n> [AZURE.NOTE] 在特定于始终加密的客户端应用程序中，这是需要完成的唯一更改。如果你的某个现有应用程序将其连接字符串存储在外部（即存储在配置文件中），则可在不更改任何代码的情况下启用始终加密。\n\n\n### 在连接字符串中启用始终加密\n\n将以下关键字添加到连接字符串中：\n\n    Column Encryption Setting=Enabled\n\n\n### 通过 SqlConnectionStringBuilder 启用始终加密\n\n以下代码显示了如何通过将 [SqlConnectionStringBuilder.ColumnEncryptionSetting](https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnectionstringbuilder.columnencryptionsetting.aspx) 设置为 [Enabled](https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnectioncolumnencryptionsetting.aspx) 来启用始终加密。\n\n    // Instantiate a SqlConnectionStringBuilder.\n    SqlConnectionStringBuilder connStringBuilder = \n       new SqlConnectionStringBuilder(\"replace with your connection string\");\n\n    // Enable Always Encrypted.\n    connStringBuilder.ColumnEncryptionSetting = \n       SqlConnectionColumnEncryptionSetting.Enabled;\n\n\n\n## 始终加密示例控制台应用程序\n\n此示例演示了如何执行以下操作：\n\n- 修改连接字符串以启用始终加密。\n- 将数据插入已加密列。\n- 通过在已加密列中筛选出特定的值来选择记录。\n\n将 **Program.cs** 的内容替换为以下内容。将 Main 方法上面一行中全局 connectionString 变量的连接字符串替换为 Azure 门户中的有效连接字符串。这是需要对此代码进行的唯一更改。\n\n现在，请运行该应用以查看始终加密操作。\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Data;\n    using System.Data.SqlClient;\n    \n    namespace AlwaysEncryptedConsoleApp\n    {\n    class Program\n    {\n        // Update this line with your Clinic database connection string from the Azure Portal.\n        static string connectionString = @\"Replace with your connection string\";\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Original connection string copied from the Azure portal:\");\n            Console.WriteLine(connectionString);\n\n            // Create a SqlConnectionStringBuilder.\n            SqlConnectionStringBuilder connStringBuilder =\n                new SqlConnectionStringBuilder(connectionString);\n\n            // Enable Always Encrypted for the connection.\n            // This is the only change specific to Always Encrypted \n            connStringBuilder.ColumnEncryptionSetting =\n                SqlConnectionColumnEncryptionSetting.Enabled;\n\n            Console.WriteLine(Environment.NewLine + \"Updated connection string with Always Encrypted enabled:\");\n            Console.WriteLine(connStringBuilder.ConnectionString);\n\n            // Update the connection string with a password supplied at runtime.\n            Console.WriteLine(Environment.NewLine + \"Enter server password:\");\n            connStringBuilder.Password = Console.ReadLine();\n\n\n            // Assign the updated connection string to our global variable.\n            connectionString = connStringBuilder.ConnectionString;\n\n\n            // Delete all records to restart this demo app.\n            ResetPatientsTable();\n\n            // Add sample data to the Patients table.\n            Console.Write(Environment.NewLine + \"Adding sample patient data to the database...\");\n\n            InsertPatient(new Patient() {\n                SSN = \"999-99-0001\", FirstName = \"Orlando\", LastName = \"Gee\", BirthDate = DateTime.Parse(\"01/04/1964\") });\n            InsertPatient(new Patient() {\n                SSN = \"999-99-0002\", FirstName = \"Keith\", LastName = \"Harris\", BirthDate = DateTime.Parse(\"06/20/1977\") });\n            InsertPatient(new Patient() {\n                SSN = \"999-99-0003\", FirstName = \"Donna\", LastName = \"Carreras\", BirthDate = DateTime.Parse(\"02/09/1973\") });\n            InsertPatient(new Patient() {\n                SSN = \"999-99-0004\", FirstName = \"Janet\", LastName = \"Gates\", BirthDate = DateTime.Parse(\"08/31/1985\") });\n            InsertPatient(new Patient() {\n                SSN = \"999-99-0005\", FirstName = \"Lucy\", LastName = \"Harrington\", BirthDate = DateTime.Parse(\"05/06/1993\") });\n\n\n            // Fetch and display all patients.\n            Console.WriteLine(Environment.NewLine + \"All the records currently in the Patients table:\");\n\n            foreach (Patient patient in SelectAllPatients())\n            {\n                Console.WriteLine(patient.FirstName + \" \" + patient.LastName + \"\\tSSN: \" + patient.SSN + \"\\tBirthdate: \" + patient.BirthDate);\n            }\n\n            // Get patients by SSN.\n            Console.WriteLine(Environment.NewLine + \"Now lets locate records by searching the encrypted SSN column.\");\n\n            string ssn;\n\n            // This very simple validation only checks that the user entered 11 characters.\n            // In production be sure to check all user input and use the best validation for your specific application.\n            do\n            {\n                Console.WriteLine(\"Please enter a valid SSN (ex. 123-45-6789):\");\n                ssn = Console.ReadLine();\n            } while (ssn.Length != 11);\n\n            // The example allows duplicate SSN entries so we will return all records\n            // that match the provided value and store the results in selectedPatients.\n            Patient selectedPatient = SelectPatientBySSN(ssn);\n\n            // Check if any records were returned and display our query results.\n            if (selectedPatient != null)\n            {\n                Console.WriteLine(\"Patient found with SSN = \" + ssn);\n                Console.WriteLine(selectedPatient.FirstName + \" \" + selectedPatient.LastName + \"\\tSSN: \"\n                    + selectedPatient.SSN + \"\\tBirthdate: \" + selectedPatient.BirthDate);\n            }\n            else\n            {\n                Console.WriteLine(\"No patients found with SSN = \" + ssn);\n            }\n\n            Console.WriteLine(\"Press Enter to exit...\");\n            Console.ReadLine();\n        }\n\n\n        static int InsertPatient(Patient newPatient)\n        {\n            int returnValue = 0;\n\n            string sqlCmdText = @\"INSERT INTO [dbo].[Patients] ([SSN], [FirstName], [LastName], [BirthDate])\n         VALUES (@SSN, @FirstName, @LastName, @BirthDate);\";\n\n            SqlCommand sqlCmd = new SqlCommand(sqlCmdText);\n\n\n            SqlParameter paramSSN = new SqlParameter(@\"@SSN\", newPatient.SSN);\n            paramSSN.DbType = DbType.AnsiStringFixedLength;\n            paramSSN.Direction = ParameterDirection.Input;\n            paramSSN.Size = 11;\n\n            SqlParameter paramFirstName = new SqlParameter(@\"@FirstName\", newPatient.FirstName);\n            paramFirstName.DbType = DbType.String;\n            paramFirstName.Direction = ParameterDirection.Input;\n\n            SqlParameter paramLastName = new SqlParameter(@\"@LastName\", newPatient.LastName);\n            paramLastName.DbType = DbType.String;\n            paramLastName.Direction = ParameterDirection.Input;\n\n            SqlParameter paramBirthDate = new SqlParameter(@\"@BirthDate\", newPatient.BirthDate);\n            paramBirthDate.SqlDbType = SqlDbType.Date;\n            paramBirthDate.Direction = ParameterDirection.Input;\n\n            sqlCmd.Parameters.Add(paramSSN);\n            sqlCmd.Parameters.Add(paramFirstName);\n            sqlCmd.Parameters.Add(paramLastName);\n            sqlCmd.Parameters.Add(paramBirthDate);\n\n            using (sqlCmd.Connection = new SqlConnection(connectionString))\n            {\n                try\n                {\n                    sqlCmd.Connection.Open();\n                    sqlCmd.ExecuteNonQuery();\n                }\n                catch (Exception ex)\n                {\n                    returnValue = 1;\n                    Console.WriteLine(\"The following error was encountered: \");\n                    Console.WriteLine(ex.Message);\n                    Console.WriteLine(Environment.NewLine + \"Press Enter key to exit\");\n                    Console.ReadLine();\n                    Environment.Exit(0);\n                }\n            }\n            return returnValue;\n        }\n\n\n        static List<Patient> SelectAllPatients()\n        {\n            List<Patient> patients = new List<Patient>();\n\n\n            SqlCommand sqlCmd = new SqlCommand(\n              \"SELECT [SSN], [FirstName], [LastName], [BirthDate] FROM [dbo].[Patients]\",\n                new SqlConnection(connectionString));\n\n\n            using (sqlCmd.Connection = new SqlConnection(connectionString))\n\n            using (sqlCmd.Connection = new SqlConnection(connectionString))\n            {\n                try\n                {\n                    sqlCmd.Connection.Open();\n                    SqlDataReader reader = sqlCmd.ExecuteReader();\n\n                    if (reader.HasRows)\n                    {\n                        while (reader.Read())\n                        {\n                            patients.Add(new Patient()\n                            {\n                                SSN = reader[0].ToString(),\n                                FirstName = reader[1].ToString(),\n                                LastName = reader[\"LastName\"].ToString(),\n                                BirthDate = (DateTime)reader[\"BirthDate\"]\n                            });\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    throw;\n                }\n            }\n\n            return patients;\n        }\n\n\n        static Patient SelectPatientBySSN(string ssn)\n        {\n            Patient patient = new Patient();\n\n            SqlCommand sqlCmd = new SqlCommand(\n                \"SELECT [SSN], [FirstName], [LastName], [BirthDate] FROM [dbo].[Patients] WHERE [SSN]=@SSN\",\n                new SqlConnection(connectionString));\n\n            SqlParameter paramSSN = new SqlParameter(@\"@SSN\", ssn);\n            paramSSN.DbType = DbType.AnsiStringFixedLength;\n            paramSSN.Direction = ParameterDirection.Input;\n            paramSSN.Size = 11;\n\n            sqlCmd.Parameters.Add(paramSSN);\n\n\n            using (sqlCmd.Connection = new SqlConnection(connectionString))\n            {\n                try\n                {\n                    sqlCmd.Connection.Open();\n                    SqlDataReader reader = sqlCmd.ExecuteReader();\n\n                    if (reader.HasRows)\n                    {\n                        while (reader.Read())\n                        {\n                            patient = new Patient()\n                            {\n                                SSN = reader[0].ToString(),\n                                FirstName = reader[1].ToString(),\n                                LastName = reader[\"LastName\"].ToString(),\n                                BirthDate = (DateTime)reader[\"BirthDate\"]\n                            };\n                        }\n                    }\n                    else\n                    {\n                        patient = null;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    throw;\n                }\n            }\n            return patient;\n        }\n\n\n        // This method simply deletes all records in the Patients table to reset our demo.\n        static int ResetPatientsTable()\n        {\n            int returnValue = 0;\n\n            SqlCommand sqlCmd = new SqlCommand(\"DELETE FROM Patients\");\n            using (sqlCmd.Connection = new SqlConnection(connectionString))\n            {\n                try\n                {\n                    sqlCmd.Connection.Open();\n                    sqlCmd.ExecuteNonQuery();\n\n                }\n                catch (Exception ex)\n                {\n                    returnValue = 1;\n                }\n            }\n            return returnValue;\n        }\n    }\n\n    class Patient\n    {\n        public string SSN { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public DateTime BirthDate { get; set; }\n    }\n    }\n\n\n## 确保数据已加密\n\n若要快速查看服务器上的实际数据是否已加密，可以通过 SSMS 对患者数据进行轻松查询（使用当前的连接，其中，列加密设置尚未启用）。\n\n针对 Clinic 数据库运行以下查找：\n\n    SELECT FirstName, LastName, SSN, BirthDate FROM Patients;\n\n你可以看到，加密的列不包含任何明文数据。\n\n   ![新建控制台应用程序](./media/sql-database-always-encrypted/ssms-encrypted.png)\n\n\n若要使用 SSMS 来访问明文数据，可将 **Column Encryption Setting=enabled** 参数添加到连接中。\n\n1. 在 SSMS 中，右键单击“对象资源管理器”中的服务器，然后单击“断开连接”。\n2. 单击“连接”>“数据库引擎”打开“连接到服务器”窗口，然后单击“选项”。\n3. 单击“其他连接参数”，然后键入 **Column Encryption Setting=enabled**。\n\n    ![新建控制台应用程序](./media/sql-database-always-encrypted/ssms-connection-parameter.png)\n\n4. 针对 Clinic 数据库运行以下查找：\n\n        SELECT FirstName, LastName, SSN, BirthDate FROM Patients;\n\n     现在，你可以看到已加密列中的明文数据。\n\n\n    ![新建控制台应用程序](./media/sql-database-always-encrypted/ssms-plaintext.png)\n\n\n\n> [AZURE.NOTE] 如果你从其他计算机使用 SSMS（或任何客户端）进行连接，则无法访问加密密钥，因此无法解密数据。\n\n\n\n## 后续步骤\n创建使用始终加密的数据库以后，你可能需要执行以下操作：\n\n- 从另一台计算机运行此示例。此示例无法访问加密密钥，因此无法访问明文数据，导致无法成功运行。 \n- [轮换使用和清除密钥](https://msdn.microsoft.com/zh-cn/library/mt607048.aspx)。\n- [迁移已使用始终加密加密的数据](https://msdn.microsoft.com/zh-cn/library/mt621539.aspx)\n- 将始终加密证书部署到其他客户端计算机。\n\n\n## 相关信息\n\n- [始终加密（客户端开发）](https://msdn.microsoft.com/zh-cn/library/mt147923.aspx)\n- [透明数据加密](https://msdn.microsoft.com/zh-cn/library/bb934049.aspx)\n- [SQL Server 加密](https://msdn.microsoft.com/zh-cn/library/bb510663.aspx)\n- [始终加密向导](https://msdn.microsoft.com/zh-cn/library/mt459280.aspx)\n- [始终加密博客](http://blogs.msdn.com/b/sqlsecurity/archive/tags/always%20encrypted)\n\n<!---HONumber=Mooncake_0215_2016-->\n"
}