{
  "nodes": [
    {
      "content": "对 Web 应用有效使用 DevOps 环境",
      "pos": [
        26,
        48
      ]
    },
    {
      "content": "了解如何使用部署槽来设置和管理应用程序的多个开发环境",
      "pos": [
        66,
        92
      ]
    },
    {
      "content": "对 Web 应用有效使用 DevOps 环境",
      "pos": [
        301,
        323
      ]
    },
    {
      "content": "本文说明如何针对应用程序的多个版本（例如开发、过渡、QA 和生产）来设置和管理 Web 应用程序部署。应用程序的每个版本可被视为满足部署过程特定需求的开发环境，例如，开发团队可以使用 QA 环境来测试应用程序的质量，然后将更改推送到生产环境。",
      "pos": [
        325,
        446
      ]
    },
    {
      "content": "设置多个开发环境可能是具挑战性的任务，因为需要在这些环境之间跟踪、管理资源（计算、Web 应用程序、数据库、缓存等），以及在不同的环境之间部署内容。",
      "pos": [
        447,
        521
      ]
    },
    {
      "content": "设置非生产环境（过渡、开发、QA）",
      "pos": [
        526,
        543
      ]
    },
    {
      "pos": [
        544,
        690
      ],
      "content": "生产 Web 应用启动并运行之后，下一步是创建非生产环境。为了使用部署槽，请确保你在<bpt id=\"p1\">**</bpt>标准<ept id=\"p1\">**</ept> App Service 计划模式下运行。部署槽实际上是具有自身主机名的实时 Web 应用。两个部署槽（包括生产槽）之间的 Web 应用内容与配置元素可以交换。将应用程序部署到部署槽具有以下优点："
    },
    {
      "content": "你可以在分阶段部署槽中验证 Web 应用更改，然后将其与生产槽交换。",
      "pos": [
        695,
        729
      ]
    },
    {
      "content": "首先将 Web 应用部署到槽，然后将其交换到生产，这确保槽的所有实例都预热，然后交换到生产。部署你的 Web 应用时，这消除了停机时间。流量重定向是无缝的，且不会因交换操作而删除任何请求。",
      "pos": [
        733,
        827
      ]
    },
    {
      "content": "交换后，具有以前分阶段 Web 应用的槽现在具有以前的生产 Web 应用。如果交换到生产槽的更改与你的预期不同，你可以立即执行同一交换来收回“上一已知的良好 Web 应用”。",
      "pos": [
        832,
        919
      ]
    },
    {
      "pos": [
        921,
        1105
      ],
      "content": "若要设置过渡部署槽，请参阅<bpt id=\"p1\">[</bpt>为 Azure 中的 Web 应用设置过渡环境<ept id=\"p1\">](/documentation/articles/web-sites-staged-publishing)</ept>。每个环境应该包含自身的一组资源，例如，如果 Web 应用使用数据库，则生产和过渡 Web 应用应该使用不同的数据库。添加过渡开发环境资源，例如数据库、存储或缓存，用于设置过渡开发环境。"
    },
    {
      "content": "使用多个开发环境的示例",
      "pos": [
        1110,
        1121
      ]
    },
    {
      "content": "任何项目应该遵循具有至少两个环境（开发和生产环境）的源代码管理，但在使用内容管理系统、应用程序框架等时，我们可能遇到应用程序原本不支持这种方案的问题。下面讨论的某些流行框架正是如此。使用 CMS/框架时，你要考虑到很多问题，例如",
      "pos": [
        1123,
        1237
      ]
    },
    {
      "content": "如何分解成不同的环境",
      "pos": [
        1242,
        1252
      ]
    },
    {
      "content": "可以更改哪些文件且不影响框架版本更新",
      "pos": [
        1256,
        1274
      ]
    },
    {
      "content": "如何管理每个环境的配置",
      "pos": [
        1278,
        1289
      ]
    },
    {
      "content": "如何管理模块/插件版本更新、核心框架版本更新",
      "pos": [
        1293,
        1315
      ]
    },
    {
      "content": "有多种方法可为项目设置多个环境，以下示例只是相关应用程序使用的一种方法。",
      "pos": [
        1317,
        1353
      ]
    },
    {
      "content": "WordPress",
      "pos": [
        1359,
        1368
      ]
    },
    {
      "content": "在本部分中，你将学习如何使用 WordPress 槽来设置部署工作流。与大多数 CMS 解决方案一样，WordPress 原本并不支持使用多个开发环境。Azure Web Apps 有一些功能可让你更轻松地将配置设置存储在代码之外。",
      "pos": [
        1369,
        1485
      ]
    },
    {
      "pos": [
        1487,
        1607
      ],
      "content": "在创建过渡槽之前，请设置应用程序代码以支持多个环境。若要在 WordPress 中支持多个环境，需要在本地开发 Web 应用上编辑 <ph id=\"ph1\">`wp-config.php`</ph>，并在文件的开头添加以下代码。这样，应用程序就可以根据所选环境选择正确的配置。"
    },
    {
      "pos": [
        2350,
        2452
      ],
      "content": "在 Web 应用根目录下创建名为 <ph id=\"ph1\">`config`</ph> 的文件夹，并添加两个文件：<ph id=\"ph2\">`wp-config.azure.php`</ph> 和 <ph id=\"ph3\">`wp-config.local.php`</ph>，分别代表 Azure 和本地环境。"
    },
    {
      "pos": [
        2454,
        2486
      ],
      "content": "复制 <ph id=\"ph1\">`wp-config.local.php`</ph> 中的以下内容："
    },
    {
      "pos": [
        3925,
        4053
      ],
      "content": "设置上述安全密钥可以帮助防止 Web 应用受到黑客攻击，因此请使用唯一值。如果需要为前面所述的安全密钥生成字符串，你可通过此<bpt id=\"p1\">[</bpt>链接<ept id=\"p1\">](https://api.wordpress.org/secret-key/1.1/salt)</ept>使用自动生成器来创建新密钥/值"
    },
    {
      "pos": [
        4055,
        4087
      ],
      "content": "复制 <ph id=\"ph1\">`wp-config.azure.php`</ph> 中的以下代码："
    },
    {
      "content": "使用相对路径",
      "pos": [
        6077,
        6083
      ]
    },
    {
      "pos": [
        6084,
        6387
      ],
      "content": "最后一件事是允许 WordPress 应用使用相对路径。WordPress 在数据库中存储 URL 信息。这会使得在不同环境间移动内容变得困难，因为每次从本地转移到过渡环境或者从过渡环境转移到生产环境时，都需要更新数据库。若要降低每次在不同环境间部署数据库时造成问题的风险，请使用<bpt id=\"p1\">[</bpt>相对根链接插件<ept id=\"p1\">](https://wordpress.org/plugins/root-relative-urls/)</ept>，你可以使用 WordPress 管理员仪表板来安装它，或者从<bpt id=\"p2\">[</bpt>此处<ept id=\"p2\">](https://downloads.wordpress.org/plugin/root-relative-urls.zip)</ept>手动下载。"
    },
    {
      "pos": [
        6389,
        6452
      ],
      "content": "将以下条目添加到 <ph id=\"ph1\">`wp-config.php`</ph> 文件中的 <ph id=\"ph2\">`That's all, stop editing!`</ph> 注释前面："
    },
    {
      "pos": [
        6811,
        6881
      ],
      "content": "通过 WordPress 管理员仪表板中的“<ph id=\"ph1\">`Plugins`</ph>”菜单激活该插件。保存 WordPress 应用的 permalink 设置。"
    },
    {
      "pos": [
        6888,
        6910
      ],
      "content": "最终的 <ph id=\"ph1\">`wp-config.php`</ph> 文件"
    },
    {
      "pos": [
        6911,
        7025
      ],
      "content": "任何 WordPress 核心更新并不影响 <ph id=\"ph1\">`wp-config.php`</ph>、<ph id=\"ph2\">`wp-config.azure.php`</ph> 和 <ph id=\"ph3\">`wp-config.local.php`</ph> 文件。<ph id=\"ph4\">`wp-config.php`</ph> 文件最终看起来像是这样"
    },
    {
      "content": "设置过渡环境",
      "pos": [
        9097,
        9103
      ]
    },
    {
      "content": "假设你已在 Azure Web 上运行了 WordPress Web 应用，请登录 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](http://manage.windowsazure.cn)</ept>并转到该 WordPress Web 应用。",
      "pos": [
        9104,
        9211
      ]
    },
    {
      "content": "单击“仪表板”-&gt;“速览”-&gt;“添加新部署槽”以创建名为 stage 的部署槽。部署槽是与上面创建的主要网站共享相同资源的另一个网站。",
      "pos": [
        9212,
        9279
      ]
    },
    {
      "pos": [
        9282,
        9440
      ],
      "content": "添加另一个 MySQL 数据库，假设为 <ph id=\"ph1\">`wordpress-stage-db`</ph>。将过渡部署槽的连接字符串更新为指向新建的数据库 <ph id=\"ph2\">`wordpress-stage-db`</ph>。请注意，生产网站 <ph id=\"ph3\">`wordpressapp-group`</ph> 和过渡网站 <ph id=\"ph4\">`wordpressprodapp-stage`</ph> 必须指向不同的数据库。"
    },
    {
      "content": "配置环境特定的应用设置",
      "pos": [
        9447,
        9458
      ]
    },
    {
      "pos": [
        9459,
        9639
      ],
      "content": "开发人员可以在 Azure 中存储键-值字符串对，作为与名为“应用设置”的 Web 应用关联的配置信息的一部分。在运行时，Azure Web Apps 将自动检索这些值，并使这些值可供 Web 应用中运行的代码使用。从安全角度来看，这可以带来优势，因为包含密码的数据库连接字符串等机密信息永远不会以明文形式显示在文件（例如 <ph id=\"ph1\">`wp-config.php`</ph>）中。"
    },
    {
      "content": "执行更新时，下面定义的过程会很有帮助，因为它同时包含 WordPress 应用的文件更改和数据库更改：",
      "pos": [
        9641,
        9692
      ]
    },
    {
      "content": "WordPress 版本升级",
      "pos": [
        9696,
        9710
      ]
    },
    {
      "content": "新增、编辑或升级插件",
      "pos": [
        9713,
        9723
      ]
    },
    {
      "content": "新增、编辑或升级主题",
      "pos": [
        9726,
        9736
      ]
    },
    {
      "content": "配置应用设置：",
      "pos": [
        9738,
        9745
      ]
    },
    {
      "content": "数据库信息",
      "pos": [
        9749,
        9754
      ]
    },
    {
      "content": "打开/关闭 WordPress 日志记录",
      "pos": [
        9757,
        9777
      ]
    },
    {
      "content": "WordPress 安全设置",
      "pos": [
        9780,
        9794
      ]
    },
    {
      "content": "请确保为生产 Web 应用和过渡槽添加了以下应用设置。请注意，生产 Web 应用和过渡 Web 应用使用不同的数据库。",
      "pos": [
        9797,
        9856
      ]
    },
    {
      "content": "取消选中除 WP\\_ENV 以外的所有设置参数的“槽设置”复选框。这会交换 Web 应用以及文件内容和数据库的配置。如果“槽设置”<bpt id=\"p1\">**</bpt>已选中<ept id=\"p1\">**</ept>，则执行交换操作时，Web 应用的应用设置和连接字符串配置将不会跨环境移动，因此，如果存在任何数据库更改，将不会中断你的生产 Web 应用。",
      "pos": [
        9857,
        9999
      ]
    },
    {
      "content": "使用 WebMatrix 或所选的工具（例如 FTP、Git 或 PhpMyAdmin）将本地开发环境 Web 应用部署到过渡 Web 应用和数据库。",
      "pos": [
        10001,
        10076
      ]
    },
    {
      "content": "WordPress Web 应用的 Web Matrix 发布对话框",
      "pos": [
        10080,
        10114
      ]
    },
    {
      "content": "浏览并测试你的过渡 Web 应用。假设要更新 Web 应用的主题，可以使用以下过渡 Web 应用。",
      "pos": [
        10195,
        10244
      ]
    },
    {
      "content": "交换槽之前浏览过渡 Web 应用",
      "pos": [
        10248,
        10264
      ]
    },
    {
      "content": "如果一切看起来正常，请使用以下 PowerShell 交换网站槽。",
      "pos": [
        10344,
        10377
      ]
    },
    {
      "pos": [
        12198,
        12463
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 上述脚本是针对 Azure PowerShell 1.0.2 或更高版本编写的。对于更低的版本，请相应地更改命令。有关详细信息，请参阅博客<bpt id=\"p1\">[</bpt>在中国使用的 Azure PowerShell 1.0.0 或更高版本<ept id=\"p1\">](http://blogs.msdn.com/b/azchina/archive/2015/12/18/azure-powershell-1.0.0_e54e0a4e48722c6728572d4efd56_azure_7f4f28758476e86c0f618b4e7998_.aspx)</ept>。"
    },
    {
      "content": "必须使用此 PowerShell 脚本（或其他类似的方式，如 Azure CLI）来执行交换，以保留每个槽的应用设置。如果在 Azure 管理门户中执行交换，则执行交换操作时，网站的应用设置、连接字符串配置将不会跨环境移动，因此，如果存在任何数据库更改，在中断生产网站时将看不到这些更改。",
      "pos": [
        12465,
        12609
      ]
    },
    {
      "content": "如果需要交换一些应用设置，同时保留其他一些应用设置，你可以在上述脚本中编辑变量 <ph id=\"ph1\">`$hash`</ph> 和 <ph id=\"ph2\">`$hash_stage`</ph>。",
      "pos": [
        12629,
        12693
      ]
    },
    {
      "content": "这是在执行交换之前的 WordPress 生产 Web 应用",
      "pos": [
        12695,
        12725
      ]
    },
    {
      "content": "交换槽之前的生产 Web 应用",
      "pos": [
        12728,
        12743
      ]
    },
    {
      "content": "执行交换操作之后，主题已在生产 Web 应用上更新。",
      "pos": [
        12821,
        12847
      ]
    },
    {
      "content": "交换槽之后的生产 Web 应用",
      "pos": [
        12851,
        12866
      ]
    },
    {
      "pos": [
        12944,
        13111
      ],
      "content": "如果你需要<bpt id=\"p1\">**</bpt>回滚<ept id=\"p1\">**</ept>，可以转到生产 Web 应用设置，并单击“交换”按钮将 Web 应用与数据库从生产槽交换到过渡槽。要记住的重点是，如果数据库的更改是在任意给定时间随<bpt id=\"p2\">**</bpt>交换<ept id=\"p2\">**</ept>操作而包含的，则下次重新部署到过渡 Web 应用时，你需要将数据库更改部署到过渡 Web 应用的当前数据库，而该数据库以前可能是生产数据库或过渡数据库。"
    },
    {
      "content": "摘要",
      "pos": [
        13118,
        13120
      ]
    },
    {
      "content": "将适用于包含数据库的任何应用程序的过程通用化",
      "pos": [
        13121,
        13143
      ]
    },
    {
      "content": "在本地环境中安装应用程序",
      "pos": [
        13148,
        13160
      ]
    },
    {
      "content": "包含环境特定的配置（本地和 Azure Web 应用）",
      "pos": [
        13164,
        13191
      ]
    },
    {
      "content": "在 Azure Web 应用中设置环境 - 过渡、生产",
      "pos": [
        13195,
        13222
      ]
    },
    {
      "content": "如果已在 Azure 上运行生产应用程序，请将生产内容（文件/代码和数据库）同步到本地和过渡环境。",
      "pos": [
        13226,
        13275
      ]
    },
    {
      "content": "在本地环境中开发应用程序",
      "pos": [
        13279,
        13291
      ]
    },
    {
      "content": "将生产 Web 应用置于维护或锁定模式，并将数据库内容从生产环境同步到过渡环境和开发环境",
      "pos": [
        13295,
        13339
      ]
    },
    {
      "content": "部署到过渡环境和测试环境",
      "pos": [
        13343,
        13355
      ]
    },
    {
      "content": "部署到生产环境",
      "pos": [
        13359,
        13366
      ]
    },
    {
      "content": "重复步骤 4 至 6",
      "pos": [
        13370,
        13380
      ]
    },
    {
      "content": "参考",
      "pos": [
        13385,
        13387
      ]
    },
    {
      "content": "使用 Azure Web 应用进行灵便软件开发",
      "pos": [
        13389,
        13412
      ]
    },
    {
      "content": "为 Azure 中的 Web 应用设置过渡环境",
      "pos": [
        13480,
        13503
      ]
    },
    {
      "content": "如何阻止对非生产部署槽的 Web 访问",
      "pos": [
        13560,
        13579
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"对 Web 应用有效使用 DevOps 环境\"\n   description=\"了解如何使用部署槽来设置和管理应用程序的多个开发环境\"\n   services=\"app-service\\web\"\n   documentationCenter=\"\"\n   authors=\"sunbuild\"\n   manager=\"yochayk\"\n   editor=\"\"/>\n\n<tags\n    ms.service=\"app-service\"\n    ms.date=\"12/24/2015\"\n    wacn.date=\"02/26/2016\"/>\n\n# 对 Web 应用有效使用 DevOps 环境\n\n本文说明如何针对应用程序的多个版本（例如开发、过渡、QA 和生产）来设置和管理 Web 应用程序部署。应用程序的每个版本可被视为满足部署过程特定需求的开发环境，例如，开发团队可以使用 QA 环境来测试应用程序的质量，然后将更改推送到生产环境。\n设置多个开发环境可能是具挑战性的任务，因为需要在这些环境之间跟踪、管理资源（计算、Web 应用程序、数据库、缓存等），以及在不同的环境之间部署内容。\n\n## 设置非生产环境（过渡、开发、QA）\n生产 Web 应用启动并运行之后，下一步是创建非生产环境。为了使用部署槽，请确保你在**标准** App Service 计划模式下运行。部署槽实际上是具有自身主机名的实时 Web 应用。两个部署槽（包括生产槽）之间的 Web 应用内容与配置元素可以交换。将应用程序部署到部署槽具有以下优点：\n\n1. 你可以在分阶段部署槽中验证 Web 应用更改，然后将其与生产槽交换。\n2. 首先将 Web 应用部署到槽，然后将其交换到生产，这确保槽的所有实例都预热，然后交换到生产。部署你的 Web 应用时，这消除了停机时间。流量重定向是无缝的，且不会因交换操作而删除任何请求。 \n3. 交换后，具有以前分阶段 Web 应用的槽现在具有以前的生产 Web 应用。如果交换到生产槽的更改与你的预期不同，你可以立即执行同一交换来收回“上一已知的良好 Web 应用”。\n\n若要设置过渡部署槽，请参阅[为 Azure 中的 Web 应用设置过渡环境](/documentation/articles/web-sites-staged-publishing)。每个环境应该包含自身的一组资源，例如，如果 Web 应用使用数据库，则生产和过渡 Web 应用应该使用不同的数据库。添加过渡开发环境资源，例如数据库、存储或缓存，用于设置过渡开发环境。\n\n## 使用多个开发环境的示例\n\n任何项目应该遵循具有至少两个环境（开发和生产环境）的源代码管理，但在使用内容管理系统、应用程序框架等时，我们可能遇到应用程序原本不支持这种方案的问题。下面讨论的某些流行框架正是如此。使用 CMS/框架时，你要考虑到很多问题，例如\n\n1. 如何分解成不同的环境\n2. 可以更改哪些文件且不影响框架版本更新\n3. 如何管理每个环境的配置\n4. 如何管理模块/插件版本更新、核心框架版本更新\n\n有多种方法可为项目设置多个环境，以下示例只是相关应用程序使用的一种方法。\n\n### WordPress\n在本部分中，你将学习如何使用 WordPress 槽来设置部署工作流。与大多数 CMS 解决方案一样，WordPress 原本并不支持使用多个开发环境。Azure Web Apps 有一些功能可让你更轻松地将配置设置存储在代码之外。\n\n在创建过渡槽之前，请设置应用程序代码以支持多个环境。若要在 WordPress 中支持多个环境，需要在本地开发 Web 应用上编辑 `wp-config.php`，并在文件的开头添加以下代码。这样，应用程序就可以根据所选环境选择正确的配置。\n\n    // Support multiple environments\n    // set the config file based on current environment\n    /**/\n    if (strpos(filter_input(INPUT_SERVER, 'HTTP_HOST', FILTER_SANITIZE_STRING),'localhost') !== false) {\n        // local development\n        $config_file = 'config/wp-config.local.php';\n    }\n    elseif  ((strpos(getenv('WP_ENV'),'stage') !== false) ||  (strpos(getenv('WP_ENV'),'prod' )!== false )){\n          //single file for all azure development environments\n          $config_file = 'config/wp-config.azure.php';\n    }\n    $path = dirname(__FILE__) . '/';\n    if (file_exists($path . $config_file)) {\n        // include the config file if it exists, otherwise WP is going to fail\n        require_once $path . $config_file;\n    }\n\n\n\n在 Web 应用根目录下创建名为 `config` 的文件夹，并添加两个文件：`wp-config.azure.php` 和 `wp-config.local.php`，分别代表 Azure 和本地环境。\n\n复制 `wp-config.local.php` 中的以下内容：\n\n    <?php\n    // MySQL settings\n    /** The name of the database for WordPress */\n    \n    define('DB_NAME', 'yourdatabasename');\n    \n    /** MySQL database username */\n    define('DB_USER', 'yourdbuser');\n    \n    /** MySQL database password */\n    define('DB_PASSWORD', 'yourpassword');\n    \n    /** MySQL hostname */\n    define('DB_HOST', 'localhost');\n    /**\n     * For developers: WordPress debugging mode.\n     * * Change this to true to enable the display of notices during development.\n     * It is strongly recommended that plugin and theme developers use WP_DEBUG\n     * in their development environments.\n     */\n    define('WP_DEBUG', true);\n    \n    //Security key settings\n    define('AUTH_KEY',         'put your unique phrase here');\n    define('SECURE_AUTH_KEY',  'put your unique phrase here');\n    define('LOGGED_IN_KEY',    'put your unique phrase here');\n    define('NONCE_KEY',        'put your unique phrase here');\n    define('AUTH_SALT',        'put your unique phrase here');\n    define('SECURE_AUTH_SALT', 'put your unique phrase here');\n    define('LOGGED_IN_SALT',   'put your unique phrase here');\n    define('NONCE_SALT',       'put your unique phrase here');\n    \n    /**\n     * WordPress Database Table prefix.\n     *\n     * You can have multiple installations in one database if you give each a unique\n     * prefix. Only numbers, letters, and underscores please!\n     */\n    $table_prefix  = 'wp_';\n\n设置上述安全密钥可以帮助防止 Web 应用受到黑客攻击，因此请使用唯一值。如果需要为前面所述的安全密钥生成字符串，你可通过此[链接](https://api.wordpress.org/secret-key/1.1/salt)使用自动生成器来创建新密钥/值\n\n复制 `wp-config.azure.php` 中的以下代码：\n\n\n    <?php\n    // MySQL settings\n    /** The name of the database for WordPress */\n    \n    define('DB_NAME', getenv('DB_NAME'));\n    \n    /** MySQL database username */\n    define('DB_USER', getenv('DB_USER'));\n    \n    /** MySQL database password */\n    define('DB_PASSWORD', getenv('DB_PASSWORD'));\n    \n    /** MySQL hostname */\n    define('DB_HOST', getenv('DB_HOST'));\n    \n    /**\n    * For developers: WordPress debugging mode.\n    *\n    * Change this to true to enable the display of notices during development.\n    * It is strongly recommended that plugin and theme developers use WP_DEBUG\n    * in their development environments.\n    * Turn on debug logging to investigate issues without displaying to end user. For WP_DEBUG_LOG to\n    * do anything, WP_DEBUG must be enabled (true). WP_DEBUG_DISPLAY should be used in conjunction\n    * with WP_DEBUG_LOG so that errors are not displayed on the page */\n    \n    */\n    define('WP_DEBUG', getenv('WP_DEBUG'));\n    define('WP_DEBUG_LOG', getenv('TURN_ON_DEBUG_LOG'));\n    define('WP_DEBUG_DISPLAY',false);\n    \n    //Security key settings\n    /** If you need to generate the string for security keys mentioned above, you can go the automatic generator to create new keys/values: https://api.wordpress.org/secret-key/1.1/salt **/\n    define('AUTH_KEY' ,getenv('DB_AUTH_KEY'));\n    define('SECURE_AUTH_KEY',  getenv('DB_SECURE_AUTH_KEY'));\n    define('LOGGED_IN_KEY', getenv('DB_LOGGED_IN_KEY'));\n    define('NONCE_KEY', getenv('DB_NONCE_KEY'));\n    define('AUTH_SALT',  getenv('DB_AUTH_SALT'));\n    define('SECURE_AUTH_SALT', getenv('DB_SECURE_AUTH_SALT'));\n    define('LOGGED_IN_SALT',   getenv('DB_LOGGED_IN_SALT'));\n    define('NONCE_SALT',   getenv('DB_NONCE_SALT'));\n    \n    /**\n    * WordPress Database Table prefix.\n    *\n    * You can have multiple installations in one database if you give each a unique\n    * prefix. Only numbers, letters, and underscores please!\n    */\n    $table_prefix  = getenv('DB_PREFIX');\n\n#### 使用相对路径\n最后一件事是允许 WordPress 应用使用相对路径。WordPress 在数据库中存储 URL 信息。这会使得在不同环境间移动内容变得困难，因为每次从本地转移到过渡环境或者从过渡环境转移到生产环境时，都需要更新数据库。若要降低每次在不同环境间部署数据库时造成问题的风险，请使用[相对根链接插件](https://wordpress.org/plugins/root-relative-urls/)，你可以使用 WordPress 管理员仪表板来安装它，或者从[此处](https://downloads.wordpress.org/plugin/root-relative-urls.zip)手动下载。\n\n将以下条目添加到 `wp-config.php` 文件中的 `That's all, stop editing!` 注释前面：\n\n\n    define('WP_HOME', 'http://' . filter_input(INPUT_SERVER, 'HTTP_HOST', FILTER_SANITIZE_STRING));\n    define('WP_SITEURL', 'http://' . filter_input(INPUT_SERVER, 'HTTP_HOST', FILTER_SANITIZE_STRING));\n    define('WP_CONTENT_URL', '/wp-content');\n    define('DOMAIN\\_CURRENT\\_SITE', filter\\_input(INPUT\\_SERVER, 'HTTP\\_HOST', FILTER\\_SANITIZE\\_STRING));\n\n通过 WordPress 管理员仪表板中的“`Plugins`”菜单激活该插件。保存 WordPress 应用的 permalink 设置。\n\n#### 最终的 `wp-config.php` 文件\n任何 WordPress 核心更新并不影响 `wp-config.php`、`wp-config.azure.php` 和 `wp-config.local.php` 文件。`wp-config.php` 文件最终看起来像是这样\n\n    <?php\n    /**\n     * The base configurations of the WordPress.\n     *\n     * This file has the following configurations: MySQL settings, Table Prefix,\n     * Secret Keys, and ABSPATH. You can find more information by visiting\n     *\n     * Codex page. You can get the MySQL settings from your web host.\n     *\n     * This file is used by the wp-config.php creation script during the\n     * installation. You don't have to use the web web app, you can just copy this file\n     * to \"wp-config.php\" and fill in the values.\n     *\n     * @package WordPress\n     */\n    \n    // Support multiple environments\n    // set the config file based on current environment\n    if (strpos($_SERVER['HTTP_HOST'],'localhost') !== false) { // local development\n        $config_file = 'config/wp-config.local.php';\n    }\n    elseif  ((strpos(getenv('WP_ENV'),'stage') !== false) ||  (strpos(getenv('WP_ENV'),'prod' )!== false )){\n        $config_file = 'config/wp-config.azure.php';\n    }\n    \n    \n    $path = dirname(__FILE__) . '/';\n    if (file_exists($path . $config_file)) {\n        // include the config file if it exists, otherwise WP is going to fail\n        require_once $path . $config_file;\n    }\n    \n    /** Database Charset to use in creating database tables. */\n    define('DB_CHARSET', 'utf8');\n    \n    /** The Database Collate type. Don't change this if in doubt. */\n    define('DB_COLLATE', '');\n    \n    \n    /* That's all, stop editing! Happy blogging. */\n    \n    define('WP_HOME', 'http://' . filter_input(INPUT_SERVER, 'HTTP_HOST', FILTER_SANITIZE_STRING));\n    define('WP_SITEURL', 'http://' . filter_input(INPUT_SERVER, 'HTTP_HOST', FILTER_SANITIZE_STRING));\n    define('WP_CONTENT_URL', '/wp-content');\n    define('DOMAIN_CURRENT_SITE', filter_input(INPUT_SERVER, 'HTTP_HOST', FILTER_SANITIZE_STRING));\n    \n    /** Absolute path to the WordPress directory. */\n    if ( !defined('ABSPATH') )\n        define('ABSPATH', dirname(__FILE__) . '/');\n    \n    /** Sets up WordPress vars and included files. */\n    require_once(ABSPATH . 'wp-settings.php');\n\n#### 设置过渡环境\n假设你已在 Azure Web 上运行了 WordPress Web 应用，请登录 [Azure 管理门户](http://manage.windowsazure.cn)并转到该 WordPress Web 应用。\n单击“仪表板”->“速览”->“添加新部署槽”以创建名为 stage 的部署槽。部署槽是与上面创建的主要网站共享相同资源的另一个网站。\n\n\n添加另一个 MySQL 数据库，假设为 `wordpress-stage-db`。将过渡部署槽的连接字符串更新为指向新建的数据库 `wordpress-stage-db`。请注意，生产网站 `wordpressapp-group` 和过渡网站 `wordpressprodapp-stage` 必须指向不同的数据库。\n\n#### 配置环境特定的应用设置\n开发人员可以在 Azure 中存储键-值字符串对，作为与名为“应用设置”的 Web 应用关联的配置信息的一部分。在运行时，Azure Web Apps 将自动检索这些值，并使这些值可供 Web 应用中运行的代码使用。从安全角度来看，这可以带来优势，因为包含密码的数据库连接字符串等机密信息永远不会以明文形式显示在文件（例如 `wp-config.php`）中。\n\n执行更新时，下面定义的过程会很有帮助，因为它同时包含 WordPress 应用的文件更改和数据库更改：\n\n- WordPress 版本升级\n- 新增、编辑或升级插件\n- 新增、编辑或升级主题\n\n配置应用设置：\n\n- 数据库信息\n- 打开/关闭 WordPress 日志记录\n- WordPress 安全设置\n\n\n请确保为生产 Web 应用和过渡槽添加了以下应用设置。请注意，生产 Web 应用和过渡 Web 应用使用不同的数据库。\n取消选中除 WP\\_ENV 以外的所有设置参数的“槽设置”复选框。这会交换 Web 应用以及文件内容和数据库的配置。如果“槽设置”**已选中**，则执行交换操作时，Web 应用的应用设置和连接字符串配置将不会跨环境移动，因此，如果存在任何数据库更改，将不会中断你的生产 Web 应用。\n\n使用 WebMatrix 或所选的工具（例如 FTP、Git 或 PhpMyAdmin）将本地开发环境 Web 应用部署到过渡 Web 应用和数据库。\n\n![WordPress Web 应用的 Web Matrix 发布对话框](./media/app-service-web-staged-publishing-realworld-scenarios/4wmpublish.png)\n\n浏览并测试你的过渡 Web 应用。假设要更新 Web 应用的主题，可以使用以下过渡 Web 应用。\n\n![交换槽之前浏览过渡 Web 应用](./media/app-service-web-staged-publishing-realworld-scenarios/5wpstage.png)\n\n\n如果一切看起来正常，请使用以下 PowerShell 交换网站槽。\n\n\n    try{\n        $acct = Get-AzureRmSubscription\n    }\n    catch{\n        Login-AzureRmAccount -EnvironmentName AzureChinaCloud\n    }\n    \n    # this is the resource group of you web site.\n    # If you didn't specify during creation, by default, it's \"Default-Web-ChinaEast\" or \"Default-Web-ChinaNorth\"\n    $myResourceGroup = '<your resource Group>'\n    $mySite = '<your web site name>'\n    $stageSlot = '<your source slot>'\n    \n    \n    $props = (Invoke-AzureRmResourceAction -ResourceGroupName $myResourceGroup `\n                -ResourceType Microsoft.Web/sites/Config -Name $mySite/appsettings `\n                -Action list -ApiVersion 2015-08-01 -Force).Properties\n\n    $props_stage = (Invoke-AzureRmResourceAction -ResourceGroupName $myResourceGroup `\n                -ResourceType Microsoft.Web/sites/slots/Config -Name $mySite/$stageSlot/appsettings `\n                -Action list -ApiVersion 2015-08-01 -Force).Properties \n    \n    $hash = @{}\n    $props | Get-Member -MemberType NoteProperty | % { $hash[$_.Name] = $props.($_.Name) }\n    \n    $hash_stage = @{}\n    $props_stage | Get-Member -MemberType NoteProperty | % { $hash_stage[$_.Name] = $props_stage.($_.Name) }\n    \n    Set-AzureRMWebAppSlot -ResourceGroupName $myResourceGroup `\n                -Name $mySite -Slot $stageSlot -AppSettings $hash\n    \n    $ParametersObject = @{targetSlot = 'production'}\n    Invoke-AzureRmResourceAction -ResourceGroupName $myResourceGroup `\n                -ResourceType Microsoft.Web/sites/slots `\n                -ResourceName $mySite/$stageSlot `\n                -Action slotsswap `\n                -Parameters $ParametersObject `\n                -ApiVersion 2015-08-01\n\n    Set-AzureRMWebAppSlot -ResourceGroupName $myResourceGroup `\n                -Name $mySite -Slot $stageSlot -AppSettings $hash_stage\n\n> [AZURE.NOTE] 上述脚本是针对 Azure PowerShell 1.0.2 或更高版本编写的。对于更低的版本，请相应地更改命令。有关详细信息，请参阅博客[在中国使用的 Azure PowerShell 1.0.0 或更高版本](http://blogs.msdn.com/b/azchina/archive/2015/12/18/azure-powershell-1.0.0_e54e0a4e48722c6728572d4efd56_azure_7f4f28758476e86c0f618b4e7998_.aspx)。\n\n必须使用此 PowerShell 脚本（或其他类似的方式，如 Azure CLI）来执行交换，以保留每个槽的应用设置。如果在 Azure 管理门户中执行交换，则执行交换操作时，网站的应用设置、连接字符串配置将不会跨环境移动，因此，如果存在任何数据库更改，在中断生产网站时将看不到这些更改。\n\n\n > [AZURE.NOTE]\n 如果需要交换一些应用设置，同时保留其他一些应用设置，你可以在上述脚本中编辑变量 `$hash` 和 `$hash_stage`。\n\n这是在执行交换之前的 WordPress 生产 Web 应用\n![交换槽之前的生产 Web 应用](./media/app-service-web-staged-publishing-realworld-scenarios/7bfswap.png)\n\n执行交换操作之后，主题已在生产 Web 应用上更新。\n\n![交换槽之后的生产 Web 应用](./media/app-service-web-staged-publishing-realworld-scenarios/8afswap.png)\n\n如果你需要**回滚**，可以转到生产 Web 应用设置，并单击“交换”按钮将 Web 应用与数据库从生产槽交换到过渡槽。要记住的重点是，如果数据库的更改是在任意给定时间随**交换**操作而包含的，则下次重新部署到过渡 Web 应用时，你需要将数据库更改部署到过渡 Web 应用的当前数据库，而该数据库以前可能是生产数据库或过渡数据库。\n\n#### 摘要\n将适用于包含数据库的任何应用程序的过程通用化\n\n1. 在本地环境中安装应用程序\n2. 包含环境特定的配置（本地和 Azure Web 应用）\n3. 在 Azure Web 应用中设置环境 - 过渡、生产\n4. 如果已在 Azure 上运行生产应用程序，请将生产内容（文件/代码和数据库）同步到本地和过渡环境。\n5. 在本地环境中开发应用程序\n6. 将生产 Web 应用置于维护或锁定模式，并将数据库内容从生产环境同步到过渡环境和开发环境\n7. 部署到过渡环境和测试环境\n8. 部署到生产环境\n9. 重复步骤 4 至 6\n\n## 参考\n[使用 Azure Web 应用进行灵便软件开发](/documentation/articles/app-service-agile-software-development)\n\n[为 Azure 中的 Web 应用设置过渡环境](/documentation/articles/web-sites-staged-publishing)\n\n[如何阻止对非生产部署槽的 Web 访问](http://ruslany.net/2014/04/azure-web-sites-block-web-access-to-non-production-deployment-slots/)\n\n<!---HONumber=Mooncake_0215_2016-->"
}