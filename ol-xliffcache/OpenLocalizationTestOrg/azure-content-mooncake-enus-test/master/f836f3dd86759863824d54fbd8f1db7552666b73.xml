{
  "nodes": [
    {
      "content": "服务总线中继消息传送教程 | Microsoft Azure",
      "pos": [
        27,
        57
      ]
    },
    {
      "content": "使用服务总线中继消息传送继构建服务总线客户端应用程序。",
      "pos": [
        75,
        102
      ]
    },
    {
      "content": "服务总线中继消息传送教程",
      "pos": [
        315,
        327
      ]
    },
    {
      "pos": [
        329,
        553
      ],
      "content": "本教程介绍了如何使用服务总线“中继”功能，构建简单的服务总线客户端应用程序和服务。有关使用服务总线<bpt id=\"p1\">[</bpt>中转消息传送<ept id=\"p1\">](/documentation/articles/service-bus-messaging-overview#Brokered-messaging)</ept>的相应教程，请参阅<bpt id=\"p2\">[</bpt>服务总线中转消息传送 .NET 教程<ept id=\"p2\">](/documentation/articles/service-bus-brokered-tutorial-dotnet)</ept>。"
    },
    {
      "content": "通过此教程，你可以了解创建服务总线客户端和服务应用程序所需的步骤。正如其 WCF 对应项，服务是公开一个或多个终结点的构造，其中每个终结点都公开一个或多个服务操作。服务的终结点用于指定可在其中找到服务的地址、包含客户端必须与服务进行通信的信息的绑定，以及定义服务向其客户端提供的功能的协定。WCF 和服务总线服务之间的主要区别在于：终结点在云中公开，而不是在本地计算机中公开。",
      "pos": [
        555,
        743
      ]
    },
    {
      "content": "完成本教程中的一系列主题后，你将具有一项正在运行的服务和可以调用服务操作的客户端。第一个主题描述了如何设置帐户。接下来的步骤描述了如何定义使用协定的服务、如何实现服务，以及如何使用代码配置该服务。这些主题还描述了如何托管和运行该服务。创建的服务是自托管的，并且客户端和服务在同一台计算机上运行。你可以通过使用代码或配置文件配置服务。",
      "pos": [
        745,
        911
      ]
    },
    {
      "content": "最后三个步骤介绍如何创建客户端应用程序、如何配置客户端应用程序，以及如何创建和使用可以访问主机功能的客户端。",
      "pos": [
        913,
        967
      ]
    },
    {
      "content": "本部分中的所有主题均假定使用 Visual Studio 作为开发环境。",
      "pos": [
        969,
        1005
      ]
    },
    {
      "content": "注册帐户",
      "pos": [
        1010,
        1014
      ]
    },
    {
      "content": "第一步是创建服务总线服务命名空间并获取共享访问签名 (SAS) 密钥。服务命名空间为每个通过服务总线公开的应用程序提供应用程序边界。服务命名空间与 SAS 密钥的组合为服务总线提供了一个用于验证应用程序访问权限的凭据。",
      "pos": [
        1016,
        1125
      ]
    },
    {
      "content": "若要创建服务命名空间，请访问 [Azure 经典门户][]。单击左侧的“服务总线”，然后单击“创建”。为你的命名空间键入一个名称，然后单击复选标记。",
      "pos": [
        1130,
        1204
      ]
    },
    {
      "pos": [
        1211,
        1248
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 无需针对客户端和服务应用程序使用相同的命名空间。"
    },
    {
      "content": "在门户的主窗口中，单击在上一步中创建的命名空间的名称。",
      "pos": [
        1253,
        1280
      ]
    },
    {
      "content": "单击“配置”以查看命名空间的默认共享访问策略。",
      "pos": [
        1285,
        1308
      ]
    },
    {
      "pos": [
        1313,
        1379
      ],
      "content": "记下 <bpt id=\"p1\">**</bpt>RootManageSharedAccessKey<ept id=\"p1\">**</ept> 策略的主键，或将其复制到剪贴板上。你将在本教程的后面部分使用此值。"
    },
    {
      "content": "定义 WCF 服务协定以用于服务总线",
      "pos": [
        1384,
        1402
      ]
    },
    {
      "pos": [
        1404,
        2150
      ],
      "content": "服务协定用于指定服务支持的操作类型（方法或函数的 Web 服务术语）。约定通过定义 C++、C# 或 Visual Basic 接口来创建。接口中的每个方法都对应一个特定的服务操作。必须将 <bpt id=\"p1\">[</bpt>ServiceContractAttribute<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicecontractattribute.aspx)</ept> 属性应用于每个接口，并且必须将 <bpt id=\"p2\">[</bpt>OperationContractAttribute<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx)</ept> 属性应用于每个操作。如果具有 <bpt id=\"p3\">[</bpt>ServiceContractAttribute<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicecontractattribute.aspx)</ept> 属性的接口中的方法没有 <bpt id=\"p4\">[</bpt>OperationContractAttribute<ept id=\"p4\">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx)</ept> 属性，则该方法是不公开的。该过程后面的示例中提供了这些任务的代码。有关协定和服务的更多讨论，请参阅 WCF 文档中的<bpt id=\"p5\">[</bpt>设计和实现服务<ept id=\"p5\">](https://msdn.microsoft.com/zh-cn/library/ms729746.aspx)</ept>。"
    },
    {
      "content": "使用接口创建服务总线约定",
      "pos": [
        2156,
        2168
      ]
    },
    {
      "content": "在“开始”菜单中右键单击 Visual Studio，以便以管理员身份启动该程序，然后选择“以管理员身份运行”。",
      "pos": [
        2173,
        2229
      ]
    },
    {
      "pos": [
        2234,
        2389
      ],
      "content": "创建新的控制台应用程序项目。单击“文件”菜单并选择“新建”，然后单击“项目”。在“新建项目”对话框中，单击“Visual C#”（如果“Visual C#”未出现，则在“其他语言”下方查看）。单击“控制台应用程序”模板，并将其命名为 <bpt id=\"p1\">**</bpt>EchoService<ept id=\"p1\">**</ept>。使用默认“位置”。单击“确定”以创建该项目。"
    },
    {
      "pos": [
        2394,
        2540
      ],
      "content": "在项目中添加对 <ph id=\"ph1\">`System.ServiceModel.dll`</ph> 的引用：在“解决方案资源管理器”中，右键单击项目文件夹下的“引用”文件夹，然后单击“添加引用”。在“添加引用”对话框中选择“.NET”选项卡并向下滚动，直到看到“System.ServiceModel”。选中后单击“确定”。"
    },
    {
      "content": "在解决方案资源管理中，双击 Program.cs 文件以在编辑器中将其打开。",
      "pos": [
        2545,
        2583
      ]
    },
    {
      "pos": [
        2588,
        2628
      ],
      "content": "为 System.ServiceModel 命名空间添加 <ph id=\"ph1\">`using`</ph> 语句。"
    },
    {
      "pos": [
        2682,
        2823
      ],
      "content": "<bpt id=\"p1\">[</bpt>System.ServiceModel<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.aspx)</ept> 是可以以编程方式访问 WCF 基本功能的命名空间。服务总线使用 WCF 的许多对象和属性来定义服务约定。"
    },
    {
      "pos": [
        2828,
        2892
      ],
      "content": "将命名空间的默认名称 <bpt id=\"p1\">**</bpt>EchoService<ept id=\"p1\">**</ept> 更改为 <bpt id=\"p2\">**</bpt>Microsoft.ServiceBus.Samples<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        2899,
        3133
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> 本教程使用 C# 命名空间 <bpt id=\"p1\">**</bpt>Microsoft.ServiceBus.Samples<ept id=\"p1\">**</ept>，它是协定管理类型的命名空间，此类型用于<bpt id=\"p2\">[</bpt>配置 WCF 客户端中<ept id=\"p2\">](#configure-the-wcf-client)</ept>步骤中的配置文件。在构建此示例时，你可以指定任何想要的命名空间，当你在配置文件中修改了协定以及相应服务的命名空间后，本教程才会生效。在 App.config 文件中指定的命名空间必须与在 C# 文件中指定的命名空间相同。"
    },
    {
      "pos": [
        3138,
        3391
      ],
      "content": "直接在完成 <ph id=\"ph1\">`Microsoft.ServiceBus.Samples`</ph> 命名空间声明后，在命名空间内定义一个名为 <ph id=\"ph2\">`IEchoContract`</ph> 的新接口，然后将 <ph id=\"ph3\">`ServiceContractAttribute`</ph> 属性应用于该接口，其值为 <bpt id=\"p1\">**</bpt>http://samples.microsoft.com/ServiceModel/Relay/<ept id=\"p1\">**</ept>。该命名空间值不同于你在整个代码范围内使用的命名空间。相反，该命名空间值将用作此协定的唯一标识符。显式指定命名空间可防止将默认的命名空间值添加到约定名称中。"
    },
    {
      "pos": [
        3571,
        3814
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>通常情况下，服务协定命名空间包含一个包括版本信息的命名方案。服务协定命名空间中包括的版本信息可以使服务通过将新服务协定定义为新命名空间并将其公开到新的终结点上，来隔离重大更改。以这种方式，客户端可以继续使用旧的服务协定，而无需进行更新。版本信息可能包含日期或内部版本号。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>服务版本控制<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=180498)</ept>。鉴于此教程的目的，服务协定命名空间的命名方案不包含版本信息。"
    },
    {
      "pos": [
        3819,
        3945
      ],
      "content": "在 <ph id=\"ph1\">`IEchoContract`</ph> 接口中，为 <ph id=\"ph2\">`IEchoContract`</ph> 约定在接口中公开的单个操作声明一个方法，然后将 <ph id=\"ph3\">`OperationContractAttribute`</ph> 属性应用到你希望将其作为公共服务总线约定的一部分进行公开的方法中。"
    },
    {
      "pos": [
        4021,
        4084
      ],
      "content": "在该协定外，声明从 <ph id=\"ph1\">`IEchoChannel`</ph> 中继承，并可传承到 <ph id=\"ph2\">`IClientChannel`</ph> 接口的通道，如下所示："
    },
    {
      "content": "通道是主机和客户端用来互相传递信息的 WCF 对象。随后，你将针对通道编写代码，以在两个应用程序之间回显信息。",
      "pos": [
        4395,
        4450
      ]
    },
    {
      "content": "在“生成”菜单中，单击“生成解决方案”或按 F6 以确认到目前为止操作的准确性。",
      "pos": [
        4455,
        4495
      ]
    },
    {
      "content": "示例",
      "pos": [
        4501,
        4503
      ]
    },
    {
      "content": "以下代码显示了一个用于定义服务总线协定的基本接口。",
      "pos": [
        4505,
        4530
      ]
    },
    {
      "content": "既然已创建接口，你可以实现该接口。",
      "pos": [
        5007,
        5024
      ]
    },
    {
      "content": "实现 WCF 协定以使用服务总线",
      "pos": [
        5029,
        5045
      ]
    },
    {
      "pos": [
        5047,
        5387
      ],
      "content": "创建服务总线服务首先需要你创建使用接口定义的协定。有关创建接口的详细信息，请参阅上一步。下一步是实现该接口。此步骤包括创建名为 <ph id=\"ph1\">`EchoService`</ph> 的类，用于实现用户定义的 <ph id=\"ph2\">`IEchoContract`</ph> 接口。实现接口后，即可使用 App.config 配置文件配置接口。该配置文件包含应用程序所需的信息，如服务的名称、约定的名称，以及用来与服务总线通信的协议类型。该过程后面的示例中提供了这些任务所用的代码。有关如何实现服务协定的更多常规讨论，请参阅 Windows Communication Foundation (WCF) 文档中的<bpt id=\"p1\">[</bpt>实现服务协定<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/ms733764.aspx)</ept>。"
    },
    {
      "pos": [
        5392,
        5478
      ],
      "content": "在 <ph id=\"ph1\">`IEchoContract`</ph> 接口定义的正下方创建名为 <ph id=\"ph2\">`EchoService`</ph> 的新类。<ph id=\"ph3\">`EchoService`</ph> 类实现 <ph id=\"ph4\">`IEchoContract`</ph> 接口。"
    },
    {
      "pos": [
        5556,
        5621
      ],
      "content": "与其他接口实现类似，你可以在另一个文件中实现定义。但是，在本教程中，实现所在的文件与接口定义和 <ph id=\"ph1\">`Main`</ph> 方法所在的文件相同。"
    },
    {
      "pos": [
        5626,
        5765
      ],
      "content": "应用指示服务名称和命名空间属性的 <bpt id=\"p1\">[</bpt>ServiceBehaviorAttribute<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicebehaviorattribute.aspx)</ept> 属性."
    },
    {
      "pos": [
        5940,
        5995
      ],
      "content": "在 <ph id=\"ph1\">`EchoService`</ph> 类中，实现 <ph id=\"ph2\">`IEchoContract`</ph> 接口中定义的 <ph id=\"ph3\">`Echo`</ph> 方法。"
    },
    {
      "content": "单击“生成”，然后单击“生成解决方案”以确认工作的准确性。",
      "pos": [
        6135,
        6164
      ]
    },
    {
      "content": "定义服务主机的配置",
      "pos": [
        6170,
        6179
      ]
    },
    {
      "pos": [
        6184,
        6541
      ],
      "content": "配置文件非常类似于 WCF 配置文件。该配置文件包括服务名称、终结点（即，服务总线公开的、让客户端和主机相互通信的位置）和绑定（用于通信的协议类型）。此处的主要差别在于，配置的服务终结点是指 <bpt id=\"p1\">[</bpt>netTcpRelayBinding<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.nettcprelaybinding.aspx)</ept>，它不是 .NET Framework 的一部分。<bpt id=\"p2\">[</bpt>NetTcpRelayBinding<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.nettcprelaybinding.aspx)</ept> 是通过服务总线定义的绑定之一。"
    },
    {
      "content": "在“解决方案资源管理器”中单击 App.config 文件，该文件当前包含以下 XML 元素：",
      "pos": [
        6546,
        6593
      ]
    },
    {
      "pos": [
        6697,
        6795
      ],
      "content": "在 App.config 文件中添加一个 <ph id=\"ph1\">`&lt;system.serviceModel&gt;`</ph> XML 元素。该元素是一个 WCF 元素，用于定义一个或多个服务。在本示例中，它用于定义服务名称和终结点。"
    },
    {
      "pos": [
        6959,
        7043
      ],
      "content": "在 <ph id=\"ph1\">`&lt;system.serviceModel&gt;`</ph> 标记中，添加 <ph id=\"ph2\">`&lt;services&gt;`</ph> 元素。可以在单个配置文件中定义多个服务总线应用程序。但是，本教程只定义一个。"
    },
    {
      "pos": [
        7285,
        7329
      ],
      "content": "在 <ph id=\"ph1\">`&lt;services&gt;`</ph> 元素中，添加 <ph id=\"ph2\">`&lt;service&gt;`</ph> 元素来定义服务名称。"
    },
    {
      "pos": [
        7427,
        7467
      ],
      "content": "在 <ph id=\"ph1\">`&lt;service&gt;`</ph> 元素中，定义终结点协定的位置，以及终结点绑定的类型。"
    },
    {
      "content": "终结点用于定义客户端将在何处查找主机应用程序。接下来，本教程将使用此步骤来创建一个通过服务总线完全公开主机的 URI。绑定声明我们正在将 TCP 用作协议，以与服务总线进行通信。",
      "pos": [
        7587,
        7676
      ]
    },
    {
      "pos": [
        7682,
        7714
      ],
      "content": "直接在 <ph id=\"ph1\">`&lt;services&gt;`</ph> 元素的后面，添加以下绑定扩展。"
    },
    {
      "content": "在“生成”菜单中，单击“生成解决方案”以确认工作的准确性。",
      "pos": [
        8031,
        8060
      ]
    },
    {
      "content": "示例",
      "pos": [
        8066,
        8068
      ]
    },
    {
      "content": "下面的代码显示服务协定的实现。",
      "pos": [
        8070,
        8085
      ]
    },
    {
      "content": "以下代码显示了与该服务主机关联的 App.config 文件的基本格式。",
      "pos": [
        8389,
        8425
      ]
    },
    {
      "content": "托管并运行基本 Web 服务以向服务总线注册",
      "pos": [
        9074,
        9096
      ]
    },
    {
      "content": "此步骤介绍如何运行基本服务总线服务。",
      "pos": [
        9098,
        9116
      ]
    },
    {
      "content": "创建服务总线凭据",
      "pos": [
        9122,
        9130
      ]
    },
    {
      "pos": [
        9135,
        9207
      ],
      "content": "安装<bpt id=\"p1\">[</bpt>服务总线 NuGet 包<ept id=\"p1\">](https://www.nuget.org/packages/WindowsAzure.ServiceBus)</ept>"
    },
    {
      "pos": [
        9212,
        9261
      ],
      "content": "在 <ph id=\"ph1\">`Main()`</ph> 中，创建两个变量，将命名空间和从控制台窗口中读取的 SAS 密钥存储在其中。"
    },
    {
      "pos": [
        9458,
        9523
      ],
      "content": "随后将使用 SAS 密钥来访问你的服务总线项目。命名空间作为参数传递给 <ph id=\"ph1\">`CreateServiceUri`</ph> 以创建服务 URI。"
    },
    {
      "pos": [
        9528,
        9708
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>TransportClientEndpointBehavior<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.transportclientendpointbehavior.aspx)</ept> 对象声明你将使用 SAS 密钥作为凭据类型。在最后一步中添加的代码后直接添加以下代码。"
    },
    {
      "content": "为服务创建基本地址",
      "pos": [
        9949,
        9958
      ]
    },
    {
      "pos": [
        9963,
        10024
      ],
      "content": "在上一个步骤添加的代码后，为服务的基址创建 <ph id=\"ph1\">`Uri`</ph> 实例。此 URI 指定服务总线方案、命名空间，以及服务接口的路径。"
    },
    {
      "pos": [
        10144,
        10313
      ],
      "content": "\"sb\" 是服务总线方案的缩写，并指示我们正在使用 TCP 作为协议。先前当 <bpt id=\"p1\">[</bpt>NetTcpRelayBinding<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.nettcprelaybinding.aspx)</ept> 被指定为绑定时，在配置文件中也指示了这一点。"
    },
    {
      "pos": [
        10323,
        10391
      ],
      "content": "对于本教程中，URI 是 <ph id=\"ph1\">`sb://putServiceNamespaceHere.windows.net/EchoService`</ph>。"
    },
    {
      "content": "创建并配置服务主机",
      "pos": [
        10397,
        10406
      ]
    },
    {
      "pos": [
        10411,
        10432
      ],
      "content": "将连接模式设置为 <ph id=\"ph1\">`AutoDetect`</ph>"
    },
    {
      "pos": [
        10536,
        10900
      ],
      "content": "连接模式描述服务用于与服务总线进行通信的协议；连接模式为 HTTP 或 TCP。使用默认设置 <ph id=\"ph1\">`AutoDetect`</ph>，服务尝试通过 TCP（如果可用）或 HTTP（如果 TCP 不可用）连接到服务总线。请注意这与服务为客户端通信指定的协议不同。为客户端通信指定的协议由所使用的绑定所决定。例如，服务可以使用指定其终结点（公开在服务总线上）的 <bpt id=\"p1\">[</bpt>BasicHttpRelayBinding<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.basichttprelaybinding.aspx)</ept> 绑定通过 HTTP 与客户端通信。同一个服务可以指定 <bpt id=\"p2\">**</bpt>ConnectivityMode.AutoDetect<ept id=\"p2\">**</ept>，以便服务通过 TCP 与服务总线通信。"
    },
    {
      "content": "使用之前在本部分中创建的 URI 创建服务主机。",
      "pos": [
        10905,
        10929
      ]
    },
    {
      "pos": [
        11022,
        11090
      ],
      "content": "该服务主机是可实例化服务的 WCF 对象。在这里你将传递想要创建的服务类型（<ph id=\"ph1\">`EchoService`</ph> 类型），以及想要公开服务的地址。"
    },
    {
      "pos": [
        11095,
        11352
      ],
      "content": "在 Program.cs 文件的顶部，添加对 <bpt id=\"p1\">[</bpt>System.ServiceModel.Description<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.description.aspx)</ept> 和 <bpt id=\"p2\">[</bpt>Microsoft.ServiceBus.Description<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.description.aspx)</ept> 的引用。"
    },
    {
      "pos": [
        11461,
        11487
      ],
      "content": "返回到 <ph id=\"ph1\">`Main()`</ph>，配置终结点以启用公开访问。"
    },
    {
      "pos": [
        11609,
        11743
      ],
      "content": "此步骤告知服务总线可以通过检查项目的服务总线 ATOM 源公开找到你的应用程序。如果你将 <bpt id=\"p1\">**</bpt>DiscoveryType<ept id=\"p1\">**</ept> 设置为 <bpt id=\"p2\">**</bpt>private<ept id=\"p2\">**</ept>，客户端将仍将能够访问该服务。但是，当搜索服务总线命名空间时不会显示该服务。相反，客户端必须事先知道终结点路径。"
    },
    {
      "content": "将服务凭据应用到 App.config 文件中定义的服务终结点：",
      "pos": [
        11748,
        11780
      ]
    },
    {
      "content": "如在上一步中所述，你可能已经在配置文件中声明多个服务和终结点。如果你已配置，此代码将遍历配置文件并且搜索可能应用了凭据的每个终结点。但是，对于本教程中，配置文件只有一个终结点。",
      "pos": [
        11988,
        12076
      ]
    },
    {
      "content": "打开服务主机",
      "pos": [
        12082,
        12088
      ]
    },
    {
      "content": "打开服务。",
      "pos": [
        12093,
        12098
      ]
    },
    {
      "content": "通知用户该服务正在运行，并说明如何关闭服务。",
      "pos": [
        12137,
        12159
      ]
    },
    {
      "content": "完成后，关闭服务主机。",
      "pos": [
        12307,
        12318
      ]
    },
    {
      "content": "按“F6”生成项目。",
      "pos": [
        12358,
        12368
      ]
    },
    {
      "content": "示例",
      "pos": [
        12374,
        12376
      ]
    },
    {
      "content": "下例包括本教程中前面步骤中使用的服务协定和实现，并将服务托管在控制台应用程序中。将以下编译到名为 EchoService.exe 的可执行文件。",
      "pos": [
        12378,
        12450
      ]
    },
    {
      "content": "创建服务协定的 WCF 客户端",
      "pos": [
        15057,
        15072
      ]
    },
    {
      "content": "下一步将创建基本服务总线客户端，并定义将在后续步骤中实现的服务协定。请注意，许多这样的步骤类似于用于创建服务的步骤：定义协定、编辑 App.config 文件、使用凭据来连接到服务总线等。该过程后面的示例中提供了这些任务所用的代码。",
      "pos": [
        15074,
        15190
      ]
    },
    {
      "content": "通过执行以下操作为客户端通在当前 Visual Studio 解决方案中创建一个新的项目：",
      "pos": [
        15195,
        15240
      ]
    },
    {
      "content": "在解决方案资源管理器中，在包含该服务的同一解决方案中，右键单击当前解决方案（不是项目），然后单击“添加”。然后单击“新建项目”。",
      "pos": [
        15248,
        15312
      ]
    },
    {
      "content": "在“添加新项目”对话框中，单击“Visual C#”（如果未显示“Visual C#”，则在“其他语言”下方查看），再选择“控制台应用程序”模板，并将其命名为“EchoClient”。",
      "pos": [
        15320,
        15412
      ]
    },
    {
      "content": "单击“确定”。",
      "pos": [
        15420,
        15427
      ]
    },
    {
      "content": "在解决方案资源管理中，双击“EchoClient”项目中的 Program.cs 文件以在编辑器中将其打开。",
      "pos": [
        15438,
        15492
      ]
    },
    {
      "pos": [
        15497,
        15559
      ],
      "content": "将命名空间名称从其默认名称 <ph id=\"ph1\">`EchoClient`</ph> 更改为 <ph id=\"ph2\">`Microsoft.ServiceBus.Samples`</ph>。"
    },
    {
      "content": "在项目中添加对 System.ServiceModel.dll 的引用：",
      "pos": [
        15564,
        15600
      ]
    },
    {
      "content": "在解决方案资源管理器中的“EchoClient”项目下，右键单击“引用”。然后单击“添加引用”。",
      "pos": [
        15608,
        15656
      ]
    },
    {
      "content": "因为在本教程的第一步你已添加对此程序集的引用，现在此引用列在“最近”选项卡中。单击“最近”，然后从列表中选择 <bpt id=\"p1\">**</bpt>System.ServiceModel.dll<ept id=\"p1\">**</ept>。然后，单击“确定”。如果你在“最近”选项卡上没有看到“System.ServiceModel.dll”，单击“浏览”选项卡，然后转到 <bpt id=\"p2\">**</bpt>C:\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\v3.0\\\\Windows Communication Foundation<ept id=\"p2\">**</ept>。然后从此处选择程序集。",
      "pos": [
        15664,
        15907
      ]
    },
    {
      "pos": [
        15918,
        16043
      ],
      "content": "为 Program.cs 文件中的 <bpt id=\"p1\">[</bpt>System.ServiceModel<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.aspx)</ept> 命名空间添加 <ph id=\"ph1\">`using`</ph> 语句。"
    },
    {
      "pos": [
        16096,
        16241
      ],
      "content": "重复前面的步骤，将对 Microsoft.ServiceBus.dll 的引用和 <bpt id=\"p1\">[</bpt>Microsoft.ServiceBus<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.aspx)</ept> 命名空间添加到你的项目中。"
    },
    {
      "pos": [
        16246,
        16343
      ],
      "content": "如下面的示例中所示，将服务协定定义添加到命名空间。请注意，此定义等同于“服务”项目中所使用的定义。应将此代码添加到 <ph id=\"ph1\">`Microsoft.ServiceBus.Samples`</ph> 命名空间的顶部。"
    },
    {
      "content": "按“F6”生成客户端。",
      "pos": [
        16653,
        16664
      ]
    },
    {
      "content": "示例",
      "pos": [
        16670,
        16672
      ]
    },
    {
      "content": "下面的代码显示了 EchoClient 项目中的 Program.cs 文件的当前状态。",
      "pos": [
        16674,
        16718
      ]
    },
    {
      "content": "配置 WCF 客户端",
      "pos": [
        17224,
        17234
      ]
    },
    {
      "content": "在此步骤中，你可以为之前在本教程中创建的访问服务的基本客户端应用程序创建 App.config 文件。此 App.config 文件用于定义终结点的协定、绑定和名称。该过程后面的示例中提供了这些任务所用的代码。",
      "pos": [
        17236,
        17341
      ]
    },
    {
      "content": "在解决方案资源管理器中的客户端项目中，双击“App.config”以打开文件，该文件当前包含以下 XML 元素：",
      "pos": [
        17346,
        17402
      ]
    },
    {
      "pos": [
        17597,
        17649
      ],
      "content": "在 App.config 文件中为 <ph id=\"ph1\">`system.serviceModel`</ph> 添加一个 XML 元素。"
    },
    {
      "content": "此元素声明你的应用程序使用 WCF 样式终结点。如前面所述，服务总线应用程序的大部分配置都与 WCF 应用程序的配置相同；主要的区别在于配置文件所指向的位置。",
      "pos": [
        17820,
        17899
      ]
    },
    {
      "pos": [
        17904,
        17947
      ],
      "content": "在 system.serviceModel 元素中，添加 <ph id=\"ph1\">`&lt;client&gt;`</ph> 元素。"
    },
    {
      "content": "此步骤声明你正在定义一个 WCF 样式的客户端应用程序。",
      "pos": [
        18144,
        18172
      ]
    },
    {
      "pos": [
        18177,
        18209
      ],
      "content": "在 <ph id=\"ph1\">`client`</ph> 元素中，定义终结点的名称、协定和绑定类型。"
    },
    {
      "content": "此步骤中定义终结点的名称、服务中定义的协定，以及客户端应用程序使用 TCP 与服务总线进行通信的事实。终结点名称在下一步中用于将此终结点配置与服务 URI 链接。",
      "pos": [
        18391,
        18472
      ]
    },
    {
      "content": "直接在",
      "pos": [
        18477,
        18480
      ]
    },
    {
      "content": "元素的后面，添加以下绑定扩展。",
      "pos": [
        18490,
        18505
      ]
    },
    {
      "content": "单击“文件”，然后单击“全部保存”。",
      "pos": [
        18822,
        18840
      ]
    },
    {
      "content": "示例",
      "pos": [
        18845,
        18847
      ]
    },
    {
      "content": "下面的代码显示了 Echo 客户端的 App.config 文件。",
      "pos": [
        18849,
        18882
      ]
    },
    {
      "content": "实现 WCF 客户端以调用服务总线",
      "pos": [
        19508,
        19525
      ]
    },
    {
      "content": "在此步骤中，你实现了可访问之前在本教程中创建的服务的基本客户端应用程序。与服务相似，该客户端访问服务总线的操作步骤大多数都相同：",
      "pos": [
        19527,
        19591
      ]
    },
    {
      "content": "设置连接模式。",
      "pos": [
        19596,
        19603
      ]
    },
    {
      "content": "创建用于定位主机服务的 URI。",
      "pos": [
        19608,
        19624
      ]
    },
    {
      "content": "定义安全凭据。",
      "pos": [
        19629,
        19636
      ]
    },
    {
      "content": "将凭据应用到连接。",
      "pos": [
        19641,
        19650
      ]
    },
    {
      "content": "打开连接。",
      "pos": [
        19655,
        19660
      ]
    },
    {
      "content": "执行应用程序特定的任务。",
      "pos": [
        19665,
        19677
      ]
    },
    {
      "content": "关闭连接。",
      "pos": [
        19682,
        19687
      ]
    },
    {
      "pos": [
        19689,
        19773
      ],
      "content": "但是，主要的区别之一在于，客户端应用程序使用通道连接到服务总线，而服务则使用一个对 <bpt id=\"p1\">**</bpt>ServiceHost<ept id=\"p1\">**</ept> 的调用。该过程后面的示例中提供了这些任务所用的代码。"
    },
    {
      "content": "实现客户端应用程序",
      "pos": [
        19779,
        19788
      ]
    },
    {
      "pos": [
        19793,
        19846
      ],
      "content": "将连接模式设置为 <bpt id=\"p1\">**</bpt>AutoDetect<ept id=\"p1\">**</ept>。添加客户端应用程序的 <ph id=\"ph1\">`Main()`</ph> 方法中的以下代码。"
    },
    {
      "content": "定义变量以保存用于服务命名空间的值，以及从控制台读取的 SAS 密钥。",
      "pos": [
        19949,
        19984
      ]
    },
    {
      "content": "创建用于定义服务总线项目中托管位置的 URI。",
      "pos": [
        20180,
        20203
      ]
    },
    {
      "content": "创建服务命名空间终结点的凭据对象。",
      "pos": [
        20325,
        20342
      ]
    },
    {
      "content": "创建加载在 App.config 文件中所述的配置的通道工厂。",
      "pos": [
        20582,
        20613
      ]
    },
    {
      "content": "通道工厂是创建通道（通过该通道，服务和客户端可以进行通信）的一个 WCF 对象。",
      "pos": [
        20770,
        20810
      ]
    },
    {
      "content": "应用服务总线凭据",
      "pos": [
        20815,
        20823
      ]
    },
    {
      "content": "创建并打开服务通道。",
      "pos": [
        20903,
        20913
      ]
    },
    {
      "content": "编写用于回显的基本用户界面和功能。",
      "pos": [
        21014,
        21031
      ]
    },
    {
      "content": "请注意，代码使用通道对象的实例作为服务代理。",
      "pos": [
        21450,
        21472
      ]
    },
    {
      "content": "关闭通道，然后关闭工厂。",
      "pos": [
        21477,
        21489
      ]
    },
    {
      "content": "启动客户端应用程序",
      "pos": [
        21560,
        21569
      ]
    },
    {
      "content": "按“F6”生成解决方案。这将生成客户端项目和你在本教程的上一步创建的服务项目，并为每一个项目创建一个可执行文件。",
      "pos": [
        21574,
        21630
      ]
    },
    {
      "content": "在运行客户端应用程序之前，请确保服务应用程序正在运行。",
      "pos": [
        21635,
        21662
      ]
    },
    {
      "content": "现在，你应该具有 Echo 服务应用程序的名为 EchoService.exe 的可执行文件，该文件位于 \\\\bin\\\\Debug\\\\EchoService.exe（针对调试配置）或 \\\\bin\\\\Release\\\\EchoService.exe（针对发布配置）下的服务项目文件夹中。双击此文件以启动服务应用程序。",
      "pos": [
        21668,
        21825
      ]
    },
    {
      "content": "将打开一个控制台窗口并提示你输入命名空间。在此控制台窗口中，输入服务命名空间并按“Enter”。",
      "pos": [
        21830,
        21878
      ]
    },
    {
      "content": "接下来，将提示你提供 SAS 密钥。输入 SAS 密钥并按“ENTER”。",
      "pos": [
        21883,
        21920
      ]
    },
    {
      "content": "以下是来自控制台窗口的示例输出。请注意，此处提供的值仅限于示例目的。",
      "pos": [
        21926,
        21960
      ]
    },
    {
      "content": "启动服务应用程序，并将其正在侦听的地址打印到控制台窗口中，如下面的示例中所示。",
      "pos": [
        22046,
        22085
      ]
    },
    {
      "content": "运行客户端应用程序。你应该具有 Echo 客户端应用程序的名为 EchoClient.exe 的可执行文件，该文件位于 .\\\\bin\\\\Debug\\\\EchoClient.exe（针对调试配置）或 .\\\\bin\\\\Release\\\\EchoClient.exe（针对发布配置）下的客户端项目中。双击此文件以启动客户端应用程序。",
      "pos": [
        22200,
        22363
      ]
    },
    {
      "content": "将打开控制台窗口并提示你输入之前输入的用于服务应用程序的相同信息。请按照前面的步骤，在服务命名空间、颁发者名称和颁发者密钥中输入相同的客户端应用程序值。",
      "pos": [
        22368,
        22444
      ]
    },
    {
      "content": "输入这些值后，客户端将打开服务通道并提示你输入如以下控制台输出示例中所示的某些文本。",
      "pos": [
        22449,
        22491
      ]
    },
    {
      "content": "输入将发送到服务应用程序的某些文本，并按“Enter”。此文本通过 Echo 服务操作发送到服务并显示在服务控制台窗口中，如下面的示例输出所示。",
      "pos": [
        22545,
        22617
      ]
    },
    {
      "pos": [
        22654,
        22717
      ],
      "content": "客户端应用程序接收 <ph id=\"ph1\">`Echo`</ph> 操作的返回值（此为原始文本），并将其打印到控制台窗口。以下是来自客户端控制台窗口的示例输出。"
    },
    {
      "content": "你可以继续以这种方式将来自客户端的短信发送至服务。完成后，在客户端和服务控制台窗口中按 Enter 以结束这两个应用程序。",
      "pos": [
        22759,
        22820
      ]
    },
    {
      "content": "示例",
      "pos": [
        22825,
        22827
      ]
    },
    {
      "content": "下面的示例演示了如何创建客户端应用程序、如何调用服务操作以及如何在完成操作调用后关闭客户端。",
      "pos": [
        22829,
        22875
      ]
    },
    {
      "content": "请确保在启动客户端之前服务正在运行。",
      "pos": [
        24917,
        24935
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        24940,
        24944
      ]
    },
    {
      "pos": [
        24946,
        25168
      ],
      "content": "本教程介绍了如何使用服务总线“中继”功能，构建服务总线客户端应用程序和服务。有关使用服务总线<bpt id=\"p1\">[</bpt>中转消息传送<ept id=\"p1\">](/documentation/articles/service-bus-messaging-overview/#Brokered-messaging)</ept>的类似教程，请参阅<bpt id=\"p2\">[</bpt>服务总线中转消息传送 .NET 教程<ept id=\"p2\">](/documentation/articles/service-bus-brokered-tutorial-dotnet)</ept>。"
    },
    {
      "content": "若要了解有关服务总线的详细信息，请参阅以下主题。",
      "pos": [
        25170,
        25194
      ]
    },
    {
      "content": "服务总线消息传送概述",
      "pos": [
        25199,
        25209
      ]
    },
    {
      "content": "服务总线基础知识",
      "pos": [
        25270,
        25278
      ]
    },
    {
      "content": "服务总线体系结构",
      "pos": [
        25350,
        25358
      ]
    },
    {
      "content": "[Azure 经典门户]: http://manage.windowsazure.cn",
      "pos": [
        25410,
        25453
      ]
    }
  ],
  "content": "<properties \n   pageTitle=\"服务总线中继消息传送教程 | Microsoft Azure\"\n   description=\"使用服务总线中继消息传送继构建服务总线客户端应用程序。\"\n   services=\"service-bus\"\n   documentationCenter=\"na\"\n   authors=\"sethmanheim\"\n   manager=\"timlt\"\n   editor=\"tysonn\" />\n<tags \n   ms.service=\"service-bus\"\n   ms.date=\"01/26/2016\"\n   wacn.date=\"03/17/2016\" />\n\n# 服务总线中继消息传送教程\n\n本教程介绍了如何使用服务总线“中继”功能，构建简单的服务总线客户端应用程序和服务。有关使用服务总线[中转消息传送](/documentation/articles/service-bus-messaging-overview#Brokered-messaging)的相应教程，请参阅[服务总线中转消息传送 .NET 教程](/documentation/articles/service-bus-brokered-tutorial-dotnet)。\n\n通过此教程，你可以了解创建服务总线客户端和服务应用程序所需的步骤。正如其 WCF 对应项，服务是公开一个或多个终结点的构造，其中每个终结点都公开一个或多个服务操作。服务的终结点用于指定可在其中找到服务的地址、包含客户端必须与服务进行通信的信息的绑定，以及定义服务向其客户端提供的功能的协定。WCF 和服务总线服务之间的主要区别在于：终结点在云中公开，而不是在本地计算机中公开。\n\n完成本教程中的一系列主题后，你将具有一项正在运行的服务和可以调用服务操作的客户端。第一个主题描述了如何设置帐户。接下来的步骤描述了如何定义使用协定的服务、如何实现服务，以及如何使用代码配置该服务。这些主题还描述了如何托管和运行该服务。创建的服务是自托管的，并且客户端和服务在同一台计算机上运行。你可以通过使用代码或配置文件配置服务。\n\n最后三个步骤介绍如何创建客户端应用程序、如何配置客户端应用程序，以及如何创建和使用可以访问主机功能的客户端。\n\n本部分中的所有主题均假定使用 Visual Studio 作为开发环境。\n\n## 注册帐户\n\n第一步是创建服务总线服务命名空间并获取共享访问签名 (SAS) 密钥。服务命名空间为每个通过服务总线公开的应用程序提供应用程序边界。服务命名空间与 SAS 密钥的组合为服务总线提供了一个用于验证应用程序访问权限的凭据。\n\n1. 若要创建服务命名空间，请访问 [Azure 经典门户][]。单击左侧的“服务总线”，然后单击“创建”。为你的命名空间键入一个名称，然后单击复选标记。\n\n    >[AZURE.NOTE] 无需针对客户端和服务应用程序使用相同的命名空间。\n\n1. 在门户的主窗口中，单击在上一步中创建的命名空间的名称。\n\n2. 单击“配置”以查看命名空间的默认共享访问策略。\n\n3. 记下 **RootManageSharedAccessKey** 策略的主键，或将其复制到剪贴板上。你将在本教程的后面部分使用此值。\n\n## 定义 WCF 服务协定以用于服务总线\n\n服务协定用于指定服务支持的操作类型（方法或函数的 Web 服务术语）。约定通过定义 C++、C# 或 Visual Basic 接口来创建。接口中的每个方法都对应一个特定的服务操作。必须将 [ServiceContractAttribute](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicecontractattribute.aspx) 属性应用于每个接口，并且必须将 [OperationContractAttribute](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx) 属性应用于每个操作。如果具有 [ServiceContractAttribute](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicecontractattribute.aspx) 属性的接口中的方法没有 [OperationContractAttribute](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx) 属性，则该方法是不公开的。该过程后面的示例中提供了这些任务的代码。有关协定和服务的更多讨论，请参阅 WCF 文档中的[设计和实现服务](https://msdn.microsoft.com/zh-cn/library/ms729746.aspx)。\n\n### 使用接口创建服务总线约定\n\n1. 在“开始”菜单中右键单击 Visual Studio，以便以管理员身份启动该程序，然后选择“以管理员身份运行”。\n\n2. 创建新的控制台应用程序项目。单击“文件”菜单并选择“新建”，然后单击“项目”。在“新建项目”对话框中，单击“Visual C#”（如果“Visual C#”未出现，则在“其他语言”下方查看）。单击“控制台应用程序”模板，并将其命名为 **EchoService**。使用默认“位置”。单击“确定”以创建该项目。\n\n3. 在项目中添加对 `System.ServiceModel.dll` 的引用：在“解决方案资源管理器”中，右键单击项目文件夹下的“引用”文件夹，然后单击“添加引用”。在“添加引用”对话框中选择“.NET”选项卡并向下滚动，直到看到“System.ServiceModel”。选中后单击“确定”。\n\n4. 在解决方案资源管理中，双击 Program.cs 文件以在编辑器中将其打开。\n\n5. 为 System.ServiceModel 命名空间添加 `using` 语句。\n\n    ```\n    using System.ServiceModel;\n    ```\n\n    [System.ServiceModel](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.aspx) 是可以以编程方式访问 WCF 基本功能的命名空间。服务总线使用 WCF 的许多对象和属性来定义服务约定。\n\n6. 将命名空间的默认名称 **EchoService** 更改为 **Microsoft.ServiceBus.Samples**。\n\n    >[AZURE.IMPORTANT] 本教程使用 C# 命名空间 **Microsoft.ServiceBus.Samples**，它是协定管理类型的命名空间，此类型用于[配置 WCF 客户端中](#configure-the-wcf-client)步骤中的配置文件。在构建此示例时，你可以指定任何想要的命名空间，当你在配置文件中修改了协定以及相应服务的命名空间后，本教程才会生效。在 App.config 文件中指定的命名空间必须与在 C# 文件中指定的命名空间相同。\n\n7. 直接在完成 `Microsoft.ServiceBus.Samples` 命名空间声明后，在命名空间内定义一个名为 `IEchoContract` 的新接口，然后将 `ServiceContractAttribute` 属性应用于该接口，其值为 **http://samples.microsoft.com/ServiceModel/Relay/**。该命名空间值不同于你在整个代码范围内使用的命名空间。相反，该命名空间值将用作此协定的唯一标识符。显式指定命名空间可防止将默认的命名空间值添加到约定名称中。\n\n    ```\n    [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    publicinterface IEchoContract\n    {\n    }\n    ```\n\n    >[AZURE.NOTE]通常情况下，服务协定命名空间包含一个包括版本信息的命名方案。服务协定命名空间中包括的版本信息可以使服务通过将新服务协定定义为新命名空间并将其公开到新的终结点上，来隔离重大更改。以这种方式，客户端可以继续使用旧的服务协定，而无需进行更新。版本信息可能包含日期或内部版本号。有关详细信息，请参阅[服务版本控制](http://go.microsoft.com/fwlink/?LinkID=180498)。鉴于此教程的目的，服务协定命名空间的命名方案不包含版本信息。\n\n1. 在 `IEchoContract` 接口中，为 `IEchoContract` 约定在接口中公开的单个操作声明一个方法，然后将 `OperationContractAttribute` 属性应用到你希望将其作为公共服务总线约定的一部分进行公开的方法中。\n\n    ```\n    [OperationContract]\n    string Echo(string text);\n    ```\n\n9. 在该协定外，声明从 `IEchoChannel` 中继承，并可传承到 `IClientChannel` 接口的通道，如下所示：\n\n    ```\n    [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    publicinterface IEchoContract\n    {\n        [OperationContract]\n        String Echo(string text);\n    }\n\n    publicinterface IEchoChannel : IEchoContract, IClientChannel { }\n    ```\n\n    通道是主机和客户端用来互相传递信息的 WCF 对象。随后，你将针对通道编写代码，以在两个应用程序之间回显信息。\n\n1. 在“生成”菜单中，单击“生成解决方案”或按 F6 以确认到目前为止操作的准确性。\n\n### 示例\n\n以下代码显示了一个用于定义服务总线协定的基本接口。\n\n```\nusing System;\nusing System.ServiceModel;\n\nnamespace Microsoft.ServiceBus.Samples\n{\n    [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    public interface IEchoContract\n    {\n        [OperationContract]\n        String Echo(string text);\n    }\n\n    public interface IEchoChannel : IEchoContract, IClientChannel { }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n        }\n    }\n}\n```\n\n既然已创建接口，你可以实现该接口。\n\n## 实现 WCF 协定以使用服务总线\n\n创建服务总线服务首先需要你创建使用接口定义的协定。有关创建接口的详细信息，请参阅上一步。下一步是实现该接口。此步骤包括创建名为 `EchoService` 的类，用于实现用户定义的 `IEchoContract` 接口。实现接口后，即可使用 App.config 配置文件配置接口。该配置文件包含应用程序所需的信息，如服务的名称、约定的名称，以及用来与服务总线通信的协议类型。该过程后面的示例中提供了这些任务所用的代码。有关如何实现服务协定的更多常规讨论，请参阅 Windows Communication Foundation (WCF) 文档中的[实现服务协定](https://msdn.microsoft.com/zh-cn/library/ms733764.aspx)。\n\n1. 在 `IEchoContract` 接口定义的正下方创建名为 `EchoService` 的新类。`EchoService` 类实现 `IEchoContract` 接口。 \n\n    ```\n    class EchoService : IEchoContract\n    {\n    }\n    ```\n    \n    与其他接口实现类似，你可以在另一个文件中实现定义。但是，在本教程中，实现所在的文件与接口定义和 `Main` 方法所在的文件相同。\n\n2. 应用指示服务名称和命名空间属性的 [ServiceBehaviorAttribute](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicebehaviorattribute.aspx) 属性.\n\n    ```[ServiceBehavior(Name = \"EchoService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    class EchoService : IEchoContract\n    {\n    }\n    ```\n\n3. 在 `EchoService` 类中，实现 `IEchoContract` 接口中定义的 `Echo` 方法。\n\n    ```\n    public string Echo(string text)\n    {\n        Console.WriteLine(\"Echoing: {0}\", text);\n        return text;\n    }\n    ```\n\n4. 单击“生成”，然后单击“生成解决方案”以确认工作的准确性。\n\n### 定义服务主机的配置\n\n1. 配置文件非常类似于 WCF 配置文件。该配置文件包括服务名称、终结点（即，服务总线公开的、让客户端和主机相互通信的位置）和绑定（用于通信的协议类型）。此处的主要差别在于，配置的服务终结点是指 [netTcpRelayBinding](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.nettcprelaybinding.aspx)，它不是 .NET Framework 的一部分。[NetTcpRelayBinding](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.nettcprelaybinding.aspx) 是通过服务总线定义的绑定之一。\n\n2. 在“解决方案资源管理器”中单击 App.config 文件，该文件当前包含以下 XML 元素：\n\n    ```\n    <?xmlversion=\"1.0\"encoding=\"utf-8\"?>\n    <configuration>\n    </configuration>\n    ```\n\n3. 在 App.config 文件中添加一个 `<system.serviceModel>` XML 元素。该元素是一个 WCF 元素，用于定义一个或多个服务。在本示例中，它用于定义服务名称和终结点。\n\n    ```\n    <?xmlversion=\"1.0\"encoding=\"utf-8\"?>\n    <configuration>\n      <system.serviceModel>\n  \n      </system.serviceModel>\n    </configuration>\n    ```\n\n4. 在 `<system.serviceModel>` 标记中，添加 `<services>` 元素。可以在单个配置文件中定义多个服务总线应用程序。但是，本教程只定义一个。\n \n        ```\n        <?xmlversion=\"1.0\"encoding=\"utf-8\"?>\n        <configuration>\n          <system.serviceModel>\n            <services>\n    \n            </services>\n          </system.serviceModel>\n        </configuration>\n        ```\n\n5. 在 `<services>` 元素中，添加 `<service>` 元素来定义服务名称。\n\n    ```\n    <servicename=\"Microsoft.ServiceBus.Samples.EchoService\">\n    </service>\n    ```\n\n6. 在 `<service>` 元素中，定义终结点协定的位置，以及终结点绑定的类型。\n\n    ```\n    <endpointcontract=\"Microsoft.ServiceBus.Samples.IEchoContract\"binding=\"netTcpRelayBinding\"/>\n    ```\n\n    终结点用于定义客户端将在何处查找主机应用程序。接下来，本教程将使用此步骤来创建一个通过服务总线完全公开主机的 URI。绑定声明我们正在将 TCP 用作协议，以与服务总线进行通信。\n\n\n7. 直接在 `<services>` 元素的后面，添加以下绑定扩展。\n \n    ```\n    <extensions>\n      <bindingExtensions>\n        <addname=\"netTcpRelayBinding\"type=\"Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\n      </bindingExtensions>\n    </extensions>\n    ```\n\n8. 在“生成”菜单中，单击“生成解决方案”以确认工作的准确性。\n\n### 示例\n\n下面的代码显示服务协定的实现。\n\n```\n[ServiceBehavior(Name = \"EchoService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n\n    class EchoService : IEchoContract\n    {\n        public string Echo(string text)\n        {\n            Console.WriteLine(\"Echoing: {0}\", text);\n            return text;\n        }\n    }\n```\n\n以下代码显示了与该服务主机关联的 App.config 文件的基本格式。\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <system.serviceModel>\n    <services>\n      <service name=\"Microsoft.ServiceBus.Samples.EchoService\">\n        <endpoint contract=\"Microsoft.ServiceBus.Samples.IEchoContract\" binding=\"netTcpRelayBinding\" />\n      </service>\n    </services>\n    <extensions>\n      <bindingExtensions>\n        <add name=\"netTcpRelayBinding\" type=\"Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" />\n      </bindingExtensions>\n    </extensions>\n  </system.serviceModel>\n</configuration>\n```\n\n## 托管并运行基本 Web 服务以向服务总线注册\n\n此步骤介绍如何运行基本服务总线服务。\n\n### 创建服务总线凭据\n\n1. 安装[服务总线 NuGet 包](https://www.nuget.org/packages/WindowsAzure.ServiceBus)\n\n1. 在 `Main()` 中，创建两个变量，将命名空间和从控制台窗口中读取的 SAS 密钥存储在其中。\n\n    ```\n    Console.Write(\"Your Service Namespace: \");\n    string serviceNamespace = Console.ReadLine();\n    Console.Write(\"Your SAS key: \");\n    string sasKey = Console.ReadLine();\n    ```\n\n    随后将使用 SAS 密钥来访问你的服务总线项目。命名空间作为参数传递给 `CreateServiceUri` 以创建服务 URI。\n\n4. 使用 [TransportClientEndpointBehavior](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.transportclientendpointbehavior.aspx) 对象声明你将使用 SAS 密钥作为凭据类型。在最后一步中添加的代码后直接添加以下代码。\n\n    ```\n    TransportClientEndpointBehavior sasCredential = new TransportClientEndpointBehavior();\n    sasCredential.TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", sasKey);\n    ```\n\n### 为服务创建基本地址\n\n1. 在上一个步骤添加的代码后，为服务的基址创建 `Uri` 实例。此 URI 指定服务总线方案、命名空间，以及服务接口的路径。\n\n    ```\n    Uri address = ServiceBusEnvironment.CreateServiceUri(\"sb\", serviceNamespace, \"EchoService\");\n    ```\n\n    \"sb\" 是服务总线方案的缩写，并指示我们正在使用 TCP 作为协议。先前当 [NetTcpRelayBinding](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.nettcprelaybinding.aspx) 被指定为绑定时，在配置文件中也指示了这一点。\n    \n    对于本教程中，URI 是 `sb://putServiceNamespaceHere.windows.net/EchoService`。\n\n### 创建并配置服务主机\n\n1. 将连接模式设置为 `AutoDetect`\n\n    ```\n    ServiceBusEnvironment.SystemConnectivity.Mode = ConnectivityMode.AutoDetect;\n    ```\n\n    连接模式描述服务用于与服务总线进行通信的协议；连接模式为 HTTP 或 TCP。使用默认设置 `AutoDetect`，服务尝试通过 TCP（如果可用）或 HTTP（如果 TCP 不可用）连接到服务总线。请注意这与服务为客户端通信指定的协议不同。为客户端通信指定的协议由所使用的绑定所决定。例如，服务可以使用指定其终结点（公开在服务总线上）的 [BasicHttpRelayBinding](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.basichttprelaybinding.aspx) 绑定通过 HTTP 与客户端通信。同一个服务可以指定 **ConnectivityMode.AutoDetect**，以便服务通过 TCP 与服务总线通信。\n\n2. 使用之前在本部分中创建的 URI 创建服务主机。\n\n    ```\n    ServiceHost host = new ServiceHost(typeof(EchoService), address);\n    ```\n\n    该服务主机是可实例化服务的 WCF 对象。在这里你将传递想要创建的服务类型（`EchoService` 类型），以及想要公开服务的地址。\n\n3. 在 Program.cs 文件的顶部，添加对 [System.ServiceModel.Description](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.description.aspx) 和 [Microsoft.ServiceBus.Description](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.description.aspx) 的引用。\n\n    ```\n    using System.ServiceModel.Description;\n    using Microsoft.ServiceBus.Description;\n    ```\n\n4. 返回到 `Main()`，配置终结点以启用公开访问。\n\n    ```\n    IEndpointBehavior serviceRegistrySettings = new ServiceRegistrySettings(DiscoveryType.Public);\n    ```\n\n    此步骤告知服务总线可以通过检查项目的服务总线 ATOM 源公开找到你的应用程序。如果你将 **DiscoveryType** 设置为 **private**，客户端将仍将能够访问该服务。但是，当搜索服务总线命名空间时不会显示该服务。相反，客户端必须事先知道终结点路径。\n\n5. 将服务凭据应用到 App.config 文件中定义的服务终结点：\n\n    ```\n    foreach (ServiceEndpoint endpoint in host.Description.Endpoints)\n    {\n        endpoint.Behaviors.Add(serviceRegistrySettings);\n        endpoint.Behaviors.Add(sasCredential);\n    }\n    ```\n\n    如在上一步中所述，你可能已经在配置文件中声明多个服务和终结点。如果你已配置，此代码将遍历配置文件并且搜索可能应用了凭据的每个终结点。但是，对于本教程中，配置文件只有一个终结点。\n\n### 打开服务主机\n\n1. 打开服务。\n\n    ```\n    host.Open();\n    ```\n\n2. 通知用户该服务正在运行，并说明如何关闭服务。\n\n    ```\n    Console.WriteLine(\"Service address: \" + address);\n    Console.WriteLine(\"Press [Enter] to exit\");\n    Console.ReadLine();\n    ```\n\n3. 完成后，关闭服务主机。\n\n    ```\n    host.Close();\n    ```\n\n4. 按“F6”生成项目。\n\n### 示例\n\n下例包括本教程中前面步骤中使用的服务协定和实现，并将服务托管在控制台应用程序中。将以下编译到名为 EchoService.exe 的可执行文件。\n\n```\nusing System;\nusing System.ServiceModel;\nusing System.ServiceModel.Description;\nusing Microsoft.ServiceBus;\nusing Microsoft.ServiceBus.Description;\n\nnamespace Microsoft.ServiceBus.Samples\n{\n    [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n\n    public interface IEchoContract\n    {\n        [OperationContract]\n        String Echo(string text);\n    }\n\n    public interface IEchoChannel : IEchoContract, IClientChannel { };\n\n    [ServiceBehavior(Name = \"EchoService\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n\n    class EchoService : IEchoContract\n    {\n        public string Echo(string text)\n        {\n            Console.WriteLine(\"Echoing: {0}\", text);\n            return text;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            ServiceBusEnvironment.SystemConnectivity.Mode = ConnectivityMode.AutoDetect;         \n          \n            Console.Write(\"Your Service Namespace: \");\n            string serviceNamespace = Console.ReadLine();\n            Console.Write(\"Your SAS key: \");\n            string sasKey = Console.ReadLine();\n\n           // Create the credentials object for the endpoint.\n            TransportClientEndpointBehavior sasCredential = new TransportClientEndpointBehavior();\n            sasCredential.TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", sasKey);\n\n            // Create the service URI based on the service namespace.\n            Uri address = ServiceBusEnvironment.CreateServiceUri(\"sb\", serviceNamespace, \"EchoService\");\n\n            // Create the service host reading the configuration.\n            ServiceHost host = new ServiceHost(typeof(EchoService), address);\n\n            // Create the ServiceRegistrySettings behavior for the endpoint.\n            IEndpointBehavior serviceRegistrySettings = new ServiceRegistrySettings(DiscoveryType.Public);\n\n            // Add the Service Bus credentials to all endpoints specified in configuration.\n            foreach (ServiceEndpoint endpoint in host.Description.Endpoints)\n            {\n                endpoint.Behaviors.Add(serviceRegistrySettings);\n                endpoint.Behaviors.Add(sasCredential);\n            }\n            \n            // Open the service.\n            host.Open();\n\n            Console.WriteLine(\"Service address: \" + address);\n            Console.WriteLine(\"Press [Enter] to exit\");\n            Console.ReadLine();\n\n            // Close the service.\n            host.Close();\n        }\n    }\n}\n```\n\n## 创建服务协定的 WCF 客户端\n\n下一步将创建基本服务总线客户端，并定义将在后续步骤中实现的服务协定。请注意，许多这样的步骤类似于用于创建服务的步骤：定义协定、编辑 App.config 文件、使用凭据来连接到服务总线等。该过程后面的示例中提供了这些任务所用的代码。\n\n1. 通过执行以下操作为客户端通在当前 Visual Studio 解决方案中创建一个新的项目：\n    1. 在解决方案资源管理器中，在包含该服务的同一解决方案中，右键单击当前解决方案（不是项目），然后单击“添加”。然后单击“新建项目”。\n    2. 在“添加新项目”对话框中，单击“Visual C#”（如果未显示“Visual C#”，则在“其他语言”下方查看），再选择“控制台应用程序”模板，并将其命名为“EchoClient”。\n    3. 单击“确定”。<br />\n\n2. 在解决方案资源管理中，双击“EchoClient”项目中的 Program.cs 文件以在编辑器中将其打开。\n\n3. 将命名空间名称从其默认名称 `EchoClient` 更改为 `Microsoft.ServiceBus.Samples`。\n\n4. 在项目中添加对 System.ServiceModel.dll 的引用：\n    1. 在解决方案资源管理器中的“EchoClient”项目下，右键单击“引用”。然后单击“添加引用”。\n    2. 因为在本教程的第一步你已添加对此程序集的引用，现在此引用列在“最近”选项卡中。单击“最近”，然后从列表中选择 **System.ServiceModel.dll**。然后，单击“确定”。如果你在“最近”选项卡上没有看到“System.ServiceModel.dll”，单击“浏览”选项卡，然后转到 **C:\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\v3.0\\\\Windows Communication Foundation**。然后从此处选择程序集。<br />\n\n5. 为 Program.cs 文件中的 [System.ServiceModel](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.aspx) 命名空间添加 `using` 语句。\n\n    ```\n    using System.ServiceModel;\n    ```\n\n6. 重复前面的步骤，将对 Microsoft.ServiceBus.dll 的引用和 [Microsoft.ServiceBus](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.aspx) 命名空间添加到你的项目中。\n\n7. 如下面的示例中所示，将服务协定定义添加到命名空间。请注意，此定义等同于“服务”项目中所使用的定义。应将此代码添加到 `Microsoft.ServiceBus.Samples` 命名空间的顶部。\n\n    ```\n    [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    publicinterface IEchoContract\n    {\n        [OperationContract]\n        string Echo(string text);\n    }\n\n    publicinterface IEchoChannel : IEchoContract, IClientChannel { }\n    ```\n\n8. 按“F6”生成客户端。\n\n### 示例\n\n下面的代码显示了 EchoClient 项目中的 Program.cs 文件的当前状态。\n\n```\nusing System;\nusing Microsoft.ServiceBus;\nusing System.ServiceModel;\n\nnamespace Microsoft.ServiceBus.Samples\n{\n\n[ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    public interface IEchoContract\n    {\n        [OperationContract]\n        string Echo(string text);\n    }\n\n    public interface IEchoChannel : IEchoContract, IClientChannel { }\n\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n        }\n    }\n}\n```\n\n## 配置 WCF 客户端\n\n在此步骤中，你可以为之前在本教程中创建的访问服务的基本客户端应用程序创建 App.config 文件。此 App.config 文件用于定义终结点的协定、绑定和名称。该过程后面的示例中提供了这些任务所用的代码。\n\n1. 在解决方案资源管理器中的客户端项目中，双击“App.config”以打开文件，该文件当前包含以下 XML 元素：\n\n    ```\n    <?xmlversion=\"1.0\"?>\n    <configuration>\n      <startup>\n        <supportedRuntimeversion=\"v4.0\"sku=\".NETFramework,Version=v4.0\"/>\n      </startup>\n    </configuration>\n    ```\n\n2. 在 App.config 文件中为 `system.serviceModel` 添加一个 XML 元素。\n\n    ```\n    <?xmlversion=\"1.0\"encoding=\"utf-8\"?>\n    <configuration>\n      <system.serviceModel>\n    \n      </system.serviceModel>\n    </configuration>\n    ```\n    \n    此元素声明你的应用程序使用 WCF 样式终结点。如前面所述，服务总线应用程序的大部分配置都与 WCF 应用程序的配置相同；主要的区别在于配置文件所指向的位置。\n\n3. 在 system.serviceModel 元素中，添加 `<client>` 元素。\n\n    ```\n    <?xmlversion=\"1.0\"encoding=\"utf-8\"?>\n    <configuration>\n      <system.serviceModel>\n        <client>\n        </client>\n      </system.serviceModel>\n    </configuration>\n    ```\n\n    此步骤声明你正在定义一个 WCF 样式的客户端应用程序。\n\n4. 在 `client` 元素中，定义终结点的名称、协定和绑定类型。\n\n    ```\n    <endpointname=\"RelayEndpoint\"\n                    contract=\"Microsoft.ServiceBus.Samples.IEchoContract\"\n                    binding=\"netTcpRelayBinding\"/>\n    ```\n\n    此步骤中定义终结点的名称、服务中定义的协定，以及客户端应用程序使用 TCP 与服务总线进行通信的事实。终结点名称在下一步中用于将此终结点配置与服务 URI 链接。\n\n5. 直接在 <client> 元素的后面，添加以下绑定扩展。\n \n    ```\n    <extensions>\n      <bindingExtensions>\n        <addname=\"netTcpRelayBinding\"type=\"Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\n      </bindingExtensions>\n    </extensions>\n    ```\n\n6. 单击“文件”，然后单击“全部保存”。\n\n## 示例\n\n下面的代码显示了 Echo 客户端的 App.config 文件。\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <system.serviceModel>\n    <client>\n      <endpoint name=\"RelayEndpoint\"\n                      contract=\"Microsoft.ServiceBus.Samples.IEchoContract\"\n                      binding=\"netTcpRelayBinding\"/>\n    </client>\n    <extensions>\n      <bindingExtensions>\n        <add name=\"netTcpRelayBinding\" type=\"Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\" />\n      </bindingExtensions>\n    </extensions>\n  </system.serviceModel>\n</configuration>\n```\n\n## 实现 WCF 客户端以调用服务总线\n\n在此步骤中，你实现了可访问之前在本教程中创建的服务的基本客户端应用程序。与服务相似，该客户端访问服务总线的操作步骤大多数都相同：\n\n1. 设置连接模式。\n\n2. 创建用于定位主机服务的 URI。\n\n3. 定义安全凭据。\n\n4. 将凭据应用到连接。\n\n5. 打开连接。\n\n6. 执行应用程序特定的任务。\n\n7. 关闭连接。\n\n但是，主要的区别之一在于，客户端应用程序使用通道连接到服务总线，而服务则使用一个对 **ServiceHost** 的调用。该过程后面的示例中提供了这些任务所用的代码。\n\n### 实现客户端应用程序\n\n1. 将连接模式设置为 **AutoDetect**。添加客户端应用程序的 `Main()` 方法中的以下代码。\n\n    ```\n    ServiceBusEnvironment.SystemConnectivity.Mode = ConnectivityMode.AutoDetect;\n    ```\n\n2. 定义变量以保存用于服务命名空间的值，以及从控制台读取的 SAS 密钥。\n\n    ```\n    Console.Write(\"Your Service Namespace: \");\n    string serviceNamespace = Console.ReadLine();\n    Console.Write(\"Your SAS Key: \");\n    string sasKey = Console.ReadLine();\n    ```\n\n3. 创建用于定义服务总线项目中托管位置的 URI。\n\n    ```\n    Uri serviceUri = ServiceBusEnvironment.CreateServiceUri(\"sb\", serviceNamespace, \"EchoService\");\n    ```\n\n4. 创建服务命名空间终结点的凭据对象。\n\n    ```\n    TransportClientEndpointBehavior sasCredential = new TransportClientEndpointBehavior();\n    sasCredential.TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", sasKey);\n    ```\n\n5. 创建加载在 App.config 文件中所述的配置的通道工厂。\n\n    ```\n    ChannelFactory<IEchoChannel> channelFactory = new ChannelFactory<IEchoChannel>(\"RelayEndpoint\", new EndpointAddress(serviceUri));\n    ```\n\n    通道工厂是创建通道（通过该通道，服务和客户端可以进行通信）的一个 WCF 对象。\n\n6. 应用服务总线凭据\n\n    ```\n    channelFactory.Endpoint.Behaviors.Add(sasCredential);\n    ```\n\n7. 创建并打开服务通道。\n\n    ```\n    IEchoChannel channel = channelFactory.CreateChannel();\n    channel.Open();\n    ```\n\n8. 编写用于回显的基本用户界面和功能。\n\n    ```\n    Console.WriteLine(\"Enter text to echo (or [Enter] to exit):\");\n    string input = Console.ReadLine();\n    while (input != String.Empty)\n    {\n        try\n        {\n            Console.WriteLine(\"Server echoed: {0}\", channel.Echo(input));\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"Error: \" + e.Message);\n        }\n        input = Console.ReadLine();\n    }\n    ```\n\n    请注意，代码使用通道对象的实例作为服务代理。\n\n9. 关闭通道，然后关闭工厂。\n\n    ```\n    channel.Close();\n    channelFactory.Close();\n    ```\n\n## 启动客户端应用程序\n\n1. 按“F6”生成解决方案。这将生成客户端项目和你在本教程的上一步创建的服务项目，并为每一个项目创建一个可执行文件。\n\n2. 在运行客户端应用程序之前，请确保服务应用程序正在运行。\n\n    现在，你应该具有 Echo 服务应用程序的名为 EchoService.exe 的可执行文件，该文件位于 \\\\bin\\\\Debug\\\\EchoService.exe（针对调试配置）或 \\\\bin\\\\Release\\\\EchoService.exe（针对发布配置）下的服务项目文件夹中。双击此文件以启动服务应用程序。\n\n3. 将打开一个控制台窗口并提示你输入命名空间。在此控制台窗口中，输入服务命名空间并按“Enter”。\n\n4. 接下来，将提示你提供 SAS 密钥。输入 SAS 密钥并按“ENTER”。\n\n    以下是来自控制台窗口的示例输出。请注意，此处提供的值仅限于示例目的。\n\n    `Your Service Namespace: myNamespace`\n\n    `Your SAS Key: <SAS key value>`\n\n    启动服务应用程序，并将其正在侦听的地址打印到控制台窗口中，如下面的示例中所示。\n\n    `Service address: sb://mynamespace.servicebus.windows.net/EchoService/`\n\n    `Press [Enter] to exit`\n    \n5. 运行客户端应用程序。你应该具有 Echo 客户端应用程序的名为 EchoClient.exe 的可执行文件，该文件位于 .\\\\bin\\\\Debug\\\\EchoClient.exe（针对调试配置）或 .\\\\bin\\\\Release\\\\EchoClient.exe（针对发布配置）下的客户端项目中。双击此文件以启动客户端应用程序。\n\n6. 将打开控制台窗口并提示你输入之前输入的用于服务应用程序的相同信息。请按照前面的步骤，在服务命名空间、颁发者名称和颁发者密钥中输入相同的客户端应用程序值。\n\n7. 输入这些值后，客户端将打开服务通道并提示你输入如以下控制台输出示例中所示的某些文本。\n\n    `Enter text to echo (or [Enter] to exit):`\n\n    输入将发送到服务应用程序的某些文本，并按“Enter”。此文本通过 Echo 服务操作发送到服务并显示在服务控制台窗口中，如下面的示例输出所示。\n\n    `Echoing: My sample text`\n\n    客户端应用程序接收 `Echo` 操作的返回值（此为原始文本），并将其打印到控制台窗口。以下是来自客户端控制台窗口的示例输出。\n\n    `Server echoed: My sample text`\n\n8. 你可以继续以这种方式将来自客户端的短信发送至服务。完成后，在客户端和服务控制台窗口中按 Enter 以结束这两个应用程序。\n\n## 示例\n\n下面的示例演示了如何创建客户端应用程序、如何调用服务操作以及如何在完成操作调用后关闭客户端。\n\n```\nusing System;\nusing Microsoft.ServiceBus;\nusing System.ServiceModel;\n\nnamespace Microsoft.ServiceBus.Samples\n{\n    [ServiceContract(Name = \"IEchoContract\", Namespace = \"http://samples.microsoft.com/ServiceModel/Relay/\")]\n    public interface IEchoContract\n    {\n        [OperationContract]\n        String Echo(string text);\n    }\n\n    public interface IEchoChannel : IEchoContract, IClientChannel { }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ServiceBusEnvironment.SystemConnectivity.Mode = ConnectivityMode.AutoDetect;\n\n            \n            Console.Write(\"Your Service Namespace: \");\n            string serviceNamespace = Console.ReadLine();\n            Console.Write(\"Your SAS Key: \");\n            string sasKey = Console.ReadLine();\n\n\n\n            Uri serviceUri = ServiceBusEnvironment.CreateServiceUri(\"sb\", serviceNamespace, \"EchoService\");\n\n            TransportClientEndpointBehavior sasCredential = new TransportClientEndpointBehavior();\n            sasCredential.TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\"RootManageSharedAccessKey\", sasKey);\n\n            ChannelFactory<IEchoChannel> channelFactory = new ChannelFactory<IEchoChannel>(\"RelayEndpoint\", new EndpointAddress(serviceUri));\n\n            channelFactory.Endpoint.Behaviors.Add(sasCredential);\n\n            IEchoChannel channel = channelFactory.CreateChannel();\n            channel.Open();\n\n            Console.WriteLine(\"Enter text to echo (or [Enter] to exit):\");\n            string input = Console.ReadLine();\n            while (input != String.Empty)\n            {\n                try\n                {\n                    Console.WriteLine(\"Server echoed: {0}\", channel.Echo(input));\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(\"Error: \" + e.Message);\n                }\n                input = Console.ReadLine();\n            }\n\n            channel.Close();\n            channelFactory.Close();\n\n        }\n    }\n}\n```\n\n请确保在启动客户端之前服务正在运行。\n\n## 后续步骤\n\n本教程介绍了如何使用服务总线“中继”功能，构建服务总线客户端应用程序和服务。有关使用服务总线[中转消息传送](/documentation/articles/service-bus-messaging-overview/#Brokered-messaging)的类似教程，请参阅[服务总线中转消息传送 .NET 教程](/documentation/articles/service-bus-brokered-tutorial-dotnet)。\n\n若要了解有关服务总线的详细信息，请参阅以下主题。\n\n- [服务总线消息传送概述](/documentation/articles/service-bus-messaging-overview)\n- [服务总线基础知识](/documentation/articles/service-bus-fundamentals-hybrid-solutions)\n- [服务总线体系结构](/documentation/articles/service-bus-architecture)\n[Azure 经典门户]: http://manage.windowsazure.cn\n\n<!---HONumber=Mooncake_0104_2016-->"
}