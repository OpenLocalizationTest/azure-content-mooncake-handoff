{
  "nodes": [
    {
      "content": "使用 C# 创建和管理 Azure SQL 数据库",
      "pos": [
        27,
        52
      ]
    },
    {
      "content": "本文介绍如何使用适用于.NET 的 Azure SQL 数据库库通过 C# 创建和管理 Azure SQL 数据库。",
      "pos": [
        71,
        129
      ]
    },
    {
      "content": "使用 C&amp;#x23; 创建和管理 SQL 数据库",
      "pos": [
        341,
        365
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        369,
        385
      ]
    },
    {
      "content": "Azure 门户",
      "pos": [
        389,
        397
      ]
    },
    {
      "content": "C",
      "pos": [
        460,
        461
      ]
    },
    {
      "content": "PowerShell",
      "pos": [
        520,
        530
      ]
    },
    {
      "content": "概述",
      "pos": [
        599,
        601
      ]
    },
    {
      "pos": [
        603,
        737
      ],
      "content": "配合本文中所述的命令，可以使用<bpt id=\"p1\">[</bpt>适用于 .NET 的 Azure SQL 数据库库<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.Management.Sql)</ept>通过 C# 执行许多 Azure SQL 数据库管理任务。"
    },
    {
      "content": "为简明起见，我们已分开列出各个代码段，并在本文底部的某个部分中提供了一个示例控制台应用程序，其中结合了所有命令。",
      "pos": [
        739,
        795
      ]
    },
    {
      "pos": [
        797,
        1132
      ],
      "content": "适用于 .NET 的 Azure SQL 数据库库提供了基于 <bpt id=\"p1\">[</bpt>Azure 资源管理器<ept id=\"p1\">](/documentation/articles/resource-group-overview)</ept>的 API，用于包装<bpt id=\"p2\">[</bpt>基于资源管理器的 SQL 数据库 REST API<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/mt163571.aspx)</ept>。此客户端库遵循基于资源管理器的客户端库的通用模式。资源管理器需要资源组，并要求使用 <bpt id=\"p3\">[</bpt>Azure Active Directory<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/mt168838.aspx)</ept> (AAD) 进行身份验证。"
    },
    {
      "pos": [
        1142,
        1188
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>适用于 .NET 的 Azure SQL 数据库库目前以预览版提供。"
    },
    {
      "pos": [
        1196,
        1355
      ],
      "content": "如果你需要 Azure 订阅，只需单击本页顶部的“试用”，然后再回来完成本文的相关操作即可。如需 Visual Studio 的免费副本，请参阅 <bpt id=\"p1\">[</bpt>Visual Studio 下载<ept id=\"p1\">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept>页。"
    },
    {
      "content": "安装所需的库",
      "pos": [
        1360,
        1366
      ]
    },
    {
      "pos": [
        1368,
        1451
      ],
      "content": "使用<bpt id=\"p1\">[</bpt>包管理器控制台<ept id=\"p1\">](http://docs.nuget.org/Consume/Package-Manager-Console)</ept>安装以下包，即可获取所需的管理库："
    },
    {
      "content": "使用 Azure Active Directory 配置身份验证",
      "pos": [
        1651,
        1683
      ]
    },
    {
      "content": "必须通过设置所需的身份验证，使应用程序能够访问 REST API。",
      "pos": [
        1685,
        1718
      ]
    },
    {
      "pos": [
        1720,
        1870
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure 资源管理器 REST API<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn948464.aspx)</ept> 使用 Azure Active Directory 进行身份验证，而不是早期 Azure 服务管理 REST API 使用的证书。"
    },
    {
      "pos": [
        1872,
        2044
      ],
      "content": "若要基于当前的用户对客户端应用程序进行身份验证，你必须先将该应用程序注册到与创建了 Azure 资源的订阅关联的 AAD 域中。如果 Azure 订阅是以 Microsoft 帐户而不是工作或学校帐户创建的，则你已经有了默认的 AAD 域。可以在<bpt id=\"p1\">[</bpt>经典门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中完成应用程序的注册。"
    },
    {
      "content": "若要创建新应用程序并将其注册到正确的 Active Directory 中，请执行以下操作：",
      "pos": [
        2046,
        2092
      ]
    },
    {
      "pos": [
        2097,
        2137
      ],
      "content": "滚动左侧的菜单，找到 <bpt id=\"p1\">**</bpt>Active Directory<ept id=\"p1\">**</ept> 服务并将它打开。"
    },
    {
      "content": "AAD",
      "pos": [
        2145,
        2148
      ]
    },
    {
      "pos": [
        2157,
        2191
      ],
      "content": "选择用于对应用程序进行身份验证的目录，然后单击该目录的<bpt id=\"p1\">**</bpt>名称<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "目录",
      "pos": [
        2199,
        2201
      ]
    },
    {
      "content": "在目录页上，单击“应用程序”。",
      "pos": [
        2210,
        2225
      ]
    },
    {
      "content": "应用程序",
      "pos": [
        2233,
        2237
      ]
    },
    {
      "content": "单击“添加”以创建新的应用程序。",
      "pos": [
        2246,
        2262
      ]
    },
    {
      "content": "添加应用程序",
      "pos": [
        2270,
        2276
      ]
    },
    {
      "content": "选择“添加我的组织正在开发的应用程序”。",
      "pos": [
        2285,
        2305
      ]
    },
    {
      "content": "提供应用的“名称”，然后选择“本机客户端应用程序”。",
      "pos": [
        2310,
        2336
      ]
    },
    {
      "content": "添加应用程序",
      "pos": [
        2344,
        2350
      ]
    },
    {
      "content": "提供“重定向 URI”。它不需要是实际的终结点，只要是有效的 URI 即可。",
      "pos": [
        2359,
        2397
      ]
    },
    {
      "content": "添加应用程序",
      "pos": [
        2405,
        2411
      ]
    },
    {
      "content": "完成创建应用，单击“配置”，然后复制“客户端 ID”（后面需要在代码中使用客户端 ID）。",
      "pos": [
        2420,
        2465
      ]
    },
    {
      "content": "获取客户端 ID",
      "pos": [
        2473,
        2481
      ]
    },
    {
      "content": "在页面底部单击“添加应用程序”。",
      "pos": [
        2491,
        2507
      ]
    },
    {
      "content": "选择“Microsoft 应用”。",
      "pos": [
        2511,
        2528
      ]
    },
    {
      "content": "选择“Azure 服务管理 API”，然后完成向导。",
      "pos": [
        2532,
        2558
      ]
    },
    {
      "content": "选择 API 之后，需要通过选择“访问 Azure 服务管理(预览)”，授予访问此 API 所需的特定权限。",
      "pos": [
        2562,
        2616
      ]
    },
    {
      "content": "权限",
      "pos": [
        2624,
        2626
      ]
    },
    {
      "content": "单击“保存”。",
      "pos": [
        2635,
        2642
      ]
    },
    {
      "content": "标识域名",
      "pos": [
        2650,
        2654
      ]
    },
    {
      "content": "代码中需要用到域名。轻松标识正确域名的一种方式是：",
      "pos": [
        2656,
        2681
      ]
    },
    {
      "pos": [
        2686,
        2732
      ],
      "content": "转到 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "将鼠标悬停在右上角的名称上，并记下弹出窗口中显示的域。",
      "pos": [
        2736,
        2763
      ]
    },
    {
      "content": "标识域名",
      "pos": [
        2771,
        2775
      ]
    },
    {
      "content": "其他 AAD 资源",
      "pos": [
        2787,
        2796
      ]
    },
    {
      "pos": [
        2800,
        2981
      ],
      "content": "在<bpt id=\"p1\">[</bpt>这篇有用的博客文章<ept id=\"p1\">](http://www.cloudidentity.com/blog/2013/09/12/active-directory-authentication-library-adal-v1-for-net-general-availability)</ept>中，可以找到有关使用 Azure Active Directory 进行身份验证的其他信息。"
    },
    {
      "content": "检索当前用户的访问令牌",
      "pos": [
        2988,
        2999
      ]
    },
    {
      "content": "客户端应用程序必须检索当前用户的应用程序访问令牌。当用户首次执行代码时，系统会提示用户输入其用户凭据，生成的令牌将在本地缓存。后续的执行将从缓存中检索令牌，并且仅在令牌已过期时才提示用户登录。",
      "pos": [
        3002,
        3098
      ]
    },
    {
      "content": "若要创建无需用户交互的自动化脚本，你可以根据服务主体（而不是用户）进行身份验证。这种方法需要创建并提交凭据对象。",
      "pos": [
        4011,
        4067
      ]
    },
    {
      "pos": [
        4074,
        4144
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本文中的示例使用每个 API 请求的同步形式，并会一直阻塞，直到对基础服务的 REST 调用完成。有可用的异步方法。"
    },
    {
      "content": "创建资源组",
      "pos": [
        4151,
        4156
      ]
    },
    {
      "content": "使用资源管理器时，必须在资源组中创建所有资源。资源组是一个容器，包含应用程序的相关资源。使用 Azure SQL 数据库时，必须先在现有资源组中创建数据库服务器，再在服务器上创建数据库。然后在应用程序可以使用 TDS 提交 T-SQL 以连接到服务器或数据库之前，你还必须在服务器上创建防火墙规则，以便能够从客户端 IP 地址进行访问。",
      "pos": [
        4158,
        4326
      ]
    },
    {
      "content": "创建服务器",
      "pos": [
        4867,
        4872
      ]
    },
    {
      "content": "SQL 数据库包含在服务器中。服务器名称在所有 Azure SQL Server 中必须全局唯一，因此，如果该服务器名称已被使用，你将会收到错误。还必须指出的是，该命令可能需要数分钟才能运行完毕。",
      "pos": [
        4875,
        4973
      ]
    },
    {
      "content": "创建服务器防火墙规则，以允许对服务器进行访问",
      "pos": [
        5681,
        5703
      ]
    },
    {
      "pos": [
        5705,
        5859
      ],
      "content": "默认情况下，无法从任何位置连接到服务器。为了使用 TDS 连接到服务器并将 T-SQL 提交到服务器或者服务器上的任何数据库，必须定义<bpt id=\"p1\">[</bpt>防火墙规则<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/ee621782.aspx)</ept>以允许从客户端 IP 地址进行访问。"
    },
    {
      "content": "以下示例将创建一个规则，用于实现从任何 IP 地址对服务器进行访问。建议你创建适当的 SQL 登录名和密码来保护数据库，并且不要依赖防火墙规则作为防范入侵的主要防御机制。",
      "pos": [
        5861,
        5946
      ]
    },
    {
      "pos": [
        6449,
        6565
      ],
      "content": "若要允许其他 Azure 服务访问服务器，请添加一个防火墙规则并将 tartIpAddress 和 EndIpAddress 都设置为 0.0.0.0。请注意，这会允许来自<bpt id=\"p1\">*</bpt>任何<ept id=\"p1\">*</ept> Azure 订阅的 Azure 流量访问该服务器。"
    },
    {
      "content": "创建数据库",
      "pos": [
        6571,
        6576
      ]
    },
    {
      "content": "如果服务器上没有同名的数据库，则以下命令将创建新的基本数据库；如果具有同名的数据库，则会更新数据库。",
      "pos": [
        6578,
        6628
      ]
    },
    {
      "content": "更新数据库",
      "pos": [
        7522,
        7527
      ]
    },
    {
      "pos": [
        7530,
        7730
      ],
      "content": "若要更新数据库（例如更改服务层和性能级别），请调用 <bpt id=\"p1\">**</bpt>Databases.CreateOrUpdate<ept id=\"p1\">**</ept> 方法，就像上面所述的创建或更新数据库一样。将 <bpt id=\"p2\">**</bpt>Edition<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>RequestedServiceObjectiveName<ept id=\"p3\">**</ept> 属性设置为所需的服务层和性能级别。请注意，将版本更改为 <bpt id=\"p4\">**</bpt>Premium<ept id=\"p4\">**</ept> 或从该版本更改时，更新可能需要花费一些时间，具体取决于数据库的大小。"
    },
    {
      "content": "以下命令会将 SQL 数据库更新至标准 (S0) 级别：",
      "pos": [
        7732,
        7760
      ]
    },
    {
      "content": "列出服务器上的所有数据库",
      "pos": [
        8695,
        8707
      ]
    },
    {
      "content": "若要列出服务器上的所有数据库，请将服务器和资源组名称传递给 Databases.List 方法：",
      "pos": [
        8709,
        8757
      ]
    },
    {
      "content": "创建弹性数据库池",
      "pos": [
        9136,
        9144
      ]
    },
    {
      "content": "若要在服务器上创建新池，请执行以下操作：",
      "pos": [
        9146,
        9166
      ]
    },
    {
      "content": "更新弹性数据库池",
      "pos": [
        9900,
        9908
      ]
    },
    {
      "content": "将现有数据库移入弹性数据库池",
      "pos": [
        11031,
        11045
      ]
    },
    {
      "pos": [
        11048,
        11201
      ],
      "content": "创建一个池后，你还可以使用 Transact-SQL 将现有数据库移入和移出一个池。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>弹性数据库池参考 - Transact-SQL<ept id=\"p1\">](/documentation/articles/sql-database-elastic-pool-reference/#Transact-SQL)</ept>。"
    },
    {
      "content": "若要将现有数据库移入池中，请执行以下操作：",
      "pos": [
        11204,
        11225
      ]
    },
    {
      "content": "在弹性数据库池中创建新数据库",
      "pos": [
        12266,
        12280
      ]
    },
    {
      "pos": [
        12283,
        12434
      ],
      "content": "创建一个池后，你还可以使用 Transact-SQL 在池中创建新的弹性数据库。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>弹性数据库池参考 - Transact-SQL<ept id=\"p1\">](/documentation/articles/sql-database-elastic-pool-reference/#Transact-SQL)</ept>。"
    },
    {
      "content": "若要直接在池中创建新数据库，请执行以下操作：",
      "pos": [
        12437,
        12459
      ]
    },
    {
      "content": "列出弹性数据库池中的所有数据库",
      "pos": [
        13241,
        13256
      ]
    },
    {
      "content": "若要列出池中的所有数据库，请执行以下操作：",
      "pos": [
        13258,
        13279
      ]
    },
    {
      "content": "删除服务器",
      "pos": [
        13649,
        13654
      ]
    },
    {
      "content": "若要删除某个服务器（这也会删除该服务器上数据库和所有弹性数据库池），请运行以下代码：",
      "pos": [
        13656,
        13698
      ]
    },
    {
      "content": "删除资源组",
      "pos": [
        13802,
        13807
      ]
    },
    {
      "content": "若要删除资源组，请执行以下操作：",
      "pos": [
        13809,
        13825
      ]
    },
    {
      "content": "示例控制台应用程序",
      "pos": [
        13962,
        13971
      ]
    },
    {
      "content": "其他资源",
      "pos": [
        34040,
        34044
      ]
    },
    {
      "content": "SQL 数据库",
      "pos": [
        34047,
        34054
      ]
    },
    {
      "content": "Azure 资源管理 API",
      "pos": [
        34097,
        34111
      ]
    },
    {
      "pos": [
        34176,
        34248
      ],
      "content": "<bpt id=\"p1\">[</bpt>弹性数据库池参考<ept id=\"p1\">](/documentation/articles/sql-database-elastic-pool-reference)</ept>。"
    }
  ],
  "content": "<properties \n   pageTitle=\"使用 C# 创建和管理 Azure SQL 数据库\" \n   description=\"本文介绍如何使用适用于.NET 的 Azure SQL 数据库库通过 C# 创建和管理 Azure SQL 数据库。\" \n   services=\"sql-database\" \n   documentationCenter=\"\" \n   authors=\"stevestein\" \n   manager=\"jeffreyg\" \n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-database\"\n   ms.date=\"12/01/2015\"\n   wacn.date=\"01/15/2016\"/>\n\n# 使用 C&#x23; 创建和管理 SQL 数据库\n\n> [AZURE.SELECTOR]\n- [Azure 门户](/documentation/articles/sql-database-elastic-pool-portal)\n- [C#](/documentation/articles/sql-database-client-library)\n- [PowerShell](/documentation/articles/sql-database-elastic-pool-powershell)\n\n\n## 概述\n\n配合本文中所述的命令，可以使用[适用于 .NET 的 Azure SQL 数据库库](https://www.nuget.org/packages/Microsoft.Azure.Management.Sql)通过 C# 执行许多 Azure SQL 数据库管理任务。\n\n为简明起见，我们已分开列出各个代码段，并在本文底部的某个部分中提供了一个示例控制台应用程序，其中结合了所有命令。\n\n适用于 .NET 的 Azure SQL 数据库库提供了基于 [Azure 资源管理器](/documentation/articles/resource-group-overview)的 API，用于包装[基于资源管理器的 SQL 数据库 REST API](https://msdn.microsoft.com/zh-cn/library/azure/mt163571.aspx)。此客户端库遵循基于资源管理器的客户端库的通用模式。资源管理器需要资源组，并要求使用 [Azure Active Directory](https://msdn.microsoft.com/zh-cn/library/azure/mt168838.aspx) (AAD) 进行身份验证。\n\n<br>\n\n> [AZURE.NOTE]适用于 .NET 的 Azure SQL 数据库库目前以预览版提供。\n\n<br>\n\n如果你需要 Azure 订阅，只需单击本页顶部的“试用”，然后再回来完成本文的相关操作即可。如需 Visual Studio 的免费副本，请参阅 [Visual Studio 下载](https://www.visualstudio.com/downloads/download-visual-studio-vs)页。\n\n## 安装所需的库\n\n使用[包管理器控制台](http://docs.nuget.org/Consume/Package-Manager-Console)安装以下包，即可获取所需的管理库：\n\n    PM> Install-Package Microsoft.Azure.Management.Sql –Pre\n    PM> Install-Package Microsoft.Azure.Management.Resources –Pre\n    PM> Install-Package Microsoft.Azure.Common.Authentication –Pre\n\n\n## 使用 Azure Active Directory 配置身份验证\n\n必须通过设置所需的身份验证，使应用程序能够访问 REST API。\n\n[Azure 资源管理器 REST API](https://msdn.microsoft.com/zh-cn/library/azure/dn948464.aspx) 使用 Azure Active Directory 进行身份验证，而不是早期 Azure 服务管理 REST API 使用的证书。\n\n若要基于当前的用户对客户端应用程序进行身份验证，你必须先将该应用程序注册到与创建了 Azure 资源的订阅关联的 AAD 域中。如果 Azure 订阅是以 Microsoft 帐户而不是工作或学校帐户创建的，则你已经有了默认的 AAD 域。可以在[经典门户](https://manage.windowsazure.cn)中完成应用程序的注册。\n\n若要创建新应用程序并将其注册到正确的 Active Directory 中，请执行以下操作：\n\n1. 滚动左侧的菜单，找到 **Active Directory** 服务并将它打开。\n\n    ![AAD][1]\n\n2. 选择用于对应用程序进行身份验证的目录，然后单击该目录的**名称**。\n\n    ![目录][4]\n\n3. 在目录页上，单击“应用程序”。\n\n    ![应用程序][5]\n\n4. 单击“添加”以创建新的应用程序。\n\n    ![添加应用程序][6]\n\n5. 选择“添加我的组织正在开发的应用程序”。\n\n5. 提供应用的“名称”，然后选择“本机客户端应用程序”。\n\n    ![添加应用程序][7]\n\n6. 提供“重定向 URI”。它不需要是实际的终结点，只要是有效的 URI 即可。\n\n    ![添加应用程序][8]\n\n7. 完成创建应用，单击“配置”，然后复制“客户端 ID”（后面需要在代码中使用客户端 ID）。\n\n    ![获取客户端 ID][9]\n\n\n1. 在页面底部单击“添加应用程序”。\n1. 选择“Microsoft 应用”。\n1. 选择“Azure 服务管理 API”，然后完成向导。\n2. 选择 API 之后，需要通过选择“访问 Azure 服务管理(预览)”，授予访问此 API 所需的特定权限。\n\n    ![权限][2]\n\n2. 单击“保存”。\n\n\n\n### 标识域名\n\n代码中需要用到域名。轻松标识正确域名的一种方式是：\n\n1. 转到 [Azure 门户](https://manage.windowsazure.cn)。\n2. 将鼠标悬停在右上角的名称上，并记下弹出窗口中显示的域。\n\n    ![标识域名][3]\n\n\n\n\n\n**其他 AAD 资源**\n\n在[这篇有用的博客文章](http://www.cloudidentity.com/blog/2013/09/12/active-directory-authentication-library-adal-v1-for-net-general-availability)中，可以找到有关使用 Azure Active Directory 进行身份验证的其他信息。\n\n\n### 检索当前用户的访问令牌 \n\n客户端应用程序必须检索当前用户的应用程序访问令牌。当用户首次执行代码时，系统会提示用户输入其用户凭据，生成的令牌将在本地缓存。后续的执行将从缓存中检索令牌，并且仅在令牌已过期时才提示用户登录。\n\n\n    /// <summary>\n    /// Prompts for user credentials when first run or if the cached credentials have expired.\n    /// </summary>\n    /// <returns>The access token from AAD.</returns>\n    private static AuthenticationResult GetAccessToken()\n    {\n        AuthenticationContext authContext = new AuthenticationContext\n            (\"https://login.chinacloudapi.cn/\" /* AAD URI */ \n                + \"domain.partner.onmschina.cn\" /* Tenant ID or AAD domain */);\n\n        AuthenticationResult token = authContext.AcquireToken\n            (\"https://manage.windowsazure.cn/\"/* the Azure Resource Management endpoint */, \n                \"aa00a0a0-a0a0-0000-0a00-a0a00000a0aa\" /* application client ID from AAD*/, \n        new Uri(\"urn:ietf:wg:oauth:2.0:oob\") /* redirect URI */, \n        PromptBehavior.Auto /* with Auto user will not be prompted if an unexpired token is cached */);\n\n        return token;\n    }\n\n若要创建无需用户交互的自动化脚本，你可以根据服务主体（而不是用户）进行身份验证。这种方法需要创建并提交凭据对象。\n\n\n\n\n> [AZURE.NOTE]本文中的示例使用每个 API 请求的同步形式，并会一直阻塞，直到对基础服务的 REST 调用完成。有可用的异步方法。\n\n\n\n## 创建资源组\n\n使用资源管理器时，必须在资源组中创建所有资源。资源组是一个容器，包含应用程序的相关资源。使用 Azure SQL 数据库时，必须先在现有资源组中创建数据库服务器，再在服务器上创建数据库。然后在应用程序可以使用 TDS 提交 T-SQL 以连接到服务器或数据库之前，你还必须在服务器上创建防火墙规则，以便能够从客户端 IP 地址进行访问。\n\n\n    // Create a resource management client \n    ResourceManagementClient resourceClient = new ResourceManagementClient(new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /*subscription id*/, token.AccessToken ));\n    \n    // Resource group parameters\n    ResourceGroup resourceGroupParameters = new ResourceGroup()\n    {\n        Location = \"China East\"\n    };\n    \n    //Create a resource group\n    var resourceGroupResult = resourceClient.ResourceGroups.CreateOrUpdate(\"resourcegroup-name\", resourceGroupParameters);\n\n\n\n## 创建服务器 \n\nSQL 数据库包含在服务器中。服务器名称在所有 Azure SQL Server 中必须全局唯一，因此，如果该服务器名称已被使用，你将会收到错误。还必须指出的是，该命令可能需要数分钟才能运行完毕。\n\n\n    // Create a SQL Database management client\n    SqlManagementClient sqlClient = new SqlManagementClient(new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* Subscription id*/, token.AccessToken));\n\n    // Create a server\n    ServerCreateOrUpdateParameters serverParameters = new ServerCreateOrUpdateParameters()\n    {\n        Location = \"China East\",\n        Properties = new ServerCreateOrUpdateProperties()\n        {\n            AdministratorLogin = \"ServerAdmin\",\n            AdministratorLoginPassword = \"P@ssword1\",\n            Version = \"12.0\"\n        }\n    };\n\n    var serverResult = sqlClient.Servers.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", serverParameters);\n\n\n\n\n## 创建服务器防火墙规则，以允许对服务器进行访问\n\n默认情况下，无法从任何位置连接到服务器。为了使用 TDS 连接到服务器并将 T-SQL 提交到服务器或者服务器上的任何数据库，必须定义[防火墙规则](https://msdn.microsoft.com/zh-cn/library/azure/ee621782.aspx)以允许从客户端 IP 地址进行访问。\n\n以下示例将创建一个规则，用于实现从任何 IP 地址对服务器进行访问。建议你创建适当的 SQL 登录名和密码来保护数据库，并且不要依赖防火墙规则作为防范入侵的主要防御机制。\n\n\n    // Create a firewall rule on the server to allow TDS connection \n    FirewallRuleCreateOrUpdateParameters firewallParameters = new FirewallRuleCreateOrUpdateParameters()\n    {\n        Properties = new FirewallRuleCreateOrUpdateProperties()\n        {\n            StartIpAddress = \"0.0.0.0\",\n            EndIpAddress = \"255.255.255.255\"\n        }\n    };\n\n    var firewallResult = sqlClient.FirewallRules.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"FirewallRule1\", firewallParameters);\n\n\n\n\n若要允许其他 Azure 服务访问服务器，请添加一个防火墙规则并将 tartIpAddress 和 EndIpAddress 都设置为 0.0.0.0。请注意，这会允许来自*任何* Azure 订阅的 Azure 流量访问该服务器。\n\n\n## 创建数据库\n\n如果服务器上没有同名的数据库，则以下命令将创建新的基本数据库；如果具有同名的数据库，则会更新数据库。\n\n        // Create a database\n\n        // Retrieve the server on which the database will be created\n        Server currentServer = sqlClient.Servers.Get(\"resourcegroup-name\", \"server-name\").Server;\n \n        // Create a database: configure create or update parameters and properties explicitly\n        DatabaseCreateOrUpdateParameters newDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n        {\n            Location = currentServer.Location,\n            Properties = new DatabaseCreateOrUpdateProperties()\n            {\n                Edition = \"Basic\",\n                RequestedServiceObjectiveName = \"Basic\",\n                MaxSizeBytes = 2147483648,\n                Collation = \"SQL_Latin1_General_CP1_CI_AS\"\n            }\n        };\n\n        var dbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", newDatabaseParameters);\n\n\n\n## 更新数据库 \n\n若要更新数据库（例如更改服务层和性能级别），请调用 **Databases.CreateOrUpdate** 方法，就像上面所述的创建或更新数据库一样。将 **Edition** 和 **RequestedServiceObjectiveName** 属性设置为所需的服务层和性能级别。请注意，将版本更改为 **Premium** 或从该版本更改时，更新可能需要花费一些时间，具体取决于数据库的大小。\n\n以下命令会将 SQL 数据库更新至标准 (S0) 级别：\n\n    // Retrieve current database properties \n    var currentDatabase = sqlClient.Databases.Get(\"resourecegroup-name\", \"server-name\", \"Database1\").Database;\n\n    // Configure create or update parameters with existing property values, override those to be changed.\n    DatabaseCreateOrUpdateParameters updateDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n    {\n        Location = currentDatabase.Location,\n        Properties = new DatabaseCreateOrUpdateProperties()\n        {\n            Edition = \"Standard\",\n            RequestedServiceObjectiveName = \"S0\", // alternatively set the RequestedServiceObjectiveId\n            MaxSizeBytes = currentDatabase.Properties.MaxSizeBytes,\n            Collation = currentDatabase.Properties.Collation\n        }\n     };\n\n    // Update the database\n    dbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", updateDatabaseParameters);\n\n\n## 列出服务器上的所有数据库\n\n若要列出服务器上的所有数据库，请将服务器和资源组名称传递给 Databases.List 方法：\n\n    // List databases on the server\n    DatabaseListResponse dbListOnServer = sqlClient.Databases.List(\"resourcegroup-name\", \"server-name\");\n    Console.WriteLine(\"Databases on Server {0}\", \"server-name\");\n    foreach (Database db in dbListOnServer)\n    {\n        Console.WriteLine(\"  Database {0}, Service Objective {1}\", db.Name, db.Properties.ServiceObjective);\n    }\n\n\n\n## 创建弹性数据库池\n\n若要在服务器上创建新池，请执行以下操作：\n\n\n\n    // Create elastic pool: configure create or update parameters and properties explicitly\n    ElasticPoolCreateOrUpdateParameters newPoolParameters = new ElasticPoolCreateOrUpdateParameters()\n    {\n        Location = \"China East\",\n        Properties = new ElasticPoolCreateOrUpdateProperties()\n        {\n            Edition = \"Standard\",\n            Dtu = 100,  // alternatively set StorageMB, if both are specified they must agree based on the eDTU:storage ratio of the edition\n            DatabaseDtuMin = 0,\n            DatabaseDtuMax = 100\n         }\n    };\n\n    // Create the pool\n    var newPoolResponse = sqlClient.ElasticPools.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", newPoolParameters);\n\n\n## 更新弹性数据库池\n\n    // Retrieve existing pool properties\n    var currentPool = sqlClient.ElasticPools.Get(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\").ElasticPool;\n\n    // Configure create or update parameters with existing property values, override those to be changed.\n    ElasticPoolCreateOrUpdateParameters updatePoolParameters = new ElasticPoolCreateOrUpdateParameters()\n    {\n        Location = currentPool.Location,\n        Properties = new ElasticPoolCreateOrUpdateProperties()\n        {\n            Edition = currentPool.Properties.Edition,\n            DatabaseDtuMax = 50, /* Setting DatabaseDtuMax to 50 limits the eDTUs that any one database can consume */\n            DatabaseDtuMin = 10, /* Setting DatabaseDtuMin above 0 limits the number of databases that can be stored in the pool */\n            Dtu = (int)currentPool.Properties.Dtu,\n            StorageMB = currentPool.Properties.StorageMB,  /* For a Standard pool there is 1 GB of storage per eDTU. */\n        }\n    };\n\n    newPoolResponse = sqlClient.ElasticPools.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", newPoolParameters);\n\n\n\n## 将现有数据库移入弹性数据库池\n\n*创建一个池后，你还可以使用 Transact-SQL 将现有数据库移入和移出一个池。有关详细信息，请参阅[弹性数据库池参考 - Transact-SQL](/documentation/articles/sql-database-elastic-pool-reference/#Transact-SQL)。*\n\n若要将现有数据库移入池中，请执行以下操作：\n\n    \n    // Update database service objective to add the database to a pool\n    \n    // Retrieve current database properties \n    currentDatabase = sqlClient.Databases.Get(\"resourcegroup-name\", \"server-name\", \"Database1\").Database;\n    \n    // Configure create or update parameters with existing property values, override those to be changed.\n    DatabaseCreateOrUpdateParameters updatePooledDbParameters = new DatabaseCreateOrUpdateParameters()\n    {\n        Location = currentDatabase.Location,\n        Properties = new DatabaseCreateOrUpdateProperties()\n        {\n            Edition = \"Standard\",\n            RequestedServiceObjectiveName = \"ElasticPool\",\n            ElasticPoolName = \"ElasticPool1\",\n            MaxSizeBytes = currentDatabase.Properties.MaxSizeBytes,\n            Collation = currentDatabase.Properties.Collation,\n        }\n    };\n    \n    // Update the database\n    var dbUpdateResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", updatePooledDbParameters);\n    \n    \n\n\n## 在弹性数据库池中创建新数据库\n\n*创建一个池后，你还可以使用 Transact-SQL 在池中创建新的弹性数据库。有关详细信息，请参阅[弹性数据库池参考 - Transact-SQL](/documentation/articles/sql-database-elastic-pool-reference/#Transact-SQL)。*\n\n若要直接在池中创建新数据库，请执行以下操作：\n\n    \n    // Create a new database in the pool\n    \n    // Create a database: configure create or update parameters and properties explicitly\n    DatabaseCreateOrUpdateParameters newPooledDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n    {\n        Location = currentServer.Location,\n        Properties = new DatabaseCreateOrUpdateProperties()\n        {\n            Edition = \"Standard\",\n            RequestedServiceObjectiveName = \"ElasticPool\",\n            ElasticPoolName = \"ElasticPool1\",\n            MaxSizeBytes = 268435456000, // 250 GB,\n            Collation = \"SQL_Latin1_General_CP1_CI_AS\"\n        }\n    };\n    \n    var poolDbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database2\", newPooledDatabaseParameters);\n\n\n\n## 列出弹性数据库池中的所有数据库\n\n若要列出池中的所有数据库，请执行以下操作：\n\n    //List databases in the elastic pool\n    DatabaseListResponse dbListInPool = sqlClient.ElasticPools.ListDatabases(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\");\n    Console.WriteLine(\"Databases in Elastic Pool {0}\", \"server-name.ElasticPool1\");\n    foreach (Database db in dbListInPool)\n    {\n        Console.WriteLine(\"  Database {0}\", db.Name);\n    }\n\n## 删除服务器\n\n若要删除某个服务器（这也会删除该服务器上数据库和所有弹性数据库池），请运行以下代码：\n\n    var serverOperationResponse = sqlClient.Servers.Delete(\"resourcegroup-name\", \"server-name\");\n\n\n## 删除资源组\n\n若要删除资源组，请执行以下操作：\n\n    // Delete the resource group\n    var resourceOperationResponse = resourceClient.ResourceGroups.Delete(\"resourcegroup-name\");\n\n\n\n## 示例控制台应用程序\n\n\n    using Microsoft.Azure;\n    using Microsoft.Azure.Insights;\n    using Microsoft.Azure.Insights.Models;\n    using Microsoft.Azure.Management.Resources;\n    using Microsoft.Azure.Management.Resources.Models;\n    using Microsoft.Azure.Management.Sql;\n    using Microsoft.Azure.Management.Sql.Models;\n    using Microsoft.IdentityModel.Clients.ActiveDirectory;\n    using System;\n    using System.Security;\n\n    namespace AzureSqlDatabaseRestApiExamples\n    {\n    class Program\n    {\n        /// <summary>\n        /// Prompts for user credentials when first run or if the cached credentials have expired.\n        /// </summary>\n        /// <returns>The access token from AAD.</returns>\n        private static AuthenticationResult GetAccessToken()\n        {\n            AuthenticationContext authContext = new AuthenticationContext\n                (\"https://login.chinacloudapi.cn/\" /* AAD URI */ \n                + \"domain.partner.onmschina.cn\" /* Tenant ID or AAD domain */);\n\n            AuthenticationResult token = authContext.AcquireToken\n                (\"https://manage.windowsazure.cn/\"/* the Azure Resource Management endpoint */, \n                \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* application client ID from AAD*/, \n                new Uri(\"urn:ietf:wg:oauth:2.0:oob\") /* redirect URI */, \n                PromptBehavior.Auto /* with Auto user will not be prompted if an unexpired token is cached */);\n\n            return token;\n        }\n\n        private static AuthenticationResult GetAccessTokenUsingUserCredentials(UserCredential userCredential)\n        {\n            AuthenticationContext authContext = new AuthenticationContext\n                (\"https://login.chinacloudapi.cn/\" /* AAD URI */\n                + \"YOU.partner.onmschina.cn\" /* Tenant ID or AAD domain */);\n\n            AuthenticationResult token = authContext.AcquireToken(\n                \"https://manage.windowsazure.cn/\"/* the Azure Resource Management endpoint */,\n                \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* application client ID from AAD*/,\n                userCredential);\n\n            return token;\n        }\n        private static SecureString convertToSecureString(string secret)\n        {\n            var secureStr = new SecureString();\n            if (secret.Length > 0)\n            {\n                foreach (var c in secret.ToCharArray()) secureStr.AppendChar(c);\n            }\n            return secureStr;\n        }\n\n        static void Main(string[] args)\n        {\n            var token = GetAccessToken();\n            \n            // Who am I?\n            Console.WriteLine(\"Identity is {0} {1}\", token.UserInfo.GivenName, token.UserInfo.FamilyName);\n            Console.WriteLine(\"Token expires on {0}\", token.ExpiresOn);\n            Console.WriteLine(\"\");\n\n            // Create a resource management client \n            ResourceManagementClient resourceClient = new ResourceManagementClient(new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /*subscription id*/, token.AccessToken));\n\n            // Resource group parameters\n            ResourceGroup resourceGroupParameters = new ResourceGroup()\n            {\n                Location = \"China East\"\n            };\n\n            //Create a resource group\n            var resourceGroupResult = resourceClient.ResourceGroups.CreateOrUpdate(\"resourcegroup-name\", resourceGroupParameters);\n\n            Console.WriteLine(\"Resource group {0} create or update completed with status code {1} \", resourceGroupResult.ResourceGroup.Name, resourceGroupResult.StatusCode);\n\n            //create a SQL Database management client\n            TokenCloudCredentials tokenCredentials = new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* Subscription id*/, token.AccessToken);\n\n            SqlManagementClient sqlClient = new SqlManagementClient(tokenCredentials);\n\n            // Create a server\n            ServerCreateOrUpdateParameters serverParameters = new ServerCreateOrUpdateParameters()\n            {\n                Location = \"China East\",\n                Properties = new ServerCreateOrUpdateProperties()\n                {\n                    AdministratorLogin = \"ServerAdmin\",\n                    AdministratorLoginPassword = \"P@ssword1\",\n                    Version = \"12.0\"\n                }\n            };\n\n            var serverResult = sqlClient.Servers.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", serverParameters);\n\n            var serverGetResult = sqlClient.Servers.Get(\"resourcegroup-name\", \"server-name\");\n\n\n            Console.WriteLine(\"Server {0} create or update completed with status code {1}\", serverResult.Server.Name, serverResult.StatusCode);\n\n            // Create a firewall rule on the server to allow TDS connection \n\n            FirewallRuleCreateOrUpdateParameters firewallParameters = new FirewallRuleCreateOrUpdateParameters()\n            {\n                Properties = new FirewallRuleCreateOrUpdateProperties()\n                {\n                    StartIpAddress = \"0.0.0.0\",\n                    EndIpAddress = \"255.255.255.255\"\n                }\n            };\n\n            var firewallResult = sqlClient.FirewallRules.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"FirewallRule1\", firewallParameters);\n\n            Console.WriteLine(\"Firewall rule {0} create or update completed with status code {1}\", firewallResult.FirewallRule.Name, firewallResult.StatusCode);\n\n            // Create a database\n\n            // Retrieve the server on which the database will be created\n            Server currentServer = sqlClient.Servers.Get(\"resourcegroup-name\", \"server-name\").Server;\n\n            // Create a database: configure create or update parameters and properties explicitly\n            DatabaseCreateOrUpdateParameters newDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n            {\n                Location = currentServer.Location,\n                Properties = new DatabaseCreateOrUpdateProperties()\n                {\n                    Edition = \"Basic\",\n                    RequestedServiceObjectiveName = \"Basic\",\n                    MaxSizeBytes = 2147483648,\n                    Collation = \"SQL_Latin1_General_CP1_CI_AS\"\n                }\n            };\n\n            var dbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", newDatabaseParameters);\n\n            Console.WriteLine(\"Database {0} create or update completed with status code {1}. Service Objective {2} \", dbResponse.Database.Name, dbResponse.StatusCode, dbResponse.Database.Properties.ServiceObjective);\n\n            // ...\n            // Update database: retrieve current database properties \n            var currentDatabase = sqlClient.Databases.Get(\"resourcegroup-name\", \"server-name\", \"Database1\").Database;\n\n            // Update database: configure create or update parameters with existing property values, override those to be changed.\n            DatabaseCreateOrUpdateParameters updateDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n            {\n                Location = currentDatabase.Location,\n                Properties = new DatabaseCreateOrUpdateProperties()\n                {\n                    Edition = \"Standard\",\n                    RequestedServiceObjectiveName = \"S0\", // alternatively set the RequestedServiceObjectiveId\n                    MaxSizeBytes = currentDatabase.Properties.MaxSizeBytes,\n                    Collation = currentDatabase.Properties.Collation\n                }\n            };\n\n            // Update the database\n            dbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", updateDatabaseParameters);\n\n            Console.WriteLine(\"Database {0} create or update completed with status code {1}. Service Objective: {2} \", dbResponse.Database.Name, dbResponse.StatusCode, dbResponse.Database.Properties.ServiceObjective);\n\n            // Create elastic pool: configure create or update parameters and properties explicitly\n            ElasticPoolCreateOrUpdateParameters newPoolParameters = new ElasticPoolCreateOrUpdateParameters()\n            {\n                Location = \"China East\",\n                Properties = new ElasticPoolCreateOrUpdateProperties()\n                {\n                    Edition = \"Standard\",\n                    Dtu = 100,  // alternatively set StorageMB, if both are specified they must agree based on the eDTU:storage ratio of the edition\n                    DatabaseDtuMin = 0,\n                    DatabaseDtuMax = 100\n                }\n            };\n\n           // Create the pool\n            var newPoolResponse = sqlClient.ElasticPools.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", newPoolParameters);\n\n            Console.WriteLine(\"Elastic pool {0} create or update completed with status code {1}.\", newPoolResponse.ElasticPool.Name, newPoolResponse.StatusCode);\n\n            // Update pool: retrieve existing pool properties\n            var currentPool = sqlClient.ElasticPools.Get(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\").ElasticPool;\n\n            // Update pool: configure create or update parameters with existing property values, override those to be changed.\n            ElasticPoolCreateOrUpdateParameters updatePoolParameters = new ElasticPoolCreateOrUpdateParameters()\n            {\n                Location = currentPool.Location,\n                Properties = new ElasticPoolCreateOrUpdateProperties()\n                {\n                    Edition = currentPool.Properties.Edition,\n                    DatabaseDtuMax = 50, /* Setting DatabaseDtuMax to 50 limits the eDTUs that any one database can consume */\n                    DatabaseDtuMin = 10, /* Setting DatabaseDtuMin above 0 limits the number of databases that can be stored in the pool */\n                    Dtu = (int)currentPool.Properties.Dtu,\n                    StorageMB = currentPool.Properties.StorageMB,  /* For a Standard pool there is 1 GB of storage per eDTU. */\n                }\n            };\n            newPoolResponse = sqlClient.ElasticPools.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", newPoolParameters);\n\n            Console.WriteLine(\"Elastic pool {0} create or update completed with status code {1}.\", newPoolResponse.ElasticPool.Name, newPoolResponse.StatusCode);\n\n            // Update database service objective to add the database to a pool\n\n            // Update database: retrieve current database properties \n            currentDatabase = sqlClient.Databases.Get(\"resourcegroup-name\", \"server-name\", \"Database1\").Database;\n\n            // Update database: configure create or update parameters with existing property values, override those to be changed.\n            DatabaseCreateOrUpdateParameters updatePooledDbParameters = new DatabaseCreateOrUpdateParameters()\n            {\n                Location = currentDatabase.Location,\n                Properties = new DatabaseCreateOrUpdateProperties()\n                {\n                    Edition = \"Standard\",\n                    RequestedServiceObjectiveName = \"ElasticPool\",\n                    ElasticPoolName = \"ElasticPool1\",\n                    MaxSizeBytes = currentDatabase.Properties.MaxSizeBytes,\n                    Collation = currentDatabase.Properties.Collation,\n                }\n            };\n\n            // Update the database\n            var dbUpdateResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", updatePooledDbParameters);\n\n            Console.WriteLine(\"Database {0} create or update completed with status code {1}. Service Objective: {2}({3}) \", dbUpdateResponse.Database.Name, dbUpdateResponse.StatusCode, dbUpdateResponse.Database.Properties.ServiceObjective, dbUpdateResponse.Database.Properties.ElasticPoolName);\n\n            // Create a new database in the pool\n\n            // Create a database: configure create or update parameters and properties explicitly\n            DatabaseCreateOrUpdateParameters newPooledDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n            {\n                Location = currentServer.Location,\n                Properties = new DatabaseCreateOrUpdateProperties()\n                {\n                    Edition = \"Standard\",\n                    RequestedServiceObjectiveName = \"ElasticPool\",\n                    ElasticPoolName = \"ElasticPool1\",\n                    MaxSizeBytes = 268435456000, // 250 GB,\n                    Collation = \"SQL_Latin1_General_CP1_CI_AS\"\n                }\n            };\n\n            var poolDbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database2\", newPooledDatabaseParameters);\n\n            Console.WriteLine(\"Database {0} create or update completed with status code {1}. Service Objective: {2}({3}) \", poolDbResponse.Database.Name, poolDbResponse.StatusCode, poolDbResponse.Database.Properties.ServiceObjective, poolDbResponse.Database.Properties.ElasticPoolName);\n\n            // List databases on the server\n            DatabaseListResponse dbListOnServer = sqlClient.Databases.List(\"resourcegroup-name\", \"server-name\");\n            Console.WriteLine(\"Databases on Server {0}\", \"server-name\");\n            foreach (Database db in dbListOnServer)\n            {\n                Console.WriteLine(\"  Database {0}, Service Objective {1}\", db.Name, db.Properties.ServiceObjective);\n            }\n\n            // List all servers, pools and databases in the resource group\n            ServerListResponse serverList = new ServerListResponse();\n            ElasticPoolListResponse poolList = new ElasticPoolListResponse();\n            DatabaseListResponse dbListInPool = new DatabaseListResponse();\n\n            Console.WriteLine(\"Servers in resource group {0}\", \"resourcegroup-name\");\n            serverList = sqlClient.Servers.List(\"resourcegroup-name\");\n            foreach (Server server in serverList)\n            {\n                Console.WriteLine(\"  Server '{0}' location: {1}\", server.Name, server.Location);\n                poolList = sqlClient.ElasticPools.List(\"resourcegroup-name\", server.Name);\n                foreach (ElasticPool pool in poolList)\n                {\n                    Console.WriteLine(\"    Elastic Pool '{0}' edition: {1} eDTU: {2} storage GB: {3} database eDTU min: {4} database eDTU max: {5}\", pool.Name, pool.Properties.Edition, pool.Properties.Dtu, (pool.Properties.StorageMB/1024), pool.Properties.DatabaseDtuMin, pool.Properties.DatabaseDtuMax);\n                    dbListInPool = sqlClient.ElasticPools.ListDatabases(\"resourcegroup-name\", server.Name, pool.Name);\n                    foreach(Database db in dbListInPool)\n                    {\n                        Console.WriteLine(\"      Database '{0}'\", db.Name);                       \n                    }\n                }\n            }\n\n            // Metrics\n\n            var endTime = String.Format(DateTime.Now.ToUniversalTime().ToString(\"s\")) + \"Z\"; // as UTC in sortable time format yyyy-mm-ddThh:mm:ssZ\n            var duration = TimeSpan.FromHours(2);\n            var startTime = String.Format(DateTime.Now.Subtract(duration).ToUniversalTime().ToString(\"s\")) + \"Z\";  // as UTC in sortable time format yyyy-mm-ddThh:mm:ssZ\n\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"Elastic pool metrics for 'ElasticPool1'\");\n\n            ElasticPoolMetricDefinitions poolMetricDefinition = new ElasticPoolMetricDefinitions();\n            poolMetricDefinition = sqlClient.ElasticPools.ListMetricDefinitions(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\");\n\n            Console.WriteLine(\"  Metric definitions: \");\n            foreach (Microsoft.Azure.Management.Sql.Models.MetricDefinition metricDefinition in poolMetricDefinition.MetricDefinitions)\n            {\n                Console.WriteLine(\"    '{0}' unit: {1} aggregation type: {2}\", metricDefinition.Name.LocalizedValue, metricDefinition.Unit, metricDefinition.PrimaryAggregationType);\n            }\n            Console.WriteLine(\"  Metric values: \");\n            ElasticPoolMetrics elasticPoolMetrics = new ElasticPoolMetrics();\n            elasticPoolMetrics = sqlClient.ElasticPools.ListMetrics(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", \"name.value eq 'dtu_consumption_percent'\", \"PT5M\", startTime, endTime);\n            foreach (Microsoft.Azure.Management.Sql.Models.Metric metric in elasticPoolMetrics.Metrics)\n            {\n                Console.WriteLine(\"    '{0}' unit: {1} time grain: {2} start time: {3} end time: {4} values: {5}\", metric.Name.LocalizedValue, metric.Unit, metric.TimeGrain, metric.StartTime, metric.EndTime, metric.Values.Count);\n                foreach (Value metricValue in metric.Values)\n                {\n                    Console.WriteLine(\"      Timestamp: {0} average: {1} minimum: {2} maximum {3} total {4}\", metricValue.Timestamp, metricValue.Average, metricValue.Maximum, metricValue.Minimum, metricValue.Total);\n                }\n            }\n\n            // List database metrics\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"Database metrics for 'Database1'\");\n            Console.WriteLine(\"  Metric definitions\"); \n\n            Microsoft.Azure.Insights.InsightsClient insightsClient = new InsightsClient(tokenCredentials);\n\n            Microsoft.Azure.Insights.Models.MetricDefinitionListResponse metricDefinitionListResponse = insightsClient.MetricDefinitionOperations.GetMetricDefinitions(\"subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourcegroups/resourcegroup-name/providers/microsoft.sql/servers/server-name/databases/Database1/\", \"\");\n            foreach (Microsoft.Azure.Insights.Models.MetricDefinition metricDefinition in metricDefinitionListResponse.MetricDefinitionCollection.Value)\n            {\n                Console.WriteLine(\"    {0} unit: {1} aggregation: {2}\" , metricDefinition.Name.LocalizedValue, metricDefinition.Unit, metricDefinition.PrimaryAggregationType);\n            }\n            var resourceURI = \"subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourcegroups/resourcegroup-name/providers/microsoft.sql/servers/server-name/databases/Database1/\";\n            var filter = \"(name.value eq 'dtu_consumption_percent') and startTime eq \" + startTime + \" and endTime eq \" + endTime + \" and timeGrain eq duration'PT5M'\";\n\n            Console.WriteLine(\"  Metric values\");\n            MetricListResponse mlr = insightsClient.MetricOperations.GetMetrics(resourceURI,filter);\n            foreach (Microsoft.Azure.Insights.Models.Metric metric in mlr.MetricCollection.Value)\n            {\n                Console.WriteLine(\"    {0}\", metric.Name.LocalizedValue);\n                foreach (MetricValue metricValue in metric.MetricValues)\n                {\n                    Console.WriteLine(\"      Timestamp: {0} minimum: {1} maximum: {2} average: {3}\", metricValue.Timestamp, metricValue.Minimum, metricValue.Maximum, metricValue.Average);\n                }\n            }\n\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"Press any key to delete the server and resource group, which will also delete the databases and the elastic pool.\");\n            Console.ReadKey();\n\n            // Delete the server which deletes the databases and then the elastic pool\n            var serverOperationResponse = sqlClient.Servers.Delete(\"resourcegroup-name\", \"server-name\");\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"Server {0} delete completed with status code {1}.\", \"server-name\", serverOperationResponse.StatusCode);\n\n            // Delete the resource group\n            var resourceOperationResponse = resourceClient.ResourceGroups.Delete(\"resourcegroup-name\");\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"Resource {0} delete completed with status code {1}.\", \"resourcegroup-name\", resourceOperationResponse.StatusCode);\n\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"Execution complete.  Press any key to continue.\");\n            Console.ReadKey();\n        }\n    }\n    }\n\n\n\n\n\n## 其他资源\n\n[SQL 数据库](/documentation/services/sql-databases)\n\n[Azure 资源管理 API](https://msdn.microsoft.com/zh-cn/library/azure/dn948464.aspx)\n\n[弹性数据库池参考](/documentation/articles/sql-database-elastic-pool-reference)。\n\n\n<!--Image references-->\n[1]: ./media/sql-database-client-library/aad.png\n[2]: ./media/sql-database-client-library/permissions.png\n[3]: ./media/sql-database-client-library/getdomain.png\n[4]: ./media/sql-database-client-library/aad2.png\n[5]: ./media/sql-database-client-library/aad-applications.png\n[6]: ./media/sql-database-client-library/add.png\n[7]: ./media/sql-database-client-library/add-application.png\n[8]: ./media/sql-database-client-library/add-application2.png\n[9]: ./media/sql-database-client-library/clientid.png\n\n<!---HONumber=Mooncake_0104_2016-->\n"
}