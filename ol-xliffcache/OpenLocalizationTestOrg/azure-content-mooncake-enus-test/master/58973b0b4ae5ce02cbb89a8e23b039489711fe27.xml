{
  "nodes": [
    {
      "content": "在 Azure 存储中管理并发",
      "pos": [
        28,
        43
      ]
    },
    {
      "content": "如何管理 Blob、队列、表和文件服务的并发",
      "pos": [
        63,
        85
      ]
    },
    {
      "content": "在 Azure 存储中管理并发",
      "pos": [
        293,
        308
      ]
    },
    {
      "content": "概述",
      "pos": [
        313,
        315
      ]
    },
    {
      "content": "通常情况下，基于 Internet 的新型应用程序允许多名用户同时查看和更新数据。这就要求应用程序开发人员仔细考虑如何为他们的最终用户提供可预测的体验，尤其是在多名用户可以更新相同数据的情况下。开发人员通常将考虑下面三个主要数据并发策略：",
      "pos": [
        318,
        437
      ]
    },
    {
      "content": "乐观并发 – 执行更新的应用程序在更新过程中要验证数据是否自该应用程序上次读取该数据起已发生更改。例如，如果两名查看 wiki 页的用户对同一页进行更新，则 wiki 平台必须确保第二次更新不会覆盖第一次更新，并且两名用户都了解他们的更新成功与否。此策略最常用于 Web 应用中。",
      "pos": [
        444,
        584
      ]
    },
    {
      "content": "悲观并发 – 要执行更新的应用程序将对对象获取一个锁，以防其他用户在该锁释放前更新数据。例如，在主/从数据复制情况下，如果只有主对象要执行更新，则该对象通常将在长时间内对数据持有一个独占锁，以确保其他任何用户都不能更新该数据。",
      "pos": [
        589,
        702
      ]
    },
    {
      "content": "上次编写者赢 – 一种方法，即允许任何更新操作继续进行，而不需要验证其他任何应用程序是否自应用程序首次读取数据起已更新该数据。此策略（或缺乏正式策略）通常用于以下情况：以多名用户不可能访问相同数据的方式对数据进行分区。该策略可能还适用于正在处理短期数据流的情况。",
      "pos": [
        707,
        838
      ]
    },
    {
      "content": "本文概述 Azure 存储平台如何通过为所有这三个并发策略提供一类支持来简化开发。",
      "pos": [
        842,
        883
      ]
    },
    {
      "content": "Azure 存储 – 简化云开发",
      "pos": [
        890,
        906
      ]
    },
    {
      "content": "Azure 存储服务支持所有三个策略，尽管它具有独特的功能，可以为乐观并发和悲观并发提供完全支持，因为该服务旨在采用强大的一致性模型，该模型用于保证，当存储服务提交数据插入或更新操作时，所有对该数据的进一步访问都将显示最新更新。存储平台如果使用最终一致性模型，则在一名用户执行写入与其他用户可以查看已更新的数据之间存在着时滞，因而会使客户端应用程序开发复杂化，以防不一致性影响最终用户。",
      "pos": [
        907,
        1100
      ]
    },
    {
      "content": "除了选择相应的并发策略，开发人员还应了解存储平台如何隔离更改，尤其是对跨事务的相同对象的更改。Azure 存储服务使用快照隔离允许在单个分区中并发执行读取操作与写入操作。与其他隔离级别不同，快照隔离保证，所有读取操作看到的数据快照是一致的，即使在执行更新时也是如此。事实上，这是通过在处理更新事务时返回上次提交的值实现的。",
      "pos": [
        1102,
        1263
      ]
    },
    {
      "content": "在 Blob 服务中管理并发",
      "pos": [
        1270,
        1284
      ]
    },
    {
      "content": "你可以选择使用乐观并发模型或悲观并发模型，来管理对 Blob 服务中的 Blob 和容器的访问。如果你没有明确指定策略，则上次编写者赢是默认策略。",
      "pos": [
        1285,
        1358
      ]
    },
    {
      "content": "Blob 和容器的乐观并发",
      "pos": [
        1364,
        1377
      ]
    },
    {
      "content": "存储服务会为每个存储对象分配一个标识符。只要对对象执行更新操作，就会更新此标识符。在使用 HTTP 协议中定义的 ETag（实体标记）标头的情况下，该标识符作为 HTTP GET 响应的一部分返回到客户端。对此类对象执行更新的用户，可以连同条件标头一起在原始 ETag 中发送，以确保仅当已满足特定条件时才会进行更新 – 在这种情况下，该条件是“If-Match”标头，该标头要求存储服务确保在更新请求中指定的 ETag 值与存储服务中存储的值相同。",
      "pos": [
        1381,
        1606
      ]
    },
    {
      "content": "此进程的概述如下：",
      "pos": [
        1608,
        1617
      ]
    },
    {
      "content": "从存储服务检索 Blob，响应包括用于在存储服务中标识对象当前版本的 HTTP ETag 标头值。",
      "pos": [
        1625,
        1674
      ]
    },
    {
      "pos": [
        1679,
        1742
      ],
      "content": "在更新 Blob 时，应将您在步骤 1 中获得的 ETag 值包括在发送到服务的请求的 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept> 条件标头中。"
    },
    {
      "content": "该服务会将请求中的 ETag 值与 Blob 的当前 ETag 值进行比较。",
      "pos": [
        1747,
        1785
      ]
    },
    {
      "pos": [
        1790,
        1899
      ],
      "content": "如果 Blob 的当前 ETag 值与请求的 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept> 条件标头中的 ETag 的版本不同，则该服务将 412 错误返回到客户端。这向客户端表明，其他进程自客户端检索到 Blob 起已更新该 Blob。"
    },
    {
      "pos": [
        1904,
        2003
      ],
      "content": "如果 Blob 的当前 ETag 值与请求的 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept> 条件标头中的 ETag 的版本相同，则该服务将执行请求的操作，并更新该 Blob 的当前 ETag 值，以说明它已创建新版本。"
    },
    {
      "pos": [
        2007,
        2338
      ],
      "content": "以下 C# 代码段（使用客户端存储库 4.2.0）显示一个简单示例，说明如何根据从以前检索到或插入的 Blob 访问的 ETag 值构造 <bpt id=\"p1\">**</bpt>If-Match AccessCondition<ept id=\"p1\">**</ept>。然后，在更新该 Blob 时使用 <bpt id=\"p2\">**</bpt>AccessCondition<ept id=\"p2\">**</ept> 对象：<bpt id=\"p3\">**</bpt>AccessCondition<ept id=\"p3\">**</ept> 对象将 <bpt id=\"p4\">**</bpt>If-Match<ept id=\"p4\">**</ept> 标头添加到请求中。如果其他进程已更新该 Blob，则 Blob 服务将返回 HTTP 412 (不满足前提条件) 状态消息。可在<bpt id=\"p5\">[</bpt>此处<ept id=\"p5\">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。"
    },
    {
      "pos": [
        3668,
        3856
      ],
      "content": "存储服务还包括支持其他条件标头，例如 <bpt id=\"p1\">**</bpt>If-Modified-Since<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>If-Unmodified-Since<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>If-None-Match<ept id=\"p3\">**</ept>，以及这些标头的组合。有关详细信息，请参阅 MSDN 上的<bpt id=\"p4\">[</bpt>为 Blob 服务操作指定条件标头<ept id=\"p4\">](http://msdn.microsoft.com/zh-cn/library/dd179371.aspx)</ept>。"
    },
    {
      "pos": [
        3860,
        3918
      ],
      "content": "下表概述接受条件标头（例如请求中的 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept>）的容器操作，以及在响应中返回 ETag 值的容器操作。"
    },
    {
      "content": "操作",
      "pos": [
        3922,
        3924
      ]
    },
    {
      "content": "返回容器的 ETag 值",
      "pos": [
        3926,
        3938
      ]
    },
    {
      "content": "接受条件标头",
      "pos": [
        3942,
        3948
      ]
    },
    {
      "content": "创建容器",
      "pos": [
        4025,
        4029
      ]
    },
    {
      "content": "是",
      "pos": [
        4033,
        4034
      ]
    },
    {
      "content": "否",
      "pos": [
        4037,
        4038
      ]
    },
    {
      "content": "获取容器属性",
      "pos": [
        4040,
        4046
      ]
    },
    {
      "content": "是",
      "pos": [
        4048,
        4049
      ]
    },
    {
      "content": "否",
      "pos": [
        4052,
        4053
      ]
    },
    {
      "content": "获取容器元数据",
      "pos": [
        4055,
        4062
      ]
    },
    {
      "content": "是",
      "pos": [
        4067,
        4068
      ]
    },
    {
      "content": "否",
      "pos": [
        4071,
        4072
      ]
    },
    {
      "content": "设置容器元数据",
      "pos": [
        4074,
        4081
      ]
    },
    {
      "content": "是",
      "pos": [
        4086,
        4087
      ]
    },
    {
      "content": "是",
      "pos": [
        4090,
        4091
      ]
    },
    {
      "content": "获取容器 ACL",
      "pos": [
        4093,
        4101
      ]
    },
    {
      "content": "是",
      "pos": [
        4105,
        4106
      ]
    },
    {
      "content": "否",
      "pos": [
        4109,
        4110
      ]
    },
    {
      "content": "设置容器 ACL",
      "pos": [
        4112,
        4120
      ]
    },
    {
      "content": "是",
      "pos": [
        4124,
        4125
      ]
    },
    {
      "content": "是 (*)",
      "pos": [
        4128,
        4133
      ]
    },
    {
      "content": "删除容器",
      "pos": [
        4135,
        4139
      ]
    },
    {
      "content": "否",
      "pos": [
        4143,
        4144
      ]
    },
    {
      "content": "是",
      "pos": [
        4147,
        4148
      ]
    },
    {
      "content": "租赁容器",
      "pos": [
        4150,
        4154
      ]
    },
    {
      "content": "是",
      "pos": [
        4158,
        4159
      ]
    },
    {
      "content": "是",
      "pos": [
        4162,
        4163
      ]
    },
    {
      "content": "列出 Blob",
      "pos": [
        4165,
        4172
      ]
    },
    {
      "content": "否",
      "pos": [
        4177,
        4178
      ]
    },
    {
      "content": "否",
      "pos": [
        4181,
        4182
      ]
    },
    {
      "content": "(*) 将缓存由 SetContainerACL 定义的权限，传播这些权限的更新需要 30 秒的时间，在此期间，不保证更新是一致的。",
      "pos": [
        4186,
        4252
      ]
    },
    {
      "pos": [
        4256,
        4322
      ],
      "content": "下表概述接受条件标头（例如请求中的 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept>）的 Blob 操作，以及在响应中返回 ETag 值的 Blob 操作。"
    },
    {
      "content": "操作",
      "pos": [
        4326,
        4328
      ]
    },
    {
      "content": "返回 ETag 值",
      "pos": [
        4331,
        4340
      ]
    },
    {
      "content": "接受条件标头",
      "pos": [
        4343,
        4349
      ]
    },
    {
      "content": "放置 Blob",
      "pos": [
        4413,
        4420
      ]
    },
    {
      "content": "是",
      "pos": [
        4425,
        4426
      ]
    },
    {
      "content": "是",
      "pos": [
        4429,
        4430
      ]
    },
    {
      "content": "获取 Blob",
      "pos": [
        4432,
        4439
      ]
    },
    {
      "content": "是",
      "pos": [
        4444,
        4445
      ]
    },
    {
      "content": "是",
      "pos": [
        4448,
        4449
      ]
    },
    {
      "content": "获取 Blob 属性",
      "pos": [
        4451,
        4461
      ]
    },
    {
      "content": "是",
      "pos": [
        4463,
        4464
      ]
    },
    {
      "content": "是",
      "pos": [
        4467,
        4468
      ]
    },
    {
      "content": "设置 Blob 属性",
      "pos": [
        4470,
        4480
      ]
    },
    {
      "content": "是",
      "pos": [
        4482,
        4483
      ]
    },
    {
      "content": "是",
      "pos": [
        4486,
        4487
      ]
    },
    {
      "content": "获取 Blob 元数据",
      "pos": [
        4489,
        4500
      ]
    },
    {
      "content": "是",
      "pos": [
        4505,
        4506
      ]
    },
    {
      "content": "是",
      "pos": [
        4509,
        4510
      ]
    },
    {
      "content": "设置 Blob 元数据",
      "pos": [
        4512,
        4523
      ]
    },
    {
      "content": "是",
      "pos": [
        4528,
        4529
      ]
    },
    {
      "content": "是",
      "pos": [
        4532,
        4533
      ]
    },
    {
      "content": "租赁 Blob (*)",
      "pos": [
        4535,
        4546
      ]
    },
    {
      "content": "是",
      "pos": [
        4548,
        4549
      ]
    },
    {
      "content": "是",
      "pos": [
        4551,
        4552
      ]
    },
    {
      "content": "制作 Blob 快照",
      "pos": [
        4554,
        4564
      ]
    },
    {
      "content": "是",
      "pos": [
        4566,
        4567
      ]
    },
    {
      "content": "是",
      "pos": [
        4569,
        4570
      ]
    },
    {
      "content": "复制 Blob",
      "pos": [
        4572,
        4579
      ]
    },
    {
      "content": "是",
      "pos": [
        4581,
        4582
      ]
    },
    {
      "content": "是（用于源 Blob 和目标 Blob）",
      "pos": [
        4584,
        4604
      ]
    },
    {
      "content": "中止复制 Blob",
      "pos": [
        4606,
        4615
      ]
    },
    {
      "content": "否",
      "pos": [
        4617,
        4618
      ]
    },
    {
      "content": "否",
      "pos": [
        4620,
        4621
      ]
    },
    {
      "content": "删除 Blob",
      "pos": [
        4623,
        4630
      ]
    },
    {
      "content": "否",
      "pos": [
        4632,
        4633
      ]
    },
    {
      "content": "是",
      "pos": [
        4635,
        4636
      ]
    },
    {
      "content": "放置块",
      "pos": [
        4638,
        4641
      ]
    },
    {
      "content": "否",
      "pos": [
        4643,
        4644
      ]
    },
    {
      "content": "否",
      "pos": [
        4646,
        4647
      ]
    },
    {
      "content": "放置块列表",
      "pos": [
        4649,
        4654
      ]
    },
    {
      "content": "是",
      "pos": [
        4656,
        4657
      ]
    },
    {
      "content": "是",
      "pos": [
        4659,
        4660
      ]
    },
    {
      "content": "获取块列表",
      "pos": [
        4662,
        4667
      ]
    },
    {
      "content": "是",
      "pos": [
        4669,
        4670
      ]
    },
    {
      "content": "否",
      "pos": [
        4672,
        4673
      ]
    },
    {
      "content": "放置页面",
      "pos": [
        4675,
        4679
      ]
    },
    {
      "content": "是",
      "pos": [
        4681,
        4682
      ]
    },
    {
      "content": "是",
      "pos": [
        4684,
        4685
      ]
    },
    {
      "content": "获取页面范围",
      "pos": [
        4687,
        4693
      ]
    },
    {
      "content": "是",
      "pos": [
        4695,
        4696
      ]
    },
    {
      "content": "是",
      "pos": [
        4698,
        4699
      ]
    },
    {
      "content": "(*) 租赁 Blob 不更改 Blob 中的 ETag。",
      "pos": [
        4701,
        4730
      ]
    },
    {
      "content": "Blob 的悲观并发",
      "pos": [
        4738,
        4748
      ]
    },
    {
      "pos": [
        4749,
        4957
      ],
      "content": "若要锁定 Blob 以供独占使用，您可以对该 Blob 获得<bpt id=\"p1\">[</bpt>租约<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx)</ept>。在获取租约时，可以指定需要该租约的时长：该值可以介于 15 到 60 秒之间，也可以是无限期（相当于独占锁）。你可以续订有限期租约来延展该租约，也可以在租约完成后将其释放。Blob 服务在有限期租约到期时会自动释放这些租约。"
    },
    {
      "content": "租约允许支持各种同步策略，包括独占写入/共享读取、独占写入/独占读取和共享写入/独占读取。如果租约存在，则存储服务会强制执行独占写入（放置、设置和删除操作），但是，若要确保读取操作的独占性，开发人员需要确保所有客户端应用程序都使用一个租约 ID，并且一次只有一个客户端具有有效的租约 ID。不包括租约 ID 的读取操作会导致共享读取。",
      "pos": [
        4959,
        5126
      ]
    },
    {
      "pos": [
        5130,
        5406
      ],
      "content": "以下 C# 代码段显示一个示例，说明如何在 30 秒内对 Blob 获取独占租约，更新 Blob 的内容，然后释放该租约。当你尝试获取新租约时，如果 Blob 中已经存在有效租约，则 Blob 服务将返回“HTTP (409) 冲突”状态结果。在发出请求以在存储服务中更新 Blob 时，下面的代码段使用 <bpt id=\"p1\">**</bpt>AccessCondition<ept id=\"p1\">**</ept> 对象封装租约信息。可在<bpt id=\"p2\">[</bpt>此处<ept id=\"p2\">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。"
    },
    {
      "pos": [
        6454,
        6679
      ],
      "content": "如果你尝试对租赁的 Blob 执行写入操作，而不传递租约 ID，则请求将失败，显示 412 错误。请注意，如果该租约在调用 <bpt id=\"p1\">**</bpt>UploadText<ept id=\"p1\">**</ept> 方法前到期，但您仍传递租约 ID，则请求也将失败，显示 <bpt id=\"p2\">**</bpt>412<ept id=\"p2\">**</ept> 错误。有关如何管理租约到期时间和租约 ID 的详细信息，请参阅<bpt id=\"p3\">[</bpt>租赁 Blob<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx)</ept> REST 说明文档。"
    },
    {
      "content": "以下 Blob 操作可以使用租约来管理悲观并发：",
      "pos": [
        6681,
        6705
      ]
    },
    {
      "content": "放置 Blob",
      "pos": [
        6714,
        6721
      ]
    },
    {
      "content": "获取 Blob",
      "pos": [
        6726,
        6733
      ]
    },
    {
      "content": "获取 Blob 属性",
      "pos": [
        6738,
        6748
      ]
    },
    {
      "content": "设置 Blob 属性",
      "pos": [
        6753,
        6763
      ]
    },
    {
      "content": "获取 Blob 元数据",
      "pos": [
        6768,
        6779
      ]
    },
    {
      "content": "设置 Blob 元数据",
      "pos": [
        6784,
        6795
      ]
    },
    {
      "content": "删除 Blob",
      "pos": [
        6800,
        6807
      ]
    },
    {
      "content": "放置块",
      "pos": [
        6812,
        6815
      ]
    },
    {
      "content": "放置块列表",
      "pos": [
        6820,
        6825
      ]
    },
    {
      "content": "获取阻止列表",
      "pos": [
        6830,
        6836
      ]
    },
    {
      "content": "放置页面",
      "pos": [
        6841,
        6845
      ]
    },
    {
      "content": "获取页面范围",
      "pos": [
        6850,
        6856
      ]
    },
    {
      "content": "制作 Blob 快照 - 可选租约 ID（如果租约存在）",
      "pos": [
        6861,
        6889
      ]
    },
    {
      "content": "复制 Blob - 如果目标 Blob 中存在租约，则需要提供租约 ID",
      "pos": [
        6894,
        6930
      ]
    },
    {
      "content": "中止复制 Blob - 如果目标 Blob 中存在无限期租约，则需要提供租约 ID",
      "pos": [
        6935,
        6976
      ]
    },
    {
      "content": "租赁 Blob",
      "pos": [
        6981,
        6988
      ]
    },
    {
      "content": "容器的悲观并发",
      "pos": [
        6996,
        7003
      ]
    },
    {
      "content": "同 Blob 中的租约一样，容器中的租约可以实现对同步策略（独占写入/共享读取、独占写入/独占读取和共享写入/独占读取）的支持，但是，与 Blob 不同，存储服务仅对删除操作强制实施独占性。若要删除具有活动租约的容器，客户端必须将活动租约 ID 包括在删除请求中。在不包括租约 ID 的情况下，对租赁容器的其他所有容器操作都将成功，在这种情况下，这些操作是共享操作。如果需要更新（放置或设置）或读取操作的独占性，则开发人员应确保所有客户端都使用一个租约 ID，而且一次只有一个客户端具有有效的租约 ID。",
      "pos": [
        7004,
        7256
      ]
    },
    {
      "content": "以下容器操作可以使用租约来管理悲观并发：",
      "pos": [
        7258,
        7278
      ]
    },
    {
      "content": "删除容器",
      "pos": [
        7286,
        7290
      ]
    },
    {
      "content": "获取容器属性",
      "pos": [
        7295,
        7301
      ]
    },
    {
      "content": "获取容器元数据",
      "pos": [
        7306,
        7313
      ]
    },
    {
      "content": "设置容器元数据",
      "pos": [
        7318,
        7325
      ]
    },
    {
      "content": "获取容器 ACL",
      "pos": [
        7330,
        7338
      ]
    },
    {
      "content": "设置容器 ACL",
      "pos": [
        7343,
        7351
      ]
    },
    {
      "content": "租赁容器",
      "pos": [
        7356,
        7360
      ]
    },
    {
      "content": "有关详细信息，请参阅：",
      "pos": [
        7364,
        7375
      ]
    },
    {
      "content": "为 Blob 服务操作指定条件标头",
      "pos": [
        7382,
        7399
      ]
    },
    {
      "content": "租赁容器",
      "pos": [
        7465,
        7469
      ]
    },
    {
      "content": "租赁 Blob",
      "pos": [
        7535,
        7542
      ]
    },
    {
      "content": "在表服务中管理并发",
      "pos": [
        7610,
        7619
      ]
    },
    {
      "content": "在处理实体时，表服务使用乐观并发检查作为默认行为，而 Blob 服务不同，你必须明确选择执行乐观并发检查。表服务与 Blob 服务之间的另一个区别在于，使用表服务，你只能管理实体的并发行为，而使用 Blob 服务，你既可以管理容器的并发，又可以管理 Blob 的并发。",
      "pos": [
        7620,
        7754
      ]
    },
    {
      "content": "若要使用乐观并发，并检查其他进程是否自你从表存储服务检索到实体起修改了该实体，你可以使用在表服务返回实体时获得的 ETag 值。此进程的概述如下：",
      "pos": [
        7756,
        7829
      ]
    },
    {
      "content": "从表存储服务检索实体，响应包括用于标识与存储服务中的该实体关联的当前标识符的 ETag 值。",
      "pos": [
        7837,
        7883
      ]
    },
    {
      "pos": [
        7888,
        7947
      ],
      "content": "在更新实体时，应将您在步骤 1 中获得的 ETag 值包括在发送到服务的请求的必需 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept> 标头中。"
    },
    {
      "content": "该服务会将请求中的 ETag 值与实体的当前 ETag 值进行比较。",
      "pos": [
        7952,
        7986
      ]
    },
    {
      "pos": [
        7991,
        8087
      ],
      "content": "如果实体的当前 ETag 值与请求的必需 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept> 标头中的 Etag 不同，则该服务将 412 错误返回到客户端。这向客户端表明，其他进程自该客户端检索到实体起已更新该实体。"
    },
    {
      "pos": [
        8092,
        8202
      ],
      "content": "如果实体的当前 ETag 值与请求中的必需 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept> 标头内的 ETag 相同，或者 <bpt id=\"p2\">**</bpt>If-Match<ept id=\"p2\">**</ept> 标头包含通配符 (*)，则服务执行请求的操作并更新实体的当前 ETag 值以指出已更新该值。"
    },
    {
      "pos": [
        8204,
        8328
      ],
      "content": "请注意，与 Blob 服务不同，表服务要求客户端将 <bpt id=\"p1\">**</bpt>If-Match<ept id=\"p1\">**</ept> 标头包括在更新请求中。但是，如果客户端在请求中将 <bpt id=\"p2\">**</bpt>If-Match<ept id=\"p2\">**</ept> 标头设置为通配符 (*)，则可以强制执行非条件更新（“以最后写入者为准”策略）并绕过并发检查。"
    },
    {
      "pos": [
        8330,
        8599
      ],
      "content": "以下 C# 代码段显示以前创建或检索到的客户实体是如何更新其电子邮件地址的。初始插入或检索操作将 ETag 值存储在客户对象中，因为示例在执行替换操作时使用相同的对象实例，所以将 ETag 值自动发送回表服务，从而使该服务可以检查是否存在并发违规情况。如果其他进程已更新表存储中的实体，则该服务将返回 HTTP 412 (不满足前提条件) 状态消息。可在<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。"
    },
    {
      "pos": [
        9107,
        9167
      ],
      "content": "若要明确禁用并发检查，您应该在执行替换操作前，将 <bpt id=\"p1\">**</bpt>employee<ept id=\"p1\">**</ept> 对象的 <bpt id=\"p2\">**</bpt>ETag<ept id=\"p2\">**</ept> 属性设置为“*”。"
    },
    {
      "content": "customer.ETag = \"*\"；",
      "pos": [
        9169,
        9189
      ]
    },
    {
      "content": "下表概述表实体操作是如何使用 ETag 值的：",
      "pos": [
        9191,
        9214
      ]
    },
    {
      "content": "操作",
      "pos": [
        9218,
        9220
      ]
    },
    {
      "content": "返回 ETag 值",
      "pos": [
        9223,
        9232
      ]
    },
    {
      "content": "需要 If-Match 请求标头",
      "pos": [
        9235,
        9251
      ]
    },
    {
      "content": "查询实体",
      "pos": [
        9320,
        9324
      ]
    },
    {
      "content": "是",
      "pos": [
        9328,
        9329
      ]
    },
    {
      "content": "否",
      "pos": [
        9332,
        9333
      ]
    },
    {
      "content": "插入实体",
      "pos": [
        9335,
        9339
      ]
    },
    {
      "content": "是",
      "pos": [
        9343,
        9344
      ]
    },
    {
      "content": "否",
      "pos": [
        9347,
        9348
      ]
    },
    {
      "content": "更新实体",
      "pos": [
        9350,
        9354
      ]
    },
    {
      "content": "是",
      "pos": [
        9358,
        9359
      ]
    },
    {
      "content": "是",
      "pos": [
        9362,
        9363
      ]
    },
    {
      "content": "合并实体",
      "pos": [
        9365,
        9369
      ]
    },
    {
      "content": "是",
      "pos": [
        9373,
        9374
      ]
    },
    {
      "content": "是",
      "pos": [
        9377,
        9378
      ]
    },
    {
      "content": "删除实体",
      "pos": [
        9380,
        9384
      ]
    },
    {
      "content": "否",
      "pos": [
        9388,
        9389
      ]
    },
    {
      "content": "是",
      "pos": [
        9392,
        9393
      ]
    },
    {
      "content": "插入或替换实体",
      "pos": [
        9395,
        9402
      ]
    },
    {
      "content": "是",
      "pos": [
        9407,
        9408
      ]
    },
    {
      "content": "否",
      "pos": [
        9411,
        9412
      ]
    },
    {
      "content": "插入或合并实体",
      "pos": [
        9414,
        9421
      ]
    },
    {
      "content": "是",
      "pos": [
        9426,
        9427
      ]
    },
    {
      "content": "否",
      "pos": [
        9430,
        9431
      ]
    },
    {
      "pos": [
        9434,
        9500
      ],
      "content": "请注意，<bpt id=\"p1\">**</bpt>插入或替换实体<ept id=\"p1\">**</ept>和<bpt id=\"p2\">**</bpt>插入或合并实体<ept id=\"p2\">**</ept>操作不可以执行任何并发检查，因为这些操作<bpt id=\"p3\">*</bpt>不会<ept id=\"p3\">*</ept>将 ETag 值发送到表服务。"
    },
    {
      "content": "一般情况下，使用表的开发人员应依靠乐观并发来开发可伸缩的应用程序。如果需要悲观锁定，则开发人员在访问表时可采用的一种方法是，为每个表分配指定的 Blob，并在对该表执行操作前获取 Blob 中的租约。这种方法要求应用程序确保在对表执行操作前，所有数据访问路径都获得租约。你还应注意，最短租赁时间为 15 秒，这要求你慎重考虑可伸缩性。",
      "pos": [
        9502,
        9669
      ]
    },
    {
      "content": "有关详细信息，请参阅：",
      "pos": [
        9673,
        9684
      ]
    },
    {
      "content": "对实体的操作",
      "pos": [
        9691,
        9697
      ]
    },
    {
      "content": "在队列服务中管理并发",
      "pos": [
        9766,
        9776
      ]
    },
    {
      "content": "在队列服务中考虑并发的一种情况是，多个客户端正从一个队列检索消息。在从队列检索消息时，响应包括消息和 pop 接收方值，这是删除该消息所必需的。该消息不会从队列中自动删除，但是在检索到后，该消息在 visibilitytimeout 参数指定的时间间隔内不显示给其他客户端。检索消息的客户端应在消息处理后、响应的 TimeNextVisible 元素指定的时间前删除该消息，该时间是根据 visibilitytimeout 参数的值计算的。若要确定 TimeNextVisible 的值，可将 visibilitytimeout 的值添加到消息的检索时间。",
      "pos": [
        9777,
        10055
      ]
    },
    {
      "content": "队列服务不支持乐观并发或悲观并发，因此，处理从队列检索到的消息的客户端应确保以幂等方式处理消息。上次编写者赢策略用于更新操作，例如 SetQueueServiceProperties、SetQueueMetaData、SetQueueACL 和 UpdateMessage。",
      "pos": [
        10057,
        10194
      ]
    },
    {
      "content": "有关详细信息，请参阅：",
      "pos": [
        10198,
        10209
      ]
    },
    {
      "content": "队列服务 REST API",
      "pos": [
        10216,
        10229
      ]
    },
    {
      "content": "获取消息",
      "pos": [
        10295,
        10299
      ]
    },
    {
      "content": "在文件服务中管理并发",
      "pos": [
        10368,
        10378
      ]
    },
    {
      "content": "文件服务可以使用下面两个不同的协议终结点访问：SMB 和 REST。REST 服务不支持乐观锁定或悲观锁定，并且所有更新将遵循上次编写者赢策略。SMB 客户端如果装载文件共享，则可以充分利用文件系统锁定机制来管理对共享文件的访问，包括可以执行悲观锁定。在打开文件后，SMB 客户端会同时指定文件访问权限和共享模式。如果将“文件访问权限”选项设置为“读取”或“读取/写入”，同时将“文件共享”模式设置为“无”，则将导致文件在关闭前被 SMB 客户端锁定。如果尝试对 SMB 客户端已锁定的文件执行 REST 操作，则 REST 服务将返回状态代码 409 (冲突)，以及错误代码 SharingViolation。",
      "pos": [
        10379,
        10685
      ]
    },
    {
      "content": "当 SMB 客户端打开文件以进行删除时，会将该文件标记为待删除，直到该文件上的其他所有 SMB 客户端打开句柄关闭为止。当文件标记为待删除时，对该文件执行的任何 REST 操作将返回状态代码 409 (冲突)，以及错误代码 SMBDeletePending。不返回状态代码 404 (找不到)，因为 SMB 客户端在关闭文件前，可能无法删除待删除标志。换而言之，仅当删除文件后，才应返回状态代码 404 (找不到)。请注意，当文件处于 SMB 待删除状态时，“列出文件”结果中将不包含该文件。另请注意，“REST 删除文件”和“REST 删除目录”操作以原子方式提交，并且不会导致待删除状态。",
      "pos": [
        10687,
        10983
      ]
    },
    {
      "content": "有关详细信息，请参阅：",
      "pos": [
        10985,
        10996
      ]
    },
    {
      "content": "管理文件锁",
      "pos": [
        11003,
        11008
      ]
    },
    {
      "content": "摘要和后续步骤",
      "pos": [
        11077,
        11084
      ]
    },
    {
      "content": "经过精心设计，Azure 存储服务可以满足最复杂的在线应用程序需要，而不会迫使开发人员对主要设计假设做出妥协或重新思考，例如他们视为理所当然的并发和数据一致性。",
      "pos": [
        11085,
        11165
      ]
    },
    {
      "content": "对于本博客中引用的完整示例应用程序：",
      "pos": [
        11167,
        11185
      ]
    },
    {
      "content": "使用 Azure 存储管理并发 - 示例应用程序",
      "pos": [
        11192,
        11216
      ]
    },
    {
      "content": "有关 Azure 存储的详细信息，请参阅：",
      "pos": [
        11302,
        11323
      ]
    },
    {
      "content": "Azure 存储主页",
      "pos": [
        11330,
        11340
      ]
    },
    {
      "content": "Azure 存储简介",
      "pos": [
        11369,
        11379
      ]
    },
    {
      "pos": [
        11435,
        11648
      ],
      "content": "<bpt id=\"p1\">[</bpt>Blob<ept id=\"p1\">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>、<bpt id=\"p2\">[</bpt>表<ept id=\"p2\">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-tables)</ept>和<bpt id=\"p3\">[</bpt>队列<ept id=\"p3\">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-queues)</ept>的存储使用入门"
    },
    {
      "pos": [
        11651,
        11843
      ],
      "content": "存储体系结构 - <bpt id=\"p1\">[</bpt>Azure 存储：具有高度一致性的高可用云存储服务<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/11/20/windows-azure-storage-a-highly-available-cloud-storage-service-with-strong-consistency.aspx)</ept>"
    }
  ],
  "content": "<properties \n    pageTitle=\"在 Azure 存储中管理并发\" \n    description=\"如何管理 Blob、队列、表和文件服务的并发\" \n    services=\"storage\" \n    documentationCenter=\"\" \n    authors=\"tamram\" \n    manager=\"adinah\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"09/03/2015\" \n    wacn.date=\"01/21/2016\"/>\n\n\n\n#在 Azure 存储中管理并发\n\n## 概述 \n\n通常情况下，基于 Internet 的新型应用程序允许多名用户同时查看和更新数据。这就要求应用程序开发人员仔细考虑如何为他们的最终用户提供可预测的体验，尤其是在多名用户可以更新相同数据的情况下。开发人员通常将考虑下面三个主要数据并发策略：\n\n\n1.  乐观并发 – 执行更新的应用程序在更新过程中要验证数据是否自该应用程序上次读取该数据起已发生更改。例如，如果两名查看 wiki 页的用户对同一页进行更新，则 wiki 平台必须确保第二次更新不会覆盖第一次更新，并且两名用户都了解他们的更新成功与否。此策略最常用于 Web 应用中。\n2.  悲观并发 – 要执行更新的应用程序将对对象获取一个锁，以防其他用户在该锁释放前更新数据。例如，在主/从数据复制情况下，如果只有主对象要执行更新，则该对象通常将在长时间内对数据持有一个独占锁，以确保其他任何用户都不能更新该数据。\n3.  上次编写者赢 – 一种方法，即允许任何更新操作继续进行，而不需要验证其他任何应用程序是否自应用程序首次读取数据起已更新该数据。此策略（或缺乏正式策略）通常用于以下情况：以多名用户不可能访问相同数据的方式对数据进行分区。该策略可能还适用于正在处理短期数据流的情况。  \n\n本文概述 Azure 存储平台如何通过为所有这三个并发策略提供一类支持来简化开发。  \n\n## Azure 存储 – 简化云开发\nAzure 存储服务支持所有三个策略，尽管它具有独特的功能，可以为乐观并发和悲观并发提供完全支持，因为该服务旨在采用强大的一致性模型，该模型用于保证，当存储服务提交数据插入或更新操作时，所有对该数据的进一步访问都将显示最新更新。存储平台如果使用最终一致性模型，则在一名用户执行写入与其他用户可以查看已更新的数据之间存在着时滞，因而会使客户端应用程序开发复杂化，以防不一致性影响最终用户。\n\n除了选择相应的并发策略，开发人员还应了解存储平台如何隔离更改，尤其是对跨事务的相同对象的更改。Azure 存储服务使用快照隔离允许在单个分区中并发执行读取操作与写入操作。与其他隔离级别不同，快照隔离保证，所有读取操作看到的数据快照是一致的，即使在执行更新时也是如此。事实上，这是通过在处理更新事务时返回上次提交的值实现的。  \n\n## 在 Blob 服务中管理并发\n你可以选择使用乐观并发模型或悲观并发模型，来管理对 Blob 服务中的 Blob 和容器的访问。如果你没有明确指定策略，则上次编写者赢是默认策略。\n\n### Blob 和容器的乐观并发  \n\n存储服务会为每个存储对象分配一个标识符。只要对对象执行更新操作，就会更新此标识符。在使用 HTTP 协议中定义的 ETag（实体标记）标头的情况下，该标识符作为 HTTP GET 响应的一部分返回到客户端。对此类对象执行更新的用户，可以连同条件标头一起在原始 ETag 中发送，以确保仅当已满足特定条件时才会进行更新 – 在这种情况下，该条件是“If-Match”标头，该标头要求存储服务确保在更新请求中指定的 ETag 值与存储服务中存储的值相同。\n\n此进程的概述如下：  \n\n1.  从存储服务检索 Blob，响应包括用于在存储服务中标识对象当前版本的 HTTP ETag 标头值。\n2.  在更新 Blob 时，应将您在步骤 1 中获得的 ETag 值包括在发送到服务的请求的 **If-Match** 条件标头中。\n3.  该服务会将请求中的 ETag 值与 Blob 的当前 ETag 值进行比较。\n4.  如果 Blob 的当前 ETag 值与请求的 **If-Match** 条件标头中的 ETag 的版本不同，则该服务将 412 错误返回到客户端。这向客户端表明，其他进程自客户端检索到 Blob 起已更新该 Blob。\n5.  如果 Blob 的当前 ETag 值与请求的 **If-Match** 条件标头中的 ETag 的版本相同，则该服务将执行请求的操作，并更新该 Blob 的当前 ETag 值，以说明它已创建新版本。  \n\n以下 C# 代码段（使用客户端存储库 4.2.0）显示一个简单示例，说明如何根据从以前检索到或插入的 Blob 访问的 ETag 值构造 **If-Match AccessCondition**。然后，在更新该 Blob 时使用 **AccessCondition** 对象：**AccessCondition** 对象将 **If-Match** 标头添加到请求中。如果其他进程已更新该 Blob，则 Blob 服务将返回 HTTP 412 (不满足前提条件) 状态消息。可在[此处](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)下载完整示例。  \n\n    // Retrieve the ETag from the newly created blob\n    // Etag is already populated as UploadText should cause a PUT Blob call \n    // to storage blob service which returns the etag in response.\n    string orignalETag = blockBlob.Properties.ETag;\n     \n    // This code simulates an update by a third party.\n    string helloText = \"Blob updated by a third party.\";\n     \n    // No etag, provided so orignal blob is overwritten (thus generating a new etag)\n    blockBlob.UploadText(helloText);\n    Console.WriteLine(\"Blob updated. Updated ETag = {0}\", \n    blockBlob.Properties.ETag);\n     \n    // Now try to update the blob using the orignal ETag provided when the blob was created\n    try\n    {\n        Console.WriteLine(\"Trying to update blob using orignal etag to generate if-match access condition\");\n        blockBlob.UploadText(helloText,accessCondition:\n        AccessCondition.GenerateIfMatchCondition(orignalETag));\n    }\n    catch (StorageException ex)\n    {\n        if (ex.RequestInformation.HttpStatusCode == (int)HttpStatusCode.PreconditionFailed)\n        {\n            Console.WriteLine(\"Precondition failure as expected. Blob's orignal etag no longer matches\");\n            // TODO: client can decide on how it wants to handle the 3rd party updated content.\n        }\n        else\n            throw;\n    }  \n\n存储服务还包括支持其他条件标头，例如 **If-Modified-Since**、**If-Unmodified-Since** 和 **If-None-Match**，以及这些标头的组合。有关详细信息，请参阅 MSDN 上的[为 Blob 服务操作指定条件标头](http://msdn.microsoft.com/zh-cn/library/dd179371.aspx)。  \n\n下表概述接受条件标头（例如请求中的 **If-Match**）的容器操作，以及在响应中返回 ETag 值的容器操作。  \n\n操作 |返回容器的 ETag 值|   接受条件标头|\n------------|-----------------------|------------------------------------|\n创建容器|   是|  否|\n获取容器属性| 是|  否|\n获取容器元数据|    是|  否|\n设置容器元数据|    是|  是|\n获取容器 ACL|   是|  否|\n设置容器 ACL|   是|  是 (*)|\n删除容器|   否|  是|\n租赁容器|   是|  是|\n列出 Blob|    否|  否  \n\n(*) 将缓存由 SetContainerACL 定义的权限，传播这些权限的更新需要 30 秒的时间，在此期间，不保证更新是一致的。  \n\n下表概述接受条件标头（例如请求中的 **If-Match**）的 Blob 操作，以及在响应中返回 ETag 值的 Blob 操作。  \n\n操作  |返回 ETag 值  |接受条件标头|\n-----------|-------------------|----------------------------|\n放置 Blob|    是|  是|\n获取 Blob|    是|  是|\n获取 Blob 属性| 是|  是|\n设置 Blob 属性| 是|  是|\n获取 Blob 元数据|    是|  是|\n设置 Blob 元数据|    是|  是|\n租赁 Blob (*)| 是| 是|\n制作 Blob 快照| 是| 是|\n复制 Blob| 是| 是（用于源 Blob 和目标 Blob）|\n中止复制 Blob| 否| 否|\n删除 Blob| 否| 是|\n放置块| 否| 否|\n放置块列表| 是| 是|\n获取块列表| 是| 否|\n放置页面| 是| 是|\n获取页面范围| 是| 是\n\n(*) 租赁 Blob 不更改 Blob 中的 ETag。  \n\n### Blob 的悲观并发\n若要锁定 Blob 以供独占使用，您可以对该 Blob 获得[租约](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx)。在获取租约时，可以指定需要该租约的时长：该值可以介于 15 到 60 秒之间，也可以是无限期（相当于独占锁）。你可以续订有限期租约来延展该租约，也可以在租约完成后将其释放。Blob 服务在有限期租约到期时会自动释放这些租约。\n\n租约允许支持各种同步策略，包括独占写入/共享读取、独占写入/独占读取和共享写入/独占读取。如果租约存在，则存储服务会强制执行独占写入（放置、设置和删除操作），但是，若要确保读取操作的独占性，开发人员需要确保所有客户端应用程序都使用一个租约 ID，并且一次只有一个客户端具有有效的租约 ID。不包括租约 ID 的读取操作会导致共享读取。  \n\n以下 C# 代码段显示一个示例，说明如何在 30 秒内对 Blob 获取独占租约，更新 Blob 的内容，然后释放该租约。当你尝试获取新租约时，如果 Blob 中已经存在有效租约，则 Blob 服务将返回“HTTP (409) 冲突”状态结果。在发出请求以在存储服务中更新 Blob 时，下面的代码段使用 **AccessCondition** 对象封装租约信息。可在[此处](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)下载完整示例。\n\n    // Acquire lease for 15 seconds\n    string lease = blockBlob.AcquireLease(TimeSpan.FromSeconds(15), null);\n    Console.WriteLine(\"Blob lease acquired. Lease = {0}\", lease);\n     \n    // Update blob using lease. This operation will succeed\n    const string helloText = \"Blob updated\";\n    var accessCondition = AccessCondition.GenerateLeaseCondition(lease);\n    blockBlob.UploadText(helloText, accessCondition: accessCondition);\n    Console.WriteLine(\"Blob updated using an exclusive lease\");\n     \n    //Simulate third party update to blob without lease\n    try\n    {\n        // Below operation will fail as no valid lease provided\n        Console.WriteLine(\"Trying to update blob without valid lease\");\n        blockBlob.UploadText(\"Update without lease, will fail\");\n    }\n    catch (StorageException ex)\n    {\n        if (ex.RequestInformation.HttpStatusCode == (int)HttpStatusCode.PreconditionFailed)\n            Console.WriteLine(\"Precondition failure as expected. Blob's lease does not match\");\n        else\n            throw;\n    }  \n\n如果你尝试对租赁的 Blob 执行写入操作，而不传递租约 ID，则请求将失败，显示 412 错误。请注意，如果该租约在调用 **UploadText** 方法前到期，但您仍传递租约 ID，则请求也将失败，显示 **412** 错误。有关如何管理租约到期时间和租约 ID 的详细信息，请参阅[租赁 Blob](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx) REST 说明文档。\n\n以下 Blob 操作可以使用租约来管理悲观并发：  \n\n\n-   放置 Blob\n-   获取 Blob\n-   获取 Blob 属性\n-   设置 Blob 属性\n-   获取 Blob 元数据\n-   设置 Blob 元数据\n-   删除 Blob\n-   放置块\n-   放置块列表\n-   获取阻止列表\n-   放置页面\n-   获取页面范围\n-   制作 Blob 快照 - 可选租约 ID（如果租约存在）\n-   复制 Blob - 如果目标 Blob 中存在租约，则需要提供租约 ID\n-   中止复制 Blob - 如果目标 Blob 中存在无限期租约，则需要提供租约 ID\n-   租赁 Blob  \n\n### 容器的悲观并发\n同 Blob 中的租约一样，容器中的租约可以实现对同步策略（独占写入/共享读取、独占写入/独占读取和共享写入/独占读取）的支持，但是，与 Blob 不同，存储服务仅对删除操作强制实施独占性。若要删除具有活动租约的容器，客户端必须将活动租约 ID 包括在删除请求中。在不包括租约 ID 的情况下，对租赁容器的其他所有容器操作都将成功，在这种情况下，这些操作是共享操作。如果需要更新（放置或设置）或读取操作的独占性，则开发人员应确保所有客户端都使用一个租约 ID，而且一次只有一个客户端具有有效的租约 ID。\n\n以下容器操作可以使用租约来管理悲观并发：  \n\n-   删除容器\n-   获取容器属性\n-   获取容器元数据\n-   设置容器元数据\n-   获取容器 ACL\n-   设置容器 ACL\n-   租赁容器  \n\n有关详细信息，请参阅：  \n\n- [为 Blob 服务操作指定条件标头](http://msdn.microsoft.com/zh-cn/library/azure/dd179371.aspx)\n- [租赁容器](http://msdn.microsoft.com/zh-cn/library/azure/jj159103.aspx)\n- [租赁 Blob](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx) \n\n## 在表服务中管理并发\n在处理实体时，表服务使用乐观并发检查作为默认行为，而 Blob 服务不同，你必须明确选择执行乐观并发检查。表服务与 Blob 服务之间的另一个区别在于，使用表服务，你只能管理实体的并发行为，而使用 Blob 服务，你既可以管理容器的并发，又可以管理 Blob 的并发。\n\n若要使用乐观并发，并检查其他进程是否自你从表存储服务检索到实体起修改了该实体，你可以使用在表服务返回实体时获得的 ETag 值。此进程的概述如下：  \n\n1.  从表存储服务检索实体，响应包括用于标识与存储服务中的该实体关联的当前标识符的 ETag 值。\n2.  在更新实体时，应将您在步骤 1 中获得的 ETag 值包括在发送到服务的请求的必需 **If-Match** 标头中。\n3.  该服务会将请求中的 ETag 值与实体的当前 ETag 值进行比较。\n4.  如果实体的当前 ETag 值与请求的必需 **If-Match** 标头中的 Etag 不同，则该服务将 412 错误返回到客户端。这向客户端表明，其他进程自该客户端检索到实体起已更新该实体。\n5.  如果实体的当前 ETag 值与请求中的必需 **If-Match** 标头内的 ETag 相同，或者 **If-Match** 标头包含通配符 (*)，则服务执行请求的操作并更新实体的当前 ETag 值以指出已更新该值。\n\n请注意，与 Blob 服务不同，表服务要求客户端将 **If-Match** 标头包括在更新请求中。但是，如果客户端在请求中将 **If-Match** 标头设置为通配符 (*)，则可以强制执行非条件更新（“以最后写入者为准”策略）并绕过并发检查。\n\n以下 C# 代码段显示以前创建或检索到的客户实体是如何更新其电子邮件地址的。初始插入或检索操作将 ETag 值存储在客户对象中，因为示例在执行替换操作时使用相同的对象实例，所以将 ETag 值自动发送回表服务，从而使该服务可以检查是否存在并发违规情况。如果其他进程已更新表存储中的实体，则该服务将返回 HTTP 412 (不满足前提条件) 状态消息。可在[此处](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)下载完整示例。  \n\n    try\n    {\n        customer.Email = \"updatedEmail@contoso.org\";\n        TableOperation replaceCustomer = TableOperation.Replace(customer);\n        customerTable.Execute(replaceCustomer);\n        Console.WriteLine(\"Replace operation succeeded.\");\n    }\n    catch (StorageException ex)\n    {\n        if (ex.RequestInformation.HttpStatusCode == 412)\n            Console.WriteLine(\"Optimistic concurrency violation – entity has changed since it was retrieved.\");\n        else\n            throw; \n    }  \n\n若要明确禁用并发检查，您应该在执行替换操作前，将 **employee** 对象的 **ETag** 属性设置为“*”。\n\ncustomer.ETag = \"*\"；\n\n下表概述表实体操作是如何使用 ETag 值的：  \n\n操作  |返回 ETag 值  |需要 If-Match 请求标头|\n------------|-------------------|--------------------------------|\n查询实体|   是|  否|\n插入实体|   是|  否|\n更新实体|   是|  是|\n合并实体|   是|  是|\n删除实体|   否|  是|\n插入或替换实体|    是|  否|\n插入或合并实体|    是|  否 \n\n请注意，**插入或替换实体**和**插入或合并实体**操作不可以执行任何并发检查，因为这些操作*不会*将 ETag 值发送到表服务。\n\n一般情况下，使用表的开发人员应依靠乐观并发来开发可伸缩的应用程序。如果需要悲观锁定，则开发人员在访问表时可采用的一种方法是，为每个表分配指定的 Blob，并在对该表执行操作前获取 Blob 中的租约。这种方法要求应用程序确保在对表执行操作前，所有数据访问路径都获得租约。你还应注意，最短租赁时间为 15 秒，这要求你慎重考虑可伸缩性。  \n\n有关详细信息，请参阅：  \n\n- [对实体的操作](http://msdn.microsoft.com/zh-cn/library/azure/dd179375.aspx)  \n\n## 在队列服务中管理并发\n在队列服务中考虑并发的一种情况是，多个客户端正从一个队列检索消息。在从队列检索消息时，响应包括消息和 pop 接收方值，这是删除该消息所必需的。该消息不会从队列中自动删除，但是在检索到后，该消息在 visibilitytimeout 参数指定的时间间隔内不显示给其他客户端。检索消息的客户端应在消息处理后、响应的 TimeNextVisible 元素指定的时间前删除该消息，该时间是根据 visibilitytimeout 参数的值计算的。若要确定 TimeNextVisible 的值，可将 visibilitytimeout 的值添加到消息的检索时间。\n\n队列服务不支持乐观并发或悲观并发，因此，处理从队列检索到的消息的客户端应确保以幂等方式处理消息。上次编写者赢策略用于更新操作，例如 SetQueueServiceProperties、SetQueueMetaData、SetQueueACL 和 UpdateMessage。  \n\n有关详细信息，请参阅：  \n\n- [队列服务 REST API](http://msdn.microsoft.com/zh-cn/library/azure/dd179363.aspx)\n- [获取消息](http://msdn.microsoft.com/zh-cn/library/azure/dd179474.aspx)  \n\n## 在文件服务中管理并发\n文件服务可以使用下面两个不同的协议终结点访问：SMB 和 REST。REST 服务不支持乐观锁定或悲观锁定，并且所有更新将遵循上次编写者赢策略。SMB 客户端如果装载文件共享，则可以充分利用文件系统锁定机制来管理对共享文件的访问，包括可以执行悲观锁定。在打开文件后，SMB 客户端会同时指定文件访问权限和共享模式。如果将“文件访问权限”选项设置为“读取”或“读取/写入”，同时将“文件共享”模式设置为“无”，则将导致文件在关闭前被 SMB 客户端锁定。如果尝试对 SMB 客户端已锁定的文件执行 REST 操作，则 REST 服务将返回状态代码 409 (冲突)，以及错误代码 SharingViolation。\n\n当 SMB 客户端打开文件以进行删除时，会将该文件标记为待删除，直到该文件上的其他所有 SMB 客户端打开句柄关闭为止。当文件标记为待删除时，对该文件执行的任何 REST 操作将返回状态代码 409 (冲突)，以及错误代码 SMBDeletePending。不返回状态代码 404 (找不到)，因为 SMB 客户端在关闭文件前，可能无法删除待删除标志。换而言之，仅当删除文件后，才应返回状态代码 404 (找不到)。请注意，当文件处于 SMB 待删除状态时，“列出文件”结果中将不包含该文件。另请注意，“REST 删除文件”和“REST 删除目录”操作以原子方式提交，并且不会导致待删除状态。\n\n有关详细信息，请参阅：  \n\n- [管理文件锁](http://msdn.microsoft.com/zh-cn/library/azure/dn194265.aspx)  \n\n## 摘要和后续步骤\n经过精心设计，Azure 存储服务可以满足最复杂的在线应用程序需要，而不会迫使开发人员对主要设计假设做出妥协或重新思考，例如他们视为理所当然的并发和数据一致性。\n\n对于本博客中引用的完整示例应用程序：  \n\n- [使用 Azure 存储管理并发 - 示例应用程序](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)  \n\n有关 Azure 存储的详细信息，请参阅：  \n\n- [Azure 存储主页](/home/features/storage)\n- [Azure 存储简介](/zh-cn/documentation/articles/storage-introduction)\n- [Blob](/zh-cn/documentation/articles/storage-dotnet-how-to-use-blobs)、[表](/zh-cn/documentation/articles/storage-dotnet-how-to-use-tables)和[队列](/zh-cn/documentation/articles/storage-dotnet-how-to-use-queues)的存储使用入门\n- 存储体系结构 - [Azure 存储：具有高度一致性的高可用云存储服务](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/11/20/windows-azure-storage-a-highly-available-cloud-storage-service-with-strong-consistency.aspx)\n\n<!---HONumber=79-->"
}