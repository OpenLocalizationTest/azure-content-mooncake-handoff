{
  "nodes": [
    {
      "content": "使用 Azure 媒体包装器完成静态打包任务",
      "pos": [
        28,
        50
      ]
    },
    {
      "content": "本主题说明了通过 Azure 媒体包装器完成的各种任务。",
      "pos": [
        70,
        98
      ]
    },
    {
      "content": "使用 Azure 媒体包装器完成静态打包任务",
      "pos": [
        318,
        340
      ]
    },
    {
      "pos": [
        343,
        441
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>Azure 媒体包装器和 Azure 媒体加密器的使用期限将于 2016 年 3 月 1 日到期。到时，这些组件将不再可用。格式转换和加密功能将通过动态打包和动态加密提供。"
    },
    {
      "content": "概述",
      "pos": [
        446,
        448
      ]
    },
    {
      "content": "要通过 Internet 传送数字视频，你必须对媒体进行压缩。数字视频文件相当大，可能因过大而无法通过 Internet 传送或者无法在你客户的设备上正常显示。编码是压缩视频和音频以便你的客户能够查看媒体的过程。视频经过编码后即可放入不同的文件容器中。将编码后的媒体放入容器这一过程称为打包。以 MP4 文件为例，你可以使用 Azure 媒体包装器将其转换为平滑流式处理或 HLS 内容。",
      "pos": [
        450,
        644
      ]
    },
    {
      "content": "媒体服务支持动态和静态打包。使用静态打包时，需要以客户要求的各种格式创建内容副本。使用动态打包，你只需要创建一个包含一组自适应比特率 MP4 或平滑流文件的资产。然后，按需流式处理服务器会确保你的用户以选定的协议按清单或分段请求中的指定格式接收流。因此，你只需以单一存储格式存储文件并为其付费，然后 Media Services 服务就会基于客户端的请求构建并提供相应响应。",
      "pos": [
        646,
        833
      ]
    },
    {
      "pos": [
        836,
        926
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>建议使用<bpt id=\"p1\">[</bpt>动态打包<ept id=\"p1\">](/documentation/articles/media-services-dynamic-packaging-overview)</ept>。"
    },
    {
      "content": "但是，有的方案需要静态打包：",
      "pos": [
        928,
        942
      ]
    },
    {
      "content": "验证使用外部编码器编码的自适应比特率 MP4（例如，使用第三方编码器）。",
      "pos": [
        946,
        982
      ]
    },
    {
      "content": "你还可以使用静态打包执行下列任务。但是，仍建议使用动态加密。",
      "pos": [
        984,
        1014
      ]
    },
    {
      "content": "通过静态加密使用 PlayReady 来保护平滑流和 MPEG DASH",
      "pos": [
        1018,
        1054
      ]
    },
    {
      "content": "通过静态加密使用 AES-128 来保护 HLSv3",
      "pos": [
        1057,
        1083
      ]
    },
    {
      "content": "通过静态加密使用 PlayReady 来保护 HLSv3",
      "pos": [
        1086,
        1114
      ]
    },
    {
      "content": "验证使用外部编码器编码的自适应比特率 MP4",
      "pos": [
        1120,
        1142
      ]
    },
    {
      "pos": [
        1144,
        1382
      ],
      "content": "如果你要使用一组未使用媒体服务编码器编码的自适应比特率（多码率）MP4 文件，则应在进一步处理前验证这些文件。媒体服务包装程序可以验证包含一组 MP4 文件的资产，并可检查该资产是否可以打包成平滑流或 HLS。如果验证任务失败，则处理该任务的作业将完成并显示错误。用于定义验证任务的预设的 XML 可以在 <bpt id=\"p1\">[</bpt>Azure 媒体包装器的任务预设<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)</ept>主题中找到。"
    },
    {
      "pos": [
        1385,
        1611
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>请使用媒体服务编码器来生成内容，或使用媒体服务包装程序来验证内容，以避免运行时问题。如果按需流式处理服务器在运行时无法解析你的源文件，则你会收到 HTTP 1.1 错误“415 不支持的媒体类型”。服务器多次未能解析你的源文件会影响按需流式处理服务器的性能，并且可能会减少服务于其他请求的可用带宽。Azure 媒体服务在其按需流式处理服务上提供一个服务级别协议 (SLA)；但是，如果以上述方式滥用服务器，则无法遵循此 SLA。"
    },
    {
      "content": "本部分演示如何处理验证任务。本部分还演示如何查看完成时出现 JobStatus.Error 的作业的状态和错误消息。",
      "pos": [
        1613,
        1671
      ]
    },
    {
      "content": "若要使用媒体服务包装程序验证 MP4 文件，必须创建自己的清单 (.ism) 文件，并将其与源文件一起上载到媒体服务帐户。下面是 Azure 媒体编码器生成的 .ism 文件的一个示例。文件名区分大小写。另请确保 .ism 文件中的文本采用 UTF-8 编码。",
      "pos": [
        1673,
        1803
      ]
    },
    {
      "pos": [
        2504,
        2645
      ],
      "content": "创建自适应比特率 MP4 集后，便可以利用动态打包功能。动态打包允许你通过指定的协议传送流，而不需要进一步地打包。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>动态打包<ept id=\"p1\">](/documentation/articles/media-services-dynamic-packaging-overview)</ept>。"
    },
    {
      "pos": [
        2647,
        2854
      ],
      "content": "以下代码示例使用 Azure 媒体服务 .NET SDK 扩展。请确保更新代码，以指向输入 MP4 文件和 .ism 文件所在的文件夹，并指向 MediaPackager\\_ValidateTask.xml 文件所在的位置。此 XML 文件在 <bpt id=\"p1\">[</bpt>Azure 媒体包装器的任务预设<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)</ept>主题中定义。"
    },
    {
      "content": "通过静态加密使用 PlayReady 来保护平滑流和 MPEG DASH",
      "pos": [
        10411,
        10447
      ]
    },
    {
      "pos": [
        10449,
        10564
      ],
      "content": "如果你想要通过 PlayReady 来保护你的内容，则可选择使用<bpt id=\"p1\">[</bpt>动态加密<ept id=\"p1\">](/documentation/articles/media-services-protect-with-drm)</ept>（推荐选项）或静态加密（如本部分所述）。"
    },
    {
      "content": "本部分的示例将夹层文件（在本例中为 MP4）编码为自适应比特率 MP4 文件。然后，它将 MP4 打包为平滑流，并使用 PlayReady 对平滑流进行加密。因此，你能对平滑流或 MPEG DASH 进行流式处理。",
      "pos": [
        10566,
        10673
      ]
    },
    {
      "pos": [
        10675,
        10917
      ],
      "content": "媒体服务现在提供有用于传送 Microsoft PlayReady 许可证的服务。本文中的示例显示如何配置媒体服务 PlayReady 许可证传送服务（请参见以下代码中定义的 ConfigureLicenseDeliveryService 方法）。有关媒体服务 PlayReady 许可证传送服务的详细信息，请参阅<bpt id=\"p1\">[</bpt>使用 PlayReady 动态加密和许可证传递服务<ept id=\"p1\">](/documentation/articles/media-services-protect-with-drm)</ept>。"
    },
    {
      "pos": [
        10920,
        11110
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要传送使用 PlayReady 加密的 MPEG DASH，请确保通过将 useSencBox 和 adjustSubSamples 属性（在 <bpt id=\"p1\">[</bpt>Azure 媒体加密器的任务预设<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/hh973610.aspx)</ept>主题中说明）设为 true 来使用 CENC 选项。"
    },
    {
      "content": "确保更新以下代码，以便指向输入 MP4 文件所在的文件夹，",
      "pos": [
        11113,
        11142
      ]
    },
    {
      "pos": [
        11144,
        11472
      ],
      "content": "并指向 MediaPackager\\_MP4ToSmooth.xml 和 MediaEncryptor\\_PlayReadyProtection.xml 文件所在的位置。MediaPackager\\_MP4ToSmooth.xml 在 <bpt id=\"p1\">[</bpt>Azure 媒体包装器的任务预设<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)</ept>中定义，MediaEncryptor\\_PlayReadyProtection.xml 在 <bpt id=\"p2\">[</bpt>Azure 媒体加密器的任务预设<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/hh973610.aspx)</ept>主题中定义。"
    },
    {
      "content": "该示例定义的 UpdatePlayReadyConfigurationXMLFile 方法可用于动态更新 MediaEncryptor\\_PlayReadyProtection.xml 文件。如果你有可用的密钥种子，则可以使用 CommonEncryption.GeneratePlayReadyContentKey 方法基于 keySeedValue 和 keyId 值生成内容密钥。",
      "pos": [
        11474,
        11667
      ]
    },
    {
      "content": "通过静态加密使用 AES-128 来保护 HLSv3",
      "pos": [
        32530,
        32556
      ]
    },
    {
      "pos": [
        32558,
        32710
      ],
      "content": "如果你要使用 AES-128 加密 HLS，可以选择使用动态加密（推荐选项）或静态加密（如本部分所述）。如果你决定使用动态加密，请参阅<bpt id=\"p1\">[</bpt>使用 AES-128 动态加密和密钥传递服务<ept id=\"p1\">](/documentation/articles/media-services-protect-with-aes128)</ept>。"
    },
    {
      "pos": [
        32713,
        32963
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要将内容转换为 HLS，必须先将内容转换/编码为平滑流。此外，对于使用 AES 加密的 HLS，请确保在 MediaPackager\\_SmoothToHLS.xml 文件中设置以下属性：将加密属性设置为 true，将密钥值和 keyuri 值设置为指向身份验证\\\\授权服务器。媒体服务将创建密钥文件，并将其放置在资产容器中。你应该将 /asset-containerguid/*.key 文件复制到服务器（或创建你自己的密钥文件），然后从资产容器中删除 *.key 文件。"
    },
    {
      "pos": [
        32965,
        33274
      ],
      "content": "本部分的示例将夹层文件（在本例中为 MP4）编码为多比特率 MP4 文件，然后将 MP4 打包为平滑流。然后，它将平滑流打包成使用高级加密标准 (AES) 128 位流加密法加密的 HTTP 实时流 (HLS)。确保更新以下代码，以便指向输入 MP4 文件所在的文件夹，并指向 MediaPackager\\_MP4ToSmooth.xml 和 MediaPackager\\_SmoothToHLS.xml 配置文件所在的位置。可以在 <bpt id=\"p1\">[</bpt>Azure 媒体包装器的任务预设<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)</ept>主题中找到这些文件的定义。"
    },
    {
      "content": "通过静态加密使用 PlayReady 来保护 HLSv3",
      "pos": [
        46405,
        46433
      ]
    },
    {
      "pos": [
        46435,
        46550
      ],
      "content": "如果你想要通过 PlayReady 来保护你的内容，则可选择使用<bpt id=\"p1\">[</bpt>动态加密<ept id=\"p1\">](/documentation/articles/media-services-protect-with-drm)</ept>（推荐选项）或静态加密（如本部分所述）。"
    },
    {
      "pos": [
        46553,
        46605
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要使用 PlayReady 保护你的内容，必须先将内容转换/编码为平滑流格式。"
    },
    {
      "content": "本部分的示例将夹层文件（在本例中为 MP4）编码为多比特率 MP4 文件。然后，它将 MP4 打包为平滑流，并使用 PlayReady 对平滑流进行加密。若要生成使用 PlayReady 加密的 HTTP 实时流 (HLS)，需要将 PlayReady 平滑流资产打包成 HLS。本主题演示如何执行所有这些步骤。",
      "pos": [
        46607,
        46763
      ]
    },
    {
      "pos": [
        46765,
        46893
      ],
      "content": "媒体服务现在提供有用于传送 Microsoft PlayReady 许可证的服务。本文中的示例显示如何配置媒体服务 PlayReady 许可证传送服务（请参见以下代码中定义的 <bpt id=\"p1\">**</bpt>ConfigureLicenseDeliveryService<ept id=\"p1\">**</ept> 方法）。"
    },
    {
      "pos": [
        46895,
        47315
      ],
      "content": "确保更新以下代码，以便指向输入 MP4 文件所在的文件夹，并指向 MediaPackager\\_MP4ToSmooth.xml、MediaPackager\\_SmoothToHLS.xml 和 MediaEncryptor\\_PlayReadyProtection.xml 文件所在的位置。MediaPackager\\_MP4ToSmooth.xml 和 MediaPackager\\_SmoothToHLS.xml在 <bpt id=\"p1\">[</bpt>Azure 媒体包装器的任务预设<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)</ept>中定义，MediaEncryptor\\_PlayReadyProtection.xml 在 <bpt id=\"p2\">[</bpt>Azure 媒体加密器的任务预设<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/hh973610.aspx)</ept>主题中定义。"
    }
  ],
  "content": "<properties \n    pageTitle=\"使用 Azure 媒体包装器完成静态打包任务\" \n    description=\"本主题说明了通过 Azure 媒体包装器完成的各种任务。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"12/05/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n\n# 使用 Azure 媒体包装器完成静态打包任务\n\n>[AZURE.NOTE]Azure 媒体包装器和 Azure 媒体加密器的使用期限将于 2016 年 3 月 1 日到期。到时，这些组件将不再可用。格式转换和加密功能将通过动态打包和动态加密提供。\n\n## 概述\n\n要通过 Internet 传送数字视频，你必须对媒体进行压缩。数字视频文件相当大，可能因过大而无法通过 Internet 传送或者无法在你客户的设备上正常显示。编码是压缩视频和音频以便你的客户能够查看媒体的过程。视频经过编码后即可放入不同的文件容器中。将编码后的媒体放入容器这一过程称为打包。以 MP4 文件为例，你可以使用 Azure 媒体包装器将其转换为平滑流式处理或 HLS 内容。\n\n媒体服务支持动态和静态打包。使用静态打包时，需要以客户要求的各种格式创建内容副本。使用动态打包，你只需要创建一个包含一组自适应比特率 MP4 或平滑流文件的资产。然后，按需流式处理服务器会确保你的用户以选定的协议按清单或分段请求中的指定格式接收流。因此，你只需以单一存储格式存储文件并为其付费，然后 Media Services 服务就会基于客户端的请求构建并提供相应响应。\n\n>[AZURE.NOTE]建议使用[动态打包](/documentation/articles/media-services-dynamic-packaging-overview)。\n\n但是，有的方案需要静态打包：\n\n- 验证使用外部编码器编码的自适应比特率 MP4（例如，使用第三方编码器）。\n\n你还可以使用静态打包执行下列任务。但是，仍建议使用动态加密。\n\n- 通过静态加密使用 PlayReady 来保护平滑流和 MPEG DASH\n- 通过静态加密使用 AES-128 来保护 HLSv3\n- 通过静态加密使用 PlayReady 来保护 HLSv3\n\n\n## 验证使用外部编码器编码的自适应比特率 MP4\n\n如果你要使用一组未使用媒体服务编码器编码的自适应比特率（多码率）MP4 文件，则应在进一步处理前验证这些文件。媒体服务包装程序可以验证包含一组 MP4 文件的资产，并可检查该资产是否可以打包成平滑流或 HLS。如果验证任务失败，则处理该任务的作业将完成并显示错误。用于定义验证任务的预设的 XML 可以在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)主题中找到。\n\n>[AZURE.NOTE]请使用媒体服务编码器来生成内容，或使用媒体服务包装程序来验证内容，以避免运行时问题。如果按需流式处理服务器在运行时无法解析你的源文件，则你会收到 HTTP 1.1 错误“415 不支持的媒体类型”。服务器多次未能解析你的源文件会影响按需流式处理服务器的性能，并且可能会减少服务于其他请求的可用带宽。Azure 媒体服务在其按需流式处理服务上提供一个服务级别协议 (SLA)；但是，如果以上述方式滥用服务器，则无法遵循此 SLA。\n\n本部分演示如何处理验证任务。本部分还演示如何查看完成时出现 JobStatus.Error 的作业的状态和错误消息。\n\n若要使用媒体服务包装程序验证 MP4 文件，必须创建自己的清单 (.ism) 文件，并将其与源文件一起上载到媒体服务帐户。下面是 Azure 媒体编码器生成的 .ism 文件的一个示例。文件名区分大小写。另请确保 .ism 文件中的文本采用 UTF-8 编码。\n\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n    <smil xmlns=\"http://www.w3.org/2001/SMIL20/Language\">\n      <head>\n    <!-- Tells the server that these input files are MP4s – specific to Dynamic Packaging -->\n        <meta name=\"formats\" content=\"mp4\" /> \n      </head>\n      <body>\n        <switch>\n          <video src=\"BigBuckBunny_1000.mp4\" />\n          <video src=\"BigBuckBunny_1500.mp4\" />\n          <video src=\"BigBuckBunny_2250.mp4\" />\n          <video src=\"BigBuckBunny_3400.mp4\" />\n          <video src=\"BigBuckBunny_400.mp4\" />\n          <video src=\"BigBuckBunny_650.mp4\" />\n          <audio src=\"BigBuckBunny_400.mp4\" />\n        </switch>\n      </body>\n    </smil>\n\n创建自适应比特率 MP4 集后，便可以利用动态打包功能。动态打包允许你通过指定的协议传送流，而不需要进一步地打包。有关详细信息，请参阅[动态打包](/documentation/articles/media-services-dynamic-packaging-overview)。\n\n以下代码示例使用 Azure 媒体服务 .NET SDK 扩展。请确保更新代码，以指向输入 MP4 文件和 .ism 文件所在的文件夹，并指向 MediaPackager\\_ValidateTask.xml 文件所在的位置。此 XML 文件在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)主题中定义。\n    \n    using Microsoft.WindowsAzure.MediaServices.Client;\n    using System;\n    using System.Collections.Generic;\n    using System.Configuration;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using System.Xml.Linq;\n    \n    namespace MediaServicesStaticPackaging\n    {\n        class Program\n        {\n            private static readonly string _mediaFiles =\n                Path.GetFullPath(@\"../..\\Media\");\n    \n            // The MultibitrateMP4Files folder should also\n            // contain the .ism manifest file.\n            private static readonly string _multibitrateMP4s =\n                Path.Combine(_mediaFiles, @\"MultibitrateMP4Files\");\n    \n            // XML Configruation files path.\n            private static readonly string _configurationXMLFiles = @\"../..\\Configurations\";\n    \n            private static MediaServicesCredentials _cachedCredentials = null;\n            private static CloudMediaContext _context = null;\n    \n            // Media Services account information.\n            private static readonly string _mediaServicesAccountName =\n                ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n            private static readonly string _mediaServicesAccountKey =\n                ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n    \n            static void Main(string[] args)\n            {\n                // Create and cache the Media Services credentials in a static class variable.\n                _cachedCredentials = new MediaServicesCredentials(\n                                _mediaServicesAccountName,\n                                _mediaServicesAccountKey);\n                // Use the cached credentials to create CloudMediaContext.\n                _context = new CloudMediaContext(_cachedCredentials);\n    \n                // Ingest a set of multibitrate MP4s.\n                //\n                // Use the SDK extension method to create a new asset by \n                // uploading files from a local directory.\n                IAsset multibitrateMP4sAsset = _context.Assets.CreateFromFolder(\n                    _multibitrateMP4s,\n                    AssetCreationOptions.None,\n                    (af, p) =>\n                    {\n                        Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\n                    });\n    \n                // Use Azure Media Packager to validate the files.\n                IAsset validatedMP4s =\n                    ValidateMultibitrateMP4s(multibitrateMP4sAsset);\n    \n                // Publish the asset.\n                _context.Locators.Create(\n                    LocatorType.OnDemandOrigin,\n                    validatedMP4s,\n                    AccessPermissions.Read,\n                    TimeSpan.FromDays(30));\n    \n                                     // Get the streaming URLs.\n                Console.WriteLine(\"Smooth Streaming URL:\");\n                Console.WriteLine(validatedMP4s.GetSmoothStreamingUri().ToString());\n                Console.WriteLine(\"MPEG DASH URL:\");\n                Console.WriteLine(validatedMP4s.GetMpegDashUri().ToString());\n                Console.WriteLine(\"HLS URL:\");\n                Console.WriteLine(validatedMP4s.GetHlsUri().ToString());\n            }\n    \n            public static IAsset ValidateMultibitrateMP4s(IAsset multibitrateMP4sAsset)\n            {\n                // Set .ism as a primary file \n                // in a multibitrate MP4 set.\n                SetISMFileAsPrimary(multibitrateMP4sAsset);\n    \n                // Create a new job.\n                IJob job = _context.Jobs.Create(\"MP4 validation and converstion to Smooth Stream job.\");\n    \n                // Read the task configuration data into a string. \n                string configMp4Validation = File.ReadAllText(Path.Combine(\n                        _configurationXMLFiles,\n                        \"MediaPackager_ValidateTask.xml\"));\n    \n                // Get the SDK extension method to  get a reference to the Azure Media Packager.\n                IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.AzureMediaPackager);\n    \n                // Create a task with the conversion details, using the configuration data. \n                ITask task = job.Tasks.AddNew(\"Mp4 Validation Task\",\n                    processor,\n                    configMp4Validation,\n                    TaskOptions.None);\n    \n                // Specify the input asset to be validated.\n                task.InputAssets.Add(multibitrateMP4sAsset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.None, which \n                // means the output asset is in the clear (unencrypted). \n                task.OutputAssets.AddNew(\"Validated output asset\",\n                        AssetCreationOptions.None);\n    \n                // Submit the job and wait until it is completed.\n                job.Submit();\n                job = job.StartExecutionProgressTask(\n                    j =>\n                    {\n                        Console.WriteLine(\"Job state: {0}\", j.State);\n                        Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n                    },\n                    CancellationToken.None).Result;\n              \n                // If the validation task fails and job completes with JobState.Error,\n                // display the error message and throw an exception.\n                if (job.State == JobState.Error)\n                {\n                    Console.WriteLine(\"  Job ID: \" + job.Id);\n                    Console.WriteLine(\"  Name: \" + job.Name);\n                    Console.WriteLine(\"  State: \" + job.State);\n    \n                    foreach (var jobTask in job.Tasks)\n                    {\n                        Console.WriteLine(\"  Task Id: \" + jobTask.Id);\n                        Console.WriteLine(\"  Name: \" + jobTask.Name);\n                        Console.WriteLine(\"  Progress: \" + jobTask.Progress);\n                        Console.WriteLine(\"  Configuration: \" + jobTask.Configuration);\n                        Console.WriteLine(\"  Running time: \" + jobTask.RunningDuration);\n                        if (jobTask.ErrorDetails != null)\n                        {\n                            foreach (var errordetail in jobTask.ErrorDetails)\n                            {\n    \n                                Console.WriteLine(\"  Error Message:\" + errordetail.Message);\n                                Console.WriteLine(\"  Error Code:\" + errordetail.Code);\n                            }\n                        }\n                    }\n                    throw new Exception(\"The specified multi-bitrate MP4 set is not valid.\");\n                }\n    \n    \n                return job.OutputMediaAssets[0];\n            }\n    \n            static void SetISMFileAsPrimary(IAsset asset)\n            {\n                var ismAssetFiles = asset.AssetFiles.ToList().\n                    Where(f => f.Name.EndsWith(\".ism\", StringComparison.OrdinalIgnoreCase)).ToArray();\n    \n                // The following code assigns the first .ism file as the primary file in the asset.\n                // An asset should have one .ism file.  \n                ismAssetFiles.First().IsPrimary = true;\n                ismAssetFiles.First().Update();\n            }\n        }\n    }\n\n## 通过静态加密使用 PlayReady 来保护平滑流和 MPEG DASH\n\n如果你想要通过 PlayReady 来保护你的内容，则可选择使用[动态加密](/documentation/articles/media-services-protect-with-drm)（推荐选项）或静态加密（如本部分所述）。\n\n本部分的示例将夹层文件（在本例中为 MP4）编码为自适应比特率 MP4 文件。然后，它将 MP4 打包为平滑流，并使用 PlayReady 对平滑流进行加密。因此，你能对平滑流或 MPEG DASH 进行流式处理。\n\n媒体服务现在提供有用于传送 Microsoft PlayReady 许可证的服务。本文中的示例显示如何配置媒体服务 PlayReady 许可证传送服务（请参见以下代码中定义的 ConfigureLicenseDeliveryService 方法）。有关媒体服务 PlayReady 许可证传送服务的详细信息，请参阅[使用 PlayReady 动态加密和许可证传递服务](/documentation/articles/media-services-protect-with-drm)。\n\n>[AZURE.NOTE]若要传送使用 PlayReady 加密的 MPEG DASH，请确保通过将 useSencBox 和 adjustSubSamples 属性（在 [Azure 媒体加密器的任务预设](http://msdn.microsoft.com/zh-cn/library/azure/hh973610.aspx)主题中说明）设为 true 来使用 CENC 选项。\n\n\n确保更新以下代码，以便指向输入 MP4 文件所在的文件夹，\n\n并指向 MediaPackager\\_MP4ToSmooth.xml 和 MediaEncryptor\\_PlayReadyProtection.xml 文件所在的位置。MediaPackager\\_MP4ToSmooth.xml 在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)中定义，MediaEncryptor\\_PlayReadyProtection.xml 在 [Azure 媒体加密器的任务预设](http://msdn.microsoft.com/zh-cn/library/azure/hh973610.aspx)主题中定义。\n\n该示例定义的 UpdatePlayReadyConfigurationXMLFile 方法可用于动态更新 MediaEncryptor\\_PlayReadyProtection.xml 文件。如果你有可用的密钥种子，则可以使用 CommonEncryption.GeneratePlayReadyContentKey 方法基于 keySeedValue 和 keyId 值生成内容密钥。\n\n    using System;\n    using System.Collections.Generic;\n    using System.Configuration;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Microsoft.WindowsAzure.MediaServices.Client;\n    using System.Xml.Linq;\n    using Microsoft.WindowsAzure.MediaServices.Client.ContentKeyAuthorization;\n    using Microsoft.WindowsAzure.MediaServices.Client.DynamicEncryption;\n    \n    namespace PlayReadyStaticEncryptAndKeyDeliverySvc\n    {\n        class Program\n        {\n           \n            private static readonly string _mediaFiles =\n                Path.GetFullPath(@\"../..\\Media\");\n    \n            private static readonly string _singleMP4File =\n                Path.Combine(_mediaFiles, @\"BigBuckBunny.mp4\");\n    \n            // XML Configruation files path.\n            private static readonly string _configurationXMLFiles = @\"../..\\Configurations\";\n    \n    \n            private static MediaServicesCredentials _cachedCredentials = null;\n            private static CloudMediaContext _context = null;\n    \n            // Media Services account information.\n            private static readonly string _mediaServicesAccountName =\n                ConfigurationManager.AppSettings[\"MediaServiceAccountName\"];\n            private static readonly string _mediaServicesAccountKey =\n                ConfigurationManager.AppSettings[\"MediaServiceAccountKey\"];\n    \n            static void Main(string[] args)\n            {\n                // Create and cache the Media Services credentials in a static class variable.\n                _cachedCredentials = new MediaServicesCredentials(\n                                _mediaServicesAccountName,\n                                _mediaServicesAccountKey);\n                // Use the cached credentials to create CloudMediaContext.\n                _context = new CloudMediaContext(_cachedCredentials);\n    \n                // Encoding and encrypting assets //////////////////////\n                // Load a single MP4 file.\n                IAsset asset = IngestSingleMP4File(_singleMP4File, AssetCreationOptions.None);\n    \n                // Encode an MP4 file to a set of multibitrate MP4s.\n                // Then, package a set of MP4s to clear Smooth Streaming.\n                IAsset clearSmoothStreamAsset =\n                    ConvertMP4ToMultibitrateMP4sToSmoothStreaming(asset);\n    \n                // Create a common encryption content key that is used \n                // a) to set the key values in the MediaEncryptor_PlayReadyProtection.xml file\n                //    that is used for encryption.\n                // b) to configure the license delivery service and \n                //\n                Guid keyId;\n                byte[] contentKey;\n    \n                IContentKey key = CreateCommonEncryptionKey(out keyId, out contentKey);\n    \n                // The content key authorization policy must be configured by you \n                // and met by the client in order for the PlayReady license\n                // to be delivered to the client. \n                // In this example the Media Services PlayReady license delivery service is used.\n                ConfigureLicenseDeliveryService(key);\n    \n                // Get the Media Services PlayReady license delivery URL.\n                // This URL will be assigned to the licenseAcquisitionUrl property \n                // of the MediaEncryptor_PlayReadyProtection.xml file.\n                Uri acquisitionUrl = key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense);\n    \n                // Update the MediaEncryptor_PlayReadyProtection.xml file with the key and URL info.\n                UpdatePlayReadyConfigurationXMLFile(keyId, contentKey, acquisitionUrl);\n    \n    \n                // Encrypt your clear Smooth Streaming to Smooth Streaming with PlayReady.\n                IAsset outputAsset = CreateSmoothStreamEncryptedWithPlayReady(clearSmoothStreamAsset);\n    \n    \n                // You can use the http://smf.cloudapp.net/healthmonitor player \n                // to test the smoothStreamURL URL.\n                string smoothStreamURL = outputAsset.GetSmoothStreamingUri().ToString();\n                Console.WriteLine(\"Smooth Streaming URL:\");\n                Console.WriteLine(smoothStreamURL);\n    \n                // You can use the http://dashif.org/reference/players/javascript/ player \n                // to test the dashURL URL.\n                string dashURL = outputAsset.GetMpegDashUri().ToString();\n                Console.WriteLine(\"MPEG DASH URL:\");\n                Console.WriteLine(dashURL);\n            }\n    \n            /// <summary>\n            /// Creates a job with 2 tasks: \n            /// 1 task - encodes a single MP4 to multibitrate MP4s,\n            /// 2 task - packages MP4s to Smooth Streaming.\n            /// </summary>\n            /// <returns>The output asset.</returns>\n            public static IAsset ConvertMP4ToMultibitrateMP4sToSmoothStreaming(IAsset asset)\n            {\n                // Create a new job.\n                IJob job = _context.Jobs.Create(\"Convert MP4 to Smooth Streaming.\");\n    \n                // Add task 1 - Encode single MP4 into multibitrate MP4s.\n                IAsset MP4sAsset = EncodeMP4IntoMultibitrateMP4sTask(job, asset);\n                // Add task 2 - Package a multibitrate MP4 set to Clear Smooth Stream.\n                IAsset packagedAsset = PackageMP4ToSmoothStreamingTask(job, MP4sAsset);\n    \n                // Submit the job and wait until it is completed.\n                job.Submit();\n                job = job.StartExecutionProgressTask(\n                    j =>\n                    {\n                        Console.WriteLine(\"Job state: {0}\", j.State);\n                        Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n                    },\n                    CancellationToken.None).Result;\n    \n                // Get the output asset that contains the Smooth Streaming asset.\n                return job.OutputMediaAssets[1];\n            }\n    \n            /// <summary>\n            /// Encrypts Smooth Stream with PlayReady.\n            /// Then creates a Smooth Streaming Url.\n            /// </summary>\n            /// <param name=\"clearSmoothAsset\">Asset that contains clear Smooth Streaming.</param>\n            /// <returns>The output asset.</returns>\n            public static IAsset CreateSmoothStreamEncryptedWithPlayReady(IAsset clearSmoothStreamAsset)\n            {\n                // Create a job.\n                IJob job = _context.Jobs.Create(\"Encrypt to PlayReady Smooth Streaming.\");\n    \n                // Add task 1 - Encrypt Smooth Streaming with PlayReady \n                IAsset encryptedSmoothAsset =\n                    EncryptSmoothStreamWithPlayReadyTask(job, clearSmoothStreamAsset);\n    \n                // Submit the job and wait until it is completed.\n                job.Submit();\n                job = job.StartExecutionProgressTask(\n                    j =>\n                    {\n                        Console.WriteLine(\"Job state: {0}\", j.State);\n                        Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n                    },\n                    CancellationToken.None).Result;\n    \n                // The OutputMediaAssets[0] contains the desired asset.\n                _context.Locators.Create(\n                    LocatorType.OnDemandOrigin,\n                    job.OutputMediaAssets[0],\n                    AccessPermissions.Read,\n                    TimeSpan.FromDays(30));\n    \n                return job.OutputMediaAssets[0];\n            }\n    \n            /// <summary>\n            /// Create a common encryption content key that is used \n            /// to set the key values in the MediaEncryptor_PlayReadyProtection.xml file\n            /// that is used for encryption.\n            /// </summary>\n            /// <param name=\"keyId\"></param>\n            /// <param name=\"contentKey\"></param>\n            /// <returns></returns>\n            public static IContentKey CreateCommonEncryptionKey(out Guid keyId, out byte[] contentKey)\n            {\n                keyId = Guid.NewGuid();\n                contentKey = GetRandomBuffer(16);\n    \n                IContentKey key = _context.ContentKeys.Create(\n                                        keyId,\n                                        contentKey,\n                                        \"ContentKey\",\n                                        ContentKeyType.CommonEncryption);\n    \n                return key;\n            }\n    \n            /// <summary>\n            /// Update your configuration .xml file dynamically.\n            /// </summary>\n            public static void UpdatePlayReadyConfigurationXMLFile(Guid keyId, byte[] keyValue, Uri licenseAcquisitionUrl)\n            {\n                string xmlFileName = Path.Combine(_configurationXMLFiles,\n                                            @\"MediaEncryptor_PlayReadyProtection.xml\");\n    \n                XNamespace xmlns = \"http://schemas.microsoft.com/iis/media/v4/TM/TaskDefinition#\";\n    \n                // Prepare the encryption task template\n                XDocument doc = XDocument.Load(xmlFileName);\n    \n                var licenseAcquisitionUrlEl = doc\n                        .Descendants(xmlns + \"property\")\n                        .Where(p => p.Attribute(\"name\").Value == \"licenseAcquisitionUrl\")\n                        .FirstOrDefault();\n                var contentKeyEl = doc\n                        .Descendants(xmlns + \"property\")\n                        .Where(p => p.Attribute(\"name\").Value == \"contentKey\")\n                        .FirstOrDefault();\n                var keyIdEl = doc\n                        .Descendants(xmlns + \"property\")\n                        .Where(p => p.Attribute(\"name\").Value == \"keyId\")\n                        .FirstOrDefault();\n    \n                // Update the \"value\" property.\n                if (licenseAcquisitionUrlEl != null)\n                    licenseAcquisitionUrlEl.Attribute(\"value\").SetValue(licenseAcquisitionUrl.ToString());\n    \n                if (contentKeyEl != null)\n                    contentKeyEl.Attribute(\"value\").SetValue(Convert.ToBase64String(keyValue));\n    \n                if (keyIdEl != null)\n                    keyIdEl.Attribute(\"value\").SetValue(keyId);\n    \n                doc.Save(xmlFileName);\n            }\n    \n            /// <summary>\n            /// Uploads a single file.\n            /// </summary>\n            /// <param name=\"fileDir\">The location of the files.</param>\n            /// <param name=\"assetCreationOptions\">\n            ///  You can specify the following encryption options for the AssetCreationOptions.\n            ///      None:  no encryption.  \n            ///      StorageEncrypted: storage encryption. Encrypts a clear input file \n            ///        before it is uploaded to Azure storage. \n            ///      CommonEncryptionProtected: for Common Encryption Protected (CENC) files. \n            ///        For example, a set of files that are already PlayReady encrypted. \n            ///      EnvelopeEncryptionProtected: for HLS with AES encryption files.\n            ///        NOTE: The files must have been encoded and encrypted by Transform Manager. \n            ///     </param>\n            /// <returns>Returns an asset that contains a single file.</returns>\n            /// </summary>\n            /// <returns></returns>\n            private static IAsset IngestSingleMP4File(string fileDir, AssetCreationOptions assetCreationOptions)\n            {\n                // Use the SDK extension method to create a new asset by \n                // uploading a mezzanine file from a local path.\n                IAsset asset = _context.Assets.CreateFromFile(\n                    fileDir,\n                    assetCreationOptions,\n                    (af, p) =>\n                    {\n                        Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\n                    });\n    \n                return asset;\n            }\n    \n            /// <summary>\n            /// Creates a task to encode to Adaptive Bitrate. \n            /// Adds the new task to a job.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The input asset.</param>\n            /// <returns>The output asset.</returns>\n            private static IAsset EncodeMP4IntoMultibitrateMP4sTask(IJob job, IAsset asset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Encoder.\n                IMediaProcessor encoder = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.AzureMediaEncoder);\n    \n                ITask adpativeBitrateTask = job.Tasks.AddNew(\"MP4 to Adaptive Bitrate Task\",\n                   encoder,\n                   \"H264 Adaptive Bitrate MP4 Set 720p\",\n                   TaskOptions.None);\n    \n                // Specify the input Asset\n                adpativeBitrateTask.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.None, which \n                // means the output asset is in the clear (unencrypted).\n                IAsset abrAsset = adpativeBitrateTask.OutputAssets.AddNew(\"Multibitrate MP4s\",\n                                        AssetCreationOptions.None);\n    \n                return abrAsset;\n            }\n    \n            /// <summary>\n            /// Creates a task to convert the MP4 file(s) to a Smooth Streaming asset.\n            /// Adds the new task to a job.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The input asset.</param>\n            /// <returns>The output asset.</returns>\n            private static IAsset PackageMP4ToSmoothStreamingTask(IJob job, IAsset asset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Packager.\n                IMediaProcessor packager = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.WindowsAzureMediaPackager);\n    \n                // Azure Media Packager does not accept string presets, so load xml configuration\n                string smoothConfig = File.ReadAllText(Path.Combine(\n                            _configurationXMLFiles,\n                            \"MediaPackager_MP4toSmooth.xml\"));\n    \n                // Create a new Task to convert adaptive bitrate to Smooth Streaming.\n                ITask smoothStreamingTask = job.Tasks.AddNew(\"MP4 to Smooth Task\",\n                   packager,\n                   smoothConfig,\n                   TaskOptions.None);\n    \n                // Specify the input Asset, which is the output Asset from the first task\n                smoothStreamingTask.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.None, which \n                // means the output asset is in the clear (unencrypted).\n                IAsset smoothOutputAsset =\n                    smoothStreamingTask.OutputAssets.AddNew(\"Clear Smooth Stream\",\n                        AssetCreationOptions.None);\n    \n                return smoothOutputAsset;\n            }\n    \n    \n            /// <summary>\n            /// Creates a task to encrypt Smooth Streaming with PlayReady.\n            /// Note: To deliver DASH, make sure to set the useSencBox and adjustSubSamples \n            /// configuration properties to true. \n            /// In this example, MediaEncryptor_PlayReadyProtection.xml contains configuration.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The input asset.</param>\n            /// <returns>The output asset.</returns>\n            private static IAsset EncryptSmoothStreamWithPlayReadyTask(IJob job, IAsset asset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Encryptor.\n                IMediaProcessor playreadyProcessor = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.WindowsAzureMediaEncryptor);\n    \n                // Read the configuration XML.\n                //\n                // Note that the configuration defined in MediaEncryptor_PlayReadyProtection.xml\n                // is using keySeedValue. It is recommended that you do this only for testing \n                // and not in production. For more information, see \n                // http://msdn.microsoft.com/zh-cn/library/azure/dn189154.aspx.\n                //\n                string configPlayReady = File.ReadAllText(Path.Combine(_configurationXMLFiles,\n                                            @\"MediaEncryptor_PlayReadyProtection.xml\"));\n    \n                ITask playreadyTask = job.Tasks.AddNew(\"My PlayReady Task\",\n                   playreadyProcessor,\n                   configPlayReady,\n                   TaskOptions.ProtectedConfiguration);\n    \n                playreadyTask.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.CommonEncryptionProtected.\n                IAsset playreadyAsset = playreadyTask.OutputAssets.AddNew(\n                                                \"PlayReady Smooth Streaming\",\n                                                AssetCreationOptions.CommonEncryptionProtected);\n    \n                return playreadyAsset;\n            }\n    \n            /// <summary>\n            /// Configures authorization policy for the content key. \n            /// </summary>\n            /// <param name=\"contentKey\">The content key.</param>\n            static public void ConfigureLicenseDeliveryService(IContentKey contentKey)\n            {\n                // Create ContentKeyAuthorizationPolicy with Open restrictions \n                // and create authorization policy          \n    \n                List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\n                {\n                    new ContentKeyAuthorizationPolicyRestriction \n                    { \n                        Name = \"Open\", \n                        KeyRestrictionType = (int)ContentKeyRestrictionType.Open, \n                        Requirements = null\n                    }\n                };\n    \n                // Configure PlayReady license template.\n                string newLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\n    \n                IContentKeyAuthorizationPolicyOption policyOption =\n                    _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\n                        ContentKeyDeliveryType.PlayReadyLicense,\n                            restrictions, newLicenseTemplate);\n    \n                IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\n                            ContentKeyAuthorizationPolicies.\n                            CreateAsync(\"Deliver Common Content Key with no restrictions\").\n                            Result;\n    \n    \n                contentKeyAuthorizationPolicy.Options.Add(policyOption);\n    \n                // Associate the content key authorization policy with the content key.\n                contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\n                contentKey = contentKey.UpdateAsync().Result;\n            }\n    \n            static private string ConfigurePlayReadyLicenseTemplate()\n            {\n                // The following code configures PlayReady License Template using .NET classes\n                // and returns the XML string.\n    \n                PlayReadyLicenseResponseTemplate responseTemplate = new PlayReadyLicenseResponseTemplate();\n                PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\n    \n                responseTemplate.LicenseTemplates.Add(licenseTemplate);\n    \n                return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\n            }\n    \n            static private byte[] GetRandomBuffer(int length)\n            {\n                var returnValue = new byte[length];\n    \n                using (var rng =\n                    new System.Security.Cryptography.RNGCryptoServiceProvider())\n                {\n                    rng.GetBytes(returnValue);\n                }\n    \n                return returnValue;\n            }\n        }\n    }\n\n## 通过静态加密使用 AES-128 来保护 HLSv3\n\n如果你要使用 AES-128 加密 HLS，可以选择使用动态加密（推荐选项）或静态加密（如本部分所述）。如果你决定使用动态加密，请参阅[使用 AES-128 动态加密和密钥传递服务](/documentation/articles/media-services-protect-with-aes128)。\n\n>[AZURE.NOTE]若要将内容转换为 HLS，必须先将内容转换/编码为平滑流。此外，对于使用 AES 加密的 HLS，请确保在 MediaPackager\\_SmoothToHLS.xml 文件中设置以下属性：将加密属性设置为 true，将密钥值和 keyuri 值设置为指向身份验证\\\\授权服务器。媒体服务将创建密钥文件，并将其放置在资产容器中。你应该将 /asset-containerguid/*.key 文件复制到服务器（或创建你自己的密钥文件），然后从资产容器中删除 *.key 文件。\n\n本部分的示例将夹层文件（在本例中为 MP4）编码为多比特率 MP4 文件，然后将 MP4 打包为平滑流。然后，它将平滑流打包成使用高级加密标准 (AES) 128 位流加密法加密的 HTTP 实时流 (HLS)。确保更新以下代码，以便指向输入 MP4 文件所在的文件夹，并指向 MediaPackager\\_MP4ToSmooth.xml 和 MediaPackager\\_SmoothToHLS.xml 配置文件所在的位置。可以在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)主题中找到这些文件的定义。\n    \n    using System;\n    using System.Collections.Generic;\n    using System.Configuration;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Microsoft.WindowsAzure.MediaServices.Client;\n    using System.Xml.Linq;\n    \n    namespace MediaServicesContentProtection\n    {\n        class Program\n        {\n            // Paths to support files (within the above base path). You can use \n            // the provided sample media files from the \"SupportFiles\" folder, or \n            // provide paths to your own media files below to run these samples.\n    \n            private static readonly string _mediaFiles =\n                Path.GetFullPath(@\"../..\\Media\");\n            \n            private static readonly string _singleMP4File =\n                Path.Combine(_mediaFiles, @\"SingleMP4\\BigBuckBunny.mp4\");\n    \n            // XML Configruation files path.\n            private static readonly string _configurationXMLFiles = @\"../..\\Configurations\";\n    \n            private static MediaServicesCredentials _cachedCredentials = null;\n            private static CloudMediaContext _context = null;\n    \n            // Media Services account information.\n            private static readonly string _mediaServicesAccountName = \n                ConfigurationManager.AppSettings[\"MediaServiceAccountName\"];\n            private static readonly string _mediaServicesAccountKey = \n                ConfigurationManager.AppSettings[\"MediaServiceAccountKey\"];\n    \n            static void Main(string[] args)\n            {\n                // Create and cache the Media Services credentials in a static class variable.\n                _cachedCredentials = new MediaServicesCredentials(\n                                _mediaServicesAccountName, \n                                _mediaServicesAccountKey);\n                // Use the cached credentials to create CloudMediaContext.\n                _context = new CloudMediaContext(_cachedCredentials);\n    \n                // Encoding and encrypting assets //////////////////////\n    \n                // Load an MP4 file.\n                IAsset asset = IngestSingleMP4File(_singleMP4File, AssetCreationOptions.None);\n    \n                // Encode an MP4 file to a set of multibitrate MP4s.\n                // Then, package a set of MP4s to clear Smooth Streaming.\n                IAsset clearSmoothStreamAsset = ConvertMP4ToMultibitrateMP4sToSmoothStreaming(asset);\n    \n                // Create HLS encrypted with AES.\n                IAsset HLSEncryptedWithAESAsset = CreateHLSEncryptedWithAES(clearSmoothStreamAsset);\n    \n                // You can use the following player to test the HLS with AES stream.\n                // http://apps.microsoft.com/windows/app/3ivx-hls-player/f79ce7d0-2993-4658-bc4e-83dc182a0614 \n                string hlsWithAESURL = HLSEncryptedWithAESAsset.GetHlsUri().ToString();\n                Console.WriteLine(\"HLS with AES URL:\");\n                Console.WriteLine(hlsWithAESURL);\n            }\n    \n    \n            /// <summary>\n            /// Creates a job with 2 tasks: \n            /// 1 task - encodes a single MP4 to multibitrate MP4s,\n            /// 2 task - packages MP4s to Smooth Streaming.\n            /// </summary>\n            /// <returns>The output asset.</returns>\n            public static IAsset ConvertMP4ToMultibitrateMP4sToSmoothStreaming(IAsset asset)\n            {\n                // Create a new job.\n                IJob job = _context.Jobs.Create(\"Convert MP4 to Smooth Streaming.\");\n    \n                // Add task 1 - Encode single MP4 into multibitrate MP4s.\n                IAsset MP4sAsset = EncodeSingleMP4IntoMultibitrateMP4sTask(job, asset);\n                // Add task 2 - Package a multibitrate MP4 set to Clear Smooth Streaming.\n                IAsset packagedAsset = PackageMP4ToSmoothStreamingTask(job, MP4sAsset);\n    \n                // Submit the job and wait until it is completed.\n                job.Submit();\n                job = job.StartExecutionProgressTask(\n                    j =>\n                    {\n                        Console.WriteLine(\"Job state: {0}\", j.State);\n                        Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n                    },\n                    CancellationToken.None).Result;\n    \n                // Get the output asset that contains Smooth Streaming.\n                return job.OutputMediaAssets[1];\n            }\n    \n            /// <summary>\n            /// Encrypts an HLS with AES-128.\n            /// </summary>\n            /// <param name=\"clearSmoothAsset\">Asset that contains clear Smooth Streaming.</param>\n            /// <returns>The output asset.</returns>\n            public static IAsset CreateHLSEncryptedWithAES(IAsset clearSmoothStreamAsset)\n            {\n                IJob job = _context.Jobs.Create(\"Encrypt to HLS with AES.\");\n    \n                // Add task 1 - Package clear Smooth Streaming to HLS with AES.\n                PackageSmoothStreamToHLS(job, clearSmoothStreamAsset);\n    \n                // Submit the job and wait until it is completed.\n                job.Submit();\n                job = job.StartExecutionProgressTask(\n                    j =>\n                    {\n                        Console.WriteLine(\"Job state: {0}\", j.State);\n                        Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n                    },\n                    CancellationToken.None).Result;\n    \n                // The OutputMediaAssets[0] contains the desired asset.\n                _context.Locators.Create(\n                    LocatorType.OnDemandOrigin,\n                    job.OutputMediaAssets[0],\n                    AccessPermissions.Read,\n                    TimeSpan.FromDays(30));\n    \n                return job.OutputMediaAssets[0];\n            }\n    \n            /// <summary>\n            /// Uploads a single file.\n            /// </summary>\n            /// <param name=\"fileDir\">The location of the files.</param>\n            /// <param name=\"assetCreationOptions\">\n            ///  You can specify the following encryption options for the AssetCreationOptions.\n            ///      None:  no encryption.  \n            ///      StorageEncrypted: storage encryption. Encrypts a clear input file \n            ///        before it is uploaded to Azure storage. \n            ///      CommonEncryptionProtected: for Common Encryption Protected (CENC) files. \n            ///        For example, a set of files that are already PlayReady encrypted. \n            ///      EnvelopeEncryptionProtected: for HLS with AES encryption files.\n            ///        NOTE: The files must have been encoded and encrypted by Transform Manager. \n            ///     </param>\n            /// <returns>Returns an asset that contains a single file.</returns>\n            /// </summary>\n            /// <returns></returns>\n            private static IAsset IngestSingleMP4File(string fileDir, AssetCreationOptions assetCreationOptions)\n            {\n                // Use the SDK extension method to create a new asset by \n                // uploading a mezzanine file from a local path.\n                IAsset asset = _context.Assets.CreateFromFile(\n                    fileDir,\n                    assetCreationOptions,\n                    (af, p) =>\n                    {\n                        Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\n                    });\n     \n                return asset;\n            }\n    \n            /// <summary>\n            /// Creates a task to encode to Adaptive Bitrate. \n            /// Adds the new task to a job.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The input asset.</param>\n            /// <returns>The output asset.</returns>\n            private static IAsset EncodeSingleMP4IntoMultibitrateMP4sTask(IJob job, IAsset asset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Encoder.\n                IMediaProcessor encoder = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.AzureMediaEncoder);\n    \n                ITask adpativeBitrateTask = job.Tasks.AddNew(\"MP4 to Adaptive Bitrate Task\",\n                   encoder,\n                   \"H264 Adaptive Bitrate MP4 Set 720p\",\n                   TaskOptions.None);\n    \n                // Specify the input Asset\n                adpativeBitrateTask.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.None, which \n                // means the output asset is in the clear (unencrypted).\n                IAsset abrAsset = adpativeBitrateTask.OutputAssets.AddNew(\"Multibitrate MP4s\", \n                                        AssetCreationOptions.None);\n    \n                return abrAsset;\n            }\n    \n            /// <summary>\n            /// Creates a task to convert the MP4 file(s) to a Smooth Streaming asset.\n            /// Adds the new task to a job.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The input asset.</param>\n            /// <returns>The output asset.</returns>\n            private static IAsset PackageMP4ToSmoothStreamingTask(IJob job, IAsset asset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Packager.\n                IMediaProcessor packager = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.WindowsAzureMediaPackager);\n    \n                // Azure Media Packager does not accept string presets, so load xml configuration\n                string smoothConfig = File.ReadAllText(Path.Combine(\n                            _configurationXMLFiles, \n                            \"MediaPackager_MP4toSmooth.xml\"));\n    \n                // Create a new Task to convert adaptive bitrate to Smooth Streaming.\n                ITask smoothStreamingTask = job.Tasks.AddNew(\"MP4 to Smooth Task\",\n                   packager,\n                   smoothConfig,\n                   TaskOptions.None);\n    \n                // Specify the input Asset, which is the output Asset from the first task\n                smoothStreamingTask.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.None, which \n                // means the output asset is in the clear (unencrypted).\n                IAsset smoothOutputAsset = \n                    smoothStreamingTask.OutputAssets.AddNew(\"Clear Smooth Streaming\", \n                        AssetCreationOptions.None);\n    \n                return smoothOutputAsset;\n            }\n    \n            /// <summary>\n            /// Converts Smooth Streaming to HLS.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The Smooth Streaming asset.</param>\n            /// <returns>The asset that was packaged to HLS.</returns>\n            private static IAsset PackageSmoothStreamToHLS(IJob job, IAsset smoothStreamAsset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Packager.\n                IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.WindowsAzureMediaPackager);\n    \n                // Read the configuration data into a string. \n                // For the HLS to get encrypted with AES make sure to set the\n                // encrypt configuration property to true.\n                //\n                // In production, it is recommended to do the following:\n                //    Set a Key url for your authn/authz server.\n                //    Copy the /asset-containerguid/*.key file to your server (or craft a key file for yourself).\n                //    Delete *.key from the asset container.\n                //\n                string configuration = File.ReadAllText(Path.Combine(_configurationXMLFiles, @\"MediaPackager_SmoothToHLS.xml\"));\n    \n                // Create a task with the encoding details, using a configuration file.\n                ITask task = job.Tasks.AddNew(\"My Smooth Streaming to HLS Task\",\n                   processor,\n                   configuration,\n                   TaskOptions.ProtectedConfiguration);\n    \n                // Specify the input asset to be encoded.\n                task.InputAssets.Add(smoothStreamAsset);\n    \n                // Add an output asset to contain the results of the job. \n                IAsset outputAsset = \n                    task.OutputAssets.AddNew(\"HLS asset\", AssetCreationOptions.None);\n    \n    \n                return outputAsset;\n            }\n        }\n    }\n\n## 通过静态加密使用 PlayReady 来保护 HLSv3\n\n如果你想要通过 PlayReady 来保护你的内容，则可选择使用[动态加密](/documentation/articles/media-services-protect-with-drm)（推荐选项）或静态加密（如本部分所述）。\n\n>[AZURE.NOTE]若要使用 PlayReady 保护你的内容，必须先将内容转换/编码为平滑流格式。\n\n本部分的示例将夹层文件（在本例中为 MP4）编码为多比特率 MP4 文件。然后，它将 MP4 打包为平滑流，并使用 PlayReady 对平滑流进行加密。若要生成使用 PlayReady 加密的 HTTP 实时流 (HLS)，需要将 PlayReady 平滑流资产打包成 HLS。本主题演示如何执行所有这些步骤。\n\n媒体服务现在提供有用于传送 Microsoft PlayReady 许可证的服务。本文中的示例显示如何配置媒体服务 PlayReady 许可证传送服务（请参见以下代码中定义的 **ConfigureLicenseDeliveryService** 方法）。\n\n确保更新以下代码，以便指向输入 MP4 文件所在的文件夹，并指向 MediaPackager\\_MP4ToSmooth.xml、MediaPackager\\_SmoothToHLS.xml 和 MediaEncryptor\\_PlayReadyProtection.xml 文件所在的位置。MediaPackager\\_MP4ToSmooth.xml 和 MediaPackager\\_SmoothToHLS.xml在 [Azure 媒体包装器的任务预设](http://msdn.microsoft.com/zh-cn/library/azure/hh973635.aspx)中定义，MediaEncryptor\\_PlayReadyProtection.xml 在 [Azure 媒体加密器的任务预设](http://msdn.microsoft.com/zh-cn/library/azure/hh973610.aspx)主题中定义。\n    \n    using System;\n    using System.Collections.Generic;\n    using System.Configuration;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using Microsoft.WindowsAzure.MediaServices.Client;\n    using System.Xml.Linq;\n    using Microsoft.WindowsAzure.MediaServices.Client.ContentKeyAuthorization;\n    using Microsoft.WindowsAzure.MediaServices.Client.DynamicEncryption;\n    \n    namespace MediaServicesContentProtection\n    {\n        class Program\n        {\n            // Paths to support files (within the above base path). You can use \n            // the provided sample media files from the \"SupportFiles\" folder, or \n            // provide paths to your own media files below to run these samples.\n    \n            private static readonly string _mediaFiles =\n                Path.GetFullPath(@\"../..\\Media\");\n    \n            private static readonly string _singleMP4File =\n                Path.Combine(_mediaFiles, @\"SingleMP4\\BigBuckBunny.mp4\");\n    \n            // XML Configruation files path.\n            private static readonly string _configurationXMLFiles = @\"../..\\Configurations\";\n    \n    \n            private static MediaServicesCredentials _cachedCredentials = null;\n            private static CloudMediaContext _context = null;\n    \n            // Media Services account information.\n            private static readonly string _mediaServicesAccountName =\n                ConfigurationManager.AppSettings[\"MediaServiceAccountName\"];\n            private static readonly string _mediaServicesAccountKey =\n                ConfigurationManager.AppSettings[\"MediaServiceAccountKey\"];\n    \n            static void Main(string[] args)\n            {\n                // Create and cache the Media Services credentials in a static class variable.\n                _cachedCredentials = new MediaServicesCredentials(\n                                _mediaServicesAccountName,\n                                _mediaServicesAccountKey);\n                // Used the chached credentials to create CloudMediaContext.\n                _context = new CloudMediaContext(_cachedCredentials);\n    \n                // Load an MP4 file.\n                IAsset asset = IngestSingleMP4File(_singleMP4File, AssetCreationOptions.None);\n    \n                // Encode an MP4 file to a set of multibitrate MP4s.\n                // Then, package a set of MP4s to clear Smooth Streaming.\n                IAsset clearSmoothStreamAsset = ConvertMP4ToMultibitrateMP4sToSmoothStreaming(asset);\n    \n                // Create a common encryption content key that is used \n                // a) to set the key values in the MediaEncryptor_PlayReadyProtection.xml file\n                //    that is used for encryption.\n                // b) to configure the license delivery service and \n                //\n                Guid keyId;\n                byte[] contentKey;\n    \n                IContentKey key = CreateCommonEncryptionKey(out keyId, out contentKey);\n    \n                // The content key authorization policy must be configured by you \n                // and met by the client in order for the PlayReady license\n                // to be delivered to the client. \n                // In this example the Media Services PlayReady license delivery service is used.\n                ConfigureLicenseDeliveryService(key);\n    \n                // Get the Media Services PlayReady license delivery URL.\n                // This URL will be assigned to the licenseAcquisitionUrl property \n                // of the MediaEncryptor_PlayReadyProtection.xml file.\n                Uri acquisitionUrl = key.GetKeyDeliveryUrl(ContentKeyDeliveryType.PlayReadyLicense);\n    \n                // Update the MediaEncryptor_PlayReadyProtection.xml file with the key and URL info.\n                UpdatePlayReadyConfigurationXMLFile(keyId, contentKey, acquisitionUrl);\n    \n                // Create HLS encrypted with PlayReady.\n                IAsset playReadyHLSAsset = CreateHLSEncryptedWithPlayReady(clearSmoothStreamAsset);\n                //\n                string hlsWithPlayReadyURL = playReadyHLSAsset.GetHlsUri().ToString();\n                Console.WriteLine(\"HLS with PlayReady URL:\");\n                Console.WriteLine(hlsWithPlayReadyURL);\n            }\n    \n            /// <summary>\n            /// Creates a job with 2 tasks: \n            /// 1 task - encodes a single MP4 to multibitrate MP4s,\n            /// 2 task - packages MP4s to Smooth Streaming.\n            /// </summary>\n            /// <returns>The output asset.</returns>\n            public static IAsset ConvertMP4ToMultibitrateMP4sToSmoothStreaming(IAsset asset)\n            {\n                // Create a new job.\n                IJob job = _context.Jobs.Create(\"Convert MP4 to Smooth Streaming.\");\n    \n                // Add task 1 - Encode single MP4 into multibitrate MP4s.\n                IAsset MP4sAsset = EncodeSingleMP4IntoMultibitrateMP4sTask(job, asset);\n                // Add task 2 - Package a multibitrate MP4 set to Clear Smooth Streaming.\n                IAsset packagedAsset = PackageMP4ToSmoothStreamingTask(job, MP4sAsset);\n    \n                // Submit the job and wait until it is completed.\n                job.Submit();\n                job = job.StartExecutionProgressTask(\n                    j =>\n                    {\n                        Console.WriteLine(\"Job state: {0}\", j.State);\n                        Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n                    },\n                    CancellationToken.None).Result;\n    \n                // Get the output asset that contains Smooth Streaming.\n                return job.OutputMediaAssets[1];\n            }\n    \n            /// <summary>\n            /// Create a common encryption content key that is used \n            /// to set the key values in the MediaEncryptor_PlayReadyProtection.xml file\n            /// that is used for encryption.\n            /// </summary>\n            /// <param name=\"keyId\"></param>\n            /// <param name=\"contentKey\"></param>\n            /// <returns></returns>\n            public static IContentKey CreateCommonEncryptionKey(out Guid keyId, out byte[] contentKey)\n            {\n                keyId = Guid.NewGuid();\n                contentKey = GetRandomBuffer(16);\n    \n                IContentKey key = _context.ContentKeys.Create(\n                                        keyId,\n                                        contentKey,\n                                        \"ContentKey\",\n                                        ContentKeyType.CommonEncryption);\n    \n                return key;\n            }\n    \n            /// <summary>\n            /// Update your configuration .xml file dynamically.\n            /// </summary>\n            public static void UpdatePlayReadyConfigurationXMLFile(Guid keyId, byte[] keyValue, Uri licenseAcquisitionUrl)\n            {\n                string xmlFileName = Path.Combine(_configurationXMLFiles,\n                                            @\"MediaEncryptor_PlayReadyProtection.xml\");\n    \n                XNamespace xmlns = \"http://schemas.microsoft.com/iis/media/v4/TM/TaskDefinition#\";\n    \n                // Prepare the encryption task template\n                XDocument doc = XDocument.Load(xmlFileName);\n    \n                var licenseAcquisitionUrlEl = doc\n                        .Descendants(xmlns + \"property\")\n                        .Where(p => p.Attribute(\"name\").Value == \"licenseAcquisitionUrl\")\n                        .FirstOrDefault();\n                var contentKeyEl = doc\n                        .Descendants(xmlns + \"property\")\n                        .Where(p => p.Attribute(\"name\").Value == \"contentKey\")\n                        .FirstOrDefault();\n                var keyIdEl = doc\n                        .Descendants(xmlns + \"property\")\n                        .Where(p => p.Attribute(\"name\").Value == \"keyId\")\n                        .FirstOrDefault();\n    \n                // Update the \"value\" property.\n                if (licenseAcquisitionUrlEl != null)\n                    licenseAcquisitionUrlEl.Attribute(\"value\").SetValue(licenseAcquisitionUrl.ToString());\n    \n                if (contentKeyEl != null)\n                    contentKeyEl.Attribute(\"value\").SetValue(Convert.ToBase64String(keyValue));\n    \n                if (keyIdEl != null)\n                    keyIdEl.Attribute(\"value\").SetValue(keyId);\n    \n                doc.Save(xmlFileName);\n            }\n    \n            /// <summary>\n            // Encrypts clear Smooth Streaming to Smooth Streaming with PlayReady.\n            // Then, packages the PlayReady Smooth Streaming to HLS with PlayReady.\n            /// </summary>\n            /// <param name=\"clearSmoothAsset\">Asset that contains clear Smooth Streaming.</param>\n            /// <returns>The output asset.</returns>\n            public static IAsset CreateHLSEncryptedWithPlayReady(IAsset clearSmoothStreamAsset)\n            {\n                IJob job = _context.Jobs.Create(\"Encrypt to HLS with PlayReady.\");\n    \n                // Add task 1 - Encrypt Smooth Streaming with PlayReady \n                IAsset encryptedSmoothAsset =\n                    EncryptSmoothStreamWithPlayReadyTask(job, clearSmoothStreamAsset);\n    \n                // Add task 2 - Package to HLS with PlayReady.\n                PackageSmoothStreamToHLS(job, encryptedSmoothAsset);\n    \n                // Submit the job and wait until it is completed.\n                job.Submit();\n                job = job.StartExecutionProgressTask(\n                    j =>\n                    {\n                        Console.WriteLine(\"Job state: {0}\", j.State);\n                        Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n                    },\n                    CancellationToken.None).Result;\n    \n                // Since we had two tasks, the OutputMediaAssets[1]\n                // contains the desired asset.\n                _context.Locators.Create(\n                    LocatorType.OnDemandOrigin,\n                    job.OutputMediaAssets[1],\n                    AccessPermissions.Read,\n                    TimeSpan.FromDays(30));\n    \n                return job.OutputMediaAssets[1];\n            }\n    \n            /// <summary>\n            /// Uploads a single file.\n            /// </summary>\n            /// <param name=\"fileDir\">The location of the files.</param>\n            /// <param name=\"assetCreationOptions\">\n            ///  You can specify the following encryption options for the AssetCreationOptions.\n            ///      None:  no encryption.  \n            ///      StorageEncrypted: storage encryption. Encrypts a clear input file \n            ///        before it is uploaded to Azure storage. \n            ///      CommonEncryptionProtected: for Common Encryption Protected (CENC) files. \n            ///        For example, a set of files that are already PlayReady encrypted. \n            ///      EnvelopeEncryptionProtected: for HLS with AES encryption files.\n            ///        NOTE: The files must have been encoded and encrypted by Transform Manager. \n            ///     </param>\n            /// <returns>Returns an asset that contains a single file.</returns>\n            /// </summary>\n            /// <returns></returns>\n            private static IAsset IngestSingleMP4File(string fileDir, AssetCreationOptions assetCreationOptions)\n            {\n                // Use the SDK extension method to create a new asset by \n                // uploading a mezzanine file from a local path.\n                IAsset asset = _context.Assets.CreateFromFile(\n                    fileDir,\n                    assetCreationOptions,\n                    (af, p) =>\n                    {\n                        Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\n                    });\n    \n    \n                return asset;\n    \n            }\n            /// <summary>\n            /// Creates a task to encode to Adaptive Bitrate. \n            /// Adds the new task to a job.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The input asset.</param>\n            /// <returns>The output asset.</returns>\n            private static IAsset EncodeSingleMP4IntoMultibitrateMP4sTask(IJob job, IAsset asset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Encoder.\n                IMediaProcessor encoder = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.AzureMediaEncoder);\n    \n                ITask adpativeBitrateTask = job.Tasks.AddNew(\"MP4 to Adaptive Bitrate Task\",\n                   encoder,\n                   \"H264 Adaptive Bitrate MP4 Set 720p\",\n                   TaskOptions.None);\n    \n                // Specify the input Asset\n                adpativeBitrateTask.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.None, which \n                // means the output asset is in the clear (unencrypted).\n                IAsset abrAsset = adpativeBitrateTask.OutputAssets.AddNew(\"Multibitrate MP4s\",\n                                        AssetCreationOptions.None);\n    \n                return abrAsset;\n            }\n    \n            /// <summary>\n            /// Creates a task to convert the MP4 file(s) to a Smooth Streaming asset.\n            /// Adds the new task to a job.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The input asset.</param>\n            /// <returns>The output asset.</returns>\n            private static IAsset PackageMP4ToSmoothStreamingTask(IJob job, IAsset asset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Packager.\n                IMediaProcessor packager = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.WindowsAzureMediaPackager);\n    \n                // Azure Media Packager does not accept string presets, so load xml configuration\n                string smoothConfig = File.ReadAllText(Path.Combine(\n                            _configurationXMLFiles,\n                            \"MediaPackager_MP4toSmooth.xml\"));\n    \n                // Create a new Task to convert adaptive bitrate to Smooth Streaming.\n                ITask smoothStreamingTask = job.Tasks.AddNew(\"MP4 to Smooth Task\",\n                   packager,\n                   smoothConfig,\n                   TaskOptions.None);\n    \n                // Specify the input Asset, which is the output Asset from the first task\n                smoothStreamingTask.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.None, which \n                // means the output asset is in the clear (unencrypted).\n                IAsset smoothOutputAsset =\n                    smoothStreamingTask.OutputAssets.AddNew(\"Clear Smooth Streaming\",\n                        AssetCreationOptions.None);\n    \n                return smoothOutputAsset;\n            }\n    \n    \n            /// <summary>\n            /// Converts Smooth Stream to HLS.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The Smooth Stream asset.</param>\n            /// <returns>The asset that was packaged to HLS.</returns>\n            private static IAsset PackageSmoothStreamToHLS(IJob job, IAsset smoothStreamAsset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Packager.\n                IMediaProcessor processor = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.WindowsAzureMediaPackager);\n    \n                // Read the configuration data into a string. \n                //\n                string configuration = File.ReadAllText(\n                            Path.Combine(_configurationXMLFiles,\n                                        @\"MediaPackager_SmoothToHLS.xml\"));\n    \n                // Create a task with the encoding details, using a configuration file.\n                ITask task = job.Tasks.AddNew(\"My Smooth to HLS Task\",\n                   processor,\n                   configuration,\n                   TaskOptions.ProtectedConfiguration);\n    \n                // Specify the input asset to be encoded.\n                task.InputAssets.Add(smoothStreamAsset);\n    \n                // Add an output asset to contain the results of the job. \n                IAsset outputAsset =\n                    task.OutputAssets.AddNew(\"HLS asset\", AssetCreationOptions.None);\n    \n    \n                return outputAsset;\n            }\n    \n            /// <summary>\n            /// Creates a task to encrypt Smooth Streaming with PlayReady.\n            /// Note: Do deliver DASH, make sure to set the useSencBox and adjustSubSamples \n            /// configuration properties to true.\n            /// </summary>\n            /// <param name=\"job\">The job to which to add the new task.</param>\n            /// <param name=\"asset\">The input asset.</param>\n            /// <returns>The output asset.</returns>\n            private static IAsset EncryptSmoothStreamWithPlayReadyTask(IJob job, IAsset asset)\n            {\n                // Get the SDK extension method to  get a reference to the Azure Media Encryptor.\n                IMediaProcessor playreadyProcessor = _context.MediaProcessors.GetLatestMediaProcessorByName(\n                    MediaProcessorNames.WindowsAzureMediaEncryptor);\n    \n                // Read the configuration XML.\n                //\n                // Note that the configuration defined in MediaEncryptor_PlayReadyProtection.xml\n                // is using keySeedValue. It is recommended that you do this only for testing \n                // and not in production. For more information, see \n                // http://msdn.microsoft.com/zh-cn/library/azure/dn189154.aspx.\n                //\n                string configPlayReady = File.ReadAllText(Path.Combine(_configurationXMLFiles,\n                                            @\"MediaEncryptor_PlayReadyProtection.xml\"));\n    \n                ITask playreadyTask = job.Tasks.AddNew(\"My PlayReady Task\",\n                   playreadyProcessor,\n                   configPlayReady,\n                   TaskOptions.ProtectedConfiguration);\n    \n                playreadyTask.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job. \n                // This output is specified as AssetCreationOptions.CommonEncryptionProtected.\n                IAsset playreadyAsset = playreadyTask.OutputAssets.AddNew(\n                                                \"PlayReady Smooth Streaming\",\n                                                AssetCreationOptions.CommonEncryptionProtected);\n    \n    \n                return playreadyAsset;\n            }\n    \n    \n            /// <summary>\n            /// Configures authorization policy for the content key. \n            /// </summary>\n            /// <param name=\"contentKey\">The content key.</param>\n            static public void ConfigureLicenseDeliveryService(IContentKey contentKey)\n            {\n                // Create ContentKeyAuthorizationPolicy with Open restrictions \n                // and create authorization policy          \n    \n                List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\n                {\n                    new ContentKeyAuthorizationPolicyRestriction \n                    { \n                        Name = \"Open\", \n                        KeyRestrictionType = (int)ContentKeyRestrictionType.Open, \n                        Requirements = null\n                    }\n                };\n    \n                // Configure PlayReady license template.\n                string newLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\n    \n                IContentKeyAuthorizationPolicyOption policyOption =\n                    _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\n                        ContentKeyDeliveryType.PlayReadyLicense,\n                            restrictions, newLicenseTemplate);\n    \n                IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\n                            ContentKeyAuthorizationPolicies.\n                            CreateAsync(\"Deliver Common Content Key with no restrictions\").\n                            Result;\n    \n    \n                contentKeyAuthorizationPolicy.Options.Add(policyOption);\n    \n                // Associate the content key authorization policy with the content key.\n                contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\n                contentKey = contentKey.UpdateAsync().Result;\n            }\n    \n            static private string ConfigurePlayReadyLicenseTemplate()\n            {\n                // The following code configures PlayReady License Template using .NET classes\n                // and returns the XML string.\n    \n                PlayReadyLicenseResponseTemplate responseTemplate = new PlayReadyLicenseResponseTemplate();\n                PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\n    \n                responseTemplate.LicenseTemplates.Add(licenseTemplate);\n    \n                return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\n            }\n            static private byte[] GetRandomBuffer(int length)\n            {\n                var returnValue = new byte[length];\n    \n                using (var rng =\n                    new System.Security.Cryptography.RNGCryptoServiceProvider())\n                {\n                    rng.GetBytes(returnValue);\n                }\n    \n                return returnValue;\n            }\n    \n        }\n    }\n\n\n\n<!---HONumber=76-->"
}