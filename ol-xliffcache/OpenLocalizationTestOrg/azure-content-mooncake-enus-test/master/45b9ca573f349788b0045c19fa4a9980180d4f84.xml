{
  "nodes": [
    {
      "content": "本地/云混合应用程序 (.NET) | Azure",
      "pos": [
        27,
        52
      ]
    },
    {
      "content": "了解如何使用 Azure 服务总线中继创建 .NET 本地/云混合应用程序。",
      "pos": [
        71,
        109
      ]
    },
    {
      "content": "使用 Azure 服务总线中继创建 .NET 本地/云混合应用程序",
      "pos": [
        324,
        357
      ]
    },
    {
      "content": "介绍",
      "pos": [
        361,
        363
      ]
    },
    {
      "content": "使用 Visual Studio 2013 和免费的 Azure SDK for .NET，可以轻松地开发针对 Azure 的混合云应用程序。本文假设你之前未使用过 Azure。在不到 30 分钟的时间内，你就能让使用多个 Azure 资源的应用程序在云中启动并运行。",
      "pos": [
        365,
        499
      ]
    },
    {
      "content": "你将学习以下内容：",
      "pos": [
        501,
        510
      ]
    },
    {
      "content": "如何创建或修改现有 Web 服务以供 Web 解决方案使用。",
      "pos": [
        516,
        546
      ]
    },
    {
      "content": "如何使用 Azure 服务总线中继功能在 Azure 应用程序和托管于其他某处的 Web 服务之间共享数据。",
      "pos": [
        551,
        605
      ]
    },
    {
      "content": "服务总线中继功能将为混合解决方案带来哪些帮助",
      "pos": [
        684,
        706
      ]
    },
    {
      "content": "业务解决方案通常由为处理独特的新业务需求而编写的自定义代码和已有的解决方案和系统所提供的现有功能组成。",
      "pos": [
        708,
        759
      ]
    },
    {
      "content": "解决方案架构师开始使用云来轻松地处理缩放需求和降低运营成本。在此过程中，他们发现希望用作其解决方案的构建基块的现有服务资产位于企业防火墙内，无法通过云解决方案轻松访问。许多内部服务的构建或托管方式使得它们无法在企业网络边缘轻松公开。",
      "pos": [
        761,
        877
      ]
    },
    {
      "pos": [
        879,
        1140
      ],
      "content": "服务总线中继的设计考虑到如何利用现有的 Windows Communication Foundation (WCF) Web 服务，使得位于企业外部的解决方案能够安全地访问这些服务，而无需对企业网络基础结构进行彻底的更改。虽然此类服务总线中继服务仍托管在现有环境中，但它们会将侦听传入会话和请求这一任务委托给云托管的服务总线。服务总线还会通过使用<bpt id=\"p1\">[</bpt>共享访问签名<ept id=\"p1\">](https://msdn.microsoft.com/library/dn170478.aspx)</ept> (SAS) 身份验证来保护这些服务，以阻止未经授权的访问。"
    },
    {
      "content": "解决方案应用场景",
      "pos": [
        1145,
        1153
      ]
    },
    {
      "content": "在本教程中，你将创建一个 ASP.NET MVC Web 应用，用于查看产品库存页上的产品列表。",
      "pos": [
        1155,
        1203
      ]
    },
    {
      "content": "本教程假定你的产品信息位于现有的本地系统中，而且你使用服务总线中继来访问该系统。这是由在简单的控制台应用程序中运行的 Web 服务模拟的，并由一系列内存中产品提供支持。你将能够在你自己的计算机上运行此控制台应用程序并将 Web 角色部署到 Azure 中。通过此操作，你将看到在 Azure 数据中心运行的 Web 角色确实会调入你的计算机，即使你的计算机几乎肯定会驻留在至少一个防火墙和一个网络地址转换 (NAT) 层后面，情况也是如此。",
      "pos": [
        1213,
        1433
      ]
    },
    {
      "content": "下面是已完成的 Web 应用程序的起始页的屏幕截图。",
      "pos": [
        1435,
        1461
      ]
    },
    {
      "content": "设置开发环境",
      "pos": [
        1473,
        1479
      ]
    },
    {
      "content": "在你可以开始开发 Azure 应用程序之前，需要获取相应工具并设置开发环境。",
      "pos": [
        1481,
        1519
      ]
    },
    {
      "pos": [
        1525,
        1561
      ],
      "content": "在<bpt id=\"p1\">[</bpt>获取工具和 SDK<ept id=\"p1\">][]</ept> 安装 Azure SDK for .NET"
    },
    {
      "content": "单击你正在使用的 Visual Studio 版本的“安装 SDK”。本教程中的步骤使用 Visual Studio 2013。",
      "pos": [
        1567,
        1631
      ]
    },
    {
      "content": "当提示你是要运行还是保存安装程序时，单击“运行”。",
      "pos": [
        1650,
        1675
      ]
    },
    {
      "content": "在“Web 平台安装程序”中，单击“安装”，然后继续安装。",
      "pos": [
        1693,
        1722
      ]
    },
    {
      "content": "安装完成后，你就有了开始开发应用所需的一切。SDK 包含了一些工具，可利用这些工具在 Visual Studio 中轻松开发 Azure 应用程序。如果你未安装 Visual Studio，SDK 还会安装免费的 Visual Studio Express。",
      "pos": [
        1740,
        1869
      ]
    },
    {
      "content": "创建服务命名空间",
      "pos": [
        1874,
        1882
      ]
    },
    {
      "content": "若要开始在 Azure 中使用服务总线功能，必须先创建一个服务命名空间。命名空间提供了用于对应用程序中的 Service Bus 资源进行寻址的范围容器。",
      "pos": [
        1884,
        1961
      ]
    },
    {
      "pos": [
        1963,
        2039
      ],
      "content": "你可以使用<bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">][]</ept>或 Visual Studio 服务器资源管理器管理命名空间和服务总线消息传送实体，但只能在门户内创建新命名空间。"
    },
    {
      "content": "使用 Azure 经典门户创建命名空间：",
      "pos": [
        2045,
        2065
      ]
    },
    {
      "pos": [
        2071,
        2090
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "在门户的左侧导航窗格中，单击“服务总线”。",
      "pos": [
        2096,
        2117
      ]
    },
    {
      "content": "在门户的下方窗格中，单击“创建”。",
      "pos": [
        2123,
        2140
      ]
    },
    {
      "content": "在“添加新命名空间”对话框中，输入命名空间名称。系统会立即检查该名称是否可用。",
      "pos": [
        2158,
        2197
      ]
    },
    {
      "content": "在确保命名空间名称可用后，选择应承载您的命名空间的国家或地区（确保使用在其中部署计算资源的同一国家/地区）。",
      "pos": [
        2215,
        2269
      ]
    },
    {
      "pos": [
        2277,
        2326
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>选取要选择用于部署应用程序的<bpt id=\"p1\">*</bpt>相同区域<ept id=\"p1\">*</ept>。这将为您提供最佳性能。"
    },
    {
      "content": "将对话框中的其他字段保留为其默认值（“消息传送”和“标准”层），然后单击复选标记。系统现已创建命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户配置资源。",
      "pos": [
        2332,
        2416
      ]
    },
    {
      "content": "你创建的命名空间随后将显示在 Azure 经典门户中，不过需要花费一段时间来激活。请等到状态变为“活动”后再继续。",
      "pos": [
        2431,
        2488
      ]
    },
    {
      "content": "获取命名空间的默认管理凭据",
      "pos": [
        2493,
        2506
      ]
    },
    {
      "content": "若要在新命名空间上执行管理操作（如创建消息实体），你必须获取该命名空间的凭据。",
      "pos": [
        2508,
        2547
      ]
    },
    {
      "content": "在主窗口中，单击你的服务命名空间的名称。",
      "pos": [
        2553,
        2573
      ]
    },
    {
      "content": "单击“连接信息”。",
      "pos": [
        2593,
        2602
      ]
    },
    {
      "content": "在“访问连接信息”窗格中，找到包含 SAS 密钥和密钥名称的连接字符串。",
      "pos": [
        2622,
        2658
      ]
    },
    {
      "content": "记下这些凭据，或将它们复制到剪贴板。",
      "pos": [
        2678,
        2696
      ]
    },
    {
      "content": "创建本地服务器",
      "pos": [
        2701,
        2708
      ]
    },
    {
      "content": "首先，你将构建 (mock) 本地产品目录系统。这将非常简单；可以认为，此系统代表一个实际存在的本地产品目录系统，其中包含我们将尝试集成的完整服务图面。",
      "pos": [
        2710,
        2786
      ]
    },
    {
      "pos": [
        2788,
        3028
      ],
      "content": "此项目将作为 Visual Studio 控制台应用程序启动。此项目使用服务总线 NuGet 包，其中包含服务总线库和配置设置。利用 NuGet Visual Studio 扩展，可以轻松地在 Visual Studio 和 Visual Studio Express 中安装和更新库和工具。服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。有关使用 NuGet 和服务总线包的详细信息，请参阅<bpt id=\"p1\">[</bpt>使用 NuGet 服务总线包<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "创建项目",
      "pos": [
        3034,
        3038
      ]
    },
    {
      "content": "使用管理员权限启动 Microsoft VisualStudio 2013 或 Microsoft Visual Studio Express。若要使用管理员权限启动 Visual Studio，请右键单击“Microsoft Visual Studio 2013”（或“Microsoft Visual Studio Express”），然后单击“以管理员身份运行”。",
      "pos": [
        3044,
        3229
      ]
    },
    {
      "content": "在 Visual Studio 的“文件”菜单中，单击“新建”，然后单击“项目”。",
      "pos": [
        3235,
        3276
      ]
    },
    {
      "pos": [
        3295,
        3361
      ],
      "content": "从“已安装的模板”的“Visual C#”下单击“控制台应用程序”。在“名称”框中，键入名称 <bpt id=\"p1\">**</bpt>ProductsServer<ept id=\"p1\">**</ept>："
    },
    {
      "pos": [
        3380,
        3412
      ],
      "content": "单击“确定”以创建 <bpt id=\"p1\">**</bpt>ProductsServer<ept id=\"p1\">**</ept> 项目。"
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击“ProductsServer”，然后单击“属性”。",
      "pos": [
        3418,
        3462
      ]
    },
    {
      "content": "单击左侧的“应用程序”选项卡，然后确保“.NET Framework 4”或“.NET Framework 4.5”显示在“目标框架”列表中。如未显示，则从列表中将其选中，然后当提示是否重新加载该项目时单击“是”。",
      "pos": [
        3468,
        3575
      ]
    },
    {
      "pos": [
        3594,
        3796
      ],
      "content": "如果你已为 Visual Studio 安装 NuGet 包管理器，请跳到下一步骤。否则，请访问 <bpt id=\"p1\">[</bpt>NuGet<ept id=\"p1\">][]</ept>，然后单击“<bpt id=\"p2\">[</bpt>安装 NuGet<ept id=\"p2\">](http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c)</ept>”。按照提示操作以安装 NuGet 包管理器，然后重新启动 Visual Studio。"
    },
    {
      "content": "在解决方案资源管理器中，右键单击“引用”，然后单击“管理 NuGet 包”。",
      "pos": [
        3802,
        3840
      ]
    },
    {
      "content": "在“NuGet”对话框的左栏中，单击“联机”。",
      "pos": [
        3846,
        3869
      ]
    },
    {
      "pos": [
        3879,
        3944
      ],
      "content": "在右栏中，单击“搜索”框，键入“<bpt id=\"p1\">**</bpt>服务总线<ept id=\"p1\">**</ept>”，然后选择“Azure 服务总线”项。单击“安装”以完成安装，然后关闭此对话框。"
    },
    {
      "content": "请注意，现已引用所需的客户端程序集。",
      "pos": [
        3963,
        3981
      ]
    },
    {
      "content": "为产品协定添加新类。在“解决方案资源管理器”中，右键单击“ProductsServer”项目，单击“添加”，然后单击“类”。",
      "pos": [
        3988,
        4050
      ]
    },
    {
      "pos": [
        4069,
        4115
      ],
      "content": "在“名称”框中，键入名称 <bpt id=\"p1\">**</bpt>ProductsContract.cs<ept id=\"p1\">**</ept>。然后单击“添加”。"
    },
    {
      "content": "在“ProductsContract.cs”中，将命名空间定义替换为以下代码，以定义服务的协定。",
      "pos": [
        4121,
        4169
      ]
    },
    {
      "content": "在 Program.cs 中，将命名空间定义替换为以下代码，以为其添加配置文件服务和主机。",
      "pos": [
        5117,
        5162
      ]
    },
    {
      "pos": [
        6993,
        7184
      ],
      "content": "在“解决方案资源管理器”中，双击“App.config”文件以在 Visual Studio 编辑器中将其打开。将 <bpt id=\"p1\">**</bpt>&amp;lt;system.ServiceModel&amp;gt;<ept id=\"p1\">**</ept> 的内容替换为以下 XML 代码。确保将 <bpt id=\"p2\">*</bpt>yourServiceNamespace<ept id=\"p2\">*</ept> 替换为你的服务命名空间的名称，并将 <bpt id=\"p3\">*</bpt>yourKey<ept id=\"p3\">*</ept> 替换为之前从 Azure 经典门户中检索到的 SAS 密钥："
    },
    {
      "content": "按 F6 或从“生成”菜单中单击“生成解决方案”生成该应用程序，以验证你到目前为止的工作的准确性。",
      "pos": [
        8672,
        8721
      ]
    },
    {
      "content": "创建 ASP.NET MVC 应用程序",
      "pos": [
        8726,
        8745
      ]
    },
    {
      "content": "在本部分中，你将生成一个简单的 ASP.NET 应用程序，以便显示你的产品服务中检索到的数据。",
      "pos": [
        8747,
        8794
      ]
    },
    {
      "content": "创建项目",
      "pos": [
        8800,
        8804
      ]
    },
    {
      "content": "确保使用管理员权限运行 Visual Studio。若不能，要使用管理员权限启动 Visual Studio，请右键单击“Microsoft Visual Studio 2013”（或“Microsoft Visual Studio Express”），然后单击“以管理员身份运行”。Azure 计算模拟器（本文后面会讨论）要求使用管理员权限启动 Visual Studio。",
      "pos": [
        8810,
        8998
      ]
    },
    {
      "content": "在 Visual Studio 的“文件”菜单中，单击“新建”，然后单击“项目”。",
      "pos": [
        9004,
        9045
      ]
    },
    {
      "pos": [
        9051,
        9130
      ],
      "content": "从“已安装的模板”的“Visual C#”下单击“ASP.NET Web 应用程序”。将项目命名为 <bpt id=\"p1\">**</bpt>ProductsPortal<ept id=\"p1\">**</ept>。然后，单击“确定”。"
    },
    {
      "content": "从“选择模板”列表中，单击“MVC”，然后单击“确定”。",
      "pos": [
        9149,
        9177
      ]
    },
    {
      "pos": [
        9196,
        9270
      ],
      "content": "在解决方案资源管理器中，右键单击“模型”，再单击“添加”，然后单击“类”。在“名称”框中，键入名称 <bpt id=\"p1\">**</bpt>Product.cs<ept id=\"p1\">**</ept>。然后单击“添加”。"
    },
    {
      "content": "修改 Web 应用程序",
      "pos": [
        9289,
        9300
      ]
    },
    {
      "content": "在 Visual Studio 的 Product.cs 文件中将现有命名空间定义替换为以下代码。",
      "pos": [
        9306,
        9355
      ]
    },
    {
      "content": "在 Visual Studio 的 HomeController.cs 文件中，将现有命名空间定义替换为以下代码。",
      "pos": [
        9687,
        9744
      ]
    },
    {
      "content": "在解决方案资源管理器中，展开 Views\\Shared 文件夹。",
      "pos": [
        10352,
        10384
      ]
    },
    {
      "pos": [
        10403,
        10451
      ],
      "content": "双击 <bpt id=\"p1\">**</bpt>_Layout.cshtml<ept id=\"p1\">**</ept> 以在 Visual Studio 编辑器中将其打开。"
    },
    {
      "pos": [
        10457,
        10516
      ],
      "content": "将每一处 <bpt id=\"p1\">**</bpt>My ASP.NET Application<ept id=\"p1\">**</ept> 更改为 <bpt id=\"p2\">**</bpt>LITWARE'S Products<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "删除“Home”、“About”和“Contact”链接。在下面的示例中，删除突出显示的代码。",
      "pos": [
        10521,
        10568
      ]
    },
    {
      "content": "在解决方案资源管理器中，展开 Views\\Home 文件夹：",
      "pos": [
        10587,
        10617
      ]
    },
    {
      "content": "双击“Index.cshtml”在 Visual Studio 编辑器中将其打开。将文件的全部内容替换为以下代码。",
      "pos": [
        10636,
        10693
      ]
    },
    {
      "pos": [
        11455,
        11509
      ],
      "content": "若要验证你到目前为止的工作的准确性，可以按 <bpt id=\"p1\">**</bpt>F6<ept id=\"p1\">**</ept> 或 <bpt id=\"p2\">**</bpt>Ctrl+Shift+B<ept id=\"p2\">**</ept> 来生成项目。"
    },
    {
      "content": "在本地运行应用程序",
      "pos": [
        11516,
        11525
      ]
    },
    {
      "content": "运行应用程序以验证其是否正常运行。",
      "pos": [
        11527,
        11544
      ]
    },
    {
      "content": "确保“ProductsPortal”是活动项目。在“解决方案资源管理器”中，右键单击项目名称并选择“设置为启动项目”。",
      "pos": [
        11550,
        11609
      ]
    },
    {
      "pos": [
        11614,
        11641
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Visual Studio<ept id=\"p1\">**</ept> 中，按 F5。"
    },
    {
      "content": "你的应用程序应在浏览器中显示为正在运行。",
      "pos": [
        11646,
        11666
      ]
    },
    {
      "content": "准备好将应用程序部署到 Azure",
      "pos": [
        11684,
        11701
      ]
    },
    {
      "pos": [
        11703,
        11912
      ],
      "content": "你可以将应用程序部署到 Azure 云服务或 Azure Web 应用。若要详细了解 Web 应用和云服务之间的差异，请参阅 <bpt id=\"p1\">[</bpt>Azure 执行模型<ept id=\"p1\">][executionmodels]</ept>。若要了解如何将应用程序部署到 Azure Web 应用，请参阅<bpt id=\"p2\">[</bpt>将 ASP.NET Web 应用程序部署到 Azure Web 应用<ept id=\"p2\">](/develop/net/)</ept>。本部分包含有关如何将应用程序部署到 Azure 云服务的详细步骤。"
    },
    {
      "content": "若要将应用程序部署到云服务，需要在解决方案中添加一个云服务项目部署项目。该部署项目包含在云中正常运行应用程序所需的配置信息。",
      "pos": [
        11914,
        11976
      ]
    },
    {
      "pos": [
        11982,
        12068
      ],
      "content": "若要使应用程序能够部署到云中，请右键单击“解决方案资源管理器”中的 <bpt id=\"p1\">**</bpt>ProductsPortal<ept id=\"p1\">**</ept> 项目，再单击“转换”，然后单击“转换为 Azure 云服务项目”。"
    },
    {
      "content": "若要测试应用程序，请按 F5。",
      "pos": [
        12087,
        12102
      ]
    },
    {
      "content": "这将启动 Azure 计算模拟器。此计算模拟器使用本地计算机来模拟在 Azure 中运行的应用程序。可以通过查看系统托盘来确认此模拟器已启动。",
      "pos": [
        12108,
        12179
      ]
    },
    {
      "content": "浏览器仍将显示你的应用程序正在本地运行，并且其外观和功能与你之前将其作为常规 ASP.NET MVC 4 应用程序运行时的外观和功能相同。",
      "pos": [
        12198,
        12267
      ]
    },
    {
      "content": "将各个部分组合在一起",
      "pos": [
        12272,
        12282
      ]
    },
    {
      "content": "下一步是将本地产品服务器与 ASP.NET MVC 应用程序挂钩。",
      "pos": [
        12284,
        12317
      ]
    },
    {
      "pos": [
        12323,
        12421
      ],
      "content": "如果它尚未打开，则在 Visual Studio 中重新打开你在\"Creating an ASP.NET MVC Application\"部分中创建的 <bpt id=\"p1\">**</bpt>ProductsPortal<ept id=\"p1\">**</ept> 项目。"
    },
    {
      "content": "采用与“创建本地服务器”部分类似的步骤，将 NuGet 包添加到项目“引用”中。在解决方案资源管理器中，右键单击“引用”，然后单击“管理 NuGet 包”。",
      "pos": [
        12427,
        12505
      ]
    },
    {
      "content": "搜索“服务总线”并选择“Azure 服务总线”项。然后，完成安装过程并关闭此对话框。",
      "pos": [
        12511,
        12553
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“ProductsPortal”项目，然后单击“添加”，再单击“现有项”。",
      "pos": [
        12559,
        12612
      ]
    },
    {
      "pos": [
        12618,
        12729
      ],
      "content": "从 <bpt id=\"p1\">**</bpt>ProductsServer<ept id=\"p1\">**</ept> 控制台项目导航到 <bpt id=\"p2\">**</bpt>ProductsContract.cs<ept id=\"p2\">**</ept> 文件。单击以突出显示 ProductsContract.cs。单击“添加”旁边的向下箭头，然后单击“添加为链接”。"
    },
    {
      "pos": [
        12748,
        12907
      ],
      "content": "现在，在 Visual Studio 编辑器中打开 <bpt id=\"p1\">**</bpt>HomeController.cs<ept id=\"p1\">**</ept> 文件，并将命名空间定义替换为以下代码。确保将 <bpt id=\"p2\">*</bpt>yourServiceNamespace<ept id=\"p2\">*</ept> 替换为你的服务命名空间的名称，并将 <bpt id=\"p3\">*</bpt>yourKey<ept id=\"p3\">*</ept> 替换为你的 SAS 密钥。这将使客户端能够调用本地服务，并返回调用的结果。"
    },
    {
      "content": "在解决方案资源管理器中，右键单击“ProductsPortal”解决方案，单击“添加”，然后单击“现有项目”。",
      "pos": [
        14698,
        14753
      ]
    },
    {
      "pos": [
        14759,
        14824
      ],
      "content": "导航到 <bpt id=\"p1\">**</bpt>ProductsServer<ept id=\"p1\">**</ept> 项目，然后双击“ProductsServer.csproj”解决方案文件以将其添加。"
    },
    {
      "content": "在解决方案资源管理器中，右键单击“ProductsPortal”解决方案并单击“属性”。",
      "pos": [
        14830,
        14874
      ]
    },
    {
      "pos": [
        14880,
        15081
      ],
      "content": "在左侧，单击“启动项目”。在右侧，单击“多个启动项目”。确保 <bpt id=\"p1\">**</bpt>ProductsServer<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>ProductsPortal.Azure<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>ProductsPortal<ept id=\"p3\">**</ept> 按这样的顺序显示，并且将“启动”设置为针对 <bpt id=\"p4\">**</bpt>ProductsServer<ept id=\"p4\">**</ept> 和 <bpt id=\"p5\">**</bpt>ProductsPortal.Azure<ept id=\"p5\">**</ept> 的操作，将“无”设置为针对 <bpt id=\"p6\">**</bpt>ProductsPortal<ept id=\"p6\">**</ept> 的操作。"
    },
    {
      "content": "仍然在“属性”对话框中，单击左侧的“ProjectDependencies”。",
      "pos": [
        15102,
        15141
      ]
    },
    {
      "content": "在“项目”列表中，单击“ProductsServer”。确保未选中“ProductsPortal”，但选中“ProductsPortal.Azure”。然后单击“确定”：",
      "pos": [
        15147,
        15232
      ]
    },
    {
      "content": "运行应用程序",
      "pos": [
        15250,
        15256
      ]
    },
    {
      "content": "从 Visual Studio 的“文件”菜单中，单击“全部保存”。",
      "pos": [
        15262,
        15296
      ]
    },
    {
      "pos": [
        15302,
        15429
      ],
      "content": "按 F5 生成并运行应用程序。应先启动本地服务器（<bpt id=\"p1\">**</bpt>ProductsServer<ept id=\"p1\">**</ept> 控制台应用程序），再在浏览器窗口中启动 <bpt id=\"p2\">**</bpt>ProductsWeb<ept id=\"p2\">**</ept> 应用程序，如以下屏幕截图中所示。这次，你将看到产品库存列出了从产品服务本地系统中检索到的数据。"
    },
    {
      "content": "将你的应用程序部署到 Azure",
      "pos": [
        15446,
        15462
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“ProductsPortal”项目，然后单击“发布到 Azure”。",
      "pos": [
        15468,
        15519
      ]
    },
    {
      "content": "你可能必须登录才能查看你的所有订阅。",
      "pos": [
        15525,
        15543
      ]
    },
    {
      "content": "单击“登录以查看更多订阅”：",
      "pos": [
        15549,
        15563
      ]
    },
    {
      "content": "使用你的 Microsoft 帐户登录",
      "pos": [
        15582,
        15601
      ]
    },
    {
      "pos": [
        15607,
        15731
      ],
      "content": "单击<bpt id=\"p1\">**</bpt>“下一步”<ept id=\"p1\">**</ept>。如果你的订阅尚未包含任何托管服务，则系统将要求你创建一个托管服务。托管服务在 Azure 订阅中充当应用程序的容器。输入标识应用程序的名称，然后选择应为其优化应用程序的区域。（用户从此区域访问应用程序所花的加载时间会更少。）"
    },
    {
      "pos": [
        15737,
        15784
      ],
      "content": "选择要将应用程序发布到其中的托管服务。为其余设置保留以下所示的默认值。单击<bpt id=\"p1\">**</bpt>“下一步”<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "在最后一页上，单击“发布”以开始部署过程。",
      "pos": [
        15802,
        15823
      ]
    },
    {
      "content": "此过程需要大约 5-7 分钟时间。由于这是你首次发布，因此 Azure 会依次执行以下操作以便公开应用程序：预配一台虚拟机 (VM)，执行安全强化，在 VM 上创建一个 Web 角色以承载应用程序，将代码部署到该 Web 角色以及配置负载平衡器和网络。",
      "pos": [
        15847,
        15973
      ]
    },
    {
      "content": "当发布正在进行时，你可以在“Azure 活动日志”窗口中监视活动，该窗口通常位于 Visual Studio 或 Visual Web Developer 的底部。",
      "pos": [
        15978,
        16060
      ]
    },
    {
      "content": "部署完成后，你可以通过单击监视窗口中的“ Web 应用 URL”链接来查看 Web 应用。",
      "pos": [
        16078,
        16123
      ]
    },
    {
      "pos": [
        16142,
        16279
      ],
      "content": "你的 Web 应用取决于本地服务器，因此你必须在本地运行 <bpt id=\"p1\">**</bpt>ProductsServer<ept id=\"p1\">**</ept> 应用程序， Web 应用才能正常运行。在云 Web 应用上执行请求时，你将看到请求传入本地控制台应用程序，如以下屏幕快照中显示的“GetProducts called”输出所示。"
    },
    {
      "pos": [
        16294,
        16351
      ],
      "content": "若要详细了解 Web 应用和云服务之间的差异，请参阅 <bpt id=\"p1\">[</bpt>Azure 执行模型<ept id=\"p1\">][executionmodels]</ept>。"
    },
    {
      "content": "停止并删除应用程序",
      "pos": [
        16356,
        16365
      ]
    },
    {
      "content": "在部署应用程序后，你可能希望禁用它，以便能在 750 小时/月（31 天/月）的免费服务器时间内生成和部署其他应用程序。",
      "pos": [
        16367,
        16427
      ]
    },
    {
      "content": "Azure 将按使用的服务器小时数对 Web 角色实例计费。你的应用程序部署之后就会开始使用服务器时间，即使相关实例并未运行且处于停止状态也是如此。免费帐户包含 750 小时/月（31 天/月）的专用虚拟机服务器时间（用于承载这些 Web 角色实例）。",
      "pos": [
        16429,
        16555
      ]
    },
    {
      "content": "以下步骤演示了如何停止和删除应用程序。",
      "pos": [
        16557,
        16576
      ]
    },
    {
      "pos": [
        16582,
        16619
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">][]</ept>，单击“云服务”，然后单击服务的名称。"
    },
    {
      "content": "单击“仪表板”选项卡，然后单击“停止”以暂时挂起应用程序。单击“启动”即可重新启动它。单击“删除”即可从 Azure 中完全删除应用程序，但无法将其还原。",
      "pos": [
        16625,
        16702
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        16720,
        16724
      ]
    },
    {
      "content": "若要了解有关 Service Bus 的详细信息，请参阅以下资源：",
      "pos": [
        16728,
        16761
      ]
    },
    {
      "content": "Azure 服务总线",
      "pos": [
        16766,
        16776
      ]
    },
    {
      "content": "如何使用 Service Bus 队列",
      "pos": [
        16792,
        16811
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"本地/云混合应用程序 (.NET) | Azure\"\n    description=\"了解如何使用 Azure 服务总线中继创建 .NET 本地/云混合应用程序。\"\n    services=\"service-bus\"\n    documentationCenter=\".net\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.date=\"10/07/2015\"\n    wacn.date=\"01/21/2016\"/>\n\n# 使用 Azure 服务总线中继创建 .NET 本地/云混合应用程序\n\n##介绍\n\n使用 Visual Studio 2013 和免费的 Azure SDK for .NET，可以轻松地开发针对 Azure 的混合云应用程序。本文假设你之前未使用过 Azure。在不到 30 分钟的时间内，你就能让使用多个 Azure 资源的应用程序在云中启动并运行。\n\n你将学习以下内容：\n\n-   如何创建或修改现有 Web 服务以供 Web 解决方案使用。\n-   如何使用 Azure 服务总线中继功能在 Azure 应用程序和托管于其他某处的 Web 服务之间共享数据。\n\n[AZURE.INCLUDE [create-account-note](../includes/create-account-note.md)]\n\n##服务总线中继功能将为混合解决方案带来哪些帮助\n\n业务解决方案通常由为处理独特的新业务需求而编写的自定义代码和已有的解决方案和系统所提供的现有功能组成。\n\n解决方案架构师开始使用云来轻松地处理缩放需求和降低运营成本。在此过程中，他们发现希望用作其解决方案的构建基块的现有服务资产位于企业防火墙内，无法通过云解决方案轻松访问。许多内部服务的构建或托管方式使得它们无法在企业网络边缘轻松公开。\n\n服务总线中继的设计考虑到如何利用现有的 Windows Communication Foundation (WCF) Web 服务，使得位于企业外部的解决方案能够安全地访问这些服务，而无需对企业网络基础结构进行彻底的更改。虽然此类服务总线中继服务仍托管在现有环境中，但它们会将侦听传入会话和请求这一任务委托给云托管的服务总线。服务总线还会通过使用[共享访问签名](https://msdn.microsoft.com/library/dn170478.aspx) (SAS) 身份验证来保护这些服务，以阻止未经授权的访问。\n\n## 解决方案应用场景\n\n在本教程中，你将创建一个 ASP.NET MVC Web 应用，用于查看产品库存页上的产品列表。\n\n![][0]\n\n本教程假定你的产品信息位于现有的本地系统中，而且你使用服务总线中继来访问该系统。这是由在简单的控制台应用程序中运行的 Web 服务模拟的，并由一系列内存中产品提供支持。你将能够在你自己的计算机上运行此控制台应用程序并将 Web 角色部署到 Azure 中。通过此操作，你将看到在 Azure 数据中心运行的 Web 角色确实会调入你的计算机，即使你的计算机几乎肯定会驻留在至少一个防火墙和一个网络地址转换 (NAT) 层后面，情况也是如此。\n\n下面是已完成的 Web 应用程序的起始页的屏幕截图。\n\n![][1]\n\n##设置开发环境\n\n在你可以开始开发 Azure 应用程序之前，需要获取相应工具并设置开发环境。\n\n1.  在[获取工具和 SDK][] 安装 Azure SDK for .NET\n\n2.  单击你正在使用的 Visual Studio 版本的“安装 SDK”。本教程中的步骤使用 Visual Studio 2013。\n\n    ![][42]\n\n3.  当提示你是要运行还是保存安装程序时，单击“运行”。\n\n    ![][2]\n\n4.  在“Web 平台安装程序”中，单击“安装”，然后继续安装。\n\n    ![][3]\n\n5.  安装完成后，你就有了开始开发应用所需的一切。SDK 包含了一些工具，可利用这些工具在 Visual Studio 中轻松开发 Azure 应用程序。如果你未安装 Visual Studio，SDK 还会安装免费的 Visual Studio Express。\n\n## 创建服务命名空间\n\n若要开始在 Azure 中使用服务总线功能，必须先创建一个服务命名空间。命名空间提供了用于对应用程序中的 Service Bus 资源进行寻址的范围容器。\n\n你可以使用[Azure 经典门户][]或 Visual Studio 服务器资源管理器管理命名空间和服务总线消息传送实体，但只能在门户内创建新命名空间。\n\n### 使用 Azure 经典门户创建命名空间：\n\n1.  登录到 [Azure 经典门户][]。\n\n2.  在门户的左侧导航窗格中，单击“服务总线”。\n\n3.  在门户的下方窗格中，单击“创建”。\n\n    ![][5]\n\n4.  在“添加新命名空间”对话框中，输入命名空间名称。系统会立即检查该名称是否可用。\n\n    ![][6]\n\n5.  在确保命名空间名称可用后，选择应承载您的命名空间的国家或地区（确保使用在其中部署计算资源的同一国家/地区）。\n\n    > [AZURE.IMPORTANT]选取要选择用于部署应用程序的*相同区域*。这将为您提供最佳性能。\n\n6.  将对话框中的其他字段保留为其默认值（“消息传送”和“标准”层），然后单击复选标记。系统现已创建命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户配置资源。\n\n    ![][38]\n\n你创建的命名空间随后将显示在 Azure 经典门户中，不过需要花费一段时间来激活。请等到状态变为“活动”后再继续。\n\n## 获取命名空间的默认管理凭据\n\n若要在新命名空间上执行管理操作（如创建消息实体），你必须获取该命名空间的凭据。\n\n1.  在主窗口中，单击你的服务命名空间的名称。\n\n    ![][39]\n\n\n2.  单击“连接信息”。\n\n    ![][40]\n\n\n3.  在“访问连接信息”窗格中，找到包含 SAS 密钥和密钥名称的连接字符串。\n\n    ![][45]\n\n\n4.  记下这些凭据，或将它们复制到剪贴板。\n\n## 创建本地服务器\n\n首先，你将构建 (mock) 本地产品目录系统。这将非常简单；可以认为，此系统代表一个实际存在的本地产品目录系统，其中包含我们将尝试集成的完整服务图面。\n\n此项目将作为 Visual Studio 控制台应用程序启动。此项目使用服务总线 NuGet 包，其中包含服务总线库和配置设置。利用 NuGet Visual Studio 扩展，可以轻松地在 Visual Studio 和 Visual Studio Express 中安装和更新库和工具。服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。有关使用 NuGet 和服务总线包的详细信息，请参阅[使用 NuGet 服务总线包][]。\n\n### 创建项目\n\n1.  使用管理员权限启动 Microsoft VisualStudio 2013 或 Microsoft Visual Studio Express。若要使用管理员权限启动 Visual Studio，请右键单击“Microsoft Visual Studio 2013”（或“Microsoft Visual Studio Express”），然后单击“以管理员身份运行”。\n\n2.  在 Visual Studio 的“文件”菜单中，单击“新建”，然后单击“项目”。\n\n    ![][10]\n\n3.  从“已安装的模板”的“Visual C#”下单击“控制台应用程序”。在“名称”框中，键入名称 **ProductsServer**：\n\n    ![][11]\n\n4.  单击“确定”以创建 **ProductsServer** 项目。\n\n5.  在“解决方案资源管理器”中，右键单击“ProductsServer”，然后单击“属性”。\n\n6.  单击左侧的“应用程序”选项卡，然后确保“.NET Framework 4”或“.NET Framework 4.5”显示在“目标框架”列表中。如未显示，则从列表中将其选中，然后当提示是否重新加载该项目时单击“是”。\n\n    ![][12]\n\n7.  如果你已为 Visual Studio 安装 NuGet 包管理器，请跳到下一步骤。否则，请访问 [NuGet][]，然后单击“[安装 NuGet](http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c)”。按照提示操作以安装 NuGet 包管理器，然后重新启动 Visual Studio。\n\n8.  在解决方案资源管理器中，右键单击“引用”，然后单击“管理 NuGet 包”。\n\n9.  在“NuGet”对话框的左栏中，单击“联机”。\n\n10.     在右栏中，单击“搜索”框，键入“**服务总线**”，然后选择“Azure 服务总线”项。单击“安装”以完成安装，然后关闭此对话框。\n\n    ![][13]\n\n    请注意，现已引用所需的客户端程序集。\n\n11.  为产品协定添加新类。在“解决方案资源管理器”中，右键单击“ProductsServer”项目，单击“添加”，然后单击“类”。\n\n    ![][14]\n\n12. 在“名称”框中，键入名称 **ProductsContract.cs**。然后单击“添加”。\n\n13. 在“ProductsContract.cs”中，将命名空间定义替换为以下代码，以定义服务的协定。\n\n        namespace ProductsServer\n        {\n            using System.Collections.Generic;\n            using System.Runtime.Serialization;\n            using System.ServiceModel;\n\n            // Define the data contract for the service\n            [DataContract]\n            // Declare the serializable properties.\n            public class ProductData\n            {\n                [DataMember]\n                public string Id { get; set; }\n                [DataMember]\n                public string Name { get; set; }\n                [DataMember]\n                public string Quantity { get; set; }\n            }\n\n            // Define the service contract.\n            [ServiceContract]\n            interface IProducts\n            {\n                [OperationContract]\n                IList<ProductData> GetProducts();\n\n            }\n\n            interface IProductsChannel : IProducts, IClientChannel\n            {\n            }\n        }\n\n14. 在 Program.cs 中，将命名空间定义替换为以下代码，以为其添加配置文件服务和主机。\n\n        namespace ProductsServer\n        {\n            using System;\n            using System.Linq;\n            using System.Collections.Generic;\n            using System.ServiceModel;\n\n            // Implement the IProducts interface.\n            class ProductsService : IProducts\n            {\n\n                // Populate array of products for display on website.\n                ProductData[] products =\n                    new []\n                        {\n                            new ProductData{ Id = \"1\", Name = \"Rock\",\n                                             Quantity = \"1\"},\n                            new ProductData{ Id = \"2\", Name = \"Paper\",\n                                             Quantity = \"3\"},\n                            new ProductData{ Id = \"3\", Name = \"Scissors\",\n                                             Quantity = \"5\"},\n                            new ProductData{ Id = \"4\", Name = \"Well\",\n                                             Quantity = \"2500\"},\n                        };\n\n                // Display a message in the service console application\n                // when the list of products is retrieved.\n                public IList<ProductData> GetProducts()\n                {\n                    Console.WriteLine(\"GetProducts called.\");\n                    return products;\n                }\n\n            }\n\n            class Program\n            {\n                // Define the Main() function in the service application.\n                static void Main(string[] args)\n                {\n                    var sh = new ServiceHost(typeof(ProductsService));\n                    sh.Open();\n\n                    Console.WriteLine(\"Press ENTER to close\");\n                    Console.ReadLine();\n\n                    sh.Close();\n                }\n            }\n        }\n\n15. 在“解决方案资源管理器”中，双击“App.config”文件以在 Visual Studio 编辑器中将其打开。将 **&lt;system.ServiceModel&gt;** 的内容替换为以下 XML 代码。确保将 *yourServiceNamespace* 替换为你的服务命名空间的名称，并将 *yourKey* 替换为之前从 Azure 经典门户中检索到的 SAS 密钥：\n\n        <system.serviceModel>\n          <extensions>\n             <behaviorExtensions>\n                <add name=\"transportClientEndpointBehavior\" type=\"Microsoft.ServiceBus.Configuration.TransportClientEndpointBehaviorElement, Microsoft.ServiceBus, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\n              </behaviorExtensions>\n              <bindingExtensions>\n                 <add name=\"netTcpRelayBinding\" type=\"Microsoft.ServiceBus.Configuration.NetTcpRelayBindingCollectionElement, Microsoft.ServiceBus, Version=2.6.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35\"/>\n              </bindingExtensions>\n          </extensions>\n          <services>\n             <service name=\"ProductsServer.ProductsService\">\n               <endpoint address=\"sb://yourServiceNamespace.servicebus.windows.net/products\" binding=\"netTcpRelayBinding\" contract=\"ProductsServer.IProducts\"\n        behaviorConfiguration=\"products\"/>\n             </service>\n          </services>\n          <behaviors>\n             <endpointBehaviors>\n               <behavior name=\"products\">\n                 <transportClientEndpointBehavior>\n                    <tokenProvider>\n                       <sharedAccessSignature keyName=\"RootManageSharedAccessKey\" key=\"yourKey\" />\n                    </tokenProvider>\n                 </transportClientEndpointBehavior>\n               </behavior>\n             </endpointBehaviors>\n          </behaviors>\n        </system.serviceModel>\n\n16. 按 F6 或从“生成”菜单中单击“生成解决方案”生成该应用程序，以验证你到目前为止的工作的准确性。\n\n## 创建 ASP.NET MVC 应用程序\n\n在本部分中，你将生成一个简单的 ASP.NET 应用程序，以便显示你的产品服务中检索到的数据。\n\n### 创建项目\n\n1.  确保使用管理员权限运行 Visual Studio。若不能，要使用管理员权限启动 Visual Studio，请右键单击“Microsoft Visual Studio 2013”（或“Microsoft Visual Studio Express”），然后单击“以管理员身份运行”。Azure 计算模拟器（本文后面会讨论）要求使用管理员权限启动 Visual Studio。\n\n2.  在 Visual Studio 的“文件”菜单中，单击“新建”，然后单击“项目”。\n\n3.  从“已安装的模板”的“Visual C#”下单击“ASP.NET Web 应用程序”。将项目命名为 **ProductsPortal**。然后，单击“确定”。\n\n    ![][15]\n\n4.  从“选择模板”列表中，单击“MVC”，然后单击“确定”。\n\n    ![][16]\n\n5.  在解决方案资源管理器中，右键单击“模型”，再单击“添加”，然后单击“类”。在“名称”框中，键入名称 **Product.cs**。然后单击“添加”。\n\n    ![][17]\n\n### 修改 Web 应用程序\n\n1.  在 Visual Studio 的 Product.cs 文件中将现有命名空间定义替换为以下代码。\n\n        // Declare properties for the products inventory.\n        namespace ProductsWeb.Models\n        {\n            public class Product\n            {\n                public string Id { get; set; }\n                public string Name { get; set; }\n                public string Quantity { get; set; }\n            }\n        }\n\n2.  在 Visual Studio 的 HomeController.cs 文件中，将现有命名空间定义替换为以下代码。\n\n        namespace ProductsWeb.Controllers\n        {\n            using System.Collections.Generic;\n            using System.Web.Mvc;\n            using Models;\n\n            public class HomeController : Controller\n            {\n                // Return a view of the products inventory.\n                public ActionResult Index(string Identifier, string ProductName)\n                {\n                    var products = new List<Product>\n                        {new Product {Id = Identifier, Name = ProductName}};\n                    return View(products);\n                }\n\n            }\n        }\n\n3.  在解决方案资源管理器中，展开 Views\\Shared 文件夹。\n\n    ![][18]\n\n4.  双击 **_Layout.cshtml** 以在 Visual Studio 编辑器中将其打开。\n\n5.  将每一处 **My ASP.NET Application** 更改为 **LITWARE'S Products**。\n\n6. 删除“Home”、“About”和“Contact”链接。在下面的示例中，删除突出显示的代码。\n\n    ![][41]\n\n7.  在解决方案资源管理器中，展开 Views\\Home 文件夹：\n\n    ![][20]\n\n8.  双击“Index.cshtml”在 Visual Studio 编辑器中将其打开。将文件的全部内容替换为以下代码。\n\n        @model IEnumerable<ProductsWeb.Models.Product>\n\n        @{\n            ViewBag.Title = \"Index\";\n        }\n\n        <h2>Prod Inventory</h2>\n\n        <table>\n            <tr>\n                <th>\n                    @Html.DisplayNameFor(model => model.Name)\n                </th>\n                <th></th>\n                <th>\n                    @Html.DisplayNameFor(model => model.Quantity)\n                </th>\n            </tr>\n\n        @foreach (var item in Model) {\n            <tr>\n                <td>\n                    @Html.DisplayFor(modelItem => item.Name)\n                </td>\n                <td>\n                    @Html.DisplayFor(modelItem => item.Quantity)\n                </td>\n            </tr>\n        }\n\n        </table>\n\n\n9.  若要验证你到目前为止的工作的准确性，可以按 **F6** 或 **Ctrl+Shift+B** 来生成项目。\n\n\n### 在本地运行应用程序\n\n运行应用程序以验证其是否正常运行。\n\n1.  确保“ProductsPortal”是活动项目。在“解决方案资源管理器”中，右键单击项目名称并选择“设置为启动项目”。\n2.  在 **Visual Studio** 中，按 F5。\n3.  你的应用程序应在浏览器中显示为正在运行。\n\n    ![][21]\n\n## 准备好将应用程序部署到 Azure\n\n你可以将应用程序部署到 Azure 云服务或 Azure Web 应用。若要详细了解 Web 应用和云服务之间的差异，请参阅 [Azure 执行模型][executionmodels]。若要了解如何将应用程序部署到 Azure Web 应用，请参阅[将 ASP.NET Web 应用程序部署到 Azure Web 应用](/develop/net/)。本部分包含有关如何将应用程序部署到 Azure 云服务的详细步骤。\n\n若要将应用程序部署到云服务，需要在解决方案中添加一个云服务项目部署项目。该部署项目包含在云中正常运行应用程序所需的配置信息。\n\n1.  若要使应用程序能够部署到云中，请右键单击“解决方案资源管理器”中的 **ProductsPortal** 项目，再单击“转换”，然后单击“转换为 Azure 云服务项目”。\n\n    ![][22]\n\n2.  若要测试应用程序，请按 F5。\n\n3.  这将启动 Azure 计算模拟器。此计算模拟器使用本地计算机来模拟在 Azure 中运行的应用程序。可以通过查看系统托盘来确认此模拟器已启动。\n\n    ![][23]\n\n4.  浏览器仍将显示你的应用程序正在本地运行，并且其外观和功能与你之前将其作为常规 ASP.NET MVC 4 应用程序运行时的外观和功能相同。\n\n## 将各个部分组合在一起\n\n下一步是将本地产品服务器与 ASP.NET MVC 应用程序挂钩。\n\n1.  如果它尚未打开，则在 Visual Studio 中重新打开你在\"Creating an ASP.NET MVC Application\"部分中创建的 **ProductsPortal** 项目。\n\n2.  采用与“创建本地服务器”部分类似的步骤，将 NuGet 包添加到项目“引用”中。在解决方案资源管理器中，右键单击“引用”，然后单击“管理 NuGet 包”。\n\n3.  搜索“服务总线”并选择“Azure 服务总线”项。然后，完成安装过程并关闭此对话框。\n\n4.  在解决方案资源管理器中，右键单击“ProductsPortal”项目，然后单击“添加”，再单击“现有项”。\n\n5.  从 **ProductsServer** 控制台项目导航到 **ProductsContract.cs** 文件。单击以突出显示 ProductsContract.cs。单击“添加”旁边的向下箭头，然后单击“添加为链接”。\n\n    ![][24]\n\n6.  现在，在 Visual Studio 编辑器中打开 **HomeController.cs** 文件，并将命名空间定义替换为以下代码。确保将 *yourServiceNamespace* 替换为你的服务命名空间的名称，并将 *yourKey* 替换为你的 SAS 密钥。这将使客户端能够调用本地服务，并返回调用的结果。\n\n            namespace ProductsWeb.Controllers\n            {\n                using System.Linq;\n                using System.ServiceModel;\n                using System.Web.Mvc;\n                using Microsoft.ServiceBus;\n                using Models;\n                using ProductsServer;\n\n                public class HomeController : Controller\n                {\n                    // Declare the channel factory.\n                    static ChannelFactory<IProductsChannel> channelFactory;\n\n                    static HomeController()\n                    {\n                        // Create shared secret token credentials for authentication.\n                        channelFactory = new ChannelFactory<IProductsChannel>(new NetTcpRelayBinding(),\n                            \"sb://yourServiceNamespace.servicebus.windows.net/products\");\n                        channelFactory.Endpoint.Behaviors.Add(new TransportClientEndpointBehavior {\n                            TokenProvider = TokenProvider.CreateSharedAccessSignatureTokenProvider(\n                                \"RootManageSharedAccessKey\", \"yourKey\") });\n                    }\n\n                    public ActionResult Index()\n                    {\n                        using (IProductsChannel channel = channelFactory.CreateChannel())\n                        {\n                            // Return a view of the products inventory.\n                            return this.View(from prod in channel.GetProducts()\n                                             select\n                                                 new Product { Id = prod.Id, Name = prod.Name,\n                                                     Quantity = prod.Quantity });\n                        }\n                    }\n                }\n            }\n7.  在解决方案资源管理器中，右键单击“ProductsPortal”解决方案，单击“添加”，然后单击“现有项目”。\n\n8.  导航到 **ProductsServer** 项目，然后双击“ProductsServer.csproj”解决方案文件以将其添加。\n\n9.  在解决方案资源管理器中，右键单击“ProductsPortal”解决方案并单击“属性”。\n\n10. 在左侧，单击“启动项目”。在右侧，单击“多个启动项目”。确保 **ProductsServer**、**ProductsPortal.Azure** 和 **ProductsPortal** 按这样的顺序显示，并且将“启动”设置为针对 **ProductsServer** 和 **ProductsPortal.Azure** 的操作，将“无”设置为针对 **ProductsPortal** 的操作。\n\n      ![][25]\n\n11. 仍然在“属性”对话框中，单击左侧的“ProjectDependencies”。\n\n12. 在“项目”列表中，单击“ProductsServer”。确保未选中“ProductsPortal”，但选中“ProductsPortal.Azure”。然后单击“确定”：\n\n    ![][26]\n\n## 运行应用程序\n\n1.  从 Visual Studio 的“文件”菜单中，单击“全部保存”。\n\n2.  按 F5 生成并运行应用程序。应先启动本地服务器（**ProductsServer** 控制台应用程序），再在浏览器窗口中启动 **ProductsWeb** 应用程序，如以下屏幕截图中所示。这次，你将看到产品库存列出了从产品服务本地系统中检索到的数据。\n\n    ![][1]\n\n## 将你的应用程序部署到 Azure\n\n1.  在解决方案资源管理器中，右键单击“ProductsPortal”项目，然后单击“发布到 Azure”。\n\n2.  你可能必须登录才能查看你的所有订阅。\n\n    单击“登录以查看更多订阅”：\n\n    ![][27]\n\n3.  使用你的 Microsoft 帐户登录\n\n4.  单击**“下一步”**。如果你的订阅尚未包含任何托管服务，则系统将要求你创建一个托管服务。托管服务在 Azure 订阅中充当应用程序的容器。输入标识应用程序的名称，然后选择应为其优化应用程序的区域。（用户从此区域访问应用程序所花的加载时间会更少。）\n\n5.  选择要将应用程序发布到其中的托管服务。为其余设置保留以下所示的默认值。单击**“下一步”**。\n\n    ![][33]\n\n6. 在最后一页上，单击“发布”以开始部署过程。\n\n    ![][34]\n    \n     此过程需要大约 5-7 分钟时间。由于这是你首次发布，因此 Azure 会依次执行以下操作以便公开应用程序：预配一台虚拟机 (VM)，执行安全强化，在 VM 上创建一个 Web 角色以承载应用程序，将代码部署到该 Web 角色以及配置负载平衡器和网络。\n\n7. 当发布正在进行时，你可以在“Azure 活动日志”窗口中监视活动，该窗口通常位于 Visual Studio 或 Visual Web Developer 的底部。\n\n    ![][35]\n\n8. 部署完成后，你可以通过单击监视窗口中的“ Web 应用 URL”链接来查看 Web 应用。\n\n    ![][36]\n\n    你的 Web 应用取决于本地服务器，因此你必须在本地运行 **ProductsServer** 应用程序， Web 应用才能正常运行。在云 Web 应用上执行请求时，你将看到请求传入本地控制台应用程序，如以下屏幕快照中显示的“GetProducts called”输出所示。\n\n    ![][37]\n\n若要详细了解 Web 应用和云服务之间的差异，请参阅 [Azure 执行模型][executionmodels]。\n\n## 停止并删除应用程序\n\n在部署应用程序后，你可能希望禁用它，以便能在 750 小时/月（31 天/月）的免费服务器时间内生成和部署其他应用程序。\n\nAzure 将按使用的服务器小时数对 Web 角色实例计费。你的应用程序部署之后就会开始使用服务器时间，即使相关实例并未运行且处于停止状态也是如此。免费帐户包含 750 小时/月（31 天/月）的专用虚拟机服务器时间（用于承载这些 Web 角色实例）。\n\n以下步骤演示了如何停止和删除应用程序。\n\n1.  登录到 [Azure 经典门户][]，单击“云服务”，然后单击服务的名称。\n\n2.  单击“仪表板”选项卡，然后单击“停止”以暂时挂起应用程序。单击“启动”即可重新启动它。单击“删除”即可从 Azure 中完全删除应用程序，但无法将其还原。\n\n    ![][43]\n\n## 后续步骤  \n\n若要了解有关 Service Bus 的详细信息，请参阅以下资源：\n\n* [Azure 服务总线][sbwacom]  \n* [如何使用 Service Bus 队列][sbwacomqhowto]  \n\n\n  [0]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hybrid.png\n  [1]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/App2.png\n  [获取工具和 SDK]: /develop/net/\n  [NuGet]: http://nuget.org\n  [2]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-3.png\n  [3]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-42-webpi.png\n\n\n  [Azure 经典门户]: http://manage.windowsazure.cn\n  [5]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/sb-queues-03.png\n  [6]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/sb-queues-04.png\n\n\n\n  [使用 NuGet 服务总线包]: https://msdn.microsoft.com/zh-cn/library/azure/dn741354.aspx\n  [10]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-1.png\n  [11]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-con-1.png\n  [12]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-con-3.png\n  [13]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-multi-tier-13.png\n  [14]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-con-4.png\n  [15]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-2.png\n  [16]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-4.png\n  [17]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-7.jpg\n  [18]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-10.jpg\n\n  [20]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-11.png\n  [21]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/App1.png\n  [22]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-21.png\n  [23]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-22.png\n  [24]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-12.png\n  [25]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-13.png\n  [26]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-14.png\n  [27]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-33.png\n\n\n  [30]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-36.png\n  [31]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-37.png\n  [32]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-38.png\n  [33]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-39.png\n  [34]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-40.png\n  [35]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-41.png\n  [36]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/App2.png\n  [37]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-service1.png\n  [38]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-multi-tier-27.png\n  [39]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/sb-queues-09.png\n  [40]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/sb-queues-06.png\n  [41]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-multi-tier-40.png\n  [42]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-41.png\n  [43]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/getting-started-hybrid-43.png\n  [45]: ./media/service-bus-dotnet-hybrid-app-using-service-bus-relay/hy-web-45.png\n\n  [sbwacom]: /documentation/services/service-bus/\n  [sbwacomqhowto]: /documentation/articles/service-bus-dotnet-how-to-use-queues\n  [executionmodels]: /documentation/articles/fundamentals-application-models\n\n<!---HONumber=Mooncake_0104_2016-->"
}