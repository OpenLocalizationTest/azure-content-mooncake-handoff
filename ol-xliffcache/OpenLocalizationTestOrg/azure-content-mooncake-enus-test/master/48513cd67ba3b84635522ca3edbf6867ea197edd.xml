{
  "nodes": [
    {
      "content": "用于连接到 SQL 数据库的 C# 重试逻辑 | Azure",
      "pos": [
        28,
        58
      ]
    },
    {
      "content": "C# 示例包含用于与 Azure SQL 数据库可靠交互的重试逻辑。",
      "pos": [
        78,
        112
      ]
    },
    {
      "content": "代码示例：用于连接到 SQL 数据库的 C# 重试逻辑",
      "pos": [
        336,
        363
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        369,
        385
      ]
    },
    {
      "content": "PHP",
      "pos": [
        389,
        392
      ]
    },
    {
      "content": "C",
      "pos": [
        461,
        462
      ]
    },
    {
      "content": "C# EntLib6",
      "pos": [
        535,
        545
      ]
    },
    {
      "pos": [
        624,
        703
      ],
      "content": "本主题提供一个用于演示自定义重试逻辑的 C# 代码示例。重试逻辑旨在正常处理暂时错误或 <bpt id=\"p1\">*</bpt>暂时性故障<ept id=\"p1\">*</ept>，在程序等待几秒并重试后，这种错误或故障往往会自行消失。"
    },
    {
      "content": "用于连接本地 Microsoft SQL Server 的 ADO.NET 类也可以连接到 Azure SQL 数据库。但是，ADO.NET 类本身无法提供生产环境中所需的稳定性和可靠性。客户端程序可能会遇到暂时性故障，在此情况下，客户端程序应该能够自行从故障中静默正常恢复。",
      "pos": [
        706,
        844
      ]
    },
    {
      "content": "暂时性故障的几个示例包括：",
      "pos": [
        847,
        860
      ]
    },
    {
      "content": "通过 Internet 建立的连接受到短暂的网络中断，然后可以重建连接。",
      "pos": [
        865,
        901
      ]
    },
    {
      "content": "云计算涉及到负载平衡，可以短暂阻止连接或查询尝试。",
      "pos": [
        905,
        930
      ]
    },
    {
      "content": "识别暂时性错误",
      "pos": [
        936,
        943
      ]
    },
    {
      "content": "程序必须区分暂时性错误与持久性错误。如果程序发现拼错了目标数据库名称，“找不到此类数据库”错误将持续出现，并且每次当你重新运行程序时都会再次出现。",
      "pos": [
        946,
        1019
      ]
    },
    {
      "content": "以下网页提供了分类为暂时性故障的错误编列表：",
      "pos": [
        1022,
        1044
      ]
    },
    {
      "content": "SQL 数据库客户端程序的错误消息",
      "pos": [
        1050,
        1067
      ]
    },
    {
      "pos": [
        1157,
        1182
      ],
      "content": "请参阅顶部部分，了解<bpt id=\"p1\">*</bpt>暂时性错误和连接断开错误<ept id=\"p1\">*</ept>。"
    },
    {
      "content": "C# 代码示例",
      "pos": [
        1188,
        1195
      ]
    },
    {
      "content": "当前主题中的 C# 代码示例包含用于处理暂时性错误的自定义检测与重试逻辑。此示例假定已安装 .NET Framework 4.5.1 或更高版本。",
      "pos": [
        1198,
        1271
      ]
    },
    {
      "content": "代码示例遵循一些基本指导原则或者无论你使用哪种技术来与 Azure SQL 数据库交互都适用的建议。你可以在此处查看常规建议：",
      "pos": [
        1274,
        1337
      ]
    },
    {
      "content": "连接到 SQL 数据库：链接、最佳实践和设计准则",
      "pos": [
        1343,
        1367
      ]
    },
    {
      "content": "C# 代码示例包含一个名为 Program.cs 的文件。将其代码粘贴到下一节中。",
      "pos": [
        1441,
        1482
      ]
    },
    {
      "content": "捕获和编译代码示例",
      "pos": [
        1489,
        1498
      ]
    },
    {
      "content": "可以使用以下步骤编译该示例：",
      "pos": [
        1501,
        1515
      ]
    },
    {
      "pos": [
        1521,
        1645
      ],
      "content": "在<bpt id=\"p1\">[</bpt>免费的 Visual Studio Community 版本<ept id=\"p1\">](https://www.visualstudio.com/products/visual-studio-community-vs)</ept>中，基于 C# 控制台应用程序模板创建一个新项目。"
    },
    {
      "content": "“文件”&gt;“新建”&gt;“项目”&gt;“已安装”&gt;“模板”&gt; Visual C# &gt; Windows &gt;“经典桌面”&gt;“控制台应用程序”",
      "pos": [
        1649,
        1713
      ]
    },
    {
      "pos": [
        1717,
        1739
      ],
      "content": "将该项目命名为 <bpt id=\"p1\">**</bpt>RetryAdo2<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "打开“解决方案资源管理器”窗格。",
      "pos": [
        1744,
        1760
      ]
    },
    {
      "content": "查看项目的名称。",
      "pos": [
        1764,
        1772
      ]
    },
    {
      "content": "查看 Program.cs 文件的名称。",
      "pos": [
        1776,
        1796
      ]
    },
    {
      "content": "打开 Program.cs 文件。",
      "pos": [
        1801,
        1818
      ]
    },
    {
      "content": "将 Program.cs 文件的内容全部替换为下面的代码块中的代码。",
      "pos": [
        1823,
        1857
      ]
    },
    {
      "content": "单击菜单“生成”&gt;“生成解决方案”。",
      "pos": [
        1862,
        1880
      ]
    },
    {
      "content": "要粘贴的 C# 源代码",
      "pos": [
        1888,
        1899
      ]
    },
    {
      "pos": [
        1902,
        1931
      ],
      "content": "将此代码粘贴到你的 <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> 文件中。"
    },
    {
      "pos": [
        1934,
        2008
      ],
      "content": "然后，你必须编辑服务器名称、密码等字符串。你可以在名为 <bpt id=\"p1\">**</bpt>GetSqlConnectionStringBuilder<ept id=\"p1\">**</ept> 的方法中找到这些字符串。"
    },
    {
      "content": "运行该程序",
      "pos": [
        6534,
        6539
      ]
    },
    {
      "pos": [
        6542,
        6608
      ],
      "content": "<bpt id=\"p1\">**</bpt>RetryAdo2.exe<ept id=\"p1\">**</ept> 可执行文件未输入任何参数。若要在 Visual Studio 中运行 .exe，请执行以下操作:"
    },
    {
      "pos": [
        6614,
        6652
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> 方法中的 <bpt id=\"p2\">**</bpt>return;<ept id=\"p2\">**</ept> 语句上设置一个断点。"
    },
    {
      "content": "单击绿色启动箭头按钮。将显示控制台窗口。",
      "pos": [
        6657,
        6677
      ]
    },
    {
      "pos": [
        6682,
        6713
      ],
      "content": "当调试器在 <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> 结尾处停止时，切换到控制台窗口。"
    },
    {
      "content": "将看到可能等同于以下内容的三行：",
      "pos": [
        6718,
        6734
      ]
    },
    {
      "content": "测试重试逻辑",
      "pos": [
        6878,
        6884
      ]
    },
    {
      "content": "测试重试逻辑的一个简便方法是：",
      "pos": [
        6887,
        6902
      ]
    },
    {
      "pos": [
        6908,
        6966
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>11001<ept id=\"p1\">**</ept> 临时添加到应视为暂时性错误的 <bpt id=\"p2\">**</bpt>SqlConnection.Number<ept id=\"p2\">**</ept> 值的集合中。"
    },
    {
      "content": "重新编译你的程序。",
      "pos": [
        6971,
        6980
      ]
    },
    {
      "content": "从网络中断开客户端计算机。",
      "pos": [
        6985,
        6998
      ]
    },
    {
      "content": "在调试器中运行你的程序，并在循环中设有断点。",
      "pos": [
        7003,
        7025
      ]
    },
    {
      "content": "第一个循环将失败，错误为 11001。",
      "pos": [
        7029,
        7048
      ]
    },
    {
      "content": "当该程序在第二个循环期间在断点处停留时，将计算机重新连接到网络。",
      "pos": [
        7053,
        7085
      ]
    },
    {
      "content": "继续运行你的程序。它在第二个循环期间运行成功。",
      "pos": [
        7090,
        7113
      ]
    },
    {
      "content": "另一种测试方法",
      "pos": [
        7120,
        7127
      ]
    },
    {
      "content": "另一种方法可以是向你的程序添加逻辑以识别命令行参数值“test”。在响应参数时，该程序会：",
      "pos": [
        7130,
        7175
      ]
    },
    {
      "content": "临时追加无用字母以使 SQL 数据库服务器名称拼写错误。",
      "pos": [
        7181,
        7209
      ]
    },
    {
      "pos": [
        7214,
        7239
      ],
      "content": "临时将 <bpt id=\"p1\">**</bpt>40615<ept id=\"p1\">**</ept> 添加到暂时性错误列表。"
    },
    {
      "content": "在其第二个循环开始时（意味着这是其第一个重试循环），该程序会：",
      "pos": [
        7244,
        7275
      ]
    },
    {
      "content": "撤消服务器拼写错误。",
      "pos": [
        7279,
        7289
      ]
    },
    {
      "content": "从暂时性列表中删除 40615。",
      "pos": [
        7293,
        7309
      ]
    },
    {
      "content": "使用“test”参数运行该程序，并验证它是否第一次失败，但然后在其第二个循环成功。",
      "pos": [
        7312,
        7353
      ]
    },
    {
      "content": "相关链接",
      "pos": [
        7359,
        7363
      ]
    },
    {
      "content": "SQL 数据库的客户端快速入门代码示例",
      "pos": [
        7369,
        7388
      ]
    },
    {
      "content": "试用 SQL 数据库：使用 C# 通过适用于 .NET 的 SQL 数据库库创建 SQL 数据库",
      "pos": [
        7472,
        7520
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"用于连接到 SQL 数据库的 C# 重试逻辑 | Azure\" \n    description=\"C# 示例包含用于与 Azure SQL 数据库可靠交互的重试逻辑。\" \n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"MightyPen\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n\n<tags \n    ms.service=\"sql-database\" \n    ms.date=\"12/17/2015\" \n    wacn.date=\"01/15/2016\"/>\n\n\n# 代码示例：用于连接到 SQL 数据库的 C# 重试逻辑\n\n\n\n> [AZURE.SELECTOR]\n- [PHP](/documentation/articles/sql-database-develop-php-retry-windows)\n- [C#](/documentation/articles/sql-database-develop-csharp-retry-windows)\n- [C# EntLib6](/documentation/articles/sql-database-develop-entlib-csharp-retry-windows)\n\n\n\n本主题提供一个用于演示自定义重试逻辑的 C# 代码示例。重试逻辑旨在正常处理暂时错误或 *暂时性故障*，在程序等待几秒并重试后，这种错误或故障往往会自行消失。\n\n\n用于连接本地 Microsoft SQL Server 的 ADO.NET 类也可以连接到 Azure SQL 数据库。但是，ADO.NET 类本身无法提供生产环境中所需的稳定性和可靠性。客户端程序可能会遇到暂时性故障，在此情况下，客户端程序应该能够自行从故障中静默正常恢复。\n\n\n暂时性故障的几个示例包括：\n\n\n- 通过 Internet 建立的连接受到短暂的网络中断，然后可以重建连接。\n\n- 云计算涉及到负载平衡，可以短暂阻止连接或查询尝试。\n\n\n## 识别暂时性错误\n\n\n程序必须区分暂时性错误与持久性错误。如果程序发现拼错了目标数据库名称，“找不到此类数据库”错误将持续出现，并且每次当你重新运行程序时都会再次出现。\n\n\n以下网页提供了分类为暂时性故障的错误编列表：\n\n\n- [SQL 数据库客户端程序的错误消息](/documentation/articles/sql-database-develop-error-messages/#bkmk_connection_errors)\n - 请参阅顶部部分，了解*暂时性错误和连接断开错误*。\n\n\n## C# 代码示例\n\n\n当前主题中的 C# 代码示例包含用于处理暂时性错误的自定义检测与重试逻辑。此示例假定已安装 .NET Framework 4.5.1 或更高版本。\n\n\n代码示例遵循一些基本指导原则或者无论你使用哪种技术来与 Azure SQL 数据库交互都适用的建议。你可以在此处查看常规建议：\n\n\n- [连接到 SQL 数据库：链接、最佳实践和设计准则](/documentation/articles/sql-database-connect-central-recommendations)\n\n\nC# 代码示例包含一个名为 Program.cs 的文件。将其代码粘贴到下一节中。\n\n\n### 捕获和编译代码示例\n\n\n可以使用以下步骤编译该示例：\n\n\n1. 在[免费的 Visual Studio Community 版本](https://www.visualstudio.com/products/visual-studio-community-vs)中，基于 C# 控制台应用程序模板创建一个新项目。\n - “文件”>“新建”>“项目”>“已安装”>“模板”> Visual C# > Windows >“经典桌面”>“控制台应用程序”\n - 将该项目命名为 **RetryAdo2**。\n\n2. 打开“解决方案资源管理器”窗格。\n - 查看项目的名称。\n - 查看 Program.cs 文件的名称。\n\n3. 打开 Program.cs 文件。\n\n4. 将 Program.cs 文件的内容全部替换为下面的代码块中的代码。\n\n5. 单击菜单“生成”>“生成解决方案”。\n\n\n#### 要粘贴的 C# 源代码\n\n\n将此代码粘贴到你的 **Program.cs** 文件中。\n\n\n然后，你必须编辑服务器名称、密码等字符串。你可以在名为 **GetSqlConnectionStringBuilder** 的方法中找到这些字符串。\n\n\n    \n    using System;   // C#\n    using G = System.Collections.Generic;\n    using D = System.Data;\n    using C = System.Data.SqlClient;\n    using X = System.Text;\n    using H = System.Threading;\n    \n    namespace RetryAdo2\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                Program program = new Program();\n                bool returnBool;\n    \n                returnBool = program.Run(args);\n                if (returnBool == false)\n                {\n                    Console.WriteLine(\"Something failed.  :-( \");\n                }\n                return;\n            }\n    \n            bool Run(string[] _args)\n            {\n                C.SqlConnectionStringBuilder sqlConnectionSB;\n                C.SqlConnection sqlConnection;\n                D.IDbCommand dbCommand;\n                D.IDataReader dataReader;\n                X.StringBuilder sBuilder = new X.StringBuilder(256);\n                int retryIntervalSeconds = 10;\n                bool returnBool = false;\n    \n                for (int tries = 1; tries <= 5; tries++)\n                {\n                    try\n                    {\n                        if (tries > 1)\n                        {\n                            H.Thread.Sleep(1000 * retryIntervalSeconds);\n                            retryIntervalSeconds = Convert.ToInt32(retryIntervalSeconds * 1.5);\n                        }\n                        this.GetSqlConnectionStringBuilder(out sqlConnectionSB);\n    \n                        sqlConnection = new C.SqlConnection(sqlConnectionSB.ToString());\n    \n                        dbCommand = sqlConnection.CreateCommand();\n                        dbCommand.CommandText = @\"SELECT TOP 3 ob.name, CAST(ob.object_id as nvarchar(32)) as [object_id] FROM sys.objects as ob WHERE ob.type='IT' ORDER BY ob.name;\";\n    \n                        sqlConnection.Open();\n                        dataReader = dbCommand.ExecuteReader();\n    \n                        while (dataReader.Read())\n                        {\n                            sBuilder.Length = 0;\n                            sBuilder.Append(dataReader.GetString(0));\n                            sBuilder.Append(\"\\t\");\n                            sBuilder.Append(dataReader.GetString(1));\n    \n                            Console.WriteLine(sBuilder.ToString());\n                        }\n                        returnBool = true;\n                        break;\n                    }\n    \n                    catch (C.SqlException sqlExc)\n                    {\n                        if (this.m_listTransientErrorNumbers.Contains(sqlExc.Number) == true)\n                        { continue; }\n                        else\n                        { throw sqlExc; }\n                    }\n                }\n                return returnBool;\n            }\n    \n            void GetSqlConnectionStringBuilder(out C.SqlConnectionStringBuilder _sqlConnectionSB)\n            {\n                // Prepare the connection string to Azure SQL Database.\n                _sqlConnectionSB = new C.SqlConnectionStringBuilder();\n    \n                // Change these values to your values.\n                _sqlConnectionSB[\"Server\"] = \"tcp:myazuresqldbserver.database.chinacloudapi.cn,1433\";\n                _sqlConnectionSB[\"User ID\"] = \"MyLogin\";  // \"@yourservername\"  as suffix sometimes.\n                _sqlConnectionSB[\"Password\"] = \"MyPassword\";\n                _sqlConnectionSB[\"Database\"] = \"MyDatabase\";\n    \n                // Adjust these values if you like. (.NET 4.5.1 or later.)\n                _sqlConnectionSB[\"ConnectRetryCount\"] = 3;\n                _sqlConnectionSB[\"ConnectRetryInterval\"] = 10;  // Seconds.\n    \n                // Leave these values as they are.\n                _sqlConnectionSB[\"Trusted_Connection\"] = false;\n                _sqlConnectionSB[\"Integrated Security\"] = false;\n                _sqlConnectionSB[\"Encrypt\"] = true;\n                _sqlConnectionSB[\"Connection Timeout\"] = 30;\n            }\n    \n            Program()   // Constructor.\n            {\n                int[] arrayOfTransientErrorNumbers =\n                    { 4060, 40197, 40501, 40613, 49918, 49919, 49920\n                        //,11001   // 11001 for testing, pretend network error is transient.\n                    };\n                m_listTransientErrorNumbers = new G.List<int>(arrayOfTransientErrorNumbers);\n            }\n    \n            private G.List<int> m_listTransientErrorNumbers;\n        }\n    }\n\n\n\n### 运行该程序\n\n\n**RetryAdo2.exe** 可执行文件未输入任何参数。若要在 Visual Studio 中运行 .exe，请执行以下操作:\n\n\n1. 在 **Main** 方法中的 **return;** 语句上设置一个断点。\n\n2. 单击绿色启动箭头按钮。将显示控制台窗口。\n\n3. 当调试器在 **Main** 结尾处停止时，切换到控制台窗口。\n\n4. 将看到可能等同于以下内容的三行：\n\n\n```\ndatabase_firewall_rules_table   245575913\nfilestream_tombstone_2073058421 2073058421\nfiletable_updates_2105058535    2105058535\n```\n\n\n## 测试重试逻辑\n\n\n测试重试逻辑的一个简便方法是：\n\n\n1. 将 **11001** 临时添加到应视为暂时性错误的 **SqlConnection.Number** 值的集合中。\n\n2. 重新编译你的程序。\n\n3. 从网络中断开客户端计算机。\n\n4. 在调试器中运行你的程序，并在循环中设有断点。\n - 第一个循环将失败，错误为 11001。\n\n5. 当该程序在第二个循环期间在断点处停留时，将计算机重新连接到网络。\n\n6. 继续运行你的程序。它在第二个循环期间运行成功。\n\n\n### 另一种测试方法\n\n\n另一种方法可以是向你的程序添加逻辑以识别命令行参数值“test”。在响应参数时，该程序会：\n\n\n1. 临时追加无用字母以使 SQL 数据库服务器名称拼写错误。\n\n2. 临时将 **40615** 添加到暂时性错误列表。\n\n3. 在其第二个循环开始时（意味着这是其第一个重试循环），该程序会：\n - 撤消服务器拼写错误。\n - 从暂时性列表中删除 40615。\n\n\n使用“test”参数运行该程序，并验证它是否第一次失败，但然后在其第二个循环成功。\n\n\n## 相关链接\n\n\n- [SQL 数据库的客户端快速入门代码示例](/documentation/articles/sql-database-develop-quick-start-client-code-samples)\n\n- [试用 SQL 数据库：使用 C# 通过适用于 .NET 的 SQL 数据库库创建 SQL 数据库](/documentation/articles/sql-database-get-started-csharp)\n\n<!---HONumber=Mooncake_0104_2016-->\n"
}