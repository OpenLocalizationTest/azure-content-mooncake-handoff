{
  "nodes": [
    {
      "content": "如何使用 CoreOS | Azure",
      "pos": [
        27,
        46
      ]
    },
    {
      "content": "介绍 CoreOS、如何在 Azure 上使用经典部署模型创建 CoreOS 虚拟机群集及其基本用法。",
      "pos": [
        65,
        116
      ]
    },
    {
      "content": "如何在 Azure 上使用 CoreOS",
      "pos": [
        377,
        397
      ]
    },
    {
      "pos": [
        399,
        605
      ],
      "content": "本主题介绍 <bpt id=\"p1\">[</bpt><ept id=\"p1\">CoreOS]</ept> 并演示如何在 Azure 上创建三个 CoreOS 虚拟机构成的群集，以帮助你快速了解此操作系统。它使用非常基本的 CoreOS 部署元素和来自 <bpt id=\"p2\">[</bpt><ept id=\"p2\">CoreOS 与 Azure]</ept>、<bpt id=\"p3\">[</bpt><ept id=\"p3\">Tim Park 的 CoreOS 教程]</ept>和 <bpt id=\"p4\">[</bpt><ept id=\"p4\">Patrick Chanezon 的 CoreOS 教程]</ept>中的示例，演示了解 CoreOS 部署的基本结构及成功运行三个虚拟机构成的群集的绝对最低要求。"
    },
    {
      "pos": [
        607,
        693
      ],
      "content": "[AZURE.INCLUDE <bpt id=\"p1\">[</bpt>了解部署模型<ept id=\"p1\">](../includes/learn-about-deployment-models-classic-include.md)</ept>]"
    },
    {
      "content": "CoreOS、群集和 Linux 容器",
      "pos": [
        699,
        718
      ]
    },
    {
      "pos": [
        720,
        810
      ],
      "content": "CoreOS 是 Linux 的轻量级版本，旨在支持快速创建使用 Linux 容器作为唯一打包机制的可能的大型 VM 群集（包括 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Docker]</ept> 容器）。CoreOS 旨在支持："
    },
    {
      "content": "高度自动化",
      "pos": [
        814,
        819
      ]
    },
    {
      "content": "更轻松且更一致的应用程序部署",
      "pos": [
        822,
        836
      ]
    },
    {
      "content": "应用程序级别和系统级别的可伸缩性",
      "pos": [
        839,
        855
      ]
    },
    {
      "content": "概括而言，支持这些目标的 CoreOS 功能包括：",
      "pos": [
        857,
        882
      ]
    },
    {
      "content": "单一打包系统：CoreOS 仅运行可在 Linux 容器中运行，以取得部署速度、一致性和方便性的 Linux 容器映像",
      "pos": [
        887,
        946
      ]
    },
    {
      "content": "系统会自动执行操作系统更新，这样一来，操作系统会作为单个实体进行更新，并且可以轻松回退到已知状态",
      "pos": [
        950,
        998
      ]
    },
    {
      "pos": [
        1002,
        1112
      ],
      "content": "内置用于动态 VM 和群集通信与管理的 <bpt id=\"p1\">[</bpt>etcd<ept id=\"p1\">](https://github.com/coreos/etcd)</ept> 和 <bpt id=\"p2\">[</bpt>fleet<ept id=\"p2\">](https://github.com/coreos/fleet)</ept> 守护程序（服务）"
    },
    {
      "pos": [
        1114,
        1168
      ],
      "content": "这是对 CoreOS 及其功能的概要说明。有关 CoreOS 更完整的信息，请参阅 <bpt id=\"p1\">[</bpt><ept id=\"p1\">CoreOS 概述]</ept>。"
    },
    {
      "content": "安全注意事项",
      "pos": [
        1173,
        1179
      ]
    },
    {
      "content": "目前，CoreOS 假定可以通过 SSH 进入群集的人员有权对群集进行管理。因此，在不进行修改的情况下，CoreOS 群集在测试和开发环境中的表现也相当出色，但你应该在所有生产环境中应用更多安全措施。",
      "pos": [
        1180,
        1280
      ]
    },
    {
      "content": "如何在 Azure 上使用 CoreOS",
      "pos": [
        1285,
        1305
      ]
    },
    {
      "pos": [
        1307,
        1381
      ],
      "content": "本部分介绍如何使用 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 命令行界面 (Azure CLI)]</ept>，创建拥有三个 CoreOS 虚拟机的 Azure 云服务。基本步骤如下所示："
    },
    {
      "content": "创建 SSH 证书和密钥，以保护与 CoreOS 虚拟机的通信安全",
      "pos": [
        1386,
        1419
      ]
    },
    {
      "content": "获取群集的 etcd id 以互相通信",
      "pos": [
        1423,
        1442
      ]
    },
    {
      "pos": [
        1446,
        1475
      ],
      "content": "创建 <bpt id=\"p1\">[</bpt><ept id=\"p1\">YAML]</ept> 格式的 cloud-config 文件"
    },
    {
      "content": "使用 Azure CLI 创建新的 Azure 云服务和三个 CoreOS VM",
      "pos": [
        1479,
        1519
      ]
    },
    {
      "content": "在 Azure VM 中测试你的 CoreOS 群集",
      "pos": [
        1523,
        1549
      ]
    },
    {
      "content": "在 localhost 中测试你的 CoreOS 群集",
      "pos": [
        1553,
        1580
      ]
    },
    {
      "content": "创建用于通信的公钥和私钥",
      "pos": [
        1586,
        1598
      ]
    },
    {
      "pos": [
        1600,
        1768
      ],
      "content": "按照<bpt id=\"p1\">[</bpt>如何在 Azure 上通过 Linux 使用 SSH<ept id=\"p1\">](/documentation/articles/virtual-machines-linux-use-ssh-key)</ept> 中的说明，创建用于 SSH 的公钥和私钥。（可在下面的说明中找到基本步骤。） 你将使用这些密钥连接到群集中的 VM，以验证它们是否可以正常工作并互相通信。"
    },
    {
      "pos": [
        1772,
        2002
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本主题假定你没有这些密钥，为了让你明了操作过程，将要求你创建 <ph id=\"ph2\">`myPrivateKey.pem`</ph> 和 <ph id=\"ph3\">`myCert.pem`</ph> 文件。如果已将公钥和私钥对保存到 <ph id=\"ph4\">`~/.ssh/id_rsa`</ph>，只需键入 <ph id=\"ph5\">`openssl req -x509 -key ~/.ssh/id_rsa -nodes -days 365 -newkey rsa:2048 -out myCert.pem`</ph> 即可获取需要上载到 Azure 的 .pem 文件。"
    },
    {
      "pos": [
        2007,
        2133
      ],
      "content": "在工作目录中，键入 <ph id=\"ph1\">`openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout myPrivateKey.key -out myCert.pem`</ph> 以创建私钥和与之关联的 X.509 证书。"
    },
    {
      "pos": [
        2138,
        2193
      ],
      "content": "若要判断私钥的所有者是否可以读取或写入文件，请键入 <ph id=\"ph1\">`chmod 600 myPrivateKey.key`</ph>。"
    },
    {
      "pos": [
        2195,
        2247
      ],
      "content": "你的工作目录中现在应同时包含 <ph id=\"ph1\">`myPrivateKey.key`</ph> 和 <ph id=\"ph2\">`myCert.pem`</ph> 文件。"
    },
    {
      "content": "获取群集的 etcd id",
      "pos": [
        2254,
        2267
      ]
    },
    {
      "pos": [
        2269,
        2345
      ],
      "content": "CoreOS 的 <ph id=\"ph1\">`etcd`</ph> 守护程序需要发现 ID，以自动查询群集中的所有节点。若要检索你的发现 ID 并将其保存到 <ph id=\"ph2\">`etcdid`</ph> 文件，请键入"
    },
    {
      "content": "创建 cloud-config 文件",
      "pos": [
        2425,
        2443
      ]
    },
    {
      "pos": [
        2445,
        2597
      ],
      "content": "在相同的工作目录中，使用你最喜欢的文本编辑器创建包含以下文本的文件，并将其另存为 <ph id=\"ph1\">`cloud-config.yaml`</ph>。（可以使用你想要的任何文件名将其保存，但在下一步创建 VM 时，必须在 <bpt id=\"p1\">**</bpt>azure vm create<ept id=\"p1\">**</ept> 命令的 <bpt id=\"p2\">**</bpt>--custom-data<ept id=\"p2\">**</ept> 选项中引用此文件的名称。）"
    },
    {
      "pos": [
        2601,
        2754
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>请记得键入 <ph id=\"ph2\">`cat etcdid`</ph>，以从之前创建的 <ph id=\"ph3\">`etcdid`</ph> 文件中检索 etcd 发现 id，并使用 <ph id=\"ph4\">`etcdid`</ph> 文件生成的数字替换以下 <ph id=\"ph5\">`cloud-config.yaml`</ph> 文件中的 <ph id=\"ph6\">`&lt;token&gt;`</ph>。如果最后无法验证群集，这可能会是你忽略了的其中一个步骤！"
    },
    {
      "pos": [
        3233,
        3367
      ],
      "content": "（有关 cloud-config 文件更完整的信息，请参阅 CoreOS 文档中的<bpt id=\"p1\">[</bpt>使用 Cloud-Config<ept id=\"p1\">](https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/)</ept>。）"
    },
    {
      "content": "使用 Azure CLI 创建新的 CoreOS VM",
      "pos": [
        3373,
        3400
      ]
    },
    {
      "pos": [
        3521,
        3608
      ],
      "content": "如果尚未安装 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 命令行界面 (Azure CLI)]</ept>，请先执行安装并使用工作或学校 ID 登录，或下载 .publishsettings 文件并将其导入你的帐户。"
    },
    {
      "pos": [
        3612,
        3696
      ],
      "content": "寻找 CoreOS 映像。若要查找随时可用的映像，请键入 <ph id=\"ph1\">`azure vm image list | grep CoreOS`</ph>，然后就会看到类似于以下内容的结果列表："
    },
    {
      "content": "数据: 2b171e93f07c4903bcad35bda10acf22\\_\\_CoreOS-Stable-522.6.0 Public Linux",
      "pos": [
        3702,
        3776
      ]
    },
    {
      "pos": [
        3781,
        3952
      ],
      "content": "键入 <ph id=\"ph1\">`azure service create &lt;cloud-service-name&gt;`</ph>（其中的 &lt;<bpt id=\"p1\">*</bpt>cloud-service-name<ept id=\"p1\">*</ept>&gt; 是你的 CoreOS 云服务的名称）可创建用于基本群集的云服务。此示例使用 <bpt id=\"p2\">**</bpt><ph id=\"ph2\">`coreos-cluster`</ph><ept id=\"p2\">**</ept> 作为名称；你将需要重用所选名称来创建云服务内部的 CoreOS VM 实例。"
    },
    {
      "pos": [
        3957,
        4107
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>azure vm create<ept id=\"p1\">**</ept> 命令可连接到你的云服务，并可在其中创建新的 CoreOS VM。你将在 <bpt id=\"p2\">**</bpt>--ssh-cert<ept id=\"p2\">**</ept> 选项中传递 X.509 证书的位置。通过键入以下命令创建你的第一个 VM 映像，请记得使用你创建的云服务名称替换 <bpt id=\"p3\">**</bpt>coreos-cluster<ept id=\"p3\">**</ept>："
    },
    {
      "pos": [
        4353,
        4434
      ],
      "content": "通过重复步骤 4 中的命令来创建第二个节点，使用 <bpt id=\"p1\">**</bpt>node-2<ept id=\"p1\">**</ept> 替换 <bpt id=\"p2\">**</bpt>--vm-name<ept id=\"p2\">**</ept> 值，并使用 2022 替换 <bpt id=\"p3\">**</bpt>--ssh<ept id=\"p3\">**</ept> 端口值。"
    },
    {
      "pos": [
        4439,
        4520
      ],
      "content": "通过重复步骤 4 中的命令来创建第三个节点，使用 <bpt id=\"p1\">**</bpt>node-3<ept id=\"p1\">**</ept> 替换 <bpt id=\"p2\">**</bpt>--vm-name<ept id=\"p2\">**</ept> 值，并使用 3022 替换 <bpt id=\"p3\">**</bpt>--ssh<ept id=\"p3\">**</ept> 端口值。"
    },
    {
      "content": "在 Azure VM 中测试你的 CoreOS 群集",
      "pos": [
        4526,
        4552
      ]
    },
    {
      "pos": [
        4554,
        4617
      ],
      "content": "若要测试你的群集，请确保你位于工作目录中，然后使用 <bpt id=\"p1\">**</bpt>ssh<ept id=\"p1\">**</ept> 连接到 <bpt id=\"p2\">**</bpt>node-1<ept id=\"p2\">**</ept>，并通过键入以下命令传递私钥："
    },
    {
      "pos": [
        4691,
        4763
      ],
      "content": "连接后，键入 <ph id=\"ph1\">`sudo fleetctl list-machines`</ph> 以查看群集是否已识别出群集中的所有 VM。你应会收到类似于下面的响应："
    },
    {
      "content": "在 localhost 中测试你的 CoreOS 群集",
      "pos": [
        4955,
        4982
      ]
    },
    {
      "pos": [
        4984,
        5143
      ],
      "content": "最后，让我们测试你本地 Linux 客户端中的 CoreOS 群集。你也许可以使用 <bpt id=\"p1\">**</bpt>npm<ept id=\"p1\">**</ept> 来安装 <bpt id=\"p2\">**</bpt>fleetctl<ept id=\"p2\">**</ept>；或者，你可能希望安装 <bpt id=\"p3\">**</bpt>fleet<ept id=\"p3\">**</ept> 并在本地客户端上自行构建 <bpt id=\"p4\">**</bpt>fleetctl<ept id=\"p4\">**</ept>。<bpt id=\"p5\">**</bpt>fleet<ept id=\"p5\">**</ept> 需要使用 <bpt id=\"p6\">**</bpt>golang<ept id=\"p6\">**</ept>，因此，你可能需要先安装后者，则需键入："
    },
    {
      "pos": [
        5176,
        5210
      ],
      "content": "然后从 github 克隆 <bpt id=\"p1\">**</bpt>fleet<ept id=\"p1\">**</ept> 存储库，方法是键入："
    },
    {
      "pos": [
        5261,
        5293
      ],
      "content": "生成 <bpt id=\"p1\">**</bpt>fleet<ept id=\"p1\">**</ept>，方法是转到 <ph id=\"ph1\">`fleet`</ph> 目录并键入"
    },
    {
      "pos": [
        5306,
        5363
      ],
      "content": "最后，添加 <bpt id=\"p1\">**</bpt>fleet<ept id=\"p1\">**</ept> 以便能够轻松使用（你可能需要也可能不需要 <bpt id=\"p2\">**</bpt>sudo<ept id=\"p2\">**</ept>，具体取决于你的配置）："
    },
    {
      "pos": [
        5399,
        5448
      ],
      "content": "确保 <bpt id=\"p1\">**</bpt>fleet<ept id=\"p1\">**</ept> 能够访问工作目录中的 <ph id=\"ph1\">`myPrivateKey.key`</ph>，方法是键入："
    },
    {
      "pos": [
        5482,
        5554
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果你已在使用 <ph id=\"ph2\">`~/.ssh/id_rsa`</ph> 密钥，则使用 <ph id=\"ph3\">`ssh-add ~/.ssh/id_rsa`</ph> 进行添加。"
    },
    {
      "pos": [
        5556,
        5621
      ],
      "content": "现在，你已准备好使用你在 <bpt id=\"p1\">**</bpt>node-1<ept id=\"p1\">**</ept> 中使用的相同 <bpt id=\"p2\">**</bpt>fleetctl<ept id=\"p2\">**</ept> 命令进行远程测试，但需要传递部分远程参数："
    },
    {
      "content": "结果应完全相同：",
      "pos": [
        5693,
        5701
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        5843,
        5847
      ]
    },
    {
      "pos": [
        5849,
        5975
      ],
      "content": "在 Azure 上，你现在应该拥有正常运行的三节点 CoreOS 群集。此后，你可以探索如何创建更复杂的群集、使用 Docker 和创建更有趣的应用程序。若要尝试操作几个快速示例，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">在 Azure 上的 CoreOS 上使用 Fleet 入门]</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何使用 CoreOS | Azure\"\n    description=\"介绍 CoreOS、如何在 Azure 上使用经典部署模型创建 CoreOS 虚拟机群集及其基本用法。\"\n    services=\"virtual-machines\"\n    documentationCenter=\"\"\n    authors=\"squillace\"\n    manager=\"timlt\"\n    editor=\"tysonn\"\n    tags=\"azure-service-management\"/>\n\n<tags\n    ms.service=\"virtual-machines\"\n    ms.date=\"10/21/2015\"\n    wacn.date=\"12/31/2015\"/>\n\n# 如何在 Azure 上使用 CoreOS\n\n本主题介绍 [CoreOS] 并演示如何在 Azure 上创建三个 CoreOS 虚拟机构成的群集，以帮助你快速了解此操作系统。它使用非常基本的 CoreOS 部署元素和来自 [CoreOS 与 Azure]、[Tim Park 的 CoreOS 教程]和 [Patrick Chanezon 的 CoreOS 教程]中的示例，演示了解 CoreOS 部署的基本结构及成功运行三个虚拟机构成的群集的绝对最低要求。\n\n[AZURE.INCLUDE [了解部署模型](../includes/learn-about-deployment-models-classic-include.md)]\n\n\n## CoreOS、群集和 Linux 容器\n\nCoreOS 是 Linux 的轻量级版本，旨在支持快速创建使用 Linux 容器作为唯一打包机制的可能的大型 VM 群集（包括 [Docker] 容器）。CoreOS 旨在支持：\n\n+ 高度自动化\n+ 更轻松且更一致的应用程序部署\n+ 应用程序级别和系统级别的可伸缩性\n\n概括而言，支持这些目标的 CoreOS 功能包括：\n\n1. 单一打包系统：CoreOS 仅运行可在 Linux 容器中运行，以取得部署速度、一致性和方便性的 Linux 容器映像\n2. 系统会自动执行操作系统更新，这样一来，操作系统会作为单个实体进行更新，并且可以轻松回退到已知状态\n3. 内置用于动态 VM 和群集通信与管理的 [etcd](https://github.com/coreos/etcd) 和 [fleet](https://github.com/coreos/fleet) 守护程序（服务）\n\n这是对 CoreOS 及其功能的概要说明。有关 CoreOS 更完整的信息，请参阅 [CoreOS 概述]。\n\n## 安全注意事项\n目前，CoreOS 假定可以通过 SSH 进入群集的人员有权对群集进行管理。因此，在不进行修改的情况下，CoreOS 群集在测试和开发环境中的表现也相当出色，但你应该在所有生产环境中应用更多安全措施。\n\n## 如何在 Azure 上使用 CoreOS\n\n本部分介绍如何使用 [Azure 命令行界面 (Azure CLI)]，创建拥有三个 CoreOS 虚拟机的 Azure 云服务。基本步骤如下所示：\n\n1. 创建 SSH 证书和密钥，以保护与 CoreOS 虚拟机的通信安全\n2. 获取群集的 etcd id 以互相通信\n3. 创建 [YAML] 格式的 cloud-config 文件\n4. 使用 Azure CLI 创建新的 Azure 云服务和三个 CoreOS VM\n5. 在 Azure VM 中测试你的 CoreOS 群集\n6. 在 localhost 中测试你的 CoreOS 群集\n\n### 创建用于通信的公钥和私钥\n\n按照[如何在 Azure 上通过 Linux 使用 SSH](/documentation/articles/virtual-machines-linux-use-ssh-key) 中的说明，创建用于 SSH 的公钥和私钥。（可在下面的说明中找到基本步骤。） 你将使用这些密钥连接到群集中的 VM，以验证它们是否可以正常工作并互相通信。\n\n> [AZURE.NOTE]本主题假定你没有这些密钥，为了让你明了操作过程，将要求你创建 `myPrivateKey.pem` 和 `myCert.pem` 文件。如果已将公钥和私钥对保存到 `~/.ssh/id_rsa`，只需键入 `openssl req -x509 -key ~/.ssh/id_rsa -nodes -days 365 -newkey rsa:2048 -out myCert.pem` 即可获取需要上载到 Azure 的 .pem 文件。\n\n1. 在工作目录中，键入 `openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout myPrivateKey.key -out myCert.pem` 以创建私钥和与之关联的 X.509 证书。\n\n2. 若要判断私钥的所有者是否可以读取或写入文件，请键入 `chmod 600 myPrivateKey.key`。\n\n你的工作目录中现在应同时包含 `myPrivateKey.key` 和 `myCert.pem` 文件。\n\n\n### 获取群集的 etcd id\n\nCoreOS 的 `etcd` 守护程序需要发现 ID，以自动查询群集中的所有节点。若要检索你的发现 ID 并将其保存到 `etcdid` 文件，请键入\n\n    \n    curl https://discovery.etcd.io/new | grep ^http.* > etcdid\n    \n\n### 创建 cloud-config 文件\n\n在相同的工作目录中，使用你最喜欢的文本编辑器创建包含以下文本的文件，并将其另存为 `cloud-config.yaml`。（可以使用你想要的任何文件名将其保存，但在下一步创建 VM 时，必须在 **azure vm create** 命令的 **--custom-data** 选项中引用此文件的名称。）\n\n> [AZURE.NOTE]请记得键入 `cat etcdid`，以从之前创建的 `etcdid` 文件中检索 etcd 发现 id，并使用 `etcdid` 文件生成的数字替换以下 `cloud-config.yaml` 文件中的 `<token>`。如果最后无法验证群集，这可能会是你忽略了的其中一个步骤！\n\n    \n    #cloud-config\n    \n    coreos:\n      etcd:\n        # generate a new token for each unique cluster from https://discovery.etcd.io/new\n        discovery: https://discovery.etcd.io/<token>\n        # deployments across multiple cloud services will need to use $public_ipv4\n        addr: $private_ipv4:4001\n        peer-addr: $private_ipv4:7001\n      units:\n        - name: etcd.service\n          command: start\n        - name: fleet.service\n          command: start\n    \n\n（有关 cloud-config 文件更完整的信息，请参阅 CoreOS 文档中的[使用 Cloud-Config](https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/)。）\n\n### 使用 Azure CLI 创建新的 CoreOS VM\n<!--Every topic should have next steps and links to the next logical set of content to keep the customer engaged-->\n\n1. 如果尚未安装 [Azure 命令行界面 (Azure CLI)]，请先执行安装并使用工作或学校 ID 登录，或下载 .publishsettings 文件并将其导入你的帐户。\n2. 寻找 CoreOS 映像。若要查找随时可用的映像，请键入 `azure vm image list | grep CoreOS`，然后就会看到类似于以下内容的结果列表：\n\n    数据: 2b171e93f07c4903bcad35bda10acf22\\_\\_CoreOS-Stable-522.6.0 Public Linux\n\n3. 键入 `azure service create <cloud-service-name>`（其中的 <*cloud-service-name*> 是你的 CoreOS 云服务的名称）可创建用于基本群集的云服务。此示例使用 **`coreos-cluster`** 作为名称；你将需要重用所选名称来创建云服务内部的 CoreOS VM 实例。\n\n4. 使用 **azure vm create** 命令可连接到你的云服务，并可在其中创建新的 CoreOS VM。你将在 **--ssh-cert** 选项中传递 X.509 证书的位置。通过键入以下命令创建你的第一个 VM 映像，请记得使用你创建的云服务名称替换 **coreos-cluster**：\n\n    \n    azure vm create --custom-data=cloud-config.yaml --ssh=22 --ssh-cert=./myCert.pem --no-ssh-password --vm-name=node-1 --connect=coreos-cluster --location='China East' 2b171e93f07c4903bcad35bda10acf22__CoreOS-Stable-522.6.0 core\n    \n\n5. 通过重复步骤 4 中的命令来创建第二个节点，使用 **node-2** 替换 **--vm-name** 值，并使用 2022 替换 **--ssh** 端口值。\n\n6. 通过重复步骤 4 中的命令来创建第三个节点，使用 **node-3** 替换 **--vm-name** 值，并使用 3022 替换 **--ssh** 端口值。\n\n### 在 Azure VM 中测试你的 CoreOS 群集\n\n若要测试你的群集，请确保你位于工作目录中，然后使用 **ssh** 连接到 **node-1**，并通过键入以下命令传递私钥：\n\n`ssh core@coreos-cluster.chinacloudapp.cn -p 22 -i ./myPrivateKey.key`\n\n连接后，键入 `sudo fleetctl list-machines` 以查看群集是否已识别出群集中的所有 VM。你应会收到类似于下面的响应：\n\n\n    core@node-1 ~ $ sudo fleetctl list-machines\n    MACHINE     IP      METADATA\n    442e6cfb... 100.71.168.115  -\n    a05e2d7c... 100.71.168.87   -\n    f7de6717... 100.71.188.96   -\n\n\n### 在 localhost 中测试你的 CoreOS 群集\n\n最后，让我们测试你本地 Linux 客户端中的 CoreOS 群集。你也许可以使用 **npm** 来安装 **fleetctl**；或者，你可能希望安装 **fleet** 并在本地客户端上自行构建 **fleetctl**。**fleet** 需要使用 **golang**，因此，你可能需要先安装后者，则需键入：\n\n`sudo apt-get install golang`\n\n然后从 github 克隆 **fleet** 存储库，方法是键入：\n\n`git clone https://github.com/coreos/fleet.git`\n\n生成 **fleet**，方法是转到 `fleet` 目录并键入\n\n`./build`\n\n最后，添加 **fleet** 以便能够轻松使用（你可能需要也可能不需要 **sudo**，具体取决于你的配置）：\n\n`cp bin/fleetctl /usr/local/bin`\n\n确保 **fleet** 能够访问工作目录中的 `myPrivateKey.key`，方法是键入：\n\n`ssh-add ./myPrivateKey.key`\n\n> [AZURE.NOTE]如果你已在使用 `~/.ssh/id_rsa` 密钥，则使用 `ssh-add ~/.ssh/id_rsa` 进行添加。\n\n现在，你已准备好使用你在 **node-1** 中使用的相同 **fleetctl** 命令进行远程测试，但需要传递部分远程参数：\n\n`fleetctl --tunnel coreos-cluster.chinacloudapp.cn:22 list-machines`\n\n结果应完全相同：\n\n\n    MACHINE     IP      METADATA\n    442e6cfb... 100.71.168.115  -\n    a05e2d7c... 100.71.168.87   -\n    f7de6717... 100.71.188.96   -\n\n## 后续步骤\n\n在 Azure 上，你现在应该拥有正常运行的三节点 CoreOS 群集。此后，你可以探索如何创建更复杂的群集、使用 Docker 和创建更有趣的应用程序。若要尝试操作几个快速示例，请参阅[在 Azure 上的 CoreOS 上使用 Fleet 入门]。\n\n<!--Anchors-->\n[CoreOS、群集和 Linux 容器]: #intro\n[安全注意事项]: #security\n[如何在 Azure 上使用 CoreOS]: #usingcoreos\n[Subheading 3]: #subheading-3\n[后续步骤]: #next-steps\n\n<!--Image references-->\n[CloudServiceInNewPortal]: ./media/virtual-machines-linux-coreos-how-to/cloudservicefromnewportal.png\n[EmptyCoreOSCluster]: ./media/virtual-machines-linux-coreos-how-to/endresultemptycluster.png\n[6]: ./media/markdown-template-for-new-articles/pretty49.png\n[7]: ./media/markdown-template-for-new-articles/channel-9.png\n\n\n<!--Link references-->\n[Azure 命令行界面 (Azure CLI)]: /documentation/articles/xplat-cli\n[CoreOS]: https://coreos.com/\n[CoreOS 概述]: https://coreos.com/using-coreos/\n[CoreOS 与 Azure]: https://coreos.com/docs/running-coreos/cloud-providers/azure/\n[Tim Park 的 CoreOS 教程]: https://github.com/timfpark/coreos-azure\n[Patrick Chanezon 的 CoreOS 教程]: https://github.com/chanezon/azure-linux/tree/master/coreos/cloud-init\n[Docker]: http://docker.io\n[YAML]: http://yaml.org/\n[在 Azure 上的 CoreOS 上使用 Fleet 入门]: /documentation/articles/virtual-machines-linux-coreos-fleet-get-started\n\n<!---HONumber=Mooncake_1221_2015-->"
}