{
  "nodes": [
    {
      "content": "如何结合使用通知中心与 PHP",
      "pos": [
        28,
        43
      ]
    },
    {
      "content": "了解如何从 PHP 后端使用 Azure 通知中心。",
      "pos": [
        63,
        89
      ]
    },
    {
      "content": "如何通过 PHP 使用通知中心",
      "pos": [
        318,
        333
      ]
    },
    {
      "pos": [
        453,
        583
      ],
      "content": "如 MSDN 主题<bpt id=\"p1\">[</bpt>通知中心 REST API<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn223264.aspx)</ept> 中所述，你可以使用通知中心 REST 接口从 Java/PHP/Ruby 后端访问所有通知中心功能。"
    },
    {
      "content": "本主题中，我们将向你介绍如何：",
      "pos": [
        585,
        600
      ]
    },
    {
      "content": "以 PHP 构建 REST 客户端以获取通知中心功能；",
      "pos": [
        604,
        631
      ]
    },
    {
      "pos": [
        634,
        723
      ],
      "content": "请按照你选定的移动平台<bpt id=\"p1\">[</bpt>入门教程<ept id=\"p1\">](/documentation/articles/notification-hubs-ios-get-started)</ept>以 PHP 实现后端部分。"
    },
    {
      "content": "客户端接口",
      "pos": [
        728,
        733
      ]
    },
    {
      "pos": [
        734,
        873
      ],
      "content": "主要的客户端接口可提供<bpt id=\"p1\">[</bpt>.NET 通知中心 SDK<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/jj933431.aspx)</ept> 中提供的相同方法，这将允许你直接翻译当前此站点上提供的所有教程和示例，这些内容均来自 Internet 上的社区。"
    },
    {
      "pos": [
        875,
        907
      ],
      "content": "你可以在 <bpt id=\"p1\">[</bpt><ept id=\"p1\">PHP REST 包装器示例]</ept>中找到提供的所有代码。"
    },
    {
      "content": "例如，创建客户端：",
      "pos": [
        909,
        918
      ]
    },
    {
      "content": "发送 iOS 本机通知：",
      "pos": [
        986,
        998
      ]
    },
    {
      "content": "实现",
      "pos": [
        1129,
        1131
      ]
    },
    {
      "content": "如果你尚未实现，请按照我们[入门的教程]学至最后一节，其中你必须实现后端。",
      "pos": [
        1132,
        1169
      ]
    },
    {
      "content": "此外，如果你希望可以使用来自 <bpt id=\"p1\">[</bpt><ept id=\"p1\">PHP REST 包装器示例]</ept>的代码并直接转到<bpt id=\"p2\">[</bpt>完成本教程<ept id=\"p2\">](#complete-tutorial)</ept>部分。",
      "pos": [
        1170,
        1239
      ]
    },
    {
      "pos": [
        1241,
        1374
      ],
      "content": "有关实现完整 REST 包装器的所有详细信息，请访问 <bpt id=\"p1\">[</bpt>MSDN<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn530746.aspx)</ept>。在本部分中，我们将向你介绍访问通知中心 REST 终结点所需的主要步骤的 PHP 实现："
    },
    {
      "content": "解析连接字符串",
      "pos": [
        1379,
        1386
      ]
    },
    {
      "content": "生成授权令牌",
      "pos": [
        1390,
        1396
      ]
    },
    {
      "content": "执行 HTTP 调用",
      "pos": [
        1400,
        1410
      ]
    },
    {
      "content": "解析连接字符串",
      "pos": [
        1416,
        1423
      ]
    },
    {
      "content": "下面是实现客户端的主类，其构造函数将解析连接字符串：",
      "pos": [
        1425,
        1451
      ]
    },
    {
      "content": "创建安全令牌",
      "pos": [
        2586,
        2592
      ]
    },
    {
      "content": "有关安全令牌创建的详细信息，请访问<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn495627.aspx)</ept>。",
      "pos": [
        2593,
        2670
      ]
    },
    {
      "content": "下面的方法必须添加到 <bpt id=\"p1\">**</bpt>NotificationHub<ept id=\"p1\">**</ept> 类，以根据当前请求的 URL 和提取自连接字符串的凭据创建令牌。",
      "pos": [
        2671,
        2734
      ]
    },
    {
      "content": "发送通知",
      "pos": [
        3298,
        3302
      ]
    },
    {
      "content": "首先，让我们定义表示通知的类。",
      "pos": [
        3303,
        3318
      ]
    },
    {
      "content": "此类是一个容器，其中包含本机通知正文或一组模板通知上的属性，以及一组包含格式（本机平台或模板）和平台特定属性（如 Apple 过期属性和 WNS 标头）的标头。",
      "pos": [
        4056,
        4136
      ]
    },
    {
      "pos": [
        4138,
        4234
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>通知中心 REST API 文档<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn495827.aspx)</ept>和具体的通知平台格式以了解所有可用选项。"
    },
    {
      "pos": [
        4236,
        4283
      ],
      "content": "具备了此类后，我们现在可以在 <bpt id=\"p1\">**</bpt>NotificationHub<ept id=\"p1\">**</ept> 类中编写发送通知方法了。"
    },
    {
      "content": "以上方法将 HTTP POST 请求发送到你通知中心的 /messages 终结点，该请求具有发送通知的正确正文和标头。",
      "pos": [
        6097,
        6157
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"complete-tutorial\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>完成教程",
      "pos": [
        6161,
        6197
      ]
    },
    {
      "content": "现在，你可以通过从 PHP 后端发送通知来完成该入门教程。",
      "pos": [
        6198,
        6227
      ]
    },
    {
      "content": "初始化你的通知中心客户端（按[入门的教程]中所述替换连接字符串和中心名称）：",
      "pos": [
        6229,
        6267
      ]
    },
    {
      "content": "$hub = new NotificationHub(\"连接字符串\", \"中心名称\");",
      "pos": [
        6272,
        6316
      ]
    },
    {
      "content": "然后，根据你的目标移动平台添加发送代码。",
      "pos": [
        6318,
        6338
      ]
    },
    {
      "content": "Windows 应用商店和 Windows Phone 8.1（非 Silverlight）",
      "pos": [
        6344,
        6390
      ]
    },
    {
      "content": "iOS",
      "pos": [
        6679,
        6682
      ]
    },
    {
      "content": "Android",
      "pos": [
        6839,
        6846
      ]
    },
    {
      "content": "Windows Phone 8.0 和 8.1 Silverlight",
      "pos": [
        7003,
        7038
      ]
    },
    {
      "content": "Kindle Fire",
      "pos": [
        7566,
        7577
      ]
    },
    {
      "content": "运行 PHP 代码，现在应该生成显示在目标设备上的通知。",
      "pos": [
        7730,
        7758
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        7764,
        7768
      ]
    },
    {
      "content": "在本主题中，我们介绍了如何为通知中心创建简单的 Java REST 客户端。从这里你可以：",
      "pos": [
        7769,
        7814
      ]
    },
    {
      "pos": [
        7818,
        7852
      ],
      "content": "下载完整的 <bpt id=\"p1\">[</bpt><ept id=\"p1\">PHP REST 包装器示例]</ept>，其中包含上述所有代码。"
    },
    {
      "content": "在 [突发新闻教程] 中继续学习通知中心标记功能",
      "pos": [
        7855,
        7879
      ]
    },
    {
      "content": "在 [通知用户教程] 中了解如何将通知推送到单个用户",
      "pos": [
        7882,
        7908
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何结合使用通知中心与 PHP\" \n    description=\"了解如何从 PHP 后端使用 Azure 通知中心。\" \n    services=\"notification-hubs\" \n    documentationCenter=\"\" \n    authors=\"ysxu\" \n    manager=\"dwrede\" \n    editor=\"\" />\n\n<tags \n     ms.service=\"notification-hubs\"\n     ms.date=\"11/01/2015\" \n     wacn.date=\"01/14/2016\" />\n\n# 如何通过 PHP 使用通知中心\n[AZURE.INCLUDE [notification-hubs-backend-how-to-selector](../includes/notification-hubs-backend-how-to-selector.md)]\n\n如 MSDN 主题[通知中心 REST API](http://msdn.microsoft.com/zh-cn/library/dn223264.aspx) 中所述，你可以使用通知中心 REST 接口从 Java/PHP/Ruby 后端访问所有通知中心功能。\n\n本主题中，我们将向你介绍如何：\n\n* 以 PHP 构建 REST 客户端以获取通知中心功能；\n* 请按照你选定的移动平台[入门教程](/documentation/articles/notification-hubs-ios-get-started)以 PHP 实现后端部分。\n\n## 客户端接口\n主要的客户端接口可提供[.NET 通知中心 SDK](http://msdn.microsoft.com/zh-cn/library/jj933431.aspx) 中提供的相同方法，这将允许你直接翻译当前此站点上提供的所有教程和示例，这些内容均来自 Internet 上的社区。\n\n你可以在 [PHP REST 包装器示例]中找到提供的所有代码。\n\n例如，创建客户端：\n\n    $hub = new NotificationHub(\"connection string\", \"hubname\"); \n\n发送 iOS 本机通知：\n    \n    $notification = new Notification(\"apple\", '{\"aps\":{\"alert\": \"Hello!\"}}');\n    $hub->sendNotification($notification);\n\n## 实现\n如果你尚未实现，请按照我们[入门的教程]学至最后一节，其中你必须实现后端。\n此外，如果你希望可以使用来自 [PHP REST 包装器示例]的代码并直接转到[完成本教程](#complete-tutorial)部分。\n\n有关实现完整 REST 包装器的所有详细信息，请访问 [MSDN](http://msdn.microsoft.com/zh-cn/library/dn530746.aspx)。在本部分中，我们将向你介绍访问通知中心 REST 终结点所需的主要步骤的 PHP 实现：\n\n1. 解析连接字符串\n2. 生成授权令牌\n3. 执行 HTTP 调用\n\n### 解析连接字符串\n\n下面是实现客户端的主类，其构造函数将解析连接字符串：\n\n    class NotificationHub {\n        const API_VERSION = \"?api-version=2013-10\";\n    \n        private $endpoint;\n        private $hubPath;\n        private $sasKeyName;\n        private $sasKeyValue;\n    \n        function __construct($connectionString, $hubPath) {\n            $this->hubPath = $hubPath;\n    \n            $this->parseConnectionString($connectionString);\n        }\n    \n        private function parseConnectionString($connectionString) {\n            $parts = explode(\";\", $connectionString);\n            if (sizeof($parts) != 3) {\n                throw new Exception(\"Error parsing connection string: \" . $connectionString);\n            }\n    \n            foreach ($parts as $part) {\n                if (strpos($part, \"Endpoint\") === 0) {\n                    $this->endpoint = \"https\" . substr($part, 11);\n                } else if (strpos($part, \"SharedAccessKeyName\") === 0) {\n                    $this->sasKeyName = substr($part, 20);\n                } else if (strpos($part, \"SharedAccessKey\") === 0) {\n                    $this->sasKeyValue = substr($part, 16);\n                }\n            }\n        }\n    }\n\n\n### 创建安全令牌\n有关安全令牌创建的详细信息，请访问[此处](http://msdn.microsoft.com/zh-cn/library/dn495627.aspx)。\n下面的方法必须添加到 **NotificationHub** 类，以根据当前请求的 URL 和提取自连接字符串的凭据创建令牌。\n\n    private function generateSasToken($uri) {\n        $targetUri = strtolower(rawurlencode(strtolower($uri)));\n\n        $expires = time();\n        $expiresInMins = 60;\n        $expires = $expires + $expiresInMins * 60;\n        $toSign = $targetUri . \"\\n\" . $expires;\n\n        $signature = rawurlencode(base64_encode(hash_hmac('sha256', $toSign, $this->sasKeyValue, TRUE)));\n\n        $token = \"SharedAccessSignature sr=\" . $targetUri . \"&sig=\"\n                    . $signature . \"&se=\" . $expires . \"&skn=\" . $this->sasKeyName;\n\n        return $token;\n    }\n\n### 发送通知\n首先，让我们定义表示通知的类。\n\n    class Notification {\n        public $format;\n        public $payload;\n    \n        # array with keynames for headers\n        # Note: Some headers are mandatory: Windows: X-WNS-Type, WindowsPhone: X-NotificationType\n        # Note: For Apple you can set Expiry with header: ServiceBusNotification-ApnsExpiry in W3C DTF, YYYY-MM-DDThh:mmTZD (for example, 1997-07-16T19:20+01:00).\n        public $headers;\n    \n        function __construct($format, $payload) {\n            if (!in_array($format, [\"template\", \"apple\", \"windows\", \"gcm\", \"windowsphone\"])) {\n                throw new Exception('Invalid format: ' . $format);\n            }\n    \n            $this->format = $format;\n            $this->payload = $payload;\n        }\n    }\n\n此类是一个容器，其中包含本机通知正文或一组模板通知上的属性，以及一组包含格式（本机平台或模板）和平台特定属性（如 Apple 过期属性和 WNS 标头）的标头。\n\n请参阅[通知中心 REST API 文档](http://msdn.microsoft.com/zh-cn/library/dn495827.aspx)和具体的通知平台格式以了解所有可用选项。\n\n具备了此类后，我们现在可以在 **NotificationHub** 类中编写发送通知方法了。\n\n    public function sendNotification($notification, $tagsOrTagExpression=\"\") {\n        if (is_array($tagsOrTagExpression)) {\n            $tagExpression = implode(\" || \", $tagsOrTagExpression);\n        } else {\n            $tagExpression = $tagsOrTagExpression;\n        }\n\n        # build uri\n        $uri = $this->endpoint . $this->hubPath . \"/messages\" . NotificationHub::API_VERSION;\n        $ch = curl_init($uri);\n\n        if (in_array($notification->format, [\"template\", \"apple\", \"gcm\"])) {\n            $contentType = \"application/json\";\n        } else {\n            $contentType = \"application/xml\";\n        }\n\n        $token = $this->generateSasToken($uri);\n\n        $headers = [\n            'Authorization: '.$token,\n            'Content-Type: '.$contentType,\n            'ServiceBusNotification-Format: '.$notification->format\n        ];\n\n        if (\"\" !== $tagExpression) {\n            $headers[] = 'ServiceBusNotification-Tags: '.$tagExpression;\n        }\n\n        # add headers for other platforms\n        if (is_array($notification->headers)) {\n            $headers = array_merge($headers, $notification->headers);\n        }\n        \n        curl_setopt_array($ch, array(\n            CURLOPT_POST => TRUE,\n            CURLOPT_RETURNTRANSFER => TRUE,\n            CURLOPT_SSL_VERIFYPEER => FALSE,\n            CURLOPT_HTTPHEADER => $headers,\n            CURLOPT_POSTFIELDS => $notification->payload\n        ));\n\n        // Send the request\n        $response = curl_exec($ch);\n\n        // Check for errors\n        if($response === FALSE){\n            throw new Exception(curl_error($ch));\n        }\n\n        $info = curl_getinfo($ch);\n\n        if ($info['http_code'] <> 201) {\n            throw new Exception('Error sending notificaiton: '. $info['http_code'] . ' msg: ' . $response);\n        }\n    } \n\n以上方法将 HTTP POST 请求发送到你通知中心的 /messages 终结点，该请求具有发送通知的正确正文和标头。\n\n##<a name=\"complete-tutorial\"></a>完成教程\n现在，你可以通过从 PHP 后端发送通知来完成该入门教程。\n\n初始化你的通知中心客户端（按[入门的教程]中所述替换连接字符串和中心名称）：\n    $hub = new NotificationHub(\"连接字符串\", \"中心名称\");\n\n然后，根据你的目标移动平台添加发送代码。\n\n### Windows 应用商店和 Windows Phone 8.1（非 Silverlight）\n\n    $toast = '<toast><visual><binding template=\"ToastText01\"><text id=\"1\">Hello from PHP!</text></binding></visual></toast>';\n    $notification = new Notification(\"windows\", $toast);\n    $notification->headers[] = 'X-WNS-Type: wns/toast';\n    $hub->sendNotification($notification);\n\n### iOS\n\n    $alert = '{\"aps\":{\"alert\":\"Hello from PHP!\"}}';\n    $notification = new Notification(\"apple\", $alert);\n    $hub->sendNotification($notification);\n\n### Android\n    $message = '{\"data\":{\"msg\":\"Hello from PHP!\"}}';\n    $notification = new Notification(\"gcm\", $message);\n    $hub->sendNotification($notification);\n\n### Windows Phone 8.0 和 8.1 Silverlight\n\n    $toast = '<?xml version=\"1.0\" encoding=\"utf-8\"?>' .\n                '<wp:Notification xmlns:wp=\"WPNotification\">' .\n                   '<wp:Toast>' .\n                        '<wp:Text1>Hello from PHP!</wp:Text1>' .\n                   '</wp:Toast> ' .\n                '</wp:Notification>';\n    $notification = new Notification(\"windowsphone\", $toast);\n    $notification->headers[] = 'X-WindowsPhone-Target : toast';\n    $notification->headers[] = 'X-NotificationClass : 2';\n    $hub->sendNotification($notification);\n\n\n### Kindle Fire\n    $message = '{\"data\":{\"msg\":\"Hello from PHP!\"}}';\n    $notification = new Notification(\"adm\", $message);\n    $hub->sendNotification($notification);\n\n运行 PHP 代码，现在应该生成显示在目标设备上的通知。\n\n\n## 后续步骤\n在本主题中，我们介绍了如何为通知中心创建简单的 Java REST 客户端。从这里你可以：\n\n* 下载完整的 [PHP REST 包装器示例]，其中包含上述所有代码。\n* 在 [突发新闻教程] 中继续学习通知中心标记功能\n* 在 [通知用户教程] 中了解如何将通知推送到单个用户\n\n<!-- For more information, see also the [PHP Developer Center](/develop/php/). -->\n\n[PHP REST 包装器示例]: https://github.com/Azure/azure-notificationhubs-samples/tree/master/notificationhubs-rest-php\n[入门教程]: /documentation/articles/notification-hubs-ios-get-started\n\n<!---HONumber=Mooncake_0104_2016-->"
}