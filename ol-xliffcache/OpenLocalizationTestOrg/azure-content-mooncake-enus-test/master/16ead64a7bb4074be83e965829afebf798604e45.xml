{
  "nodes": [
    {
      "content": "如何使用 Blob 存储 (C++) | Azure",
      "pos": [
        27,
        53
      ]
    },
    {
      "content": "了解如何在 Azure 中使用 blob 存储服务。示例用 C++ 编写。",
      "pos": [
        72,
        109
      ]
    },
    {
      "content": "如何通过 C++ 使用 Blob 存储",
      "pos": [
        319,
        338
      ]
    },
    {
      "content": "概述",
      "pos": [
        440,
        442
      ]
    },
    {
      "pos": [
        443,
        623
      ],
      "content": "本指南将演示如何使用 Azure Blob 存储服务执行常见方案。示例用 C++ 编写，并使用<bpt id=\"p1\">[</bpt>适用于 C++ 的 Azure 存储空间客户端库<ept id=\"p1\">](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)</ept>。涉及的任务包括<bpt id=\"p2\">**</bpt>上载<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>列出<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>下载<ept id=\"p4\">**</ept>和<bpt id=\"p5\">**</bpt>删除<ept id=\"p5\">**</ept> Blob。"
    },
    {
      "pos": [
        626,
        818
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 本指南主要面向适用于 C++ 的 Azure 存储空间客户端库 1.0.0 版及更高版本。建议的版本是存储空间客户端库 1.0.0，它可以通过 <bpt id=\"p1\">[</bpt>NuGet<ept id=\"p1\">](http://www.nuget.org/packages/wastorage)</ept> 或 <bpt id=\"p2\">[</bpt>GitHub<ept id=\"p2\">](https://github.com/Azure/azure-storage-cpp)</ept> 获得。"
    },
    {
      "content": "创建 C++ 应用程序",
      "pos": [
        1014,
        1025
      ]
    },
    {
      "content": "在本指南中，你将使用存储功能，这些功能可以在 C++ 应用程序中运行。",
      "pos": [
        1026,
        1061
      ]
    },
    {
      "content": "为此，你将需要安装适用于 C++ 的 Azure 存储客户端库，并在你的 Azure 订阅中创建 Azure 存储帐户。",
      "pos": [
        1063,
        1123
      ]
    },
    {
      "content": "若要安装适用于 C++ 的 Azure 存储客户端库，你可以使用以下方法：",
      "pos": [
        1125,
        1162
      ]
    },
    {
      "pos": [
        1168,
        1286
      ],
      "content": "<bpt id=\"p1\">**</bpt>Linux：<ept id=\"p1\">**</ept>按照<bpt id=\"p2\">[</bpt>适用于 C++ 的 Azure 存储空间客户端库自述文件<ept id=\"p2\">](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)</ept>页中提供的说明操作。"
    },
    {
      "pos": [
        1293,
        1478
      ],
      "content": "<bpt id=\"p1\">**</bpt>Windows：<ept id=\"p1\">**</ept>在 Visual Studio 主菜单中，单击“工具”-&gt;“NuGet 程序包管理器”-&gt;“程序包管理器控制台”。在 <bpt id=\"p2\">[</bpt>NuGet 程序包管理器控制台<ept id=\"p2\">](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)</ept>窗口中输入以下命令，然后按 <bpt id=\"p3\">**</bpt>ENTER<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "配置你的应用程序以访问 Blob 存储",
      "pos": [
        1520,
        1539
      ]
    },
    {
      "content": "将以下 include 语句添加到 C++ 文件的顶部，你要在此使用 Azure 存储 API 来访问 blob：",
      "pos": [
        1542,
        1599
      ]
    },
    {
      "content": "设置 Azure 存储连接字符串",
      "pos": [
        1668,
        1684
      ]
    },
    {
      "pos": [
        1685,
        1967
      ],
      "content": "Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并使用<bpt id=\"p1\">[</bpt>管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的存储帐户名称和存储访问密钥作为 <bpt id=\"p2\">*</bpt>AccountName<ept id=\"p2\">*</ept> 和 <bpt id=\"p3\">*</bpt>AccountKey<ept id=\"p3\">*</ept> 值。有关存储帐户和访问密钥的信息，请参阅<bpt id=\"p4\">[</bpt>关于 Azure 存储帐户<ept id=\"p4\">](/documentation/articles/storage-create-storage-account)</ept>。此示例演示如何声明一个静态字段以保存连接字符串："
    },
    {
      "pos": [
        2222,
        2448
      ],
      "content": "若要在本地 Windows 计算机中测试您的应用程序，可以使用随同 <bpt id=\"p1\">[</bpt>Azure SDK<ept id=\"p1\">](/downloads/)</ept> 一起安装的 Azure <bpt id=\"p2\">[</bpt>存储模拟器<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/hh403989.aspx)</ept>。存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。以下示例演示如何声明一个静态字段以将连接字符串保存到你的本地存储模拟器："
    },
    {
      "pos": [
        2608,
        2695
      ],
      "content": "若要启动 Azure 存储模拟器，请选择“开始”按钮或按 <bpt id=\"p1\">**</bpt>Windows<ept id=\"p1\">**</ept> 键。开始键入“Azure 存储模拟器”，然后从应用程序列表中选择“Azure 存储模拟器”。"
    },
    {
      "content": "下面的示例假定你使用了这两个方法之一来获取存储连接字符串。",
      "pos": [
        2697,
        2726
      ]
    },
    {
      "content": "检索你的连接字符串",
      "pos": [
        2731,
        2740
      ]
    },
    {
      "pos": [
        2741,
        2826
      ],
      "content": "可以使用 <bpt id=\"p1\">**</bpt>cloud_storage_account<ept id=\"p1\">**</ept> 类来表示您的存储帐户信息。若要从存储连接字符串中检索您的存储帐户信息，您可以使用 <bpt id=\"p2\">**</bpt>parse<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "pos": [
        3018,
        3139
      ],
      "content": "其次，获取对 <bpt id=\"p1\">**</bpt>cloud_blob_client<ept id=\"p1\">**</ept> 类的引用，因为它允许您检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。以下代码使用我们在上面检索到的存储帐户对象创建 <bpt id=\"p2\">**</bpt>cloud_blob_client<ept id=\"p2\">**</ept> 对象："
    },
    {
      "content": "如何：创建容器",
      "pos": [
        3274,
        3281
      ]
    },
    {
      "content": "此示例演示如何创建一个容器（如果该容器不存在）：",
      "pos": [
        3396,
        3420
      ]
    },
    {
      "content": "默认情况下，新容器是专用容器，因此你必须指定存储访问密钥才能从该容器下载 Blob。如果要使容器中的文件 (blob) 对任何人都可用，则可以使用以下代码将容器设置为公用：",
      "pos": [
        4160,
        4246
      ]
    },
    {
      "content": "Internet 中的所有人都可以查看公共容器中的 Blob，但是，仅在你具有相应的访问密钥时，才能修改或删除它们。",
      "pos": [
        4502,
        4560
      ]
    },
    {
      "content": "如何：将 Blob 上载到容器",
      "pos": [
        4565,
        4580
      ]
    },
    {
      "content": "Azure Blob 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。",
      "pos": [
        4581,
        4629
      ]
    },
    {
      "pos": [
        4631,
        4800
      ],
      "content": "若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。拥有 Blob 引用后，您可以通过调用 <bpt id=\"p1\">**</bpt>upload_from_stream<ept id=\"p1\">**</ept> 方法将任何数据流上载到其中。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。"
    },
    {
      "pos": [
        6265,
        6308
      ],
      "content": "你还可以使用 <bpt id=\"p1\">**</bpt>upload_from_file<ept id=\"p1\">**</ept> 方法将文件上载到块 blob。"
    },
    {
      "content": "如何：列出容器中的 Blob",
      "pos": [
        6313,
        6327
      ]
    },
    {
      "pos": [
        6328,
        6611
      ],
      "content": "若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 <bpt id=\"p1\">**</bpt>list_blobs<ept id=\"p1\">**</ept> 方法来检索其中的 blob 和/或目录。若要针对一个返回的 <bpt id=\"p2\">**</bpt>list_blob_item<ept id=\"p2\">**</ept> 访问其丰富的属性和方法，您必须调用 <bpt id=\"p3\">**</bpt>list_blob_item.as_blob<ept id=\"p3\">**</ept> 方法以获取一个 <bpt id=\"p4\">**</bpt>cloud_blob<ept id=\"p4\">**</ept> 对象，或调用 <bpt id=\"p5\">**</bpt>list_blob.as_directory<ept id=\"p5\">**</ept> 方法以获取 cloud_blob_directory 对象。以下代码演示如何检索和输出 <bpt id=\"p6\">**</bpt>my-sample-container<ept id=\"p6\">**</ept> 容器中每一项的 URI："
    },
    {
      "pos": [
        7581,
        7678
      ],
      "content": "有关列出操作的更多详细信息，请参阅<bpt id=\"p1\">[</bpt>使用 C++ 列出 Azure 存储资源<ept id=\"p1\">](/documentation/articles/storage-c-plus-plus-enumeration)</ept>。"
    },
    {
      "content": "如何：下载 Blob",
      "pos": [
        7683,
        7693
      ]
    },
    {
      "pos": [
        7694,
        7816
      ],
      "content": "若要下载 Blob，请首先检索 Blob 引用，然后调用 <bpt id=\"p1\">**</bpt>download_to_stream<ept id=\"p1\">**</ept> 方法。以下示例使用 <bpt id=\"p2\">**</bpt>download_to_stream<ept id=\"p2\">**</ept> 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。"
    },
    {
      "content": "或者，可以使用 <bpt id=\"p1\">**</bpt>download_to_file<ept id=\"p1\">**</ept> 方法将 blob 的内容下载到文件。",
      "pos": [
        8903,
        8950
      ]
    },
    {
      "content": "此外，也可以使用 <bpt id=\"p1\">**</bpt>download_text<ept id=\"p1\">**</ept> 方法以文本字符串形式下载 Blob 的内容。",
      "pos": [
        8951,
        9000
      ]
    },
    {
      "content": "如何：删除 Blob",
      "pos": [
        9776,
        9786
      ]
    },
    {
      "pos": [
        9787,
        9836
      ],
      "content": "若要删除 Blob，请先获取 Blob 引用，然后对其调用 <bpt id=\"p1\">**</bpt>delete_blob<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "content": "后续步骤",
      "pos": [
        10552,
        10556
      ]
    },
    {
      "content": "既然你已了解 blob 存储的基础知识，请按照下面的链接了解有关 Azure 存储的详细信息。",
      "pos": [
        10557,
        10604
      ]
    },
    {
      "content": "如何通过 C++ 使用队列存储",
      "pos": [
        10613,
        10628
      ]
    },
    {
      "content": "如何通过 C++ 使用表存储",
      "pos": [
        10698,
        10712
      ]
    },
    {
      "content": "使用 C++ 列出 Azure 存储资源",
      "pos": [
        10782,
        10802
      ]
    },
    {
      "content": "适用于 C++ 的存储空间客户端库参考",
      "pos": [
        10866,
        10885
      ]
    },
    {
      "content": "Azure 存档文档",
      "pos": [
        10934,
        10944
      ]
    },
    {
      "content": "使用 AzCopy 命令行实用程序传输数据",
      "pos": [
        10983,
        11004
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"如何使用 Blob 存储 (C++) | Azure\"\n    description=\"了解如何在 Azure 中使用 blob 存储服务。示例用 C++ 编写。\" \n    services=\"storage\" \n    documentationCenter=\".net\" \n    authors=\"tamram\" \n    manager=\"adinah\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"01/24/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n# 如何通过 C++ 使用 Blob 存储  \n\n[AZURE.INCLUDE [storage-selector-blob-include](../includes/storage-selector-blob-include.md)]\n\n## 概述\n本指南将演示如何使用 Azure Blob 存储服务执行常见方案。示例用 C++ 编写，并使用[适用于 C++ 的 Azure 存储空间客户端库](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)。涉及的任务包括**上载**、**列出**、**下载**和**删除** Blob。\n\n>[AZURE.NOTE] 本指南主要面向适用于 C++ 的 Azure 存储空间客户端库 1.0.0 版及更高版本。建议的版本是存储空间客户端库 1.0.0，它可以通过 [NuGet](http://www.nuget.org/packages/wastorage) 或 [GitHub](https://github.com/Azure/azure-storage-cpp) 获得。\n\n[AZURE.INCLUDE [storage-blob-concepts-include](../includes/storage-blob-concepts-include.md)]\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 C++ 应用程序\n在本指南中，你将使用存储功能，这些功能可以在 C++ 应用程序中运行。\n\n为此，你将需要安装适用于 C++ 的 Azure 存储客户端库，并在你的 Azure 订阅中创建 Azure 存储帐户。\n\n若要安装适用于 C++ 的 Azure 存储客户端库，你可以使用以下方法：\n\n-   **Linux：**按照[适用于 C++ 的 Azure 存储空间客户端库自述文件](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)页中提供的说明操作。  \n-   **Windows：**在 Visual Studio 主菜单中，单击“工具”->“NuGet 程序包管理器”->“程序包管理器控制台”。在 [NuGet 程序包管理器控制台](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)窗口中输入以下命令，然后按 **ENTER**。  \n\n        Install-Package wastorage\n\n## 配置你的应用程序以访问 Blob 存储  \n将以下 include 语句添加到 C++ 文件的顶部，你要在此使用 Azure 存储 API 来访问 blob：\n\n    #include \"was/storage_account.h\"\n    #include \"was/blob.h\"\n\n## 设置 Azure 存储连接字符串\nAzure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并使用[管理门户](https://manage.windowsazure.cn)中列出的存储帐户的存储帐户名称和存储访问密钥作为 *AccountName* 和 *AccountKey* 值。有关存储帐户和访问密钥的信息，请参阅[关于 Azure 存储帐户](/documentation/articles/storage-create-storage-account)。此示例演示如何声明一个静态字段以保存连接字符串：\n\n    // Define the connection-string with your values.\n    const utility::string_t storage_connection_string(U(\"DefaultEndpointsProtocol=https;AccountName=your_storage_account;AccountKey=your_storage_account_key;EndpointSuffix=core.chinacloudapi.cn\"));\n\n若要在本地 Windows 计算机中测试您的应用程序，可以使用随同 [Azure SDK](/downloads/) 一起安装的 Azure [存储模拟器](https://msdn.microsoft.com/zh-cn/library/azure/hh403989.aspx)。存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。以下示例演示如何声明一个静态字段以将连接字符串保存到你的本地存储模拟器：\n\n\n    // Define the connection-string with Azure Storage Emulator.\n    const utility::string_t storage_connection_string(U(\"UseDevelopmentStorage=true;\"));  \n\n若要启动 Azure 存储模拟器，请选择“开始”按钮或按 **Windows** 键。开始键入“Azure 存储模拟器”，然后从应用程序列表中选择“Azure 存储模拟器”。\n\n下面的示例假定你使用了这两个方法之一来获取存储连接字符串。\n\n## 检索你的连接字符串\n可以使用 **cloud_storage_account** 类来表示您的存储帐户信息。若要从存储连接字符串中检索您的存储帐户信息，您可以使用 **parse** 方法。\n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n其次，获取对 **cloud_blob_client** 类的引用，因为它允许您检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。以下代码使用我们在上面检索到的存储帐户对象创建 **cloud_blob_client** 对象：\n\n    // Create the blob client.\n    azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();  \n\n## 如何：创建容器\n\n[AZURE.INCLUDE [storage-container-naming-rules-include](../includes/storage-container-naming-rules-include.md)]\n\n此示例演示如何创建一个容器（如果该容器不存在）：\n\n    try\n    {\n        // Retrieve storage account from connection string.\n        azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n        // Create the blob client.\n        azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\n\n        // Retrieve a reference to a container.\n        azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\n\n        // Create the container if it doesn't already exist.\n        container.create_if_not_exists();\n    }\n    catch (const std::exception& e)\n    {\n        std::wcout << U(\"Error: \") << e.what() << std::endl;\n    }  \n\n默认情况下，新容器是专用容器，因此你必须指定存储访问密钥才能从该容器下载 Blob。如果要使容器中的文件 (blob) 对任何人都可用，则可以使用以下代码将容器设置为公用：\n\n    // Make the blob container publicly accessible.\n    azure::storage::blob_container_permissions permissions;\n    permissions.set_public_access(azure::storage::blob_container_public_access_type::blob);\n    container.upload_permissions(permissions);  \n\nInternet 中的所有人都可以查看公共容器中的 Blob，但是，仅在你具有相应的访问密钥时，才能修改或删除它们。\n\n## 如何：将 Blob 上载到容器\nAzure Blob 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。\n\n若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。拥有 Blob 引用后，您可以通过调用 **upload_from_stream** 方法将任何数据流上载到其中。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。  \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the blob client.\n    azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\n\n    // Retrieve a reference to a previously created container.\n    azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\n\n    // Retrieve reference to a blob named \"my-blob-1\".\n    azure::storage::cloud_block_blob blockBlob = container.get_block_blob_reference(U(\"my-blob-1\"));\n\n    // Create or overwrite the \"my-blob-1\" blob with contents from a local file.\n    concurrency::streams::istream input_stream = concurrency::streams::file_stream<uint8_t>::open_istream(U(\"DataFile.txt\")).get();\n    blockBlob.upload_from_stream(input_stream);\n    input_stream.close().wait();\n\n    // Create or overwrite the \"my-blob-2\" and \"my-blob-3\" blobs with contents from text.\n    // Retrieve a reference to a blob named \"my-blob-2\".\n    azure::storage::cloud_block_blob blob2 = container.get_block_blob_reference(U(\"my-blob-2\"));\n    blob2.upload_text(U(\"more text\"));\n\n    // Retrieve a reference to a blob named \"my-blob-3\".\n    azure::storage::cloud_block_blob blob3 = container.get_block_blob_reference(U(\"my-directory/my-sub-directory/my-blob-3\"));\n    blob3.upload_text(U(\"other text\"));  \n\n你还可以使用 **upload_from_file** 方法将文件上载到块 blob。\n\n## 如何：列出容器中的 Blob\n若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 **list_blobs** 方法来检索其中的 blob 和/或目录。若要针对一个返回的 **list_blob_item** 访问其丰富的属性和方法，您必须调用 **list_blob_item.as_blob** 方法以获取一个 **cloud_blob** 对象，或调用 **list_blob.as_directory** 方法以获取 cloud_blob_directory 对象。以下代码演示如何检索和输出 **my-sample-container** 容器中每一项的 URI：  \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the blob client.\n    azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\n\n    // Retrieve a reference to a previously created container.\n    azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\n\n    // Output URI of each item.\n    azure::storage::list_blob_item_iterator end_of_results;\n    for (auto it = container.list_blobs(); it != end_of_results; ++it)\n    {\n        if (it->is_blob())\n        {\n            std::wcout << U(\"Blob: \") << it->as_blob().uri().primary_uri().to_string() << std::endl;\n        }\n        else\n        {\n            std::wcout << U(\"Directory: \") << it->as_directory().uri().primary_uri().to_string() << std::endl;\n        }\n    }\n\n有关列出操作的更多详细信息，请参阅[使用 C++ 列出 Azure 存储资源](/documentation/articles/storage-c-plus-plus-enumeration)。\n\n## 如何：下载 Blob\n若要下载 Blob，请首先检索 Blob 引用，然后调用 **download_to_stream** 方法。以下示例使用 **download_to_stream** 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。  \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the blob client.\n    azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\n\n    // Retrieve a reference to a previously created container.\n    azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\n\n    // Retrieve reference to a blob named \"my-blob-1\".\n    azure::storage::cloud_block_blob blockBlob = container.get_block_blob_reference(U(\"my-blob-1\"));\n\n    // Save blob contents to a file.\n    concurrency::streams::container_buffer<std::vector<uint8_t>> buffer;\n    concurrency::streams::ostream output_stream(buffer);\n    blockBlob.download_to_stream(output_stream);\n\n    std::ofstream outfile(\"DownloadBlobFile.txt\", std::ofstream::binary);\n    std::vector<unsigned char>& data = buffer.collection();\n\n    outfile.write((char *)&data[0], buffer.size());\n    outfile.close();  \n\n或者，可以使用 **download_to_file** 方法将 blob 的内容下载到文件。\n此外，也可以使用 **download_text** 方法以文本字符串形式下载 Blob 的内容。  \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the blob client.\n    azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\n\n    // Retrieve a reference to a previously created container.\n    azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\n\n    // Retrieve reference to a blob named \"my-blob-2\".\n    azure::storage::cloud_block_blob text_blob = container.get_block_blob_reference(U(\"my-blob-2\"));\n\n    // Download the contents of a blog as a text string.\n    utility::string_t text = text_blob.download_text();\n\n## 如何：删除 Blob\n若要删除 Blob，请先获取 Blob 引用，然后对其调用 **delete_blob** 方法。  \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the blob client.\n    azure::storage::cloud_blob_client blob_client = storage_account.create_cloud_blob_client();\n\n    // Retrieve a reference to a previously created container.\n    azure::storage::cloud_blob_container container = blob_client.get_container_reference(U(\"my-sample-container\"));\n\n    // Retrieve reference to a blob named \"my-blob-1\".\n    azure::storage::cloud_block_blob blockBlob = container.get_block_blob_reference(U(\"my-blob-1\"));\n\n    // Delete the blob.\n    blockBlob.delete_blob();\n\n## 后续步骤\n既然你已了解 blob 存储的基础知识，请按照下面的链接了解有关 Azure 存储的详细信息。  \n\n-   [如何通过 C++ 使用队列存储](/documentation/articles/storage-c-plus-plus-how-to-use-queues)\n-   [如何通过 C++ 使用表存储](/documentation/articles/storage-c-plus-plus-how-to-use-tables)\n-   [使用 C++ 列出 Azure 存储资源](/documentation/articles/storage-c-plus-plus-enumeration)\n-   [适用于 C++ 的存储空间客户端库参考](http://azure.github.io/azure-storage-cpp)\n-   [Azure 存档文档](/documentation/services/storage/)\n- [使用 AzCopy 命令行实用程序传输数据](/documentation/articles/storage-use-azcopy)\n\n<!---HONumber=Mooncake_0307_2016-->"
}