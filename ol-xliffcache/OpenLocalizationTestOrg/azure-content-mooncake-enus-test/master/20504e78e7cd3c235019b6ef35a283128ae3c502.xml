{
  "nodes": [
    {
      "content": "Azure 通知中心富推送",
      "pos": [
        27,
        40
      ]
    },
    {
      "content": "了解如何从 Azure 将富推送通知发送到 iOS 应用。代码示例是使用 .Objective-C 和 C# 编写的。",
      "pos": [
        59,
        118
      ]
    },
    {
      "content": "Azure 通知中心富推送",
      "pos": [
        344,
        357
      ]
    },
    {
      "content": "概述",
      "pos": [
        362,
        364
      ]
    },
    {
      "pos": [
        366,
        554
      ],
      "content": "为了吸引用户使用即时丰富内容，除纯文本之外，应用程序可能还需要以其他形式进行推送。这些通知将提升用户交互并显示 URL、声音、图像/优惠券等内容。本教程以<bpt id=\"p1\">[</bpt>通知用户<ept id=\"p1\">](/documentation/articles/notification-hubs-aspnet-backend-ios-notify-users)</ept>主题为基础，演示如何发送包含有效负载（例如图像）的推送通知。"
    },
    {
      "content": "本教程适用于 iOS 7 和 8。",
      "pos": [
        556,
        573
      ]
    },
    {
      "content": "在高级别中：",
      "pos": [
        587,
        593
      ]
    },
    {
      "content": "应用后端：",
      "pos": [
        598,
        603
      ]
    },
    {
      "content": "在后端数据库/本地存储中存储富有效负载（在本例中为图像）",
      "pos": [
        610,
        638
      ]
    },
    {
      "content": "向设备发送此富通知的 ID",
      "pos": [
        645,
        658
      ]
    },
    {
      "content": "设备上的应用：",
      "pos": [
        662,
        669
      ]
    },
    {
      "content": "与使用设备接收到的 ID 请求富有效负载的后端进行联系",
      "pos": [
        676,
        703
      ]
    },
    {
      "content": "在数据检索完成后，向用户设备发送通知，并在用户点击“了解详细信息”时立即显示有效负载",
      "pos": [
        710,
        752
      ]
    },
    {
      "content": "WebAPI 项目",
      "pos": [
        758,
        767
      ]
    },
    {
      "pos": [
        772,
        900
      ],
      "content": "在 Visual Studio 中，打开您在<bpt id=\"p1\">[</bpt>通知用户<ept id=\"p1\">](/documentation/articles/notification-hubs-aspnet-backend-ios-notify-users)</ept>教程中创建的 <bpt id=\"p2\">**</bpt>AppBackend<ept id=\"p2\">**</ept> 项目。"
    },
    {
      "pos": [
        904,
        942
      ],
      "content": "获取想要用于通知用户的图像，并将其置于项目目录的 <bpt id=\"p1\">**</bpt>img<ept id=\"p1\">**</ept> 文件夹中。"
    },
    {
      "pos": [
        946,
        992
      ],
      "content": "单击“解决方案资源管理器”中的<bpt id=\"p1\">**</bpt>显示所有文件<ept id=\"p1\">**</ept>，右键单击该文件夹以<bpt id=\"p2\">**</bpt>包括在项目中<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        996,
        1032
      ],
      "content": "通过选定的图像，将“属性”窗口中的“生成操作”更改为<bpt id=\"p1\">**</bpt>嵌入的资源<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        1052,
        1091
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Notifications.cs<ept id=\"p1\">**</ept> 中，添加以下 using 语句："
    },
    {
      "pos": [
        1130,
        1186
      ],
      "content": "使用以下代码更新整个 <bpt id=\"p1\">**</bpt>Notifications<ept id=\"p1\">**</ept> 类。请确保将占位符替换为您的通知中心凭据和图像文件名。"
    },
    {
      "pos": [
        2954,
        3062
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 请参阅<bpt id=\"p1\">[</bpt>如何使用 Visual C# 嵌入和访问资源<ept id=\"p1\">](https://support.microsoft.com/zh-cn/kb/319292)</ept>了解有关如何添加和获取项目资源的详细信息。"
    },
    {
      "pos": [
        3067,
        3178
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>NotificationsController.cs<ept id=\"p1\">**</ept> 中，使用以下代码段重新定义 <bpt id=\"p2\">**</bpt>NotificationsController<ept id=\"p2\">**</ept>。这会将初始无提示的富通知 ID 发送到设备，并允许客户端对图像进行检索："
    },
    {
      "pos": [
        4681,
        4753
      ],
      "content": "现在，我们将此应用重新部署到 Azure 网站，以便可以从所有设备对其进行访问。右键单击 <bpt id=\"p1\">**</bpt>AppBackend<ept id=\"p1\">**</ept> 项目，然后选择“发布”。"
    },
    {
      "pos": [
        4758,
        4868
      ],
      "content": "选择 Azure 网站作为发布目标。使用您的 Azure 帐户登录，选择一个现有的或新的网站，并记下“连接”选项卡中的<bpt id=\"p1\">**</bpt>目标 URL<ept id=\"p1\">**</ept> 属性。在本教程后面的部分中，我们将此 URL 称为<bpt id=\"p2\">*</bpt>后端终结点<ept id=\"p2\">*</ept>。单击“发布”。"
    },
    {
      "content": "修改 iOS 项目",
      "pos": [
        4873,
        4882
      ]
    },
    {
      "pos": [
        4884,
        4937
      ],
      "content": "您已将应用后端修改为只发送通知的 <bpt id=\"p1\">*</bpt>ID<ept id=\"p1\">*</ept>，您将更改您的 iOS 应用以处理该 ID，并从后端检索富消息。"
    },
    {
      "pos": [
        4942,
        4979
      ],
      "content": "打开您的 iOS 项目，并转到<bpt id=\"p1\">**</bpt>目标<ept id=\"p1\">**</ept>部分的主应用目标来启用远程通知。"
    },
    {
      "content": "单击“功能”，开启“背景模式”，并选中“远程通知”复选框。",
      "pos": [
        4984,
        5013
      ]
    },
    {
      "pos": [
        5033,
        5170
      ],
      "content": "转到 <bpt id=\"p1\">**</bpt>Main.storyboard<ept id=\"p1\">**</ept>，并确保您具有<bpt id=\"p2\">[</bpt>通知用户<ept id=\"p2\">](/documentation/articles/notification-hubs-aspnet-backend-ios-notify-users)</ept>教程中的视图控制器（本教程中称为“主页视图控制器”）。"
    },
    {
      "pos": [
        5175,
        5268
      ],
      "content": "将<bpt id=\"p1\">**</bpt>导航控制器<ept id=\"p1\">**</ept>添加到您的情节提要，按住 Ctrl 键并拖动到“主页视图控制器”以便使其作为导航的<bpt id=\"p2\">**</bpt>根视图<ept id=\"p2\">**</ept>。请确保只选中“导航控制器”的“属性检查器”中的“是初始视图控制器”。"
    },
    {
      "pos": [
        5273,
        5342
      ],
      "content": "将<bpt id=\"p1\">**</bpt>视图控制器<ept id=\"p1\">**</ept>添加到情节提要并添加<bpt id=\"p2\">**</bpt>图像视图<ept id=\"p2\">**</ept>。用户单击此通知选择了解详细信息后，会看到此页面。Storyboard 应类似于："
    },
    {
      "pos": [
        5362,
        5437
      ],
      "content": "单击情节提要中的“主页视图控制器”，并确保它将 <bpt id=\"p1\">**</bpt>homeViewController<ept id=\"p1\">**</ept> 作为其“自定义类”和标识检查器下方的“情节提要 ID”。"
    },
    {
      "pos": [
        5442,
        5493
      ],
      "content": "为图像视图控制器执行同样的操作，确保 <bpt id=\"p1\">**</bpt>imageViewController<ept id=\"p1\">**</ept> 充当相应的内容。"
    },
    {
      "pos": [
        5498,
        5551
      ],
      "content": "然后，新建标题为 <bpt id=\"p1\">**</bpt>imageViewController<ept id=\"p1\">**</ept> 的视图控制器类来处理您刚才创建的 UI。"
    },
    {
      "pos": [
        5556,
        5641
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>imageViewController.h<ept id=\"p1\">**</ept> 中，将以下代码添加到控制器的接口声明中。请务必按住 Ctrl 键并从情节提要图像视图拖动到这些属性中，以链接两者："
    },
    {
      "pos": [
        5765,
        5822
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>imageViewController.m<ept id=\"p1\">**</ept> 中，在 <bpt id=\"p2\">**</bpt>viewDidload<ept id=\"p2\">**</ept> 末尾添加以下内容:"
    },
    {
      "pos": [
        5929,
        5963
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> 中，导入您创建的图像控制器："
    },
    {
      "content": "使用以下声明添加接口部分：",
      "pos": [
        6010,
        6023
      ]
    },
    {
      "pos": [
        6487,
        6573
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate<ept id=\"p1\">**</ept> 中，请确保您的应用在 <bpt id=\"p2\">**</bpt>application: didFinishLaunchingWithOptions<ept id=\"p2\">**</ept> 中注册了无提示通知："
    },
    {
      "pos": [
        8797,
        8887
      ],
      "content": "在以下实现中替代 <bpt id=\"p1\">**</bpt>application:didRegisterForRemoteNotificationsWithDeviceToken<ept id=\"p1\">**</ept> 以考虑情节提要 UI 更改情况："
    },
    {
      "pos": [
        9265,
        9359
      ],
      "content": "然后，将以下方法添加到 <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> 以从您的终结点检索图像，并在检索完成后发送本地通知。请确保将占位符 <ph id=\"ph1\">`{backend endpoint}`</ph> 替换为后端终结点："
    },
    {
      "pos": [
        13583,
        13630
      ],
      "content": "使用以下方法打开 <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> 中的图像视图控制器，以处理上述本地通知："
    },
    {
      "content": "运行应用程序",
      "pos": [
        16079,
        16085
      ]
    },
    {
      "content": "在 XCode 中，在物理 iOS 设备上运行此应用（推送通知将无法在模拟器中正常工作）。",
      "pos": [
        16090,
        16135
      ]
    },
    {
      "content": "在 iOS 应用 UI 中，输入相同值的用户名和密码进行身份验证，然后单击“登录”。",
      "pos": [
        16140,
        16182
      ]
    },
    {
      "content": "单击“发送推送”，您应看到应用内警报。如果您单击“详细信息”，将转到您选择要包括在应用后端中的图像。",
      "pos": [
        16187,
        16237
      ]
    },
    {
      "content": "您也可以单击“发送推送”并立即按下设备的主页按钮。几分钟后，您将收到推送通知。如果您点击推送通知或单击“详细信息”，将转到您的应用和富图像内容。",
      "pos": [
        16242,
        16314
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure 通知中心富推送\"\n    description=\"了解如何从 Azure 将富推送通知发送到 iOS 应用。代码示例是使用 .Objective-C 和 C# 编写的。\"\n    documentationCenter=\"ios\"\n    services=\"notification-hubs\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\" />\n\n# Azure 通知中心富推送\n\n## 概述\n\n为了吸引用户使用即时丰富内容，除纯文本之外，应用程序可能还需要以其他形式进行推送。这些通知将提升用户交互并显示 URL、声音、图像/优惠券等内容。本教程以[通知用户](/documentation/articles/notification-hubs-aspnet-backend-ios-notify-users)主题为基础，演示如何发送包含有效负载（例如图像）的推送通知。\n\n本教程适用于 iOS 7 和 8。\n  ![][IOS1]\n\n在高级别中：\n\n1. 应用后端：\n    - 在后端数据库/本地存储中存储富有效负载（在本例中为图像）\n    - 向设备发送此富通知的 ID\n2. 设备上的应用：\n    - 与使用设备接收到的 ID 请求富有效负载的后端进行联系\n    - 在数据检索完成后，向用户设备发送通知，并在用户点击“了解详细信息”时立即显示有效负载\n\n\n## WebAPI 项目\n\n1. 在 Visual Studio 中，打开您在[通知用户](/documentation/articles/notification-hubs-aspnet-backend-ios-notify-users)教程中创建的 **AppBackend** 项目。\n2. 获取想要用于通知用户的图像，并将其置于项目目录的 **img** 文件夹中。\n3. 单击“解决方案资源管理器”中的**显示所有文件**，右键单击该文件夹以**包括在项目中**。\n4. 通过选定的图像，将“属性”窗口中的“生成操作”更改为**嵌入的资源**。\n\n    ![][IOS2]\n\n5. 在 **Notifications.cs** 中，添加以下 using 语句：\n\n        using System.Reflection;\n\n6. 使用以下代码更新整个 **Notifications** 类。请确保将占位符替换为您的通知中心凭据和图像文件名。\n\n        public class Notification {\n            public int Id { get; set; }\n            // Initial notification message to display to users\n            public string Message { get; set; }\n            // Type of rich payload (developer-defined)\n            public string RichType { get; set; }\n            public string Payload { get; set; }\n            public bool Read { get; set; }\n        }\n\n        public class Notifications {\n            public static Notifications Instance = new Notifications();\n\n            private List<Notification> notifications = new List<Notification>();\n\n            public NotificationHubClient Hub { get; set; }\n\n            private Notifications() {\n                // Placeholders: replace with the connection string (with full access) for your notification hub and the hub name from the Azure Management Portal\n                Hub = NotificationHubClient.CreateClientFromConnectionString(\"{conn string with full access}\",  \"{hub name}\");\n            }\n\n            public Notification CreateNotification(string message, string richType, string payload) {\n                var notification = new Notification() {\n                    Id = notifications.Count,\n                    Message = message,\n                    RichType = richType,\n                    Payload = payload,\n                    Read = false\n                };\n\n                notifications.Add(notification);\n\n                return notification;\n            }\n\n            public Stream ReadImage(int id) {\n                var assembly = Assembly.GetExecutingAssembly();\n                // Placeholder: image file name (for example, logo.png).\n                return assembly.GetManifestResourceStream(\"AppBackend.img.{logo.png}\");\n            }\n        }\n\n> [AZURE.NOTE] 请参阅[如何使用 Visual C# 嵌入和访问资源](https://support.microsoft.com/zh-cn/kb/319292)了解有关如何添加和获取项目资源的详细信息。\n\n7. 在 **NotificationsController.cs** 中，使用以下代码段重新定义 **NotificationsController**。这会将初始无提示的富通知 ID 发送到设备，并允许客户端对图像进行检索：\n\n        // Return http response with image binary\n        public HttpResponseMessage Get(int id) {\n            var stream = Notifications.Instance.ReadImage(id);\n\n            var result = new HttpResponseMessage(HttpStatusCode.OK);\n            result.Content = new StreamContent(stream);\n            // Switch in your image extension for \"png\"\n            result.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"image/{png}\");\n\n            return result;\n        }\n\n        // Create rich notification and send initial silent notification (containing id) to client\n        public async Task<HttpResponseMessage> Post() {\n            // Replace the placeholder with image file name\n            var richNotificationInTheBackend = Notifications.Instance.CreateNotification(\"Check this image out!\", \"img\",  \"{logo.png}\");\n\n            var usernameTag = \"username:\" + HttpContext.Current.User.Identity.Name;\n\n            // Silent notification with content available\n            var aboutUser = \"{\\\"aps\\\": {\\\"content-available\\\": 1, \\\"sound\\\":\\\"\\\"}, \\\"richId\\\": \\\"\" + richNotificationInTheBackend.Id.ToString() + \"\\\",  \\\"richMessage\\\": \\\"\" + richNotificationInTheBackend.Message + \"\\\", \\\"richType\\\": \\\"\" + richNotificationInTheBackend.RichType + \"\\\"}\";\n\n            // Send notification to apns\n            await Notifications.Instance.Hub.SendAppleNativeNotificationAsync(aboutUser, usernameTag);\n\n            return Request.CreateResponse(HttpStatusCode.OK);\n        }\n\n8. 现在，我们将此应用重新部署到 Azure 网站，以便可以从所有设备对其进行访问。右键单击 **AppBackend** 项目，然后选择“发布”。\n\n9. 选择 Azure 网站作为发布目标。使用您的 Azure 帐户登录，选择一个现有的或新的网站，并记下“连接”选项卡中的**目标 URL** 属性。在本教程后面的部分中，我们将此 URL 称为*后端终结点*。单击“发布”。\n\n## 修改 iOS 项目\n\n您已将应用后端修改为只发送通知的 *ID*，您将更改您的 iOS 应用以处理该 ID，并从后端检索富消息。\n\n1. 打开您的 iOS 项目，并转到**目标**部分的主应用目标来启用远程通知。\n\n2. 单击“功能”，开启“背景模式”，并选中“远程通知”复选框。\n\n    ![][IOS3]\n\n3. 转到 **Main.storyboard**，并确保您具有[通知用户](/documentation/articles/notification-hubs-aspnet-backend-ios-notify-users)教程中的视图控制器（本教程中称为“主页视图控制器”）。\n\n4. 将**导航控制器**添加到您的情节提要，按住 Ctrl 键并拖动到“主页视图控制器”以便使其作为导航的**根视图**。请确保只选中“导航控制器”的“属性检查器”中的“是初始视图控制器”。\n\n5. 将**视图控制器**添加到情节提要并添加**图像视图**。用户单击此通知选择了解详细信息后，会看到此页面。Storyboard 应类似于：\n\n    ![][IOS4]\n\n6. 单击情节提要中的“主页视图控制器”，并确保它将 **homeViewController** 作为其“自定义类”和标识检查器下方的“情节提要 ID”。\n\n7. 为图像视图控制器执行同样的操作，确保 **imageViewController** 充当相应的内容。\n\n8. 然后，新建标题为 **imageViewController** 的视图控制器类来处理您刚才创建的 UI。\n\n9. 在 **imageViewController.h** 中，将以下代码添加到控制器的接口声明中。请务必按住 Ctrl 键并从情节提要图像视图拖动到这些属性中，以链接两者：\n\n        @property (weak, nonatomic) IBOutlet UIImageView *myImage;\n        @property (strong) UIImage* imagePayload;\n\n10. 在 **imageViewController.m** 中，在 **viewDidload** 末尾添加以下内容:\n\n        // Display the UI Image in UI Image View\n        [self.myImage setImage:self.imagePayload];\n\n11. 在 **AppDelegate.m** 中，导入您创建的图像控制器：\n\n        #import \"imageViewController.h\"\n\n12. 使用以下声明添加接口部分：\n\n        @interface AppDelegate ()\n\n        @property UIImage* imagePayload;\n        @property NSDictionary* userInfo;\n        @property BOOL iOS8;\n\n        // Obtain content from backend with notification id\n        - (void)retrieveRichImageWithId:(int)richId completion: (void(^)(NSError*)) completion;\n\n        // Redirect to Image View Controller after notification interaction\n        - (void)redirectToImageViewWithImage: (UIImage *)img;\n\n        @end\n\n13. 在 **AppDelegate** 中，请确保您的应用在 **application: didFinishLaunchingWithOptions** 中注册了无提示通知：\n\n        // Software version\n        self.iOS8 = [[UIApplication sharedApplication] respondsToSelector:@selector(registerUserNotificationSettings:)] && [[UIApplication sharedApplication] respondsToSelector:@selector(registerForRemoteNotifications)];\n\n        // Register for remote notifications for iOS8 and previous versions\n        if (self.iOS8) {\n            NSLog(@\"This device is running with iOS8.\");\n\n            // Action\n            UIMutableUserNotificationAction *richPushAction = [[UIMutableUserNotificationAction alloc] init];\n            richPushAction.identifier = @\"richPushMore\";\n            richPushAction.activationMode = UIUserNotificationActivationModeForeground;\n            richPushAction.authenticationRequired = NO;\n            richPushAction.title = @\"More\";\n\n            // Notification category\n            UIMutableUserNotificationCategory* richPushCategory = [[UIMutableUserNotificationCategory alloc] init];\n            richPushCategory.identifier = @\"richPush\";\n            [richPushCategory setActions:@[richPushAction] forContext:UIUserNotificationActionContextDefault];\n\n            // Notification categories\n            NSSet* richPushCategories = [NSSet setWithObjects:richPushCategory, nil];\n\n\n            UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound |\n                                                    UIUserNotificationTypeAlert |\n                                                    UIUserNotificationTypeBadge\n                                                                                     categories:richPushCategories];\n\n            [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n            [[UIApplication sharedApplication] registerForRemoteNotifications];\n\n        }\n        else {\n            // Previous iOS versions\n            NSLog(@\"This device is running with iOS7 or earlier versions.\");\n\n            [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeNewsstandContentAvailability];\n        }\n\n        return YES;\n\n14. 在以下实现中替代 **application:didRegisterForRemoteNotificationsWithDeviceToken** 以考虑情节提要 UI 更改情况：\n\n        // Access navigation controller which is at the root of window\n        UINavigationController *nc = (UINavigationController *)self.window.rootViewController;\n        // Get home view controller from stack on navigation controller\n        homeViewController *hvc = (homeViewController *)[nc.viewControllers objectAtIndex:0];\n        hvc.deviceToken = deviceToken;\n\n15. 然后，将以下方法添加到 **AppDelegate.m** 以从您的终结点检索图像，并在检索完成后发送本地通知。请确保将占位符 `{backend endpoint}` 替换为后端终结点：\n\n        NSString *const GetNotificationEndpoint = @\"{backend endpoint}/api/notifications\";\n\n        // Helper: retrieve notification content from backend with rich notification id\n        - (void)retrieveRichImageWithId:(int)richId completion: (void(^)(NSError*)) completion {\n            UINavigationController *nc = (UINavigationController *)self.window.rootViewController;\n            homeViewController *hvc = (homeViewController *)[nc.viewControllers objectAtIndex:0];\n            NSString* authenticationHeader = hvc.registerClient.authenticationHeader;\n            // Check if authenticated\n            if (!authenticationHeader) return;\n\n            NSURLSession* session = [NSURLSession\n                                     sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]\n                                     delegate:nil\n                                     delegateQueue:nil];\n\n            NSURL* requestURL = [NSURL URLWithString:[NSString stringWithFormat:@\"%@/%d\", GetNotificationEndpoint, richId]];\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"GET\"];\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\", authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n\n            NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (!error && httpResponse.statusCode == 200) {\n                    // From NSData to UIImage\n                    self.imagePayload = [UIImage imageWithData:data];\n\n                    completion(nil);\n                }\n                else {\n                    NSLog(@\"Error status: %ld, request: %@\", (long)httpResponse.statusCode, error);\n                    if (error)\n                        completion(error);\n                    else {\n                        completion([NSError errorWithDomain:@\"APICall\" code:httpResponse.statusCode userInfo:nil]);\n                    }\n                }\n            }];\n            [dataTask resume];\n        }\n\n        // Handle silent push notifications when id is sent from backend\n        - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))handler {\n            self.userInfo = userInfo;\n            int richId = [[self.userInfo objectForKey:@\"richId\"] intValue];\n            NSString* richType = [self.userInfo objectForKey:@\"richType\"];\n\n            // Retrieve image data\n            if ([richType isEqualToString:@\"img\"]) {  \n                [self retrieveRichImageWithId:richId completion:^(NSError* error) {\n                    if (!error){\n                        // Send local notification\n                        UILocalNotification* localNotification = [[UILocalNotification alloc] init];\n\n                        // \"5\" is arbitrary here to give you enough time to quit out of the app and receive push notifications\n                        localNotification.fireDate = [NSDate dateWithTimeIntervalSinceNow:5];\n                        localNotification.userInfo = self.userInfo;\n                        localNotification.alertBody = [self.userInfo objectForKey:@\"richMessage\"];\n                        localNotification.timeZone = [NSTimeZone defaultTimeZone];\n\n                        // iOS8 categories\n                        if (self.iOS8) {\n                            localNotification.category = @\"richPush\";\n                        }\n\n                        [[UIApplication sharedApplication] scheduleLocalNotification:localNotification];\n\n                        handler(UIBackgroundFetchResultNewData);\n                    }\n                    else{\n                        handler(UIBackgroundFetchResultFailed);\n                    }\n                }];\n            }\n            // Add \"else if\" here to handle more types of rich content such as url, sound files, etc.\n        }\n\n16. 使用以下方法打开 **AppDelegate.m** 中的图像视图控制器，以处理上述本地通知：\n\n        // Helper: redirect users to image view controller\n        - (void)redirectToImageViewWithImage: (UIImage *)img {\n            UINavigationController *navigationController = (UINavigationController*) self.window.rootViewController;\n            UIStoryboard *mainStoryboard = [UIStoryboard storyboardWithName:@\"Main\"\n                                                                     bundle: nil];\n            imageViewController *imgViewController = [mainStoryboard instantiateViewControllerWithIdentifier: @\"imageViewController\"];\n            // Pass data/image to image view controller\n            imgViewController.imagePayload = img;\n\n            // Redirect\n            [navigationController pushViewController:imgViewController animated:YES];\n        }\n\n        // Handle local notification sent above in didReceiveRemoteNotification\n        - (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification {\n            if (application.applicationState == UIApplicationStateActive) {\n                // Show in-app alert with an extra \"more\" button\n                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Notification\" message:notification.alertBody delegate:self cancelButtonTitle:@\"OK\" otherButtonTitles:@\"More\", nil];\n\n                [alert show];\n            }\n            // App becomes active from user's tap on notification\n            else {\n                [self redirectToImageViewWithImage:self.imagePayload];\n            }\n        }\n\n        // Handle buttons in in-app alerts and redirect with data/image\n        - (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {\n            // Handle \"more\" button\n            if (buttonIndex == 1)\n            {\n                [self redirectToImageViewWithImage:self.imagePayload];\n            }\n            // Add \"else if\" here to handle more buttons\n        }\n\n        // Handle notification setting actions in iOS8\n        - (void)application:(UIApplication *)application handleActionWithIdentifier:(NSString *)identifier forLocalNotification:(UILocalNotification *)notification completionHandler:(void (^)())completionHandler {\n            // Handle richPush related buttons\n            if ([identifier isEqualToString:@\"richPushMore\"]) {\n                [self redirectToImageViewWithImage:self.imagePayload];\n            }\n            completionHandler();\n        }\n\n## 运行应用程序\n\n1. 在 XCode 中，在物理 iOS 设备上运行此应用（推送通知将无法在模拟器中正常工作）。\n\n2. 在 iOS 应用 UI 中，输入相同值的用户名和密码进行身份验证，然后单击“登录”。\n\n3. 单击“发送推送”，您应看到应用内警报。如果您单击“详细信息”，将转到您选择要包括在应用后端中的图像。\n\n4. 您也可以单击“发送推送”并立即按下设备的主页按钮。几分钟后，您将收到推送通知。如果您点击推送通知或单击“详细信息”，将转到您的应用和富图像内容。\n\n\n[IOS1]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-1.png\n[IOS2]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-2.png\n[IOS3]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-3.png\n[IOS4]: ./media/notification-hubs-aspnet-backend-ios-rich-push/rich-push-ios-4.png\n\n<!---HONumber=Mooncake_0104_2016-->"
}