{
  "nodes": [
    {
      "content": "在 HDinsight 上的 Storm 拓扑中使用 Python 组件 | Azure",
      "pos": [
        26,
        70
      ]
    },
    {
      "content": "了解如何在 Azure HDInsight 上的 Apache Storm 中使用 Python 组件。你将学习如何通过基于 Java 和 Clojure 的 Storm 拓扑使用 Python 组件。",
      "pos": [
        88,
        189
      ]
    },
    {
      "content": "在 HDInsight 上使用 Python 开发 Apache Storm 拓扑",
      "pos": [
        399,
        440
      ]
    },
    {
      "content": "Apache Storm 支持多种语言，甚至可让你将多种语言的组件合并成一个拓扑。在本文档中，你将学习如何在 HDInsight 上的基于 Java 和 Clojure 的 Storm 拓扑中使用 Python 组件。",
      "pos": [
        442,
        551
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        555,
        559
      ]
    },
    {
      "content": "Python 2.7 或更高版本",
      "pos": [
        563,
        579
      ]
    },
    {
      "content": "Java JDK 1.7 或更高版本",
      "pos": [
        583,
        601
      ]
    },
    {
      "content": "Leiningen",
      "pos": [
        606,
        615
      ]
    },
    {
      "content": "Storm 多语言支持",
      "pos": [
        643,
        654
      ]
    },
    {
      "pos": [
        656,
        1068
      ],
      "content": "Storm 在设计上可与使用任何编程语言编写的组件配合使用，但这些组件必须知道如何使用 <bpt id=\"p1\">[</bpt>Storm 的 Thrift 定义<ept id=\"p1\">](https://github.com/apache/storm/blob/master/storm-core/src/storm.thrift)</ept>。在 Python 中，Apache Storm 项目随附了一个可让你轻松与 Strom 交互的模块。你可以在 <bpt id=\"p2\">[</bpt>https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py<ept id=\"p2\">](https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py)</ept> 上找到此模块。"
    },
    {
      "pos": [
        1070,
        1286
      ],
      "content": "由于 Apache Storm 是在 Java 虚拟机 (JVM) 上运行的 Java 进程，以其他语言编写的组件将以子进程的形式执行。JVM 中运行的 Storm 代码使用通过 stdin/stdout 发送的 JSON 消息来与这些子进程通信。有关各组件之间通信的详细信息，请参阅<bpt id=\"p1\">[</bpt>多语言协议<ept id=\"p1\">](https://storm.apache.org/documentation/Multilang-protocol.html)</ept>文档。"
    },
    {
      "content": "Storm 模块",
      "pos": [
        1291,
        1299
      ]
    },
    {
      "content": "Storm 模块 (https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py,) 提供所需的代码用于创建可与 Storm 配合使用的 Python 组件。",
      "pos": [
        1301,
        1454
      ]
    },
    {
      "pos": [
        1456,
        1527
      ],
      "content": "例如，<ph id=\"ph1\">`storm.emit`</ph> 可以发出 Tuple，<ph id=\"ph2\">`storm.logInfo`</ph> 可以写入日志。建议通读本文件，以了解该模块所提供的功能。"
    },
    {
      "content": "挑战",
      "pos": [
        1531,
        1533
      ]
    },
    {
      "pos": [
        1535,
        1685
      ],
      "content": "借助 <bpt id=\"p1\">__</bpt>storm.py<ept id=\"p1\">__</ept> 模块可以创建 Python spout 来使用数据、创建 Bolt 来处理数据，但是，负责在组件之间建立通信的整个 Storm 拓扑定义仍需使用 Java 或 Clojure 编写。此外，如果你使用 Java，还必须创建充当 Python 组件接口的 Java 组件。"
    },
    {
      "content": "此外，由于 Storm 群集以分布方式运行，因此你必须确保 Python 组件所需的任何模块可供群集中的所有辅助节点使用。对于多语言资源，Storm 无法让你轻松实现此目的 - 你必须将所有依赖项包含在拓扑的 jar 文件中，或者在群集的每个辅助节点上手动安装依赖项。",
      "pos": [
        1687,
        1821
      ]
    },
    {
      "content": "Java 与Clojure 拓扑定义的比较",
      "pos": [
        1826,
        1847
      ]
    },
    {
      "content": "在两种定义拓扑的方法，Clojure 是目前为止最简单直接的方法，因为你可以在拓朴定义中直接引用 python 组件。对于基于 Java 的拓朴定义，你还必须定义 Java 组件用于处理一些操作，例如在 Python 组件返回的 Tuple 中声明字段。",
      "pos": [
        1849,
        1976
      ]
    },
    {
      "content": "本文档将介绍这两种方法，并附上示例项目。",
      "pos": [
        1978,
        1998
      ]
    },
    {
      "content": "使用 Java 拓扑的 Python 组件",
      "pos": [
        2002,
        2023
      ]
    },
    {
      "pos": [
        2027,
        2379
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此示例位于 <bpt id=\"p1\">[</bpt>https://github.com/Azure-Samples/hdinsight-python-storm-wordcount<ept id=\"p1\">](https://github.com/Azure-Samples/hdinsight-python-storm-wordcount)</ept> 上的 <bpt id=\"p2\">__</bpt>JavaTopology<ept id=\"p2\">__</ept> 目录中。这是一个基于 Maven 的项目。如果你不熟悉 Maven，请参阅<bpt id=\"p3\">[</bpt>在 HDInsight 上使用 Apache Storm 开发基于 Java 的拓扑<ept id=\"p3\">](/documentation/articles/hdinsight-storm-develop-java-topology)</ept>，以获取有关如何为 Storm 拓扑创建 Maven 项目的详细信息。"
    },
    {
      "content": "使用 Python（或其他 JVM 语言组件）的基于 Java 的拓朴乍看之下是使用了 Java 组件，但如果你仔细查看每个 Java Spout/Bolt，将看到类似于以下代码：",
      "pos": [
        2381,
        2471
      ]
    },
    {
      "content": "Java 在此处调用 Python，并运行包含实际 Blot 逻辑的脚本。Java Spout/Bolt（对于本示例）只是在基础 Python 组件要发出的 Tuple 中声明字段。",
      "pos": [
        2546,
        2637
      ]
    },
    {
      "pos": [
        2639,
        2721
      ],
      "content": "在本示例中，实际 Python 文件存储在 <ph id=\"ph1\">`/multilang/resources`</ph> 目录中。<ph id=\"ph2\">`/multilang`</ph> 目录在 <bpt id=\"p1\">__</bpt>pom.xml<ept id=\"p1\">__</ept> 中引用："
    },
    {
      "pos": [
        2904,
        2948
      ],
      "content": "这会将 <ph id=\"ph1\">`/multilang`</ph> 文件夹中的所有文件包含在基于此项目构建的 jar 中。"
    },
    {
      "pos": [
        2952,
        3187
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>请注意，这只会指定 <ph id=\"ph2\">`/multilang`</ph> 目录，而不是 <ph id=\"ph3\">`/multilang/resources`</ph>。Storm 预期非 JVM 资源都位于 <ph id=\"ph4\">`resources`</ph> 目录中，因此已在内部查找过该目录。将组件放入此文件夹可以在 Java 代码中直接按名称引用。例如，<ph id=\"ph5\">`super(\"python\", \"countbolt.py\");`</ph>。另一种思路是 Storm 在访问多语言资源时会将 <ph id=\"ph6\">`resources`</ph> 目录视为根目录 (/)。"
    },
    {
      "content": "针对本示例项目，<ph id=\"ph1\">`storm.py`</ph> 模块位于 <ph id=\"ph2\">`/multilang/resources`</ph> 目录中。",
      "pos": [
        3193,
        3244
      ]
    },
    {
      "content": "构建并运行项目",
      "pos": [
        3249,
        3256
      ]
    },
    {
      "content": "若要在本地运行此项目，只需使用以下 Maven 命令构建并以本地模式运行此项目：",
      "pos": [
        3258,
        3298
      ]
    },
    {
      "content": "使用 Ctrl+C 可终止进程。",
      "pos": [
        3376,
        3392
      ]
    },
    {
      "content": "若要将项目部署到运行 Apache Storm 的 HDInsight 群集，请使用以下步骤：",
      "pos": [
        3394,
        3441
      ]
    },
    {
      "content": "构建 uber jar：",
      "pos": [
        3446,
        3458
      ]
    },
    {
      "pos": [
        3485,
        3547
      ],
      "content": "这会在此项目的 <ph id=\"ph1\">`/target`</ph> 目录中创建名为 <bpt id=\"p1\">__</bpt>WordCount--1.0-SNAPSHOT.jar<ept id=\"p1\">__</ept> 的文件。"
    },
    {
      "content": "使用以下方法之一将 jar 文件上载到 Hadoop 群集：",
      "pos": [
        3552,
        3582
      ]
    },
    {
      "pos": [
        3590,
        3737
      ],
      "content": "对于<bpt id=\"p1\">__</bpt>基于 Windows<ept id=\"p1\">__</ept> 的 HDInsight 群集：在浏览器中转到 HTTPS://CLUSTERNAME.azurehdinsight.cn/，以连接到 Storm 仪表板。将 CLUSTERNAME 替换为你的 HDInsight 群集名称，并在出现提示时提供管理员名称和密码。"
    },
    {
      "content": "使用窗体执行以下操作：",
      "pos": [
        3747,
        3758
      ]
    },
    {
      "pos": [
        3770,
        3826
      ],
      "content": "<bpt id=\"p1\">__</bpt>Jar 文件<ept id=\"p1\">__</ept>：选择“浏览”，然后选择 <bpt id=\"p2\">__</bpt>WordCount-1.0-SNAPSHOT.jar<ept id=\"p2\">__</ept> 文件"
    },
    {
      "pos": [
        3837,
        3880
      ],
      "content": "<bpt id=\"p1\">__</bpt>类名<ept id=\"p1\">__</ept>：输入 <ph id=\"ph1\">`com.microsoft.example.WordCount`</ph>"
    },
    {
      "pos": [
        3891,
        3930
      ],
      "content": "<bpt id=\"p1\">__</bpt>其他参数<ept id=\"p1\">__</ept>：输入一个用于标识拓扑的友好名称，例如 <ph id=\"ph1\">`wordcount`</ph>"
    },
    {
      "content": "最后，选择“提交”以启动拓扑。",
      "pos": [
        3940,
        3955
      ]
    },
    {
      "pos": [
        3959,
        4074
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>Storm 拓扑在启动之后将一直运行，直到被停止（终止）。 若要停止拓扑，请从命令行使用 <ph id=\"ph2\">`storm kill TOPOLOGYNAME`</ph> 命令，或使用 Storm UI 选择拓扑，然后选择“终止”按钮。"
    },
    {
      "content": "使用 Clojure 拓扑的 Python 组件",
      "pos": [
        4078,
        4102
      ]
    },
    {
      "pos": [
        4106,
        4286
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此示例位于 <bpt id=\"p1\">[</bpt>https://github.com/Azure-Samples/hdinsight-python-storm-wordcount<ept id=\"p1\">](https://github.com/Azure-Samples/hdinsight-python-storm-wordcount)</ept> 上的 <bpt id=\"p2\">__</bpt>ClojureTopology<ept id=\"p2\">__</ept> 目录中。"
    },
    {
      "pos": [
        4288,
        4457
      ],
      "content": "此拓扑是使用 <bpt id=\"p1\">[</bpt>Leiningen<ept id=\"p1\">](http://leiningen.org)</ept> 创建的，用于<bpt id=\"p2\">[</bpt>创建新的 Clojure 项目<ept id=\"p2\">](https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md#creating-a-project)</ept>。之后，对基架项目做了以下修改："
    },
    {
      "pos": [
        4461,
        4525
      ],
      "content": "<bpt id=\"p1\">__</bpt>project.clj<ept id=\"p1\">__</ept>：为 Storm 添加的依赖项，以及在部署到 HDInsight 服务器时可能会造成问题的排除项。"
    },
    {
      "pos": [
        4528,
        4743
      ],
      "content": "<bpt id=\"p1\">__</bpt>resources/resources<ept id=\"p1\">__</ept>：Leiningen 将创建默认的 <ph id=\"ph1\">`resources`</ph> 目录，但是，此处存储的文件似乎已添加到基于此项目创建的 jar 文件所在的根目录，但 Storm 预期这些文件位于名为 <ph id=\"ph2\">`resources`</ph> 的子目录中。因此添加了一个子目录，而 Python 文件就存储在 <ph id=\"ph3\">`resources/resources`</ph> 中。在运行时，此目录被视为访问 Python 组件时的根目录 (/)。"
    },
    {
      "pos": [
        4746,
        4913
      ],
      "content": "<bpt id=\"p1\">__</bpt>src/wordcount/core.clj<ept id=\"p1\">__</ept>：此文件包含拓扑定义，并通过 <bpt id=\"p2\">__</bpt>project.clj<ept id=\"p2\">__</ept> 文件引用。有关使用 Clojure 定义 Storm 拓扑的详细信息，请参阅 <bpt id=\"p3\">[</bpt>Clojure DSL<ept id=\"p3\">](https://storm.apache.org/documentation/Clojure-DSL.html)</ept>。"
    },
    {
      "content": "构建并运行项目",
      "pos": [
        4918,
        4925
      ]
    },
    {
      "pos": [
        4927,
        4952
      ],
      "content": "<bpt id=\"p1\">__</bpt>若要在本地构建并运行项目<ept id=\"p1\">__</ept>，请使用以下命令："
    },
    {
      "pos": [
        4978,
        5000
      ],
      "content": "若要停止拓扑，请使用 <bpt id=\"p1\">__</bpt>Ctrl+C<ept id=\"p1\">__</ept>。"
    },
    {
      "pos": [
        5002,
        5042
      ],
      "content": "<bpt id=\"p1\">__</bpt>若要构建 Uberjar 并部署到 HDInsight<ept id=\"p1\">__</ept>，请使用以下步骤："
    },
    {
      "content": "创建包含拓扑和所需依赖项的 uberjar：",
      "pos": [
        5047,
        5069
      ]
    },
    {
      "pos": [
        5097,
        5168
      ],
      "content": "这会在 <ph id=\"ph1\">`target\\uberjar+uberjar`</ph> 目录中创建名为 <ph id=\"ph2\">`wordcount-1.0-SNAPSHOT.jar`</ph> 的新文件。"
    },
    {
      "content": "使用以下方法之一将拓扑部署到 HDInsight 群集并运行该拓扑：",
      "pos": [
        5177,
        5211
      ]
    },
    {
      "content": "基于 Windows 的 HDInsight",
      "pos": [
        5225,
        5247
      ]
    },
    {
      "content": "在浏览器中转到 HTTPS://CLUSTERNAME.azurehdinsight.cn/，以连接到 Storm 仪表板。将 CLUSTERNAME 替换为你的 HDInsight 群集名称，并在出现提示时提供管理员名称和密码。",
      "pos": [
        5266,
        5381
      ]
    },
    {
      "content": "使用窗体执行以下操作：",
      "pos": [
        5394,
        5405
      ]
    },
    {
      "pos": [
        5421,
        5477
      ],
      "content": "<bpt id=\"p1\">__</bpt>Jar 文件<ept id=\"p1\">__</ept>：选择“浏览”，然后选择 <bpt id=\"p2\">__</bpt>wordcount-1.0-SNAPSHOT.jar<ept id=\"p2\">__</ept> 文件"
    },
    {
      "pos": [
        5492,
        5518
      ],
      "content": "<bpt id=\"p1\">__</bpt>类名<ept id=\"p1\">__</ept>：输入 <ph id=\"ph1\">`wordcount.core`</ph>"
    },
    {
      "pos": [
        5533,
        5572
      ],
      "content": "<bpt id=\"p1\">__</bpt>其他参数<ept id=\"p1\">__</ept>：输入一个用于标识拓扑的友好名称，例如 <ph id=\"ph1\">`wordcount`</ph>"
    },
    {
      "content": "最后，选择“提交”以启动拓扑。",
      "pos": [
        5586,
        5601
      ]
    },
    {
      "pos": [
        5605,
        5720
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>Storm 拓扑在启动之后将一直运行，直到被停止（终止）。 若要停止拓扑，请从命令行使用 <ph id=\"ph2\">`storm kill TOPOLOGYNAME`</ph> 命令，或使用 Storm UI 选择拓扑，然后选择“终止”按钮。"
    },
    {
      "content": "后续步骤",
      "pos": [
        5724,
        5728
      ]
    },
    {
      "content": "在本文档中，你已学习如何通过 Storm 拓扑使用 Python 组件。请参阅以下文档，了解将 Python 与 HDInsight 配合使用的其他方式：",
      "pos": [
        5730,
        5807
      ]
    },
    {
      "content": "如何在 Pig 和 Hive 中使用 Python 用户定义的函数 (UDF)",
      "pos": [
        5812,
        5851
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"在 HDinsight 上的 Storm 拓扑中使用 Python 组件 | Azure\"\n   description=\"了解如何在 Azure HDInsight 上的 Apache Storm 中使用 Python 组件。你将学习如何通过基于 Java 和 Clojure 的 Storm 拓扑使用 Python 组件。\"\n   services=\"hdinsight\"\n   documentationCenter=\"\"\n   authors=\"Blackmist\"\n   manager=\"paulettm\"\n   editor=\"cgronlun\"/>\n\n<tags\n    ms.service=\"hdinsight\"\n    ms.date=\"12/04/2015\"\n    wacn.date=\"02/17/2016\"/>\n\n#在 HDInsight 上使用 Python 开发 Apache Storm 拓扑\n\nApache Storm 支持多种语言，甚至可让你将多种语言的组件合并成一个拓扑。在本文档中，你将学习如何在 HDInsight 上的基于 Java 和 Clojure 的 Storm 拓扑中使用 Python 组件。\n\n##先决条件\n\n* Python 2.7 或更高版本\n\n* Java JDK 1.7 或更高版本\n\n* [Leiningen](http://leiningen.org/)\n\n##Storm 多语言支持\n\nStorm 在设计上可与使用任何编程语言编写的组件配合使用，但这些组件必须知道如何使用 [Storm 的 Thrift 定义](https://github.com/apache/storm/blob/master/storm-core/src/storm.thrift)。在 Python 中，Apache Storm 项目随附了一个可让你轻松与 Strom 交互的模块。你可以在 [https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py](https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py) 上找到此模块。\n\n由于 Apache Storm 是在 Java 虚拟机 (JVM) 上运行的 Java 进程，以其他语言编写的组件将以子进程的形式执行。JVM 中运行的 Storm 代码使用通过 stdin/stdout 发送的 JSON 消息来与这些子进程通信。有关各组件之间通信的详细信息，请参阅[多语言协议](https://storm.apache.org/documentation/Multilang-protocol.html)文档。\n\n###Storm 模块\n\nStorm 模块 (https://github.com/apache/storm/blob/master/storm-multilang/python/src/main/resources/resources/storm.py,) 提供所需的代码用于创建可与 Storm 配合使用的 Python 组件。\n\n例如，`storm.emit` 可以发出 Tuple，`storm.logInfo` 可以写入日志。建议通读本文件，以了解该模块所提供的功能。\n\n##挑战\n\n借助 __storm.py__ 模块可以创建 Python spout 来使用数据、创建 Bolt 来处理数据，但是，负责在组件之间建立通信的整个 Storm 拓扑定义仍需使用 Java 或 Clojure 编写。此外，如果你使用 Java，还必须创建充当 Python 组件接口的 Java 组件。\n\n此外，由于 Storm 群集以分布方式运行，因此你必须确保 Python 组件所需的任何模块可供群集中的所有辅助节点使用。对于多语言资源，Storm 无法让你轻松实现此目的 - 你必须将所有依赖项包含在拓扑的 jar 文件中，或者在群集的每个辅助节点上手动安装依赖项。\n\n###Java 与Clojure 拓扑定义的比较\n\n在两种定义拓扑的方法，Clojure 是目前为止最简单直接的方法，因为你可以在拓朴定义中直接引用 python 组件。对于基于 Java 的拓朴定义，你还必须定义 Java 组件用于处理一些操作，例如在 Python 组件返回的 Tuple 中声明字段。\n\n本文档将介绍这两种方法，并附上示例项目。\n\n##使用 Java 拓扑的 Python 组件\n\n> [AZURE.NOTE]此示例位于 [https://github.com/Azure-Samples/hdinsight-python-storm-wordcount](https://github.com/Azure-Samples/hdinsight-python-storm-wordcount) 上的 __JavaTopology__ 目录中。这是一个基于 Maven 的项目。如果你不熟悉 Maven，请参阅[在 HDInsight 上使用 Apache Storm 开发基于 Java 的拓扑](/documentation/articles/hdinsight-storm-develop-java-topology)，以获取有关如何为 Storm 拓扑创建 Maven 项目的详细信息。\n\n使用 Python（或其他 JVM 语言组件）的基于 Java 的拓朴乍看之下是使用了 Java 组件，但如果你仔细查看每个 Java Spout/Bolt，将看到类似于以下代码：\n\n    public SplitBolt() {\n        super(\"python\", \"countbolt.py\");\n    }\n\nJava 在此处调用 Python，并运行包含实际 Blot 逻辑的脚本。Java Spout/Bolt（对于本示例）只是在基础 Python 组件要发出的 Tuple 中声明字段。\n\n在本示例中，实际 Python 文件存储在 `/multilang/resources` 目录中。`/multilang` 目录在 __pom.xml__ 中引用：\n\n    <resources>\n        <resource>\n            <!-- Where the Python bits are kept -->\n            <directory>${basedir}/multilang</directory>\n        </resource>\n    </resources>\n\n这会将 `/multilang` 文件夹中的所有文件包含在基于此项目构建的 jar 中。\n\n> [AZURE.IMPORTANT]请注意，这只会指定 `/multilang` 目录，而不是 `/multilang/resources`。Storm 预期非 JVM 资源都位于 `resources` 目录中，因此已在内部查找过该目录。将组件放入此文件夹可以在 Java 代码中直接按名称引用。例如，`super(\"python\", \"countbolt.py\");`。另一种思路是 Storm 在访问多语言资源时会将 `resources` 目录视为根目录 (/)。\n> <p>针对本示例项目，`storm.py` 模块位于 `/multilang/resources` 目录中。\n\n###构建并运行项目\n\n若要在本地运行此项目，只需使用以下 Maven 命令构建并以本地模式运行此项目：\n\n    mvn compile exec:java -Dstorm.topology=com.microsoft.example.WordCount\n\n使用 Ctrl+C 可终止进程。\n\n若要将项目部署到运行 Apache Storm 的 HDInsight 群集，请使用以下步骤：\n\n1. 构建 uber jar：\n\n        mvn package\n\n    这会在此项目的 `/target` 目录中创建名为 __WordCount--1.0-SNAPSHOT.jar__ 的文件。\n\n2. 使用以下方法之一将 jar 文件上载到 Hadoop 群集：\n\n    * 对于__基于 Windows__ 的 HDInsight 群集：在浏览器中转到 HTTPS://CLUSTERNAME.azurehdinsight.cn/，以连接到 Storm 仪表板。将 CLUSTERNAME 替换为你的 HDInsight 群集名称，并在出现提示时提供管理员名称和密码。\n\n        使用窗体执行以下操作：\n\n        * __Jar 文件__：选择“浏览”，然后选择 __WordCount-1.0-SNAPSHOT.jar__ 文件\n        * __类名__：输入 `com.microsoft.example.WordCount`\n        * __其他参数__：输入一个用于标识拓扑的友好名称，例如 `wordcount`\n\n        最后，选择“提交”以启动拓扑。\n\n> [AZURE.NOTE]Storm 拓扑在启动之后将一直运行，直到被停止（终止）。 若要停止拓扑，请从命令行使用 `storm kill TOPOLOGYNAME` 命令，或使用 Storm UI 选择拓扑，然后选择“终止”按钮。\n\n##使用 Clojure 拓扑的 Python 组件\n\n> [AZURE.NOTE]此示例位于 [https://github.com/Azure-Samples/hdinsight-python-storm-wordcount](https://github.com/Azure-Samples/hdinsight-python-storm-wordcount) 上的 __ClojureTopology__ 目录中。\n\n此拓扑是使用 [Leiningen](http://leiningen.org) 创建的，用于[创建新的 Clojure 项目](https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md#creating-a-project)。之后，对基架项目做了以下修改：\n\n* __project.clj__：为 Storm 添加的依赖项，以及在部署到 HDInsight 服务器时可能会造成问题的排除项。\n* __resources/resources__：Leiningen 将创建默认的 `resources` 目录，但是，此处存储的文件似乎已添加到基于此项目创建的 jar 文件所在的根目录，但 Storm 预期这些文件位于名为 `resources` 的子目录中。因此添加了一个子目录，而 Python 文件就存储在 `resources/resources` 中。在运行时，此目录被视为访问 Python 组件时的根目录 (/)。\n* __src/wordcount/core.clj__：此文件包含拓扑定义，并通过 __project.clj__ 文件引用。有关使用 Clojure 定义 Storm 拓扑的详细信息，请参阅 [Clojure DSL](https://storm.apache.org/documentation/Clojure-DSL.html)。\n\n###构建并运行项目\n\n__若要在本地构建并运行项目__，请使用以下命令：\n\n    lein do clean, run\n\n若要停止拓扑，请使用 __Ctrl+C__。\n\n__若要构建 Uberjar 并部署到 HDInsight__，请使用以下步骤：\n\n1. 创建包含拓扑和所需依赖项的 uberjar：\n\n        lein uberjar\n\n    这会在 `target\\uberjar+uberjar` 目录中创建名为 `wordcount-1.0-SNAPSHOT.jar` 的新文件。\n    \n2. 使用以下方法之一将拓扑部署到 HDInsight 群集并运行该拓扑：\n    \n    * __基于 Windows 的 HDInsight__\n    \n        1. 在浏览器中转到 HTTPS://CLUSTERNAME.azurehdinsight.cn/，以连接到 Storm 仪表板。将 CLUSTERNAME 替换为你的 HDInsight 群集名称，并在出现提示时提供管理员名称和密码。\n\n        2. 使用窗体执行以下操作：\n\n            * __Jar 文件__：选择“浏览”，然后选择 __wordcount-1.0-SNAPSHOT.jar__ 文件\n            * __类名__：输入 `wordcount.core`\n            * __其他参数__：输入一个用于标识拓扑的友好名称，例如 `wordcount`\n\n            最后，选择“提交”以启动拓扑。\n\n> [AZURE.NOTE]Storm 拓扑在启动之后将一直运行，直到被停止（终止）。 若要停止拓扑，请从命令行使用 `storm kill TOPOLOGYNAME` 命令，或使用 Storm UI 选择拓扑，然后选择“终止”按钮。\n\n##后续步骤\n\n在本文档中，你已学习如何通过 Storm 拓扑使用 Python 组件。请参阅以下文档，了解将 Python 与 HDInsight 配合使用的其他方式：\n\n* [如何在 Pig 和 Hive 中使用 Python 用户定义的函数 (UDF)](/documentation/articles/hdinsight-python)\n\n<!---HONumber=82-->"
}