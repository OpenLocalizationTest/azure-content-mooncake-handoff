{
  "nodes": [
    {
      "content": "如何通过 Ruby 使用表存储 | Azure",
      "pos": [
        28,
        51
      ]
    },
    {
      "content": "了解如何使用 Azure 中的 Azure 表存储。相关代码示例是使用 Ruby API 编写的。",
      "pos": [
        71,
        120
      ]
    },
    {
      "content": "如何通过 Ruby 使用 Azure 表存储",
      "pos": [
        330,
        352
      ]
    },
    {
      "content": "概述",
      "pos": [
        454,
        456
      ]
    },
    {
      "content": "本指南演示如何使用 Azure 表服务执行常见任务。相关示例是使用 Ruby API 编写的。涉及的方案包括“创建和删除表、在表中插入和查询实体”。",
      "pos": [
        458,
        532
      ]
    },
    {
      "content": "创建 Ruby 应用程序",
      "pos": [
        731,
        743
      ]
    },
    {
      "pos": [
        745,
        859
      ],
      "content": "有关如何创建 Ruby 应用程序的说明，请参阅<bpt id=\"p1\">[</bpt>在 Azure 中创建 Ruby 应用程序<ept id=\"p1\">](/documentation/articles/virtual-machines-ruby-rails-web-app-linux)</ept>。"
    },
    {
      "content": "配置应用程序以访问存储",
      "pos": [
        864,
        875
      ]
    },
    {
      "content": "要使用 Azure 存储空间，你需要下载和使用 Ruby azure 包，其中包括一组便于与存储 REST 服务进行通信的库。",
      "pos": [
        877,
        940
      ]
    },
    {
      "content": "使用 RubyGems 获取该程序包",
      "pos": [
        946,
        964
      ]
    },
    {
      "pos": [
        969,
        1042
      ],
      "content": "使用命令行接口，例如 <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows)、<bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac) 或 <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix)。"
    },
    {
      "pos": [
        1047,
        1091
      ],
      "content": "在命令窗口中键入 <bpt id=\"p1\">**</bpt>gem install azure<ept id=\"p1\">**</ept> 以安装 gem 和依赖项。"
    },
    {
      "content": "导入包",
      "pos": [
        1097,
        1100
      ]
    },
    {
      "content": "使用常用的文本编辑器将以下内容添加到你要在其中使用存储的 Ruby 文件的顶部：",
      "pos": [
        1102,
        1142
      ]
    },
    {
      "content": "设置 Azure 存储连接",
      "pos": [
        1168,
        1181
      ]
    },
    {
      "pos": [
        1183,
        1338
      ],
      "content": "Azure 模块将读取环境变量 <bpt id=\"p1\">**</bpt>AZURE_STORAGE_ACCOUNT<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>AZURE_STORAGE_ACCESS_KEY<ept id=\"p2\">**</ept>，以便获取连接到 Azure 存储帐户所需的信息。如果未设置这些环境变量，则在使用 <bpt id=\"p3\">**</bpt>Azure::TableService<ept id=\"p3\">**</ept> 之前必须通过以下代码指定帐户信息："
    },
    {
      "content": "获取这些值：",
      "pos": [
        1484,
        1490
      ]
    },
    {
      "pos": [
        1495,
        1545
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn/)</ept>。"
    },
    {
      "content": "导航到你的存储帐户。",
      "pos": [
        1550,
        1560
      ]
    },
    {
      "content": "单击导航窗格底部的“管理密钥”。",
      "pos": [
        1565,
        1581
      ]
    },
    {
      "content": "在弹出对话框中，将会看到存储帐户名称、主访问密钥和辅助访问密钥。对于访问密钥，你可以使用主访问密钥，也可以使用辅助访问密钥。",
      "pos": [
        1586,
        1648
      ]
    },
    {
      "content": "创建表",
      "pos": [
        1653,
        1656
      ]
    },
    {
      "pos": [
        1658,
        1750
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>Azure::TableService<ept id=\"p1\">**</ept> 对象可以对表和实体进行操作。若要创建表，请使用 <bpt id=\"p2\">**</bpt>create_table()<ept id=\"p2\">**</ept> 方法。以下示例将创建一个表或输出存在的错误。"
    },
    {
      "content": "将实体添加到表",
      "pos": [
        1901,
        1908
      ]
    },
    {
      "pos": [
        1910,
        2128
      ],
      "content": "若要添加实体，应首先创建一个定义了你的实体属性的哈希对象。请注意，对于每个实体，您必须指定 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept>。这些值是实体的唯一标识符，并且查询它们比查询其他属性快很多。Azure 存储服务使用 <bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 自动将表的实体分发到多个存储节点上。具有相同的 <bpt id=\"p4\">**</bpt>PartitionKey<ept id=\"p4\">**</ept> 的实体存储在同一个节点上。<bpt id=\"p5\">**</bpt>RowKey<ept id=\"p5\">**</ept> 是实体在其所属分区内的唯一 ID。"
    },
    {
      "content": "更新实体",
      "pos": [
        2298,
        2302
      ]
    },
    {
      "content": "可使用多种方法来更新现有实体：",
      "pos": [
        2304,
        2319
      ]
    },
    {
      "pos": [
        2323,
        2359
      ],
      "content": "<bpt id=\"p1\">**</bpt>update_entity()：<ept id=\"p1\">**</ept>通过替换现有实体来更新现有实体。"
    },
    {
      "pos": [
        2362,
        2403
      ],
      "content": "<bpt id=\"p1\">**</bpt>merge_entity()：<ept id=\"p1\">**</ept>通过将新属性值合并到现有实体来更新现有实体。"
    },
    {
      "pos": [
        2406,
        2468
      ],
      "content": "<bpt id=\"p1\">**</bpt>insert_or_merge_entity()：<ept id=\"p1\">**</ept>通过替换现有实体来更新现有实体。如果不存在实体，将插入一个新实体。"
    },
    {
      "pos": [
        2471,
        2541
      ],
      "content": "<bpt id=\"p1\">**</bpt>insert_or_replace_entity()：<ept id=\"p1\">**</ept>通过将新属性值合并到现有实体来更新现有实体。如果不存在实体，将插入一个新实体。"
    },
    {
      "pos": [
        2543,
        2578
      ],
      "content": "以下示例演示了使用 <bpt id=\"p1\">**</bpt>update_entity()<ept id=\"p1\">**</ept> 更新实体："
    },
    {
      "pos": [
        2766,
        2923
      ],
      "content": "对于 <bpt id=\"p1\">**</bpt>update_entity()<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>merge_entity()<ept id=\"p2\">**</ept>，如果待更新的实体不存在，则更新操作将失败。因此，如果您希望存储某个实体而不考虑它是否已存在，则应改用 <bpt id=\"p3\">**</bpt>insert_or_replace_entity()<ept id=\"p3\">**</ept> 或 <bpt id=\"p4\">**</bpt>insert_or_merge_entity()<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "使用实体组",
      "pos": [
        2928,
        2933
      ]
    },
    {
      "pos": [
        2935,
        3111
      ],
      "content": "有时，有必要成批地同时提交多项操作以确保通过服务器进行原子处理。若要完成此操作，首先要创建一个 <bpt id=\"p1\">**</bpt>Batch<ept id=\"p1\">**</ept> 对象，然后对 <bpt id=\"p2\">**</bpt>TableService<ept id=\"p2\">**</ept> 使用 <bpt id=\"p3\">**</bpt>execute_batch()<ept id=\"p3\">**</ept> 方法。下面的示例演示在一个批次中提交 RowKey 为 2 和 3 的两个实体。请注意，这仅适用于具有相同 PartitionKey 的实体。"
    },
    {
      "content": "查询实体",
      "pos": [
        3421,
        3425
      ]
    },
    {
      "pos": [
        3427,
        3497
      ],
      "content": "若要查询表中的实体，请使用 <bpt id=\"p1\">**</bpt>get_entity()<ept id=\"p1\">**</ept> 方法并传递表名称 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "查询实体集",
      "pos": [
        3593,
        3598
      ]
    },
    {
      "pos": [
        3600,
        3690
      ],
      "content": "若要查询表中的实体集，请创建一个查询哈希对象并使用 <bpt id=\"p1\">**</bpt>query_entities()<ept id=\"p1\">**</ept> 方法。下面的示例演示了如何获取具有相同 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 的所有实体："
    },
    {
      "pos": [
        3836,
        3893
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果结果集太大，一个查询无法全部返回，将会返回一个继续标记，你可以使用该标记检索后续页面。"
    },
    {
      "content": "查询一部分实体属性",
      "pos": [
        3898,
        3907
      ]
    },
    {
      "content": "对表的查询可以只检索实体中的少数几个属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。请使用 select 子句并传递你希望显示给客户端的属性的名称。",
      "pos": [
        3909,
        3995
      ]
    },
    {
      "pos": [
        4172,
        4215
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"how-to-delete-an-entity\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：删除实体"
    },
    {
      "pos": [
        4217,
        4293
      ],
      "content": "若要删除实体，请使用 <bpt id=\"p1\">**</bpt>delete_entity()<ept id=\"p1\">**</ept> 方法。你需要传入包含该实体的表的名称、实体的 PartitionKey 和 RowKey。"
    },
    {
      "pos": [
        4381,
        4421
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"how-to-delete-a-table\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：删除表"
    },
    {
      "pos": [
        4423,
        4466
      ],
      "content": "若要删除表，请使用 <bpt id=\"p1\">**</bpt>delete_table()<ept id=\"p1\">**</ept> 方法并传入要删除的表的名称。"
    },
    {
      "pos": [
        4526,
        4553
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"next-steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "content": "若要了解有关更复杂存储任务的信息，请访问下面的链接：",
      "pos": [
        4555,
        4581
      ]
    },
    {
      "content": "Azure 存储团队博客",
      "pos": [
        4586,
        4598
      ]
    },
    {
      "pos": [
        4648,
        4733
      ],
      "content": "GitHub 上的 <bpt id=\"p1\">[</bpt>Azure SDK for Ruby<ept id=\"p1\">](http://github.com/WindowsAzure/azure-sdk-for-ruby)</ept> 存储库"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Ruby 使用表存储 | Azure\" \n    description=\"了解如何使用 Azure 中的 Azure 表存储。相关代码示例是使用 Ruby API 编写的。\"\n    services=\"storage\"\n    documentationCenter=\"ruby\"\n    authors=\"tfitzmac\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n\n# 如何通过 Ruby 使用 Azure 表存储\n\n[AZURE.INCLUDE [storage-selector-table-include](../includes/storage-selector-table-include.md)]\n\n## 概述\n\n本指南演示如何使用 Azure 表服务执行常见任务。相关示例是使用 Ruby API 编写的。涉及的方案包括“创建和删除表、在表中插入和查询实体”。\n\n[AZURE.INCLUDE [storage-table-concepts-include](../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 Ruby 应用程序\n\n有关如何创建 Ruby 应用程序的说明，请参阅[在 Azure 中创建 Ruby 应用程序](/documentation/articles/virtual-machines-ruby-rails-web-app-linux)。\n\n## 配置应用程序以访问存储\n\n要使用 Azure 存储空间，你需要下载和使用 Ruby azure 包，其中包括一组便于与存储 REST 服务进行通信的库。\n\n### 使用 RubyGems 获取该程序包\n\n1. 使用命令行接口，例如 **PowerShell** (Windows)、**Terminal** (Mac) 或 **Bash** (Unix)。\n\n2. 在命令窗口中键入 **gem install azure** 以安装 gem 和依赖项。\n\n### 导入包\n\n使用常用的文本编辑器将以下内容添加到你要在其中使用存储的 Ruby 文件的顶部：\n\n    require \"azure\"\n\n## 设置 Azure 存储连接\n\nAzure 模块将读取环境变量 **AZURE_STORAGE_ACCOUNT** 和 **AZURE_STORAGE_ACCESS_KEY**，以便获取连接到 Azure 存储帐户所需的信息。如果未设置这些环境变量，则在使用 **Azure::TableService** 之前必须通过以下代码指定帐户信息：\n\n    Azure.config.storage_account_name = \"<your azure storage account>\"\n    Azure.config.storage_access_key = \"<your azure storage access key>\"\n\n获取这些值：\n\n1. 登录到 [Azure 管理门户](https://manage.windowsazure.cn/)。\n\n2. 导航到你的存储帐户。\n\n3. 单击导航窗格底部的“管理密钥”。\n\n4. 在弹出对话框中，将会看到存储帐户名称、主访问密钥和辅助访问密钥。对于访问密钥，你可以使用主访问密钥，也可以使用辅助访问密钥。\n\n## 创建表\n\n使用 **Azure::TableService** 对象可以对表和实体进行操作。若要创建表，请使用 **create_table()** 方法。以下示例将创建一个表或输出存在的错误。\n\n    azure_table_service = Azure::TableService.new\n    begin\n      azure_table_service.create_table(\"testtable\")\n    rescue\n      puts $!\n    end\n\n## 将实体添加到表\n\n若要添加实体，应首先创建一个定义了你的实体属性的哈希对象。请注意，对于每个实体，您必须指定 **PartitionKey** 和 **RowKey**。这些值是实体的唯一标识符，并且查询它们比查询其他属性快很多。Azure 存储服务使用 **PartitionKey** 自动将表的实体分发到多个存储节点上。具有相同的 **PartitionKey** 的实体存储在同一个节点上。**RowKey** 是实体在其所属分区内的唯一 ID。\n\n    entity = { \"content\" => \"test entity\",\n      :PartitionKey => \"test-partition-key\", :RowKey => \"1\" }\n    azure_table_service.insert_entity(\"testtable\", entity)\n\n## 更新实体\n\n可使用多种方法来更新现有实体：\n\n* **update_entity()：**通过替换现有实体来更新现有实体。\n* **merge_entity()：**通过将新属性值合并到现有实体来更新现有实体。\n* **insert_or_merge_entity()：**通过替换现有实体来更新现有实体。如果不存在实体，将插入一个新实体。\n* **insert_or_replace_entity()：**通过将新属性值合并到现有实体来更新现有实体。如果不存在实体，将插入一个新实体。\n\n以下示例演示了使用 **update_entity()** 更新实体：\n\n    entity = { \"content\" => \"test entity with updated content\",\n      :PartitionKey => \"test-partition-key\", :RowKey => \"1\" }\n    azure_table_service.update_entity(\"testtable\", entity)\n\n对于 **update_entity()** 和 **merge_entity()**，如果待更新的实体不存在，则更新操作将失败。因此，如果您希望存储某个实体而不考虑它是否已存在，则应改用 **insert_or_replace_entity()** 或 **insert_or_merge_entity()**。\n\n## 使用实体组\n\n有时，有必要成批地同时提交多项操作以确保通过服务器进行原子处理。若要完成此操作，首先要创建一个 **Batch** 对象，然后对 **TableService** 使用 **execute_batch()** 方法。下面的示例演示在一个批次中提交 RowKey 为 2 和 3 的两个实体。请注意，这仅适用于具有相同 PartitionKey 的实体。\n\n    azure_table_service = Azure::TableService.new\n    batch = Azure::Storage::Table::Batch.new(\"testtable\",\n      \"test-partition-key\") do\n      insert \"2\", { \"content\" => \"new content 2\" }\n      insert \"3\", { \"content\" => \"new content 3\" }\n    end\n    results = azure_table_service.execute_batch(batch)\n\n## 查询实体\n\n若要查询表中的实体，请使用 **get_entity()** 方法并传递表名称 **PartitionKey** 和 **RowKey**。\n\n    result = azure_table_service.get_entity(\"testtable\", \"test-partition-key\",\n      \"1\")\n\n## 查询实体集\n\n若要查询表中的实体集，请创建一个查询哈希对象并使用 **query_entities()** 方法。下面的示例演示了如何获取具有相同 **PartitionKey** 的所有实体：\n\n    query = { :filter => \"PartitionKey eq 'test-partition-key'\" }\n    result, token = azure_table_service.query_entities(\"testtable\", query)\n\n> [AZURE.NOTE]如果结果集太大，一个查询无法全部返回，将会返回一个继续标记，你可以使用该标记检索后续页面。\n\n## 查询一部分实体属性\n\n对表的查询可以只检索实体中的少数几个属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。请使用 select 子句并传递你希望显示给客户端的属性的名称。\n\n    query = { :filter => \"PartitionKey eq 'test-partition-key'\",\n      :select => [\"content\"] }\n    result, token = azure_table_service.query_entities(\"testtable\", query)\n\n## <a id=\"how-to-delete-an-entity\"></a>如何：删除实体\n\n若要删除实体，请使用 **delete_entity()** 方法。你需要传入包含该实体的表的名称、实体的 PartitionKey 和 RowKey。\n\n        azure_table_service.delete_entity(\"testtable\", \"test-partition-key\", \"1\")\n\n## <a id=\"how-to-delete-a-table\"></a>如何：删除表\n\n若要删除表，请使用 **delete_table()** 方法并传入要删除的表的名称。\n\n        azure_table_service.delete_table(\"testtable\")\n\n## <a id=\"next-steps\"></a>后续步骤\n\n若要了解有关更复杂存储任务的信息，请访问下面的链接：\n\n- [Azure 存储团队博客](http://blogs.msdn.com/b/windowsazurestorage/)\n- GitHub 上的 [Azure SDK for Ruby](http://github.com/WindowsAzure/azure-sdk-for-ruby) 存储库\n\n<!---HONumber=Mooncake_0104_2016-->"
}