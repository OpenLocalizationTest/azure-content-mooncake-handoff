{
  "nodes": [
    {
      "content": "如何通过 PHP 使用 Blob 存储 | Azure",
      "pos": [
        27,
        54
      ]
    },
    {
      "content": "了解如何使用 Azure Blob 服务上载、列出、下载和删除 Blob。通过 PHP 编写代码示例。",
      "pos": [
        73,
        124
      ]
    },
    {
      "content": "如何通过 PHP 使用 Blob 存储",
      "pos": [
        338,
        357
      ]
    },
    {
      "content": "概述",
      "pos": [
        457,
        459
      ]
    },
    {
      "pos": [
        461,
        618
      ],
      "content": "本指南将演示如何使用 Azure Blob 服务执行常见方案。示例是用 PHP 编写的并使用了 <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">][download]</ept>。涉及的任务包括<bpt id=\"p2\">**</bpt>上传<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>列出<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>下载<ept id=\"p4\">**</ept>和<bpt id=\"p5\">**</bpt>删除<ept id=\"p5\">**</ept> Blob。有关 Blob 的详细信息，请参阅<bpt id=\"p6\">[</bpt>后续步骤<ept id=\"p6\">](#next-steps)</ept>部分。"
    },
    {
      "content": "创建 PHP 应用程序",
      "pos": [
        815,
        826
      ]
    },
    {
      "content": "创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用 Azure SDK for PHP 中的类。你可以使用任何开发工具（包括“记事本”）创建应用程序。",
      "pos": [
        828,
        918
      ]
    },
    {
      "content": "在本指南中，你将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。",
      "pos": [
        920,
        992
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"GetClientLibrary\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>获取 Azure 客户端库",
      "pos": [
        998,
        1040
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"ConfigureStorage\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>配置你的应用程序以访问 Blob 服务",
      "pos": [
        1128,
        1176
      ]
    },
    {
      "content": "若要使用 Azure Blob 服务 API，你需要：",
      "pos": [
        1183,
        1210
      ]
    },
    {
      "pos": [
        1215,
        1267
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>require_once<ept id=\"p1\">][require_once]</ept> 语句引用 autoloader 文件，并"
    },
    {
      "content": "引用可使用的所有类。",
      "pos": [
        1271,
        1281
      ]
    },
    {
      "pos": [
        1283,
        1335
      ],
      "content": "下面的示例演示了如何包括 autoloader 文件并引用 <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> 类。"
    },
    {
      "pos": [
        1339,
        1470
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 本示例（以及本文中的其他示例）假定您已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果您已手动安装这些库或将其作为 PEAR 包安装，则需要引用 <ph id=\"ph2\">`WindowsAzure.php`</ph> autoloader 文件。"
    },
    {
      "pos": [
        1559,
        1605
      ],
      "content": "在下面的示例中，<ph id=\"ph1\">`require_once`</ph> 语句将始终显示，但只会引用执行该示例所需的类。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"ConnectionString\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>设置 Azure 存储连接",
      "pos": [
        1611,
        1653
      ]
    },
    {
      "content": "若要实例化 Azure Blob 服务客户端，你必须首先具有有效的连接字符串。Blob 服务连接字符串的格式为：",
      "pos": [
        1660,
        1716
      ]
    },
    {
      "content": "对于访问实时服务：",
      "pos": [
        1718,
        1727
      ]
    },
    {
      "content": "访问存储模拟器：",
      "pos": [
        2028,
        2036
      ]
    },
    {
      "pos": [
        2071,
        2123
      ],
      "content": "若要创建任何 Azure 服务客户端，你将需要使用 <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> 类。你可以："
    },
    {
      "content": "将连接字符串直接传递给此类或",
      "pos": [
        2127,
        2141
      ]
    },
    {
      "pos": [
        2144,
        2199
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>CloudConfigurationManager (CCM)<ept id=\"p1\">**</ept> 检查多个外部源以获取连接字符串："
    },
    {
      "content": "默认情况下，它附带了对一个外部源的支持 - 环境变量。",
      "pos": [
        2206,
        2233
      ]
    },
    {
      "pos": [
        2240,
        2281
      ],
      "content": "您可通过扩展 <bpt id=\"p1\">**</bpt>ConnectionStringSource<ept id=\"p1\">**</ept> 类来添加新源。"
    },
    {
      "content": "在此处列出的示例中，将直接传递连接字符串。",
      "pos": [
        2283,
        2304
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"CreateContainer\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：创建容器",
      "pos": [
        2489,
        2524
      ]
    },
    {
      "pos": [
        2643,
        2770
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>BlobRestProxy<ept id=\"p1\">**</ept> 对象，您可以使用 <bpt id=\"p2\">**</bpt>createContainer<ept id=\"p2\">**</ept> 方法创建 Blob 容器。创建容器时，可以在该容器上设置选项，但此操作不是必需的。（下面的示例演示了如何设置容器访问控制列表 (ACL) 和容器元数据。）"
    },
    {
      "pos": [
        4756,
        4964
      ],
      "content": "调用 setPublicAccess(PublicAccessType::CONTAINER_AND_BLOBS) 将使容器和 Blob 数据可通过匿名请求访问。通过调用 setPublicAccess(PublicAccessType::BLOBS_ONLY)，仅使 Blob 数据可通过匿名请求访问。有关容器 ACL 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>设置容器 ACL (REST API)<ept id=\"p1\">][container-acl]</ept>。"
    },
    {
      "pos": [
        4966,
        5017
      ],
      "content": "有关 Blob 服务错误代码的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Blob 服务错误代码<ept id=\"p1\">][error-codes]</ept>。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"UploadBlob\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：将 Blob 上载到容器",
      "pos": [
        5023,
        5061
      ]
    },
    {
      "pos": [
        5068,
        5215
      ],
      "content": "若要将文件作为 Blob 上载，请使用 <bpt id=\"p1\">**</bpt>BlobRestProxy-&gt;createBlockBlob<ept id=\"p1\">**</ept> 方法。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的代码示例假定已创建了容器，并使用 <bpt id=\"p2\">[</bpt>fopen<ept id=\"p2\">][fopen]</ept> 将文件作为流打开。"
    },
    {
      "pos": [
        6004,
        6203
      ],
      "content": "请注意，上面的示例将 Blob 作为流上载。但是，也可使用 <bpt id=\"p1\">[</bpt>file_get_contents<ept id=\"p1\">][file_get_contents]</ept> 函数将 Blob 作为字符串上载。若要使用前面的示例执行此操作，请将 <ph id=\"ph1\">`$content = fopen(\"c:\\myfile.txt\", \"r\");`</ph> 更改为 <ph id=\"ph2\">`$content = file_get_contents(\"c:\\myfile.txt\");`</ph>。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"ListBlobs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：列出容器中的 Blob",
      "pos": [
        6209,
        6245
      ]
    },
    {
      "pos": [
        6252,
        6371
      ],
      "content": "若要列出容器中的 Blob，请将 <bpt id=\"p1\">**</bpt>BlobRestProxy-&gt;listBlobs<ept id=\"p1\">**</ept> 方法与 <bpt id=\"p2\">**</bpt>foreach<ept id=\"p2\">**</ept> 循环一起使用来循环访问结果。以下代码将容器中的每个 Blob 的名称作为容器中的输出并将其 URI 显示到浏览器。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"DownloadBlob\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：下载 Blob",
      "pos": [
        7239,
        7274
      ]
    },
    {
      "pos": [
        7281,
        7379
      ],
      "content": "若要下载 Blob，请调用 <bpt id=\"p1\">**</bpt>BlobRestProxy-&gt;getBlob<ept id=\"p1\">**</ept> 方法，然后对生成的 <bpt id=\"p2\">**</bpt>GetBlobResult<ept id=\"p2\">**</ept> 对象调用 <bpt id=\"p3\">**</bpt>getContentStream<ept id=\"p3\">**</ept> 方法。"
    },
    {
      "pos": [
        8129,
        8225
      ],
      "content": "请注意，上面的示例将 Blob 作为流资源获取（默认行为）。但是，你可以使用 <bpt id=\"p1\">[</bpt>stream_get_contents<ept id=\"p1\">][stream-get-contents]</ept> 函数将返回的流转换为字符串。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"DeleteBlob\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：删除 Blob",
      "pos": [
        8231,
        8264
      ]
    },
    {
      "pos": [
        8271,
        8330
      ],
      "content": "若要删除 Blob，请将容器名称和 Blob 名称传递到 <bpt id=\"p1\">**</bpt>BlobRestProxy-&gt;deleteBlob<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"DeleteContainer\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：删除 Blob 容器",
      "pos": [
        9041,
        9082
      ]
    },
    {
      "pos": [
        9089,
        9150
      ],
      "content": "最后，若要删除 Blob 容器，请将容器名称传递到 <bpt id=\"p1\">**</bpt>BlobRestProxy-&gt;deleteContainer<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"next-steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤",
      "pos": [
        9856,
        9883
      ]
    },
    {
      "content": "现在，您已了解了 Azure Blob 服务的基础知识，单击下面的链接可了解有关更复杂的存储任务的详细信息。",
      "pos": [
        9890,
        9944
      ]
    },
    {
      "pos": [
        9948,
        10011
      ],
      "content": "访问 <bpt id=\"p1\">[</bpt>Azure 存储团队博客<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazurestorage/)</ept>"
    },
    {
      "pos": [
        10014,
        10139
      ],
      "content": "参阅位于以下位置的 PHP 块 Blob 示例：<bpt id=\"p1\">&lt;</bpt><ept id=\"p1\">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/BlockBlobExample.php&gt;</ept>。"
    },
    {
      "pos": [
        10142,
        10265
      ],
      "content": "参阅位于以下位置的 PHP 页 Blob 示例：<bpt id=\"p1\">&lt;</bpt><ept id=\"p1\">https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/PageBlobExample.php&gt;</ept>"
    },
    {
      "content": "使用 AzCopy 命令行实用程序传输数据",
      "pos": [
        10269,
        10290
      ]
    },
    {
      "pos": [
        10338,
        10376
      ],
      "content": "有关详细信息，另请参阅 <bpt id=\"p1\">[</bpt>PHP 开发中心<ept id=\"p1\">](/develop/php/)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何通过 PHP 使用 Blob 存储 | Azure\"\n    description=\"了解如何使用 Azure Blob 服务上载、列出、下载和删除 Blob。通过 PHP 编写代码示例。\"\n    documentationCenter=\"php\"\n    services=\"storage\"\n    authors=\"tfitzmac\"\n    manager=\"wpickett\"\n    editor=\"mollybos\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"02/08/2016\"\n    wacn.date=\"03/21/2016\"/>\n\n# 如何通过 PHP 使用 Blob 存储\n\n[AZURE.INCLUDE [storage-selector-blob-include](../includes/storage-selector-blob-include.md)]\n\n## 概述\n\n本指南将演示如何使用 Azure Blob 服务执行常见方案。示例是用 PHP 编写的并使用了 [Azure SDK for PHP][download]。涉及的任务包括**上传**、**列出**、**下载**和**删除** Blob。有关 Blob 的详细信息，请参阅[后续步骤](#next-steps)部分。\n\n[AZURE.INCLUDE [storage-blob-concepts-include](../includes/storage-blob-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 PHP 应用程序\n\n创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用 Azure SDK for PHP 中的类。你可以使用任何开发工具（包括“记事本”）创建应用程序。\n\n在本指南中，你将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。\n\n<h2><a id=\"GetClientLibrary\"></a>获取 Azure 客户端库</h2>\n\n[AZURE.INCLUDE [get-client-libraries](../includes/get-client-libraries.md)]\n\n<h2><a id=\"ConfigureStorage\"></a>配置你的应用程序以访问 Blob 服务</h2>\n\n若要使用 Azure Blob 服务 API，你需要：\n\n1. 使用 [require_once][require_once] 语句引用 autoloader 文件，并\n2. 引用可使用的所有类。\n\n下面的示例演示了如何包括 autoloader 文件并引用 **ServicesBuilder** 类。\n\n> [AZURE.NOTE] 本示例（以及本文中的其他示例）假定您已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果您已手动安装这些库或将其作为 PEAR 包安装，则需要引用 `WindowsAzure.php` autoloader 文件。\n\n    require_once 'vendor\\autoload.php';\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n\n在下面的示例中，`require_once` 语句将始终显示，但只会引用执行该示例所需的类。\n\n<h2><a id=\"ConnectionString\"></a>设置 Azure 存储连接</h2>\n\n若要实例化 Azure Blob 服务客户端，你必须首先具有有效的连接字符串。Blob 服务连接字符串的格式为：\n\n对于访问实时服务：\n\n    DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey];BlobEndpoint=[http|https]://yourAccount.blob.core.chinacloudapi.cn/;TableEndpoint=[http|https]://yourAccount.table.core.chinacloudapi.cn/;QueueEndpoint=[http|https]://yourAccount.queue.core.chinacloudapi.cn/;\n\n访问存储模拟器：\n\n    UseDevelopmentStorage=true\n\n\n若要创建任何 Azure 服务客户端，你将需要使用 **ServicesBuilder** 类。你可以：\n\n* 将连接字符串直接传递给此类或\n* 使用 **CloudConfigurationManager (CCM)** 检查多个外部源以获取连接字符串：\n    * 默认情况下，它附带了对一个外部源的支持 - 环境变量。\n    * 您可通过扩展 **ConnectionStringSource** 类来添加新源。\n\n在此处列出的示例中，将直接传递连接字符串。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n    $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\n\n<h2><a id=\"CreateContainer\"></a>如何：创建容器</h2>\n[AZURE.INCLUDE [storage-container-naming-rules-include](../includes/storage-container-naming-rules-include.md)]\n\n利用 **BlobRestProxy** 对象，您可以使用 **createContainer** 方法创建 Blob 容器。创建容器时，可以在该容器上设置选项，但此操作不是必需的。（下面的示例演示了如何设置容器访问控制列表 (ACL) 和容器元数据。）\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Blob\\Models\\CreateContainerOptions;\n    use WindowsAzure\\Blob\\Models\\PublicAccessType;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create blob REST proxy.\n    $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\n\n\n    // OPTIONAL: Set public access policy and metadata.\n    // Create container options object.\n    $createContainerOptions = new CreateContainerOptions();\n\n    // Set public access policy. Possible values are\n    // PublicAccessType::CONTAINER_AND_BLOBS and PublicAccessType::BLOBS_ONLY.\n    // CONTAINER_AND_BLOBS:\n    // Specifies full public read access for container and blob data.\n    // proxys can enumerate blobs within the container via anonymous\n    // request, but cannot enumerate containers within the storage account.\n    //\n    // BLOBS_ONLY:\n    // Specifies public read access for blobs. Blob data within this\n    // container can be read via anonymous request, but container data is not\n    // available. proxys cannot enumerate blobs within the container via\n    // anonymous request.\n    // If this value is not specified in the request, container data is\n    // private to the account owner.\n    $createContainerOptions->setPublicAccess(PublicAccessType::CONTAINER_AND_BLOBS);\n\n    // Set container metadata.\n    $createContainerOptions->addMetaData(\"key1\", \"value1\");\n    $createContainerOptions->addMetaData(\"key2\", \"value2\");\n\n    try {\n        // Create container.\n        $blobRestProxy->createContainer(\"mycontainer\", $createContainerOptions);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179439.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n调用 setPublicAccess(PublicAccessType::CONTAINER_AND_BLOBS) 将使容器和 Blob 数据可通过匿名请求访问。通过调用 setPublicAccess(PublicAccessType::BLOBS_ONLY)，仅使 Blob 数据可通过匿名请求访问。有关容器 ACL 的详细信息，请参阅 [设置容器 ACL (REST API)][container-acl]。\n\n有关 Blob 服务错误代码的详细信息，请参阅 [Blob 服务错误代码][error-codes]。\n\n<h2><a id=\"UploadBlob\"></a>如何：将 Blob 上载到容器</h2>\n\n若要将文件作为 Blob 上载，请使用 **BlobRestProxy->createBlockBlob** 方法。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的代码示例假定已创建了容器，并使用 [fopen][fopen] 将文件作为流打开。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create blob REST proxy.\n    $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\n\n\n    $content = fopen(\"c:\\myfile.txt\", \"r\");\n    $blob_name = \"myblob\";\n\n    try {\n        //Upload blob\n        $blobRestProxy->createBlockBlob(\"mycontainer\", $blob_name, $content);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179439.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n请注意，上面的示例将 Blob 作为流上载。但是，也可使用 [file_get_contents][file_get_contents] 函数将 Blob 作为字符串上载。若要使用前面的示例执行此操作，请将 `$content = fopen(\"c:\\myfile.txt\", \"r\");` 更改为 `$content = file_get_contents(\"c:\\myfile.txt\");`。\n\n<h2><a id=\"ListBlobs\"></a>如何：列出容器中的 Blob</h2>\n\n若要列出容器中的 Blob，请将 **BlobRestProxy->listBlobs** 方法与 **foreach** 循环一起使用来循环访问结果。以下代码将容器中的每个 Blob 的名称作为容器中的输出并将其 URI 显示到浏览器。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create blob REST proxy.\n    $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\n\n\n    try {\n        // List blobs.\n        $blob_list = $blobRestProxy->listBlobs(\"mycontainer\");\n        $blobs = $blob_list->getBlobs();\n\n        foreach($blobs as $blob)\n        {\n            echo $blob->getName().\": \".$blob->getUrl().\"<br />\";\n        }\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179439.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n\n<h2><a id=\"DownloadBlob\"></a>如何：下载 Blob</h2>\n\n若要下载 Blob，请调用 **BlobRestProxy->getBlob** 方法，然后对生成的 **GetBlobResult** 对象调用 **getContentStream** 方法。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create blob REST proxy.\n    $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\n\n\n    try {\n        // Get blob.\n        $blob = $blobRestProxy->getBlob(\"mycontainer\", \"myblob\");\n        fpassthru($blob->getContentStream());\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179439.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n请注意，上面的示例将 Blob 作为流资源获取（默认行为）。但是，你可以使用 [stream_get_contents][stream-get-contents] 函数将返回的流转换为字符串。\n\n<h2><a id=\"DeleteBlob\"></a>如何：删除 Blob</h2>\n\n若要删除 Blob，请将容器名称和 Blob 名称传递到 **BlobRestProxy->deleteBlob**。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create blob REST proxy.\n    $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\n\n\n    try {\n        // Delete container.\n        $blobRestProxy->deleteBlob(\"mycontainer\", \"myblob\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179439.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n<h2><a id=\"DeleteContainer\"></a>如何：删除 Blob 容器</h2>\n\n最后，若要删除 Blob 容器，请将容器名称传递到 **BlobRestProxy->deleteContainer**。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create blob REST proxy.\n    $blobRestProxy = ServicesBuilder::getInstance()->createBlobService($connectionString);\n\n\n    try {\n        // Delete container.\n        $blobRestProxy->deleteContainer(\"mycontainer\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179439.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n<h2><a id=\"next-steps\"></a>后续步骤</h2>\n\n现在，您已了解了 Azure Blob 服务的基础知识，单击下面的链接可了解有关更复杂的存储任务的详细信息。\n\n- 访问 [Azure 存储团队博客](http://blogs.msdn.com/b/windowsazurestorage/)\n- 参阅位于以下位置的 PHP 块 Blob 示例：<https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/BlockBlobExample.php>。\n- 参阅位于以下位置的 PHP 页 Blob 示例：<https://github.com/WindowsAzure/azure-sdk-for-php-samples/blob/master/storage/PageBlobExample.php>\n- [使用 AzCopy 命令行实用程序传输数据](/documentation/articles/storage-use-azcopy)\n \n有关详细信息，另请参阅 [PHP 开发中心](/develop/php/)。\n\n\n[download]: /documentation/articles/php-download-sdk\n[container-acl]: http://msdn.microsoft.com/zh-cn/library/azure/dd179391.aspx\n[error-codes]: http://msdn.microsoft.com/zh-cn/library/azure/dd179439.aspx\n[file_get_contents]: http://php.net/file_get_contents\n[require_once]: http://php.net/require_once\n[fopen]: http://www.php.net/fopen\n[stream-get-contents]: http://www.php.net/stream_get_contents\n\n<!---HONumber=Mooncake_0314_2016-->"
}