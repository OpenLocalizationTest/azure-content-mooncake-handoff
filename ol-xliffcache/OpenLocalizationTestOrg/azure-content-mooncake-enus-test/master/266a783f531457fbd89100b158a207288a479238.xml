{
  "nodes": [
    {
      "content": "如何使用队列存储 (C++) | Azure",
      "pos": [
        28,
        50
      ]
    },
    {
      "content": "了解如何在 Azure 中使用队列存储服务。示例用 C++ 编写。",
      "pos": [
        70,
        103
      ]
    },
    {
      "content": "如何通过 C++ 使用队列存储",
      "pos": [
        313,
        328
      ]
    },
    {
      "content": "概述",
      "pos": [
        432,
        434
      ]
    },
    {
      "pos": [
        435,
        614
      ],
      "content": "本指南将演示如何使用 Azure 队列存储服务执行常见方案。示例用 C++ 编写，并使用<bpt id=\"p1\">[</bpt>适用于 C++ 的 Azure 存储空间客户端库<ept id=\"p1\">](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)</ept>。介绍的方案包括“插入”、“查看”、“获取”和“删除”队列消息以及“创建和删除队列”。"
    },
    {
      "pos": [
        619,
        788
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 本指南主要面向适用于 C++ 的 Azure 存储空间客户端库 1.0.0 版及更高版本。建议的版本是存储空间客户端库 1.0.0，它可以通过 <bpt id=\"p1\">[</bpt>NuGet<ept id=\"p1\">](http://www.nuget.org/packages/wastorage)</ept> 或 <bpt id=\"p2\">[</bpt>GitHub<ept id=\"p2\">](https://github.com/)</ept> 获得。"
    },
    {
      "content": "创建 C++ 应用程序",
      "pos": [
        986,
        997
      ]
    },
    {
      "content": "在本指南中，你将使用存储功能，这些功能可以在 C++ 应用程序中运行。",
      "pos": [
        1000,
        1035
      ]
    },
    {
      "content": "为此，你将需要安装适用于 C++ 的 Azure 存储客户端库，并在你的 Azure 订阅中创建 Azure 存储帐户。",
      "pos": [
        1037,
        1097
      ]
    },
    {
      "content": "若要安装适用于 C++ 的 Azure 存储客户端库，你可以使用以下方法：",
      "pos": [
        1099,
        1136
      ]
    },
    {
      "pos": [
        1142,
        1260
      ],
      "content": "<bpt id=\"p1\">**</bpt>Linux：<ept id=\"p1\">**</ept>按照<bpt id=\"p2\">[</bpt>适用于 C++ 的 Azure 存储空间客户端库自述文件<ept id=\"p2\">](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)</ept>页中提供的说明操作。"
    },
    {
      "pos": [
        1267,
        1452
      ],
      "content": "<bpt id=\"p1\">**</bpt>Windows：<ept id=\"p1\">**</ept>在 Visual Studio 主菜单中，单击“工具”-&gt;“NuGet 程序包管理器”-&gt;“程序包管理器控制台”。在 <bpt id=\"p2\">[</bpt>NuGet 程序包管理器控制台<ept id=\"p2\">](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)</ept>窗口中输入以下命令，然后按 <bpt id=\"p3\">**</bpt>ENTER<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "配置应用程序以访问队列存储",
      "pos": [
        1494,
        1507
      ]
    },
    {
      "content": "将以下 include 语句添加到 C++ 文件的顶部，你要在此使用 Azure 存储 API 来访问队列：",
      "pos": [
        1508,
        1562
      ]
    },
    {
      "content": "设置 Azure 存储连接字符串",
      "pos": [
        1632,
        1648
      ]
    },
    {
      "pos": [
        1650,
        1932
      ],
      "content": "Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并使用<bpt id=\"p1\">[</bpt>管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的存储帐户名称和存储访问密钥作为 <bpt id=\"p2\">*</bpt>AccountName<ept id=\"p2\">*</ept> 和 <bpt id=\"p3\">*</bpt>AccountKey<ept id=\"p3\">*</ept> 值。有关存储帐户和访问密钥的信息，请参阅<bpt id=\"p4\">[</bpt>关于 Azure 存储帐户<ept id=\"p4\">](/documentation/articles/storage-create-storage-account)</ept>。此示例演示如何声明一个静态字段以保存连接字符串："
    },
    {
      "pos": [
        2188,
        2414
      ],
      "content": "若要在本地 Windows 计算机中测试你的应用程序，可以使用随 <bpt id=\"p1\">[</bpt>Azure SDK<ept id=\"p1\">](/downloads/)</ept> 一起安装的  Azure <bpt id=\"p2\">[</bpt>存储模拟器<ept id=\"p2\">](https://msdn.microsoft.com/zh-CN/library/azure/hh403989.aspx)</ept>。存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。以下示例演示如何声明一个静态字段以将连接字符串保存到你的本地存储模拟器："
    },
    {
      "pos": [
        2574,
        2661
      ],
      "content": "若要启动 Azure 存储模拟器，请选择“开始”按钮或按 <bpt id=\"p1\">**</bpt>Windows<ept id=\"p1\">**</ept> 键。开始键入“Azure 存储模拟器”，然后从应用程序列表中选择“Azure 存储模拟器”。"
    },
    {
      "content": "下面的示例假定你使用了这两个方法之一来获取存储连接字符串。",
      "pos": [
        2663,
        2692
      ]
    },
    {
      "content": "检索你的连接字符串",
      "pos": [
        2697,
        2706
      ]
    },
    {
      "pos": [
        2707,
        2792
      ],
      "content": "可以使用 <bpt id=\"p1\">**</bpt>cloud_storage_account<ept id=\"p1\">**</ept> 类来表示您的存储帐户信息。若要从存储连接字符串中检索您的存储帐户信息，您可以使用 <bpt id=\"p2\">**</bpt>parse<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "content": "如何：创建队列",
      "pos": [
        2988,
        2995
      ]
    },
    {
      "pos": [
        2996,
        3068
      ],
      "content": "<bpt id=\"p1\">**</bpt>cloud_queue_client<ept id=\"p1\">**</ept> 对象可用于获取队列的引用对象。以下代码将创建 <bpt id=\"p2\">**</bpt>cloud_queue_client<ept id=\"p2\">**</ept> 对象。"
    },
    {
      "pos": [
        3392,
        3449
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>cloud_queue_client<ept id=\"p1\">**</ept> 对象可获取对要使用的队列的引用。如果队列不存在，你可以创建它。"
    },
    {
      "content": "如何：在队列中插入消息",
      "pos": [
        3681,
        3692
      ]
    },
    {
      "pos": [
        3693,
        3849
      ],
      "content": "若要将消息插入到现有队列中，请先创建新的 <bpt id=\"p1\">**</bpt>cloud_queue_message<ept id=\"p1\">**</ept>。接下来，调用 <bpt id=\"p2\">**</bpt>add_message<ept id=\"p2\">**</ept> 方法。可以从字符串或 <bpt id=\"p3\">**</bpt>字节<ept id=\"p3\">**</ept> 数组创建 <bpt id=\"p4\">**</bpt>cloud_queue_message<ept id=\"p4\">**</ept>。以下代码将创建队列（如果该队列不存在）并插入消息  'Hello, World'。"
    },
    {
      "content": "如何：扫视下一条消息",
      "pos": [
        4555,
        4565
      ]
    },
    {
      "pos": [
        4566,
        4617
      ],
      "content": "通过调用 <bpt id=\"p1\">**</bpt>peek_message<ept id=\"p1\">**</ept> 方法，可以扫视队列最前面的消息，而不必从该队列中将其删除。"
    },
    {
      "content": "如何：更改已排队消息的内容",
      "pos": [
        5332,
        5345
      ]
    },
    {
      "content": "你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 n，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。",
      "pos": [
        5346,
        5578
      ]
    },
    {
      "content": "如何：取消下一条消息的排队",
      "pos": [
        6650,
        6663
      ]
    },
    {
      "pos": [
        6664,
        6899
      ],
      "content": "你的代码通过两个步骤来取消对队列中某条消息的排队。调用 <bpt id=\"p1\">**</bpt>get_message<ept id=\"p1\">**</ept> 时，您将获取队列中的下一条消息。从 <bpt id=\"p2\">**</bpt>get_message<ept id=\"p2\">**</ept> 返回的消息对从此队列读取消息的其他任何代码不可见。若要完成从队列中删除消息，您还必须调用 <bpt id=\"p3\">**</bpt>delete_message<ept id=\"p3\">**</ept>。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 <bpt id=\"p4\">**</bpt>delete_message<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "如何：使用其他方法取消对消息的排队",
      "pos": [
        7641,
        7658
      ]
    },
    {
      "pos": [
        7659,
        7916
      ],
      "content": "你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id=\"p1\">**</bpt>get_messages<ept id=\"p1\">**</ept> 方法来在一次调用中获取 20 条消息。然后，它会使用 <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，将对所有消息同时启动 5 分钟的超时设置，因此调用 <bpt id=\"p3\">**</bpt>get_messages<ept id=\"p3\">**</ept> 的 5 分钟后，任何尚未删除的消息都将再次可见。"
    },
    {
      "content": "如何：获取队列长度",
      "pos": [
        9028,
        9037
      ]
    },
    {
      "pos": [
        9038,
        9144
      ],
      "content": "你可以获取队列中消息的估计数。<bpt id=\"p1\">**</bpt>download_attributes<ept id=\"p1\">**</ept> 方法允许队列服务检索队列属性，包括消息计数。<bpt id=\"p2\">**</bpt>approximate_message_count<ept id=\"p2\">**</ept> 方法可获取队列中的大致消息数。"
    },
    {
      "content": "如何：删除队列",
      "pos": [
        9925,
        9932
      ]
    },
    {
      "pos": [
        9933,
        9985
      ],
      "content": "若要删除队列及其包含的所有消息，请对队列对象调用 <bpt id=\"p1\">**</bpt>delete_queue_if_exists<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "后续步骤",
      "pos": [
        10530,
        10534
      ]
    },
    {
      "content": "既然你已了解队列存储的基本知识，就可以按照以下链接了解有关 Azure 存储的详细信息。",
      "pos": [
        10535,
        10579
      ]
    },
    {
      "content": "如何通过 C++ 使用 Blob 存储",
      "pos": [
        10586,
        10605
      ]
    },
    {
      "content": "如何通过 C++ 使用表存储",
      "pos": [
        10674,
        10688
      ]
    },
    {
      "content": "使用 C++ 列出 Azure 存储资源",
      "pos": [
        10758,
        10778
      ]
    },
    {
      "content": "适用于 C++ 的存储空间客户端库参考",
      "pos": [
        10842,
        10861
      ]
    },
    {
      "content": "Azure 存档文档",
      "pos": [
        10910,
        10920
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何使用队列存储 (C++) | Azure\" \n    description=\"了解如何在 Azure 中使用队列存储服务。示例用 C++ 编写。\" \n    services=\"storage\" \n    documentationCenter=\".net\" \n    authors=\"tamram\" \n    manager=\"adinah\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"01/05/2016\"\n    wacn.date=\"02/25/2016\"/>\n\n# 如何通过 C++ 使用队列存储  \n\n[AZURE.INCLUDE [storage-selector-queue-include](../includes/storage-selector-queue-include.md)]\n\n## 概述\n本指南将演示如何使用 Azure 队列存储服务执行常见方案。示例用 C++ 编写，并使用[适用于 C++ 的 Azure 存储空间客户端库](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)。介绍的方案包括“插入”、“查看”、“获取”和“删除”队列消息以及“创建和删除队列”。  \n\n>[AZURE.NOTE] 本指南主要面向适用于 C++ 的 Azure 存储空间客户端库 1.0.0 版及更高版本。建议的版本是存储空间客户端库 1.0.0，它可以通过 [NuGet](http://www.nuget.org/packages/wastorage) 或 [GitHub](https://github.com/) 获得。\n\n[AZURE.INCLUDE [storage-queue-concepts-include](../includes/storage-queue-concepts-include.md)]\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 C++ 应用程序  \n在本指南中，你将使用存储功能，这些功能可以在 C++ 应用程序中运行。\n\n为此，你将需要安装适用于 C++ 的 Azure 存储客户端库，并在你的 Azure 订阅中创建 Azure 存储帐户。\n\n若要安装适用于 C++ 的 Azure 存储客户端库，你可以使用以下方法：\n\n-   **Linux：**按照[适用于 C++ 的 Azure 存储空间客户端库自述文件](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)页中提供的说明操作。  \n-   **Windows：**在 Visual Studio 主菜单中，单击“工具”->“NuGet 程序包管理器”->“程序包管理器控制台”。在 [NuGet 程序包管理器控制台](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)窗口中输入以下命令，然后按 **ENTER**。  \n\n        Install-Package wastorage\n\n## 配置应用程序以访问队列存储\n将以下 include 语句添加到 C++ 文件的顶部，你要在此使用 Azure 存储 API 来访问队列：\n\n    #include \"was/storage_account.h\"\n    #include \"was/queue.h\"\n\n## 设置 Azure 存储连接字符串\n\nAzure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并使用[管理门户](https://manage.windowsazure.cn)中列出的存储帐户的存储帐户名称和存储访问密钥作为 *AccountName* 和 *AccountKey* 值。有关存储帐户和访问密钥的信息，请参阅[关于 Azure 存储帐户](/documentation/articles/storage-create-storage-account)。此示例演示如何声明一个静态字段以保存连接字符串：\n\n    // Define the connection-string with your values.\n    const utility::string_t storage_connection_string(U(\"DefaultEndpointsProtocol=https;AccountName=your_storage_account;AccountKey=your_storage_account_key;EndpointSuffix=core.chinacloudapi.cn\"));\n\n\n若要在本地 Windows 计算机中测试你的应用程序，可以使用随 [Azure SDK](/downloads/) 一起安装的  Azure [存储模拟器](https://msdn.microsoft.com/zh-CN/library/azure/hh403989.aspx)。存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。以下示例演示如何声明一个静态字段以将连接字符串保存到你的本地存储模拟器：\n\n\n    // Define the connection-string with Azure Storage Emulator.\n    const utility::string_t storage_connection_string(U(\"UseDevelopmentStorage=true;\"));  \n\n若要启动 Azure 存储模拟器，请选择“开始”按钮或按 **Windows** 键。开始键入“Azure 存储模拟器”，然后从应用程序列表中选择“Azure 存储模拟器”。\n\n下面的示例假定你使用了这两个方法之一来获取存储连接字符串。\n\n## 检索你的连接字符串\n可以使用 **cloud_storage_account** 类来表示您的存储帐户信息。若要从存储连接字符串中检索您的存储帐户信息，您可以使用 **parse** 方法。 \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n## 如何：创建队列\n**cloud_queue_client** 对象可用于获取队列的引用对象。以下代码将创建 **cloud_queue_client** 对象。  \n\n    // Retrieve storage account from connection string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create a queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n使用 **cloud_queue_client** 对象可获取对要使用的队列的引用。如果队列不存在，你可以创建它。\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Create the queue if it doesn't already exist.\n    queue.create_if_not_exists();  \n\n## 如何：在队列中插入消息\n若要将消息插入到现有队列中，请先创建新的 **cloud_queue_message**。接下来，调用 **add_message** 方法。可以从字符串或 **字节** 数组创建 **cloud_queue_message**。以下代码将创建队列（如果该队列不存在）并插入消息  'Hello, World'。\n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Create the queue if it doesn't already exist.\n    queue.create_if_not_exists();\n\n    // Create a message and add it to the queue.\n    azure::storage::cloud_queue_message message1(U(\"Hello, World\"));\n    queue.add_message(message1);  \n\n## 如何：扫视下一条消息\n通过调用 **peek_message** 方法，可以扫视队列最前面的消息，而不必从该队列中将其删除。  \n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Peek at the next message.\n    azure::storage::cloud_queue_message peeked_message = queue.peek_message();\n\n    // Output the message content.\n    std::wcout << U(\"Peeked message content: \") << peeked_message.content_as_string() << std::endl;\n\n## 如何：更改已排队消息的内容\n你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 n，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。\n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_conection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Get the message from the queue and update the message contents.\n    // The visibility timeout \"0\" means make it visible immediately.\n    // The visibility timeout \"60\" means the client can get another minute to continue\n    // working on the message.\n    azure::storage::cloud_queue_message changed_message = queue.get_message();\n\n    changed_message.set_content(U(\"Changed message\"));\n    queue.update_message(changed_message, std::chrono::seconds(60), true);\n\n    // Output the message content.\n    std::wcout << U(\"Changed message content: \") << changed_message.content_as_string() << std::endl;  \n\n## 如何：取消下一条消息的排队\n你的代码通过两个步骤来取消对队列中某条消息的排队。调用 **get_message** 时，您将获取队列中的下一条消息。从 **get_message** 返回的消息对从此队列读取消息的其他任何代码不可见。若要完成从队列中删除消息，您还必须调用 **delete_message**。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 **delete_message**。\n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Get the next message.\n    azure::storage::cloud_queue_message dequeued_message = queue.get_message();\n    std::wcout << U(\"Dequeued message: \") << dequeued_message.content_as_string() << std::endl;\n\n    // Delete the message.\n    queue.delete_message(dequeued_message);\n\n## 如何：使用其他方法取消对消息的排队\n你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 **get_messages** 方法来在一次调用中获取 20 条消息。然后，它会使用 **for** 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，将对所有消息同时启动 5 分钟的超时设置，因此调用 **get_messages** 的 5 分钟后，任何尚未删除的消息都将再次可见。  \n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Dequeue some queue messages (maximum 32 at a time) and set their visibility timeout to\n    // 5 minutes (300 seconds).\n    azure::storage::queue_request_options options;\n    azure::storage::operation_context context;\n\n    // Retrieve 20 messages from the queue with a visibility timeout of 300 seconds.\n    std::vector<azure::storage::cloud_queue_message> messages = queue.get_messages(20, std::chrono::seconds(300), options, context);\n\n    for (auto it = messages.cbegin(); it != messages.cend(); ++it)\n    {\n        // Display the contents of the message.\n        std::wcout << U(\"Get: \") << it->content_as_string() << std::endl;\n    }\n\n## 如何：获取队列长度\n你可以获取队列中消息的估计数。**download_attributes** 方法允许队列服务检索队列属性，包括消息计数。**approximate_message_count** 方法可获取队列中的大致消息数。  \n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // Fetch the queue attributes.\n    queue.download_attributes();\n\n    // Retrieve the cached approximate message count.\n    int cachedMessageCount = queue.approximate_message_count();\n\n    // Display number of messages.\n    std::wcout << U(\"Number of messages in queue: \") << cachedMessageCount << std::endl;  \n\n## 如何：删除队列\n若要删除队列及其包含的所有消息，请对队列对象调用 **delete_queue_if_exists**。\n\n    // Retrieve storage account from connection-string.\n    azure::storage::cloud_storage_account storage_account = azure::storage::cloud_storage_account::parse(storage_connection_string);\n\n    // Create the queue client.\n    azure::storage::cloud_queue_client queue_client = storage_account.create_cloud_queue_client();\n\n    // Retrieve a reference to a queue.\n    azure::storage::cloud_queue queue = queue_client.get_queue_reference(U(\"my-sample-queue\"));\n\n    // If the queue exists and delete it.\n    queue.delete_queue_if_exists();  \n\n## 后续步骤\n既然你已了解队列存储的基本知识，就可以按照以下链接了解有关 Azure 存储的详细信息。\n\n-   [如何通过 C++ 使用 Blob 存储](/documentation/articles/storage-c-plus-plus-how-to-use-blobs)\n-   [如何通过 C++ 使用表存储](/documentation/articles/storage-c-plus-plus-how-to-use-tables)\n-   [使用 C++ 列出 Azure 存储资源](/documentation/articles/storage-c-plus-plus-enumeration)\n-   [适用于 C++ 的存储空间客户端库参考](http://azure.github.io/azure-storage-cpp)\n-   [Azure 存档文档](/documentation/services/storage/)\n\n \n\n<!---HONumber=Mooncake_0215_2016-->"
}