{
  "nodes": [
    {
      "content": "如何通过 PHP 使用表存储 | Azure",
      "pos": [
        27,
        49
      ]
    },
    {
      "content": "了解如何通过 PHP 使用表服务来创建和删除表以及插入、删除和查询表。",
      "pos": [
        68,
        103
      ]
    },
    {
      "content": "如何通过 PHP 使用表存储",
      "pos": [
        308,
        322
      ]
    },
    {
      "content": "概述",
      "pos": [
        424,
        426
      ]
    },
    {
      "pos": [
        428,
        575
      ],
      "content": "本指南演示如何使用 Azure 表服务执行常见任务。示例是用 PHP 编写的并使用了 <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">][download]</ept>。所涉及的任务包括“创建和删除表以及在表中插入、删除和查询实体”。有关 Azure 表服务的详细信息，请参阅<bpt id=\"p2\">[</bpt>后续步骤<ept id=\"p2\">](#NextSteps)</ept>部分。"
    },
    {
      "content": "创建 PHP 应用程序",
      "pos": [
        774,
        785
      ]
    },
    {
      "content": "创建访问 Azure 表服务的 PHP 应用程序的唯一要求是从代码中引用 Azure SDK for PHP 中的类。你可以使用任何开发工具（包括“记事本”）创建应用程序。",
      "pos": [
        787,
        873
      ]
    },
    {
      "content": "在本指南中，你将使用表服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或 Web 应用中运行的代码调用。",
      "pos": [
        875,
        953
      ]
    },
    {
      "content": "获取 Azure 客户端库",
      "pos": [
        958,
        971
      ]
    },
    {
      "content": "配置你的应用程序以访问表服务",
      "pos": [
        1053,
        1067
      ]
    },
    {
      "content": "若要使用 Azure 表服务 API，你需要：",
      "pos": [
        1069,
        1092
      ]
    },
    {
      "pos": [
        1097,
        1149
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>require_once<ept id=\"p1\">][require_once]</ept> 语句引用 autoloader 文件，并"
    },
    {
      "content": "引用可使用的所有类。",
      "pos": [
        1153,
        1163
      ]
    },
    {
      "pos": [
        1165,
        1217
      ],
      "content": "下面的示例演示了如何包括 autoloader 文件并引用 <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> 类。"
    },
    {
      "pos": [
        1221,
        1362
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本示例（以及本文中的其他示例）假定您已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果你已手动安装这些库或将其作为 PEAR 包安装，则需要引用 <ph id=\"ph2\">&lt;code&gt;</ph><ph id=\"ph3\">WindowsAzure.php</ph><ph id=\"ph4\">&lt;/code&gt;</ph> autoloader 文件。"
    },
    {
      "pos": [
        1451,
        1497
      ],
      "content": "在下面的示例中，<ph id=\"ph1\">`require_once`</ph> 语句将始终显示，但只会引用执行该示例所需的类。"
    },
    {
      "content": "设置 Azure 存储连接",
      "pos": [
        1502,
        1515
      ]
    },
    {
      "content": "若要实例化 Azure 表服务客户端，你必须首先具有有效的连接字符串。表服务连接字符串的格式为：",
      "pos": [
        1517,
        1565
      ]
    },
    {
      "content": "对于访问实时服务：",
      "pos": [
        1567,
        1576
      ]
    },
    {
      "content": "对于访问模拟器存储：",
      "pos": [
        1668,
        1678
      ]
    },
    {
      "pos": [
        1713,
        1765
      ],
      "content": "若要创建任何 Azure 服务客户端，你将需要使用 <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> 类。你可以："
    },
    {
      "content": "将连接字符串直接传递给此类或",
      "pos": [
        1769,
        1783
      ]
    },
    {
      "pos": [
        1786,
        1841
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>CloudConfigurationManager (CCM)<ept id=\"p1\">**</ept> 检查多个外部源以获取连接字符串："
    },
    {
      "content": "默认情况下，它附带了对一个外部源的支持 - 环境变量",
      "pos": [
        1848,
        1874
      ]
    },
    {
      "pos": [
        1881,
        1921
      ],
      "content": "你可通过扩展 <bpt id=\"p1\">**</bpt>ConnectionStringSource<ept id=\"p1\">**</ept> 类来添加新源"
    },
    {
      "content": "在此处列出的示例中，将直接传递连接字符串。",
      "pos": [
        1923,
        1944
      ]
    },
    {
      "content": "创建表",
      "pos": [
        2131,
        2134
      ]
    },
    {
      "pos": [
        2136,
        2258
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>TableRestProxy<ept id=\"p1\">**</ept> 对象，可以使用 <bpt id=\"p2\">**</bpt>createTable<ept id=\"p2\">**</ept> 方法创建表。创建表时，可以设置表服务超时。（有关表服务超时的详细信息，请参阅<bpt id=\"p3\">[</bpt>为表服务操作设置超时<ept id=\"p3\">][table-service-timeouts]</ept>。）"
    },
    {
      "pos": [
        2911,
        2956
      ],
      "content": "有关表名称的限制的信息，请参阅<bpt id=\"p1\">[</bpt>了解表服务数据模型<ept id=\"p1\">][table-data-model]</ept>。"
    },
    {
      "content": "将实体添加到表",
      "pos": [
        2961,
        2968
      ]
    },
    {
      "pos": [
        2970,
        3261
      ],
      "content": "若要将实体添加到表，请创建一个新的 <bpt id=\"p1\">**</bpt>Entity<ept id=\"p1\">**</ept> 对象并将其传递到 <bpt id=\"p2\">**</bpt>TableRestProxy-&gt;insertEntity<ept id=\"p2\">**</ept>。请注意，在创建实体时，你必须指定 <ph id=\"ph1\">`PartitionKey`</ph> 和 <ph id=\"ph2\">`RowKey`</ph>。这些值是实体的唯一标识符，并且其查询速度比其他实体属性的查询速度快得多。系统使用 <ph id=\"ph3\">`PartitionKey`</ph> 自动将表的实体分发到多个存储节点上。具有相同 <ph id=\"ph4\">`PartitionKey`</ph> 的实体存储在同一个节点上。（对存储在同一节点上的多个实体执行操作要将比对存储在不同节点上的实体执行的操作的效果更佳。） <ph id=\"ph5\">`RowKey`</ph> 是实体在分区中的唯一 ID。"
    },
    {
      "pos": [
        4360,
        4405
      ],
      "content": "有关表属性和类型的信息，请参阅<bpt id=\"p1\">[</bpt>了解表服务数据模型<ept id=\"p1\">][table-data-model]</ept>。"
    },
    {
      "pos": [
        4407,
        4919
      ],
      "content": "<bpt id=\"p1\">**</bpt>TableRestProxy<ept id=\"p1\">**</ept> 类提供了用于插入实体的两个替代方法：<bpt id=\"p2\">**</bpt>insertOrMergeEntity<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>insertOrReplaceEntity<ept id=\"p3\">**</ept>。若要使用这些方法，请创建一个新的 <bpt id=\"p4\">**</bpt>Entity<ept id=\"p4\">**</ept>，并将其作为参数传递到上述任一方法。如果实体不存在，则每种方法都将插入实体。在实体已存在的情况下，如果属性已存在，则 <bpt id=\"p5\">**</bpt>insertOrMergeEntity<ept id=\"p5\">**</ept> 将更新属性值；如果属性不存在，则该方法将添加新属性，而 <bpt id=\"p6\">**</bpt>insertOrReplaceEntity<ept id=\"p6\">**</ept> 将完全替换现有实体。下面的示例演示如何使用 <bpt id=\"p7\">**</bpt>insertOrMergeEntity<ept id=\"p7\">**</ept>。如果实体具有 <ph id=\"ph1\">`PartitionKey`</ph>“tasksSeattle”并且 <ph id=\"ph2\">`RowKey`</ph>“1”不存在，则将插入该实体。但是，如果之前已插入该实体（如上面的示例所示），则将更新 <ph id=\"ph3\">`DueDate`</ph> 属性并添加 <ph id=\"ph4\">`Status`</ph> 属性。系统还将更新 <ph id=\"ph5\">`Description`</ph> 和 <ph id=\"ph6\">`Location`</ph> 属性，但使用的值实际上会使其保持不变。如果后面两个属性不是如示例中所示添加的，但已存在于目标实体上，则其现有值将保持不变。"
    },
    {
      "content": "检索单个实体",
      "pos": [
        6512,
        6518
      ]
    },
    {
      "pos": [
        6520,
        6652
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;getEntity<ept id=\"p1\">**</ept> 方法，可以通过查询实体的 <ph id=\"ph1\">`PartitionKey`</ph> 和 <ph id=\"ph2\">`RowKey`</ph> 来检索它。在以下示例中，分区键 <ph id=\"ph3\">`tasksSeattle`</ph> 和行键 <ph id=\"ph4\">`1`</ph> 传递给 <bpt id=\"p2\">**</bpt>getEntity<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "content": "检索分区中的所有实体",
      "pos": [
        7450,
        7460
      ]
    },
    {
      "pos": [
        7462,
        7626
      ],
      "content": "使用筛选器来构造实体查询（有关详细信息，请参阅<bpt id=\"p1\">[</bpt>查询表和实体<ept id=\"p1\">][filters]</ept>）。若要检索分区中的所有实体，请使用筛选器“PartitionKey eq <bpt id=\"p2\">*</bpt>partition\\_name<ept id=\"p2\">*</ept>”。下面的示例演示如何通过将筛选器传递到 <bpt id=\"p3\">**</bpt>queryEntities<ept id=\"p3\">**</ept> 方法来检索 <ph id=\"ph1\">`tasksSeattle`</ph> 分区中的所有实体。"
    },
    {
      "content": "检索分区中的一部分实体",
      "pos": [
        8525,
        8536
      ]
    },
    {
      "pos": [
        8538,
        8672
      ],
      "content": "可以使用上一示例中使用的同一模式来检索分区中的部分实体。您检索的部分实体将由您使用的筛选器确定（有关详细信息，请参阅<bpt id=\"p1\">[</bpt>查询表和实体<ept id=\"p1\">][filters]</ept>）。下面的示例演示如何使用筛选器检索具有特定的 <ph id=\"ph1\">`Location`</ph> 和早于指定日期 <ph id=\"ph2\">`DueDate`</ph> 的所有实体。"
    },
    {
      "content": "检索一部分实体属性",
      "pos": [
        9588,
        9597
      ]
    },
    {
      "pos": [
        9599,
        9796
      ],
      "content": "查询可检索一部分实体属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。若要指定要检索的属性，请将该属性的名称传递到 <bpt id=\"p1\">**</bpt>Query-&gt;addSelectField<ept id=\"p1\">**</ept> 方法。可以多次调用此方法来添加更多属性。执行 <bpt id=\"p2\">**</bpt>TableRestProxy-&gt;queryEntities<ept id=\"p2\">**</ept> 后，返回的实体将仅具有选定的属性。（若要返回一部分表实体，请使用上述查询中所示的筛选器。）"
    },
    {
      "content": "更新实体",
      "pos": [
        10986,
        10990
      ]
    },
    {
      "pos": [
        10992,
        11165
      ],
      "content": "可通过对现有实体使用 <bpt id=\"p1\">**</bpt>Entity-&gt;setProperty<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>Entity-&gt;addProperty<ept id=\"p2\">**</ept> 方法并调用 <bpt id=\"p3\">**</bpt>TableRestProxy-&gt;updateEntity<ept id=\"p3\">**</ept> 来更新该实体。下面的示例将检索一个实体、修改一个属性、删除另一个属性并添加一个新属性。请注意，通过将属性的值设为 <bpt id=\"p4\">**</bpt>null<ept id=\"p4\">**</ept> 可删除该属性。"
    },
    {
      "content": "删除实体",
      "pos": [
        12275,
        12279
      ]
    },
    {
      "pos": [
        12281,
        12365
      ],
      "content": "若要删除实体，请将表名称以及实体的 <ph id=\"ph1\">`PartitionKey`</ph> 和 <ph id=\"ph2\">`RowKey`</ph> 传递到 <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;deleteEntity<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "pos": [
        13081,
        13207
      ],
      "content": "请注意，为了进行并发检查，可以使用 <bpt id=\"p1\">**</bpt>DeleteEntityOptions-&gt;setEtag<ept id=\"p1\">**</ept> 方法并将 <bpt id=\"p2\">**</bpt>DeleteEntityOptions<ept id=\"p2\">**</ept> 对象作为第四个参数传递到 <bpt id=\"p3\">**</bpt>deleteEntity<ept id=\"p3\">**</ept>，来为要删除的实体设置 Etag。"
    },
    {
      "content": "对表操作进行批处理",
      "pos": [
        13212,
        13221
      ]
    },
    {
      "pos": [
        13223,
        13403
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;batch<ept id=\"p1\">**</ept> 方法，你可以通过一个请求执行多个操作。此处的模式涉及将操作添加到 <bpt id=\"p2\">**</bpt>BatchRequest<ept id=\"p2\">**</ept> 对象，然后将 <bpt id=\"p3\">**</bpt>BatchRequest<ept id=\"p3\">**</ept> 对象传递到 <bpt id=\"p4\">**</bpt>TableRestProxy-&gt;batch<ept id=\"p4\">**</ept> 方法。若要将操作添加到 <bpt id=\"p5\">**</bpt>BatchRequest<ept id=\"p5\">**</ept> 对象，可以多次调用以下任一方法："
    },
    {
      "pos": [
        13407,
        13446
      ],
      "content": "<bpt id=\"p1\">**</bpt>addInsertEntity<ept id=\"p1\">**</ept>（添加 insertEntity 操作）"
    },
    {
      "pos": [
        13449,
        13488
      ],
      "content": "<bpt id=\"p1\">**</bpt>addUpdateEntity<ept id=\"p1\">**</ept>（添加 updateEntity 操作）"
    },
    {
      "pos": [
        13491,
        13528
      ],
      "content": "<bpt id=\"p1\">**</bpt>addMergeEntity<ept id=\"p1\">**</ept>（添加 mergeEntity 操作）"
    },
    {
      "pos": [
        13531,
        13588
      ],
      "content": "<bpt id=\"p1\">**</bpt>addInsertOrReplaceEntity<ept id=\"p1\">**</ept>（添加 insertOrReplaceEntity 操作）"
    },
    {
      "pos": [
        13591,
        13644
      ],
      "content": "<bpt id=\"p1\">**</bpt>addInsertOrMergeEntity<ept id=\"p1\">**</ept>（添加 insertOrMergeEntity 操作）"
    },
    {
      "pos": [
        13647,
        13686
      ],
      "content": "<bpt id=\"p1\">**</bpt>addDeleteEntity<ept id=\"p1\">**</ept>（添加 deleteEntity 操作）"
    },
    {
      "pos": [
        13688,
        13746
      ],
      "content": "下面的示例演示了如何通过单个请求执行 <bpt id=\"p1\">**</bpt>insertEntity<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>deleteEntity<ept id=\"p2\">**</ept> 操作："
    },
    {
      "pos": [
        15244,
        15301
      ],
      "content": "有关对表操作进行批处理的详细信息，请参阅<bpt id=\"p1\">[</bpt>执行实体组事务<ept id=\"p1\">][entity-group-transactions]</ept>。"
    },
    {
      "content": "删除表",
      "pos": [
        15306,
        15309
      ]
    },
    {
      "pos": [
        15311,
        15363
      ],
      "content": "最后，若要删除表，请将表名传递到 <bpt id=\"p1\">**</bpt>TableRestProxy-&gt;deleteTable<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "content": "后续步骤",
      "pos": [
        16059,
        16063
      ]
    },
    {
      "content": "现在，您已了解了 Azure 表服务的基础知识，单击下面的链接可了解有关更复杂的存储任务的详细信息。",
      "pos": [
        16065,
        16115
      ]
    },
    {
      "pos": [
        16119,
        16184
      ],
      "content": "访问 <bpt id=\"p1\">[</bpt>Azure 存储空间团队博客<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazurestorage/)</ept>"
    },
    {
      "pos": [
        16186,
        16226
      ],
      "content": "有关详细信息，另请参阅 <bpt id=\"p1\">[</bpt>PHP 开发人员中心<ept id=\"p1\">](/develop/php/)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何通过 PHP 使用表存储 | Azure\"\n    description=\"了解如何通过 PHP 使用表服务来创建和删除表以及插入、删除和查询表。\"\n    services=\"storage\"\n    documentationCenter=\"php\"\n    authors=\"tfitzmac\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/21/2016\"/>\n\n\n# 如何通过 PHP 使用表存储\n\n[AZURE.INCLUDE [storage-selector-table-include](../includes/storage-selector-table-include.md)]\n\n## 概述\n\n本指南演示如何使用 Azure 表服务执行常见任务。示例是用 PHP 编写的并使用了 [Azure SDK for PHP][download]。所涉及的任务包括“创建和删除表以及在表中插入、删除和查询实体”。有关 Azure 表服务的详细信息，请参阅[后续步骤](#NextSteps)部分。\n\n[AZURE.INCLUDE [storage-table-concepts-include](../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 PHP 应用程序\n\n创建访问 Azure 表服务的 PHP 应用程序的唯一要求是从代码中引用 Azure SDK for PHP 中的类。你可以使用任何开发工具（包括“记事本”）创建应用程序。\n\n在本指南中，你将使用表服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或 Web 应用中运行的代码调用。\n\n## 获取 Azure 客户端库\n\n[AZURE.INCLUDE [get-client-libraries](../includes/get-client-libraries.md)]\n\n## 配置你的应用程序以访问表服务\n\n若要使用 Azure 表服务 API，你需要：\n\n1. 使用 [require_once][require_once] 语句引用 autoloader 文件，并\n2. 引用可使用的所有类。\n\n下面的示例演示了如何包括 autoloader 文件并引用 **ServicesBuilder** 类。\n\n> [AZURE.NOTE]本示例（以及本文中的其他示例）假定您已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果你已手动安装这些库或将其作为 PEAR 包安装，则需要引用 <code>WindowsAzure.php</code> autoloader 文件。\n\n    require_once 'vendor\\autoload.php';\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n\n在下面的示例中，`require_once` 语句将始终显示，但只会引用执行该示例所需的类。\n\n## 设置 Azure 存储连接\n\n若要实例化 Azure 表服务客户端，你必须首先具有有效的连接字符串。表服务连接字符串的格式为：\n\n对于访问实时服务：\n\n    DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey]\n\n对于访问模拟器存储：\n\n    UseDevelopmentStorage=true\n\n\n若要创建任何 Azure 服务客户端，你将需要使用 **ServicesBuilder** 类。你可以：\n\n* 将连接字符串直接传递给此类或\n* 使用 **CloudConfigurationManager (CCM)** 检查多个外部源以获取连接字符串：\n    * 默认情况下，它附带了对一个外部源的支持 - 环境变量\n    * 你可通过扩展 **ConnectionStringSource** 类来添加新源\n\n在此处列出的示例中，将直接传递连接字符串。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n\n## 创建表\n\n利用 **TableRestProxy** 对象，可以使用 **createTable** 方法创建表。创建表时，可以设置表服务超时。（有关表服务超时的详细信息，请参阅[为表服务操作设置超时][table-service-timeouts]。）\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    try {\n        // Create table.\n        $tableRestProxy->createTable(\"mytable\");\n    }\n    catch(ServiceException $e){\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        // Handle exception based on error codes and messages.\n        // Error codes and messages can be found here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n    }\n\n有关表名称的限制的信息，请参阅[了解表服务数据模型][table-data-model]。\n\n## 将实体添加到表\n\n若要将实体添加到表，请创建一个新的 **Entity** 对象并将其传递到 **TableRestProxy->insertEntity**。请注意，在创建实体时，你必须指定 `PartitionKey` 和 `RowKey`。这些值是实体的唯一标识符，并且其查询速度比其他实体属性的查询速度快得多。系统使用 `PartitionKey` 自动将表的实体分发到多个存储节点上。具有相同 `PartitionKey` 的实体存储在同一个节点上。（对存储在同一节点上的多个实体执行操作要将比对存储在不同节点上的实体执行的操作的效果更佳。） `RowKey` 是实体在分区中的唯一 ID。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\Entity;\n    use WindowsAzure\\Table\\Models\\EdmType;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $entity = new Entity();\n    $entity->setPartitionKey(\"tasksSeattle\");\n    $entity->setRowKey(\"1\");\n    $entity->addProperty(\"Description\", null, \"Take out the trash.\");\n    $entity->addProperty(\"DueDate\",\n                         EdmType::DATETIME,\n                         new DateTime(\"2012-11-05T08:15:00-08:00\"));\n    $entity->addProperty(\"Location\", EdmType::STRING, \"Home\");\n\n    try{\n        $tableRestProxy->insertEntity(\"mytable\", $entity);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n    }\n\n有关表属性和类型的信息，请参阅[了解表服务数据模型][table-data-model]。\n\n**TableRestProxy** 类提供了用于插入实体的两个替代方法：**insertOrMergeEntity** 和 **insertOrReplaceEntity**。若要使用这些方法，请创建一个新的 **Entity**，并将其作为参数传递到上述任一方法。如果实体不存在，则每种方法都将插入实体。在实体已存在的情况下，如果属性已存在，则 **insertOrMergeEntity** 将更新属性值；如果属性不存在，则该方法将添加新属性，而 **insertOrReplaceEntity** 将完全替换现有实体。下面的示例演示如何使用 **insertOrMergeEntity**。如果实体具有 `PartitionKey`“tasksSeattle”并且 `RowKey`“1”不存在，则将插入该实体。但是，如果之前已插入该实体（如上面的示例所示），则将更新 `DueDate` 属性并添加 `Status` 属性。系统还将更新 `Description` 和 `Location` 属性，但使用的值实际上会使其保持不变。如果后面两个属性不是如示例中所示添加的，但已存在于目标实体上，则其现有值将保持不变。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\Entity;\n    use WindowsAzure\\Table\\Models\\EdmType;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    //Create new entity.\n    $entity = new Entity();\n\n    // PartitionKey and RowKey are required.\n    $entity->setPartitionKey(\"tasksSeattle\");\n    $entity->setRowKey(\"1\");\n\n    // If entity exists, existing properties are updated with new values and\n    // new properties are added. Missing properties are unchanged.\n    $entity->addProperty(\"Description\", null, \"Take out the trash.\");\n    $entity->addProperty(\"DueDate\", EdmType::DATETIME, new DateTime()); // Modified the DueDate field.\n    $entity->addProperty(\"Location\", EdmType::STRING, \"Home\");\n    $entity->addProperty(\"Status\", EdmType::STRING, \"Complete\"); // Added Status field.\n\n    try {\n        // Calling insertOrReplaceEntity, instead of insertOrMergeEntity as shown,\n        // would simply replace the entity with PartitionKey \"tasksSeattle\" and RowKey \"1\".\n        $tableRestProxy->insertOrMergeEntity(\"mytable\", $entity);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n\n## 检索单个实体\n\n利用 **TableRestProxy->getEntity** 方法，可以通过查询实体的 `PartitionKey` 和 `RowKey` 来检索它。在以下示例中，分区键 `tasksSeattle` 和行键 `1` 传递给 **getEntity** 方法。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    try {\n        $result = $tableRestProxy->getEntity(\"mytable\", \"tasksSeattle\", 1);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    $entity = $result->getEntity();\n\n    echo $entity->getPartitionKey().\":\".$entity->getRowKey();\n\n## 检索分区中的所有实体\n\n使用筛选器来构造实体查询（有关详细信息，请参阅[查询表和实体][filters]）。若要检索分区中的所有实体，请使用筛选器“PartitionKey eq *partition\\_name*”。下面的示例演示如何通过将筛选器传递到 **queryEntities** 方法来检索 `tasksSeattle` 分区中的所有实体。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $filter = \"PartitionKey eq 'tasksSeattle'\";\n\n    try {\n        $result = $tableRestProxy->queryEntities(\"mytable\", $filter);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    $entities = $result->getEntities();\n\n    foreach($entities as $entity){\n        echo $entity->getPartitionKey().\":\".$entity->getRowKey().\"<br />\";\n    }\n\n## 检索分区中的一部分实体\n\n可以使用上一示例中使用的同一模式来检索分区中的部分实体。您检索的部分实体将由您使用的筛选器确定（有关详细信息，请参阅[查询表和实体][filters]）。下面的示例演示如何使用筛选器检索具有特定的 `Location` 和早于指定日期 `DueDate` 的所有实体。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $filter = \"Location eq 'Office' and DueDate lt '2012-11-5'\";\n\n    try {\n        $result = $tableRestProxy->queryEntities(\"mytable\", $filter);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    $entities = $result->getEntities();\n\n    foreach($entities as $entity){\n        echo $entity->getPartitionKey().\":\".$entity->getRowKey().\"<br />\";\n    }\n\n## 检索一部分实体属性\n\n查询可检索一部分实体属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。若要指定要检索的属性，请将该属性的名称传递到 **Query->addSelectField** 方法。可以多次调用此方法来添加更多属性。执行 **TableRestProxy->queryEntities** 后，返回的实体将仅具有选定的属性。（若要返回一部分表实体，请使用上述查询中所示的筛选器。）\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\QueryEntitiesOptions;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $options = new QueryEntitiesOptions();\n    $options->addSelectField(\"Description\");\n\n    try {\n        $result = $tableRestProxy->queryEntities(\"mytable\", $options);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    // All entities in the table are returned, regardless of whether\n    // they have the Description field.\n    // To limit the results returned, use a filter.\n    $entities = $result->getEntities();\n\n    foreach($entities as $entity){\n        $description = $entity->getProperty(\"Description\")->getValue();\n        echo $description.\"<br />\";\n    }\n\n## 更新实体\n\n可通过对现有实体使用 **Entity->setProperty** 和 **Entity->addProperty** 方法并调用 **TableRestProxy->updateEntity** 来更新该实体。下面的示例将检索一个实体、修改一个属性、删除另一个属性并添加一个新属性。请注意，通过将属性的值设为 **null** 可删除该属性。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\Entity;\n    use WindowsAzure\\Table\\Models\\EdmType;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    $result = $tableRestProxy->getEntity(\"mytable\", \"tasksSeattle\", 1);\n\n    $entity = $result->getEntity();\n\n    $entity->setPropertyValue(\"DueDate\", new DateTime()); //Modified DueDate.\n\n    $entity->setPropertyValue(\"Location\", null); //Removed Location.\n\n    $entity->addProperty(\"Status\", EdmType::STRING, \"In progress\"); //Added Status.\n\n    try {\n        $tableRestProxy->updateEntity(\"mytable\", $entity);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## 删除实体\n\n若要删除实体，请将表名称以及实体的 `PartitionKey` 和 `RowKey` 传递到 **TableRestProxy->deleteEntity** 方法。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    try {\n        // Delete entity.\n        $tableRestProxy->deleteEntity(\"mytable\", \"tasksSeattle\", \"2\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n请注意，为了进行并发检查，可以使用 **DeleteEntityOptions->setEtag** 方法并将 **DeleteEntityOptions** 对象作为第四个参数传递到 **deleteEntity**，来为要删除的实体设置 Etag。\n\n## 对表操作进行批处理\n\n利用 **TableRestProxy->batch** 方法，你可以通过一个请求执行多个操作。此处的模式涉及将操作添加到 **BatchRequest** 对象，然后将 **BatchRequest** 对象传递到 **TableRestProxy->batch** 方法。若要将操作添加到 **BatchRequest** 对象，可以多次调用以下任一方法：\n\n* **addInsertEntity**（添加 insertEntity 操作）\n* **addUpdateEntity**（添加 updateEntity 操作）\n* **addMergeEntity**（添加 mergeEntity 操作）\n* **addInsertOrReplaceEntity**（添加 insertOrReplaceEntity 操作）\n* **addInsertOrMergeEntity**（添加 insertOrMergeEntity 操作）\n* **addDeleteEntity**（添加 deleteEntity 操作）\n\n下面的示例演示了如何通过单个请求执行 **insertEntity** 和 **deleteEntity** 操作：\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Table\\Models\\Entity;\n    use WindowsAzure\\Table\\Models\\EdmType;\n    use WindowsAzure\\Table\\Models\\BatchOperations;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    // Create list of batch operation.\n    $operations = new BatchOperations();\n\n    $entity1 = new Entity();\n    $entity1->setPartitionKey(\"tasksSeattle\");\n    $entity1->setRowKey(\"2\");\n    $entity1->addProperty(\"Description\", null, \"Clean roof gutters.\");\n    $entity1->addProperty(\"DueDate\",\n                          EdmType::DATETIME,\n                          new DateTime(\"2012-11-05T08:15:00-08:00\"));\n    $entity1->addProperty(\"Location\", EdmType::STRING, \"Home\");\n\n    // Add operation to list of batch operations.\n    $operations->addInsertEntity(\"mytable\", $entity1);\n\n    // Add operation to list of batch operations.\n    $operations->addDeleteEntity(\"mytable\", \"tasksSeattle\", \"1\");\n\n    try {\n        $tableRestProxy->batch($operations);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n有关对表操作进行批处理的详细信息，请参阅[执行实体组事务][entity-group-transactions]。\n\n## 删除表\n\n最后，若要删除表，请将表名传递到 **TableRestProxy->deleteTable** 方法。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create table REST proxy.\n    $tableRestProxy = ServicesBuilder::getInstance()->createTableService($connectionString);\n\n    try {\n        // Delete table.\n        $tableRestProxy->deleteTable(\"mytable\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179438.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## 后续步骤\n\n现在，您已了解了 Azure 表服务的基础知识，单击下面的链接可了解有关更复杂的存储任务的详细信息。\n\n- 访问 [Azure 存储空间团队博客](http://blogs.msdn.com/b/windowsazurestorage/)\n\n有关详细信息，另请参阅 [PHP 开发人员中心](/develop/php/)。\n\n[download]: /documentation/articles/php-download-sdk\n[require_once]: http://php.net/require_once\n[table-service-timeouts]: http://msdn.microsoft.com/zh-cn/library/azure/dd894042.aspx\n\n[table-data-model]: http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx\n[filters]: http://msdn.microsoft.com/zh-cn/library/azure/dd894031.aspx\n[entity-group-transactions]: http://msdn.microsoft.com/zh-cn/library/azure/dd894038.aspx\n\n<!---HONumber=Mooncake_0104_2016-->"
}