{
  "nodes": [
    {
      "content": "如何通过 Node.js 使用表存储 | Azure",
      "pos": [
        28,
        54
      ]
    },
    {
      "content": "了解如何使用 Azure 表存储。代码示例使用 Node.js API 编写。",
      "pos": [
        74,
        113
      ]
    },
    {
      "content": "如何通过 Node.js 使用 Azure 表存储",
      "pos": [
        332,
        357
      ]
    },
    {
      "content": "概述",
      "pos": [
        460,
        462
      ]
    },
    {
      "content": "本主题将演示如何使用 Node.js 应用程序中的 Azure 表服务执行常见方案。",
      "pos": [
        464,
        506
      ]
    },
    {
      "content": "本主题中的代码示例假定您已有 Node.js 应用程序。有关在 Azure 中创建 Node.js 应用程序的信息，请参阅以下任何主题：",
      "pos": [
        508,
        576
      ]
    },
    {
      "content": "[构建 Node.js Web 应用并部署到 Azure][创建 Node.js 应用程序并将其部署到 Azure Web 应用]。",
      "pos": [
        580,
        646
      ]
    },
    {
      "content": "使用 WebMatrix 构建 Node.js Web 应用并部署到 Azure",
      "pos": [
        650,
        690
      ]
    },
    {
      "content": "[构建 Node.js 应用程序并将其部署到 Azure 云服务][Node.js Cloud Service]（使用 Windows PowerShell）",
      "pos": [
        718,
        797
      ]
    },
    {
      "content": "创建用于访问 Azure 存储的应用程序",
      "pos": [
        998,
        1018
      ]
    },
    {
      "content": "若要使用 Azure 存储空间，你需要 Azure Storage SDK for Node.js，其中包括一组便于与存储 REST 服务进行通信的库。",
      "pos": [
        1020,
        1096
      ]
    },
    {
      "content": "使用 Node 包管理器 (NPM) 安装该程序包",
      "pos": [
        1102,
        1127
      ]
    },
    {
      "pos": [
        1133,
        1223
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows)、<bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac) 或 <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix) 等命令行界面导航到您在其中创建了应用程序的文件夹。"
    },
    {
      "pos": [
        1229,
        1282
      ],
      "content": "在命令窗口中键入 <bpt id=\"p1\">**</bpt>npm install azure-storage<ept id=\"p1\">**</ept>。该命令的输出类似于以下示例。"
    },
    {
      "pos": [
        1995,
        2086
      ],
      "content": "可以手动运行 <bpt id=\"p1\">**</bpt>ls<ept id=\"p1\">**</ept> 命令来验证是否创建了 <bpt id=\"p2\">**</bpt>node_modules<ept id=\"p2\">**</ept> 文件夹。在该文件夹中，您将找到 <bpt id=\"p3\">**</bpt>azure-storage<ept id=\"p3\">**</ept> 包，其中包含访问存储所需的库。"
    },
    {
      "content": "导入包",
      "pos": [
        2092,
        2095
      ]
    },
    {
      "pos": [
        2097,
        2134
      ],
      "content": "将以下代码添加到您的应用程序中的 <bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> 文件的顶部："
    },
    {
      "content": "设置 Azure 存储连接",
      "pos": [
        2182,
        2195
      ]
    },
    {
      "pos": [
        2197,
        2365
      ],
      "content": "Azure 模块将读取环境变量 AZURE_STORAGE_ACCOUNT 和 AZURE_STORAGE_ACCESS_KEY 或 AZURE_STORAGE_CONNECTION_STRING 以获取连接到您的 Azure 存储帐户所需的信息。如果未设置这些环境变量，则必须在调用 <bpt id=\"p1\">**</bpt>TableService<ept id=\"p1\">**</ept> 时指定帐户信息。"
    },
    {
      "pos": [
        2367,
        2425
      ],
      "content": "有关在管理门户中为 Azure Web 应用设置环境变量的示例，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用存储构建 Node.js Web 应用]</ept>"
    },
    {
      "content": "创建表",
      "pos": [
        2430,
        2433
      ]
    },
    {
      "pos": [
        2435,
        2503
      ],
      "content": "下面的代码创建 <bpt id=\"p1\">**</bpt>TableService<ept id=\"p1\">**</ept> 对象并使用它来创建一个新表。将以下代码添加到 <bpt id=\"p2\">**</bpt>server.js<ept id=\"p2\">**</ept> 的顶部附近。"
    },
    {
      "pos": [
        2553,
        2643
      ],
      "content": "调用 <bpt id=\"p1\">**</bpt>createTableIfNotExists<ept id=\"p1\">**</ept> 将创建具有指定名称的一个新表（如果该表尚不存在）。下面的示例将创建一个名为“mytable”的新表（如果该表尚不存在）："
    },
    {
      "pos": [
        2805,
        2876
      ],
      "content": "<ph id=\"ph1\">`result`</ph> 将为 <ph id=\"ph2\">`true`</ph>（如果创建了新表），或者为 <ph id=\"ph3\">`false`</ph>（如果表已存在）。<ph id=\"ph4\">`response`</ph> 将包含有关该请求的信息。"
    },
    {
      "content": "筛选器",
      "pos": [
        2882,
        2885
      ]
    },
    {
      "pos": [
        2887,
        2959
      ],
      "content": "可选的筛选操作可应用于使用 <bpt id=\"p1\">**</bpt>TableService<ept id=\"p1\">**</ept> 执行的操作。筛选操作可包括日志记录、自动重试等。筛选器是实现具有签名的方法的对象："
    },
    {
      "content": "在对请求选项执行预处理后，该方法需要调用“next”并且传递具有以下签名的回调：",
      "pos": [
        3009,
        3049
      ]
    },
    {
      "content": "在此回调中并且在处理 returnObject（来自对服务器请求的响应）后，回调需要调用 next（如果它存在，以便继续处理其他筛选器）或只调用 finalCallback 以便结束服务调用。",
      "pos": [
        3105,
        3201
      ]
    },
    {
      "pos": [
        3203,
        3375
      ],
      "content": "Azure SDK for Node.js 中附带了两个实现了重试逻辑的筛选器，分别是 <bpt id=\"p1\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>LinearRetryPolicyFilter<ept id=\"p2\">**</ept>。以下代码将创建使用 <bpt id=\"p3\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p3\">**</ept> 的 <bpt id=\"p4\">**</bpt>TableService<ept id=\"p4\">**</ept> 对象:"
    },
    {
      "content": "将实体添加到表",
      "pos": [
        3524,
        3531
      ]
    },
    {
      "pos": [
        3533,
        3607
      ],
      "content": "若要添加实体，首先创建定义实体属性的对象。所有实体都必须都包含 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept>，它们是实体的唯一标识符。"
    },
    {
      "pos": [
        3611,
        3642
      ],
      "content": "<bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> - 确定实体存储在其中的分区"
    },
    {
      "pos": [
        3646,
        3669
      ],
      "content": "<bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> - 唯一标识分区内的实体"
    },
    {
      "pos": [
        3671,
        3793
      ],
      "content": "<bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 都必须是字符串值。有关详细信息，请参阅<bpt id=\"p3\">[</bpt>了解表服务数据模型<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)</ept>。"
    },
    {
      "pos": [
        3795,
        3878
      ],
      "content": "下面是如何定义实体的示例。请注意，<bpt id=\"p1\">**</bpt>dueDate<ept id=\"p1\">**</ept> 被定义为一种类型的 <bpt id=\"p2\">**</bpt>Edm.DateTime<ept id=\"p2\">**</ept>。可以选择性地指定类型。如果未指定类型，系统会进行推断。"
    },
    {
      "pos": [
        4082,
        4134
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 每个记录还有一个“时间戳”字段，在插入或更新实体时，Azure 会设置该字段。"
    },
    {
      "pos": [
        4136,
        4208
      ],
      "content": "您还可以使用 <bpt id=\"p1\">**</bpt>entityGenerator<ept id=\"p1\">**</ept> 来创建实体。下面的示例使用 <bpt id=\"p2\">**</bpt>entityGenerator<ept id=\"p2\">**</ept> 来创建相同的任务实体。"
    },
    {
      "pos": [
        4493,
        4533
      ],
      "content": "要将实体添加到表中，应将实体对象传递给 <bpt id=\"p1\">**</bpt>insertEntity<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "pos": [
        4684,
        4781
      ],
      "content": "如果操作成功，<ph id=\"ph1\">`result`</ph> 将包含插入的记录的 <bpt id=\"p1\">[</bpt>ETag<ept id=\"p1\">](http://zh.wikipedia.org/wiki/HTTP_ETag)</ept>，而 <ph id=\"ph2\">`response`</ph> 将包含有关操作的信息。"
    },
    {
      "content": "示例响应:",
      "pos": [
        4783,
        4788
      ]
    },
    {
      "pos": [
        4869,
        5015
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 默认情况下，<bpt id=\"p1\">**</bpt>insertEntity<ept id=\"p1\">**</ept> 不会在 <ph id=\"ph2\">`response`</ph> 信息中返回插入的实体。如果您计划对此实体执行其他操作，或者希望对信息进行缓存，则可在 <ph id=\"ph3\">`result`</ph> 中返回该实体。您可以通过启用 <bpt id=\"p2\">**</bpt>echoContent<ept id=\"p2\">**</ept> 来执行此操作，如下所示："
    },
    {
      "content": "更新实体",
      "pos": [
        5127,
        5131
      ]
    },
    {
      "content": "可使用多种方法来更新现有实体：",
      "pos": [
        5133,
        5148
      ]
    },
    {
      "pos": [
        5152,
        5186
      ],
      "content": "<bpt id=\"p1\">**</bpt>updateEntity<ept id=\"p1\">**</ept> - 通过替换现有实体来更新现有实体"
    },
    {
      "pos": [
        5190,
        5229
      ],
      "content": "<bpt id=\"p1\">**</bpt>mergeEntity<ept id=\"p1\">**</ept> - 通过将新属性值合并到现有实体来更新现有实体"
    },
    {
      "pos": [
        5233,
        5293
      ],
      "content": "<bpt id=\"p1\">**</bpt>insertOrReplaceEntity<ept id=\"p1\">**</ept> - 通过替换现有实体来更新现有实体。如果不存在实体，将插入一个新实体"
    },
    {
      "pos": [
        5297,
        5361
      ],
      "content": "<bpt id=\"p1\">**</bpt>insertOrMergeEntity<ept id=\"p1\">**</ept> - 通过将新属性值合并到现有实体来更新现有实体。如果不存在实体，将插入一个新实体"
    },
    {
      "pos": [
        5363,
        5395
      ],
      "content": "以下示例演示了使用 <bpt id=\"p1\">**</bpt>updateEntity<ept id=\"p1\">**</ept> 更新实体："
    },
    {
      "pos": [
        5546,
        5612
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 默认情况下，更新某个实体时，不会查看要更新的数据是否曾被其他进程更新过。若要支持并发更新，请执行以下步骤："
    },
    {
      "pos": [
        5620,
        5709
      ],
      "content": "获取要更新的对象的 ETag。对于任何实体相关操作，该 ETag 将在 <ph id=\"ph1\">`response`</ph> 中返回，并且可通过 <ph id=\"ph2\">`response['.metadata'].etag`</ph> 检索。"
    },
    {
      "content": "对某个实体执行更新操作时，请将以前检索的 ETag 信息添加到新的实体。例如：",
      "pos": [
        5717,
        5756
      ]
    },
    {
      "pos": [
        5819,
        5893
      ],
      "content": "执行更新操作。如果实体在您检索 ETag 值后已被修改，例如被应用程序的其他实例修改，则会返回一条 <ph id=\"ph1\">`error`</ph>，指出未满足请求中指定的更新条件。"
    },
    {
      "pos": [
        5895,
        6035
      ],
      "content": "对于 <bpt id=\"p1\">**</bpt>updateEntity<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>mergeEntity<ept id=\"p2\">**</ept>，如果待更新的实体不存在，则更新操作将失败。因此，如果您希望存储某个实体而不考虑它是否已存在，请使用 <bpt id=\"p3\">**</bpt>insertOrReplaceEntity<ept id=\"p3\">**</ept> 或 <bpt id=\"p4\">**</bpt>insertOrMergeEntity<ept id=\"p4\">**</ept>。"
    },
    {
      "pos": [
        6037,
        6076
      ],
      "content": "如果更新操作成功，则 <ph id=\"ph1\">`result`</ph> 会包含所更新实体的 <bpt id=\"p1\">**</bpt>Etag<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "使用实体组",
      "pos": [
        6081,
        6086
      ]
    },
    {
      "pos": [
        6088,
        6200
      ],
      "content": "有时，有必要成批地同时提交多项操作以确保通过服务器进行原子处理。使用 <bpt id=\"p1\">**</bpt>TableBatch<ept id=\"p1\">**</ept> 类来创建一个批处理，然后使用 <bpt id=\"p2\">**</bpt>TableService<ept id=\"p2\">**</ept> 的 <bpt id=\"p3\">**</bpt>executeBatch<ept id=\"p3\">**</ept> 方法来执行批处理操作。"
    },
    {
      "content": "下面的示例演示了在一个批次中提交两个实体：",
      "pos": [
        6203,
        6224
      ]
    },
    {
      "pos": [
        6874,
        6909
      ],
      "content": "对于成功的批处理操作，<ph id=\"ph1\">`result`</ph> 将包含批处理中每个操作的信息。"
    },
    {
      "content": "使用批处理操作",
      "pos": [
        6915,
        6922
      ]
    },
    {
      "pos": [
        6924,
        6975
      ],
      "content": "可以通过查看 <ph id=\"ph1\">`operations`</ph> 属性来检查添加到批处理中的操作。你可以使用以下方法来处理操作："
    },
    {
      "pos": [
        6979,
        7002
      ],
      "content": "<bpt id=\"p1\">**</bpt>clear<ept id=\"p1\">**</ept> - 清除批处理中的所有操作"
    },
    {
      "pos": [
        7006,
        7034
      ],
      "content": "<bpt id=\"p1\">**</bpt>getOperations<ept id=\"p1\">**</ept> - 获取批处理的操作"
    },
    {
      "pos": [
        7038,
        7076
      ],
      "content": "<bpt id=\"p1\">**</bpt>hasOperations<ept id=\"p1\">**</ept> - 如果批处理包含操作，则返回 true"
    },
    {
      "pos": [
        7080,
        7107
      ],
      "content": "<bpt id=\"p1\">**</bpt>removeOperations<ept id=\"p1\">**</ept> - 删除操作"
    },
    {
      "pos": [
        7111,
        7133
      ],
      "content": "<bpt id=\"p1\">**</bpt>size<ept id=\"p1\">**</ept> - 返回批处理中操作的数目"
    },
    {
      "content": "通过键检索实体",
      "pos": [
        7138,
        7145
      ]
    },
    {
      "pos": [
        7147,
        7219
      ],
      "content": "如果您想要返回基于 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 的特定实体，请使用 <bpt id=\"p3\">**</bpt>retrieveEntity<ept id=\"p3\">**</ept> 方法。"
    },
    {
      "pos": [
        7386,
        7409
      ],
      "content": "此操作完成后，<ph id=\"ph1\">`result`</ph> 将包含该实体。"
    },
    {
      "content": "查询实体集",
      "pos": [
        7414,
        7419
      ]
    },
    {
      "pos": [
        7421,
        7462
      ],
      "content": "若要查询表，请使用 <bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept> 对象生成一个使用以下子句的查询："
    },
    {
      "pos": [
        7466,
        7489
      ],
      "content": "<bpt id=\"p1\">**</bpt>select<ept id=\"p1\">**</ept> - 将要从查询返回的字段"
    },
    {
      "pos": [
        7493,
        7513
      ],
      "content": "<bpt id=\"p1\">**</bpt>where<ept id=\"p1\">**</ept> - where 子句"
    },
    {
      "pos": [
        7521,
        7548
      ],
      "content": "<bpt id=\"p1\">**</bpt>and<ept id=\"p1\">**</ept> - 一个 <ph id=\"ph1\">`and`</ph> where 条件"
    },
    {
      "pos": [
        7556,
        7581
      ],
      "content": "<bpt id=\"p1\">**</bpt>or<ept id=\"p1\">**</ept> - 一个 <ph id=\"ph1\">`or`</ph> where 条件"
    },
    {
      "pos": [
        7585,
        7601
      ],
      "content": "<bpt id=\"p1\">**</bpt>top<ept id=\"p1\">**</ept> - 要提取的项数"
    },
    {
      "content": "以下示例生成的查询将返回 PartitionKey 为“hometasks”的前五项。",
      "pos": [
        7604,
        7647
      ]
    },
    {
      "pos": [
        7751,
        7836
      ],
      "content": "由于未使用 <bpt id=\"p1\">**</bpt>select<ept id=\"p1\">**</ept>，因此将返回所有字段。若要对表执行查询，请使用 <bpt id=\"p2\">**</bpt>queryEntities<ept id=\"p2\">**</ept>。下面的示例使用此查询来返回“mytable”中的实体。"
    },
    {
      "pos": [
        7992,
        8144
      ],
      "content": "如果成功，<ph id=\"ph1\">`result.entries`</ph> 将包含与查询匹配的一组实体。如果查询无法返回所有实体，<ph id=\"ph2\">`result.continuationToken`</ph> 就不会是 <bpt id=\"p1\">*</bpt>null<ept id=\"p1\">*</ept> ，因此可用作 <bpt id=\"p2\">**</bpt>queryEntities<ept id=\"p2\">**</ept> 的第三个参数来检索更多结果。对于初始查询，请为第三个参数使用 <bpt id=\"p3\">*</bpt>null<ept id=\"p3\">*</ept> 。"
    },
    {
      "content": "查询一部分实体属性",
      "pos": [
        8150,
        8159
      ]
    },
    {
      "pos": [
        8161,
        8282
      ],
      "content": "对表的查询可以只检索实体中的少数几个字段。这可以减少带宽并提高查询性能，尤其适用于大型实体。使用 <bpt id=\"p1\">**</bpt>select<ept id=\"p1\">**</ept> 子句并传递要返回的字段的名称。例如，下面的查询将只返回 <bpt id=\"p2\">**</bpt>description<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>dueDate<ept id=\"p3\">**</ept> 字段。"
    },
    {
      "content": "删除实体",
      "pos": [
        8431,
        8435
      ]
    },
    {
      "pos": [
        8437,
        8545
      ],
      "content": "可以使用实体的分区键和行键删除实体。在本例中，<bpt id=\"p1\">**</bpt>task1<ept id=\"p1\">**</ept> 对象包含要删除的实体的 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 值。然后，该对象被传递给 <bpt id=\"p4\">**</bpt>deleteEntity<ept id=\"p4\">**</ept> 方法。"
    },
    {
      "pos": [
        8770,
        8852
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 考虑在删除项时使用 ETag，以确保项尚未被其他进程修改。请参阅<bpt id=\"p1\">[</bpt>更新实体<ept id=\"p1\">](#update-an-entity)</ept>了解如何使用 ETag。"
    },
    {
      "content": "删除表",
      "pos": [
        8857,
        8860
      ]
    },
    {
      "content": "以下代码从存储帐户中删除一个表。",
      "pos": [
        8862,
        8878
      ]
    },
    {
      "pos": [
        9011,
        9051
      ],
      "content": "如果您不确定表是否存在，则使用 <bpt id=\"p1\">**</bpt>deleteTableIfExists<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "使用继续标记",
      "pos": [
        9056,
        9062
      ]
    },
    {
      "content": "在所查询的表有大量的结果时，请查找继续标记。如果您在生成时不能识别何时存在继续标记，可能存在大量您未意识到的数据可用于查询。",
      "pos": [
        9064,
        9126
      ]
    },
    {
      "pos": [
        9128,
        9202
      ],
      "content": "查询实体在存在此类标记期间设置 <ph id=\"ph1\">`continuationToken`</ph> 属性，返回结果对象。然后可以在执行查询时使用它，以继续在分区和表实体间移动。"
    },
    {
      "content": "在查询时，在查询对象实例和回调函数之间可能会提供继续标记参数：",
      "pos": [
        9204,
        9235
      ]
    },
    {
      "pos": [
        9597,
        9697
      ],
      "content": "如果你检查 <ph id=\"ph1\">`continuationToken`</ph> 对象，你会发现 <ph id=\"ph2\">`nextPartitionKey`</ph>、<ph id=\"ph3\">`nextRowKey`</ph> 和 <ph id=\"ph4\">`targetLocation`</ph> 等属性可用于循环访问所有结果。"
    },
    {
      "pos": [
        9699,
        9785
      ],
      "content": "在 GitHub 上的 Azure 存储 Node.js 存储库中还有一个继续样本。查找 <ph id=\"ph1\">`examples/samples/continuationsample.js`</ph>。"
    },
    {
      "content": "使用共享访问签名",
      "pos": [
        9790,
        9798
      ]
    },
    {
      "content": "共享访问签名 (SAS) 是一种安全的方法，用于对表进行细致访问而无需提供你的存储帐户名或密钥。通常使用 SAS 来提供对你的数据的有限访问权限，例如允许移动应用程序查询记录。",
      "pos": [
        9800,
        9888
      ]
    },
    {
      "pos": [
        9890,
        10056
      ],
      "content": "受信任的应用程序（例如基于云的服务）可使用 <bpt id=\"p1\">**</bpt>TableService<ept id=\"p1\">**</ept> 的 <bpt id=\"p2\">**</bpt>generateSharedAccessSignature<ept id=\"p2\">**</ept> 生成 SAS，然后将其提供给不受信任的或不完全受信任的应用程序，例如移动应用。SAS 可使用策略生成，该策略描述了 SAS 的生效日期和失效日期，以及授予 SAS 持有者的访问级别。"
    },
    {
      "content": "下面的示例生成了一个新的共享访问策略，该策略将允许 SAS 持有者查询 ('r') 表，在创建后 100 分钟过期。",
      "pos": [
        10058,
        10116
      ]
    },
    {
      "content": "请注意，还必须提供主机信息，因为 SAS 持有者尝试访问表时，必须提供该信息。",
      "pos": [
        10623,
        10662
      ]
    },
    {
      "pos": [
        10664,
        10736
      ],
      "content": "然后，客户端应用程序将 SAS 用于 <bpt id=\"p1\">**</bpt>TableServiceWithSAS<ept id=\"p1\">**</ept>，以便针对表执行操作。下面的示例连接到该表，并执行一个查询。"
    },
    {
      "content": "由于 SAS 在生成时只具有查询访问权限，因此如果尝试插入、更新或删除实体，则会返回错误。",
      "pos": [
        11062,
        11107
      ]
    },
    {
      "content": "访问控制列表",
      "pos": [
        11113,
        11119
      ]
    },
    {
      "content": "你还可以使用访问控制列表 (ACL) 为 SAS 设置访问策略。如果你希望允许多个客户端访问某个表，但为每个客户端提供了不同的访问策略，则访问控制列表会很有用。",
      "pos": [
        11121,
        11201
      ]
    },
    {
      "content": "ACL 是使用一组访问策略实施的，每个策略都有一个关联的 ID。以下示例定义了两个策略，一个用于“user1”，一个用于“user2”：",
      "pos": [
        11203,
        11271
      ]
    },
    {
      "pos": [
        11717,
        11784
      ],
      "content": "以下示例获取 <bpt id=\"p1\">**</bpt>hometasks<ept id=\"p1\">**</ept> 表的当前 ACL，然后使用 <bpt id=\"p2\">**</bpt>setTableAcl<ept id=\"p2\">**</ept> 添加新策略。此方法具有以下用途："
    },
    {
      "content": "设置 ACL 后，你可以根据某个策略的 ID 创建 SAS。以下示例为“user2”创建新的 SAS：",
      "pos": [
        12161,
        12212
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        12303,
        12307
      ]
    },
    {
      "content": "有关详细信息，请参阅以下资源。",
      "pos": [
        12309,
        12324
      ]
    },
    {
      "content": "[Azure 存储团队博客][]。",
      "pos": [
        12330,
        12347
      ]
    },
    {
      "pos": [
        12352,
        12397
      ],
      "content": "GitHub 上的 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Node<ept id=\"p1\">][]</ept> 存储库。"
    },
    {
      "content": "Node.js 开发人员中心",
      "pos": [
        12403,
        12417
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Node.js 使用表存储 | Azure\" \n    description=\"了解如何使用 Azure 表存储。代码示例使用 Node.js API 编写。\" \n    services=\"storage\" \n    documentationCenter=\"nodejs\" \n    authors=\"MikeWasson\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"12/01/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n\n# 如何通过 Node.js 使用 Azure 表存储\n\n[AZURE.INCLUDE [storage-selector-table-include](../includes/storage-selector-table-include.md)]\n\n\n## 概述\n\n本主题将演示如何使用 Node.js 应用程序中的 Azure 表服务执行常见方案。\n\n本主题中的代码示例假定您已有 Node.js 应用程序。有关在 Azure 中创建 Node.js 应用程序的信息，请参阅以下任何主题：\n\n- [构建 Node.js Web 应用并部署到 Azure][创建 Node.js 应用程序并将其部署到 Azure Web 应用]。\n- [使用 WebMatrix 构建 Node.js Web 应用并部署到 Azure][使用 WebMatrix 构建 Web 应用]\n- [构建 Node.js 应用程序并将其部署到 Azure 云服务][Node.js Cloud Service]（使用 Windows PowerShell）\n\n\n[AZURE.INCLUDE [storage-table-concepts-include](../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n\n## 创建用于访问 Azure 存储的应用程序\n\n若要使用 Azure 存储空间，你需要 Azure Storage SDK for Node.js，其中包括一组便于与存储 REST 服务进行通信的库。\n\n### 使用 Node 包管理器 (NPM) 安装该程序包\n\n1.  使用 **PowerShell** (Windows)、**Terminal** (Mac) 或 **Bash** (Unix) 等命令行界面导航到您在其中创建了应用程序的文件夹。\n\n2.  在命令窗口中键入 **npm install azure-storage**。该命令的输出类似于以下示例。\n\n        azure-storage@0.5.0 node_modules\\azure-storage\n        +-- extend@1.2.1\n        +-- xmlbuilder@0.4.3\n        +-- mime@1.2.11\n        +-- node-uuid@1.4.3\n        +-- validator@3.22.2\n        +-- underscore@1.4.4\n        +-- readable-stream@1.0.33 (string_decoder@0.10.31, isarray@0.0.1, inherits@2.0.1, core-util-is@1.0.1)\n        +-- xml2js@0.2.7 (sax@0.5.2)\n        +-- request@2.57.0 (caseless@0.10.0, aws-sign2@0.5.0, forever-agent@0.6.1, stringstream@0.0.4, oauth-sign@0.8.0, tunnel-agent@0.4.1, isstream@0.1.2, json-stringify-safe@5.0.1, bl@0.9.4, combined-stream@1.0.5, qs@3.1.0, mime-types@2.0.14, form-data@0.2.0, http-signature@0.11.0, tough-cookie@2.0.0, hawk@2.3.1, har-validator@1.8.0)\n\n3.  可以手动运行 **ls** 命令来验证是否创建了 **node_modules** 文件夹。在该文件夹中，您将找到 **azure-storage** 包，其中包含访问存储所需的库。\n\n### 导入包\n\n将以下代码添加到您的应用程序中的 **server.js** 文件的顶部：\n\n    var azure = require('azure-storage');\n\n## 设置 Azure 存储连接\n\nAzure 模块将读取环境变量 AZURE_STORAGE_ACCOUNT 和 AZURE_STORAGE_ACCESS_KEY 或 AZURE_STORAGE_CONNECTION_STRING 以获取连接到您的 Azure 存储帐户所需的信息。如果未设置这些环境变量，则必须在调用 **TableService** 时指定帐户信息。\n\n有关在管理门户中为 Azure Web 应用设置环境变量的示例，请参阅[使用存储构建 Node.js Web 应用]\n\n## 创建表\n\n下面的代码创建 **TableService** 对象并使用它来创建一个新表。将以下代码添加到 **server.js** 的顶部附近。\n\n    var tableSvc = azure.createTableService();\n\n调用 **createTableIfNotExists** 将创建具有指定名称的一个新表（如果该表尚不存在）。下面的示例将创建一个名为“mytable”的新表（如果该表尚不存在）：\n\n    tableSvc.createTableIfNotExists('mytable', function(error, result, response){\n        if(!error){\n            // Table exists or created\n        }\n    });\n\n`result` 将为 `true`（如果创建了新表），或者为 `false`（如果表已存在）。`response` 将包含有关该请求的信息。\n\n### 筛选器\n\n可选的筛选操作可应用于使用 **TableService** 执行的操作。筛选操作可包括日志记录、自动重试等。筛选器是实现具有签名的方法的对象：\n\n        function handle (requestOptions, next)\n\n在对请求选项执行预处理后，该方法需要调用“next”并且传递具有以下签名的回调：\n\n        function (returnObject, finalCallback, next)\n\n在此回调中并且在处理 returnObject（来自对服务器请求的响应）后，回调需要调用 next（如果它存在，以便继续处理其他筛选器）或只调用 finalCallback 以便结束服务调用。\n\nAzure SDK for Node.js 中附带了两个实现了重试逻辑的筛选器，分别是 **ExponentialRetryPolicyFilter** 和 **LinearRetryPolicyFilter**。以下代码将创建使用 **ExponentialRetryPolicyFilter** 的 **TableService** 对象:\n\n    var retryOperations = new azure.ExponentialRetryPolicyFilter();\n    var tableSvc = azure.createTableService().withFilter(retryOperations);\n\n## 将实体添加到表\n\n若要添加实体，首先创建定义实体属性的对象。所有实体都必须都包含 **PartitionKey** 和 **RowKey**，它们是实体的唯一标识符。\n\n* **PartitionKey** - 确定实体存储在其中的分区\n\n* **RowKey** - 唯一标识分区内的实体\n\n**PartitionKey** 和 **RowKey** 都必须是字符串值。有关详细信息，请参阅[了解表服务数据模型](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)。\n\n下面是如何定义实体的示例。请注意，**dueDate** 被定义为一种类型的 **Edm.DateTime**。可以选择性地指定类型。如果未指定类型，系统会进行推断。\n\n    var task = {\n      PartitionKey: {'_':'hometasks'},\n      RowKey: {'_': '1'},\n      description: {'_':'take out the trash'},\n      dueDate: {'_':new Date(2015, 6, 20), '$':'Edm.DateTime'}\n    };\n\n> [AZURE.NOTE] 每个记录还有一个“时间戳”字段，在插入或更新实体时，Azure 会设置该字段。\n\n您还可以使用 **entityGenerator** 来创建实体。下面的示例使用 **entityGenerator** 来创建相同的任务实体。\n\n    var entGen = azure.TableUtilities.entityGenerator;\n    var task = {\n      PartitionKey: entGen.String('hometasks'),\n      RowKey: entGen.String('1'),\n      description: entGen.String('take out the trash'),\n      dueDate: entGen.DateTime(new Date(Date.UTC(2015, 6, 20))),\n    };\n\n要将实体添加到表中，应将实体对象传递给 **insertEntity** 方法。\n\n    tableSvc.insertEntity('mytable',task, function (error, result, response) {\n        if(!error){\n            // Entity inserted\n        }\n    });\n\n如果操作成功，`result` 将包含插入的记录的 [ETag](http://zh.wikipedia.org/wiki/HTTP_ETag)，而 `response` 将包含有关操作的信息。\n\n示例响应:\n\n    { '.metadata': { etag: 'W/\"datetime\\'2015-02-25T01%3A22%3A22.5Z\\'\"' } }\n\n> [AZURE.NOTE] 默认情况下，**insertEntity** 不会在 `response` 信息中返回插入的实体。如果您计划对此实体执行其他操作，或者希望对信息进行缓存，则可在 `result` 中返回该实体。您可以通过启用 **echoContent** 来执行此操作，如下所示：\n>\n> `tableSvc.insertEntity('mytable', task, {echoContent: true}, function (error, result, response) {...}`\n\n## 更新实体\n\n可使用多种方法来更新现有实体：\n\n* **updateEntity** - 通过替换现有实体来更新现有实体\n\n* **mergeEntity** - 通过将新属性值合并到现有实体来更新现有实体\n\n* **insertOrReplaceEntity** - 通过替换现有实体来更新现有实体。如果不存在实体，将插入一个新实体\n\n* **insertOrMergeEntity** - 通过将新属性值合并到现有实体来更新现有实体。如果不存在实体，将插入一个新实体\n\n以下示例演示了使用 **updateEntity** 更新实体：\n\n    tableSvc.updateEntity('mytable', updatedTask, function(error, result, response){\n      if(!error) {\n        // Entity updated\n      }\n    });\n\n> [AZURE.NOTE] 默认情况下，更新某个实体时，不会查看要更新的数据是否曾被其他进程更新过。若要支持并发更新，请执行以下步骤：\n>\n> 1. 获取要更新的对象的 ETag。对于任何实体相关操作，该 ETag 将在 `response` 中返回，并且可通过 `response['.metadata'].etag` 检索。\n>\n> 2. 对某个实体执行更新操作时，请将以前检索的 ETag 信息添加到新的实体。例如：\n>\n>     `entity2['.metadata'].etag = currentEtag;`\n>    \n> 3. 执行更新操作。如果实体在您检索 ETag 值后已被修改，例如被应用程序的其他实例修改，则会返回一条 `error`，指出未满足请求中指定的更新条件。\n\n对于 **updateEntity** 和 **mergeEntity**，如果待更新的实体不存在，则更新操作将失败。因此，如果您希望存储某个实体而不考虑它是否已存在，请使用 **insertOrReplaceEntity** 或 **insertOrMergeEntity**。\n\n如果更新操作成功，则 `result` 会包含所更新实体的 **Etag**。\n\n## 使用实体组\n\n有时，有必要成批地同时提交多项操作以确保通过服务器进行原子处理。使用 **TableBatch** 类来创建一个批处理，然后使用 **TableService** 的 **executeBatch** 方法来执行批处理操作。\n\n 下面的示例演示了在一个批次中提交两个实体：\n\n    var task1 = {\n      PartitionKey: {'_':'hometasks'},\n      RowKey: {'_': '1'},\n      description: {'_':'Take out the trash'},\n      dueDate: {'_':new Date(2015, 6, 20)}\n    };\n    var task2 = {\n      PartitionKey: {'_':'hometasks'},\n      RowKey: {'_': '2'},\n      description: {'_':'Wash the dishes'},\n      dueDate: {'_':new Date(2015, 6, 20)}\n    };\n\n    var batch = new azure.TableBatch();\n\n    batch.insertEntity(task1, {echoContent: true});\n    batch.insertEntity(task2, {echoContent: true});\n\n    tableSvc.executeBatch('mytable', batch, function (error, result, response) {\n      if(!error) {\n        // Batch completed\n      }\n    });\n\n对于成功的批处理操作，`result` 将包含批处理中每个操作的信息。\n\n### 使用批处理操作\n\n可以通过查看 `operations` 属性来检查添加到批处理中的操作。你可以使用以下方法来处理操作：\n\n* **clear** - 清除批处理中的所有操作\n\n* **getOperations** - 获取批处理的操作\n\n* **hasOperations** - 如果批处理包含操作，则返回 true\n\n* **removeOperations** - 删除操作\n\n* **size** - 返回批处理中操作的数目\n\n## 通过键检索实体\n\n如果您想要返回基于 **PartitionKey** 和 **RowKey** 的特定实体，请使用 **retrieveEntity** 方法。\n\n    tableSvc.retrieveEntity('mytable', 'hometasks', '1', function(error, result, response){\n      if(!error){\n        // result contains the entity\n      }\n    });\n\n此操作完成后，`result` 将包含该实体。\n\n## 查询实体集\n\n若要查询表，请使用 **TableQuery** 对象生成一个使用以下子句的查询：\n\n* **select** - 将要从查询返回的字段\n\n* **where** - where 子句\n\n    * **and** - 一个 `and` where 条件\n\n    * **or** - 一个 `or` where 条件\n\n* **top** - 要提取的项数\n\n\n以下示例生成的查询将返回 PartitionKey 为“hometasks”的前五项。\n\n    var query = new azure.TableQuery()\n      .top(5)\n      .where('PartitionKey eq ?', 'hometasks');\n\n由于未使用 **select**，因此将返回所有字段。若要对表执行查询，请使用 **queryEntities**。下面的示例使用此查询来返回“mytable”中的实体。\n\n    tableSvc.queryEntities('mytable',query, null, function(error, result, response) {\n      if(!error) {\n        // query was successful\n      }\n    });\n\n如果成功，`result.entries` 将包含与查询匹配的一组实体。如果查询无法返回所有实体，`result.continuationToken` 就不会是 *null* ，因此可用作 **queryEntities** 的第三个参数来检索更多结果。对于初始查询，请为第三个参数使用 *null* 。\n\n### 查询一部分实体属性\n\n对表的查询可以只检索实体中的少数几个字段。这可以减少带宽并提高查询性能，尤其适用于大型实体。使用 **select** 子句并传递要返回的字段的名称。例如，下面的查询将只返回 **description** 和 **dueDate** 字段。\n\n    var query = new azure.TableQuery()\n      .select(['description', 'dueDate'])\n      .top(5)\n      .where('PartitionKey eq ?', 'hometasks');\n\n## 删除实体\n\n可以使用实体的分区键和行键删除实体。在本例中，**task1** 对象包含要删除的实体的 **RowKey** 和 **PartitionKey** 值。然后，该对象被传递给 **deleteEntity** 方法。\n\n    var task = {\n      PartitionKey: {'_':'hometasks'},\n      RowKey: {'_': '1'}\n    };\n\n    tableSvc.deleteEntity('mytable', task, function(error, response){\n      if(!error) {\n        // Entity deleted\n      }\n    });\n\n> [AZURE.NOTE] 考虑在删除项时使用 ETag，以确保项尚未被其他进程修改。请参阅[更新实体](#update-an-entity)了解如何使用 ETag。\n\n## 删除表\n\n以下代码从存储帐户中删除一个表。\n\n    tableSvc.deleteTable('mytable', function(error, response){\n        if(!error){\n            // Table deleted\n        }\n    });\n\n如果您不确定表是否存在，则使用 **deleteTableIfExists**。\n\n## 使用继续标记\n\n在所查询的表有大量的结果时，请查找继续标记。如果您在生成时不能识别何时存在继续标记，可能存在大量您未意识到的数据可用于查询。\n\n查询实体在存在此类标记期间设置 `continuationToken` 属性，返回结果对象。然后可以在执行查询时使用它，以继续在分区和表实体间移动。\n\n在查询时，在查询对象实例和回调函数之间可能会提供继续标记参数：\n\n```\nvar nextContinuationToken = null;\ndc.table.queryEntities(tableName,\n    query,\n    nextContinuationToken,\n    function (error, results) {\n        if (error) throw error;\n\n        // iterate through results.entries with results\n\n        if (results.continuationToken) {\n            nextContinuationToken = results.continuationToken;\n        }\n\n    });\n```\n\n如果你检查 `continuationToken` 对象，你会发现 `nextPartitionKey`、`nextRowKey` 和 `targetLocation` 等属性可用于循环访问所有结果。\n\n在 GitHub 上的 Azure 存储 Node.js 存储库中还有一个继续样本。查找 `examples/samples/continuationsample.js`。\n\n## 使用共享访问签名\n\n共享访问签名 (SAS) 是一种安全的方法，用于对表进行细致访问而无需提供你的存储帐户名或密钥。通常使用 SAS 来提供对你的数据的有限访问权限，例如允许移动应用程序查询记录。\n\n受信任的应用程序（例如基于云的服务）可使用 **TableService** 的 **generateSharedAccessSignature** 生成 SAS，然后将其提供给不受信任的或不完全受信任的应用程序，例如移动应用。SAS 可使用策略生成，该策略描述了 SAS 的生效日期和失效日期，以及授予 SAS 持有者的访问级别。\n\n下面的示例生成了一个新的共享访问策略，该策略将允许 SAS 持有者查询 ('r') 表，在创建后 100 分钟过期。\n\n    var startDate = new Date();\n    var expiryDate = new Date(startDate);\n    expiryDate.setMinutes(startDate.getMinutes() + 100);\n    startDate.setMinutes(startDate.getMinutes() - 100);\n\n    var sharedAccessPolicy = {\n      AccessPolicy: {\n        Permissions: azure.TableUtilities.SharedAccessPermissions.QUERY,\n        Start: startDate,\n        Expiry: expiryDate\n      },\n    };\n\n    var tableSAS = tableSvc.generateSharedAccessSignature('mytable', sharedAccessPolicy);\n    var host = tableSvc.host;\n\n请注意，还必须提供主机信息，因为 SAS 持有者尝试访问表时，必须提供该信息。\n\n然后，客户端应用程序将 SAS 用于 **TableServiceWithSAS**，以便针对表执行操作。下面的示例连接到该表，并执行一个查询。\n\n    var sharedTableService = azure.createTableServiceWithSas(host, tableSAS);\n    var query = azure.TableQuery()\n      .where('PartitionKey eq ?', 'hometasks');\n\n    sharedTableService.queryEntities(query, null, function(error, result, response) {\n      if(!error) {\n        // result contains the entities\n      }\n    });\n\n由于 SAS 在生成时只具有查询访问权限，因此如果尝试插入、更新或删除实体，则会返回错误。\n\n### 访问控制列表\n\n你还可以使用访问控制列表 (ACL) 为 SAS 设置访问策略。如果你希望允许多个客户端访问某个表，但为每个客户端提供了不同的访问策略，则访问控制列表会很有用。\n\nACL 是使用一组访问策略实施的，每个策略都有一个关联的 ID。以下示例定义了两个策略，一个用于“user1”，一个用于“user2”：\n\n    var sharedAccessPolicy = [\n      {\n        AccessPolicy: {\n          Permissions: azure.TableUtilities.SharedAccessPermissions.QUERY,\n          Start: startDate,\n          Expiry: expiryDate\n        },\n        Id: 'user1'\n      },\n      {\n        AccessPolicy: {\n          Permissions: azure.TableUtilities.SharedAccessPermissions.ADD,\n          Start: startDate,\n          Expiry: expiryDate\n        },\n        Id: 'user2'\n      }\n    ];\n\n以下示例获取 **hometasks** 表的当前 ACL，然后使用 **setTableAcl** 添加新策略。此方法具有以下用途：\n\n    tableSvc.getTableAcl('hometasks', function(error, result, response) {\n      if(!error){\n        //push the new policy into signedIdentifiers\n        result.signedIdentifiers.push(sharedAccessPolicy);\n        tableSvc.setTableAcl('hometasks', result, function(error, result, response){\n          if(!error){\n            // ACL set\n          }\n        });\n      }\n    });\n\n设置 ACL 后，你可以根据某个策略的 ID 创建 SAS。以下示例为“user2”创建新的 SAS：\n\n    tableSAS = tableSvc.generateSharedAccessSignature('hometasks', { Id: 'user2' });\n\n## 后续步骤\n\n有关详细信息，请参阅以下资源。\n\n-   [Azure 存储团队博客][]。\n-   GitHub 上的 [Azure Storage SDK for Node][] 存储库。\n-   [Node.js 开发人员中心](/develop/nodejs/)\n\n  [Azure Storage SDK for Node]: https://github.com/Azure/azure-storage-node\n  [OData.org]: http://www.odata.org/\n  [使用 REST API]: http://msdn.microsoft.com/zh-cn/library/azure/hh264518.aspx\n  [Azure 管理门户]: http://manage.windowsazure.cn\n\n  [Node.js 云服务]: /zh-cn/documentation/articles/cloud-services-nodejs-develop-deploy-app\n  [访问 Azure 存储空间团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n  [使用 WebMatrix 构建 Web 应用]: /zh-cn/documentation/articles/web-sites-nodejs-use-webmatrix\n  [使用存储构建 Node.js 云服务]: /zh-cn/documentation/articles/storage-nodejs-use-table-storage-cloud-service-app\n  [使用存储构建 Node.js Web 应用]: /zh-cn/documentation/articles/storage-nodejs-use-table-storage-web-site\n  [Create and deploy a Node.js application to an Azure  Website]: /documentation/articles/web-sites-nodejs-develop-deploy-mac\n\n<!---HONumber=Mooncake_0118_2016-->"
}