{
  "nodes": [
    {
      "content": "通过 .NET 开始使用 Azure 表存储 | Azure",
      "pos": [
        23,
        53
      ]
    },
    {
      "content": "使用 Azure 表存储和 Microsoft 的 NoSQL 数据存储将非结构化的数据存储在云中。立即开始使用简单的表存储操作，包括创建和删除表和插入、更新、删除和查询数据。",
      "pos": [
        72,
        160
      ]
    },
    {
      "content": "通过 .NET 开始使用 Azure 表存储",
      "pos": [
        364,
        386
      ]
    },
    {
      "content": "概述",
      "pos": [
        488,
        490
      ]
    },
    {
      "content": "Azure 表存储是一种将非结构化的 NoSQL 数据存储在云中的服务。表存储是采用无架构设计的键/属性存储。因为表存储无架构，因此可以很容易地随着你的应用程序需求的发展使数据适应存储。对于所有类型的应用程序，都可以快速并经济高效地访问数据。对于相似的数据量，表存储的成本通常显著低于传统的 SQL。",
      "pos": [
        492,
        642
      ]
    },
    {
      "content": "你可以使用表存储来存储灵活的数据集，例如 Web 应用程序的用户数据、通讯簿、设备信息，以及你的服务需要的任何其他类型的元数据。可以在表中存储任意数量的实体，并且一个存储帐户可以包含任意数量的表，直至达到存储帐户的容量极限。",
      "pos": [
        644,
        756
      ]
    },
    {
      "content": "本教程演示如何对使用 Azure 表存储的某些常见情形（包括创建和删除表和插入、更新、删除和查询表数据）编写 .NET 代码。",
      "pos": [
        758,
        821
      ]
    },
    {
      "content": "以编程方式访问表存储",
      "pos": [
        1270,
        1280
      ]
    },
    {
      "content": "命名空间声明",
      "pos": [
        1383,
        1389
      ]
    },
    {
      "content": "在您希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。",
      "pos": [
        1390,
        1441
      ]
    },
    {
      "pos": [
        1581,
        1628
      ],
      "content": "确保你引用 <ph id=\"ph1\">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。"
    },
    {
      "content": "创建表",
      "pos": [
        1740,
        1743
      ]
    },
    {
      "pos": [
        1745,
        1892
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> 对象，您可以获得表和实体的引用对象。以下代码将创建 <bpt id=\"p2\">**</bpt>CloudTableClient<ept id=\"p2\">**</ept> 对象并使用它创建新表。本文中的所有代码假定将构建的应用程序是 Azure 云服务项目，并且使用存储在 Azure 应用程序的服务配置中的存储连接字符串。"
    },
    {
      "content": "将实体添加到表",
      "pos": [
        2354,
        2361
      ]
    },
    {
      "pos": [
        2363,
        2610
      ],
      "content": "实体使用派生自 <bpt id=\"p1\">**</bpt>TableEntity<ept id=\"p1\">**</ept> 的自定义类映射到 C# 对象。若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义将客户的名字和姓氏分别用作行键和分区键的实体类。实体的分区键和行键共同唯一地标识表中的实体。查询分区键相同的实体的速度快于查询分区键不同的实体的速度，但使用不同的分区键可实现更高的并行操作可伸缩性。对于应存储在表服务中的任何属性，该属性必须是公开 <ph id=\"ph1\">`get`</ph> 和 <ph id=\"ph2\">`set`</ph> 的受支持类型的公共属性。此外，你的实体类型 <bpt id=\"p2\">*</bpt>必须<ept id=\"p2\">*</ept> 公开不带参数的构造函数。"
    },
    {
      "pos": [
        2964,
        3182
      ],
      "content": "涉及实体的表操作通过你先前在“创建表”部分中创建的 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 对象执行。用一个 <bpt id=\"p2\">**</bpt>TableOperation<ept id=\"p2\">**</ept> 对象表示要执行的操作。以下代码示例演示如何创建 <bpt id=\"p3\">**</bpt>CloudTable<ept id=\"p3\">**</ept> 对象以及 <bpt id=\"p4\">**</bpt>CustomerEntity<ept id=\"p4\">**</ept> 对象。为准备此操作，会创建一个 <bpt id=\"p5\">**</bpt>TableOperation<ept id=\"p5\">**</ept> 对象以将客户实体插入该表中。最后，通过调用 <bpt id=\"p6\">**</bpt>CloudTable.Execute<ept id=\"p6\">**</ept> 执行此操作。"
    },
    {
      "content": "插入一批实体",
      "pos": [
        4054,
        4060
      ]
    },
    {
      "content": "你可以通过一次写入操作将一批实体插入表中。批处理操作的一些其他注意事项：",
      "pos": [
        4062,
        4098
      ]
    },
    {
      "content": "你可以在同一批处理操作中执行更新、删除和插入操作。",
      "pos": [
        4103,
        4128
      ]
    },
    {
      "content": "单个批处理操作最多可包含 100 个实体。",
      "pos": [
        4132,
        4153
      ]
    },
    {
      "content": "单次批处理操作中的所有实体都必须具有相同的分区键。",
      "pos": [
        4157,
        4182
      ]
    },
    {
      "content": "虽然可以将某个查询作为批处理操作执行，但该操作必须是批处理中仅有的操作。",
      "pos": [
        4186,
        4222
      ]
    },
    {
      "pos": [
        4233,
        4338
      ],
      "content": "以下代码示例创建两个实体对象，并使用 <bpt id=\"p1\">**</bpt>Insert<ept id=\"p1\">**</ept> 方法将其中每个对象都添加到 <bpt id=\"p2\">**</bpt>TableBatchOperation<ept id=\"p2\">**</ept> 中。然后调用 <bpt id=\"p3\">**</bpt>CloudTable.Execute<ept id=\"p3\">**</ept> 以执行此操作。"
    },
    {
      "content": "检索分区中的所有实体",
      "pos": [
        5547,
        5557
      ]
    },
    {
      "pos": [
        5559,
        5655
      ],
      "content": "若要查询表以获取分区中的所有实体，请使用 <bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept> 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。"
    },
    {
      "content": "检索分区中的一部分实体",
      "pos": [
        6621,
        6632
      ]
    },
    {
      "content": "如果不想查询分区中的所有实体，则可以通过结合使用分区键筛选器与行键筛选器来指定一个范围。以下代码示例使用两个筛选器来获取分区“Smith”中的、行键（名字）以字母“E”前面的字母开头的所有实体，然后输出查询结果。",
      "pos": [
        6634,
        6740
      ]
    },
    {
      "content": "检索单个实体",
      "pos": [
        7858,
        7864
      ]
    },
    {
      "pos": [
        7866,
        8032
      ],
      "content": "你可以编写查询以检索单个特定实体。以下代码使用 <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> 来指定客户“Ben Smith”。此方法仅返回一个实体，而不是一个集合，并且 <bpt id=\"p2\">**</bpt>TableResult.Result<ept id=\"p2\">**</ept> 中的返回值是一个 <bpt id=\"p3\">**</bpt>CustomerEntity<ept id=\"p3\">**</ept> 对象。在查询中指定分区键和行键是从表服务中检索单个实体的最快方法。"
    },
    {
      "content": "替换实体",
      "pos": [
        9005,
        9009
      ]
    },
    {
      "pos": [
        9011,
        9262
      ],
      "content": "若要更新实体，请从表服务中检索它，修改实体对象，然后将更改保存回表服务。以下代码将更改现有客户的电话号码。此代码使用 <bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept>，而不是调用 <bpt id=\"p2\">**</bpt>Insert<ept id=\"p2\">**</ept>。这将导致在服务器上完全替换该实体，除非服务器上的该实体自检索到它以后发生更改，在此情况下，该操作将失败。操作失败将防止你的应用程序无意中覆盖应用程序的其他组件在检索与更新之间所做的更改。正确处理此失败问题的方法是再次检索实体，进行更改（如果仍有效），然后再次执行 <bpt id=\"p3\">**</bpt>Replace<ept id=\"p3\">**</ept> 操作。下一节将为你演示如何重写此行为。"
    },
    {
      "content": "插入或替换实体",
      "pos": [
        10558,
        10565
      ]
    },
    {
      "pos": [
        10567,
        10856
      ],
      "content": "如果该实体自从服务器中检索到它以后发生更改，则 <bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept> 操作将失败。此外，必须首先从服务器中检索该实体，<bpt id=\"p2\">**</bpt>Replace<ept id=\"p2\">**</ept> 操作才能成功。但是，有时你不知道服务器上是否存在该实体以及存储在其中的当前值是否无关。更新操作会将其全部覆盖。为此，你应使用 <bpt id=\"p3\">**</bpt>InsertOrReplace<ept id=\"p3\">**</ept> 操作。如果该实体不存在，此操作将插入它，如果存在，则替换它，而不管上次更新是何时进行的。在以下代码示例中，仍将检索 Ben Smith 的客户实体，但稍后会使用 <bpt id=\"p4\">**</bpt>InsertOrReplace<ept id=\"p4\">**</ept> 将其保存回服务器。将覆盖在检索与更新操作之间对实体进行的任何更新。"
    },
    {
      "content": "查询一部分实体属性",
      "pos": [
        12182,
        12191
      ]
    },
    {
      "pos": [
        12193,
        12413
      ],
      "content": "表查询可以只检索实体中的少数几个属性而不是所有实体属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。以下代码中的查询只返回表中实体的电子邮件地址。这可通过使用 <bpt id=\"p1\">**</bpt>DynamicTableEntity<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>EntityResolver<ept id=\"p2\">**</ept> 的查询来实现。你可以在[“Upsert 和查询投影介绍”博客文章][]中更加详细地了解投影。注意，本地存储模拟器不支持投影，因此，此代码仅在使用表服务中的帐户时才能运行。"
    },
    {
      "content": "删除实体",
      "pos": [
        13409,
        13413
      ]
    },
    {
      "content": "在检索实体之后，可使用更新实体的相同演示模式轻松删除该实体。以下代码检索并删除一个客户实体。",
      "pos": [
        13415,
        13461
      ]
    },
    {
      "content": "删除表",
      "pos": [
        14646,
        14649
      ]
    },
    {
      "content": "最后，以下代码示例将从存储帐户中删除表。在删除表之后的一段时间内无法重新创建它。",
      "pos": [
        14651,
        14691
      ]
    },
    {
      "content": "以异步方式检索页中的实体",
      "pos": [
        15209,
        15221
      ]
    },
    {
      "pos": [
        15223,
        15475
      ],
      "content": "如果你正在读取大量实体，并且想要在检索进行时处理/显示实体，而非等待返回全部实体，则可以通过使用分段查询检索实体。此示例显示如何通过 Async-Await 模式以页面形式返回结果，这样就不会在等待返回大量结果时阻止操作的执行。有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 <bpt id=\"p1\">[</bpt>使用 Async 和 Await 进行异步编程（C# 和 Visual Basic）<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。"
    },
    {
      "content": "后续步骤",
      "pos": [
        16476,
        16480
      ]
    },
    {
      "content": "现在，你已了解有关表存储的基础知识，请按照下面的链接了解更复杂的存储任务：",
      "pos": [
        16482,
        16519
      ]
    },
    {
      "content": "查看表服务参考文档，了解有关可用 API 的完整详情：",
      "pos": [
        16523,
        16550
      ]
    },
    {
      "content": ".NET 存储客户端库参考",
      "pos": [
        16558,
        16571
      ]
    },
    {
      "content": "REST API 参考",
      "pos": [
        16636,
        16647
      ]
    },
    {
      "pos": [
        16707,
        16821
      ],
      "content": "了解如何使用 <bpt id=\"p1\">[</bpt>Azure WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)</ept> 简化你编写的用于 Azure 存储空间的代码"
    },
    {
      "content": "查看更多功能指南，以了解在 Azure 中存储数据的其他方式。",
      "pos": [
        16824,
        16855
      ]
    },
    {
      "pos": [
        16862,
        16941
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>Blob 存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>来存储非结构化数据。"
    },
    {
      "pos": [
        16948,
        17024
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>SQL 数据库<ept id=\"p1\">](/documentation/articles/sql-database-dotnet-how-to-use)</ept>来存储关系数据。"
    }
  ],
  "content": "<properties\npageTitle=\"通过 .NET 开始使用 Azure 表存储 | Azure\"\n    description=\"使用 Azure 表存储和 Microsoft 的 NoSQL 数据存储将非结构化的数据存储在云中。立即开始使用简单的表存储操作，包括创建和删除表和插入、更新、删除和查询数据。\"\n    services=\"storage\"\n    documentationCenter=\".net\"\n    authors=\"tamram\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"01/24/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n\n# 通过 .NET 开始使用 Azure 表存储\n\n[AZURE.INCLUDE [storage-selector-table-include](../includes/storage-selector-table-include.md)]\n\n## 概述\n\nAzure 表存储是一种将非结构化的 NoSQL 数据存储在云中的服务。表存储是采用无架构设计的键/属性存储。因为表存储无架构，因此可以很容易地随着你的应用程序需求的发展使数据适应存储。对于所有类型的应用程序，都可以快速并经济高效地访问数据。对于相似的数据量，表存储的成本通常显著低于传统的 SQL。\n\n你可以使用表存储来存储灵活的数据集，例如 Web 应用程序的用户数据、通讯簿、设备信息，以及你的服务需要的任何其他类型的元数据。可以在表中存储任意数量的实体，并且一个存储帐户可以包含任意数量的表，直至达到存储帐户的容量极限。\n\n本教程演示如何对使用 Azure 表存储的某些常见情形（包括创建和删除表和插入、更新、删除和查询表数据）编写 .NET 代码。\n\n[AZURE.INCLUDE [storage-dotnet-client-library-version-include](../includes/storage-dotnet-client-library-version-include.md)]\n\n[AZURE.INCLUDE [storage-table-concepts-include](../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n[AZURE.INCLUDE [storage-configure-connection-string-include](../includes/storage-configure-connection-string-include.md)]\n\n## 以编程方式访问表存储\n\n[AZURE.INCLUDE [storage-dotnet-obtain-assembly](../includes/storage-dotnet-obtain-assembly.md)]\n\n### 命名空间声明\n在您希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。\n\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Auth;\n    using Microsoft.WindowsAzure.Storage.Table;\n\n确保你引用 `Microsoft.WindowsAzure.Storage.dll` 程序集。\n\n[AZURE.INCLUDE [storage-dotnet-retrieve-conn-string](../includes/storage-dotnet-retrieve-conn-string.md)]\n\n## 创建表\n\n利用 **CloudTableClient** 对象，您可以获得表和实体的引用对象。以下代码将创建 **CloudTableClient** 对象并使用它创建新表。本文中的所有代码假定将构建的应用程序是 Azure 云服务项目，并且使用存储在 Azure 应用程序的服务配置中的存储连接字符串。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the table if it doesn't exist.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    table.CreateIfNotExists();\n\n## 将实体添加到表\n\n实体使用派生自 **TableEntity** 的自定义类映射到 C# 对象。若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义将客户的名字和姓氏分别用作行键和分区键的实体类。实体的分区键和行键共同唯一地标识表中的实体。查询分区键相同的实体的速度快于查询分区键不同的实体的速度，但使用不同的分区键可实现更高的并行操作可伸缩性。对于应存储在表服务中的任何属性，该属性必须是公开 `get` 和 `set` 的受支持类型的公共属性。此外，你的实体类型 *必须* 公开不带参数的构造函数。\n\n    public class CustomerEntity : TableEntity\n    {\n        public CustomerEntity(string lastName, string firstName)\n        {\n            this.PartitionKey = lastName;\n            this.RowKey = firstName;\n        }\n\n        public CustomerEntity() { }\n\n        public string Email { get; set; }\n\n        public string PhoneNumber { get; set; }\n    }\n\n涉及实体的表操作通过你先前在“创建表”部分中创建的 **CloudTable** 对象执行。用一个 **TableOperation** 对象表示要执行的操作。以下代码示例演示如何创建 **CloudTable** 对象以及 **CustomerEntity** 对象。为准备此操作，会创建一个 **TableOperation** 对象以将客户实体插入该表中。最后，通过调用 **CloudTable.Execute** 执行此操作。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n       CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a new customer entity.\n    CustomerEntity customer1 = new CustomerEntity(\"Harp\", \"Walter\");\n    customer1.Email = \"Walter@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0101\";\n\n    // Create the TableOperation object that inserts the customer entity.\n    TableOperation insertOperation = TableOperation.Insert(customer1);\n\n    // Execute the insert operation.\n    table.Execute(insertOperation);\n\n## 插入一批实体\n\n你可以通过一次写入操作将一批实体插入表中。批处理操作的一些其他注意事项：\n\n-  你可以在同一批处理操作中执行更新、删除和插入操作。\n-  单个批处理操作最多可包含 100 个实体。\n-  单次批处理操作中的所有实体都必须具有相同的分区键。\n-  虽然可以将某个查询作为批处理操作执行，但该操作必须是批处理中仅有的操作。\n\n<!-- -->\n以下代码示例创建两个实体对象，并使用 **Insert** 方法将其中每个对象都添加到 **TableBatchOperation** 中。然后调用 **CloudTable.Execute** 以执行此操作。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create the batch operation.\n    TableBatchOperation batchOperation = new TableBatchOperation();\n\n    // Create a customer entity and add it to the table.\n    CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\n    customer1.Email = \"Jeff@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0104\";\n\n    // Create another customer entity and add it to the table.\n    CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n    customer2.Email = \"Ben@contoso.com\";\n    customer2.PhoneNumber = \"425-555-0102\";\n\n    // Add both customer entities to the batch insert operation.\n    batchOperation.Insert(customer1);\n    batchOperation.Insert(customer2);\n\n    // Execute the batch operation.\n    table.ExecuteBatch(batchOperation);\n\n## 检索分区中的所有实体\n\n若要查询表以获取分区中的所有实体，请使用 **TableQuery** 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Construct the query operation for all customer entities where PartitionKey=\"Smith\".\n    TableQuery<CustomerEntity> query = new TableQuery<CustomerEntity>().Where(TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"));\n\n    // Print the fields for each customer.\n    foreach (CustomerEntity entity in table.ExecuteQuery(query))\n    {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n    }\n\n## 检索分区中的一部分实体\n\n如果不想查询分区中的所有实体，则可以通过结合使用分区键筛选器与行键筛选器来指定一个范围。以下代码示例使用两个筛选器来获取分区“Smith”中的、行键（名字）以字母“E”前面的字母开头的所有实体，然后输出查询结果。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create the table query.\n    TableQuery<CustomerEntity> rangeQuery = new TableQuery<CustomerEntity>().Where(\n        TableQuery.CombineFilters(\n            TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"),\n            TableOperators.And,\n            TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.LessThan, \"E\")));\n\n    // Loop through the results, displaying information about the entity.\n    foreach (CustomerEntity entity in table.ExecuteQuery(rangeQuery))\n    {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n    }\n\n## 检索单个实体\n\n你可以编写查询以检索单个特定实体。以下代码使用 **TableOperation** 来指定客户“Ben Smith”。此方法仅返回一个实体，而不是一个集合，并且 **TableResult.Result** 中的返回值是一个 **CustomerEntity** 对象。在查询中指定分区键和行键是从表服务中检索单个实体的最快方法。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the retrieve operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Print the phone number of the result.\n    if (retrievedResult.Result != null)\n       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);\n    else\n       Console.WriteLine(\"The phone number could not be retrieved.\");\n\n## 替换实体\n\n若要更新实体，请从表服务中检索它，修改实体对象，然后将更改保存回表服务。以下代码将更改现有客户的电话号码。此代码使用 **Replace**，而不是调用 **Insert**。这将导致在服务器上完全替换该实体，除非服务器上的该实体自检索到它以后发生更改，在此情况下，该操作将失败。操作失败将防止你的应用程序无意中覆盖应用程序的其他组件在检索与更新之间所做的更改。正确处理此失败问题的方法是再次检索实体，进行更改（如果仍有效），然后再次执行 **Replace** 操作。下一节将为你演示如何重写此行为。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity object.\n    CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;\n\n    if (updateEntity != null)\n    {\n       // Change the phone number.\n       updateEntity.PhoneNumber = \"425-555-0105\";\n\n       // Create the InsertOrReplace TableOperation.\n       TableOperation updateOperation = TableOperation.Replace(updateEntity);\n\n       // Execute the operation.\n       table.Execute(updateOperation);\n\n       Console.WriteLine(\"Entity updated.\");\n    }\n\n    else\n       Console.WriteLine(\"Entity could not be retrieved.\");\n\n## 插入或替换实体\n\n如果该实体自从服务器中检索到它以后发生更改，则 **Replace** 操作将失败。此外，必须首先从服务器中检索该实体，**Replace** 操作才能成功。但是，有时你不知道服务器上是否存在该实体以及存储在其中的当前值是否无关。更新操作会将其全部覆盖。为此，你应使用 **InsertOrReplace** 操作。如果该实体不存在，此操作将插入它，如果存在，则替换它，而不管上次更新是何时进行的。在以下代码示例中，仍将检索 Ben Smith 的客户实体，但稍后会使用 **InsertOrReplace** 将其保存回服务器。将覆盖在检索与更新操作之间对实体进行的任何更新。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity object.\n    CustomerEntity updateEntity = (CustomerEntity)retrievedResult.Result;\n\n    if (updateEntity != null)\n    {\n       // Change the phone number.\n       updateEntity.PhoneNumber = \"425-555-1234\";\n\n       // Create the InsertOrReplace TableOperation.\n       TableOperation insertOrReplaceOperation = TableOperation.InsertOrReplace(updateEntity);\n\n       // Execute the operation.\n       table.Execute(insertOrReplaceOperation);\n\n       Console.WriteLine(\"Entity was updated.\");\n    }\n\n    else\n       Console.WriteLine(\"Entity could not be retrieved.\");\n\n## 查询一部分实体属性\n\n表查询可以只检索实体中的少数几个属性而不是所有实体属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。以下代码中的查询只返回表中实体的电子邮件地址。这可通过使用 **DynamicTableEntity** 和 **EntityResolver** 的查询来实现。你可以在[“Upsert 和查询投影介绍”博客文章][]中更加详细地了解投影。注意，本地存储模拟器不支持投影，因此，此代码仅在使用表服务中的帐户时才能运行。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Define the query, and select only the Email property.\n    TableQuery<DynamicTableEntity> projectionQuery = new TableQuery<DynamicTableEntity>().Select(new string[] { \"Email\" });\n\n    // Define an entity resolver to work with the entity after retrieval.\n    EntityResolver<string> resolver = (pk, rk, ts, props, etag) => props.ContainsKey(\"Email\") ? props[\"Email\"].StringValue : null;\n\n    foreach (string projectedEmail in table.ExecuteQuery(projectionQuery, resolver, null, null))\n    {\n        Console.WriteLine(projectedEmail);\n    }\n\n## 删除实体\n\n在检索实体之后，可使用更新实体的相同演示模式轻松删除该实体。以下代码检索并删除一个客户实体。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Create a retrieve operation that expects a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity.\n    CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;\n\n    // Create the Delete TableOperation.\n    if (deleteEntity != null)\n    {\n       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);\n\n       // Execute the operation.\n       table.Execute(deleteOperation);\n\n       Console.WriteLine(\"Entity deleted.\");\n    }\n\n    else\n       Console.WriteLine(\"Could not retrieve the entity.\");\n\n## 删除表\n\n最后，以下代码示例将从存储帐户中删除表。在删除表之后的一段时间内无法重新创建它。\n\n    // Retrieve the storage account from the connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n\n    // Delete the table it if exists.\n    table.DeleteIfExists();\n\n## 以异步方式检索页中的实体\n\n如果你正在读取大量实体，并且想要在检索进行时处理/显示实体，而非等待返回全部实体，则可以通过使用分段查询检索实体。此示例显示如何通过 Async-Await 模式以页面形式返回结果，这样就不会在等待返回大量结果时阻止操作的执行。有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 [使用 Async 和 Await 进行异步编程（C# 和 Visual Basic）](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)。\n\n    // Initialize a default TableQuery to retrieve all the entities in the table.\n    TableQuery<CustomerEntity> tableQuery = new TableQuery<CustomerEntity>();\n\n    // Initialize the continuation token to null to start from the beginning of the table.\n    TableContinuationToken continuationToken = null;\n\n    do\n    {\n        // Retrieve a segment (up to 1,000 entities).\n        TableQuerySegment<CustomerEntity> tableQueryResult =\n            await table.ExecuteQuerySegmentedAsync(tableQuery, continuationToken);\n\n        // Assign the new continuation token to tell the service where to\n        // continue on the next iteration (or null if it has reached the end).\n        continuationToken = tableQueryResult.ContinuationToken;\n\n        // Print the number of rows retrieved.\n        Console.WriteLine(\"Rows retrieved {0}\", tableQueryResult.Results.Count);\n\n    // Loop until a null continuation token is received, indicating the end of the table.\n    } while(continuationToken != null);\n\n## 后续步骤\n\n现在，你已了解有关表存储的基础知识，请按照下面的链接了解更复杂的存储任务：\n\n- 查看表服务参考文档，了解有关可用 API 的完整详情：\n    - [.NET 存储客户端库参考](https://msdn.microsoft.com/zh-cn/library/mt347887.aspx)\n    - [REST API 参考](http://msdn.microsoft.com/zh-cn/library/azure/dd179355)\n- 了解如何使用 [Azure WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk-get-started) 简化你编写的用于 Azure 存储空间的代码\n- 查看更多功能指南，以了解在 Azure 中存储数据的其他方式。\n    - 使用 [Blob 存储](/documentation/articles/storage-dotnet-how-to-use-blobs)来存储非结构化数据。\n    - 使用 [SQL 数据库](/documentation/articles/sql-database-dotnet-how-to-use)来存储关系数据。\n\n\n  [下载并安装 Azure SDK for.NET]: /develop/net/\n  [在 Visual Studio 中创建 Azure 项目]: http://msdn.microsoft.com/zh-cn/library/azure/ee405487.aspx\n  \n  [Blob5]: ./media/storage-dotnet-how-to-use-table-storage/blob5.png\n  [Blob6]: ./media/storage-dotnet-how-to-use-table-storage/blob6.png\n  [Blob7]: ./media/storage-dotnet-how-to-use-table-storage/blob7.png\n  [Blob8]: ./media/storage-dotnet-how-to-use-table-storage/blob8.png\n  [Blob9]: ./media/storage-dotnet-how-to-use-table-storage/blob9.png\n\n  [博客文章]: http://blogs.msdn.com/b/windowsazurestorage/archive/2011/09/15/windows-azure-tables-introducing-upsert-and-query-projection.aspx\n  [.NET 客户端库引用]: http://msdn.microsoft.com/zh-cn/library/azure/wa_storage_30_reference_home.aspx\n  [在 Azure 中存储和访问数据]: http://msdn.microsoft.com/zh-cn/library/azure/gg433040.aspx\n  [Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n  [配置连接字符串]: http://msdn.microsoft.com/zh-cn/library/azure/ee758697.aspx\n  [OData]: http://nuget.org/packages/Microsoft.Data.OData/5.0.2\n  [Edm]: http://nuget.org/packages/Microsoft.Data.Edm/5.0.2\n  [空间]: http://nuget.org/packages/System.Spatial/5.0.2\n<!---HONumber=Mooncake_0307_2016-->"
}