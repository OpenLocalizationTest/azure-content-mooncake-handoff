{
  "nodes": [
    {
      "content": "计划程序的概念、术语和实体 | Azure",
      "pos": [
        25,
        46
      ]
    },
    {
      "content": "Azure 计划程序的概念、术语和实体层次结构，包括作业和作业集合。显示了一个计划作业的综合示例。",
      "pos": [
        62,
        111
      ]
    },
    {
      "content": "计划程序的概念、术语和实体层次结构",
      "pos": [
        299,
        316
      ]
    },
    {
      "content": "计划程序实体层次结构",
      "pos": [
        321,
        331
      ]
    },
    {
      "content": "下表描述了计划程序 API 所公开或使用的主要资源：",
      "pos": [
        333,
        359
      ]
    },
    {
      "content": "资源",
      "pos": [
        362,
        364
      ]
    },
    {
      "content": "说明",
      "pos": [
        367,
        369
      ]
    },
    {
      "content": "云服务",
      "pos": [
        385,
        388
      ]
    },
    {
      "content": "从概念上讲，一个云服务就表示一个应用程序。一个订阅可以具有多个云服务。",
      "pos": [
        391,
        426
      ]
    },
    {
      "content": "作业集合",
      "pos": [
        431,
        435
      ]
    },
    {
      "content": "一个作业集合包含一组作业，并且维护该集合内各作业共享的设置、配额和限制。作业集合由订阅所有者创建，并基于使用情况或应用程序边界将作业组合在一起。它被约束到一个区域。通过作业集合，还可以强制执行配额以便约束对该集合中所有作业的使用。配额包括 MaxJobs 和 MaxRecurrence。",
      "pos": [
        438,
        582
      ]
    },
    {
      "content": "作业",
      "pos": [
        587,
        589
      ]
    },
    {
      "content": "一个作业通过用于执行的简单或复杂策略定义单个重复发生的操作。操作可以包含 HTTP 请求或存储队列请求。",
      "pos": [
        592,
        644
      ]
    },
    {
      "content": "作业历史记录",
      "pos": [
        649,
        655
      ]
    },
    {
      "content": "作业历史记录表示用于执行作业的详细信息。它包含成功与失败信息以及任何响应详细信息。",
      "pos": [
        658,
        699
      ]
    },
    {
      "content": "计划程序实体管理",
      "pos": [
        705,
        713
      ]
    },
    {
      "content": "大体而言，计划程序和服务管理 API 公开资源上的以下操作：",
      "pos": [
        715,
        745
      ]
    },
    {
      "content": "功能",
      "pos": [
        748,
        750
      ]
    },
    {
      "content": "说明和 URI 地址",
      "pos": [
        751,
        761
      ]
    },
    {
      "content": "云服务管理",
      "pos": [
        776,
        781
      ]
    },
    {
      "content": "针对创建和修改云服务的 GET、PUT 和 DELETE 支持",
      "pos": [
        784,
        815
      ]
    },
    {
      "content": "作业集合管理",
      "pos": [
        920,
        926
      ]
    },
    {
      "content": "针对创建和修改作业集合和其中包含的作业的 GET、PUT 和 DELETE 支持。作业集合是针对作业以及指向配额和共享设置的映射的容器。配额（在后面介绍）的例子包括最大作业数和最小重复间隔",
      "pos": [
        929,
        1023
      ]
    },
    {
      "content": "PUT 和 DELETE：<ph id=\"ph1\">`https://management.core.chinacloudapi.cn/{subscriptionId}/cloudservices/{cloudServiceName}/resources/scheduler/jobcollections/{jobCollectionName}`</ph>",
      "pos": [
        1027,
        1187
      ]
    },
    {
      "content": "GET：<ph id=\"ph1\">`https://management.core.chinacloudapi.cn/{subscriptionId}/cloudservices/{cloudServiceName}/resources/scheduler/~/jobcollections/{jobCollectionName}`</ph>",
      "pos": [
        1194,
        1347
      ]
    },
    {
      "content": "作业管理",
      "pos": [
        1355,
        1359
      ]
    },
    {
      "content": "针对创建和修改作业的 GET、PUT、POST、PATCH 和 DELETE 支持。所有作业都必须属于某一已存在的作业集合，因此没有显式创建",
      "pos": [
        1362,
        1432
      ]
    },
    {
      "content": "作业历史记录管理",
      "pos": [
        1607,
        1615
      ]
    },
    {
      "content": "针对用于获取 60 天的作业执行历史记录（例如作业占用时间和作业执行结果）的 GET 支持。添加基于状态进行筛选的查询字符串参数支持",
      "pos": [
        1618,
        1684
      ]
    },
    {
      "content": "作业类型",
      "pos": [
        1868,
        1872
      ]
    },
    {
      "content": "有两种类型的作业：HTTP 作业（包括支持 SSL 的 HTTPS 作业）和存储队列作业。HTTP 作业适用于现有工作负载或服务的终结点。可以使用存储队列作业将消息发布到存储队列，因此这些作业适合使用存储队列的工作负荷。",
      "pos": [
        1874,
        1984
      ]
    },
    {
      "content": "“作业”实体详述",
      "pos": [
        1989,
        1997
      ]
    },
    {
      "content": "在基本级别上，一个计划的作业具有若干部分：",
      "pos": [
        1999,
        2020
      ]
    },
    {
      "content": "在作业计时器引发时要执行的操作",
      "pos": [
        2024,
        2039
      ]
    },
    {
      "content": "（可选）运行作业的时间",
      "pos": [
        2045,
        2056
      ]
    },
    {
      "content": "（可选）重复作业的时间和频率",
      "pos": [
        2060,
        2074
      ]
    },
    {
      "content": "（可选）主操作失败时要触发的操作",
      "pos": [
        2078,
        2094
      ]
    },
    {
      "content": "在内部，一个计划的作业还包含系统提供的数据，例如下次计划的执行时间。",
      "pos": [
        2096,
        2130
      ]
    },
    {
      "content": "以下代码提供了一个计划作业的综合示例。后面的部分中将提供详细信息。",
      "pos": [
        2132,
        2165
      ]
    },
    {
      "content": "如上面的示例计划作业中所示，一个作业定义具有若干部分：",
      "pos": [
        4214,
        4241
      ]
    },
    {
      "content": "开始时间（“startTime”）",
      "pos": [
        4245,
        4262
      ]
    },
    {
      "content": "操作（“action”），包括错误操作（“errorAction”）",
      "pos": [
        4268,
        4302
      ]
    },
    {
      "content": "重复周期（“recurrence”）",
      "pos": [
        4306,
        4324
      ]
    },
    {
      "content": "状况（“state”）",
      "pos": [
        4328,
        4339
      ]
    },
    {
      "content": "状态（“status”）",
      "pos": [
        4343,
        4355
      ]
    },
    {
      "content": "重试策略（“retryPolicy”）",
      "pos": [
        4359,
        4378
      ]
    },
    {
      "content": "让我们仔细看看其中每一项：",
      "pos": [
        4380,
        4393
      ]
    },
    {
      "content": "startTime",
      "pos": [
        4398,
        4407
      ]
    },
    {
      "pos": [
        4409,
        4495
      ],
      "content": "“startTime”是开始时间，允许调用方以 <bpt id=\"p1\">[</bpt>ISO-8601 格式<ept id=\"p1\">](http://zh.wikipedia.org/wiki/ISO_8601)</ept>在线指定时区偏移量。"
    },
    {
      "pos": [
        4499,
        4555
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"action-and-erroraction\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> action 和 errorAction"
    },
    {
      "content": "“action”是每次执行时调用的操作，并且描述服务调用的类型。操作是将按提供的计划执行的内容。计划程序支持 HTTP 和存储队列操作。",
      "pos": [
        4557,
        4625
      ]
    },
    {
      "content": "上例中的操作是一个 HTTP 操作。下面是存储队列操作的示例：",
      "pos": [
        4627,
        4658
      ]
    },
    {
      "pos": [
        5073,
        5312
      ],
      "content": "“errorAction”是错误处理程序，在主操作失败时调用的操作。你可以使用此变量调用错误处理终结点或发送用户通知。这可用于在主终结点不可用时（例如，在终结点的站点上出现灾难情形时）访问辅助终结点，或者可用于通知错误处理终结点。与主操作相似，错误操作可以是基于其他操作的简单或复合逻辑。若要了解如何创建一个 SAS 令牌，请参阅<bpt id=\"p1\">[</bpt>创建和使用共享访问签名<ept id=\"p1\">](/documentation/articles/storage-manage-access-to-resources)</ept>。"
    },
    {
      "content": "recurrence",
      "pos": [
        5317,
        5327
      ]
    },
    {
      "content": "重复周期具有若干部分：",
      "pos": [
        5329,
        5340
      ]
    },
    {
      "content": "频率：分钟、小时、天、周、月、年之一",
      "pos": [
        5344,
        5362
      ]
    },
    {
      "content": "间隔：针对重复周期的按给定频率的间隔",
      "pos": [
        5368,
        5386
      ]
    },
    {
      "content": "规定的计划：指定重复周期的分钟、小时、星期几、月和月中第几天",
      "pos": [
        5390,
        5420
      ]
    },
    {
      "content": "计数：重复周期的计数",
      "pos": [
        5424,
        5434
      ]
    },
    {
      "content": "结束时间：在指定的结束时间后将不执行任何作业",
      "pos": [
        5438,
        5460
      ]
    },
    {
      "content": "如果某一作业具有在其 JSON 定义中指定的重复执行的对象，将重复执行该作业。如果计数和结束时间均指定，则遵循首先发生的完成规则。",
      "pos": [
        5462,
        5527
      ]
    },
    {
      "content": "state",
      "pos": [
        5532,
        5537
      ]
    },
    {
      "content": "作业的状态是以下四个值之一：enabled、disabled、completed 或 faulted。你可以 PUT 或 PATCH 作业以便将它们更新到已启用或已禁用状态。如果某一作业已完成或已出错，则该作业是不能更新的最终状态（尽管该作业仍可以是 DELETED）。如下所示是状态属性的示例：",
      "pos": [
        5539,
        5687
      ]
    },
    {
      "content": "60 天后删除完成的作业和出错的作业。",
      "pos": [
        5763,
        5782
      ]
    },
    {
      "content": "status",
      "pos": [
        5787,
        5793
      ]
    },
    {
      "content": "一旦启动了某一计划程序作业后，将返回与该作业的当前状态有关的信息。用户无法设置该对象 – 该对象是由系统设置的。但是，该对象包含在作业对象中（而不是单独的链接资源中），因此，可以轻松地获取某一作业的状态。",
      "pos": [
        5795,
        5897
      ]
    },
    {
      "content": "作业状态包含前一个执行的时间（如果有）、下一个计划执行的时间（对于正在进行中的作业）以及作业的执行计数。",
      "pos": [
        5899,
        5951
      ]
    },
    {
      "pos": [
        5955,
        5991
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"retrypolicy\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> retryPolicy"
    },
    {
      "pos": [
        5993,
        6104
      ],
      "content": "如果计划程序作业失败，可以指定重试策略来确定是否以及如何重试该操作。这由 <bpt id=\"p1\">**</bpt>retryType<ept id=\"p1\">**</ept> 对象确定 - 如果没有重试策略，它将设为 <bpt id=\"p2\">**</bpt>none<ept id=\"p2\">**</ept>，如上面所示。如果有重试策略，请将其设为 <bpt id=\"p3\">**</bpt>fixed<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        6106,
        6173
      ],
      "content": "若要设置重试策略，可指定两个附加设置：重试间隔 (<bpt id=\"p1\">**</bpt>retryInterval<ept id=\"p1\">**</ept>) 和重试次数 (<bpt id=\"p2\">**</bpt>retryCount<ept id=\"p2\">**</ept>)。"
    },
    {
      "pos": [
        6175,
        6425
      ],
      "content": "重试间隔使用 <bpt id=\"p1\">**</bpt>retryInterval<ept id=\"p1\">**</ept> 对象指定，表示两次重试之间的时间间隔。其默认值为 1 分钟，其最小值为 1 分钟，其最大值为 18 个月。它使用 ISO 8601 格式定义。同样，重试次数的值使用 <bpt id=\"p2\">**</bpt>retryCount<ept id=\"p2\">**</ept> 对象指定；它是尝试重试的次数。其默认值为 5，其最大值为 20。<bpt id=\"p3\">**</bpt>retryInterval<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>retryCount<ept id=\"p4\">**</ept> 都是可选的。如果 <bpt id=\"p5\">**</bpt>retryType<ept id=\"p5\">**</ept> 设为 <bpt id=\"p6\">**</bpt>fixed<ept id=\"p6\">**</ept> 并且未为它们显式指定任何值，则为它们赋予默认值。"
    },
    {
      "content": "另请参阅",
      "pos": [
        6430,
        6434
      ]
    },
    {
      "content": "计划程序是什么？",
      "pos": [
        6438,
        6446
      ]
    },
    {
      "content": "开始在管理门户中使用计划程序",
      "pos": [
        6492,
        6506
      ]
    },
    {
      "content": "Azure 计划程序中的计划和计费",
      "pos": [
        6565,
        6582
      ]
    },
    {
      "content": "如何使用 Azure 计划程序生成复杂的计划和高级重复执行",
      "pos": [
        6636,
        6665
      ]
    },
    {
      "content": "计划程序 REST API 参考",
      "pos": [
        6725,
        6741
      ]
    },
    {
      "content": "计划程序 PowerShell Cmdlet 参考",
      "pos": [
        6797,
        6822
      ]
    },
    {
      "content": "计划程序的高可用性和可靠性",
      "pos": [
        6883,
        6896
      ]
    },
    {
      "content": "计划程序的限制、默认值和错误代码",
      "pos": [
        6966,
        6982
      ]
    },
    {
      "content": "计划程序出站身份验证",
      "pos": [
        7045,
        7055
      ]
    }
  ],
  "content": "<properties \n pageTitle=\"计划程序的概念、术语和实体 | Azure\"\n description=\"Azure 计划程序的概念、术语和实体层次结构，包括作业和作业集合。显示了一个计划作业的综合示例。\"\n services=\"scheduler\" \n documentationCenter=\".NET\" \n authors=\"krisragh\" \n manager=\"dwrede\" \n editor=\"\"/>\n<tags\n ms.service=\"scheduler\"\n ms.date=\"12/04/2015\"\n wacn.date=\"01/14/2016\"/>\n\n# 计划程序的概念、术语和实体层次结构\n\n## 计划程序实体层次结构\n\n下表描述了计划程序 API 所公开或使用的主要资源：\n\n|资源 | 说明 |\n|---|---|\n|**云服务**|从概念上讲，一个云服务就表示一个应用程序。一个订阅可以具有多个云服务。|\n|**作业集合**|一个作业集合包含一组作业，并且维护该集合内各作业共享的设置、配额和限制。作业集合由订阅所有者创建，并基于使用情况或应用程序边界将作业组合在一起。它被约束到一个区域。通过作业集合，还可以强制执行配额以便约束对该集合中所有作业的使用。配额包括 MaxJobs 和 MaxRecurrence。|\n|**作业**|一个作业通过用于执行的简单或复杂策略定义单个重复发生的操作。操作可以包含 HTTP 请求或存储队列请求。|\n|**作业历史记录**|作业历史记录表示用于执行作业的详细信息。它包含成功与失败信息以及任何响应详细信息。|\n\n## 计划程序实体管理\n\n大体而言，计划程序和服务管理 API 公开资源上的以下操作：\n\n|功能|说明和 URI 地址|\n|---|---|\n|**云服务管理**|针对创建和修改云服务的 GET、PUT 和 DELETE 支持 <p>`https://management.core.chinacloudapi.cn/{subscriptionId}/cloudservices/{cloudServiceName}`</p>|\n|**作业集合管理**|针对创建和修改作业集合和其中包含的作业的 GET、PUT 和 DELETE 支持。作业集合是针对作业以及指向配额和共享设置的映射的容器。配额（在后面介绍）的例子包括最大作业数和最小重复间隔 <p>PUT 和 DELETE：`https://management.core.chinacloudapi.cn/{subscriptionId}/cloudservices/{cloudServiceName}/resources/scheduler/jobcollections/{jobCollectionName}`</p><p>GET：`https://management.core.chinacloudapi.cn/{subscriptionId}/cloudservices/{cloudServiceName}/resources/scheduler/~/jobcollections/{jobCollectionName}`</p>\n|**作业管理**|针对创建和修改作业的 GET、PUT、POST、PATCH 和 DELETE 支持。所有作业都必须属于某一已存在的作业集合，因此没有显式创建 <p>`https://management.core.chinacloudapi.cn/{subscriptionId}/cloudservices/{cloudServiceName}/resources/scheduler/~/jobcollections/{jobCollectionName}/jobs/{jobId}`</p>|\n|**作业历史记录管理**|针对用于获取 60 天的作业执行历史记录（例如作业占用时间和作业执行结果）的 GET 支持。添加基于状态进行筛选的查询字符串参数支持 <P>`https://management.core.chinacloudapi.cn/{subscriptionId}/cloudservices/{cloudServiceName}/resources/scheduler/~/jobcollections/{jobCollectionName}/jobs/{jobId}/history`</p>|\n\n## 作业类型\n\n有两种类型的作业：HTTP 作业（包括支持 SSL 的 HTTPS 作业）和存储队列作业。HTTP 作业适用于现有工作负载或服务的终结点。可以使用存储队列作业将消息发布到存储队列，因此这些作业适合使用存储队列的工作负荷。\n\n## “作业”实体详述\n\n在基本级别上，一个计划的作业具有若干部分：\n\n- 在作业计时器引发时要执行的操作  \n\n- （可选）运行作业的时间\n\n- （可选）重复作业的时间和频率\n\n- （可选）主操作失败时要触发的操作\n\n在内部，一个计划的作业还包含系统提供的数据，例如下次计划的执行时间。\n\n以下代码提供了一个计划作业的综合示例。后面的部分中将提供详细信息。\n\n    {\n        \"startTime\": \"2012-08-04T00:00Z\",               // optional\n        \"action\":\n        {\n            \"type\": \"http\",\n            \"retryPolicy\": { \"retryType\":\"none\" },\n            \"request\":\n            {\n                \"uri\": \"http://contoso.com/foo\",        // required\n                \"method\": \"PUT\",                        // required\n                \"body\": \"Posting from a timer\",         // optional\n                \"headers\":                              // optional\n\n                {\n                    \"Content-Type\": \"application/json\"\n                },\n            },\n           \"errorAction\":\n           {\n               \"type\": \"http\",\n               \"request\":\n               {\n                   \"uri\": \"http://contoso.com/notifyError\",\n                   \"method\": \"POST\",\n               },\n           },\n        },\n        \"recurrence\":                                   // optional\n        {\n            \"frequency\": \"week\",                        // can be \"year\" \"month\" \"day\" \"week\" \"minute\"\n            \"interval\": 1,                              // optional, how often to fire (default to 1)\n            \"schedule\":                                 // optional (advanced scheduling specifics)\n            {\n                \"weekDays\": [\"monday\", \"wednesday\", \"friday\"],\n                \"hours\": [10, 22]\n            },\n            \"count\": 10,                                 // optional (default to recur infinitely)\n            \"endTime\": \"2012-11-04\",                     // optional (default to recur infinitely)\n        },\n        \"state\": \"disabled\",                           // enabled or disabled\n        \"status\":                                       // controlled by Scheduler service\n        {\n            \"lastExecutionTime\": \"2007-03-01T13:00:00Z\",\n            \"nextExecutionTime\": \"2007-03-01T14:00:00Z \",\n            \"executionCount\": 3,\n                                                \"failureCount\": 0,\n                                                \"faultedCount\": 0\n        },\n    }\n\n如上面的示例计划作业中所示，一个作业定义具有若干部分：\n\n- 开始时间（“startTime”）  \n\n- 操作（“action”），包括错误操作（“errorAction”）\n\n- 重复周期（“recurrence”）\n\n- 状况（“state”）\n\n- 状态（“status”）\n\n- 重试策略（“retryPolicy”）\n\n让我们仔细看看其中每一项：\n\n## startTime\n\n“startTime”是开始时间，允许调用方以 [ISO-8601 格式](http://zh.wikipedia.org/wiki/ISO_8601)在线指定时区偏移量。\n\n##<a id=\"action-and-erroraction\"></a> action 和 errorAction\n\n“action”是每次执行时调用的操作，并且描述服务调用的类型。操作是将按提供的计划执行的内容。计划程序支持 HTTP 和存储队列操作。\n\n上例中的操作是一个 HTTP 操作。下面是存储队列操作的示例：\n\n    {\n            \"type\": \"storageQueue\",\n            \"queueMessage\":\n            {\n                \"storageAccount\": \"myStorageAccount\",  // required\n                \"queueName\": \"myqueue\",                // required\n                \"sasToken\": \"TOKEN\",                   // required\n                \"message\":                             // required\n                    \"My message body\",\n            },\n    }\n\n“errorAction”是错误处理程序，在主操作失败时调用的操作。你可以使用此变量调用错误处理终结点或发送用户通知。这可用于在主终结点不可用时（例如，在终结点的站点上出现灾难情形时）访问辅助终结点，或者可用于通知错误处理终结点。与主操作相似，错误操作可以是基于其他操作的简单或复合逻辑。若要了解如何创建一个 SAS 令牌，请参阅[创建和使用共享访问签名](/documentation/articles/storage-manage-access-to-resources)。\n\n## recurrence\n\n重复周期具有若干部分：\n\n- 频率：分钟、小时、天、周、月、年之一  \n\n- 间隔：针对重复周期的按给定频率的间隔\n\n- 规定的计划：指定重复周期的分钟、小时、星期几、月和月中第几天\n\n- 计数：重复周期的计数\n\n- 结束时间：在指定的结束时间后将不执行任何作业\n\n如果某一作业具有在其 JSON 定义中指定的重复执行的对象，将重复执行该作业。如果计数和结束时间均指定，则遵循首先发生的完成规则。\n\n## state\n\n作业的状态是以下四个值之一：enabled、disabled、completed 或 faulted。你可以 PUT 或 PATCH 作业以便将它们更新到已启用或已禁用状态。如果某一作业已完成或已出错，则该作业是不能更新的最终状态（尽管该作业仍可以是 DELETED）。如下所示是状态属性的示例：\n\n\n        \"state\": \"disabled\", // enabled, disabled, completed, or faulted\n60 天后删除完成的作业和出错的作业。\n\n## status\n\n一旦启动了某一计划程序作业后，将返回与该作业的当前状态有关的信息。用户无法设置该对象 – 该对象是由系统设置的。但是，该对象包含在作业对象中（而不是单独的链接资源中），因此，可以轻松地获取某一作业的状态。\n\n作业状态包含前一个执行的时间（如果有）、下一个计划执行的时间（对于正在进行中的作业）以及作业的执行计数。\n\n##<a id=\"retrypolicy\"></a> retryPolicy\n\n如果计划程序作业失败，可以指定重试策略来确定是否以及如何重试该操作。这由 **retryType** 对象确定 - 如果没有重试策略，它将设为 **none**，如上面所示。如果有重试策略，请将其设为 **fixed**。\n\n若要设置重试策略，可指定两个附加设置：重试间隔 (**retryInterval**) 和重试次数 (**retryCount**)。\n\n重试间隔使用 **retryInterval** 对象指定，表示两次重试之间的时间间隔。其默认值为 1 分钟，其最小值为 1 分钟，其最大值为 18 个月。它使用 ISO 8601 格式定义。同样，重试次数的值使用 **retryCount** 对象指定；它是尝试重试的次数。其默认值为 5，其最大值为 20。**retryInterval** 和 **retryCount** 都是可选的。如果 **retryType** 设为 **fixed** 并且未为它们显式指定任何值，则为它们赋予默认值。\n\n## 另请参阅\n\n [计划程序是什么？](/documentation/articles/scheduler-intro)\n\n [开始在管理门户中使用计划程序](/documentation/articles/scheduler-get-started-portal)\n\n [Azure 计划程序中的计划和计费](/documentation/articles/scheduler-plans-billing)\n\n [如何使用 Azure 计划程序生成复杂的计划和高级重复执行](/documentation/articles/scheduler-advanced-complexity)\n\n [计划程序 REST API 参考](https://msdn.microsoft.com/zh-CN/library/dn528946)\n\n [计划程序 PowerShell Cmdlet 参考](/documentation/articles/scheduler-powershell-reference)\n\n [计划程序的高可用性和可靠性](/documentation/articles/scheduler-high-availability-reliability)\n\n [计划程序的限制、默认值和错误代码](/documentation/articles/scheduler-limits-defaults-errors)\n\n [计划程序出站身份验证](/documentation/articles/scheduler-outbound-authentication)\n \n\n<!---HONumber=Mooncake_0104_2016-->"
}