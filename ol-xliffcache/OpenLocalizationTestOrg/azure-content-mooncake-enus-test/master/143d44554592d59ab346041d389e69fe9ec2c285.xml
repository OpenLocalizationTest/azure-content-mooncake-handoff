{
  "nodes": [
    {
      "content": "试用 SQL 数据库：使用 C# 创建 SQL 数据库 | Azure",
      "pos": [
        28,
        63
      ]
    },
    {
      "content": "尝试使用 SQL 数据库开发 SQL 和 C# 应用，并使用适用于 .NET 的 SQL 数据库库以 C# 创建 Azure SQL 数据库。",
      "pos": [
        83,
        154
      ]
    },
    {
      "content": "试用 SQL 数据库：使用 C&amp;#x23; 通过适用于 .NET 的 SQL 数据库库创建 SQL 数据库",
      "pos": [
        412,
        465
      ]
    },
    {
      "content": "单一数据库",
      "pos": [
        470,
        475
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        481,
        497
      ]
    },
    {
      "content": "Azure 门户",
      "pos": [
        501,
        509
      ]
    },
    {
      "content": "C",
      "pos": [
        564,
        565
      ]
    },
    {
      "content": "PowerShell",
      "pos": [
        628,
        638
      ]
    },
    {
      "pos": [
        704,
        824
      ],
      "content": "了解如何使用<bpt id=\"p1\">[</bpt>适用于 .NET 的 Azure SQL 数据库<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.Management.Sql)</ept>通过 C# 命令创建 Azure SQL 数据库。"
    },
    {
      "pos": [
        826,
        942
      ],
      "content": "你可以使用 SQL 和 C# 创建单一数据库以试用 SQL 数据库。若要创建弹性数据库，请参阅<bpt id=\"p1\">[</bpt>创建弹性数据库池<ept id=\"p1\">](/documentation/articles/sql-database-elastic-pool-portal)</ept>。"
    },
    {
      "content": "为简明起见，我们已分开列出各个代码段，并在本文底部的某个部分中提供了一个示例控制台应用程序，其中结合了所有命令。",
      "pos": [
        944,
        1000
      ]
    },
    {
      "pos": [
        1002,
        1337
      ],
      "content": "适用于 .NET 的 Azure SQL 数据库库提供了基于 <bpt id=\"p1\">[</bpt>Azure 资源管理器<ept id=\"p1\">](/documentation/articles/resource-group-overview)</ept>的 API，用于包装<bpt id=\"p2\">[</bpt>基于资源管理器的 SQL 数据库 REST API<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/mt163571.aspx)</ept>。此客户端库遵循基于资源管理器的客户端库的通用模式。资源管理器需要资源组，并要求使用 <bpt id=\"p3\">[</bpt>Azure Active Directory<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/mt168838.aspx)</ept> (AAD) 进行身份验证。"
    },
    {
      "pos": [
        1347,
        1394
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 适用于 .NET 的 Azure SQL 数据库库目前以预览版提供。"
    },
    {
      "content": "若要完成本文中的步骤，你需要以下各项：",
      "pos": [
        1402,
        1421
      ]
    },
    {
      "content": "Azure 订阅。如果你需要 Azure 订阅，只需单击本页顶部的“试用”，然后再回来完成本文的相关操作即可。",
      "pos": [
        1425,
        1480
      ]
    },
    {
      "pos": [
        1483,
        1610
      ],
      "content": "Visual Studio。如需 Visual Studio 的免费副本，请参阅 <bpt id=\"p1\">[</bpt>Visual Studio 下载<ept id=\"p1\">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept>页。"
    },
    {
      "content": "安装所需的库",
      "pos": [
        1616,
        1622
      ]
    },
    {
      "pos": [
        1624,
        1726
      ],
      "content": "若要使用 C# 设置 SQL 数据库，请使用<bpt id=\"p1\">[</bpt>包管理器控制台<ept id=\"p1\">](http://docs.nuget.org/Consume/Package-Manager-Console)</ept>安装以下包，以获取所需的管理库："
    },
    {
      "content": "使用 Azure Active Directory 配置身份验证",
      "pos": [
        1926,
        1958
      ]
    },
    {
      "content": "首先必须通过设置所需的身份验证，使客户端应用程序能够访问 REST API。",
      "pos": [
        1960,
        1998
      ]
    },
    {
      "pos": [
        2000,
        2118
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure 资源管理器 REST API<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn948464.aspx)</ept> 使用 Azure Active Directory 进行身份验证。"
    },
    {
      "pos": [
        2120,
        2299
      ],
      "content": "若要基于当前的用户对客户端应用程序进行身份验证，你必须先将该应用程序注册到与创建了 Azure 资源的订阅关联的 AAD 域中。如果 Azure 订阅是以 Microsoft 帐户而不是工作或学校帐户创建的，则你已经有了默认的 AAD 域。可以在 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中完成应用程序的注册。"
    },
    {
      "content": "若要创建新应用程序并将其注册到正确的 Active Directory 中，请执行以下操作：",
      "pos": [
        2301,
        2347
      ]
    },
    {
      "pos": [
        2352,
        2392
      ],
      "content": "滚动左侧的菜单，找到 <bpt id=\"p1\">**</bpt>Active Directory<ept id=\"p1\">**</ept> 服务并将它打开。"
    },
    {
      "content": "试用 SQL 数据库：设置 Azure Active Directory (AAD)。",
      "pos": [
        2400,
        2443
      ]
    },
    {
      "pos": [
        2452,
        2486
      ],
      "content": "选择用于对应用程序进行身份验证的目录，然后单击该目录的<bpt id=\"p1\">**</bpt>名称<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "选择用于对 SQL C# 应用程序进行身份验证的目录。",
      "pos": [
        2494,
        2521
      ]
    },
    {
      "content": "在目录页上，单击“应用程序”。",
      "pos": [
        2530,
        2545
      ]
    },
    {
      "content": "包含“应用程序”的目录页。",
      "pos": [
        2553,
        2566
      ]
    },
    {
      "content": "单击“添加”为 SQL 数据库创建新的 C# 应用程序。",
      "pos": [
        2575,
        2603
      ]
    },
    {
      "content": "添加 SQL C# 应用程序。",
      "pos": [
        2611,
        2626
      ]
    },
    {
      "content": "选择“添加我的组织正在开发的应用程序”。",
      "pos": [
        2635,
        2655
      ]
    },
    {
      "content": "提供应用的“名称”，然后选择“本机客户端应用程序”。",
      "pos": [
        2660,
        2686
      ]
    },
    {
      "content": "提供有关 SQL C# 应用程序的信息。",
      "pos": [
        2694,
        2714
      ]
    },
    {
      "content": "提供“重定向 URI”。它不需要是实际的终结点，只要是有效的 URI 即可。",
      "pos": [
        2723,
        2761
      ]
    },
    {
      "content": "添加 SQL C# 应用程序的重定向 URL。",
      "pos": [
        2769,
        2792
      ]
    },
    {
      "content": "完成创建应用，单击“配置”，然后复制“客户端 ID”（后面需要在代码中使用客户端 ID）。",
      "pos": [
        2801,
        2846
      ]
    },
    {
      "content": "获取 SQL C# 应用程序的客户端 ID。",
      "pos": [
        2854,
        2876
      ]
    },
    {
      "content": "在页面底部单击“添加应用程序”。",
      "pos": [
        2886,
        2902
      ]
    },
    {
      "content": "选择“Microsoft 应用”。",
      "pos": [
        2906,
        2923
      ]
    },
    {
      "content": "选择“Azure 服务管理 API”，然后完成向导。",
      "pos": [
        2927,
        2953
      ]
    },
    {
      "content": "选择 API 之后，需要通过选择“访问 Azure 服务管理(预览)”，授予访问此 API 所需的特定权限。",
      "pos": [
        2957,
        3011
      ]
    },
    {
      "content": "设置权限。",
      "pos": [
        3019,
        3024
      ]
    },
    {
      "content": "单击“保存”。",
      "pos": [
        3033,
        3040
      ]
    },
    {
      "content": "标识域名",
      "pos": [
        3048,
        3052
      ]
    },
    {
      "content": "代码中需要用到域名。轻松标识正确域名的一种方式是：",
      "pos": [
        3054,
        3079
      ]
    },
    {
      "pos": [
        3084,
        3130
      ],
      "content": "转到 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "将鼠标悬停在右上角的名称上，并记下弹出窗口中显示的域。",
      "pos": [
        3134,
        3161
      ]
    },
    {
      "content": "标识域名。",
      "pos": [
        3169,
        3174
      ]
    },
    {
      "content": "其他 AAD 资源",
      "pos": [
        3186,
        3195
      ]
    },
    {
      "pos": [
        3199,
        3380
      ],
      "content": "在<bpt id=\"p1\">[</bpt>这篇有用的博客文章<ept id=\"p1\">](http://www.cloudidentity.com/blog/2013/09/12/active-directory-authentication-library-adal-v1-for-net-general-availability)</ept>中，可以找到有关使用 Azure Active Directory 进行身份验证的其他信息。"
    },
    {
      "content": "检索当前用户的访问令牌",
      "pos": [
        3387,
        3398
      ]
    },
    {
      "content": "客户端应用程序必须检索当前用户的应用程序访问令牌。当用户首次执行此代码时，系统会提示用户输入其用户凭据，生成的令牌将在本地缓存。后续的执行将从缓存中检索令牌，并且仅在令牌已过期时才提示用户登录。",
      "pos": [
        3401,
        3498
      ]
    },
    {
      "pos": [
        4278,
        4349
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 本文中的示例使用每个 API 请求的同步形式，并会一直阻塞，直到对基础服务的 REST 调用完成。有可用的异步方法。"
    },
    {
      "content": "创建资源组",
      "pos": [
        4356,
        4361
      ]
    },
    {
      "content": "使用资源管理器时，必须在资源组中创建所有资源。资源组是一个容器，包含应用程序的相关资源。使用 Azure SQL 数据库时，必须在现有资源组中创建数据库服务器，再在服务器上创建数据库。然后在应用程序可以连接到服务器或数据库之前，你还必须在服务器上创建防火墙规则，以便能够从客户端 IP 地址进行访问。",
      "pos": [
        4363,
        4513
      ]
    },
    {
      "content": "创建服务器",
      "pos": [
        5053,
        5058
      ]
    },
    {
      "content": "SQL 数据库包含在服务器中。服务器名称在所有 Azure SQL Server 中必须全局唯一，因此，如果该服务器名称已被使用，你将会收到错误。还必须指出的是，该命令可能需要数分钟才能运行完毕。",
      "pos": [
        5061,
        5159
      ]
    },
    {
      "content": "创建服务器防火墙规则，以允许对服务器进行访问",
      "pos": [
        5876,
        5898
      ]
    },
    {
      "pos": [
        5900,
        6027
      ],
      "content": "默认情况下，无法从任何位置连接到服务器。为了连接到服务器或者服务器上的任何数据库，必须定义<bpt id=\"p1\">[</bpt>防火墙规则<ept id=\"p1\">](/documentation/articles/sql-database-firewall-configure)</ept>以允许从客户端 IP 地址进行访问。"
    },
    {
      "content": "以下示例将创建一个规则，用于实现从任何 IP 地址对服务器进行访问。建议你创建适当的 SQL 登录名和密码来保护数据库，并且不要依赖防火墙规则作为防范入侵的主要防御机制。",
      "pos": [
        6029,
        6114
      ]
    },
    {
      "pos": [
        6618,
        6735
      ],
      "content": "若要允许其他 Azure 服务访问服务器，请添加一个防火墙规则并将 tartIpAddress 和 EndIpAddress 都设置为 0.0.0.0。请注意，这会允许来自 <bpt id=\"p1\">*</bpt>任何<ept id=\"p1\">*</ept> Azure 订阅的 Azure 流量访问该服务器。"
    },
    {
      "content": "使用 C&amp;#x23; 创建基本的 SQL 数据库",
      "pos": [
        6741,
        6765
      ]
    },
    {
      "content": "如果服务器上不存在同名的数据库，则以下 C# 命令将创建新的基本 SQL 数据库；如果具有同名的数据库，则会更新数据库。",
      "pos": [
        6767,
        6827
      ]
    },
    {
      "content": "示例 C&amp;#x23; 控制台应用程序",
      "pos": [
        7619,
        7637
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        14173,
        14177
      ]
    },
    {
      "content": "既然你已试用 SQL 数据库并使用 C# 设置了数据库，现在可以阅读以下文章：",
      "pos": [
        14178,
        14217
      ]
    },
    {
      "content": "使用 C# 连接和查询 SQL 数据库",
      "pos": [
        14222,
        14241
      ]
    },
    {
      "content": "使用 SQL Server Management Studio (SSMS) 进行连接",
      "pos": [
        14298,
        14341
      ]
    },
    {
      "content": "其他资源",
      "pos": [
        14405,
        14409
      ]
    },
    {
      "content": "SQL 数据库",
      "pos": [
        14414,
        14421
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"试用 SQL 数据库：使用 C# 创建 SQL 数据库 | Azure\" \n    description=\"尝试使用 SQL 数据库开发 SQL 和 C# 应用，并使用适用于 .NET 的 SQL 数据库库以 C# 创建 Azure SQL 数据库。\" \n    keywords=\"试用 sql, sql c#\"   \n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"stevestein\" \n    manager=\"jeffreyg\" \n    editor=\"cgronlun\"/>\n\n<tags\n   ms.service=\"sql-database\"\n   ms.date=\"12/01/2015\"\n   wacn.date=\"01/29/2016\"/>\n\n# 试用 SQL 数据库：使用 C&#x23; 通过适用于 .NET 的 SQL 数据库库创建 SQL 数据库 \n\n**单一数据库**\n\n> [AZURE.SELECTOR]\n- [Azure 门户](/documentation/articles/sql-database-get-started)\n- [C#](/documentation/articles/sql-database-get-started-csharp)\n- [PowerShell](/documentation/articles/sql-database-get-started-powershell)\n\n\n\n了解如何使用[适用于 .NET 的 Azure SQL 数据库](https://www.nuget.org/packages/Microsoft.Azure.Management.Sql)通过 C# 命令创建 Azure SQL 数据库。\n\n你可以使用 SQL 和 C# 创建单一数据库以试用 SQL 数据库。若要创建弹性数据库，请参阅[创建弹性数据库池](/documentation/articles/sql-database-elastic-pool-portal)。\n\n为简明起见，我们已分开列出各个代码段，并在本文底部的某个部分中提供了一个示例控制台应用程序，其中结合了所有命令。\n\n适用于 .NET 的 Azure SQL 数据库库提供了基于 [Azure 资源管理器](/documentation/articles/resource-group-overview)的 API，用于包装[基于资源管理器的 SQL 数据库 REST API](https://msdn.microsoft.com/zh-cn/library/azure/mt163571.aspx)。此客户端库遵循基于资源管理器的客户端库的通用模式。资源管理器需要资源组，并要求使用 [Azure Active Directory](https://msdn.microsoft.com/zh-cn/library/azure/mt168838.aspx) (AAD) 进行身份验证。\n\n<br>\n\n> [AZURE.NOTE] 适用于 .NET 的 Azure SQL 数据库库目前以预览版提供。\n\n<br>\n\n若要完成本文中的步骤，你需要以下各项：\n\n- Azure 订阅。如果你需要 Azure 订阅，只需单击本页顶部的“试用”，然后再回来完成本文的相关操作即可。\n- Visual Studio。如需 Visual Studio 的免费副本，请参阅 [Visual Studio 下载](https://www.visualstudio.com/downloads/download-visual-studio-vs)页。\n\n\n## 安装所需的库\n\n若要使用 C# 设置 SQL 数据库，请使用[包管理器控制台](http://docs.nuget.org/Consume/Package-Manager-Console)安装以下包，以获取所需的管理库：\n\n    PM> Install-Package Microsoft.Azure.Management.Sql –Pre\n    PM> Install-Package Microsoft.Azure.Management.Resources –Pre\n    PM> Install-Package Microsoft.Azure.Common.Authentication –Pre\n\n\n## 使用 Azure Active Directory 配置身份验证\n\n首先必须通过设置所需的身份验证，使客户端应用程序能够访问 REST API。\n\n[Azure 资源管理器 REST API](https://msdn.microsoft.com/zh-cn/library/azure/dn948464.aspx) 使用 Azure Active Directory 进行身份验证。\n\n若要基于当前的用户对客户端应用程序进行身份验证，你必须先将该应用程序注册到与创建了 Azure 资源的订阅关联的 AAD 域中。如果 Azure 订阅是以 Microsoft 帐户而不是工作或学校帐户创建的，则你已经有了默认的 AAD 域。可以在 [Azure 经典门户](https://manage.windowsazure.cn)中完成应用程序的注册。\n\n若要创建新应用程序并将其注册到正确的 Active Directory 中，请执行以下操作：\n\n1. 滚动左侧的菜单，找到 **Active Directory** 服务并将它打开。\n\n    ![试用 SQL 数据库：设置 Azure Active Directory (AAD)。][1]\n\n2. 选择用于对应用程序进行身份验证的目录，然后单击该目录的**名称**。\n\n    ![选择用于对 SQL C# 应用程序进行身份验证的目录。][4]\n\n3. 在目录页上，单击“应用程序”。\n\n    ![包含“应用程序”的目录页。][5]\n\n4. 单击“添加”为 SQL 数据库创建新的 C# 应用程序。\n\n    ![添加 SQL C# 应用程序。][6]\n\n5. 选择“添加我的组织正在开发的应用程序”。\n\n5. 提供应用的“名称”，然后选择“本机客户端应用程序”。\n\n    ![提供有关 SQL C# 应用程序的信息。][7]\n\n6. 提供“重定向 URI”。它不需要是实际的终结点，只要是有效的 URI 即可。\n\n    ![添加 SQL C# 应用程序的重定向 URL。][8]\n\n7. 完成创建应用，单击“配置”，然后复制“客户端 ID”（后面需要在代码中使用客户端 ID）。\n\n    ![获取 SQL C# 应用程序的客户端 ID。][9]\n\n\n1. 在页面底部单击“添加应用程序”。\n1. 选择“Microsoft 应用”。\n1. 选择“Azure 服务管理 API”，然后完成向导。\n2. 选择 API 之后，需要通过选择“访问 Azure 服务管理(预览)”，授予访问此 API 所需的特定权限。\n\n    ![设置权限。][2]\n\n2. 单击“保存”。\n\n\n\n### 标识域名\n\n代码中需要用到域名。轻松标识正确域名的一种方式是：\n\n1. 转到 [Azure 门户](https://manage.windowsazure.cn)。\n2. 将鼠标悬停在右上角的名称上，并记下弹出窗口中显示的域。\n\n    ![标识域名。][3]\n\n\n\n\n\n**其他 AAD 资源**\n\n在[这篇有用的博客文章](http://www.cloudidentity.com/blog/2013/09/12/active-directory-authentication-library-adal-v1-for-net-general-availability)中，可以找到有关使用 Azure Active Directory 进行身份验证的其他信息。\n\n\n### 检索当前用户的访问令牌 \n\n客户端应用程序必须检索当前用户的应用程序访问令牌。当用户首次执行此代码时，系统会提示用户输入其用户凭据，生成的令牌将在本地缓存。后续的执行将从缓存中检索令牌，并且仅在令牌已过期时才提示用户登录。\n\n    /// <summary>\n    /// Prompts for user credentials when first run or if the cached credentials have expired.\n    /// </summary>\n    /// <returns>The access token from AAD.</returns>\n    private static AuthenticationResult GetAccessToken()\n    {\n        AuthenticationContext authContext = new AuthenticationContext\n            (\"https://login.chinacloudapi.cn/\" + domainName /* Tenant ID or AAD domain */);\n\n        AuthenticationResult token = authContext.AcquireToken\n            (\"https://management.azure.com/\"/* the Azure Resource Management endpoint */,\n                clientId,\n        new Uri(clientAppUri) /* redirect URI */,\n        PromptBehavior.Auto /* with Auto user will not be prompted if an unexpired token is cached */);\n\n        return token;\n    }\n\n\n\n> [AZURE.NOTE] 本文中的示例使用每个 API 请求的同步形式，并会一直阻塞，直到对基础服务的 REST 调用完成。有可用的异步方法。\n\n\n\n## 创建资源组\n\n使用资源管理器时，必须在资源组中创建所有资源。资源组是一个容器，包含应用程序的相关资源。使用 Azure SQL 数据库时，必须在现有资源组中创建数据库服务器，再在服务器上创建数据库。然后在应用程序可以连接到服务器或数据库之前，你还必须在服务器上创建防火墙规则，以便能够从客户端 IP 地址进行访问。\n\n\n    // Create a resource management client \n    ResourceManagementClient resourceClient = new ResourceManagementClient(new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /*subscription id*/, token.AccessToken ));\n    \n    // Resource group parameters\n    ResourceGroup resourceGroupParameters = new ResourceGroup()\n    {\n        Location = \"China East\"\n    };\n    \n    //Create a resource group\n    var resourceGroupResult = resourceClient.ResourceGroups.CreateOrUpdate(\"ResourceGroupName\", resourceGroupParameters);\n\n\n\n## 创建服务器 \n\nSQL 数据库包含在服务器中。服务器名称在所有 Azure SQL Server 中必须全局唯一，因此，如果该服务器名称已被使用，你将会收到错误。还必须指出的是，该命令可能需要数分钟才能运行完毕。\n\n\n    // Create a SQL Database management client\n    SqlManagementClient sqlClient = new SqlManagementClient(new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* Subscription id*/, token.AccessToken));\n\n    // Create a server\n    ServerCreateOrUpdateParameters serverParameters = new ServerCreateOrUpdateParameters()\n    {\n        Location = \"China East\",\n        Properties = new ServerCreateOrUpdateProperties()\n        {\n            AdministratorLogin = \"ServerAdmin\",\n            AdministratorLoginPassword = securelyStoredPassword,\n            Version = \"12.0\"\n        }\n    };\n\n    var serverResult = sqlClient.Servers.CreateOrUpdate(\"ResourceGroupName\", \"ServerName\", serverParameters);\n\n\n\n\n## 创建服务器防火墙规则，以允许对服务器进行访问\n\n默认情况下，无法从任何位置连接到服务器。为了连接到服务器或者服务器上的任何数据库，必须定义[防火墙规则](/documentation/articles/sql-database-firewall-configure)以允许从客户端 IP 地址进行访问。\n\n以下示例将创建一个规则，用于实现从任何 IP 地址对服务器进行访问。建议你创建适当的 SQL 登录名和密码来保护数据库，并且不要依赖防火墙规则作为防范入侵的主要防御机制。\n\n\n    // Create a firewall rule on the server to allow TDS connection \n    FirewallRuleCreateOrUpdateParameters firewallParameters = new FirewallRuleCreateOrUpdateParameters()\n    {\n        Properties = new FirewallRuleCreateOrUpdateProperties()\n        {\n            StartIpAddress = \"0.0.0.0\",\n            EndIpAddress = \"255.255.255.255\"\n        }\n    };\n\n    var firewallResult = sqlClient.FirewallRules.CreateOrUpdate(\"ResourceGroupName\", \"ServerName\", \"FirewallRuleName\", firewallParameters);\n\n\n\n\n若要允许其他 Azure 服务访问服务器，请添加一个防火墙规则并将 tartIpAddress 和 EndIpAddress 都设置为 0.0.0.0。请注意，这会允许来自 *任何* Azure 订阅的 Azure 流量访问该服务器。\n\n\n## 使用 C&#x23; 创建基本的 SQL 数据库\n\n如果服务器上不存在同名的数据库，则以下 C# 命令将创建新的基本 SQL 数据库；如果具有同名的数据库，则会更新数据库。\n\n        // Create a database\n\n        // Retrieve the server on which the database will be created\n        Server currentServer = sqlClient.Servers.Get(\"ResourceGroupName\", \"ServerName\").Server;\n \n        // Create a database: configure create or update parameters and properties explicitly\n        DatabaseCreateOrUpdateParameters newDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n        {\n            Location = currentServer.Location,\n            Properties = new DatabaseCreateOrUpdateProperties()\n            {\n                Edition = \"Standard\",\n                RequestedServiceObjectiveName = \"S0\",\n            }\n        };\n\n        var dbResponse = sqlClient.Databases.CreateOrUpdate(\"ResourceGroupNname\", \"ServerName\", \"Database1\", newDatabaseParameters);\n\n\n\n\n\n\n## 示例 C&#x23; 控制台应用程序\n\n\n    using Microsoft.Azure;\n    using Microsoft.Azure.Management.Resources;\n    using Microsoft.Azure.Management.Resources.Models;\n    using Microsoft.Azure.Management.Sql;\n    using Microsoft.Azure.Management.Sql.Models;\n    using Microsoft.IdentityModel.Clients.ActiveDirectory;\n    using System;\n    \n    \n    namespace CreateSqlDatabase\n    {\n     class Program\n     {\n\n        #region user variables\n        \n        // Azure subscription id\n        private static string subscriptionId = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n     \n        \n        // application client ID from Azure Active Directory (AAD)\n        private static string clientAppUri = \"http://app1\";\n        private static string clientId = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n\n        private static string resourcegroupName = \"rg1\";\n\n        private static string dataCenterLocation = \"China East\";\n\n        private static string databaseName = \"newDatabaseName\";\n        private static string databaseEdition = \"Standard\";\n        private static string databasePerformanceLevel = \"S0\";\n\n        private static string serverName = \"serverName\";\n        private static string serverAdmin = \"admin\";\n        private static string serverAdminPassword = securelyStoredPassword;\n        private static string serverVersion = \"12.0\";\n\n        private static string firewallRuleName = \"rule1\";\n        private static string firewallRuleStartIp = \"0.0.0.0\";\n        private static string firewallRuleEndIp = \"255.255.255.255\";\n\n\n\n        private static string domainName = \"microsoft.partner.onmschina.cn\";\n\n        private static string serverLocation = \"China East\";\n\n        #endregion\n\n\n        static void Main(string[] args)\n        {\n            var token = GetAccessToken();\n\n            // Who am I?\n            Console.WriteLine(\"Identity: {0} {1}\", token.UserInfo.GivenName, token.UserInfo.FamilyName);\n            Console.WriteLine(\"Token expires on {0}\", token.ExpiresOn);\n            Console.WriteLine(\"\");\n\n            // Create a resource management client \n            ResourceManagementClient resourceClient = new ResourceManagementClient(new TokenCloudCredentials(subscriptionId, token.AccessToken));\n\n            // Resource group parameters\n            ResourceGroup resourceGroupParameters = new ResourceGroup()\n            {\n                Location = dataCenterLocation\n            };\n\n            //Create a resource group\n            var resourceGroupResult = resourceClient.ResourceGroups.CreateOrUpdate(resourcegroupName, resourceGroupParameters);\n\n            Console.WriteLine(\"Resource group {0} create or update completed with status code {1} \", resourceGroupResult.ResourceGroup.Name, resourceGroupResult.StatusCode);\n\n            //create a SQL Database management client\n            TokenCloudCredentials tokenCredentials = new TokenCloudCredentials(subscriptionId, token.AccessToken);\n\n            SqlManagementClient sqlClient = new SqlManagementClient(tokenCredentials);\n\n            // Create a server\n            ServerCreateOrUpdateParameters serverParameters = new ServerCreateOrUpdateParameters()\n            {\n                Location = serverLocation,\n                Properties = new ServerCreateOrUpdateProperties()\n                {\n                    AdministratorLogin = serverAdmin,\n                    AdministratorLoginPassword = serverAdminPassword,\n                    Version = serverVersion\n                }\n            };\n\n            var serverResult = sqlClient.Servers.CreateOrUpdate(resourcegroupName, serverName, serverParameters);\n\n            var serverGetResult = sqlClient.Servers.Get(resourcegroupName, serverName);\n\n\n            Console.WriteLine(\"Server {0} create or update completed with status code {1}\", serverResult.Server.Name, serverResult.StatusCode);\n\n            // Create a firewall rule on the server to allow TDS connection \n\n            FirewallRuleCreateOrUpdateParameters firewallParameters = new FirewallRuleCreateOrUpdateParameters()\n            {\n                Properties = new FirewallRuleCreateOrUpdateProperties()\n                {\n                    StartIpAddress = firewallRuleStartIp,\n                    EndIpAddress = firewallRuleEndIp\n                }\n            };\n\n            var firewallResult = sqlClient.FirewallRules.CreateOrUpdate(resourcegroupName, serverName, firewallRuleName, firewallParameters);\n\n            Console.WriteLine(\"Firewall rule {0} create or update completed with status code: {1}\", firewallResult.FirewallRule.Name, firewallResult.StatusCode);\n\n            // Create a database\n\n            // Retrieve the server on which the database will be created\n            Server currentServer = sqlClient.Servers.Get(resourcegroupName, serverName).Server;\n\n            // Create a database\n            DatabaseCreateOrUpdateParameters newDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n            {\n                Location = currentServer.Location,\n                Properties = new DatabaseCreateOrUpdateProperties()\n                {\n                    Edition = databaseEdition,\n                    RequestedServiceObjectiveName = databasePerformanceLevel,\n                }\n            };\n\n            var dbResponse = sqlClient.Databases.CreateOrUpdate(resourcegroupName, serverName, databaseName, newDatabaseParameters);\n\n            Console.WriteLine(\"Database {0} created with status code: {1}. Service Objective: {2} \", dbResponse.Database.Name, dbResponse.StatusCode, dbResponse.Database.Properties.ServiceObjective);\n           \n            Console.WriteLine(System.Environment.NewLine + \"Press any key to exit.\");\n            Console.ReadKey();\n        }\n\n        /// <summary>\n        /// Prompts for user credentials when first run or if the cached credentials have expired.\n        /// </summary>\n        /// <returns>The access token from AAD.</returns>\n        private static AuthenticationResult GetAccessToken()\n        {\n            AuthenticationContext authContext = new AuthenticationContext\n                (\"https://login.chinacloudapi.cn/\" + domainName /* Tenant ID or AAD domain */);\n\n            AuthenticationResult token = authContext.AcquireToken\n                (\"https://management.azure.com/\"/* the Azure Resource Management endpoint */,\n                    clientId,\n            new Uri(clientAppUri) /* redirect URI */,\n            PromptBehavior.Auto /* with Auto user will not be prompted if an unexpired token is cached */);\n\n            return token;\n        }\n      }\n    }\n\n\n## 后续步骤\n既然你已试用 SQL 数据库并使用 C# 设置了数据库，现在可以阅读以下文章：\n\n- [使用 C# 连接和查询 SQL 数据库](/documentation/articles/sql-database-connect-query)\n- [使用 SQL Server Management Studio (SSMS) 进行连接](/documentation/articles/sql-database-connect-to-database)\n\n## 其他资源\n\n- [SQL 数据库](/documentation/services/sql-databases)\n\n\n\n\n\n<!--Image references-->\n[1]: ./media/sql-database-get-started-csharp/aad.png\n[2]: ./media/sql-database-get-started-csharp/permissions.png\n[3]: ./media/sql-database-get-started-csharp/getdomain.png\n[4]: ./media/sql-database-get-started-csharp/aad2.png\n[5]: ./media/sql-database-get-started-csharp/aad-applications.png\n[6]: ./media/sql-database-get-started-csharp/add.png\n[7]: ./media/sql-database-get-started-csharp/add-application.png\n[8]: ./media/sql-database-get-started-csharp/add-application2.png\n[9]: ./media/sql-database-get-started-csharp/clientid.png\n\n<!---HONumber=Mooncake_0118_2016-->\n"
}