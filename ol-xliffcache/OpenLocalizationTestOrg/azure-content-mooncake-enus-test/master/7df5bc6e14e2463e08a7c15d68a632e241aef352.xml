{
  "nodes": [
    {
      "content": "使用移动服务将图像上载到 Blob 存储 (Android) | 移动服务",
      "pos": [
        28,
        65
      ]
    },
    {
      "content": "了解如何使用移动服务将图像上载到 Azure 存储空间以及从 Android 应用访问图像。",
      "pos": [
        85,
        131
      ]
    },
    {
      "content": "从 Android 设备将图像上载到 Azure 存储空间",
      "pos": [
        364,
        393
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        495,
        501
      ]
    },
    {
      "content": "本主题演示如何使 Android Azure 移动服务应用能够将图像上载到 Azure 存储空间。",
      "pos": [
        637,
        686
      ]
    },
    {
      "content": "移动服务使用 SQL 数据库存储数据。但是，在 Azure 存储空间中存储二进制大型对象 (BLOB) 数据更有效。在本教程中，你将使移动服务快速入门应用能够使用 Android 相机拍照，并将图像上载到 Azure 存储空间。",
      "pos": [
        688,
        802
      ]
    },
    {
      "content": "入门所需操作",
      "pos": [
        808,
        814
      ]
    },
    {
      "pos": [
        816,
        848
      ],
      "content": "在开始本教程之前，必须先完成移动服务快速入门：<bpt id=\"p1\">[</bpt><ept id=\"p1\">移动服务入门]</ept>。"
    },
    {
      "content": "本教程还需要以下项：",
      "pos": [
        850,
        860
      ]
    },
    {
      "content": "Azure 存储帐户",
      "pos": [
        865,
        875
      ]
    },
    {
      "content": "带相机的 Android 设备",
      "pos": [
        935,
        950
      ]
    },
    {
      "content": "应用的工作方式",
      "pos": [
        955,
        962
      ]
    },
    {
      "content": "上载照片图像是一个多步骤过程：",
      "pos": [
        964,
        979
      ]
    },
    {
      "content": "首先你拍照，然后在 SQL 数据库中插入一个 TodoItem 行，其中包含 Azure 存储空间使用的新元数据字段。",
      "pos": [
        983,
        1042
      ]
    },
    {
      "pos": [
        1045,
        1092
      ],
      "content": "新的移动服务 SQL <bpt id=\"p1\">**</bpt>插入<ept id=\"p1\">**</ept>脚本要求 Azure 存储空间提供共享访问签名 (SAS)。"
    },
    {
      "content": "该脚本将 SAS 和 blob 的 URI 返回给客户端。",
      "pos": [
        1095,
        1124
      ]
    },
    {
      "content": "客户端使用 SAS 和 blob URI 上载照片。",
      "pos": [
        1127,
        1153
      ]
    },
    {
      "content": "那么，SAS 是什么？",
      "pos": [
        1155,
        1166
      ]
    },
    {
      "pos": [
        1168,
        1420
      ],
      "content": "在客户端应用内部存储将数据上载到 Azure 存储服务程序所需的凭据是不安全的。你应将这些凭据存储在移动服务中，并使用它们来生成用于授权上载新图像的共享访问签名 (SAS)。移动服务会向客户端应用安全返回 SAS（一个具有 5 分钟到期期限的凭据）。然后，应用程序将使用此临时凭据来上载图像。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>共享访问签名，第 1 部分：了解 SAS 模型<ept id=\"p1\">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>"
    },
    {
      "content": "代码示例",
      "pos": [
        1425,
        1429
      ]
    },
    {
      "pos": [
        1430,
        1555
      ],
      "content": "<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](https://github.com/Azure/mobile-services-samples/tree/master/UploadImages)</ept>提供了此应用的已完成客户端源代码部分。若要运行此代码，你必须先完成本教程的移动服务后端部分。"
    },
    {
      "content": "在 Azure 经典门户中更新已注册的插入脚本",
      "pos": [
        1560,
        1583
      ]
    },
    {
      "content": "更新快速入门应用以捕获和上载图像。",
      "pos": [
        1702,
        1719
      ]
    },
    {
      "content": "引用 Azure 存储空间 Android 客户端库",
      "pos": [
        1725,
        1751
      ]
    },
    {
      "pos": [
        1756,
        1819
      ],
      "content": "若要添加对库的引用，请在“应用”&gt; <bpt id=\"p1\">**</bpt>build.gradle<ept id=\"p1\">**</ept> 文件中，向 <ph id=\"ph1\">`dependencies`</ph> 节添加以下行："
    },
    {
      "pos": [
        1904,
        1943
      ],
      "content": "将 <ph id=\"ph1\">`minSdkVersion`</ph> 值更改为 15（相机 API 所需的值）。"
    },
    {
      "content": "按“将项目与 Gradle 文件同步”图标。",
      "pos": [
        1948,
        1970
      ]
    },
    {
      "content": "更新相机和存储的清单文件",
      "pos": [
        1976,
        1988
      ]
    },
    {
      "pos": [
        1993,
        2041
      ],
      "content": "通过向 <bpt id=\"p1\">**</bpt>AndroidManifest.xml<ept id=\"p1\">**</ept> 添加以下行，指定你的应用需要让相机可用："
    },
    {
      "pos": [
        2147,
        2200
      ],
      "content": "通过向 <bpt id=\"p1\">**</bpt>AndroidManifest.xml<ept id=\"p1\">**</ept> 添加以下行，指定你的应用需要写入到外部存储的权限："
    },
    {
      "pos": [
        2292,
        2405
      ],
      "content": "请注意，Android 外部存储不一定是 SD 卡：有关详细信息，请参阅<bpt id=\"p1\">[</bpt>保存文件<ept id=\"p1\">](http://developer.android.com/training/basics/data-storage/files.html)</ept>。"
    },
    {
      "content": "更新新用户界面的资源文件",
      "pos": [
        2411,
        2423
      ]
    },
    {
      "pos": [
        2428,
        2480
      ],
      "content": "通过向 <bpt id=\"p1\">*</bpt>values<ept id=\"p1\">*</ept> 目录中的 <bpt id=\"p2\">**</bpt>strings.xml<ept id=\"p2\">**</ept> 文件添加以下内容，为新按钮添加标题："
    },
    {
      "pos": [
        2607,
        2682
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>res =&gt; layout<ept id=\"p1\">**</ept> 文件夹中的 <bpt id=\"p2\">**</bpt>activity\\_to\\_do.xml<ept id=\"p2\">**</ept> 文件中，在“添加”按钮的现有代码前添加以下代码。"
    },
    {
      "content": "将“添加”按钮元素替换为以下代码：",
      "pos": [
        2945,
        2962
      ]
    },
    {
      "content": "添加照片拍摄的代码",
      "pos": [
        3225,
        3234
      ]
    },
    {
      "pos": [
        3239,
        3291
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> 中添加以下代码以创建一个具有唯一名称的<bpt id=\"p2\">**</bpt>文件<ept id=\"p2\">**</ept>对象。"
    },
    {
      "content": "添加以下代码以启动 Android 相机应用。然后可以拍照，如果有照片看起来不错，请按“保存”，这会将其存储在你刚创建的文件中。",
      "pos": [
        3961,
        4025
      ]
    },
    {
      "content": "添加代码以将照片文件上载到 blob 存储中",
      "pos": [
        5179,
        5201
      ]
    },
    {
      "pos": [
        5207,
        5270
      ],
      "content": "首先，我们通过向 <bpt id=\"p1\">**</bpt>ToDoItem.java<ept id=\"p1\">**</ept> 添加以下代码，将一些新的元数据字段添加到 <ph id=\"ph1\">`ToDoItem`</ph> 对象中。"
    },
    {
      "content": "使用以下代码替换 0 参数构造函数：",
      "pos": [
        7675,
        7693
      ]
    },
    {
      "content": "使用以下代码替换多参数构造函数：",
      "pos": [
        7920,
        7936
      ]
    },
    {
      "pos": [
        8643,
        8727
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>ToDoActivity.java<ept id=\"p1\">**</ept> 文件中，将 <bpt id=\"p2\">**</bpt>ToDoActivity.java<ept id=\"p2\">**</ept> 中的 <bpt id=\"p3\">**</bpt>addItem<ept id=\"p3\">**</ept> 方法替换为以下代码，以便上载图像。"
    },
    {
      "content": "这段代码可向移动服务发送插入新 TodoItem 的请求。响应包含 SAS，然后可将其用于将图像从本地存储上载到 Azure 存储空间中的 Blob。",
      "pos": [
        11377,
        11452
      ]
    },
    {
      "content": "测试上载图像",
      "pos": [
        11458,
        11464
      ]
    },
    {
      "content": "在 Android Studio 中按“运行”。在对话框中，选择要使用的设备。",
      "pos": [
        11470,
        11509
      ]
    },
    {
      "content": "当应用 UI 出现时，在标记为“添加 ToDo 项”的文本框中输入文本。",
      "pos": [
        11514,
        11550
      ]
    },
    {
      "content": "按“拍照”。当相机应用启动时，拍摄一张照片。按复选标记以接受该照片。",
      "pos": [
        11555,
        11589
      ]
    },
    {
      "content": "按“上载”。注意 ToDoItem 如何像往常一样已添加到列表中。",
      "pos": [
        11594,
        11627
      ]
    },
    {
      "content": "在 Azure 经典门户中，转到你的存储帐户，按“容器”选项卡，然后在列表中按你的容器的名称。",
      "pos": [
        11632,
        11679
      ]
    },
    {
      "content": "此时将显示已上载的 blob 文件列表。选择其中一个，然后按“下载”。",
      "pos": [
        11684,
        11719
      ]
    },
    {
      "content": "现在，你上载的图像将显示在浏览器窗口中。",
      "pos": [
        11724,
        11744
      ]
    },
    {
      "pos": [
        11750,
        11779
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"next-steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "content": "现在，你已能够通过将移动服务与 Blob 服务集成安全地上载图片，请查看一些其他的后端服务和集成主题：",
      "pos": [
        11781,
        11832
      ]
    },
    {
      "content": "使用 SendGrid 从移动服务发送电子邮件",
      "pos": [
        11837,
        11860
      ]
    },
    {
      "content": "了解如何使用 SendGrid 电子邮件服务为你的移动服务添加电子邮件功能。本主题演示如何添加服务器端脚本，以使用 SendGrid 发送电子邮件。",
      "pos": [
        11868,
        11942
      ]
    },
    {
      "content": "移动服务服务器脚本参考",
      "pos": [
        11947,
        11958
      ]
    },
    {
      "content": "参考使用服务器脚本执行服务器端任务，并与其他 Azure 组件和外部资源集成的主题。",
      "pos": [
        11965,
        12007
      ]
    },
    {
      "content": "移动服务 .NET 操作方法概念性参考",
      "pos": [
        12013,
        12032
      ]
    },
    {
      "content": "了解有关如何将移动服务与 .NET 一起使用的详细信息",
      "pos": [
        12039,
        12066
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"使用移动服务将图像上载到 Blob 存储 (Android) | 移动服务\" \n    description=\"了解如何使用移动服务将图像上载到 Azure 存储空间以及从 Android 应用访问图像。\" \n    services=\"mobile-services\" \n    documentationCenter=\"android\" \n    authors=\"RickSaling\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.date=\"10/05/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n# 从 Android 设备将图像上载到 Azure 存储空间\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n[AZURE.INCLUDE [mobile-services-selector-upload-data-blob-storage](../includes/mobile-services-selector-upload-data-blob-storage.md)]\n\n本主题演示如何使 Android Azure 移动服务应用能够将图像上载到 Azure 存储空间。\n\n移动服务使用 SQL 数据库存储数据。但是，在 Azure 存储空间中存储二进制大型对象 (BLOB) 数据更有效。在本教程中，你将使移动服务快速入门应用能够使用 Android 相机拍照，并将图像上载到 Azure 存储空间。\n\n\n## 入门所需操作\n\n在开始本教程之前，必须先完成移动服务快速入门：[移动服务入门]。\n\n本教程还需要以下项：\n\n+ [Azure 存储帐户](/documentation/articles/storage-create-storage-account)\n+ 带相机的 Android 设备\n\n## 应用的工作方式\n\n上载照片图像是一个多步骤过程：\n\n- 首先你拍照，然后在 SQL 数据库中插入一个 TodoItem 行，其中包含 Azure 存储空间使用的新元数据字段。\n- 新的移动服务 SQL **插入**脚本要求 Azure 存储空间提供共享访问签名 (SAS)。\n- 该脚本将 SAS 和 blob 的 URI 返回给客户端。\n- 客户端使用 SAS 和 blob URI 上载照片。\n\n那么，SAS 是什么？\n\n在客户端应用内部存储将数据上载到 Azure 存储服务程序所需的凭据是不安全的。你应将这些凭据存储在移动服务中，并使用它们来生成用于授权上载新图像的共享访问签名 (SAS)。移动服务会向客户端应用安全返回 SAS（一个具有 5 分钟到期期限的凭据）。然后，应用程序将使用此临时凭据来上载图像。有关详细信息，请参阅[共享访问签名，第 1 部分：了解 SAS 模型](/documentation/articles/storage-dotnet-shared-access-signature-part-1)\n\n## 代码示例\n[此处](https://github.com/Azure/mobile-services-samples/tree/master/UploadImages)提供了此应用的已完成客户端源代码部分。若要运行此代码，你必须先完成本教程的移动服务后端部分。\n\n## 在 Azure 经典门户中更新已注册的插入脚本\n\n[AZURE.INCLUDE [mobile-services-configure-blob-storage](../includes/mobile-services-configure-blob-storage.md)]\n\n\n## 更新快速入门应用以捕获和上载图像。\n\n### 引用 Azure 存储空间 Android 客户端库\n\n1. 若要添加对库的引用，请在“应用”> **build.gradle** 文件中，向 `dependencies` 节添加以下行：\n\n        compile 'com.microsoft.azure.android:azure-storage-android:0.6.0@aar'\n\n\n2. 将 `minSdkVersion` 值更改为 15（相机 API 所需的值）。\n\n3. 按“将项目与 Gradle 文件同步”图标。\n\n### 更新相机和存储的清单文件\n\n1. 通过向 **AndroidManifest.xml** 添加以下行，指定你的应用需要让相机可用：\n\n        <uses-feature android:name=\"android.hardware.camera\"\n            android:required=\"true\" />\n\n2. 通过向 **AndroidManifest.xml** 添加以下行，指定你的应用需要写入到外部存储的权限：\n\n        <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n\n    请注意，Android 外部存储不一定是 SD 卡：有关详细信息，请参阅[保存文件](http://developer.android.com/training/basics/data-storage/files.html)。\n\n### 更新新用户界面的资源文件\n\n1. 通过向 *values* 目录中的 **strings.xml** 文件添加以下内容，为新按钮添加标题：\n\n        <string name=\"preview_button_text\">Take Photo</string>\n        <string name=\"upload_button_text\">Upload</string>\n\n2. 在 **res => layout** 文件夹中的 **activity\\_to\\_do.xml** 文件中，在“添加”按钮的现有代码前添加以下代码。\n\n         <Button\n             android:id=\"@+id/buttonPreview\"\n             android:layout_width=\"120dip\"\n             android:layout_height=\"wrap_content\"\n             android:onClick=\"takePicture\"\n             android:text=\"@string/preview_button_text\" />\n\n3. 将“添加”按钮元素替换为以下代码：\n\n         <Button\n             android:id=\"@+id/buttonUpload\"\n             android:layout_width=\"100dip\"\n             android:layout_height=\"wrap_content\"\n             android:onClick=\"uploadPhoto\"\n             android:text=\"@string/upload_button_text\" />\n\n\n### 添加照片拍摄的代码\n\n1. 在 **ToDoActivity.java** 中添加以下代码以创建一个具有唯一名称的**文件**对象。\n\n        // Create a File object for storing the photo\n        private File createImageFile() throws IOException {\n            // Create an image file name\n            String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());\n            String imageFileName = \"JPEG_\" + timeStamp + \"_\";\n            File storageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);\n            File image = File.createTempFile(\n                    imageFileName,  /* prefix */\n                    \".jpg\",         /* suffix */\n                    storageDir      /* directory */\n            );\n            return image;\n        }\n\n2. 添加以下代码以启动 Android 相机应用。然后可以拍照，如果有照片看起来不错，请按“保存”，这会将其存储在你刚创建的文件中。\n\n        // Run an Intent to start up the Android camera\n        static final int REQUEST_TAKE_PHOTO = 1;\n        public Uri mPhotoFileUri = null;\n        public File mPhotoFile = null;\n        \n        public void takePicture(View view) {\n            Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\n            // Ensure that there's a camera activity to handle the intent\n            if (takePictureIntent.resolveActivity(getPackageManager()) != null) {\n                // Create the File where the photo should go\n                try {\n                    mPhotoFile = createImageFile();\n                } catch (IOException ex) {\n                    // Error occurred while creating the File\n                    //\n                }\n                // Continue only if the File was successfully created\n                if (mPhotoFile != null) {\n                    mPhotoFileUri = Uri.fromFile(mPhotoFile);\n                    takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, mPhotoFileUri);\n                    startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);\n                }\n            }\n        }\n\n### 添加代码以将照片文件上载到 blob 存储中\n\n\n1. 首先，我们通过向 **ToDoItem.java** 添加以下代码，将一些新的元数据字段添加到 `ToDoItem` 对象中。\n\n        /**\n         *  imageUri - points to location in storage where photo will go\n         */\n        @com.google.gson.annotations.SerializedName(\"imageUri\")\n        private String mImageUri;\n    \n        /**\n         * Returns the item ImageUri\n         */\n        public String getImageUri() {\n            return mImageUri;\n        }\n    \n        /**\n         * Sets the item ImageUri\n         *\n         * @param ImageUri\n         *            Uri to set\n         */\n        public final void setImageUri(String ImageUri) {\n            mImageUri = ImageUri;\n        }\n    \n        /**\n         * ContainerName - like a directory, holds blobs\n         */\n        @com.google.gson.annotations.SerializedName(\"containerName\")\n        private String mContainerName;\n    \n        /**\n         * Returns the item ContainerName\n         */\n        public String getContainerName() {\n            return mContainerName;\n        }\n    \n        /**\n         * Sets the item ContainerName\n         *\n         * @param ContainerName\n         *            Uri to set\n         */\n        public final void setContainerName(String ContainerName) {\n            mContainerName = ContainerName;\n        }\n    \n        /**\n         *  ResourceName\n         */\n        @com.google.gson.annotations.SerializedName(\"resourceName\")\n        private String mResourceName;\n    \n        /**\n         * Returns the item ResourceName\n         */\n        public String getResourceName() {\n            return mResourceName;\n        }\n    \n        /**\n         * Sets the item ResourceName\n         *\n         * @param ResourceName\n         *            Uri to set\n         */\n        public final void setResourceName(String ResourceName) {\n            mResourceName = ResourceName;\n        }\n    \n        /**\n         *  SasQueryString - permission to write to storage\n         */\n        @com.google.gson.annotations.SerializedName(\"sasQueryString\")\n        private String mSasQueryString;\n    \n        /**\n         * Returns the item SasQueryString\n         */\n        public String getSasQueryString() {\n            return mSasQueryString;\n        }\n    \n        /**\n         * Sets the item SasQueryString\n         *\n         * @param SasQueryString\n         *            Uri to set\n         */\n        public final void setSasQueryString(String SasQueryString) {\n            mSasQueryString = SasQueryString;\n        }\n\n2. 使用以下代码替换 0 参数构造函数：\n\n        /**\n         * ToDoItem constructor\n         */\n        public ToDoItem() {\n            mContainerName = \"\";\n            mResourceName = \"\";\n            mImageUri = \"\";\n            mSasQueryString = \"\";\n        }\n\n3. 使用以下代码替换多参数构造函数：\n\n        /**\n         * Initializes a new ToDoItem\n         *\n         * @param text\n         *            The item text\n         * @param id\n         *            The item id\n         */\n        public ToDoItem(String text,\n                        String id,\n                        String containerName,\n                        String resourceName,\n                        String imageUri,\n                        String sasQueryString) {\n            this.setText(text);\n            this.setId(id);\n            this.setContainerName(containerName);\n            this.setResourceName(resourceName);\n            this.setImageUri(imageUri);\n            this.setSasQueryString(sasQueryString);\n        }\n\n\n4. 在 **ToDoActivity.java** 文件中，将 **ToDoActivity.java** 中的 **addItem** 方法替换为以下代码，以便上载图像。\n\n        /**\n         * Add a new item\n         *\n         * @param view\n         *            The view that originated the call\n         */\n        public void uploadPhoto(View view) {\n            if (mClient == null) {\n                return;\n            }\n    \n            // Create a new item\n            final ToDoItem item = new ToDoItem();\n    \n            item.setText(mTextNewToDo.getText().toString());\n            item.setComplete(false);\n            item.setContainerName(\"todoitemimages\");\n    \n            // Use a unigue GUID to avoid collisions.\n            UUID uuid = UUID.randomUUID();\n            String uuidInString = uuid.toString();\n            item.setResourceName(uuidInString);\n    \n            // Send the item to be inserted. When blob properties are set this\n            // generates an SAS in the response.\n            AsyncTask<Void, Void, Void> task = new AsyncTask<Void, Void, Void>(){\n                @Override\n                protected Void doInBackground(Void... params) {\n                    try {\n                            final ToDoItem entity = addItemInTable(item);\n        \n                            // If we have a returned SAS, then upload the blob.\n                            if (entity.getSasQueryString() != null) {\n        \n                           // Get the URI generated that contains the SAS\n                            // and extract the storage credentials.\n                            StorageCredentials cred = \n                                new StorageCredentialsSharedAccessSignature(entity.getSasQueryString());\n                            URI imageUri = new URI(entity.getImageUri());\n    \n                            // Upload the new image as a BLOB from a stream.\n                            CloudBlockBlob blobFromSASCredential =\n                                    new CloudBlockBlob(imageUri, cred);\n    \n                            blobFromSASCredential.uploadFromFile(mPhotoFileUri.getPath());\n                        }\n    \n                        runOnUiThread(new Runnable() {\n                            @Override\n                            public void run() {\n                                if(!entity.isComplete()){\n                                    mAdapter.add(entity);\n                                }\n                            }\n                        });\n                    } catch (final Exception e) {\n                        createAndShowDialogFromTask(e, \"Error\");\n                    }\n                    return null;\n                }\n            };\n    \n            runAsyncTask(task);\n    \n            mTextNewToDo.setText(\"\");\n        }\n    \n\n这段代码可向移动服务发送插入新 TodoItem 的请求。响应包含 SAS，然后可将其用于将图像从本地存储上载到 Azure 存储空间中的 Blob。\n\n\n## 测试上载图像 \n\n1. 在 Android Studio 中按“运行”。在对话框中，选择要使用的设备。\n\n2. 当应用 UI 出现时，在标记为“添加 ToDo 项”的文本框中输入文本。\n\n3. 按“拍照”。当相机应用启动时，拍摄一张照片。按复选标记以接受该照片。\n\n4. 按“上载”。注意 ToDoItem 如何像往常一样已添加到列表中。\n\n5. 在 Azure 经典门户中，转到你的存储帐户，按“容器”选项卡，然后在列表中按你的容器的名称。\n\n6. 此时将显示已上载的 blob 文件列表。选择其中一个，然后按“下载”。\n\n7. 现在，你上载的图像将显示在浏览器窗口中。\n\n\n## <a name=\"next-steps\"></a>后续步骤\n\n现在，你已能够通过将移动服务与 Blob 服务集成安全地上载图片，请查看一些其他的后端服务和集成主题：\n\n+ [使用 SendGrid 从移动服务发送电子邮件]\n \n    了解如何使用 SendGrid 电子邮件服务为你的移动服务添加电子邮件功能。本主题演示如何添加服务器端脚本，以使用 SendGrid 发送电子邮件。\n\n+ [移动服务服务器脚本参考]\n\n    参考使用服务器脚本执行服务器端任务，并与其他 Azure 组件和外部资源集成的主题。\n \n+ [移动服务 .NET 操作方法概念性参考]\n\n    了解有关如何将移动服务与 .NET 一起使用的详细信息\n  \n \n<!-- Anchors. -->\n[Install the Storage Client library]: #install-storage-client\n[Update the client app to capture images]: #add-select-images\n[Update the insert script to generate an SAS]: #update-scripts\n[Upload images to test the app]: #test\n[Next Steps]: #next-steps\n\n<!-- Images. -->\n\n[2]: ./media/mobile-services-windows-store-dotnet-upload-data-blob-storage/mobile-add-storage-nuget-package-dotnet.png\n\n\n<!-- URLs. -->\n[使用 SendGrid 从移动服务发送电子邮件]: /documentation/articles/store-sendgrid-mobile-services-send-email-scripts\n\n[Send push notifications to Windows Store apps using Service Bus from a .NET back-end]: http://go.microsoft.com/fwlink/?LinkId=277073&clcid=0x409\n[移动服务服务器脚本参考]: /documentation/articles/mobile-services-how-to-use-server-scripts\n[移动服务入门]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started\n[Azure classic portal]: https://manage.windowsazure.cn/\n[How To Create a Storage Account]: /documentation/articles/storage-create-storage-account\n[Azure Storage Client library for Store apps]: http://go.microsoft.com/fwlink/p/?LinkId=276866\n[移动服务 .NET 操作方法概念性参考]: /documentation/articles/mobile-services-windows-dotnet-how-to-use-client-library\n[App settings]: http://msdn.microsoft.com/zh-cn/library/windowsazure/b6bb7d2d-35ae-47eb-a03f-6ee393e170f7\n \n\n<!---HONumber=Mooncake_0118_2016-->"
}