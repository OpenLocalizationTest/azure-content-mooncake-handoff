{
  "nodes": [
    {
      "content": "开始使用 blob 存储和 Visual Studio 连接服务（云服务）| Azure",
      "pos": [
        28,
        72
      ]
    },
    {
      "content": "在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的云服务项目中使用 Azure Blob 存储",
      "pos": [
        91,
        165
      ]
    },
    {
      "content": "开始使用 Azure Blob 存储和 Visual Studio 连接服务（云服务项目）",
      "pos": [
        367,
        412
      ]
    },
    {
      "content": "概述",
      "pos": [
        417,
        419
      ]
    },
    {
      "pos": [
        421,
        659
      ],
      "content": "本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 Visual Studio 云服务项目中创建或引用 Azure 存储帐户之后，如何开始使用 blob 存储。我们将介绍如何访问和创建 blob 容器以及如何执行常见任务（如上载、列出和下载 blob）。示例是用 C# 编写的，并使用了 <bpt id=\"p1\">[</bpt>Azure .NET 存储客户端库<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)</ept>。"
    },
    {
      "content": "Azure Blob 存储是一项可存储大量非结构化数据的服务，用户可在世界任何地方通过 HTTP 或 HTTPS 访问这些数据。单个 Blob 可以是任意大小。Blob 可以是图像、音频和视频文件、原始数据以及文档文件等。",
      "pos": [
        661,
        772
      ]
    },
    {
      "content": "正如文件位于文件夹中一样，存储 Blob 位于容器中。创建存储空间后，可以在存储空间中创建一个或多个容器。例如，在名为“Scrapbook”的存储空间中，可以在名为“images”的存储空间中创建容器，用于存储图片，还可以在名为“audio”的存储空间中创建另一个容器，用于存储音频文件。创建这些容器后，您可以向它们上载单独的 Blob 文件。",
      "pos": [
        774,
        946
      ]
    },
    {
      "pos": [
        950,
        1054
      ],
      "content": "有关以编程方式操作 blob 的详细信息，请参阅<bpt id=\"p1\">[</bpt>如何通过 .NET 使用 Blob 存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>。"
    },
    {
      "pos": [
        1057,
        1121
      ],
      "content": "有关 Azure 存储空间的常规信息，请参阅<bpt id=\"p1\">[</bpt>存储空间文档<ept id=\"p1\">](/documentation/services/storage)</ept>。"
    },
    {
      "pos": [
        1124,
        1193
      ],
      "content": "有关 Azure 云服务的常规信息，请参阅<bpt id=\"p1\">[</bpt>云服务文档<ept id=\"p1\">](/documentation/services/cloud-services)</ept>。"
    },
    {
      "pos": [
        1196,
        1256
      ],
      "content": "有关对 ASP.NET 应用程序进行编程的详细信息，请参阅 <bpt id=\"p1\">[</bpt>ASP.NET<ept id=\"p1\">](http://www.asp.net)</ept>。"
    },
    {
      "content": "使用代码访问 blob 容器",
      "pos": [
        1261,
        1275
      ]
    },
    {
      "content": "若要以编程方式访问云服务项目中的 Blob，你需要添加以下项（如果尚未存在）。",
      "pos": [
        1277,
        1316
      ]
    },
    {
      "content": "在您希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。",
      "pos": [
        1321,
        1372
      ]
    },
    {
      "pos": [
        1625,
        1701
      ],
      "content": "获取表示存储帐户信息的 <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。"
    },
    {
      "pos": [
        1881,
        1921
      ],
      "content": "获取 <bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept> 对象，以引用存储帐户中的现有容器。"
    },
    {
      "pos": [
        2037,
        2080
      ],
      "content": "获取 <bpt id=\"p1\">**</bpt>CloudBlobContainer<ept id=\"p1\">**</ept> 对象，以引用特定 blob 容器。"
    },
    {
      "pos": [
        2236,
        2279
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在接下来的部分中，将在代码的前面使用先前过程中显示的全部代码。"
    },
    {
      "content": "使用代码创建容器",
      "pos": [
        2284,
        2292
      ]
    },
    {
      "pos": [
        2296,
        2457
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在 ASP.NET 中执行 Azure 存储调用的一些 API 是异步的。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>使用 Async 和 Await 进行异步编程<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。以下示例中的代码假定正在使用异步编程方法。"
    },
    {
      "pos": [
        2459,
        2521
      ],
      "content": "若要在存储帐户中创建容器，所需做的只是添加对 <bpt id=\"p1\">**</bpt>CreateIfNotExistsAsync<ept id=\"p1\">**</ept> 的调用，如以下代码所示："
    },
    {
      "content": "如果要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器。",
      "pos": [
        2773,
        2811
      ]
    },
    {
      "content": "Internet 中的所有人都可以查看公共容器中的 Blob，但是，仅在你具有相应的访问密钥时，才能修改或删除它们。",
      "pos": [
        2956,
        3014
      ]
    },
    {
      "content": "将 Blob 上载到容器中",
      "pos": [
        3019,
        3032
      ]
    },
    {
      "content": "Azure 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。",
      "pos": [
        3034,
        3077
      ]
    },
    {
      "pos": [
        3079,
        3250
      ],
      "content": "若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。获取 Blob 引用后，可以通过调用 <bpt id=\"p1\">**</bpt>UploadFromStream<ept id=\"p1\">**</ept> 方法，将任何数据流上载到该 Blob。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。"
    },
    {
      "content": "列出容器中的 Blob",
      "pos": [
        3744,
        3755
      ]
    },
    {
      "pos": [
        3757,
        4004
      ],
      "content": "若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept> 方法来检索其中的 Blob 和/或目录。若要访问返回的 <bpt id=\"p2\">**</bpt>IListBlobItem<ept id=\"p2\">**</ept> 的丰富属性和方法，您必须将它转换到 <bpt id=\"p3\">**</bpt>CloudBlockBlob<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>CloudPageBlob<ept id=\"p4\">**</ept> 或 <bpt id=\"p5\">**</bpt>CloudBlobDirectory<ept id=\"p5\">**</ept> 对象。如果类型未知，你可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出 <bpt id=\"p6\">**</bpt>photos<ept id=\"p6\">**</ept> 容器中每项的 URI："
    },
    {
      "pos": [
        5004,
        5099
      ],
      "content": "如前一代码示例所示，还可将 Blob 服务视为容器中的目录。这是为了让您能够以更类似于文件夹的结构来组织 Blob。例如，考虑名为 <bpt id=\"p1\">**</bpt>photos<ept id=\"p1\">**</ept> 的容器中包含的下面一组块 Blob："
    },
    {
      "pos": [
        5345,
        5465
      ],
      "content": "当你对 容器调用 <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept> 时（如前面的示例所示），返回的集合将包含 <bpt id=\"p2\">**</bpt>CloudBlobDirectory<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>CloudBlockBlob<ept id=\"p3\">**</ept> 对象，分别表示最高层中所含的目录和 Blob。下面是生成的输出："
    },
    {
      "pos": [
        5723,
        5854
      ],
      "content": "另外，也可以将 <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept> 方法的 <bpt id=\"p2\">**</bpt>UseFlatBlobListing<ept id=\"p2\">**</ept> 参数设置为 <bpt id=\"p3\">**</bpt>true<ept id=\"p3\">**</ept>。这导致每个 Blob 作为 <bpt id=\"p4\">**</bpt>CloudBlockBlob<ept id=\"p4\">**</ept> 返回，而无论目录如何。下面是对 <bpt id=\"p5\">**</bpt>ListBlobs<ept id=\"p5\">**</ept> 的调用："
    },
    {
      "content": "下面是结果：",
      "pos": [
        6023,
        6029
      ]
    },
    {
      "content": "有关详细信息，请参阅 [CloudBlobContainer.ListBlobs][]。",
      "pos": [
        6945,
        6989
      ]
    },
    {
      "content": "下载 Blob",
      "pos": [
        6994,
        7001
      ]
    },
    {
      "pos": [
        7003,
        7121
      ],
      "content": "若要下载 Blob，请首先检索 Blob 引用，然后调用 <bpt id=\"p1\">**</bpt>DownloadToStream<ept id=\"p1\">**</ept> 方法。以下示例使用 <bpt id=\"p2\">**</bpt>DownloadToStream<ept id=\"p2\">**</ept> 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。"
    },
    {
      "pos": [
        7575,
        7624
      ],
      "content": "也可以使用 <bpt id=\"p1\">**</bpt>DownloadToStream<ept id=\"p1\">**</ept> 方法以文本字符串形式下载 Blob 的内容。"
    },
    {
      "content": "删除 Blob",
      "pos": [
        8120,
        8127
      ]
    },
    {
      "pos": [
        8129,
        8172
      ],
      "content": "若要删除 Blob，首先要获取 Blob 引用，然后调用 <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "content": "以异步方式列出页中的 Blob",
      "pos": [
        8511,
        8526
      ]
    },
    {
      "content": "如果要列出大量 Blob，或需要控制一个列表操作中返回的结果数，则可以结果页的方式列出 Blob。此示例显示如何以页面形式异步返回结果，这样就不会在等待返回大型结果集时阻止操作的执行。",
      "pos": [
        8528,
        8620
      ]
    },
    {
      "pos": [
        8622,
        8728
      ],
      "content": "此示例演示平面 Blob 列表，但你也可以执行分层列表，只需将 <bpt id=\"p1\">**</bpt>ListBlobsSegmentedAsync<ept id=\"p1\">**</ept> 方法的 <bpt id=\"p2\">**</bpt>useFlatBlobListing<ept id=\"p2\">**</ept> 参数设置为 <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> 即可。"
    },
    {
      "pos": [
        8730,
        8848
      ],
      "content": "由于示例方法调用异步方法，因此必须以 <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> 关键字开头，且必须返回 <bpt id=\"p2\">**</bpt>Task<ept id=\"p2\">**</ept> 对象。为 <bpt id=\"p3\">**</bpt>ListBlobsSegmentedAsync<ept id=\"p3\">**</ept> 方法指定的 await 关键字将挂起示例方法的执行，直至列表任务完成。"
    },
    {
      "content": "后续步骤",
      "pos": [
        10249,
        10253
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"开始使用 blob 存储和 Visual Studio 连接服务（云服务）| Azure\"\n    description=\"在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的云服务项目中使用 Azure Blob 存储\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"TomArcher\"\n    manager=\"douge\"\n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 开始使用 Azure Blob 存储和 Visual Studio 连接服务（云服务项目）\n\n## 概述\n\n本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 Visual Studio 云服务项目中创建或引用 Azure 存储帐户之后，如何开始使用 blob 存储。我们将介绍如何访问和创建 blob 容器以及如何执行常见任务（如上载、列出和下载 blob）。示例是用 C# 编写的，并使用了 [Azure .NET 存储客户端库](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)。\n\nAzure Blob 存储是一项可存储大量非结构化数据的服务，用户可在世界任何地方通过 HTTP 或 HTTPS 访问这些数据。单个 Blob 可以是任意大小。Blob 可以是图像、音频和视频文件、原始数据以及文档文件等。\n\n正如文件位于文件夹中一样，存储 Blob 位于容器中。创建存储空间后，可以在存储空间中创建一个或多个容器。例如，在名为“Scrapbook”的存储空间中，可以在名为“images”的存储空间中创建容器，用于存储图片，还可以在名为“audio”的存储空间中创建另一个容器，用于存储音频文件。创建这些容器后，您可以向它们上载单独的 Blob 文件。\n\n- 有关以编程方式操作 blob 的详细信息，请参阅[如何通过 .NET 使用 Blob 存储](/documentation/articles/storage-dotnet-how-to-use-blobs)。\n- 有关 Azure 存储空间的常规信息，请参阅[存储空间文档](/documentation/services/storage)。\n- 有关 Azure 云服务的常规信息，请参阅[云服务文档](/documentation/services/cloud-services)。\n- 有关对 ASP.NET 应用程序进行编程的详细信息，请参阅 [ASP.NET](http://www.asp.net)。\n\n## 使用代码访问 blob 容器\n\n若要以编程方式访问云服务项目中的 Blob，你需要添加以下项（如果尚未存在）。\n\n1. 在您希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。\n\n        using Microsoft.Framework.Configuration;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Blob;\n        using System.Threading.Tasks;\n        using LogLevel = Microsoft.Framework.Logging.LogLevel;\n\n2. 获取表示存储帐户信息的 **CloudStorageAccount** 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。\n\n        CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"<storage account name>_AzureStorageConnectionString\"));\n\n3. 获取 **CloudBlobClient** 对象，以引用存储帐户中的现有容器。\n\n        // Create a blob client.\n        CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n4. 获取 **CloudBlobContainer** 对象，以引用特定 blob 容器。\n\n        // Get a reference to a container named “mycontainer.”\n        CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n> [AZURE.NOTE]在接下来的部分中，将在代码的前面使用先前过程中显示的全部代码。\n\n## 使用代码创建容器\n\n> [AZURE.NOTE]在 ASP.NET 中执行 Azure 存储调用的一些 API 是异步的。有关详细信息，请参阅[使用 Async 和 Await 进行异步编程](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)。以下示例中的代码假定正在使用异步编程方法。\n\n若要在存储帐户中创建容器，所需做的只是添加对 **CreateIfNotExistsAsync** 的调用，如以下代码所示：\n\n    // Get a reference to a CloudBlobContainer with the variable name 'container'\n    // as described in the \"Access blob containers in code\" section.\n\n    // If “mycontainer” doesn’t exist, create it.\n    await container.CreateIfNotExistsAsync();\n\n\n如果要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器。\n\n    await container.SetPermissionsAsync(new BlobContainerPermissions\n    {\n        PublicAccess = BlobContainerPublicAccessType.Blob\n    });\n\n\nInternet 中的所有人都可以查看公共容器中的 Blob，但是，仅在你具有相应的访问密钥时，才能修改或删除它们。\n\n## 将 Blob 上载到容器中\n\nAzure 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。\n\n若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。获取 Blob 引用后，可以通过调用 **UploadFromStream** 方法，将任何数据流上载到该 Blob。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。\n\n    // Get a reference to a CloudBlobContainer with the variable name 'container' as described in\n    // the \"Access blob containers in code\" section.\n\n    // Retrieve a reference to a blob named \"myblob\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob\");\n\n    // Create or overwrite the \"myblob\" blob with contents from a local file.\n    using (var fileStream = System.IO.File.OpenRead(@\"path\\myfile\"))\n    {\n        blockBlob.UploadFromStream(fileStream);\n    }\n\n## 列出容器中的 Blob\n\n若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 **ListBlobs** 方法来检索其中的 Blob 和/或目录。若要访问返回的 **IListBlobItem** 的丰富属性和方法，您必须将它转换到 **CloudBlockBlob**、**CloudPageBlob** 或 **CloudBlobDirectory** 对象。如果类型未知，你可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出 **photos** 容器中每项的 URI：\n\n    // Get a reference to a CloudBlobContainer with the variable name 'container' as described in\n    // the \"Access blob containers in code\" section.\n    // Loop over items within the container and output the length and URI.\n    foreach (IListBlobItem item in container.ListBlobs(null, false))\n    {\n        if (item.GetType() == typeof(CloudBlockBlob))\n        {\n            CloudBlockBlob blob = (CloudBlockBlob)item;\n\n            Console.WriteLine(\"Block blob of length {0}: {1}\", blob.Properties.Length, blob.Uri);\n\n        }\n        else if (item.GetType() == typeof(CloudPageBlob))\n        {\n            CloudPageBlob pageBlob = (CloudPageBlob)item;\n\n            Console.WriteLine(\"Page blob of length {0}: {1}\", pageBlob.Properties.Length, pageBlob.Uri);\n\n        }\n        else if (item.GetType() == typeof(CloudBlobDirectory))\n        {\n            CloudBlobDirectory directory = (CloudBlobDirectory)item;\n\n            Console.WriteLine(\"Directory: {0}\", directory.Uri);\n        }\n    }\n\n如前一代码示例所示，还可将 Blob 服务视为容器中的目录。这是为了让您能够以更类似于文件夹的结构来组织 Blob。例如，考虑名为 **photos** 的容器中包含的下面一组块 Blob：\n\n    photo1.jpg\n    2010/architecture/description.txt\n    2010/architecture/photo3.jpg\n    2010/architecture/photo4.jpg\n    2011/architecture/photo5.jpg\n    2011/architecture/photo6.jpg\n    2011/architecture/description.txt\n    2011/photo7.jpg\n\n当你对 容器调用 **ListBlobs** 时（如前面的示例所示），返回的集合将包含 **CloudBlobDirectory** 和 **CloudBlockBlob** 对象，分别表示最高层中所含的目录和 Blob。下面是生成的输出：\n\n    Directory: https://<accountname>.blob.core.chinacloudapi.cn/photos/2010/\n    Directory: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/\n    Block blob of length 505623: https://<accountname>.blob.core.chinacloudapi.cn/photos/photo1.jpg\n\n\n另外，也可以将 **ListBlobs** 方法的 **UseFlatBlobListing** 参数设置为 **true**。这导致每个 Blob 作为 **CloudBlockBlob** 返回，而无论目录如何。下面是对 **ListBlobs** 的调用：\n\n    // Loop over items within the container and output the length and URI.\n    foreach (IListBlobItem item in container.ListBlobs(null, true))\n    {\n       ...\n    }\n\n下面是结果：\n\n    Block blob of length 4: https://<accountname>.blob.core.chinacloudapi.cn/photos/2010/architecture/description.txt\n    Block blob of length 314618: https://<accountname>.blob.core.chinacloudapi.cn/photos/2010/architecture/photo3.jpg\n    Block blob of length 522713: https://<accountname>.blob.core.chinacloudapi.cn/photos/2010/architecture/photo4.jpg\n    Block blob of length 4: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/architecture/description.txt\n    Block blob of length 419048: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/architecture/photo5.jpg\n    Block blob of length 506388: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/architecture/photo6.jpg\n    Block blob of length 399751: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/photo7.jpg\n    Block blob of length 505623: https://<accountname>.blob.core.chinacloudapi.cn/photos/photo1.jpg\n\n有关详细信息，请参阅 [CloudBlobContainer.ListBlobs][]。\n\n## 下载 Blob\n\n若要下载 Blob，请首先检索 Blob 引用，然后调用 **DownloadToStream** 方法。以下示例使用 **DownloadToStream** 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。\n\n    // Get a reference to a CloudBlobContainer with the variable name 'container' as described in\n    // the \"Access blob containers in code\" section.\n\n    // Get a reference to a blob named \"photo1.jpg\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"photo1.jpg\");\n\n    // Save blob contents to a file.\n    using (var fileStream = System.IO.File.OpenWrite(@\"path\\myfile\"))\n    {\n        blockBlob.DownloadToStream(fileStream);\n    }\n\n也可以使用 **DownloadToStream** 方法以文本字符串形式下载 Blob 的内容。\n\n    // Get a reference to a CloudBlobContainer with the variable name 'container' as described in\n    // the \"Access blob containers in code\" section.\n\n    // Get a reference to a blob named \"myblob.txt\"\n    CloudBlockBlob blockBlob2 = container.GetBlockBlobReference(\"myblob.txt\");\n\n    string text;\n    using (var memoryStream = new MemoryStream())\n    {\n        blockBlob2.DownloadToStream(memoryStream);\n        text = System.Text.Encoding.UTF8.GetString(memoryStream.ToArray());\n    }\n\n## 删除 Blob\n\n若要删除 Blob，首先要获取 Blob 引用，然后调用 **Delete** 方法。\n\n    // Get a reference to a CloudBlobContainer with the variable name 'container' as described in\n    // the \"Access blob containers in code\" section.\n\n    // Get a reference to a blob named \"myblob.txt\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob.txt\");\n\n    // Delete the blob.\n    blockBlob.Delete();\n\n\n## 以异步方式列出页中的 Blob\n\n如果要列出大量 Blob，或需要控制一个列表操作中返回的结果数，则可以结果页的方式列出 Blob。此示例显示如何以页面形式异步返回结果，这样就不会在等待返回大型结果集时阻止操作的执行。\n\n此示例演示平面 Blob 列表，但你也可以执行分层列表，只需将 **ListBlobsSegmentedAsync** 方法的 **useFlatBlobListing** 参数设置为 **false** 即可。\n\n由于示例方法调用异步方法，因此必须以 **async** 关键字开头，且必须返回 **Task** 对象。为 **ListBlobsSegmentedAsync** 方法指定的 await 关键字将挂起示例方法的执行，直至列表任务完成。\n\n    async public static Task ListBlobsSegmentedInFlatListing(CloudBlobContainer container)\n    {\n        // List blobs to the console window, with paging.\n        Console.WriteLine(\"List blobs in pages:\");\n\n        int i = 0;\n        BlobContinuationToken continuationToken = null;\n        BlobResultSegment resultSegment = null;\n\n        // Call ListBlobsSegmentedAsync and enumerate the result segment returned, while the continuation token is non-null.\n        // When the continuation token is null, the last page has been returned and execution can exit the loop.\n        do\n        {\n            // This overload allows control of the page size. You can return all remaining results by passing null for the maxResults parameter,\n            // or by calling a different overload.\n            resultSegment = await container.ListBlobsSegmentedAsync(\"\", true, BlobListingDetails.All, 10, continuationToken, null, null);\n            if (resultSegment.Results.Count<IListBlobItem>() > 0) { Console.WriteLine(\"Page {0}:\", ++i); }\n            foreach (var blobItem in resultSegment.Results)\n            {\n                Console.WriteLine(\"\\t{0}\", blobItem.StorageUri.PrimaryUri);\n            }\n            Console.WriteLine();\n\n            //Get the continuation token.\n            continuationToken = resultSegment.ContinuationToken;\n        }\n        while (continuationToken != null);\n    }\n\n## 后续步骤\n\n[AZURE.INCLUDE [vs-storage-dotnet-blobs-next-steps](../includes/vs-storage-dotnet-blobs-next-steps.md)]\n\n<!---HONumber=Mooncake_0104_2016-->"
}