{
  "nodes": [
    {
      "content": "在 Windows上使用 PHP 连接到 SQL 数据库",
      "pos": [
        27,
        55
      ]
    },
    {
      "content": "演示一个示例 PHP 程序，该程序可以从 Windows 客户端连接到 Azure SQL 数据库，并与客户端所需的软件组件建立链接。",
      "pos": [
        74,
        141
      ]
    },
    {
      "content": "在 Windows上使用 PHP 连接到 SQL 数据库",
      "pos": [
        360,
        388
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        393,
        409
      ]
    },
    {
      "content": "C",
      "pos": [
        413,
        414
      ]
    },
    {
      "content": "PHP",
      "pos": [
        480,
        483
      ]
    },
    {
      "content": "Python",
      "pos": [
        553,
        559
      ]
    },
    {
      "content": "Ruby",
      "pos": [
        632,
        636
      ]
    },
    {
      "content": "Java",
      "pos": [
        707,
        711
      ]
    },
    {
      "content": "Node.js",
      "pos": [
        782,
        789
      ]
    },
    {
      "content": "本主题演示了如何从 Windows 运行的、以 PHP 编写的客户端应用程序连接到 Azure SQL 数据库。",
      "pos": [
        861,
        917
      ]
    },
    {
      "content": "SQL 数据库",
      "pos": [
        1071,
        1078
      ]
    },
    {
      "pos": [
        1080,
        1220
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>入门页<ept id=\"p1\">](/documentation/articles/sql-database-get-started)</ept>，以了解如何创建示例数据库。必须根据指南创建 <bpt id=\"p2\">**</bpt>AdventureWorks 数据库模板<ept id=\"p2\">**</ept>。下面所示的示例只适用于 <bpt id=\"p3\">**</bpt>AdventureWorks 架构<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "步骤 1：获取连接详细信息",
      "pos": [
        1226,
        1239
      ]
    },
    {
      "content": "步骤 2：连接",
      "pos": [
        1404,
        1411
      ]
    },
    {
      "pos": [
        1414,
        1457
      ],
      "content": "此 <bpt id=\"p1\">**</bpt>OpenConnection<ept id=\"p1\">**</ept> 函数将在其后面的所有函数的靠近顶部位置调用。"
    },
    {
      "content": "步骤 3：执行查询",
      "pos": [
        1964,
        1973
      ]
    },
    {
      "pos": [
        1975,
        2188
      ],
      "content": "<bpt id=\"p1\">[</bpt>sqlsrv\\_query()<ept id=\"p1\">](http://php.net/manual/zh/function.sqlsrv-query.php)</ept> 函数可用于针对 SQL 数据库从查询中检索结果集。此函数实际上可接受任何查询和连接对象，并返回可使用 <bpt id=\"p2\">[</bpt>sqlsrv\\_fetch\\_array()<ept id=\"p2\">](http://php.net/manual/zh/function.sqlsrv-fetch-array.php)</ept> 循环访问的结果集。"
    },
    {
      "content": "步骤 4：插入行",
      "pos": [
        2911,
        2919
      ]
    },
    {
      "pos": [
        2921,
        3177
      ],
      "content": "在本示例中，你将了解如何安全地执行 <bpt id=\"p1\">[</bpt>INSERT<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/ms174335.aspx)</ept> 语句，传递参数以保护应用程序免遭 <bpt id=\"p2\">[</bpt>SQL 注入<ept id=\"p2\">](https://technet.microsoft.com/zh-cn/library/ms161953(v=sql.105).aspx)</ept> 漏洞的危害，然后检索自动生成的<bpt id=\"p3\">[</bpt>主键<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/ms179610.aspx)</ept>值。"
    },
    {
      "content": "步骤 5：回退事务",
      "pos": [
        4011,
        4020
      ]
    },
    {
      "content": "此代码示例演示了你可以在其中执行以下操作的事务的用法：",
      "pos": [
        4023,
        4050
      ]
    },
    {
      "content": "-开始一个事务",
      "pos": [
        4052,
        4059
      ]
    },
    {
      "content": "-插入一行数据，更新另一行数据",
      "pos": [
        4061,
        4076
      ]
    },
    {
      "content": "-如果插入和更新成功，则提交你的事务；如果其中任一操作失败，则回滚事务",
      "pos": [
        4078,
        4113
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        5392,
        5396
      ]
    },
    {
      "pos": [
        5399,
        5505
      ],
      "content": "有关 PHP 安装和用法的详细信息，请参阅<bpt id=\"p1\">[</bpt>使用 PHP 访问 SQL Server 数据库<ept id=\"p1\">](http://technet.microsoft.com/zh-cn/library/cc793139.aspx)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"在 Windows上使用 PHP 连接到 SQL 数据库\"\n    description=\"演示一个示例 PHP 程序，该程序可以从 Windows 客户端连接到 Azure SQL 数据库，并与客户端所需的软件组件建立链接。\"\n    services=\"sql-database\"\n    documentationCenter=\"\"\n    authors=\"meet-bhagdev\"\n    manager=\"jeffreyg\"\n    editor=\"\"/>\n\n\n<tags\n    ms.service=\"sql-database\"\n    ms.date=\"12/17/2015\"\n    wacn.date=\"01/15/2016\"/>\n\n\n# 在 Windows上使用 PHP 连接到 SQL 数据库\n\n\n> [AZURE.SELECTOR]\n- [C#](/documentation/articles/sql-database-develop-dotnet-simple)\n- [PHP](/documentation/articles/sql-database-develop-php-simple-windows)\n- [Python](/documentation/articles/sql-database-develop-python-simple-windows)\n- [Ruby](/documentation/articles/sql-database-develop-ruby-simple-windows)\n- [Java](/documentation/articles/sql-database-develop-java-simple-windows)\n- [Node.js](/documentation/articles/sql-database-develop-nodejs-simple-windows)\n\n\n本主题演示了如何从 Windows 运行的、以 PHP 编写的客户端应用程序连接到 Azure SQL 数据库。\n\n\n[AZURE.INCLUDE [sql-database-develop-includes-prerequisites-php-windows](../includes/sql-database-develop-includes-prerequisites-php-windows.md)]\n\n### SQL 数据库\n\n请参阅[入门页](/documentation/articles/sql-database-get-started)，以了解如何创建示例数据库。必须根据指南创建 **AdventureWorks 数据库模板**。下面所示的示例只适用于 **AdventureWorks 架构**。\n\n\n## 步骤 1：获取连接详细信息\n\n[AZURE.INCLUDE [sql-database-include-connection-string-details-20-portalshots](../includes/sql-database-include-connection-string-details-20-portalshots.md)]\n\n\n## 步骤 2：连接\n\n\n此 **OpenConnection** 函数将在其后面的所有函数的靠近顶部位置调用。\n\n\n    function OpenConnection()\n    {\n        try\n        {\n            $serverName = \"tcp:myserver.database.chinacloudapi.cn,1433\";\n            $connectionOptions = array(\"Database\"=>\"AdventureWorks\",\n                \"Uid\"=>\"MyUser\", \"PWD\"=>\"MyPassword\");\n            $conn = sqlsrv_connect($serverName, $connectionOptions);\n            if($conn == false)\n                die(FormatErrors(sqlsrv_errors()));\n        }\n        catch(Exception $e)\n        {\n            echo(\"Error!\");\n        }\n    }\n\n\n## 步骤 3：执行查询\n\n[sqlsrv\\_query()](http://php.net/manual/zh/function.sqlsrv-query.php) 函数可用于针对 SQL 数据库从查询中检索结果集。此函数实际上可接受任何查询和连接对象，并返回可使用 [sqlsrv\\_fetch\\_array()](http://php.net/manual/zh/function.sqlsrv-fetch-array.php) 循环访问的结果集。\n\n    function ReadData()\n    {\n        try\n        {\n            $conn = OpenConnection();\n            $tsql = \"SELECT [CompanyName] FROM SalesLT.Customer\";\n            $getProducts = sqlsrv_query($conn, $tsql);\n            if ($getProducts == FALSE)\n                die(FormatErrors(sqlsrv_errors()));\n            $productCount = 0;\n            while($row = sqlsrv_fetch_array($getProducts, SQLSRV_FETCH_ASSOC))\n            {\n                echo($row['CompanyName']);\n                echo(\"<br/>\");\n                $productCount++;\n            }\n            sqlsrv_free_stmt($getProducts);\n            sqlsrv_close($conn);\n        }\n        catch(Exception $e)\n        {\n            echo(\"Error!\");\n        }\n    }\n\n\n## 步骤 4：插入行\n\n在本示例中，你将了解如何安全地执行 [INSERT](https://msdn.microsoft.com/zh-cn/library/ms174335.aspx) 语句，传递参数以保护应用程序免遭 [SQL 注入](https://technet.microsoft.com/zh-cn/library/ms161953(v=sql.105).aspx) 漏洞的危害，然后检索自动生成的[主键](https://msdn.microsoft.com/zh-cn/library/ms179610.aspx)值。\n\n\n    function InsertData()\n    {\n        try\n        {\n            $conn = OpenConnection();\n\n            $tsql = \"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES ('SQL Server 1', 'SQL Server 2', 0, 0, getdate())\";\n            //Insert query\n            $insertReview = sqlsrv_query($conn, $tsql);\n            if($insertReview == FALSE)\n                die(FormatErrors( sqlsrv_errors()));\n            echo \"Product Key inserted is :\";\n            while($row = sqlsrv_fetch_array($insertReview, SQLSRV_FETCH_ASSOC))\n            {   \n                echo($row['ProductID']);\n            }\n            sqlsrv_free_stmt($insertReview);\n            sqlsrv_close($conn);\n        }\n        catch(Exception $e)\n        {\n            echo(\"Error!\");\n        }\n    }\n\n## 步骤 5：回退事务\n\n\n此代码示例演示了你可以在其中执行以下操作的事务的用法：\n\n-开始一个事务\n\n-插入一行数据，更新另一行数据\n\n-如果插入和更新成功，则提交你的事务；如果其中任一操作失败，则回滚事务\n\n\n    function Transactions()\n    {\n        try\n        {\n            $conn = OpenConnection();\n\n            if (sqlsrv_begin_transaction($conn) == FALSE)\n                die(FormatErrors(sqlsrv_errors()));\n\n            $tsql1 = \"INSERT INTO SalesLT.SalesOrderDetail (SalesOrderID,OrderQty,ProductID,UnitPrice)\n            VALUES (71774, 22, 709, 33)\";\n            $stmt1 = sqlsrv_query($conn, $tsql1);\n\n            /* Set up and execute the second query. */\n            $tsql2 = \"UPDATE SalesLT.SalesOrderDetail SET OrderQty = (OrderQty + 1) WHERE ProductID = 709\";\n            $stmt2 = sqlsrv_query( $conn, $tsql2);\n\n            /* If both queries were successful, commit the transaction. */\n            /* Otherwise, rollback the transaction. */\n            if($stmt1 && $stmt2)\n            {\n                   sqlsrv_commit($conn);\n                   echo(\"Transaction was commited\");\n            }\n            else\n            {\n                sqlsrv_rollback($conn);\n                echo \"Transaction was rolled back.\\n\";\n            }\n            /* Free statement and connection resources. */\n            sqlsrv_free_stmt( $stmt1);\n            sqlsrv_free_stmt( $stmt2);\n        }\n        catch(Exception $e)\n        {\n            echo(\"Error!\");\n        }\n    }\n\n\n## 后续步骤\n\n\n有关 PHP 安装和用法的详细信息，请参阅[使用 PHP 访问 SQL Server 数据库](http://technet.microsoft.com/zh-cn/library/cc793139.aspx)。\n\n<!---HONumber=Mooncake_0104_2016-->\n"
}