{
  "nodes": [
    {
      "content": "SQL 数据仓库中的视图 | Azure",
      "pos": [
        26,
        46
      ]
    },
    {
      "content": "有关在开发解决方案时使用 Azure SQL 数据仓库中的 Transact-SQL 视图的技巧。",
      "pos": [
        64,
        113
      ]
    },
    {
      "content": "SQL 数据仓库中的视图",
      "pos": [
        339,
        351
      ]
    },
    {
      "content": "SQL 数据仓库中的视图特别有用。可以通过多种不同的方式使用这些视图以提升解决方案的质量。",
      "pos": [
        353,
        398
      ]
    },
    {
      "content": "本文重点介绍几个示例，说明如何通过实现视图来丰富你的解决方案。此外，还需要注意一些限制。",
      "pos": [
        400,
        444
      ]
    },
    {
      "content": "体系结构摘要",
      "pos": [
        449,
        455
      ]
    },
    {
      "content": "一种很常见的应用模式是在加载数据时，使用 CREATE TABLE AS SELECT (CTAS) 并后接对象重命名模式来重建表。",
      "pos": [
        456,
        522
      ]
    },
    {
      "content": "以下示例将新的日期记录添加到日期维度。请注意，这里先创建了一个新对象 DimDate\\_New，然后将它重命名以替换对象的原始版本。",
      "pos": [
        524,
        590
      ]
    },
    {
      "content": "但是，这可能会导致表对象在 SSDT SQL Server 对象资源管理器上的用户视图中出现和消失。视图可为仓库数据使用者提供一致的呈现层，同时将基础对象重命名。通过视图提供对数据的访问权限，意味着用户不需要基础表的可见性。这提供了一致的用户体验，同时确保数据仓库设计人员可以改进数据模型，并在数据加载过程中使用 CTAS 充分发挥性能。",
      "pos": [
        865,
        1034
      ]
    },
    {
      "content": "性能优化",
      "pos": [
        1039,
        1043
      ]
    },
    {
      "content": "视图是在表之间强制运行性能优化联接的明智方式。例如，视图可以合并冗余分布键作为联接条件的一部分，以便最大程度地减少数据移动。另一个原因可能是强制执行特定查询或联接提示。这可以确保联接始终以最佳方式执行，并且无需提醒用户正确构造联接。",
      "pos": [
        1044,
        1160
      ]
    },
    {
      "content": "限制",
      "pos": [
        1165,
        1167
      ]
    },
    {
      "content": "SQL 数据仓库中的视图只是元数据。",
      "pos": [
        1168,
        1186
      ]
    },
    {
      "content": "因此无法使用以下选项：",
      "pos": [
        1188,
        1199
      ]
    },
    {
      "content": "没有架构绑定选项",
      "pos": [
        1204,
        1212
      ]
    },
    {
      "content": "无法通过视图更新基表",
      "pos": [
        1217,
        1227
      ]
    },
    {
      "content": "无法基于临时表创建视图",
      "pos": [
        1232,
        1243
      ]
    },
    {
      "content": "不支持 EXPAND / NOEXPAND 提示",
      "pos": [
        1248,
        1272
      ]
    },
    {
      "content": "SQL 数据仓库中没有已编制索引的视图",
      "pos": [
        1277,
        1296
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        1302,
        1306
      ]
    },
    {
      "pos": [
        1307,
        1337
      ],
      "content": "有关更多开发技巧，请参阅 <bpt id=\"p1\">[</bpt>SQL 数据仓库开发概述<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"SQL 数据仓库中的视图 | Azure\"\n   description=\"有关在开发解决方案时使用 Azure SQL 数据仓库中的 Transact-SQL 视图的技巧。\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.date=\"09/28/2015\"\n   wacn.date=\"01/20/2016\"/>\n\n \n# SQL 数据仓库中的视图\n\nSQL 数据仓库中的视图特别有用。可以通过多种不同的方式使用这些视图以提升解决方案的质量。\n\n本文重点介绍几个示例，说明如何通过实现视图来丰富你的解决方案。此外，还需要注意一些限制。\n\n## 体系结构摘要\n一种很常见的应用模式是在加载数据时，使用 CREATE TABLE AS SELECT (CTAS) 并后接对象重命名模式来重建表。\n\n以下示例将新的日期记录添加到日期维度。请注意，这里先创建了一个新对象 DimDate\\_New，然后将它重命名以替换对象的原始版本。\n\n```\nCREATE TABLE dbo.DimDate_New\nWITH (DISTRIBUTION = ROUND_ROBIN\n, CLUSTERED INDEX (DateKey ASC)\n)\nAS \nSELECT *\nFROM   dbo.DimDate  AS prod\nUNION ALL\nSELECT *\nFROM   dbo.DimDate_stg AS stg\n;\nRENAME OBJECT DimDate TO DimDate_Old;\nRENAME OBJECT DimDate_New TO DimDate;\n```\n\n但是，这可能会导致表对象在 SSDT SQL Server 对象资源管理器上的用户视图中出现和消失。视图可为仓库数据使用者提供一致的呈现层，同时将基础对象重命名。通过视图提供对数据的访问权限，意味着用户不需要基础表的可见性。这提供了一致的用户体验，同时确保数据仓库设计人员可以改进数据模型，并在数据加载过程中使用 CTAS 充分发挥性能。\n\n## 性能优化\n视图是在表之间强制运行性能优化联接的明智方式。例如，视图可以合并冗余分布键作为联接条件的一部分，以便最大程度地减少数据移动。另一个原因可能是强制执行特定查询或联接提示。这可以确保联接始终以最佳方式执行，并且无需提醒用户正确构造联接。\n\n## 限制\nSQL 数据仓库中的视图只是元数据。\n\n因此无法使用以下选项：\n-   没有架构绑定选项\n-   无法通过视图更新基表\n-   无法基于临时表创建视图\n-   不支持 EXPAND / NOEXPAND 提示\n-   SQL 数据仓库中没有已编制索引的视图\n\n\n## 后续步骤\n有关更多开发技巧，请参阅 [SQL 数据仓库开发概述][]。\n\n<!--Image references-->\n\n<!--Article references-->\n[SQL 数据仓库开发概述]: /documentation/articles/sql-data-warehouse-overview-develop\n\n<!--MSDN references-->\n\n<!--Other Web references-->\n\n<!---HONumber=Mooncake_1207_2015-->\n"
}