{
  "nodes": [
    {
      "content": "通过百度开始使用 Azure 通知中心 | Azure",
      "pos": [
        27,
        54
      ]
    },
    {
      "content": "在本教程中，你将了解如何通过百度使用 Azure 通知中心将通知推送到 Android 设备。",
      "pos": [
        73,
        120
      ]
    },
    {
      "content": "通过百度开始使用通知中心",
      "pos": [
        353,
        365
      ]
    },
    {
      "content": "概述",
      "pos": [
        482,
        484
      ]
    },
    {
      "content": "百度云推送是一种中国云服务，可用于将推送通知发送到移动设备。在中国，将推送通知传递到 Android 的过程很复杂，因为存在不同的应用程序商店和推送服务，还有通常未连接到 GCM (Google Cloud Messaging) 的 Android 设备，所以，此服务在该国特别有用。",
      "pos": [
        486,
        628
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        632,
        636
      ]
    },
    {
      "content": "本教程需要的内容如下：",
      "pos": [
        638,
        649
      ]
    },
    {
      "pos": [
        653,
        763
      ],
      "content": "Android SDK（我们假设你要使用 Eclipse），可从 <ph id=\"ph1\">&lt;a href=\"http://go.microsoft.com/fwlink/?LinkId=389797\"&gt;</ph>Android 站点<ph id=\"ph2\">&lt;/a&gt;</ph>下载该 SDK"
    },
    {
      "content": "移动服务 Android SDK",
      "pos": [
        767,
        783
      ]
    },
    {
      "content": "百度推送 Android SDK",
      "pos": [
        788,
        804
      ]
    },
    {
      "pos": [
        808,
        921
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要完成本教程，你必须有一个有效的 Azure 帐户。如果你没有帐户，只需花费几分钟就能创建一个免费试用帐户。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 免费试用<ept id=\"p1\">](/pricing/free-trial/)</ept>。"
    },
    {
      "content": "创建百度帐户",
      "pos": [
        926,
        932
      ]
    },
    {
      "pos": [
        934,
        993
      ],
      "content": "若要使用百度，你必须有一个百度帐户。如果你已有帐户，请登录<bpt id=\"p1\">[</bpt><ept id=\"p1\">百度门户]</ept>，并跳到下一步。否则请参阅以下说明创建百度帐户。"
    },
    {
      "pos": [
        998,
        1034
      ],
      "content": "转到<bpt id=\"p1\">[</bpt><ept id=\"p1\">百度门户]</ept>并单击“登录”链接。单击“立即注册”以启动帐户注册过程。"
    },
    {
      "content": "输入所需的详细信息（电话/电子邮件地址、密码和验证码），然后单击“注册”。",
      "pos": [
        1051,
        1088
      ]
    },
    {
      "content": "系统会将一封电子邮件发送到你输入的电子邮件地址，该邮件包含一个用于激活你的百度帐户的链接。",
      "pos": [
        1105,
        1150
      ]
    },
    {
      "content": "登录到你的电子邮件帐户，打开百度激活邮件，然后单击激活链接以激活你的百度帐号。",
      "pos": [
        1167,
        1206
      ]
    },
    {
      "pos": [
        1220,
        1243
      ],
      "content": "当你有已激活的百度帐户后，请登录<bpt id=\"p1\">[</bpt><ept id=\"p1\">百度门户]</ept>。"
    },
    {
      "pos": [
        1247,
        1290
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"registerBaiduDeveloper\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>注册为百度开发者"
    },
    {
      "pos": [
        1295,
        1316
      ],
      "content": "登录到<bpt id=\"p1\">[</bpt><ept id=\"p1\">百度门户]</ept>后，请单击“更多&gt;&gt;”。"
    },
    {
      "content": "向下滚动“站长与开发者服务”部分并单击“百度开放云平台”。",
      "pos": [
        1333,
        1362
      ]
    },
    {
      "content": "在下一页上，单击右上角的“开发者服务”。",
      "pos": [
        1379,
        1399
      ]
    },
    {
      "content": "在下一页上，单击右上角菜单中的“注册开发者”。",
      "pos": [
        1416,
        1439
      ]
    },
    {
      "pos": [
        1456,
        1559
      ],
      "content": "输入你的名称、说明以及用于接收验证短信的手机号码，然后单击“发送验证码”。请注意，对于国际电话号码，你需要将国家/地区代码括在括号内。例如，对于美国号码，电话号码类似于 <bpt id=\"p1\">**</bpt>(1)1234567890<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "然后，你应收到一条包含验证码的短信，如以下示例所示：",
      "pos": [
        1576,
        1602
      ]
    },
    {
      "content": "在“验证码”中输入消息中的验证码。",
      "pos": [
        1620,
        1637
      ]
    },
    {
      "content": "最后，接受百度协议并单击“提交”以完成开发者注册。成功完成注册时，你会看到以下页：",
      "pos": [
        1642,
        1683
      ]
    },
    {
      "pos": [
        1700,
        1744
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"createBaiduPushProject\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>创建百度云推送项目"
    },
    {
      "content": "在创建百度云推送项目时，你将收到应用程序 ID、API 密钥和密钥。",
      "pos": [
        1746,
        1780
      ]
    },
    {
      "pos": [
        1785,
        1806
      ],
      "content": "登录到<bpt id=\"p1\">[</bpt><ept id=\"p1\">百度门户]</ept>后，请单击“更多&gt;&gt;”。"
    },
    {
      "content": "向下滚动“站长与开发者服务”部分并单击“百度开放云平台”。",
      "pos": [
        1823,
        1852
      ]
    },
    {
      "content": "在下一页上，单击右上角的“开发者服务”。",
      "pos": [
        1869,
        1889
      ]
    },
    {
      "content": "在下一页上，单击“云服务”部分中的“云推送”。",
      "pos": [
        1906,
        1929
      ]
    },
    {
      "content": "注册开发者后，你将在顶部菜单上看到“管理控制台”。单击“开发者服务管理”。",
      "pos": [
        1947,
        1984
      ]
    },
    {
      "content": "在下一页上，单击“创建工程”。",
      "pos": [
        2002,
        2017
      ]
    },
    {
      "content": "输入应用程序名称，并单击“创建”。",
      "pos": [
        2035,
        2052
      ]
    },
    {
      "content": "成功创建百度云推送项目后，将显示一个页面，其中包含“AppID”、“API 密钥”和“密钥”。请记下 API 密钥和密钥，因为稍后将要用到。",
      "pos": [
        2070,
        2140
      ]
    },
    {
      "content": "通过单击左侧窗格中的“云推送”来配置推送通知项目。",
      "pos": [
        2158,
        2183
      ]
    },
    {
      "content": "在下一页上，单击“推送设置”按钮。",
      "pos": [
        2202,
        2219
      ]
    },
    {
      "content": "在配置页的“应用包名”字段中添加将在 Android 项目中使用的包名，然后单击“保存设置”",
      "pos": [
        2238,
        2284
      ]
    },
    {
      "content": "你将会看到“保存成功!”消息。",
      "pos": [
        2299,
        2314
      ]
    },
    {
      "pos": [
        2318,
        2350
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"configure-hub\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>配置通知中心"
    },
    {
      "pos": [
        2355,
        2387
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 管理门户]</ept>，然后单击屏幕底部的“+新建”。"
    },
    {
      "content": "依次单击“应用程序服务”、“服务总线”、“通知中心”和“快速创建”。",
      "pos": [
        2392,
        2426
      ]
    },
    {
      "pos": [
        2432,
        2492
      ],
      "content": "为你的<bpt id=\"p1\">**</bpt>通知中心<ept id=\"p1\">**</ept>提供名称，选择要在其中创建此通知中心的<bpt id=\"p2\">**</bpt>区域<ept id=\"p2\">**</ept>和<bpt id=\"p3\">**</bpt>命名空间<ept id=\"p3\">**</ept>，然后单击“创建新的通知中心”"
    },
    {
      "content": "单击已在其中创建通知中心的命名空间，然后单击顶部的“通知中心”。",
      "pos": [
        2510,
        2542
      ]
    },
    {
      "content": "选择所创建的通知中心，然后单击顶部菜单中的“配置”。",
      "pos": [
        2560,
        2586
      ]
    },
    {
      "content": "向下滚动到“百度通知设置”部分，然后输入先前从百度控制台获得的百度云推送项目的 API 密钥和密钥。单击“保存”。",
      "pos": [
        2604,
        2661
      ]
    },
    {
      "content": "单击通知中心顶部的“仪表板”选项卡，然后单击“查看连接字符串”。",
      "pos": [
        2679,
        2711
      ]
    },
    {
      "pos": [
        2729,
        2822
      ],
      "content": "记下“访问连接信息”窗口中的 <bpt id=\"p1\">**</bpt>DefaultListenSharedAccessSignature<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>DefaultFullSharedAccessSignature<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        2839,
        2878
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"connecting-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>将你的应用连接到通知中心"
    },
    {
      "content": "在 Eclipse ADT 中，创建新的 Android 项目（“文件”&gt;“新建”&gt;“Android 应用程序项目”）。",
      "pos": [
        2883,
        2943
      ]
    },
    {
      "pos": [
        2961,
        3021
      ],
      "content": "输入<bpt id=\"p1\">**</bpt>应用程序名称<ept id=\"p1\">**</ept>，并确保将<bpt id=\"p2\">**</bpt>要求的最低 SDK 版本<ept id=\"p2\">**</ept>设为 <bpt id=\"p3\">**</bpt>API 16: Android 4.1<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "单击“下一步”，然后继续执行向导，直到显示“创建活动”窗口。确保选中了“空白活动”，最后选择“完成”以创建新的 Android 应用程序。",
      "pos": [
        3039,
        3108
      ]
    },
    {
      "content": "确保“项目生成目标”已正确设置。",
      "pos": [
        3126,
        3142
      ]
    },
    {
      "pos": [
        3160,
        3374
      ],
      "content": "从 <bpt id=\"p1\">[</bpt>Notification-Hubs-Android-SDK on Bintray<ept id=\"p1\">](https://bintray.com/microsoftazuremobile/SDK/Notification-Hubs-Android-SDK/0.4)</ept> 的“文件”选项卡下载 notification-hubs-0.4.jar 文件。将该文件添加到 Eclipse 项目的 <bpt id=\"p2\">**</bpt>libs<ept id=\"p2\">**</ept> 文件夹，然后刷新 <bpt id=\"p3\">*</bpt>libs<ept id=\"p3\">*</ept> 文件夹。"
    },
    {
      "pos": [
        3379,
        3512
      ],
      "content": "下载并解压缩<bpt id=\"p1\">[</bpt><ept id=\"p1\">百度推送 Android SDK]</ept>，打开 <bpt id=\"p2\">**</bpt>libs<ept id=\"p2\">**</ept> 文件夹，然后将 <bpt id=\"p3\">**</bpt>pushservice-x.y.z<ept id=\"p3\">**</ept> jar 文件以及 <bpt id=\"p4\">**</bpt>armeabi<ept id=\"p4\">**</ept> 和 <bpt id=\"p5\">**</bpt>mips<ept id=\"p5\">**</ept> 文件夹复制到 Android 应用程序的 <bpt id=\"p6\">**</bpt>libs<ept id=\"p6\">**</ept> 文件夹。"
    },
    {
      "pos": [
        3517,
        3575
      ],
      "content": "打开 Android 项目的 <bpt id=\"p1\">**</bpt>AndroidManifest.xml<ept id=\"p1\">**</ept> 文件，并添加百度 SDK 所需的权限。"
    },
    {
      "pos": [
        4553,
        4701
      ],
      "content": "向 <bpt id=\"p1\">**</bpt>AndroidManifest.xml<ept id=\"p1\">**</ept> 中的 <bpt id=\"p2\">**</bpt>application<ept id=\"p2\">**</ept> 元素添加 <bpt id=\"p3\">**</bpt>android:name<ept id=\"p3\">**</ept> 属性，并替换 <bpt id=\"p4\">*</bpt>yourprojectname<ept id=\"p4\">*</ept>（例如 <bpt id=\"p5\">**</bpt>com.example.BaiduTest<ept id=\"p5\">**</ept>）。确保此项目名称与你在百度控制台中配置的项目名称匹配。"
    },
    {
      "pos": [
        4775,
        4876
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>.MainActivity<ept id=\"p1\">**</ept> 活动元素后的 application 元素内添加以下配置，并替换 <bpt id=\"p2\">*</bpt>yourprojectname<ept id=\"p2\">*</ept>（例如 <bpt id=\"p3\">**</bpt>com.example.BaiduTest<ept id=\"p3\">**</ept>）："
    },
    {
      "pos": [
        6697,
        6744
      ],
      "content": "将一个名为 <bpt id=\"p1\">**</bpt>ConfigurationSettings.java<ept id=\"p1\">**</ept> 的新类添加到项目中。"
    },
    {
      "content": "将以下代码添加到该类中：",
      "pos": [
        6776,
        6788
      ]
    },
    {
      "pos": [
        7052,
        7225
      ],
      "content": "使用先前从百度云项目中检索到的内容设置 <bpt id=\"p1\">**</bpt>API\\_KEY<ept id=\"p1\">**</ept> 的值，使用 Azure 管理门户中的通知中心名称设置 <bpt id=\"p2\">**</bpt>NotificationHubName<ept id=\"p2\">**</ept>，并使用 Azure 门户中的 DefaultListenSharedAccessSignature 设置 <bpt id=\"p3\">**</bpt>NotificationHubConnectionString<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        7231,
        7279
      ],
      "content": "添加一个名为 <bpt id=\"p1\">**</bpt>DemoApplication.java<ept id=\"p1\">**</ept> 的新类，并向此类中添加以下代码："
    },
    {
      "pos": [
        7531,
        7608
      ],
      "content": "添加另一个名为 <bpt id=\"p1\">**</bpt>MyPushMessageReceiver.java<ept id=\"p1\">**</ept> 的新类，并向此类中添加以下代码。此类用于处理从百度推送服务器收到的推送通知："
    },
    {
      "pos": [
        12489,
        12541
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>MainActivity.java<ept id=\"p1\">**</ept>，并将以下内容添加到 <bpt id=\"p2\">**</bpt>onCreate<ept id=\"p2\">**</ept> 方法中："
    },
    {
      "content": "打开顶部的以下 import 语句：",
      "pos": [
        12693,
        12711
      ]
    },
    {
      "pos": [
        12842,
        12868
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"send\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>向应用程序发送通知"
    },
    {
      "content": "在 Azure 经典门户中通过通知中心上的调试选项卡（如以下屏幕中所示）来发送通知，可以在应用中测试通知的接收情况。",
      "pos": [
        12871,
        12929
      ]
    },
    {
      "content": "通常，推送通知是在后端服务（例如，移动服务，或者使用兼容库的 ASP.NET）中发送的。如果你的后端没有可用的库，则你也可以使用 REST API 直接发送通知消息。",
      "pos": [
        13023,
        13106
      ]
    },
    {
      "pos": [
        13108,
        13337
      ],
      "content": "在本教程中，为了保持内容的简单性，我们只会演示如何在控制台应用程序（而不是后端服务）中，使用通知中心的 .NET SDK 发送通知，以此测试你的客户端应用。建议你接下来学习<bpt id=\"p1\">[</bpt>使用通知中心向用户推送通知<ept id=\"p1\">](/documentation/articles/notification-hubs-aspnet-backend-windows-dotnet-notify-users)</ept>教程，以了解如何从 ASP.NET 后端发送通知。不过，可以使用以下方法来发送通知："
    },
    {
      "pos": [
        13341,
        13442
      ],
      "content": "<bpt id=\"p1\">**</bpt>REST 接口<ept id=\"p1\">**</ept>：可以使用 <bpt id=\"p2\">[</bpt>REST 接口<ept id=\"p2\">](http://msdn.microsoft.com/library/windowsazure/dn223264.aspx)</ept>在任何后端平台上支持通知。"
    },
    {
      "pos": [
        13446,
        13620
      ],
      "content": "<bpt id=\"p1\">**</bpt>Azure 通知中心 .NET SDK<ept id=\"p1\">**</ept>：在 Visual Studio 的 Nuget 包管理器中，运行 <bpt id=\"p2\">[</bpt>Install-Package Microsoft.Azure.NotificationHubs<ept id=\"p2\">](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)</ept>。"
    },
    {
      "pos": [
        13624,
        13737
      ],
      "content": "<bpt id=\"p1\">**</bpt>Node.js<ept id=\"p1\">**</ept>：<bpt id=\"p2\">[</bpt>如何通过 Node.js 使用通知中心<ept id=\"p2\">](/documentation/articles/notification-hubs-nodejs-how-to-use-notification-hubs)</ept>。"
    },
    {
      "pos": [
        13741,
        14033
      ],
      "content": "<bpt id=\"p1\">**</bpt>Azure 移动服务<ept id=\"p1\">**</ept>：有关如何从与通知中心集成的 Azure 移动服务后端发送通知的示例，请参阅“移动服务中的推送通知入门”（<bpt id=\"p2\">[</bpt>.NET 后端<ept id=\"p2\">](/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push)</ept> | <bpt id=\"p3\">[</bpt>JavaScript 后端<ept id=\"p3\">](/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push)</ept>）。"
    },
    {
      "pos": [
        14037,
        14241
      ],
      "content": "<bpt id=\"p1\">**</bpt>Java/PHP<ept id=\"p1\">**</ept>：有关如何使用 REST API 发送通知的示例，请参阅“如何通过 Java/PHP 使用通知中心”(<bpt id=\"p2\">[</bpt>Java<ept id=\"p2\">](/documentation/articles/notification-hubs-java-backend-how-to)</ept> | <bpt id=\"p3\">[</bpt>PHP<ept id=\"p3\">](/documentation/articles/notification-hubs-php-backend-how-to)</ept>)。"
    },
    {
      "content": "（可选）通过 .NET 控制台应用发送通知。",
      "pos": [
        14245,
        14267
      ]
    },
    {
      "content": "在本部分，我们将演示如何使用 .NET 控制台应用发送通知。",
      "pos": [
        14269,
        14299
      ]
    },
    {
      "content": "创建新的 Visual C# 控制台应用程序：",
      "pos": [
        14304,
        14327
      ]
    },
    {
      "content": "在“包管理器控制台”窗口中，将“默认项目”设置为新的控制台应用程序项目，然后在控制台窗口中执行以下命令：",
      "pos": [
        14345,
        14397
      ]
    },
    {
      "pos": [
        14461,
        14608
      ],
      "content": "这将使用 <ph id=\"ph1\">&lt;a href=\"http://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/\"&gt;</ph>Microsoft.Azure.Notification Hubs NuGet 包<ph id=\"ph2\">&lt;/a&gt;</ph>添加对 Azure 通知中心 SDK 的引用。"
    },
    {
      "pos": [
        14719,
        14754
      ],
      "content": "打开文件 <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> 并添加以下 using 语句："
    },
    {
      "pos": [
        14808,
        14917
      ],
      "content": "在 <ph id=\"ph1\">`Program`</ph> 类中添加以下方法，并将 <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignatureSASConnectionString<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>NotificationHubName<ept id=\"p2\">*</ept> 替换为你的值。"
    },
    {
      "pos": [
        15353,
        15373
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> 方法中添加下列行："
    },
    {
      "pos": [
        15441,
        15470
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"test-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>测试应用程序"
    },
    {
      "content": "若要使用实际的手机测试此应用，只需使用 USB 电缆将该手机连接到你的计算机。这会将你的应用加载到连接的手机中。",
      "pos": [
        15473,
        15529
      ]
    },
    {
      "content": "若要使用模拟器测试此应用，请在 Eclipse 顶部工具栏中，单击“运行”，然后选择你的应用。这将启动模拟器，然后加载并运行该应用。",
      "pos": [
        15531,
        15597
      ]
    },
    {
      "content": "该应用将从百度推送通知服务检索“userId”和“channelId”，并注册到通知中心。",
      "pos": [
        15599,
        15644
      ]
    },
    {
      "content": "若要发送测试通知，可以使用 Azure 经典门户的调试选项卡。如果你为 Visual Studio 生成了 .NET 控制台应用程序，只需在 Visual Studio 中按 F5 键以运行该应用程序。该应用程序将发送一条通知，该通知显示在设备或模拟器的顶部通知区域。",
      "pos": [
        15646,
        15780
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"通过百度开始使用 Azure 通知中心 | Azure\"\n    description=\"在本教程中，你将了解如何通过百度使用 Azure 通知中心将通知推送到 Android 设备。\"\n    services=\"notification-hubs\"\n    documentationCenter=\"android\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"11/25/2015\"\n    wacn.date=\"01/14/2016\"/>\n    \n# 通过百度开始使用通知中心\n\n[AZURE.INCLUDE [notification-hubs-selector-get-started](../includes/notification-hubs-selector-get-started.md)]\n\n##概述\n\n百度云推送是一种中国云服务，可用于将推送通知发送到移动设备。在中国，将推送通知传递到 Android 的过程很复杂，因为存在不同的应用程序商店和推送服务，还有通常未连接到 GCM (Google Cloud Messaging) 的 Android 设备，所以，此服务在该国特别有用。\n\n##先决条件\n\n本教程需要的内容如下：\n\n+ Android SDK（我们假设你要使用 Eclipse），可从 <a href=\"http://go.microsoft.com/fwlink/?LinkId=389797\">Android 站点</a>下载该 SDK\n+ [移动服务 Android SDK]\n+ [百度推送 Android SDK]\n\n>[AZURE.NOTE]若要完成本教程，你必须有一个有效的 Azure 帐户。如果你没有帐户，只需花费几分钟就能创建一个免费试用帐户。有关详细信息，请参阅 [Azure 免费试用](/pricing/free-trial/)。\n\n\n##创建百度帐户\n\n若要使用百度，你必须有一个百度帐户。如果你已有帐户，请登录[百度门户]，并跳到下一步。否则请参阅以下说明创建百度帐户。\n\n1. 转到[百度门户]并单击“登录”链接。单击“立即注册”以启动帐户注册过程。\n\n    ![][1]\n\n2. 输入所需的详细信息（电话/电子邮件地址、密码和验证码），然后单击“注册”。\n\n    ![][2]\n\n3. 系统会将一封电子邮件发送到你输入的电子邮件地址，该邮件包含一个用于激活你的百度帐户的链接。\n\n    ![][3]\n\n4. 登录到你的电子邮件帐户，打开百度激活邮件，然后单击激活链接以激活你的百度帐号。\n\n    ![][4]\n\n当你有已激活的百度帐户后，请登录[百度门户]。\n\n##<a id=\"registerBaiduDeveloper\"></a>注册为百度开发者\n\n1. 登录到[百度门户]后，请单击“更多>>”。\n\n    ![][5]\n\n2. 向下滚动“站长与开发者服务”部分并单击“百度开放云平台”。\n\n    ![][6]\n\n3. 在下一页上，单击右上角的“开发者服务”。\n\n    ![][7]\n\n4. 在下一页上，单击右上角菜单中的“注册开发者”。\n\n    ![][8]\n\n5. 输入你的名称、说明以及用于接收验证短信的手机号码，然后单击“发送验证码”。请注意，对于国际电话号码，你需要将国家/地区代码括在括号内。例如，对于美国号码，电话号码类似于 **(1)1234567890**。\n\n    ![][9]\n\n6. 然后，你应收到一条包含验证码的短信，如以下示例所示：\n\n    ![][10]\n\n7. 在“验证码”中输入消息中的验证码。\n\n8. 最后，接受百度协议并单击“提交”以完成开发者注册。成功完成注册时，你会看到以下页：\n\n    ![][11]\n\n##<a id=\"createBaiduPushProject\"></a>创建百度云推送项目\n\n在创建百度云推送项目时，你将收到应用程序 ID、API 密钥和密钥。\n\n1. 登录到[百度门户]后，请单击“更多>>”。\n\n    ![][5]\n\n2. 向下滚动“站长与开发者服务”部分并单击“百度开放云平台”。\n\n    ![][6]\n\n3. 在下一页上，单击右上角的“开发者服务”。\n\n    ![][7]\n\n4. 在下一页上，单击“云服务”部分中的“云推送”。\n\n    ![][12]\n\n5. 注册开发者后，你将在顶部菜单上看到“管理控制台”。单击“开发者服务管理”。\n\n    ![][13]\n\n6. 在下一页上，单击“创建工程”。\n\n    ![][14]\n\n7. 输入应用程序名称，并单击“创建”。\n\n    ![][15]\n\n8. 成功创建百度云推送项目后，将显示一个页面，其中包含“AppID”、“API 密钥”和“密钥”。请记下 API 密钥和密钥，因为稍后将要用到。\n\n    ![][16]\n\n9. 通过单击左侧窗格中的“云推送”来配置推送通知项目。\n\n    ![][31]\n\n10. 在下一页上，单击“推送设置”按钮。\n\n    ![][32]\n\n11. 在配置页的“应用包名”字段中添加将在 Android 项目中使用的包名，然后单击“保存设置”\n\n    ![][33]\n\n你将会看到“保存成功!”消息。\n\n##<a id=\"configure-hub\"></a>配置通知中心\n\n1. 登录到 [Azure 管理门户]，然后单击屏幕底部的“+新建”。\n\n2. 依次单击“应用程序服务”、“服务总线”、“通知中心”和“快速创建”。\n \n3. 为你的**通知中心**提供名称，选择要在其中创建此通知中心的**区域**和**命名空间**，然后单击“创建新的通知中心”\n\n    ![][17]\n\n4. 单击已在其中创建通知中心的命名空间，然后单击顶部的“通知中心”。\n\n    ![][18]\n\n5. 选择所创建的通知中心，然后单击顶部菜单中的“配置”。\n\n    ![][19]\n\n6. 向下滚动到“百度通知设置”部分，然后输入先前从百度控制台获得的百度云推送项目的 API 密钥和密钥。单击“保存”。\n\n    ![][20]\n\n7. 单击通知中心顶部的“仪表板”选项卡，然后单击“查看连接字符串”。\n\n    ![][21]\n\n8. 记下“访问连接信息”窗口中的 **DefaultListenSharedAccessSignature** 和 **DefaultFullSharedAccessSignature**。\n\n    ![][22]\n\n##<a id=\"connecting-app\"></a>将你的应用连接到通知中心\n\n1. 在 Eclipse ADT 中，创建新的 Android 项目（“文件”>“新建”>“Android 应用程序项目”）。\n\n    ![][23]\n\n2. 输入**应用程序名称**，并确保将**要求的最低 SDK 版本**设为 **API 16: Android 4.1**。\n\n    ![][24]\n\n3. 单击“下一步”，然后继续执行向导，直到显示“创建活动”窗口。确保选中了“空白活动”，最后选择“完成”以创建新的 Android 应用程序。\n\n    ![][25]\n\n4. 确保“项目生成目标”已正确设置。\n\n    ![][26]\n\n5. 从 [Notification-Hubs-Android-SDK on Bintray](https://bintray.com/microsoftazuremobile/SDK/Notification-Hubs-Android-SDK/0.4) 的“文件”选项卡下载 notification-hubs-0.4.jar 文件。将该文件添加到 Eclipse 项目的 **libs** 文件夹，然后刷新 *libs* 文件夹。\n\n6. 下载并解压缩[百度推送 Android SDK]，打开 **libs** 文件夹，然后将 **pushservice-x.y.z** jar 文件以及 **armeabi** 和 **mips** 文件夹复制到 Android 应用程序的 **libs** 文件夹。\n\n7. 打开 Android 项目的 **AndroidManifest.xml** 文件，并添加百度 SDK 所需的权限。\n\n        <uses-permission android:name=\"android.permission.INTERNET\" />\n        <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\n        <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\n        <uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\" />\n        <uses-permission android:name=\"android.permission.WRITE_SETTINGS\" />\n        <uses-permission android:name=\"android.permission.VIBRATE\" />\n        <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n        <uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\" />\n        <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n        <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n        <uses-permission android:name=\"android.permission.ACCESS_DOWNLOAD_MANAGER\" />\n        <uses-permission android:name=\"android.permission.DOWNLOAD_WITHOUT_NOTIFICATION\" />\n\n8. 向 **AndroidManifest.xml** 中的 **application** 元素添加 **android:name** 属性，并替换 *yourprojectname*（例如 **com.example.BaiduTest**）。确保此项目名称与你在百度控制台中配置的项目名称匹配。\n\n        <application android:name=\"yourprojectname.DemoApplication\"\n\n9. 在 **.MainActivity** 活动元素后的 application 元素内添加以下配置，并替换 *yourprojectname*（例如 **com.example.BaiduTest**）：\n\n        <receiver android:name=\"yourprojectname.MyPushMessageReceiver\">\n            <intent-filter>\n                <action android:name=\"com.baidu.android.pushservice.action.MESSAGE\" />\n                <action android:name=\"com.baidu.android.pushservice.action.RECEIVE\" />\n                <action android:name=\"com.baidu.android.pushservice.action.notification.CLICK\" />\n            </intent-filter>\n        </receiver>\n\n        <receiver android:name=\"com.baidu.android.pushservice.PushServiceReceiver\"\n            android:process=\":bdservice_v1\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.BOOT_COMPLETED\" />\n                <action android:name=\"android.net.conn.CONNECTIVITY_CHANGE\" />\n                <action android:name=\"com.baidu.android.pushservice.action.notification.SHOW\" />\n            </intent-filter>\n        </receiver>\n\n        <receiver android:name=\"com.baidu.android.pushservice.RegistrationReceiver\"\n            android:process=\":bdservice_v1\">\n            <intent-filter>\n                <action android:name=\"com.baidu.android.pushservice.action.METHOD\" />\n                <action android:name=\"com.baidu.android.pushservice.action.BIND_SYNC\" />\n            </intent-filter>\n            <intent-filter>\n                <action android:name=\"android.intent.action.PACKAGE_REMOVED\"/>\n                <data android:scheme=\"package\" />\n            </intent-filter>                   \n        </receiver>\n        \n        <service\n            android:name=\"com.baidu.android.pushservice.PushService\"\n            android:exported=\"true\"\n            android:process=\":bdservice_v1\"  >\n            <intent-filter>\n                <action android:name=\"com.baidu.android.pushservice.action.PUSH_SERVICE\" />\n            </intent-filter>\n        </service>\n\n9. 将一个名为 **ConfigurationSettings.java** 的新类添加到项目中。\n\n    ![][28]\n\n    ![][29]\n\n10. 将以下代码添加到该类中：\n\n        public class ConfigurationSettings {\n                public static String API_KEY = \"...\";\n                public static String NotificationHubName = \"...\";\n                public static String NotificationHubConnectionString = \"...\";\n            }\n\n    使用先前从百度云项目中检索到的内容设置 **API\\_KEY** 的值，使用 Azure 管理门户中的通知中心名称设置 **NotificationHubName**，并使用 Azure 门户中的 DefaultListenSharedAccessSignature 设置 **NotificationHubConnectionString**。\n\n11. 添加一个名为 **DemoApplication.java** 的新类，并向此类中添加以下代码：\n\n        import com.baidu.frontia.FrontiaApplication;\n        \n        public class DemoApplication extends FrontiaApplication {\n            @Override\n            public void onCreate() {\n                super.onCreate();\n            }\n        }\n\n12. 添加另一个名为 **MyPushMessageReceiver.java** 的新类，并向此类中添加以下代码。此类用于处理从百度推送服务器收到的推送通知：\n\n        import java.util.List;\n        import android.content.Context;\n        import android.os.AsyncTask;\n        import android.util.Log;\n        import com.baidu.frontia.api.FrontiaPushMessageReceiver;\n        import com.microsoft.windowsazure.messaging.NotificationHub;\n        \n        public class MyPushMessageReceiver extends FrontiaPushMessageReceiver {\n            /** TAG to Log */\n            public static NotificationHub hub = null;\n            public static String mChannelId, mUserId;\n            public static final String TAG = MyPushMessageReceiver.class\n                    .getSimpleName();\n            \n            @Override\n            public void onBind(Context context, int errorCode, String appid,\n                    String userId, String channelId, String requestId) {\n                String responseString = \"onBind errorCode=\" + errorCode + \" appid=\"\n                        + appid + \" userId=\" + userId + \" channelId=\" + channelId\n                        + \" requestId=\" + requestId;\n                Log.d(TAG, responseString);\n                mChannelId = channelId;\n                mUserId = userId;\n                \n                try {\n                 if (hub == null) {\n                        hub = new NotificationHub(\n                                ConfigurationSettings.NotificationHubName, \n                                ConfigurationSettings.NotificationHubConnectionString, \n                                context);\n                        Log.i(TAG, \"Notification hub initialized\");\n                    }\n                } catch (Exception e) {\n                   Log.e(TAG, e.getMessage());\n                }\n                \n                registerWithNotificationHubs();\n            }\n            \n            private void registerWithNotificationHubs() {\n               new AsyncTask<Void, Void, Void>() {\n                  @Override\n                  protected Void doInBackground(Void... params) {\n                     try {\n                         hub.registerBaidu(mUserId, mChannelId);\n                         Log.i(TAG, \"Registered with Notification Hub - '\" \n                                + ConfigurationSettings.NotificationHubName + \"'\" \n                                + \" with UserId - '\"\n                                + mUserId + \"' and Channel Id - '\"\n                                + mChannelId + \"'\");\n                     } catch (Exception e) {\n                         Log.e(TAG, e.getMessage());\n                     }\n                     return null;\n                 }\n               }.execute(null, null, null);\n            }\n            \n            @Override\n            public void onSetTags(Context context, int errorCode,\n                    List<String> sucessTags, List<String> failTags, String requestId) {\n                String responseString = \"onSetTags errorCode=\" + errorCode\n                        + \" sucessTags=\" + sucessTags + \" failTags=\" + failTags\n                        + \" requestId=\" + requestId;\n                Log.d(TAG, responseString);\n            }\n        \n            @Override\n            public void onDelTags(Context context, int errorCode,\n                    List<String> sucessTags, List<String> failTags, String requestId) {\n                String responseString = \"onDelTags errorCode=\" + errorCode\n                        + \" sucessTags=\" + sucessTags + \" failTags=\" + failTags\n                        + \" requestId=\" + requestId;\n                Log.d(TAG, responseString);\n            }\n        \n            @Override\n            public void onListTags(Context context, int errorCode, List<String> tags,\n                    String requestId) {\n                String responseString = \"onListTags errorCode=\" + errorCode + \" tags=\"\n                        + tags;\n                Log.d(TAG, responseString);\n            }\n        \n            @Override\n            public void onUnbind(Context context, int errorCode, String requestId) {\n                String responseString = \"onUnbind errorCode=\" + errorCode\n                        + \" requestId = \" + requestId;\n                Log.d(TAG, responseString);\n            }\n        \n            @Override\n            public void onNotificationClicked(Context context, String title,\n                    String description, String customContentString) {\n                String notifyString = \"title=\"\" + title + \"\" description=\"\"\n                        + description + \"\" customContent=\" + customContentString;\n                Log.d(TAG, notifyString);\n            }\n        \n            @Override\n            public void onMessage(Context context, String message,\n                    String customContentString) {\n                String messageString = \"message=\"\" + message + \"\" customContentString=\" + customContentString;\n                Log.d(TAG, messageString);\n            }\n        }\n\n13. 打开 **MainActivity.java**，并将以下内容添加到 **onCreate** 方法中：\n\n            PushManager.startWork(getApplicationContext(),\n                    PushConstants.LOGIN_TYPE_API_KEY, ConfigurationSettings.API_KEY);\n\n14. 打开顶部的以下 import 语句：\n\n            import com.baidu.android.pushservice.PushConstants;\n            import com.baidu.android.pushservice.PushManager;\n\n##<a id=\"send\"></a>向应用程序发送通知\n\n\n在 Azure 经典门户中通过通知中心上的调试选项卡（如以下屏幕中所示）来发送通知，可以在应用中测试通知的接收情况。\n\n![](./media/notification-hubs-windows-store-dotnet-get-started/notification-hub-debug.png)\n\n通常，推送通知是在后端服务（例如，移动服务，或者使用兼容库的 ASP.NET）中发送的。如果你的后端没有可用的库，则你也可以使用 REST API 直接发送通知消息。\n\n在本教程中，为了保持内容的简单性，我们只会演示如何在控制台应用程序（而不是后端服务）中，使用通知中心的 .NET SDK 发送通知，以此测试你的客户端应用。建议你接下来学习[使用通知中心向用户推送通知](/documentation/articles/notification-hubs-aspnet-backend-windows-dotnet-notify-users)教程，以了解如何从 ASP.NET 后端发送通知。不过，可以使用以下方法来发送通知：\n\n* **REST 接口**：可以使用 [REST 接口](http://msdn.microsoft.com/library/windowsazure/dn223264.aspx)在任何后端平台上支持通知。\n\n* **Azure 通知中心 .NET SDK**：在 Visual Studio 的 Nuget 包管理器中，运行 [Install-Package Microsoft.Azure.NotificationHubs](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)。\n\n* **Node.js**：[如何通过 Node.js 使用通知中心](/documentation/articles/notification-hubs-nodejs-how-to-use-notification-hubs)。\n\n* **Azure 移动服务**：有关如何从与通知中心集成的 Azure 移动服务后端发送通知的示例，请参阅“移动服务中的推送通知入门”（[.NET 后端](/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push) | [JavaScript 后端](/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push)）。\n\n* **Java/PHP**：有关如何使用 REST API 发送通知的示例，请参阅“如何通过 Java/PHP 使用通知中心”([Java](/documentation/articles/notification-hubs-java-backend-how-to) | [PHP](/documentation/articles/notification-hubs-php-backend-how-to))。\n\n##（可选）通过 .NET 控制台应用发送通知。\n\n在本部分，我们将演示如何使用 .NET 控制台应用发送通知。\n\n1. 创建新的 Visual C# 控制台应用程序：\n\n    ![][30]\n\n2. 在“包管理器控制台”窗口中，将“默认项目”设置为新的控制台应用程序项目，然后在控制台窗口中执行以下命令：\n\n        Install-Package Microsoft.Azure.NotificationHubs\n\n    这将使用 <a href=\"http://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/\">Microsoft.Azure.Notification Hubs NuGet 包</a>添加对 Azure 通知中心 SDK 的引用。\n\n    ![](./media/notification-hubs-windows-store-dotnet-get-started/notification-hub-package-manager.png)\n\n3. 打开文件 **Program.cs** 并添加以下 using 语句：\n\n        using Microsoft.Azure.NotificationHubs;\n\n4. 在 `Program` 类中添加以下方法，并将 *DefaultFullSharedAccessSignatureSASConnectionString* 和 *NotificationHubName* 替换为你的值。\n\n        private static async void SendNotificationAsync()\n        {\n            NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(\"DefaultFullSharedAccessSignatureSASConnectionString\", \"NotificationHubName\");\n            string message = \"{\"title\":\"((Notification title))\",\"description\":\"Hello from Azure\"}\";\n            var result = await hub.SendBaiduNativeNotificationAsync(message);\n        }\n\n5. 在 **Main** 方法中添加下列行：\n\n         SendNotificationAsync();\n         Console.ReadLine();\n\n##<a name=\"test-app\"></a>测试应用程序\n\n\n若要使用实际的手机测试此应用，只需使用 USB 电缆将该手机连接到你的计算机。这会将你的应用加载到连接的手机中。\n\n若要使用模拟器测试此应用，请在 Eclipse 顶部工具栏中，单击“运行”，然后选择你的应用。这将启动模拟器，然后加载并运行该应用。\n\n该应用将从百度推送通知服务检索“userId”和“channelId”，并注册到通知中心。\n\n若要发送测试通知，可以使用 Azure 经典门户的调试选项卡。如果你为 Visual Studio 生成了 .NET 控制台应用程序，只需在 Visual Studio 中按 F5 键以运行该应用程序。该应用程序将发送一条通知，该通知显示在设备或模拟器的顶部通知区域。\n\n\n<!-- Images. -->\n[1]: ./media/notification-hubs-baidu-get-started/BaiduRegistration.png\n[2]: ./media/notification-hubs-baidu-get-started/BaiduRegistrationInput.png\n[3]: ./media/notification-hubs-baidu-get-started/BaiduConfirmation.png\n[4]: ./media/notification-hubs-baidu-get-started/BaiduActivationEmail.png\n[5]: ./media/notification-hubs-baidu-get-started/BaiduRegistrationMore.png\n[6]: ./media/notification-hubs-baidu-get-started/BaiduOpenCloudPlatform.png\n[7]: ./media/notification-hubs-baidu-get-started/BaiduDeveloperServices.png\n[8]: ./media/notification-hubs-baidu-get-started/BaiduDeveloperRegistration.png\n[9]: ./media/notification-hubs-baidu-get-started/BaiduDevRegistrationInput.png\n[10]: ./media/notification-hubs-baidu-get-started/BaiduDevRegistrationConfirmation.png\n[11]: ./media/notification-hubs-baidu-get-started/BaiduDevConfirmationFinal.png\n[12]: ./media/notification-hubs-baidu-get-started/BaiduCloudPush.png\n[13]: ./media/notification-hubs-baidu-get-started/BaiduDevSvcMgmt.png\n[14]: ./media/notification-hubs-baidu-get-started/BaiduCreateProject.png\n[15]: ./media/notification-hubs-baidu-get-started/BaiduCreateProjectInput.png\n[16]: ./media/notification-hubs-baidu-get-started/BaiduProjectKeys.png\n[17]: ./media/notification-hubs-baidu-get-started/AzureNHCreation.png\n[18]: ./media/notification-hubs-baidu-get-started/NotificationHubs.png\n[19]: ./media/notification-hubs-baidu-get-started/NotificationHubsConfigure.png\n[20]: ./media/notification-hubs-baidu-get-started/NotificationHubBaiduConfigure.png\n[21]: ./media/notification-hubs-baidu-get-started/NotificationHubsConnectionStringView.png\n[22]: ./media/notification-hubs-baidu-get-started/NotificationHubsConnectionString.png\n[23]: ./media/notification-hubs-baidu-get-started/EclipseNewProject.png\n[24]: ./media/notification-hubs-baidu-get-started/EclipseProjectCreation.png\n[25]: ./media/notification-hubs-baidu-get-started/EclipseBlankActivity.png\n[26]: ./media/notification-hubs-baidu-get-started/EclipseProjectBuildProperty.png\n[27]: ./media/notification-hubs-baidu-get-started/EclipseBaiduReferences.png\n[28]: ./media/notification-hubs-baidu-get-started/EclipseNewClass.png\n[29]: ./media/notification-hubs-baidu-get-started/EclipseConfigSettingsClass.png\n[30]: ./media/notification-hubs-baidu-get-started/ConsoleProject.png\n[31]: ./media/notification-hubs-baidu-get-started/BaiduPushConfig1.png\n[32]: ./media/notification-hubs-baidu-get-started/BaiduPushConfig2.png\n[33]: ./media/notification-hubs-baidu-get-started/BaiduPushConfig3.png\n\n<!-- URLs. -->\n[移动服务 Android SDK]: https://go.microsoft.com/fwLink/?LinkID=280126&clcid=0x409\n[百度推送 Android SDK]: http://developer.baidu.com/wiki/index.php?title=docs/cplat/push/sdk/clientsdk\n[Azure 管理门户]: https://manage.windowsazure.cn/\n[百度门户]: http://www.baidu.com/\n\n<!---HONumber=Mooncake_0104_2016-->"
}