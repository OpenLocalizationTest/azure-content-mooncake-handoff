{
  "nodes": [
    {
      "content": "如何结合使用通知中心与 Python",
      "pos": [
        28,
        46
      ]
    },
    {
      "content": "了解如何从 Python 后端使用 Azure 通知中心。",
      "pos": [
        66,
        95
      ]
    },
    {
      "content": "如何通过 Python 使用通知中心",
      "pos": [
        330,
        348
      ]
    },
    {
      "pos": [
        476,
        607
      ],
      "content": "如 MSDN 主题<bpt id=\"p1\">[</bpt>通知中心 REST API<ept id=\"p1\">](http://msdn.microsoft.com/library/dn223264.aspx)</ept> 中所述，你可以使用通知中心 REST 接口从 Java/PHP/Python/Ruby 后端访问所有通知中心功能。"
    },
    {
      "pos": [
        611,
        672
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>这是在 Python 中实现通知发送的示例引用实现，不是官方支持的通知中心 Python SDK。"
    },
    {
      "pos": [
        676,
        708
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此示例使用 Python 3.4 编写。"
    },
    {
      "content": "本主题中，我们将向你介绍如何：",
      "pos": [
        710,
        725
      ]
    },
    {
      "content": "以 Python 构建 REST 客户端以获取通知中心功能。",
      "pos": [
        729,
        759
      ]
    },
    {
      "content": "使用 Python 接口发送通知到通知中心 REST API。",
      "pos": [
        762,
        793
      ]
    },
    {
      "content": "获取 HTTP REST 请求/响应的转储以进行调试/培训。",
      "pos": [
        797,
        827
      ]
    },
    {
      "pos": [
        830,
        942
      ],
      "content": "你可以按照你选定的移动平台的<bpt id=\"p1\">[</bpt>入门教程<ept id=\"p1\">](/documentation/articles/notification-hubs-windows-store-dotnet-get-started)</ept>以 Python 实现后端部分。"
    },
    {
      "pos": [
        946,
        982
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>该示例仅限于发送通知，并不执行任何注册管理操作。"
    },
    {
      "content": "客户端接口",
      "pos": [
        987,
        992
      ]
    },
    {
      "pos": [
        993,
        1132
      ],
      "content": "主要的客户端接口可提供与 <bpt id=\"p1\">[</bpt>.NET 通知中心 SDK<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/jj933431.aspx)</ept> 中相同的方法。这将允许你直接翻译当前该网站上提供的所有教程和示例，这些内容均来自 Internet 上的社区。"
    },
    {
      "pos": [
        1134,
        1169
      ],
      "content": "你可以在 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Python REST 包装器示例]</ept>中找到提供的所有代码。"
    },
    {
      "content": "例如，创建客户端：",
      "pos": [
        1171,
        1180
      ]
    },
    {
      "content": "发送 Windows toast 通知：",
      "pos": [
        1288,
        1308
      ]
    },
    {
      "content": "实现",
      "pos": [
        1504,
        1506
      ]
    },
    {
      "pos": [
        1507,
        1544
      ],
      "content": "如果你尚未实现，请按照我们的<bpt id=\"p1\">[</bpt><ept id=\"p1\">入门教程]</ept>学至最后一节，其中你必须实现后端。"
    },
    {
      "pos": [
        1546,
        1682
      ],
      "content": "有关实现完整 REST 包装器的所有详细信息，请访问 <bpt id=\"p1\">[</bpt>MSDN<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn530746.aspx)</ept>。在本部分中，我们将向你介绍访问通知中心 REST 终结点所需的主要步骤的 Python 实现："
    },
    {
      "content": "解析连接字符串",
      "pos": [
        1687,
        1694
      ]
    },
    {
      "content": "生成授权令牌",
      "pos": [
        1698,
        1704
      ]
    },
    {
      "content": "使用 HTTP REST API 发送通知",
      "pos": [
        1708,
        1729
      ]
    },
    {
      "content": "解析连接字符串",
      "pos": [
        1735,
        1742
      ]
    },
    {
      "content": "下面是实现客户端的主类，其构造函数将解析连接字符串：",
      "pos": [
        1744,
        1770
      ]
    },
    {
      "content": "创建安全令牌",
      "pos": [
        2563,
        2569
      ]
    },
    {
      "pos": [
        2570,
        2710
      ],
      "content": "有关安全令牌创建的详细信息，请访问<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn495627.aspx)</ept>。下面的方法必须添加到 <bpt id=\"p2\">**</bpt>NotificationHub<ept id=\"p2\">**</ept> 类，以根据当前请求的 URL 和提取自连接字符串的凭据创建令牌。"
    },
    {
      "content": "使用 HTTP REST API 发送通知",
      "pos": [
        3766,
        3787
      ]
    },
    {
      "content": "首先，定义表示通知的类。",
      "pos": [
        3788,
        3800
      ]
    },
    {
      "content": "此类是一个容器，其中包含本机通知正文或一组模板通知上的属性，以及一组包含格式（本机平台或模板）和平台特定属性（如 Apple 过期属性和 WNS 标头）的标头。",
      "pos": [
        4740,
        4820
      ]
    },
    {
      "pos": [
        4822,
        4918
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>通知中心 REST API 文档<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn495827.aspx)</ept>和具体的通知平台格式以了解所有可用选项。"
    },
    {
      "pos": [
        4920,
        4966
      ],
      "content": "现在有了此类后，我们便可在 <bpt id=\"p1\">**</bpt>NotificationHub<ept id=\"p1\">**</ept> 类中编写发送通知方法了。"
    },
    {
      "content": "以上方法将 HTTP POST 请求发送到你通知中心的 /messages 终结点，该请求具有发送通知的正确正文和标头。",
      "pos": [
        9113,
        9173
      ]
    },
    {
      "content": "使用调试属性启用详细的日志记录",
      "pos": [
        9179,
        9194
      ]
    },
    {
      "pos": [
        9195,
        9442
      ],
      "content": "在初始化通知中心时启用调试属性将写出关于 HTTP 请求和响应转储的详细日志记录信息，以及详细的通知消息发送结果。我们最近添加了这个称为<bpt id=\"p1\">[</bpt>通知中心 TestSend 属性<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.notifications.notificationhubclient.enabletestsend.aspx)</ept>的属性，它将返回有关通知发送结果的详细信息。若要使用它 - 请使用以下方法进行初始化："
    },
    {
      "content": "通知中心 Send 请求 HTTP URL 获取附加 \"test\" 查询字符串作为结果。",
      "pos": [
        9527,
        9571
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"complete-tutorial\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>完成教程",
      "pos": [
        9575,
        9611
      ]
    },
    {
      "content": "现在，你可以通过从 Python 后端发送通知来完成该入门教程。",
      "pos": [
        9612,
        9644
      ]
    },
    {
      "pos": [
        9646,
        9683
      ],
      "content": "初始化你的通知中心客户端（按<bpt id=\"p1\">[</bpt><ept id=\"p1\">入门教程]</ept>中所述替换连接字符串和中心名称）："
    },
    {
      "content": "然后，根据你的目标移动平台添加发送代码。此示例还添加了更高级别的方法以支持基于平台发送通知，例如 send\\_windows\\_notification for windows; send\\_apple\\_notification (for apple) 等。",
      "pos": [
        9759,
        9889
      ]
    },
    {
      "content": "Windows 应用商店和 Windows Phone 8.1（非 Silverlight）",
      "pos": [
        9895,
        9941
      ]
    },
    {
      "content": "Windows Phone 8.0 和 8.1 Silverlight",
      "pos": [
        10122,
        10157
      ]
    },
    {
      "content": "iOS",
      "pos": [
        10202,
        10205
      ]
    },
    {
      "content": "Android",
      "pos": [
        10363,
        10370
      ]
    },
    {
      "content": "Kindle Fire",
      "pos": [
        10521,
        10532
      ]
    },
    {
      "content": "百度",
      "pos": [
        10683,
        10685
      ]
    },
    {
      "content": "运行 Python 代码，现在应该生成显示在目标设备上的通知。",
      "pos": [
        10838,
        10869
      ]
    },
    {
      "content": "示例:",
      "pos": [
        10874,
        10877
      ]
    },
    {
      "content": "启用调试属性",
      "pos": [
        10883,
        10889
      ]
    },
    {
      "content": "如果在初始化 NotificationHub 时启用调试标志，你将会看到详细的 HTTP 请求和响应转储以及 NotificationOutcome，如下所示，你可以从中了解哪些 HTTP 标头传入请求以及从通知中心收到哪些 HTTP 响应：",
      "pos": [
        10890,
        11011
      ]
    },
    {
      "content": "你将看到如详细的通知中心结果，例如",
      "pos": [
        11024,
        11041
      ]
    },
    {
      "content": "当消息成功发送到推送通知服务时。",
      "pos": [
        11045,
        11061
      ]
    },
    {
      "content": "如果没有为任何推送通知找到目标，你可能会看到以下响应（这表明可能没有找到传递通知的注册，因为这些注册具有一些不匹配的标记）",
      "pos": [
        11169,
        11230
      ]
    },
    {
      "content": "将 toast 通知广播到 Windows",
      "pos": [
        11482,
        11503
      ]
    },
    {
      "content": "请注意你在向 Windows 客户端发送广播 toast 通知时发送出去的标头。",
      "pos": [
        11506,
        11546
      ]
    },
    {
      "content": "发送通知指定标记（或标记表达式）",
      "pos": [
        11608,
        11624
      ]
    },
    {
      "content": "请注意添加到 HTTP 请求的 Tags HTTP 标头（在以下示例中，我们只将通知发送给了具有 'sports'负载的注册）",
      "pos": [
        11626,
        11689
      ]
    },
    {
      "content": "发送通知指定多个标记",
      "pos": [
        11761,
        11771
      ]
    },
    {
      "content": "请注意发送多个标记时 Tags HTTP 标头的变化方式。",
      "pos": [
        11773,
        11802
      ]
    },
    {
      "content": "模板通知",
      "pos": [
        11908,
        11912
      ]
    },
    {
      "content": "请注意 Format HTTP 标头的变化和负载正文作为 HTTP 请求正文的一部分发送：",
      "pos": [
        11914,
        11959
      ]
    },
    {
      "content": "客户端 - 已注册的模板",
      "pos": [
        11963,
        11975
      ]
    },
    {
      "content": "服务器端 - 正在发送的负载",
      "pos": [
        12158,
        12172
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        12330,
        12334
      ]
    },
    {
      "content": "在本主题中，我们介绍了如何为通知中心创建简单的 Python REST 客户端。从这里你可以：",
      "pos": [
        12335,
        12382
      ]
    },
    {
      "pos": [
        12386,
        12423
      ],
      "content": "下载完整的 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Python REST 包装器示例]</ept>，其中包含上述所有代码。"
    },
    {
      "pos": [
        12426,
        12448
      ],
      "content": "在<bpt id=\"p1\">[</bpt><ept id=\"p1\">突发新闻教程]</ept>中继续学习通知中心标记功能"
    },
    {
      "pos": [
        12451,
        12474
      ],
      "content": "在<bpt id=\"p1\">[</bpt><ept id=\"p1\">本地化新闻教程]</ept>中继续学习通知中心模板功能"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何结合使用通知中心与 Python\" \n    description=\"了解如何从 Python 后端使用 Azure 通知中心。\" \n    services=\"notification-hubs\" \n    documentationCenter=\"\" \n    authors=\"wesmc7777\"\n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n      ms.service=\"notification-hubs\" \n      ms.date=\"11/01/2015\" \n      wacn.date=\"01/14/2016\" />\n\n# 如何通过 Python 使用通知中心\n[AZURE.INCLUDE [notification-hubs-backend-how-to-selector](../includes/notification-hubs-backend-how-to-selector.md)]\n        \n如 MSDN 主题[通知中心 REST API](http://msdn.microsoft.com/library/dn223264.aspx) 中所述，你可以使用通知中心 REST 接口从 Java/PHP/Python/Ruby 后端访问所有通知中心功能。\n\n> [AZURE.NOTE]这是在 Python 中实现通知发送的示例引用实现，不是官方支持的通知中心 Python SDK。\n\n> [AZURE.NOTE]此示例使用 Python 3.4 编写。\n\n本主题中，我们将向你介绍如何：\n\n* 以 Python 构建 REST 客户端以获取通知中心功能。\n* 使用 Python 接口发送通知到通知中心 REST API。 \n* 获取 HTTP REST 请求/响应的转储以进行调试/培训。 \n\n你可以按照你选定的移动平台的[入门教程](/documentation/articles/notification-hubs-windows-store-dotnet-get-started)以 Python 实现后端部分。\n\n> [AZURE.NOTE]该示例仅限于发送通知，并不执行任何注册管理操作。\n\n## 客户端接口\n主要的客户端接口可提供与 [.NET 通知中心 SDK](http://msdn.microsoft.com/zh-cn/library/jj933431.aspx) 中相同的方法。这将允许你直接翻译当前该网站上提供的所有教程和示例，这些内容均来自 Internet 上的社区。\n\n你可以在 [Python REST 包装器示例]中找到提供的所有代码。\n\n例如，创建客户端：\n\n    isDebug = True\n    hub = NotificationHub(\"myConnectionString\", \"myNotificationHubName\", isDebug)\n    \n发送 Windows toast 通知：\n    \n    wns_payload = \"\"\"<toast><visual><binding template=\\\"ToastText01\\\"><text id=\\\"1\\\">Hello world!</text></binding></visual></toast>\"\"\"\n    hub.send_windows_notification(wns_payload)\n    \n## 实现\n如果你尚未实现，请按照我们的[入门教程]学至最后一节，其中你必须实现后端。\n\n有关实现完整 REST 包装器的所有详细信息，请访问 [MSDN](http://msdn.microsoft.com/zh-cn/library/dn530746.aspx)。在本部分中，我们将向你介绍访问通知中心 REST 终结点所需的主要步骤的 Python 实现：\n\n1. 解析连接字符串\n2. 生成授权令牌\n3. 使用 HTTP REST API 发送通知\n\n### 解析连接字符串\n\n下面是实现客户端的主类，其构造函数将解析连接字符串：\n\n    class NotificationHub:\n        API_VERSION = \"?api-version=2013-10\"\n        DEBUG_SEND = \"&test\"\n    \n        def __init__(self, connection_string=None, hub_name=None, debug=0):\n            self.HubName = hub_name\n            self.Debug = debug\n    \n            # Parse connection string\n            parts = connection_string.split(';')\n            if len(parts) != 3:\n                raise Exception(\"Invalid ConnectionString.\")\n    \n            for part in parts:\n                if part.startswith('Endpoint'):\n                    self.Endpoint = 'https' + part[11:]\n                if part.startswith('SharedAccessKeyName'):\n                    self.SasKeyName = part[20:]\n                if part.startswith('SharedAccessKey'):\n                    self.SasKeyValue = part[16:]\n\n\n### 创建安全令牌\n有关安全令牌创建的详细信息，请访问[此处](http://msdn.microsoft.com/zh-cn/library/dn495627.aspx)。下面的方法必须添加到 **NotificationHub** 类，以根据当前请求的 URL 和提取自连接字符串的凭据创建令牌。\n\n    @staticmethod\n    def get_expiry():\n        # By default returns an expiration of 5 minutes (=300 seconds) from now\n        return int(round(time.time() + 300))\n\n    @staticmethod\n    def encode_base64(data):\n        return base64.b64encode(data)\n\n    def sign_string(self, to_sign):\n        key = self.SasKeyValue.encode('utf-8')\n        to_sign = to_sign.encode('utf-8')\n        signed_hmac_sha256 = hmac.HMAC(key, to_sign, hashlib.sha256)\n        digest = signed_hmac_sha256.digest()\n        encoded_digest = self.encode_base64(digest)\n        return encoded_digest\n\n    def generate_sas_token(self):\n        target_uri = self.Endpoint + self.HubName\n        my_uri = urllib.parse.quote(target_uri, '').lower()\n        expiry = str(self.get_expiry())\n        to_sign = my_uri + '\\n' + expiry\n        signature = urllib.parse.quote(self.sign_string(to_sign))\n        auth_format = 'SharedAccessSignature sig={0}&se={1}&skn={2}&sr={3}'\n        sas_token = auth_format.format(signature, expiry, self.SasKeyName, my_uri)\n        return sas_token\n\n### 使用 HTTP REST API 发送通知\n首先，定义表示通知的类。\n\n    class Notification:\n        def __init__(self, notification_format=None, payload=None, debug=0):\n            valid_formats = ['template', 'apple', 'gcm', 'windows', 'windowsphone', \"adm\", \"baidu\"]\n            if not any(x in notification_format for x in valid_formats):\n                raise Exception(\n                    \"Invalid Notification format. \" +\n                    \"Must be one of the following - 'template', 'apple', 'gcm', 'windows', 'windowsphone', 'adm', 'baidu'\")\n    \n            self.format = notification_format\n            self.payload = payload\n    \n            # array with keynames for headers\n            # Note: Some headers are mandatory: Windows: X-WNS-Type, WindowsPhone: X-NotificationType\n            # Note: For Apple you can set Expiry with header: ServiceBusNotification-ApnsExpiry\n            # in W3C DTF, YYYY-MM-DDThh:mmTZD (for example, 1997-07-16T19:20+01:00).\n            self.headers = None\n\n此类是一个容器，其中包含本机通知正文或一组模板通知上的属性，以及一组包含格式（本机平台或模板）和平台特定属性（如 Apple 过期属性和 WNS 标头）的标头。\n\n请参阅[通知中心 REST API 文档](http://msdn.microsoft.com/zh-cn/library/dn495827.aspx)和具体的通知平台格式以了解所有可用选项。\n\n现在有了此类后，我们便可在 **NotificationHub** 类中编写发送通知方法了。\n\n    def make_http_request(self, url, payload, headers):\n        parsed_url = urllib.parse.urlparse(url)\n        connection = http.client.HTTPSConnection(parsed_url.hostname, parsed_url.port)\n\n        if self.Debug > 0:\n            connection.set_debuglevel(self.Debug)\n            # adding this querystring parameter gets detailed information about the PNS send notification outcome\n            url += self.DEBUG_SEND\n            print(\"--- REQUEST ---\")\n            print(\"URI: \" + url)\n            print(\"Headers: \" + json.dumps(headers, sort_keys=True, indent=4, separators=(' ', ': ')))\n            print(\"--- END REQUEST ---\\n\")\n\n        connection.request('POST', url, payload, headers)\n        response = connection.getresponse()\n\n        if self.Debug > 0:\n            # print out detailed response information for debugging purpose\n            print(\"\\n\\n--- RESPONSE ---\")\n            print(str(response.status) + \" \" + response.reason)\n            print(response.msg)\n            print(response.read())\n            print(\"--- END RESPONSE ---\")\n\n        elif response.status != 201:\n            # Successful outcome of send message is HTTP 201 - Created\n            raise Exception(\n                \"Error sending notification. Received HTTP code \" + str(response.status) + \" \" + response.reason)\n\n        connection.close()\n\n    def send_notification(self, notification, tag_or_tag_expression=None):\n        url = self.Endpoint + self.HubName + '/messages' + self.API_VERSION\n\n        json_platforms = ['template', 'apple', 'gcm', 'adm', 'baidu']\n\n        if any(x in notification.format for x in json_platforms):\n            content_type = \"application/json\"\n            payload_to_send = json.dumps(notification.payload)\n        else:\n            content_type = \"application/xml\"\n            payload_to_send = notification.payload\n\n        headers = {\n            'Content-type': content_type,\n            'Authorization': self.generate_sas_token(),\n            'ServiceBusNotification-Format': notification.format\n        }\n\n        if isinstance(tag_or_tag_expression, set):\n            tag_list = ' || '.join(tag_or_tag_expression)\n        else:\n            tag_list = tag_or_tag_expression\n\n        # add the tags/tag expressions to the headers collection\n        if tag_list != \"\":\n            headers.update({'ServiceBusNotification-Tags': tag_list})\n\n        # add any custom headers to the headers collection that the user may have added\n        if notification.headers is not None:\n            headers.update(notification.headers)\n\n        self.make_http_request(url, payload_to_send, headers)\n\n    def send_apple_notification(self, payload, tags=\"\"):\n        nh = Notification(\"apple\", payload)\n        self.send_notification(nh, tags)\n\n    def send_gcm_notification(self, payload, tags=\"\"):\n        nh = Notification(\"gcm\", payload)\n        self.send_notification(nh, tags)\n\n    def send_adm_notification(self, payload, tags=\"\"):\n        nh = Notification(\"adm\", payload)\n        self.send_notification(nh, tags)\n\n    def send_baidu_notification(self, payload, tags=\"\"):\n        nh = Notification(\"baidu\", payload)\n        self.send_notification(nh, tags)\n\n    def send_mpns_notification(self, payload, tags=\"\"):\n        nh = Notification(\"windowsphone\", payload)\n\n        if \"<wp:Toast>\" in payload:\n            nh.headers = {'X-WindowsPhone-Target': 'toast', 'X-NotificationClass': '2'}\n        elif \"<wp:Tile>\" in payload:\n            nh.headers = {'X-WindowsPhone-Target': 'tile', 'X-NotificationClass': '1'}\n\n        self.send_notification(nh, tags)\n\n    def send_windows_notification(self, payload, tags=\"\"):\n        nh = Notification(\"windows\", payload)\n\n        if \"<toast>\" in payload:\n            nh.headers = {'X-WNS-Type': 'wns/toast'}\n        elif \"<tile>\" in payload:\n            nh.headers = {'X-WNS-Type': 'wns/tile'}\n        elif \"<badge>\" in payload:\n            nh.headers = {'X-WNS-Type': 'wns/badge'}\n\n        self.send_notification(nh, tags)\n\n    def send_template_notification(self, properties, tags=\"\"):\n        nh = Notification(\"template\", properties)\n        self.send_notification(nh, tags)\n\n以上方法将 HTTP POST 请求发送到你通知中心的 /messages 终结点，该请求具有发送通知的正确正文和标头。\n\n### 使用调试属性启用详细的日志记录\n在初始化通知中心时启用调试属性将写出关于 HTTP 请求和响应转储的详细日志记录信息，以及详细的通知消息发送结果。我们最近添加了这个称为[通知中心 TestSend 属性](http://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.notifications.notificationhubclient.enabletestsend.aspx)的属性，它将返回有关通知发送结果的详细信息。若要使用它 - 请使用以下方法进行初始化：\n\n    hub = NotificationHub(\"myConnectionString\", \"myNotificationHubName\", isDebug)\n\n通知中心 Send 请求 HTTP URL 获取附加 \"test\" 查询字符串作为结果。\n\n##<a name=\"complete-tutorial\"></a>完成教程\n现在，你可以通过从 Python 后端发送通知来完成该入门教程。\n\n初始化你的通知中心客户端（按[入门教程]中所述替换连接字符串和中心名称）：\n\n    hub = NotificationHub(\"myConnectionString\", \"myNotificationHubName\")\n\n然后，根据你的目标移动平台添加发送代码。此示例还添加了更高级别的方法以支持基于平台发送通知，例如 send\\_windows\\_notification for windows; send\\_apple\\_notification (for apple) 等。\n\n### Windows 应用商店和 Windows Phone 8.1（非 Silverlight）\n\n    wns_payload = \"\"\"<toast><visual><binding template=\\\"ToastText01\\\"><text id=\\\"1\\\">Test</text></binding></visual></toast>\"\"\"\n    hub.send_windows_notification(wns_payload)\n\n### Windows Phone 8.0 和 8.1 Silverlight\n\n    hub.send_mpns_notification(toast)\n\n### iOS\n\n    alert_payload = {\n        'data':\n            {\n                'msg': 'Hello!'\n            }\n    }\n    hub.send_apple_notification(alert_payload)\n\n### Android\n    gcm_payload = {\n        'data':\n            {\n                'msg': 'Hello!'\n            }\n    }\n    hub.send_gcm_notification(gcm_payload)\n\n### Kindle Fire\n    adm_payload = {\n        'data':\n            {\n                'msg': 'Hello!'\n            }\n    }\n    hub.send_adm_notification(adm_payload)\n\n### 百度\n    baidu_payload = {\n        'data':\n            {\n                'msg': 'Hello!'\n            }\n    }\n    hub.send_baidu_notification(baidu_payload)\n\n运行 Python 代码，现在应该生成显示在目标设备上的通知。\n\n## 示例:\n\n### 启用调试属性\n如果在初始化 NotificationHub 时启用调试标志，你将会看到详细的 HTTP 请求和响应转储以及 NotificationOutcome，如下所示，你可以从中了解哪些 HTTP 标头传入请求以及从通知中心收到哪些 HTTP 响应：\n    ![][1]\n\n你将看到如详细的通知中心结果，例如\n\n- 当消息成功发送到推送通知服务时。 \n    \n        <Outcome>The Notification was successfully sent to the Push Notification System</Outcome>\n\n- 如果没有为任何推送通知找到目标，你可能会看到以下响应（这表明可能没有找到传递通知的注册，因为这些注册具有一些不匹配的标记）\n\n        '<NotificationOutcome xmlns=\"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\"><Success>0</Success><Failure>0</Failure><Results i:nil=\"true\"/></NotificationOutcome>'\n\n### 将 toast 通知广播到 Windows \n\n请注意你在向 Windows 客户端发送广播 toast 通知时发送出去的标头。\n\n    hub.send_windows_notification(wns_payload)\n\n![][2]\n\n### 发送通知指定标记（或标记表达式）\n\n请注意添加到 HTTP 请求的 Tags HTTP 标头（在以下示例中，我们只将通知发送给了具有 'sports'负载的注册）\n\n    hub.send_windows_notification(wns_payload, \"sports\")\n\n![][3]\n\n### 发送通知指定多个标记\n\n请注意发送多个标记时 Tags HTTP 标头的变化方式。\n    \n    tags = {'sports', 'politics'}\n    hub.send_windows_notification(wns_payload, tags)\n\n![][4]\n\n### 模板通知\n\n请注意 Format HTTP 标头的变化和负载正文作为 HTTP 请求正文的一部分发送：\n\n**客户端 - 已注册的模板**\n\n        var template =\n                        @\"<toast><visual><binding template=\"\"ToastText01\"\"><text id=\"\"1\"\">$(greeting_en)</text></binding></visual></toast>\";\n            \n**服务器端 - 正在发送的负载**\n        \n        template_payload = {'greeting_en': 'Hello', 'greeting_fr': 'Salut'}\n        hub.send_template_notification(template_payload)\n\n![][5]\n\n\n## 后续步骤\n在本主题中，我们介绍了如何为通知中心创建简单的 Python REST 客户端。从这里你可以：\n\n* 下载完整的 [Python REST 包装器示例]，其中包含上述所有代码。\n* 在[突发新闻教程]中继续学习通知中心标记功能\n* 在[本地化新闻教程]中继续学习通知中心模板功能\n\n<!-- URLs -->\n[Python REST 包装器示例]: https://github.com/Azure/azure-notificationhubs-samples/tree/master/notificationhubs-rest-python\n[入门教程]: /documentation/articles/notification-hubs-windows-store-dotnet-get-started\n[突发新闻教程]: /documentation/articles/notification-hubs-windows-store-dotnet-send-breaking-news\n[本地化新闻教程]: /documentation/articles/notification-hubs-windows-store-dotnet-send-localized-breaking-news\n<!-- Images. -->\n[1]: ./media/notification-hubs-python-backend-how-to/DetailedLoggingInfo.png\n[2]: ./media/notification-hubs-python-backend-how-to/BroadcastScenario.png\n[3]: ./media/notification-hubs-python-backend-how-to/SendWithOneTag.png\n[4]: ./media/notification-hubs-python-backend-how-to/SendWithMultipleTags.png\n[5]: ./media/notification-hubs-python-backend-how-to/TemplatedNotification.png\n\n<!---HONumber=Mooncake_0104_2016-->"
}