{
  "nodes": [
    {
      "content": "如何使用本地编码器进行实时编码",
      "pos": [
        28,
        43
      ]
    },
    {
      "content": "本主题演示如何使用 .NET 通过本地编码器进行实时编码。",
      "pos": [
        63,
        92
      ]
    },
    {
      "content": "如何使用本地编码器进行实时编码",
      "pos": [
        320,
        335
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        339,
        343
      ]
    },
    {
      "content": "以下是完成本教程所需具备的条件：",
      "pos": [
        345,
        361
      ]
    },
    {
      "content": "一个 Azure 帐户。",
      "pos": [
        365,
        377
      ]
    },
    {
      "pos": [
        380,
        471
      ],
      "content": "一个媒体服务帐户。若要创建媒体服务帐户，请参阅<bpt id=\"p1\">[</bpt>如何创建媒体服务帐户<ept id=\"p1\">](/documentation/articles/media-services-create-account)</ept>。"
    },
    {
      "pos": [
        474,
        554
      ],
      "content": "设置开发环境。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>设置环境<ept id=\"p1\">](/documentation/articles/media-services-set-up-computer)</ept>。"
    },
    {
      "pos": [
        557,
        641
      ],
      "content": "网络摄像机。例如，<bpt id=\"p1\">[</bpt>Telestream Wirecast 编码器<ept id=\"p1\">](http://www.telestream.net/wirecast/overview.htm)</ept>。"
    },
    {
      "content": "建议阅读以下文章：",
      "pos": [
        644,
        653
      ]
    },
    {
      "content": "Azure 媒体服务 RTMP 支持和实时编码器",
      "pos": [
        658,
        682
      ]
    },
    {
      "content": "使用从本地编码器接收多比特率实时流的频道",
      "pos": [
        785,
        805
      ]
    },
    {
      "content": "示例",
      "pos": [
        877,
        879
      ]
    },
    {
      "content": "下面的代码示例演示如何完成以下任务：",
      "pos": [
        885,
        903
      ]
    },
    {
      "content": "连接到媒体服务",
      "pos": [
        907,
        914
      ]
    },
    {
      "content": "创建通道",
      "pos": [
        917,
        921
      ]
    },
    {
      "content": "更新通道",
      "pos": [
        924,
        928
      ]
    },
    {
      "content": "检索通道的输入终结点。应将输入终结点提供给本地实时编码器。实时编码器将相机的信号转换为流，以便发送到通道的输入（插入）终结点。",
      "pos": [
        931,
        994
      ]
    },
    {
      "content": "检索通道的预览终结点",
      "pos": [
        997,
        1007
      ]
    },
    {
      "content": "创建并启动节目",
      "pos": [
        1010,
        1017
      ]
    },
    {
      "content": "创建访问该节目所需的定位符",
      "pos": [
        1020,
        1033
      ]
    },
    {
      "content": "创建并启动 StreamingEndpoint",
      "pos": [
        1036,
        1059
      ]
    },
    {
      "content": "更新流式处理终结点",
      "pos": [
        1062,
        1071
      ]
    },
    {
      "content": "获取所有流式处理终结点的定位符",
      "pos": [
        1074,
        1089
      ]
    },
    {
      "content": "关闭资源",
      "pos": [
        1092,
        1096
      ]
    },
    {
      "pos": [
        1102,
        1246
      ],
      "content": "有关如何配置实时编码器的信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 媒体服务 RTMP 支持和实时编码器<ept id=\"p1\">](https://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何使用本地编码器进行实时编码\" \n    description=\"本主题演示如何使用 .NET 通过本地编码器进行实时编码。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako,cenkdin\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"  \n    wacn.date=\"03/17/2016\"/>\n\n#如何使用本地编码器进行实时编码\n\n##先决条件\n\n以下是完成本教程所需具备的条件：\n\n- 一个 Azure 帐户。\n- 一个媒体服务帐户。若要创建媒体服务帐户，请参阅[如何创建媒体服务帐户](/documentation/articles/media-services-create-account)。\n- 设置开发环境。有关详细信息，请参阅[设置环境](/documentation/articles/media-services-set-up-computer)。\n- 网络摄像机。例如，[Telestream Wirecast 编码器](http://www.telestream.net/wirecast/overview.htm)。 \n\n建议阅读以下文章：\n\n- [Azure 媒体服务 RTMP 支持和实时编码器](https://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/)\n- [使用从本地编码器接收多比特率实时流的频道](/documentation/articles/media-services-manage-channels-overview)\n \n\n##示例\n    \n下面的代码示例演示如何完成以下任务：\n\n- 连接到媒体服务\n- 创建通道\n- 更新通道\n- 检索通道的输入终结点。应将输入终结点提供给本地实时编码器。实时编码器将相机的信号转换为流，以便发送到通道的输入（插入）终结点。\n- 检索通道的预览终结点\n- 创建并启动节目\n- 创建访问该节目所需的定位符\n- 创建并启动 StreamingEndpoint\n- 更新流式处理终结点\n- 获取所有流式处理终结点的定位符\n- 关闭资源\n    \n有关如何配置实时编码器的信息，请参阅 [Azure 媒体服务 RTMP 支持和实时编码器](https://azure.microsoft.com/blog/2014/09/18/azure-media-services-rtmp-support-and-live-encoders/)。\n    \n        using System;\n        using System.Collections.Generic;\n        using System.Configuration;\n        using System.IO;\n        using System.Linq;\n        using System.Net;\n        using System.Security.Cryptography;\n        using System.Text;\n        using System.Threading.Tasks;\n        using Microsoft.WindowsAzure.MediaServices.Client;\n        using Newtonsoft.Json.Linq;\n        \n        namespace AMSLiveTest\n        {\n            class Program\n            {\n                private const string StreamingEndpointName = \"streamingendpoint001\";\n                private const string ChannelName = \"channel001\";\n                private const string AssetlName = \"asset001\";\n                private const string ProgramlName = \"program001\";\n        \n                private static readonly String _defaultScope = \"urn:WindowsAzureMediaServices\";\n\n                // Azure China uses a different API server and a different ACS Base Address from the Global.\n                private static readonly String _chinaApiServerUrl = \"https://wamsshaclus001rest-hs.chinacloudapp.cn/API/\";\n                private static readonly String _chinaAcsBaseAddressUrl = \"https://wamsprodglobal001acs.accesscontrol.chinacloudapi.cn\";\n\n                // Read values from the App.config file.\n                private static readonly string _mediaServicesAccountName =\n                    ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n                private static readonly string _mediaServicesAccountKey =\n                    ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n        \n                // Field for service context.\n                private static CloudMediaContext _context = null;\n                private static MediaServicesCredentials _cachedCredentials = null;\n        \n                static void Main(string[] args)\n                {\n                    // Create and cache the Media Services credentials in a static class variable.\n                    _cachedCredentials = new MediaServicesCredentials(\n                                    _mediaServicesAccountName,\n                                    _mediaServicesAccountKey,\n                                    _defaultScope,\n                                    _chinaAcsBaseAddressUrl);\n\n                    // Create the API server Uri\n                    _apiServer = new Uri(_chinaApiServerUrl);\n\n                    // Used the cached credentials to create CloudMediaContext.\n                    _context = new CloudMediaContext(_apiServer, _cachedCredentials);\n        \n                    IChannel channel = CreateAndStartChannel();\n        \n                    // Set the Live Encoder to point to the channel's input endpoint:\n                    string ingestUrl = channel.Input.Endpoints.FirstOrDefault().Url.ToString();\n        \n                    // Use the previewEndpoint to preview and verify \n                    // that the input from the encoder is actually reaching the Channel. \n                    string previewEndpoint = channel.Preview.Endpoints.FirstOrDefault().Url.ToString();\n        \n                    IProgram program = CreateAndStartProgram(channel);\n                    ILocator locator = CreateLocatorForAsset(program.Asset, program.ArchiveWindowLength);\n                    IStreamingEndpoint streamingEndpoint = CreateAndStartStreamingEndpoint();\n                    GetLocatorsInAllStreamingEndpoints(program.Asset);\n        \n                    // Once you are done streaming, clean up your resources.\n                    Cleanup(streamingEndpoint, channel);\n                }\n        \n                public static IChannel CreateAndStartChannel()\n                {\n                    //If you want to change the Smooth fragments to HLS segment ratio, you would set the ChannelCreationOptions’s Output property.\n    \n                    IChannel channel = _context.Channels.Create(\n                        new ChannelCreationOptions\n                        {\n                            Name = ChannelName,\n                            Input = CreateChannelInput(),\n                            Preview = CreateChannelPreview()\n                        });\n        \n                    //Starting and stopping Channels can take some time to execute. To determine the state of operations after calling Start or Stop, query the IChannel.State .\n    \n                    channel.Start();\n        \n                    return channel;\n                }\n        \n                private static ChannelInput CreateChannelInput()\n                {\n                    return new ChannelInput\n                    {\n                        StreamingProtocol = StreamingProtocol.RTMP,\n                        AccessControl = new ChannelAccessControl\n                        {\n                            IPAllowList = new List<IPRange>\n                            {\n                                new IPRange\n                                {\n                                    Name = \"TestChannelInput001\",\n                                    // Setting 0.0.0.0 for Address and 0 for SubnetPrefixLength\n                                    // will allow access to IP addresses.\n                                    Address = IPAddress.Parse(\"0.0.0.0\"),\n                                    SubnetPrefixLength = 0\n                                }\n                            }\n                        }\n                    };\n                }\n        \n                private static ChannelPreview CreateChannelPreview()\n                {\n                    return new ChannelPreview\n                    {\n                        AccessControl = new ChannelAccessControl\n                        {\n                            IPAllowList = new List<IPRange>\n                            {\n                                new IPRange\n                                {\n                                    Name = \"TestChannelPreview001\",\n                                    // Setting 0.0.0.0 for Address and 0 for SubnetPrefixLength\n                                    // will allow access to IP addresses.\n                                    Address = IPAddress.Parse(\"0.0.0.0\"),\n                                    SubnetPrefixLength = 0\n                                }\n                            }\n                        }\n                    };\n                }\n        \n                public static void UpdateCrossSiteAccessPoliciesForChannel(IChannel channel)\n                {\n                    var clientPolicy =\n                        @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n                    <access-policy>\n                        <cross-domain-access>\n                            <policy>\n                                <allow-from http-request-headers=\"\"*\"\" http-methods=\"\"*\"\">\n                                    <domain uri=\"\"*\"\"/>\n                                </allow-from>\n                                <grant-to>\n                                   <resource path=\"\"/\"\" include-subpaths=\"\"true\"\"/>\n                                </grant-to>\n                            </policy>\n                        </cross-domain-access>\n                    </access-policy>\";\n        \n                    var xdomainPolicy =\n                        @\"<?xml version=\"\"1.0\"\" ?>\n                    <cross-domain-policy>\n                        <allow-access-from domain=\"\"*\"\" />\n                    </cross-domain-policy>\";\n        \n                    channel.CrossSiteAccessPolicies.ClientAccessPolicy = clientPolicy;\n                    channel.CrossSiteAccessPolicies.CrossDomainPolicy = xdomainPolicy;\n        \n                    channel.Update();\n                }\n        \n                public static IProgram CreateAndStartProgram(IChannel channel)\n                {\n                    IAsset asset = _context.Assets.Create(AssetlName, AssetCreationOptions.None);\n        \n                    // Create a Program on the Channel. You can have multiple Programs that overlap or are sequential;\n                    // however each Program must have a unique name within your Media Services account.\n                    IProgram program = channel.Programs.Create(ProgramlName, TimeSpan.FromHours(3), asset.Id);\n                    program.Start();\n        \n                    return program;\n                }\n        \n                public static ILocator CreateLocatorForAsset(IAsset asset, TimeSpan ArchiveWindowLength)\n                {\n                    // You cannot create a streaming locator using an AccessPolicy that includes write or delete permissions.            \n\n                    var locator = _context.Locators.CreateLocator\n                        (\n                            LocatorType.OnDemandOrigin,\n                            asset,\n                            _context.AccessPolicies.Create\n                            (\n                                \"Live Stream Policy\",\n                                ArchiveWindowLength,\n                                AccessPermissions.Read\n                            )\n                        );\n        \n                    return locator;\n                }\n        \n                public static IStreamingEndpoint CreateAndStartStreamingEndpoint()\n                {\n                    var options = new StreamingEndpointCreationOptions\n                    {\n                        Name = StreamingEndpointName,\n                        ScaleUnits = 1,\n                        AccessControl = GetAccessControl(),\n                        CacheControl = GetCacheControl()\n                    };\n        \n                    IStreamingEndpoint streamingEndpoint = _context.StreamingEndpoints.Create(options);\n                    streamingEndpoint.Start();\n        \n                    return streamingEndpoint;\n                }\n        \n                private static StreamingEndpointAccessControl GetAccessControl()\n                {\n                    return new StreamingEndpointAccessControl\n                    {\n                        IPAllowList = new List<IPRange>\n                        {\n                            new IPRange\n                            {\n                                Name = \"Allow all\",\n                                Address = IPAddress.Parse(\"0.0.0.0\"),\n                                SubnetPrefixLength = 0\n                            }\n                        },\n        \n                        AkamaiSignatureHeaderAuthenticationKeyList = new List<AkamaiSignatureHeaderAuthenticationKey>\n                        {\n                            new AkamaiSignatureHeaderAuthenticationKey\n                            {\n                                Identifier = \"My key\",\n                                Expiration = DateTime.UtcNow + TimeSpan.FromDays(365),\n                                Base64Key = Convert.ToBase64String(GenerateRandomBytes(16))\n                            }\n                        }\n                    };\n                }\n        \n                private static byte[] GenerateRandomBytes(int length)\n                {\n                    var bytes = new byte[length];\n                    using (var rng = new RNGCryptoServiceProvider())\n                    {\n                        rng.GetBytes(bytes);\n                    }\n        \n                    return bytes;\n                }\n        \n                private static StreamingEndpointCacheControl GetCacheControl()\n                {\n                    return new StreamingEndpointCacheControl\n                    {\n                        MaxAge = TimeSpan.FromSeconds(1000)\n                    };\n                }\n        \n                public static void UpdateCrossSiteAccessPoliciesForStreamingEndpoint(IStreamingEndpoint streamingEndpoint)\n                {\n                    var clientPolicy =\n                        @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\"?>\n                    <access-policy>\n                        <cross-domain-access>\n                            <policy>\n                                <allow-from http-request-headers=\"\"*\"\" http-methods=\"\"*\"\">\n                                    <domain uri=\"\"*\"\"/>\n                                </allow-from>\n                                <grant-to>\n                                   <resource path=\"\"/\"\" include-subpaths=\"\"true\"\"/>\n                                </grant-to>\n                            </policy>\n                        </cross-domain-access>\n                    </access-policy>\";\n        \n                    var xdomainPolicy =\n                        @\"<?xml version=\"\"1.0\"\" ?>\n                    <cross-domain-policy>\n                        <allow-access-from domain=\"\"*\"\" />\n                    </cross-domain-policy>\";\n        \n                    streamingEndpoint.CrossSiteAccessPolicies.ClientAccessPolicy = clientPolicy;\n                    streamingEndpoint.CrossSiteAccessPolicies.CrossDomainPolicy = xdomainPolicy;\n        \n                    streamingEndpoint.Update();\n                }\n        \n                public static void GetLocatorsInAllStreamingEndpoints(IAsset asset)\n                {\n                    var locators = asset.Locators.Where(l => l.Type == LocatorType.OnDemandOrigin);\n                    var ismFile = asset.AssetFiles.AsEnumerable().FirstOrDefault(a => a.Name.EndsWith(\".ism\"));\n                    var template = new UriTemplate(\"{contentAccessComponent}/{ismFileName}/manifest\");\n                    var urls = locators.SelectMany(l =>\n                                _context\n                                    .StreamingEndpoints\n                                    .AsEnumerable()\n                                    .Where(se => se.State == StreamingEndpointState.Running)\n                                    .Select(\n                                        se =>\n                                            template.BindByPosition(new Uri(\"http://\" + se.HostName),\n                                            l.ContentAccessComponent,\n                                                ismFile.Name)))\n                                .ToArray();\n        \n                }\n        \n                public static void Cleanup(IStreamingEndpoint streamingEndpoint,\n                                            IChannel channel)\n                {\n                    if (streamingEndpoint != null)\n                    {\n                        streamingEndpoint.Stop();\n                        streamingEndpoint.Delete();\n                    }\n        \n                    IAsset asset;\n                    if (channel != null)\n                    {\n        \n                        foreach (var program in channel.Programs)\n                        {\n                            asset = _context.Assets.Where(se => se.Id == program.AssetId)\n                                                    .FirstOrDefault();\n        \n                            program.Stop();\n                            program.Delete();\n        \n                            if (asset != null)\n                            {\n                                foreach (var l in asset.Locators)\n                                    l.Delete();\n        \n                                asset.Delete();\n                            }\n                        }\n        \n                        channel.Stop();\n                        channel.Delete();\n                    }\n                }\n            }\n        }\n\n<!---HONumber=Mooncake_0307_2016-->"
}