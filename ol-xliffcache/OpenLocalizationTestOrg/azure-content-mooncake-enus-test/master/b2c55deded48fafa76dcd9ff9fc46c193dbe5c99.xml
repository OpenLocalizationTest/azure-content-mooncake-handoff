{
  "nodes": [
    {
      "content": "SQL 数据库的 XEvent 环形缓冲区代码 | Azure",
      "pos": [
        28,
        59
      ]
    },
    {
      "content": "提供一个 Transact-SQL 代码示例，以帮助你快速轻松地在 Azure SQL 数据库中使用环形缓存区目标。",
      "pos": [
        79,
        137
      ]
    },
    {
      "content": "SQL 数据库中扩展事件的环形缓冲区目标代码",
      "pos": [
        374,
        396
      ]
    },
    {
      "pos": [
        399,
        514
      ],
      "content": "你需要完整的代码示例以最简单快速的方式在测试期间捕获和报告扩展事件的信息。扩展事件数据最简单的目标是<bpt id=\"p1\">[</bpt>环形缓冲区目标<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/ff878182.aspx)</ept>。"
    },
    {
      "content": "本主题演示了一个 Transact-SQL 代码示例：",
      "pos": [
        517,
        544
      ]
    },
    {
      "content": "创建一个包含要演示的数据的表。",
      "pos": [
        550,
        565
      ]
    },
    {
      "pos": [
        570,
        623
      ],
      "content": "创建现有扩展事件的会话，即 <bpt id=\"p1\">**</bpt>sqlserver.sql\\_statement\\_starting<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        627,
        699
      ],
      "content": "此事件仅限于包含特定 Update 字符串的 SQL 语句：<bpt id=\"p1\">**</bpt>statement LIKE '%UPDATE tabEmployee%'<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        703,
        754
      ],
      "content": "选择要将事件的输出发送给环形缓冲区类型的目标，即 <bpt id=\"p1\">**</bpt>package0.ring\\_buffer<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "启动事件会话。",
      "pos": [
        759,
        766
      ]
    },
    {
      "content": "发出几个简单的 SQL UPDATE 语句。",
      "pos": [
        771,
        793
      ]
    },
    {
      "content": "发出 SQL SELECT 以检索环形缓冲区的事件输出。",
      "pos": [
        798,
        826
      ]
    },
    {
      "pos": [
        830,
        895
      ],
      "content": "<bpt id=\"p1\">**</bpt>sys.dm\\_xe\\_database\\_session\\_targets<ept id=\"p1\">**</ept> 和其他动态管理视图 (DMV) 联接在一起。"
    },
    {
      "content": "停止事件会话。",
      "pos": [
        900,
        907
      ]
    },
    {
      "content": "删除环形缓冲区目标以释放其资源。",
      "pos": [
        912,
        928
      ]
    },
    {
      "content": "删除事件会话和演示表。",
      "pos": [
        933,
        944
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        950,
        954
      ]
    },
    {
      "pos": [
        959,
        1003
      ],
      "content": "Azure 帐户和订阅。你可以注册<bpt id=\"p1\">[</bpt>试用版<ept id=\"p1\">](/pricing/1rmb-trial)</ept>。"
    },
    {
      "content": "可以在其中创建表的任何数据库。",
      "pos": [
        1008,
        1023
      ]
    },
    {
      "pos": [
        1027,
        1118
      ],
      "content": "你可以选择快速<bpt id=\"p1\">[</bpt>创建一个 <bpt id=\"p2\">**</bpt>AdventureWorksLT<ept id=\"p2\">**</ept> 演示数据库<ept id=\"p1\">](/documentation/articles/sql-database-get-started)</ept>。"
    },
    {
      "content": "SQL Server Management Studio (ssms.exe) 2015 年 8 月预览版或更高版本。可从以下位置下载最新的 ssms.exe：",
      "pos": [
        1123,
        1203
      ]
    },
    {
      "content": "主题中的链接。",
      "pos": [
        1208,
        1215
      ]
    },
    {
      "content": "直接指向下载位置的链接。",
      "pos": [
        1276,
        1288
      ]
    },
    {
      "content": "Microsoft 建议你定期更新 ssms.exe（可以每月更新一次）。",
      "pos": [
        1340,
        1377
      ]
    },
    {
      "content": "代码示例",
      "pos": [
        1383,
        1387
      ]
    },
    {
      "content": "只要稍加修改，就可以在 Azure SQL 数据库或 Microsoft SQL Server 上运行以下环形缓冲区的代码示例。不同之处在于步骤 5 的 FROM 子句中，有些动态管理视图 (DMV) 的名称出现了节点“\\_database”。例如：",
      "pos": [
        1390,
        1515
      ]
    },
    {
      "pos": [
        1519,
        1561
      ],
      "content": "sys.dm\\_xe<bpt id=\"p1\">**</bpt>\\_database<ept id=\"p1\">**</ept>\\_session\\_targets"
    },
    {
      "content": "sys.dm\\_xe\\_session\\_targets",
      "pos": [
        1564,
        1592
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        6012,
        6018
      ]
    },
    {
      "content": "环形缓冲区内容",
      "pos": [
        6024,
        6031
      ]
    },
    {
      "content": "我们使用了 ssms.exe 来运行该代码示例。",
      "pos": [
        6034,
        6058
      ]
    },
    {
      "pos": [
        6061,
        6105
      ],
      "content": "为了查看结果，我们单击了 <bpt id=\"p1\">**</bpt>target\\_data\\_XML<ept id=\"p1\">**</ept> 列标题下的单元格。"
    },
    {
      "pos": [
        6107,
        6203
      ],
      "content": "然后，在结果窗格中，我们单击了 <bpt id=\"p1\">**</bpt>target\\_data\\_XML<ept id=\"p1\">**</ept> 列标题下的单元格。这样就在 ssms.exe 中按结果单元格内容显示的顺序，以 XML 格式创建了另一个文件选项卡。"
    },
    {
      "pos": [
        6206,
        6248
      ],
      "content": "输出显示在以下块中。结果看起来很长，但其实只是两个 <bpt id=\"p1\">**</bpt>&lt;event\\&gt;<ept id=\"p1\">**</ept> 元素。"
    },
    {
      "content": "释放环形缓冲区占用的资源",
      "pos": [
        9201,
        9213
      ]
    },
    {
      "pos": [
        9216,
        9257
      ],
      "content": "处理完环形缓冲区后，可以发出 <bpt id=\"p1\">**</bpt>ALTER<ept id=\"p1\">**</ept> 将它删除并释放其资源，如下所示："
    },
    {
      "content": "事件会话的定义将会更新，但不会删除。然后可以将环形缓冲区的另一个实例添加到事件会话：",
      "pos": [
        9390,
        9432
      ]
    },
    {
      "content": "详细信息",
      "pos": [
        9665,
        9669
      ]
    },
    {
      "content": "有关 Azure SQL 数据库中扩展事件的主要主题是：",
      "pos": [
        9672,
        9700
      ]
    },
    {
      "pos": [
        9705,
        9837
      ],
      "content": "<bpt id=\"p1\">[</bpt>SQL 数据库中扩展事件的注意事项<ept id=\"p1\">](/documentation/articles/sql-database-xevent-db-diff-from-svr)</ept>，对比 Azure SQL 数据库与 Microsoft SQL Server 的扩展事件的某些方面。"
    },
    {
      "content": "可通过以下链接访问有关扩展事件的其他代码示例主题。不过，你必须定期检查所有示例，以确定这些示例是针对 Microsoft SQL Server 还是 Azure SQL 数据库。然后，你可以在运行示例时确定是否要做出细微的更改。",
      "pos": [
        9840,
        9954
      ]
    },
    {
      "pos": [
        9959,
        10062
      ],
      "content": "Azure SQL 数据库的代码示例：<bpt id=\"p1\">[</bpt>SQL 数据库中扩展事件的事件文件目标代码<ept id=\"p1\">](/documentation/articles/sql-database-xevent-code-event-file)</ept>"
    }
  ],
  "content": "<properties \n    pageTitle=\"SQL 数据库的 XEvent 环形缓冲区代码 | Azure\" \n    description=\"提供一个 Transact-SQL 代码示例，以帮助你快速轻松地在 Azure SQL 数据库中使用环形缓存区目标。\" \n    services=\"sql-database\" \n    documentationCenter=\"\" \n    authors=\"MightyPen\" \n    manager=\"jeffreyg\" \n    editor=\"\" \n    tags=\"\"/>\n\n\n<tags \n    ms.service=\"sql-database\" \n    ms.date=\"12/30/2015\" \n    wacn.date=\"02/26/2016\"/>\n\n\n# SQL 数据库中扩展事件的环形缓冲区目标代码\n\n\n你需要完整的代码示例以最简单快速的方式在测试期间捕获和报告扩展事件的信息。扩展事件数据最简单的目标是[环形缓冲区目标](http://msdn.microsoft.com/zh-cn/library/ff878182.aspx)。\n\n\n本主题演示了一个 Transact-SQL 代码示例：\n\n\n1. 创建一个包含要演示的数据的表。\n\n2. 创建现有扩展事件的会话，即 **sqlserver.sql\\_statement\\_starting**。\n - 此事件仅限于包含特定 Update 字符串的 SQL 语句：**statement LIKE '%UPDATE tabEmployee%'**。\n - 选择要将事件的输出发送给环形缓冲区类型的目标，即 **package0.ring\\_buffer**。\n\n3. 启动事件会话。\n\n4. 发出几个简单的 SQL UPDATE 语句。\n\n5. 发出 SQL SELECT 以检索环形缓冲区的事件输出。\n - **sys.dm\\_xe\\_database\\_session\\_targets** 和其他动态管理视图 (DMV) 联接在一起。\n\n6. 停止事件会话。\n\n7. 删除环形缓冲区目标以释放其资源。\n\n8. 删除事件会话和演示表。\n\n\n## 先决条件\n\n\n- Azure 帐户和订阅。你可以注册[试用版](/pricing/1rmb-trial)。\n\n\n- 可以在其中创建表的任何数据库。\n - 你可以选择快速[创建一个 **AdventureWorksLT** 演示数据库](/documentation/articles/sql-database-get-started)。\n\n\n- SQL Server Management Studio (ssms.exe) 2015 年 8 月预览版或更高版本。可从以下位置下载最新的 ssms.exe：\n - [主题中的链接。](http://msdn.microsoft.com/zh-cn/library/mt238290.aspx)\n - [直接指向下载位置的链接。](http://go.microsoft.com/fwlink/?linkid=616025)\n - Microsoft 建议你定期更新 ssms.exe（可以每月更新一次）。\n\n\n## 代码示例\n\n\n只要稍加修改，就可以在 Azure SQL 数据库或 Microsoft SQL Server 上运行以下环形缓冲区的代码示例。不同之处在于步骤 5 的 FROM 子句中，有些动态管理视图 (DMV) 的名称出现了节点“\\_database”。例如：\n\n- sys.dm\\_xe**\\_database**\\_session\\_targets\n- sys.dm\\_xe\\_session\\_targets\n \n    \n        GO\n        ----  Transact-SQL.\n        ---- Step set 1.\n        \n        SET NOCOUNT ON;\n        GO\n        \n        \n        IF EXISTS\n            (SELECT * FROM sys.objects\n                WHERE type = 'U' and name = 'tabEmployee')\n        BEGIN\n            DROP TABLE tabEmployee;\n        END\n        GO\n        \n        \n        CREATE TABLE tabEmployee\n        (\n            EmployeeGuid         uniqueIdentifier   not null  default newid()  primary key,\n            EmployeeId           int                not null  identity(1,1),\n            EmployeeKudosCount   int                not null  default 0,\n            EmployeeDescr        nvarchar(256)          null\n        );\n        GO\n        \n        \n        INSERT INTO tabEmployee ( EmployeeDescr )\n            VALUES ( 'Jane Doe' );\n        GO\n        \n        ---- Step set 2.\n        \n        \n        IF EXISTS\n            (SELECT * from sys.database_event_sessions\n                WHERE name = 'eventsession_gm_azuresqldb51')\n        BEGIN\n            DROP EVENT SESSION eventsession_gm_azuresqldb51\n                ON DATABASE;\n        END\n        GO\n        \n        \n        CREATE\n            EVENT SESSION eventsession_gm_azuresqldb51\n            ON DATABASE\n            ADD EVENT\n                sqlserver.sql_statement_starting\n                    (\n                    ACTION (sqlserver.sql_text)\n                    WHERE statement LIKE '%UPDATE tabEmployee%'\n                    )\n            ADD TARGET\n                package0.ring_buffer\n                    (SET\n                        max_memory = 500   -- Units of KB.\n                    );\n        GO\n        \n        ---- Step set 3.\n        \n        \n        ALTER EVENT SESSION eventsession_gm_azuresqldb51\n            ON DATABASE\n            STATE = START;\n        GO\n        \n        ---- Step set 4.\n        \n        \n        SELECT 'BEFORE_Updates', EmployeeKudosCount, * FROM tabEmployee;\n        \n        UPDATE tabEmployee\n            SET EmployeeKudosCount = EmployeeKudosCount + 102;\n        \n        UPDATE tabEmployee\n            SET EmployeeKudosCount = EmployeeKudosCount + 1015;\n        \n        SELECT 'AFTER__Updates', EmployeeKudosCount, * FROM tabEmployee;\n        GO\n        \n        ---- Step set 5.\n        \n        \n        SELECT\n                se.name  AS [session-name],\n                ev.event_name,\n                ac.action_name,\n                st.target_name,\n                se.session_source,\n                st.target_data,\n                CAST(st.target_data AS XML)  AS [target_data_XML]\n            FROM\n                           sys.dm_xe_database_session_event_actions  AS ac\n                INNER JOIN sys.dm_xe_database_session_events         AS ev  ON ev.event_name = ac.event_name\n                AND CAST(ev.event_session_address AS BINARY(8)) = CAST(ac.event_session_address AS BINARY(8))\n        \n                INNER JOIN sys.dm_xe_database_session_object_columns AS oc\n                ON CAST(oc.event_session_address AS BINARY(8)) = CAST(ac.event_session_address AS BINARY(8))\n        \n                INNER JOIN sys.dm_xe_database_session_targets        AS st\n                ON CAST(st.event_session_address AS BINARY(8)) = CAST(ac.event_session_address AS BINARY(8))\n        \n                INNER JOIN sys.dm_xe_database_sessions               AS se\n                ON CAST(ac.event_session_address AS BINARY(8)) = CAST(se.address AS BINARY(8))\n            WHERE\n                oc.column_name = 'occurrence_number'\n                AND\n                se.name        = 'eventsession_gm_azuresqldb51'\n                AND\n                ac.action_name = 'sql_text'\n            ORDER BY\n                se.name,\n                ev.event_name,\n                ac.action_name,\n                st.target_name,\n                se.session_source;\n        GO\n        \n        ---- Step set 6.\n        \n        \n        ALTER EVENT SESSION eventsession_gm_azuresqldb51\n            ON DATABASE\n            STATE = STOP;\n        GO\n        \n        ---- Step set 7.\n        \n        \n        ALTER EVENT SESSION eventsession_gm_azuresqldb51\n            ON DATABASE\n            DROP TARGET package0.ring_buffer;\n        GO\n        \n        ---- Step set 8.\n        \n        \n        DROP EVENT SESSION eventsession_gm_azuresqldb51\n            ON DATABASE;\n        GO\n        \n        DROP TABLE tabEmployee;\n        GO\n\n\n\n&nbsp;\n\n\n## 环形缓冲区内容\n\n\n我们使用了 ssms.exe 来运行该代码示例。\n\n\n为了查看结果，我们单击了 **target\\_data\\_XML** 列标题下的单元格。\n\n然后，在结果窗格中，我们单击了 **target\\_data\\_XML** 列标题下的单元格。这样就在 ssms.exe 中按结果单元格内容显示的顺序，以 XML 格式创建了另一个文件选项卡。\n\n\n输出显示在以下块中。结果看起来很长，但其实只是两个 **<event\\>** 元素。\n    \n    <RingBufferTarget truncated=\"0\" processingTime=\"0\" totalEventsProcessed=\"2\" eventCount=\"2\" droppedCount=\"0\" memoryUsed=\"1728\">\n      <event name=\"sql_statement_starting\" package=\"sqlserver\" timestamp=\"2015-09-22T15:29:31.317Z\">\n        <data name=\"state\">\n          <type name=\"statement_starting_state\" package=\"sqlserver\" />\n          <value>0</value>\n          <text>Normal</text>\n        </data>\n        <data name=\"line_number\">\n          <type name=\"int32\" package=\"package0\" />\n          <value>7</value>\n        </data>\n        <data name=\"offset\">\n          <type name=\"int32\" package=\"package0\" />\n          <value>184</value>\n        </data>\n        <data name=\"offset_end\">\n          <type name=\"int32\" package=\"package0\" />\n          <value>328</value>\n        </data>\n        <data name=\"statement\">\n          <type name=\"unicode_string\" package=\"package0\" />\n          <value>UPDATE tabEmployee\n        SET EmployeeKudosCount = EmployeeKudosCount + 102</value>\n        </data>\n        <action name=\"sql_text\" package=\"sqlserver\">\n          <type name=\"unicode_string\" package=\"package0\" />\n          <value>\n    ---- Step set 4.\n    \n    \n    SELECT 'BEFORE_Updates', EmployeeKudosCount, * FROM tabEmployee;\n    \n    UPDATE tabEmployee\n        SET EmployeeKudosCount = EmployeeKudosCount + 102;\n    \n    UPDATE tabEmployee\n        SET EmployeeKudosCount = EmployeeKudosCount + 1015;\n    \n    SELECT 'AFTER__Updates', EmployeeKudosCount, * FROM tabEmployee;\n    </value>\n        </action>\n      </event>\n      <event name=\"sql_statement_starting\" package=\"sqlserver\" timestamp=\"2015-09-22T15:29:31.327Z\">\n        <data name=\"state\">\n          <type name=\"statement_starting_state\" package=\"sqlserver\" />\n          <value>0</value>\n          <text>Normal</text>\n        </data>\n        <data name=\"line_number\">\n          <type name=\"int32\" package=\"package0\" />\n          <value>10</value>\n        </data>\n        <data name=\"offset\">\n          <type name=\"int32\" package=\"package0\" />\n          <value>340</value>\n        </data>\n        <data name=\"offset_end\">\n          <type name=\"int32\" package=\"package0\" />\n          <value>486</value>\n        </data>\n        <data name=\"statement\">\n          <type name=\"unicode_string\" package=\"package0\" />\n          <value>UPDATE tabEmployee\n        SET EmployeeKudosCount = EmployeeKudosCount + 1015</value>\n        </data>\n        <action name=\"sql_text\" package=\"sqlserver\">\n          <type name=\"unicode_string\" package=\"package0\" />\n          <value>\n    ---- Step set 4.\n    \n    \n    SELECT 'BEFORE_Updates', EmployeeKudosCount, * FROM tabEmployee;\n    \n    UPDATE tabEmployee\n        SET EmployeeKudosCount = EmployeeKudosCount + 102;\n    \n    UPDATE tabEmployee\n        SET EmployeeKudosCount = EmployeeKudosCount + 1015;\n    \n    SELECT 'AFTER__Updates', EmployeeKudosCount, * FROM tabEmployee;\n    </value>\n        </action>\n      </event>\n    </RingBufferTarget>\n\n\n\n#### 释放环形缓冲区占用的资源\n\n\n处理完环形缓冲区后，可以发出 **ALTER** 将它删除并释放其资源，如下所示：\n\n\n    \n    ALTER EVENT SESSION eventsession_gm_azuresqldb51\n        ON DATABASE\n        DROP TARGET package0.ring_buffer;\n    GO\n\n\n\n事件会话的定义将会更新，但不会删除。然后可以将环形缓冲区的另一个实例添加到事件会话：\n\n    \n    ALTER EVENT SESSION eventsession_gm_azuresqldb51\n        ON DATABASE\n        ADD TARGET\n            package0.ring_buffer\n                (SET\n                    max_memory = 500   -- Units of KB.\n                );\n\n\n\n## 详细信息\n\n\n有关 Azure SQL 数据库中扩展事件的主要主题是：\n\n\n- [SQL 数据库中扩展事件的注意事项](/documentation/articles/sql-database-xevent-db-diff-from-svr)，对比 Azure SQL 数据库与 Microsoft SQL Server 的扩展事件的某些方面。\n\n\n可通过以下链接访问有关扩展事件的其他代码示例主题。不过，你必须定期检查所有示例，以确定这些示例是针对 Microsoft SQL Server 还是 Azure SQL 数据库。然后，你可以在运行示例时确定是否要做出细微的更改。\n\n\n- Azure SQL 数据库的代码示例：[SQL 数据库中扩展事件的事件文件目标代码](/documentation/articles/sql-database-xevent-code-event-file)\n\n\n<!--\n('lock_acquired' event.)\n\n- Code sample for SQL Server: [Determine Which Queries Are Holding Locks](http://msdn.microsoft.com/zh-cn/library/bb677357.aspx)\n- Code sample for SQL Server: [Find the Objects That Have the Most Locks Taken on Them](http://msdn.microsoft.com/zh-cn/library/bb630355.aspx)\n-->\n\n<!---HONumber=Mooncake_0215_2016-->\n"
}