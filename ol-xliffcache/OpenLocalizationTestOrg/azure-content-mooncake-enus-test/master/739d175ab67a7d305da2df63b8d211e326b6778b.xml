{
  "nodes": [
    {
      "content": "开始使用 Azure 存储空间和 Visual Studio 连接服务（WebJob 项目）",
      "pos": [
        28,
        74
      ]
    },
    {
      "content": "在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的 Azure WebJobs 项目中使用 Azure 表存储",
      "pos": [
        93,
        175
      ]
    },
    {
      "content": "Azure 存储入门（Azure WebJob 项目）",
      "pos": [
        377,
        404
      ]
    },
    {
      "content": "概述",
      "pos": [
        409,
        411
      ]
    },
    {
      "pos": [
        413,
        559
      ],
      "content": "本文章提供了 C# 代码示例，用于演示如何在 Azure 表存储服务中使用 Azure WebJobs SDK 版本 1.x。这些代码示例使用 <bpt id=\"p1\">[</bpt>WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 版本 1.x。"
    },
    {
      "pos": [
        561,
        771
      ],
      "content": "Azure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>如何通过.NET 使用表存储<ept id=\"p1\">]</ept><bpt id=\"p2\">(/documentation/articles/storage-dotnet-how-to-use-tables#create-a-table \"</bpt>如何通过 .NET 使用表存储<ept id=\"p2\">\")</ept>。"
    },
    {
      "pos": [
        774,
        899
      ],
      "content": "一些代码段显示了<bpt id=\"p1\">[</bpt>手动调用<ept id=\"p1\">](/documentation/articles/vs-storage-webjobs-getting-started-blobs#manual)</ept>（即：不是使用触发器属性之一调用）的函数中使用的 <bpt id=\"p2\">**</bpt>Table<ept id=\"p2\">**</ept> 属性。"
    },
    {
      "content": "如何向表中添加实体",
      "pos": [
        904,
        913
      ]
    },
    {
      "pos": [
        915,
        1035
      ],
      "content": "若要将实体添加到表中，请使用具有 <bpt id=\"p1\">**</bpt>ICollector<ph id=\"ph1\">&lt;T&gt;</ph><ept id=\"p1\">**</ept> 或 <bpt id=\"p2\">**</bpt>IAsyncCollector<ph id=\"ph2\">&lt;T&gt;</ph><ept id=\"p2\">**</ept> 参数的 <bpt id=\"p3\">**</bpt>Table<ept id=\"p3\">**</ept> 属性，其中 <bpt id=\"p4\">**</bpt>T<ept id=\"p4\">**</ept> 指定你想要添加的实体的架构。属性构造函数使用指定表名称的字符串参数。"
    },
    {
      "pos": [
        1037,
        1078
      ],
      "content": "下面的代码示例将 <bpt id=\"p1\">**</bpt>Person<ept id=\"p1\">**</ept> 实体添加到名为 <bpt id=\"p2\">*</bpt>Ingress<ept id=\"p2\">*</ept> 的表。"
    },
    {
      "pos": [
        1533,
        1659
      ],
      "content": "通常情况下，用于 <bpt id=\"p1\">**</bpt>ICollector<ept id=\"p1\">**</ept> 的类型派生自 <bpt id=\"p2\">**</bpt>TableEntity<ept id=\"p2\">**</ept> 或者通过实现 <bpt id=\"p3\">**</bpt>ITableEntity<ept id=\"p3\">**</ept> 获得，但这不是必需的。以下 <bpt id=\"p4\">**</bpt>Person<ept id=\"p4\">**</ept> 类之一适用于前面 <bpt id=\"p5\">**</bpt>Ingress<ept id=\"p5\">**</ept> 方法中所示的代码。"
    },
    {
      "pos": [
        1963,
        2024
      ],
      "content": "如果你想要直接使用 Azure 存储 API，则可以向方法签名添加 <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> 参数。"
    },
    {
      "content": "实时监视",
      "pos": [
        2029,
        2033
      ]
    },
    {
      "content": "因为数据入口函数通常处理大量数据，WebJobs SDK 仪表板提供了实时监视的数据。“调用日志”部分告诉你函数是否仍在运行。",
      "pos": [
        2035,
        2098
      ]
    },
    {
      "content": "Ingress 函数正在运行",
      "pos": [
        2102,
        2116
      ]
    },
    {
      "content": "“调用详细信息”页在运行时报告函数的进度（写入的实体数），并且为你提供中止的机会。",
      "pos": [
        2189,
        2230
      ]
    },
    {
      "content": "Ingress 函数正在运行",
      "pos": [
        2234,
        2248
      ]
    },
    {
      "pos": [
        2322,
        2349
      ],
      "content": "该函数完成时，<bpt id=\"p1\">**</bpt>调用详细信息<ept id=\"p1\">**</ept>页会报告写入的行数。"
    },
    {
      "content": "Ingress 函数已完成",
      "pos": [
        2353,
        2366
      ]
    },
    {
      "content": "如何从表中读取多个实体",
      "pos": [
        2442,
        2453
      ]
    },
    {
      "pos": [
        2455,
        2559
      ],
      "content": "若要读取表，可将 <bpt id=\"p1\">**</bpt>Table<ept id=\"p1\">**</ept> 属性用于 <bpt id=\"p2\">**</bpt>IQueryable<ph id=\"ph1\">&lt;T&gt;</ph><ept id=\"p2\">**</ept> 参数，其中类型 <bpt id=\"p3\">**</bpt>T<ept id=\"p3\">**</ept> 派生自 <bpt id=\"p4\">**</bpt>TableEntity<ept id=\"p4\">**</ept> 或者通过实现 <bpt id=\"p5\">**</bpt>ITableEntity<ept id=\"p5\">**</ept> 来获得。"
    },
    {
      "pos": [
        2561,
        2592
      ],
      "content": "下面的代码示例读取并记录 <bpt id=\"p1\">**</bpt>Ingress<ept id=\"p1\">**</ept> 表中所有行："
    },
    {
      "content": "如何从表中读取单个实体",
      "pos": [
        3013,
        3024
      ]
    },
    {
      "pos": [
        3026,
        3086
      ],
      "content": "有一个 <bpt id=\"p1\">**</bpt>Table<ept id=\"p1\">**</ept> 属性构造函数具有两个附加参数，当你想要绑定到单个表实体时，该参数可以用于指定分区键和行键的。"
    },
    {
      "pos": [
        3088,
        3132
      ],
      "content": "下面的代码示例基于队列消息中接收到的分区键和行键读取 <bpt id=\"p1\">**</bpt>Person<ept id=\"p1\">**</ept> 实体的表行："
    },
    {
      "pos": [
        3806,
        3846
      ],
      "content": "此示例中的 <bpt id=\"p1\">**</bpt>Person<ept id=\"p1\">**</ept> 类不必实现 <bpt id=\"p2\">**</bpt>ITableEntity<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "如何直接使用 .NET 存储 API 处理表",
      "pos": [
        3851,
        3873
      ]
    },
    {
      "pos": [
        3875,
        3927
      ],
      "content": "你还可以将 <bpt id=\"p1\">**</bpt>Table<ept id=\"p1\">**</ept> 属性和 <bpt id=\"p2\">**</bpt>CloudTable<ept id=\"p2\">**</ept> 对象一起使用，以便更灵活地处理表。"
    },
    {
      "pos": [
        3929,
        3978
      ],
      "content": "下面的代码示例使用 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 对象将单个实体添加到 <bpt id=\"p2\">*</bpt>Ingress<ept id=\"p2\">*</ept> 表中。"
    },
    {
      "pos": [
        4445,
        4554
      ],
      "content": "有关如何使用 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 对象的详细信息，请参阅<bpt id=\"p2\">[</bpt>如何通过 .NET 使用表存储<ept id=\"p2\">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。"
    },
    {
      "content": "队列操作指南文章涵盖的相关主题",
      "pos": [
        4559,
        4574
      ]
    },
    {
      "pos": [
        4576,
        4725
      ],
      "content": "有关如何处理队列消息触发的表处理，或者不特定于表处理的 WebJobs SDK 方案的信息，请参阅<bpt id=\"p1\">[</bpt>如何通过 WebJobs SDK 使用 Azure 队列存储<ept id=\"p1\">](/documentation/articles/vs-storage-webjobs-getting-started-queues)</ept>。"
    },
    {
      "content": "后续步骤",
      "pos": [
        4732,
        4736
      ]
    },
    {
      "pos": [
        4738,
        4891
      ],
      "content": "本文章提供了代码示例，演示如何处理用于操作 Azure 表的常见方案。有关如何使用 Azure WebJobs 和 WebJobs SDK 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure WebJobs 推荐资源<ept id=\"p1\">](/documentation/articles/websites-webjobs-resources)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"开始使用 Azure 存储空间和 Visual Studio 连接服务（WebJob 项目）\"\n    description=\"在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的 Azure WebJobs 项目中使用 Azure 表存储\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"TomArcher\"\n    manager=\"douge\"\n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# Azure 存储入门（Azure WebJob 项目）\n\n## 概述\n\n本文章提供了 C# 代码示例，用于演示如何在 Azure 表存储服务中使用 Azure WebJobs SDK 版本 1.x。这些代码示例使用 [WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk) 版本 1.x。\n\nAzure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。有关详细信息，请参阅[如何通过.NET 使用表存储](/documentation/articles/storage-dotnet-how-to-use-tables#create-a-table \"如何通过 .NET 使用表存储\")。\n\n\n一些代码段显示了[手动调用](/documentation/articles/vs-storage-webjobs-getting-started-blobs#manual)（即：不是使用触发器属性之一调用）的函数中使用的 **Table** 属性。\n\n## 如何向表中添加实体\n\n若要将实体添加到表中，请使用具有 **ICollector<T>** 或 **IAsyncCollector<T>** 参数的 **Table** 属性，其中 **T** 指定你想要添加的实体的架构。属性构造函数使用指定表名称的字符串参数。\n\n下面的代码示例将 **Person** 实体添加到名为 *Ingress* 的表。\n\n        [NoAutomaticTrigger]\n        public static void IngressDemo(\n            [Table(\"Ingress\")] ICollector<Person> tableBinding)\n        {\n            for (int i = 0; i < 100000; i++)\n            {\n                tableBinding.Add(\n                    new Person() {\n                        PartitionKey = \"Test\",\n                        RowKey = i.ToString(),\n                        Name = \"Name\" }\n                    );\n            }\n        }\n\n通常情况下，用于 **ICollector** 的类型派生自 **TableEntity** 或者通过实现 **ITableEntity** 获得，但这不是必需的。以下 **Person** 类之一适用于前面 **Ingress** 方法中所示的代码。\n\n        public class Person : TableEntity\n        {\n            public string Name { get; set; }\n        }\n\n        public class Person\n        {\n            public string PartitionKey { get; set; }\n            public string RowKey { get; set; }\n            public string Name { get; set; }\n        }\n\n如果你想要直接使用 Azure 存储 API，则可以向方法签名添加 **CloudStorageAccount** 参数。\n\n## 实时监视\n\n因为数据入口函数通常处理大量数据，WebJobs SDK 仪表板提供了实时监视的数据。“调用日志”部分告诉你函数是否仍在运行。\n\n![Ingress 函数正在运行](./media/vs-storage-webjobs-getting-started-tables/ingressrunning.png)\n\n“调用详细信息”页在运行时报告函数的进度（写入的实体数），并且为你提供中止的机会。\n\n![Ingress 函数正在运行](./media/vs-storage-webjobs-getting-started-tables/ingressprogress.png)\n\n该函数完成时，**调用详细信息**页会报告写入的行数。\n\n![Ingress 函数已完成](./media/vs-storage-webjobs-getting-started-tables/ingresssuccess.png)\n\n## 如何从表中读取多个实体\n\n若要读取表，可将 **Table** 属性用于 **IQueryable<T>** 参数，其中类型 **T** 派生自 **TableEntity** 或者通过实现 **ITableEntity** 来获得。\n\n下面的代码示例读取并记录 **Ingress** 表中所有行：\n\n        public static void ReadTable(\n            [Table(\"Ingress\")] IQueryable<Person> tableBinding,\n            TextWriter logger)\n        {\n            var query = from p in tableBinding select p;\n            foreach (Person person in query)\n            {\n                logger.WriteLine(\"PK:{0}, RK:{1}, Name:{2}\",\n                    person.PartitionKey, person.RowKey, person.Name);\n            }\n        }\n\n### 如何从表中读取单个实体\n\n有一个 **Table** 属性构造函数具有两个附加参数，当你想要绑定到单个表实体时，该参数可以用于指定分区键和行键的。\n\n下面的代码示例基于队列消息中接收到的分区键和行键读取 **Person** 实体的表行：\n\n        public static void ReadTableEntity(\n            [QueueTrigger(\"inputqueue\")] Person personInQueue,\n            [Table(\"persontable\",\"{PartitionKey}\", \"{RowKey}\")] Person personInTable,\n            TextWriter logger)\n        {\n            if (personInTable == null)\n            {\n                logger.WriteLine(\"Person not found: PK:{0}, RK:{1}\",\n                        personInQueue.PartitionKey, personInQueue.RowKey);\n            }\n            else\n            {\n                logger.WriteLine(\"Person found: PK:{0}, RK:{1}, Name:{2}\",\n                        personInTable.PartitionKey, personInTable.RowKey, personInTable.Name);\n            }\n        }\n\n\n此示例中的 **Person** 类不必实现 **ITableEntity**。\n\n## 如何直接使用 .NET 存储 API 处理表\n\n你还可以将 **Table** 属性和 **CloudTable** 对象一起使用，以便更灵活地处理表。\n\n下面的代码示例使用 **CloudTable** 对象将单个实体添加到 *Ingress* 表中。\n\n        public static void UseStorageAPI(\n            [Table(\"Ingress\")] CloudTable tableBinding,\n            TextWriter logger)\n        {\n            var person = new Person()\n                {\n                    PartitionKey = \"Test\",\n                    RowKey = \"100\",\n                    Name = \"Name\"\n                };\n            TableOperation insertOperation = TableOperation.Insert(person);\n            tableBinding.Execute(insertOperation);\n        }\n\n有关如何使用 **CloudTable** 对象的详细信息，请参阅[如何通过 .NET 使用表存储](/documentation/articles/storage-dotnet-how-to-use-tables)。\n\n## 队列操作指南文章涵盖的相关主题\n\n有关如何处理队列消息触发的表处理，或者不特定于表处理的 WebJobs SDK 方案的信息，请参阅[如何通过 WebJobs SDK 使用 Azure 队列存储](/documentation/articles/vs-storage-webjobs-getting-started-queues)。\n\n\n\n## 后续步骤\n\n本文章提供了代码示例，演示如何处理用于操作 Azure 表的常见方案。有关如何使用 Azure WebJobs 和 WebJobs SDK 的详细信息，请参阅 [Azure WebJobs 推荐资源](/documentation/articles/websites-webjobs-resources)。\n \n\n<!---HONumber=Mooncake_0104_2016-->"
}