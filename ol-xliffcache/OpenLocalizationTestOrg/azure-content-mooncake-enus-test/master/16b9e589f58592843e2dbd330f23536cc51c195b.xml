{
  "nodes": [
    {
      "content": "如何使用媒体编码器标准通过 .NET 来生成缩略图",
      "pos": [
        28,
        53
      ]
    },
    {
      "content": "本主题说明如何使用媒体服务标准，通过 .NET 同时为资产编码并生成缩略图。",
      "pos": [
        73,
        111
      ]
    },
    {
      "content": "如何使用媒体编码器标准通过 .NET 来生成缩略图",
      "pos": [
        331,
        356
      ]
    },
    {
      "pos": [
        358,
        524
      ],
      "content": "本主题说明如何使用媒体服务 .NET SDK 来为资产编码，并使用媒体编码器标准生成缩略图。本主题将定义 XML 和 JSON 缩略图预设，用于创建同时执行编码和生成缩略图的任务。<bpt id=\"p1\">[</bpt>此文档<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt269962.aspx)</ept>包含这些预设所用的元素的说明。"
    },
    {
      "pos": [
        526,
        632
      ],
      "content": "请务必仔细阅读<bpt id=\"p1\">[</bpt>注意事项<ept id=\"p1\">](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#considerations)</ept>部分。"
    },
    {
      "content": "示例",
      "pos": [
        636,
        638
      ]
    },
    {
      "content": "以下代码示例使用媒体服务 .NET SDK 执行下列任务：",
      "pos": [
        640,
        669
      ]
    },
    {
      "content": "创建编码作业。",
      "pos": [
        673,
        680
      ]
    },
    {
      "content": "获取对媒体编码器标准版编码器的引用。",
      "pos": [
        683,
        701
      ]
    },
    {
      "pos": [
        704,
        1103
      ],
      "content": "加载预设 <bpt id=\"p1\">[</bpt>XML<ept id=\"p1\">](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#xml)</ept> 或 <bpt id=\"p2\">[</bpt>JSON<ept id=\"p2\">](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#json)</ept>，其中包含生成缩略图所需的编码预设和信息。可以在一个文件中保存此 <bpt id=\"p3\">[</bpt>XML<ept id=\"p3\">](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#xml)</ept> 或 <bpt id=\"p4\">[</bpt>JSON<ept id=\"p4\">](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#json)</ept>，并使用以下代码来加载该文件。"
    },
    {
      "content": "将一个编码任务添加到该作业。",
      "pos": [
        1231,
        1245
      ]
    },
    {
      "content": "指定要编码的输入资产。",
      "pos": [
        1249,
        1260
      ]
    },
    {
      "content": "创建将包含所编码资产的输出资产。",
      "pos": [
        1263,
        1279
      ]
    },
    {
      "content": "添加事件处理程序以检查作业进度。",
      "pos": [
        1282,
        1298
      ]
    },
    {
      "content": "提交作业。",
      "pos": [
        1301,
        1306
      ]
    },
    {
      "pos": [
        7441,
        7469
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"json\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>缩略图 JSON 预设"
    },
    {
      "pos": [
        7471,
        7544
      ],
      "content": "有关架构的信息，请参阅<bpt id=\"p1\">[</bpt>此主题<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt269962.aspx)</ept>。"
    },
    {
      "pos": [
        9820,
        9846
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"xml\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>缩略图 XML 预设"
    },
    {
      "pos": [
        9848,
        9921
      ],
      "content": "有关架构的信息，请参阅<bpt id=\"p1\">[</bpt>此主题<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/mt269962.aspx)</ept>。"
    },
    {
      "content": "注意事项",
      "pos": [
        12370,
        12374
      ]
    },
    {
      "content": "请注意以下事项：",
      "pos": [
        12376,
        12384
      ]
    },
    {
      "content": "为 Start/Step/Range 使用的显式时间戳假设输入源的长度至少为 1 分钟。",
      "pos": [
        12388,
        12432
      ]
    },
    {
      "content": "Jpg/Png/BmpImage 元素包含 Start、Step 和 Range 字符串属性 – 这些属性解释如下：",
      "pos": [
        12435,
        12493
      ]
    },
    {
      "content": "帧数（如果为非负整数），例如：\"Start\": \"120\"；",
      "pos": [
        12501,
        12531
      ]
    },
    {
      "content": "相对于源持续时间（如果以 % 后缀表示），例如：\"Start\": \"15%\"，或者",
      "pos": [
        12538,
        12579
      ]
    },
    {
      "content": "时间戳（如果以 HH:MM:SS... 格式表示）。例如\"Start\" : \"00:01:00\"",
      "pos": [
        12586,
        12634
      ]
    },
    {
      "content": "你可以随意混搭使用表示法。",
      "pos": [
        12640,
        12653
      ]
    },
    {
      "content": "此外，Start 还支持特殊的宏 {Best}，它会尝试判断第一个“有意义”的内容帧。注意：（Start 设置为 {Best} 时，将忽略 Step 与 Range）",
      "pos": [
        12663,
        12746
      ]
    },
    {
      "content": "默认值：Start:{Best}",
      "pos": [
        12758,
        12774
      ]
    },
    {
      "content": "需要显式提供每个图像格式的输出格式：Jpg/Png/BmpFormat。MES 会将 JpgVideo（如果已指定）与 JpgFormat 进行匹配，依此类推。OutputFormat 引入了新的图像编解码器特定宏 {Index}，需要为图像输出格式提供该宏一次（且只需一次）。",
      "pos": [
        12777,
        12916
      ]
    },
    {
      "content": "另请参阅",
      "pos": [
        12921,
        12925
      ]
    },
    {
      "content": "媒体服务编码概述",
      "pos": [
        12929,
        12937
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何使用媒体编码器标准通过 .NET 来生成缩略图\" \n    description=\"本主题说明如何使用媒体服务标准，通过 .NET 同时为资产编码并生成缩略图。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"01/28/2016\" \n    wacn.date=\"03/17/2016\"/>\n\n\n#如何使用媒体编码器标准通过 .NET 来生成缩略图\n\n本主题说明如何使用媒体服务 .NET SDK 来为资产编码，并使用媒体编码器标准生成缩略图。本主题将定义 XML 和 JSON 缩略图预设，用于创建同时执行编码和生成缩略图的任务。[此文档](https://msdn.microsoft.com/zh-cn/library/mt269962.aspx)包含这些预设所用的元素的说明。\n\n请务必仔细阅读[注意事项](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#considerations)部分。\n\n##示例\n\n以下代码示例使用媒体服务 .NET SDK 执行下列任务：\n\n- 创建编码作业。\n- 获取对媒体编码器标准版编码器的引用。\n- 加载预设 [XML](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#xml) 或 [JSON](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#json)，其中包含生成缩略图所需的编码预设和信息。可以在一个文件中保存此 [XML](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#xml) 或 [JSON](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes#json)，并使用以下代码来加载该文件。\n\n            // Load the XML (or JSON) from the local file.\n            string configuration = File.ReadAllText(fileName);  \n- 将一个编码任务添加到该作业。 \n- 指定要编码的输入资产。\n- 创建将包含所编码资产的输出资产。\n- 添加事件处理程序以检查作业进度。\n- 提交作业。\n    \n        using System;\n        using System.Collections.Generic;\n        using System.Configuration;\n        using System.IO;\n        using System.Linq;\n        using System.Net;\n        using System.Security.Cryptography;\n        using System.Text;\n        using System.Threading.Tasks;\n        using Microsoft.WindowsAzure.MediaServices.Client;\n        using Newtonsoft.Json.Linq;\n        using System.Threading;\n        using Microsoft.WindowsAzure.MediaServices.Client.ContentKeyAuthorization;\n        using Microsoft.WindowsAzure.MediaServices.Client.DynamicEncryption;\n        using System.Web;\n        using System.Globalization;\n        \n        namespace EncodeAndGenerateThumbnails\n        {\n            class Program\n            {\n                // Read values from the App.config file.\n                private static readonly string _mediaServicesAccountName =\n                    ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n                private static readonly string _mediaServicesAccountKey =\n                    ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n        \n                // Field for service context.\n                private static CloudMediaContext _context = null;\n                private static MediaServicesCredentials _cachedCredentials = null;\n        \n                private static readonly string _mediaFiles =\n                    Path.GetFullPath(@\"../..\\Media\");\n        \n                private static readonly string _singleMP4File =\n                    Path.Combine(_mediaFiles, @\"BigBuckBunny.mp4\");\n        \n                static void Main(string[] args)\n                {\n                    // Create and cache the Media Services credentials in a static class variable.\n                    _cachedCredentials = new MediaServicesCredentials(\n                                    _mediaServicesAccountName,\n                                    _mediaServicesAccountKey);\n                    // Used the chached credentials to create CloudMediaContext.\n                    _context = new CloudMediaContext(_cachedCredentials);\n        \n                    // Get an uploaded asset.\n                    var asset = _context.Assets.FirstOrDefault();\n        \n                    // Encode and generate the thumbnails.\n                    EncodeToAdaptiveBitrateMP4Set(asset);\n        \n                    Console.ReadLine();\n                }\n        \n                static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\n                {\n                    // Declare a new job.\n                    IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");\n                    // Get a media processor reference, and pass to it the name of the \n                    // processor to use for the specific task.\n                    IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\n                \n        \n                    // Load the XML (or JSON) from the local file.\n                    string configuration = File.ReadAllText(\"ThumbnailPreset_JSON.json\");\n                \n                    // Create a task\n                    ITask task = job.Tasks.AddNew(\"Media Encoder Standard encoding task\",\n                        processor,\n                        configuration,\n                        TaskOptions.None);\n                \n                    // Specify the input asset to be encoded.\n                    task.InputAssets.Add(asset);\n                    // Add an output asset to contain the results of the job. \n                    // This output is specified as AssetCreationOptions.None, which \n                    // means the output asset is not encrypted. \n                    task.OutputAssets.AddNew(\"Output asset\",\n                        AssetCreationOptions.None);\n                \n                    job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\n                    job.Submit();\n                    job.GetExecutionProgressTask(CancellationToken.None).Wait();\n                \n                    return job.OutputMediaAssets[0];\n                }\n        \n                private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\n                {\n                    Console.WriteLine(\"Job state changed event:\");\n                    Console.WriteLine(\"  Previous state: \" + e.PreviousState);\n                    Console.WriteLine(\"  Current state: \" + e.CurrentState);\n                    switch (e.CurrentState)\n                    {\n                        case JobState.Finished:\n                            Console.WriteLine();\n                            Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\n                            break;\n                        case JobState.Canceling:\n                        case JobState.Queued:\n                        case JobState.Scheduled:\n                        case JobState.Processing:\n                            Console.WriteLine(\"Please wait...\\n\");\n                            break;\n                        case JobState.Canceled:\n                        case JobState.Error:\n        \n                            // Cast sender as a job.\n                            IJob job = (IJob)sender;\n        \n                            // Display or log error details as needed.\n                            break;\n                        default:\n                            break;\n                    }\n                }\n        \n        \n                private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n                {\n                    var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\n                    ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\n        \n                    if (processor == null)\n                        throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\n        \n                    return processor;\n                }\n        \n            }\n        }\n\n##<a id=\"json\"></a>缩略图 JSON 预设\n\n有关架构的信息，请参阅[此主题](https://msdn.microsoft.com/zh-cn/library/mt269962.aspx)。\n\n    {\n      \"Version\": 1.0,\n      \"Codecs\": [\n        {\n          \"KeyFrameInterval\": \"00:00:02\",\n          \"SceneChangeDetection\": \"true\",\n          \"H264Layers\": [\n            {\n              \"Profile\": \"Auto\",\n              \"Level\": \"auto\",\n              \"Bitrate\": 4500,\n              \"MaxBitrate\": 4500,\n              \"BufferWindow\": \"00:00:05\",\n              \"Width\": 1280,\n              \"Height\": 720,\n              \"ReferenceFrames\": 3,\n              \"EntropyMode\": \"Cabac\",\n              \"AdaptiveBFrame\": true,\n              \"Type\": \"H264Layer\",\n              \"FrameRate\": \"0/1\"\n       \n            }\n          ],\n          \"Type\": \"H264Video\"\n        },\n        {\n          \"JpgLayers\": [\n            {\n              \"Quality\": 90,\n              \"Type\": \"JpgLayer\",\n              \"Width\": 640,\n              \"Height\": 360\n            }\n          ],\n          \"Start\": \"{Best}\",\n          \"Type\": \"JpgImage\"\n        },\n        {\n          \"PngLayers\": [\n            {\n              \"Type\": \"PngLayer\",\n              \"Width\": 640,\n              \"Height\": 360,\n            }\n          ],\n          \"Start\": \"00:00:01\",\n          \"Step\": \"00:00:10\",\n          \"Range\": \"00:00:58\",\n          \"Type\": \"PngImage\"\n        },\n        {\n          \"BmpLayers\": [\n            {\n              \"Type\": \"BmpLayer\",\n              \"Width\": 640,\n              \"Height\": 360\n            }\n          ],\n          \"Start\": \"10%\",\n          \"Step\": \"10%\",\n          \"Range\": \"90%\",\n          \"Type\": \"BmpImage\"\n        },\n        {\n          \"Channels\": 2,\n          \"SamplingRate\": 48000,\n          \"Bitrate\": 128,\n          \"Type\": \"AACAudio\"\n        }\n      ],\n      \"Outputs\": [\n        {\n          \"FileName\": \"{Basename}_{Index}{Extension}\",\n          \"Format\": {\n            \"Type\": \"JpgFormat\"\n          }\n        },\n        {\n          \"FileName\": \"{Basename}_{Index}{Extension}\",\n          \"Format\": {\n            \"Type\": \"PngFormat\"\n          }\n        },\n        {\n          \"FileName\": \"{Basename}_{Index}{Extension}\",\n          \"Format\": {\n            \"Type\": \"BmpFormat\"\n          }\n        },\n        {\n          \"FileName\": \"{Basename}_{Width}x{Height}_{VideoBitrate}.mp4\",\n          \"Format\": {\n            \"Type\": \"MP4Format\"\n          }\n        }\n      ]\n    }\n\n\n##<a id=\"xml\"></a>缩略图 XML 预设\n\n有关架构的信息，请参阅[此主题](https://msdn.microsoft.com/zh-cn/library/mt269962.aspx)。\n    \n    <?xml version=\"1.0\" encoding=\"utf-16\"?>\n    <Preset xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\n      <Encoding>\n        <H264Video>\n          <KeyFrameInterval>00:00:02</KeyFrameInterval>\n          <SceneChangeDetection>true</SceneChangeDetection>\n          <H264Layers>\n            <H264Layer>\n              <Bitrate>4500</Bitrate>\n              <Width>1280</Width>\n              <Height>720</Height>\n              <FrameRate>0/1</FrameRate>\n              <Profile>Auto</Profile>\n              <Level>auto</Level>\n              <BFrames>3</BFrames>\n              <ReferenceFrames>3</ReferenceFrames>\n              <Slices>0</Slices>\n              <AdaptiveBFrame>true</AdaptiveBFrame>\n              <EntropyMode>Cabac</EntropyMode>\n              <BufferWindow>00:00:05</BufferWindow>\n              <MaxBitrate>4500</MaxBitrate>\n            </H264Layer>\n          </H264Layers>\n        </H264Video>\n        <AACAudio>\n          <Profile>AACLC</Profile>\n          <Channels>2</Channels>\n          <SamplingRate>48000</SamplingRate>\n          <Bitrate>128</Bitrate>\n        </AACAudio>\n        <JpgImage Start=\"{Best}\">\n          <JpgLayers>\n            <JpgLayer>\n              <Width>640</Width>\n              <Height>360</Height>\n              <Quality>90</Quality>\n            </JpgLayer>\n          </JpgLayers>\n        </JpgImage>\n        <BmpImage Start=\"10%\" Step=\"10%\" Range=\"90%\">\n          <BmpLayers>\n            <BmpLayer>\n              <Width>640</Width>\n              <Height>360</Height>\n            </BmpLayer>\n          </BmpLayers>\n        </BmpImage>\n        <PngImage Start=\"00:00:01\" Step=\"00:00:10\" Range=\"00:00:58\">\n          <PngLayers>\n            <PngLayer>\n              <Width>640</Width>\n              <Height>360</Height>\n            </PngLayer>\n          </PngLayers>\n        </PngImage>\n      </Encoding>\n      <Outputs>\n        <Output FileName=\"{Basename}_{Width}x{Height}_{VideoBitrate}.mp4\">\n          <MP4Format />\n        </Output>\n        <Output FileName=\"{Basename}_{Index}{Extension}\">\n          <JpgFormat />\n        </Output>\n        <Output FileName=\"{Basename}_{Index}{Extension}\">\n          <BmpFormat />\n        </Output>\n        <Output FileName=\"{Basename}_{Index}{Extension}\">\n          <PngFormat />\n        </Output>\n      </Outputs>\n    </Preset>\n\n##注意事项\n\n请注意以下事项：\n\n- 为 Start/Step/Range 使用的显式时间戳假设输入源的长度至少为 1 分钟。\n- Jpg/Png/BmpImage 元素包含 Start、Step 和 Range 字符串属性 – 这些属性解释如下：\n\n    - 帧数（如果为非负整数），例如：\"Start\": \"120\"；\n    - 相对于源持续时间（如果以 % 后缀表示），例如：\"Start\": \"15%\"，或者\n    - 时间戳（如果以 HH:MM:SS... 格式表示）。例如\"Start\" : \"00:01:00\"\n\n    你可以随意混搭使用表示法。\n    \n    此外，Start 还支持特殊的宏 {Best}，它会尝试判断第一个“有意义”的内容帧。注意：（Start 设置为 {Best} 时，将忽略 Step 与 Range）\n    \n    - 默认值：Start:{Best}\n- 需要显式提供每个图像格式的输出格式：Jpg/Png/BmpFormat。MES 会将 JpgVideo（如果已指定）与 JpgFormat 进行匹配，依此类推。OutputFormat 引入了新的图像编解码器特定宏 {Index}，需要为图像输出格式提供该宏一次（且只需一次）。\n\n\n##另请参阅 \n\n[媒体服务编码概述](/documentation/articles/media-services-encode-asset)\n\n<!---HONumber=Mooncake_0307_2016-->"
}