{
  "nodes": [
    {
      "content": "使用表存储构建 Web 应用 (Node.js) | Azure",
      "pos": [
        28,
        60
      ]
    },
    {
      "content": "本教程以“使用 Express 构建 Web 应用程序”教程为基础，演示如何添加 Azure 存储服务和 Azure 模块。",
      "pos": [
        80,
        142
      ]
    },
    {
      "content": "使用存储构建 Node.js Web 应用程序",
      "pos": [
        376,
        399
      ]
    },
    {
      "content": "概述",
      "pos": [
        404,
        406
      ]
    },
    {
      "pos": [
        408,
        576
      ],
      "content": "在本教程中，你将通过将用于 Node.js 的 Azure 客户端库与数据管理服务结合使用，来扩展在<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用 Express 生成 Node.js Web 应用程序]</ept>教程中创建的应用程序。你将扩展你的应用程序以创建可部署到 Azure 的基于 Web 的任务列表应用程序。用户可以通过任务列表来检索任务、添加新任务以及将任务标记为已完成。"
    },
    {
      "pos": [
        578,
        749
      ],
      "content": "任务项存储在 Azure 存储空间中。Azure 存储空间提供了具有容错能力且可用性非常好的非结构化数据存储。Azure 存储空间包含一些可用来存储和访问数据的数据结构，你可以通过 Azure SDK for Node.js 中包含的 API 或通过 REST API 利用存储服务。有关详细信息，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">在 Azure 中存储和访问数据]</ept>。"
    },
    {
      "pos": [
        751,
        846
      ],
      "content": "本教程假定你已完成 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Node.js Web 应用程序]</ept>和<bpt id=\"p2\">[</bpt>使用 Express 生成 Node.js<ept id=\"p2\">][Node.js Web Application using Express]</ept> 教程。"
    },
    {
      "content": "你将学习以下内容：",
      "pos": [
        848,
        857
      ]
    },
    {
      "content": "如何操作 Jade 模板引擎",
      "pos": [
        863,
        877
      ]
    },
    {
      "content": "如何操作 Azure 数据管理服务",
      "pos": [
        882,
        899
      ]
    },
    {
      "content": "以下是已完成应用程序的屏幕快照：",
      "pos": [
        901,
        917
      ]
    },
    {
      "content": "Internet Explorer 中已完成的网页",
      "pos": [
        921,
        946
      ]
    },
    {
      "content": "在 Web.Config 中设置存储凭据",
      "pos": [
        1034,
        1054
      ]
    },
    {
      "content": "若要访问 Azure 存储空间，你需要传入存储凭据。为此，您将使用 web.config 应用程序设置。这些设置将作为环境变量传递给 Node，然后再由 Azure SDK 进行读取。",
      "pos": [
        1056,
        1148
      ]
    },
    {
      "pos": [
        1152,
        1212
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 仅在将应用程序部署到 Azure 时才使用存储凭据。应用程序在模拟器中运行时将使用存储模拟器。"
    },
    {
      "content": "执行下列步骤可检索存储帐户凭据并将这些凭据添加到 web.config 设置中：",
      "pos": [
        1214,
        1254
      ]
    },
    {
      "content": "如果尚未打开 Azure PowerShell，请通过在“开始”菜单中展开“所有程序”、“Azure”，右键单击“Azure PowerShell”，然后选择“以管理员身份运行”启动 Azure PowerShell。",
      "pos": [
        1260,
        1369
      ]
    },
    {
      "content": "将目录更改到包含你的应用程序的文件夹。例如，C:\\\\node\\\\tasklist\\\\WebRole1。",
      "pos": [
        1375,
        1426
      ]
    },
    {
      "content": "从 Azure Powershell 窗口中，输入以下 cmdlet 以检索存储帐户信息：",
      "pos": [
        1432,
        1477
      ]
    },
    {
      "content": "这样可以检索与托管服务关联的存储帐户和帐户密钥的列表。",
      "pos": [
        1547,
        1574
      ]
    },
    {
      "pos": [
        1582,
        1656
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 由于在你部署服务时 Azure SDK 会创建一个存储帐户，因此在前面的指南中部署你的应用程序之后应当已存在一个存储帐户。"
    },
    {
      "pos": [
        1662,
        1726
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>ServiceDefinition.csdef<ept id=\"p1\">**</ept> 文件，该文件包含将应用程序部署到 Azure 时所使用的环境设置："
    },
    {
      "pos": [
        1794,
        1887
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Environment<ept id=\"p1\">**</ept> 元素下插入以下块，使用你要用于部署的存储帐户的帐户名称和主密钥替换 {STORAGE ACCOUNT} 和 {STORAGE ACCESS KEY}："
    },
    {
      "content": "web.cloud.config 文件内容",
      "pos": [
        2054,
        2075
      ]
    },
    {
      "content": "保存该文件并关闭记事本。",
      "pos": [
        2153,
        2165
      ]
    },
    {
      "content": "安装其他模块",
      "pos": [
        2171,
        2177
      ]
    },
    {
      "pos": [
        2182,
        2266
      ],
      "content": "使用以下命令在本地安装 azure、[node-uuid]、[nconf] 和 [async] 模块，并将它们的一个条目保存到 <bpt id=\"p1\">**</bpt>package.json<ept id=\"p1\">**</ept> 文件："
    },
    {
      "content": "此命令的输出看上去应如下所示：",
      "pos": [
        2366,
        2381
      ]
    },
    {
      "content": "在 Node 应用程序中使用表服务",
      "pos": [
        3045,
        3062
      ]
    },
    {
      "pos": [
        3064,
        3178
      ],
      "content": "在本节中，你将通过添加一个包含你的任务模型的 <bpt id=\"p1\">**</bpt>task.js<ept id=\"p1\">**</ept> 文件来扩展 <bpt id=\"p2\">**</bpt>express<ept id=\"p2\">**</ept> 命令创建的基本应用程序。你还将修改现有 <bpt id=\"p3\">**</bpt>app.js<ept id=\"p3\">**</ept> 并创建使用该模型的新 <bpt id=\"p4\">**</bpt>tasklist.js<ept id=\"p4\">**</ept> 文件。"
    },
    {
      "content": "创建模型",
      "pos": [
        3184,
        3188
      ]
    },
    {
      "pos": [
        3193,
        3235
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>WebRole1<ept id=\"p1\">**</ept> 目录中，创建一个名为 <bpt id=\"p2\">**</bpt>models<ept id=\"p2\">**</ept> 的新目录。"
    },
    {
      "pos": [
        3240,
        3302
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>models<ept id=\"p1\">**</ept> 目录中，创建一个名为 <bpt id=\"p2\">**</bpt>task.js<ept id=\"p2\">**</ept> 的新文件。此文件将包含你的应用程序创建的任务的模型。"
    },
    {
      "pos": [
        3307,
        3341
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>task.js<ept id=\"p1\">**</ept> 文件的开头，添加以下代码来引用所需的库："
    },
    {
      "content": "接下来，你将添加代码以定义和导出 Task 对象。此对象负责与表连接。",
      "pos": [
        3496,
        3531
      ]
    },
    {
      "content": "接下来，添加以下代码来定义 Task 对象的其他方法，这些方法允许与表中存储的数据交互：",
      "pos": [
        3945,
        3989
      ]
    },
    {
      "pos": [
        5747,
        5768
      ],
      "content": "保存并关闭 <bpt id=\"p1\">**</bpt>task.js<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "content": "创建控制器",
      "pos": [
        5774,
        5779
      ]
    },
    {
      "pos": [
        5784,
        5850
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>WebRole1/routes<ept id=\"p1\">**</ept> 目录中，创建一个名为 <bpt id=\"p2\">**</bpt>tasklist.js<ept id=\"p2\">**</ept> 的新文件并在文本编辑器中将其打开。"
    },
    {
      "pos": [
        5855,
        5976
      ],
      "content": "将以下代码添加到 <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept>。这将加载 <bpt id=\"p2\">**</bpt>tasklist.js<ept id=\"p2\">**</ept> 使用的 azure 和 async 模块。这还将定义 <bpt id=\"p3\">**</bpt>TaskList<ept id=\"p3\">**</ept> 函数，将向该函数传递我们之前定义的 <bpt id=\"p4\">**</bpt>Task<ept id=\"p4\">**</ept> 对象的一个实例："
    },
    {
      "pos": [
        6175,
        6251
      ],
      "content": "继续向 <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept> 文件添加用于<bpt id=\"p2\">**</bpt>showTasks<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>addTask<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>completeTasks<ept id=\"p4\">**</ept> 的方法："
    },
    {
      "pos": [
        7591,
        7613
      ],
      "content": "保存 <bpt id=\"p1\">**</bpt>tasklist.js<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "content": "修改 app.js",
      "pos": [
        7619,
        7628
      ]
    },
    {
      "pos": [
        7633,
        7675
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>WebRole1<ept id=\"p1\">**</ept> 目录中，用文本编辑器打开 <bpt id=\"p2\">**</bpt>app.js<ept id=\"p2\">**</ept> 文件。"
    },
    {
      "content": "在该文件的开头，添加以下内容来加载 azure 模块并设置表名称和分区键：",
      "pos": [
        7681,
        7718
      ]
    },
    {
      "content": "在 app.js 文件中，向下滚动到以下行：",
      "pos": [
        7843,
        7865
      ]
    },
    {
      "pos": [
        7936,
        8053
      ],
      "content": "将上面的行替换为下面显示的代码。这将通过与你的存储帐户的连接初始化 <ph id=\"ph1\">&lt;strong&gt;</ph>Task<ph id=\"ph2\">&lt;/strong&gt;</ph> 的实例。这是 <ph id=\"ph3\">&lt;strong&gt;</ph>TaskList<ph id=\"ph4\">&lt;/strong&gt;</ph> 的密码，TaskList 将使用该密码与表服务进行通信："
    },
    {
      "pos": [
        8480,
        8497
      ],
      "content": "保存 <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "content": "修改索引视图",
      "pos": [
        8503,
        8509
      ]
    },
    {
      "pos": [
        8514,
        8562
      ],
      "content": "将目录更改为 <bpt id=\"p1\">**</bpt>views<ept id=\"p1\">**</ept> 目录并在文本编辑器中打开 <bpt id=\"p2\">**</bpt>index.jade<ept id=\"p2\">**</ept> 文件。"
    },
    {
      "pos": [
        8567,
        8638
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>index.jade<ept id=\"p1\">**</ept> 文件的内容替换为以下代码。这将定义用于显示现有任务的视图，以及用于添加新任务和将现有任务标记为已完成的表单。"
    },
    {
      "pos": [
        9940,
        9964
      ],
      "content": "保存并关闭 <bpt id=\"p1\">**</bpt>index.jade<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "content": "修改全局布局",
      "pos": [
        9970,
        9976
      ]
    },
    {
      "pos": [
        9978,
        10130
      ],
      "content": "<bpt id=\"p1\">**</bpt>views<ept id=\"p1\">**</ept> 目录中的 <bpt id=\"p2\">**</bpt>layout.jade<ept id=\"p2\">**</ept> 文件用作其他 .<bpt id=\"p3\">**</bpt>jade<ept id=\"p3\">**</ept> 文件的全局模板。在此步骤中，你将对其进行修改以使用 <bpt id=\"p4\">[</bpt>Twitter Bootstrap<ept id=\"p4\">](https://github.com/twbs/bootstrap)</ept>（一个可以轻松设计美观 Web 应用的工具包）。"
    },
    {
      "pos": [
        10135,
        10295
      ],
      "content": "下载并提取 <bpt id=\"p1\">[</bpt>Twitter Bootstrap<ept id=\"p1\">](http://getbootstrap.com)</ept> 的文件。将 <bpt id=\"p2\">**</bpt>bootstrap.min.css<ept id=\"p2\">**</ept> 文件从 <bpt id=\"p3\">**</bpt>bootstrap\\\\dist\\\\css<ept id=\"p3\">**</ept> 文件夹复制到你的 tasklist 应用程序的 <bpt id=\"p4\">**</bpt>public\\\\stylesheets<ept id=\"p4\">**</ept> 目录中。"
    },
    {
      "pos": [
        10300,
        10355
      ],
      "content": "从 <bpt id=\"p1\">**</bpt>views<ept id=\"p1\">**</ept> 文件夹中，用文本编辑器打开 <bpt id=\"p2\">**</bpt>layout.jade<ept id=\"p2\">**</ept> 并将其内容替换为以下代码："
    },
    {
      "pos": [
        10740,
        10762
      ],
      "content": "保存 <bpt id=\"p1\">**</bpt>layout.jade<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "content": "在模拟器中运行应用程序",
      "pos": [
        10768,
        10779
      ]
    },
    {
      "content": "使用以下命令在模拟器中启动应用程序。",
      "pos": [
        10781,
        10799
      ]
    },
    {
      "content": "浏览器将打开并显示以下页面：",
      "pos": [
        10864,
        10878
      ]
    },
    {
      "content": "标题为 My Task List 的网页，其中所含的表包含任务和用于添加新任务的字段。",
      "pos": [
        10882,
        10925
      ]
    },
    {
      "content": "使用窗体添加项，或通过将其标记为完成来删除现有项。",
      "pos": [
        10999,
        11024
      ]
    },
    {
      "content": "将应用程序发布到 Azure",
      "pos": [
        11029,
        11043
      ]
    },
    {
      "content": "在 Windows PowerShell 窗口中，调用以下 cmdlet 将托管服务重新部署到 Azure。",
      "pos": [
        11046,
        11100
      ]
    },
    {
      "pos": [
        11217,
        11298
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>myuniquename<ept id=\"p1\">**</ept> 替换为此应用程序的唯一名称。将 <bpt id=\"p2\">**</bpt>datacentername<ept id=\"p2\">**</ept> 替换为 Azure 数据中心的名称，例如“中国北部”。"
    },
    {
      "content": "部署完成后，你将看到如下响应：",
      "pos": [
        11300,
        11315
      ]
    },
    {
      "pos": [
        12198,
        12262
      ],
      "content": "与先前一样，由于你指定了 <bpt id=\"p1\">**</bpt>-launch<ept id=\"p1\">**</ept> 选项，因此在发布完成后，浏览器将打开并显示正在 Azure 中运行的应用程序。"
    },
    {
      "content": "浏览器窗口中显示 My Task List 页面。URL 表明该页面现在托管在 Azure 上。",
      "pos": [
        12266,
        12314
      ]
    },
    {
      "content": "停止并删除应用程序",
      "pos": [
        12402,
        12411
      ]
    },
    {
      "content": "在部署应用程序后，你可能希望禁用它，以避免在试用期内产生费用或生成和部署其他应用程序。",
      "pos": [
        12413,
        12456
      ]
    },
    {
      "content": "Azure 将按使用的服务器小时数对 Web 角色实例计费。你的应用程序部署之后就会开始使用服务器时间，即使相关实例并未运行且处于停止状态也是如此。",
      "pos": [
        12458,
        12532
      ]
    },
    {
      "content": "以下步骤演示了如何停止和删除应用程序。",
      "pos": [
        12534,
        12553
      ]
    },
    {
      "content": "在 Windows PowerShell 窗口中，使用以下 cmdlet 以停止上一节中创建的服务部署：",
      "pos": [
        12559,
        12611
      ]
    },
    {
      "content": "停止服务可能需要花费几分钟时间。在服务停止时，你会收到一条指示服务已停止的消息。",
      "pos": [
        12674,
        12714
      ]
    },
    {
      "content": "若要删除服务，请调用以下 cmdlet：",
      "pos": [
        12720,
        12740
      ]
    },
    {
      "pos": [
        12821,
        12843
      ],
      "content": "在出现提示时，输入 <bpt id=\"p1\">**</bpt>Y<ept id=\"p1\">**</ept> 以删除服务。"
    },
    {
      "content": "删除服务可能需要花费几分钟时间。删除服务后，你将收到一条指示服务已被删除的消息。",
      "pos": [
        12849,
        12889
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"使用表存储构建 Web 应用 (Node.js) | Azure\" \n    description=\"本教程以“使用 Express 构建 Web 应用程序”教程为基础，演示如何添加 Azure 存储服务和 Azure 模块。\" \n    services=\"cloud-services, storage\" \n    documentationCenter=\"nodejs\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"01/09/2016\" \n    wacn.date=\"02/26/2016\"/>\n\n# 使用存储构建 Node.js Web 应用程序\n\n## 概述\n\n在本教程中，你将通过将用于 Node.js 的 Azure 客户端库与数据管理服务结合使用，来扩展在[使用 Express 生成 Node.js Web 应用程序]教程中创建的应用程序。你将扩展你的应用程序以创建可部署到 Azure 的基于 Web 的任务列表应用程序。用户可以通过任务列表来检索任务、添加新任务以及将任务标记为已完成。\n\n任务项存储在 Azure 存储空间中。Azure 存储空间提供了具有容错能力且可用性非常好的非结构化数据存储。Azure 存储空间包含一些可用来存储和访问数据的数据结构，你可以通过 Azure SDK for Node.js 中包含的 API 或通过 REST API 利用存储服务。有关详细信息，请参阅[在 Azure 中存储和访问数据]。\n\n本教程假定你已完成 [Node.js Web 应用程序]和[使用 Express 生成 Node.js][Node.js Web Application using Express] 教程。\n\n你将学习以下内容：\n\n-   如何操作 Jade 模板引擎\n-   如何操作 Azure 数据管理服务\n\n以下是已完成应用程序的屏幕快照：\n\n![Internet Explorer 中已完成的网页](./media/storage-nodejs-use-table-storage-cloud-service-app/getting-started-1.png)\n\n## 在 Web.Config 中设置存储凭据\n\n若要访问 Azure 存储空间，你需要传入存储凭据。为此，您将使用 web.config 应用程序设置。这些设置将作为环境变量传递给 Node，然后再由 Azure SDK 进行读取。\n\n> [AZURE.NOTE] 仅在将应用程序部署到 Azure 时才使用存储凭据。应用程序在模拟器中运行时将使用存储模拟器。\n\n执行下列步骤可检索存储帐户凭据并将这些凭据添加到 web.config 设置中：\n\n1.  如果尚未打开 Azure PowerShell，请通过在“开始”菜单中展开“所有程序”、“Azure”，右键单击“Azure PowerShell”，然后选择“以管理员身份运行”启动 Azure PowerShell。\n\n2.  将目录更改到包含你的应用程序的文件夹。例如，C:\\\\node\\\\tasklist\\\\WebRole1。\n\n3.  从 Azure Powershell 窗口中，输入以下 cmdlet 以检索存储帐户信息：\n\n        PS C:\\node\\tasklist\\WebRole1> Get-AzureStorageAccounts\n\n    这样可以检索与托管服务关联的存储帐户和帐户密钥的列表。\n\n    > [AZURE.NOTE] 由于在你部署服务时 Azure SDK 会创建一个存储帐户，因此在前面的指南中部署你的应用程序之后应当已存在一个存储帐户。\n\n4.  打开 **ServiceDefinition.csdef** 文件，该文件包含将应用程序部署到 Azure 时所使用的环境设置：\n\n        PS C:\\node\\tasklist> notepad ServiceDefinition.csdef\n\n5.  在 **Environment** 元素下插入以下块，使用你要用于部署的存储帐户的帐户名称和主密钥替换 {STORAGE ACCOUNT} 和 {STORAGE ACCESS KEY}：\n\n        <Variable name=\"AZURE_STORAGE_ACCOUNT\" value=\"{STORAGE ACCOUNT}\" />\n        <Variable name=\"AZURE_STORAGE_ACCESS_KEY\" value=\"{STORAGE ACCESS KEY}\" />\n\n    ![web.cloud.config 文件内容](./media/storage-nodejs-use-table-storage-cloud-service-app/node37.png)\n\n6.  保存该文件并关闭记事本。\n\n### 安装其他模块\n\n2. 使用以下命令在本地安装 azure、[node-uuid]、[nconf] 和 [async] 模块，并将它们的一个条目保存到 **package.json** 文件：\n\n        PS C:\\node\\tasklist\\WebRole1> npm install azure-storage node-uuid async nconf --save\n\n    此命令的输出看上去应如下所示：\n\n        node-uuid@1.4.1 node_modules\\node-uuid\n\n        nconf@0.6.9 node_modules\\nconf\n        ├── ini@1.1.0\n        ├── async@0.2.9\n        └── optimist@0.6.0 (wordwrap@0.0.2, minimist@0.0.8)\n\n        azure-storage@0.1.0 node_modules\\azure-storage\n        ├── extend@1.2.1\n        ├── xmlbuilder@0.4.3\n        ├── mime@1.2.11\n        ├── underscore@1.4.4\n        ├── validator@3.1.0\n        ├── node-uuid@1.4.1\n        ├── xml2js@0.2.7 (sax@0.5.2)\n        └── request@2.27.0 (json-stringify-safe@5.0.0, tunnel-agent@0.3.0, aws-sign@0.3.0, forever-agent@0.5.2, qs@0.6.6, oauth-sign@0.3.0, cookie-jar@0.3.0, hawk@1.0.0, form-data@0.1.3, http-signature@0.10.0)\n\n##在 Node 应用程序中使用表服务\n\n在本节中，你将通过添加一个包含你的任务模型的 **task.js** 文件来扩展 **express** 命令创建的基本应用程序。你还将修改现有 **app.js** 并创建使用该模型的新 **tasklist.js** 文件。\n\n### 创建模型\n\n1. 在 **WebRole1** 目录中，创建一个名为 **models** 的新目录。\n\n2. 在 **models** 目录中，创建一个名为 **task.js** 的新文件。此文件将包含你的应用程序创建的任务的模型。\n\n3. 在 **task.js** 文件的开头，添加以下代码来引用所需的库：\n\n        var azure = require('azure-storage');\n        var uuid = require('node-uuid');\n        var entityGen = azure.TableUtilities.entityGenerator;\n\n4. 接下来，你将添加代码以定义和导出 Task 对象。此对象负责与表连接。\n\n        module.exports = Task;\n\n        function Task(storageClient, tableName, partitionKey) {\n          this.storageClient = storageClient;\n          this.tableName = tableName;\n          this.partitionKey = partitionKey;\n          this.storageClient.createTableIfNotExists(tableName, function tableCreated(error) {\n            if(error) {\n              throw error;\n            }\n          });\n        };\n\n5. 接下来，添加以下代码来定义 Task 对象的其他方法，这些方法允许与表中存储的数据交互：\n\n        Task.prototype = {\n          find: function(query, callback) {\n            self = this;\n            self.storageClient.queryEntities(query, function entitiesQueried(error, result) {\n              if(error) {\n                callback(error);\n              } else {\n                callback(null, result.entries);\n              }\n            });\n          },\n\n          addItem: function(item, callback) {\n            self = this;\n            // use entityGenerator to set types\n            // NOTE: RowKey must be a string type, even though\n            // it contains a GUID in this example.\n            var itemDescriptor = {\n              PartitionKey: entityGen.String(self.partitionKey),\n              RowKey: entityGen.String(uuid()),\n              name: entityGen.String(item.name),\n              category: entityGen.String(item.category),\n              completed: entityGen.Boolean(false)\n            };\n\n            self.storageClient.insertEntity(self.tableName, itemDescriptor, function entityInserted(error) {\n              if(error){  \n                callback(error);\n              }\n              callback(null);\n            });\n          },\n\n          updateItem: function(rKey, callback) {\n            self = this;\n            self.storageClient.retrieveEntity(self.tableName, self.partitionKey, rKey, function entityQueried(error, entity) {\n              if(error) {\n                callback(error);\n              }\n              entity.completed._ = true;\n              self.storageClient.updateEntity(self.tableName, entity, function entityUpdated(error) {\n                if(error) {\n                  callback(error);\n                }\n                callback(null);\n              });\n            });\n          }\n        }\n\n6. 保存并关闭 **task.js** 文件。\n\n### 创建控制器\n\n1. 在 **WebRole1/routes** 目录中，创建一个名为 **tasklist.js** 的新文件并在文本编辑器中将其打开。\n\n2. 将以下代码添加到 **tasklist.js**。这将加载 **tasklist.js** 使用的 azure 和 async 模块。这还将定义 **TaskList** 函数，将向该函数传递我们之前定义的 **Task** 对象的一个实例：\n\n        var azure = require('azure-storage');\n        var async = require('async');\n\n        module.exports = TaskList;\n\n        function TaskList(task) {\n          this.task = task;\n        }\n\n2. 继续向 **tasklist.js** 文件添加用于**showTasks**、**addTask** 和 **completeTasks** 的方法：\n\n        TaskList.prototype = {\n          showTasks: function(req, res) {\n            self = this;\n            var query = azure.TableQuery()\n              .where('completed eq ?', false);\n            self.task.find(query, function itemsFound(error, items) {\n              res.render('index',{title: 'My ToDo List ', tasks: items});\n            });\n          },\n\n          addTask: function(req,res) {\n            var self = this      \n            var item = req.body.item;\n            self.task.addItem(item, function itemAdded(error) {\n              if(error) {\n                throw error;\n              }\n              res.redirect('/');\n            });\n          },\n\n          completeTask: function(req,res) {\n            var self = this;\n            var completedTasks = Object.keys(req.body);\n            async.forEach(completedTasks, function taskIterator(completedTask, callback) {\n              self.task.updateItem(completedTask, function itemsUpdated(error) {\n                if(error){\n                  callback(error);\n                } else {\n                  callback(null);\n                }\n              });\n            }, function goHome(error){\n              if(error) {\n                throw error;\n              } else {\n               res.redirect('/');\n              }\n            });\n          }\n        }\n\n3. 保存 **tasklist.js** 文件。\n\n### 修改 app.js\n\n1. 在 **WebRole1** 目录中，用文本编辑器打开 **app.js** 文件。 \n\n2. 在该文件的开头，添加以下内容来加载 azure 模块并设置表名称和分区键：\n\n        var azure = require('azure-storage');\n        var tableName = 'tasks';\n        var partitionKey = 'hometasks';\n\n3. 在 app.js 文件中，向下滚动到以下行：\n\n        app.use('/', routes);\n        app.use('/users', users);\n\n    将上面的行替换为下面显示的代码。这将通过与你的存储帐户的连接初始化 <strong>Task</strong> 的实例。这是 <strong>TaskList</strong> 的密码，TaskList 将使用该密码与表服务进行通信：\n\n        var TaskList = require('./routes/tasklist');\n        var Task = require('./models/task');\n        var task = new Task(azure.createTableService(), tableName, partitionKey);\n        var taskList = new TaskList(task);\n\n        app.get('/', taskList.showTasks.bind(taskList));\n        app.post('/addtask', taskList.addTask.bind(taskList));\n        app.post('/completetask', taskList.completeTask.bind(taskList));\n    \n4. 保存 **app.js** 文件。\n\n### 修改索引视图\n\n1. 将目录更改为 **views** 目录并在文本编辑器中打开 **index.jade** 文件。\n\n2. 将 **index.jade** 文件的内容替换为以下代码。这将定义用于显示现有任务的视图，以及用于添加新任务和将现有任务标记为已完成的表单。\n\n        extends layout\n\n        block content\n          h1= title\n          br\n        \n          form(action=\"/completetask\", method=\"post\")\n            table.table.table-striped.table-bordered\n              tr\n                td Name\n                td Category\n                td Date\n                td Complete\n              if tasks != []\n                tr\n                  td \n              else\n                each task in tasks\n                  tr\n                    td #{task.name._}\n                    td #{task.category._}\n                    - var day   = task.Timestamp._.getDate();\n                    - var month = task.Timestamp._.getMonth() + 1;\n                    - var year  = task.Timestamp._.getFullYear();\n                    td #{month + \"/\" + day + \"/\" + year}\n                    td\n                      input(type=\"checkbox\", name=\"#{task.RowKey._}\", value=\"#{!task.completed._}\", checked=task.completed._)\n            button.btn(type=\"submit\") Update tasks\n          hr\n          form.well(action=\"/addtask\", method=\"post\")\n            label Item Name: \n            input(name=\"item[name]\", type=\"textbox\")\n            label Item Category: \n            input(name=\"item[category]\", type=\"textbox\")\n            br\n            button.btn(type=\"submit\") Add item\n\n3. 保存并关闭 **index.jade** 文件。\n\n### 修改全局布局\n\n**views** 目录中的 **layout.jade** 文件用作其他 .**jade** 文件的全局模板。在此步骤中，你将对其进行修改以使用 [Twitter Bootstrap](https://github.com/twbs/bootstrap)（一个可以轻松设计美观 Web 应用的工具包）。\n\n1. 下载并提取 [Twitter Bootstrap](http://getbootstrap.com) 的文件。将 **bootstrap.min.css** 文件从 **bootstrap\\\\dist\\\\css** 文件夹复制到你的 tasklist 应用程序的 **public\\\\stylesheets** 目录中。\n\n2. 从 **views** 文件夹中，用文本编辑器打开 **layout.jade** 并将其内容替换为以下代码：\n\n        doctype html\n        html\n          head\n            title= title\n            link(rel='stylesheet', href='/stylesheets/bootstrap.min.css')\n            link(rel='stylesheet', href='/stylesheets/style.css')\n          body.app\n            nav.navbar.navbar-default\n              div.navbar-header\n                a.navbar-brand(href='/') My Tasks\n            block content\n\n3. 保存 **layout.jade** 文件。\n\n### 在模拟器中运行应用程序\n\n使用以下命令在模拟器中启动应用程序。\n\n    PS C:\\node\\tasklist\\WebRole1> start-azureemulator -launch\n\n浏览器将打开并显示以下页面：\n\n![标题为 My Task List 的网页，其中所含的表包含任务和用于添加新任务的字段。](./media/storage-nodejs-use-table-storage-cloud-service-app/node44.png)\n\n使用窗体添加项，或通过将其标记为完成来删除现有项。\n\n## 将应用程序发布到 Azure\n\n\n在 Windows PowerShell 窗口中，调用以下 cmdlet 将托管服务重新部署到 Azure。\n\n    PS C:\\node\\tasklist\\WebRole1> Publish-AzureServiceProject -name myuniquename -location datacentername -launch\n\n将 **myuniquename** 替换为此应用程序的唯一名称。将 **datacentername** 替换为 Azure 数据中心的名称，例如“中国北部”。\n\n部署完成后，你将看到如下响应：\n\n    PS C:\\node\\tasklist> publish-azureserviceproject -servicename tasklist -location \"China North\"\n    WARNING: Publishing tasklist to Azure. This may take several minutes...\n    WARNING: 2:18:42 PM - Preparing runtime deployment for service 'tasklist'\n    WARNING: 2:18:42 PM - Verifying storage account 'tasklist'...\n    WARNING: 2:18:43 PM - Preparing deployment for tasklist with Subscription ID: 65a1016d-0f67-45d2-b838-b8f373d6d52e...\n    WARNING: 2:19:01 PM - Connecting...\n    WARNING: 2:19:02 PM - Uploading Package to storage service larrystore...\n    WARNING: 2:19:40 PM - Upgrading...\n    WARNING: 2:22:48 PM - Created Deployment ID: b7134ab29b1249ff84ada2bd157f296a.\n    WARNING: 2:22:48 PM - Initializing...\n    WARNING: 2:22:49 PM - Instance WebRole1_IN_0 of role WebRole1 is ready.\n    WARNING: 2:22:50 PM - Created Website URL: http://tasklist.chinacloudapp.cn/.\n\n与先前一样，由于你指定了 **-launch** 选项，因此在发布完成后，浏览器将打开并显示正在 Azure 中运行的应用程序。\n\n![浏览器窗口中显示 My Task List 页面。URL 表明该页面现在托管在 Azure 上。](./media/storage-nodejs-use-table-storage-cloud-service-app/getting-started-1.png)\n\n## 停止并删除应用程序\n\n在部署应用程序后，你可能希望禁用它，以避免在试用期内产生费用或生成和部署其他应用程序。\n\nAzure 将按使用的服务器小时数对 Web 角色实例计费。你的应用程序部署之后就会开始使用服务器时间，即使相关实例并未运行且处于停止状态也是如此。\n\n以下步骤演示了如何停止和删除应用程序。\n\n1.  在 Windows PowerShell 窗口中，使用以下 cmdlet 以停止上一节中创建的服务部署：\n\n        PS C:\\node\\tasklist\\WebRole1> Stop-AzureService\n\n    停止服务可能需要花费几分钟时间。在服务停止时，你会收到一条指示服务已停止的消息。\n\n3.  若要删除服务，请调用以下 cmdlet：\n\n        PS C:\\node\\tasklist\\WebRole1> Remove-AzureService contosotasklist\n\n    在出现提示时，输入 **Y** 以删除服务。\n\n    删除服务可能需要花费几分钟时间。删除服务后，你将收到一条指示服务已被删除的消息。\n\n  [Node.js Web Application using Express]: /documentation/articles/cloud-services-nodejs-develop-deploy-express-app/\n  [使用 Express 生成 Node.js Web 应用程序]: /documentation/articles/cloud-services-nodejs-develop-deploy-express-app/\n  [在 Azure 中存储和访问数据]: http://msdn.microsoft.com/zh-cn/library/azure/gg433040.aspx\n  [Node.js Web 应用程序]: /documentation/articles/cloud-services-nodejs-develop-deploy-app/\n \n\n<!---HONumber=Mooncake_0215_2016-->"
}