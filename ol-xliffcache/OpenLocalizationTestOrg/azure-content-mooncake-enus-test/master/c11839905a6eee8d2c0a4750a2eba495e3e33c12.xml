{
  "nodes": [
    {
      "content": "如何通过 Python 使用服务总线队列 | Microsoft Azure",
      "pos": [
        28,
        66
      ]
    },
    {
      "content": "了解如何使用 Python 中的 Azure 服务总线队列",
      "pos": [
        86,
        115
      ]
    },
    {
      "content": "如何使用 Service Bus 队列",
      "pos": [
        341,
        360
      ]
    },
    {
      "pos": [
        453,
        545
      ],
      "content": "本文介绍了如何使用服务总线队列。相关示例是使用 Python 编写的，并使用 <bpt id=\"p1\">[</bpt>Python Azure 包<ept id=\"p1\">][]</ept>。涉及的任务包括<bpt id=\"p2\">**</bpt>创建队列、发送和接收消息<ept id=\"p2\">**</ept>以及<bpt id=\"p3\">**</bpt>删除队列<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        634,
        745
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 若要安装 Python 或 <bpt id=\"p1\">[</bpt>Python Azure 包<ept id=\"p1\">][]</ept>，请参阅 <bpt id=\"p2\">[</bpt>Python 安装指南<ept id=\"p2\">](/documentation/articles/python-how-to-install)</ept>。"
    },
    {
      "content": "创建队列",
      "pos": [
        750,
        754
      ]
    },
    {
      "pos": [
        756,
        834
      ],
      "content": "可以通过 <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> 对象处理队列。将以下代码添加到任何 Python 文件的顶部附近，你希望在其中以编程方式访问服务总线："
    },
    {
      "pos": [
        908,
        1028
      ],
      "content": "以下代码创建 <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> 对象。将 <ph id=\"ph1\">`mynamespace`</ph>、<ph id=\"ph2\">`sharedaccesskeyname`</ph> 和 <ph id=\"ph3\">`sharedaccesskey`</ph> 替换为你的命名空间、共享访问签名 (SAS) 密钥名称和值。"
    },
    {
      "pos": [
        1206,
        1303
      ],
      "content": "SAS 密钥名称和值可以在 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">][]</ept>连接信息中找到，也可以在服务器资源管理器中选择服务总线命名空间后，在 Visual Studio “属性”窗格中找到（如前一部分中所示）。"
    },
    {
      "pos": [
        1352,
        1449
      ],
      "content": "<bpt id=\"p1\">**</bpt>create\\_queue<ept id=\"p1\">**</ept> 还支持其他选项，使你可以重写默认队列设置，例如消息生存时间 (TTL) 或最大队列大小。以下示例将最大队列大小设置为 5GB，将 TTL 值设置为 1 分钟："
    },
    {
      "content": "向队列发送消息",
      "pos": [
        1638,
        1645
      ]
    },
    {
      "pos": [
        1647,
        1725
      ],
      "content": "若要向服务总线队列发送消息，你的应用程序需对 <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> 对象调用 <bpt id=\"p2\">**</bpt>send\\_queue\\_message<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "pos": [
        1727,
        1789
      ],
      "content": "以下示例演示如何使用 <bpt id=\"p1\">**</bpt>send\\_queue\\_message<ept id=\"p1\">**</ept> 向名为 <bpt id=\"p2\">*</bpt>taskqueue<ept id=\"p2\">*</ept> 的队列发送测试消息："
    },
    {
      "pos": [
        1880,
        2024
      ],
      "content": "Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。有关配额的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 队列和服务总线队列<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "从队列接收消息",
      "pos": [
        2029,
        2036
      ]
    },
    {
      "pos": [
        2038,
        2106
      ],
      "content": "对 <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> 对象使用 <bpt id=\"p2\">**</bpt>receive\\_queue\\_message<ept id=\"p2\">**</ept> 方法可从队列接收消息："
    },
    {
      "pos": [
        2203,
        2312
      ],
      "content": "当 <bpt id=\"p1\">**</bpt>peek‑lock<ept id=\"p1\">**</ept> 参数设置为 <bpt id=\"p2\">**</bpt>False<ept id=\"p2\">**</ept> 时，将在读取消息后将其从队列中删除。通过将参数 <bpt id=\"p3\">**</bpt>peek\\_lock<ept id=\"p3\">**</ept> 设置为 <bpt id=\"p4\">**</bpt>True<ept id=\"p4\">**</ept>，你可以读取（扫视）并锁定消息而不会从队列中删除它。"
    },
    {
      "content": "在接收过程中读取并删除消息的行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。",
      "pos": [
        2314,
        2473
      ]
    },
    {
      "pos": [
        2475,
        2718
      ],
      "content": "如果将 <bpt id=\"p1\">**</bpt>peek\\_lock<ept id=\"p1\">**</ept> 参数设置为 <bpt id=\"p2\">**</bpt>True<ept id=\"p2\">**</ept>，则接收将变成一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。在应用程序处理完消息（或安全存储该消息以供将来处理）后，它会通过对 <bpt id=\"p3\">**</bpt>Message<ept id=\"p3\">**</ept> 对象调用 <bpt id=\"p4\">**</bpt>delete<ept id=\"p4\">**</ept> 方法来完成接收过程的第二个阶段。<bpt id=\"p5\">**</bpt>delete<ept id=\"p5\">**</ept> 方法会将消息标记为已使用，并从队列中删除它。"
    },
    {
      "content": "如何处理应用程序崩溃和不可读消息",
      "pos": [
        2831,
        2847
      ]
    },
    {
      "pos": [
        2849,
        3011
      ],
      "content": "Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <bpt id=\"p1\">**</bpt>Message<ept id=\"p1\">**</ept> 对象调用 <bpt id=\"p2\">**</bpt>unlock<ept id=\"p2\">**</ept> 方法。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。"
    },
    {
      "content": "还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使它可再次被接收。",
      "pos": [
        3013,
        3098
      ]
    },
    {
      "pos": [
        3100,
        3307
      ],
      "content": "如果应用程序在处理消息之后，但在调用 <bpt id=\"p1\">**</bpt>delete<ept id=\"p1\">**</ept> 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作<bpt id=\"p2\">**</bpt>至少处理一次<ept id=\"p2\">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 <bpt id=\"p3\">**</bpt>MessageId<ept id=\"p3\">**</ept> 属性来实现，该属性在多次传送尝试中保持不变。"
    },
    {
      "content": "后续步骤",
      "pos": [
        3312,
        3316
      ]
    },
    {
      "content": "现在，你已了解有关服务总线队列的基础知识，单击下面的链接可了解更多信息。",
      "pos": [
        3318,
        3354
      ]
    },
    {
      "pos": [
        3360,
        3376
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>队列、主题和订阅<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Python 使用服务总线队列 | Microsoft Azure\" \n    description=\"了解如何使用 Python 中的 Azure 服务总线队列\" \n    services=\"service-bus\" \n    documentationCenter=\"python\" \n    authors=\"sethmanheim\" \n    manager=\"timlt\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.date=\"02/08/2016\" \n    wacn.date=\"03/17/2016\"/>\n\n\n# 如何使用 Service Bus 队列\n\n[AZURE.INCLUDE [service-bus-selector-queues](../includes/service-bus-selector-queues.md)]\n\n本文介绍了如何使用服务总线队列。相关示例是使用 Python 编写的，并使用 [Python Azure 包][]。涉及的任务包括**创建队列、发送和接收消息**以及**删除队列**。\n\n[AZURE.INCLUDE [howto-service-bus-queues](../includes/howto-service-bus-queues.md)]\n\n> [AZURE.NOTE] 若要安装 Python 或 [Python Azure 包][]，请参阅 [Python 安装指南](/documentation/articles/python-how-to-install)。\n\n## 创建队列\n\n可以通过 **ServiceBusService** 对象处理队列。将以下代码添加到任何 Python 文件的顶部附近，你希望在其中以编程方式访问服务总线：\n\n```\nfrom azure.servicebus import ServiceBusService, Message, Queue\n```\n\n以下代码创建 **ServiceBusService** 对象。将 `mynamespace`、`sharedaccesskeyname` 和 `sharedaccesskey` 替换为你的命名空间、共享访问签名 (SAS) 密钥名称和值。\n\n```\nbus_service = ServiceBusService(\n    service_namespace='mynamespace',\n    shared_access_key_name='sharedaccesskeyname',\n    shared_access_key_value='sharedaccesskey')\n```\n\nSAS 密钥名称和值可以在 [Azure 经典门户][]连接信息中找到，也可以在服务器资源管理器中选择服务总线命名空间后，在 Visual Studio “属性”窗格中找到（如前一部分中所示）。\n\n```\nbus_service.create_queue('taskqueue')\n```\n\n**create\\_queue** 还支持其他选项，使你可以重写默认队列设置，例如消息生存时间 (TTL) 或最大队列大小。以下示例将最大队列大小设置为 5GB，将 TTL 值设置为 1 分钟：\n\n```\nqueue_options = Queue()\nqueue_options.max_size_in_megabytes = '5120'\nqueue_options.default_message_time_to_live = 'PT1M'\n\nbus_service.create_queue('taskqueue', queue_options)\n```\n\n## 向队列发送消息\n\n若要向服务总线队列发送消息，你的应用程序需对 **ServiceBusService** 对象调用 **send\\_queue\\_message** 方法。\n\n以下示例演示如何使用 **send\\_queue\\_message** 向名为 *taskqueue* 的队列发送测试消息：\n\n```\nmsg = Message(b'Test Message')\nbus_service.send_queue_message('taskqueue', msg)\n```\n\nService Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。有关配额的详细信息，请参阅 [Azure 队列和服务总线队列][]。\n\n## 从队列接收消息\n\n对 **ServiceBusService** 对象使用 **receive\\_queue\\_message** 方法可从队列接收消息：\n\n```\nmsg = bus_service.receive_queue_message('taskqueue', peek_lock=False)\nprint(msg.body)\n```\n\n当 **peek‑lock** 参数设置为 **False** 时，将在读取消息后将其从队列中删除。通过将参数 **peek\\_lock** 设置为 **True**，你可以读取（扫视）并锁定消息而不会从队列中删除它。\n\n在接收过程中读取并删除消息的行为是最简单的模式，并且最适合在发生故障时应用程序可以容忍不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。\n\n如果将 **peek\\_lock** 参数设置为 **True**，则接收将变成一个两阶段操作，这样就可以支持无法容忍遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。在应用程序处理完消息（或安全存储该消息以供将来处理）后，它会通过对 **Message** 对象调用 **delete** 方法来完成接收过程的第二个阶段。**delete** 方法会将消息标记为已使用，并从队列中删除它。\n\n```\nmsg = bus_service.receive_queue_message('taskqueue', peek_lock=True)\nprint(msg.body)\n\nmsg.delete()\n```\n\n## 如何处理应用程序崩溃和不可读消息\n\nService Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 **Message** 对象调用 **unlock** 方法。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。\n\n还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使它可再次被接收。\n\n如果应用程序在处理消息之后，但在调用 **delete** 方法之前崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作**至少处理一次**，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 **MessageId** 属性来实现，该属性在多次传送尝试中保持不变。\n\n## 后续步骤\n\n现在，你已了解有关服务总线队列的基础知识，单击下面的链接可了解更多信息。\n\n-   请参阅[队列、主题和订阅][]。\n\n[Azure 经典门户]: http://manage.windowsazure.cn\n[Python Azure 包]: https://pypi.python.org/pypi/azure\n[队列、主题和订阅]: /documentation/articles/service-bus-queues-topics-subscriptions\n[Azure 队列和服务总线队列]: /documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/#capacity-and-quotas\n \n\n<!---HONumber=Mooncake_0104_2016-->"
}