{
  "nodes": [
    {
      "content": "如何通过 Java 使用服务总线主题 | Microsoft Azure",
      "pos": [
        27,
        63
      ]
    },
    {
      "content": "了解如何在 Azure 中使用 Service Bus 主题和订阅。代码示例是针对 Java 应用程序编写的。",
      "pos": [
        82,
        137
      ]
    },
    {
      "content": "如何使用服务总线主题和订阅",
      "pos": [
        353,
        366
      ]
    },
    {
      "pos": [
        459,
        592
      ],
      "content": "本指南介绍如何使用服务总线主题和订阅。这些示例是采用 Java 编写的并且使用了 <bpt id=\"p1\">[</bpt>Azure SDK for Java<ept id=\"p1\">][]</ept>。涉及的任务包括<bpt id=\"p2\">**</bpt>创建主题和订阅<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>创建订阅筛选器<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>将消息发送到主题<ept id=\"p4\">**</ept>、<bpt id=\"p5\">**</bpt>从订阅接收消息<ept id=\"p5\">**</ept>以及<bpt id=\"p6\">**</bpt>删除主题和订阅<ept id=\"p6\">**</ept>。"
    },
    {
      "content": "配置应用程序以使用 Service Bus",
      "pos": [
        706,
        727
      ]
    },
    {
      "pos": [
        729,
        896
      ],
      "content": "在生成本示例之前，请确保已安装 <bpt id=\"p1\">[</bpt>Azure SDK for Java<ept id=\"p1\">][]</ept>。如果使用了 Eclipse，则可以安装包含 Azure SDK for Java 的 <bpt id=\"p2\">[</bpt>Azure Toolkit for Eclipse<ept id=\"p2\">][]</ept>。然后，你可以将 <bpt id=\"p3\">**</bpt>Microsoft Azure Libraries for Java<ept id=\"p3\">**</ept> 添加到你的项目："
    },
    {
      "content": "将以下导入语句添加到 Java 文件顶部：",
      "pos": [
        977,
        998
      ]
    },
    {
      "content": "向您的生成路径添加 Azure Libraries for Java，并将其包含在您的项目部署程序集中。",
      "pos": [
        1270,
        1322
      ]
    },
    {
      "content": "创建主题",
      "pos": [
        1327,
        1331
      ]
    },
    {
      "pos": [
        1333,
        1475
      ],
      "content": "服务总线主题的管理操作可通过 <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> 类执行。<bpt id=\"p2\">**</bpt>ServiceBusContract<ept id=\"p2\">**</ept> 对象是使用封装了 SAS 令牌及用于管理它的权限的适当配置构造的，而 <bpt id=\"p3\">**</bpt>ServiceBusContract<ept id=\"p3\">**</ept> 类是与 Azure 进行通信的单一点。"
    },
    {
      "pos": [
        1477,
        1599
      ],
      "content": "<bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> 类提供了创建、枚举和删除主题的方法。以下示例演示了如何通过名为 <ph id=\"ph1\">`HowToSample`</ph> 的命名空间，使用 <bpt id=\"p2\">**</bpt>ServiceBusService<ept id=\"p2\">**</ept> 对象创建名为 <ph id=\"ph2\">`TestTopic`</ph> 的主题："
    },
    {
      "pos": [
        2212,
        2322
      ],
      "content": "可对 <bpt id=\"p1\">**</bpt>TopicInfo<ept id=\"p1\">**</ept> 执行某些方法，以调整主题的属性（例如，将默认的生存时间 (TTL) 值设置为应用于发送到主题的消息）。以下示例演示了如何创建最大大小为 5 GB 且名为 <ph id=\"ph1\">`TestTopic`</ph> 的主题："
    },
    {
      "pos": [
        2539,
        2621
      ],
      "content": "请注意，你可以对 <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> 对象使用 <bpt id=\"p2\">**</bpt>listTopics<ept id=\"p2\">**</ept> 方法来检查具有指定名称的主题在某个服务命名空间中是否已存在。"
    },
    {
      "content": "创建订阅",
      "pos": [
        2626,
        2630
      ]
    },
    {
      "pos": [
        2632,
        2703
      ],
      "content": "主题订阅也是使用 <bpt id=\"p1\">**</bpt>ServiceBusService<ept id=\"p1\">**</ept> 类创建的。订阅已命名，并且具有一个限制传递到订阅的虚拟队列的消息集的可选筛选器。"
    },
    {
      "content": "创建具有默认 (MatchAll) 筛选器的订阅",
      "pos": [
        2709,
        2733
      ]
    },
    {
      "pos": [
        2735,
        2871
      ],
      "content": "<bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> 筛选器是默认筛选器，在创建新订阅时未指定筛选器的情况下使用。使用 <bpt id=\"p2\">**</bpt>MatchAll<ept id=\"p2\">**</ept> 筛选器时，发布到主题的所有消息都将置于订阅的虚拟队列中。以下示例创建名为“AllMessages”的订阅，并使用默认的 <bpt id=\"p3\">**</bpt>MatchAll<ept id=\"p3\">**</ept> 筛选器。"
    },
    {
      "content": "创建具有筛选器的订阅",
      "pos": [
        3043,
        3053
      ]
    },
    {
      "content": "还可以设置筛选器，以确定发送到主题的哪些消息应该在特定主题订阅中显示。",
      "pos": [
        3055,
        3090
      ]
    },
    {
      "pos": [
        3092,
        3224
      ],
      "content": "订阅支持的最灵活的一种筛选器是 <bpt id=\"p1\">[</bpt>SqlFilter<ept id=\"p1\">][]</ept>，它实现了一部分 SQL92 功能。SQL 筛选器将对发布到主题的消息的属性进行操作。有关可用于 SQL 筛选器的表达式的更多详细信息，请参阅 <bpt id=\"p2\">[</bpt>SqlFilter.SqlExpression<ept id=\"p2\">][]</ept> 语法。"
    },
    {
      "pos": [
        3226,
        3314
      ],
      "content": "以下示例创建了一个名为 <ph id=\"ph1\">`HighMessages`</ph> 的订阅（带有只选择自定义 <bpt id=\"p1\">**</bpt>MessageNumber<ept id=\"p1\">**</ept> 属性大于 3 的消息的 <bpt id=\"p2\">[</bpt>SqlFilter<ept id=\"p2\">][]</ept> 对象）："
    },
    {
      "pos": [
        3899,
        3986
      ],
      "content": "类似地，以下示例创建一个名为 <ph id=\"ph1\">`LowMessages`</ph> 的订阅，其 <bpt id=\"p1\">[</bpt>SqlFilter<ept id=\"p1\">][]</ept> 对象只选择 <bpt id=\"p2\">**</bpt>MessageNumber<ept id=\"p2\">**</ept> 属性小于或等于 3 的消息："
    },
    {
      "pos": [
        4567,
        4685
      ],
      "content": "现在，当消息发送到 <ph id=\"ph1\">`TestTopic`</ph> 时，它始终会传送给订阅了 <ph id=\"ph2\">`AllMessages`</ph> 订阅的接收者，并且选择性地传送给订阅了 <ph id=\"ph3\">`HighMessages`</ph> 和 <ph id=\"ph4\">`LowMessages`</ph> 订阅的接收者（具体取决于消息内容）。"
    },
    {
      "content": "将消息发送到主题",
      "pos": [
        4690,
        4698
      ]
    },
    {
      "pos": [
        4700,
        4808
      ],
      "content": "若要将消息发送到服务总线主题，你的应用程序将获得 <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> 对象。以下代码演示了如何将消息发送到前面在 <ph id=\"ph1\">`HowToSample`</ph> 命名空间中创建的 <ph id=\"ph2\">`TestTopic`</ph> 主题："
    },
    {
      "pos": [
        4927,
        5194
      ],
      "content": "发送到服务总线主题的消息是 <bpt id=\"p1\">[</bpt>BrokeredMessage<ept id=\"p1\">][]</ept> 类的实例。<bpt id=\"p2\">[</bpt>BrokeredMessage<ept id=\"p2\">][]</ept>* 对象包含一组标准方法（如 <bpt id=\"p3\">**</bpt>setLabel<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>TimeToLive<ept id=\"p4\">**</ept>）、一个用来保存自定义应用程序特定属性的字典和大量任意的应用程序数据。应用程序可通过将任何可序列化对象传入到 <bpt id=\"p5\">[</bpt>BrokeredMessage<ept id=\"p5\">][]</ept> 的构造函数中来设置消息的正文，然后将使用适当的 <bpt id=\"p6\">**</bpt>DataContractSerializer<ept id=\"p6\">**</ept> 序列化对象。或者，也可以提供 <bpt id=\"p7\">**</bpt>java.io.InputStream<ept id=\"p7\">**</ept>。"
    },
    {
      "pos": [
        5196,
        5313
      ],
      "content": "以下示例演示了如何将五条测试消息发送到我们在前面的代码段中获得的 <ph id=\"ph1\">`TestTopic`</ph> <bpt id=\"p1\">**</bpt>MessageSender<ept id=\"p1\">**</ept>。请注意每条消息的 <bpt id=\"p2\">**</bpt>MessageNumber<ept id=\"p2\">**</ept> 属性值如何随循环迭代而变化（这将确定接收消息的订阅）："
    },
    {
      "content": "Service Bus 主题支持最大为 256 MB 的消息（标头最大为 64 MB，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。",
      "pos": [
        5696,
        5808
      ]
    },
    {
      "content": "如何从订阅接收消息",
      "pos": [
        5813,
        5822
      ]
    },
    {
      "pos": [
        5824,
        5919
      ],
      "content": "从订阅接收消息的主要方法是使用 <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> 对象。收到的消息可在两种不同模式下工作：<bpt id=\"p2\">**</bpt>ReceiveAndDelete<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>PeekLock<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        5921,
        6166
      ],
      "content": "当使用 <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> 模式时，接收是一个单次操作。即，当服务总线接收到对消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id=\"p2\">**</bpt>ReceiveAndDelete<ept id=\"p2\">**</ept> 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。"
    },
    {
      "pos": [
        6168,
        6395
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> 模式下，接收变成了一个两阶段操作，从而有可能支持无法允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 <bpt id=\"p2\">**</bpt>Delete<ept id=\"p2\">**</ept> 完成接收过程的第二个阶段。当服务总线发现 <bpt id=\"p3\">**</bpt>Delete<ept id=\"p3\">**</ept> 调用时，它会将消息标记为“已使用”并将其从主题中删除。"
    },
    {
      "pos": [
        6397,
        6505
      ],
      "content": "以下示例演示了如何使用 <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> 模式（非默认模式）接收和处理消息。以下示例执行一个循环并处理“HighMessages”订阅中的消息，然后在处理完所有消息后退出循环（或者，可将其设置为等待新消息）。"
    },
    {
      "content": "如何处理应用程序崩溃和不可读消息",
      "pos": [
        8435,
        8451
      ]
    },
    {
      "pos": [
        8453,
        8633
      ],
      "content": "Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id=\"p1\">**</bpt>unlockMessage<ept id=\"p1\">**</ept> 方法（而不是 <bpt id=\"p2\">**</bpt>deleteMessage<ept id=\"p2\">**</ept> 方法）。这将导致 Service Bus 解锁主题中的消息并使它能够由同一使用方应用程序或其他使用方应用程序再次接收。"
    },
    {
      "content": "还存在与主题中锁定的消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，如果应用程序崩溃），则 Service Bus 将自动解锁该消息并使它能够再次被接收。",
      "pos": [
        8635,
        8720
      ]
    },
    {
      "pos": [
        8722,
        8932
      ],
      "content": "如果在处理消息之后，发出 <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> 请求之前应用程序发生崩溃，该消息将在应用程序重新启动时重新传送给它。此情况通常称作<bpt id=\"p2\">**</bpt>至少处理一次<ept id=\"p2\">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。通常可使用消息的 <bpt id=\"p3\">**</bpt>getMessageId<ept id=\"p3\">**</ept> 方法实现此操作，这在多个传送尝试中保持不变。"
    },
    {
      "content": "删除主题和订阅",
      "pos": [
        8937,
        8944
      ]
    },
    {
      "pos": [
        8946,
        9020
      ],
      "content": "删除主题和订阅的主要方法是使用 <bpt id=\"p1\">**</bpt>ServiceBusContract<ept id=\"p1\">**</ept> 对象。删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。"
    },
    {
      "content": "后续步骤",
      "pos": [
        9296,
        9300
      ]
    },
    {
      "pos": [
        9302,
        9357
      ],
      "content": "现在，你已了解 Service Bus 队列的基础知识，请参阅<bpt id=\"p1\">[</bpt>服务总线队列、主题和订阅<ept id=\"p1\">][]</ept>以了解详细信息。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何通过 Java 使用服务总线主题 | Microsoft Azure\"\n    description=\"了解如何在 Azure 中使用 Service Bus 主题和订阅。代码示例是针对 Java 应用程序编写的。\"\n    services=\"service-bus\"\n    documentationCenter=\"java\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.date=\"01/26/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n\n# 如何使用服务总线主题和订阅\n\n[AZURE.INCLUDE [service-bus-selector-topics](../includes/service-bus-selector-topics.md)]\n\n本指南介绍如何使用服务总线主题和订阅。这些示例是采用 Java 编写的并且使用了 [Azure SDK for Java][]。涉及的任务包括**创建主题和订阅**、**创建订阅筛选器**、**将消息发送到主题**、**从订阅接收消息**以及**删除主题和订阅**。\n\n[AZURE.INCLUDE [service-bus-java-how-to-create-topic](../includes/service-bus-java-how-to-create-topic.md)]\n\n## 配置应用程序以使用 Service Bus\n\n在生成本示例之前，请确保已安装 [Azure SDK for Java][]。如果使用了 Eclipse，则可以安装包含 Azure SDK for Java 的 [Azure Toolkit for Eclipse][]。然后，你可以将 **Microsoft Azure Libraries for Java** 添加到你的项目：\n\n![](./media/service-bus-java-how-to-use-topics-subscriptions/eclipselibs.png)\n\n将以下导入语句添加到 Java 文件顶部：\n\n    // Include the following imports to use service bus APIs\n    import com.microsoft.windowsazure.services.servicebus.*;\n    import com.microsoft.windowsazure.services.servicebus.models.*;\n    import com.microsoft.windowsazure.core.*;\n    import javax.xml.datatype.*;\n\n向您的生成路径添加 Azure Libraries for Java，并将其包含在您的项目部署程序集中。\n\n## 创建主题\n\n服务总线主题的管理操作可通过 **ServiceBusContract** 类执行。**ServiceBusContract** 对象是使用封装了 SAS 令牌及用于管理它的权限的适当配置构造的，而 **ServiceBusContract** 类是与 Azure 进行通信的单一点。\n\n**ServiceBusService** 类提供了创建、枚举和删除主题的方法。以下示例演示了如何通过名为 `HowToSample` 的命名空间，使用 **ServiceBusService** 对象创建名为 `TestTopic` 的主题：\n\n    Configuration config =\n        ServiceBusConfiguration.configureWithSASAuthentication(\n          \"HowToSample\",\n          \"RootManageSharedAccessKey\",\n          \"SAS_key_value\",\n          \".servicebus.windows.net\"\n          );\n\n    ServiceBusContract service = ServiceBusService.create(config);\n    TopicInfo topicInfo = new TopicInfo(\"TestTopic\");\n    try  \n    {\n        CreateTopicResult result = service.createTopic(topicInfo);\n    }\n    catch (ServiceException e) {\n        System.out.print(\"ServiceException encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n\n可对 **TopicInfo** 执行某些方法，以调整主题的属性（例如，将默认的生存时间 (TTL) 值设置为应用于发送到主题的消息）。以下示例演示了如何创建最大大小为 5 GB 且名为 `TestTopic` 的主题：\n\n    long maxSizeInMegabytes = 5120;  \n    TopicInfo topicInfo = new TopicInfo(\"TestTopic\");  \n    topicInfo.setMaxSizeInMegabytes(maxSizeInMegabytes);\n    CreateTopicResult result = service.createTopic(topicInfo);\n\n请注意，你可以对 **ServiceBusContract** 对象使用 **listTopics** 方法来检查具有指定名称的主题在某个服务命名空间中是否已存在。\n\n## 创建订阅\n\n主题订阅也是使用 **ServiceBusService** 类创建的。订阅已命名，并且具有一个限制传递到订阅的虚拟队列的消息集的可选筛选器。\n\n### 创建具有默认 (MatchAll) 筛选器的订阅\n\n**MatchAll** 筛选器是默认筛选器，在创建新订阅时未指定筛选器的情况下使用。使用 **MatchAll** 筛选器时，发布到主题的所有消息都将置于订阅的虚拟队列中。以下示例创建名为“AllMessages”的订阅，并使用默认的 **MatchAll** 筛选器。\n\n    SubscriptionInfo subInfo = new SubscriptionInfo(\"AllMessages\");\n    CreateSubscriptionResult result = \n        service.createSubscription(\"TestTopic\", subInfo);\n\n### 创建具有筛选器的订阅\n\n还可以设置筛选器，以确定发送到主题的哪些消息应该在特定主题订阅中显示。\n\n订阅支持的最灵活的一种筛选器是 [SqlFilter][]，它实现了一部分 SQL92 功能。SQL 筛选器将对发布到主题的消息的属性进行操作。有关可用于 SQL 筛选器的表达式的更多详细信息，请参阅 [SqlFilter.SqlExpression][] 语法。\n\n以下示例创建了一个名为 `HighMessages` 的订阅（带有只选择自定义 **MessageNumber** 属性大于 3 的消息的 [SqlFilter][] 对象）：\n\n    // Create a \"HighMessages\" filtered subscription  \n    SubscriptionInfo subInfo = new SubscriptionInfo(\"HighMessages\");\n    CreateSubscriptionResult result = \n        service.createSubscription(\"TestTopic\", subInfo);\n    RuleInfo ruleInfo = new RuleInfo(\"myRuleGT3\");\n    ruleInfo = ruleInfo.withSqlExpressionFilter(\"MessageNumber > 3\");\n    CreateRuleResult ruleResult = \n        service.createRule(\"TestTopic\", \"HighMessages\", ruleInfo);\n    // Delete the default rule, otherwise the new rule won't be invoked.\n    service.deleteRule(\"TestTopic\", \"HighMessages\", \"$Default\");\n\n类似地，以下示例创建一个名为 `LowMessages` 的订阅，其 [SqlFilter][] 对象只选择 **MessageNumber** 属性小于或等于 3 的消息：\n\n    // Create a \"LowMessages\" filtered subscription\n    SubscriptionInfo subInfo = new SubscriptionInfo(\"LowMessages\");\n    CreateSubscriptionResult result = \n        service.createSubscription(\"TestTopic\", subInfo);\n    RuleInfo ruleInfo = new RuleInfo(\"myRuleLE3\");\n    ruleInfo = ruleInfo.withSqlExpressionFilter(\"MessageNumber <= 3\");\n    CreateRuleResult ruleResult = \n        service.createRule(\"TestTopic\", \"LowMessages\", ruleInfo);\n    // Delete the default rule, otherwise the new rule won't be invoked.\n    service.deleteRule(\"TestTopic\", \"LowMessages\", \"$Default\");\n\n\n现在，当消息发送到 `TestTopic` 时，它始终会传送给订阅了 `AllMessages` 订阅的接收者，并且选择性地传送给订阅了 `HighMessages` 和 `LowMessages` 订阅的接收者（具体取决于消息内容）。\n\n## 将消息发送到主题\n\n若要将消息发送到服务总线主题，你的应用程序将获得 **ServiceBusContract** 对象。以下代码演示了如何将消息发送到前面在 `HowToSample` 命名空间中创建的 `TestTopic` 主题：\n\n    BrokeredMessage message = new BrokeredMessage(\"MyMessage\");\n    service.sendTopicMessage(\"TestTopic\", message);\n\n发送到服务总线主题的消息是 [BrokeredMessage][] 类的实例。[BrokeredMessage][]* 对象包含一组标准方法（如 **setLabel** 和 **TimeToLive**）、一个用来保存自定义应用程序特定属性的字典和大量任意的应用程序数据。应用程序可通过将任何可序列化对象传入到 [BrokeredMessage][] 的构造函数中来设置消息的正文，然后将使用适当的 **DataContractSerializer** 序列化对象。或者，也可以提供 **java.io.InputStream**。\n\n以下示例演示了如何将五条测试消息发送到我们在前面的代码段中获得的 `TestTopic` **MessageSender**。请注意每条消息的 **MessageNumber** 属性值如何随循环迭代而变化（这将确定接收消息的订阅）：\n\n    for (int i=0; i<5; i++)  {\n        // Create message, passing a string message for the body\n        BrokeredMessage message = new BrokeredMessage(\"Test message \" + i);\n        // Set some additional custom app-specific property\n        message.setProperty(\"MessageNumber\", i);\n        // Send message to the topic\n        service.sendTopicMessage(\"TestTopic\", message);\n    }\n\nService Bus 主题支持最大为 256 MB 的消息（标头最大为 64 MB，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。\n\n## 如何从订阅接收消息\n\n从订阅接收消息的主要方法是使用 **ServiceBusContract** 对象。收到的消息可在两种不同模式下工作：**ReceiveAndDelete** 和 **PeekLock**。\n\n当使用 **ReceiveAndDelete** 模式时，接收是一个单次操作。即，当服务总线接收到对消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。**ReceiveAndDelete** 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。\n\n在 **PeekLock** 模式下，接收变成了一个两阶段操作，从而有可能支持无法允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 **Delete** 完成接收过程的第二个阶段。当服务总线发现 **Delete** 调用时，它会将消息标记为“已使用”并将其从主题中删除。\n\n以下示例演示了如何使用 **PeekLock** 模式（非默认模式）接收和处理消息。以下示例执行一个循环并处理“HighMessages”订阅中的消息，然后在处理完所有消息后退出循环（或者，可将其设置为等待新消息）。\n\n    try\n    {\n        ReceiveMessageOptions opts = ReceiveMessageOptions.DEFAULT;\n        opts.setReceiveMode(ReceiveMode.PEEK_LOCK);\n\n        while(true)  {\n            ReceiveSubscriptionMessageResult  resultSubMsg =\n                service.receiveSubscriptionMessage(\"TestTopic\", \"HighMessages\", opts);\n            BrokeredMessage message = resultSubMsg.getValue();\n            if (message != null && message.getMessageId() != null)\n            {\n                System.out.println(\"MessageID: \" + message.getMessageId());\n                // Display the topic message.\n                System.out.print(\"From topic: \");\n                byte[] b = new byte[200];\n                String s = null;\n                int numRead = message.getBody().read(b);\n                while (-1 != numRead)\n                {\n                    s = new String(b);\n                    s = s.trim();\n                    System.out.print(s);\n                    numRead = message.getBody().read(b);\n                }\n                System.out.println();\n                System.out.println(\"Custom Property: \" +\n                    message.getProperty(\"MessageNumber\"));\n                // Delete message.\n                System.out.println(\"Deleting this message.\");\n                service.deleteMessage(message);\n            }  \n            else  \n            {\n                System.out.println(\"Finishing up - no more messages.\");\n                break;\n                // Added to handle no more messages.\n                // Could instead wait for more messages to be added.\n            }\n        }\n    }\n    catch (ServiceException e) {\n        System.out.print(\"ServiceException encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n    catch (Exception e) {\n        System.out.print(\"Generic exception encountered: \");\n        System.out.println(e.getMessage());\n        System.exit(-1);\n    }\n\n## 如何处理应用程序崩溃和不可读消息\n\nService Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 **unlockMessage** 方法（而不是 **deleteMessage** 方法）。这将导致 Service Bus 解锁主题中的消息并使它能够由同一使用方应用程序或其他使用方应用程序再次接收。\n\n还存在与主题中锁定的消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，如果应用程序崩溃），则 Service Bus 将自动解锁该消息并使它能够再次被接收。\n\n如果在处理消息之后，发出 **deleteMessage** 请求之前应用程序发生崩溃，该消息将在应用程序重新启动时重新传送给它。此情况通常称作**至少处理一次**，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。通常可使用消息的 **getMessageId** 方法实现此操作，这在多个传送尝试中保持不变。\n\n## 删除主题和订阅\n\n删除主题和订阅的主要方法是使用 **ServiceBusContract** 对象。删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。\n\n    // Delete subscriptions\n    service.deleteSubscription(\"TestTopic\", \"AllMessages\");\n    service.deleteSubscription(\"TestTopic\", \"HighMessages\");\n    service.deleteSubscription(\"TestTopic\", \"LowMessages\");\n\n    // Delete a topic\n    service.deleteTopic(\"TestTopic\");\n\n## 后续步骤\n\n现在，你已了解 Service Bus 队列的基础知识，请参阅[服务总线队列、主题和订阅][]以了解详细信息。\n\n  [Azure SDK for Java]: /develop/java/\n  [Azure Toolkit for Eclipse]: https://msdn.microsoft.com/zh-cn/library/azure/hh694271.aspx\n  [Azure classic portal]: http://manage.windowsazure.cn\n  [服务总线队列、主题和订阅]: /documentation/articles/service-bus-queues-topics-subscriptions\n  [SqlFilter]: http://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.sqlfilter.aspx\n  [SqlFilter.SqlExpression]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx\n  [BrokeredMessage]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx\n\n<!---HONumber=Mooncake_0104_2016-->"
}