{
  "nodes": [
    {
      "content": "平滑流式处理 Windows 应用商店应用教程",
      "pos": [
        28,
        51
      ]
    },
    {
      "content": "了解如何使用 Azure 媒体服务来创建一个 C# Windows 应用商店应用程序，该应用程序包含一个用于播放平滑流内容的 XML MediaElement 控件。",
      "pos": [
        71,
        154
      ]
    },
    {
      "content": "如何生成平滑流式处理 Windows 应用商店应用程序",
      "pos": [
        375,
        402
      ]
    },
    {
      "pos": [
        404,
        785
      ],
      "content": "借助适用于 Windows 8 的平滑流式处理客户端 SDK，开发人员可以生成支持按需付费、直播平滑流式处理内容的 Windows 应用商店应用程序。除了播放平滑流式处理内容这一基本功能以外，该 SDK 还提供其他丰富功能，例如 Microsoft PlayReady 保护、质量级别限制、实时 DVR、音频流切换、收听状态更新（如质量级别更改）和错误事件，等等。有关支持的功能的详细信息，请参阅<bpt id=\"p1\">[</bpt>发行说明<ept id=\"p1\">](http://www.iis.net/learn/media/smooth-streaming/smooth-streaming-client-sdk-for-windows-8-release-notes)</ept>。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>适用于 Windows 8 的播放器框架<ept id=\"p2\">](http://playerframework.codeplex.com/)</ept>。"
    },
    {
      "content": "本教程包含四个课时：",
      "pos": [
        787,
        797
      ]
    },
    {
      "content": "创建基本的平滑流式处理应用商店应用程序",
      "pos": [
        802,
        821
      ]
    },
    {
      "content": "添加滚动条以控制媒体进度",
      "pos": [
        825,
        837
      ]
    },
    {
      "content": "选择平滑流式处理流",
      "pos": [
        841,
        850
      ]
    },
    {
      "content": "选择平滑流式处理曲目",
      "pos": [
        854,
        864
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        868,
        872
      ]
    },
    {
      "content": "Windows 8 32 位或 64 位。",
      "pos": [
        876,
        897
      ]
    },
    {
      "pos": [
        900,
        1021
      ],
      "content": "Visual Studio 2012 或 Visual Studio Express 2012（或更高版本）。你可以从<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](http://www.microsoft.com/visualstudio/11/downloads)</ept>获取试用版。"
    },
    {
      "pos": [
        1024,
        1250
      ],
      "content": "<bpt id=\"p1\">[</bpt>适用于 Windows 8 的 Microsoft 平滑流式处理客户端 SDK<ept id=\"p1\">](http://visualstudiogallery.msdn.microsoft.com/04423d13-3b3e-4741-a01c-1ae29e84fea6?SRC=Homehttp://visualstudiogallery.msdn.microsoft.com/04423d13-3b3e-4741-a01c-1ae29e84fea6?SRC=Home)</ept>。"
    },
    {
      "content": "可从 MSDN 开发人员代码示例（代码库）下载每一课后生成的解决方案：",
      "pos": [
        1253,
        1288
      ]
    },
    {
      "pos": [
        1292,
        1393
      ],
      "content": "<bpt id=\"p1\">[</bpt>第 1 课<ept id=\"p1\">](http://code.msdn.microsoft.com/Smooth-Streaming-Client-0bb1471f)</ept> - 简单的 Windows 8 平滑流式处理媒体播放器，"
    },
    {
      "pos": [
        1397,
        1506
      ],
      "content": "<bpt id=\"p1\">[</bpt>第 2 课<ept id=\"p1\">](http://code.msdn.microsoft.com/A-simple-Windows-8-Smooth-ee98f63a)</ept> - 带滚动条控件的简单 Windows 8 平滑流式处理媒体播放器，"
    },
    {
      "pos": [
        1510,
        1609
      ],
      "content": "<bpt id=\"p1\">[</bpt>第 3 课<ept id=\"p1\">](http://code.msdn.microsoft.com/A-Windows-8-Smooth-883c3b44)</ept> - 支持流选择的 Windows 8 平滑流式处理媒体播放器，"
    },
    {
      "pos": [
        1614,
        1714
      ],
      "content": "<bpt id=\"p1\">[</bpt>第 4 课<ept id=\"p1\">](http://code.msdn.microsoft.com/A-Windows-8-Smooth-aa9e4907)</ept> - 支持轨迹选择的 Windows 8 平滑流式处理媒体播放器。"
    },
    {
      "content": "第 1 课：创建基本的平滑流式处理应用商店应用程序",
      "pos": [
        1718,
        1743
      ]
    },
    {
      "content": "在本课中，你将要使用 MediaElement 控件创建一个 Windows 应用商店应用程序，以播放平滑流内容。运行的应用程序如下所示：",
      "pos": [
        1745,
        1814
      ]
    },
    {
      "content": "平滑流式处理 Windows 应用商店应用程序示例",
      "pos": [
        1818,
        1843
      ]
    },
    {
      "content": "有关开发 Windows 应用商店应用程序的详细信息，请参阅<bpt id=\"p1\">[</bpt>开发适用于 Windows 8 的极佳应用<ept id=\"p1\">](https://dev.windows.com/zh-cn/)</ept>。",
      "pos": [
        1866,
        1952
      ]
    },
    {
      "content": "本课包含以下过程：",
      "pos": [
        1954,
        1963
      ]
    },
    {
      "content": "创建 Windows 应用商店项目",
      "pos": [
        1969,
        1986
      ]
    },
    {
      "content": "设计用户界面 (XAML)",
      "pos": [
        1991,
        2004
      ]
    },
    {
      "content": "修改代码隐藏文件",
      "pos": [
        2009,
        2017
      ]
    },
    {
      "content": "编译和测试应用程序",
      "pos": [
        2022,
        2031
      ]
    },
    {
      "content": "创建 Windows 应用商店项目",
      "pos": [
        2035,
        2052
      ]
    },
    {
      "content": "运行 Visual Studio 2012 或更高版本。",
      "pos": [
        2060,
        2088
      ]
    },
    {
      "content": "在“文件”菜单中，单击“新建”，然后单击“项目”。",
      "pos": [
        2093,
        2118
      ]
    },
    {
      "content": "在“新建项目”对话框中，键入或选择以下值：",
      "pos": [
        2123,
        2144
      ]
    },
    {
      "content": "名称",
      "pos": [
        2146,
        2148
      ]
    },
    {
      "content": "值",
      "pos": [
        2149,
        2150
      ]
    },
    {
      "content": "模板组",
      "pos": [
        2159,
        2162
      ]
    },
    {
      "content": "已安装/模板/Visual C#/Windows 应用商店",
      "pos": [
        2163,
        2192
      ]
    },
    {
      "content": "模板",
      "pos": [
        2193,
        2195
      ]
    },
    {
      "content": "空白应用程序(XAML)",
      "pos": [
        2196,
        2208
      ]
    },
    {
      "content": "名称",
      "pos": [
        2209,
        2211
      ]
    },
    {
      "content": "SSPlayer",
      "pos": [
        2212,
        2220
      ]
    },
    {
      "content": "位置",
      "pos": [
        2221,
        2223
      ]
    },
    {
      "content": "C:\\\\SSTutorials",
      "pos": [
        2224,
        2239
      ]
    },
    {
      "content": "解决方案名称",
      "pos": [
        2240,
        2246
      ]
    },
    {
      "content": "SSPlayer",
      "pos": [
        2247,
        2255
      ]
    },
    {
      "content": "创建解决方案的目录",
      "pos": [
        2256,
        2265
      ]
    },
    {
      "content": "(选定)",
      "pos": [
        2266,
        2270
      ]
    },
    {
      "pos": [
        2276,
        2287
      ],
      "content": "单击<bpt id=\"p1\">**</bpt>“确定”<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "添加对平滑流式处理客户端 SDK 的引用",
      "pos": [
        2291,
        2311
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“SSPlayer”，然后单击“添加引用”。",
      "pos": [
        2319,
        2357
      ]
    },
    {
      "content": "键入或选择以下值：",
      "pos": [
        2362,
        2371
      ]
    },
    {
      "content": "名称",
      "pos": [
        2373,
        2375
      ]
    },
    {
      "content": "值",
      "pos": [
        2376,
        2377
      ]
    },
    {
      "content": "引用组",
      "pos": [
        2386,
        2389
      ]
    },
    {
      "content": "Windows/扩展",
      "pos": [
        2390,
        2400
      ]
    },
    {
      "content": "引用",
      "pos": [
        2401,
        2403
      ]
    },
    {
      "content": "选择适用于 Windows 8 和 Microsoft Visual C++ 运行时程序包的 Microsoft 平滑流式处理客户端 SDK",
      "pos": [
        2404,
        2474
      ]
    },
    {
      "pos": [
        2484,
        2495
      ],
      "content": "单击<bpt id=\"p1\">**</bpt>“确定”<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "添加引用后，必须选择目标平台（x64 或 x86），添加引用对于任何 CPU 平台配置都不起作用。在解决方案资源管理器中，你将会看到这些添加的引用出现了对应的黄色警告标记。",
      "pos": [
        2498,
        2584
      ]
    },
    {
      "content": "设计播放器用户界面",
      "pos": [
        2588,
        2597
      ]
    },
    {
      "content": "在解决方案资源管理器中，双击“MainPage.xaml”以在设计视图中将它打开。",
      "pos": [
        2605,
        2646
      ]
    },
    {
      "pos": [
        2651,
        2721
      ],
      "content": "在该 XAML 文件中找到 <bpt id=\"p1\">**</bpt>&amp;lt;Grid&amp;gt;<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>&amp;lt;/Grid&amp;gt;<ept id=\"p2\">**</ept> 标记，并在这两个标记之间粘贴以下代码："
    },
    {
      "content": "MediaElement 控件用于播放媒体。在下一课，我们将使用名为 sliderProgress 的滚动条控件来控制媒体进度。",
      "pos": [
        5837,
        5901
      ]
    },
    {
      "pos": [
        5907,
        5925
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存文件。"
    },
    {
      "content": "MediaElement 控件并非原本就支持平滑流式处理内容。若要启用平滑流式处理支持，必须按文件扩展名和 MIME 类型注册平滑流式处理字节流处理程序。若要注册，可以使用 Windows.Media 命名空间的 MediaExtensionManager.RegisterByteStremHandler 方法。",
      "pos": [
        5927,
        6084
      ]
    },
    {
      "content": "在此 XAML 文件中，某些事件处理程序与控件关联。你必须定义这些事件处理程序。",
      "pos": [
        6086,
        6126
      ]
    },
    {
      "content": "修改代码隐藏文件",
      "pos": [
        6130,
        6138
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。",
      "pos": [
        6146,
        6189
      ]
    },
    {
      "content": "在该文件的顶部，添加以下 using 语句：",
      "pos": [
        6194,
        6216
      ]
    },
    {
      "pos": [
        6252,
        6281
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类的开头，添加以下数据成员："
    },
    {
      "pos": [
        6368,
        6398
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 构造函数的末尾，添加以下两行："
    },
    {
      "pos": [
        6686,
        6713
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类的末尾，粘贴以下代码："
    },
    {
      "content": "现已定义 sliderProgress\\_PointerPressed 事件处理程序。若要使它正常工作，还需要执行其他操作，本教程的下一课将予以介绍。",
      "pos": [
        8096,
        8171
      ]
    },
    {
      "pos": [
        8176,
        8194
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存文件。"
    },
    {
      "content": "完成的代码隐藏文件应如下所示：",
      "pos": [
        8196,
        8211
      ]
    },
    {
      "content": "创建平滑流式处理 Windows 应用商店应用程序时 Visual Studio 中的代码视图",
      "pos": [
        8215,
        8262
      ]
    },
    {
      "content": "编译和测试应用程序",
      "pos": [
        8280,
        8289
      ]
    },
    {
      "content": "在“生成”菜单中，单击“配置管理器”。",
      "pos": [
        8297,
        8316
      ]
    },
    {
      "content": "更改“活动解决方案平台”以匹配你的开发平台。",
      "pos": [
        8321,
        8343
      ]
    },
    {
      "pos": [
        8348,
        8362
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F6<ept id=\"p1\">**</ept> 编译项目。"
    },
    {
      "pos": [
        8368,
        8384
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> 运行应用程序。"
    },
    {
      "content": "在应用程序的顶部，你可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。",
      "pos": [
        8389,
        8430
      ]
    },
    {
      "content": "单击“设置源”。由于已按默认启用“自动播放”，因此媒体会自动播放。你可以使用“播放”、“暂停”和“停止”按钮控制媒体。可以使用垂直滚动条控制媒体音量。但是，用于控制媒体进度的水平滚动条功能尚未完全实现。",
      "pos": [
        8436,
        8537
      ]
    },
    {
      "content": "第 1 课到此结束。在本课中，你已学习如何使用 MediaElement 控件来播放平滑流式处理内容。在下一课，你将要添加一个滚动条，用于控制平滑流式处理内容的进度。",
      "pos": [
        8540,
        8623
      ]
    },
    {
      "content": "第2 课：添加滚动条以控制媒体进度",
      "pos": [
        8628,
        8645
      ]
    },
    {
      "content": "在第 1 课，你已使用 MediaElement XAML 控件创建了一个 Windows 应用商店应用程序，用于播放平滑流式处理媒体内容。该应用程序带有基本的媒体功能，例如开始、停止和暂停。在本课中，你将要在该应用程序中添加一个滚动条控件。",
      "pos": [
        8646,
        8767
      ]
    },
    {
      "content": "在本教程中，我们将使用一个计时器，基于 MediaElement 控件的当前位置更新该滚动条的位置。在播放实况内容时，滚动条开始时间和结束时间也需要更新。你可以在自适应源更新事件中更好地处理此操作。",
      "pos": [
        8769,
        8868
      ]
    },
    {
      "content": "媒体源是生成媒体数据的对象。源解析程序采用 URL 或字节流，并为该内容创建相应的媒体源。源解析程序是应用程序创建媒体源的标准途径。",
      "pos": [
        8870,
        8936
      ]
    },
    {
      "content": "本课包含以下过程：",
      "pos": [
        8938,
        8947
      ]
    },
    {
      "content": "注册平滑流式处理处理程序",
      "pos": [
        8953,
        8965
      ]
    },
    {
      "content": "添加自适应源管理器级别事件处理程序",
      "pos": [
        8971,
        8988
      ]
    },
    {
      "content": "添加自适应源级别事件处理程序",
      "pos": [
        8993,
        9007
      ]
    },
    {
      "content": "添加 MediaElement 事件处理程序",
      "pos": [
        9012,
        9034
      ]
    },
    {
      "content": "添加滚动条相关的代码",
      "pos": [
        9039,
        9049
      ]
    },
    {
      "content": "编译和测试应用程序",
      "pos": [
        9054,
        9063
      ]
    },
    {
      "content": "注册平滑流式处理字节流处理程序并传递属性集",
      "pos": [
        9067,
        9088
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。",
      "pos": [
        9096,
        9139
      ]
    },
    {
      "content": "在该文件的开头，添加以下 using 语句：",
      "pos": [
        9144,
        9166
      ]
    },
    {
      "content": "在 MainPage 类的开头，添加以下数据成员：",
      "pos": [
        9222,
        9247
      ]
    },
    {
      "pos": [
        9456,
        9538
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 构造函数中的 <bpt id=\"p2\">**</bpt>this.Initialize Components();<ept id=\"p2\">**</ept> 行以及你在上一课编写的注册代码行的后面添加以下代码："
    },
    {
      "pos": [
        9975,
        10038
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 构造函数中，修改两个 RegisterByteStreamHandler 方法以添加第四个参数："
    },
    {
      "pos": [
        10706,
        10724
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存文件。"
    },
    {
      "content": "添加自适应源管理器级别事件处理程序",
      "pos": [
        10728,
        10745
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。",
      "pos": [
        10753,
        10796
      ]
    },
    {
      "pos": [
        10801,
        10828
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类中，添加以下数据成员："
    },
    {
      "pos": [
        10889,
        10920
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类的末尾，添加以下事件处理程序："
    },
    {
      "pos": [
        11224,
        11264
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 构造函数的末尾，添加以下行以订阅自适应源打开事件："
    },
    {
      "pos": [
        11274,
        11407
      ],
      "content": "adaptiveSourceManager.AdaptiveSourceOpenedEvent += \n    new AdaptiveSourceOpenedEventHandler(mediaElement\\_AdaptiveSourceOpened);",
      "leadings": [
        "",
        "    "
      ],
      "nodes": [
        {
          "content": "adaptiveSourceManager.AdaptiveSourceOpenedEvent +=",
          "pos": [
            0,
            50
          ]
        },
        {
          "content": "new AdaptiveSourceOpenedEventHandler(mediaElement\\_AdaptiveSourceOpened);",
          "pos": [
            56,
            129
          ]
        }
      ]
    },
    {
      "pos": [
        11413,
        11431
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存文件。"
    },
    {
      "content": "添加自适应源级别事件处理程序",
      "pos": [
        11435,
        11449
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。",
      "pos": [
        11457,
        11500
      ]
    },
    {
      "pos": [
        11505,
        11532
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类中，添加以下数据成员："
    },
    {
      "pos": [
        11670,
        11701
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类的末尾，添加以下事件处理程序："
    },
    {
      "pos": [
        12437,
        12495
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>mediaElement AdaptiveSourceOpened<ept id=\"p1\">**</ept> 方法的末尾，添加以下代码以订阅事件："
    },
    {
      "pos": [
        12817,
        12835
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存文件。"
    },
    {
      "content": "相同的事件也可以在自适应源管理器级别使用，因此可用于处理应用程序中所有媒体元素通用的功能。每个 AdaptiveSource 包含其自身的事件，所有 AdaptiveSource 事件将级联在 AdaptiveSourceManager 下面。",
      "pos": [
        12837,
        12959
      ]
    },
    {
      "content": "添加媒体元素事件处理程序",
      "pos": [
        12963,
        12975
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。",
      "pos": [
        12983,
        13026
      ]
    },
    {
      "pos": [
        13031,
        13062
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类的末尾，添加以下事件处理程序："
    },
    {
      "pos": [
        13627,
        13662
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 构造函数的末尾，添加以下代码以订阅事件："
    },
    {
      "pos": [
        13818,
        13836
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存文件。"
    },
    {
      "content": "添加滚动条相关的代码",
      "pos": [
        13840,
        13850
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。",
      "pos": [
        13858,
        13901
      ]
    },
    {
      "content": "在该文件的开头，添加以下 using 语句：",
      "pos": [
        13906,
        13928
      ]
    },
    {
      "pos": [
        13970,
        13997
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类中，添加以下数据成员："
    },
    {
      "pos": [
        14126,
        14156
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 构造函数的末尾，添加以下代码："
    },
    {
      "pos": [
        14421,
        14448
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类的末尾，添加以下代码："
    },
    {
      "pos": [
        17161,
        17254
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>CoreDispatcher 用于从非 UI 线程对 UI 线程进行更改。如果调度程序线程出现瓶颈，开发人员可以选择使用他（她）想要更新的 UI 元素提供的调度程序。例如："
    },
    {
      "pos": [
        17593,
        17654
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>mediaElement\\_AdaptiveSourceStatusUpdated<ept id=\"p1\">**</ept> 方法的末尾，添加以下代码："
    },
    {
      "pos": [
        17749,
        17780
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MediaOpened<ept id=\"p1\">**</ept> 方法的末尾，添加以下代码："
    },
    {
      "pos": [
        17790,
        17941
      ],
      "content": "sliderProgress.StepFrequency = SliderFrequency(mediaElement.NaturalDuration.TimeSpan);\nsliderProgress.Width = mediaElement.Width;\nsetupTimer();",
      "leadings": [
        "",
        "    ",
        "    "
      ],
      "nodes": [
        {
          "content": "sliderProgress.StepFrequency = SliderFrequency(mediaElement.NaturalDuration.TimeSpan);",
          "pos": [
            0,
            86
          ]
        },
        {
          "content": "sliderProgress.Width = mediaElement.Width;",
          "pos": [
            87,
            129
          ]
        },
        {
          "content": "setupTimer();",
          "pos": [
            130,
            143
          ]
        }
      ]
    },
    {
      "pos": [
        17947,
        17965
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存文件。"
    },
    {
      "content": "编译和测试应用程序",
      "pos": [
        17969,
        17978
      ]
    },
    {
      "pos": [
        17985,
        17999
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F6<ept id=\"p1\">**</ept> 编译项目。"
    },
    {
      "pos": [
        18005,
        18021
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> 运行应用程序。"
    },
    {
      "content": "在应用程序的顶部，你可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。",
      "pos": [
        18026,
        18067
      ]
    },
    {
      "content": "单击“设置源”。",
      "pos": [
        18073,
        18081
      ]
    },
    {
      "content": "测试滚动条。",
      "pos": [
        18087,
        18093
      ]
    },
    {
      "content": "你已完成第 2 课。在本课中，你已将一个滑块添加到应用程序。",
      "pos": [
        18095,
        18125
      ]
    },
    {
      "content": "第 3 课：选择平滑流式处理流",
      "pos": [
        18129,
        18144
      ]
    },
    {
      "content": "平滑流式处理可以流送包含观看者可选择的多语言音频曲目的内容。在本课中，你将要学习如何使观看者能够选择流。本课包含以下过程：",
      "pos": [
        18145,
        18206
      ]
    },
    {
      "content": "修改 XAML 文件",
      "pos": [
        18211,
        18221
      ]
    },
    {
      "content": "修改代码隐藏文件",
      "pos": [
        18225,
        18233
      ]
    },
    {
      "content": "编译和测试应用程序",
      "pos": [
        18237,
        18246
      ]
    },
    {
      "content": "修改 XAML 文件",
      "pos": [
        18251,
        18261
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看设计器”。",
      "pos": [
        18268,
        18312
      ]
    },
    {
      "content": "找到 &amp;lt;Grid.RowDefinitions&amp;gt;，并按如下所示修改 RowDefinitions：",
      "pos": [
        18316,
        18371
      ]
    },
    {
      "content": "在 &amp;lt;Grid&amp;gt;&amp;lt;/Grid&amp;gt; 标记中，添加以下代码以定义一个列表框控件，使用户能够看到可用流的列表及选择流：",
      "pos": [
        18656,
        18723
      ]
    },
    {
      "pos": [
        20074,
        20092
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存更改。"
    },
    {
      "content": "修改代码隐藏文件",
      "pos": [
        20097,
        20105
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。",
      "pos": [
        20112,
        20155
      ]
    },
    {
      "content": "在 SSPlayer 命名空间中添加一个新类：",
      "pos": [
        20159,
        20182
      ]
    },
    {
      "content": "在 MainPage 类的开头，添加以下变量定义：",
      "pos": [
        21371,
        21396
      ]
    },
    {
      "content": "在 MainPage 类中，添加以下区域：",
      "pos": [
        21604,
        21625
      ]
    },
    {
      "content": "找到 mediaElement\\_ManifestReady 方法，并在函数的末尾追加以下代码：",
      "pos": [
        27067,
        27115
      ]
    },
    {
      "content": "因此，当 MediaElement 清单准备就绪时，该代码将获取可用流的列表，并将该列表的内容填充到 UI 列表框。",
      "pos": [
        27214,
        27272
      ]
    },
    {
      "content": "在 MainPage 类中，找到 UI 按钮单击事件区域，然后添加以下函数定义：",
      "pos": [
        27277,
        27317
      ]
    },
    {
      "content": "编译和测试应用程序",
      "pos": [
        27705,
        27714
      ]
    },
    {
      "pos": [
        27721,
        27735
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F6<ept id=\"p1\">**</ept> 编译项目。"
    },
    {
      "pos": [
        27741,
        27757
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> 运行应用程序。"
    },
    {
      "content": "在应用程序的顶部，你可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。",
      "pos": [
        27762,
        27803
      ]
    },
    {
      "content": "单击“设置源”。",
      "pos": [
        27809,
        27817
      ]
    },
    {
      "content": "默认语言为 audio\\_eng。尝试在 audio\\_eng 和 audio\\_es 之间切换。每次选择一个新流时，都必须单击“提交”按钮。",
      "pos": [
        27823,
        27894
      ]
    },
    {
      "content": "你已完成第 3 课。在本课中，你已添加了用于选择流的功能。",
      "pos": [
        27896,
        27925
      ]
    },
    {
      "content": "第 4 课：选择平滑流式处理曲目",
      "pos": [
        27929,
        27945
      ]
    },
    {
      "content": "平滑流式处理演播内容可能包含以不同质量级别（比特率）和分辨率编码的多个视频文件。在本课中，你将要学习如何使用户能够选择曲目。本课包含以下过程：",
      "pos": [
        27946,
        28017
      ]
    },
    {
      "content": "修改 XAML 文件",
      "pos": [
        28022,
        28032
      ]
    },
    {
      "content": "修改代码隐藏文件",
      "pos": [
        28036,
        28044
      ]
    },
    {
      "content": "编译和测试应用程序",
      "pos": [
        28048,
        28057
      ]
    },
    {
      "content": "修改 XAML 文件",
      "pos": [
        28061,
        28071
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看设计器”。",
      "pos": [
        28078,
        28122
      ]
    },
    {
      "pos": [
        28126,
        28190
      ],
      "content": "找到名为 <bpt id=\"p1\">**</bpt>gridStreamAndBitrateSelection<ept id=\"p1\">**</ept> 的 Grid 标记，并在该标记的末尾追加以下代码："
    },
    {
      "pos": [
        29072,
        29089
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>CTRL+S<ept id=\"p1\">**</ept> 保存更改"
    },
    {
      "content": "修改代码隐藏文件",
      "pos": [
        29094,
        29102
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。",
      "pos": [
        29109,
        29152
      ]
    },
    {
      "content": "在 SSPlayer 命名空间中添加一个新类：",
      "pos": [
        29156,
        29179
      ]
    },
    {
      "content": "在 MainPage 类的开头，添加以下变量定义：",
      "pos": [
        30162,
        30187
      ]
    },
    {
      "content": "在 MainPage 类中，添加以下区域：",
      "pos": [
        30242,
        30263
      ]
    },
    {
      "content": "找到 mediaElement\\_ManifestReady 方法，并在函数的末尾追加以下代码：",
      "pos": [
        33713,
        33761
      ]
    },
    {
      "content": "在 MainPage 类中，找到 UI 按钮单击事件区域，然后添加以下函数定义：",
      "pos": [
        33853,
        33893
      ]
    },
    {
      "content": "编译和测试应用程序",
      "pos": [
        34281,
        34290
      ]
    },
    {
      "pos": [
        34297,
        34311
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F6<ept id=\"p1\">**</ept> 编译项目。"
    },
    {
      "pos": [
        34317,
        34333
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> 运行应用程序。"
    },
    {
      "content": "在应用程序的顶部，你可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。",
      "pos": [
        34338,
        34379
      ]
    },
    {
      "content": "单击“设置源”。",
      "pos": [
        34385,
        34393
      ]
    },
    {
      "content": "默认情况下，已选中视频流的所有曲目。若要体验比特率的变化，你可以先选择最低的可用比特率，然后再选择最高的可用比特率。每次更改后都必须单击“提交”。你可以看到视频质量的变化。",
      "pos": [
        34399,
        34485
      ]
    },
    {
      "content": "你已完成第 4 课。在本课中，你已添加了用于选择曲目的功能。",
      "pos": [
        34487,
        34517
      ]
    },
    {
      "content": "其他资源：",
      "pos": [
        34524,
        34529
      ]
    },
    {
      "content": "如何生成具有高级功能的平滑流式处理 Windows 8 JavaScript 应用程序",
      "pos": [
        34533,
        34576
      ]
    },
    {
      "content": "平滑流式处理技术概述",
      "pos": [
        34721,
        34731
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"平滑流式处理 Windows 应用商店应用教程\" \n    description=\"了解如何使用 Azure 媒体服务来创建一个 C# Windows 应用商店应用程序，该应用程序包含一个用于播放平滑流内容的 XML MediaElement 控件。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\" \n    wacn.date=\"03/17/2016\"/>\n\n\n\n#如何生成平滑流式处理 Windows 应用商店应用程序\n\n借助适用于 Windows 8 的平滑流式处理客户端 SDK，开发人员可以生成支持按需付费、直播平滑流式处理内容的 Windows 应用商店应用程序。除了播放平滑流式处理内容这一基本功能以外，该 SDK 还提供其他丰富功能，例如 Microsoft PlayReady 保护、质量级别限制、实时 DVR、音频流切换、收听状态更新（如质量级别更改）和错误事件，等等。有关支持的功能的详细信息，请参阅[发行说明](http://www.iis.net/learn/media/smooth-streaming/smooth-streaming-client-sdk-for-windows-8-release-notes)。有关详细信息，请参阅[适用于 Windows 8 的播放器框架](http://playerframework.codeplex.com/)。\n\n本教程包含四个课时：\n\n1. 创建基本的平滑流式处理应用商店应用程序\n2. 添加滚动条以控制媒体进度\n3. 选择平滑流式处理流\n4. 选择平滑流式处理曲目\n\n##先决条件\n\n- Windows 8 32 位或 64 位。\n- Visual Studio 2012 或 Visual Studio Express 2012（或更高版本）。你可以从[此处](http://www.microsoft.com/visualstudio/11/downloads)获取试用版。\n- [适用于 Windows 8 的 Microsoft 平滑流式处理客户端 SDK](http://visualstudiogallery.msdn.microsoft.com/04423d13-3b3e-4741-a01c-1ae29e84fea6?SRC=Homehttp://visualstudiogallery.msdn.microsoft.com/04423d13-3b3e-4741-a01c-1ae29e84fea6?SRC=Home)。\n\n\n可从 MSDN 开发人员代码示例（代码库）下载每一课后生成的解决方案：\n\n- [第 1 课](http://code.msdn.microsoft.com/Smooth-Streaming-Client-0bb1471f) - 简单的 Windows 8 平滑流式处理媒体播放器， \n- [第 2 课](http://code.msdn.microsoft.com/A-simple-Windows-8-Smooth-ee98f63a) - 带滚动条控件的简单 Windows 8 平滑流式处理媒体播放器， \n- [第 3 课](http://code.msdn.microsoft.com/A-Windows-8-Smooth-883c3b44) - 支持流选择的 Windows 8 平滑流式处理媒体播放器，  \n- [第 4 课](http://code.msdn.microsoft.com/A-Windows-8-Smooth-aa9e4907) - 支持轨迹选择的 Windows 8 平滑流式处理媒体播放器。\n\n##第 1 课：创建基本的平滑流式处理应用商店应用程序\n\n在本课中，你将要使用 MediaElement 控件创建一个 Windows 应用商店应用程序，以播放平滑流内容。运行的应用程序如下所示：\n\n![平滑流式处理 Windows 应用商店应用程序示例][PlayerApplication]\n \n有关开发 Windows 应用商店应用程序的详细信息，请参阅[开发适用于 Windows 8 的极佳应用](https://dev.windows.com/zh-cn/)。 \n本课包含以下过程：\n\n1.  创建 Windows 应用商店项目\n2.  设计用户界面 (XAML)\n3.  修改代码隐藏文件\n4.  编译和测试应用程序\n\n**创建 Windows 应用商店项目**\n\n1.  运行 Visual Studio 2012 或更高版本。\n2.  在“文件”菜单中，单击“新建”，然后单击“项目”。\n3.  在“新建项目”对话框中，键入或选择以下值：\n\n名称|值\n---|---\n模板组|已安装/模板/Visual C#/Windows 应用商店\n模板|空白应用程序(XAML)\n名称|SSPlayer\n位置|C:\\\\SSTutorials\n解决方案名称|SSPlayer\n创建解决方案的目录|(选定)\n\n4.  单击**“确定”**。\n\n**添加对平滑流式处理客户端 SDK 的引用**\n\n1.  在解决方案资源管理器中，右键单击“SSPlayer”，然后单击“添加引用”。\n2.  键入或选择以下值：\n\n名称|值\n---|---\n引用组|Windows/扩展\n引用|选择适用于 Windows 8 和 Microsoft Visual C++ 运行时程序包的 Microsoft 平滑流式处理客户端 SDK\n    \n3.  单击**“确定”**。 \n\n添加引用后，必须选择目标平台（x64 或 x86），添加引用对于任何 CPU 平台配置都不起作用。在解决方案资源管理器中，你将会看到这些添加的引用出现了对应的黄色警告标记。\n\n**设计播放器用户界面**\n\n1.  在解决方案资源管理器中，双击“MainPage.xaml”以在设计视图中将它打开。\n2.  在该 XAML 文件中找到 **&lt;Grid&gt;** 和 **&lt;/Grid&gt;** 标记，并在这两个标记之间粘贴以下代码：\n\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"20\"/>    <!-- spacer -->\n            <RowDefinition Height=\"50\"/>    <!-- media controls -->\n            <RowDefinition Height=\"100*\"/>  <!-- media element -->\n            <RowDefinition Height=\"80*\"/>   <!-- media stream and track selection -->\n            <RowDefinition Height=\"50\"/>    <!-- status bar -->\n        </Grid.RowDefinitions>\n        \n        <StackPanel Name=\"spMediaControl\" Grid.Row=\"1\" Orientation=\"Horizontal\">\n            <TextBlock x:Name=\"tbSource\" Text=\"Source :  \" FontSize=\"16\" FontWeight=\"Bold\" VerticalAlignment=\"Center\" />\n            <TextBox x:Name=\"txtMediaSource\" Text=\"http://ecn.channel9.msdn.com/o9/content/smf/smoothcontent/elephantsdream/Elephants_Dream_1024-h264-st-aac.ism/manifest\" FontSize=\"10\" Width=\"700\" Margin=\"0,4,0,10\" />\n            <Button x:Name=\"btnSetSource\" Content=\"Set Source\" Width=\"111\" Height=\"43\" Click=\"btnSetSource_Click\"/>\n            <Button x:Name=\"btnPlay\" Content=\"Play\" Width=\"111\" Height=\"43\" Click=\"btnPlay_Click\"/>\n            <Button x:Name=\"btnPause\" Content=\"Pause\"  Width=\"111\" Height=\"43\" Click=\"btnPause_Click\"/>\n            <Button x:Name=\"btnStop\" Content=\"Stop\"  Width=\"111\" Height=\"43\" Click=\"btnStop_Click\"/>\n            <CheckBox x:Name=\"chkAutoPlay\" Content=\"Auto Play\" Height=\"55\" Width=\"Auto\" IsChecked=\"{Binding AutoPlay, ElementName=mediaElement, Mode=TwoWay}\"/>\n            <CheckBox x:Name=\"chkMute\" Content=\"Mute\" Height=\"55\" Width=\"67\" IsChecked=\"{Binding IsMuted, ElementName=mediaElement, Mode=TwoWay}\"/>\n        </StackPanel>\n\n        <StackPanel Name=\"spMediaElement\" Grid.Row=\"2\" Height=\"435\" Width=\"1072\"\n                    HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n            <MediaElement x:Name=\"mediaElement\" Height=\"356\" Width=\"924\" MinHeight=\"225\"\n                          HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" \n                          AudioCategory=\"BackgroundCapableMedia\" />\n            <StackPanel Orientation=\"Horizontal\">\n                <Slider x:Name=\"sliderProgress\" Width=\"924\" Height=\"44\"\n                        HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"\n                        PointerPressed=\"sliderProgress_PointerPressed\"/>\n                <Slider x:Name=\"sliderVolume\" \n                        HorizontalAlignment=\"Right\" VerticalAlignment=\"Center\" Orientation=\"Vertical\" \n                        Height=\"79\" Width=\"148\" Minimum=\"0\" Maximum=\"1\" StepFrequency=\"0.1\" \n                        Value=\"{Binding Volume, ElementName=mediaElement, Mode=TwoWay}\" \n                        ToolTipService.ToolTip=\"{Binding Value, RelativeSource={RelativeSource Mode=Self}}\"/>\n            </StackPanel>\n        </StackPanel>\n\n        <StackPanel Name=\"spStatus\" Grid.Row=\"4\" Orientation=\"Horizontal\">\n            <TextBlock x:Name=\"tbStatus\" Text=\"Status :  \" \n               FontSize=\"16\" FontWeight=\"Bold\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" />\n            <TextBox x:Name=\"txtStatus\" FontSize=\"10\" Width=\"700\" VerticalAlignment=\"Center\"/>\n        </StackPanel>\n\n    MediaElement 控件用于播放媒体。在下一课，我们将使用名为 sliderProgress 的滚动条控件来控制媒体进度。\n\n3.  按 **CTRL+S** 保存文件。\n\nMediaElement 控件并非原本就支持平滑流式处理内容。若要启用平滑流式处理支持，必须按文件扩展名和 MIME 类型注册平滑流式处理字节流处理程序。若要注册，可以使用 Windows.Media 命名空间的 MediaExtensionManager.RegisterByteStremHandler 方法。\n\n在此 XAML 文件中，某些事件处理程序与控件关联。你必须定义这些事件处理程序。\n\n**修改代码隐藏文件**\n\n1.  在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。\n2.  在该文件的顶部，添加以下 using 语句：\n\n        using Windows.Media;\n\n3.  在 **MainPage** 类的开头，添加以下数据成员：\n\n        private MediaExtensionManager extensions = new MediaExtensionManager();\n\n4.  在 **MainPage** 构造函数的末尾，添加以下两行：\n\n        extensions.RegisterByteStreamHandler(\"Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler\", \".ism\", \"text/xml\");\n        extensions.RegisterByteStreamHandler(\"Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler\", \".ism\", \"application/vnd.ms-sstr+xml\");\n        \n5.  在 **MainPage** 类的末尾，粘贴以下代码：\n\n        #region UI Button Click Events\n        private void btnPlay_Click(object sender, RoutedEventArgs e)\n        {\n            mediaElement.Play();\n            txtStatus.Text = \"MediaElement is playing ...\";\n        }\n        \n        private void btnPause_Click(object sender, RoutedEventArgs e)\n        {\n            mediaElement.Pause();\n            txtStatus.Text = \"MediaElement is paused\";\n        }\n        \n        private void btnSetSource_Click(object sender, RoutedEventArgs e)\n        {\n            sliderProgress.Value = 0;\n            mediaElement.Source = new Uri(txtMediaSource.Text);\n        \n            if (chkAutoPlay.IsChecked == true)\n            {\n                txtStatus.Text = \"MediaElement is playing ...\";\n            }\n            else\n            {\n                txtStatus.Text = \"Click the Play button to play the media source.\";\n            }\n        }\n        \n        private void btnStop_Click(object sender, RoutedEventArgs e)\n        {\n            mediaElement.Stop();\n            txtStatus.Text = \"MediaElement is stopped\";\n        }\n        \n        private void sliderProgress_PointerPressed(object sender, PointerRoutedEventArgs e)\n        {\n            txtStatus.Text = \"Seek to position \" + sliderProgress.Value;\n            mediaElement.Position = new TimeSpan(0, 0, (int)(sliderProgress.Value));\n        }\n        #endregion\n\n    现已定义 sliderProgress\\_PointerPressed 事件处理程序。若要使它正常工作，还需要执行其他操作，本教程的下一课将予以介绍。\n6.  按 **CTRL+S** 保存文件。\n\n完成的代码隐藏文件应如下所示：\n\n![创建平滑流式处理 Windows 应用商店应用程序时 Visual Studio 中的代码视图][CodeViewPic]\n\n**编译和测试应用程序**\n\n1.  在“生成”菜单中，单击“配置管理器”。\n2.  更改“活动解决方案平台”以匹配你的开发平台。\n3.  按 **F6** 编译项目。 \n4.  按 **F5** 运行应用程序。\n5.  在应用程序的顶部，你可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。 \n6.  单击“设置源”。由于已按默认启用“自动播放”，因此媒体会自动播放。你可以使用“播放”、“暂停”和“停止”按钮控制媒体。可以使用垂直滚动条控制媒体音量。但是，用于控制媒体进度的水平滚动条功能尚未完全实现。 \n\n第 1 课到此结束。在本课中，你已学习如何使用 MediaElement 控件来播放平滑流式处理内容。在下一课，你将要添加一个滚动条，用于控制平滑流式处理内容的进度。\n\n\n##第2 课：添加滚动条以控制媒体进度\n在第 1 课，你已使用 MediaElement XAML 控件创建了一个 Windows 应用商店应用程序，用于播放平滑流式处理媒体内容。该应用程序带有基本的媒体功能，例如开始、停止和暂停。在本课中，你将要在该应用程序中添加一个滚动条控件。\n\n在本教程中，我们将使用一个计时器，基于 MediaElement 控件的当前位置更新该滚动条的位置。在播放实况内容时，滚动条开始时间和结束时间也需要更新。你可以在自适应源更新事件中更好地处理此操作。\n\n媒体源是生成媒体数据的对象。源解析程序采用 URL 或字节流，并为该内容创建相应的媒体源。源解析程序是应用程序创建媒体源的标准途径。\n\n本课包含以下过程：\n\n1.  注册平滑流式处理处理程序 \n2.  添加自适应源管理器级别事件处理程序\n3.  添加自适应源级别事件处理程序\n4.  添加 MediaElement 事件处理程序\n5.  添加滚动条相关的代码\n6.  编译和测试应用程序\n\n**注册平滑流式处理字节流处理程序并传递属性集**\n\n1.  在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。\n2.  在该文件的开头，添加以下 using 语句：\n\n        using Microsoft.Media.AdaptiveStreaming;\n\n3.  在 MainPage 类的开头，添加以下数据成员：\n\n        private Windows.Foundation.Collections.PropertySet propertySet = new Windows.Foundation.Collections.PropertySet();             \n        private IAdaptiveSourceManager adaptiveSourceManager;\n    \n4.  在 **MainPage** 构造函数中的 **this.Initialize Components();** 行以及你在上一课编写的注册代码行的后面添加以下代码：\n    \n        // Gets the default instance of AdaptiveSourceManager which manages Smooth \n        //Streaming media sources.\n        adaptiveSourceManager = AdaptiveSourceManager.GetDefault();\n        // Sets property key value to AdaptiveSourceManager default instance.\n        // {A5CE1DE8-1D00-427B-ACEF-FB9A3C93DE2D}\" must be hardcoded.\n        propertySet[\"{A5CE1DE8-1D00-427B-ACEF-FB9A3C93DE2D}\"] = adaptiveSourceManager;\n    \n5.  在 **MainPage** 构造函数中，修改两个 RegisterByteStreamHandler 方法以添加第四个参数：\n\n        // Registers Smooth Streaming byte-stream handler for \".ism\" extension and, \n        // \"text/xml\" and \"application/vnd.ms-ss\" mime-types and pass the propertyset. \n        // http://*.ism/manifest URI resources will be resolved by Byte-stream handler.\n        extensions.RegisterByteStreamHandler(\n            \"Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler\", \n            \".ism\", \n            \"text/xml\", \n            propertySet );\n        extensions.RegisterByteStreamHandler(\n            \"Microsoft.Media.AdaptiveStreaming.SmoothByteStreamHandler\", \n            \".ism\", \n            \"application/vnd.ms-sstr+xml\", \n        propertySet);\n\n6.  按 **CTRL+S** 保存文件。\n\n**添加自适应源管理器级别事件处理程序**\n\n1.  在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。\n2.  在 **MainPage** 类中，添加以下数据成员：\n\n        private AdaptiveSource adaptiveSource = null;\n\n3.  在 **MainPage** 类的末尾，添加以下事件处理程序：\n    \n        #region Adaptive Source Manager Level Events\n        private void mediaElement_AdaptiveSourceOpened(AdaptiveSource sender, AdaptiveSourceOpenedEventArgs args)\n        {\n            adaptiveSource = args.AdaptiveSource;\n        }\n        #endregion Adaptive Source Manager Level Events\n\n4.  在 **MainPage** 构造函数的末尾，添加以下行以订阅自适应源打开事件：\n    \n    adaptiveSourceManager.AdaptiveSourceOpenedEvent += \n        new AdaptiveSourceOpenedEventHandler(mediaElement\\_AdaptiveSourceOpened);\n\n5.  按 **CTRL+S** 保存文件。\n\n**添加自适应源级别事件处理程序**\n\n1.  在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。\n2.  在 **MainPage** 类中，添加以下数据成员：\n    \n        private AdaptiveSourceStatusUpdatedEventArgs adaptiveSourceStatusUpdate; \n        private Manifest manifestObject;\n    \n3.  在 **MainPage** 类的末尾，添加以下事件处理程序：\n\n        #region Adaptive Source Level Events\n        private void mediaElement_ManifestReady(AdaptiveSource sender, ManifestReadyEventArgs args)\n        {\n            adaptiveSource = args.AdaptiveSource;\n            manifestObject = args.AdaptiveSource.Manifest;\n        }\n        \n        private void mediaElement_AdaptiveSourceStatusUpdated(AdaptiveSource sender, AdaptiveSourceStatusUpdatedEventArgs args)\n        {\n            adaptiveSourceStatusUpdate = args;\n        }\n        \n        private void mediaElement_AdaptiveSourceFailed(AdaptiveSource sender, AdaptiveSourceFailedEventArgs args)\n        {\n            txtStatus.Text = \"Error: \" + args.HttpResponse;\n        }\n        #endregion Adaptive Source Level Events\n\n4.  在 **mediaElement AdaptiveSourceOpened** 方法的末尾，添加以下代码以订阅事件：\n    \n        adaptiveSource.ManifestReadyEvent +=\n                    mediaElement_ManifestReady;\n        adaptiveSource.AdaptiveSourceStatusUpdatedEvent += \n            mediaElement_AdaptiveSourceStatusUpdated;\n        adaptiveSource.AdaptiveSourceFailedEvent += \n            mediaElement_AdaptiveSourceFailed;\n    \n5.  按 **CTRL+S** 保存文件。\n\n相同的事件也可以在自适应源管理器级别使用，因此可用于处理应用程序中所有媒体元素通用的功能。每个 AdaptiveSource 包含其自身的事件，所有 AdaptiveSource 事件将级联在 AdaptiveSourceManager 下面。\n\n**添加媒体元素事件处理程序**\n\n1.  在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。\n2.  在 **MainPage** 类的末尾，添加以下事件处理程序：\n    \n        #region Media Element Event Handlers \n        private void MediaOpened(object sender, RoutedEventArgs e)\n        {\n            txtStatus.Text = \"MediaElement opened\";\n        }\n        \n        private void MediaFailed(object sender, ExceptionRoutedEventArgs e)\n        {\n            txtStatus.Text= \"MediaElement failed: \" + e.ErrorMessage;\n        }\n        \n        private void MediaEnded(object sender, RoutedEventArgs e)\n        {\n            txtStatus.Text =\"MediaElement ended.\";\n        }\n        #endregion Media Element Event Handlers\n\n3.  在 **MainPage** 构造函数的末尾，添加以下代码以订阅事件：\n    \n        mediaElement.MediaOpened += MediaOpened;\n        mediaElement.MediaEnded += MediaEnded;\n        mediaElement.MediaFailed += MediaFailed;\n\n4.  按 **CTRL+S** 保存文件。\n\n**添加滚动条相关的代码**\n\n1.  在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。\n2.  在该文件的开头，添加以下 using 语句：\n    \n        using Windows.UI.Core;\n\n3.  在 **MainPage** 类中，添加以下数据成员：\n    \n        public static CoreDispatcher _dispatcher;\n        private DispatcherTimer sliderPositionUpdateDispatcher;\n    \n4.  在 **MainPage** 构造函数的末尾，添加以下代码：\n\n        _dispatcher = Window.Current.Dispatcher;\n        PointerEventHandler pointerpressedhandler = new PointerEventHandler(sliderProgress_PointerPressed);\n        sliderProgress.AddHandler(Control.PointerPressedEvent, pointerpressedhandler, true);    \n    \n5.  在 **MainPage** 类的末尾，添加以下代码：\n    \n        #region sliderMediaPlayer\n        private double SliderFrequency(TimeSpan timevalue)\n        {\n            long absvalue = 0;\n            double stepfrequency = -1;\n        \n            if (manifestObject != null)\n            {\n                absvalue = manifestObject.Duration - (long)manifestObject.StartTime;\n            }\n            else\n            {\n                absvalue = mediaElement.NaturalDuration.TimeSpan.Ticks;\n            }\n        \n            TimeSpan totalDVRDuration = new TimeSpan(absvalue);\n        \n            if (totalDVRDuration.TotalMinutes >= 10 && totalDVRDuration.TotalMinutes < 30)\n            {\n               stepfrequency = 10;\n            }\n            else if (totalDVRDuration.TotalMinutes >= 30 \n                     && totalDVRDuration.TotalMinutes < 60)\n            {\n                stepfrequency = 30;\n            }\n            else if (totalDVRDuration.TotalHours >= 1)\n            {\n                stepfrequency = 60;\n            }\n        \n            return stepfrequency;\n        }\n        \n        void updateSliderPositionoNTicks(object sender, object e)\n        {\n            sliderProgress.Value = mediaElement.Position.TotalSeconds;\n        }\n        \n        public void setupTimer()\n        {\n            sliderPositionUpdateDispatcher = new DispatcherTimer();\n            sliderPositionUpdateDispatcher.Interval = new TimeSpan(0, 0, 0, 0, 300);\n            startTimer();\n        }\n\n        public void startTimer()\n        {\n            sliderPositionUpdateDispatcher.Tick += updateSliderPositionoNTicks;\n            sliderPositionUpdateDispatcher.Start();\n        }\n        \n        // Slider start and end time must be updated in case of live content\n        public async void setSliderStartTime(long startTime)\n        {\n            await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n            {\n                TimeSpan timespan = new TimeSpan(adaptiveSourceStatusUpdate.StartTime);\n                double absvalue = (int)Math.Round(timespan.TotalSeconds, MidpointRounding.AwayFromZero);\n                sliderProgress.Minimum = absvalue;\n            });\n        }\n        \n        // Slider start and end time must be updated in case of live content\n        public async void setSliderEndTime(long startTime)\n        {\n            await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n            {\n                TimeSpan timespan = new TimeSpan(adaptiveSourceStatusUpdate.EndTime);\n                double absvalue = (int)Math.Round(timespan.TotalSeconds, MidpointRounding.AwayFromZero);\n                sliderProgress.Maximum = absvalue;\n            });\n        }\n        #endregion sliderMediaPlayer\n\n    **注意：**CoreDispatcher 用于从非 UI 线程对 UI 线程进行更改。如果调度程序线程出现瓶颈，开发人员可以选择使用他（她）想要更新的 UI 元素提供的调度程序。例如：\n    \n        await sliderProgress.Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () => { TimeSpan \n          timespan = new TimeSpan(adaptiveSourceStatusUpdate.EndTime); \n        double absvalue  = (int)Math.Round(timespan.TotalSeconds, MidpointRounding.AwayFromZero); \n          sliderProgress.Maximum = absvalue; }); \n        \n\n6.  在 **mediaElement\\_AdaptiveSourceStatusUpdated** 方法的末尾，添加以下代码：\n    \n        setSliderStartTime(args.StartTime);\n        setSliderEndTime(args.EndTime);\n\n7.  在 **MediaOpened** 方法的末尾，添加以下代码：\n    \n    sliderProgress.StepFrequency = SliderFrequency(mediaElement.NaturalDuration.TimeSpan);\n    sliderProgress.Width = mediaElement.Width;\n    setupTimer();\n\n8.  按 **CTRL+S** 保存文件。\n\n**编译和测试应用程序**\n\n1. 按 **F6** 编译项目。 \n2.  按 **F5** 运行应用程序。\n3.  在应用程序的顶部，你可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。 \n4.  单击“设置源”。 \n5.  测试滚动条。\n\n你已完成第 2 课。在本课中，你已将一个滑块添加到应用程序。\n\n##第 3 课：选择平滑流式处理流\n平滑流式处理可以流送包含观看者可选择的多语言音频曲目的内容。在本课中，你将要学习如何使观看者能够选择流。本课包含以下过程：\n\n1. 修改 XAML 文件\n2. 修改代码隐藏文件\n3. 编译和测试应用程序\n\n\n**修改 XAML 文件**\n\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看设计器”。\n2. 找到 &lt;Grid.RowDefinitions&gt;，并按如下所示修改 RowDefinitions：\n\n        <Grid.RowDefinitions>            \n            <RowDefinition Height=\"20\"/>\n            <RowDefinition Height=\"50\"/>\n            <RowDefinition Height=\"100\"/>\n            <RowDefinition Height=\"80\"/>\n            <RowDefinition Height=\"50\"/>\n        </Grid.RowDefinitions>\n\n3. 在 &lt;Grid&gt;&lt;/Grid&gt; 标记中，添加以下代码以定义一个列表框控件，使用户能够看到可用流的列表及选择流：\n\n        <Grid Name=\"gridStreamAndBitrateSelection\" Grid.Row=\"3\">\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"300\"/>\n            </Grid.RowDefinitions>\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"250*\"/>\n                <ColumnDefinition Width=\"250*\"/>\n            </Grid.ColumnDefinitions>\n            <StackPanel Name=\"spStreamSelection\" Grid.Row=\"1\" Grid.Column=\"0\">\n                <StackPanel Orientation=\"Horizontal\">\n                    <TextBlock Name=\"tbAvailableStreams\" Text=\"Available Streams:\" FontSize=\"16\" VerticalAlignment=\"Center\"></TextBlock>\n                    <Button Name=\"btnChangeStreams\" Content=\"Submit\" Click=\"btnChangeStream_Click\"/>\n                </StackPanel>\n                <ListBox x:Name=\"lbAvailableStreams\" Height=\"200\" Width=\"200\" Background=\"Transparent\" HorizontalAlignment=\"Left\" \n                    ScrollViewer.VerticalScrollMode=\"Enabled\" ScrollViewer.VerticalScrollBarVisibility=\"Visible\">\n                    <ListBox.ItemTemplate>\n                        <DataTemplate>\n                            <CheckBox Content=\"{Binding Name}\" IsChecked=\"{Binding isChecked, Mode=TwoWay}\" />\n                        </DataTemplate>\n                    </ListBox.ItemTemplate>\n                </ListBox>\n            </StackPanel>\n        </Grid>\n\n4. 按 **CTRL+S** 保存更改。\n\n\n**修改代码隐藏文件**\n\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。\n2. 在 SSPlayer 命名空间中添加一个新类：\n\n        #region class Stream\n        public class Stream\n        {\n            private IManifestStream stream;\n            public bool isCheckedValue;\n            public string name;\n    \n            public string Name\n            {\n                get { return name; }\n                set { name = value; }\n            }\n    \n            public IManifestStream ManifestStream\n            {\n                get { return stream; }\n                set { stream = value; }\n            }\n    \n            public bool isChecked\n            {\n                get { return isCheckedValue; }\n                set\n                {\n                    // mMke the video stream always checked.\n                    if (stream.Type == MediaStreamType.Video)\n                    {\n                        isCheckedValue = true;\n                    }\n                    else\n                    {\n                        isCheckedValue = value;\n                    }\n                }\n            }\n    \n            public Stream(IManifestStream streamIn)\n            {\n                stream = streamIn;\n                name = stream.Name;\n            }\n        }\n        #endregion class Stream\n\n3. 在 MainPage 类的开头，添加以下变量定义：\n\n        private List<Stream> availableStreams;\n        private List<Stream> availableAudioStreams;\n        private List<Stream> availableTextStreams;\n        private List<Stream> availableVideoStreams;\n\n4. 在 MainPage 类中，添加以下区域：\n\n        #region stream selection\n        ///<summary>\n        ///Functionality to select streams from IManifestStream available streams\n        /// </summary>\n        \n        // This function is called from the mediaElement_ManifestReady event handler \n        // to retrieve the streams and populate them to the local data members.\n        public void getStreams(Manifest manifestObject)\n        {\n            availableStreams = new List<Stream>();\n            availableVideoStreams = new List<Stream>();\n            availableAudioStreams = new List<Stream>();\n            availableTextStreams = new List<Stream>();\n        \n            try\n            {\n                for (int i = 0; i<manifestObject.AvailableStreams.Count; i++)\n                {\n                    Stream newStream = new Stream(manifestObject.AvailableStreams[i]);\n                    newStream.isChecked = false;\n        \n                    //populate the stream lists based on the types\n                    availableStreams.Add(newStream);\n        \n                    switch (newStream.ManifestStream.Type)\n                    {\n                        case MediaStreamType.Video:\n                            availableVideoStreams.Add(newStream);\n                            break;\n                        case MediaStreamType.Audio:\n                            availableAudioStreams.Add(newStream);\n                            break;\n                        case MediaStreamType.Text:\n                            availableTextStreams.Add(newStream);\n                            break;\n                    }\n        \n                    // Select the default selected streams from the manifest.\n                    for (int j = 0; j<manifestObject.SelectedStreams.Count; j++)\n                    {\n                        string selectedStreamName = manifestObject.SelectedStreams[j].Name;\n                        if (selectedStreamName.Equals(newStream.Name))\n                        {\n                            newStream.isChecked = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            catch (Exception e)\n            {\n                txtStatus.Text = \"Error: \" + e.Message;\n            }\n        }\n        \n        // This function set the list box ItemSource\n        private async void refreshAvailableStreamsListBoxItemSource()\n        {\n            try\n            {\n                //update the stream check box list on the UI\n                await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, ()\n                    => { lbAvailableStreams.ItemsSource = availableStreams; });\n            }\n            catch (Exception e)\n            {\n                txtStatus.Text = \"Error: \" + e.Message;\n            }\n        }\n        \n        // This function creates a selected streams list\n        private void createSelectedStreamsList(List<IManifestStream> selectedStreams)\n        {\n            bool isOneVideoSelected = false;\n            bool isOneAudioSelected = false;\n        \n            // Only one video stream can be selected\n            for (int j = 0; j<availableVideoStreams.Count; j++)\n            {\n                if (availableVideoStreams[j].isChecked && (!isOneVideoSelected))\n                {\n                    selectedStreams.Add(availableVideoStreams[j].ManifestStream);\n                    isOneVideoSelected = true;\n                }\n            }\n        \n            // Select the frist video stream from the list if no video stream is selected\n            if (!isOneVideoSelected)\n            {\n                availableVideoStreams[0].isChecked = true;\n                selectedStreams.Add(availableVideoStreams[0].ManifestStream);\n            }\n        \n            // Only one audio stream can be selected\n            for (int j = 0; j<availableAudioStreams.Count; j++)\n            {\n                if (availableAudioStreams[j].isChecked && (!isOneAudioSelected))\n                {\n                    selectedStreams.Add(availableAudioStreams[j].ManifestStream);\n                    isOneAudioSelected = true;\n                    txtStatus.Text = \"The audio stream is changed to \" + availableAudioStreams[j].ManifestStream.Name;\n                }\n            }\n        \n            // Select the frist audio stream from the list if no audio steam is selected.\n            if (!isOneAudioSelected)\n            {\n                availableAudioStreams[0].isChecked = true;\n                selectedStreams.Add(availableAudioStreams[0].ManifestStream);\n            }\n        \n            // Multiple text streams are supported.\n            for (int j = 0; j < availableTextStreams.Count; j++)\n            {\n                if (availableTextStreams[j].isChecked)\n                {\n                    selectedStreams.Add(availableTextStreams[j].ManifestStream);\n                }\n            }\n        }\n        \n        // Change streams on a smooth streaming presentation with multiple video streams.\n        private async void changeStreams(List<IManifestStream> selectStreams)\n        {\n            try\n            {\n                IReadOnlyList<IStreamChangedResult> returnArgs =\n                    await manifestObject.SelectStreamsAsync(selectStreams);\n            }\n            catch (Exception e)\n            {\n                txtStatus.Text = \"Error: \" + e.Message;\n            }\n        }\n        #endregion stream selection\n\n5. 找到 mediaElement\\_ManifestReady 方法，并在函数的末尾追加以下代码：\n    \n        getStreams(manifestObject);\n        refreshAvailableStreamsListBoxItemSource();\n\n    因此，当 MediaElement 清单准备就绪时，该代码将获取可用流的列表，并将该列表的内容填充到 UI 列表框。\n\n6. 在 MainPage 类中，找到 UI 按钮单击事件区域，然后添加以下函数定义：\n\n        private void btnChangeStream_Click(object sender, RoutedEventArgs e)\n        {\n            List<IManifestStream> selectedStreams = new List<IManifestStream>();\n\n            // Create a list of the selected streams\n            createSelectedStreamsList(selectedStreams);\n\n            // Change streams on the presentation\n            changeStreams(selectedStreams);\n        }\n\n**编译和测试应用程序**\n\n1. 按 **F6** 编译项目。 \n2.  按 **F5** 运行应用程序。\n3.  在应用程序的顶部，你可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。 \n4.  单击“设置源”。 \n5.  默认语言为 audio\\_eng。尝试在 audio\\_eng 和 audio\\_es 之间切换。每次选择一个新流时，都必须单击“提交”按钮。\n\n你已完成第 3 课。在本课中，你已添加了用于选择流的功能。\n\n##第 4 课：选择平滑流式处理曲目\n平滑流式处理演播内容可能包含以不同质量级别（比特率）和分辨率编码的多个视频文件。在本课中，你将要学习如何使用户能够选择曲目。本课包含以下过程：\n\n1. 修改 XAML 文件\n2. 修改代码隐藏文件\n3. 编译和测试应用程序\n\n**修改 XAML 文件**\n\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看设计器”。\n2. 找到名为 **gridStreamAndBitrateSelection** 的 Grid 标记，并在该标记的末尾追加以下代码：\n\n        <StackPanel Name=\"spBitRateSelection\" Grid.Row=\"1\" Grid.Column=\"1\">\n         <StackPanel Orientation=\"Horizontal\">\n             <TextBlock Name=\"tbBitRate\" Text=\"Available Bitrates:\" FontSize=\"16\" VerticalAlignment=\"Center\"/>\n             <Button Name=\"btnChangeTracks\" Content=\"Submit\" Click=\"btnChangeTrack_Click\" />\n         </StackPanel>\n         <ListBox x:Name=\"lbAvailableVideoTracks\" Height=\"200\" Width=\"200\" Background=\"Transparent\" HorizontalAlignment=\"Left\" \n                  ScrollViewer.VerticalScrollMode=\"Enabled\" ScrollViewer.VerticalScrollBarVisibility=\"Visible\">\n             <ListBox.ItemTemplate>\n                 <DataTemplate>\n                     <CheckBox Content=\"{Binding Bitrate}\" IsChecked=\"{Binding isChecked, Mode=TwoWay}\"/>\n                 </DataTemplate>\n             </ListBox.ItemTemplate>\n         </ListBox>\n        </StackPanel>\n\n3. 按 **CTRL+S** 保存更改\n\n\n**修改代码隐藏文件**\n\n1. 在解决方案资源管理器中，右键单击“MainPage.xaml”，然后单击“查看代码”。\n2. 在 SSPlayer 命名空间中添加一个新类：\n    \n        #region class Track\n        public class Track\n        {\n            private IManifestTrack trackInfo;\n            public string _bitrate;\n            public bool isCheckedValue;\n    \n            public IManifestTrack TrackInfo\n            {\n                get { return trackInfo; }\n                set { trackInfo = value; }\n            }\n    \n            public string Bitrate\n            {\n                get { return _bitrate; }\n                set { _bitrate = value; }\n            }\n    \n            public bool isChecked\n            {\n                get { return isCheckedValue; }\n                set\n                {\n                    isCheckedValue = value;\n                }\n            }\n    \n            public Track(IManifestTrack trackInfoIn)\n            {\n                trackInfo = trackInfoIn;\n                _bitrate = trackInfoIn.Bitrate.ToString();\n            }\n            //public Track() { }\n        }\n        #endregion class Track\n\n3. 在 MainPage 类的开头，添加以下变量定义：\n    \n        private List<Track> availableTracks;\n\n4. 在 MainPage 类中，添加以下区域：\n    \n        #region track selection\n        /// <summary>\n        /// Functionality to select video streams\n        /// </summary>\n\n        /// This Function gets the tracks for the selected video stream\n        public void getTracks(Manifest manifestObject)\n        {\n            availableTracks = new List<Track>();\n\n            IManifestStream videoStream = getVideoStream();\n            IReadOnlyList<IManifestTrack> availableTracksLocal = videoStream.AvailableTracks;\n            IReadOnlyList<IManifestTrack> selectedTracksLocal = videoStream.SelectedTracks;\n\n            try\n            {\n                for (int i = 0; i < availableTracksLocal.Count; i++)\n                {\n                    Track thisTrack = new Track(availableTracksLocal[i]);\n                    thisTrack.isChecked = true;\n\n                    for (int j = 0; j < selectedTracksLocal.Count; j++)\n                    {\n                        string selectedTrackName = selectedTracksLocal[j].Bitrate.ToString();\n                        if (selectedTrackName.Equals(thisTrack.Bitrate))\n                        {\n                            thisTrack.isChecked = true;\n                            break;\n                        }\n                    }\n                    availableTracks.Add(thisTrack);\n                }\n            }\n            catch (Exception e)\n            {\n                txtStatus.Text = e.Message;\n            }\n        }\n\n        // This function gets the video stream that is playing\n        private IManifestStream getVideoStream()\n        {\n            IManifestStream videoStream = null;\n            for (int i = 0; i < manifestObject.SelectedStreams.Count; i++)\n            {\n                if (manifestObject.SelectedStreams[i].Type == MediaStreamType.Video)\n                {\n                    videoStream = manifestObject.SelectedStreams[i];\n                    break;\n                }\n            }\n            return videoStream;\n        }\n\n        // This function set the UI list box control ItemSource\n        private async void refreshAvailableTracksListBoxItemSource()\n        {\n            try\n            {\n                // Update the track check box list on the UI \n                await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, ()\n                    => { lbAvailableVideoTracks.ItemsSource = availableTracks; });\n            }\n            catch (Exception e)\n            {\n                txtStatus.Text = \"Error: \" + e.Message;\n            }        \n        }\n\n        // This function creates a list of the selected tracks.\n        private void createSelectedTracksList(List<IManifestTrack> selectedTracks)\n        {\n            // Create a list of selected tracks\n            for (int j = 0; j < availableTracks.Count; j++)\n            {\n                if (availableTracks[j].isCheckedValue == true)\n                {\n                    selectedTracks.Add(availableTracks[j].TrackInfo);\n                }\n            }\n        }\n\n        // This function selects the tracks based on user selection \n        private void changeTracks(List<IManifestTrack> selectedTracks)\n        {\n            IManifestStream videoStream = getVideoStream();\n            try\n            {\n                videoStream.SelectTracks(selectedTracks);\n            }\n            catch (Exception ex)\n            {\n                txtStatus.Text = ex.Message;\n            }\n        }\n        #endregion track selection\n\n5. 找到 mediaElement\\_ManifestReady 方法，并在函数的末尾追加以下代码：\n\n        getTracks(manifestObject);\n        refreshAvailableTracksListBoxItemSource();\n\n6. 在 MainPage 类中，找到 UI 按钮单击事件区域，然后添加以下函数定义：\n\n        private void btnChangeStream_Click(object sender, RoutedEventArgs e)\n        {\n            List<IManifestStream> selectedStreams = new List<IManifestStream>();\n\n            // Create a list of the selected streams\n            createSelectedStreamsList(selectedStreams);\n\n            // Change streams on the presentation\n            changeStreams(selectedStreams);\n        }\n\n**编译和测试应用程序**\n\n1. 按 **F6** 编译项目。 \n2.  按 **F5** 运行应用程序。\n3.  在应用程序的顶部，你可以使用默认的平滑流式处理 URL，或输入一个不同的 URL。 \n4.  单击“设置源”。 \n5.  默认情况下，已选中视频流的所有曲目。若要体验比特率的变化，你可以先选择最低的可用比特率，然后再选择最高的可用比特率。每次更改后都必须单击“提交”。你可以看到视频质量的变化。\n\n你已完成第 4 课。在本课中，你已添加了用于选择曲目的功能。\n\n\n\n\n##其他资源：\n- [如何生成具有高级功能的平滑流式处理 Windows 8 JavaScript 应用程序](http://blogs.iis.net/cenkd/archive/2012/08/10/how-to-build-a-smooth-streaming-windows-8-javascript-application-with-advanced-features.aspx)\n- [平滑流式处理技术概述](http://www.iis.net/learn/media/on-demand-smooth-streaming/smooth-streaming-technical-overview)\n\n[PlayerApplication]: ./media/media-services-build-smooth-streaming-apps/SSClientWin8-1.png\n[CodeViewPic]: ./media/media-services-build-smooth-streaming-apps/SSClientWin8-2.png\n \n\n<!---HONumber=Mooncake_0307_2016-->"
}