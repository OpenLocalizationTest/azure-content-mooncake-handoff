{
  "nodes": [
    {
      "content": "如何使用 .NET 检查作业进度",
      "pos": [
        28,
        44
      ]
    },
    {
      "content": "了解如何使用事件处理程序代码来跟踪作业进度并发送状态更新。代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。",
      "pos": [
        64,
        126
      ]
    },
    {
      "content": "如何：检查作业进度",
      "pos": [
        348,
        357
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        361,
        377
      ]
    },
    {
      "content": "门户",
      "pos": [
        381,
        383
      ]
    },
    {
      "content": ".NET",
      "pos": [
        454,
        458
      ]
    },
    {
      "content": "REST",
      "pos": [
        522,
        526
      ]
    },
    {
      "pos": [
        593,
        750
      ],
      "content": "当你运行作业时，通常需要采用某种方式来跟踪作业进度。你可以通过<bpt id=\"p1\">[</bpt>定义 StateChanged 事件处理程序<ept id=\"p1\">](#statechange_event_handler)</ept>或<bpt id=\"p2\">[</bpt>使用 Azure 队列存储监视媒体服务作业通知<ept id=\"p2\">](#check_progress_with_queues)</ept>，来检查进度。本主题将介绍这两种方法。"
    },
    {
      "pos": [
        754,
        821
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"statechange_event_handler\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>定义 StateChanged 事件处理程序以监视作业进度"
    },
    {
      "content": "以下代码示例定义了 StateChanged 事件处理程序。此事件处理程序将跟踪作业进度，并根据现状提供更新的状态。该代码还定义了 LogJobStop 方法。此帮助器方法将记录错误详细信息。",
      "pos": [
        823,
        919
      ]
    },
    {
      "pos": [
        4014,
        4076
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"check_progress_with_queues\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>使用 Azure 队列存储监视媒体服务作业通知"
    },
    {
      "pos": [
        4078,
        4206
      ],
      "content": "Azure 媒体服务可以在处理媒体作业时向 <bpt id=\"p1\">[</bpt>Azure 队列存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-queues#what-is)</ept>发送通知消息。本主题说明如何从队列存储获取这些通知消息。"
    },
    {
      "content": "用户可以从任何位置访问已传给到队列存储中的消息。Azure 队列消息体系结构十分可靠，而且具有高度可缩放性。建议使用其他方法轮询队列存储。",
      "pos": [
        4208,
        4277
      ]
    },
    {
      "content": "一个常见的侦听媒体服务通知方案：你正在开发一个内容管理系统，在完成编码作业后，该系统需要执行其他一些任务（例如，触发工作流的下一个步骤或者发布内容）。",
      "pos": [
        4279,
        4354
      ]
    },
    {
      "content": "注意事项",
      "pos": [
        4359,
        4363
      ]
    },
    {
      "content": "在开发使用 Azure 存储队列的媒体服务应用程序时，请注意以下几点。",
      "pos": [
        4365,
        4400
      ]
    },
    {
      "pos": [
        4404,
        4561
      ],
      "content": "队列服务不保证按照先进先出 (FIFO) 的顺序传递消息。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 队列和 Azure 服务总线队列比较与对照<ept id=\"p1\">](/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/)</ept>。"
    },
    {
      "content": "Azure 存储队列不是推送服务；你必须轮询队列。",
      "pos": [
        4564,
        4589
      ]
    },
    {
      "pos": [
        4593,
        4692
      ],
      "content": "可以有任意数目的队列。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>队列服务 REST API<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dd179363.aspx)</ept>。"
    },
    {
      "pos": [
        4695,
        4845
      ],
      "content": "Azure 存储队列存在一些限制，有关具体的说明，请参阅以下文章：<bpt id=\"p1\">[</bpt>Azure 队列和 Azure 服务总线队列比较与对照<ept id=\"p1\">](/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/)</ept>。"
    },
    {
      "content": "代码示例",
      "pos": [
        4850,
        4854
      ]
    },
    {
      "content": "本部分中的代码示例将执行以下操作：",
      "pos": [
        4856,
        4873
      ]
    },
    {
      "pos": [
        4878,
        4967
      ],
      "content": "定义一个映射为通知消息格式的 <bpt id=\"p1\">**</bpt>EncodingJobMessage<ept id=\"p1\">**</ept> 类。代码将那些从队列接收到的消息反序列化为 <bpt id=\"p2\">**</bpt>EncodingJobMessage<ept id=\"p2\">**</ept> 类型的对象。"
    },
    {
      "pos": [
        4971,
        5051
      ],
      "content": "从 app.config 文件中加载媒体服务和存储帐户信息。使用此信息创建 <bpt id=\"p1\">**</bpt>CloudMediaContext<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>CloudQueue<ept id=\"p2\">**</ept> 对象。"
    },
    {
      "content": "创建一个接收编码作业相关通知消息的队列。",
      "pos": [
        5055,
        5075
      ]
    },
    {
      "content": "创建一个映射到队列的通知终结点。",
      "pos": [
        5079,
        5095
      ]
    },
    {
      "content": "将通知终结点附加到作业，然后提交编码作业。可以将多个通知终结点附加到一个作业。",
      "pos": [
        5099,
        5138
      ]
    },
    {
      "pos": [
        5142,
        5227
      ],
      "content": "在本示例中，我们只想知道作业的最终状态，因此我们将 <bpt id=\"p1\">**</bpt>NotificationJobState.FinalStatesOnly<ept id=\"p1\">**</ept> 传递给 <bpt id=\"p2\">**</bpt>AddNew<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "content": "如果传递 NotificationJobState.All，则会获得所有状态更改通知：“已排队”-&gt;“已计划”-&gt;“处理中”-&gt;“已完成”。不过，如前所述，Azure 存储队列服务不保证按顺序传递。可以使用 Timestamp 属性（在以下示例的 EncodingJobMessage 类型中定义）来为消息排序。你可能会收到重复的通知消息。使用 ETag 属性（在 EncodingJobMessage 类型中定义）可以检查重复项。请注意，某些状态更改通知也有可能被跳过。",
      "pos": [
        5351,
        5587
      ]
    },
    {
      "content": "每隔 10 秒检查队列一次，等待作业进入“已完成”状态。处理消息后删除消息。",
      "pos": [
        5592,
        5630
      ]
    },
    {
      "content": "删除队列和通知终结点。",
      "pos": [
        5634,
        5645
      ]
    },
    {
      "pos": [
        5648,
        5687
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>监视作业状态的建议方法是侦听通知消息，如以下示例所示。"
    },
    {
      "pos": [
        5691,
        5810
      ],
      "content": "或者，你可以使用 <bpt id=\"p1\">**</bpt>IJob.State<ept id=\"p1\">**</ept> 属性检查作业状态。请注意，在 <bpt id=\"p2\">**</bpt>IJob<ept id=\"p2\">**</ept> 的状态尚未设置为“已完成”之前，你可能会先收到一条指出作业已完成的通知消息。<bpt id=\"p3\">**</bpt>IJob.State<ept id=\"p3\">**</ept> 属性在延迟片刻之后将反映正确的状态。"
    },
    {
      "content": "以上示例将生成以下输出。值会有所变化。",
      "pos": [
        17837,
        17856
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何使用 .NET 检查作业进度\" \n    description=\"了解如何使用事件处理程序代码来跟踪作业进度并发送状态更新。代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"    \n    wacn.date=\"03/17/2016\"/>\n\n#如何：检查作业进度\n\n> [AZURE.SELECTOR]\n- [门户](/documentation/articles/media-services-portal-check-job-progress)\n- [.NET](/documentation/articles/media-services-check-job-progress)\n- [REST](/documentation/articles/media-services-rest-check-job-progress)\n\n当你运行作业时，通常需要采用某种方式来跟踪作业进度。你可以通过[定义 StateChanged 事件处理程序](#statechange_event_handler)或[使用 Azure 队列存储监视媒体服务作业通知](#check_progress_with_queues)，来检查进度。本主题将介绍这两种方法。\n\n##<a id=\"statechange_event_handler\"></a>定义 StateChanged 事件处理程序以监视作业进度\n\n以下代码示例定义了 StateChanged 事件处理程序。此事件处理程序将跟踪作业进度，并根据现状提供更新的状态。该代码还定义了 LogJobStop 方法。此帮助器方法将记录错误详细信息。\n\n    private static void StateChanged(object sender, JobStateChangedEventArgs e)\n    {\n        Console.WriteLine(\"Job state changed event:\");\n        Console.WriteLine(\"  Previous state: \" + e.PreviousState);\n        Console.WriteLine(\"  Current state: \" + e.CurrentState);\n    \n        switch (e.CurrentState)\n        {\n            case JobState.Finished:\n                Console.WriteLine();\n                Console.WriteLine(\"********************\");\n                Console.WriteLine(\"Job is finished.\");\n                Console.WriteLine(\"Please wait while local tasks or downloads complete...\");\n                Console.WriteLine(\"********************\");\n                Console.WriteLine();\n                Console.WriteLine();\n                break;\n            case JobState.Canceling:\n            case JobState.Queued:\n            case JobState.Scheduled:\n            case JobState.Processing:\n                Console.WriteLine(\"Please wait...\\n\");\n                break;\n            case JobState.Canceled:\n            case JobState.Error:\n                // Cast sender as a job.\n                IJob job = (IJob)sender;\n                // Display or log error details as needed.\n                LogJobStop(job.Id);\n                break;\n            default:\n                break;\n        }\n    }\n    \n    private static void LogJobStop(string jobId)\n    {\n        StringBuilder builder = new StringBuilder();\n        IJob job = GetJob(jobId);\n    \n        builder.AppendLine(\"\\nThe job stopped due to cancellation or an error.\");\n        builder.AppendLine(\"***************************\");\n        builder.AppendLine(\"Job ID: \" + job.Id);\n        builder.AppendLine(\"Job Name: \" + job.Name);\n        builder.AppendLine(\"Job State: \" + job.State.ToString());\n        builder.AppendLine(\"Job started (server UTC time): \" + job.StartTime.ToString());\n        builder.AppendLine(\"Media Services account name: \" + _accountName);\n        builder.AppendLine(\"Media Services account location: \" + _accountLocation);\n        // Log job errors if they exist.  \n        if (job.State == JobState.Error)\n        {\n            builder.Append(\"Error Details: \\n\");\n            foreach (ITask task in job.Tasks)\n            {\n                foreach (ErrorDetail detail in task.ErrorDetails)\n                {\n                    builder.AppendLine(\"  Task Id: \" + task.Id);\n                    builder.AppendLine(\"    Error Code: \" + detail.Code);\n                    builder.AppendLine(\"    Error Message: \" + detail.Message + \"\\n\");\n                }\n            }\n        }\n        builder.AppendLine(\"***************************\\n\");\n        // Write the output to a local file and to the console. The template \n        // for an error output file is:  JobStop-{JobId}.txt\n        string outputFile = _outputFilesFolder + @\"\\JobStop-\" + JobIdAsFileName(job.Id) + \".txt\";\n        WriteToFile(outputFile, builder.ToString());\n        Console.Write(builder.ToString());\n    }\n    \n    private static string JobIdAsFileName(string jobID)\n    {\n        return jobID.Replace(\":\", \"_\");\n    }\n\n\n\n##<a id=\"check_progress_with_queues\"></a>使用 Azure 队列存储监视媒体服务作业通知\n\nAzure 媒体服务可以在处理媒体作业时向 [Azure 队列存储](/documentation/articles/storage-dotnet-how-to-use-queues#what-is)发送通知消息。本主题说明如何从队列存储获取这些通知消息。\n\n用户可以从任何位置访问已传给到队列存储中的消息。Azure 队列消息体系结构十分可靠，而且具有高度可缩放性。建议使用其他方法轮询队列存储。\n\n一个常见的侦听媒体服务通知方案：你正在开发一个内容管理系统，在完成编码作业后，该系统需要执行其他一些任务（例如，触发工作流的下一个步骤或者发布内容）。\n\n###注意事项\n\n在开发使用 Azure 存储队列的媒体服务应用程序时，请注意以下几点。\n\n- 队列服务不保证按照先进先出 (FIFO) 的顺序传递消息。有关详细信息，请参阅 [Azure 队列和 Azure 服务总线队列比较与对照](/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/)。\n- Azure 存储队列不是推送服务；你必须轮询队列。 \n- 可以有任意数目的队列。有关详细信息，请参阅[队列服务 REST API](https://msdn.microsoft.com/zh-cn/library/azure/dd179363.aspx)。\n- Azure 存储队列存在一些限制，有关具体的说明，请参阅以下文章：[Azure 队列和 Azure 服务总线队列比较与对照](/documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted/)。\n\n###代码示例\n\n本部分中的代码示例将执行以下操作：\n\n1. 定义一个映射为通知消息格式的 **EncodingJobMessage** 类。代码将那些从队列接收到的消息反序列化为 **EncodingJobMessage** 类型的对象。\n1. 从 app.config 文件中加载媒体服务和存储帐户信息。使用此信息创建 **CloudMediaContext** 和 **CloudQueue** 对象。\n1. 创建一个接收编码作业相关通知消息的队列。\n1. 创建一个映射到队列的通知终结点。\n1. 将通知终结点附加到作业，然后提交编码作业。可以将多个通知终结点附加到一个作业。\n1. 在本示例中，我们只想知道作业的最终状态，因此我们将 **NotificationJobState.FinalStatesOnly** 传递给 **AddNew** 方法。 \n        \n        job.JobNotificationSubscriptions.AddNew(NotificationJobState.FinalStatesOnly, _notificationEndPoint);\n1. 如果传递 NotificationJobState.All，则会获得所有状态更改通知：“已排队”->“已计划”->“处理中”->“已完成”。不过，如前所述，Azure 存储队列服务不保证按顺序传递。可以使用 Timestamp 属性（在以下示例的 EncodingJobMessage 类型中定义）来为消息排序。你可能会收到重复的通知消息。使用 ETag 属性（在 EncodingJobMessage 类型中定义）可以检查重复项。请注意，某些状态更改通知也有可能被跳过。 \n1. 每隔 10 秒检查队列一次，等待作业进入“已完成”状态。处理消息后删除消息。\n1. 删除队列和通知终结点。\n\n>[AZURE.NOTE]监视作业状态的建议方法是侦听通知消息，如以下示例所示。\n>\n>或者，你可以使用 **IJob.State** 属性检查作业状态。请注意，在 **IJob** 的状态尚未设置为“已完成”之前，你可能会先收到一条指出作业已完成的通知消息。**IJob.State** 属性在延迟片刻之后将反映正确的状态。\n\n    \n    using System;\n    using System.Linq;\n    using System.Configuration;\n    using System.IO;\n    using System.Text;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using System.Collections.Generic;\n    using Microsoft.WindowsAzure.MediaServices.Client;\n    using System.Web;\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Auth;\n    using Microsoft.WindowsAzure.Storage.Queue;\n    using System.Runtime.Serialization.Json;\n    \n    namespace JobNotification\n    {\n        public class EncodingJobMessage\n        {\n            // MessageVersion is used for version control. \n            public String MessageVersion { get; set; }\n        \n            // Type of the event. Valid values are \n            // JobStateChange and NotificationEndpointRegistration.\n            public String EventType { get; set; }\n        \n            // ETag is used to help the customer detect if \n            // the message is a duplicate of another message previously sent.\n            public String ETag { get; set; }\n        \n            // Time of occurrence of the event.\n            public String TimeStamp { get; set; }\n    \n            // Collection of values specific to the event.\n    \n            // For the JobStateChange event the values are:\n            //     JobId - Id of the Job that triggered the notification.\n            //     NewState- The new state of the Job. Valid values are:\n            //          Scheduled, Processing, Canceling, Cancelled, Error, Finished\n            //     OldState- The old state of the Job. Valid values are:\n            //          Scheduled, Processing, Canceling, Cancelled, Error, Finished\n    \n            // For the NotificationEndpointRegistration event the values are:\n            //     NotificationEndpointId- Id of the NotificationEndpoint \n            //          that triggered the notification.\n            //     State- The state of the Endpoint. \n            //          Valid values are: Registered and Unregistered.\n    \n            public IDictionary<string, object> Properties { get; set; }\n        }\n    \n        class Program\n        {\n            private static CloudMediaContext _context = null;\n            private static CloudQueue _queue = null;\n            private static INotificationEndPoint _notificationEndPoint = null;\n    \n            private static readonly string _singleInputMp4Path =\n                Path.GetFullPath(@\"C:\\supportFiles\\multifile\\BigBuckBunny.mp4\");\n    \n            static void Main(string[] args)\n            {\n                // Get the values from app.config file.\n                string mediaServicesAccountName = ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n                string mediaServicesAccountKey = ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n                string storageConnectionString = ConfigurationManager.AppSettings[\"StorageConnectionString\"];\n    \n    \n                string endPointAddress = Guid.NewGuid().ToString();\n    \n                // Create the context. \n                _context = new CloudMediaContext(mediaServicesAccountName, mediaServicesAccountKey);\n    \n                // Create the queue that will be receiving the notification messages.\n                _queue = CreateQueue(storageConnectionString, endPointAddress);\n    \n                // Create the notification point that is mapped to the queue.\n                _notificationEndPoint = \n                        _context.NotificationEndPoints.Create(\n                        Guid.NewGuid().ToString(), NotificationEndPointType.AzureQueue, endPointAddress);\n    \n    \n                if (_notificationEndPoint != null)\n                {\n                    IJob job = SubmitEncodingJobWithNotificationEndPoint(_singleInputMp4Path);\n                    WaitForJobToReachedFinishedState(job.Id);\n                }\n    \n                // Clean up.\n                _queue.Delete();      \n                _notificationEndPoint.Delete();\n           }\n    \n    \n            static public CloudQueue CreateQueue(string storageAccountConnectionString, string endPointAddress)\n            {\n                CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageAccountConnectionString);\n    \n                // Create the queue client\n                CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n    \n                // Retrieve a reference to a queue\n                CloudQueue queue = queueClient.GetQueueReference(endPointAddress);\n    \n                // Create the queue if it doesn't already exist\n                queue.CreateIfNotExists();\n    \n                return queue;\n            }\n     \n    \n            public static IJob SubmitEncodingJobWithNotificationEndPoint(string inputMediaFilePath)\n            {\n                // Declare a new job.\n                IJob job = _context.Jobs.Create(\"My MP4 to Smooth Streaming encoding job\");\n    \n                //Create an encrypted asset and upload the mp4. \n                IAsset asset = CreateAssetAndUploadSingleFile(AssetCreationOptions.StorageEncrypted, \n                    inputMediaFilePath);\n    \n                // Get a media processor reference, and pass to it the name of the \n                // processor to use for the specific task.\n                IMediaProcessor processor = GetLatestMediaProcessorByName(\"Azure Media Encoder\");\n    \n                // Create a task with the conversion details, using a configuration file. \n                ITask task = job.Tasks.AddNew(\"My encoding Task\",\n                    processor,\n                    \"H264 Multiple Bitrate 720p\",\n                    Microsoft.WindowsAzure.MediaServices.Client.TaskOptions.None);\n    \n                // Specify the input asset to be encoded.\n                task.InputAssets.Add(asset);\n    \n                // Add an output asset to contain the results of the job.\n                task.OutputAssets.AddNew(\"Output asset\",\n                    AssetCreationOptions.None);\n    \n                // Add a notification point to the job. You can add multiple notification points.  \n                job.JobNotificationSubscriptions.AddNew(NotificationJobState.FinalStatesOnly, \n                    _notificationEndPoint);\n    \n                job.Submit();\n    \n                return job;\n            }\n    \n            public static void WaitForJobToReachedFinishedState(string jobId)\n            {\n                int expectedState = (int)JobState.Finished;\n                int timeOutInSeconds = 600;\n    \n                bool jobReachedExpectedState = false;\n                DateTime startTime = DateTime.Now;\n                int jobState = -1;\n    \n                while (!jobReachedExpectedState)\n                {\n                    // Specify how often you want to get messages from the queue.\n                    Thread.Sleep(TimeSpan.FromSeconds(10));\n    \n                    foreach (var message in _queue.GetMessages(10))\n                    {\n                        using (Stream stream = new MemoryStream(message.AsBytes))\n                        {\n                            DataContractJsonSerializerSettings settings = new DataContractJsonSerializerSettings();\n                            settings.UseSimpleDictionaryFormat = true;\n                            DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(EncodingJobMessage), settings);\n                            EncodingJobMessage encodingJobMsg = (EncodingJobMessage)ser.ReadObject(stream);\n    \n                            Console.WriteLine();\n    \n                            // Display the message information.\n                            Console.WriteLine(\"EventType: {0}\", encodingJobMsg.EventType);\n                            Console.WriteLine(\"MessageVersion: {0}\", encodingJobMsg.MessageVersion);\n                            Console.WriteLine(\"ETag: {0}\", encodingJobMsg.ETag);\n                            Console.WriteLine(\"TimeStamp: {0}\", encodingJobMsg.TimeStamp);\n                            foreach (var property in encodingJobMsg.Properties)\n                            {\n                                Console.WriteLine(\"    {0}: {1}\", property.Key, property.Value);\n                            }\n    \n                            // We are only interested in messages \n                            // where EventType is \"JobStateChange\".\n                            if (encodingJobMsg.EventType == \"JobStateChange\")\n                            {\n                                string JobId = (String)encodingJobMsg.Properties.Where(j => j.Key == \"JobId\").FirstOrDefault().Value;\n                                if (JobId == jobId)\n                                {\n                                    string oldJobStateStr = (String)encodingJobMsg.Properties.\n                                                                Where(j => j.Key == \"OldState\").FirstOrDefault().Value;\n                                    string newJobStateStr = (String)encodingJobMsg.Properties.\n                                                                Where(j => j.Key == \"NewState\").FirstOrDefault().Value;\n    \n                                    JobState oldJobState = (JobState)Enum.Parse(typeof(JobState), oldJobStateStr);\n                                    JobState newJobState = (JobState)Enum.Parse(typeof(JobState), newJobStateStr);\n    \n                                    if (newJobState == (JobState)expectedState)\n                                    {\n                                        Console.WriteLine(\"job with Id: {0} reached expected state: {1}\", \n                                            jobId, newJobState);\n                                        jobReachedExpectedState = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        // Delete the message after we've read it.\n                        _queue.DeleteMessage(message);\n                    }\n    \n                    // Wait until timeout\n                    TimeSpan timeDiff = DateTime.Now - startTime;\n                    bool timedOut = (timeDiff.TotalSeconds > timeOutInSeconds);\n                    if (timedOut)\n                    {\n                        Console.WriteLine(@\"Timeout for checking job notification messages, \n                                            latest found state ='{0}', wait time = {1} secs\",\n                            jobState,\n                            timeDiff.TotalSeconds);\n    \n                        throw new TimeoutException();\n                    }\n                }\n            }\n       \n            static private IAsset CreateAssetAndUploadSingleFile(AssetCreationOptions assetCreationOptions, string singleFilePath)\n            {\n                var asset = _context.Assets.Create(\"UploadSingleFile_\" + DateTime.UtcNow.ToString(), \n                    assetCreationOptions);\n    \n                var fileName = Path.GetFileName(singleFilePath);\n    \n                var assetFile = asset.AssetFiles.Create(fileName);\n    \n                Console.WriteLine(\"Created assetFile {0}\", assetFile.Name);\n                Console.WriteLine(\"Upload {0}\", assetFile.Name);\n    \n                assetFile.Upload(singleFilePath);\n                Console.WriteLine(\"Done uploading of {0}\", assetFile.Name);\n    \n                return asset;\n            }\n    \n            static private IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n            {\n                var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\n                    ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\n    \n                if (processor == null)\n                    throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\n    \n                return processor;\n            }\n        }\n    }\n\n以上示例将生成以下输出。值会有所变化。\n    \n    Created assetFile BigBuckBunny.mp4\n    Upload BigBuckBunny.mp4\n    Done uploading of BigBuckBunny.mp4\n    \n    EventType: NotificationEndPointRegistration\n    MessageVersion: 1.0\n    ETag: e0238957a9b25bdf3351a88e57978d6a81a84527fad03bc23861dbe28ab293f6\n    TimeStamp: 2013-05-14T20:22:37\n        NotificationEndPointId: nb:nepid:UUID:d6af9412-2488-45b2-ba1f-6e0ade6dbc27\n        State: Registered\n        Name: dde957b2-006e-41f2-9869-a978870ac620\n        Created: 2013-05-14T20:22:35\n    \n    EventType: JobStateChange\n    MessageVersion: 1.0\n    ETag: 4e381f37c2d844bde06ace650310284d6928b1e50101d82d1b56220cfcb6076c\n    TimeStamp: 2013-05-14T20:24:40\n        JobId: nb:jid:UUID:526291de-f166-be47-b62a-11ffe6d4be54\n        JobName: My MP4 to Smooth Streaming encoding job\n        NewState: Finished\n        OldState: Processing\n        AccountName: westeuropewamsaccount\n    job with Id: nb:jid:UUID:526291de-f166-be47-b62a-11ffe6d4be54 reached expected \n    State: Finished\n    \n\n<!---HONumber=Mooncake_0307_2016-->"
}