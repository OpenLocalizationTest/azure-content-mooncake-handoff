<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">77586803816e508a38b61b52df6a85322c4ae396</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用 Apache Storm 接收消息</source>
          <target state="new">使用 Apache Storm 接收消息</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Apache Storm<ept id="p2">**</ept><ept id="p1">](https://storm.incubator.apache.org)</ept> 是一个分布式实时计算系统，它简化了对未绑定的数据流进行可靠处理的过程。本节演示如何使用事件中心 Storm 喷口从事件中心接收事件。使用 Apache Storm，可以在承载于不同节点的多个进程间拆分事件。事件中心与 Storm 集成后，通过使用风暴的 Zookeeper 安装以透明方式对事件使用进度执行检查点操作、管理持久检查点以及从事件中心并行接收，简化了事件使用。</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>Apache Storm<ept id="p2">**</ept><ept id="p1">](https://storm.incubator.apache.org)</ept> 是一个分布式实时计算系统，它简化了对未绑定的数据流进行可靠处理的过程。本节演示如何使用事件中心 Storm 喷口从事件中心接收事件。使用 Apache Storm，可以在承载于不同节点的多个进程间拆分事件。事件中心与 Storm 集成后，通过使用风暴的 Zookeeper 安装以透明方式对事件使用进度执行检查点操作、管理持久检查点以及从事件中心并行接收，简化了事件使用。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>有关事件中心接收模式的详细信息，请参阅<bpt id="p1">[</bpt>事件中心概述<ept id="p1">][]</ept>。</source>
          <target state="new">有关事件中心接收模式的详细信息，请参阅<bpt id="p1">[</bpt>事件中心概述<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本教程使用安装的 <bpt id="p1">[</bpt>HDInsight Storm<ept id="p1">][]</ept>，其中随附了现成可用的事件中心 Spout。</source>
          <target state="new">本教程使用安装的 <bpt id="p1">[</bpt>HDInsight Storm<ept id="p1">][]</ept>，其中随附了现成可用的事件中心 Spout。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>请按照 <bpt id="p1">[</bpt>HDInsight Storm - 入门<ept id="p1">](/documentation/articles/hdinsight-storm-overview)</ept>过程创建新 HDInsight 群集，并通过远程桌面连接该群集。</source>
          <target state="new">请按照 <bpt id="p1">[</bpt>HDInsight Storm - 入门<ept id="p1">](/documentation/articles/hdinsight-storm-overview)</ept>过程创建新 HDInsight 群集，并通过远程桌面连接该群集。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>将 <ph id="ph1">`%STORM_HOME%\examples\eventhubspout\eventhubs-storm-spout-0.9-jar-with-dependencies.jar`</ph> 文件复制到本地开发环境。其中包含 events-storm-spout。</source>
          <target state="new">将 <ph id="ph1">`%STORM_HOME%\examples\eventhubspout\eventhubs-storm-spout-0.9-jar-with-dependencies.jar`</ph> 文件复制到本地开发环境。其中包含 events-storm-spout。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>使用以下命令将程序包安装到本地 Maven 存储中。这样，在后面的步骤中，您便可以在 Storm 项目中将它添加为引用。</source>
          <target state="new">使用以下命令将程序包安装到本地 Maven 存储中。这样，在后面的步骤中，您便可以在 Storm 项目中将它添加为引用。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在 Eclipse 中创建一个新的 Maven 项目（依次单击“文件”、“新建”、“项目”）。</source>
          <target state="new">在 Eclipse 中创建一个新的 Maven 项目（依次单击“文件”、“新建”、“项目”）。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>选择“使用默认工作区位置”，然后单击“下一步”</source>
          <target state="new">选择“使用默认工作区位置”，然后单击“下一步”</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>选择 <bpt id="p1">**</bpt>maven-archetype-quickstart<ept id="p1">**</ept> archetype，然后单击“下一步”</source>
          <target state="new">选择 <bpt id="p1">**</bpt>maven-archetype-quickstart<ept id="p1">**</ept> archetype，然后单击“下一步”</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>插入 <bpt id="p1">**</bpt>GroupId<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>ArtifactId<ept id="p2">**</ept>，然后单击“完成”</source>
          <target state="new">插入 <bpt id="p1">**</bpt>GroupId<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>ArtifactId<ept id="p2">**</ept>，然后单击“完成”</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept> 中的 <ph id="ph1">`&lt;dependency&gt;`</ph> 节点内添加以下依赖项。</source>
          <target state="new">在 <bpt id="p1">**</bpt>pom.xml<ept id="p1">**</ept> 中的 <ph id="ph1">`&lt;dependency&gt;`</ph> 节点内添加以下依赖项。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>src<ept id="p1">**</ept> 文件夹中，创建一个名为 <bpt id="p2">**</bpt>Config.properties<ept id="p2">**</ept> 的文件，并复制以下内容，从而替换以下值：</source>
          <target state="new">在 <bpt id="p1">**</bpt>src<ept id="p1">**</ept> 文件夹中，创建一个名为 <bpt id="p2">**</bpt>Config.properties<ept id="p2">**</ept> 的文件，并复制以下内容，从而替换以下值：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>eventhub.receiver.credits<ept id="p1">**</ept> 的值决定在被发布到 Storm 管道之前先进行批处理的事件的数量。为了简单起见，本示例将此值设置为 10。在生产中，通常应将它设置为较高的值，例如 1024。</source>
          <target state="new"><bpt id="p1">**</bpt>eventhub.receiver.credits<ept id="p1">**</ept> 的值决定在被发布到 Storm 管道之前先进行批处理的事件的数量。为了简单起见，本示例将此值设置为 10。在生产中，通常应将它设置为较高的值，例如 1024。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>使用以下代码创建名为 <bpt id="p1">**</bpt>LoggerBolt<ept id="p1">**</ept> 的新类：</source>
          <target state="new">使用以下代码创建名为 <bpt id="p1">**</bpt>LoggerBolt<ept id="p1">**</ept> 的新类：</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>此 Storm 螺栓记录接收到的事件的内容。在存储服务中，它可以轻松扩展为存储元组。<bpt id="p1">[</bpt><ept id="p1">HDInsight 传感器分析教程]</ept>同样使用这种方法将数据存储到 HBase 中。</source>
          <target state="new">此 Storm 螺栓记录接收到的事件的内容。在存储服务中，它可以轻松扩展为存储元组。<bpt id="p1">[</bpt><ept id="p1">HDInsight 传感器分析教程]</ept>同样使用这种方法将数据存储到 HBase 中。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>使用以下代码创建一个名为 <bpt id="p1">**</bpt>LogTopology<ept id="p1">**</ept> 的类：</source>
          <target state="new">使用以下代码创建一个名为 <bpt id="p1">**</bpt>LogTopology<ept id="p1">**</ept> 的类：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>此类创建新事件中心喷管，并使用配置文件中的属性对它进行实例化。请务必注意：此示例创建喷管的数量与事件中心中分区的数量相同，以便使用该事件中心允许的最大并行度。</source>
          <target state="new">此类创建新事件中心喷管，并使用配置文件中的属性对它进行实例化。请务必注意：此示例创建喷管的数量与事件中心中分区的数量相同，以便使用该事件中心允许的最大并行度。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>