{
  "nodes": [
    {
      "content": "管理 SQL 数据仓库中的统计信息 | Azure",
      "pos": [
        26,
        51
      ]
    },
    {
      "content": "有关在开发解决方案时于 Azure SQL 数据仓库中管理统计信息的技巧。",
      "pos": [
        69,
        106
      ]
    },
    {
      "content": "管理 SQL 数据仓库中的统计信息",
      "pos": [
        330,
        347
      ]
    },
    {
      "content": "SQL 数据仓库使用统计信息来评估以不同方式执行分布式查询的成本。如果统计信息准确，则查询优化器可以生成高质量查询计划来改善查询性能。",
      "pos": [
        349,
        416
      ]
    },
    {
      "content": "若要达到 SQL 数据仓库预计提供的查询性能，创建和更新统计信息极为重要。本指南提供统计信息的概述，然后说明如何：",
      "pos": [
        418,
        475
      ]
    },
    {
      "content": "在数据库设计阶段创建统计信息",
      "pos": [
        479,
        493
      ]
    },
    {
      "content": "在数据库维护阶段更新统计信息",
      "pos": [
        496,
        510
      ]
    },
    {
      "content": "使用系统视图和函数查看统计信息",
      "pos": [
        513,
        528
      ]
    },
    {
      "content": "统计信息简介",
      "pos": [
        533,
        539
      ]
    },
    {
      "content": "单列统计信息是包含单一列中值范围和频率相关信息的对象。查询优化器使用此直方图来估算查询结果中的行数。这会直接影响到有关如何优化查询的决策。",
      "pos": [
        541,
        610
      ]
    },
    {
      "content": "多列统计信息是基于列列表创建的统计信息。其中包含列表中第一个列的单列统计信息，加上一些跨列相关性信息（称为密度）。多列统计信息可以改善某些操作（例如复合 Join 和 Group By）的查询性能。",
      "pos": [
        612,
        711
      ]
    },
    {
      "pos": [
        713,
        758
      ],
      "content": "有关详细信息，请参阅 MSDN 上的 <bpt id=\"p1\">[</bpt>DBCC SHOW\\_STATISTICS<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "为何需要统计信息？",
      "pos": [
        763,
        772
      ]
    },
    {
      "content": "如果没有正确的统计信息，你将无法获得 SQL 数据仓库预期提供的性能。表和列没有 SQL 数据仓库自动生成的统计信息，因此需要你自行创建。在创建表时创建统计信息，然后在填入统计信息后予以更新是个不错的主意。",
      "pos": [
        773,
        876
      ]
    },
    {
      "pos": [
        880,
        1022
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果使用 SQL Server，你可以依赖 SQL Server 根据需要为你创建和更新单列统计信息。SQL 数据仓库在这方面有所不同。由于数据是分布式的，因此 SQL 数据仓库不会自动聚合所有分布式数据的统计信息。它只在创建和更新统计信息时生成聚合统计信息。"
    },
    {
      "content": "何时创建统计信息",
      "pos": [
        1027,
        1035
      ]
    },
    {
      "content": "一组一致的最新统计信息是 SQL 数据仓库的重要部分。因此，请务必在设计表的过程中创建统计信息。",
      "pos": [
        1036,
        1084
      ]
    },
    {
      "content": "创建每个列的单列统计信息是开始使用统计信息的简单方式。不过，创建和更新统计信息的性能与成本之间总有一些取舍。如果你创建了所有列的单列统计信息，后来发现更新所有统计信息要花费太长的时间，你始终可以丢弃一些统计信息，或较常更新其中一些统计信息。",
      "pos": [
        1086,
        1206
      ]
    },
    {
      "content": "仅当列位于复合 Join 或 Group By 子句中时，查询优化器才使用多列统计信息。复合筛选条件目前并不会受益于多列统计信息。",
      "pos": [
        1208,
        1273
      ]
    },
    {
      "content": "开始进行 SQL 数据仓库开发时，实施以下模式是个不错的主意：",
      "pos": [
        1275,
        1306
      ]
    },
    {
      "content": "对每个表上的每个列创建单列统计信息",
      "pos": [
        1309,
        1326
      ]
    },
    {
      "content": "对 Join 和 Group By 子句中查询所用的列创建多列统计信息。",
      "pos": [
        1329,
        1365
      ]
    },
    {
      "content": "在确定如何查询数据后，你可以修改此模型 - 尤其是在表的范围很广时。有关更高级的方法，请参阅 [实施统计信息管理](## 实施统计信息管理) 部分。",
      "pos": [
        1367,
        1441
      ]
    },
    {
      "content": "何时更新统计信息",
      "pos": [
        1446,
        1454
      ]
    },
    {
      "content": "请务必在数据库管理日常工作中纳入更新统计信息。数据库中的数据发布改变时，就需要更新统计信息。否则，你可能会发现查询性能欠佳，而进一步排查查询问题所做的努力可能不值得。",
      "pos": [
        1455,
        1538
      ]
    },
    {
      "content": "因此，在排查查询问题时，首先要询问的问题之一就是“统计信息是最新的吗？”",
      "pos": [
        1540,
        1576
      ]
    },
    {
      "pos": [
        1578,
        1641
      ],
      "content": "此问题不是可根据期限回答的问题。最新的统计信息对象有可能非常陈旧。当行数或特定列的值分布有重大变化时，<bpt id=\"p1\">*</bpt>就<ept id=\"p1\">*</ept>需要更新统计信息。"
    },
    {
      "content": "例如，数据仓库中的日期列往往需要经常更新统计信息。每次有新行载入数据仓库时，就会添加新的加载日期或事务日期。这些操作会更改数据分布情况并使统计信息过时。",
      "pos": [
        1643,
        1719
      ]
    },
    {
      "content": "相反地，客户表上性别列的统计信息可能永远不需要更新。假设客户间的分布固定不变，将新行添加到表变化并不会改变数据分布情况。不过，如果数据仓库只包含一种性别，而新的要求导致多种性别，则肯定需要更新性别列的统计信息。",
      "pos": [
        1721,
        1826
      ]
    },
    {
      "pos": [
        1828,
        1855
      ],
      "content": "有关更多说明，请参阅 MSDN 上的<bpt id=\"p1\">[</bpt>统计信息<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "实施统计信息管理",
      "pos": [
        1860,
        1868
      ]
    },
    {
      "content": "扩展数据加载过程通常是个不错的想法，可确保在加载结束时更新统计信息。当表更改其大小和/或其值分布时，数据加载最为频繁。因此，这是实施某些管理过程的合理位置。",
      "pos": [
        1870,
        1948
      ]
    },
    {
      "content": "下面提供了有关在加载过程中更新统计信息的一些指导原则：",
      "pos": [
        1950,
        1977
      ]
    },
    {
      "content": "确保加载的每个表至少包含一个更新的统计信息对象。这会在统计信息更新过程中更新表大小（行计数和页计数）信息。",
      "pos": [
        1981,
        2034
      ]
    },
    {
      "content": "将重点放在参与 JOIN、GROUP BY、ORDER BY 和 DISTINCT 子句的列上",
      "pos": [
        2037,
        2084
      ]
    },
    {
      "content": "考虑更频繁地更新“递增键”列（例如事务日期），因为这些值不包含在统计信息直方图中。",
      "pos": [
        2087,
        2128
      ]
    },
    {
      "content": "考虑较不经常更新静态分布列。",
      "pos": [
        2131,
        2145
      ]
    },
    {
      "pos": [
        2148,
        2234
      ],
      "content": "请记住，每个统计信息对象是连续更新的。仅实现 <ph id=\"ph1\">`UPDATE STATISTICS &lt;TABLE_NAME&gt;`</ph> 可能不太理想 - 尤其是对包含许多统计信息对象的宽型表而言。"
    },
    {
      "pos": [
        2238,
        2295
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>有关 [递增键] 的详细信息，请参阅 SQL Server 2014 基数估计模型白皮书。"
    },
    {
      "pos": [
        2297,
        2324
      ],
      "content": "有关更多说明，请参阅 MSDN 上的<bpt id=\"p1\">[</bpt>基数估计<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "示例：创建统计信息",
      "pos": [
        2329,
        2338
      ]
    },
    {
      "content": "以下示例演示如何使用各种选项来创建统计信息。用于每个列的选项取决于数据特征以及在查询中使用列的方式。",
      "pos": [
        2340,
        2390
      ]
    },
    {
      "content": "A.使用默认选项创建单列统计信息",
      "pos": [
        2396,
        2412
      ]
    },
    {
      "content": "若要基于某个列创建统计信息，只需提供统计信息对象的名称和列的名称。",
      "pos": [
        2414,
        2447
      ]
    },
    {
      "content": "此语法使用所有默认选项。默认情况下，SQL 数据仓库在创建统计信息时对 20% 的表采样。",
      "pos": [
        2449,
        2494
      ]
    },
    {
      "content": "例如：",
      "pos": [
        2587,
        2590
      ]
    },
    {
      "content": "B.通过检查每个行创建单列统计信息",
      "pos": [
        2656,
        2673
      ]
    },
    {
      "content": "20% 的默认采样率足以应付大多数情况。不过，你可以调整采样率。",
      "pos": [
        2675,
        2707
      ]
    },
    {
      "content": "若要采样整个表，请使用此语法：",
      "pos": [
        2709,
        2724
      ]
    },
    {
      "content": "例如：",
      "pos": [
        2831,
        2834
      ]
    },
    {
      "content": "C.通过指定样本大小创建单列统计信息",
      "pos": [
        2914,
        2932
      ]
    },
    {
      "content": "或者，你可以以百分比指定样本大小：",
      "pos": [
        2934,
        2951
      ]
    },
    {
      "content": "D.只对某些行创建单列统计信息",
      "pos": [
        3042,
        3057
      ]
    },
    {
      "content": "另一个选项是对表中的部分行创建统计信息。这称为筛选的统计信息。",
      "pos": [
        3059,
        3090
      ]
    },
    {
      "content": "例如，在计划查询大型分区表的特定分区时，你可以使用筛选的统计信息。只对分区值创建统计信息，统计信息的准确度将会改善，并因而改善查询性能。",
      "pos": [
        3092,
        3160
      ]
    },
    {
      "content": "此示例将会基于一系列的值创建统计信息。可以轻松定义这些值以匹配分区中的值范围。",
      "pos": [
        3162,
        3201
      ]
    },
    {
      "pos": [
        3305,
        3420
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要让查询优化器在选择分布式查询计划时考虑使用筛选的统计信息，查询必须符合统计信息对象的定义。使用上述示例，查询的 where 子句需要指定介于 2000101 和 20001231 之间的 col1 值。"
    },
    {
      "content": "E.使用所有选项创建单列统计信息",
      "pos": [
        3426,
        3442
      ]
    },
    {
      "content": "当然，你可以将选项组合在一起。以下示例使用自定义样本大小创建筛选的统计信息对象：",
      "pos": [
        3444,
        3484
      ]
    },
    {
      "pos": [
        3612,
        3653
      ],
      "content": "有关完整参考，请参阅 MSDN 上的 <bpt id=\"p1\">[</bpt>CREATE STATISTICS<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "F.创建多列统计信息",
      "pos": [
        3659,
        3669
      ]
    },
    {
      "content": "若要创建多列统计信息，只需使用上述示例，但要指定更多的列。",
      "pos": [
        3671,
        3700
      ]
    },
    {
      "pos": [
        3704,
        3752
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>用于估计查询结果中行数的直方图只适用于统计信息对象定义中所列的第一个列。"
    },
    {
      "pos": [
        3754,
        3847
      ],
      "content": "在此示例中，直方图位于 <bpt id=\"p1\">*</bpt>product\\_category<ept id=\"p1\">*</ept>。跨列统计信息是根据 <bpt id=\"p2\">*</bpt>product\\_category<ept id=\"p2\">*</ept> 和 <bpt id=\"p3\">*</bpt>product\\_sub\\_category<ept id=\"p3\">*</ept> 计算的："
    },
    {
      "pos": [
        4034,
        4114
      ],
      "content": "由于 <bpt id=\"p1\">*</bpt>product\\_category<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>product\\_sub\\_category<ept id=\"p2\">*</ept> 之间存在关联，因此在同时访问这些列时，多列统计信息相当有用。"
    },
    {
      "content": "G.基于表中的所有列创建统计信息",
      "pos": [
        4120,
        4136
      ]
    },
    {
      "content": "创建统计信息的方法之一是在创建表后发出 CREATE STATISTICS 命令。",
      "pos": [
        4138,
        4179
      ]
    },
    {
      "content": "H.使用存储过程基于数据库中的所有列创建统计信息",
      "pos": [
        4459,
        4483
      ]
    },
    {
      "content": "SQL 数据仓库不提供相当于 SQL Server 中 [sp\\_create\\_stats][] 的系统存储过程。此存储过程将基于数据库中尚不包含统计信息的每个列创建单列统计信息对象。",
      "pos": [
        4485,
        4578
      ]
    },
    {
      "content": "这可以帮助你开始进行数据库设计。你可以根据需要任意改写此存储过程。",
      "pos": [
        4580,
        4613
      ]
    },
    {
      "content": "若要使用此过程对表中的所有列创建统计信息，只需调用该过程即可。",
      "pos": [
        7438,
        7469
      ]
    },
    {
      "content": "示例：更新统计信息",
      "pos": [
        7507,
        7516
      ]
    },
    {
      "content": "若要更新统计信息，你可以：",
      "pos": [
        7518,
        7531
      ]
    },
    {
      "content": "更新一个统计信息对象。指定要更新的统计信息对象名称。",
      "pos": [
        7536,
        7562
      ]
    },
    {
      "content": "更新表中的所有统计信息对象。指定表名称，而不是一个特定的统计信息对象。",
      "pos": [
        7566,
        7601
      ]
    },
    {
      "content": "A.更新一个特定的统计信息对象",
      "pos": [
        7608,
        7623
      ]
    },
    {
      "content": "使用以下语法来更新特定的统计信息对象：",
      "pos": [
        7628,
        7647
      ]
    },
    {
      "content": "例如：",
      "pos": [
        7717,
        7720
      ]
    },
    {
      "content": "通过更新特定统计信息对象，可以减少管理统计信息所需的时间和资源。在选择要更新的最佳统计信息对象之前，需要经过一定的思考。",
      "pos": [
        7780,
        7840
      ]
    },
    {
      "content": "B.更新表中的所有统计信息",
      "pos": [
        7847,
        7860
      ]
    },
    {
      "content": "此示例演示了更新表中所有统计信息对象的一个简单方法。",
      "pos": [
        7865,
        7891
      ]
    },
    {
      "content": "例如：",
      "pos": [
        7948,
        7951
      ]
    },
    {
      "content": "此语句很容易使用。只要记住，这会更新表中的所有统计信息，因此执行的工作可能会超过所需的数量。如果性能不是一个考虑因素，这绝对是保证拥有最新统计信息的最简单、最全面的操作方式。",
      "pos": [
        7992,
        8079
      ]
    },
    {
      "pos": [
        8083,
        8177
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>更新表中的所有统计信息时，SQL 数据仓库将执行扫描，以针对每个统计信息进行表采样。如果表很大、包含许多列和许多统计信息，则根据需要更新各项统计信息可能比较有效率。"
    },
    {
      "pos": [
        8179,
        8262
      ],
      "content": "有关 <ph id=\"ph1\">`UPDATE STATISTICS`</ph> 过程的实现，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">临时表]</ept>一文。实现方法与上述 <ph id=\"ph2\">`CREATE STATISTICS`</ph> 过程略有不同，但最终结果相同。"
    },
    {
      "pos": [
        8264,
        8293
      ],
      "content": "有关完整语法，请参阅 MSDN 上的<bpt id=\"p1\">[</bpt>更新统计信息<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "统计信息元数据",
      "pos": [
        8298,
        8305
      ]
    },
    {
      "content": "可以使用多个系统视图和函数来查找有关统计信息的信息。例如，使用 stats-date 函数查看上次创建或更新统计信息的时间，即可了解统计信息对象是否可能已过时。",
      "pos": [
        8306,
        8386
      ]
    },
    {
      "content": "统计信息的目录视图",
      "pos": [
        8392,
        8401
      ]
    },
    {
      "content": "这些系统视图提供有关统计信息的信息：",
      "pos": [
        8402,
        8420
      ]
    },
    {
      "content": "目录视图",
      "pos": [
        8424,
        8428
      ]
    },
    {
      "content": "说明",
      "pos": [
        8431,
        8433
      ]
    },
    {
      "content": "sys.columns",
      "pos": [
        8470,
        8481
      ]
    },
    {
      "content": "针对每个列提供一行。",
      "pos": [
        8487,
        8497
      ]
    },
    {
      "content": "sys.objects",
      "pos": [
        8503,
        8514
      ]
    },
    {
      "content": "针对数据库中的每个对象提供一行。",
      "pos": [
        8520,
        8536
      ]
    },
    {
      "content": "sys.schemas",
      "pos": [
        8544,
        8555
      ]
    },
    {
      "content": "针对数据库中的每个架构提供一行。",
      "pos": [
        8561,
        8577
      ]
    },
    {
      "content": "sys.stats",
      "pos": [
        8585,
        8594
      ]
    },
    {
      "content": "针对每个统计信息对象提供一行。",
      "pos": [
        8600,
        8615
      ]
    },
    {
      "content": "sys.stats\\_columns",
      "pos": [
        8621,
        8639
      ]
    },
    {
      "content": "针对统计信息对象中的每个列提供一行。链接回到 sys.columns。",
      "pos": [
        8645,
        8680
      ]
    },
    {
      "content": "sys.tables",
      "pos": [
        8686,
        8696
      ]
    },
    {
      "content": "针对每个表（包括外部表）提供一行。",
      "pos": [
        8702,
        8719
      ]
    },
    {
      "content": "sys.table\\_types",
      "pos": [
        8725,
        8741
      ]
    },
    {
      "content": "针对每个数据类型提供一行。",
      "pos": [
        8747,
        8760
      ]
    },
    {
      "content": "统计信息的系统函数",
      "pos": [
        8769,
        8778
      ]
    },
    {
      "content": "这些系统函数适合用于处理统计信息：",
      "pos": [
        8779,
        8796
      ]
    },
    {
      "content": "系统函数",
      "pos": [
        8800,
        8804
      ]
    },
    {
      "content": "说明",
      "pos": [
        8807,
        8809
      ]
    },
    {
      "content": "STATS\\_DATE",
      "pos": [
        8849,
        8860
      ]
    },
    {
      "content": "上次更新统计信息对象的日期。",
      "pos": [
        8866,
        8880
      ]
    },
    {
      "content": "DBCC SHOW\\_STATISTICS",
      "pos": [
        8886,
        8907
      ]
    },
    {
      "content": "提供有关统计信息对象识别的值分布的摘要级别和详细信息。",
      "pos": [
        8913,
        8940
      ]
    },
    {
      "content": "将统计信息列和函数合并成一个视图",
      "pos": [
        8948,
        8964
      ]
    },
    {
      "content": "此视图将统计信息相关的列以及 [STATS\\_DATE()][] 函数的结果合并在一起。",
      "pos": [
        8966,
        9010
      ]
    },
    {
      "content": "DBCC SHOW\\_STATISTICS() 示例",
      "pos": [
        10942,
        10968
      ]
    },
    {
      "content": "DBCC SHOW\\_STATISTICS() 显示统计信息对象中保存的数据。这些数据包括三个组成部分。",
      "pos": [
        10970,
        11022
      ]
    },
    {
      "content": "标头",
      "pos": [
        11027,
        11029
      ]
    },
    {
      "content": "密度向量",
      "pos": [
        11033,
        11037
      ]
    },
    {
      "content": "直方图",
      "pos": [
        11041,
        11044
      ]
    },
    {
      "content": "有关统计信息的标头元数据。直方图显示统计信息对象的第一个键列中的值分布。密度向量可度量跨列相关性。SQLDW 使用统计信息对象中的任何数据来计算基数估计值。",
      "pos": [
        11046,
        11124
      ]
    },
    {
      "content": "显示标头、密度和直方图",
      "pos": [
        11130,
        11141
      ]
    },
    {
      "content": "此简单示例显示了统计信息对象的所有三个组成部分。",
      "pos": [
        11143,
        11167
      ]
    },
    {
      "content": "例如：",
      "pos": [
        11242,
        11245
      ]
    },
    {
      "content": "显示 DBCC SHOW\\_STATISTICS(); 的一个或多个组成部分",
      "pos": [
        11307,
        11345
      ]
    },
    {
      "pos": [
        11347,
        11384
      ],
      "content": "如果你只想要查看特定部分，请使用 <ph id=\"ph1\">`WITH`</ph> 子句并指定要查看哪些部分："
    },
    {
      "content": "例如：",
      "pos": [
        11503,
        11506
      ]
    },
    {
      "content": "DBCC SHOW\\_STATISTICS() 差异",
      "pos": [
        11597,
        11623
      ]
    },
    {
      "content": "相比于 SQL Server，在 SQL 数据仓库中，DBCC SHOW\\_STATISTICS() 的实现更加严格。",
      "pos": [
        11624,
        11683
      ]
    },
    {
      "content": "未阐述的功能不受支持",
      "pos": [
        11688,
        11698
      ]
    },
    {
      "content": "不能使用 Stats\\_stream",
      "pos": [
        11701,
        11719
      ]
    },
    {
      "content": "不能联接特定统计信息子集的结果，例如 (STAT\\_HEADER JOIN DENSITY\\_VECTOR)",
      "pos": [
        11722,
        11776
      ]
    },
    {
      "content": "不能针对消息隐藏设置 NO\\_INFOMSGS",
      "pos": [
        11780,
        11803
      ]
    },
    {
      "content": "不能在统计信息名称的前后使用方括号",
      "pos": [
        11807,
        11824
      ]
    },
    {
      "content": "不能使用列名来标识统计信息对象",
      "pos": [
        11828,
        11843
      ]
    },
    {
      "content": "不支持自定义错误 2767",
      "pos": [
        11847,
        11860
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        11866,
        11870
      ]
    },
    {
      "pos": [
        11871,
        11901
      ],
      "content": "有关更多开发技巧，请参阅 <bpt id=\"p1\">[</bpt>SQL 数据仓库开发概述<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"管理 SQL 数据仓库中的统计信息 | Azure\"\n   description=\"有关在开发解决方案时于 Azure SQL 数据仓库中管理统计信息的技巧。\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.date=\"09/26/2015\"\n   wacn.date=\"01/20/2016\"/>\n\n# 管理 SQL 数据仓库中的统计信息\n SQL 数据仓库使用统计信息来评估以不同方式执行分布式查询的成本。如果统计信息准确，则查询优化器可以生成高质量查询计划来改善查询性能。\n\n若要达到 SQL 数据仓库预计提供的查询性能，创建和更新统计信息极为重要。本指南提供统计信息的概述，然后说明如何：\n\n- 在数据库设计阶段创建统计信息\n- 在数据库维护阶段更新统计信息\n- 使用系统视图和函数查看统计信息\n\n## 统计信息简介\n\n单列统计信息是包含单一列中值范围和频率相关信息的对象。查询优化器使用此直方图来估算查询结果中的行数。这会直接影响到有关如何优化查询的决策。\n\n多列统计信息是基于列列表创建的统计信息。其中包含列表中第一个列的单列统计信息，加上一些跨列相关性信息（称为密度）。多列统计信息可以改善某些操作（例如复合 Join 和 Group By）的查询性能。\n\n有关详细信息，请参阅 MSDN 上的 [DBCC SHOW\\_STATISTICS][]。\n\n## 为何需要统计信息？\n如果没有正确的统计信息，你将无法获得 SQL 数据仓库预期提供的性能。表和列没有 SQL 数据仓库自动生成的统计信息，因此需要你自行创建。在创建表时创建统计信息，然后在填入统计信息后予以更新是个不错的主意。\n\n> [AZURE.NOTE]如果使用 SQL Server，你可以依赖 SQL Server 根据需要为你创建和更新单列统计信息。SQL 数据仓库在这方面有所不同。由于数据是分布式的，因此 SQL 数据仓库不会自动聚合所有分布式数据的统计信息。它只在创建和更新统计信息时生成聚合统计信息。\n\n## 何时创建统计信息\n一组一致的最新统计信息是 SQL 数据仓库的重要部分。因此，请务必在设计表的过程中创建统计信息。\n\n创建每个列的单列统计信息是开始使用统计信息的简单方式。不过，创建和更新统计信息的性能与成本之间总有一些取舍。如果你创建了所有列的单列统计信息，后来发现更新所有统计信息要花费太长的时间，你始终可以丢弃一些统计信息，或较常更新其中一些统计信息。\n\n仅当列位于复合 Join 或 Group By 子句中时，查询优化器才使用多列统计信息。复合筛选条件目前并不会受益于多列统计信息。\n\n开始进行 SQL 数据仓库开发时，实施以下模式是个不错的主意：\n- 对每个表上的每个列创建单列统计信息\n- 对 Join 和 Group By 子句中查询所用的列创建多列统计信息。\n\n在确定如何查询数据后，你可以修改此模型 - 尤其是在表的范围很广时。有关更高级的方法，请参阅 [实施统计信息管理](## 实施统计信息管理) 部分。\n\n## 何时更新统计信息\n请务必在数据库管理日常工作中纳入更新统计信息。数据库中的数据发布改变时，就需要更新统计信息。否则，你可能会发现查询性能欠佳，而进一步排查查询问题所做的努力可能不值得。\n\n因此，在排查查询问题时，首先要询问的问题之一就是“统计信息是最新的吗？”\n\n此问题不是可根据期限回答的问题。最新的统计信息对象有可能非常陈旧。当行数或特定列的值分布有重大变化时，*就*需要更新统计信息。\n\n例如，数据仓库中的日期列往往需要经常更新统计信息。每次有新行载入数据仓库时，就会添加新的加载日期或事务日期。这些操作会更改数据分布情况并使统计信息过时。\n\n相反地，客户表上性别列的统计信息可能永远不需要更新。假设客户间的分布固定不变，将新行添加到表变化并不会改变数据分布情况。不过，如果数据仓库只包含一种性别，而新的要求导致多种性别，则肯定需要更新性别列的统计信息。\n\n有关更多说明，请参阅 MSDN 上的[统计信息][]。\n\n## 实施统计信息管理\n\n扩展数据加载过程通常是个不错的想法，可确保在加载结束时更新统计信息。当表更改其大小和/或其值分布时，数据加载最为频繁。因此，这是实施某些管理过程的合理位置。\n\n下面提供了有关在加载过程中更新统计信息的一些指导原则：\n\n- 确保加载的每个表至少包含一个更新的统计信息对象。这会在统计信息更新过程中更新表大小（行计数和页计数）信息。\n- 将重点放在参与 JOIN、GROUP BY、ORDER BY 和 DISTINCT 子句的列上\n- 考虑更频繁地更新“递增键”列（例如事务日期），因为这些值不包含在统计信息直方图中。\n- 考虑较不经常更新静态分布列。\n- 请记住，每个统计信息对象是连续更新的。仅实现 `UPDATE STATISTICS <TABLE_NAME>` 可能不太理想 - 尤其是对包含许多统计信息对象的宽型表而言。\n\n> [AZURE.NOTE]有关 [递增键] 的详细信息，请参阅 SQL Server 2014 基数估计模型白皮书。\n\n有关更多说明，请参阅 MSDN 上的[基数估计][]。\n\n## 示例：创建统计信息\n\n以下示例演示如何使用各种选项来创建统计信息。用于每个列的选项取决于数据特征以及在查询中使用列的方式。\n\n### A.使用默认选项创建单列统计信息\n\n若要基于某个列创建统计信息，只需提供统计信息对象的名称和列的名称。\n\n此语法使用所有默认选项。默认情况下，SQL 数据仓库在创建统计信息时对 20% 的表采样。\n\n```\nCREATE STATISTICS [statistics_name] ON [schema_name].[table_name]([column_name]);\n```\n\n例如：\n\n```\nCREATE STATISTICS col1_stats ON dbo.table1 (col1);\n```\n\n### B.通过检查每个行创建单列统计信息\n\n20% 的默认采样率足以应付大多数情况。不过，你可以调整采样率。\n\n若要采样整个表，请使用此语法：\n\n```\nCREATE STATISTICS [statistics_name] ON [schema_name].[table_name]([column_name]) WITH FULLSCAN;\n```\n\n例如：\n\n```\nCREATE STATISTICS col1_stats ON dbo.table1 (col1) WITH FULLSCAN;\n```\n\n### C.通过指定样本大小创建单列统计信息\n\n或者，你可以以百分比指定样本大小：\n\n```\nCREATE STATISTICS col1_stats ON dbo.table1 (col1) WITH SAMPLE = 50 PERCENT;\n```\n\n### D.只对某些行创建单列统计信息\n\n另一个选项是对表中的部分行创建统计信息。这称为筛选的统计信息。\n\n例如，在计划查询大型分区表的特定分区时，你可以使用筛选的统计信息。只对分区值创建统计信息，统计信息的准确度将会改善，并因而改善查询性能。\n\n此示例将会基于一系列的值创建统计信息。可以轻松定义这些值以匹配分区中的值范围。\n\n```\nCREATE STATISTICS stats_col1 ON table1(col1) WHERE col1 > '2000101' AND col1 < '20001231';\n```\n\n> [AZURE.NOTE]若要让查询优化器在选择分布式查询计划时考虑使用筛选的统计信息，查询必须符合统计信息对象的定义。使用上述示例，查询的 where 子句需要指定介于 2000101 和 20001231 之间的 col1 值。\n\n### E.使用所有选项创建单列统计信息\n\n当然，你可以将选项组合在一起。以下示例使用自定义样本大小创建筛选的统计信息对象：\n\n```\nCREATE STATISTICS stats_col1 ON table1 (col1) WHERE col1 > '2000101' AND col1 < '20001231' WITH SAMPLE = 50 PERCENT;\n```\n\n有关完整参考，请参阅 MSDN 上的 [CREATE STATISTICS][]。\n\n### F.创建多列统计信息\n\n若要创建多列统计信息，只需使用上述示例，但要指定更多的列。\n\n> [AZURE.NOTE]用于估计查询结果中行数的直方图只适用于统计信息对象定义中所列的第一个列。\n\n在此示例中，直方图位于 *product\\_category*。跨列统计信息是根据 *product\\_category* 和 *product\\_sub\\_category* 计算的：\n\n```\nCREATE STATISTICS stats_2cols ON table1 (product_category, product_sub_category) WHERE product_category > '2000101' AND product_category < '20001231' WITH SAMPLE = 50 PERCENT;\n```\n\n由于 *product\\_category* 和 *product\\_sub\\_category* 之间存在关联，因此在同时访问这些列时，多列统计信息相当有用。\n\n### G.基于表中的所有列创建统计信息\n\n创建统计信息的方法之一是在创建表后发出 CREATE STATISTICS 命令。\n\n```\nCREATE TABLE dbo.table1 \n(\n   col1 int\n,  col2 int\n,  col3 int\n)\nWITH\n  (\n    CLUSTERED COLUMNSTORE INDEX\n  )\n;\nCREATE STATISTICS stats_col1 on dbo.table1 (col1);\nCREATE STATISTICS stats_col2 on dbo.table2 (col2);\nCREATE STATISTICS stats_col3 on dbo.table3 (col3);\n```\n\n### H.使用存储过程基于数据库中的所有列创建统计信息\n\nSQL 数据仓库不提供相当于 SQL Server 中 [sp\\_create\\_stats][] 的系统存储过程。此存储过程将基于数据库中尚不包含统计信息的每个列创建单列统计信息对象。\n\n这可以帮助你开始进行数据库设计。你可以根据需要任意改写此存储过程。\n\n```\nCREATE PROCEDURE    [dbo].[prc_sqldw_create_stats]\n(   @create_type    tinyint -- 1 default 2 Fullscan 3 Sample\n,   @sample_pct     tinyint\n)\nAS\nIF @create_type NOT IN (1,2,3)\nBEGIN\n    THROW 151000,'Invalid value for @stats_type parameter. Valid range 1 (default), 2 (fullscan) or 3 (sample).',1;\nEND;\nIF @sample_pct IS NULL\nBEGIN;\n    SET @sample_pct = 20;\nEND;\nIF OBJECT_ID('tempdb..#stats_ddl') IS NOT NULL\nBEGIN;\n    DROP TABLE #stats_ddl;\nEND;\nCREATE TABLE #stats_ddl\nWITH    (   DISTRIBUTION    = HASH([seq_nmbr])\n        ,   LOCATION        = USER_DB\n        )\nAS\nWITH T\nAS\n(\nSELECT      t.[name]                        AS [table_name]\n,           s.[name]                        AS [table_schema_name]\n,           c.[name]                        AS [column_name]\n,           c.[column_id]                   AS [column_id]\n,           t.[object_id]                   AS [object_id]\n,           ROW_NUMBER()\n            OVER(ORDER BY (SELECT NULL))    AS [seq_nmbr]\nFROM        sys.[tables] t\nJOIN        sys.[schemas] s         ON  t.[schema_id]       = s.[schema_id]\nJOIN        sys.[columns] c         ON  t.[object_id]       = c.[object_id]\nLEFT JOIN   sys.[stats_columns] l   ON  l.[object_id]       = c.[object_id]\n                                    AND l.[column_id]       = c.[column_id]\n                                    AND l.[stats_column_id] = 1\nLEFT JOIN   sys.[external_tables] e ON  e.[object_id]       = t.[object_id]\nWHERE       l.[object_id] IS NULL\nAND         e.[object_id] IS NULL -- not an external table\n)\nSELECT  [table_schema_name]\n,       [table_name]\n,       [column_name]\n,       [column_id]\n,       [object_id]\n,       [seq_nmbr]\n,       CASE @create_type\n        WHEN 1\n        THEN    CAST('CREATE STATISTICS '+QUOTENAME('stat_'+table_schema_name+ '_' + table_name + '_'+column_name)+' ON '+QUOTENAME(table_schema_name)+'.'+QUOTENAME(table_name)+'('+QUOTENAME(column_name)+')' AS VARCHAR(8000))\n        WHEN 2\n        THEN    CAST('CREATE STATISTICS '+QUOTENAME('stat_'+table_schema_name+ '_' + table_name + '_'+column_name)+' ON '+QUOTENAME(table_schema_name)+'.'+QUOTENAME(table_name)+'('+QUOTENAME(column_name)+') WITH FULLSCAN' AS VARCHAR(8000))\n        WHEN 3\n        THEN    CAST('CREATE STATISTICS '+QUOTENAME('stat_'+table_schema_name+ '_' + table_name + '_'+column_name)+' ON '+QUOTENAME(table_schema_name)+'.'+QUOTENAME(table_name)+'('+QUOTENAME(column_name)+') WITH SAMPLE '+@sample_pct+'PERCENT' AS VARCHAR(8000))\n        END AS create_stat_ddl\nFROM T\n;\nDECLARE @i INT              = 1\n,       @t INT              = (SELECT COUNT(*) FROM #stats_ddl)\n,       @s NVARCHAR(4000)   = N''\n;\nWHILE @i <= @t\nBEGIN\n    SET @s=(SELECT create_stat_ddl FROM #stats_ddl WHERE seq_nmbr = @i);\n    PRINT @s\n    EXEC sp_executesql @s\n    SET @i+=1;\nEND\nDROP TABLE #stats_ddl;\n```\n\n若要使用此过程对表中的所有列创建统计信息，只需调用该过程即可。\n\n```\nprc_sqldw_create_stats;\n```\n\n## 示例：更新统计信息\n\n若要更新统计信息，你可以：\n\n1. 更新一个统计信息对象。指定要更新的统计信息对象名称。\n2. 更新表中的所有统计信息对象。指定表名称，而不是一个特定的统计信息对象。\n\n\n### A.更新一个特定的统计信息对象 ###\n使用以下语法来更新特定的统计信息对象：\n\n```\nUPDATE STATISTICS [schema_name].[table_name]([stat_name]);\n```\n\n例如：\n\n```\nUPDATE STATISTICS [dbo].[table1] ([stats_col1]);\n```\n\n通过更新特定统计信息对象，可以减少管理统计信息所需的时间和资源。在选择要更新的最佳统计信息对象之前，需要经过一定的思考。\n\n\n### B.更新表中的所有统计信息 ###\n此示例演示了更新表中所有统计信息对象的一个简单方法。\n\n```\nUPDATE STATISTICS [schema_name].[table_name];\n```\n\n例如：\n\n```\nUPDATE STATISTICS dbo.table1;\n```\n\n此语句很容易使用。只要记住，这会更新表中的所有统计信息，因此执行的工作可能会超过所需的数量。如果性能不是一个考虑因素，这绝对是保证拥有最新统计信息的最简单、最全面的操作方式。\n\n> [AZURE.NOTE]更新表中的所有统计信息时，SQL 数据仓库将执行扫描，以针对每个统计信息进行表采样。如果表很大、包含许多列和许多统计信息，则根据需要更新各项统计信息可能比较有效率。\n\n有关 `UPDATE STATISTICS` 过程的实现，请参阅[临时表]一文。实现方法与上述 `CREATE STATISTICS` 过程略有不同，但最终结果相同。\n\n有关完整语法，请参阅 MSDN 上的[更新统计信息][]。\n\n## 统计信息元数据\n可以使用多个系统视图和函数来查找有关统计信息的信息。例如，使用 stats-date 函数查看上次创建或更新统计信息的时间，即可了解统计信息对象是否可能已过时。\n\n### 统计信息的目录视图\n这些系统视图提供有关统计信息的信息：\n\n| 目录视图 | 说明 |\n| :----------- | :---------- |\n| [sys.columns][] | 针对每个列提供一行。 |\n| [sys.objects][] | 针对数据库中的每个对象提供一行。 | |\n| [sys.schemas][] | 针对数据库中的每个架构提供一行。 | |\n| [sys.stats][] | 针对每个统计信息对象提供一行。 |\n| [sys.stats\\_columns][] | 针对统计信息对象中的每个列提供一行。链接回到 sys.columns。 |\n| [sys.tables][] | 针对每个表（包括外部表）提供一行。 |\n| [sys.table\\_types][] | 针对每个数据类型提供一行。 |\n\n\n### 统计信息的系统函数\n这些系统函数适合用于处理统计信息：\n\n| 系统函数 | 说明 |\n| :-------------- | :---------- |\n| [STATS\\_DATE][] | 上次更新统计信息对象的日期。 |\n| [DBCC SHOW\\_STATISTICS][] | 提供有关统计信息对象识别的值分布的摘要级别和详细信息。 |\n\n### 将统计信息列和函数合并成一个视图\n\n此视图将统计信息相关的列以及 [STATS\\_DATE()][] 函数的结果合并在一起。\n\n```\nCREATE VIEW dbo.vstats_columns\nAS\nSELECT\n        sm.[name]                           AS [schema_name]\n,       tb.[name]                           AS [table_name]\n,       st.[name]                           AS [stats_name]\n,       st.[filter_definition]              AS [stats_filter_defiinition]\n,       st.[has_filter]                     AS [stats_is_filtered]\n,       STATS_DATE(st.[object_id],st.[stats_id])\n                                            AS [stats_last_updated_date]\n,       co.[name]                           AS [stats_column_name]\n,       ty.[name]                           AS [column_type]\n,       co.[max_length]                     AS [column_max_length]\n,       co.[precision]                      AS [column_precision]\n,       co.[scale]                          AS [column_scale]\n,       co.[is_nullable]                    AS [column_is_nullable]\n,       co.[collation_name]                 AS [column_collation_name]\n,       QUOTENAME(sm.[name])+'.'+QUOTENAME(tb.[name])\n                                            AS two_part_name\n,       QUOTENAME(DB_NAME())+'.'+QUOTENAME(sm.[name])+'.'+QUOTENAME(tb.[name])\n                                            AS three_part_name\nFROM    sys.objects                         AS ob\nJOIN    sys.stats           AS st ON    ob.[object_id]      = st.[object_id]\nJOIN    sys.stats_columns   AS sc ON    st.[stats_id]       = sc.[stats_id]\n                            AND         st.[object_id]      = sc.[object_id]\nJOIN    sys.columns         AS co ON    sc.[column_id]      = co.[column_id]\n                            AND         sc.[object_id]      = co.[object_id]\nJOIN    sys.types           AS ty ON    co.[user_type_id]   = ty.[user_type_id]\nJOIN    sys.tables          AS tb ON  co.[object_id]        = tb.[object_id]\nJOIN    sys.schemas         AS sm ON  tb.[schema_id]        = sm.[schema_id]\nWHERE   1=1 \nAND     sts.[user_created] = 1\n;\n```\n\n## DBCC SHOW\\_STATISTICS() 示例\n\nDBCC SHOW\\_STATISTICS() 显示统计信息对象中保存的数据。这些数据包括三个组成部分。\n\n1. 标头\n2. 密度向量\n3. 直方图\n\n有关统计信息的标头元数据。直方图显示统计信息对象的第一个键列中的值分布。密度向量可度量跨列相关性。SQLDW 使用统计信息对象中的任何数据来计算基数估计值。\n\n### 显示标头、密度和直方图\n\n此简单示例显示了统计信息对象的所有三个组成部分。\n\n```\nDBCC SHOW_STATISTICS([<schema_name>.<table_name>],<stats_name>)\n```\n\n例如：\n\n```\nDBCC SHOW_STATISTICS (dbo.table1, stats_col1);\n```\n\n### 显示 DBCC SHOW\\_STATISTICS(); 的一个或多个组成部分\n\n如果你只想要查看特定部分，请使用 `WITH` 子句并指定要查看哪些部分：\n\n```\nDBCC SHOW_STATISTICS([<schema_name>.<table_name>],<stats_name>) WITH stat_header, histogram, density_vector\n```\n\n例如：\n\n```\nDBCC SHOW_STATISTICS (dbo.table1, stats_col1) WITH histogram, density_vector\n```\n\n## DBCC SHOW\\_STATISTICS() 差异\n相比于 SQL Server，在 SQL 数据仓库中，DBCC SHOW\\_STATISTICS() 的实现更加严格。\n\n1. 未阐述的功能不受支持\n- 不能使用 Stats\\_stream\n- 不能联接特定统计信息子集的结果，例如 (STAT\\_HEADER JOIN DENSITY\\_VECTOR)\n2. 不能针对消息隐藏设置 NO\\_INFOMSGS\n3. 不能在统计信息名称的前后使用方括号\n4. 不能使用列名来标识统计信息对象\n5. 不支持自定义错误 2767\n\n\n## 后续步骤\n有关更多开发技巧，请参阅 [SQL 数据仓库开发概述][]。\n\n<!--Image references-->\n\n<!--Link references--In actual articles, you only need a single period before the slash.-->\n[SQL 数据仓库开发概述]: /documentation/articles/sql-data-warehouse-overview-develop\n[临时表]: /documentation/articles/sql-data-warehouse-develop-temporary-tables\n\n<!-- External Links -->\n[基数估计]: https://msdn.microsoft.com/zh-cn/library/dn600374.aspx\n[CREATE STATISTICS]: https://msdn.microsoft.com/zh-cn/library/ms188038.aspx\n[DBCC SHOW\\_STATISTICS]: https://msdn.microsoft.com/zh-cn/library/ms174384.aspx\n[统计信息]: https://msdn.microsoft.com/zh-cn/library/ms190397.aspx\n[STATS\\_DATE]: https://msdn.microsoft.com/zh-cn/library/ms190330.aspx\n[sys.columns]: https://msdn.microsoft.com/zh-cn/library/ms176106.aspx\n[sys.objects]: https://msdn.microsoft.com/zh-cn/library/ms190324.aspx\n[sys.schemas]: https://msdn.microsoft.com/zh-cn/library/ms190324.aspx\n[sys.stats]: https://msdn.microsoft.com/zh-cn/library/ms177623.aspx\n[sys.stats\\_columns]: https://msdn.microsoft.com/zh-cn/library/ms187340.aspx\n[sys.tables]: https://msdn.microsoft.com/zh-cn/library/ms187406.aspx\n[sys.table\\_types]: https://msdn.microsoft.com/zh-cn/library/bb510623.aspx\n[更新统计信息]: https://msdn.microsoft.com/zh-cn/library/ms187348.aspx\n\n<!---HONumber=Mooncake_1207_2015-->\n"
}