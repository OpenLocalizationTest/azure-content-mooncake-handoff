{
  "nodes": [
    {
      "content": "使用 .NET 的移动服务和 Azure Active Directory 中基于角色的访问控制（Windows 应用商店）| Azure",
      "pos": [
        27,
        96
      ]
    },
    {
      "content": "了解如何使用 .NET 后端通过移动服务基于 Windows 应用商店应用程序中的 Azure Active Directory 角色控制访问。",
      "pos": [
        115,
        187
      ]
    },
    {
      "content": "使用 JavaScript 的移动服务和 Azure Active Directory 中基于角色的访问控制",
      "pos": [
        414,
        468
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        570,
        576
      ]
    },
    {
      "content": "概述",
      "pos": [
        674,
        676
      ]
    },
    {
      "content": "基于角色的访问控制 (RBAC) 是对用户可充当的角色分配权限的做法。它会明确定义特定类别的用户可以或者不可以执行哪些操作。本教程将指导你了解如何将基本 RBAC 添加到 Azure 移动服务。",
      "pos": [
        678,
        775
      ]
    },
    {
      "pos": [
        777,
        932
      ],
      "content": "本教程将演示基于角色的访问控制，检查每个用户在 Azure Active Directory (AAD) 中定义的“销售”组的成员资格。访问检查将在 .NET 移动服务后端中使用 Azure Active Directory 的 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Graph REST API]</ept> 来完成。只有属于“销售”组的用户才能查询数据。"
    },
    {
      "pos": [
        936,
        1067
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本教程旨在扩充身份验证知识以加入授权实践。你应该先使用 Azure Active Directory 身份验证提供程序完成<bpt id=\"p1\">[</bpt><ept id=\"p1\">向应用程序添加身份验证]</ept>教程。本教程将继续更新<bpt id=\"p2\">[</bpt><ept id=\"p2\">向应用程序添加身份验证]</ept>教程中使用的 TodoItem 应用程序。"
    },
    {
      "content": "先决条件",
      "pos": [
        1071,
        1075
      ]
    },
    {
      "content": "本教程需要的内容如下：",
      "pos": [
        1077,
        1088
      ]
    },
    {
      "content": "在 Windows 8.1 上运行的 Visual Studio 2013。",
      "pos": [
        1092,
        1130
      ]
    },
    {
      "pos": [
        1133,
        1185
      ],
      "content": "使用 Azure Active Directory 身份验证提供程序完成<bpt id=\"p1\">[</bpt><ept id=\"p1\">向应用程序添加身份验证]</ept>教程。"
    },
    {
      "content": "为集成的应用程序生成密钥",
      "pos": [
        1193,
        1205
      ]
    },
    {
      "pos": [
        1208,
        1326
      ],
      "content": "在学习<bpt id=\"p1\">[</bpt><ept id=\"p1\">向应用程序添加身份验证]</ept>教程的过程中，你在完成<bpt id=\"p2\">[</bpt><ept id=\"p2\">注册以使用 Azure Active Directory 登录名]</ept>步骤时为集成的应用程序创建了注册。在本部分中，你将生成在使用该集成应用程序客户端 ID 读取目录信息时所用的密钥。"
    },
    {
      "content": "创建具有成员资格的销售组",
      "pos": [
        1481,
        1493
      ]
    },
    {
      "content": "在移动服务上创建自定义授权属性",
      "pos": [
        1622,
        1637
      ]
    },
    {
      "content": "在本部分中，你将创建一个可用来针对移动服务操作执行访问权限检查的新自定义授权属性。该属性将基于传递给它的角色名称查找 Active Directory 组。然后，将基于该组的成员资格执行访问权限检查。",
      "pos": [
        1640,
        1740
      ]
    },
    {
      "content": "在 Visual Studio 中，右键单击移动服务 .NET 后端项目，然后单击“管理 NuGet 包”。",
      "pos": [
        1745,
        1799
      ]
    },
    {
      "pos": [
        1804,
        1938
      ],
      "content": "在“NuGet Package Manager”对话框中的搜索条件内，输入 <bpt id=\"p1\">**</bpt>ADAL<ept id=\"p1\">**</ept> 以查找并安装移动服务的 <bpt id=\"p2\">**</bpt>Active Directory 身份验证库<ept id=\"p2\">**</ept>。最近我们已使用 3.3.205061641-alpha（预发行版）ADAL 包对本教程进行测试。"
    },
    {
      "pos": [
        1943,
        2016
      ],
      "content": "在 Visual Studio 中，右键单击你的移动服务项目，然后依次单击“添加”和“新建文件夹”。将新文件夹命名为 <bpt id=\"p1\">**</bpt>Utilities<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        2021,
        2100
      ],
      "content": "在 Visual Studio 中，右键单击新的 <bpt id=\"p1\">**</bpt>Utilities<ept id=\"p1\">**</ept> 文件夹，并添加名为 <bpt id=\"p2\">**</bpt>AuthorizeAadRole.cs<ept id=\"p2\">**</ept> 的新类文件。"
    },
    {
      "pos": [
        2117,
        2160
      ],
      "content": "在 AuthorizeAadRole.cs 文件的顶部添加以下 <ph id=\"ph1\">`using`</ph> 语句。"
    },
    {
      "pos": [
        2606,
        2700
      ],
      "content": "在 AuthorizeAadRole.cs 中，将以下枚举类型添加到 Utilities 命名空间。在此示例中，我们只需处理 <bpt id=\"p1\">**</bpt>Sales<ept id=\"p1\">**</ept> 角色。其他各项只是你可能要使用的组的示例。"
    },
    {
      "pos": [
        2822,
        2891
      ],
      "content": "在 AuthorizeAadRole.cs 中，将以下 <ph id=\"ph1\">`AuthorizeAadRole`</ph> 类定义添加到 Utilities 命名空间。"
    },
    {
      "pos": [
        4968,
        5067
      ],
      "content": "在 AuthorizeAadRole.cs 中，按如下所示更新 <ph id=\"ph1\">`AuthorizeAadRole`</ph> 类中的 <ph id=\"ph2\">`InitGroupIds`</ph> 方法。此方法会创建一个字典，以将组 ID 映射到每个角色。"
    },
    {
      "pos": [
        5610,
        5718
      ],
      "content": "在 AuthorizeAadRole.cs 中，更新 <ph id=\"ph1\">`AuthorizeAadRole`</ph> 类中的 <ph id=\"ph2\">`GetAADToken`</ph> 方法。此方法使用存储在移动服务中的应用程序设置来获取从 ADAL 访问 AAD 的令牌。"
    },
    {
      "pos": [
        5725,
        5849
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>默认情况下，ADAL for .NET 包含内存中令牌缓存，以帮助减轻 Active Directory 的额外网络流量。但是，你可以编写自己的缓存实现，或完全禁用缓存。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt><ept id=\"p1\">ADAL for .NET]</ept>。"
    },
    {
      "pos": [
        7128,
        7294
      ],
      "content": "在 AuthorizeAadRole.cs 中，更新 <ph id=\"ph1\">`AuthorizeAadRole`</ph> 类中的 <ph id=\"ph2\">`CheckMembership`</ph> 方法。此方法接收用户的对象 ID。然后，它使用 AAD Graph Rest API 来检查该对象 ID，以查看组的成员 ID 是否与 <ph id=\"ph3\">`AuthorizeAadRole`</ph> 类中选择的角色相关联。"
    },
    {
      "pos": [
        8790,
        8953
      ],
      "content": "在 AuthorizeAadRole.cs 中，使用以下代码更新 <ph id=\"ph1\">`AuthorizeAadRole`</ph> 类中的 <ph id=\"ph2\">`OnAuthorization`</ph> 方法。此代码要求调用移动服务的用户已在 AAD 上完成身份验证。然后，此代码将获取用户的 AAD 对象 ID，检查与该角色对应的 Active Directory 组的成员资格。"
    },
    {
      "pos": [
        8960,
        9061
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你可以按名称查找 Active Directory 组。但是，在许多情况下，将组 ID 存储为移动服务应用程序设置是较好的做法。这是因为组名称很可能会更改，而 ID 会保持相同。"
    },
    {
      "content": "保存对 AuthorizeAadRole.cs 所做的更改。",
      "pos": [
        12113,
        12143
      ]
    },
    {
      "content": "将基于角色的访问检查添加到数据库操作",
      "pos": [
        12147,
        12165
      ]
    },
    {
      "pos": [
        12170,
        12244
      ],
      "content": "在 Visual Studio 中，展开移动服务项目中的 <bpt id=\"p1\">**</bpt>Controllers<ept id=\"p1\">**</ept> 文件夹。打开 TodoItemController.cs。"
    },
    {
      "pos": [
        12249,
        12315
      ],
      "content": "在 TodoItemController.cs 中，为包含自定义授权属性的 utilities 命名空间添加 <ph id=\"ph1\">`using`</ph> 语句。"
    },
    {
      "content": "在 TodoItemController.cs 中，可以根据检查访问权限的方式，将属性添加到控制器类或单个方法。如果你要让所有控制器操作根据相同的角色来检查访问权限，只需将属性添加到类。请按如下所示将属性添加到类，以测试本教程。",
      "pos": [
        12362,
        12476
      ]
    },
    {
      "content": "如果你只想要检查插入、更新和删除操作的访问权限，则应使用以下方式仅设置这些方法的属性。",
      "pos": [
        12595,
        12638
      ]
    },
    {
      "content": "保存 TodoItemController.cs 并生成移动服务，以验证是否没有语法错误。",
      "pos": [
        13349,
        13394
      ]
    },
    {
      "content": "将移动服务发布到 Azure 帐户。",
      "pos": [
        13398,
        13416
      ]
    },
    {
      "content": "测试客户端的访问",
      "pos": [
        13421,
        13429
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"使用 .NET 的移动服务和 Azure Active Directory 中基于角色的访问控制（Windows 应用商店）| Azure\"\n    description=\"了解如何使用 .NET 后端通过移动服务基于 Windows 应用商店应用程序中的 Azure Active Directory 角色控制访问。\"\n    documentationCenter=\"windows\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"\n    services=\"mobile-services\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.date=\"12/07/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n# 使用 JavaScript 的移动服务和 Azure Active Directory 中基于角色的访问控制\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n[AZURE.INCLUDE [mobile-services-selector-rbac](../includes/mobile-services-selector-rbac.md)]\n\n##概述\n\n基于角色的访问控制 (RBAC) 是对用户可充当的角色分配权限的做法。它会明确定义特定类别的用户可以或者不可以执行哪些操作。本教程将指导你了解如何将基本 RBAC 添加到 Azure 移动服务。\n\n本教程将演示基于角色的访问控制，检查每个用户在 Azure Active Directory (AAD) 中定义的“销售”组的成员资格。访问检查将在 .NET 移动服务后端中使用 Azure Active Directory 的 [Graph REST API] 来完成。只有属于“销售”组的用户才能查询数据。\n\n\n>[AZURE.NOTE]本教程旨在扩充身份验证知识以加入授权实践。你应该先使用 Azure Active Directory 身份验证提供程序完成[向应用程序添加身份验证]教程。本教程将继续更新[向应用程序添加身份验证]教程中使用的 TodoItem 应用程序。\n\n##先决条件\n\n本教程需要的内容如下：\n\n* 在 Windows 8.1 上运行的 Visual Studio 2013。\n* 使用 Azure Active Directory 身份验证提供程序完成[向应用程序添加身份验证]教程。\n \n\n\n\n##为集成的应用程序生成密钥\n\n\n在学习[向应用程序添加身份验证]教程的过程中，你在完成[注册以使用 Azure Active Directory 登录名]步骤时为集成的应用程序创建了注册。在本部分中，你将生成在使用该集成应用程序客户端 ID 读取目录信息时所用的密钥。\n\n[AZURE.INCLUDE [mobile-services-generate-aad-app-registration-access-key](../includes/mobile-services-generate-aad-app-registration-access-key.md)]\n\n\n\n##创建具有成员资格的销售组\n\n[AZURE.INCLUDE [mobile-services-aad-rbac-create-sales-group](../includes/mobile-services-aad-rbac-create-sales-group.md)]\n\n\n\n##在移动服务上创建自定义授权属性 \n\n在本部分中，你将创建一个可用来针对移动服务操作执行访问权限检查的新自定义授权属性。该属性将基于传递给它的角色名称查找 Active Directory 组。然后，将基于该组的成员资格执行访问权限检查。\n\n1. 在 Visual Studio 中，右键单击移动服务 .NET 后端项目，然后单击“管理 NuGet 包”。\n\n2. 在“NuGet Package Manager”对话框中的搜索条件内，输入 **ADAL** 以查找并安装移动服务的 **Active Directory 身份验证库**。最近我们已使用 3.3.205061641-alpha（预发行版）ADAL 包对本教程进行测试。\n\n3. 在 Visual Studio 中，右键单击你的移动服务项目，然后依次单击“添加”和“新建文件夹”。将新文件夹命名为 **Utilities**。\n\n4. 在 Visual Studio 中，右键单击新的 **Utilities** 文件夹，并添加名为 **AuthorizeAadRole.cs** 的新类文件。\n\n    ![][0]\n\n5. 在 AuthorizeAadRole.cs 文件的顶部添加以下 `using` 语句。\n\n        using System.Net;\n        using System.Net.Http;\n        using System.Web.Http;\n        using System.Web.Http.Controllers;\n        using System.Web.Http.Filters;\n        using Newtonsoft.Json;\n        using Microsoft.WindowsAzure.Mobile.Service.Security;\n        using Microsoft.WindowsAzure.Mobile.Service;\n        using Microsoft.IdentityModel.Clients.ActiveDirectory;\n        using System.Globalization;\n        using System.IO;\n\n6. 在 AuthorizeAadRole.cs 中，将以下枚举类型添加到 Utilities 命名空间。在此示例中，我们只需处理 **Sales** 角色。其他各项只是你可能要使用的组的示例。\n\n        public enum AadRoles\n        {\n            Sales,\n            Management,\n            Development\n        }\n\n7. 在 AuthorizeAadRole.cs 中，将以下 `AuthorizeAadRole` 类定义添加到 Utilities 命名空间。\n\n        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]\n        public class AuthorizeAadRole : AuthorizationFilterAttribute\n        {\n            private bool isInitialized;\n            private bool isHosted;\n            private ApiServices services = null;\n    \n            // Constants used with ADAL and the Graph REST API for AAD\n            private const string AadInstance = \"https://login.chinacloudapi.cn/{0}\";\n            private const string GraphResourceId = \"https://graph.chinacloudapi.cn/\";\n            private const string APIVersion = \"?api-version=2013-04-05\";\n    \n            // App settings pulled from the Mobile Service\n            private string tenantdomain;\n            private string clientid;\n            private string clientkey;\n            private Dictionary<int, string> groupIds = new Dictionary<int, string>();\n    \n            private string token = null;\n\n            public AuthorizeAadRole(AadRoles role)\n            {\n                this.Role = role;\n            }\n\n            // private class used to serialize the Graph REST API web response\n            private class MembershipResponse\n            {\n                public bool value;\n            }\n\n            public AadRoles Role { get; private set; }\n\n            // Generate a local dictionary for the role group ids configured as \n            // Mobile Service app settings\n            private void InitGroupIds()\n            {\n            }\n\n            // Use ADAL and the authentication app settings from the Mobile Service to \n            // get an AAD access token\n            private string GetAADToken()\n            {\n            }\n\n            // Given an AAD user id, check membership against the group associated with the role.\n            private bool CheckMembership(string memberId)\n            {\n            }\n\n            // Called when the user is attempting authorization\n            public override void OnAuthorization(HttpActionContext actionContext)\n            {\n            }\n        }\n\n\n\n8. 在 AuthorizeAadRole.cs 中，按如下所示更新 `AuthorizeAadRole` 类中的 `InitGroupIds` 方法。此方法会创建一个字典，以将组 ID 映射到每个角色。\n\n        private void InitGroupIds()\n        {\n            string groupId;\n            \n            if (services == null)\n                return;\n\n            if (!groupIds.ContainsKey((int)AadRoles.Sales))\n            {\n                if (services.Settings.TryGetValue(\"AAD_SALES_GROUP_ID\", out groupId))\n                {\n                    groupIds.Add((int)AadRoles.Sales, groupId);\n                }\n                else\n                    services.Log.Error(\"AAD_SALES_GROUP_ID app setting not found.\");\n            }\n        }\n\n\n9. 在 AuthorizeAadRole.cs 中，更新 `AuthorizeAadRole` 类中的 `GetAADToken` 方法。此方法使用存储在移动服务中的应用程序设置来获取从 ADAL 访问 AAD 的令牌。\n\n    >[AZURE.NOTE]默认情况下，ADAL for .NET 包含内存中令牌缓存，以帮助减轻 Active Directory 的额外网络流量。但是，你可以编写自己的缓存实现，或完全禁用缓存。有关详细信息，请参阅 [ADAL for .NET]。\n\n        // Use ADAL and the authentication app settings from the Mobile Service to get an AAD access token\n        private async Task<string> GetAADToken()\n        {\n            // Try to get the required AAD authentication app settings from the mobile service.  \n            if (!(services.Settings.TryGetValue(\"AAD_CLIENT_ID\", out clientid) &\n                  services.Settings.TryGetValue(\"AAD_CLIENT_KEY\", out clientkey) &\n                  services.Settings.TryGetValue(\"AAD_TENANT_DOMAIN\", out tenantdomain)))\n            {\n                services.Log.Error(\"GetAADToken() : Could not retrieve mobile service app settings.\");\n                return null;\n            }\n\n            ClientCredential clientCred = new ClientCredential(clientid, clientkey);\n            string authority = String.Format(CultureInfo.InvariantCulture, AadInstance, tenantdomain);\n            AuthenticationContext authContext = new AuthenticationContext(authority);\n            AuthenticationResult result = await authContext.AcquireTokenAsync(GraphResourceId, clientCred);\n\n            if (result != null)\n                token = result.AccessToken;\n            else\n                services.Log.Error(\"GetAADToken() : Failed to return a token.\");\n\n            return token;\n        }\n\n10. 在 AuthorizeAadRole.cs 中，更新 `AuthorizeAadRole` 类中的 `CheckMembership` 方法。此方法接收用户的对象 ID。然后，它使用 AAD Graph Rest API 来检查该对象 ID，以查看组的成员 ID 是否与 `AuthorizeAadRole` 类中选择的角色相关联。\n\n        private bool CheckMembership(string memberId)\n        {\n            bool membership = false;\n            string url = GraphResourceId + tenantdomain + \"/isMemberOf\" + APIVersion;\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);\n\n            // Use the Graph REST API to check group membership in the AAD\n            try\n            {\n                request.Method = \"POST\";\n                request.ContentType = \"application/json\";\n                request.Headers.Add(\"Authorization\", token);\n                using (var sw = new StreamWriter(request.GetRequestStream()))\n                {\n                    // Request body must have the group id and a member id to check for membership\n                    string body = String.Format(\"\"groupId\":\"{0}\",\"memberId\":\"{1}\"\",\n                        groupIds[(int)Role], memberId);\n                    sw.Write(\"{\" + body + \"}\");\n                }\n\n                WebResponse response = request.GetResponse();\n                StreamReader sr = new StreamReader(response.GetResponseStream());\n                string json = sr.ReadToEnd();\n                MembershipResponse membershipResponse = JsonConvert.DeserializeObject<MembershipResponse>(json);\n                membership = membershipResponse.value;\n            }\n            catch (Exception e)\n            {\n                services.Log.Error(\"OnAuthorization() exception : \" + e.Message);\n            }\n\n            return membership;\n        }\n\n\n11. 在 AuthorizeAadRole.cs 中，使用以下代码更新 `AuthorizeAadRole` 类中的 `OnAuthorization` 方法。此代码要求调用移动服务的用户已在 AAD 上完成身份验证。然后，此代码将获取用户的 AAD 对象 ID，检查与该角色对应的 Active Directory 组的成员资格。\n\n    >[AZURE.NOTE]你可以按名称查找 Active Directory 组。但是，在许多情况下，将组 ID 存储为移动服务应用程序设置是较好的做法。这是因为组名称很可能会更改，而 ID 会保持相同。\n\n        public override void OnAuthorization(HttpActionContext actionContext)\n        {\n            if (actionContext == null)\n            {\n                throw new ArgumentNullException(\"actionContext\");\n            }\n\n            services = new ApiServices(actionContext.ControllerContext.Configuration);\n\n            // Check whether we are running in a mode where local host access is allowed \n            // through without authentication.\n            if (!this.isInitialized)\n            {\n                HttpConfiguration config = actionContext.ControllerContext.Configuration;\n                this.isHosted = config.GetIsHosted();\n                this.isInitialized = true;\n            }\n\n            // No security when hosted locally\n            if (!this.isHosted && actionContext.RequestContext.IsLocal)\n            {\n                services.Log.Warn(\"AuthorizeAadRole: Local Hosting.\");\n                return;\n            }\n\n            ApiController controller = actionContext.ControllerContext.Controller as ApiController;\n            if (controller == null)\n            {\n                services.Log.Error(\"AuthorizeAadRole: No ApiController.\");\n            }\n\n            bool isAuthorized = false;\n            try\n            {\n                // Initialize a mapping for the group id to our enumerated type\n                InitGroupIds();\n\n                // Retrieve a AAD token from ADAL\n                GetAADToken();\n                if (token == null)\n            {\n                    services.Log.Error(\"AuthorizeAadRole: Failed to get an AAD access token.\");\n            }\n                else\n                {\n            // Check group membership to see if the user is part of the group that corresponds to the role\n                    if (!string.IsNullOrEmpty(groupIds[(int)Role]))\n            {\n                ServiceUser serviceUser = controller.User as ServiceUser;\n                if (serviceUser != null && serviceUser.Level == AuthorizationLevel.User)\n                {\n                    var idents = serviceUser.GetIdentitiesAsync().Result;\n                            AzureActiveDirectoryCredentials clientAadCredentials =\n                                idents.OfType<AzureActiveDirectoryCredentials>().FirstOrDefault();\n                    if (clientAadCredentials != null)\n                    {\n                                isAuthorized = CheckMembership(clientAadCredentials.ObjectId);\n                        }\n                    }\n                }\n            }\n            }\n            catch (Exception e)\n            {\n                services.Log.Error(e.Message);\n            }\n            finally\n            {\n                if (isAuthorized == false)\n            {\n                    services.Log.Error(\"Denying access\");\n\n                actionContext.Response = actionContext.Request\n                    .CreateErrorResponse(HttpStatusCode.Forbidden, \n                        \"User is not logged in or not a member of the required group\");\n            }\n        }\n        }\n\n12. 保存对 AuthorizeAadRole.cs 所做的更改。\n\n##将基于角色的访问检查添加到数据库操作\n\n1. 在 Visual Studio 中，展开移动服务项目中的 **Controllers** 文件夹。打开 TodoItemController.cs。\n\n2. 在 TodoItemController.cs 中，为包含自定义授权属性的 utilities 命名空间添加 `using` 语句。\n\n        using todolistService.Utilities;\n\n3. 在 TodoItemController.cs 中，可以根据检查访问权限的方式，将属性添加到控制器类或单个方法。如果你要让所有控制器操作根据相同的角色来检查访问权限，只需将属性添加到类。请按如下所示将属性添加到类，以测试本教程。\n\n        [AuthorizeAadRole(AadGroups.Sales)]\n        public class TodoItemController : TableController<TodoItem>\n\n    如果你只想要检查插入、更新和删除操作的访问权限，则应使用以下方式仅设置这些方法的属性。\n\n        // PATCH tables/TodoItem\n        [AuthorizeAadRole(AadGroups.Sales)]\n        public Task<TodoItem> PatchTodoItem(string id, Delta<TodoItem> patch)\n        {\n            return UpdateAsync(id, patch);\n        }\n\n        // POST tables/TodoItem\n        [AuthorizeAadRole(AadGroups.Sales)]\n        public async Task<IHttpActionResult> PostTodoItem(TodoItem item)\n        {\n            TodoItem current = await InsertAsync(item);\n            return CreatedAtRoute(\"Tables\", new { id = current.Id }, current);\n        }\n\n        // DELETE tables/TodoItem\n        [AuthorizeAadRole(AadGroups.Sales)]\n        public Task DeleteTodoItem(string id)\n        {\n            return DeleteAsync(id);\n        }\n\n\n4. 保存 TodoItemController.cs 并生成移动服务，以验证是否没有语法错误。\n5. 将移动服务发布到 Azure 帐户。\n\n\n##测试客户端的访问\n\n[AZURE.INCLUDE [mobile-services-aad-rbac-test-app](../includes/mobile-services-aad-rbac-test-app.md)]\n\n\n\n\n\n\n\n<!-- Images -->\n[0]: ./media/mobile-services-dotnet-backend-windows-store-dotnet-aad-rbac/add-authorize-aad-role-class.png\n\n<!-- URLs. -->\n[向应用程序添加身份验证]: /documentation/articles/mobile-services-dotnet-backend-windows-universal-dotnet-get-started-users\n[How to Register with the Azure Active Directory]: /documentation/articles/mobile-services-how-to-register-active-directory-authentication\n[Azure Management Portal]: https://manage.windowsazure.cn/\n[Directory Sync Scenarios]: http://msdn.microsoft.com/zh-cn/library/azure/jj573653.aspx\n[Store Server Scripts]: /documentation/articles/mobile-services-store-scripts-source-control\n[注册以使用 Azure Active Directory 登录名]: /documentation/articles/mobile-services-how-to-register-active-directory-authentication\n[Graph REST API]: http://msdn.microsoft.com/zh-cn/library/azure/hh974478.aspx\n[IsMemberOf]: http://msdn.microsoft.com/zh-cn/library/azure/dn151601.aspx\n[ADAL for .NET]: https://msdn.microsoft.com/zh-cn/library/azure/jj573266.aspx\n\n<!---HONumber=Mooncake_0118_2016-->"
}