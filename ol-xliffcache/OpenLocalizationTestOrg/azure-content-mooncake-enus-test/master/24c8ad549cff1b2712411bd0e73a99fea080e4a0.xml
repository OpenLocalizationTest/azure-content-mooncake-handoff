{
  "nodes": [
    {
      "content": "Azure 云服务和 ASP.NET 入门 | Azure",
      "pos": [
        27,
        56
      ]
    },
    {
      "content": "了解如何使用 ASP.NET MVC 和 Azure 创建多层应用程序。该应用程序运行在云服务中，带有 web 角色和辅助角色。它使用实体框架、SQL 数据库和 Azure 存储队列和 Blob。",
      "pos": [
        75,
        173
      ]
    },
    {
      "content": "Azure 云服务和 ASP.NET 入门",
      "pos": [
        411,
        432
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        436,
        452
      ]
    },
    {
      "content": "Node.js",
      "pos": [
        456,
        463
      ]
    },
    {
      "content": ".NET",
      "pos": [
        534,
        538
      ]
    },
    {
      "content": "概述",
      "pos": [
        603,
        605
      ]
    },
    {
      "pos": [
        607,
        1243
      ],
      "content": "本教程演示如何使用 ASP.NET MVC 前端创建多层.NET 应用程序，并将其部署到 <bpt id=\"p1\">[</bpt>Azure 云服务<ept id=\"p1\">](/documentation/articles/fundamentals-application-models/#CloudServices)</ept>。应用程序使用 <bpt id=\"p2\">[</bpt>Azure SQL 数据库<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/ee336279)</ept>、<bpt id=\"p3\">[</bpt>Azure Blob 服务<ept id=\"p3\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage)</ept>和 <bpt id=\"p4\">[</bpt>Azure 队列服务<ept id=\"p4\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)</ept>。你可以从 MSDN 代码库<bpt id=\"p5\">[</bpt>下载 Visual Studio 项目<ept id=\"p5\">](http://code.msdn.microsoft.com/Simple-Azure-Cloud-Service-e01df2e4)</ept>。"
    },
    {
      "content": "本教程介绍如何生成并本地运行应用程序、如何将其部署到 Azure 并在云中运行，以及最终如何从头构建。您可以从头构建然后进行测试，之后根据您的喜好部署步骤。",
      "pos": [
        1245,
        1323
      ]
    },
    {
      "content": "Contoso 广告应用程序",
      "pos": [
        1328,
        1342
      ]
    },
    {
      "content": "该应用程序是广告公告板。用户通过输入文本和上载图像创建一个广告。它们可以通过缩略图查看一个广告列表，当用户选择广告以查看详细信息时，它们可以查看完整尺寸的图像。",
      "pos": [
        1344,
        1424
      ]
    },
    {
      "content": "广告列表",
      "pos": [
        1428,
        1432
      ]
    },
    {
      "pos": [
        1487,
        1679
      ],
      "content": "应用程序使用<bpt id=\"p1\">[</bpt>以队列为中心的工作模式<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)</ept>来减轻创建缩略图到后端进程的 CPU 密集型工作。"
    },
    {
      "content": "替代体系结构： Web 应用和 Web 作业",
      "pos": [
        1684,
        1706
      ]
    },
    {
      "pos": [
        1708,
        2080
      ],
      "content": "本教程演示如何在 Azure 云服务中运行前端和后端。一种替代方法是在 <bpt id=\"p1\">[</bpt>Azure Web 应用<ept id=\"p1\">](/services/web-sites)</ept>中运行前端，并为后端使用 <bpt id=\"p2\">[</bpt>Web 作业<ept id=\"p2\">](/documentation/articles/websites-webjobs-resources)</ept>功能（目前以预览版提供）。有关如何使用 Web 作业的教程，请参阅 <bpt id=\"p3\">[</bpt>Azure WebJobs SDK 入门<ept id=\"p3\">](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)</ept>。有关如何选择最适合你方案的服务信息，请参阅 <bpt id=\"p4\">[</bpt>Azure Web 应用、云服务和虚拟机的比较<ept id=\"p4\">](/documentation/articles/choose-web-site-cloud-service-vm)</ept>。"
    },
    {
      "content": "学习内容",
      "pos": [
        2085,
        2089
      ]
    },
    {
      "content": "如何通过安装 Azure SDK 来让你的计算机可以进行 Azure 开发。",
      "pos": [
        2093,
        2131
      ]
    },
    {
      "content": "如何通过 ASP.NET MVC web 角色和辅助角色创建一个 Visual Studio 云服务项目。",
      "pos": [
        2134,
        2187
      ]
    },
    {
      "content": "如何使用 Azure 存储仿真程序测试本地云服务项目。",
      "pos": [
        2190,
        2217
      ]
    },
    {
      "content": "如何将云项目发布到 Azure 云服务并使用 Azure 存储帐户测试。",
      "pos": [
        2220,
        2256
      ]
    },
    {
      "content": "如何上传文件并将其存储在 Azure Blob 服务中。",
      "pos": [
        2259,
        2287
      ]
    },
    {
      "content": "如何将 Azure 队列服务用于各层之间的通信。",
      "pos": [
        2290,
        2314
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        2319,
        2323
      ]
    },
    {
      "pos": [
        2325,
        2724
      ],
      "content": "本教程假定你了解<bpt id=\"p1\">[</bpt>有关 Azure 云服务的基本概念<ept id=\"p1\">](/documentation/articles/fundamentals-application-models/#CloudServices)</ept>，例如 <bpt id=\"p2\">*</bpt>Web 角色<ept id=\"p2\">*</ept>和<bpt id=\"p3\">*</bpt>辅助角色<ept id=\"p3\">*</ept>术语。此外，还假设你知道如何处理 Visual Studio 中的 <bpt id=\"p4\">[</bpt>ASP.NET MVC<ept id=\"p4\">](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)</ept> 或 <bpt id=\"p5\">[</bpt>Web 窗体<ept id=\"p5\">](http://www.asp.net/web-forms/tutorials/aspnet-45/getting-started-with-aspnet-45-web-forms/introduction-and-overview)</ept>项目。示例应用程序使用 MVC，但在本教程的大部分也适用于 Web 窗体。"
    },
    {
      "pos": [
        2726,
        2806
      ],
      "content": "您可以本地运行该应用程序，无需订阅 Azure，但要将应用程序部署到云则需要订阅。如果你没有帐户，可以<bpt id=\"p1\">[</bpt>注册试用版<ept id=\"p1\">](/pricing/1rmb-trial)</ept>。"
    },
    {
      "content": "教程说明使用以下产品之一：",
      "pos": [
        2808,
        2821
      ]
    },
    {
      "content": "Visual Studio 2013",
      "pos": [
        2825,
        2843
      ]
    },
    {
      "content": "Visual Studio 2015",
      "pos": [
        2846,
        2864
      ]
    },
    {
      "content": "上述产品中，只要缺少其中任意一个，安装 Azure SDK 时就将自动安装 Visual Studio 2015。",
      "pos": [
        2866,
        2923
      ]
    },
    {
      "content": "应用程序体系结构",
      "pos": [
        2928,
        2936
      ]
    },
    {
      "content": "该应用程序将广告存储在 SQL 数据库中，通过使用实体框架 Code First 创建表和访问数据。对于每个广告，数据库存储两个 URL，一个用于完全尺寸的图像，一个用于缩略图。",
      "pos": [
        2938,
        3027
      ]
    },
    {
      "content": "广告表",
      "pos": [
        3031,
        3034
      ]
    },
    {
      "pos": [
        3092,
        3423
      ],
      "content": "当用户上载一个图像时，Web 角色中运行的前端在 <bpt id=\"p1\">[</bpt>Azure Blob<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage)</ept> 中存储图像，并将广告信息存储在带有指向 Blob 的 URL 的数据库中。同时，它将一条消息写入 Azure 队列。在辅助角色中定期运行的后端进程轮询队列是否有新消息。显示新消息时，辅助角色将创建该图像的缩略图，并为该广告更新缩略图 URL 数据库字段。下图演示了应用程序各部分之间如何交互："
    },
    {
      "content": "Contoso 广告体系结构",
      "pos": [
        3427,
        3441
      ]
    },
    {
      "content": "下载并运行已完成的解决方案",
      "pos": [
        3579,
        3592
      ]
    },
    {
      "pos": [
        3597,
        3682
      ],
      "content": "下载并解压缩<bpt id=\"p1\">[</bpt>已完成的解决方案<ept id=\"p1\">](http://code.msdn.microsoft.com/Simple-Azure-Cloud-Service-e01df2e4)</ept>。"
    },
    {
      "content": "启动 Visual Studio。",
      "pos": [
        3687,
        3704
      ]
    },
    {
      "content": "从“文件”菜单中，选择“打开项目”，导航到下载解决方案的位置，然后打开解决方案文件。",
      "pos": [
        3709,
        3751
      ]
    },
    {
      "content": "按 CTRL+SHIFT+B 生成解决方案。",
      "pos": [
        3756,
        3778
      ]
    },
    {
      "pos": [
        3784,
        3888
      ],
      "content": "默认情况下，Visual Studio 会自动还原 NuGet 包的内容，它未包括在 <bpt id=\"p1\">*</bpt>.zip<ept id=\"p1\">*</ept> 文件中。如果包未还原，请通过转到“管理解决方案的 NuGet 包”对话框并单击右上角的“还原”按钮手动安装。"
    },
    {
      "pos": [
        3893,
        3945
      ],
      "content": "在“解决方案资源管理器”中，确保 <bpt id=\"p1\">**</bpt>ContosoAdsCloudService<ept id=\"p1\">**</ept> 被选为启动项目。"
    },
    {
      "pos": [
        3950,
        4160
      ],
      "content": "如果你使用 Visual Studio 2015，请在 ContosoAdsWeb 项目的应用程序 <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> 文件以及 ContosoAdsCloudService 项目的 <bpt id=\"p2\">*</bpt>ServiceConfiguration.Local.cscfg<ept id=\"p2\">*</ept> 文件中，更改 SQL Server 连接字符串。对于每种情况，请将“(localdb)\\\\v11.0”更改为“(localdb)\\\\MSSQLLocalDB”。"
    },
    {
      "content": "按 Ctrl+F5 运行应用程序。",
      "pos": [
        4165,
        4182
      ]
    },
    {
      "pos": [
        4188,
        4391
      ],
      "content": "在本地运行云服务项目时，Visual Studio 会自动调用 Azure <bpt id=\"p1\">*</bpt>计算模拟器<ept id=\"p1\">*</ept>和 Azure <bpt id=\"p2\">*</bpt>存储模拟器<ept id=\"p2\">*</ept>。计算仿真程序使用您的计算机资源，以模拟 web 角色和辅助角色环境。存储模拟器使用 <bpt id=\"p3\">[</bpt>SQL Server Express LocalDB<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/hh510202.aspx)</ept> 数据库模拟 Azure 云存储。"
    },
    {
      "content": "首次运行云服务项目时，模拟器将会花费大约一分钟来启动。模拟器完成启动后，默认浏览器中会打开应用程序的主页。",
      "pos": [
        4397,
        4450
      ]
    },
    {
      "content": "Contoso 广告体系结构",
      "pos": [
        4458,
        4472
      ]
    },
    {
      "content": "单击“创建广告”。",
      "pos": [
        4530,
        4539
      ]
    },
    {
      "content": "输入一些测试数据并选择一个要上载的“.jpg”图像，然后单击“创建”。",
      "pos": [
        4544,
        4579
      ]
    },
    {
      "content": "创建页面",
      "pos": [
        4587,
        4591
      ]
    },
    {
      "content": "该应用程序转到索引页，但它不显示新广告的缩略图，因为该处理尚未发生。",
      "pos": [
        4652,
        4686
      ]
    },
    {
      "content": "稍等片刻，然后刷新该索引页查看缩略图。",
      "pos": [
        4691,
        4710
      ]
    },
    {
      "content": "索引页面",
      "pos": [
        4718,
        4722
      ]
    },
    {
      "content": "单击广告的“详细信息”查看实际尺寸的图像。",
      "pos": [
        4780,
        4801
      ]
    },
    {
      "content": "详细信息页",
      "pos": [
        4809,
        4814
      ]
    },
    {
      "content": "你已在本地计算机上完全运行应用程序，但未连接到云。存储模拟器将队列和 Blob 数据存储在 SQL Server Express LocalDB 数据库中，应用程序将广告数据存储在另一个 LocalDB 数据库中。在 Web 应用首次尝试访问它时，实体框架 Code First 自动创建广告数据库。",
      "pos": [
        4872,
        5022
      ]
    },
    {
      "content": "下一部分中，你要将解决方案配置为在云中运行时对队列、Blob 和应用程序数据库使用 Azure 云资源。如果想要继续在本地运行但使用云存储和数据库资源，你可以这样做；这只需要设置连接字符串即可。",
      "pos": [
        5024,
        5121
      ]
    },
    {
      "content": "将应用程序部署到 Azure",
      "pos": [
        5126,
        5140
      ]
    },
    {
      "content": "你将执行以下步骤，以便在云中运行应用程序：",
      "pos": [
        5142,
        5163
      ]
    },
    {
      "content": "创建 Azure 云服务。",
      "pos": [
        5167,
        5180
      ]
    },
    {
      "content": "创建 Azure SQL 数据库。",
      "pos": [
        5183,
        5200
      ]
    },
    {
      "content": "创建 Azure 存储帐户。",
      "pos": [
        5203,
        5217
      ]
    },
    {
      "content": "配置解决方案，以便在 Azure 中运行时使用你的 Azure SQL 数据库。",
      "pos": [
        5220,
        5260
      ]
    },
    {
      "content": "配置解决方案以便在 Azure 中运行时使用你的 Azure 存储帐户。",
      "pos": [
        5263,
        5299
      ]
    },
    {
      "content": "将项目部署到 Azure 云服务。",
      "pos": [
        5302,
        5319
      ]
    },
    {
      "content": "创建 Azure 云服务",
      "pos": [
        5325,
        5337
      ]
    },
    {
      "content": "Azure 云服务是该应用程序将运行的环境。",
      "pos": [
        5339,
        5361
      ]
    },
    {
      "pos": [
        5366,
        5419
      ],
      "content": "在浏览器中，打开 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">](http://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "单击“新建”&gt;“计算”&gt;“云服务”&gt;“快速创建”。",
      "pos": [
        5424,
        5449
      ]
    },
    {
      "content": "在 URL 输入框中，输入 URL 前缀。",
      "pos": [
        5454,
        5475
      ]
    },
    {
      "content": "此 URL 必须是唯一的。如果您选择的前缀已被其他人使用，将获得一条错误消息。",
      "pos": [
        5481,
        5520
      ]
    },
    {
      "content": "选择您要在其中部署该应用程序的区域。",
      "pos": [
        5525,
        5543
      ]
    },
    {
      "content": "此字段指定你的云服务将托管在哪个数据中心。对于生产应用程序，你可以选择离客户最近的区域。对于本教程，选择离您最近的区域。",
      "pos": [
        5549,
        5609
      ]
    },
    {
      "content": "单击“创建云服务”。",
      "pos": [
        5614,
        5624
      ]
    },
    {
      "content": "在下图中，使用 URL contosoads.chinacloudapp.cn 创建一个云服务。",
      "pos": [
        5630,
        5678
      ]
    },
    {
      "content": "新的云服务",
      "pos": [
        5686,
        5691
      ]
    },
    {
      "content": "创建 Azure SQL 数据库",
      "pos": [
        5751,
        5767
      ]
    },
    {
      "content": "在云中运行应用程序时，它将使用基于云的数据库。",
      "pos": [
        5769,
        5792
      ]
    },
    {
      "pos": [
        5797,
        5875
      ],
      "content": "在 Azure 经典门户中，单击“新建”&gt;“数据服务”&gt;“SQL 数据库”&gt;“快速创建”。<bpt id=\"p1\">[</bpt><ept id=\"p1\">](http://manage.windowsazure.cn)</ept>"
    },
    {
      "pos": [
        5880,
        5907
      ],
      "content": "在“数据库名称”框中，输入 <bpt id=\"p1\">*</bpt>contosoads<ept id=\"p1\">*</ept>。"
    },
    {
      "content": "从“服务器”下拉列表中选择“新建 SQL 数据库服务器”。",
      "pos": [
        5912,
        5941
      ]
    },
    {
      "content": "或者，如果你的订阅已有一台服务器，可从下拉列表中选择该服务器。",
      "pos": [
        5947,
        5978
      ]
    },
    {
      "pos": [
        5983,
        6005
      ],
      "content": "选择的<bpt id=\"p1\">**</bpt>区域<ept id=\"p1\">**</ept>与你为云服务所选择的相同。"
    },
    {
      "content": "当云服务和数据库位于不同的数据中心（不同区域）时，延迟将增加，并且您将支付带宽数据中心之外的费用。数据中心内的带宽是免费的。",
      "pos": [
        6011,
        6073
      ]
    },
    {
      "content": "输入管理员“登录名”和“密码”。",
      "pos": [
        6078,
        6094
      ]
    },
    {
      "content": "如果你选择了“新建 SQL 数据库服务器”，则在此处不要输入现有名称和密码。你应输入新的名称和密码，你现在定义的名称和密码将在你以后访问数据库时使用。如果你选择之前创建的服务器，系统将提示你已创建的管理用户帐户的密码。",
      "pos": [
        6100,
        6209
      ]
    },
    {
      "content": "单击“创建 SQL 数据库”。",
      "pos": [
        6214,
        6229
      ]
    },
    {
      "content": "新 SQL 数据库",
      "pos": [
        6237,
        6246
      ]
    },
    {
      "content": "Azure 完成创建数据库后，在门户的左窗格中单击“SQL 数据库”选项卡，然后单击新数据库的名称。",
      "pos": [
        6305,
        6355
      ]
    },
    {
      "content": "单击“仪表板”选项卡。",
      "pos": [
        6360,
        6371
      ]
    },
    {
      "content": "单击“管理允许的 IP 地址”。",
      "pos": [
        6376,
        6392
      ]
    },
    {
      "content": "在“允许的服务”下，将“Azure 服务”更改为“是”。",
      "pos": [
        6397,
        6425
      ]
    },
    {
      "content": "单击“保存”。",
      "pos": [
        6430,
        6437
      ]
    },
    {
      "content": "创建 Azure 存储帐户",
      "pos": [
        6443,
        6456
      ]
    },
    {
      "content": "Azure 存储帐户提供在云中存储队列和 Blob 数据的资源。",
      "pos": [
        6458,
        6490
      ]
    },
    {
      "content": "在实际应用程序中，您通常会为记录数据的应用程序数据创建单独的帐户，并且为生产数据的测试数据创建单独帐户。对于本教程，你将只使用一个帐户。",
      "pos": [
        6492,
        6560
      ]
    },
    {
      "pos": [
        6565,
        6638
      ],
      "content": "在 Azure 经典门户中，单击“新建”&gt;“数据服务”&gt;“存储”&gt;“快速创建”。<bpt id=\"p1\">[</bpt><ept id=\"p1\">](http://manage.windowsazure.cn)</ept>"
    },
    {
      "content": "在“URL”框中，输入 URL 前缀。",
      "pos": [
        6643,
        6662
      ]
    },
    {
      "content": "此前缀加上在框下看到的文本将是你的存储帐户的唯一 URL。如果其他人已使用您输入的前缀，您必须选择不同的前缀。",
      "pos": [
        6668,
        6723
      ]
    },
    {
      "content": "将“区域”下拉列表设置到为云服务选择的相同区域。",
      "pos": [
        6728,
        6752
      ]
    },
    {
      "content": "当云服务和存储帐户位于不同的数据中心（不同区域）时，延迟将增加，并且你需要为数据中心外的带宽付费。数据中心内的带宽是免费的。",
      "pos": [
        6758,
        6820
      ]
    },
    {
      "pos": [
        6826,
        6968
      ],
      "content": "Azure 地缘组实际上是一种机制，目的是最小化数据中心内不同资源之间的距离，这样可以降低延迟。本教程不使用地缘组。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>如何在 Azure 中创建地缘组<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/jj156209.aspx)</ept>。"
    },
    {
      "content": "将“复制”下拉列表设置为“本地冗余”。",
      "pos": [
        6973,
        6992
      ]
    },
    {
      "pos": [
        6998,
        7197
      ],
      "content": "为存储帐户启用地域复制时，会将存储内容复制到辅助数据中心，这样就能够在主要位置发生重大灾难时将故障转移到该位置。地域复制可能会产生额外的成本。对于测试和开发帐户，你通常不希望因为地域复制而付款。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>创建、管理或删除存储帐户<ept id=\"p1\">](/documentation/articles/storage-create-storage-account/#replication-options)</ept>。"
    },
    {
      "content": "单击“创建存储帐户”。",
      "pos": [
        7202,
        7213
      ]
    },
    {
      "content": "新的存储帐户",
      "pos": [
        7221,
        7227
      ]
    },
    {
      "pos": [
        7292,
        7347
      ],
      "content": "在图中，使用 URL“<ph id=\"ph1\">`contosoads.core.chinacloudapi.cn`</ph>”创建一个存储帐户。"
    },
    {
      "content": "配置解决方案，以便在 Azure 中运行时使用您的 Azure SQL 数据库",
      "pos": [
        7353,
        7392
      ]
    },
    {
      "content": "Web 项目和辅助角色项目自身具有数据库连接字符串，并且当应用程序在 Azure 运行时指向 Azure SQL 数据库。",
      "pos": [
        7394,
        7455
      ]
    },
    {
      "pos": [
        7457,
        7602
      ],
      "content": "你将为 Web 角色使用 <bpt id=\"p1\">[</bpt>Web.config 转换<ept id=\"p1\">](http://www.asp.net/mvc/tutorials/deployment/visual-studio-web-deployment/web-config-transformations)</ept>，为辅助角色使用云服务环境设置。"
    },
    {
      "pos": [
        7605,
        7808
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 在本部分和下一部分中，你将在项目文件中存储凭据。<bpt id=\"p1\">[</bpt>不要将敏感数据存储在公共源代码存储库中<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control#secrets)</ept>。"
    },
    {
      "pos": [
        7813,
        7931
      ],
      "content": "在 ContosoAdsWeb 项目中，为应用程序 <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> 文件打开 <bpt id=\"p2\">*</bpt>Web.Release.config<ept id=\"p2\">*</ept> 转换文件，删除包含 <ph id=\"ph1\">`&lt;connectionStrings&gt;`</ph> 元素的注释块，并在其原位置粘贴下面的代码。"
    },
    {
      "content": "保持文件打开进行编辑。",
      "pos": [
        8182,
        8193
      ]
    },
    {
      "pos": [
        8198,
        8296
      ],
      "content": "在 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">](http://manage.windowsazure.cn)</ept>中，依次单击左窗格中的“SQL 数据库”、你在本教程中创建的数据库、“仪表板”选项卡、“显示连接字符串”。"
    },
    {
      "content": "显示连接字符串",
      "pos": [
        8304,
        8311
      ]
    },
    {
      "content": "门户将显示连接字符串，其占位符用于输入密码。",
      "pos": [
        8372,
        8394
      ]
    },
    {
      "content": "连接字符串",
      "pos": [
        8402,
        8407
      ]
    },
    {
      "pos": [
        8472,
        8562
      ],
      "content": "在 <bpt id=\"p1\">*</bpt>Web.Release.config<ept id=\"p1\">*</ept> 转换文件中，删除 <ph id=\"ph1\">`{connectionstring}`</ph> 并将 Azure 经典门户中的 ADO.NET 连接字符串粘贴在其原位置。"
    },
    {
      "pos": [
        8567,
        8650
      ],
      "content": "在粘贴到 <bpt id=\"p1\">*</bpt>Web.Release.config<ept id=\"p1\">*</ept> 转换文件的连接字符串中，请用你为新的 SQL 数据库创建的密码替换 <ph id=\"ph1\">`{your_password_here}`</ph>。"
    },
    {
      "content": "保存文件。",
      "pos": [
        8655,
        8660
      ]
    },
    {
      "content": "选择并复制连接字符串，供在以下步骤中配置辅助角色项目的使用（不带周围的引号）。",
      "pos": [
        8665,
        8704
      ]
    },
    {
      "content": "在云服务项目的“角色”下的“解决方案资源管理器”中，右键单击“ContosoAdsWorker”并单击“属性”。",
      "pos": [
        8709,
        8765
      ]
    },
    {
      "content": "角色属性",
      "pos": [
        8773,
        8777
      ]
    },
    {
      "content": "单击“设置”选项卡。",
      "pos": [
        8851,
        8861
      ]
    },
    {
      "content": "将“服务配置”更改为“云”。",
      "pos": [
        8866,
        8880
      ]
    },
    {
      "pos": [
        8885,
        8950
      ],
      "content": "选择 <ph id=\"ph1\">`ContosoAdsDbConnectionString`</ph> 设置的“值”字段，然后粘贴你从本教程上一部分复制的连接字符串。"
    },
    {
      "content": "辅助角色的数据库连接字符串",
      "pos": [
        8958,
        8971
      ]
    },
    {
      "content": "保存所做更改。",
      "pos": [
        9035,
        9042
      ]
    },
    {
      "content": "配置解决方案以便在 Azure 中运行时使用您的 Azure 存储帐户",
      "pos": [
        9048,
        9083
      ]
    },
    {
      "content": "Web 角色项目和辅助角色项目的 azure 存储帐户连接字符串存储在云服务项目中的环境设置。对于每个项目，应用程序将在本地运行以及在云中运行时，没有使用一组单独的设置。您将更新用于 web 和辅助角色项目的云环境设置。",
      "pos": [
        9085,
        9195
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击“ContosoAdsCloudService”项目中“角色”下的“ContosoAdsWeb”，然后单击“属性”。",
      "pos": [
        9200,
        9276
      ]
    },
    {
      "content": "角色属性",
      "pos": [
        9284,
        9288
      ]
    },
    {
      "content": "单击“设置”选项卡。在“服务配置”下拉列表框中，选择“云”。",
      "pos": [
        9356,
        9386
      ]
    },
    {
      "content": "云配置",
      "pos": [
        9394,
        9397
      ]
    },
    {
      "pos": [
        9458,
        9544
      ],
      "content": "选择“StorageConnectionString”条目，你将看到一个省略号 (<bpt id=\"p1\">**</bpt>...<ept id=\"p1\">**</ept>) 按钮，位于行的右端。单击省略号按钮打开“创建存储帐户连接字符串”对话框。"
    },
    {
      "content": "打开连接字符串创建框",
      "pos": [
        9552,
        9562
      ]
    },
    {
      "content": "在“创建存储连接字符串”对话框中，单击“使用你的订阅进行连接”，选择你以前创建的存储帐户，然后单击“确定”。如尚未登录，将提示您输入 Azure 帐户凭据。",
      "pos": [
        9628,
        9706
      ]
    },
    {
      "content": "创建存储连接字符串",
      "pos": [
        9714,
        9723
      ]
    },
    {
      "content": "保存所做更改。",
      "pos": [
        9792,
        9799
      ]
    },
    {
      "pos": [
        9804,
        9922
      ],
      "content": "按照你所使用的针对 <ph id=\"ph1\">`StorageConnectionString`</ph> 连接字符串的相同过程，设置 <ph id=\"ph2\">`Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString`</ph> 连接字符串。"
    },
    {
      "content": "此连接字符串用于日志记录。",
      "pos": [
        9928,
        9941
      ]
    },
    {
      "pos": [
        9946,
        10030
      ],
      "content": "请按照用于 <bpt id=\"p1\">**</bpt>ContosoAdsWeb<ept id=\"p1\">**</ept> 角色的相同过程为 <bpt id=\"p2\">**</bpt>ContosoAdsWorker<ept id=\"p2\">**</ept> 角色设置两个连接字符串。不要忘记将“服务配置”设置为“云”。"
    },
    {
      "content": "已使用 Visual Studio 用户界面进行配置的角色环境设置存储在 ContosoAdsCloudService 项目的以下文件中：",
      "pos": [
        10032,
        10101
      ]
    },
    {
      "pos": [
        10105,
        10140
      ],
      "content": "<bpt id=\"p1\">*</bpt>ServiceDefinition.csdef<ept id=\"p1\">*</ept> - 定义设置名称。"
    },
    {
      "pos": [
        10143,
        10192
      ],
      "content": "<bpt id=\"p1\">*</bpt>ServiceConfiguration.Cloud.cscfg<ept id=\"p1\">*</ept> - 为云中运行的应用提供值。"
    },
    {
      "pos": [
        10195,
        10244
      ],
      "content": "<bpt id=\"p1\">*</bpt>ServiceConfiguration.Local.cscfg<ept id=\"p1\">*</ept> - 为本地运行的应用提供值。"
    },
    {
      "content": "例如，ServiceDefinition.csdef 包括以下定义：",
      "pos": [
        10246,
        10280
      ]
    },
    {
      "pos": [
        10459,
        10524
      ],
      "content": "<bpt id=\"p1\">*</bpt>ServiceConfiguration.Cloud.cscfg<ept id=\"p1\">*</ept> 文件包括你为 Visual Studio 中的设置输入的值。"
    },
    {
      "pos": [
        10952,
        11038
      ],
      "content": "<ph id=\"ph1\">`&lt;Instances&gt;`</ph> 设置指定 Azure 将在其上运行辅助角色代码的虚拟机的数量。<bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#next-steps)</ept>部分包括有关向外缩放云服务的详细信息的链接。"
    },
    {
      "content": "将项目部署到 Azure",
      "pos": [
        11045,
        11057
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击“ContosoAdsCloudService”云项目并选择“发布”。",
      "pos": [
        11063,
        11116
      ]
    },
    {
      "content": "发布菜单",
      "pos": [
        11124,
        11128
      ]
    },
    {
      "content": "在“发布 Azure 应用程序”向导的“登录”步骤中，单击“下一步”。",
      "pos": [
        11189,
        11224
      ]
    },
    {
      "content": "登录步骤",
      "pos": [
        11232,
        11236
      ]
    },
    {
      "content": "在向导的“设置”步骤中，单击“下一步”。",
      "pos": [
        11299,
        11319
      ]
    },
    {
      "content": "设置步骤",
      "pos": [
        11327,
        11331
      ]
    },
    {
      "pos": [
        11397,
        11505
      ],
      "content": "本教程可以使用“高级”选项卡中的默认设置。有关高级选项卡的信息，请参阅<bpt id=\"p1\">[</bpt>发布 Azure 应用程序向导<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/hh535756.aspx)</ept>。"
    },
    {
      "content": "在“摘要”步骤中，单击“发布”。",
      "pos": [
        11510,
        11526
      ]
    },
    {
      "content": "摘要步骤",
      "pos": [
        11534,
        11538
      ]
    },
    {
      "content": "“Azure 活动日志”窗口将在 Visual Studio 中打开。",
      "pos": [
        11602,
        11637
      ]
    },
    {
      "content": "单击右箭头图标以展开部署详细信息。",
      "pos": [
        11642,
        11659
      ]
    },
    {
      "content": "部署可能需要 5 分钟或更长时间。",
      "pos": [
        11665,
        11682
      ]
    },
    {
      "content": "Azure 活动日志窗口",
      "pos": [
        11690,
        11702
      ]
    },
    {
      "content": "当部署状态为完成时，单击“Web 应用 URL”以启动应用程序。",
      "pos": [
        11760,
        11792
      ]
    },
    {
      "content": "就像在本地运行应用程序一样，现在可以通过创建、查看和编辑一些广告测试应用程序。",
      "pos": [
        11797,
        11836
      ]
    },
    {
      "pos": [
        11839,
        12085
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 完成测试后，删除或停止云服务。即使你不使用云服务，也会产生费用，因为要为它保留虚拟机资源。如果保持运行云服务，找到你 URL 的任何人都可以创建和查看广告。在 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">](http://manage.windowsazure.cn)</ept>中，转到云服务的“仪表板”选项卡，然后单击页面底部的“删除”按钮。如果你只是想要暂时防止其他人访问站点，请单击“停止”。在这种情况下，会继续产生费用。当你不再需要 SQL 数据库和存储帐户时，可以遵循类似的过程将其删除。"
    },
    {
      "content": "从头开始创建应用程序",
      "pos": [
        12090,
        12100
      ]
    },
    {
      "pos": [
        12102,
        12213
      ],
      "content": "如果你尚未下载<bpt id=\"p1\">[</bpt>已完成的应用程序<ept id=\"p1\">](http://code.msdn.microsoft.com/Simple-Azure-Cloud-Service-e01df2e4)</ept>，现在请下载。你要将文件从下载的项目复制到新的项目。"
    },
    {
      "content": "创建 Contoso 广告应用程序涉及以下步骤：",
      "pos": [
        12215,
        12239
      ]
    },
    {
      "content": "创建云服务 Visual Studio 解决方案。",
      "pos": [
        12243,
        12268
      ]
    },
    {
      "content": "更新和添加 NuGet 包。",
      "pos": [
        12271,
        12285
      ]
    },
    {
      "content": "设置项目引用。",
      "pos": [
        12288,
        12295
      ]
    },
    {
      "content": "配置连接字符串。",
      "pos": [
        12298,
        12306
      ]
    },
    {
      "content": "添加代码文件。",
      "pos": [
        12309,
        12316
      ]
    },
    {
      "content": "创建该解决方案后，你将审核对于云服务项目和 Azure blob 和队列唯一的代码。",
      "pos": [
        12318,
        12360
      ]
    },
    {
      "content": "创建云服务 Visual Studio 解决方案",
      "pos": [
        12366,
        12390
      ]
    },
    {
      "content": "在 Visual Studio 中，从“文件”菜单中选择“新建项目”。",
      "pos": [
        12395,
        12430
      ]
    },
    {
      "content": "在“新建项目”对话框的左窗格中，展开“Visual C#”，选择“云”模板，然后选择“Azure 云服务”模板。",
      "pos": [
        12435,
        12491
      ]
    },
    {
      "content": "将项目和解决方案命名为 ContosoAdsCloudService，然后单击“确定”。",
      "pos": [
        12496,
        12540
      ]
    },
    {
      "content": "新建项目",
      "pos": [
        12548,
        12552
      ]
    },
    {
      "content": "在“新建 Azure 云服务”对话框中，添加一个 Web 角色和辅助角色。将 web 角色命名为 ContosoAdsWeb，并将辅助角色命名为 ContosoAdsWorker。（使用右侧窗格中的铅笔图标更改这些角色的默认名称。）",
      "pos": [
        12616,
        12732
      ]
    },
    {
      "content": "新建云服务项目",
      "pos": [
        12740,
        12747
      ]
    },
    {
      "content": "看到 Web 角色的“新建 ASP.NET 项目”对话框时，选择 MVC 模板中，然后单击“更改身份验证”。",
      "pos": [
        12810,
        12864
      ]
    },
    {
      "content": "更改身份验证",
      "pos": [
        12872,
        12878
      ]
    },
    {
      "content": "在“更改身份验证”对话框中，选择“无身份验证”，然后单击“确定”。",
      "pos": [
        12939,
        12972
      ]
    },
    {
      "content": "无身份验证",
      "pos": [
        12980,
        12985
      ]
    },
    {
      "content": "在“新建 ASP.NET 项目”对话框中，单击“确定”。",
      "pos": [
        13045,
        13073
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击该解决方案（而不是其中某个项目），然后选择“添加 - 新建项目”。",
      "pos": [
        13078,
        13129
      ]
    },
    {
      "content": "在“添加新项目”对话框中，选择左窗格中“Visual C#”下面的“Windows”，然后单击“类库”模板。",
      "pos": [
        13135,
        13189
      ]
    },
    {
      "pos": [
        13195,
        13230
      ],
      "content": "将项目命名为 <bpt id=\"p1\">*</bpt>ContosoAdsCommon<ept id=\"p1\">*</ept>，然后单击“确定”。"
    },
    {
      "content": "您需要从 web 和辅助角色项目引用实体框架上下文和数据模型。作为一种替代方法，您可以在 web 角色项目中定义与 EF 相关的类，并从辅助角色项目中引用该项目。但是，之后你的辅助角色项目将引用它不需要的 Web 程序集。",
      "pos": [
        13236,
        13347
      ]
    },
    {
      "content": "更新和添加 NuGet 包",
      "pos": [
        13353,
        13366
      ]
    },
    {
      "content": "打开解决方案的“管理 NuGet 包”对话框。",
      "pos": [
        13372,
        13395
      ]
    },
    {
      "content": "在窗口顶部，选择“更新”。",
      "pos": [
        13401,
        13414
      ]
    },
    {
      "pos": [
        13420,
        13493
      ],
      "content": "查找 <bpt id=\"p1\">*</bpt>WindowsAzure.Storage<ept id=\"p1\">*</ept> 包，如果它在列表中，请选择它并选择要在其中更新它的 Web 项目和辅助项目，然后单击“更新”。"
    },
    {
      "content": "存储客户端库更新频率高于 Visual Studio 项目模板，因此您通常会发现该版本中新创建的计划需求需要更新。",
      "pos": [
        13499,
        13556
      ]
    },
    {
      "content": "在窗口顶部，选择“浏览”。",
      "pos": [
        13562,
        13575
      ]
    },
    {
      "pos": [
        13581,
        13624
      ],
      "content": "找到 <bpt id=\"p1\">*</bpt>EntityFramework<ept id=\"p1\">*</ept> NuGet 包，并将其安装在所有三个项目中。"
    },
    {
      "pos": [
        13630,
        13702
      ],
      "content": "查找 <bpt id=\"p1\">*</bpt>Microsoft.WindowsAzure.ConfigurationManager<ept id=\"p1\">*</ept> NuGet 包，然后将它安装在辅助角色项目中。"
    },
    {
      "content": "设置项目引用",
      "pos": [
        13708,
        13714
      ]
    },
    {
      "pos": [
        13720,
        13871
      ],
      "content": "在 ContosoAdsWeb 项目中，设置对 ContosoAdsCommon 项目的引用。右键单击 ContosoAdsWeb 项目中，然后单击“引用”&gt;“添加引用”。在“引用管理器”对话框中，选择左窗格中的“解决方案 - 项目”，选择 <bpt id=\"p1\">**</bpt>ContosoAdsCommon<ept id=\"p1\">**</ept>，然后单击“确定”。"
    },
    {
      "content": "在 ContosoAdsWorker 项目中，设置对 ContosoAdsCommon 项目的引用。",
      "pos": [
        13877,
        13927
      ]
    },
    {
      "content": "ContosoAdsCommon 将包含实体框架数据模型和上下文类，将在前端和后端使用。",
      "pos": [
        13933,
        13977
      ]
    },
    {
      "pos": [
        13983,
        14031
      ],
      "content": "在 ContosoAdsWorker 项目中，设置对 <ph id=\"ph1\">`System.Drawing`</ph> 的引用。"
    },
    {
      "content": "后端使用此程序集将图像转换为缩略图。",
      "pos": [
        14037,
        14055
      ]
    },
    {
      "content": "配置连接字符串",
      "pos": [
        14061,
        14068
      ]
    },
    {
      "content": "在本部分中，您将为本地测试配置 Azure 存储和 SQL 连接字符串。本教程前面的部署说明解释如何当应用程序在云中运行时设置连接字符串。",
      "pos": [
        14070,
        14139
      ]
    },
    {
      "pos": [
        14144,
        14237
      ],
      "content": "在 ContosoAdsWeb 项目中，打开应用程序 Web.config 文件，并在 <ph id=\"ph1\">`configSections`</ph> 元素后面插入以下 <ph id=\"ph2\">`connectionStrings`</ph> 元素。"
    },
    {
      "content": "如果你使用的是 Visual Studio 2015，请将“v11.0”替换为“MSSQLLocalDB”。",
      "pos": [
        14514,
        14568
      ]
    },
    {
      "content": "保存所做更改。",
      "pos": [
        14573,
        14580
      ]
    },
    {
      "content": "在 ContosoAdsCloudService 项目中，右键单击“角色”下的 ContosoAdsWeb，然后单击“属性”。",
      "pos": [
        14585,
        14648
      ]
    },
    {
      "content": "角色属性",
      "pos": [
        14656,
        14660
      ]
    },
    {
      "content": "在“ContosAdsWeb 角色”属性窗口中，单击“设置”选项卡，然后单击“添加设置”。",
      "pos": [
        14728,
        14773
      ]
    },
    {
      "content": "将“服务配置”保留设置为“所有配置”。",
      "pos": [
        14779,
        14798
      ]
    },
    {
      "pos": [
        14803,
        14903
      ],
      "content": "添加名为 <bpt id=\"p1\">*</bpt>StorageConnectionString<ept id=\"p1\">*</ept> 的新设置。将“类型”设置为“ConnectionString”，并将“值”设置为“UseDevelopmentStorage=true”。"
    },
    {
      "content": "新连接字符串",
      "pos": [
        14911,
        14917
      ]
    },
    {
      "content": "保存所做更改。",
      "pos": [
        14976,
        14983
      ]
    },
    {
      "content": "按照相同的过程在 ContosoAdsWorker 角色属性中添加存储连接字符串。",
      "pos": [
        14988,
        15029
      ]
    },
    {
      "content": "还是在“ContosoAdsWorker [角色]”属性窗口中，添加另一个连接字符串：",
      "pos": [
        15034,
        15077
      ]
    },
    {
      "content": "名称：ContosoAdsDbConnectionString",
      "pos": [
        15085,
        15116
      ]
    },
    {
      "content": "类型：字符串",
      "pos": [
        15123,
        15129
      ]
    },
    {
      "content": "值：粘贴用于 Web 角色项目的相同连接字符串。（以下示例适用于 Visual Studio 2013；如果你使用 Visual Studio 2015 并想要复制此示例，请记得更改数据源。）",
      "pos": [
        15136,
        15232
      ]
    },
    {
      "content": "添加代码文件",
      "pos": [
        15365,
        15371
      ]
    },
    {
      "content": "本部分中，您将代码将文件从已下载的解决方案复制到新的解决方案。以下各节将显示并解释此代码的关键部分。",
      "pos": [
        15373,
        15423
      ]
    },
    {
      "content": "要将文件添加到某个项目或文件夹，请右键单击该项目或文件夹，然后单击“添加”&gt;“现有项”。选择所需的文件，然后单击“添加”。如果询问你是否想要替换现有文件，请单击“是”。",
      "pos": [
        15425,
        15509
      ]
    },
    {
      "pos": [
        15514,
        15607
      ],
      "content": "在 ContosoAdsCommon 项目中，删除 <bpt id=\"p1\">*</bpt>Class1.cs<ept id=\"p1\">*</ept> 文件，并在其原位置添加来自下载项目的 <bpt id=\"p2\">*</bpt>Ad.cs<ept id=\"p2\">*</ept> 和 <bpt id=\"p3\">*</bpt>ContosoAdscontext.cs<ept id=\"p3\">*</ept> 文件。"
    },
    {
      "content": "在 ContosoAdsWeb 项目中，从下载的项目添加以下文件。",
      "pos": [
        15612,
        15645
      ]
    },
    {
      "pos": [
        15652,
        15669
      ],
      "content": "<bpt id=\"p1\">*</bpt>Global.asax.cs<ept id=\"p1\">*</ept>。"
    },
    {
      "pos": [
        15678,
        15725
      ],
      "content": "在 <bpt id=\"p1\">*</bpt>Views/Shared<ept id=\"p1\">*</ept> 文件夹中：<ph id=\"ph1\">&lt;em&gt;</ph>\\_Layout.cshtml<ph id=\"ph2\">&lt;/em&gt;</ph>。"
    },
    {
      "pos": [
        15732,
        15767
      ],
      "content": "在 <bpt id=\"p1\">*</bpt>Views/Home<ept id=\"p1\">*</ept> 文件夹中：<bpt id=\"p2\">*</bpt>Index.cshtml<ept id=\"p2\">*</ept>。"
    },
    {
      "pos": [
        15774,
        15813
      ],
      "content": "在 <bpt id=\"p1\">*</bpt>Controllers<ept id=\"p1\">*</ept> 文件夹中：<bpt id=\"p2\">*</bpt>AdController.cs<ept id=\"p2\">*</ept>。"
    },
    {
      "pos": [
        15820,
        15864
      ],
      "content": "在 <bpt id=\"p1\">*</bpt>Views/Ad<ept id=\"p1\">*</ept> 文件夹（首先创建该文件夹）中：五个 <bpt id=\"p2\">*</bpt>.cshtml<ept id=\"p2\">*</ept> 文件。"
    },
    {
      "pos": [
        15869,
        15917
      ],
      "content": "在 ContosoAdsWorker 项目中，从下载的项目添加 <bpt id=\"p1\">*</bpt>WorkerRole.cs<ept id=\"p1\">*</ept>。"
    },
    {
      "content": "现在，可以按照前面教程中的说明生成并运行该应用程序，并且该应用程序将使用本地数据库和存储仿真程序资源。",
      "pos": [
        15919,
        15970
      ]
    },
    {
      "content": "以下部分介绍与使用 Azure 环境、Blob 和队列相关的代码。本教程未说明如何使用基架创建 MVC 控制器和视图，如何编写适用于 SQL Server 数据库的实体框架代码，或者在 ASP.NET 4.5 中的异步编程基础知识。有关这些主题的信息，请参阅以下资源：",
      "pos": [
        15972,
        16106
      ]
    },
    {
      "content": "MVC 5 入门",
      "pos": [
        16111,
        16119
      ]
    },
    {
      "content": "EF 6 和 MVC 5 入门",
      "pos": [
        16193,
        16208
      ]
    },
    {
      "pos": [
        16280,
        16458
      ],
      "content": "<bpt id=\"p1\">[</bpt>.NET 4.5 中的异步编程简介<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/web-development-best-practices#async)</ept>。"
    },
    {
      "content": "ContosoAdsCommon - Ad.cs",
      "pos": [
        16464,
        16488
      ]
    },
    {
      "content": "Ad.cs 文件为 ad 类别定义一个枚举，为 ad 信息定义一个 POCO 实体类。",
      "pos": [
        16490,
        16533
      ]
    },
    {
      "content": "ContosoAdsCommon - ContosoAdsContext.cs",
      "pos": [
        17652,
        17691
      ]
    },
    {
      "content": "ContosoAdsContext 类指定 DbSet 集合中使用的 Ad 类，实体框架将存储在 SQL 数据库中。",
      "pos": [
        17693,
        17751
      ]
    },
    {
      "content": "类具有两个构造函数。其中第一个由 web 项目使用，并指定存储在 Web.config 文件中的连接字符串的名称。第二个构造函数允许你在实际的连接字符串中传递。程序需要辅助角色项目，因为它没有 Web.config 文件。你以前看到存储此连接字符串的位置，并且稍后你将看到连接字符串在实例化 DbContext 类时代码如何检索它。",
      "pos": [
        18110,
        18276
      ]
    },
    {
      "content": "ContosoAdsWeb - Global.asax.cs",
      "pos": [
        18282,
        18312
      ]
    },
    {
      "pos": [
        18314,
        18431
      ],
      "content": "从 <ph id=\"ph1\">`Application_Start`</ph> 方法调用的代码创建<bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept> Blob 容器和<bpt id=\"p2\">*</bpt>图像<ept id=\"p2\">*</ept>队列（如果它们尚不存在）。这确保只要您开始使用新的存储帐户，或在新计算机上开始使用存储仿真程序时，将自动创建所需的 Blob 容器和队列。"
    },
    {
      "pos": [
        18433,
        18474
      ],
      "content": "此代码通过使用来自 <bpt id=\"p1\">*</bpt>.cscfg<ept id=\"p1\">*</ept> 文件的存储连接字符串获取存储帐户的访问权限。"
    },
    {
      "pos": [
        18619,
        18744
      ],
      "content": "然后，它获取对<bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept> Blob 容器的引用，创建尚不存在的容器，并在新容器上设置访问权限。默认情况下，新容器只允许带存储帐户凭据的客户端访问 Blob。 Web 应用需要 Blob 是公共的，以便它可以使用指向图像 Blob 的 Url 显示图像。"
    },
    {
      "pos": [
        19163,
        19200
      ],
      "content": "类似代码获取对<bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept>队列的引用并创建一个新队列。这种情况不需要权限更改。"
    },
    {
      "content": "ContosoAdsWeb - \\_Layout.cshtml",
      "pos": [
        19395,
        19426
      ]
    },
    {
      "pos": [
        19428,
        19473
      ],
      "content": "<bpt id=\"p1\">*</bpt>\\_Layout.cshtml<ept id=\"p1\">*</ept> 文件设置页眉和页脚中的应用程序，并创建“广告”菜单项。"
    },
    {
      "content": "ContosoAdsWeb - Views\\\\Home\\\\Index.cshtml",
      "pos": [
        19479,
        19520
      ]
    },
    {
      "pos": [
        19522,
        19605
      ],
      "content": "<bpt id=\"p1\">*</bpt>Views\\\\Home\\\\Index.cshtml<ept id=\"p1\">*</ept> 文件在主页上显示类别链接。链接将查询字符串变量中的 <ph id=\"ph1\">`Category`</ph> 枚举的整数值传递到“广告索引”页面。"
    },
    {
      "content": "ContosoAdsWeb - AdController.cs",
      "pos": [
        20010,
        20041
      ]
    },
    {
      "pos": [
        20043,
        20139
      ],
      "content": "在 <bpt id=\"p1\">*</bpt>AdController.cs<ept id=\"p1\">*</ept> 文件中，构造函数调用 <ph id=\"ph1\">`InitializeStorage`</ph> 方法来创建 Azure 存储客户端库对象，它提供一个用于处理 Blob 和队列的 API。"
    },
    {
      "pos": [
        20141,
        20452
      ],
      "content": "然后，代码获取对<bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept> Blob 容器的引用，正如你之前在 <bpt id=\"p2\">*</bpt>Global.asax.cs<ept id=\"p2\">*</ept> 中看到的。在执行该操作时，它设置适用于 Web 应用程序的默认<bpt id=\"p3\">[</bpt>重试策略<ept id=\"p3\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/transient-fault-handling)</ept>。对于超过暂时性故障反复重试超过一分钟的 Web 应用程序，默认指数回退重试策略将其可能挂起。此处指定的重试策略将在每次尝试后等待 3 秒，最多可尝试 3 次。"
    },
    {
      "pos": [
        20694,
        20711
      ],
      "content": "类似代码获取对<bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept>队列的引用。"
    },
    {
      "pos": [
        20958,
        21157
      ],
      "content": "大部分控制器代码通常用于使用 DbContext 类的实体框架数据模型。例外情况是 HttpPost <ph id=\"ph1\">`Create`</ph> 方法，它上载文件并将其保存在 Blob 存储中。模型联编程序为该方法提供一个 <bpt id=\"p1\">[</bpt>HttpPostedFileBase<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/system.web.httppostedfilebase.aspx)</ept> 对象。"
    },
    {
      "content": "如果用户选择要上载的文件，则代码上载该文件，将其保存在 Blob 中，并使用指向 Blob 的 URL 更新广告数据库记录。",
      "pos": [
        21382,
        21444
      ]
    },
    {
      "pos": [
        21637,
        21721
      ],
      "content": "执行上载的代码位于 <ph id=\"ph1\">`UploadAndSaveBlobAsync`</ph> 方法中。它将创建 Blob 的 GUID 名称，上载和保存该文件，并将引用返回已保存的 Blob。"
    },
    {
      "pos": [
        22213,
        22282
      ],
      "content": "之后 HttpPost <ph id=\"ph1\">`Create`</ph> 方法上载 Blob 并更新数据库，它会创建队列消息，以通知后端进程图像已准备好转换为一个缩略图。"
    },
    {
      "pos": [
        22462,
        22523
      ],
      "content": "HttpPost <ph id=\"ph1\">`Edit`</ph> 方法的代码和它类似，不同之处在于如果用户选择新图像文件，则必须删除已存在的任何 blob。"
    },
    {
      "content": "以下示例演示了当你删除广告时删除 Blob 的代码：",
      "pos": [
        22768,
        22794
      ]
    },
    {
      "content": "ContosoAdsWeb - Views\\\\Ad\\\\Index.cshtml 和 Details.cshtml",
      "pos": [
        23559,
        23615
      ]
    },
    {
      "pos": [
        23617,
        23649
      ],
      "content": "<bpt id=\"p1\">*</bpt>Index.cshtml<ept id=\"p1\">*</ept> 文件显示带有其他广告数据的缩略图。"
    },
    {
      "pos": [
        23704,
        23733
      ],
      "content": "<bpt id=\"p1\">*</bpt>Details.cshtml<ept id=\"p1\">*</ept> 文件显示完全尺寸的图像。"
    },
    {
      "content": "ContosoAdsWeb - Views\\\\Ad\\\\Create.cshtml 和 Edit.cshtml",
      "pos": [
        23788,
        23842
      ]
    },
    {
      "pos": [
        23844,
        23917
      ],
      "content": "<bpt id=\"p1\">*</bpt>Create.cshtml<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>Edit.cshtml<ept id=\"p2\">*</ept> 文件指定窗体编码，允许控制器获取 <ph id=\"ph1\">`HttpPostedFileBase`</ph> 对象。"
    },
    {
      "pos": [
        24026,
        24053
      ],
      "content": "<ph id=\"ph1\">`&lt;input&gt;`</ph> 元素通知浏览器提供文件选择对话框。"
    },
    {
      "content": "ContosoAdsWorker - WorkerRole.cs - OnStart 方法",
      "pos": [
        24156,
        24201
      ]
    },
    {
      "pos": [
        24203,
        24288
      ],
      "content": "Azure 辅助角色环境在辅助角色启动时调用 <ph id=\"ph1\">`WorkerRole`</ph> 类中的 <ph id=\"ph2\">`OnStart`</ph> 方法，并且它在 <ph id=\"ph3\">`OnStart`</ph> 方法结束时调用 <ph id=\"ph4\">`Run`</ph> 方法。"
    },
    {
      "pos": [
        24290,
        24385
      ],
      "content": "<ph id=\"ph1\">`OnStart`</ph> 方法从 <bpt id=\"p1\">*</bpt>.cscfg<ept id=\"p1\">*</ept> 文件获取数据库连接字符串，并将其传递给实体框架 DbContext 类。在默认情况下使用 SQLClient 提供程序，因此不需要指定提供程序。"
    },
    {
      "pos": [
        24535,
        24622
      ],
      "content": "之后，该方法获取对存储帐户的引用，并创建 blob 容器和队列（如果它们不存在）。此代码类似于你已在 web 角色 <ph id=\"ph1\">`Application_Start`</ph> 方法中看到的内容。"
    },
    {
      "content": "ContosoAdsWorker - WorkerRole.cs - Run method",
      "pos": [
        24628,
        24673
      ]
    },
    {
      "pos": [
        24675,
        24740
      ],
      "content": "<ph id=\"ph1\">`Run`</ph> 方法完成其初始化工作时调用 <ph id=\"ph2\">`OnStart`</ph> 方法。该方法执行监视新队列消息的一个无限循环，并在它们到达时进行处理。"
    },
    {
      "content": "循环每次迭代后，如果不找到任何队列消息，该程序休眠一秒钟。此举防止辅助角色导致过多的 CPU 时间和存储事务成本。Microsoft 客户顾问团队讲过一个故事，一位开发人员忘记此操作，部署到生产环境，并去度假了。当他回来时，他的监督费用超过了度假费用。",
      "pos": [
        25570,
        25696
      ]
    },
    {
      "pos": [
        25698,
        25816
      ],
      "content": "有时队列消息的内容将在处理过程中导致错误。这称为<bpt id=\"p1\">*</bpt>有害消息<ept id=\"p1\">*</ept>，并且如果你只记录了一个错误并重启循环，则可能无休止地尝试处理该消息。因此，捕获块包括 if 语句检查应用程序尝试处理当前消息的次数，如果已超过 5 次，将从队列中删除该消息。"
    },
    {
      "pos": [
        25818,
        25850
      ],
      "content": "找到队列消息时调用 <ph id=\"ph1\">`ProcessQueueMessage`</ph>。"
    },
    {
      "content": "此代码读取数据库以获取图像 URL、将图像转换为一个缩略图、在 blob 中保存缩略图、用缩略图 blob URL 更新数据库并删除队列消息。",
      "pos": [
        26906,
        26977
      ]
    },
    {
      "pos": [
        26980,
        27426
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 为简单起见，<ph id=\"ph2\">`ConvertImageToThumbnailJPG`</ph> 方法中的代码使用 System.Drawing 命名空间中的类。但是，此命名空间中的类已设计用于 Windows 窗体。不支持在 Windows 或 ASP.NET 服务中使用。有关图像处理选项的详细信息，请参阅<bpt id=\"p1\">[</bpt>动态图像生成<ept id=\"p1\">](http://www.hanselman.com/blog/BackToBasicsDynamicImageGenerationASPNETControllersRoutingIHttpHandlersAndRunAllManagedModulesForAllRequests.aspx)</ept>和<bpt id=\"p2\">[</bpt>深入学习图像大小调整<ept id=\"p2\">](http://www.hanselminutes.com/313/deep-inside-image-resizing-and-scaling-with-aspnet-and-iis-with-imageresizingnet-author-na)</ept>。"
    },
    {
      "content": "故障排除",
      "pos": [
        27431,
        27435
      ]
    },
    {
      "content": "当您按本教程中的说明操作时，如果出现异常现象，请参考如下常见错误信息和解决方法。",
      "pos": [
        27437,
        27477
      ]
    },
    {
      "content": "ServiceRuntime.RoleEnvironmentException",
      "pos": [
        27483,
        27522
      ]
    },
    {
      "pos": [
        27524,
        27670
      ],
      "content": "在 Azure 中运行应用程序或使用 Azure 计算模拟器本地运行时，<ph id=\"ph1\">`RoleEnvironment`</ph> 对象由 Azure 提供。如果您在本地运行时收到此错误，请确保您已将 ContosoAdsCloudService 项目设为启动项目。这将项目设置为使用 Azure 计算仿真程序运行。"
    },
    {
      "pos": [
        27672,
        27918
      ],
      "content": "应用程序使用 Azure RoleEnvironment 的内容之一是获取 <bpt id=\"p1\">*</bpt>.cscfg<ept id=\"p1\">*</ept> 文件中存储的连接字符串值，所以此异常的另一个原因是丢失连接字符串。确保在 ContosoAdsWeb 项目中为云和本地配置创建 StorageConnectionString 设置，并且您将在 ContosoAdsWorker 项目中为两个配置创建两个连接字符串。如果为整个解决方案中的 StorageConnectionString 进行<bpt id=\"p2\">**</bpt>查找全部<ept id=\"p2\">**</ept>搜索，你应在 6 个文件中看到它 9 次。"
    },
    {
      "content": "无法重写到端口 xxx。低于最小允许值 8080 的新端口用于 http 协议",
      "pos": [
        27924,
        27963
      ]
    },
    {
      "content": "请尝试更改 web 项目使用的端口号。右键单击 ContosoAdsWeb 项目，然后单击“属性”。单击“Web”选项卡，然后更改“项目 Url”设置中的端口号。",
      "pos": [
        27965,
        28046
      ]
    },
    {
      "content": "有关可能解决该问题的另一种方法，请参阅下一节。",
      "pos": [
        28048,
        28071
      ]
    },
    {
      "content": "在本地运行时出现其他错误",
      "pos": [
        28077,
        28089
      ]
    },
    {
      "content": "默认情况下新的云服务项目使用 Azure 计算模拟器 express 版来模拟 Azure 环境。这是完整计算仿真程序的轻型版本，在某些情况下完整仿真程序将在没有 express 版时工作。",
      "pos": [
        28091,
        28186
      ]
    },
    {
      "content": "若要更改项目以使用完整模拟器，请右键单击 ContosoAdsCloudService 项目中，然后单击“属性”。在“属性”窗口中，单击“Web”选项卡，然后单击“使用完整模拟器”单选按钮。",
      "pos": [
        28188,
        28283
      ]
    },
    {
      "content": "要使用完整仿真程序运行该应用程序，您必须使用管理员权限打开 Visual Studio。",
      "pos": [
        28285,
        28329
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        28334,
        28338
      ]
    },
    {
      "pos": [
        28340,
        29158
      ],
      "content": "Contoso 广告应用程序有意保持入门教程的简单性。例如，它没有实施<bpt id=\"p1\">[</bpt>依赖关系注入<ept id=\"p1\">](http://www.asp.net/mvc/tutorials/hands-on-labs/aspnet-mvc-4-dependency-injection)</ept>或<bpt id=\"p2\">[</bpt>存储库和单元的工作模式<ept id=\"p2\">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#repo)</ept>，它不<bpt id=\"p3\">[</bpt>使用日志记录接口<ept id=\"p3\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log)</ept>，它不使用 <bpt id=\"p4\">[</bpt>EF Code First 迁移<ept id=\"p4\">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application)</ept>来管理数据模型更改，或使用 <bpt id=\"p5\">[</bpt>EF 连接复原<ept id=\"p5\">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/connection-resiliency-and-command-interception-with-the-entity-framework-in-an-asp-net-mvc-application)</ept>管理暂时性的网络错误等。"
    },
    {
      "content": "下面是演示更实际编码方法的一些云服务示例应用程序，从不太复杂到更复杂排列：",
      "pos": [
        29160,
        29197
      ]
    },
    {
      "pos": [
        29201,
        29315
      ],
      "content": "<bpt id=\"p1\">[</bpt>PhluffyFotos<ept id=\"p1\">](http://code.msdn.microsoft.com/PhluffyFotos-Sample-7ecffd31)</ept>。在概念上与 Contoso 广告类似，但实施更多的功能和详细的实际编码做法。"
    },
    {
      "pos": [
        29318,
        29494
      ],
      "content": "<bpt id=\"p1\">[</bpt>带有表、队列和 Blob 的 Azure 云服务多层应用程序<ept id=\"p1\">](http://code.msdn.microsoft.com/windowsazure/Windows-Azure-Multi-Tier-eadceb36)</ept>。引入了 Azure 存储表以及 Blob 和队列。基于旧版 Azure SDK for .NET，需做一些修改才能配合当前版本。"
    },
    {
      "pos": [
        29497,
        29620
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure 中的云服务基础知识<ept id=\"p1\">](http://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649)</ept>。一个综合示例，演示各种最佳实践，由 Microsoft 模式和实践组生产。"
    },
    {
      "pos": [
        29622,
        29790
      ],
      "content": "有关云开发的常规信息，请参阅<bpt id=\"p1\">[</bpt>使用 Azure 构建实际的云应用<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/introduction)</ept>。"
    },
    {
      "content": "有关详细信息，请参阅以下资源：",
      "pos": [
        29792,
        29807
      ]
    },
    {
      "content": "Azure 云服务的第 1 部分：简介",
      "pos": [
        29812,
        29831
      ]
    },
    {
      "content": "如何管理云服务",
      "pos": [
        29909,
        29916
      ]
    },
    {
      "content": "Azure 存储空间",
      "pos": [
        29975,
        29985
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure 云服务和 ASP.NET 入门 | Azure\"\n    description=\"了解如何使用 ASP.NET MVC 和 Azure 创建多层应用程序。该应用程序运行在云服务中，带有 web 角色和辅助角色。它使用实体框架、SQL 数据库和 Azure 存储队列和 Blob。\"\n    services=\"cloud-services, storage\"\n    documentationCenter=\".net\"\n    authors=\"tdykstra\"\n    manager=\"wpickett\"\n    editor=\"mollybos\"/>\n\n<tags\n    ms.service=\"cloud-services\"\n    ms.date=\"12/28/2015\"\n    wacn.date=\"02/26/2016\"/>\n\n# Azure 云服务和 ASP.NET 入门\n\n> [AZURE.SELECTOR]\n- [Node.js](/documentation/articles/cloud-services-nodejs-develop-deploy-app)\n- [.NET](/documentation/articles/cloud-services-dotnet-get-started)\n\n## 概述\n\n本教程演示如何使用 ASP.NET MVC 前端创建多层.NET 应用程序，并将其部署到 [Azure 云服务](/documentation/articles/fundamentals-application-models/#CloudServices)。应用程序使用 [Azure SQL 数据库](http://msdn.microsoft.com/zh-cn/library/azure/ee336279)、[Azure Blob 服务](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage)和 [Azure 队列服务](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)。你可以从 MSDN 代码库[下载 Visual Studio 项目](http://code.msdn.microsoft.com/Simple-Azure-Cloud-Service-e01df2e4)。\n\n本教程介绍如何生成并本地运行应用程序、如何将其部署到 Azure 并在云中运行，以及最终如何从头构建。您可以从头构建然后进行测试，之后根据您的喜好部署步骤。\n\n## Contoso 广告应用程序\n\n该应用程序是广告公告板。用户通过输入文本和上载图像创建一个广告。它们可以通过缩略图查看一个广告列表，当用户选择广告以查看详细信息时，它们可以查看完整尺寸的图像。\n\n![广告列表](./media/cloud-services-dotnet-get-started/list.png)\n\n应用程序使用[以队列为中心的工作模式](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)来减轻创建缩略图到后端进程的 CPU 密集型工作。\n\n## 替代体系结构： Web 应用和 Web 作业\n\n本教程演示如何在 Azure 云服务中运行前端和后端。一种替代方法是在 [Azure Web 应用](/services/web-sites)中运行前端，并为后端使用 [Web 作业](/documentation/articles/websites-webjobs-resources)功能（目前以预览版提供）。有关如何使用 Web 作业的教程，请参阅 [Azure WebJobs SDK 入门](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)。有关如何选择最适合你方案的服务信息，请参阅 [Azure Web 应用、云服务和虚拟机的比较](/documentation/articles/choose-web-site-cloud-service-vm)。\n\n## 学习内容\n\n* 如何通过安装 Azure SDK 来让你的计算机可以进行 Azure 开发。\n* 如何通过 ASP.NET MVC web 角色和辅助角色创建一个 Visual Studio 云服务项目。\n* 如何使用 Azure 存储仿真程序测试本地云服务项目。\n* 如何将云项目发布到 Azure 云服务并使用 Azure 存储帐户测试。\n* 如何上传文件并将其存储在 Azure Blob 服务中。\n* 如何将 Azure 队列服务用于各层之间的通信。\n\n## 先决条件\n\n本教程假定你了解[有关 Azure 云服务的基本概念](/documentation/articles/fundamentals-application-models/#CloudServices)，例如 *Web 角色*和*辅助角色*术语。此外，还假设你知道如何处理 Visual Studio 中的 [ASP.NET MVC](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started) 或 [Web 窗体](http://www.asp.net/web-forms/tutorials/aspnet-45/getting-started-with-aspnet-45-web-forms/introduction-and-overview)项目。示例应用程序使用 MVC，但在本教程的大部分也适用于 Web 窗体。\n\n您可以本地运行该应用程序，无需订阅 Azure，但要将应用程序部署到云则需要订阅。如果你没有帐户，可以[注册试用版](/pricing/1rmb-trial)。\n\n教程说明使用以下产品之一：\n\n* Visual Studio 2013\n* Visual Studio 2015\n\n上述产品中，只要缺少其中任意一个，安装 Azure SDK 时就将自动安装 Visual Studio 2015。\n\n## 应用程序体系结构\n\n该应用程序将广告存储在 SQL 数据库中，通过使用实体框架 Code First 创建表和访问数据。对于每个广告，数据库存储两个 URL，一个用于完全尺寸的图像，一个用于缩略图。\n\n![广告表](./media/cloud-services-dotnet-get-started/adtable.png)\n\n当用户上载一个图像时，Web 角色中运行的前端在 [Azure Blob](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage) 中存储图像，并将广告信息存储在带有指向 Blob 的 URL 的数据库中。同时，它将一条消息写入 Azure 队列。在辅助角色中定期运行的后端进程轮询队列是否有新消息。显示新消息时，辅助角色将创建该图像的缩略图，并为该广告更新缩略图 URL 数据库字段。下图演示了应用程序各部分之间如何交互：\n\n![Contoso 广告体系结构](./media/cloud-services-dotnet-get-started/apparchitecture.png)\n\n[AZURE.INCLUDE [install-sdk](../includes/install-sdk-2015-2013.md)]\n\n## 下载并运行已完成的解决方案\n\n1. 下载并解压缩[已完成的解决方案](http://code.msdn.microsoft.com/Simple-Azure-Cloud-Service-e01df2e4)。\n\n2. 启动 Visual Studio。\n\n3. 从“文件”菜单中，选择“打开项目”，导航到下载解决方案的位置，然后打开解决方案文件。\n\n3. 按 CTRL+SHIFT+B 生成解决方案。\n\n    默认情况下，Visual Studio 会自动还原 NuGet 包的内容，它未包括在 *.zip* 文件中。如果包未还原，请通过转到“管理解决方案的 NuGet 包”对话框并单击右上角的“还原”按钮手动安装。\n\n3. 在“解决方案资源管理器”中，确保 **ContosoAdsCloudService** 被选为启动项目。\n\n2. 如果你使用 Visual Studio 2015，请在 ContosoAdsWeb 项目的应用程序 *Web.config* 文件以及 ContosoAdsCloudService 项目的 *ServiceConfiguration.Local.cscfg* 文件中，更改 SQL Server 连接字符串。对于每种情况，请将“(localdb)\\\\v11.0”更改为“(localdb)\\\\MSSQLLocalDB”。\n\n1. 按 Ctrl+F5 运行应用程序。\n\n    在本地运行云服务项目时，Visual Studio 会自动调用 Azure *计算模拟器*和 Azure *存储模拟器*。计算仿真程序使用您的计算机资源，以模拟 web 角色和辅助角色环境。存储模拟器使用 [SQL Server Express LocalDB](http://msdn.microsoft.com/zh-cn/library/hh510202.aspx) 数据库模拟 Azure 云存储。\n\n    首次运行云服务项目时，模拟器将会花费大约一分钟来启动。模拟器完成启动后，默认浏览器中会打开应用程序的主页。\n\n    ![Contoso 广告体系结构](./media/cloud-services-dotnet-get-started/home.png)\n\n2. 单击“创建广告”。\n\n2. 输入一些测试数据并选择一个要上载的“.jpg”图像，然后单击“创建”。\n\n    ![创建页面](./media/cloud-services-dotnet-get-started/create.png)\n\n    该应用程序转到索引页，但它不显示新广告的缩略图，因为该处理尚未发生。\n\n3. 稍等片刻，然后刷新该索引页查看缩略图。\n\n    ![索引页面](./media/cloud-services-dotnet-get-started/list.png)\n\n4. 单击广告的“详细信息”查看实际尺寸的图像。\n\n    ![详细信息页](./media/cloud-services-dotnet-get-started/details.png)\n\n你已在本地计算机上完全运行应用程序，但未连接到云。存储模拟器将队列和 Blob 数据存储在 SQL Server Express LocalDB 数据库中，应用程序将广告数据存储在另一个 LocalDB 数据库中。在 Web 应用首次尝试访问它时，实体框架 Code First 自动创建广告数据库。\n\n下一部分中，你要将解决方案配置为在云中运行时对队列、Blob 和应用程序数据库使用 Azure 云资源。如果想要继续在本地运行但使用云存储和数据库资源，你可以这样做；这只需要设置连接字符串即可。\n\n## 将应用程序部署到 Azure\n\n你将执行以下步骤，以便在云中运行应用程序：\n\n* 创建 Azure 云服务。\n* 创建 Azure SQL 数据库。\n* 创建 Azure 存储帐户。\n* 配置解决方案，以便在 Azure 中运行时使用你的 Azure SQL 数据库。\n* 配置解决方案以便在 Azure 中运行时使用你的 Azure 存储帐户。\n* 将项目部署到 Azure 云服务。\n\n### 创建 Azure 云服务\n\nAzure 云服务是该应用程序将运行的环境。\n\n1. 在浏览器中，打开 [Azure 经典门户](http://manage.windowsazure.cn)。\n\n2. 单击“新建”>“计算”>“云服务”>“快速创建”。\n\n4. 在 URL 输入框中，输入 URL 前缀。\n\n    此 URL 必须是唯一的。如果您选择的前缀已被其他人使用，将获得一条错误消息。\n\n5. 选择您要在其中部署该应用程序的区域。\n\n    此字段指定你的云服务将托管在哪个数据中心。对于生产应用程序，你可以选择离客户最近的区域。对于本教程，选择离您最近的区域。\n\n6. 单击“创建云服务”。\n\n    在下图中，使用 URL contosoads.chinacloudapp.cn 创建一个云服务。\n\n    ![新的云服务](./media/cloud-services-dotnet-get-started/newcs.png)\n\n### 创建 Azure SQL 数据库\n\n在云中运行应用程序时，它将使用基于云的数据库。\n\n1. 在 Azure 经典门户中，单击“新建”>“数据服务”>“SQL 数据库”>“快速创建”。[](http://manage.windowsazure.cn)\n\n1. 在“数据库名称”框中，输入 *contosoads*。\n\n1. 从“服务器”下拉列表中选择“新建 SQL 数据库服务器”。\n\n    或者，如果你的订阅已有一台服务器，可从下拉列表中选择该服务器。\n\n1. 选择的**区域**与你为云服务所选择的相同。\n\n    当云服务和数据库位于不同的数据中心（不同区域）时，延迟将增加，并且您将支付带宽数据中心之外的费用。数据中心内的带宽是免费的。\n\n1. 输入管理员“登录名”和“密码”。\n\n    如果你选择了“新建 SQL 数据库服务器”，则在此处不要输入现有名称和密码。你应输入新的名称和密码，你现在定义的名称和密码将在你以后访问数据库时使用。如果你选择之前创建的服务器，系统将提示你已创建的管理用户帐户的密码。\n\n1. 单击“创建 SQL 数据库”。\n\n    ![新 SQL 数据库](./media/cloud-services-dotnet-get-started/newdb.png)\n\n1. Azure 完成创建数据库后，在门户的左窗格中单击“SQL 数据库”选项卡，然后单击新数据库的名称。\n\n2. 单击“仪表板”选项卡。\n\n3. 单击“管理允许的 IP 地址”。\n\n4. 在“允许的服务”下，将“Azure 服务”更改为“是”。\n\n5. 单击“保存”。\n\n### 创建 Azure 存储帐户\n\nAzure 存储帐户提供在云中存储队列和 Blob 数据的资源。\n\n在实际应用程序中，您通常会为记录数据的应用程序数据创建单独的帐户，并且为生产数据的测试数据创建单独帐户。对于本教程，你将只使用一个帐户。\n\n1. 在 Azure 经典门户中，单击“新建”>“数据服务”>“存储”>“快速创建”。[](http://manage.windowsazure.cn)\n\n4. 在“URL”框中，输入 URL 前缀。\n\n    此前缀加上在框下看到的文本将是你的存储帐户的唯一 URL。如果其他人已使用您输入的前缀，您必须选择不同的前缀。\n\n5. 将“区域”下拉列表设置到为云服务选择的相同区域。\n\n    当云服务和存储帐户位于不同的数据中心（不同区域）时，延迟将增加，并且你需要为数据中心外的带宽付费。数据中心内的带宽是免费的。\n\n    Azure 地缘组实际上是一种机制，目的是最小化数据中心内不同资源之间的距离，这样可以降低延迟。本教程不使用地缘组。有关详细信息，请参阅[如何在 Azure 中创建地缘组](http://msdn.microsoft.com/zh-cn/library/jj156209.aspx)。\n\n6. 将“复制”下拉列表设置为“本地冗余”。\n\n    为存储帐户启用地域复制时，会将存储内容复制到辅助数据中心，这样就能够在主要位置发生重大灾难时将故障转移到该位置。地域复制可能会产生额外的成本。对于测试和开发帐户，你通常不希望因为地域复制而付款。有关详细信息，请参阅[创建、管理或删除存储帐户](/documentation/articles/storage-create-storage-account/#replication-options)。\n\n5. 单击“创建存储帐户”。\n\n    ![新的存储帐户](./media/cloud-services-dotnet-get-started/newstorage.png)\n\n    在图中，使用 URL“`contosoads.core.chinacloudapi.cn`”创建一个存储帐户。\n\n### 配置解决方案，以便在 Azure 中运行时使用您的 Azure SQL 数据库\n\nWeb 项目和辅助角色项目自身具有数据库连接字符串，并且当应用程序在 Azure 运行时指向 Azure SQL 数据库。\n\n你将为 Web 角色使用 [Web.config 转换](http://www.asp.net/mvc/tutorials/deployment/visual-studio-web-deployment/web-config-transformations)，为辅助角色使用云服务环境设置。\n\n>[AZURE.NOTE] 在本部分和下一部分中，你将在项目文件中存储凭据。[不要将敏感数据存储在公共源代码存储库中](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control#secrets)。\n\n1. 在 ContosoAdsWeb 项目中，为应用程序 *Web.config* 文件打开 *Web.Release.config* 转换文件，删除包含 `<connectionStrings>` 元素的注释块，并在其原位置粘贴下面的代码。\n\n        <connectionStrings>\n            <add name=\"ContosoAdsContext\" connectionString=\"{connectionstring}\"\n            providerName=\"System.Data.SqlClient\" xdt:Transform=\"SetAttributes\" xdt:Locator=\"Match(name)\"/>\n        </connectionStrings>\n\n    保持文件打开进行编辑。\n\n2. 在 [Azure 经典门户](http://manage.windowsazure.cn)中，依次单击左窗格中的“SQL 数据库”、你在本教程中创建的数据库、“仪表板”选项卡、“显示连接字符串”。\n\n    ![显示连接字符串](./media/cloud-services-dotnet-get-started/showcs.png)\n\n    门户将显示连接字符串，其占位符用于输入密码。\n\n    ![连接字符串](./media/cloud-services-dotnet-get-started/connstrings.png)\n\n4. 在 *Web.Release.config* 转换文件中，删除 `{connectionstring}` 并将 Azure 经典门户中的 ADO.NET 连接字符串粘贴在其原位置。\n\n5. 在粘贴到 *Web.Release.config* 转换文件的连接字符串中，请用你为新的 SQL 数据库创建的密码替换 `{your_password_here}`。\n\n7. 保存文件。\n\n6. 选择并复制连接字符串，供在以下步骤中配置辅助角色项目的使用（不带周围的引号）。\n\n5. 在云服务项目的“角色”下的“解决方案资源管理器”中，右键单击“ContosoAdsWorker”并单击“属性”。\n\n    ![角色属性](./media/cloud-services-dotnet-get-started/rolepropertiesworker.png)\n\n6. 单击“设置”选项卡。\n\n7. 将“服务配置”更改为“云”。\n\n7. 选择 `ContosoAdsDbConnectionString` 设置的“值”字段，然后粘贴你从本教程上一部分复制的连接字符串。\n\n    ![辅助角色的数据库连接字符串](./media/cloud-services-dotnet-get-started/workerdbcs.png)\n\n7. 保存所做更改。\n\n### 配置解决方案以便在 Azure 中运行时使用您的 Azure 存储帐户\n\nWeb 角色项目和辅助角色项目的 azure 存储帐户连接字符串存储在云服务项目中的环境设置。对于每个项目，应用程序将在本地运行以及在云中运行时，没有使用一组单独的设置。您将更新用于 web 和辅助角色项目的云环境设置。\n\n4. 在“解决方案资源管理器”中，右键单击“ContosoAdsCloudService”项目中“角色”下的“ContosoAdsWeb”，然后单击“属性”。\n\n    ![角色属性](./media/cloud-services-dotnet-get-started/roleproperties.png)\n\n5. 单击“设置”选项卡。在“服务配置”下拉列表框中，选择“云”。\n\n    ![云配置](./media/cloud-services-dotnet-get-started/sccloud.png)\n\n6. 选择“StorageConnectionString”条目，你将看到一个省略号 (**...**) 按钮，位于行的右端。单击省略号按钮打开“创建存储帐户连接字符串”对话框。\n\n    ![打开连接字符串创建框](./media/cloud-services-dotnet-get-started/opencscreate.png)\n\n1. 在“创建存储连接字符串”对话框中，单击“使用你的订阅进行连接”，选择你以前创建的存储帐户，然后单击“确定”。如尚未登录，将提示您输入 Azure 帐户凭据。\n\n    ![创建存储连接字符串](./media/cloud-services-dotnet-get-started/createstoragecs.png)\n\n1. 保存所做更改。\n\n2. 按照你所使用的针对 `StorageConnectionString` 连接字符串的相同过程，设置 `Microsoft.WindowsAzure.Plugins.Diagnostics.ConnectionString` 连接字符串。\n\n    此连接字符串用于日志记录。\n\n2. 请按照用于 **ContosoAdsWeb** 角色的相同过程为 **ContosoAdsWorker** 角色设置两个连接字符串。不要忘记将“服务配置”设置为“云”。\n\n已使用 Visual Studio 用户界面进行配置的角色环境设置存储在 ContosoAdsCloudService 项目的以下文件中：\n\n* *ServiceDefinition.csdef* - 定义设置名称。\n* *ServiceConfiguration.Cloud.cscfg* - 为云中运行的应用提供值。\n* *ServiceConfiguration.Local.cscfg* - 为本地运行的应用提供值。\n\n例如，ServiceDefinition.csdef 包括以下定义：\n\n        <ConfigurationSettings>\n          <Setting name=\"StorageConnectionString\" />\n          <Setting name=\"ContosoAdsDbConnectionString\" />\n        </ConfigurationSettings>\n\n*ServiceConfiguration.Cloud.cscfg* 文件包括你为 Visual Studio 中的设置输入的值。\n\n        <Role name=\"ContosoAdsWorker\">\n          <Instances count=\"1\" />\n          <ConfigurationSettings>\n            <Setting name=\"StorageConnectionString\" value=\"{yourconnectionstring}\" />\n            <Setting name=\"ContosoAdsDbConnectionString\" value=\"{yourconnectionstring}\" />\n            <!-- other settings not shown -->\n          </ConfigurationSettings>\n          <!-- other settings not shown -->\n        </Role>\n\n`<Instances>` 设置指定 Azure 将在其上运行辅助角色代码的虚拟机的数量。[后续步骤](#next-steps)部分包括有关向外缩放云服务的详细信息的链接。\n\n###  将项目部署到 Azure\n\n3.  在“解决方案资源管理器”中，右键单击“ContosoAdsCloudService”云项目并选择“发布”。\n\n    ![发布菜单](./media/cloud-services-dotnet-get-started/pubmenu.png)\n\n2. 在“发布 Azure 应用程序”向导的“登录”步骤中，单击“下一步”。\n\n    ![登录步骤](./media/cloud-services-dotnet-get-started/pubsignin.png)\n\n3. 在向导的“设置”步骤中，单击“下一步”。\n\n    ![设置步骤](./media/cloud-services-dotnet-get-started/pubsettings.png)\n\n    本教程可以使用“高级”选项卡中的默认设置。有关高级选项卡的信息，请参阅[发布 Azure 应用程序向导](http://msdn.microsoft.com/zh-cn/library/hh535756.aspx)。\n\n2. 在“摘要”步骤中，单击“发布”。\n\n    ![摘要步骤](./media/cloud-services-dotnet-get-started/pubsummary.png)\n\n   “Azure 活动日志”窗口将在 Visual Studio 中打开。\n\n2. 单击右箭头图标以展开部署详细信息。\n\n    部署可能需要 5 分钟或更长时间。\n\n    ![Azure 活动日志窗口](./media/cloud-services-dotnet-get-started/waal.png)\n\n1. 当部署状态为完成时，单击“Web 应用 URL”以启动应用程序。\n\n9. 就像在本地运行应用程序一样，现在可以通过创建、查看和编辑一些广告测试应用程序。\n\n>[AZURE.NOTE] 完成测试后，删除或停止云服务。即使你不使用云服务，也会产生费用，因为要为它保留虚拟机资源。如果保持运行云服务，找到你 URL 的任何人都可以创建和查看广告。在 [Azure 经典门户](http://manage.windowsazure.cn)中，转到云服务的“仪表板”选项卡，然后单击页面底部的“删除”按钮。如果你只是想要暂时防止其他人访问站点，请单击“停止”。在这种情况下，会继续产生费用。当你不再需要 SQL 数据库和存储帐户时，可以遵循类似的过程将其删除。\n\n## 从头开始创建应用程序\n\n如果你尚未下载[已完成的应用程序](http://code.msdn.microsoft.com/Simple-Azure-Cloud-Service-e01df2e4)，现在请下载。你要将文件从下载的项目复制到新的项目。\n\n创建 Contoso 广告应用程序涉及以下步骤：\n\n* 创建云服务 Visual Studio 解决方案。\n* 更新和添加 NuGet 包。\n* 设置项目引用。\n* 配置连接字符串。\n* 添加代码文件。\n\n创建该解决方案后，你将审核对于云服务项目和 Azure blob 和队列唯一的代码。\n\n### 创建云服务 Visual Studio 解决方案\n\n1. 在 Visual Studio 中，从“文件”菜单中选择“新建项目”。\n\n2. 在“新建项目”对话框的左窗格中，展开“Visual C#”，选择“云”模板，然后选择“Azure 云服务”模板。\n\n3. 将项目和解决方案命名为 ContosoAdsCloudService，然后单击“确定”。\n\n    ![新建项目](./media/cloud-services-dotnet-get-started/newproject.png)\n\n4. 在“新建 Azure 云服务”对话框中，添加一个 Web 角色和辅助角色。将 web 角色命名为 ContosoAdsWeb，并将辅助角色命名为 ContosoAdsWorker。（使用右侧窗格中的铅笔图标更改这些角色的默认名称。）\n\n    ![新建云服务项目](./media/cloud-services-dotnet-get-started/newcsproj.png)\n\n5. 看到 Web 角色的“新建 ASP.NET 项目”对话框时，选择 MVC 模板中，然后单击“更改身份验证”。\n\n    ![更改身份验证](./media/cloud-services-dotnet-get-started/chgauth.png)\n\n7. 在“更改身份验证”对话框中，选择“无身份验证”，然后单击“确定”。\n\n    ![无身份验证](./media/cloud-services-dotnet-get-started/noauth.png)\n\n8. 在“新建 ASP.NET 项目”对话框中，单击“确定”。\n\n9. 在“解决方案资源管理器”中，右键单击该解决方案（而不是其中某个项目），然后选择“添加 - 新建项目”。\n\n11. 在“添加新项目”对话框中，选择左窗格中“Visual C#”下面的“Windows”，然后单击“类库”模板。\n\n10. 将项目命名为 *ContosoAdsCommon*，然后单击“确定”。\n\n    您需要从 web 和辅助角色项目引用实体框架上下文和数据模型。作为一种替代方法，您可以在 web 角色项目中定义与 EF 相关的类，并从辅助角色项目中引用该项目。但是，之后你的辅助角色项目将引用它不需要的 Web 程序集。\n\n### 更新和添加 NuGet 包\n\n11. 打开解决方案的“管理 NuGet 包”对话框。\n\n12. 在窗口顶部，选择“更新”。\n\n13. 查找 *WindowsAzure.Storage* 包，如果它在列表中，请选择它并选择要在其中更新它的 Web 项目和辅助项目，然后单击“更新”。\n\n    存储客户端库更新频率高于 Visual Studio 项目模板，因此您通常会发现该版本中新创建的计划需求需要更新。\n\n14. 在窗口顶部，选择“浏览”。\n\n16. 找到 *EntityFramework* NuGet 包，并将其安装在所有三个项目中。\n\n17. 查找 *Microsoft.WindowsAzure.ConfigurationManager* NuGet 包，然后将它安装在辅助角色项目中。\n\n### 设置项目引用\n\n10. 在 ContosoAdsWeb 项目中，设置对 ContosoAdsCommon 项目的引用。右键单击 ContosoAdsWeb 项目中，然后单击“引用”>“添加引用”。在“引用管理器”对话框中，选择左窗格中的“解决方案 - 项目”，选择 **ContosoAdsCommon**，然后单击“确定”。\n\n11. 在 ContosoAdsWorker 项目中，设置对 ContosoAdsCommon 项目的引用。\n\n    ContosoAdsCommon 将包含实体框架数据模型和上下文类，将在前端和后端使用。\n\n11. 在 ContosoAdsWorker 项目中，设置对 `System.Drawing` 的引用。\n\n    后端使用此程序集将图像转换为缩略图。\n\n### 配置连接字符串\n\n在本部分中，您将为本地测试配置 Azure 存储和 SQL 连接字符串。本教程前面的部署说明解释如何当应用程序在云中运行时设置连接字符串。\n\n3. 在 ContosoAdsWeb 项目中，打开应用程序 Web.config 文件，并在 `configSections` 元素后面插入以下 `connectionStrings` 元素。\n\n        <connectionStrings>\n          <add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\" providerName=\"System.Data.SqlClient\" />\n        </connectionStrings>\n\n    如果你使用的是 Visual Studio 2015，请将“v11.0”替换为“MSSQLLocalDB”。\n\n3. 保存所做更改。\n\n2. 在 ContosoAdsCloudService 项目中，右键单击“角色”下的 ContosoAdsWeb，然后单击“属性”。\n\n    ![角色属性](./media/cloud-services-dotnet-get-started/roleproperties.png)\n\n3. 在“ContosAdsWeb 角色”属性窗口中，单击“设置”选项卡，然后单击“添加设置”。\n\n    将“服务配置”保留设置为“所有配置”。\n\n4. 添加名为 *StorageConnectionString* 的新设置。将“类型”设置为“ConnectionString”，并将“值”设置为“UseDevelopmentStorage=true”。\n\n    ![新连接字符串](./media/cloud-services-dotnet-get-started/scall.png)\n\n5. 保存所做更改。\n\n3. 按照相同的过程在 ContosoAdsWorker 角色属性中添加存储连接字符串。\n\n5. 还是在“ContosoAdsWorker [角色]”属性窗口中，添加另一个连接字符串：\n\n    * 名称：ContosoAdsDbConnectionString\n    * 类型：字符串\n    * 值：粘贴用于 Web 角色项目的相同连接字符串。（以下示例适用于 Visual Studio 2013；如果你使用 Visual Studio 2015 并想要复制此示例，请记得更改数据源。）\n\n            Data Source=(localdb)\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\n\n### 添加代码文件\n\n本部分中，您将代码将文件从已下载的解决方案复制到新的解决方案。以下各节将显示并解释此代码的关键部分。\n\n要将文件添加到某个项目或文件夹，请右键单击该项目或文件夹，然后单击“添加”>“现有项”。选择所需的文件，然后单击“添加”。如果询问你是否想要替换现有文件，请单击“是”。\n\n3. 在 ContosoAdsCommon 项目中，删除 *Class1.cs* 文件，并在其原位置添加来自下载项目的 *Ad.cs* 和 *ContosoAdscontext.cs* 文件。\n\n3. 在 ContosoAdsWeb 项目中，从下载的项目添加以下文件。\n    - *Global.asax.cs*。  \n    - 在 *Views/Shared* 文件夹中：<em>\\_Layout.cshtml</em>。\n    - 在 *Views/Home* 文件夹中：*Index.cshtml*。\n    - 在 *Controllers* 文件夹中：*AdController.cs*。\n    - 在 *Views/Ad* 文件夹（首先创建该文件夹）中：五个 *.cshtml* 文件。\n\n3. 在 ContosoAdsWorker 项目中，从下载的项目添加 *WorkerRole.cs*。\n\n现在，可以按照前面教程中的说明生成并运行该应用程序，并且该应用程序将使用本地数据库和存储仿真程序资源。\n\n以下部分介绍与使用 Azure 环境、Blob 和队列相关的代码。本教程未说明如何使用基架创建 MVC 控制器和视图，如何编写适用于 SQL Server 数据库的实体框架代码，或者在 ASP.NET 4.5 中的异步编程基础知识。有关这些主题的信息，请参阅以下资源：\n\n* [MVC 5 入门](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)\n* [EF 6 和 MVC 5 入门](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc)\n* [.NET 4.5 中的异步编程简介](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/web-development-best-practices#async)。\n\n### ContosoAdsCommon - Ad.cs\n\nAd.cs 文件为 ad 类别定义一个枚举，为 ad 信息定义一个 POCO 实体类。\n\n        public enum Category\n        {\n            Cars,\n            [Display(Name=\"Real Estate\")]\n            RealEstate,\n            [Display(Name = \"Free Stuff\")]\n            FreeStuff\n        }\n\n        public class Ad\n        {\n            public int AdId { get; set; }\n\n            [StringLength(100)]\n            public string Title { get; set; }\n\n            public int Price { get; set; }\n\n            [StringLength(1000)]\n            [DataType(DataType.MultilineText)]\n            public string Description { get; set; }\n\n            [StringLength(1000)]\n            [DisplayName(\"Full-size Image\")]\n            public string ImageURL { get; set; }\n\n            [StringLength(1000)]\n            [DisplayName(\"Thumbnail\")]\n            public string ThumbnailURL { get; set; }\n\n            [DataType(DataType.Date)]\n            [DisplayFormat(DataFormatString = \"{0:yyyy-MM-dd}\", ApplyFormatInEditMode = true)]\n            public DateTime PostedDate { get; set; }\n\n            public Category? Category { get; set; }\n            [StringLength(12)]\n            public string Phone { get; set; }\n        }\n\n### ContosoAdsCommon - ContosoAdsContext.cs\n\nContosoAdsContext 类指定 DbSet 集合中使用的 Ad 类，实体框架将存储在 SQL 数据库中。\n\n        public class ContosoAdsContext : DbContext\n        {\n            public ContosoAdsContext() : base(\"name=ContosoAdsContext\")\n            {\n            }\n            public ContosoAdsContext(string connString)\n                : base(connString)\n            {\n            }\n            public System.Data.Entity.DbSet<Ad> Ads { get; set; }\n        }\n\n类具有两个构造函数。其中第一个由 web 项目使用，并指定存储在 Web.config 文件中的连接字符串的名称。第二个构造函数允许你在实际的连接字符串中传递。程序需要辅助角色项目，因为它没有 Web.config 文件。你以前看到存储此连接字符串的位置，并且稍后你将看到连接字符串在实例化 DbContext 类时代码如何检索它。\n\n### ContosoAdsWeb - Global.asax.cs\n\n从 `Application_Start` 方法调用的代码创建*图像* Blob 容器和*图像*队列（如果它们尚不存在）。这确保只要您开始使用新的存储帐户，或在新计算机上开始使用存储仿真程序时，将自动创建所需的 Blob 容器和队列。\n\n此代码通过使用来自 *.cscfg* 文件的存储连接字符串获取存储帐户的访问权限。\n\n        var storageAccount = CloudStorageAccount.Parse\n            (RoleEnvironment.GetConfigurationSettingValue(\"StorageConnectionString\"));\n\n然后，它获取对*图像* Blob 容器的引用，创建尚不存在的容器，并在新容器上设置访问权限。默认情况下，新容器只允许带存储帐户凭据的客户端访问 Blob。 Web 应用需要 Blob 是公共的，以便它可以使用指向图像 Blob 的 Url 显示图像。\n\n        var blobClient = storageAccount.CreateCloudBlobClient();\n        var imagesBlobContainer = blobClient.GetContainerReference(\"images\");\n        if (imagesBlobContainer.CreateIfNotExists())\n        {\n            imagesBlobContainer.SetPermissions(\n                new BlobContainerPermissions\n                {\n                    PublicAccess =BlobContainerPublicAccessType.Blob\n                });\n        }\n\n类似代码获取对*图像*队列的引用并创建一个新队列。这种情况不需要权限更改。\n\n        CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n        var imagesQueue = queueClient.GetQueueReference(\"images\");\n        imagesQueue.CreateIfNotExists();\n\n### ContosoAdsWeb - \\_Layout.cshtml\n\n*\\_Layout.cshtml* 文件设置页眉和页脚中的应用程序，并创建“广告”菜单项。\n\n### ContosoAdsWeb - Views\\\\Home\\\\Index.cshtml\n\n*Views\\\\Home\\\\Index.cshtml* 文件在主页上显示类别链接。链接将查询字符串变量中的 `Category` 枚举的整数值传递到“广告索引”页面。\n\n        <li>@Html.ActionLink(\"Cars\", \"Index\", \"Ad\", new { category = (int)Category.Cars }, null)</li>\n        <li>@Html.ActionLink(\"Real estate\", \"Index\", \"Ad\", new { category = (int)Category.RealEstate }, null)</li>\n        <li>@Html.ActionLink(\"Free stuff\", \"Index\", \"Ad\", new { category = (int)Category.FreeStuff }, null)</li>\n        <li>@Html.ActionLink(\"All\", \"Index\", \"Ad\", null, null)</li>\n\n### ContosoAdsWeb - AdController.cs\n\n在 *AdController.cs* 文件中，构造函数调用 `InitializeStorage` 方法来创建 Azure 存储客户端库对象，它提供一个用于处理 Blob 和队列的 API。\n\n然后，代码获取对*图像* Blob 容器的引用，正如你之前在 *Global.asax.cs* 中看到的。在执行该操作时，它设置适用于 Web 应用程序的默认[重试策略](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/transient-fault-handling)。对于超过暂时性故障反复重试超过一分钟的 Web 应用程序，默认指数回退重试策略将其可能挂起。此处指定的重试策略将在每次尝试后等待 3 秒，最多可尝试 3 次。\n\n        var blobClient = storageAccount.CreateCloudBlobClient();\n        blobClient.DefaultRequestOptions.RetryPolicy = new LinearRetry(TimeSpan.FromSeconds(3), 3);\n        imagesBlobContainer = blobClient.GetContainerReference(\"images\");\n\n类似代码获取对*图像*队列的引用。\n\n        CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n        queueClient.DefaultRequestOptions.RetryPolicy = new LinearRetry(TimeSpan.FromSeconds(3), 3);\n        imagesQueue = queueClient.GetQueueReference(\"images\");\n\n大部分控制器代码通常用于使用 DbContext 类的实体框架数据模型。例外情况是 HttpPost `Create` 方法，它上载文件并将其保存在 Blob 存储中。模型联编程序为该方法提供一个 [HttpPostedFileBase](http://msdn.microsoft.com/zh-cn/library/system.web.httppostedfilebase.aspx) 对象。\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Create(\n            [Bind(Include = \"Title,Price,Description,Category,Phone\")] Ad ad,\n            HttpPostedFileBase imageFile)\n\n如果用户选择要上载的文件，则代码上载该文件，将其保存在 Blob 中，并使用指向 Blob 的 URL 更新广告数据库记录。\n\n        if (imageFile != null && imageFile.ContentLength != 0)\n        {\n            blob = await UploadAndSaveBlobAsync(imageFile);\n            ad.ImageURL = blob.Uri.ToString();\n        }\n\n执行上载的代码位于 `UploadAndSaveBlobAsync` 方法中。它将创建 Blob 的 GUID 名称，上载和保存该文件，并将引用返回已保存的 Blob。\n\n        private async Task<CloudBlockBlob> UploadAndSaveBlobAsync(HttpPostedFileBase imageFile)\n        {\n            string blobName = Guid.NewGuid().ToString() + Path.GetExtension(imageFile.FileName);\n            CloudBlockBlob imageBlob = imagesBlobContainer.GetBlockBlobReference(blobName);\n            using (var fileStream = imageFile.InputStream)\n            {\n                await imageBlob.UploadFromStreamAsync(fileStream);\n            }\n            return imageBlob;\n        }\n\n之后 HttpPost `Create` 方法上载 Blob 并更新数据库，它会创建队列消息，以通知后端进程图像已准备好转换为一个缩略图。\n\n        string queueMessageString = ad.AdId.ToString();\n        var queueMessage = new CloudQueueMessage(queueMessageString);\n        await queue.AddMessageAsync(queueMessage);\n\nHttpPost `Edit` 方法的代码和它类似，不同之处在于如果用户选择新图像文件，则必须删除已存在的任何 blob。\n\n        if (imageFile != null && imageFile.ContentLength != 0)\n        {\n            await DeleteAdBlobsAsync(ad);\n            imageBlob = await UploadAndSaveBlobAsync(imageFile);\n            ad.ImageURL = imageBlob.Uri.ToString();\n        }\n\n以下示例演示了当你删除广告时删除 Blob 的代码：\n\n        private async Task DeleteAdBlobsAsync(Ad ad)\n        {\n            if (!string.IsNullOrWhiteSpace(ad.ImageURL))\n            {\n                Uri blobUri = new Uri(ad.ImageURL);\n                await DeleteAdBlobAsync(blobUri);\n            }\n            if (!string.IsNullOrWhiteSpace(ad.ThumbnailURL))\n            {\n                Uri blobUri = new Uri(ad.ThumbnailURL);\n                await DeleteAdBlobAsync(blobUri);\n            }\n        }\n        private static async Task DeleteAdBlobAsync(Uri blobUri)\n        {\n            string blobName = blobUri.Segments[blobUri.Segments.Length - 1];\n            CloudBlockBlob blobToDelete = imagesBlobContainer.GetBlockBlobReference(blobName);\n            await blobToDelete.DeleteAsync();\n        }\n\n### ContosoAdsWeb - Views\\\\Ad\\\\Index.cshtml 和 Details.cshtml\n\n*Index.cshtml* 文件显示带有其他广告数据的缩略图。\n\n        <img  src=\"@Html.Raw(item.ThumbnailURL)\" />\n\n*Details.cshtml* 文件显示完全尺寸的图像。\n\n        <img src=\"@Html.Raw(Model.ImageURL)\" />\n\n### ContosoAdsWeb - Views\\\\Ad\\\\Create.cshtml 和 Edit.cshtml\n\n*Create.cshtml* 和 *Edit.cshtml* 文件指定窗体编码，允许控制器获取 `HttpPostedFileBase` 对象。\n\n        @using (Html.BeginForm(\"Create\", \"Ad\", FormMethod.Post, new { enctype = \"multipart/form-data\" }))\n\n`<input>` 元素通知浏览器提供文件选择对话框。\n\n        <input type=\"file\" name=\"imageFile\" accept=\"image/*\" class=\"form-control fileupload\" />\n\n### ContosoAdsWorker - WorkerRole.cs - OnStart 方法\n\nAzure 辅助角色环境在辅助角色启动时调用 `WorkerRole` 类中的 `OnStart` 方法，并且它在 `OnStart` 方法结束时调用 `Run` 方法。\n\n`OnStart` 方法从 *.cscfg* 文件获取数据库连接字符串，并将其传递给实体框架 DbContext 类。在默认情况下使用 SQLClient 提供程序，因此不需要指定提供程序。\n\n        var dbConnString = CloudConfigurationManager.GetSetting(\"ContosoAdsDbConnectionString\");\n        db = new ContosoAdsContext(dbConnString);\n\n之后，该方法获取对存储帐户的引用，并创建 blob 容器和队列（如果它们不存在）。此代码类似于你已在 web 角色 `Application_Start` 方法中看到的内容。\n\n### ContosoAdsWorker - WorkerRole.cs - Run method\n\n`Run` 方法完成其初始化工作时调用 `OnStart` 方法。该方法执行监视新队列消息的一个无限循环，并在它们到达时进行处理。\n\n        public override void Run()\n        {\n            CloudQueueMessage msg = null;\n\n            while (true)\n            {\n                try\n                {\n                    msg = this.imagesQueue.GetMessage();\n                    if (msg != null)\n                    {\n                        ProcessQueueMessage(msg);\n                    }\n                    else\n                    {\n                        System.Threading.Thread.Sleep(1000);\n                    }\n                }\n                catch (StorageException e)\n                {\n                    if (msg != null && msg.DequeueCount > 5)\n                    {\n                        this.imagesQueue.DeleteMessage(msg);\n                    }\n                    System.Threading.Thread.Sleep(5000);\n                }\n            }\n        }\n\n循环每次迭代后，如果不找到任何队列消息，该程序休眠一秒钟。此举防止辅助角色导致过多的 CPU 时间和存储事务成本。Microsoft 客户顾问团队讲过一个故事，一位开发人员忘记此操作，部署到生产环境，并去度假了。当他回来时，他的监督费用超过了度假费用。\n\n有时队列消息的内容将在处理过程中导致错误。这称为*有害消息*，并且如果你只记录了一个错误并重启循环，则可能无休止地尝试处理该消息。因此，捕获块包括 if 语句检查应用程序尝试处理当前消息的次数，如果已超过 5 次，将从队列中删除该消息。\n\n找到队列消息时调用 `ProcessQueueMessage`。\n\n        private void ProcessQueueMessage(CloudQueueMessage msg)\n        {\n            var adId = int.Parse(msg.AsString);\n            Ad ad = db.Ads.Find(adId);\n            if (ad == null)\n            {\n                throw new Exception(String.Format(\"AdId {0} not found, can't create thumbnail\", adId.ToString()));\n            }\n\n            CloudBlockBlob inputBlob = this.imagesBlobContainer.GetBlockBlobReference(ad.ImageURL);\n\n            string thumbnailName = Path.GetFileNameWithoutExtension(inputBlob.Name) + \"thumb.jpg\";\n            CloudBlockBlob outputBlob = this.imagesBlobContainer.GetBlockBlobReference(thumbnailName);\n\n            using (Stream input = inputBlob.OpenRead())\n            using (Stream output = outputBlob.OpenWrite())\n            {\n                ConvertImageToThumbnailJPG(input, output);\n                outputBlob.Properties.ContentType = \"image/jpeg\";\n            }\n\n            ad.ThumbnailURL = outputBlob.Uri.ToString();\n            db.SaveChanges();\n\n            this.imagesQueue.DeleteMessage(msg);\n        }\n\n此代码读取数据库以获取图像 URL、将图像转换为一个缩略图、在 blob 中保存缩略图、用缩略图 blob URL 更新数据库并删除队列消息。\n\n>[AZURE.NOTE] 为简单起见，`ConvertImageToThumbnailJPG` 方法中的代码使用 System.Drawing 命名空间中的类。但是，此命名空间中的类已设计用于 Windows 窗体。不支持在 Windows 或 ASP.NET 服务中使用。有关图像处理选项的详细信息，请参阅[动态图像生成](http://www.hanselman.com/blog/BackToBasicsDynamicImageGenerationASPNETControllersRoutingIHttpHandlersAndRunAllManagedModulesForAllRequests.aspx)和[深入学习图像大小调整](http://www.hanselminutes.com/313/deep-inside-image-resizing-and-scaling-with-aspnet-and-iis-with-imageresizingnet-author-na)。\n\n## 故障排除\n\n当您按本教程中的说明操作时，如果出现异常现象，请参考如下常见错误信息和解决方法。\n\n### ServiceRuntime.RoleEnvironmentException\n\n在 Azure 中运行应用程序或使用 Azure 计算模拟器本地运行时，`RoleEnvironment` 对象由 Azure 提供。如果您在本地运行时收到此错误，请确保您已将 ContosoAdsCloudService 项目设为启动项目。这将项目设置为使用 Azure 计算仿真程序运行。\n\n应用程序使用 Azure RoleEnvironment 的内容之一是获取 *.cscfg* 文件中存储的连接字符串值，所以此异常的另一个原因是丢失连接字符串。确保在 ContosoAdsWeb 项目中为云和本地配置创建 StorageConnectionString 设置，并且您将在 ContosoAdsWorker 项目中为两个配置创建两个连接字符串。如果为整个解决方案中的 StorageConnectionString 进行**查找全部**搜索，你应在 6 个文件中看到它 9 次。\n\n### 无法重写到端口 xxx。低于最小允许值 8080 的新端口用于 http 协议\n\n请尝试更改 web 项目使用的端口号。右键单击 ContosoAdsWeb 项目，然后单击“属性”。单击“Web”选项卡，然后更改“项目 Url”设置中的端口号。\n\n有关可能解决该问题的另一种方法，请参阅下一节。\n\n### 在本地运行时出现其他错误\n\n默认情况下新的云服务项目使用 Azure 计算模拟器 express 版来模拟 Azure 环境。这是完整计算仿真程序的轻型版本，在某些情况下完整仿真程序将在没有 express 版时工作。\n\n若要更改项目以使用完整模拟器，请右键单击 ContosoAdsCloudService 项目中，然后单击“属性”。在“属性”窗口中，单击“Web”选项卡，然后单击“使用完整模拟器”单选按钮。\n\n要使用完整仿真程序运行该应用程序，您必须使用管理员权限打开 Visual Studio。\n\n## 后续步骤\n\nContoso 广告应用程序有意保持入门教程的简单性。例如，它没有实施[依赖关系注入](http://www.asp.net/mvc/tutorials/hands-on-labs/aspnet-mvc-4-dependency-injection)或[存储库和单元的工作模式](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#repo)，它不[使用日志记录接口](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log)，它不使用 [EF Code First 迁移](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application)来管理数据模型更改，或使用 [EF 连接复原](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/connection-resiliency-and-command-interception-with-the-entity-framework-in-an-asp-net-mvc-application)管理暂时性的网络错误等。\n\n下面是演示更实际编码方法的一些云服务示例应用程序，从不太复杂到更复杂排列：\n\n* [PhluffyFotos](http://code.msdn.microsoft.com/PhluffyFotos-Sample-7ecffd31)。在概念上与 Contoso 广告类似，但实施更多的功能和详细的实际编码做法。\n* [带有表、队列和 Blob 的 Azure 云服务多层应用程序](http://code.msdn.microsoft.com/windowsazure/Windows-Azure-Multi-Tier-eadceb36)。引入了 Azure 存储表以及 Blob 和队列。基于旧版 Azure SDK for .NET，需做一些修改才能配合当前版本。\n* [Azure 中的云服务基础知识](http://code.msdn.microsoft.com/Cloud-Service-Fundamentals-4ca72649)。一个综合示例，演示各种最佳实践，由 Microsoft 模式和实践组生产。\n\n有关云开发的常规信息，请参阅[使用 Azure 构建实际的云应用](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/introduction)。\n\n有关详细信息，请参阅以下资源：\n\n* [Azure 云服务的第 1 部分：简介](http://justazure.com/microsoft-azure-cloud-services-part-1-introduction)\n* [如何管理云服务](/documentation/articles/cloud-services-how-to-manage)\n* [Azure 存储空间](/documentation/services/storage)\n\n<!---HONumber=Mooncake_0215_2016-->"
}