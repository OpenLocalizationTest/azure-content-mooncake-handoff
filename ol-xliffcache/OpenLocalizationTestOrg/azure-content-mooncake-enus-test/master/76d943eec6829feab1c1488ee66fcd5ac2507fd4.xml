{
  "nodes": [
    {
      "content": "通知中心 - 企业推送架构",
      "pos": [
        28,
        41
      ]
    },
    {
      "content": "有关在企业环境中使用 Azure 通知中心的指南",
      "pos": [
        61,
        85
      ]
    },
    {
      "content": "企业推送架构指南",
      "pos": [
        312,
        320
      ]
    },
    {
      "content": "当今企业正在逐渐趋向为其最终用户（外部）或员工（内部）创建移动应用程序。它们已经拥有现成的后端系统，无论是大型机还是一些 LoB 应用程序都必须集成到移动应用程序体系结构中。本指南将介绍如何最好地实现此集成，并针对常见场景建议可能的解决方案。",
      "pos": [
        322,
        443
      ]
    },
    {
      "content": "一个常见需求是在后端系统中发生了用户感兴趣的事件时，通过其移动应用程序向用户发送推送通知。例如，某个在 iPhone 上安装了银行应用的客户想要在记入她帐户的借方金额超过特定值时收到通知，或者在 Intranet 方案中，某个在 Windows Phone 上安装了预算审批应用的财务部门员工，希望在收到审批请求时获得通知。",
      "pos": [
        445,
        607
      ]
    },
    {
      "content": "银行帐户或审批处理很可能要在某个后端系统中完成，该系统必须启动到用户的推送。可能有多个此类后端系统，所有这些系统在事件触发通知时都必须生成同样的逻辑来实现推送。此处的复杂性在于将多个后端系统与单个推送系统集成在一起，在此系统中，最终用户可能已订阅不同通知，甚至可能存在多个移动应用程序，例如，对于 Intranet 移动应用来说，一个移动应用程序可能需要从多个此类后端系统接收通知。后端系统不知道或不需要知道推送语义/技术，因此在这里常见的解决方案通常是引入一个组件，该组件轮询后端系统是否有任何感兴趣的事件并负责将推送消息发送到客户端。在这里我们将讨论一个更好的解决方案，该解决方案使用 Azure Service Bus - 主题/订阅模型，在使解决方案可缩放的同时降低了复杂性。",
      "pos": [
        609,
        951
      ]
    },
    {
      "content": "下面是该解决方案的一般体系结构（普遍用于多个移动应用，但在只有一个移动应用时也同样适用）",
      "pos": [
        953,
        997
      ]
    },
    {
      "content": "体系结构",
      "pos": [
        1002,
        1006
      ]
    },
    {
      "pos": [
        1016,
        1413
      ],
      "content": "此体系结构图中的关键部分是 Azure 服务总线，它提供了主题/订阅编程模型（可在<bpt id=\"p1\">[</bpt><ept id=\"p1\">服务总线 Pub/Sub 编程]</ept>中找到有关它的更多内容）。接收方，在本示例中是移动后端（通常是 <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure 移动服务]</ept>，它将启动到移动应用的推送）不直接从后端系统接收消息，我们改用 <bpt id=\"p3\">[</bpt><ept id=\"p3\">Azure 服务总线]</ept>提供的中间抽象层，移动后端通过它可从一个或多个后端系统接收消息。需要为每个后端系统（例如，帐户、人力资源、财务，这些基本上是感兴趣的“主题”，将启动要作为推送通知发送的消息）创建一个服务总线主题。后端系统会将消息发送到这些主题。移动后端可以通过创建服务总线订阅来订阅一个或多个此类主题。这将授权移动后端从相应的后端系统接收通知。移动后端将继续在其订阅上侦听消息，一条消息到达后，它将立即返回并将该消息作为通知发送到通知中心。然后，通知中心最终将该消息传送到移动应用。因此，若要汇总关键组件，我们使用了："
    },
    {
      "content": "后端系统（LoB/旧系统）",
      "pos": [
        1418,
        1431
      ]
    },
    {
      "content": "创建服务总线主题",
      "pos": [
        1438,
        1446
      ]
    },
    {
      "content": "发送消息",
      "pos": [
        1453,
        1457
      ]
    },
    {
      "content": "移动后端",
      "pos": [
        1461,
        1465
      ]
    },
    {
      "content": "创建服务订阅",
      "pos": [
        1472,
        1478
      ]
    },
    {
      "content": "接收消息（来自后端系统）",
      "pos": [
        1485,
        1497
      ]
    },
    {
      "content": "将通知发送到客户端（通过 Azure 通知中心）",
      "pos": [
        1504,
        1528
      ]
    },
    {
      "content": "移动 应用程序",
      "pos": [
        1532,
        1539
      ]
    },
    {
      "content": "接收并显示通知",
      "pos": [
        1546,
        1553
      ]
    },
    {
      "content": "好处：",
      "pos": [
        1566,
        1569
      ]
    },
    {
      "content": "接收方（通过通知中心的移动应用/服务）和发送方（后端系统）之间的这种解耦使得只需要最小的更改即可集成其他后端系统。",
      "pos": [
        1574,
        1631
      ]
    },
    {
      "content": "这还使得采用多个移动应用的方案能够从一个或多个后端系统接收事件。",
      "pos": [
        1635,
        1667
      ]
    },
    {
      "content": "示例：",
      "pos": [
        1674,
        1677
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        1682,
        1686
      ]
    },
    {
      "content": "你应完成以下教程以熟悉相关概念以及常见的创建和配置步骤：",
      "pos": [
        1687,
        1715
      ]
    },
    {
      "pos": [
        1720,
        1794
      ],
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">服务总线 Pub/Sub 编程]</ept> - 此教程说明了使用服务总线主题/订阅的详细信息、如何创建命名空间以包含主题/订阅、如何通过它们发送和接收消息。"
    },
    {
      "pos": [
        1799,
        1868
      ],
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">通知中心 - Windows 通用教程]</ept> - 此教程说明了如何设置 Windows 应用商店应用以及如何使用通知中心注册，然后接收通知。"
    },
    {
      "content": "代码示例",
      "pos": [
        1874,
        1878
      ]
    },
    {
      "pos": [
        1880,
        1909
      ],
      "content": "完整的示例代码可在<bpt id=\"p1\">[</bpt><ept id=\"p1\">通知中心示例]</ept>中找到。它分为三个组件："
    },
    {
      "content": "EnterprisePushBackendSystem",
      "pos": [
        1916,
        1943
      ]
    },
    {
      "pos": [
        1955,
        2020
      ],
      "content": "a.此项目使用 <bpt id=\"p1\">*</bpt>WindowsAzure.ServiceBus<ept id=\"p1\">*</ept> Nuget 包，并基于<bpt id=\"p2\">[</bpt><ept id=\"p2\">服务总线 Pub/Sub 编程]</ept>构建。"
    },
    {
      "content": "b.这是一个简单 C# 控制台应用，模拟启动要传送到移动应用的消息的 LoB 系统。",
      "pos": [
        2026,
        2068
      ]
    },
    {
      "content": "c.",
      "pos": [
        2457,
        2459
      ]
    },
    {
      "content": "<ph id=\"ph1\">`CreateTopic`</ph> 用于创建我们将消息发送到的服务总线主题。",
      "pos": [
        2460,
        2494
      ]
    },
    {
      "content": "d.",
      "pos": [
        2909,
        2911
      ]
    },
    {
      "content": "<ph id=\"ph1\">`SendMessage`</ph> 用于将消息发送到此服务总线主题。出于本示例的目的，此处我们只定期向此主题发送一组随机消息。通常将有在事件发生时发送消息的后端系统。",
      "pos": [
        2912,
        2991
      ]
    },
    {
      "content": "ReceiveAndSendNotification",
      "pos": [
        4088,
        4114
      ]
    },
    {
      "pos": [
        4122,
        4221
      ],
      "content": "a.此项目使用 <bpt id=\"p1\">*</bpt>WindowsAzure.ServiceBus<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>Microsoft.Web.WebJobs.Publish<ept id=\"p2\">*</ept> Nuget 包，并基于<bpt id=\"p3\">[</bpt><ept id=\"p3\">服务总线 Pub/Sub 编程]</ept>构建。"
    },
    {
      "pos": [
        4227,
        4308
      ],
      "content": "b.这是另一个 C# 控制台应用，我们将它作为 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure WebJob]</ept> 运行，因为它必须连续运行以侦听来自 LoB/后端系统的消息。它将是移动后端的一部分。"
    },
    {
      "content": "c.",
      "pos": [
        4739,
        4741
      ]
    },
    {
      "content": "<ph id=\"ph1\">`CreateSubscription`</ph> 用于为后端系统将消息发送到的主题创建服务总线订阅。此组件将根据业务方案，为相应主题创建一个或多个订阅（例如，一些订阅可能从人力资源系统接收消息，一些订阅从财务系统接收消息，等等）",
      "pos": [
        4742,
        4852
      ]
    },
    {
      "content": "d.ReceiveMessageAndSendNotification 用于从使用其订阅的主题读取消息，如果读取成功，则构建要使用 Azure 通知中心发送到移动应用程序的通知（在此示例方案中为 Windows 本机 toast 通知）。",
      "pos": [
        5327,
        5446
      ]
    },
    {
      "pos": [
        7490,
        7555
      ],
      "content": "e.若要将此项发布为 <bpt id=\"p1\">**</bpt>WebJob<ept id=\"p1\">**</ept>，请右键单击 Visual Studio 中的解决方案，然后选择“发布为 WebJob”"
    },
    {
      "content": "f.选择发布配置文件并创建新的 Azure 网站（如果它尚未存在），该网站将托管此 WebJob，拥有该网站后，单击“发布”。",
      "pos": [
        7573,
        7636
      ]
    },
    {
      "content": "g.将该作业配置为“连续运行”，以便在你登录到 Azure 管理门户时，应看到如下内容：",
      "pos": [
        7658,
        7702
      ]
    },
    {
      "content": "EnterprisePushMobileApp",
      "pos": [
        7722,
        7745
      ]
    },
    {
      "pos": [
        7753,
        7844
      ],
      "content": "a.这是一个 Windows 应用商店应用程序，它将从作为移动后端的一部分运行的 WebJob 接收 toast 通知并显示它。这基于<bpt id=\"p1\">[</bpt><ept id=\"p1\">通知中心 - Windows 通用教程]</ept>构建。"
    },
    {
      "content": "b.确保应用程序已启用接收 toast 通知。",
      "pos": [
        7854,
        7877
      ]
    },
    {
      "pos": [
        7883,
        7961
      ],
      "content": "c.确保在应用启动时（替换 <bpt id=\"p1\">*</bpt>HubName<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>DefaultListenSharedAccessSignature<ept id=\"p2\">*</ept> 后）调用以下通知中心注册代码："
    },
    {
      "content": "运行示例：",
      "pos": [
        8672,
        8677
      ]
    },
    {
      "content": "确保你的 WebJob 成功运行并且计划为“连续运行”。",
      "pos": [
        8682,
        8710
      ]
    },
    {
      "pos": [
        8715,
        8766
      ],
      "content": "运行 <bpt id=\"p1\">**</bpt>EnterprisePushMobileApp<ept id=\"p1\">**</ept>，这将启动 Windows 应用商店应用。"
    },
    {
      "pos": [
        8771,
        8855
      ],
      "content": "运行 <bpt id=\"p1\">**</bpt>EnterprisePushBackendSystem<ept id=\"p1\">**</ept> 控制台应用程序，这将模拟 LoB 后端并将开始发送消息，你应该会看到如下所示的 toast 通知："
    },
    {
      "content": "消息最初发送到正被 Web 作业中的服务总线订阅监视的服务总线主题。收到消息后，将创建通知并将其发送到移动应用。当你转到 Azure 管理门户中 Web 作业的“日志”链接时，可以仔细查看 WebJob 日志来确认处理：",
      "pos": [
        8873,
        8983
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"通知中心 - 企业推送架构\" \n    description=\"有关在企业环境中使用 Azure 通知中心的指南\" \n    services=\"notification-hubs\" \n    documentationCenter=\"\" \n    authors=\"wesmc7777\"\n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"11/20/2015\" \n    wacn.date=\"01/14/2016\"/>\n\n# 企业推送架构指南\n\n当今企业正在逐渐趋向为其最终用户（外部）或员工（内部）创建移动应用程序。它们已经拥有现成的后端系统，无论是大型机还是一些 LoB 应用程序都必须集成到移动应用程序体系结构中。本指南将介绍如何最好地实现此集成，并针对常见场景建议可能的解决方案。\n\n一个常见需求是在后端系统中发生了用户感兴趣的事件时，通过其移动应用程序向用户发送推送通知。例如，某个在 iPhone 上安装了银行应用的客户想要在记入她帐户的借方金额超过特定值时收到通知，或者在 Intranet 方案中，某个在 Windows Phone 上安装了预算审批应用的财务部门员工，希望在收到审批请求时获得通知。\n\n银行帐户或审批处理很可能要在某个后端系统中完成，该系统必须启动到用户的推送。可能有多个此类后端系统，所有这些系统在事件触发通知时都必须生成同样的逻辑来实现推送。此处的复杂性在于将多个后端系统与单个推送系统集成在一起，在此系统中，最终用户可能已订阅不同通知，甚至可能存在多个移动应用程序，例如，对于 Intranet 移动应用来说，一个移动应用程序可能需要从多个此类后端系统接收通知。后端系统不知道或不需要知道推送语义/技术，因此在这里常见的解决方案通常是引入一个组件，该组件轮询后端系统是否有任何感兴趣的事件并负责将推送消息发送到客户端。在这里我们将讨论一个更好的解决方案，该解决方案使用 Azure Service Bus - 主题/订阅模型，在使解决方案可缩放的同时降低了复杂性。\n\n下面是该解决方案的一般体系结构（普遍用于多个移动应用，但在只有一个移动应用时也同样适用）\n\n## 体系结构\n\n![][1]\n\n此体系结构图中的关键部分是 Azure 服务总线，它提供了主题/订阅编程模型（可在[服务总线 Pub/Sub 编程]中找到有关它的更多内容）。接收方，在本示例中是移动后端（通常是 [Azure 移动服务]，它将启动到移动应用的推送）不直接从后端系统接收消息，我们改用 [Azure 服务总线]提供的中间抽象层，移动后端通过它可从一个或多个后端系统接收消息。需要为每个后端系统（例如，帐户、人力资源、财务，这些基本上是感兴趣的“主题”，将启动要作为推送通知发送的消息）创建一个服务总线主题。后端系统会将消息发送到这些主题。移动后端可以通过创建服务总线订阅来订阅一个或多个此类主题。这将授权移动后端从相应的后端系统接收通知。移动后端将继续在其订阅上侦听消息，一条消息到达后，它将立即返回并将该消息作为通知发送到通知中心。然后，通知中心最终将该消息传送到移动应用。因此，若要汇总关键组件，我们使用了：\n\n1. 后端系统（LoB/旧系统）\n    - 创建服务总线主题\n    - 发送消息\n2. 移动后端\n    - 创建服务订阅\n    - 接收消息（来自后端系统）\n    - 将通知发送到客户端（通过 Azure 通知中心）\n3. 移动 应用程序\n    - 接收并显示通知\n        \n###好处：\n\n1. 接收方（通过通知中心的移动应用/服务）和发送方（后端系统）之间的这种解耦使得只需要最小的更改即可集成其他后端系统。\n2. 这还使得采用多个移动应用的方案能够从一个或多个后端系统接收事件。  \n\n## 示例：\n\n###先决条件\n你应完成以下教程以熟悉相关概念以及常见的创建和配置步骤：\n\n1. [服务总线 Pub/Sub 编程] - 此教程说明了使用服务总线主题/订阅的详细信息、如何创建命名空间以包含主题/订阅、如何通过它们发送和接收消息。 \n2. [通知中心 - Windows 通用教程] - 此教程说明了如何设置 Windows 应用商店应用以及如何使用通知中心注册，然后接收通知。 \n\n###代码示例\n\n完整的示例代码可在[通知中心示例]中找到。它分为三个组件：\n\n1. **EnterprisePushBackendSystem**\n    \n    a.此项目使用 *WindowsAzure.ServiceBus* Nuget 包，并基于[服务总线 Pub/Sub 编程]构建。\n\n    b.这是一个简单 C# 控制台应用，模拟启动要传送到移动应用的消息的 LoB 系统。\n    \n        static void Main(string[] args)\n        {\n            string connectionString =\n                CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n            // Create the topic where we will send notifications\n            CreateTopic(connectionString);\n\n            // Send message\n            SendMessage(connectionString);\n        }\n    \n    c. `CreateTopic` 用于创建我们将消息发送到的服务总线主题。\n\n        public static void CreateTopic(string connectionString)\n        {\n            // Create the topic if it does not exist already\n\n            var namespaceManager =\n                NamespaceManager.CreateFromConnectionString(connectionString);\n\n            if (!namespaceManager.TopicExists(sampleTopic))\n            {\n                namespaceManager.CreateTopic(sampleTopic);\n            }\n        }\n\n    d. `SendMessage` 用于将消息发送到此服务总线主题。出于本示例的目的，此处我们只定期向此主题发送一组随机消息。通常将有在事件发生时发送消息的后端系统。\n\n        public static void SendMessage(string connectionString)\n        {\n            TopicClient client =\n                TopicClient.CreateFromConnectionString(connectionString, sampleTopic);\n\n            // Sends random messages every 10 seconds to the topic\n            string[] messages = \n            {\n                \"Employee Id '{0}' has joined.\",\n                \"Employee Id '{0}' has left.\",\n                \"Employee Id '{0}' has switched to a different team.\"\n            };\n\n            while (true)\n            {\n                Random rnd = new Random();\n                string employeeId = rnd.Next(10000, 99999).ToString();\n                string notification = String.Format(messages[rnd.Next(0,messages.Length)], employeeId);\n\n                // Send Notification\n                BrokeredMessage message = new BrokeredMessage(notification);\n                client.Send(message);\n\n                Console.WriteLine(\"{0} Message sent - '{1}'\", DateTime.Now, notification);\n\n                System.Threading.Thread.Sleep(new TimeSpan(0, 0, 10));\n            }\n        }\n\n2. **ReceiveAndSendNotification**\n\n    a.此项目使用 *WindowsAzure.ServiceBus* 和 *Microsoft.Web.WebJobs.Publish* Nuget 包，并基于[服务总线 Pub/Sub 编程]构建。\n\n    b.这是另一个 C# 控制台应用，我们将它作为 [Azure WebJob] 运行，因为它必须连续运行以侦听来自 LoB/后端系统的消息。它将是移动后端的一部分。\n\n        static void Main(string[] args)\n        {\n            string connectionString =\n                     CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n    \n            // Create the subscription which will receive messages\n            CreateSubscription(connectionString);   \n    \n            // Receive message\n            ReceiveMessageAndSendNotification(connectionString);\n        }\n\n    c. `CreateSubscription` 用于为后端系统将消息发送到的主题创建服务总线订阅。此组件将根据业务方案，为相应主题创建一个或多个订阅（例如，一些订阅可能从人力资源系统接收消息，一些订阅从财务系统接收消息，等等）\n\n        static void CreateSubscription(string connectionString)\n        {\n            // Create the subscription if it does not exist already\n            var namespaceManager =\n                NamespaceManager.CreateFromConnectionString(connectionString);\n\n            if (!namespaceManager.SubscriptionExists(sampleTopic, sampleSubscription))\n            {\n                namespaceManager.CreateSubscription(sampleTopic, sampleSubscription);\n            }\n        }\n\n    d.ReceiveMessageAndSendNotification 用于从使用其订阅的主题读取消息，如果读取成功，则构建要使用 Azure 通知中心发送到移动应用程序的通知（在此示例方案中为 Windows 本机 toast 通知）。\n\n        static void ReceiveMessageAndSendNotification(string connectionString)\n        {\n            // Initialize the Notification Hub\n            string hubConnectionString = CloudConfigurationManager.GetSetting\n                    (\"Microsoft.NotificationHub.ConnectionString\");\n            hub = NotificationHubClient.CreateClientFromConnectionString\n                    (hubConnectionString, \"enterprisepushservicehub\");\n            \n            SubscriptionClient Client =\n                SubscriptionClient.CreateFromConnectionString\n                        (connectionString, sampleTopic, sampleSubscription);\n\n            Client.Receive();\n\n            // Continuously process messages received from the subscription \n            while (true)\n            {\n                BrokeredMessage message = Client.Receive();\n                var toastMessage = @\"<toast><visual><binding template=\"\"ToastText01\"\"><text id=\"\"1\"\">{messagepayload}</text></binding></visual></toast>\";\n\n                if (message != null)\n                {\n                    try\n                    {\n                        Console.WriteLine(message.MessageId);\n                        Console.WriteLine(message.SequenceNumber);\n                        string messageBody = message.GetBody<string>();\n                        Console.WriteLine(\"Body: \" + messageBody + \"\\n\");\n\n                        toastMessage = toastMessage.Replace(\"{messagepayload}\", messageBody);\n                        SendNotificationAsync(toastMessage);\n\n                        // Remove message from subscription\n                        message.Complete();\n                    }\n                    catch (Exception)\n                    {\n                        // Indicate a problem, unlock message in subscription\n                        message.Abandon();\n                    }\n                }\n            } \n        }\n        static async void SendNotificationAsync(string message)\n        {\n            await hub.SendWindowsNativeNotificationAsync(message);\n        }\n\n    e.若要将此项发布为 **WebJob**，请右键单击 Visual Studio 中的解决方案，然后选择“发布为 WebJob”\n\n    ![][2]\n\n    f.选择发布配置文件并创建新的 Azure 网站（如果它尚未存在），该网站将托管此 WebJob，拥有该网站后，单击“发布”。\n    \n    ![][3]\n\n    g.将该作业配置为“连续运行”，以便在你登录到 Azure 管理门户时，应看到如下内容：\n\n    ![][4]\n\n\n3. **EnterprisePushMobileApp**\n\n    a.这是一个 Windows 应用商店应用程序，它将从作为移动后端的一部分运行的 WebJob 接收 toast 通知并显示它。这基于[通知中心 - Windows 通用教程]构建。\n    \n    b.确保应用程序已启用接收 toast 通知。\n\n    c.确保在应用启动时（替换 *HubName* 和 *DefaultListenSharedAccessSignature* 后）调用以下通知中心注册代码：\n\n        private async void InitNotificationsAsync()\n        {\n            var channel = await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();\n\n            var hub = new NotificationHub(\"[HubName]\", \"[DefaultListenSharedAccessSignature]\");\n            var result = await hub.RegisterNativeAsync(channel.Uri);\n\n            // Displays the registration ID so you know it was successful\n            if (result.RegistrationId != null)\n            {\n                var dialog = new MessageDialog(\"Registration successful: \" + result.RegistrationId);\n                dialog.Commands.Add(new UICommand(\"OK\"));\n                await dialog.ShowAsync();\n            }\n        }\n\n### 运行示例：\n\n1. 确保你的 WebJob 成功运行并且计划为“连续运行”。 \n2. 运行 **EnterprisePushMobileApp**，这将启动 Windows 应用商店应用。 \n3. 运行 **EnterprisePushBackendSystem** 控制台应用程序，这将模拟 LoB 后端并将开始发送消息，你应该会看到如下所示的 toast 通知： \n\n    ![][5]\n\n4. 消息最初发送到正被 Web 作业中的服务总线订阅监视的服务总线主题。收到消息后，将创建通知并将其发送到移动应用。当你转到 Azure 管理门户中 Web 作业的“日志”链接时，可以仔细查看 WebJob 日志来确认处理：\n\n    ![][6]\n\n<!-- Images -->\n[1]: ./media/notification-hubs-enterprise-push-architecture/architecture.png\n[2]: ./media/notification-hubs-enterprise-push-architecture/WebJobsContextMenu.png\n[3]: ./media/notification-hubs-enterprise-push-architecture/PublishAsWebJob.png\n[4]: ./media/notification-hubs-enterprise-push-architecture/WebJob.png\n[5]: ./media/notification-hubs-enterprise-push-architecture/Notifications.png\n[6]: ./media/notification-hubs-enterprise-push-architecture/WebJobsLog.png\n\n<!-- Links -->\n[通知中心示例]: https://github.com/Azure/azure-notificationhubs-samples\n[Azure 移动服务]: /home/features/mobile-services/\n[Azure 服务总线]: /documentation/articles/service-bus-fundamentals-hybrid-solutions\n[服务总线 Pub/Sub 编程]: /documentation/articles/service-bus-dotnet-how-to-use-topics-subscriptions\n[Azure WebJob]: /documentation/articles/web-sites-create-web-jobs\n[通知中心 - Windows 通用教程]: /documentation/articles/notification-hubs-windows-store-dotnet-get-started\n\n<!---HONumber=Mooncake_0104_2016-->"
}