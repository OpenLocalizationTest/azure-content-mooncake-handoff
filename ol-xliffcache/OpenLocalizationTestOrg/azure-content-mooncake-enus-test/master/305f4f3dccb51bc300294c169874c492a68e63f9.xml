{
  "nodes": [
    {
      "content": "如何为Azure存储的Blob创建SAS（共享访问签名）令牌",
      "pos": [
        28,
        58
      ]
    },
    {
      "content": "如何为Blob创建SAS令牌",
      "pos": [
        78,
        92
      ]
    },
    {
      "content": "如何为Azure存储的Blob创建SAS（共享访问签名）令牌",
      "pos": [
        259,
        289
      ]
    },
    {
      "pos": [
        291,
        473
      ],
      "content": "存储账号名称和存储账号密钥是操作存储账号的重要的信息，一旦存储账号外泄，存储账号内的资源将会完全暴露。SAS可以帮助我们避免存储账户密钥的泄露，请阅读<bpt id=\"p1\">[</bpt>这篇文章<ept id=\"p1\">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>了解SAS的详细的概念，文章中也包含了令牌中各个参数的含义。"
    },
    {
      "content": "这篇文章将帮助我们创建SAS令牌",
      "pos": [
        475,
        491
      ]
    },
    {
      "content": ".Net的方式创建SAS令牌",
      "pos": [
        495,
        509
      ]
    },
    {
      "content": "PowerShell的方式创建SAS令牌",
      "pos": [
        512,
        532
      ]
    },
    {
      "content": "Rest API的方式创建Blob的SAS令牌",
      "pos": [
        535,
        558
      ]
    },
    {
      "content": ".Net的方式创建SAS令牌",
      "pos": [
        563,
        577
      ]
    },
    {
      "content": "关于.Net的方式创建SAS令牌请阅读下面的文章：",
      "pos": [
        579,
        604
      ]
    },
    {
      "content": "创建SAS并将SAS用于Blob服务",
      "pos": [
        607,
        625
      ]
    },
    {
      "content": "PowerShell的方式创建SAS 令牌",
      "pos": [
        701,
        722
      ]
    },
    {
      "pos": [
        725,
        831
      ],
      "content": "使用Powershell前有关Azure PowerShell的安装、配置和连接到订阅请阅读<bpt id=\"p1\">[</bpt>这篇文章<ept id=\"p1\">](/documentation/articles/powershell-install-configure)</ept>"
    },
    {
      "content": "下面内容包含：",
      "pos": [
        833,
        840
      ]
    },
    {
      "content": "创建容器的临时SAS令牌",
      "pos": [
        844,
        856
      ]
    },
    {
      "content": "为Blob创建临时SAS令牌",
      "pos": [
        859,
        873
      ]
    },
    {
      "content": "根据容器临时SAS令牌上传文件",
      "pos": [
        876,
        891
      ]
    },
    {
      "content": "给容器指定存储访问策略",
      "pos": [
        894,
        905
      ]
    },
    {
      "content": "为Blob创建具有存储访问策略的SAS令牌",
      "pos": [
        908,
        929
      ]
    },
    {
      "content": "如何为容器和Blob创建SAS令牌",
      "pos": [
        933,
        950
      ]
    },
    {
      "pos": [
        1866,
        1963
      ],
      "content": "参考文档： <bpt id=\"p1\">[</bpt>临时SAS和具有存储访问策略的SAS<ept id=\"p1\">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>"
    },
    {
      "content": "PowerShell指令：<bpt id=\"p1\">[</bpt>New-AzureStorageContainerSASToken<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn584416.aspx)</ept>、",
      "pos": [
        1965,
        2076
      ]
    },
    {
      "content": "New-AzureStorageBlobSASToken",
      "pos": [
        2078,
        2106
      ]
    },
    {
      "content": "如何在已知SAS令牌的情况下来使用",
      "pos": [
        2197,
        2214
      ]
    },
    {
      "content": "结果：",
      "pos": [
        2821,
        2824
      ]
    },
    {
      "pos": [
        2909,
        2973
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意<ept id=\"p1\">**</ept>:在创建临时SAS中我们赋予了read、write和list权限，如果没有write权限上述上传将会报错具体如下所示"
    },
    {
      "content": "创建具有存储访问策略的Blob的SAS令牌",
      "pos": [
        3294,
        3315
      ]
    },
    {
      "content": "存储策略的好处可以更方便我们管理SAS。它比临时SAS多了以下功能",
      "pos": [
        4736,
        4769
      ]
    },
    {
      "content": "删除存储访问策略吊销SAS",
      "pos": [
        4773,
        4786
      ]
    },
    {
      "content": "设置存储访问策略的过期时间来吊销SAS",
      "pos": [
        4789,
        4808
      ]
    },
    {
      "content": "可以通过上述方式批量吊销SAS",
      "pos": [
        4811,
        4826
      ]
    },
    {
      "pos": [
        4828,
        4924
      ],
      "content": "关于吊销SAS的更详细信息，请阅读<bpt id=\"p1\">[</bpt>这篇文章<ept id=\"p1\">](/documentation/articles/storage-dotnet-shared-access-signature-part-1/)</ept>。"
    },
    {
      "content": "Rest API的方式创建Blob的SAS令牌",
      "pos": [
        4928,
        4951
      ]
    },
    {
      "pos": [
        4953,
        5178
      ],
      "content": "参考文档：<bpt id=\"p1\">[</bpt>共享访问签名的示例<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn140256.aspx)</ept>、<bpt id=\"p2\">[</bpt>建立存储的访问策略<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/dn140257.aspx)</ept>、<bpt id=\"p3\">[</bpt>构造服务 SAS<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/dn140255.aspx)</ept>"
    },
    {
      "content": "通过Rest API方式创建临时SAS",
      "pos": [
        5182,
        5201
      ]
    },
    {
      "content": "通过Rest API方式创建具有存储访问策略的SAS",
      "pos": [
        5204,
        5230
      ]
    },
    {
      "content": "通过Rest API方式创建临时SAS",
      "pos": [
        5236,
        5255
      ]
    },
    {
      "content": "通过Rest API方式创建具有存储访问策略的SAS",
      "pos": [
        7734,
        7760
      ]
    },
    {
      "content": "使用上述PowerShell操作过程中创建的存储访问策略\"policy1\"，有关Rest API方式创建存储访问策略请阅读<bpt id=\"p1\">[</bpt>这篇文章<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dd179391.aspx)</ept>。",
      "pos": [
        7761,
        7891
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何为Azure存储的Blob创建SAS（共享访问签名）令牌\" \n    description=\"如何为Blob创建SAS令牌\" \n    services=\"storage\" \n    documentationCenter=\"\" \n    authors=\"\"\n    manager=\"\" \n    editor=\"\"/>\n<tags ms.service=\"storage\" ms.date=\"\" wacn.date=\"02/01/2016\"/>\n\n#如何为Azure存储的Blob创建SAS（共享访问签名）令牌\n\n存储账号名称和存储账号密钥是操作存储账号的重要的信息，一旦存储账号外泄，存储账号内的资源将会完全暴露。SAS可以帮助我们避免存储账户密钥的泄露，请阅读[这篇文章](/documentation/articles/storage-dotnet-shared-access-signature-part-1)了解SAS的详细的概念，文章中也包含了令牌中各个参数的含义。\n\n这篇文章将帮助我们创建SAS令牌\n\n- .Net的方式创建SAS令牌\n- PowerShell的方式创建SAS令牌\n- Rest API的方式创建Blob的SAS令牌\n\n\n##.Net的方式创建SAS令牌\n\n关于.Net的方式创建SAS令牌请阅读下面的文章：\n\n[创建SAS并将SAS用于Blob服务](/documentation/articles/storage-dotnet-shared-access-signature-part-2)\n\n##PowerShell的方式创建SAS 令牌\n\n>使用Powershell前有关Azure PowerShell的安装、配置和连接到订阅请阅读[这篇文章](/documentation/articles/powershell-install-configure)\n\n下面内容包含：\n\n- 创建容器的临时SAS令牌\n- 为Blob创建临时SAS令牌\n- 根据容器临时SAS令牌上传文件\n- 给容器指定存储访问策略\n- 为Blob创建具有存储访问策略的SAS令牌\n\n**如何为容器和Blob创建SAS令牌**\n\n    #定义一些参数\n    $storageAccountName = <storage account name>\n    $storageAccountKey = <storage account key>\n    $containerName = 'sastest'\n\n    #PowerShell的方式创建storage操作的上下文\n    $storageContext = New-AzureStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey\n    \n    #创建一个新的容器\n    $container = New-AzureStorageContainer -Context $storageContext -Name $containerName\n    $cbc = $container.CloudBlobContainer\n    \n    #为容器创建临时SAS (临时SAS和具有存储访问策略的SAS请阅读下面的参考文档)\n    $sasToken = New-AzureStorageContainerSASToken -container $containerName -permission rwl -Context $storageContext\n    write-host $sasToken\n\n    $sasTokenNoWrite = New-AzureStorageContainerSASToken -container $containerName -permission rl -Context $storageContext\n    \n    #为blob创建SAS 令牌\n    New-AzureStorageBlobSASToken -Container 'sastest' -Blob 'test.txt' -Context $storageContext -Permission rw      \n    \n\n参考文档： [临时SAS和具有存储访问策略的SAS](/documentation/articles/storage-dotnet-shared-access-signature-part-1)\n\nPowerShell指令：[New-AzureStorageContainerSASToken](https://msdn.microsoft.com/zh-cn/library/azure/dn584416.aspx)、\n[New-AzureStorageBlobSASToken](https://msdn.microsoft.com/zh-cn/library/f3833d85-ef4e-449e-8e81-1a2367e39026)       \n\n**如何在已知SAS令牌的情况下来使用**\n\n    #在知道Blob容器SAS令牌的客户端创建存储上下文\n    $storageContextClient = New-AzureStorageContext -StorageAccountName $storageAccountName -SASToken $sasToken \n    #这个存储上下文只可以在该容器下做相应的操作并且只能拥有在创建过程中赋予的权限\n    #如果你要继续创建container将会报错\n    New-AzureStorageContainer -Context $storageContextClient -Name 'test1'\n    #错误内容: New-AzureStorageContainer : The remote server returned an error: (403) Forbidden.\n\n    #测试上传文件\n    $ImageToUpload = \"D:\\test.PNG\"\n    Set-AzureStorageBlobContent -Container 'sastest' -File $ImageToUpload -Context $storageContextClient\n\n    #如果知道Blob的SAS令牌的话，我们就可以知道完整的Blob的url，并可以执行相应权限的操作。      \n    \n结果：\n\n![](./media/aog-storage-how-to-create-sas-for-blob/use-sas-token-create-blob.PNG)\n\n**注意**:在创建临时SAS中我们赋予了read、write和list权限，如果没有write权限上述上传将会报错具体如下所示\n\n    $storageContextClientNoWrite = New-AzureStorageContext -StorageAccountName $storageAccountName -SASToken $sasTokenNoWrite\n    Set-AzureStorageBlobContent -container 'sastest' -File $ImageToUpload -Context $storageContextClientNoWrite\n\n![](./media/aog-storage-how-to-create-sas-for-blob/no-write-permission.PNG)\n\n\n**创建具有存储访问策略的Blob的SAS令牌**\n\n    #定义一些参数\n    $storageAccountName = <storage account name>\n    $storageAccountKey = <storage account key>\n    $containerNameWithPolicy = 'sastestwithpolicy'\n\n    #PowerShell的方式创建storage操作的上下文\n    $storageContext = New-AzureStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey\n    \n    #创建一个新的容器\n    $container = New-AzureStorageContainer -Context $storageContext -Name $containerNameWithPolicy\n    $cbc = $container.CloudBlobContainer\n    #为新创建的容器设置存储访问策略\n    $permissions = $cbc.GetPermissions();\n    $policyName = 'policy1'\n    $policy = new-object 'Microsoft.WindowsAzure.Storage.Blob.SharedAccessBlobPolicy'\n    $policy.SharedAccessStartTime = $(Get-Date).ToUniversalTime().AddMinutes(-5)\n    $policy.SharedAccessExpiryTime = $(Get-Date).ToUniversalTime().AddDays(10)\n    $policy.Permissions = \"Read,Write,List,Delete\"\n    $permissions.SharedAccessPolicies.Add($policyName, $policy)\n    $cbc.SetPermissions($permissions);\n    \n    #获取SAS令牌\n    $sas = $cbc.GetSharedAccessSignature($policy, $policyName)\n    Write-Host 'Shared Access Signature= '$($sas.Substring(1))''\n\n    #为blob创建访问策略为policy1的SAS令牌\n    New-AzureStorageBlobSASToken -Container 'sastestwithpolicy' -Policy 'policy1' -Blob 'test.txt' -Context $storageContext\n    \n    #如何删除存储访问策略\n    Remove-AzureStorageContainerStoredAccessPolicy -Container \"sastestwithpolicy\" -context $storageContext -Policy 'policy1'\n\n存储策略的好处可以更方便我们管理SAS。它比临时SAS多了以下功能\n\n- 删除存储访问策略吊销SAS\n- 设置存储访问策略的过期时间来吊销SAS\n- 可以通过上述方式批量吊销SAS\n\n关于吊销SAS的更详细信息，请阅读[这篇文章](/documentation/articles/storage-dotnet-shared-access-signature-part-1/)。\n\n##Rest API的方式创建Blob的SAS令牌\n\n参考文档：[共享访问签名的示例](https://msdn.microsoft.com/zh-cn/library/azure/dn140256.aspx)、[建立存储的访问策略](https://msdn.microsoft.com/zh-cn/library/azure/dn140257.aspx)、[构造服务 SAS](https://msdn.microsoft.com/zh-cn/library/azure/dn140255.aspx)\n\n- 通过Rest API方式创建临时SAS\n- 通过Rest API方式创建具有存储访问策略的SAS\n\n####通过Rest API方式创建临时SAS\n\n        public static string GenerateSAS()\n        {       \n            string accountName = \"sas\";\n            string accountKey = \"<account Key>\";\n            #设置访问权限\n            string signedpermissions = \"r\";\n            #设置临时SAS的过期时间\n            string signedstart = DateTime.UtcNow.ToString(\"O\");\n            string signedexpiry = DateTime.UtcNow.AddDays(1).ToString(\"O\");\n            #设置需要访问的资源\n            string canonicalizedresource = \"/blob/\"+accountName+\"/sastestwithpolicy/test.txt\";\n            #设置提供访问的IP的范围\n            string signedIP = \"\";\n            #指定HTTP协议\n            string signedProtocol = \"\";\n            string signedidentifier = \"\";\n            #指定Rest API版本\n            string signedversion = \"2015-04-05\";\n            #设置响应标头\n            string rscc = \"\";\n            string rscd = \"file; attachment\";\n            string rsce = \"\";\n            string rscl = \"\";\n            string rsct = \"binary\";\n\n            string StringToSign = signedpermissions + \"\\n\" +\n               signedstart + \"\\n\" +\n               signedexpiry + \"\\n\" +\n               canonicalizedresource + \"\\n\" +\n               signedidentifier + \"\\n\" +\n               signedIP + \"\\n\" +\n               signedProtocol + \"\\n\" +\n               signedversion + \"\\n\" +\n               rscc + \"\\n\" +\n               rscd + \"\\n\" +\n               rsce + \"\\n\" +\n               rscl + \"\\n\" +\n               rsct;\n\n            #获取签名（签名是利用 SHA256 算法通过字符串到签名和密钥计算然后使用 Base64 编码进行编码的 HMAC）\n            byte[] SignatureBytes = System.Text.Encoding.UTF8.GetBytes(StringToSign);\n            System.Security.Cryptography.HMACSHA256 SHA256 = new System.Security.Cryptography.HMACSHA256(Convert.FromBase64String(accountKey));\n            string sig = Convert.ToBase64String(SHA256.ComputeHash(SignatureBytes));\n            \n            string sasURL = string.Format(\"http://{0}.blob.core.chinacloudapi.cn/sastestwithpolicy/test.txt?sv={1}&sr={2}&sig={3}&st={4}&se={5}&sp={6}&rscd={7}&rsct={8}\",\n                HttpUtility.UrlEncode(accountName),\n                HttpUtility.UrlEncode(signedversion),\n                HttpUtility.UrlEncode(\"b\"),\n                HttpUtility.UrlEncode(sig),\n                HttpUtility.UrlEncode(signedstart),\n                HttpUtility.UrlEncode(signedexpiry),\n                HttpUtility.UrlEncode(signedpermissions),\n                HttpUtility.UrlEncode(rscd),\n                HttpUtility.UrlEncode(rsct)\n                );\n\n            return sasURL;\n        }\n\n####通过Rest API方式创建具有存储访问策略的SAS\n使用上述PowerShell操作过程中创建的存储访问策略\"policy1\"，有关Rest API方式创建存储访问策略请阅读[这篇文章](https://msdn.microsoft.com/zh-cn/library/azure/dd179391.aspx)。\n\n        public static string GenerateSAS()\n        {    \n            string accountName = \"sas\";\n            string accountKey = \"<account key>\";\n\n            #设置带存储访问策略的SAS不需要设置开始时间、过期时间、访问权限\n            string signedpermissions = \"\";\n            string signedstart = \"\";\n            string signedexpiry = \"\";\n            \n            string canonicalizedresource = \"/blob/\"+accountName+\"/sastestwithpolicy/test.txt\";\n            string signedIP = \"\";\n            string signedProtocol = \"\";\n            #指定存储访问策略\n            string signedidentifier = \"policy1\";\n            string signedversion = \"2015-04-05\";\n\n            string rscc = \"\";\n            string rscd = \"file; attachment\";\n            string rsce = \"\";\n            string rscl = \"\";\n            string rsct = \"binary\";\n\n            string StringToSign = signedpermissions + \"\\n\" +\n               signedstart + \"\\n\" +\n               signedexpiry + \"\\n\" +\n               canonicalizedresource + \"\\n\" +\n               signedidentifier + \"\\n\" +\n               signedIP + \"\\n\" +\n               signedProtocol + \"\\n\" +\n               signedversion + \"\\n\" +\n               rscc + \"\\n\" +\n               rscd + \"\\n\" +\n               rsce + \"\\n\" +\n               rscl + \"\\n\" +\n               rsct;\n\n            byte[] SignatureBytes = System.Text.Encoding.UTF8.GetBytes(StringToSign);\n            System.Security.Cryptography.HMACSHA256 SHA256 = new System.Security.Cryptography.HMACSHA256(Convert.FromBase64String(accountKey));\n            string sig = Convert.ToBase64String(SHA256.ComputeHash(SignatureBytes));\n            #SAS URL去掉开始时间、过期时间和访问权限，增加si\n            string sasURL = string.Format(\"http://{0}.blob.core.chinacloudapi.cn/sastestwithpolicy/test.txt?si={1}&sv={2}&sr={3}&sig={4}&rscd={5}&rsct={6}\",\n               HttpUtility.UrlEncode(accountName),\n               HttpUtility.UrlEncode(signedidentifier),\n               HttpUtility.UrlEncode(signedversion),\n               HttpUtility.UrlEncode(\"b\"),\n               HttpUtility.UrlEncode(sig),\n               HttpUtility.UrlEncode(rscd),\n               HttpUtility.UrlEncode(rsct)\n             );           \n            return sasURL;\n        }\n\n"
}