{
  "nodes": [
    {
      "content": "使用 EventProcessorHost 接收消息",
      "pos": [
        3,
        29
      ]
    },
    {
      "pos": [
        31,
        241
      ],
      "content": "<bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept> 是一个 .NET 类，它通过从事件中心管理持久检查点和并行接收来简化从那些事件中心接收事件。使用 <bpt id=\"p2\">[</bpt>EventProcessorHost<ept id=\"p2\">][]</ept>，可跨多个接收方（即使承载于不同节点中）拆分事件。此示例演示如何为单一接收方使用 <bpt id=\"p3\">[</bpt>EventProcessorHost<ept id=\"p3\">][]</ept>。<bpt id=\"p4\">[</bpt>经过扩展的事件处理<ept id=\"p4\">][]</ept>示例显示如何将 <bpt id=\"p5\">[</bpt>EventProcessorHost<ept id=\"p5\">][]</ept> 用于多个接收方。"
    },
    {
      "pos": [
        243,
        293
      ],
      "content": "若要使用 <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>，你必须有一个 <bpt id=\"p2\">[</bpt>Azure 存储帐户<ept id=\"p2\">][]</ept>："
    },
    {
      "pos": [
        298,
        331
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">][]</ept>，然后单击屏幕底部的“新建”。"
    },
    {
      "content": "依次单击“数据服务”、“存储”、“快速创建”，然后为你的存储帐户键入一个名称。选择所需的区域，然后单击“创建存储帐户”。",
      "pos": [
        336,
        396
      ]
    },
    {
      "content": "单击新创建的存储帐户，然后单击“管理访问密钥”：",
      "pos": [
        414,
        438
      ]
    },
    {
      "content": "复制访问密钥，供本教程后面使用。",
      "pos": [
        457,
        473
      ]
    },
    {
      "pos": [
        478,
        558
      ],
      "content": "在 Visual Studio 中，使用<bpt id=\"p1\">**</bpt>控制台应用程序<ept id=\"p1\">**</ept>项目模板创建一个新的 Visual C# 桌面应用项目。将该项目命名为 <bpt id=\"p2\">**</bpt>Receiver<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击该解决方案，然后单击“管理 NuGet 包”。",
      "pos": [
        576,
        617
      ]
    },
    {
      "content": "此时将显示“管理 NuGet 包”对话框。",
      "pos": [
        623,
        644
      ]
    },
    {
      "pos": [
        649,
        718
      ],
      "content": "搜索 <ph id=\"ph1\">`Azure Service Bus Event Hub - EventProcessorHost`</ph>、单击“安装”，并接受使用条款。"
    },
    {
      "pos": [
        737,
        894
      ],
      "content": "这样，便会下载、安装 <bpt id=\"p1\">[</bpt>Azure 服务总线事件中心 — EventProcessorHost NuGet 程序包<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>并添加对该程序包的引用，包括其所有依赖项。"
    },
    {
      "pos": [
        899,
        981
      ],
      "content": "右键单击 <bpt id=\"p1\">**</bpt>Receiver<ept id=\"p1\">**</ept> 项目，单击“添加”，然后单击“类”。将新类命名为 <bpt id=\"p2\">**</bpt>SimpleEventProcessor<ept id=\"p2\">**</ept>，然后单击“确定”以创建该类。"
    },
    {
      "content": "在 SimpleEventProcessor.cs 文件的顶部添加以下语句：",
      "pos": [
        986,
        1024
      ]
    },
    {
      "content": "然后，用以下代码替换该类的正文：",
      "pos": [
        1153,
        1169
      ]
    },
    {
      "content": "Then, substitute the following code for the body of the class:",
      "pos": [
        1298,
        1360
      ]
    },
    {
      "pos": [
        3011,
        3156
      ],
      "content": "此类将由 <bpt id=\"p1\">**</bpt>EventProcessorHost<ept id=\"p1\">**</ept> 调用，以处理从事件中心接收的事件。请注意，<ph id=\"ph1\">`SimpleEventProcessor`</ph> 类使用秒表以定期对 <bpt id=\"p2\">**</bpt>EventProcessorHost<ept id=\"p2\">**</ept> 上下文调用检查点方法。这将确保接收方重新启动时将会丢失的处理工作不会超过五分钟。"
    },
    {
      "pos": [
        3161,
        3199
      ],
      "content": "在文件顶部的 <bpt id=\"p1\">**</bpt>Program<ept id=\"p1\">**</ept> 类中，添加以下 <ph id=\"ph1\">`using`</ph> 语句："
    },
    {
      "pos": [
        3329,
        3400
      ],
      "content": "然后，按如下所示在 <ph id=\"ph1\">`Program`</ph> 类中修改 <ph id=\"ph2\">`Main`</ph> 方法，并替换事件中心名称和连接字符串，以及存储帐户和你在前面部分中复制的密钥："
    },
    {
      "pos": [
        4439,
        4739
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 本教程使用单个 <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept> 实例。若要增加吞吐量，建议运行多个 <bpt id=\"p2\">[</bpt>EventProcessorHost<ept id=\"p2\">][]</ept> 实例，如<bpt id=\"p3\">[</bpt>扩大事件处理<ept id=\"p3\">][]</ept>示例中所示。在那些情况下，为了对接收到的事件进行负载平衡，各个不同实例会自动相互协调。如果希望多个接收方都各自处理<bpt id=\"p4\">*</bpt>全部<ept id=\"p4\">*</ept>事件，则必须使用 <bpt id=\"p5\">**</bpt>ConsumerGroup<ept id=\"p5\">**</ept> 概念。在从不同计算机中接收事件时，根据部署 <bpt id=\"p6\">[</bpt>EventProcessorHost<ept id=\"p6\">][]</ept> 实例的计算机（或角色）来指定该实例的名称可能会很有用。有关这些主题的详细信息，请参阅<bpt id=\"p7\">[</bpt>事件中心概述<ept id=\"p7\">][]</ept>和<bpt id=\"p8\">[</bpt>事件中心编程指南<ept id=\"p8\">][]</ept>主题。"
    }
  ],
  "content": "## 使用 EventProcessorHost 接收消息\n\n[EventProcessorHost][] 是一个 .NET 类，它通过从事件中心管理持久检查点和并行接收来简化从那些事件中心接收事件。使用 [EventProcessorHost][]，可跨多个接收方（即使承载于不同节点中）拆分事件。此示例演示如何为单一接收方使用 [EventProcessorHost][]。[经过扩展的事件处理][]示例显示如何将 [EventProcessorHost][] 用于多个接收方。\n\n若要使用 [EventProcessorHost][]，你必须有一个 [Azure 存储帐户][]：\n\n1. 登录到 [Azure 经典门户][]，然后单击屏幕底部的“新建”。\n\n2. 依次单击“数据服务”、“存储”、“快速创建”，然后为你的存储帐户键入一个名称。选择所需的区域，然后单击“创建存储帐户”。\n\n    ![][11]\n\n3. 单击新创建的存储帐户，然后单击“管理访问密钥”：\n\n    ![][12]\n\n    复制访问密钥，供本教程后面使用。\n\n4. 在 Visual Studio 中，使用**控制台应用程序**项目模板创建一个新的 Visual C# 桌面应用项目。将该项目命名为 **Receiver**。\n\n    ![][14]\n\n5. 在“解决方案资源管理器”中，右键单击该解决方案，然后单击“管理 NuGet 包”。\n\n    此时将显示“管理 NuGet 包”对话框。\n\n6. 搜索 `Azure Service Bus Event Hub - EventProcessorHost`、单击“安装”，并接受使用条款。\n\n    ![][13]\n\n    这样，便会下载、安装 [Azure 服务总线事件中心 — EventProcessorHost NuGet 程序包](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)并添加对该程序包的引用，包括其所有依赖项。\n\n7. 右键单击 **Receiver** 项目，单击“添加”，然后单击“类”。将新类命名为 **SimpleEventProcessor**，然后单击“确定”以创建该类。\n\n8. 在 SimpleEventProcessor.cs 文件的顶部添加以下语句：\n\n    ```\n    using Microsoft.ServiceBus.Messaging;\n    using System.Diagnostics;\n    using System.Threading.Tasks;\n    ```\n\n    然后，用以下代码替换该类的正文：\n\n    ```\n    using Microsoft.ServiceBus.Messaging;\n    using System.Diagnostics;\n    using System.Threading.Tasks;\n    ```\n\n    Then, substitute the following code for the body of the class:\n\n    ```\n    class SimpleEventProcessor : IEventProcessor\n    {\n        Stopwatch checkpointStopWatch;\n\n        async Task IEventProcessor.CloseAsync(PartitionContext context, CloseReason reason)\n        {\n            Console.WriteLine(\"Processor Shutting Down. Partition '{0}', Reason: '{1}'.\", context.Lease.PartitionId, reason);\n            if (reason == CloseReason.Shutdown)\n            {\n                await context.CheckpointAsync();\n            }\n        }\n\n        Task IEventProcessor.OpenAsync(PartitionContext context)\n        {\n            Console.WriteLine(\"SimpleEventProcessor initialized.  Partition: '{0}', Offset: '{1}'\", context.Lease.PartitionId, context.Lease.Offset);\n            this.checkpointStopWatch = new Stopwatch();\n            this.checkpointStopWatch.Start();\n            return Task.FromResult<object>(null);\n        }\n\n        async Task IEventProcessor.ProcessEventsAsync(PartitionContext context, IEnumerable<EventData> messages)\n        {\n            foreach (EventData eventData in messages)\n            {\n                string data = Encoding.UTF8.GetString(eventData.GetBytes());\n\n                Console.WriteLine(string.Format(\"Message received.  Partition: '{0}', Data: '{1}'\",\n                    context.Lease.PartitionId, data));\n            }\n\n            //Call checkpoint every 5 minutes, so that worker can resume processing from 5 minutes back if it restarts.\n            if (this.checkpointStopWatch.Elapsed > TimeSpan.FromMinutes(5))\n            {\n                await context.CheckpointAsync();\n                this.checkpointStopWatch.Restart();\n            }\n        }\n    }\n    ````\n\n    此类将由 **EventProcessorHost** 调用，以处理从事件中心接收的事件。请注意，`SimpleEventProcessor` 类使用秒表以定期对 **EventProcessorHost** 上下文调用检查点方法。这将确保接收方重新启动时将会丢失的处理工作不会超过五分钟。\n\n9. 在文件顶部的 **Program** 类中，添加以下 `using` 语句：\n\n    ```\n    using Microsoft.ServiceBus.Messaging;\n    using Microsoft.Threading;\n    using System.Threading.Tasks;\n    ```\n\n    然后，按如下所示在 `Program` 类中修改 `Main` 方法，并替换事件中心名称和连接字符串，以及存储帐户和你在前面部分中复制的密钥：\n\n     ```\n    static void Main(string[] args)\n    {\n      string eventHubConnectionString = \"{event hub connection string}\";\n      string eventHubName = \"{event hub name}\";\n      string storageAccountName = \"{storage account name}\";\n      string storageAccountKey = \"{storage account key}\";\n      string storageConnectionString = string.Format(\"DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}\", storageAccountName, storageAccountKey);\n\n      string eventProcessorHostName = Guid.NewGuid().ToString();\n      EventProcessorHost eventProcessorHost = new EventProcessorHost(eventProcessorHostName, eventHubName, EventHubConsumerGroup.DefaultGroupName, eventHubConnectionString, storageConnectionString);\n      Console.WriteLine(\"Registering EventProcessor...\");\n      eventProcessorHost.RegisterEventProcessorAsync<SimpleEventProcessor>().Wait();\n\n      Console.WriteLine(\"Receiving. Press enter key to stop worker.\");\n      Console.ReadLine();\n      eventProcessorHost.UnregisterEventProcessorAsync().Wait();\n    }\n    ````\n\n> [AZURE.NOTE] 本教程使用单个 [EventProcessorHost][] 实例。若要增加吞吐量，建议运行多个 [EventProcessorHost][] 实例，如[扩大事件处理][]示例中所示。在那些情况下，为了对接收到的事件进行负载平衡，各个不同实例会自动相互协调。如果希望多个接收方都各自处理*全部*事件，则必须使用 **ConsumerGroup** 概念。在从不同计算机中接收事件时，根据部署 [EventProcessorHost][] 实例的计算机（或角色）来指定该实例的名称可能会很有用。有关这些主题的详细信息，请参阅[事件中心概述][]和[事件中心编程指南][]主题。\n\n<!-- Links -->\n[事件中心概述]: /documentation/articles/event-hubs-overview\n[事件中心编程指南]: /documentation/articles/event-hubs-programming-guide\n[扩大事件处理]: https://code.msdn.microsoft.com/windowsazure/Service-Bus-Event-Hub-45f43fc3\n[经过扩展的事件处理]: https://code.msdn.microsoft.com/windowsazure/Service-Bus-Event-Hub-45f43fc3\n[Azure 存储帐户]: /documentation/articles/storage-create-storage-account\n[EventProcessorHost]: http://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.eventprocessorhost(v=azure.95).aspx\n[Azure 经典门户]: http://manage.windowsazure.cn\n\n<!-- Images -->\n\n[11]: ./media/service-bus-event-hubs-getstarted/create-eph-csharp2.png\n[12]: ./media/service-bus-event-hubs-getstarted/create-eph-csharp3.png\n[13]: ./media/service-bus-event-hubs-getstarted/create-eph-csharp1.png\n[14]: ./media/service-bus-event-hubs-getstarted/create-sender-csharp1.png\n\n<!---HONumber=Mooncake_0104_2016-->"
}