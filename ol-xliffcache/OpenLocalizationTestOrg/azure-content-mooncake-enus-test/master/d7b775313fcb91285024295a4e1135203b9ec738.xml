{
  "nodes": [
    {
      "content": "如何通过 Xamarin（预览版）使用 Blob 存储 | Azure",
      "pos": [
        28,
        63
      ]
    },
    {
      "content": "用于 Xamarin 的 Azure 存储客户端库预览版使开发人员能够使用其本机用户界面创建 iOS、Android 和 Windows 应用商店应用程序。本教程演示了如何通过 Xamarin 来创建使用 Azure Blob 存储的 Android 应用程序。",
      "pos": [
        83,
        214
      ]
    },
    {
      "content": "如何通过 Xamarin（预览版）使用 Blob 存储",
      "pos": [
        422,
        449
      ]
    },
    {
      "content": "概述",
      "pos": [
        549,
        551
      ]
    },
    {
      "content": "Xamarin 使开发人员能够通过共享的 C# 代码库来使用其本机用户界面创建 iOS、Android 和 Windows 应用商店应用程序。用于 Xamarin 的 Azure 存储客户端库是一个预览库；请注意，该库在将来可能会更改。",
      "pos": [
        553,
        671
      ]
    },
    {
      "pos": [
        673,
        781
      ],
      "content": "本教程演示了如何将 Azure Blob 存储用于 Xamarin Android 应用程序。若要在深入分析代码之前了解有关 Azure 存储空间的更多内容，请参阅本文档末尾的<bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#next-steps)</ept>。"
    },
    {
      "content": "生成共享访问签名",
      "pos": [
        883,
        891
      ]
    },
    {
      "content": "使用用于 Xamarin 的 Azure 存储客户端库进行开发时，你不能使用帐户访问密钥对 Azure 存储空间帐户的访问权限进行身份验证。这是为了防止将你的帐户凭据分发给可以下载你的应用程序的用户。与之相反，我们鼓励使用共享访问签名 (SAS)，这样就不会暴露你的帐户凭据。",
      "pos": [
        893,
        1031
      ]
    },
    {
      "content": "在本指南中，我们将使用 Azure PowerShell 来生成 SAS 令牌。然后，我们将创建一个使用生成的 SAS 的 Xamarin 应用程序。",
      "pos": [
        1033,
        1108
      ]
    },
    {
      "pos": [
        1110,
        1235
      ],
      "content": "首先，你需要安装 Azure PowerShell请查看<bpt id=\"p1\">[</bpt>如何安装和配置 Azure PowerShell<ept id=\"p1\">](/documentation/articles/powershell-install-configure#Install)</ept> 以获取相关说明。"
    },
    {
      "pos": [
        1237,
        1350
      ],
      "content": "接下来，请打开 Azure PowerShell 并运行以下命令：请记住将 <ph id=\"ph1\">`ACCOUNT_NAME`</ph> 和 <ph id=\"ph2\">`ACCOUNT_KEY== `</ph> 替换为你的存储帐户凭据。将 <ph id=\"ph3\">`CONTAINER_NAME`</ph> 替换为你选择的名称。"
    },
    {
      "content": "新容器的共享访问签名 URI 应如下所示：",
      "pos": [
        1755,
        1776
      ]
    },
    {
      "pos": [
        1959,
        2025
      ],
      "content": "你在容器上创建的共享访问签名将在接下来的一天内有效。该签名将授予对容器内 blob 的完整权限（<bpt id=\"p1\">*</bpt>例如<ept id=\"p1\">*</ept>，读取、写入、删除和列表）。"
    },
    {
      "pos": [
        2027,
        2134
      ],
      "content": "有关共享访问签名的详细信息，请参阅<bpt id=\"p1\">[</bpt>针对 .NET 的 SAS 教程<ept id=\"p1\">](/documentation/articles/storage-dotnet-shared-access-signature-part-2)</ept>。"
    },
    {
      "content": "创建新的 Xamarin 应用程序",
      "pos": [
        2139,
        2156
      ]
    },
    {
      "content": "就本教程来说，我们将在 Visual Studio 中创建 Xamarin 应用程序。请按以下步骤创建该应用程序：",
      "pos": [
        2158,
        2215
      ]
    },
    {
      "pos": [
        2220,
        2278
      ],
      "content": "下载并安装 <bpt id=\"p1\">[</bpt>Visual Studio<ept id=\"p1\">](https://www.visualstudio.com/zh-cn)</ept>。"
    },
    {
      "pos": [
        2282,
        2327
      ],
      "content": "下载并安装 <bpt id=\"p1\">[</bpt>Xamarin<ept id=\"p1\">](http://xamarin.com/platform)</ept>。"
    },
    {
      "content": "打开 Visual Studio，然后选择“文件”&gt;“新建”&gt;“项目”&gt;“Android”&gt;“空应用程序(Android)”。",
      "pos": [
        2331,
        2394
      ]
    },
    {
      "pos": [
        2398,
        2486
      ],
      "content": "右键单击“解决方案资源管理器”窗格中的项目，然后选择“管理 NuGet 包”。然后搜索<bpt id=\"p1\">**</bpt>“Azure 存储空间”<ept id=\"p1\">**</ept>并安装 <bpt id=\"p2\">**</bpt>Azure 存储空间 4.4.0-预览版<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "现在，你应该有了这样一个应用程序：单击某个按钮即可让计数器递增。",
      "pos": [
        2488,
        2520
      ]
    },
    {
      "content": "使用共享访问签名执行容器操作",
      "pos": [
        2525,
        2539
      ]
    },
    {
      "content": "接下来，请使用生成的 SAS URI，通过添加代码来执行一系列容器操作。",
      "pos": [
        2541,
        2577
      ]
    },
    {
      "pos": [
        2579,
        2600
      ],
      "content": "首先，添加以下 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句："
    },
    {
      "pos": [
        2729,
        2876
      ],
      "content": "接下来，添加 SAS 令牌的行。将 <ph id=\"ph1\">`\"SAS_URI\"`</ph> 字符串替换为你在 Azure PowerShell 中生成的 SAS URI。然后再添加一行，以便调用我们将在下面创建的 <ph id=\"ph2\">`UseContainerSAS`</ph> 方法。请注意，<bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> 关键字已添加到了 delegate 前面。"
    },
    {
      "pos": [
        3531,
        3571
      ],
      "content": "在 <ph id=\"ph1\">`OnCreate`</ph> 方法下添加新方法 <ph id=\"ph2\">`UseContainerSAS`</ph>。"
    },
    {
      "content": "运行应用程序",
      "pos": [
        6057,
        6063
      ]
    },
    {
      "content": "你现在可以在仿真程序或 Android 设备中运行此应用程序。",
      "pos": [
        6065,
        6096
      ]
    },
    {
      "pos": [
        6098,
        6224
      ],
      "content": "虽然此入门教程侧重于 Android，但你也可以将 <ph id=\"ph1\">`UseContainerSAS`</ph> 方法用于 iOS 或 Windows 应用商店应用程序。Xamarin 还允许开发人员创建 Windows Phone 应用程序，不过，我们的库目前尚不支持此功能。"
    },
    {
      "content": "后续步骤",
      "pos": [
        6229,
        6233
      ]
    },
    {
      "content": "在本教程中，你学习了如何将 Azure Blob 存储和 SAS 用于 Xamarin 应用程序。在进一步的练习中，可以应用相似的模式来生成用于 Azure 表或队列的 SAS 令牌。",
      "pos": [
        6235,
        6327
      ]
    },
    {
      "content": "查看以下链接，了解有关 blob、表和队列的详细信息：",
      "pos": [
        6329,
        6356
      ]
    },
    {
      "content": "Azure 存储空间简介",
      "pos": [
        6359,
        6371
      ]
    },
    {
      "content": "如何通过 .NET 使用 Blob 存储",
      "pos": [
        6422,
        6442
      ]
    },
    {
      "content": "如何通过 .NET 使用表存储",
      "pos": [
        6504,
        6519
      ]
    },
    {
      "content": "如何通过 .NET 使用队列存储",
      "pos": [
        6582,
        6598
      ]
    },
    {
      "content": "使用 AzCopy 命令行实用程序传输数据",
      "pos": [
        6659,
        6680
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Xamarin（预览版）使用 Blob 存储 | Azure\" \n    description=\"用于 Xamarin 的 Azure 存储客户端库预览版使开发人员能够使用其本机用户界面创建 iOS、Android 和 Windows 应用商店应用程序。本教程演示了如何通过 Xamarin 来创建使用 Azure Blob 存储的 Android 应用程序。\" \n    services=\"storage\" \n    documentationCenter=\"xamarin\" \n    authors=\"micurd\" \n    manager=\"\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"12/01/2015\" \n    wacn.date=\"01/14/2016\"/>\n\n# 如何通过 Xamarin（预览版）使用 Blob 存储\n\n[AZURE.INCLUDE [storage-selector-blob-include](../includes/storage-selector-blob-include.md)]\n\n## 概述\n\nXamarin 使开发人员能够通过共享的 C# 代码库来使用其本机用户界面创建 iOS、Android 和 Windows 应用商店应用程序。用于 Xamarin 的 Azure 存储客户端库是一个预览库；请注意，该库在将来可能会更改。\n\n本教程演示了如何将 Azure Blob 存储用于 Xamarin Android 应用程序。若要在深入分析代码之前了解有关 Azure 存储空间的更多内容，请参阅本文档末尾的[后续步骤](#next-steps)。\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 生成共享访问签名\n\n使用用于 Xamarin 的 Azure 存储客户端库进行开发时，你不能使用帐户访问密钥对 Azure 存储空间帐户的访问权限进行身份验证。这是为了防止将你的帐户凭据分发给可以下载你的应用程序的用户。与之相反，我们鼓励使用共享访问签名 (SAS)，这样就不会暴露你的帐户凭据。\n\n在本指南中，我们将使用 Azure PowerShell 来生成 SAS 令牌。然后，我们将创建一个使用生成的 SAS 的 Xamarin 应用程序。\n\n首先，你需要安装 Azure PowerShell请查看[如何安装和配置 Azure PowerShell](/documentation/articles/powershell-install-configure#Install) 以获取相关说明。\n\n接下来，请打开 Azure PowerShell 并运行以下命令：请记住将 `ACCOUNT_NAME` 和 `ACCOUNT_KEY== ` 替换为你的存储帐户凭据。将 `CONTAINER_NAME` 替换为你选择的名称。\n\n    PS C:\\> $context = New-AzureStorageContext -Environment AzureChinaCloud -StorageAccountName \"ACCOUNT_NAME\" -StorageAccountKey \"ACCOUNT_KEY==\"\n    PS C:\\> New-AzureStorageContainer CONTAINER_NAME -Permission Off -Context $context\n    PS C:\\> $now = Get-Date\n    PS C:\\> New-AzureStorageContainerSASToken -Name CONTAINER_NAME -Permission rwdl -ExpiryTime $now.AddDays(1.0) -Context $context -FullUri\n\n新容器的共享访问签名 URI 应如下所示：\n\n    https://storageaccount.blob.core.chinacloudapi.cn/sascontainer?sv=2012-02-12&se=2013-04-13T00%3A12%3A08Z&sr=c&sp=wl&sig=t%2BbzU9%2B7ry4okULN9S0wst%2F8MCUhTjrHyV9rDNLSe8g%3Dsss\n\n你在容器上创建的共享访问签名将在接下来的一天内有效。该签名将授予对容器内 blob 的完整权限（*例如*，读取、写入、删除和列表）。\n\n有关共享访问签名的详细信息，请参阅[针对 .NET 的 SAS 教程](/documentation/articles/storage-dotnet-shared-access-signature-part-2)。\n\n## 创建新的 Xamarin 应用程序\n\n就本教程来说，我们将在 Visual Studio 中创建 Xamarin 应用程序。请按以下步骤创建该应用程序：\n\n1. 下载并安装 [Visual Studio](https://www.visualstudio.com/zh-cn)。\n2. 下载并安装 [Xamarin](http://xamarin.com/platform)。\n3. 打开 Visual Studio，然后选择“文件”>“新建”>“项目”>“Android”>“空应用程序(Android)”。\n4. 右键单击“解决方案资源管理器”窗格中的项目，然后选择“管理 NuGet 包”。然后搜索**“Azure 存储空间”**并安装 **Azure 存储空间 4.4.0-预览版**。\n\n现在，你应该有了这样一个应用程序：单击某个按钮即可让计数器递增。\n\n## 使用共享访问签名执行容器操作\n\n接下来，请使用生成的 SAS URI，通过添加代码来执行一系列容器操作。\n\n首先，添加以下 **using** 语句：\n\n    using System.IO;\n    using System.Text;\n    using System.Threading.Tasks;\n    using Microsoft.WindowsAzure.Storage.Blob;\n\n\n接下来，添加 SAS 令牌的行。将 `\"SAS_URI\"` 字符串替换为你在 Azure PowerShell 中生成的 SAS URI。然后再添加一行，以便调用我们将在下面创建的 `UseContainerSAS` 方法。请注意，**async** 关键字已添加到了 delegate 前面。\n\n\n    public class MainActivity : Activity\n    {\n        int count = 1;\n        string sas = \"SAS_URI\";\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n\n            // Set our view from the \"main\" layout resource\n            SetContentView(Resource.Layout.Main);\n\n            // Get our button from the layout resource, and attach an event to it\n            Button button = FindViewById<Button>(Resource.Id.MyButton);\n\n            button.Click += async delegate  {\n                button.Text = string.Format(\"{0} clicks!\", count++);\n                await UseContainerSAS(sas);\n            };\n     }\n\n在 `OnCreate` 方法下添加新方法 `UseContainerSAS`。\n\n    static async Task UseContainerSAS(string sas)\n    {\n        //Try performing container operations with the SAS provided.\n\n        //Return a reference to the container using the SAS URI.\n        CloudBlobContainer container = new CloudBlobContainer(new Uri(sas));\n        string date = DateTime.Now.ToString();\n        try\n        {\n            //Write operation: write a new blob to the container.\n            CloudBlockBlob blob = container.GetBlockBlobReference(\"sasblob_\" + date + \".txt\");\n\n            string blobContent = \"This blob was created with a shared access signature granting write permissions to the container. \";\n            MemoryStream msWrite = new\n            MemoryStream(Encoding.UTF8.GetBytes(blobContent));\n            msWrite.Position = 0;\n            using (msWrite)\n            {\n                await blob.UploadFromStreamAsync(msWrite);\n            }\n            Console.WriteLine(\"Write operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"Write operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }\n        try\n        {\n            //Read operation: Get a reference to one of the blobs in the container and read it.\n            CloudBlockBlob blob = container.GetBlockBlobReference(\"sasblob_” + date + “.txt\");\n            string data = await blob.DownloadTextAsync();\n\n            Console.WriteLine(\"Read operation succeeded for SAS \" + sas);\n            Console.WriteLine(\"Blob contents: \" + data);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine(\"Read operation failed for SAS \" + sas);\n            Console.WriteLine();\n        }\n        Console.WriteLine();\n        try\n        {\n            //Delete operation: Delete a blob in the container.\n            CloudBlockBlob blob = container.GetBlockBlobReference(\"sasblob_” + date + “.txt\");\n            await blob.DeleteAsync();\n\n            Console.WriteLine(\"Delete operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(\"Delete operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }\n    }\n\n## 运行应用程序\n\n你现在可以在仿真程序或 Android 设备中运行此应用程序。\n\n虽然此入门教程侧重于 Android，但你也可以将 `UseContainerSAS` 方法用于 iOS 或 Windows 应用商店应用程序。Xamarin 还允许开发人员创建 Windows Phone 应用程序，不过，我们的库目前尚不支持此功能。\n\n## 后续步骤\n\n在本教程中，你学习了如何将 Azure Blob 存储和 SAS 用于 Xamarin 应用程序。在进一步的练习中，可以应用相似的模式来生成用于 Azure 表或队列的 SAS 令牌。\n\n查看以下链接，了解有关 blob、表和队列的详细信息：\n\n[Azure 存储空间简介](/documentation/articles/storage-introduction)  \n[如何通过 .NET 使用 Blob 存储](/documentation/articles/storage-dotnet-how-to-use-blobs)  \n[如何通过 .NET 使用表存储](/documentation/articles/storage-dotnet-how-to-use-tables)  \n[如何通过 .NET 使用队列存储](/documentation/articles/storage-dotnet-how-to-use-queues)\n[使用 AzCopy 命令行实用程序传输数据](/documentation/articles/storage-use-azcopy)\n\n<!---HONumber=Mooncake_0104_2016-->"
}