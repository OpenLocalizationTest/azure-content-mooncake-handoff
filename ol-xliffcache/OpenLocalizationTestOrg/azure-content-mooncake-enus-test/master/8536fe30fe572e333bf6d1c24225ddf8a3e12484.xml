{
  "nodes": [
    {
      "content": "创建具有身份验证和 SQL 数据库的 ASP.NET MVC 应用程序并将其部署到 Azure Web 应用",
      "pos": [
        28,
        82
      ]
    },
    {
      "content": "了解如何开发具有 SQL 数据库后端的 ASP.NET MVC 5 应用程序，添加身份验证和授权，并将其部署到 Azure。",
      "pos": [
        102,
        164
      ]
    },
    {
      "content": "创建具有身份验证和 SQL 数据库的 ASP.NET MVC 应用程序并将其部署到 Azure Web 应用",
      "pos": [
        420,
        474
      ]
    },
    {
      "pos": [
        476,
        658
      ],
      "content": "本教程演示如何构建安全的 ASP.NET MVC 5 Web 应用，以便用户能够使用 Facebook 或 Google 凭据进行登录。该应用是一个简单的联系人列表，它使用 ADO.NET Entity Framework 进行数据库访问。你需要将该应用部署到 <bpt id=\"p1\">[</bpt>Azure Web 应用<ept id=\"p1\">](/documentation/services/web-sites/)</ept>。"
    },
    {
      "content": "完成本教程之后，你将能够在云中启动并运行安全的数据驱动的 Web 应用，以及使用云数据库。下图演示了已完成的应用程序的登录页。",
      "pos": [
        660,
        723
      ]
    },
    {
      "content": "登录页面",
      "pos": [
        727,
        731
      ]
    },
    {
      "content": "学习内容：",
      "pos": [
        739,
        744
      ]
    },
    {
      "content": "如何在 Visual Studio 中创建安全的 ASP.NET MVC 5 Web 项目。",
      "pos": [
        748,
        794
      ]
    },
    {
      "pos": [
        797,
        910
      ],
      "content": "如何对使用 Google 或 Facebook 帐户凭据登录的用户进行身份验证和授权（使用 <bpt id=\"p1\">[</bpt>OAuth 2.0<ept id=\"p1\">]</ept><bpt id=\"p2\">(</bpt>http://oauth.net/2 <ept id=\"p2\">\"http://oauth.net/2\")</ept> 的社交网络提供商身份验证）。"
    },
    {
      "pos": [
        913,
        993
      ],
      "content": "如何对在应用程序管理的数据库中注册的用户进行身份验证和授权（使用 <bpt id=\"p1\">[</bpt>ASP.NET 标识<ept id=\"p1\">](http://asp.net/identity/)</ept>的本地身份验证）。"
    },
    {
      "content": "如何使用 ADO.NET Entity Framework 6 Code First 在 SQL 数据库中读取和写入数据。",
      "pos": [
        996,
        1057
      ]
    },
    {
      "content": "如何使用 Entity Framework Code First 迁移来部署数据库。",
      "pos": [
        1060,
        1102
      ]
    },
    {
      "content": "如何使用 Azure SQL 数据库在云中存储关系数据。",
      "pos": [
        1105,
        1133
      ]
    },
    {
      "pos": [
        1136,
        1212
      ],
      "content": "如何部署 Web 项目，以便将数据库用于 Azure 中的 <bpt id=\"p1\">[</bpt> Web 应用<ept id=\"p1\">](/documentation/services/web-sites/)</ept>。"
    },
    {
      "pos": [
        1215,
        1407
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>这是一篇很长的教程。如果你想要快速了解 Azure Web 应用和 Visual Studio Web 项目，请参阅<bpt id=\"p1\">[</bpt>在 Azure 中创建 ASP.NET Web 应用<ept id=\"p1\">](/documentation/articles/web-sites-dotnet-get-started)</ept>。有关疑难解答信息，请参阅<bpt id=\"p2\">[</bpt>疑难解答<ept id=\"p2\">](#troubleshooting)</ept>部分。"
    },
    {
      "content": "先决条件",
      "pos": [
        1414,
        1418
      ]
    },
    {
      "pos": [
        1420,
        1502
      ],
      "content": "若要完成本教程，您需要一个 Azure 帐户。如果你没有帐户，可以<bpt id=\"p1\">[</bpt>注册试用版<ept id=\"p1\">](/pricing/1rmb-trial/?WT.mc_id=A261C142F)</ept>。"
    },
    {
      "pos": [
        1504,
        1864
      ],
      "content": "若要设置开发环境，你必须安装 <bpt id=\"p1\">[</bpt>Visual Studio 2013 Update 4<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=390521)</ept> 或更高版本，以及最新版本的 <bpt id=\"p2\">[</bpt>Azure SDK for .NET<ept id=\"p2\">](http://go.microsoft.com/fwlink/?linkid=324322&amp;clcid=0x409)</ept>。本文专为 Visual Studio Update 4 和 SDK 2.7.1 编写。相同的说明同样适用于已安装最新 <bpt id=\"p3\">[</bpt>Azure SDK for .NET<ept id=\"p3\">](http://go.microsoft.com/fwlink/?linkid=518003&amp;clcid=0x409)</ept> 的 Visual Studio 2015，但有些屏幕看起来与插图不同。"
    },
    {
      "content": "创建 ASP.NET MVC 5 应用程序",
      "pos": [
        1869,
        1890
      ]
    },
    {
      "content": "创建项目",
      "pos": [
        1896,
        1900
      ]
    },
    {
      "content": "在“文件”菜单中，单击“新建项目”。",
      "pos": [
        1905,
        1923
      ]
    },
    {
      "content": "“文件”菜单中的“新建项目”",
      "pos": [
        1931,
        1945
      ]
    },
    {
      "content": "在“新建项目”对话框中，展开“C#”并在“已安装的模板”下选择“Web”，然后选择“ASP.NET Web 应用”。",
      "pos": [
        2045,
        2103
      ]
    },
    {
      "pos": [
        2108,
        2146
      ],
      "content": "将该应用程序命名为 <bpt id=\"p1\">**</bpt>ContactManager<ept id=\"p1\">**</ept>，然后单击“确定”。"
    },
    {
      "content": "“新建项目”对话框",
      "pos": [
        2154,
        2163
      ]
    },
    {
      "pos": [
        2267,
        2329
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>请确保输入“ContactManager”。您稍后将复制的代码块假定项目名称为 ContactManager。"
    },
    {
      "content": "在“新建 ASP.NET 项目”对话框中，选择“MVC”模板。确认已将“身份验证”设置为“单个用户帐户”，并且确保不选中“在云中托管”",
      "pos": [
        2334,
        2401
      ]
    },
    {
      "pos": [
        2406,
        2417
      ],
      "content": "单击<bpt id=\"p1\">**</bpt>“确定”<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "如果还没新建好 Web 应用，可以到 Azure 管理门户新建一个，并在“仪表板”的“速览”下，下载“发布配置文件”。",
      "pos": [
        2419,
        2478
      ]
    },
    {
      "content": "设置页眉和页脚",
      "pos": [
        2484,
        2491
      ]
    },
    {
      "pos": [
        2496,
        2554
      ],
      "content": "在“解决方案资源管理器”中，打开 <bpt id=\"p1\">*</bpt>Views\\\\Shared<ept id=\"p1\">*</ept> 文件夹中的 <bpt id=\"p2\">*</bpt>Layout.cshtml<ept id=\"p2\">*</ept> 文件。"
    },
    {
      "content": "_Layout.cshtml in Solution Explorer",
      "pos": [
        2562,
        2597
      ]
    },
    {
      "pos": [
        2614,
        2645
      ],
      "content": "将 <bpt id=\"p1\">*</bpt>Layout.cshtml<ept id=\"p1\">*</ept> 文件的内容替换为以下代码。"
    },
    {
      "content": "此代码将页眉和页脚中应用程序名称从“My ASP.NET Application”和“Application name”更改为“Contact Manager”和“CM Demo”。",
      "pos": [
        4600,
        4691
      ]
    },
    {
      "content": "在本地运行应用程序",
      "pos": [
        4698,
        4707
      ]
    },
    {
      "content": "按 Ctrl+F5 运行应用程序。",
      "pos": [
        4712,
        4729
      ]
    },
    {
      "content": "随后在默认浏览器中显示该应用程序主页。",
      "pos": [
        4735,
        4754
      ]
    },
    {
      "content": "Web 应用在本地运行",
      "pos": [
        4763,
        4774
      ]
    },
    {
      "content": "这就是你创建将要部署到 Azure 的应用程序目前所需的全部操作。",
      "pos": [
        4863,
        4896
      ]
    },
    {
      "content": "将应用程序部署到 Azure",
      "pos": [
        4944,
        4958
      ]
    },
    {
      "content": "在 Visual Studio 中，在“解决方案资源管理器”中右键单击该项目，从上下文菜单中选择“发布”。",
      "pos": [
        4963,
        5016
      ]
    },
    {
      "content": "项目上下文菜单中的“发布”",
      "pos": [
        5024,
        5037
      ]
    },
    {
      "content": "“发布 Web”向导将打开。",
      "pos": [
        5142,
        5156
      ]
    },
    {
      "content": "点击“导入”，并选择之前下载好的“发布配置文件”。",
      "pos": [
        5161,
        5186
      ]
    },
    {
      "content": "在“发布 Web”对话框中，单击“发布”。",
      "pos": [
        5191,
        5212
      ]
    },
    {
      "content": "发布",
      "pos": [
        5220,
        5222
      ]
    },
    {
      "content": "你创建的应用程序现在在云中运行。下次部署该应用程序时，仅会部署已更改（或新的）文件。",
      "pos": [
        5315,
        5357
      ]
    },
    {
      "content": "在云中运行",
      "pos": [
        5365,
        5370
      ]
    },
    {
      "content": "为项目启用 SSL",
      "pos": [
        5462,
        5471
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，单击“ContactManager”项目，然后单击 F4 以显示“属性”窗口。",
      "pos": [
        5479,
        5532
      ]
    },
    {
      "pos": [
        5537,
        5560
      ],
      "content": "将“已启用 SSL”更改为 <bpt id=\"p1\">**</bpt>True<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "复制“SSL URL”。",
      "pos": [
        5565,
        5577
      ]
    },
    {
      "content": "SSL URL 将为 https://localhost:44300/，除非你之前已创建 SSL Web 应用。",
      "pos": [
        5583,
        5639
      ]
    },
    {
      "content": "启用 SSL",
      "pos": [
        5647,
        5653
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击“Contact Manager”项目，然后单击“属性”。",
      "pos": [
        5667,
        5714
      ]
    },
    {
      "content": "单击“Web”选项卡。",
      "pos": [
        5719,
        5730
      ]
    },
    {
      "content": "将“项目 URL”更改为使用“SSL URL”并保存页面 (Ctrl+S)。",
      "pos": [
        5735,
        5773
      ]
    },
    {
      "content": "启用 SSL",
      "pos": [
        5781,
        5787
      ]
    },
    {
      "content": "验证 Internet Explorer 是否为 Visual Studio 所启动的浏览器，如下图所示：",
      "pos": [
        5881,
        5934
      ]
    },
    {
      "content": "默认浏览器",
      "pos": [
        5942,
        5947
      ]
    },
    {
      "pos": [
        6041,
        6226
      ],
      "content": "浏览器选择器可让你指定 Visual Studio 启动的浏览器。你可以选择多个浏览器，并让 Visual Studio 在你进行更改时更新每个浏览器。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>在 Visual Studio 2013 中使用浏览器链接<ept id=\"p1\">](http://www.asp.net/visual-studio/overview/2013/using-browser-link)</ept>。"
    },
    {
      "content": "浏览器选择器",
      "pos": [
        6234,
        6240
      ]
    },
    {
      "content": "按 Ctrl+F5 运行应用程序。单击“是”启动信任 IIS Express 生成的自我签署证书的过程。",
      "pos": [
        6333,
        6385
      ]
    },
    {
      "content": "信任 IIS Express 生成的自我签名证书的说明",
      "pos": [
        6394,
        6421
      ]
    },
    {
      "content": "阅读“安全警告”对话框，如果你要安装代表“localhost”的证书，请单击“是”。",
      "pos": [
        6514,
        6556
      ]
    },
    {
      "content": "localhost IIS Express 证书警告",
      "pos": [
        6564,
        6590
      ]
    },
    {
      "content": "IE 会显示“主页”页面，而且不会出现 SSL 警告。",
      "pos": [
        6683,
        6710
      ]
    },
    {
      "content": "带有 localhost SSL 和无警告的 IE",
      "pos": [
        6719,
        6744
      ]
    },
    {
      "content": "使用 SSL 时，Internet Explorer 是个不错的选择，因为它接受证书并显示 HTTPS 内容而不发出警告。Microsoft Edge 和 Google Chrome 也接受该证书。Firefox 会使用自己的证书存储区，因此会显示警告。",
      "pos": [
        6839,
        6966
      ]
    },
    {
      "content": "FireFox 证书警告",
      "pos": [
        6975,
        6987
      ]
    },
    {
      "content": "向应用程序添加数据库",
      "pos": [
        7114,
        7124
      ]
    },
    {
      "content": "接下来，你将更新应用程序以添加显示和更新联系人以及在数据库中存储数据的功能。应用程序将使用 Entity Framework (EF) 创建数据库并读取和更新数据。",
      "pos": [
        7126,
        7208
      ]
    },
    {
      "content": "为联系人添加数据模型类",
      "pos": [
        7214,
        7225
      ]
    },
    {
      "content": "首先，使用代码创建一个简单的数据模型。",
      "pos": [
        7227,
        7246
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击 Models 文件夹，单击“添加”，然后单击“类”。",
      "pos": [
        7251,
        7296
      ]
    },
    {
      "content": "Models 文件夹上下文菜单中的“添加类”",
      "pos": [
        7304,
        7326
      ]
    },
    {
      "pos": [
        7418,
        7462
      ],
      "content": "在“添加新项”对话框中，将新的类文件命名为 <bpt id=\"p1\">*</bpt>Contact.cs<ept id=\"p1\">*</ept>，然后单击“添加”。"
    },
    {
      "content": "“添加新项”对话框",
      "pos": [
        7470,
        7479
      ]
    },
    {
      "content": "将 Contact.cs 文件的内容替换为以下代码。",
      "pos": [
        7495,
        7521
      ]
    },
    {
      "pos": [
        8132,
        8183
      ],
      "content": "<bpt id=\"p1\">**</bpt>Contact<ept id=\"p1\">**</ept> 类定义你将为每个联系人存储的数据以及数据库需要的主键 <bpt id=\"p2\">*</bpt>ContactID<ept id=\"p2\">*</ept>。"
    },
    {
      "content": "创建使应用程序用户可以使用联系人的网页",
      "pos": [
        8189,
        8208
      ]
    },
    {
      "content": "ASP.NET MVC 基架功能可以自动生成用于执行创建、读取、更新和删除 (CRUD) 操作的代码。",
      "pos": [
        8210,
        8261
      ]
    },
    {
      "pos": [
        8266,
        8307
      ],
      "content": "生成项目 <bpt id=\"p1\">**</bpt>(Ctrl+Shift+B)<ept id=\"p1\">**</ept>。（在使用基架机制前必须生成项目。）"
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击 Controllers 文件夹，然后单击“添加”，再单击“控制器”。",
      "pos": [
        8313,
        8366
      ]
    },
    {
      "content": "Controllers 文件夹上下文菜单中的“添加控制器”",
      "pos": [
        8374,
        8403
      ]
    },
    {
      "content": "在“添加基架”对话框中，选择“带视图的 MVC 5 控制器，使用 EF”，然后单击“添加”。",
      "pos": [
        8421,
        8467
      ]
    },
    {
      "content": "添加基架 dlg",
      "pos": [
        8479,
        8487
      ]
    },
    {
      "content": "在“模型类”下拉框中，选择“Contact (ContactManager.Models)”。（参阅下图。）",
      "pos": [
        8579,
        8633
      ]
    },
    {
      "pos": [
        8638,
        8740
      ],
      "content": "在“数据上下文类”中，选择“ApplicationDbContext (ContactManager.Models)”。<bpt id=\"p1\">**</bpt>ApplicationDbContext<ept id=\"p1\">**</ept> 将用于成员资格数据库和联系人数据。"
    },
    {
      "content": "在“添加控制器”文本输入框中，输入“CmController”作为控制器名称。",
      "pos": [
        8745,
        8784
      ]
    },
    {
      "content": "新建数据上下文 dlg",
      "pos": [
        8792,
        8803
      ]
    },
    {
      "pos": [
        8895,
        8906
      ],
      "content": "单击<bpt id=\"p1\">**</bpt>“添加”<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        8911,
        8969
      ],
      "content": "Visual Studio 将创建一个控制器方法并为 <bpt id=\"p1\">**</bpt>Contact<ept id=\"p1\">**</ept> 对象的 CRUD 数据库操作创建视图。"
    },
    {
      "content": "启用迁移、创建数据库、添加示例数据和数据初始值设定项",
      "pos": [
        8974,
        9000
      ]
    },
    {
      "pos": [
        9005,
        9106
      ],
      "content": "接下来的任务是启用 <bpt id=\"p1\">[</bpt>Code First 迁移<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/hh770484.aspx)</ept>功能以便基于你创建的数据模型创建数据库表。"
    },
    {
      "content": "在“工具”菜单中，依次选择“NuGet 包管理器”和“包管理器控制台”。",
      "pos": [
        9111,
        9147
      ]
    },
    {
      "content": "“工具”菜单中的“程序包管理器控制台”",
      "pos": [
        9155,
        9174
      ]
    },
    {
      "content": "在“包管理器控制台”窗口中，输入以下命令：",
      "pos": [
        9266,
        9287
      ]
    },
    {
      "pos": [
        9320,
        9421
      ],
      "content": "<bpt id=\"p1\">**</bpt>enable-migrations<ept id=\"p1\">**</ept> 命令将创建一个 <bpt id=\"p2\">*</bpt>Migrations<ept id=\"p2\">*</ept> 文件夹，并在该文件夹中放入一个可编辑以对数据库进行种子设定并配置迁移的 <bpt id=\"p3\">*</bpt>Configuration.cs<ept id=\"p3\">*</ept> 文件。"
    },
    {
      "content": "在“包管理器控制台”窗口中，输入以下命令：",
      "pos": [
        9426,
        9447
      ]
    },
    {
      "pos": [
        9485,
        9644
      ],
      "content": "<bpt id=\"p1\">**</bpt>add-migration Initial<ept id=\"p1\">**</ept> 命令将在 <bpt id=\"p2\">*</bpt>Migrations<ept id=\"p2\">*</ept> 文件夹中生成一个名为 <bpt id=\"p3\">**</bpt>&amp;lt;date\\_stamp&amp;gt;Initial<ept id=\"p3\">**</ept> 的文件。此文件中的代码将生成数据库表。第一个参数 (<bpt id=\"p4\">**</bpt>Initial<ept id=\"p4\">**</ept>) 用于创建文件的名称。你可以在“解决方案资源管理器”中查看新的类文件。"
    },
    {
      "pos": [
        9650,
        9729
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Initial<ept id=\"p1\">**</ept> 类中，<bpt id=\"p2\">**</bpt>Up<ept id=\"p2\">**</ept> 方法用于创建 Contacts 表，而 <bpt id=\"p3\">**</bpt>Down<ept id=\"p3\">**</ept> 方法（在你想要返回到以前的状态时使用）用于删除该表。"
    },
    {
      "pos": [
        9734,
        9771
      ],
      "content": "打开 <bpt id=\"p1\">*</bpt>Migrations\\\\Configuration.cs<ept id=\"p1\">*</ept> 文件。"
    },
    {
      "pos": [
        9776,
        9792
      ],
      "content": "添加以下 <ph id=\"ph1\">`using`</ph> 语句："
    },
    {
      "pos": [
        9836,
        9855
      ],
      "content": "将 <bpt id=\"p1\">*</bpt>Seed<ept id=\"p1\">*</ept> 方法替换为以下代码："
    },
    {
      "pos": [
        11605,
        11794
      ],
      "content": "此代码将用联系信息初始化数据库或对其进行种子设定。有关对数据库进行种子设定的更多信息，请参阅<bpt id=\"p1\">[</bpt>对 Entity Framework (EF) 数据库进行种子设定和调试<ept id=\"p1\">](http://blogs.msdn.com/b/rickandy/archive/2013/02/12/seeding-and-debugging-entity-framework-ef-dbs.aspx)</ept>。"
    },
    {
      "content": "在“包管理器控制台”中输入以下命令：",
      "pos": [
        11799,
        11817
      ]
    },
    {
      "content": "“程序包管理器控制台”命令",
      "pos": [
        11850,
        11863
      ]
    },
    {
      "pos": [
        11882,
        11966
      ],
      "content": "<bpt id=\"p1\">**</bpt>update-database<ept id=\"p1\">**</ept> 用于运行将创建数据库的初始迁移。默认情况下，将以 SQL Server Express LocalDB 数据库的形式创建数据库。"
    },
    {
      "content": "按 Ctrl+F5 运行应用程序，然后单击“CM Demo”链接；或者导航到 https://localhost:(port#)/Cm。",
      "pos": [
        11971,
        12039
      ]
    },
    {
      "content": "应用程序将显示种子数据并提供编辑、详细信息和删除链接。你可以创建、编辑、删除和查看数据。",
      "pos": [
        12045,
        12089
      ]
    },
    {
      "content": "数据的 MVC 视图",
      "pos": [
        12097,
        12107
      ]
    },
    {
      "content": "添加 OAuth2 提供程序",
      "pos": [
        12144,
        12158
      ]
    },
    {
      "pos": [
        12160,
        12617
      ],
      "content": "<bpt id=\"p1\">[</bpt>OAuth<ept id=\"p1\">]</ept><bpt id=\"p2\">(</bpt>http://oauth.net/ <ept id=\"p2\">\"http://oauth.net/\")</ept> 是一种开放协议，允许以一种简单而标准的方法从 Web、移动和桌面应用程序进行安全授权。ASP.NET MVC Internet 模板使用 OAuth 公开将 Facebook、Twitter、Google 和 Microsoft 作为身份验证提供程序。虽然本教程仅使用 Google 作为身份验证提供程序，但你可轻松修改代码以使用其中任一提供程序。实施其他提供程序的步骤与你将在本教程中看到的步骤非常类似。若要将 Facebook 用作身份验证提供程序，请参阅<bpt id=\"p3\">[</bpt>使用 Facebook、Twitter、LinkedIn 和 Google OAuth2 登录名创建 MVC 5 应用<ept id=\"p3\">](http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on)</ept>。"
    },
    {
      "pos": [
        12619,
        12686
      ],
      "content": "除了身份验证外，本教程还将使用角色实施授权。只有你添加到 <bpt id=\"p1\">*</bpt>canEdit<ept id=\"p1\">*</ept> 角色中的用户将能更改数据（即，创建、编辑或删除联系人）。"
    },
    {
      "pos": [
        12691,
        12929
      ],
      "content": "遵循<bpt id=\"p1\">**</bpt>创建 OAuth2 的 Google 应用以设置 OAuth2 的 Google 应用<ept id=\"p1\">**</ept>中<bpt id=\"p2\">[</bpt>使用 Facebook、Twitter、LinkedIn 和 Google OAuth2 登录名创建 MVC 5 应用<ept id=\"p2\">](http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on#goog)</ept>的说明。"
    },
    {
      "content": "运行并测试应用，以确认你可以使用 Google 身份验证登录。",
      "pos": [
        12934,
        12965
      ]
    },
    {
      "pos": [
        12970,
        13103
      ],
      "content": "如果想要创建具有特定提供程序图标的社交登录按钮，请参阅 <bpt id=\"p1\">[</bpt>ASP.NET MVC 5 的美观社交登录按钮<ept id=\"p1\">](http://www.jerriepelser.com/blog/pretty-social-login-buttons-for-asp-net-mvc-5)</ept>"
    },
    {
      "content": "使用成员资格 API",
      "pos": [
        13129,
        13139
      ]
    },
    {
      "pos": [
        13141,
        13323
      ],
      "content": "在本节中，你会将本地用户和 <bpt id=\"p1\">*</bpt>canEdit<ept id=\"p1\">*</ept> 角色添加到成员资格数据库。只有具有 <bpt id=\"p2\">*</bpt>canEdit<ept id=\"p2\">*</ept> 角色的用户才能编辑数据。最佳做法是按照角色可以执行的操作命名这些角色，因此 <bpt id=\"p3\">*</bpt>canEdit<ept id=\"p3\">*</ept> 优于名为 <bpt id=\"p4\">*</bpt>admin<ept id=\"p4\">*</ept> 的角色。在你的应用程序升级后，你可以添加新角色，例如 <bpt id=\"p5\">*</bpt>canDeleteMembers<ept id=\"p5\">*</ept>，而不是描述性较差的 <bpt id=\"p6\">*</bpt>superAdmin<ept id=\"p6\">*</ept>。"
    },
    {
      "pos": [
        13328,
        13381
      ],
      "content": "打开 <bpt id=\"p1\">*</bpt>migrations\\ configuration.cs<ept id=\"p1\">*</ept> 文件并添加以下 <ph id=\"ph1\">`using`</ph> 语句："
    },
    {
      "pos": [
        13485,
        13515
      ],
      "content": "将以下 <bpt id=\"p1\">**</bpt>AddUserAndRole<ept id=\"p1\">**</ept> 方法添加到类："
    },
    {
      "pos": [
        14259,
        14277
      ],
      "content": "从 <bpt id=\"p1\">**</bpt>Seed<ept id=\"p1\">**</ept> 方法调用新类："
    },
    {
      "pos": [
        14528,
        14550
      ],
      "content": "下图显示了对 <bpt id=\"p1\">*</bpt>Seed<ept id=\"p1\">*</ept> 方法所做的更改："
    },
    {
      "content": "代码映像",
      "pos": [
        14558,
        14562
      ]
    },
    {
      "pos": [
        14656,
        14841
      ],
      "content": "此代码会创建名为 <bpt id=\"p1\">*</bpt>canEdit<ept id=\"p1\">*</ept> 的新角色，创建新的本地用户 *<bpt id=\"p2\">*</bpt>user1@contoso.com<ept id=\"p2\">*</ept>，并将 *<bpt id=\"p3\">*</bpt>user1@contoso.com<ept id=\"p3\">*</ept> 添加到 <bpt id=\"p4\">*</bpt>canEdit<ept id=\"p4\">*</ept> 角色。有关详细信息，请参阅 ASP.NET 站点上的 <bpt id=\"p5\">[</bpt>ASP.NET 标识教程<ept id=\"p5\">](http://www.asp.net/identity/overview/features-api)</ept>。"
    },
    {
      "content": "使用临时代码将新的社交登录用户添加到 canEdit 角色",
      "pos": [
        14846,
        14875
      ]
    },
    {
      "pos": [
        14881,
        15091
      ],
      "content": "在本部分中，你将临时修改帐户控制器中的 <bpt id=\"p1\">**</bpt>ExternalLoginConfirmation<ept id=\"p1\">**</ept> 方法以将使用 OAuth 提供程序注册的新用户添加到 <bpt id=\"p2\">*</bpt>canEdit<ept id=\"p2\">*</ept> 角色。我们希望在将来提供与 <bpt id=\"p3\">[</bpt>WSAT<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/ms228053.aspx)</ept> 类似的工具，该工具支持你创建和编辑用户帐户和角色。到时，你就可以使用临时代码来实现相同的功能。"
    },
    {
      "pos": [
        15096,
        15176
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>Controllers\\AccountController.cs<ept id=\"p1\">**</ept> 文件并导航到 <bpt id=\"p2\">**</bpt>ExternalLoginConfirmation<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "pos": [
        15181,
        15231
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>SignInAsync<ept id=\"p1\">**</ept> 调用之前将以下调用添加到 <bpt id=\"p2\">**</bpt>AddToRoleAsync<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "上面的代码会将新注册的用户添加到“canEdit”角色，这为他们提供了对更改（编辑）数据的操作方法的访问权限。以下代码段根据上下文显示了新的代码行。",
      "pos": [
        15299,
        15373
      ]
    },
    {
      "pos": [
        16907,
        17098
      ],
      "content": "在本教程的后面，你会将应用程序部署到 Azure，在其中，你将使用 Google 或其他第三方身份验证提供程序进行登录。这会将你新注册的帐户添加到 <bpt id=\"p1\">*</bpt>canEdit<ept id=\"p1\">*</ept> 角色。发现 Web 应用的 URL 并且具有 Google ID 的任何人都能注册并更新你的数据库。若要阻止其他人这样做，你可以停止该 Web 应用。你可以通过检查数据库来验证具有 <bpt id=\"p2\">*</bpt>canEdit<ept id=\"p2\">*</ept> 角色的人员。"
    },
    {
      "content": "在“包装管理器控制台”中，点击向上键以显示以下命令：",
      "pos": [
        17100,
        17126
      ]
    },
    {
      "pos": [
        17153,
        17295
      ],
      "content": "<bpt id=\"p1\">**</bpt>Update-Database<ept id=\"p1\">**</ept> 命令将运行 <bpt id=\"p2\">**</bpt>Seed<ept id=\"p2\">**</ept> 方法，而该方法将运行你前面添加的 <bpt id=\"p3\">**</bpt>AddUserAndRole<ept id=\"p3\">**</ept> 方法。<bpt id=\"p4\">**</bpt>AddUserAndRole<ept id=\"p4\">**</ept> 方法将创建用户 *<bpt id=\"p5\">*</bpt>user1@contoso.com<ept id=\"p5\">*</ept> 并将其添加到 <bpt id=\"p6\">*</bpt>canEdit<ept id=\"p6\">*</ept> 角色。"
    },
    {
      "pos": [
        17299,
        17400
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"protect-the-application-with-ssl-and-the-authorize-attribute\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 通过 SSL 和 Authorize 属性保护应用程序"
    },
    {
      "pos": [
        17405,
        17636
      ],
      "content": "在本部分中，你将应用 <bpt id=\"p1\">[</bpt>Authorize<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.authorizeattribute.aspx)</ept> 属性以限制对操作方法的访问。匿名用户将只能查看主控制器的 <bpt id=\"p2\">**</bpt>Index<ept id=\"p2\">**</ept> 操作方法。注册用户将能够查看联系人数据（Cm 控制器的“索引”和“详细信息”页）、“关于”页和“联系人”页。只有具有 <bpt id=\"p3\">*</bpt>canEdit<ept id=\"p3\">*</ept> 角色的用户才能访问可更改数据的操作方法。"
    },
    {
      "pos": [
        17641,
        17723
      ],
      "content": "打开 <bpt id=\"p1\">*</bpt>App_Start\\FilterConfig.cs<ept id=\"p1\">*</ept> 文件并将 <bpt id=\"p2\">*</bpt>RegisterGlobalFilters<ept id=\"p2\">*</ept> 方法替换为以下内容（其中添加了两个筛选器）："
    },
    {
      "pos": [
        18012,
        18647
      ],
      "content": "此代码将在应用程序中添加 <bpt id=\"p1\">[</bpt>Authorize<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.authorizeattribute.aspx)</ept> 筛选器和 <bpt id=\"p2\">[</bpt>RequireHttps<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.requirehttpsattribute.aspx)</ept> 筛选器。<bpt id=\"p3\">[</bpt>Authorize<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.authorizeattribute.aspx)</ept> 筛选器将阻止匿名用户访问应用程序中的任何方法。你将使用 <bpt id=\"p4\">[</bpt>AllowAnonymous<ept id=\"p4\">](http://blogs.msdn.com/b/rickandy/archive/2012/03/23/securing-your-asp-net-mvc-4-app-and-the-new-allowanonymous-attribute.aspx)</ept> 属性选择取消几个方法中的授权要求，因此匿名用户可以登录和查看主页。<bpt id=\"p5\">[</bpt>RequireHttps<ept id=\"p5\">](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.requirehttpsattribute.aspx)</ept> 将要求对 Web 应用的所有访问都必须通过 HTTPS。"
    },
    {
      "pos": [
        18653,
        19109
      ],
      "content": "或者，向每个控制器中添加 <bpt id=\"p1\">[</bpt>Authorize<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.authorizeattribute.aspx)</ept> 和 <bpt id=\"p2\">[</bpt>RequireHttps<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.requirehttpsattribute.aspx)</ept> 属性，但最安全的做法是将这些属性应用于整个应用程序。通过全局添加这两个属性，你添加的每个新控制器和操作方法都将自动受到保护，你将无需记住应用它们。有关更多信息，请参阅<bpt id=\"p3\">[</bpt>保护 ASP.NET MVC 应用和新的 AllowAnonymous 属性<ept id=\"p3\">](http://blogs.msdn.com/b/rickandy/archive/2012/03/23/securing-your-asp-net-mvc-4-app-and-the-new-allowanonymous-attribute.aspx)</ept>。"
    },
    {
      "pos": [
        19114,
        19452
      ],
      "content": "将 <bpt id=\"p1\">[</bpt>AllowAnonymous<ept id=\"p1\">](http://blogs.msdn.com/b/rickandy/archive/2012/03/23/securing-your-asp-net-mvc-4-app-and-the-new-allowanonymous-attribute.aspx)</ept> 属性添加到主控制器的 <bpt id=\"p2\">**</bpt>Index<ept id=\"p2\">**</ept> 方法。<bpt id=\"p3\">[</bpt>AllowAnonymous<ept id=\"p3\">](http://blogs.msdn.com/b/rickandy/archive/2012/03/23/securing-your-asp-net-mvc-4-app-and-the-new-allowanonymous-attribute.aspx)</ept> 属性使你能够将你要选择取消授权的方法加入白名单。"
    },
    {
      "pos": [
        19635,
        19693
      ],
      "content": "如果对 <bpt id=\"p1\">*</bpt>AllowAnonymous<ept id=\"p1\">*</ept> 执行全局搜索，你将看到它在 Account 控制器的登录和注册方法中使用。"
    },
    {
      "pos": [
        19698,
        19860
      ],
      "content": "在 <bpt id=\"p1\">*</bpt>CmController.cs<ept id=\"p1\">*</ept> 中，将 <ph id=\"ph1\">`[Authorize(Roles = \"canEdit\")]`</ph> 添加到 <bpt id=\"p2\">*</bpt>Cm<ept id=\"p2\">*</ept> 控制器中用于更改数据的 HttpGet 和 HttpPost 方法（Create、Edit、Delete，即除 Index 和 Details 外的每个操作方法）。下面显示了一部分已完成代码："
    },
    {
      "content": "按 Ctrl+F5 运行应用程序。",
      "pos": [
        21282,
        21299
      ]
    },
    {
      "content": "如果你仍是从前一个会话登录的，请点击“注销”链接。",
      "pos": [
        21304,
        21329
      ]
    },
    {
      "content": "单击“关于”或“联系人”链接。你将重定向到登录页，因为匿名用户无法查看这些页面。",
      "pos": [
        21334,
        21374
      ]
    },
    {
      "pos": [
        21379,
        21455
      ],
      "content": "单击“注册为新用户”链接并添加电子邮件为 *<bpt id=\"p1\">*</bpt>joe@contoso.com<ept id=\"p1\">*</ept> 的本地用户。验证 <bpt id=\"p2\">*</bpt>Joe<ept id=\"p2\">*</ept> 是否能查看主页、“关于”页和“联系人”页。"
    },
    {
      "content": "登录",
      "pos": [
        21463,
        21465
      ]
    },
    {
      "content": "单击“CM 演示”链接并验证你是否能看到数据。",
      "pos": [
        21558,
        21581
      ]
    },
    {
      "pos": [
        21586,
        21635
      ],
      "content": "单击页面上的编辑链接，你将被重定向到登录页（因为新的本地用户未添加到 <bpt id=\"p1\">*</bpt>canEdit<ept id=\"p1\">*</ept> 角色）。"
    },
    {
      "pos": [
        21640,
        21715
      ],
      "content": "使用帐户 *<bpt id=\"p1\">*</bpt>user1@contoso.com<ept id=\"p1\">*</ept> 和密码“P\\_assw0rd1”（“word”中的“0”是零）登录。你将重定向到之前选择的编辑页。"
    },
    {
      "pos": [
        21721,
        21832
      ],
      "content": "如果你无法使用该帐户和密码登录，请尝试从源代码中复制密码并粘贴它。如果你仍然无法登录，请检查 <bpt id=\"p1\">**</bpt>AspNetUsers<ept id=\"p1\">**</ept> 表的 <bpt id=\"p2\">**</bpt>UserName<ept id=\"p2\">**</ept> 列，以验证是否已添加 *<bpt id=\"p3\">*</bpt>user1@contoso.com<ept id=\"p3\">*</ept>。"
    },
    {
      "content": "验证你是否能执行数据更改。",
      "pos": [
        21837,
        21850
      ]
    },
    {
      "content": "将应用部署到 Azure",
      "pos": [
        21899,
        21911
      ]
    },
    {
      "content": "在 Visual Studio 中，在“解决方案资源管理器”中右键单击该项目，从上下文菜单中选择“发布”。",
      "pos": [
        21916,
        21969
      ]
    },
    {
      "content": "项目上下文菜单中的“发布”",
      "pos": [
        21977,
        21990
      ]
    },
    {
      "content": "“发布 Web”向导将打开。",
      "pos": [
        22012,
        22026
      ]
    },
    {
      "content": "单击“发布 Web”对话框左侧的“设置”选项卡。",
      "pos": [
        22031,
        22055
      ]
    },
    {
      "content": "单击“v”图标为“ApplicationDbContext”选择“远程连接字符串”并选择你在创建项目时创建的数据库。",
      "pos": [
        22060,
        22118
      ]
    },
    {
      "content": "设置",
      "pos": [
        22129,
        22131
      ]
    },
    {
      "content": "在“ContactManagerContext”下，选择“执行 Code First 迁移”。",
      "pos": [
        22224,
        22271
      ]
    },
    {
      "content": "设置",
      "pos": [
        22279,
        22281
      ]
    },
    {
      "content": "单击“发布”。",
      "pos": [
        22374,
        22381
      ]
    },
    {
      "pos": [
        22386,
        22445
      ],
      "content": "以 *<bpt id=\"p1\">*</bpt>user1@contoso.com<ept id=\"p1\">*</ept> 身份登录（使用密码“P\\_assw0rd1”），并验证是否可以编辑数据。"
    },
    {
      "content": "注销。",
      "pos": [
        22450,
        22453
      ]
    },
    {
      "pos": [
        22458,
        22568
      ],
      "content": "转至 <bpt id=\"p1\">[</bpt>Google 开发人员控制台<ept id=\"p1\">](https://console.developers.google.com/)</ept>，并在“凭据”选项卡上更新重定向 URI 和 JavaScript 来源，以使用 Azure URL。"
    },
    {
      "pos": [
        22573,
        22797
      ],
      "content": "使用 Google 或 Facebook 登录。这会将 Google 或 Facebook 帐户添加到 <bpt id=\"p1\">**</bpt>canEdit<ept id=\"p1\">**</ept> 角色。如果收到 HTTP 400 错误消息“https://contactmanager{my version}.chinacloudsites.cn/signin-google 请求中的重定向 URI 与注册的重定向 URI 不匹配。”，则必须等待所做更改传播完成。如果在几分钟后收到此错误，请验证 URI 是否正确。"
    },
    {
      "content": "停止 Web 应用以阻止其他人注册",
      "pos": [
        22803,
        22820
      ]
    },
    {
      "content": "在“服务器资源管理器”中，导航到“Azure &gt; Azure Web 应用 &gt; {你的资源组} &gt; {你的 Web 应用}”。",
      "pos": [
        22827,
        22890
      ]
    },
    {
      "content": "右键单击 Web 应用并选择“停止”。",
      "pos": [
        22895,
        22914
      ]
    },
    {
      "pos": [
        22920,
        22996
      ],
      "content": "也可以从 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中选择 Web 应用，然后单击页面底部的“停止”图标。"
    },
    {
      "content": "stop网站portal",
      "pos": [
        23008,
        23020
      ]
    },
    {
      "content": "删除 AddToRoleAsync、发布和测试",
      "pos": [
        23117,
        23140
      ]
    },
    {
      "pos": [
        23145,
        23205
      ],
      "content": "从 Account 控制器中的 <bpt id=\"p1\">**</bpt>ExternalLoginConfirmation<ept id=\"p1\">**</ept> 方法中注释掉或删除以下代码："
    },
    {
      "content": "生成项目（该操作将保存文件更改并确认没有任何编译错误）。",
      "pos": [
        23273,
        23301
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击该项目并选择“发布”。",
      "pos": [
        23306,
        23335
      ]
    },
    {
      "content": "单击“开始预览”按钮。只会部署需要更新的文件。",
      "pos": [
        23463,
        23486
      ]
    },
    {
      "content": "从 Visual Studio 或门户启动 Web 应用。“ Web 应用停止时无法发布”。",
      "pos": [
        23491,
        23537
      ]
    },
    {
      "content": "启动 Web 应用",
      "pos": [
        23545,
        23554
      ]
    },
    {
      "content": "返回到 Visual Studio 并单击“发布”。",
      "pos": [
        23647,
        23673
      ]
    },
    {
      "content": "Azure 应用程序将在默认浏览器中打开。如果你已登录，请注销，以便能够以匿名用户身份查看主页。",
      "pos": [
        23678,
        23726
      ]
    },
    {
      "content": "单击“关于”链接。你将重定向到登录页。",
      "pos": [
        23731,
        23750
      ]
    },
    {
      "pos": [
        23755,
        23851
      ],
      "content": "单击登录页上的“注册”链接并创建本地帐户。我们将使用此本地帐户验证你是否能访问只读页，而无法访问更改数据的页面（受 <bpt id=\"p1\">*</bpt>canEdit<ept id=\"p1\">*</ept> 角色的保护）。在本教程的后面，你将删除本地帐户访问权限。"
    },
    {
      "content": "注册",
      "pos": [
        23859,
        23861
      ]
    },
    {
      "content": "验证你是否能导航到“关于”和“联系人”页。",
      "pos": [
        23954,
        23975
      ]
    },
    {
      "content": "注销",
      "pos": [
        23983,
        23985
      ]
    },
    {
      "pos": [
        24078,
        24122
      ],
      "content": "单击“CM 演示”链接以导航到“Cm”控制器。或者，也可以将 <bpt id=\"p1\">*</bpt>Cm<ept id=\"p1\">*</ept> 附加到 URL。"
    },
    {
      "content": "CM 页",
      "pos": [
        24130,
        24134
      ]
    },
    {
      "content": "单击“编辑”链接。",
      "pos": [
        24228,
        24237
      ]
    },
    {
      "content": "你将重定向到登录页。",
      "pos": [
        24243,
        24253
      ]
    },
    {
      "content": "在“使用其他服务进行登录”下，单击“Google”或“Facebook”并使用你之前注册的帐户进行登录。（如果你的动作够快，同时会话 Cookie 未超时，将使用你先前所用的 Google 或 Facebook 帐户为你自动登录。）",
      "pos": [
        24258,
        24374
      ]
    },
    {
      "content": "验证你是否能在登录到该帐户时编辑数据。",
      "pos": [
        24379,
        24398
      ]
    },
    {
      "pos": [
        24404,
        24528
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>你无法从此应用程序注销 Google 并使用同一浏览器登录到其他 Google 帐户。如果您使用的是一个浏览器，则必须导航到 Google 并注销。您可以借助其他浏览器，使用来自同一第三方身份验证器（如 Google）的其他帐户登录。"
    },
    {
      "content": "如果你未填写 Google 帐户信息中的姓名，则会发生 NullReferenceException。",
      "pos": [
        24534,
        24585
      ]
    },
    {
      "content": "检查 SQL Azure 数据库",
      "pos": [
        24590,
        24606
      ]
    },
    {
      "content": "在“服务器资源管理器”中，导航到“Azure &gt; SQL 数据库 &gt; {你的数据库}”",
      "pos": [
        24614,
        24657
      ]
    },
    {
      "content": "右键单击你的数据库并选择“在 SQL Server 对象资源管理器中打开”。",
      "pos": [
        24662,
        24700
      ]
    },
    {
      "content": "在 SSOX 中打开",
      "pos": [
        24709,
        24719
      ]
    },
    {
      "content": "如果以前没有连接到此数据库，可能将提示你添加一个防火墙规则以启用对你当前的 IP 地址的访问。将预先填充 IP 地址。只需单击“添加防火墙规则”即可启用访问。",
      "pos": [
        24814,
        24893
      ]
    },
    {
      "content": "添加防火墙规则",
      "pos": [
        24901,
        24908
      ]
    },
    {
      "content": "使用创建数据库服务器时指定的用户名和密码登录到数据库。",
      "pos": [
        25012,
        25039
      ]
    },
    {
      "content": "右键单击“AspNetUsers”表，然后选择“查看数据”。",
      "pos": [
        25045,
        25075
      ]
    },
    {
      "content": "CM 页",
      "pos": [
        25083,
        25087
      ]
    },
    {
      "pos": [
        25181,
        25297
      ],
      "content": "记下你注册要成为 <bpt id=\"p1\">**</bpt>canEdit<ept id=\"p1\">**</ept> 角色的 Google 帐户中的 ID，并记下 *<bpt id=\"p2\">*</bpt>user1@contoso.com<ept id=\"p2\">*</ept> 的 ID。这些 ID 只应是具有 <bpt id=\"p3\">**</bpt>canEdit<ept id=\"p3\">**</ept> 角色的用户。（你将在下一步中对此进行验证。）"
    },
    {
      "content": "CM 页",
      "pos": [
        25305,
        25309
      ]
    },
    {
      "content": "在“SQL Server 对象资源管理器”中，右键单击“AspNetUserRoles”，然后选择“查看数据”。",
      "pos": [
        25401,
        25457
      ]
    },
    {
      "content": "CM 页",
      "pos": [
        25465,
        25469
      ]
    },
    {
      "pos": [
        25562,
        25618
      ],
      "content": "验证 <bpt id=\"p1\">**</bpt>UserId<ept id=\"p1\">**</ept> 是否来自 *<bpt id=\"p2\">*</bpt>user1@contoso.com<ept id=\"p2\">*</ept> 和你注册的 Google 帐户。"
    },
    {
      "pos": [
        25622,
        25657
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"troubleshooting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 疑难解答"
    },
    {
      "content": "如果你遇到了问题，请尝试遵循以下建议。",
      "pos": [
        25659,
        25678
      ]
    },
    {
      "content": "预配 SQL 数据库时出错 - 确保已安装最新的 SDK。2.7.1 之前的版本存在一个 bug，在某些情况下，当 VS 尝试创建数据库服务器或数据库时，该 bug 会导致错误。",
      "pos": [
        25682,
        25771
      ]
    },
    {
      "content": "创建 Azure 资源时出现错误消息“你的订阅产品类型不支持该操作” - 同上。",
      "pos": [
        25774,
        25814
      ]
    },
    {
      "pos": [
        25817,
        25986
      ],
      "content": "部署时出错 - 建议查看<bpt id=\"p1\">[</bpt>基本 ASP.NET 部署<ept id=\"p1\">](/documentation/articles/web-sites-dotnet-get-started)</ept>一文。该部署方案较为简单，如果你遇到相同的问题，也许可以轻松地识别原因。例如，在某些企业环境中，企业防火墙可能会阻止 Web Deploy 与 Azure 建立所需的连接类型。"
    },
    {
      "content": "部署时无法在“发布 Web”向导中选择连接字符串 - 如果你使用另一种方法来创建 Azure 资源（例如，尝试部署到在门户中创建的 Web 应用和 SQL 数据库），SQL 数据库可能与 Web 应用不相关联。最简单的解决方案是根据本教程中所示，使用 VS 创建新的 Web 应用和数据库。不需要从头开始学习本教程 - 在“发布 Web”向导中，可以选择创建新的 Web 应用，此时会出现你在创建项目时所看到的相同 Azure 资源创建对话框。",
      "pos": [
        25989,
        26211
      ]
    },
    {
      "content": "有关 Google 或 Facebook 开发人员门户的指导已过时 - 在本教程末尾的 Disqus 专门注释。",
      "pos": [
        26214,
        26270
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        26275,
        26279
      ]
    },
    {
      "content": "你已创建一个可对用户进行身份验证的基本 ASP.NET MVC Web 应用。有关常见身份验证任务以及如何保护机密数据的详细信息，请参阅以下教程。",
      "pos": [
        26281,
        26354
      ]
    },
    {
      "content": "创建具有登录、电子邮件确认及密码重置功能的安全 ASP.NET MVC 5 Web 应用",
      "pos": [
        26359,
        26403
      ]
    },
    {
      "content": "使用 SMS 和电子邮件双因素身份验证的 ASP.NET MVC 5 应用程序",
      "pos": [
        26531,
        26570
      ]
    },
    {
      "content": "将密码和其他敏感数据部署到　ASP.NET 和 Azure 的最佳做法",
      "pos": [
        26686,
        26721
      ]
    },
    {
      "pos": [
        26861,
        27083
      ],
      "content": "<bpt id=\"p1\">[</bpt>使用 Facebook 和 Google OAuth2 创建 ASP.NET MVC 5 应用<ept id=\"p1\">](http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on)</ept>包含有关如何将配置文件数据添加到用户注册数据库的说明以及有关将 Facebook 用作身份验证提供程序的说明。"
    },
    {
      "content": "ASP.NET MVC 5 入门",
      "pos": [
        27087,
        27103
      ]
    },
    {
      "pos": [
        27175,
        27362
      ],
      "content": "有关如何使用 Entity Framework 的高级教程，请参阅 <bpt id=\"p1\">[</bpt>EF 和 MVC 入门<ept id=\"p1\">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application)</ept>。"
    },
    {
      "pos": [
        27364,
        27529
      ],
      "content": "<bpt id=\"p1\">***</bpt>请提供有关你喜欢的内容或者你希望看到改善的内容的反馈<ept id=\"p1\">***</ept>，不仅关于教程本身，也关于它所演示的产品。你的反馈将帮助我们确定优先改进哪些方面。你还可以在<bpt id=\"p2\">[</bpt>教我编写代码<ept id=\"p2\">](http://aspnet.uservoice.com/forums/228522-show-me-how-with-code)</ept>上请求帮助以及对新主题投票。"
    }
  ],
  "content": "<properties \n    pageTitle=\"创建具有身份验证和 SQL 数据库的 ASP.NET MVC 应用程序并将其部署到 Azure Web 应用\" \n    description=\"了解如何开发具有 SQL 数据库后端的 ASP.NET MVC 5 应用程序，添加身份验证和授权，并将其部署到 Azure。\" \n    services=\"app-service\\web\" \n    documentationCenter=\".net\" \n    authors=\"Rick-Anderson\" \n    writer=\"Rick-Anderson\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"web-sites\"\n    ms.date=\"12/07/2015\" \n    wacn.date=\"01/21/2016\"/>\n\n# 创建具有身份验证和 SQL 数据库的 ASP.NET MVC 应用程序并将其部署到 Azure Web 应用\n\n本教程演示如何构建安全的 ASP.NET MVC 5 Web 应用，以便用户能够使用 Facebook 或 Google 凭据进行登录。该应用是一个简单的联系人列表，它使用 ADO.NET Entity Framework 进行数据库访问。你需要将该应用部署到 [Azure Web 应用](/documentation/services/web-sites/)。\n\n完成本教程之后，你将能够在云中启动并运行安全的数据驱动的 Web 应用，以及使用云数据库。下图演示了已完成的应用程序的登录页。\n\n![登录页面][rxb]\n\n学习内容：\n\n* 如何在 Visual Studio 中创建安全的 ASP.NET MVC 5 Web 项目。\n* 如何对使用 Google 或 Facebook 帐户凭据登录的用户进行身份验证和授权（使用 [OAuth 2.0](http://oauth.net/2 \"http://oauth.net/2\") 的社交网络提供商身份验证）。\n* 如何对在应用程序管理的数据库中注册的用户进行身份验证和授权（使用 [ASP.NET 标识](http://asp.net/identity/)的本地身份验证）。\n* 如何使用 ADO.NET Entity Framework 6 Code First 在 SQL 数据库中读取和写入数据。\n* 如何使用 Entity Framework Code First 迁移来部署数据库。\n* 如何使用 Azure SQL 数据库在云中存储关系数据。\n* 如何部署 Web 项目，以便将数据库用于 Azure 中的 [ Web 应用](/documentation/services/web-sites/)。\n\n>[AZURE.NOTE]这是一篇很长的教程。如果你想要快速了解 Azure Web 应用和 Visual Studio Web 项目，请参阅[在 Azure 中创建 ASP.NET Web 应用](/documentation/articles/web-sites-dotnet-get-started)。有关疑难解答信息，请参阅[疑难解答](#troubleshooting)部分。\n>\n\n## 先决条件\n\n若要完成本教程，您需要一个 Azure 帐户。如果你没有帐户，可以[注册试用版](/pricing/1rmb-trial/?WT.mc_id=A261C142F)。\n\n若要设置开发环境，你必须安装 [Visual Studio 2013 Update 4](http://go.microsoft.com/fwlink/?LinkId=390521) 或更高版本，以及最新版本的 [Azure SDK for .NET](http://go.microsoft.com/fwlink/?linkid=324322&clcid=0x409)。本文专为 Visual Studio Update 4 和 SDK 2.7.1 编写。相同的说明同样适用于已安装最新 [Azure SDK for .NET](http://go.microsoft.com/fwlink/?linkid=518003&clcid=0x409) 的 Visual Studio 2015，但有些屏幕看起来与插图不同。\n\n## 创建 ASP.NET MVC 5 应用程序\n\n### 创建项目\n\n1. 在“文件”菜单中，单击“新建项目”。\n\n    ![“文件”菜单中的“新建项目”](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/gs13newproj.png)\n\n1. 在“新建项目”对话框中，展开“C#”并在“已安装的模板”下选择“Web”，然后选择“ASP.NET Web 应用”。\n\n1. 将该应用程序命名为 **ContactManager**，然后单击“确定”。\n\n    ![“新建项目”对话框](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/GS13newprojdb.png)\n \n    **注意：**请确保输入“ContactManager”。您稍后将复制的代码块假定项目名称为 ContactManager。\n\n1. 在“新建 ASP.NET 项目”对话框中，选择“MVC”模板。确认已将“身份验证”设置为“单个用户帐户”，并且确保不选中“在云中托管”\n\n1. 单击**“确定”**。\n\n如果还没新建好 Web 应用，可以到 Azure 管理门户新建一个，并在“仪表板”的“速览”下，下载“发布配置文件”。\n\n### 设置页眉和页脚\n\n1. 在“解决方案资源管理器”中，打开 *Views\\\\Shared* 文件夹中的 *Layout.cshtml* 文件。\n\n    ![_Layout.cshtml in Solution Explorer][newapp004]\n\n1. 将 *Layout.cshtml* 文件的内容替换为以下代码。\n\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <meta charset=\"utf-8\" />\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <title>@ViewBag.Title - Contact Manager</title>\n            @Styles.Render(\"~/Content/css\")\n            @Scripts.Render(\"~/bundles/modernizr\")\n        \n        </head>\n        <body>\n            <div class=\"navbar navbar-inverse navbar-fixed-top\">\n                <div class=\"container\">\n                    <div class=\"navbar-header\">\n                        <button type=\"button\" class=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\".navbar-collapse\">\n                            <span class=\"icon-bar\"></span>\n                            <span class=\"icon-bar\"></span>\n                            <span class=\"icon-bar\"></span>\n                        </button>\n                        @Html.ActionLink(\"CM Demo\", \"Index\", \"Cm\", new { area = \"\" }, new { @class = \"navbar-brand\" })\n                    </div>\n                    <div class=\"navbar-collapse collapse\">\n                        <ul class=\"nav navbar-nav\">\n                            <li>@Html.ActionLink(\"Home\", \"Index\", \"Home\")</li>\n                            <li>@Html.ActionLink(\"About\", \"About\", \"Home\")</li>\n                            <li>@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")</li>\n                        </ul>\n                        @Html.Partial(\"_LoginPartial\")\n                    </div>\n                </div>\n            </div>\n            <div class=\"container body-content\">\n                @RenderBody()\n                <hr />\n                <footer>\n                    <p>&copy; @DateTime.Now.Year - Contact Manager</p>\n                </footer>\n            </div>\n        \n            @Scripts.Render(\"~/bundles/jquery\")\n            @Scripts.Render(\"~/bundles/bootstrap\")\n            @RenderSection(\"scripts\", required: false)\n        </body>\n        </html>\n\n    此代码将页眉和页脚中应用程序名称从“My ASP.NET Application”和“Application name”更改为“Contact Manager”和“CM Demo”。\n \n### 在本地运行应用程序\n\n1. 按 Ctrl+F5 运行应用程序。\n\n    随后在默认浏览器中显示该应用程序主页。\n\n    ![ Web 应用在本地运行](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rr2.png)\n\n这就是你创建将要部署到 Azure 的应用程序目前所需的全部操作。\n\n<a name=\"bkmk_deploytowindowsazure1\"></a> \n## 将应用程序部署到 Azure\n\n1. 在 Visual Studio 中，在“解决方案资源管理器”中右键单击该项目，从上下文菜单中选择“发布”。\n\n    ![项目上下文菜单中的“发布”](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/GS13publish.png)\n    \n    “发布 Web”向导将打开。\n\n2. 点击“导入”，并选择之前下载好的“发布配置文件”。\n\n1. 在“发布 Web”对话框中，单击“发布”。\n\n    ![发布](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rr3.png)\n\n    你创建的应用程序现在在云中运行。下次部署该应用程序时，仅会部署已更改（或新的）文件。\n\n    ![在云中运行](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss4.PNG)\n\n## 为项目启用 SSL ##\n\n1. 在“解决方案资源管理器”中，单击“ContactManager”项目，然后单击 F4 以显示“属性”窗口。\n\n3. 将“已启用 SSL”更改为 **True**。\n\n4. 复制“SSL URL”。\n\n    SSL URL 将为 https://localhost:44300/，除非你之前已创建 SSL Web 应用。\n\n    ![启用 SSL][rxSSL]\n \n1. 在“解决方案资源管理器”中，右键单击“Contact Manager”项目，然后单击“属性”。\n\n1. 单击“Web”选项卡。\n\n1. 将“项目 URL”更改为使用“SSL URL”并保存页面 (Ctrl+S)。\n\n    ![启用 SSL](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rrr1.png)\n \n1. 验证 Internet Explorer 是否为 Visual Studio 所启动的浏览器，如下图所示：\n\n    ![默认浏览器](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss12.PNG)\n\n    浏览器选择器可让你指定 Visual Studio 启动的浏览器。你可以选择多个浏览器，并让 Visual Studio 在你进行更改时更新每个浏览器。有关详细信息，请参阅[在 Visual Studio 2013 中使用浏览器链接](http://www.asp.net/visual-studio/overview/2013/using-browser-link)。\n\n    ![浏览器选择器](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss13.png)\n\n1. 按 Ctrl+F5 运行应用程序。单击“是”启动信任 IIS Express 生成的自我签署证书的过程。\n\n     ![信任 IIS Express 生成的自我签名证书的说明](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss26.PNG)\n\n1. 阅读“安全警告”对话框，如果你要安装代表“localhost”的证书，请单击“是”。\n\n    ![localhost IIS Express 证书警告](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss27.PNG)\n\n1. IE 会显示“主页”页面，而且不会出现 SSL 警告。\n\n     ![带有 localhost SSL 和无警告的 IE](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss28.PNG)\n\n     使用 SSL 时，Internet Explorer 是个不错的选择，因为它接受证书并显示 HTTPS 内容而不发出警告。Microsoft Edge 和 Google Chrome 也接受该证书。Firefox 会使用自己的证书存储区，因此会显示警告。\n\n     ![FireFox 证书警告](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss30.PNG)\n\n<a name=\"bkmk_addadatabase\"></a> \n## 向应用程序添加数据库\n\n接下来，你将更新应用程序以添加显示和更新联系人以及在数据库中存储数据的功能。应用程序将使用 Entity Framework (EF) 创建数据库并读取和更新数据。\n\n### 为联系人添加数据模型类\n\n首先，使用代码创建一个简单的数据模型。\n\n1. 在“解决方案资源管理器”中，右键单击 Models 文件夹，单击“添加”，然后单击“类”。\n\n    ![Models 文件夹上下文菜单中的“添加类”](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rr5.png)\n\n2. 在“添加新项”对话框中，将新的类文件命名为 *Contact.cs*，然后单击“添加”。\n\n    ![“添加新项”对话框][adddb002]\n\n3. 将 Contact.cs 文件的内容替换为以下代码。\n\n        using System.ComponentModel.DataAnnotations;\n        using System.Globalization;\n        namespace ContactManager.Models\n        {\n            public class Contact\n            {\n                public int ContactId { get; set; }\n                public string Name { get; set; }\n                public string Address { get; set; }\n                public string City { get; set; }\n                public string State { get; set; }\n                public string Zip { get; set; }\n                [DataType(DataType.EmailAddress)]\n                public string Email { get; set; }\n            }\n        }\n**Contact** 类定义你将为每个联系人存储的数据以及数据库需要的主键 *ContactID*。\n\n### 创建使应用程序用户可以使用联系人的网页\n\nASP.NET MVC 基架功能可以自动生成用于执行创建、读取、更新和删除 (CRUD) 操作的代码。\n\n1. 生成项目 **(Ctrl+Shift+B)**。（在使用基架机制前必须生成项目。）\n \n1. 在“解决方案资源管理器”中，右键单击 Controllers 文件夹，然后单击“添加”，再单击“控制器”。\n\n    ![Controllers 文件夹上下文菜单中的“添加控制器”][addcode001]\n\n5. 在“添加基架”对话框中，选择“带视图的 MVC 5 控制器，使用 EF”，然后单击“添加”。\n    \n    ![添加基架 dlg](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rr6.png)\n\n1. 在“模型类”下拉框中，选择“Contact (ContactManager.Models)”。（参阅下图。）\n\n1. 在“数据上下文类”中，选择“ApplicationDbContext (ContactManager.Models)”。**ApplicationDbContext** 将用于成员资格数据库和联系人数据。\n\n1. 在“添加控制器”文本输入框中，输入“CmController”作为控制器名称。\n\n    ![新建数据上下文 dlg](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss5.PNG)\n\n1. 单击**“添加”**。\n\n   Visual Studio 将创建一个控制器方法并为 **Contact** 对象的 CRUD 数据库操作创建视图。\n\n## 启用迁移、创建数据库、添加示例数据和数据初始值设定项 ##\n\n接下来的任务是启用 [Code First 迁移](http://msdn.microsoft.com/zh-cn/library/hh770484.aspx)功能以便基于你创建的数据模型创建数据库表。\n\n1. 在“工具”菜单中，依次选择“NuGet 包管理器”和“包管理器控制台”。\n\n    ![“工具”菜单中的“程序包管理器控制台”](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/SS6.png)\n\n2. 在“包管理器控制台”窗口中，输入以下命令：\n\n        enable-migrations\n\n    **enable-migrations** 命令将创建一个 *Migrations* 文件夹，并在该文件夹中放入一个可编辑以对数据库进行种子设定并配置迁移的 *Configuration.cs* 文件。\n\n2. 在“包管理器控制台”窗口中，输入以下命令：\n\n        add-migration Initial\n\n\n    **add-migration Initial** 命令将在 *Migrations* 文件夹中生成一个名为 **&lt;date\\_stamp&gt;Initial** 的文件。此文件中的代码将生成数据库表。第一个参数 (**Initial**) 用于创建文件的名称。你可以在“解决方案资源管理器”中查看新的类文件。\n\n    在 **Initial** 类中，**Up** 方法用于创建 Contacts 表，而 **Down** 方法（在你想要返回到以前的状态时使用）用于删除该表。\n\n3. 打开 *Migrations\\\\Configuration.cs* 文件。\n\n4. 添加以下 `using` 语句：\n\n         using ContactManager.Models;\n\n5. 将 *Seed* 方法替换为以下代码：\n\n        protected override void Seed(ContactManager.Models.ApplicationDbContext context)\n        {\n            context.Contacts.AddOrUpdate(p => p.Name,\n               new Contact\n               {\n                   Name = \"Debra Garcia\",\n                   Address = \"1234 Main St\",\n                   City = \"Redmond\",\n                   State = \"WA\",\n                   Zip = \"10999\",\n                   Email = \"debra@example.com\",\n               },\n                new Contact\n                {\n                    Name = \"Thorsten Weinrich\",\n                    Address = \"5678 1st Ave W\",\n                    City = \"Redmond\",\n                    State = \"WA\",\n                    Zip = \"10999\",\n                    Email = \"thorsten@example.com\",\n                },\n                new Contact\n                {\n                    Name = \"Yuhong Li\",\n                    Address = \"9012 State st\",\n                    City = \"Redmond\",\n                    State = \"WA\",\n                    Zip = \"10999\",\n                    Email = \"yuhong@example.com\",\n                },\n                new Contact\n                {\n                    Name = \"Jon Orton\",\n                    Address = \"3456 Maple St\",\n                    City = \"Redmond\",\n                    State = \"WA\",\n                    Zip = \"10999\",\n                    Email = \"jon@example.com\",\n                },\n                new Contact\n                {\n                    Name = \"Diliana Alexieva-Bosseva\",\n                    Address = \"7890 2nd Ave E\",\n                    City = \"Redmond\",\n                    State = \"WA\",\n                    Zip = \"10999\",\n                    Email = \"diliana@example.com\",\n                }\n                );\n        }\n\n    此代码将用联系信息初始化数据库或对其进行种子设定。有关对数据库进行种子设定的更多信息，请参阅[对 Entity Framework (EF) 数据库进行种子设定和调试](http://blogs.msdn.com/b/rickandy/archive/2013/02/12/seeding-and-debugging-entity-framework-ef-dbs.aspx)。\n\n6. 在“包管理器控制台”中输入以下命令：\n\n        update-database\n\n    ![“程序包管理器控制台”命令][addcode009]\n\n    **update-database** 用于运行将创建数据库的初始迁移。默认情况下，将以 SQL Server Express LocalDB 数据库的形式创建数据库。\n\n7. 按 Ctrl+F5 运行应用程序，然后单击“CM Demo”链接；或者导航到 https://localhost:(port#)/Cm。\n\n    应用程序将显示种子数据并提供编辑、详细信息和删除链接。你可以创建、编辑、删除和查看数据。\n\n    ![数据的 MVC 视图][rx2]\n\n\n<a name=\"addOauth\"></a> \n## 添加 OAuth2 提供程序\n\n[OAuth](http://oauth.net/ \"http://oauth.net/\") 是一种开放协议，允许以一种简单而标准的方法从 Web、移动和桌面应用程序进行安全授权。ASP.NET MVC Internet 模板使用 OAuth 公开将 Facebook、Twitter、Google 和 Microsoft 作为身份验证提供程序。虽然本教程仅使用 Google 作为身份验证提供程序，但你可轻松修改代码以使用其中任一提供程序。实施其他提供程序的步骤与你将在本教程中看到的步骤非常类似。若要将 Facebook 用作身份验证提供程序，请参阅[使用 Facebook、Twitter、LinkedIn 和 Google OAuth2 登录名创建 MVC 5 应用](http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on)。\n\n除了身份验证外，本教程还将使用角色实施授权。只有你添加到 *canEdit* 角色中的用户将能更改数据（即，创建、编辑或删除联系人）。\n\n1. 遵循**创建 OAuth2 的 Google 应用以设置 OAuth2 的 Google 应用**中[使用 Facebook、Twitter、LinkedIn 和 Google OAuth2 登录名创建 MVC 5 应用](http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on#goog)的说明。\n\n3. 运行并测试应用，以确认你可以使用 Google 身份验证登录。\n\n2. 如果想要创建具有特定提供程序图标的社交登录按钮，请参阅 [ASP.NET MVC 5 的美观社交登录按钮](http://www.jerriepelser.com/blog/pretty-social-login-buttons-for-asp-net-mvc-5)\n\n<a name=\"mbrDB\"></a>\n## 使用成员资格 API\n\n在本节中，你会将本地用户和 *canEdit* 角色添加到成员资格数据库。只有具有 *canEdit* 角色的用户才能编辑数据。最佳做法是按照角色可以执行的操作命名这些角色，因此 *canEdit* 优于名为 *admin* 的角色。在你的应用程序升级后，你可以添加新角色，例如 *canDeleteMembers*，而不是描述性较差的 *superAdmin*。\n\n1. 打开 *migrations\\ configuration.cs* 文件并添加以下 `using` 语句：\n\n        using Microsoft.AspNet.Identity;\n        using Microsoft.AspNet.Identity.EntityFramework;\n\n1. 将以下 **AddUserAndRole** 方法添加到类：\n\n        bool AddUserAndRole(ContactManager.Models.ApplicationDbContext context)\n        {\n            IdentityResult ir;\n            var rm = new RoleManager<IdentityRole>\n                (new RoleStore<IdentityRole>(context));\n            ir = rm.Create(new IdentityRole(\"canEdit\"));\n            var um = new UserManager<ApplicationUser>(\n                new UserStore<ApplicationUser>(context));\n            var user = new ApplicationUser()\n            {\n                UserName = \"user1@contoso.com\",\n            };\n            ir = um.Create(user, \"P_assw0rd1\");\n            if (ir.Succeeded == false)\n                return ir.Succeeded;\n            ir = um.AddToRole(user.Id, \"canEdit\");\n            return ir.Succeeded;\n        }\n\n1. 从 **Seed** 方法调用新类：\n\n        protected override void Seed(ContactManager.Models.ApplicationDbContext context)\n        {\n            AddUserAndRole(context);\n            context.Contacts.AddOrUpdate(p => p.Name,\n                // Code removed for brevity\n        }\n\n    下图显示了对 *Seed* 方法所做的更改：\n\n    ![代码映像](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss24.PNG)\n\n    此代码会创建名为 *canEdit* 的新角色，创建新的本地用户 **user1@contoso.com*，并将 **user1@contoso.com* 添加到 *canEdit* 角色。有关详细信息，请参阅 ASP.NET 站点上的 [ASP.NET 标识教程](http://www.asp.net/identity/overview/features-api)。\n\n## 使用临时代码将新的社交登录用户添加到 canEdit 角色  ##\n\n在本部分中，你将临时修改帐户控制器中的 **ExternalLoginConfirmation** 方法以将使用 OAuth 提供程序注册的新用户添加到 *canEdit* 角色。我们希望在将来提供与 [WSAT](http://msdn.microsoft.com/zh-cn/library/ms228053.aspx) 类似的工具，该工具支持你创建和编辑用户帐户和角色。到时，你就可以使用临时代码来实现相同的功能。\n\n1. 打开 **Controllers\\AccountController.cs** 文件并导航到 **ExternalLoginConfirmation** 方法。\n\n1. 在 **SignInAsync** 调用之前将以下调用添加到 **AddToRoleAsync**。\n\n        await UserManager.AddToRoleAsync(user.Id, \"canEdit\");\n\n   上面的代码会将新注册的用户添加到“canEdit”角色，这为他们提供了对更改（编辑）数据的操作方法的访问权限。以下代码段根据上下文显示了新的代码行。\n\n          // POST: /Account/ExternalLoginConfirmation\n          [HttpPost]\n          [AllowAnonymous]\n          [ValidateAntiForgeryToken]\n          public async Task ExternalLoginConfirmation(ExternalLoginConfirmationViewModel model, string returnUrl)\n          {\n             if (User.Identity.IsAuthenticated)\n             {\n                return RedirectToAction(\"Index\", \"Manage\");\n             }\n             if (ModelState.IsValid)\n             {\n                // Get the information about the user from the external login provider\n                var info = await AuthenticationManager.GetExternalLoginInfoAsync();\n                if (info == null)\n                {\n                   return View(\"ExternalLoginFailure\");\n                }\n                var user = new ApplicationUser { UserName = model.Email, Email = model.Email };\n                var result = await UserManager.CreateAsync(user);\n                if (result.Succeeded)\n                {\n                   result = await UserManager.AddLoginAsync(user.Id, info.Login);\n                   if (result.Succeeded)\n                   {\n                      await UserManager.AddToRoleAsync(user.Id, \"canEdit\");\n                      await SignInManager.SignInAsync(user, isPersistent: false, rememberBrowser: false);\n                      return RedirectToLocal(returnUrl);\n                   }\n                }\n                AddErrors(result);\n             }\n             ViewBag.ReturnUrl = returnUrl;\n             return View(model);\n          }\n\n在本教程的后面，你会将应用程序部署到 Azure，在其中，你将使用 Google 或其他第三方身份验证提供程序进行登录。这会将你新注册的帐户添加到 *canEdit* 角色。发现 Web 应用的 URL 并且具有 Google ID 的任何人都能注册并更新你的数据库。若要阻止其他人这样做，你可以停止该 Web 应用。你可以通过检查数据库来验证具有 *canEdit* 角色的人员。\n\n在“包装管理器控制台”中，点击向上键以显示以下命令：\n\n        Update-Database\n\n**Update-Database** 命令将运行 **Seed** 方法，而该方法将运行你前面添加的 **AddUserAndRole** 方法。**AddUserAndRole** 方法将创建用户 **user1@contoso.com* 并将其添加到 *canEdit* 角色。\n\n##<a id=\"protect-the-application-with-ssl-and-the-authorize-attribute\"></a> 通过 SSL 和 Authorize 属性保护应用程序 ##\n\n在本部分中，你将应用 [Authorize](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.authorizeattribute.aspx) 属性以限制对操作方法的访问。匿名用户将只能查看主控制器的 **Index** 操作方法。注册用户将能够查看联系人数据（Cm 控制器的“索引”和“详细信息”页）、“关于”页和“联系人”页。只有具有 *canEdit* 角色的用户才能访问可更改数据的操作方法。\n\n1. 打开 *App_Start\\FilterConfig.cs* 文件并将 *RegisterGlobalFilters* 方法替换为以下内容（其中添加了两个筛选器）：\n\n        public static void RegisterGlobalFilters(GlobalFilterCollection filters)\n        {\n            filters.Add(new HandleErrorAttribute());\n            filters.Add(new System.Web.Mvc.AuthorizeAttribute());\n            filters.Add(new RequireHttpsAttribute());\n        }\n        \n    此代码将在应用程序中添加 [Authorize](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.authorizeattribute.aspx) 筛选器和 [RequireHttps](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.requirehttpsattribute.aspx) 筛选器。[Authorize](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.authorizeattribute.aspx) 筛选器将阻止匿名用户访问应用程序中的任何方法。你将使用 [AllowAnonymous](http://blogs.msdn.com/b/rickandy/archive/2012/03/23/securing-your-asp-net-mvc-4-app-and-the-new-allowanonymous-attribute.aspx) 属性选择取消几个方法中的授权要求，因此匿名用户可以登录和查看主页。[RequireHttps](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.requirehttpsattribute.aspx) 将要求对 Web 应用的所有访问都必须通过 HTTPS。\n\n    或者，向每个控制器中添加 [Authorize](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.authorizeattribute.aspx) 和 [RequireHttps](http://msdn.microsoft.com/zh-cn/library/system.web.mvc.requirehttpsattribute.aspx) 属性，但最安全的做法是将这些属性应用于整个应用程序。通过全局添加这两个属性，你添加的每个新控制器和操作方法都将自动受到保护，你将无需记住应用它们。有关更多信息，请参阅[保护 ASP.NET MVC 应用和新的 AllowAnonymous 属性](http://blogs.msdn.com/b/rickandy/archive/2012/03/23/securing-your-asp-net-mvc-4-app-and-the-new-allowanonymous-attribute.aspx)。\n\n1. 将 [AllowAnonymous](http://blogs.msdn.com/b/rickandy/archive/2012/03/23/securing-your-asp-net-mvc-4-app-and-the-new-allowanonymous-attribute.aspx) 属性添加到主控制器的 **Index** 方法。[AllowAnonymous](http://blogs.msdn.com/b/rickandy/archive/2012/03/23/securing-your-asp-net-mvc-4-app-and-the-new-allowanonymous-attribute.aspx) 属性使你能够将你要选择取消授权的方法加入白名单。\n\n        public class HomeController : Controller\n        {\n          [AllowAnonymous]\n          public ActionResult Index()\n          {\n             return View();\n          }\n\n    如果对 *AllowAnonymous* 执行全局搜索，你将看到它在 Account 控制器的登录和注册方法中使用。\n\n1. 在 *CmController.cs* 中，将 `[Authorize(Roles = \"canEdit\")]` 添加到 *Cm* 控制器中用于更改数据的 HttpGet 和 HttpPost 方法（Create、Edit、Delete，即除 Index 和 Details 外的每个操作方法）。下面显示了一部分已完成代码：\n\n        // GET: Cm/Create\n        [Authorize(Roles = \"canEdit\")]\n        public ActionResult Create()\n        {\n           return View(new Contact { Address = \"123 N 456 W\",\n            City=\"Great Falls\", Email = \"ab@cd.com\", Name=\"Joe Smith\", State=\"MT\",\n           Zip = \"59405\"});\n        }\n        // POST: Cm/Create\n        // To protect from overposting attacks, please enable the specific properties you want to bind to, for \n        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n         [Authorize(Roles = \"canEdit\")]\n        public ActionResult Create([Bind(Include = \"ContactId,Name,Address,City,State,Zip,Email\")] Contact contact)\n        {\n            if (ModelState.IsValid)\n            {\n                db.Contacts.Add(contact);\n                db.SaveChanges();\n                return RedirectToAction(\"Index\");\n            }\n            return View(contact);\n        }\n        // GET: Cm/Edit/5\n        [Authorize(Roles = \"canEdit\")]\n        public ActionResult Edit(int? id)\n        {\n            if (id == null)\n            {\n                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);\n            }\n            Contact contact = db.Contacts.Find(id);\n            if (contact == null)\n            {\n                return HttpNotFound();\n            }\n            return View(contact);\n        }\n        \n1. 按 Ctrl+F5 运行应用程序。\n\n1. 如果你仍是从前一个会话登录的，请点击“注销”链接。\n\n1. 单击“关于”或“联系人”链接。你将重定向到登录页，因为匿名用户无法查看这些页面。\n\n1. 单击“注册为新用户”链接并添加电子邮件为 **joe@contoso.com* 的本地用户。验证 *Joe* 是否能查看主页、“关于”页和“联系人”页。\n\n    ![登录](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss14.PNG)\n\n1. 单击“CM 演示”链接并验证你是否能看到数据。\n\n1. 单击页面上的编辑链接，你将被重定向到登录页（因为新的本地用户未添加到 *canEdit* 角色）。\n\n1. 使用帐户 **user1@contoso.com* 和密码“P\\_assw0rd1”（“word”中的“0”是零）登录。你将重定向到之前选择的编辑页。\n\n    如果你无法使用该帐户和密码登录，请尝试从源代码中复制密码并粘贴它。如果你仍然无法登录，请检查 **AspNetUsers** 表的 **UserName** 列，以验证是否已添加 **user1@contoso.com*。\n\n1. 验证你是否能执行数据更改。\n\n<a name=\"bkmk_deploytowindowsazure11\"></a> \n## 将应用部署到 Azure\n\n1. 在 Visual Studio 中，在“解决方案资源管理器”中右键单击该项目，从上下文菜单中选择“发布”。\n\n    ![项目上下文菜单中的“发布”][firsdeploy003]\n\n    “发布 Web”向导将打开。\n\n1. 单击“发布 Web”对话框左侧的“设置”选项卡。\n\n2. 单击“v”图标为“ApplicationDbContext”选择“远程连接字符串”并选择你在创建项目时创建的数据库。\n   \n    ![设置](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rrc2.png)\n\n1. 在“ContactManagerContext”下，选择“执行 Code First 迁移”。\n\n    ![设置](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rrc3.png)\n\n1. 单击“发布”。\n\n1. 以 **user1@contoso.com* 身份登录（使用密码“P\\_assw0rd1”），并验证是否可以编辑数据。\n\n1. 注销。\n\n1. 转至 [Google 开发人员控制台](https://console.developers.google.com/)，并在“凭据”选项卡上更新重定向 URI 和 JavaScript 来源，以使用 Azure URL。\n\n1. 使用 Google 或 Facebook 登录。这会将 Google 或 Facebook 帐户添加到 **canEdit** 角色。如果收到 HTTP 400 错误消息“https://contactmanager{my version}.chinacloudsites.cn/signin-google 请求中的重定向 URI 与注册的重定向 URI 不匹配。”，则必须等待所做更改传播完成。如果在几分钟后收到此错误，请验证 URI 是否正确。\n\n### 停止 Web 应用以阻止其他人注册  \n\n1. 在“服务器资源管理器”中，导航到“Azure > Azure Web 应用 > {你的资源组} > {你的 Web 应用}”。\n\n4. 右键单击 Web 应用并选择“停止”。\n\n    也可以从 [Azure 管理门户](https://manage.windowsazure.cn)中选择 Web 应用，然后单击页面底部的“停止”图标。\n    \n    ![stop网站portal](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/stopweb.png)\n\n### 删除 AddToRoleAsync、发布和测试\n\n1. 从 Account 控制器中的 **ExternalLoginConfirmation** 方法中注释掉或删除以下代码：\n\n        await UserManager.AddToRoleAsync(user.Id, \"canEdit\");\n\n1. 生成项目（该操作将保存文件更改并确认没有任何编译错误）。\n\n5. 在“解决方案资源管理器”中，右键单击该项目并选择“发布”。\n\n       ![项目上下文菜单中的“发布”](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/GS13publish.png)\n    \n4. 单击“开始预览”按钮。只会部署需要更新的文件。\n\n5. 从 Visual Studio 或门户启动 Web 应用。“ Web 应用停止时无法发布”。\n\n    ![启动 Web 应用](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss15.png)\n\n5. 返回到 Visual Studio 并单击“发布”。\n\n3. Azure 应用程序将在默认浏览器中打开。如果你已登录，请注销，以便能够以匿名用户身份查看主页。\n\n4. 单击“关于”链接。你将重定向到登录页。\n\n5. 单击登录页上的“注册”链接并创建本地帐户。我们将使用此本地帐户验证你是否能访问只读页，而无法访问更改数据的页面（受 *canEdit* 角色的保护）。在本教程的后面，你将删除本地帐户访问权限。\n\n    ![注册](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss16.PNG)\n\n1. 验证你是否能导航到“关于”和“联系人”页。\n\n    ![注销](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/ss17.PNG)\n\n1. 单击“CM 演示”链接以导航到“Cm”控制器。或者，也可以将 *Cm* 附加到 URL。\n\n    ![CM 页](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rrr4.png)\n \n1. 单击“编辑”链接。\n\n    你将重定向到登录页。\n\n2. 在“使用其他服务进行登录”下，单击“Google”或“Facebook”并使用你之前注册的帐户进行登录。（如果你的动作够快，同时会话 Cookie 未超时，将使用你先前所用的 Google 或 Facebook 帐户为你自动登录。）\n\n2. 验证你是否能在登录到该帐户时编辑数据。\n\n    **注意：**你无法从此应用程序注销 Google 并使用同一浏览器登录到其他 Google 帐户。如果您使用的是一个浏览器，则必须导航到 Google 并注销。您可以借助其他浏览器，使用来自同一第三方身份验证器（如 Google）的其他帐户登录。\n\n    如果你未填写 Google 帐户信息中的姓名，则会发生 NullReferenceException。\n\n## 检查 SQL Azure 数据库 ##\n\n1. 在“服务器资源管理器”中，导航到“Azure > SQL 数据库 > {你的数据库}”\n\n2. 右键单击你的数据库并选择“在 SQL Server 对象资源管理器中打开”。\n \n    ![在 SSOX 中打开](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rrr12.png)\n \n3. 如果以前没有连接到此数据库，可能将提示你添加一个防火墙规则以启用对你当前的 IP 地址的访问。将预先填充 IP 地址。只需单击“添加防火墙规则”即可启用访问。\n\n    ![添加防火墙规则](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/addfirewallrule.png)\n\n3. 使用创建数据库服务器时指定的用户名和密码登录到数据库。\n \n1. 右键单击“AspNetUsers”表，然后选择“查看数据”。\n\n    ![CM 页](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rrr8.png)\n \n1. 记下你注册要成为 **canEdit** 角色的 Google 帐户中的 ID，并记下 **user1@contoso.com* 的 ID。这些 ID 只应是具有 **canEdit** 角色的用户。（你将在下一步中对此进行验证。）\n\n    ![CM 页](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/s2.png)\n \n2. 在“SQL Server 对象资源管理器”中，右键单击“AspNetUserRoles”，然后选择“查看数据”。\n\n    ![CM 页](./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rs1.png)\n \n3. 验证 **UserId** 是否来自 **user1@contoso.com* 和你注册的 Google 帐户。\n\n##<a name=\"troubleshooting\"></a> 疑难解答\n\n如果你遇到了问题，请尝试遵循以下建议。\n\n* 预配 SQL 数据库时出错 - 确保已安装最新的 SDK。2.7.1 之前的版本存在一个 bug，在某些情况下，当 VS 尝试创建数据库服务器或数据库时，该 bug 会导致错误。\n* 创建 Azure 资源时出现错误消息“你的订阅产品类型不支持该操作” - 同上。\n* 部署时出错 - 建议查看[基本 ASP.NET 部署](/documentation/articles/web-sites-dotnet-get-started)一文。该部署方案较为简单，如果你遇到相同的问题，也许可以轻松地识别原因。例如，在某些企业环境中，企业防火墙可能会阻止 Web Deploy 与 Azure 建立所需的连接类型。\n* 部署时无法在“发布 Web”向导中选择连接字符串 - 如果你使用另一种方法来创建 Azure 资源（例如，尝试部署到在门户中创建的 Web 应用和 SQL 数据库），SQL 数据库可能与 Web 应用不相关联。最简单的解决方案是根据本教程中所示，使用 VS 创建新的 Web 应用和数据库。不需要从头开始学习本教程 - 在“发布 Web”向导中，可以选择创建新的 Web 应用，此时会出现你在创建项目时所看到的相同 Azure 资源创建对话框。\n* 有关 Google 或 Facebook 开发人员门户的指导已过时 - 在本教程末尾的 Disqus 专门注释。\n\n## 后续步骤\n\n你已创建一个可对用户进行身份验证的基本 ASP.NET MVC Web 应用。有关常见身份验证任务以及如何保护机密数据的详细信息，请参阅以下教程。\n\n- [创建具有登录、电子邮件确认及密码重置功能的安全 ASP.NET MVC 5 Web 应用](http://www.asp.net/mvc/overview/getting-started/create-an-aspnet-mvc-5-web-app-with-email-confirmation-and-password-reset)\n- [使用 SMS 和电子邮件双因素身份验证的 ASP.NET MVC 5 应用程序](http://www.asp.net/mvc/overview/getting-started/aspnet-mvc-5-app-with-sms-and-email-two-factor-authentication)\n- [将密码和其他敏感数据部署到　ASP.NET 和 Azure 的最佳做法](http://www.asp.net/identity/overview/features-api/best-practices-for-deploying-passwords-and-other-sensitive-data-to-aspnet-and-azure) \n- [使用 Facebook 和 Google OAuth2 创建 ASP.NET MVC 5 应用](http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on)包含有关如何将配置文件数据添加到用户注册数据库的说明以及有关将 Facebook 用作身份验证提供程序的说明。\n- [ASP.NET MVC 5 入门](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)\n\n有关如何使用 Entity Framework 的高级教程，请参阅 [EF 和 MVC 入门](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application)。\n\n***请提供有关你喜欢的内容或者你希望看到改善的内容的反馈***，不仅关于教程本身，也关于它所演示的产品。你的反馈将帮助我们确定优先改进哪些方面。你还可以在[教我编写代码](http://aspnet.uservoice.com/forums/228522-show-me-how-with-code)上请求帮助以及对新主题投票。\n\n<!-- bookmarks -->\n[Add an OAuth Provider]: #addOauth\n[Using the Membership API]: #mbrDB\n[Create a Data Deployment Script]: #ppd\n[Update the Membership Database]: #ppd2\n\n[setupwindowsazureenv]: #bkmk_setupwindowsazure\n[createapplication]: #bkmk_createmvc4app\n[deployapp1]: #bkmk_deploytowindowsazure1\n[deployapp11]: #bkmk_deploytowindowsazure11\n[adddb]: #bkmk_addadatabase\n\n\n<!-- images-->\n[rx2]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rx2.png\n\n[rx5]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rx5.png\n[rx6]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rx6.png\n[rx7]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rx7.png\n[rx8]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rx8.png\n[rx9]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rx9.png\n\n[rxb]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rxb.png\n\n\n[rxSSL]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/rxSSL.png\n\n[rxNOT]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rxNOT.png\n[rxNOT2]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rxNOT2.png\n\n[rxNOT]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rxNOT.png\n[rxNOT]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rxNOT.png\n[rxNOT]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rxNOT.png\n[rr1]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rr1.png\n\n[rxPrevDB]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rxPrevDB.png\n\n[rxWSnew]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rxWSnew2.png\n[rxCreateWSwithDB]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/rxCreateWSwithDB.png\n\n[setup007]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/dntutmobile-setup-azure-site-004.png\n\n[newapp004]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/dntutmobile-createapp-004.png\n\n[firsdeploy003]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/dntutmobile-deploy1-publish-001.png\n\n[adddb002]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/dntutmobile-adddatabase-002.png\n[addcode001]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/dntutmobile-controller-add-context-menu.png\n\n[addcode008]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/dntutmobile-migrations-package-manager-menu.png\n[addcode009]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database/dntutmobile-migrations-package-manager-console.png\n\n\n[Important information about ASP.NET in Azure Web 应用]: #aspnetwindowsazureinfo\n[Next steps]: #nextsteps\n\n[ImportPublishSettings]: ./media/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database-vs2013/ImportPublishSettings.png\n \n\n<!---HONumber=79-->"
}