{
  "nodes": [
    {
      "content": "使用 .NET 将文件上载到媒体服务帐户",
      "pos": [
        28,
        48
      ]
    },
    {
      "content": "了解如何通过创建和上载资产将媒体内容加入媒体服务。",
      "pos": [
        68,
        93
      ]
    },
    {
      "content": "使用 .NET 将文件上载到媒体服务帐户",
      "pos": [
        315,
        335
      ]
    },
    {
      "pos": [
        446,
        557
      ],
      "content": "在媒体服务中，可以将数字文件上载（引入）到资产中。<bpt id=\"p1\">**</bpt>资产<ept id=\"p1\">**</ept>实体可以包含视频、音频、图像、缩略图集合、图文轨迹和隐藏字幕文件（以及有关这些文件的元数据。） 上载文件完成后，相关内容即安全地存储在云中供后续处理和流式处理。"
    },
    {
      "pos": [
        559,
        647
      ],
      "content": "资产中的文件称为<bpt id=\"p1\">**</bpt>资产文件<ept id=\"p1\">**</ept>。<bpt id=\"p2\">**</bpt>AssetFile<ept id=\"p2\">**</ept> 实例和实际媒体文件是两个不同的对象。AssetFile 实例包含有关媒体文件的元数据，而媒体文件包含实际媒体内容。"
    },
    {
      "content": "在创建资产时，可以指定以下加密选项。",
      "pos": [
        649,
        667
      ]
    },
    {
      "pos": [
        671,
        753
      ],
      "content": "<bpt id=\"p1\">**</bpt>无<ept id=\"p1\">**</ept> - 不使用加密。这是默认值。请注意，使用此选项时，你的内容在传送过程中或静态存储过程中都不会受到保护。如果计划使用渐进式下载交付 MP4，则使用此选项。"
    },
    {
      "pos": [
        757,
        848
      ],
      "content": "<bpt id=\"p1\">**</bpt>CommonEncryption<ept id=\"p1\">**</ept> - 上载经过常用加密或 PlayReady DRM 加密并受其保护的内容（例如，受 PlayReady DRM 保护的平滑流）时使用此选项。"
    },
    {
      "pos": [
        851,
        938
      ],
      "content": "<bpt id=\"p1\">**</bpt>EnvelopeEncrypted<ept id=\"p1\">**</ept> – 如果要上载使用 AES 加密的 HLS，请使用此选项。请注意，Transform Manager 必须已对文件进行编码和加密。"
    },
    {
      "pos": [
        941,
        1116
      ],
      "content": "<bpt id=\"p1\">**</bpt>StorageEncrypted<ept id=\"p1\">**</ept> - 使用 AES-256 位加密在本地加密明文内容，然后将其上载到 Azure Storage 中以加密形式静态存储相关内容。受存储加密保护的资产将在编码前自动解密并放入经过加密的文件系统中，并可选择在重新上载为新的输出资产前重新加密。存储加密的主要用例是在磁盘上通过静态增强加密来保护高品质的输入媒体文件。"
    },
    {
      "content": "媒体服务为资产提供磁盘上的存储加密，而不是通过数字权限管理器 (DRM) 等线路提供加密。",
      "pos": [
        1122,
        1167
      ]
    },
    {
      "pos": [
        1173,
        1299
      ],
      "content": "如果你的资产已经过存储加密，则必须配置资产传送策略。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>配置资产传送策略<ept id=\"p1\">](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)</ept>。"
    },
    {
      "pos": [
        1301,
        1478
      ],
      "content": "如果指定使用 <bpt id=\"p1\">**</bpt>CommonEncrypted<ept id=\"p1\">**</ept> 选项或 <bpt id=\"p2\">**</bpt>EnvelopeEncypted<ept id=\"p2\">**</ept> 选项加密资产，则需要将资产关联到 <bpt id=\"p3\">**</bpt>ContentKey<ept id=\"p3\">**</ept>。有关详细信息，请参阅<bpt id=\"p4\">[</bpt>如何创建 ContentKey<ept id=\"p4\">](/documentation/articles/media-services-dotnet-create-contentkey)</ept>。"
    },
    {
      "pos": [
        1480,
        1577
      ],
      "content": "如果指定使用 <bpt id=\"p1\">**</bpt>StorageEncrypted<ept id=\"p1\">**</ept> 选项加密资产，适用于 .NET 的媒体服务 SDK 将为资产创建 <bpt id=\"p2\">**</bpt>StorateEncrypted<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>ContentKey<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        1580,
        1958
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>构建流内容的 URL 时，媒体服务会使用 IAssetFile.Name 属性的值（如 http://{AMSAccount}.origin.mediaservices.chinacloudapi.cn/{GUID}/{IAssetFile.Name}/streamingParameters.）。出于这个原因，不允许使用百分号编码。<bpt id=\"p1\">**</bpt>Name<ept id=\"p1\">**</ept> 属性的值不能含有任何以下保留的<bpt id=\"p2\">[</bpt>百分号编码字符<ept id=\"p2\">](http://zh.wikipedia.org/wiki/百分号编码#.E4.BF.9D.E7.95.99.E5.AD.97.E7.AC.A6.E7.9A.84.E7.99.BE.E5.88.86.E5.8F.B7.E7.BC.96.E7.A0.81)</ept>：!*'();:@&amp;=+$,/?%#\"。此外，文件扩展名中只能含有一个“.”。"
    },
    {
      "content": "本主题说明如何使用媒体服务.NET SDK 以及媒体服务.NET SDK Extensions 将文件上载到媒体服务资产中。",
      "pos": [
        1960,
        2022
      ]
    },
    {
      "content": "使用媒体服务 .NET SDK 上载单个文件",
      "pos": [
        2029,
        2051
      ]
    },
    {
      "content": "以下示例代码使用 .NET SDK 执行以下任务：",
      "pos": [
        2054,
        2079
      ]
    },
    {
      "content": "创建空资产。",
      "pos": [
        2083,
        2089
      ]
    },
    {
      "content": "创建要与资产关联的 AssetFile 实例。",
      "pos": [
        2092,
        2115
      ]
    },
    {
      "content": "创建用于定义权限以及资产访问持续时间的 AccessPolicy 实例。",
      "pos": [
        2118,
        2154
      ]
    },
    {
      "content": "创建用于提供资产访问权限的 Locator 实例。",
      "pos": [
        2157,
        2182
      ]
    },
    {
      "content": "将单个媒体文件上载到媒体服务。",
      "pos": [
        2185,
        2200
      ]
    },
    {
      "content": "使用媒体服务 .NET SDK 上载多个文件",
      "pos": [
        3476,
        3498
      ]
    },
    {
      "content": "以下代码演示如何创建资产及上载多个文件。",
      "pos": [
        3501,
        3521
      ]
    },
    {
      "content": "代码将执行以下操作：",
      "pos": [
        3523,
        3533
      ]
    },
    {
      "content": "使用上一步中定义的 CreateEmptyAsset 方法创建一个空资产。",
      "pos": [
        3543,
        3580
      ]
    },
    {
      "pos": [
        3590,
        3630
      ],
      "content": "创建用于定义权限以及资产访问持续时间的 <bpt id=\"p1\">**</bpt>AccessPolicy<ept id=\"p1\">**</ept> 实例。"
    },
    {
      "pos": [
        3640,
        3669
      ],
      "content": "创建用于提供资产访问权限的 <bpt id=\"p1\">**</bpt>Locator<ept id=\"p1\">**</ept> 实例。"
    },
    {
      "pos": [
        3679,
        3756
      ],
      "content": "创建 <bpt id=\"p1\">**</bpt>BlobTransferClient<ept id=\"p1\">**</ept> 实例。此类型表示对 Azure Blob 进行操作的客户端。在此示例中，我们使用客户端来监视上载进度。"
    },
    {
      "pos": [
        3766,
        3807
      ],
      "content": "枚举指定目录下的所有文件，并为每个文件创建一个 <bpt id=\"p1\">**</bpt>AssetFile<ept id=\"p1\">**</ept> 实例。"
    },
    {
      "pos": [
        3817,
        3850
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>UploadAsync<ept id=\"p1\">**</ept> 方法将文件上载到媒体服务中。"
    },
    {
      "pos": [
        3857,
        3905
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 使用 UploadAsync 方法可确保调用不会阻塞并且文件并行上载。"
    },
    {
      "content": "上载大量资产时，请注意以下事项。",
      "pos": [
        6394,
        6410
      ]
    },
    {
      "pos": [
        6414,
        6481
      ],
      "content": "每个线程创建一个新的 <bpt id=\"p1\">**</bpt>CloudMediaContext<ept id=\"p1\">**</ept> 对象。<bpt id=\"p2\">**</bpt>CloudMediaContext<ept id=\"p2\">**</ept> 类不是线程安全的。"
    },
    {
      "pos": [
        6486,
        6573
      ],
      "content": "将 NumberOfConcurrentTransfers 从默认值 2 增加到更高的值（如 5）。设置此属性将影响 <bpt id=\"p1\">**</bpt>CloudMediaContext<ept id=\"p1\">**</ept> 的所有实例。"
    },
    {
      "content": "将 ParallelTransferThreadCount 保留为默认值 10。",
      "pos": [
        6578,
        6618
      ]
    },
    {
      "pos": [
        6623,
        6672
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"ingest_in_bulk\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>使用媒体服务 .NET SDK 批量引入资产"
    },
    {
      "content": "上载大型资产文件可能在资产创建过程中形成瓶颈。批量引入资产（简称“批量引入”）涉及到将资产创建过程与上载过程分离。若要使用批量引入方法，请创建一个描述资产及其关联文件的清单 (IngestManifest)。然后，你可以使用所选上载方法将关联的文件上载到该清单的 Blob 容器。Azure 媒体服务将会监视与清单关联的 Blob 容器。文件上载到 Blob 容器后，Azure 媒体服务将基于清单 (IngestManifestAsset) 中资产的配置完成资产创建过程。",
      "pos": [
        6675,
        6912
      ]
    },
    {
      "content": "若要创建新的 IngestManifest，请调用通过 CloudMediaContext 中的 IngestManifests 集合公开的 Create 方法。此方法将使用你提供的清单名称创建一个新的 IngestManifest。",
      "pos": [
        6915,
        7032
      ]
    },
    {
      "content": "创建将与批量 IngestManifest 关联的资产。在要批量引入的资产上配置所需的加密选项。",
      "pos": [
        7104,
        7152
      ]
    },
    {
      "content": "一个 IngestManifestAsset 将一个资产与一个用于批量引入的批量 IngestManifest 相关联。它还关联构成每个资产的 AssetFiles。若要创建 IngestManifestAsset，请使用服务器上下文中的 Create 方法。",
      "pos": [
        7423,
        7553
      ]
    },
    {
      "content": "以下示例演示如何添加两个新的 IngestManifestAssets，这两项将以前创建的两个资产关联到批量引入清单。每个 IngestManifestAsset 还关联一组将在批量引入期间为每个资产上载的文件。",
      "pos": [
        7555,
        7661
      ]
    },
    {
      "pos": [
        8034,
        8289
      ],
      "content": "可以使用任何能够将资产文件上载到 Blob 存储容器 URI（由 IngestManifest 的 <bpt id=\"p1\">**</bpt>IIngestManifest.BlobStorageUriForUpload<ept id=\"p1\">**</ept> 属性提供）的高速客户端应用程序。一个明显的高速上载服务就是<bpt id=\"p2\">[</bpt>适用于 Azure 应用程序的点播 Aspera<ept id=\"p2\">](https://datamarket.azure.com/application/2cdbc511-cb12-4715-9871-c7e7fbbb82a6)</ept>。你还可以编写代码来上载资产文件，如以下代码示例所示。"
    },
    {
      "content": "以下代码示例中显示了用于上载本主题中使用的示例资源文件的代码。",
      "pos": [
        9199,
        9230
      ]
    },
    {
      "pos": [
        9437,
        9576
      ],
      "content": "可以通过轮询 <bpt id=\"p1\">**</bpt>IngestManifest<ept id=\"p1\">**</ept> 的 Statistics 属性来确定与 <bpt id=\"p2\">**</bpt>IngestManifest<ept id=\"p2\">**</ept> 关联的所有资产的批量引入进度。若要更新进度信息，每次轮询 Statistics 属性时，都必须使用新的 <bpt id=\"p3\">**</bpt>CloudMediaContext<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        9578,
        9613
      ],
      "content": "以下示例演示如何按 <bpt id=\"p1\">**</bpt>ID<ept id=\"p1\">**</ept> 轮询 IngestManifest。"
    },
    {
      "content": "使用 .NET SDK Extensions 上载文件",
      "pos": [
        10931,
        10958
      ]
    },
    {
      "pos": [
        10961,
        11117
      ],
      "content": "以下示例演示如何使用 .NET SDK Extensions 上载单个文件。在此情况下，将使用 <bpt id=\"p1\">**</bpt>CreateFromFile<ept id=\"p1\">**</ept> 方法，但也可以使用异步版本 (<bpt id=\"p2\">**</bpt>CreateFromFileAsync<ept id=\"p2\">**</ept>)。<bpt id=\"p3\">**</bpt>CreateFromFile<ept id=\"p3\">**</ept> 方法可让你指定文件名、加密选项和回调，以报告文件的上载进度。"
    },
    {
      "content": "以下示例将调用 UploadFile 函数，并指定存储加密作为资产创建选项。",
      "pos": [
        11570,
        11608
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        11719,
        11723
      ]
    },
    {
      "content": "将资产上载到媒体服务后，请转到<bpt id=\"p1\">[</bpt>如何获取媒体处理器<ept id=\"p1\">][]</ept>主题。",
      "pos": [
        11724,
        11755
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"使用 .NET 将文件上载到媒体服务帐户\" \n    description=\"了解如何通过创建和上载资产将媒体内容加入媒体服务。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"  \n    wacn.date=\"03/17/2016\"/>\n\n\n\n#使用 .NET 将文件上载到媒体服务帐户\n\n[AZURE.INCLUDE [media-services-selector-upload-files](../includes/media-services-selector-upload-files.md)]\n\n在媒体服务中，可以将数字文件上载（引入）到资产中。**资产**实体可以包含视频、音频、图像、缩略图集合、图文轨迹和隐藏字幕文件（以及有关这些文件的元数据。） 上载文件完成后，相关内容即安全地存储在云中供后续处理和流式处理。\n\n资产中的文件称为**资产文件**。**AssetFile** 实例和实际媒体文件是两个不同的对象。AssetFile 实例包含有关媒体文件的元数据，而媒体文件包含实际媒体内容。\n\n在创建资产时，可以指定以下加密选项。\n\n- **无** - 不使用加密。这是默认值。请注意，使用此选项时，你的内容在传送过程中或静态存储过程中都不会受到保护。如果计划使用渐进式下载交付 MP4，则使用此选项。 \n- **CommonEncryption** - 上载经过常用加密或 PlayReady DRM 加密并受其保护的内容（例如，受 PlayReady DRM 保护的平滑流）时使用此选项。\n- **EnvelopeEncrypted** – 如果要上载使用 AES 加密的 HLS，请使用此选项。请注意，Transform Manager 必须已对文件进行编码和加密。\n- **StorageEncrypted** - 使用 AES-256 位加密在本地加密明文内容，然后将其上载到 Azure Storage 中以加密形式静态存储相关内容。受存储加密保护的资产将在编码前自动解密并放入经过加密的文件系统中，并可选择在重新上载为新的输出资产前重新加密。存储加密的主要用例是在磁盘上通过静态增强加密来保护高品质的输入媒体文件。\n\n    媒体服务为资产提供磁盘上的存储加密，而不是通过数字权限管理器 (DRM) 等线路提供加密。\n\n    如果你的资产已经过存储加密，则必须配置资产传送策略。有关详细信息，请参阅[配置资产传送策略](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)。\n\n如果指定使用 **CommonEncrypted** 选项或 **EnvelopeEncypted** 选项加密资产，则需要将资产关联到 **ContentKey**。有关详细信息，请参阅[如何创建 ContentKey](/documentation/articles/media-services-dotnet-create-contentkey)。\n\n如果指定使用 **StorageEncrypted** 选项加密资产，适用于 .NET 的媒体服务 SDK 将为资产创建 **StorateEncrypted** **ContentKey**。\n\n>[AZURE.NOTE]构建流内容的 URL 时，媒体服务会使用 IAssetFile.Name 属性的值（如 http://{AMSAccount}.origin.mediaservices.chinacloudapi.cn/{GUID}/{IAssetFile.Name}/streamingParameters.）。出于这个原因，不允许使用百分号编码。**Name** 属性的值不能含有任何以下保留的[百分号编码字符](http://zh.wikipedia.org/wiki/百分号编码#.E4.BF.9D.E7.95.99.E5.AD.97.E7.AC.A6.E7.9A.84.E7.99.BE.E5.88.86.E5.8F.B7.E7.BC.96.E7.A0.81)：!*'();:@&=+$,/?%#\"。此外，文件扩展名中只能含有一个“.”。\n\n本主题说明如何使用媒体服务.NET SDK 以及媒体服务.NET SDK Extensions 将文件上载到媒体服务资产中。\n\n \n## 使用媒体服务 .NET SDK 上载单个文件 \n\n以下示例代码使用 .NET SDK 执行以下任务：\n\n- 创建空资产。\n- 创建要与资产关联的 AssetFile 实例。\n- 创建用于定义权限以及资产访问持续时间的 AccessPolicy 实例。\n- 创建用于提供资产访问权限的 Locator 实例。\n- 将单个媒体文件上载到媒体服务。 \n\n        \n        static public IAsset CreateAssetAndUploadSingleFile(AssetCreationOptions assetCreationOptions, string singleFilePath)\n        {\n            if (!File.Exists(singleFilePath))\n            {\n                Console.WriteLine(\"File does not exist.\");\n                return null;\n            }\n\n            var assetName = Path.GetFileNameWithoutExtension(singleFilePath);\n            IAsset inputAsset = _context.Assets.Create(assetName, assetCreationOptions); \n\n            var assetFile = inputAsset.AssetFiles.Create(Path.GetFileName(singleFilePath));\n\n            Console.WriteLine(\"Created assetFile {0}\", assetFile.Name);\n\n            var policy = _context.AccessPolicies.Create(\n                                    assetName,\n                                    TimeSpan.FromDays(30),\n                                    AccessPermissions.Write | AccessPermissions.List);\n\n            var locator = _context.Locators.CreateLocator(LocatorType.Sas, inputAsset, policy);\n\n            Console.WriteLine(\"Upload {0}\", assetFile.Name);\n\n            assetFile.Upload(singleFilePath);\n            Console.WriteLine(\"Done uploading {0}\", assetFile.Name);\n\n            locator.Delete();\n            policy.Delete();\n\n            return inputAsset;\n        }\n\n##使用媒体服务 .NET SDK 上载多个文件 \n\n以下代码演示如何创建资产及上载多个文件。\n\n代码将执行以下操作：\n    \n-   使用上一步中定义的 CreateEmptyAsset 方法创建一个空资产。\n    \n-   创建用于定义权限以及资产访问持续时间的 **AccessPolicy** 实例。\n    \n-   创建用于提供资产访问权限的 **Locator** 实例。\n    \n-   创建 **BlobTransferClient** 实例。此类型表示对 Azure Blob 进行操作的客户端。在此示例中，我们使用客户端来监视上载进度。\n    \n-   枚举指定目录下的所有文件，并为每个文件创建一个 **AssetFile** 实例。\n    \n-   使用 **UploadAsync** 方法将文件上载到媒体服务中。\n    \n>[AZURE.NOTE] 使用 UploadAsync 方法可确保调用不会阻塞并且文件并行上载。\n    \n    \n        static public IAsset CreateAssetAndUploadMultipleFiles(AssetCreationOptions assetCreationOptions, string folderPath)\n        {\n            var assetName = \"UploadMultipleFiles_\" + DateTime.UtcNow.ToString();\n\n            IAsset asset = _context.Assets.Create(assetName, assetCreationOptions);\n\n            var accessPolicy = _context.AccessPolicies.Create(assetName, TimeSpan.FromDays(30),\n                                                                AccessPermissions.Write | AccessPermissions.List);\n\n            var locator = _context.Locators.CreateLocator(LocatorType.Sas, asset, accessPolicy);\n\n            var blobTransferClient = new BlobTransferClient();\n            blobTransferClient.NumberOfConcurrentTransfers = 20;\n            blobTransferClient.ParallelTransferThreadCount = 20;\n\n            blobTransferClient.TransferProgressChanged += blobTransferClient_TransferProgressChanged;\n\n            var filePaths = Directory.EnumerateFiles(folderPath);\n\n            Console.WriteLine(\"There are {0} files in {1}\", filePaths.Count(), folderPath);\n\n            if (!filePaths.Any())\n            {\n                throw new FileNotFoundException(String.Format(\"No files in directory, check folderPath: {0}\", folderPath));\n            }\n\n            var uploadTasks = new List<Task>();\n            foreach (var filePath in filePaths)\n            {\n                var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\n                Console.WriteLine(\"Created assetFile {0}\", assetFile.Name);\n\n                // It is recommended to validate AccestFiles before upload. \n                Console.WriteLine(\"Start uploading of {0}\", assetFile.Name);\n                uploadTasks.Add(assetFile.UploadAsync(filePath, blobTransferClient, locator, CancellationToken.None));\n            }\n\n            Task.WaitAll(uploadTasks.ToArray());\n            Console.WriteLine(\"Done uploading the files\");\n\n            blobTransferClient.TransferProgressChanged -= blobTransferClient_TransferProgressChanged;\n\n            locator.Delete();\n            accessPolicy.Delete();\n\n            return asset;\n        }\n    \n    static void  blobTransferClient_TransferProgressChanged(object sender, BlobTransferProgressChangedEventArgs e)\n    {\n        if (e.ProgressPercentage > 4) // Avoid startup jitter, as the upload tasks are added.\n        {\n            Console.WriteLine(\"{0}% upload competed for {1}.\", e.ProgressPercentage, e.LocalFile);\n        }\n    }\n\n\n\n上载大量资产时，请注意以下事项。\n\n- 每个线程创建一个新的 **CloudMediaContext** 对象。**CloudMediaContext** 类不是线程安全的。\n \n- 将 NumberOfConcurrentTransfers 从默认值 2 增加到更高的值（如 5）。设置此属性将影响 **CloudMediaContext** 的所有实例。\n \n- 将 ParallelTransferThreadCount 保留为默认值 10。\n \n##<a id=\"ingest_in_bulk\"></a>使用媒体服务 .NET SDK 批量引入资产 \n\n上载大型资产文件可能在资产创建过程中形成瓶颈。批量引入资产（简称“批量引入”）涉及到将资产创建过程与上载过程分离。若要使用批量引入方法，请创建一个描述资产及其关联文件的清单 (IngestManifest)。然后，你可以使用所选上载方法将关联的文件上载到该清单的 Blob 容器。Azure 媒体服务将会监视与清单关联的 Blob 容器。文件上载到 Blob 容器后，Azure 媒体服务将基于清单 (IngestManifestAsset) 中资产的配置完成资产创建过程。\n\n\n若要创建新的 IngestManifest，请调用通过 CloudMediaContext 中的 IngestManifests 集合公开的 Create 方法。此方法将使用你提供的清单名称创建一个新的 IngestManifest。\n\n    IIngestManifest manifest = context.IngestManifests.Create(name);\n\n创建将与批量 IngestManifest 关联的资产。在要批量引入的资产上配置所需的加密选项。\n\n    // Create the assets that will be associated with this bulk ingest manifest\n    IAsset destAsset1 = _context.Assets.Create(name + \"_asset_1\", AssetCreationOptions.None);\n    IAsset destAsset2 = _context.Assets.Create(name + \"_asset_2\", AssetCreationOptions.None);\n\n一个 IngestManifestAsset 将一个资产与一个用于批量引入的批量 IngestManifest 相关联。它还关联构成每个资产的 AssetFiles。若要创建 IngestManifestAsset，请使用服务器上下文中的 Create 方法。\n\n以下示例演示如何添加两个新的 IngestManifestAssets，这两项将以前创建的两个资产关联到批量引入清单。每个 IngestManifestAsset 还关联一组将在批量引入期间为每个资产上载的文件。\n\n    string filename1 = _singleInputMp4Path;\n    string filename2 = _primaryFilePath;\n    string filename3 = _singleInputFilePath;\n    \n    IIngestManifestAsset bulkAsset1 =  manifest.IngestManifestAssets.Create(destAsset1, new[] { filename1 });\n    IIngestManifestAsset bulkAsset2 =  manifest.IngestManifestAssets.Create(destAsset2, new[] { filename2, filename3 });\n    \n可以使用任何能够将资产文件上载到 Blob 存储容器 URI（由 IngestManifest 的 **IIngestManifest.BlobStorageUriForUpload** 属性提供）的高速客户端应用程序。一个明显的高速上载服务就是[适用于 Azure 应用程序的点播 Aspera](https://datamarket.azure.com/application/2cdbc511-cb12-4715-9871-c7e7fbbb82a6)。你还可以编写代码来上载资产文件，如以下代码示例所示。\n    \n    static void UploadBlobFile(string destBlobURI, string filename)\n    {\n        Task copytask = new Task(() =>\n        {\n            var storageaccount = new CloudStorageAccount(new StorageCredentials(_storageAccountName, _storageAccountKey), true);\n            CloudBlobClient blobClient = storageaccount.CreateCloudBlobClient();\n            CloudBlobContainer blobContainer = blobClient.GetContainerReference(destBlobURI);\n    \n            string[] splitfilename = filename.Split('\\\\');\n            var blob = blobContainer.GetBlockBlobReference(splitfilename[splitfilename.Length - 1]);\n    \n            using (var stream = System.IO.File.OpenRead(filename))\n                blob.UploadFromStream(stream);\n    \n            lock (consoleWriteLock)\n            {\n                Console.WriteLine(\"Upload for {0} completed.\", filename);\n            }\n        });\n    \n        copytask.Start();\n    }\n\n以下代码示例中显示了用于上载本主题中使用的示例资源文件的代码。\n    \n    UploadBlobFile(manifest.BlobStorageUriForUpload, filename1);\n    UploadBlobFile(manifest.BlobStorageUriForUpload, filename2);\n    UploadBlobFile(manifest.BlobStorageUriForUpload, filename3);\n    \n\n可以通过轮询 **IngestManifest** 的 Statistics 属性来确定与 **IngestManifest** 关联的所有资产的批量引入进度。若要更新进度信息，每次轮询 Statistics 属性时，都必须使用新的 **CloudMediaContext**。\n\n以下示例演示如何按 **ID** 轮询 IngestManifest。\n    \n    static void MonitorBulkManifest(string manifestID)\n    {\n       bool bContinue = true;\n       while (bContinue)\n       {\n          CloudMediaContext context = GetContext();\n          IIngestManifest manifest = context.IngestManifests.Where(m => m.Id == manifestID).FirstOrDefault();\n    \n          if (manifest != null)\n          {\n             lock(consoleWriteLock)\n             {\n                Console.WriteLine(\"\\nWaiting on all file uploads.\");\n                Console.WriteLine(\"PendingFilesCount  : {0}\", manifest.Statistics.PendingFilesCount);\n                Console.WriteLine(\"FinishedFilesCount : {0}\", manifest.Statistics.FinishedFilesCount);\n                Console.WriteLine(\"{0}% complete.\\n\", (float)manifest.Statistics.FinishedFilesCount / (float)(manifest.Statistics.FinishedFilesCount + manifest.Statistics.PendingFilesCount) * 100);\n    \n                if (manifest.Statistics.PendingFilesCount == 0)\n                {\n                   Console.WriteLine(\"Completed\\n\");\n                   bContinue = false;\n                }\n             }\n    \n             if (manifest.Statistics.FinishedFilesCount < manifest.Statistics.PendingFilesCount)\n                Thread.Sleep(60000);\n          }\n          else // Manifest is null\n             bContinue = false;\n       }\n    }\n    \n\n\n##使用 .NET SDK Extensions 上载文件 \n\n以下示例演示如何使用 .NET SDK Extensions 上载单个文件。在此情况下，将使用 **CreateFromFile** 方法，但也可以使用异步版本 (**CreateFromFileAsync**)。**CreateFromFile** 方法可让你指定文件名、加密选项和回调，以报告文件的上载进度。\n\n\n    static public IAsset UploadFile(string fileName, AssetCreationOptions options)\n    {\n        IAsset inputAsset = _context.Assets.CreateFromFile(\n            fileName,\n            options,\n            (af, p) =>\n            {\n                Console.WriteLine(\"Uploading '{0}' - Progress: {1:0.##}%\", af.Name, p.Progress);\n            });\n    \n        Console.WriteLine(\"Asset {0} created.\", inputAsset.Id);\n    \n        return inputAsset;\n    }\n\n以下示例将调用 UploadFile 函数，并指定存储加密作为资产创建选项。\n\n\n    var asset = UploadFile(@\"C:\\VideoFiles\\BigBuckBunny.mp4\", AssetCreationOptions.StorageEncrypted);\n\n\n\n\n##后续步骤\n将资产上载到媒体服务后，请转到[如何获取媒体处理器][]主题。\n\n[如何获取媒体处理器]: /documentation/articles/media-services-get-media-processor\n \n\n<!---HONumber=Mooncake_0307_2016-->"
}