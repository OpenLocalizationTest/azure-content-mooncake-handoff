{
  "nodes": [
    {
      "content": "查看 Access Control 服务返回的 SAML (Java)",
      "pos": [
        28,
        63
      ]
    },
    {
      "content": "了解如何通过 Azure 上托管的 Java 应用程序查看 Access Control 服务返回的 SAML。",
      "pos": [
        83,
        139
      ]
    },
    {
      "content": "如何查看 Azure Access Control 服务返回的 SAML",
      "pos": [
        379,
        415
      ]
    },
    {
      "pos": [
        417,
        575
      ],
      "content": "本指南将演示如何查看 Azure Access Control 服务 (ACS) 返回到您的应用程序的基础安全声明标记语言 (SAML)。本指南基于<bpt id=\"p1\">[</bpt>如何使用 Eclipse 向 Azure 访问控制服务对 Web 用户进行身份验证<ept id=\"p1\">][]</ept>主题，并提供了用于显示 SAML 信息的代码。完整的应用程序与下图中所示类似。"
    },
    {
      "content": "示例 SAML 输出",
      "pos": [
        579,
        589
      ]
    },
    {
      "pos": [
        605,
        643
      ],
      "content": "有关 ACS 的详细信息，请参阅<bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#next_steps)</ept>部分。"
    },
    {
      "pos": [
        647,
        714
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>Azure 访问服务控制筛选器是一个社区技术预览版。作为预发行软件，Microsoft 不会为它提供正式支持。"
    },
    {
      "content": "先决条件",
      "pos": [
        719,
        723
      ]
    },
    {
      "pos": [
        729,
        751
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"pre\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>先决条件"
    },
    {
      "pos": [
        753,
        832
      ],
      "content": "若要完成本指南中的任务，请完成<bpt id=\"p1\">[</bpt>如何使用 Eclipse 向 Azure 访问控制服务对 Web 用户进行身份验证<ept id=\"p1\">][]</ept>主题中的示例，并将其用作本指南的起点。"
    },
    {
      "pos": [
        837,
        889
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add_library\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>将 JspWriter 库添加到生成路径和部署程序集"
    },
    {
      "pos": [
        891,
        1001
      ],
      "content": "将包含 <bpt id=\"p1\">**</bpt>javax.servlet.jsp.JspWriter<ept id=\"p1\">**</ept> 类的库添加到生成路径和部署程序集。如果使用了 Tomcat，则该库为位于 Apache <bpt id=\"p2\">**</bpt>lib<ept id=\"p2\">**</ept> 文件夹中的 <bpt id=\"p3\">**</bpt>jsp-api.jar<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "在 Eclipse 的项目资源管理器中，右键单击“MyACSHelloWorld”，然后依次单击“生成路径”、“配置生成路径”、“库”选项卡和“添加外部 JAR”。",
      "pos": [
        1006,
        1088
      ]
    },
    {
      "content": "在“JAR 选择”对话框中，导航到所需的 JAR，选择该 JAR，然后单击“打开”。",
      "pos": [
        1092,
        1134
      ]
    },
    {
      "content": "在“MyACSHelloWorld 的属性”对话框保持打开的情况下，单击“部署程序集”。",
      "pos": [
        1138,
        1182
      ]
    },
    {
      "content": "在“Web 部署程序集”对话框中，单击“添加”。",
      "pos": [
        1186,
        1210
      ]
    },
    {
      "content": "在“新建程序集指令”对话框中，单击“Java 生成路径项”，然后单击“下一步”。",
      "pos": [
        1214,
        1254
      ]
    },
    {
      "content": "选择相应的库，然后单击“完成”。",
      "pos": [
        1258,
        1274
      ]
    },
    {
      "content": "单击“确定”关闭“MyACSHelloWorld 的属性”对话框。",
      "pos": [
        1278,
        1311
      ]
    },
    {
      "pos": [
        1316,
        1358
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"modify_jsp\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>修改 JSP 文件以显示 SAML"
    },
    {
      "pos": [
        1360,
        1385
      ],
      "content": "修改 <bpt id=\"p1\">**</bpt>index.jsp<ept id=\"p1\">**</ept> 以使用以下代码。"
    },
    {
      "pos": [
        6779,
        6815
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"run_application\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>运行应用程序"
    },
    {
      "pos": [
        6820,
        6900
      ],
      "content": "按照如何<bpt id=\"p1\">[</bpt>使用 Eclipse 在 Azure 访问控制服务中对 Web 用户进行身份验证<ept id=\"p1\">][]</ept>主题所述的步骤，在计算模拟器中运行应用程序或部署到 Azure。"
    },
    {
      "content": "启动浏览器并打开 Web 应用。登录到您的应用程序后，您将看到 SAML 信息，包括标识提供程序提供的安全声明。",
      "pos": [
        6904,
        6960
      ]
    },
    {
      "pos": [
        6965,
        6994
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"next_steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "pos": [
        6996,
        7043
      ],
      "content": "若要进一步了解 ACS 的功能并尝试将其用于更复杂的方案，请参阅<bpt id=\"p1\">[</bpt>访问控制服务 2.0<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"查看 Access Control 服务返回的 SAML (Java)\" \n    description=\"了解如何通过 Azure 上托管的 Java 应用程序查看 Access Control 服务返回的 SAML。\" \n    services=\"active-directory\" \n    documentationCenter=\"java\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"jimbe\" />\n\n<tags \n    ms.service=\"active-directory\" \n    ms.date=\"10/12/2015\" \n    wacn.date=\"01/21/2016\"/>\n\n# 如何查看 Azure Access Control 服务返回的 SAML\n\n本指南将演示如何查看 Azure Access Control 服务 (ACS) 返回到您的应用程序的基础安全声明标记语言 (SAML)。本指南基于[如何使用 Eclipse 向 Azure 访问控制服务对 Web 用户进行身份验证][]主题，并提供了用于显示 SAML 信息的代码。完整的应用程序与下图中所示类似。\n\n![示例 SAML 输出][saml_output]\n\n有关 ACS 的详细信息，请参阅[后续步骤](#next_steps)部分。\n\n> [AZURE.NOTE]Azure 访问服务控制筛选器是一个社区技术预览版。作为预发行软件，Microsoft 不会为它提供正式支持。\n\n## 先决条件\n\n\n## <a name=\"pre\"></a>先决条件\n\n若要完成本指南中的任务，请完成[如何使用 Eclipse 向 Azure 访问控制服务对 Web 用户进行身份验证][]主题中的示例，并将其用作本指南的起点。\n\n## <a name=\"add_library\"></a>将 JspWriter 库添加到生成路径和部署程序集\n\n将包含 **javax.servlet.jsp.JspWriter** 类的库添加到生成路径和部署程序集。如果使用了 Tomcat，则该库为位于 Apache **lib** 文件夹中的 **jsp-api.jar**。\n\n1. 在 Eclipse 的项目资源管理器中，右键单击“MyACSHelloWorld”，然后依次单击“生成路径”、“配置生成路径”、“库”选项卡和“添加外部 JAR”。\n2. 在“JAR 选择”对话框中，导航到所需的 JAR，选择该 JAR，然后单击“打开”。\n3. 在“MyACSHelloWorld 的属性”对话框保持打开的情况下，单击“部署程序集”。\n4. 在“Web 部署程序集”对话框中，单击“添加”。\n5. 在“新建程序集指令”对话框中，单击“Java 生成路径项”，然后单击“下一步”。\n6. 选择相应的库，然后单击“完成”。\n7. 单击“确定”关闭“MyACSHelloWorld 的属性”对话框。\n\n## <a name=\"modify_jsp\"></a>修改 JSP 文件以显示 SAML\n\n修改 **index.jsp** 以使用以下代码。\n\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n        pageEncoding=\"UTF-8\"%>\n        <%@ page import=\"javax.xml.parsers.*\"\n                 import=\"javax.xml.transform.*\"\n                 import=\"org.w3c.dom.*\"\n                 import=\"java.io.*\"\n                 import=\"javax.xml.transform.stream.*\"\n                 import=\"javax.xml.transform.dom.*\"\n                 import=\"javax.xml.xpath.*\"\n                 import=\"javax.servlet.jsp.JspWriter\" %>\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n    <html>\n    <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n    <title>Sample ACS Filter</title>\n    </head>\n    <body>\n        <h3>SAML information from sample ACS program</h3>\n        <%!\n        void displaySAMLInfo(Node node, String parent, JspWriter out)\n        {\n        \n            try\n            {\n                String nodeName;\n                int nChild, i;\n                \n                nodeName = node.getNodeName();\n                out.println(\"<br>\");\n                out.println(\"<u>Examining <b>\" + parent + nodeName + \"</b></u><br>\");\n                   \n                   // Attributes.\n                   NamedNodeMap attribsMap = node.getAttributes();\n                   if (null != attribsMap)\n                   {\n                         for (i=0; i < attribsMap.getLength(); i++)\n                         {\n                                Node attrib = attribsMap.item(i);\n                                out.println(\"Attribute: <b>\" + attrib.getNodeName() + \"</b>: \" + attrib.getNodeValue()  + \"<br>\");\n                         }\n                   }\n                   \n                   // Child nodes.\n                   NodeList list = node.getChildNodes();\n                   if (null != list)\n                   {\n                          nChild = list.getLength();\n                          if (nChild > 0)\n                          {                    \n    \n                                 // If it is a text node, just print the text.\n                                 if (list.item(0).getNodeName() == \"#text\")\n                                 {\n                                     out.println(\"Text value: <b>\" + list.item(0).getTextContent() + \"</b><br>\");\n                                 }\n                                 else\n                                 {\n                                     // Print out the child node names.\n                                     out.print(\"Contains \" + nChild + \" child node(s): \");   \n                                     for (i=0; i < nChild; i++)\n                                     {\n                                        Node temp = list.item(i);\n                                        \n                                        out.print(\"<b>\" + temp.getNodeName() + \"</b>\");\n                                        if (i < nChild - 1)\n                                        {\n                                            // Separate the names.\n                                            out.print(\", \");\n                                        }\n                                        else\n                                        {\n                                            // Finish the sentence.\n                                            out.print(\".\");\n                                        }\n                                            \n                                     }\n                                     out.println(\"<br>\");\n                                     \n                                     // Process the child nodes.\n                                     for (i=0; i < nChild; i++)\n                                     {\n                                        Node temp = list.item(i);\n                                        displaySAMLInfo(temp, parent + nodeName + \"\\\", out);\n                                     }\n                               }\n                          }\n                      }\n                  }\n                catch (Exception e)\n                {\n                    System.out.println(\"Exception encountered.\");\n                    e.printStackTrace();            \n                }\n            }\n        %>\n    \n        <%\n        try \n        {\n            String data  = (String) request.getAttribute(\"ACSSAML\");\n            \n            DocumentBuilder docBuilder;\n            Document doc = null;\n            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n            docBuilderFactory.setIgnoringElementContentWhitespace(true);\n            docBuilder = docBuilderFactory.newDocumentBuilder();\n            byte[] xmlDATA = data.getBytes();\n            \n            ByteArrayInputStream in = new ByteArrayInputStream(xmlDATA); \n            doc = docBuilder.parse(in);\n            doc.getDocumentElement().normalize();\n            \n            // Iterate the child nodes of the doc.\n            NodeList list = doc.getChildNodes();\n    \n            for (int i=0; i < list.getLength(); i++)\n            {\n                displaySAMLInfo(list.item(i), \"\", out);\n            }\n        }\n        catch (Exception e) \n        {\n            out.println(\"Exception encountered.\");\n            e.printStackTrace();\n        }\n        \n        %>\n    </body>\n    </html>\n\n## <a name=\"run_application\"></a>运行应用程序\n\n1. 按照如何[使用 Eclipse 在 Azure 访问控制服务中对 Web 用户进行身份验证][]主题所述的步骤，在计算模拟器中运行应用程序或部署到 Azure。\n2. 启动浏览器并打开 Web 应用。登录到您的应用程序后，您将看到 SAML 信息，包括标识提供程序提供的安全声明。\n\n## <a name=\"next_steps\"></a>后续步骤\n\n若要进一步了解 ACS 的功能并尝试将其用于更复杂的方案，请参阅[访问控制服务 2.0][]。\n\n[Prerequisites]: #pre\n[Modify the JSP file to display SAML]: #modify_jsp\n[Add the JspWriter library to your build path and deployment assembly]: #add_library\n[Run the application]: #run_application\n[Next steps]: #next_steps\n[访问控制服务 2.0]: http://msdn.microsoft.com/zh-cn/library/hh147631.aspx\n[使用 Eclipse 在 Azure 访问控制服务中对 Web 用户进行身份验证]: /zh-cn/documentation/articles/active-directory-java-authenticate-users-access-control-eclipse\n[如何使用 Eclipse 向 Azure 访问控制服务对 Web 用户进行身份验证]: /zh-cn/documentation/articles/active-directory-java-authenticate-users-access-control-eclipse\n[saml_output]: ./media/active-directory-java-view-saml-returned-by-access-control/SAML_Output.png\n\n<!---HONumber=79-->"
}