{
  "nodes": [
    {
      "content": "先前示例显示标准登录，这要求在此应用每次启动时客户端同时联系标识提供商和移动服务。此方法不仅效率低下，而且如果很多客户尝试同时启动您的应用，您会遇到关于使用率的问题。更好的方法是缓存移动服务返回的授权令牌，然后在使用基于提供商的登录之前首先尝试使用此令牌。",
      "pos": [
        1,
        129
      ]
    },
    {
      "pos": [
        132,
        198
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>无论你使用客户端管理的还是服务管理的身份验证，都可以缓存由移动服务颁发的令牌。本教程使用服务管理的身份验证。"
    },
    {
      "pos": [
        203,
        241
      ],
      "content": "在 default.js 项目文件中，将现有<bpt id=\"p1\">**</bpt>登录<ept id=\"p1\">**</ept>函数替换为以下代码："
    },
    {
      "pos": [
        1481,
        1503
      ],
      "content": "将现有的<bpt id=\"p1\">**</bpt>身份验证<ept id=\"p1\">**</ept>函数替换为以下代码："
    },
    {
      "pos": [
        3287,
        3406
      ],
      "content": "在此版本的<bpt id=\"p1\">**</bpt>身份验证<ept id=\"p1\">**</ept>中，此应用尝试使用存储在 <bpt id=\"p2\">**</bpt>PasswordVault<ept id=\"p2\">**</ept> 中的凭证来访问移动服务。发送一个简单查询以验证存储的令牌是否未到期。返回 401 时，尝试了基于提供商的常规登录。没有存储任何凭证时，也执行常规登录。"
    },
    {
      "content": "两次重新启动此应用。",
      "pos": [
        3411,
        3421
      ]
    },
    {
      "content": "请注意，在第一次启动时，再次需要使用此提供商进行登录。但是，在第二次重新启动时，将使用缓存的凭证，而绕过登录。",
      "pos": [
        3427,
        3482
      ]
    }
  ],
  "content": "\n先前示例显示标准登录，这要求在此应用每次启动时客户端同时联系标识提供商和移动服务。此方法不仅效率低下，而且如果很多客户尝试同时启动您的应用，您会遇到关于使用率的问题。更好的方法是缓存移动服务返回的授权令牌，然后在使用基于提供商的登录之前首先尝试使用此令牌。\n\n>[AZURE.NOTE]无论你使用客户端管理的还是服务管理的身份验证，都可以缓存由移动服务颁发的令牌。本教程使用服务管理的身份验证。\n\n1. 在 default.js 项目文件中，将现有**登录**函数替换为以下代码：\n\n        var credential = null;\n        var vault = new Windows.Security.Credentials.PasswordVault();\n\n        // Request authentication from Mobile Services using a Facebook login.\n        var login = function () {\n            return new WinJS.Promise(function (complete) {\n                client.login(\"facebook\").done(function (results) {\n                    // Create a credential for the returned user.\n                    credential = new Windows.Security.Credentials\n                        .PasswordCredential(\"Facebook\", results.userId,\n                        results.mobileServiceAuthenticationToken);\n                    vault.add(credential);\n                    userId = results.userId;\n\n                    refreshTodoItems();\n                    var message = \"You are now logged in as: \" + userId;\n                    var dialog = new Windows.UI.Popups.MessageDialog(message);\n                    dialog.showAsync().done(complete);\n                }, function (error) {\n                    var dialog = new Windows.UI.Popups\n                        .MessageDialog(\"An error occurred during login\", \"Login Required\");\n                    dialog.showAsync().done(complete);\n                });\n            });\n        }\n\n2. 将现有的**身份验证**函数替换为以下代码：\n\n        var authenticate = function () {\n            // Try to get a stored credential from the PasswordVault.                \n            try{\n                credential = vault.findAllByResource(\"Facebook\").getAt(0);\n            }\n            catch (error) {\n                // This is expected when there's no stored credential.\n            }\n            \n            if (credential) {\n                // Set the user from the returned credential.   \n                credential.retrievePassword();\n                client.currentUser = {\n                    \"userId\": credential.userName,\n                    \"mobileServiceAuthenticationToken\": credential.password\n                };\n\n                // Try to return an item now to determine if the cached credential has expired.\n                todoTable.take(1).read()\n                            .done(function () {\n                                refreshTodoItems();\n                            }, function (error) {\n                                if (error.request.status === 401) {\n                                    login(credential, vault).then(function () {\n                                        if (!credential) {\n\n                                            // Authentication failed, try again.\n                                            authenticate();\n                                        }\n                                    });\n                                }                                   \n                            });\n            } else {\n\n                login().then(function () {\n                    if (!credential) {\n                        // Authentication failed, try again.\n                        authenticate();\n                    }\n                });\n            }\n        }\n\n    在此版本的**身份验证**中，此应用尝试使用存储在 **PasswordVault** 中的凭证来访问移动服务。发送一个简单查询以验证存储的令牌是否未到期。返回 401 时，尝试了基于提供商的常规登录。没有存储任何凭证时，也执行常规登录。\n\n3. 两次重新启动此应用。\n\n    请注意，在第一次启动时，再次需要使用此提供商进行登录。但是，在第二次重新启动时，将使用缓存的凭证，而绕过登录。\n\n<!---HONumber=74-->"
}