{
  "nodes": [
    {
      "content": "将弹性数据库客户端库与 Dapper 配合使用 | Azure",
      "pos": [
        28,
        59
      ]
    },
    {
      "content": "将弹性数据库客户端库与 Dapper 配合使用。",
      "pos": [
        79,
        103
      ]
    },
    {
      "content": "将弹性数据库客户端库与 Dapper 配合使用",
      "pos": [
        308,
        331
      ]
    },
    {
      "pos": [
        334,
        547
      ],
      "content": "本文档面向依赖于使用 Dapper 生成应用程序，但同时想要运用<bpt id=\"p1\">[</bpt>弹性数据库工具<ept id=\"p1\">](/documentation/articles/sql-database-elastic-scale-introduction)</ept>创建应用程序来实现分片，以向外缩放其应用程序的开发人员。本文档演示了与弹性数据库工具集成所需的基于 Dapper 的应用程序发生的更改。我们将重点介绍如何使用 Dapper 构建弹性数据库分片管理和数据相关的路由。"
    },
    {
      "pos": [
        549,
        661
      ],
      "content": "<bpt id=\"p1\">**</bpt>示例代码<ept id=\"p1\">**</ept>：<bpt id=\"p2\">[</bpt>Azure SQL 数据库的弹性数据库工具 - Dapper 集成<ept id=\"p2\">](https://code.msdn.microsoft.com/Elastic-Scale-with-Azure-e19fc77f)</ept>。"
    },
    {
      "pos": [
        664,
        1051
      ],
      "content": "将<bpt id=\"p1\">**</bpt>Dapper<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>DapperExtensions<ept id=\"p2\">**</ept> 与 Azure SQL 数据库的弹性数据库客户端库的过程很简单。应用程序可以通过将新 <bpt id=\"p3\">[</bpt>SqlConnection<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.aspx)</ept> 对象的创建和打开方式更改为使用来自<bpt id=\"p4\">[</bpt>客户端库<ept id=\"p4\">](http://msdn.microsoft.com/zh-cn/library/azure/dn765902.aspx)</ept>的 <bpt id=\"p5\">[</bpt>OpenConnectionForKey<ept id=\"p5\">](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx)</ept> 调用，来使用数据相关的路由。这会将应用程序中的更改限制为已创建和打开新连接的位置。"
    },
    {
      "content": "Dapper 概述",
      "pos": [
        1056,
        1065
      ]
    },
    {
      "pos": [
        1066,
        1217
      ],
      "content": "<bpt id=\"p1\">**</bpt>Dapper<ept id=\"p1\">**</ept> 是对象关系映射器。它将应用程序中的 .NET 对象映射到关系数据库（或者执行相反的映射）。示例代码的第一个部分演示了如何将弹性数据库客户端库与基于 Dapper 的应用程序相集成。示例代码的第二个部分演示了同时使用 Dapper 和 DapperExtensions 时如何集成。"
    },
    {
      "pos": [
        1219,
        1391
      ],
      "content": "Dapper 中的映射器功能对数据库连接提供扩展方法，可以简化用于执行或查询数据库的 T-SQL 语句的提交。例如，使用 Dapper 可以轻松地在 .NET 对象与用于 <bpt id=\"p1\">**</bpt>Execute<ept id=\"p1\">**</ept> 调用的 SQL 语句参数之间进行映射，或者在 Dapper 中通过 <bpt id=\"p2\">**</bpt>Query<ept id=\"p2\">**</ept> 调用来使用对 .NET 对象执行 SQL 查询后返回的结果。"
    },
    {
      "pos": [
        1393,
        1483
      ],
      "content": "使用 DapperExtensions 时，你不再需要提供 SQL 语句。对数据库连接执行 <bpt id=\"p1\">**</bpt>GetList<ept id=\"p1\">**</ept> 或 <bpt id=\"p2\">**</bpt>Insert<ept id=\"p2\">**</ept> 等扩展方法会在幕后创建 SQL 语句。"
    },
    {
      "content": "Dapper 和 DapperExtensions 的另一个优点在于，应用程序可以控制数据库连接的创建。这有助于与弹性数据库客户端库交互，从而可以通过将 shardlet 映射到数据库来中转数据库连接。",
      "pos": [
        1486,
        1587
      ]
    },
    {
      "pos": [
        1589,
        1746
      ],
      "content": "若要获取 Dapper 程序集，请参阅 <bpt id=\"p1\">[</bpt>Dapper .NET<ept id=\"p1\">](http://www.nuget.org/packages/Dapper/)</ept>。有关 Dapper 扩展，请参阅 <bpt id=\"p2\">[</bpt>DapperExtensions<ept id=\"p2\">](http://www.nuget.org/packages/DapperExtensions)</ept>。"
    },
    {
      "content": "弹性数据库客户端库速览",
      "pos": [
        1751,
        1762
      ]
    },
    {
      "pos": [
        1764,
        1958
      ],
      "content": "使用弹性数据库客户端库，你可以定义应用程序数据的分区（称为 <bpt id=\"p1\">*</bpt>shardlet<ept id=\"p1\">*</ept>），将它们映射到数据库，并根据<bpt id=\"p2\">*</bpt>分片键<ept id=\"p2\">*</ept>来识别这些分区。你可以根据需要创建任意数目的数据库，并在这些数据库之间分布 shardlet。分片键值到数据库的映射由库的 API 提供的分片映射存储。此功能称为<bpt id=\"p3\">**</bpt>分片映射管理<ept id=\"p3\">**</ept>。分片映射还为带有分片键的请求充当数据库连接的代理。此功能称为<bpt id=\"p4\">**</bpt>数据相关的路由<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "分片映射和数据相关的路由",
      "pos": [
        1962,
        1974
      ]
    },
    {
      "content": "分片映射管理器可防止用户不一致的视图到 shardlet 数据时并发 shardlet 管理操作发生在数据库上可能会出现。为此，分片映射将会代理使用库生成的应用程序的数据库连接。当分片管理操作可能会影响 shardlet 时，这可以允许分片映射功能自动终止数据库连接。",
      "pos": [
        1980,
        2114
      ]
    },
    {
      "pos": [
        2116,
        2267
      ],
      "content": "我们需要使用 <bpt id=\"p1\">[</bpt>OpenConnectionForKey 方法<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dn824099.aspx)</ept>，而不是使用传统方法来创建 Dapper 的连接。这可确保所有验证都会发生，并在分片之间移动任何数据时正确管理连接。"
    },
    {
      "content": "Dapper 集成的要求",
      "pos": [
        2273,
        2285
      ]
    },
    {
      "content": "在使用弹性数据库客户端库和 Dapper API 时，我们希望保留以下属性：",
      "pos": [
        2287,
        2325
      ]
    },
    {
      "pos": [
        2329,
        2375
      ],
      "content": "<bpt id=\"p1\">**</bpt>向外缩放<ept id=\"p1\">**</ept>：我们需要根据应用程序的容量需求，在分片应用程序的数据层中添加或删除数据库。"
    },
    {
      "pos": [
        2383,
        2572
      ],
      "content": "<bpt id=\"p1\">**</bpt>一致性<ept id=\"p1\">**</ept>：由于应用程序是使用分片向外缩放的，因此我们需要执行数据相关的路由。我们需要使用库的数据相关路由功能来实现此目的。具体而言，我们需要保留验证，以避免损坏或错误的查询结果情况下通过分片映射管理器中转连接提供的一致性保证。这可确保（举例而言）当前已使用 Split/Merge API 将 shardlet 移至其他分片时，拒绝或停止与给定 shardlet 的连接。"
    },
    {
      "pos": [
        2579,
        2636
      ],
      "content": "<bpt id=\"p1\">**</bpt>对象映射<ept id=\"p1\">**</ept>：我们需要保留 Dapper 为了在应用程序中的类和基础数据库结构之间进行转换而提供的映射方便性。"
    },
    {
      "pos": [
        2638,
        2693
      ],
      "content": "以下部分基于 <bpt id=\"p1\">**</bpt>Dapper<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>DapperExtensions<ept id=\"p2\">**</ept> 的应用程序的这些要求的指南。"
    },
    {
      "content": "技术指南",
      "pos": [
        2698,
        2702
      ]
    },
    {
      "content": "数据相关的路由与 Dapper",
      "pos": [
        2707,
        2722
      ]
    },
    {
      "pos": [
        2725,
        3221
      ],
      "content": "使用 Dapper 时，应用程序通常负责创建和打开与基础数据库的连接。如果应用程序指定了类型 T，则 Dapper 将查询结果返回为 T 类型的 .NET 集合。Dapper 执行从 T-SQL 结果行到 T 类型对象的映射。同样，Dapper 将 .NET 对象映射到数据操作语言 (DML) 语句的 SQL 值或参数。Dapper 通过扩展方法的常规 <bpt id=\"p1\">[</bpt>SqlConnection<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.aspx)</ept> ADO.NET SQL 客户端库中的对象提供此功能。DDR 弹性缩放 API 返回的 SQL 连接也是常规 <bpt id=\"p2\">[</bpt>SqlConnection<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.aspx)</ept> 对象。这样，我们便可以针对客户端库的 DDR API 返回的类型直接使用 Dapper 扩展，因为它也是一个简单的 SQL 客户端连接。"
    },
    {
      "content": "根据这些规则，可以方便地使用 Dapper 的弹性数据库客户端库中转的连接。",
      "pos": [
        3223,
        3261
      ]
    },
    {
      "content": "此代码示例（摘自随附的示例）演示了应用程序在库中提供分片键，以将连接中转到正确分片的方案。",
      "pos": [
        3263,
        3308
      ]
    },
    {
      "pos": [
        3813,
        4031
      ],
      "content": "调用 <bpt id=\"p1\">[</bpt>OpenConnectionForKey<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx)</ept> API 会替换 SQL 客户端连接的默认创建和打开方法。<bpt id=\"p2\">[</bpt>OpenConnectionForKey<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx)</ept> 调用采用了进行数据相关路由所需的参数："
    },
    {
      "content": "用于访问数据相关路由接口的分片映射",
      "pos": [
        4038,
        4055
      ]
    },
    {
      "content": "用于标识 shardlet 的分片键",
      "pos": [
        4061,
        4079
      ]
    },
    {
      "content": "用于连接分片的凭据（用户名和密码）",
      "pos": [
        4085,
        4102
      ]
    },
    {
      "pos": [
        4104,
        4322
      ],
      "content": "分片映射对象将与保存给定分片键 shardlet 的分片建立连接。弹性数据库客户端 API 还会标记连接以实现一致性保证。由于调用 <bpt id=\"p1\">[</bpt>OpenConnectionForKey<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx)</ept> 会返回一个常规 SQL 客户端连接对象，因此从 Dapper 后续调用 <bpt id=\"p2\">**</bpt>Execute<ept id=\"p2\">**</ept> 扩展方法遵循标准的 Dapper 做法。"
    },
    {
      "pos": [
        4324,
        4485
      ],
      "content": "查询的工作方式非常类似 - 首先从客户端 API 使用 <bpt id=\"p1\">[</bpt>OpenConnectionForKey<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx)</ept> 打开连接。然后，可以使用常规 Dapper 扩展方法将 SQL 查询的结果映射到 .NET 对象："
    },
    {
      "pos": [
        5175,
        5264
      ],
      "content": "请注意，将块与 DDR 连接一起<bpt id=\"p1\">**</bpt>使用<ept id=\"p1\">**</ept>会将块中的所有数据库操作划归到保存 tenantId1 的一个分片。该查询仅返回当前分片中存储的博客，而不是任何其他分片中存储的博客。"
    },
    {
      "content": "数据相关的路由与 Dapper 和 DapperExtensions",
      "pos": [
        5269,
        5303
      ]
    },
    {
      "content": "Dapper 随附了可以在开发数据库应用程序时提供更大方便性和从数据库抽象其他扩展的生态系统。DapperExtensions 就是一个示例。",
      "pos": [
        5305,
        5376
      ]
    },
    {
      "pos": [
        5378,
        5588
      ],
      "content": "在应用程序中使用 DapperExtensions 不会更改创建和管理数据库连接的方式。应用程序仍要负责打开连接，并且扩展方法要求使用常规 SQL 客户端连接对象。我们可以依赖于上述 <bpt id=\"p1\">[</bpt>OpenConnectionForKey<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx)</ept>。如以下代码示例所示，唯一的变化是我们不再需要编写 T-SQL 语句："
    },
    {
      "content": "下面是查询的代码示例：",
      "pos": [
        5929,
        5940
      ]
    },
    {
      "content": "处理暂时性故障",
      "pos": [
        6495,
        6502
      ]
    },
    {
      "pos": [
        6504,
        6725
      ],
      "content": "Microsoft 模式和实践团队发布了<bpt id=\"p1\">[</bpt>暂时性故障处理应用程序块<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/hh680934.aspx)</ept>，以帮助应用程序开发人员消除在云中运行应用程序时遇到的常见暂时性故障状态。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>锲而不舍是一切成功的秘密：使用暂时性故障处理应用程序块<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/dn440719.aspx)</ept>。"
    },
    {
      "content": "该代码示例依赖于暂时性故障库来防止暂时性故障。",
      "pos": [
        6727,
        6750
      ]
    },
    {
      "pos": [
        7098,
        7258
      ],
      "content": "上述代码中的 <bpt id=\"p1\">**</bpt>SqlDatabaseUtils.SqlRetryPolicy<ept id=\"p1\">**</ept> 定义为 <bpt id=\"p2\">**</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id=\"p2\">**</ept>，重试计数为 10，每两次重试的等待时间为 5 秒。如果你正在使用事务，请确保在出现暂时性故障的情况下重试范围可以恢复为事务开始时间。"
    },
    {
      "content": "限制",
      "pos": [
        7263,
        7265
      ]
    },
    {
      "content": "本文档中概述的方法存在一些限制：",
      "pos": [
        7267,
        7283
      ]
    },
    {
      "content": "本文档示例代码未演示如何管理不同分片的架构。",
      "pos": [
        7287,
        7309
      ]
    },
    {
      "pos": [
        7312,
        7609
      ],
      "content": "对于给定的请求，我们假设它的所有数据库处理都包含在该请求提供的分片键标识的单个分片内。但是，这种假设并不总是合理，例如，在无法使用某个分片键的情况下。为了解决此问题，弹性数据库客户端库包含了 <bpt id=\"p1\">[</bpt>MultiShardQuery 类<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/microsoft.azure.sqldatabase.elasticscale.query.multishardexception.aspx)</ept>。该类实现了一个连接抽象用于查询多个分片。MultiShardQuery 与 Dapper 的结合使用超出了本文档的讨论范围。"
    },
    {
      "content": "结束语",
      "pos": [
        7614,
        7617
      ]
    },
    {
      "pos": [
        7619,
        7963
      ],
      "content": "使用 Dapper 和 DapperExtensions 的应用程序很容易从 Azure SQL 数据库的弹性数据库工具受益。通过本文档中所述的步骤，这些应用程序可以使用该工具的功能，通过将新 <bpt id=\"p1\">[</bpt>SqlConnection<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.aspx)</ept> 对象的创建和打开方式更改为使用弹性数据库客户端库的 <bpt id=\"p2\">[</bpt>OpenConnectionForKey<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx)</ept> 调用，来实现数据相关的路由。这会将应用程序更改限制为已创建和打开新连接的位置。"
    }
  ],
  "content": "<properties \n    pageTitle=\"将弹性数据库客户端库与 Dapper 配合使用 | Azure\" \n    description=\"将弹性数据库客户端库与 Dapper 配合使用。\" \n    services=\"sql-database\" \n    documentationCenter=\"\" \n    manager=\"jeffreyg\" \n    authors=\"torsteng\"/>\n\n<tags \n    ms.service=\"sql-database\"\n    ms.date=\"11/04/2015\" \n    wacn.date=\"01/05/2016\"/>\n\n# 将弹性数据库客户端库与 Dapper 配合使用 \n\n本文档面向依赖于使用 Dapper 生成应用程序，但同时想要运用[弹性数据库工具](/documentation/articles/sql-database-elastic-scale-introduction)创建应用程序来实现分片，以向外缩放其应用程序的开发人员。本文档演示了与弹性数据库工具集成所需的基于 Dapper 的应用程序发生的更改。我们将重点介绍如何使用 Dapper 构建弹性数据库分片管理和数据相关的路由。\n\n**示例代码**：[Azure SQL 数据库的弹性数据库工具 - Dapper 集成](https://code.msdn.microsoft.com/Elastic-Scale-with-Azure-e19fc77f)。\n \n将**Dapper** 和 **DapperExtensions** 与 Azure SQL 数据库的弹性数据库客户端库的过程很简单。应用程序可以通过将新 [SqlConnection](http://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.aspx) 对象的创建和打开方式更改为使用来自[客户端库](http://msdn.microsoft.com/zh-cn/library/azure/dn765902.aspx)的 [OpenConnectionForKey](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx) 调用，来使用数据相关的路由。这会将应用程序中的更改限制为已创建和打开新连接的位置。\n\n## Dapper 概述\n**Dapper** 是对象关系映射器。它将应用程序中的 .NET 对象映射到关系数据库（或者执行相反的映射）。示例代码的第一个部分演示了如何将弹性数据库客户端库与基于 Dapper 的应用程序相集成。示例代码的第二个部分演示了同时使用 Dapper 和 DapperExtensions 时如何集成。\n\nDapper 中的映射器功能对数据库连接提供扩展方法，可以简化用于执行或查询数据库的 T-SQL 语句的提交。例如，使用 Dapper 可以轻松地在 .NET 对象与用于 **Execute** 调用的 SQL 语句参数之间进行映射，或者在 Dapper 中通过 **Query** 调用来使用对 .NET 对象执行 SQL 查询后返回的结果。\n\n使用 DapperExtensions 时，你不再需要提供 SQL 语句。对数据库连接执行 **GetList** 或 **Insert** 等扩展方法会在幕后创建 SQL 语句。\n \nDapper 和 DapperExtensions 的另一个优点在于，应用程序可以控制数据库连接的创建。这有助于与弹性数据库客户端库交互，从而可以通过将 shardlet 映射到数据库来中转数据库连接。\n\n若要获取 Dapper 程序集，请参阅 [Dapper .NET](http://www.nuget.org/packages/Dapper/)。有关 Dapper 扩展，请参阅 [DapperExtensions](http://www.nuget.org/packages/DapperExtensions)。\n\n## 弹性数据库客户端库速览\n\n使用弹性数据库客户端库，你可以定义应用程序数据的分区（称为 *shardlet*），将它们映射到数据库，并根据*分片键*来识别这些分区。你可以根据需要创建任意数目的数据库，并在这些数据库之间分布 shardlet。分片键值到数据库的映射由库的 API 提供的分片映射存储。此功能称为**分片映射管理**。分片映射还为带有分片键的请求充当数据库连接的代理。此功能称为**数据相关的路由**。\n\n![分片映射和数据相关的路由][1]\n\n分片映射管理器可防止用户不一致的视图到 shardlet 数据时并发 shardlet 管理操作发生在数据库上可能会出现。为此，分片映射将会代理使用库生成的应用程序的数据库连接。当分片管理操作可能会影响 shardlet 时，这可以允许分片映射功能自动终止数据库连接。\n\n我们需要使用 [OpenConnectionForKey 方法](http://msdn.microsoft.com/zh-cn/library/azure/dn824099.aspx)，而不是使用传统方法来创建 Dapper 的连接。这可确保所有验证都会发生，并在分片之间移动任何数据时正确管理连接。\n\n### Dapper 集成的要求\n\n在使用弹性数据库客户端库和 Dapper API 时，我们希望保留以下属性：\n\n* **向外缩放**：我们需要根据应用程序的容量需求，在分片应用程序的数据层中添加或删除数据库。 \n\n-    **一致性**：由于应用程序是使用分片向外缩放的，因此我们需要执行数据相关的路由。我们需要使用库的数据相关路由功能来实现此目的。具体而言，我们需要保留验证，以避免损坏或错误的查询结果情况下通过分片映射管理器中转连接提供的一致性保证。这可确保（举例而言）当前已使用 Split/Merge API 将 shardlet 移至其他分片时，拒绝或停止与给定 shardlet 的连接。\n\n-    **对象映射**：我们需要保留 Dapper 为了在应用程序中的类和基础数据库结构之间进行转换而提供的映射方便性。\n\n以下部分基于 **Dapper** 和 **DapperExtensions** 的应用程序的这些要求的指南。\n\n## 技术指南\n### 数据相关的路由与 Dapper \n\n使用 Dapper 时，应用程序通常负责创建和打开与基础数据库的连接。如果应用程序指定了类型 T，则 Dapper 将查询结果返回为 T 类型的 .NET 集合。Dapper 执行从 T-SQL 结果行到 T 类型对象的映射。同样，Dapper 将 .NET 对象映射到数据操作语言 (DML) 语句的 SQL 值或参数。Dapper 通过扩展方法的常规 [SqlConnection](http://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.aspx) ADO.NET SQL 客户端库中的对象提供此功能。DDR 弹性缩放 API 返回的 SQL 连接也是常规 [SqlConnection](http://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.aspx) 对象。这样，我们便可以针对客户端库的 DDR API 返回的类型直接使用 Dapper 扩展，因为它也是一个简单的 SQL 客户端连接。\n\n根据这些规则，可以方便地使用 Dapper 的弹性数据库客户端库中转的连接。\n\n此代码示例（摘自随附的示例）演示了应用程序在库中提供分片键，以将连接中转到正确分片的方案。\n\n    using (SqlConnection sqlconn = shardingLayer.ShardMap.OpenConnectionForKey(\n                     key: tenantId1, \n                     connectionString: connStrBldr.ConnectionString, \n                     options: ConnectionOptions.Validate))\n    {\n        var blog = new Blog { Name = name };\n        sqlconn.Execute(@\"\n                      INSERT INTO\n                            Blog (Name)\n                            VALUES (@name)\", new { name = blog.Name }\n                        );\n    }\n\n调用 [OpenConnectionForKey](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx) API 会替换 SQL 客户端连接的默认创建和打开方法。[OpenConnectionForKey](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx) 调用采用了进行数据相关路由所需的参数：\n\n-    用于访问数据相关路由接口的分片映射\n-    用于标识 shardlet 的分片键\n-    用于连接分片的凭据（用户名和密码）\n\n分片映射对象将与保存给定分片键 shardlet 的分片建立连接。弹性数据库客户端 API 还会标记连接以实现一致性保证。由于调用 [OpenConnectionForKey](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx) 会返回一个常规 SQL 客户端连接对象，因此从 Dapper 后续调用 **Execute** 扩展方法遵循标准的 Dapper 做法。\n\n查询的工作方式非常类似 - 首先从客户端 API 使用 [OpenConnectionForKey](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx) 打开连接。然后，可以使用常规 Dapper 扩展方法将 SQL 查询的结果映射到 .NET 对象：\n\n    using (SqlConnection sqlconn = shardingLayer.ShardMap.OpenConnectionForKey(\n                    key: tenantId1, \n                    connectionString: connStrBldr.ConnectionString, \n                    options: ConnectionOptions.Validate ))\n    {    \n           // Display all Blogs for tenant 1\n           IEnumerable<Blog> result = sqlconn.Query<Blog>(@\"\n                                SELECT * \n                                FROM Blog\n                                ORDER BY Name\");\n\n           Console.WriteLine(\"All blogs for tenant id {0}:\", tenantId1);\n           foreach (var item in result)\n           {\n                Console.WriteLine(item.Name);\n            }\n    }\n\n请注意，将块与 DDR 连接一起**使用**会将块中的所有数据库操作划归到保存 tenantId1 的一个分片。该查询仅返回当前分片中存储的博客，而不是任何其他分片中存储的博客。\n\n## 数据相关的路由与 Dapper 和 DapperExtensions\n\nDapper 随附了可以在开发数据库应用程序时提供更大方便性和从数据库抽象其他扩展的生态系统。DapperExtensions 就是一个示例。\n\n在应用程序中使用 DapperExtensions 不会更改创建和管理数据库连接的方式。应用程序仍要负责打开连接，并且扩展方法要求使用常规 SQL 客户端连接对象。我们可以依赖于上述 [OpenConnectionForKey](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx)。如以下代码示例所示，唯一的变化是我们不再需要编写 T-SQL 语句：\n\n    using (SqlConnection sqlconn = shardingLayer.ShardMap.OpenConnectionForKey(\n                    key: tenantId2, \n                    connectionString: connStrBldr.ConnectionString, \n                    options: ConnectionOptions.Validate))\n    {\n           var blog = new Blog { Name = name2 };\n           sqlconn.Insert(blog);\n    }\n\n下面是查询的代码示例：\n\n    using (SqlConnection sqlconn = shardingLayer.ShardMap.OpenConnectionForKey(\n                    key: tenantId2, \n                    connectionString: connStrBldr.ConnectionString, \n                    options: ConnectionOptions.Validate))\n    {\n           // Display all Blogs for tenant 2\n           IEnumerable<Blog> result = sqlconn.GetList<Blog>();\n           Console.WriteLine(\"All blogs for tenant id {0}:\", tenantId2);\n           foreach (var item in result)\n           {\n               Console.WriteLine(item.Name);\n           }\n    }\n\n### 处理暂时性故障\n\nMicrosoft 模式和实践团队发布了[暂时性故障处理应用程序块](http://msdn.microsoft.com/zh-cn/library/hh680934.aspx)，以帮助应用程序开发人员消除在云中运行应用程序时遇到的常见暂时性故障状态。有关详细信息，请参阅[锲而不舍是一切成功的秘密：使用暂时性故障处理应用程序块](http://msdn.microsoft.com/zh-cn/library/dn440719.aspx)。\n\n该代码示例依赖于暂时性故障库来防止暂时性故障。\n\n    SqlDatabaseUtils.SqlRetryPolicy.ExecuteAction(() =>\n    {\n       using (SqlConnection sqlconn = \n          shardingLayer.ShardMap.OpenConnectionForKey(tenantId2, connStrBldr.ConnectionString, ConnectionOptions.Validate))\n          {\n              var blog = new Blog { Name = name2 };\n              sqlconn.Insert(blog);\n          }\n    });\n\n上述代码中的 **SqlDatabaseUtils.SqlRetryPolicy** 定义为 **SqlDatabaseTransientErrorDetectionStrategy**，重试计数为 10，每两次重试的等待时间为 5 秒。如果你正在使用事务，请确保在出现暂时性故障的情况下重试范围可以恢复为事务开始时间。\n\n## 限制\n\n本文档中概述的方法存在一些限制：\n\n* 本文档示例代码未演示如何管理不同分片的架构。\n* 对于给定的请求，我们假设它的所有数据库处理都包含在该请求提供的分片键标识的单个分片内。但是，这种假设并不总是合理，例如，在无法使用某个分片键的情况下。为了解决此问题，弹性数据库客户端库包含了 [MultiShardQuery 类](http://msdn.microsoft.com/zh-cn/library/azure/microsoft.azure.sqldatabase.elasticscale.query.multishardexception.aspx)。该类实现了一个连接抽象用于查询多个分片。MultiShardQuery 与 Dapper 的结合使用超出了本文档的讨论范围。\n\n## 结束语\n\n使用 Dapper 和 DapperExtensions 的应用程序很容易从 Azure SQL 数据库的弹性数据库工具受益。通过本文档中所述的步骤，这些应用程序可以使用该工具的功能，通过将新 [SqlConnection](http://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.aspx) 对象的创建和打开方式更改为使用弹性数据库客户端库的 [OpenConnectionForKey](http://msdn.microsoft.com/zh-cn/library/azure/dn807226.aspx) 调用，来实现数据相关的路由。这会将应用程序更改限制为已创建和打开新连接的位置。\n\n[AZURE.INCLUDE [elastic-scale-include](../includes/elastic-scale-include.md)]\n\n<!--Image references-->\n[1]: ./media/sql-database-elastic-scale-working-with-dapper/dapperimage1.png\n \n\n<!---HONumber=Mooncake_1221_2015-->\n"
}