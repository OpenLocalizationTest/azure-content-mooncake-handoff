<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">64f191de671563c46330a2eb9aaadc20d7c4d030</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure 存储表设计指南 |Azure</source>
          <target state="new">Azure 存储表设计指南 |Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在 Azure 表存储中设计可伸缩的高性能表</source>
          <target state="new">在 Azure 表存储中设计可伸缩的高性能表</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure 存储表设计指南：设计可伸缩的高性能表</source>
          <target state="new">Azure 存储表设计指南：设计可伸缩的高性能表</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="azure-table-service-overview"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 概述</source>
          <target state="new"><ph id="ph1">&lt;a id="azure-table-service-overview"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>要设计可伸缩的高性能表，必须考虑许多因素（如性能、可伸缩性和成本）。如果你以前已为关系数据库设计过架构，这些注意事项对你来说将会很熟悉，尽管 Azure 表服务存储模型与关系模型之间有一些相似之处，但也有许多重大差异。这些差异通常会导致非常不同的设计，这些设计对于熟悉关系数据库的人来说可能看起来不直观或是错误的，但如果你正在设计 Azure 表服务等 NoSQL 键/值存储，就会体会到这些设计是很合理的。许多设计差异将反映这样一个事实：表服务旨在支持云级别应用程序，这些应用程序可包含数十亿个实体（相当于关系数据库术语中的行）的数据，或者用于必须支持非常高事务量的数据集：因此，你需要以不同方式考虑如何存储数据，并了解表服务的工作原理。相对于使用关系数据库的解决方案而言，设计良好的 NoSQL 数据存储可以使你的解决方案更进一步的扩展（以更低的成本）。本指南可帮助你了解这些主题。</source>
          <target state="new">要设计可伸缩的高性能表，必须考虑许多因素（如性能、可伸缩性和成本）。如果你以前已为关系数据库设计过架构，这些注意事项对你来说将会很熟悉，尽管 Azure 表服务存储模型与关系模型之间有一些相似之处，但也有许多重大差异。这些差异通常会导致非常不同的设计，这些设计对于熟悉关系数据库的人来说可能看起来不直观或是错误的，但如果你正在设计 Azure 表服务等 NoSQL 键/值存储，就会体会到这些设计是很合理的。许多设计差异将反映这样一个事实：表服务旨在支持云级别应用程序，这些应用程序可包含数十亿个实体（相当于关系数据库术语中的行）的数据，或者用于必须支持非常高事务量的数据集：因此，你需要以不同方式考虑如何存储数据，并了解表服务的工作原理。相对于使用关系数据库的解决方案而言，设计良好的 NoSQL 数据存储可以使你的解决方案更进一步的扩展（以更低的成本）。本指南可帮助你了解这些主题。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>关于 Azure 表服务</source>
          <target state="new">关于 Azure 表服务</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>本部分重点介绍表服务的一些主要功能，这些功能尤其与设计性能和可伸缩性相关。如果你不熟悉 Azure 存储和表服务，在阅读本文的其他部分之前，请先阅读 <bpt id="p1">[</bpt>Azure 存储简介<ept id="p1">](/documentation/articles/storage-introduction)</ept> 和<bpt id="p2">[</bpt>如何通过 .NET 使用表存储<ept id="p2">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。尽管本指南的重点是介绍表服务，但它也将包括 Azure 队列和 Blob 服务的一些讨论，并介绍如何在解决方案中将这些 Azure 队列和 Blob 服务与表服务一起使用。</source>
          <target state="new">本部分重点介绍表服务的一些主要功能，这些功能尤其与设计性能和可伸缩性相关。如果你不熟悉 Azure 存储和表服务，在阅读本文的其他部分之前，请先阅读 <bpt id="p1">[</bpt>Azure 存储简介<ept id="p1">](/documentation/articles/storage-introduction)</ept> 和<bpt id="p2">[</bpt>如何通过 .NET 使用表存储<ept id="p2">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。尽管本指南的重点是介绍表服务，但它也将包括 Azure 队列和 Blob 服务的一些讨论，并介绍如何在解决方案中将这些 Azure 队列和 Blob 服务与表服务一起使用。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>什么是表服务？ 从名称可以推测出，表服务将使用表格格式来存储数据。在标准术语中，表的每一行表示一个实体，而列存储该实体的各种属性。每个实体都有一对密钥来唯一标识它，并具有一个时间戳列，表服务使用该列来跟踪上次更新实体的时间（此操作是自动发生的，无法手动使用任意值来覆盖时间戳）。表服务使用此上次修改时间戳 (LMT) 来管理开放式并发。</source>
          <target state="new">什么是表服务？ 从名称可以推测出，表服务将使用表格格式来存储数据。在标准术语中，表的每一行表示一个实体，而列存储该实体的各种属性。每个实体都有一对密钥来唯一标识它，并具有一个时间戳列，表服务使用该列来跟踪上次更新实体的时间（此操作是自动发生的，无法手动使用任意值来覆盖时间戳）。表服务使用此上次修改时间戳 (LMT) 来管理开放式并发。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>表服务 REST API 操作还返回它从上次修过时间戳 (LMT) 获得的 <bpt id="p1">**</bpt>ETag<ept id="p1">**</ept> 值。在本文档中，我们将互换使用术语 ETag 和 LMT，因为它们是指同一基础数据。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>表服务 REST API 操作还返回它从上次修过时间戳 (LMT) 获得的 <bpt id="p1">**</bpt>ETag<ept id="p1">**</ept> 值。在本文档中，我们将互换使用术语 ETag 和 LMT，因为它们是指同一基础数据。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>下面的示例演示了一个简单的表设计，该表用于存储员工和部门实体。本指南后面所示的许多示例都基于此简单设计。</source>
          <target state="new">下面的示例演示了一个简单的表设计，该表用于存储员工和部门实体。本指南后面所示的许多示例都基于此简单设计。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>PartitionKey</source>
          <target state="new">PartitionKey</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>RowKey</source>
          <target state="new">RowKey</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Timestamp</source>
          <target state="new">Timestamp</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Marketing</source>
          <target state="new">Marketing</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>00001</source>
          <target state="new">00001</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>2014-08-22T00:50:32Z</source>
          <target state="new">2014-08-22T00:50:32Z</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Don</source>
          <target state="new">Don</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Hall</source>
          <target state="new">Hall</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>34</source>
          <target state="new">34</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>donh@contoso.com</source>
          <target state="new">donh@contoso.com</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Marketing</source>
          <target state="new">Marketing</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>00002</source>
          <target state="new">00002</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>2014-08-22T00:50:34Z</source>
          <target state="new">2014-08-22T00:50:34Z</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Jun</source>
          <target state="new">Jun</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Cao</source>
          <target state="new">Cao</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>47</source>
          <target state="new">47</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>junc@contoso.com</source>
          <target state="new">junc@contoso.com</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Marketing</source>
          <target state="new">Marketing</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Department</source>
          <target state="new">Department</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>2014-08-22T00:50:30Z</source>
          <target state="new">2014-08-22T00:50:30Z</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>DepartmentName</source>
          <target state="new">DepartmentName</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>EmployeeCount</source>
          <target state="new">EmployeeCount</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Marketing</source>
          <target state="new">Marketing</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>153</source>
          <target state="new">153</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Sales</source>
          <target state="new">Sales</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>00010</source>
          <target state="new">00010</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>2014-08-22T00:50:44Z</source>
          <target state="new">2014-08-22T00:50:44Z</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Ken</source>
          <target state="new">Ken</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Kwok</source>
          <target state="new">Kwok</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>23</source>
          <target state="new">23</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>kenk@contoso.com</source>
          <target state="new">kenk@contoso.com</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>到目前为止，这看起来非常类似于关系数据库中的表，主要区别是有必需的列，以及能够在同一个表中存储多种实体类型。此外，每个用户定义的属性（如 <bpt id="p1">**</bpt>FirstName<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>Age<ept id="p2">**</ept>）还具有数据类型（如 integer 或 string），就像关系数据库中的列一样。虽然与关系数据库中不同，表服务的架构灵活性质意味着每个实体的属性不需要具有相同的数据类型。若要在单个属性中存储复杂数据类型，必须使用序列化格式（例如，JSON 或 XML）。有关表服务的详细信息（如支持的数据类型、支持的日期范围、命名规则和大小限制），请参阅 MSDN 上的<bpt id="p3">[</bpt>了解表服务数据模型<ept id="p3">](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)</ept>。</source>
          <target state="new">到目前为止，这看起来非常类似于关系数据库中的表，主要区别是有必需的列，以及能够在同一个表中存储多种实体类型。此外，每个用户定义的属性（如 <bpt id="p1">**</bpt>FirstName<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>Age<ept id="p2">**</ept>）还具有数据类型（如 integer 或 string），就像关系数据库中的列一样。虽然与关系数据库中不同，表服务的架构灵活性质意味着每个实体的属性不需要具有相同的数据类型。若要在单个属性中存储复杂数据类型，必须使用序列化格式（例如，JSON 或 XML）。有关表服务的详细信息（如支持的数据类型、支持的日期范围、命名规则和大小限制），请参阅 MSDN 上的<bpt id="p3">[</bpt>了解表服务数据模型<ept id="p3">](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>正如你将看到的，你所选的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 是良好的表设计的基础。存储在表中的每个实体都必须具有唯一的 <bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>。与关系数据库表中的键一样，将对 <bpt id="p5">**</bpt>PartitionKey<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>RowKey<ept id="p6">**</ept> 值进行索引，以创建聚集索引，从而实现快速查找；但是，表服务不创建任何辅助索引，因此，这两个属性是仅有的两个编制索引的属性（后面所述的一些模式将显示如何解决这种明显的限制）。</source>
          <target state="new">正如你将看到的，你所选的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 是良好的表设计的基础。存储在表中的每个实体都必须具有唯一的 <bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>。与关系数据库表中的键一样，将对 <bpt id="p5">**</bpt>PartitionKey<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>RowKey<ept id="p6">**</ept> 值进行索引，以创建聚集索引，从而实现快速查找；但是，表服务不创建任何辅助索引，因此，这两个属性是仅有的两个编制索引的属性（后面所述的一些模式将显示如何解决这种明显的限制）。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>表由一个或多个分区组成，正如你将看到的，你所做的很多设计决策都将围绕选择合适的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 进行，以便优化你的解决方案。一个解决方案可以仅由单个表构成，该表包含组织成分区的所有实体，但通常一个解决方案将具有多个表。表可帮助你在逻辑上组织你的实体，帮助你使用访问控制列表管理对数据的访问，并且你可以使用单个存储操作删除整个表。</source>
          <target state="new">表由一个或多个分区组成，正如你将看到的，你所做的很多设计决策都将围绕选择合适的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 进行，以便优化你的解决方案。一个解决方案可以仅由单个表构成，该表包含组织成分区的所有实体，但通常一个解决方案将具有多个表。表可帮助你在逻辑上组织你的实体，帮助你使用访问控制列表管理对数据的访问，并且你可以使用单个存储操作删除整个表。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>表分区</source>
          <target state="new">表分区</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>帐户名称、表名称和 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 共同标识表服务用于存储实体的存储服务中的分区。作为实体寻址方案的一部分，分区定义事务的作用域（请参阅下面的<bpt id="p2">[</bpt>实体组事务<ept id="p2">](#entity-group-transactions)</ept>），并形成表服务如何缩放的基础。有关分区的详细信息，请参阅 <bpt id="p3">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id="p3">](/documentation/articles/storage-scalability-targets)</ept>。</source>
          <target state="new">帐户名称、表名称和 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 共同标识表服务用于存储实体的存储服务中的分区。作为实体寻址方案的一部分，分区定义事务的作用域（请参阅下面的<bpt id="p2">[</bpt>实体组事务<ept id="p2">](#entity-group-transactions)</ept>），并形成表服务如何缩放的基础。有关分区的详细信息，请参阅 <bpt id="p3">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id="p3">](/documentation/articles/storage-scalability-targets)</ept>。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>在表服务中，单个节点为一个或多个完整的分区提供服务，并且该服务可通过对节点上的分区进行动态负载平衡来进行缩放。如果某个节点负载过轻，表服务可以将该节点提供服务的分区范围<bpt id="p1">*</bpt>拆分<ept id="p1">*</ept>为不同节点；当流量下降时，该服务可将无操作的节点的分区范围<bpt id="p2">*</bpt>合并<ept id="p2">*</ept>为单个节点。</source>
          <target state="new">在表服务中，单个节点为一个或多个完整的分区提供服务，并且该服务可通过对节点上的分区进行动态负载平衡来进行缩放。如果某个节点负载过轻，表服务可以将该节点提供服务的分区范围<bpt id="p1">*</bpt>拆分<ept id="p1">*</ept>为不同节点；当流量下降时，该服务可将无操作的节点的分区范围<bpt id="p2">*</bpt>合并<ept id="p2">*</ept>为单个节点。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>有关表服务内部细节的详细信息（特别是该服务如何管理分区），请参阅文章 <bpt id="p1">[</bpt>Azure 存储：具有高度一致性的高可用云存储服务<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/11/20/windows-azure-storage-a-highly-available-cloud-storage-service-with-strong-consistency.aspx)</ept>。</source>
          <target state="new">有关表服务内部细节的详细信息（特别是该服务如何管理分区），请参阅文章 <bpt id="p1">[</bpt>Azure 存储：具有高度一致性的高可用云存储服务<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/11/20/windows-azure-storage-a-highly-available-cloud-storage-service-with-strong-consistency.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="entity-group-transactions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 实体组事务</source>
          <target state="new"><ph id="ph1">&lt;a id="entity-group-transactions"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 实体组事务</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>在表服务中，实体组事务 (EGT) 是唯一内置机制，用于对多个实体执行原子更新。在一些文档中，EGT 也称为<bpt id="p1">*</bpt>批处理事务<ept id="p1">*</ept>。EGT 只能应用于存储在同一分区（共享给定表中的同一分区键）的实体，因此每当你需要对多个实体执行原子事务行为时，都需要确保这些实体位于同一分区。这通常是将多个实体类型保存在同一个表（和分区）中，而不是对不同实体类型使用多个表的原因。单个 EGT 最多可应用于 100 个实体。如果你提交多个用于处理的并发 EGT，请确保不在 EGT 共用实体上操作这些 EGT，这一点很重要，否则处理会延迟。</source>
          <target state="new">在表服务中，实体组事务 (EGT) 是唯一内置机制，用于对多个实体执行原子更新。在一些文档中，EGT 也称为<bpt id="p1">*</bpt>批处理事务<ept id="p1">*</ept>。EGT 只能应用于存储在同一分区（共享给定表中的同一分区键）的实体，因此每当你需要对多个实体执行原子事务行为时，都需要确保这些实体位于同一分区。这通常是将多个实体类型保存在同一个表（和分区）中，而不是对不同实体类型使用多个表的原因。单个 EGT 最多可应用于 100 个实体。如果你提交多个用于处理的并发 EGT，请确保不在 EGT 共用实体上操作这些 EGT，这一点很重要，否则处理会延迟。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>EGT 还为你引入了潜在的权衡以便在设计中进行评估：使用更多分区将增加应用程序的可伸缩性，因为 Azure 有更多机会对节点的请求进行负载平衡，但这可能会限制应用程序执行原子事务和维护数据高一致性的能力。此外，在分区级别还有特定的可伸缩性目标，这些目标可能会限制你可以对单个节点预期的事务吞吐量：有关 Azure 存储帐户和表服务的可伸缩性目标的详细信息，请参阅 MSDN 上的 <bpt id="p1">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id="p1">](/documentation/articles/storage-scalability-targets/)</ept>。本指南的后面部分将讨论各种设计策略，这些策略可帮助你管理此类权衡，并讨论如何根据客户端应用程序的特定要求最好地选择分区键。</source>
          <target state="new">EGT 还为你引入了潜在的权衡以便在设计中进行评估：使用更多分区将增加应用程序的可伸缩性，因为 Azure 有更多机会对节点的请求进行负载平衡，但这可能会限制应用程序执行原子事务和维护数据高一致性的能力。此外，在分区级别还有特定的可伸缩性目标，这些目标可能会限制你可以对单个节点预期的事务吞吐量：有关 Azure 存储帐户和表服务的可伸缩性目标的详细信息，请参阅 MSDN 上的 <bpt id="p1">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id="p1">](/documentation/articles/storage-scalability-targets/)</ept>。本指南的后面部分将讨论各种设计策略，这些策略可帮助你管理此类权衡，并讨论如何根据客户端应用程序的特定要求最好地选择分区键。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>容量注意事项</source>
          <target state="new">容量注意事项</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>下表包括设计表服务解决方案时要注意的一些关键值：</source>
          <target state="new">下表包括设计表服务解决方案时要注意的一些关键值：</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Azure 存储帐户的总容量</source>
          <target state="new">Azure 存储帐户的总容量</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>500 TB</source>
          <target state="new">500 TB</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Azure 存储帐户中表的个数</source>
          <target state="new">Azure 存储帐户中表的个数</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>仅受存储帐户的容量限制</source>
          <target state="new">仅受存储帐户的容量限制</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>表中的分区个数</source>
          <target state="new">表中的分区个数</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>仅受存储帐户的容量限制</source>
          <target state="new">仅受存储帐户的容量限制</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>分区中实体的个数</source>
          <target state="new">分区中实体的个数</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>仅受存储帐户的容量限制</source>
          <target state="new">仅受存储帐户的容量限制</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>单个实体的大小</source>
          <target state="new">单个实体的大小</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>最大可为 1 MB，最多具有 255 个属性（包括<bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>、<bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Timestamp<ept id="p3">**</ept>）</source>
          <target state="new">最大可为 1 MB，最多具有 255 个属性（包括<bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>、<bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Timestamp<ept id="p3">**</ept>）</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 的大小</source>
          <target state="new"><bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 的大小</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>大小最大为 1 KB 的字符串</source>
          <target state="new">大小最大为 1 KB 的字符串</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 的大小</source>
          <target state="new"><bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 的大小</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>大小最大为 1 KB 的字符串</source>
          <target state="new">大小最大为 1 KB 的字符串</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>实体组事务的大小</source>
          <target state="new">实体组事务的大小</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>一个事务最多可包含 100 个实体，并且负载大小必须小于 4 MB。EGT 只能更新一次实体。</source>
          <target state="new">一个事务最多可包含 100 个实体，并且负载大小必须小于 4 MB。EGT 只能更新一次实体。</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅 MSDN 上的<bpt id="p1">[</bpt>了解表服务数据模型<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)</ept>。</source>
          <target state="new">有关详细信息，请参阅 MSDN 上的<bpt id="p1">[</bpt>了解表服务数据模型<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>成本注意事项</source>
          <target state="new">成本注意事项</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>表存储的价格相对便宜，但在评估任何使用表服务的解决方案时，应同时针对容量使用情况和事务数量进行成本估算。但是，在许多情况下，为提高解决方案的性能或可伸缩性，存储非规范化或重复的数据是可采取的有效方法。有关定价的详细信息，请参阅<bpt id="p1">[</bpt>存储定价详细信息<ept id="p1">](/home/features/storage/#price)</ept>。</source>
          <target state="new">表存储的价格相对便宜，但在评估任何使用表服务的解决方案时，应同时针对容量使用情况和事务数量进行成本估算。但是，在许多情况下，为提高解决方案的性能或可伸缩性，存储非规范化或重复的数据是可采取的有效方法。有关定价的详细信息，请参阅<bpt id="p1">[</bpt>存储定价详细信息<ept id="p1">](/home/features/storage/#price)</ept>。</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>比较 Azure 表和 SQL Azure</source>
          <target state="new">比较 Azure 表和 SQL Azure</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>有关 Azure SQL 数据库（关系数据库服务）与表服务之间的比较，请参阅 MSDN 上的 <bpt id="p1">[</bpt>Azure 表存储和 Azure SQL 数据库 - 比较和对照<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/jj553018.aspx)</ept>。</source>
          <target state="new">有关 Azure SQL 数据库（关系数据库服务）与表服务之间的比较，请参阅 MSDN 上的 <bpt id="p1">[</bpt>Azure 表存储和 Azure SQL 数据库 - 比较和对照<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/jj553018.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>表设计准则</source>
          <target state="new">表设计准则</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>这些列表汇总了一些设计表时需要牢记的重要原则，本指南稍后会更详细地对其进行解释。本指南的内容与设计关系数据库通常所遵循的指导原则大不相同。</source>
          <target state="new">这些列表汇总了一些设计表时需要牢记的重要原则，本指南稍后会更详细地对其进行解释。本指南的内容与设计关系数据库通常所遵循的指导原则大不相同。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>将表服务解决方案设计为高效<bpt id="p1">*</bpt>读取<ept id="p1">*</ept>：</source>
          <target state="new">将表服务解决方案设计为高效<bpt id="p1">*</bpt>读取<ept id="p1">*</ept>：</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>针对查询大量读取应用程序进行设计。<ept id="p1">***</ept> 设计表时，在考虑将如何更新实体之前，请先考虑将执行的查询（特别是延迟敏感的查询）。这通常会产生一个高效且高性能的解决方案。</source>
          <target state="new"><bpt id="p1">***</bpt>针对查询大量读取应用程序进行设计。<ept id="p1">***</ept> 设计表时，在考虑将如何更新实体之前，请先考虑将执行的查询（特别是延迟敏感的查询）。这通常会产生一个高效且高性能的解决方案。</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>在查询中指定 PartitionKey 和 RowKey。<ept id="p1">***</ept> <bpt id="p2">*</bpt>点查询<ept id="p2">*</ept>此类查询是最高效的表服务查询。</source>
          <target state="new"><bpt id="p1">***</bpt>在查询中指定 PartitionKey 和 RowKey。<ept id="p1">***</ept> <bpt id="p2">*</bpt>点查询<ept id="p2">*</ept>此类查询是最高效的表服务查询。</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>请考虑存储实体的重复副本。<ept id="p1">***</ept> 表存储比较便宜，因此请考虑多次存储同一实体（使用不同键）以实现更高效的查询。</source>
          <target state="new"><bpt id="p1">***</bpt>请考虑存储实体的重复副本。<ept id="p1">***</ept> 表存储比较便宜，因此请考虑多次存储同一实体（使用不同键）以实现更高效的查询。</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>请考虑反规范你的数据。<ept id="p1">***</ept> 表存储比较便宜，因此请考虑反规范化你的数据。例如，存储摘要实体，以便对聚合数据的查询只需访问单个实体。</source>
          <target state="new"><bpt id="p1">***</bpt>请考虑反规范你的数据。<ept id="p1">***</ept> 表存储比较便宜，因此请考虑反规范化你的数据。例如，存储摘要实体，以便对聚合数据的查询只需访问单个实体。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>使用复合键值。<ept id="p1">***</ept> 你具有的唯一键是 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept>。例如，使用复合键值来启用对实体的备用键控访问路径。</source>
          <target state="new"><bpt id="p1">***</bpt>使用复合键值。<ept id="p1">***</ept> 你具有的唯一键是 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept>。例如，使用复合键值来启用对实体的备用键控访问路径。</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>使用查询投影。<ept id="p1">***</ept> 你可以通过使用只选择所需字段的查询来减少网络上传输的数据量。</source>
          <target state="new"><bpt id="p1">***</bpt>使用查询投影。<ept id="p1">***</ept> 你可以通过使用只选择所需字段的查询来减少网络上传输的数据量。</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>将表服务解决方案设计为高效<bpt id="p1">*</bpt>写入<ept id="p1">*</ept>：</source>
          <target state="new">将表服务解决方案设计为高效<bpt id="p1">*</bpt>写入<ept id="p1">*</ept>：</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>不要创建热分区。<ept id="p1">***</ept> 选择在任何时间点都能够将请求散布到多个分区的键。</source>
          <target state="new"><bpt id="p1">***</bpt>不要创建热分区。<ept id="p1">***</ept> 选择在任何时间点都能够将请求散布到多个分区的键。</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>避免出现流量高峰。<ept id="p1">***</ept> 使流量在合理的时间段内均匀分布，并避免出现流量高峰。</source>
          <target state="new"><bpt id="p1">***</bpt>避免出现流量高峰。<ept id="p1">***</ept> 使流量在合理的时间段内均匀分布，并避免出现流量高峰。</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>不一定为实体的每种类型都创建一个单独的实体。<ept id="p1">***</ept> 当你需要对多种实体类型执行原子事务操作时，可以将这些实体类型存储在同一个表的同一个分区中。</source>
          <target state="new"><bpt id="p1">***</bpt>不一定为实体的每种类型都创建一个单独的实体。<ept id="p1">***</ept> 当你需要对多种实体类型执行原子事务操作时，可以将这些实体类型存储在同一个表的同一个分区中。</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>请考虑你必须实现的最大吞吐量。<ept id="p1">***</ept> 必须了解表服务的可伸缩性目标，并确保你的设计不会使你超出这些目标。</source>
          <target state="new"><bpt id="p1">***</bpt>请考虑你必须实现的最大吞吐量。<ept id="p1">***</ept> 必须了解表服务的可伸缩性目标，并确保你的设计不会使你超出这些目标。</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>在阅读本指南时，你将会看到将所有这些原则付诸实践的示例。</source>
          <target state="new">在阅读本指南时，你将会看到将所有这些原则付诸实践的示例。</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="design-for-querying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 针对查询的设计</source>
          <target state="new"><ph id="ph1">&lt;a id="design-for-querying"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 针对查询的设计</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>表服务解决方案可能需要进行大量读取操作和/或大量写入操作。本部分重点介绍在将表服务设计为支持高效读取操作时需要牢记的事项。通常，支持高效读取操作的设计对于写入操作来说也是高效的。但是，在设计以支持写入操作时还有一些其他注意事项需要牢记，这些注意事项将在下一部分<bpt id="p1">[</bpt>针对数据修改的设计<ept id="p1">](#design-for-data-modification)</ept>中进行讨论。</source>
          <target state="new">表服务解决方案可能需要进行大量读取操作和/或大量写入操作。本部分重点介绍在将表服务设计为支持高效读取操作时需要牢记的事项。通常，支持高效读取操作的设计对于写入操作来说也是高效的。但是，在设计以支持写入操作时还有一些其他注意事项需要牢记，这些注意事项将在下一部分<bpt id="p1">[</bpt>针对数据修改的设计<ept id="p1">](#design-for-data-modification)</ept>中进行讨论。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>将表服务解决方案设计为能够高效读取数据的良好起点是问“我的应用程序将需要执行哪些查询来从表服务中检索它所需的数据？”</source>
          <target state="new">将表服务解决方案设计为能够高效读取数据的良好起点是问“我的应用程序将需要执行哪些查询来从表服务中检索它所需的数据？”</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>使用表服务时，预先将设计做正确很重要，因为以后进行更改会很难并且开销会很高。例如，在关系数据库中，通常只需通过向现有数据库添加索引就可以解决性能问题：而这不是表服务的选项。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>使用表服务时，预先将设计做正确很重要，因为以后进行更改会很难并且开销会很高。例如，在关系数据库中，通常只需通过向现有数据库添加索引就可以解决性能问题：而这不是表服务的选项。</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>本部分重点介绍在设计要查询的表时必须解决的关键问题。本部分涉及的主题包括：</source>
          <target state="new">本部分重点介绍在设计要查询的表时必须解决的关键问题。本部分涉及的主题包括：</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>所选的 PartitionKey 和 RowKey 如何影响查询性能</source>
          <target state="new">所选的 PartitionKey 和 RowKey 如何影响查询性能</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>选择适当的 PartitionKey</source>
          <target state="new">选择适当的 PartitionKey</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>使用表服务的键值存储优化查询</source>
          <target state="new">使用表服务的键值存储优化查询</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>对表服务的键值存储中的数据进行排序</source>
          <target state="new">对表服务的键值存储中的数据进行排序</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="how-your-choice-of-partitionkey-and-rowkey-impacts-query-performance"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 所选的 PartitionKey 和 RowKey 如何影响查询性能</source>
          <target state="new"><ph id="ph1">&lt;a id="how-your-choice-of-partitionkey-and-rowkey-impacts-query-performance"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 所选的 PartitionKey 和 RowKey 如何影响查询性能</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>下面的示例假定表服务使用以下结构存储员工实体（为清楚起见，大多数示例将省略 <bpt id="p1">**</bpt>Timestamp<ept id="p1">**</ept> 属性）：</source>
          <target state="new">下面的示例假定表服务使用以下结构存储员工实体（为清楚起见，大多数示例将省略 <bpt id="p1">**</bpt>Timestamp<ept id="p1">**</ept> 属性）：</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>列名称</source>
          <target state="new">列名称</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>数据类型</source>
          <target state="new">数据类型</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>（部门名称）</source>
          <target state="new"><bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>（部门名称）</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept>（员工 ID）</source>
          <target state="new"><bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept>（员工 ID）</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="new">Integer</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>EmailAddress</source>
          <target state="new">EmailAddress</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>前面的章节 <bpt id="p1">[</bpt>Azure 表服务概述<ept id="p1">](#azure-table-service-overview)</ept>介绍了对查询设计有直接影响的 Azure 表服务的一些主要功能。这些功能产生了以下设计表服务查询的通用准则。请注意，下面的示例所使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id="p2">[</bpt>查询实体<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。</source>
          <target state="new">前面的章节 <bpt id="p1">[</bpt>Azure 表服务概述<ept id="p1">](#azure-table-service-overview)</ept>介绍了对查询设计有直接影响的 Azure 表服务的一些主要功能。这些功能产生了以下设计表服务查询的通用准则。请注意，下面的示例所使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id="p2">[</bpt>查询实体<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>点查询<ept id="p1">***</ept>是一种最高效的查找，可用于并建议用于大容量查找或要求最低延迟的查找。此类查询可以通过指定 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值使用索引非常高效地查找单个实体。例如：$filter=(PartitionKey eq 'Sales') and (RowKey eq '2')</source>
          <target state="new"><bpt id="p1">***</bpt>点查询<ept id="p1">***</ept>是一种最高效的查找，可用于并建议用于大容量查找或要求最低延迟的查找。此类查询可以通过指定 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值使用索引非常高效地查找单个实体。例如：$filter=(PartitionKey eq 'Sales') and (RowKey eq '2')</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>第二好的是<bpt id="p1">***</bpt>范围查询<ept id="p1">***</ept>，它使用 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept>，并对某一范围的 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值进行筛选以返回多个实体。<bpt id="p4">**</bpt>PartitionKey<ept id="p4">**</ept> 值确定特定分区，<bpt id="p5">**</bpt>RowKey<ept id="p5">**</ept> 值确定该分区中的实体子集。例如：$filter=PartitionKey eq 'Sales' and RowKey ge 'S' and RowKey lt 'T'</source>
          <target state="new">第二好的是<bpt id="p1">***</bpt>范围查询<ept id="p1">***</ept>，它使用 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept>，并对某一范围的 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值进行筛选以返回多个实体。<bpt id="p4">**</bpt>PartitionKey<ept id="p4">**</ept> 值确定特定分区，<bpt id="p5">**</bpt>RowKey<ept id="p5">**</ept> 值确定该分区中的实体子集。例如：$filter=PartitionKey eq 'Sales' and RowKey ge 'S' and RowKey lt 'T'</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>第三好的是<bpt id="p1">***</bpt>分区扫描<ept id="p1">***</ept>，它使用 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept>，并对另一个非键属性进行筛选，并可能会返回多个实体。<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 值确定特定分区，而属性值将选择该分区中的实体子集。例如：$filter=PartitionKey eq 'Sales' and LastName eq 'Smith'</source>
          <target state="new">第三好的是<bpt id="p1">***</bpt>分区扫描<ept id="p1">***</ept>，它使用 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept>，并对另一个非键属性进行筛选，并可能会返回多个实体。<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 值确定特定分区，而属性值将选择该分区中的实体子集。例如：$filter=PartitionKey eq 'Sales' and LastName eq 'Smith'</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><bpt id="p1">***</bpt>表扫描<ept id="p1">***</ept>不包括 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 并且非常低效，因为它会依次搜索构成表的所有分区，以查找所有匹配的实体。它将执行表扫描而不管你的筛选器是否使用 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept>。例如：$filter=LastName eq 'Jones'</source>
          <target state="new"><bpt id="p1">***</bpt>表扫描<ept id="p1">***</ept>不包括 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 并且非常低效，因为它会依次搜索构成表的所有分区，以查找所有匹配的实体。它将执行表扫描而不管你的筛选器是否使用 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept>。例如：$filter=LastName eq 'Jones'</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>返回多个实体的查询将按 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 顺序返回实体。若要避免对客户端中的实体进行重新排序，请选择定义了最常见排序顺序的 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept>。</source>
          <target state="new">返回多个实体的查询将按 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 顺序返回实体。若要避免对客户端中的实体进行重新排序，请选择定义了最常见排序顺序的 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>请注意，使用“<bpt id="p1">**</bpt>or<ept id="p1">**</ept>”指定基于 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值的筛选器将导致分区扫描，而不会视为范围查询。因此，应避免使用筛选器 （如查询：$filter=PartitionKey eq 'Sales' and (RowKey eq '121' or RowKey eq '322')</source>
          <target state="new">请注意，使用“<bpt id="p1">**</bpt>or<ept id="p1">**</ept>”指定基于 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值的筛选器将导致分区扫描，而不会视为范围查询。因此，应避免使用筛选器 （如查询：$filter=PartitionKey eq 'Sales' and (RowKey eq '121' or RowKey eq '322')</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>有关使用存储客户端库执行高效查询的客户端代码的示例，请参阅：</source>
          <target state="new">有关使用存储客户端库执行高效查询的客户端代码的示例，请参阅：</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>使用存储客户端库检索单个实体</source>
          <target state="new">使用存储客户端库检索单个实体</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>使用 LINQ 检索多个实体</source>
          <target state="new">使用 LINQ 检索多个实体</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>服务器端投影</source>
          <target state="new">服务器端投影</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>有关可以处理存储在同一个表中的多个实体类型的客户端代码的示例，请参阅：</source>
          <target state="new">有关可以处理存储在同一个表中的多个实体类型的客户端代码的示例，请参阅：</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>处理异类实体类型</source>
          <target state="new">处理异类实体类型</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="choosing-an-appropriate-partitionkey"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 选择适当的 PartitionKey</source>
          <target state="new"><ph id="ph1">&lt;a id="choosing-an-appropriate-partitionkey"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 选择适当的 PartitionKey</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>所选的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 应该权衡启用 EGT（以确保一致性）的需求与将实体分布到多个分区（以确保可伸缩的解决方案）的需求。</source>
          <target state="new">所选的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 应该权衡启用 EGT（以确保一致性）的需求与将实体分布到多个分区（以确保可伸缩的解决方案）的需求。</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>一种极端做法是，可以将所有实体都存储在单个分区，但这可能会限制解决方案的可伸缩性并且会使表服务无法对请求进行负载平衡。另一种极端做法是，可以每个分区存储一个实体，这样具有高可伸缩性并且使得表服务能够对请求进行负载平衡，但这样你将无法使用实体组事务。</source>
          <target state="new">一种极端做法是，可以将所有实体都存储在单个分区，但这可能会限制解决方案的可伸缩性并且会使表服务无法对请求进行负载平衡。另一种极端做法是，可以每个分区存储一个实体，这样具有高可伸缩性并且使得表服务能够对请求进行负载平衡，但这样你将无法使用实体组事务。</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>理想的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 是这样的，你可以使用高效查询，并具有足够多的分区以确保你的解决方案是可扩展的。通常，你会发现你的实体将具有合适的属性，可以将你的实体分布到足够多的分区。</source>
          <target state="new">理想的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 是这样的，你可以使用高效查询，并具有足够多的分区以确保你的解决方案是可扩展的。通常，你会发现你的实体将具有合适的属性，可以将你的实体分布到足够多的分区。</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>例如，在存储有关用户或员工的信息的系统中，UserID 可以是一个好的 PartitionKey。你可拥有多个使用某个给定 UserID 作为分区键的实体。存储有关用户数据的每个实体分组到单个分区，因此通过实体组事务可访问这些实体，同时仍具有高度可伸缩性。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>例如，在存储有关用户或员工的信息的系统中，UserID 可以是一个好的 PartitionKey。你可拥有多个使用某个给定 UserID 作为分区键的实体。存储有关用户数据的每个实体分组到单个分区，因此通过实体组事务可访问这些实体，同时仍具有高度可伸缩性。</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>在选择 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 时还有一些与如何插入、更新和删除实体相关的其他注意事项：请参阅下面的<bpt id="p2">[</bpt>针对数据修改的设计<ept id="p2">](#design-for-data-modification)</ept>。</source>
          <target state="new">在选择 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 时还有一些与如何插入、更新和删除实体相关的其他注意事项：请参阅下面的<bpt id="p2">[</bpt>针对数据修改的设计<ept id="p2">](#design-for-data-modification)</ept>。</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="optimizing-queries-with-a-key-value-store-for-the-table-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 针对表服务优化查询</source>
          <target state="new"><ph id="ph1">&lt;a id="optimizing-queries-with-a-key-value-store-for-the-table-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 针对表服务优化查询</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>表服务将使用单个聚集索引中的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值自动为你的实体编制索引，这就是点查询使用起来最高效的原因。但是，除了 <bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept> 上的聚集索引外没有其他索引。</source>
          <target state="new">表服务将使用单个聚集索引中的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值自动为你的实体编制索引，这就是点查询使用起来最高效的原因。但是，除了 <bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept> 上的聚集索引外没有其他索引。</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>许多设计必须满足要求，才能允许根据多个条件查找实体。例如，根据电子邮件、员工 ID 或姓氏查找员工实体。<bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分中的以下模式满足这些类型的要求，并说明了解决表服务不提供辅助索引这一事实的方法：</source>
          <target state="new">许多设计必须满足要求，才能允许根据多个条件查找实体。例如，根据电子邮件、员工 ID 或姓氏查找员工实体。<bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分中的以下模式满足这些类型的要求，并说明了解决表服务不提供辅助索引这一事实的方法：</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#intra-partition-secondary-index-pattern)</ept> - 存储使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值来替换排序顺序。</source>
          <target state="new"><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#intra-partition-secondary-index-pattern)</ept> - 存储使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值来替换排序顺序。</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#inter-partition-secondary-index-pattern)</ept> - 存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值来替换排序顺序。</source>
          <target state="new"><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#inter-partition-secondary-index-pattern)</ept> - 存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值来替换排序顺序。</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>索引实体模式<ept id="p1">](#index-entities-pattern)</ept> - 维护索引实体以启用返回实体列表的高效搜索。</source>
          <target state="new"><bpt id="p1">[</bpt>索引实体模式<ept id="p1">](#index-entities-pattern)</ept> - 维护索引实体以启用返回实体列表的高效搜索。</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="sorting-data-in-a-key-value-store-in-the-table-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 对表服务中的数据进行排序</source>
          <target state="new"><ph id="ph1">&lt;a id="sorting-data-in-a-key-value-store-in-the-table-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 对表服务中的数据进行排序</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>表服务基于 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 然后按 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 以升序排序返回实体。这些键是字符串值，以确保数字值正确排序，应将值转换为固定长度并使用零进行填充。例如，如果用作 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 的员工 ID 值是个整数值，则应将员工 ID <bpt id="p4">**</bpt>123<ept id="p4">**</ept> 转换为 <bpt id="p5">**</bpt>00000123<ept id="p5">**</ept>。</source>
          <target state="new">表服务基于 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 然后按 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 以升序排序返回实体。这些键是字符串值，以确保数字值正确排序，应将值转换为固定长度并使用零进行填充。例如，如果用作 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 的员工 ID 值是个整数值，则应将员工 ID <bpt id="p4">**</bpt>123<ept id="p4">**</ept> 转换为 <bpt id="p5">**</bpt>00000123<ept id="p5">**</ept>。</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>许多应用程序要求使用按不同顺序排序的数据：例如，按名称或按加入日期对员工进行排序。<bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分中的以下模式解决如何为你的实体替换排序顺序：</source>
          <target state="new">许多应用程序要求使用按不同顺序排序的数据：例如，按名称或按加入日期对员工进行排序。<bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分中的以下模式解决如何为你的实体替换排序顺序：</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#intra-partition-secondary-index-pattern)</ept>存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 RowKey 值替换排序顺序。</source>
          <target state="new"><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#intra-partition-secondary-index-pattern)</ept>存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 RowKey 值替换排序顺序。</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#inter-partition-secondary-index-pattern)</ept>存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不桶 RowKey 值替换排序顺序。</source>
          <target state="new"><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#inter-partition-secondary-index-pattern)</ept>存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不桶 RowKey 值替换排序顺序。</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>日志结尾模式<ept id="p1">](#log-tail-pattern)</ept> - 通过使用以日期时间倒序排序的 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值检索最近添加到分区中的 <bpt id="p3">*</bpt>n<ept id="p3">*</ept> 个实体。</source>
          <target state="new"><bpt id="p1">[</bpt>日志结尾模式<ept id="p1">](#log-tail-pattern)</ept> - 通过使用以日期时间倒序排序的 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值检索最近添加到分区中的 <bpt id="p3">*</bpt>n<ept id="p3">*</ept> 个实体。</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="design-for-data-modification"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 针对数据修改的设计</source>
          <target state="new"><ph id="ph1">&lt;a id="design-for-data-modification"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 针对数据修改的设计</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>本部分重点介绍优化插入、更新和删除的设计注意事项。在某些情况下，你将需要在针对查询优化的设计与针对数据修改优化的设计之间进行权衡，就像你在设计关系数据库时要做的那样（尽管在关系数据库中，管理设计权衡的方法是不同的）。<bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分介绍了表服务的一些详细设计模式，并着重介绍了其中一些权衡。在实践中，你会发现许多针对查询实体优化的设计对于修改实体也能很好地工作。</source>
          <target state="new">本部分重点介绍优化插入、更新和删除的设计注意事项。在某些情况下，你将需要在针对查询优化的设计与针对数据修改优化的设计之间进行权衡，就像你在设计关系数据库时要做的那样（尽管在关系数据库中，管理设计权衡的方法是不同的）。<bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分介绍了表服务的一些详细设计模式，并着重介绍了其中一些权衡。在实践中，你会发现许多针对查询实体优化的设计对于修改实体也能很好地工作。</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>优化插入、更新和删除操作的性能</source>
          <target state="new">优化插入、更新和删除操作的性能</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>若要更新或删除某个实体，必须能够通过使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值来确定该实体。就这一点来说，你选择的用于修改实体的 <bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept> 应遵循为支持点查询所选择的类似条件，因为你希望尽可能高效地确定实体。你不希望使用效率低下的分区或表扫描来查找实体，以便发现所需的 <bpt id="p5">**</bpt>PartitionKey<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>RowKey<ept id="p6">**</ept> 值来更新或删除该实体。</source>
          <target state="new">若要更新或删除某个实体，必须能够通过使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值来确定该实体。就这一点来说，你选择的用于修改实体的 <bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept> 应遵循为支持点查询所选择的类似条件，因为你希望尽可能高效地确定实体。你不希望使用效率低下的分区或表扫描来查找实体，以便发现所需的 <bpt id="p5">**</bpt>PartitionKey<ept id="p5">**</ept> 和 <bpt id="p6">**</bpt>RowKey<ept id="p6">**</ept> 值来更新或删除该实体。</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分中的以下模式解决了优化性能或插入、更新和删除操作：</source>
          <target state="new"><bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分中的以下模式解决了优化性能或插入、更新和删除操作：</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>高容量删除模式<ept id="p1">](#high-volume-delete-pattern)</ept> - 通过将要同时删除的所有实体都存储在它们自己的单独表中来实现删除大量实体；通过删除表来删除这些实体。</source>
          <target state="new"><bpt id="p1">[</bpt>高容量删除模式<ept id="p1">](#high-volume-delete-pattern)</ept> - 通过将要同时删除的所有实体都存储在它们自己的单独表中来实现删除大量实体；通过删除表来删除这些实体。</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>数据系列模式<ept id="p1">](#data-series-pattern)</ept> - 将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。</source>
          <target state="new"><bpt id="p1">[</bpt>数据系列模式<ept id="p1">](#data-series-pattern)</ept> - 将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>宽实体模式<ept id="p1">](#wide-entities-pattern)</ept> - 使用多个物理实体来存储具有多于 252 个属性的逻辑实体。</source>
          <target state="new"><bpt id="p1">[</bpt>宽实体模式<ept id="p1">](#wide-entities-pattern)</ept> - 使用多个物理实体来存储具有多于 252 个属性的逻辑实体。</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>大实体模式<ept id="p1">](#large-entities-pattern)</ept> - 使用 blob 存储来存储大属性值。</source>
          <target state="new"><bpt id="p1">[</bpt>大实体模式<ept id="p1">](#large-entities-pattern)</ept> - 使用 blob 存储来存储大属性值。</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>确保存储实体中的一致性</source>
          <target state="new">确保存储实体中的一致性</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>影响你选择用于优化数据修改的键的其他关键因素是如何通过使用原子事务来确保一致性。你只能使用 EGT 作用于存储在同一个分区中的实体。</source>
          <target state="new">影响你选择用于优化数据修改的键的其他关键因素是如何通过使用原子事务来确保一致性。你只能使用 EGT 作用于存储在同一个分区中的实体。</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这一节中的以下模式解决了管理一致性问题：</source>
          <target state="new"><bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这一节中的以下模式解决了管理一致性问题：</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#intra-partition-secondary-index-pattern)</ept> - 存储使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值来替换排序顺序。</source>
          <target state="new"><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#intra-partition-secondary-index-pattern)</ept> - 存储使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值来替换排序顺序。</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#inter-partition-secondary-index-pattern)</ept> - 存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值来替换排序顺序。</source>
          <target state="new"><bpt id="p1">[</bpt>内分区的第二索引模式<ept id="p1">](#inter-partition-secondary-index-pattern)</ept> - 存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值来替换排序顺序。</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>最终一致性事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept> - 通过使用 Azure 队列跨分区边界或存储系统边界启用最终一致的行为。</source>
          <target state="new"><bpt id="p1">[</bpt>最终一致性事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept> - 通过使用 Azure 队列跨分区边界或存储系统边界启用最终一致的行为。</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>索引实体模式<ept id="p1">](#index-entities-pattern)</ept> - 维护索引实体以启用返回实体列表的高效搜索。</source>
          <target state="new"><bpt id="p1">[</bpt>索引实体模式<ept id="p1">](#index-entities-pattern)</ept> - 维护索引实体以启用返回实体列表的高效搜索。</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>反规范模式<ept id="p1">](#denormalization-pattern)</ept> - 将相关数据组合在一起放置在单个实体中，使你能够使用单个点查询检索所有所需的数据。</source>
          <target state="new"><bpt id="p1">[</bpt>反规范模式<ept id="p1">](#denormalization-pattern)</ept> - 将相关数据组合在一起放置在单个实体中，使你能够使用单个点查询检索所有所需的数据。</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>数据系列模式<ept id="p1">](#data-series-pattern)</ept> - 将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。</source>
          <target state="new"><bpt id="p1">[</bpt>数据系列模式<ept id="p1">](#data-series-pattern)</ept> - 将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>有关实体组事务的详细信息，请参阅<bpt id="p1">[</bpt>实体组事务<ept id="p1">](#entity-group-transactions)</ept>。</source>
          <target state="new">有关实体组事务的详细信息，请参阅<bpt id="p1">[</bpt>实体组事务<ept id="p1">](#entity-group-transactions)</ept>。</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>确保用于高效修改的设计便于高效查询</source>
          <target state="new">确保用于高效修改的设计便于高效查询</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>在许多情况下，用于高效查询的设计会产生高效修改的效果，但你应始终评估这是否适用于你的特定方案。<bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分的某些模式显式评估了查询实体和修改实体之间的权衡利弊，你应始终考虑到每种类型操作的数目。</source>
          <target state="new">在许多情况下，用于高效查询的设计会产生高效修改的效果，但你应始终评估这是否适用于你的特定方案。<bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分的某些模式显式评估了查询实体和修改实体之间的权衡利弊，你应始终考虑到每种类型操作的数目。</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分中的以下模式实施针对高效查询的设计与针对高效数据修改的设计之间的折衷方案：</source>
          <target state="new"><bpt id="p1">[</bpt>表设计模式<ept id="p1">](#table-design-patterns)</ept>这部分中的以下模式实施针对高效查询的设计与针对高效数据修改的设计之间的折衷方案：</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>复合键模式<ept id="p1">](#compound-key-pattern)</ept> - 使用复合 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值可让客户端使用单个点查询查找相关数据。</source>
          <target state="new"><bpt id="p1">[</bpt>复合键模式<ept id="p1">](#compound-key-pattern)</ept> - 使用复合 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值可让客户端使用单个点查询查找相关数据。</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>日志结尾模式<ept id="p1">](#log-tail-pattern)</ept> - 通过使用以日期时间倒序排序的 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值检索最近添加到分区中的 <bpt id="p3">*</bpt>n<ept id="p3">*</ept> 个实体。</source>
          <target state="new"><bpt id="p1">[</bpt>日志结尾模式<ept id="p1">](#log-tail-pattern)</ept> - 通过使用以日期时间倒序排序的 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值检索最近添加到分区中的 <bpt id="p3">*</bpt>n<ept id="p3">*</ept> 个实体。</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>对表数据进行加密</source>
          <target state="new">对表数据进行加密</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>.NET Azure 存储空间客户端库支持对插入和替换操作的字符串实体属性进行加密。加密的字符串作为二进制属性存储在服务中，并在解密之后转换回字符串。</source>
          <target state="new">.NET Azure 存储空间客户端库支持对插入和替换操作的字符串实体属性进行加密。加密的字符串作为二进制属性存储在服务中，并在解密之后转换回字符串。</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>对于表，除了加密策略以外，用户还必须指定要加密的属性。可以通过指定 [EncryptProperty] 特性（适用于从 TableEntity 派生的 POCO 实体）或在请求选项中指定加密解析程序来完成此操作。加密解析程序是一个委托，它接受分区键、行键和属性名称并返回一个布尔值以指示是否应加密该属性。在加密过程中，客户端库将使用此信息来确定是否应在写入到网络时加密属性。该委托还可以围绕如何加密属性来实现逻辑的可能性。（例如，如果 X，则加密属性 A，否则加密属性 A 和 B。） 请注意，在读取或查询实体时，不需要提供此信息。</source>
          <target state="new">对于表，除了加密策略以外，用户还必须指定要加密的属性。可以通过指定 [EncryptProperty] 特性（适用于从 TableEntity 派生的 POCO 实体）或在请求选项中指定加密解析程序来完成此操作。加密解析程序是一个委托，它接受分区键、行键和属性名称并返回一个布尔值以指示是否应加密该属性。在加密过程中，客户端库将使用此信息来确定是否应在写入到网络时加密属性。该委托还可以围绕如何加密属性来实现逻辑的可能性。（例如，如果 X，则加密属性 A，否则加密属性 A 和 B。） 请注意，在读取或查询实体时，不需要提供此信息。</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>请注意，当前不支持合并。由于属性的子集可能以前已使用不同的密钥加密，因此只合并新属性和更新元数据将导致数据丢失。合并需要进行额外的服务调用以从服务中读取预先存在的实体，或者需要为属性使用一个新密钥，由于性能方面的原因，这两种方案都不适用。</source>
          <target state="new">请注意，当前不支持合并。由于属性的子集可能以前已使用不同的密钥加密，因此只合并新属性和更新元数据将导致数据丢失。合并需要进行额外的服务调用以从服务中读取预先存在的实体，或者需要为属性使用一个新密钥，由于性能方面的原因，这两种方案都不适用。</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>有关对表数据进行加密的信息，请参阅 <bpt id="p1">[</bpt>Azure 存储空间的客户端加密和 Azure 密钥保管库<ept id="p1">](/documentation/articles/storage-client-side-encryption)</ept>。</source>
          <target state="new">有关对表数据进行加密的信息，请参阅 <bpt id="p1">[</bpt>Azure 存储空间的客户端加密和 Azure 密钥保管库<ept id="p1">](/documentation/articles/storage-client-side-encryption)</ept>。</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="modelling-relationships"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 为关系建模</source>
          <target state="new"><ph id="ph1">&lt;a id="modelling-relationships"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 为关系建模</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>构建域模型是复杂系统设计中的一个关键步骤。通常，你通过建模过程来确定实体以及实体之间的关系，并将它作为了解业务域并通知设计有关系统的信息的方式。本部分重点介绍如何将域模型中找到的一些常见关系类型转换为表服务的设计。从逻辑数据模型映射到基于 NoSQL 的物理数据模型的过程与在设计关系数据库时使用的过程大不相同。关系数据库设计通常采用数据规范化过程（针对最大限度减少冗余进行优化）和声明性查询功能（提取了数据库工作原理的实现方式）。</source>
          <target state="new">构建域模型是复杂系统设计中的一个关键步骤。通常，你通过建模过程来确定实体以及实体之间的关系，并将它作为了解业务域并通知设计有关系统的信息的方式。本部分重点介绍如何将域模型中找到的一些常见关系类型转换为表服务的设计。从逻辑数据模型映射到基于 NoSQL 的物理数据模型的过程与在设计关系数据库时使用的过程大不相同。关系数据库设计通常采用数据规范化过程（针对最大限度减少冗余进行优化）和声明性查询功能（提取了数据库工作原理的实现方式）。</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="one-to-many-relationships"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 一对多关系</source>
          <target state="new"><ph id="ph1">&lt;a id="one-to-many-relationships"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 一对多关系</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>业务域对象之间的一对多关系非常频繁地发生：例如，一个部门有许多员工。有多种方法可在表服务中实现一对多关系，每种方法都有与特定方案相关的利弊。</source>
          <target state="new">业务域对象之间的一对多关系非常频繁地发生：例如，一个部门有许多员工。有多种方法可在表服务中实现一对多关系，每种方法都有与特定方案相关的利弊。</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>请考虑这样一个示例：一个具有数万个部门和员工实体的大型跨国公司，其中每个部门都有许多员工，每个员工都与一个特定部门相关联。一种方法是存储不同的部门和员工实体，如下所示：</source>
          <target state="new">请考虑这样一个示例：一个具有数万个部门和员工实体的大型跨国公司，其中每个部门都有许多员工，每个员工都与一个特定部门相关联。一种方法是存储不同的部门和员工实体，如下所示：</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>此示例展示了类型之间基于 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值的隐式一对多关系。每个部门可以有许多员工。</source>
          <target state="new">此示例展示了类型之间基于 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值的隐式一对多关系。每个部门可以有许多员工。</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>此示例还显示了同一个分区中的部门实体及其相关的员工实体。你可以选择对不同实体类型使用不同分区、表或甚至不同存储帐户。</source>
          <target state="new">此示例还显示了同一个分区中的部门实体及其相关的员工实体。你可以选择对不同实体类型使用不同分区、表或甚至不同存储帐户。</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>另一种方法是使数据非规范化，并只存储具有非规范化部门数据的员工实体，如下面的示例所示。在此特定方案中，如果你要求能够更改部门经理的详细信息，则此非规范化方法可能不是最佳方法，因为要这样做，需要更新部门中的每个员工。</source>
          <target state="new">另一种方法是使数据非规范化，并只存储具有非规范化部门数据的员工实体，如下面的示例所示。在此特定方案中，如果你要求能够更改部门经理的详细信息，则此非规范化方法可能不是最佳方法，因为要这样做，需要更新部门中的每个员工。</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅本指南后面的<bpt id="p1">[</bpt>反规范化模式<ept id="p1">](#denormalization-pattern)</ept>。</source>
          <target state="new">有关详细信息，请参阅本指南后面的<bpt id="p1">[</bpt>反规范化模式<ept id="p1">](#denormalization-pattern)</ept>。</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>下表总结了上述每种方法对于存储具有一对多关系的员工和部门的优缺点。你还应考虑你希望执行各种操作的频率：如果你的设计中包含的代价高昂的操作很少发生，则这可能是可以接受的。</source>
          <target state="new">下表总结了上述每种方法对于存储具有一对多关系的员工和部门的优缺点。你还应考虑你希望执行各种操作的频率：如果你的设计中包含的代价高昂的操作很少发生，则这可能是可以接受的。</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>方法</source>
          <target state="new">方法</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>优点</source>
          <target state="new">优点</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>缺点</source>
          <target state="new">缺点</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>不同的实体类型、同一分区、同一个表</source>
          <target state="new">不同的实体类型、同一分区、同一个表</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>可以使用单个操作来更新部门实体。</source>
          <target state="new">可以使用单个操作来更新部门实体。</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>如果你需要在更新/插入/删除员工实体时修改部门实体，则可以使用 EGT 来保持一致性。例如，如果维护每个部门的部门员工计数。</source>
          <target state="new">如果你需要在更新/插入/删除员工实体时修改部门实体，则可以使用 EGT 来保持一致性。例如，如果维护每个部门的部门员工计数。</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>你可能需要针对一些客户端活动同时检索员工和部门实体。</source>
          <target state="new">你可能需要针对一些客户端活动同时检索员工和部门实体。</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>存储操作发生在同一个分区。在事务量很大时，这可能会产生热点。</source>
          <target state="new">存储操作发生在同一个分区。在事务量很大时，这可能会产生热点。</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>不能使用 EGT 将员工移到新部门。</source>
          <target state="new">不能使用 EGT 将员工移到新部门。</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>不同的实体类型、不同的分区或表或存储帐户</source>
          <target state="new">不同的实体类型、不同的分区或表或存储帐户</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>可以使用单个操作更新部门实体或员工实体。</source>
          <target state="new">可以使用单个操作更新部门实体或员工实体。</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>在事务量很高时，这可能有助于将负载分布到多个分区。</source>
          <target state="new">在事务量很高时，这可能有助于将负载分布到多个分区。</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>你可能需要针对一些客户端活动同时检索员工和部门实体。</source>
          <target state="new">你可能需要针对一些客户端活动同时检索员工和部门实体。</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>在更新/插入/删除员工以及更新部门时，不能使用 EGT 来保持一致性。例如，更新部门实体中的员工计数。</source>
          <target state="new">在更新/插入/删除员工以及更新部门时，不能使用 EGT 来保持一致性。例如，更新部门实体中的员工计数。</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>不能使用 EGT 将员工移到新部门。</source>
          <target state="new">不能使用 EGT 将员工移到新部门。</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>非规范化为单个实体类型</source>
          <target state="new">非规范化为单个实体类型</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>使用单个请求即可检索所需的所有信息。</source>
          <target state="new">使用单个请求即可检索所需的所有信息。</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>如果你需要更新部门信息（这将需要更新部门中的所有员工），则保持一致性的开销会很大。</source>
          <target state="new">如果你需要更新部门信息（这将需要更新部门中的所有员工），则保持一致性的开销会很大。</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>如何在这些选项中进行选择，以及哪些优点和缺点最重要，取决于特定应用程序方案。例如，你修改部门实体的频率；你的所有员工查询是否都需要附加部门信息；你有多接近对分区或存储帐户的可伸缩性限制？</source>
          <target state="new">如何在这些选项中进行选择，以及哪些优点和缺点最重要，取决于特定应用程序方案。例如，你修改部门实体的频率；你的所有员工查询是否都需要附加部门信息；你有多接近对分区或存储帐户的可伸缩性限制？</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>一对一关系</source>
          <target state="new">一对一关系</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>域模型可能包括实体之间的一对一关系。如果你需要在表服务中实现一对一关系，还必须选择在需要检索两个相关的实体时如何链接这两个实体。此链接可以是隐式的（基于键值中的约定），也可是显式的（通过在每个实体中以 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值的形式存储指向其相关实体的链接。有关是否应将相关实体存储在同一个分区中的讨论，请参阅<bpt id="p3">[</bpt>一对多关系<ept id="p3">](#one-to-many-relationships)</ept>这部分。</source>
          <target state="new">域模型可能包括实体之间的一对一关系。如果你需要在表服务中实现一对一关系，还必须选择在需要检索两个相关的实体时如何链接这两个实体。此链接可以是隐式的（基于键值中的约定），也可是显式的（通过在每个实体中以 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值的形式存储指向其相关实体的链接。有关是否应将相关实体存储在同一个分区中的讨论，请参阅<bpt id="p3">[</bpt>一对多关系<ept id="p3">](#one-to-many-relationships)</ept>这部分。</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>请注意，还有可能引导你在表服务中实现一对一关系的实现注意事项：</source>
          <target state="new">请注意，还有可能引导你在表服务中实现一对一关系的实现注意事项：</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>处理大实体（有关详细信息，请参阅<bpt id="p1">[</bpt>使用大实体<ept id="p1">](#working-with-large-entities)</ept>）。</source>
          <target state="new">处理大实体（有关详细信息，请参阅<bpt id="p1">[</bpt>使用大实体<ept id="p1">](#working-with-large-entities)</ept>）。</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>实施访问控制（有关详细信息，请参阅<bpt id="p1">[</bpt>使用共享访问签名控制访问权限<ept id="p1">](#controlling-access-with-shared-access-signatures)</ept>）。</source>
          <target state="new">实施访问控制（有关详细信息，请参阅<bpt id="p1">[</bpt>使用共享访问签名控制访问权限<ept id="p1">](#controlling-access-with-shared-access-signatures)</ept>）。</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>在客户端中联接</source>
          <target state="new">在客户端中联接</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>尽管可通过多种方式在表服务中为关系建模，但你不应忘记使用表服务的两个主要原因是可伸缩性和性能。如果你发现你要建模的多个关系损害解决方案的性能和可伸缩性，则应问自己是否有必要在表设计中构建所有数据关系。如果你让客户端应用程序执行任何必要的联接，则可能能够简化设计并改进解决方案的可伸缩性和性能。</source>
          <target state="new">尽管可通过多种方式在表服务中为关系建模，但你不应忘记使用表服务的两个主要原因是可伸缩性和性能。如果你发现你要建模的多个关系损害解决方案的性能和可伸缩性，则应问自己是否有必要在表设计中构建所有数据关系。如果你让客户端应用程序执行任何必要的联接，则可能能够简化设计并改进解决方案的可伸缩性和性能。</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>例如，如果你的小型表包含不经常更改的数据，则可以检索一次此数据并将其缓存在客户端。这可以避免为检索相同数据而进行的重复往返操作。在本指南中我们已查看过的示例中，小型组织中的部门集可能很小并且不经常更改，使它成为合适的数据候选项，客户端应用程序可以下载一次该数据并将其缓存为查找数据。</source>
          <target state="new">例如，如果你的小型表包含不经常更改的数据，则可以检索一次此数据并将其缓存在客户端。这可以避免为检索相同数据而进行的重复往返操作。在本指南中我们已查看过的示例中，小型组织中的部门集可能很小并且不经常更改，使它成为合适的数据候选项，客户端应用程序可以下载一次该数据并将其缓存为查找数据。</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="inheritance-relationships"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 继承关系</source>
          <target state="new"><ph id="ph1">&lt;a id="inheritance-relationships"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 继承关系</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>如果你的客户端应用程序使用一组构成继承关系的的类来表示业务实体，则可以轻松地在表服务中持久保存这些实体。例如，你可能会在客户端应用程序中定义了以下一组类，其中 <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> 是一个抽象类。</source>
          <target state="new">如果你的客户端应用程序使用一组构成继承关系的的类来表示业务实体，则可以轻松地在表服务中持久保存这些实体。例如，你可能会在客户端应用程序中定义了以下一组类，其中 <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> 是一个抽象类。</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>你可以使用单个 Person 表通过如下代码中的实体在表服务中持久保存两个具体类的实例：</source>
          <target state="new">你可以使用单个 Person 表通过如下代码中的实体在表服务中持久保存两个具体类的实例：</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>有关在客户端代码中处理同一个表中的多个实体类型的详细信息，请参阅本指南后面的<bpt id="p1">[</bpt>处理异类实体类型<ept id="p1">](#working-with-heterogeneous-entity-types)</ept>部分。此部分提供了如何在客户端代码中识别实体类型的示例。</source>
          <target state="new">有关在客户端代码中处理同一个表中的多个实体类型的详细信息，请参阅本指南后面的<bpt id="p1">[</bpt>处理异类实体类型<ept id="p1">](#working-with-heterogeneous-entity-types)</ept>部分。此部分提供了如何在客户端代码中识别实体类型的示例。</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="table-design-patterns"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 表设计模式</source>
          <target state="new"><ph id="ph1">&lt;a id="table-design-patterns"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 表设计模式</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>在前面部分，你已看到有关如何优化表设计的一些详细讨论，这包括如何使用查询检索实体数据，以及如何插入、更新和删除实体数据。本部分介绍适用于表服务解决方案的一些模式。此外，你还将了解如何实际解决先前在本指南中提出的一些问题和权衡。下图总结了不同模式之间的关系：</source>
          <target state="new">在前面部分，你已看到有关如何优化表设计的一些详细讨论，这包括如何使用查询检索实体数据，以及如何插入、更新和删除实体数据。本部分介绍适用于表服务解决方案的一些模式。此外，你还将了解如何实际解决先前在本指南中提出的一些问题和权衡。下图总结了不同模式之间的关系：</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>上面的模式映射突出显示了本指南中介绍的模式（蓝色）和反模式（橙色）之间的某些关系。当然，还有许多其他值得考虑的模式。例如，表服务的重要方案之一是存储<bpt id="p1">[</bpt>命令查询职责分离<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/jj554200.aspx)</ept> (CQRS) 模式的<bpt id="p2">[</bpt>具体化视图<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/dn589782.aspx)</ept>。</source>
          <target state="new">上面的模式映射突出显示了本指南中介绍的模式（蓝色）和反模式（橙色）之间的某些关系。当然，还有许多其他值得考虑的模式。例如，表服务的重要方案之一是存储<bpt id="p1">[</bpt>命令查询职责分离<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/jj554200.aspx)</ept> (CQRS) 模式的<bpt id="p2">[</bpt>具体化视图<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/dn589782.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="intra-partition-secondary-index-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 分区内辅助索引模式</source>
          <target state="new"><ph id="ph1">&lt;a id="intra-partition-secondary-index-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 分区内辅助索引模式</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>使用不同 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值（在同一分区中）存储每个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值替换排序顺序。可以使用 EGT 使副本之间的更新保持一致。</source>
          <target state="new">使用不同 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值（在同一分区中）存储每个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值替换排序顺序。可以使用 EGT 使副本之间的更新保持一致。</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>表服务自动使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值为实体编制索引。这使客户端应用程序可以使用这些值高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以使用点查询，以通过部门名称和员工 ID（<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>）来检索单个员工实体。客户端还可以在每个部门内检索按员工 ID 排序的实体。</source>
          <target state="new">表服务自动使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值为实体编制索引。这使客户端应用程序可以使用这些值高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以使用点查询，以通过部门名称和员工 ID（<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>）来检索单个员工实体。客户端还可以在每个部门内检索按员工 ID 排序的实体。</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>如果还要能够基于另一个属性（例如，电子邮件地址）的值查找员工实体，则必须使用效率较低的分区扫描来查找匹配项。这是因为表服务不提供辅助索引。此外，还无法选择请求按 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 顺序以外顺序排序的员工列表。</source>
          <target state="new">如果还要能够基于另一个属性（例如，电子邮件地址）的值查找员工实体，则必须使用效率较低的分区扫描来查找匹配项。这是因为表服务不提供辅助索引。此外，还无法选择请求按 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 顺序以外顺序排序的员工列表。</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>若要解决缺少辅助索引的问题，可以存储每个实体的多个副本，其中每个副本使用不同 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值。如果你存储如下所示的结构的实体，则可以有效地基于邮件地址或员工 ID 检索员工实体。<bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 的前缀值“empid\_”和“email\_”使你能够通过使用一定范围的邮件地址或员工 ID 查询单个员工或某个范围内的员工。</source>
          <target state="new">若要解决缺少辅助索引的问题，可以存储每个实体的多个副本，其中每个副本使用不同 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值。如果你存储如下所示的结构的实体，则可以有效地基于邮件地址或员工 ID 检索员工实体。<bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 的前缀值“empid\_”和“email\_”使你能够通过使用一定范围的邮件地址或员工 ID 查询单个员工或某个范围内的员工。</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>以下两个筛选条件（一个按员工 ID 查找，一个按电子邮件地址查找）都指定点查询：</source>
          <target state="new">以下两个筛选条件（一个按员工 ID 查找，一个按电子邮件地址查找）都指定点查询：</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>$filter=(PartitionKey eq 'Sales') and (RowKey eq 'empid_000223')</source>
          <target state="new">$filter=(PartitionKey eq 'Sales') and (RowKey eq 'empid_000223')</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>$filter=(PartitionKey eq 'Sales') and (RowKey eq 'email_jonesj@contoso.com')</source>
          <target state="new">$filter=(PartitionKey eq 'Sales') and (RowKey eq 'email_jonesj@contoso.com')</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>如果你查询一组员工实体，则可以通过使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中相应的前缀查询实体，指定按员工 ID 顺序排序的范围或按电子邮件地址顺序排序的范围。</source>
          <target state="new">如果你查询一组员工实体，则可以通过使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中相应的前缀查询实体，指定按员工 ID 顺序排序的范围或按电子邮件地址顺序排序的范围。</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>要查找销售部门中的所有雇员，其雇员 ID 范围为 000100 到 000199，请使用：$filter=(PartitionKey eq 'Sales') and (RowKey ge 'empid\_000100') and (RowKey le 'empid\_000199')</source>
          <target state="new">要查找销售部门中的所有雇员，其雇员 ID 范围为 000100 到 000199，请使用：$filter=(PartitionKey eq 'Sales') and (RowKey ge 'empid\_000100') and (RowKey le 'empid\_000199')</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>要通过以字母“a”开头的邮件地址查找销售部门中的所有雇员，请使用：$filter=(PartitionKey eq 'Sales') and (RowKey ge 'email\_a') and (RowKey lt 'email\_b')</source>
          <target state="new">要通过以字母“a”开头的邮件地址查找销售部门中的所有雇员，请使用：$filter=(PartitionKey eq 'Sales') and (RowKey ge 'email\_a') and (RowKey lt 'email\_b')</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>请注意，上面的示例中使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id="p1">[</bpt>查询实体<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。</source>
          <target state="new">请注意，上面的示例中使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id="p1">[</bpt>查询实体<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>使用表存储相对比较便宜，因此存储重复数据的成本开销不应是主要考虑因素。但是，始终应根据预期的存储要求来评估设计成本，并且只通过添加重复的实体来支持客户端应用程序将执行的查询。</source>
          <target state="new">使用表存储相对比较便宜，因此存储重复数据的成本开销不应是主要考虑因素。但是，始终应根据预期的存储要求来评估设计成本，并且只通过添加重复的实体来支持客户端应用程序将执行的查询。</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>由于辅助索引实体与原始实体存储在同一分区，因此应确保不超过单个分区的可伸缩性目标。</source>
          <target state="new">由于辅助索引实体与原始实体存储在同一分区，因此应确保不超过单个分区的可伸缩性目标。</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>可以通过使用 EGT 以原子方式更新实体的两个副本，来使重复的实体彼此保持一致。这意味着应将实体的所有副本都存储在同一个分区。有关详细信息，请参阅<bpt id="p1">[</bpt>使用实体组事务<ept id="p1">](#entity-group-transactions)</ept>部分。</source>
          <target state="new">可以通过使用 EGT 以原子方式更新实体的两个副本，来使重复的实体彼此保持一致。这意味着应将实体的所有副本都存储在同一个分区。有关详细信息，请参阅<bpt id="p1">[</bpt>使用实体组事务<ept id="p1">](#entity-group-transactions)</ept>部分。</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>用于每个实体的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 的值必须唯一。请考虑使用复合键值。</source>
          <target state="new">用于每个实体的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 的值必须唯一。请考虑使用复合键值。</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中填充数字值（例如，员工 ID 000223）以实现正确地排序以及根据上限和下限进行筛选。</source>
          <target state="new">在 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中填充数字值（例如，员工 ID 000223）以实现正确地排序以及根据上限和下限进行筛选。</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>不一定需要重复实体的所有属性。例如，如果使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中的电子邮件地址查找实体的查询永远不会需要员工的年龄，则这些实体可以具有以下结构：</source>
          <target state="new">不一定需要重复实体的所有属性。例如，如果使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中的电子邮件地址查找实体的查询永远不会需要员工的年龄，则这些实体可以具有以下结构：</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>通常，最好存储重复数据并确保可以使用单个查询检索所有所需数据，而不是使用一个查询来找到实体，使用另一个查询来查找所需数据。</source>
          <target state="new">通常，最好存储重复数据并确保可以使用单个查询检索所有所需数据，而不是使用一个查询来找到实体，使用另一个查询来查找所需数据。</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>在以下情况下使用此模式：客户端应用程序需要使用各种不同的键检索实体；你的客户端需要以不同排序顺序检索实体；你可以使用各种唯一值确定每个实体。但是，在使用不同 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值执行实体查找时，应确保不超过分区可伸缩性限制。</source>
          <target state="new">在以下情况下使用此模式：客户端应用程序需要使用各种不同的键检索实体；你的客户端需要以不同排序顺序检索实体；你可以使用各种唯一值确定每个实体。但是，在使用不同 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值执行实体查找时，应确保不超过分区可伸缩性限制。</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>分区间辅助索引模式</source>
          <target state="new">分区间辅助索引模式</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>复合键模式</source>
          <target state="new">复合键模式</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>实体组事务</source>
          <target state="new">实体组事务</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>处理异类实体类型</source>
          <target state="new">处理异类实体类型</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>分区间辅助索引模式</source>
          <target state="new">分区间辅助索引模式</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>使用不同 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值在不同分区或不同表中存储每个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值替换排序顺序。</source>
          <target state="new">使用不同 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值在不同分区或不同表中存储每个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值替换排序顺序。</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>表服务自动使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值为实体编制索引。这使客户端应用程序可以使用这些值高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以使用点查询，以通过部门名称和员工 ID（<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>）来检索单个员工实体。客户端还可以在每个部门内检索按员工 ID 排序的实体。</source>
          <target state="new">表服务自动使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值为实体编制索引。这使客户端应用程序可以使用这些值高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以使用点查询，以通过部门名称和员工 ID（<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>）来检索单个员工实体。客户端还可以在每个部门内检索按员工 ID 排序的实体。</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>如果还要能够基于另一个属性（例如，电子邮件地址）的值查找员工实体，则必须使用效率较低的分区扫描来查找匹配项。这是因为表服务不提供辅助索引。此外，还无法选择请求按 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 顺序以外顺序排序的员工列表。</source>
          <target state="new">如果还要能够基于另一个属性（例如，电子邮件地址）的值查找员工实体，则必须使用效率较低的分区扫描来查找匹配项。这是因为表服务不提供辅助索引。此外，还无法选择请求按 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 顺序以外顺序排序的员工列表。</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>你预期针对这些实体的事务量很大，并且想要将表服务限制客户端的风险降到最低。</source>
          <target state="new">你预期针对这些实体的事务量很大，并且想要将表服务限制客户端的风险降到最低。</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>要解决缺少辅助索引的问题，你可以存储每个实体的多个副本，其中每个副本都使用不同的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值。如果你存储如下所示的结构的实体，则可以有效地基于邮件地址或员工 ID 检索员工实体。针对 <bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept>，“empid\_”和“email\_”的前缀值使你能够识别用于查询想要使用的索引。</source>
          <target state="new">要解决缺少辅助索引的问题，你可以存储每个实体的多个副本，其中每个副本都使用不同的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值。如果你存储如下所示的结构的实体，则可以有效地基于邮件地址或员工 ID 检索员工实体。针对 <bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept>，“empid\_”和“email\_”的前缀值使你能够识别用于查询想要使用的索引。</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>以下两个筛选条件（一个按员工 ID 查找，一个按电子邮件地址查找）都指定点查询：</source>
          <target state="new">以下两个筛选条件（一个按员工 ID 查找，一个按电子邮件地址查找）都指定点查询：</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>$filter=(PartitionKey eq 'empid_Sales') and (RowKey eq '000223')</source>
          <target state="new">$filter=(PartitionKey eq 'empid_Sales') and (RowKey eq '000223')</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>$filter=(PartitionKey eq 'email_Sales') and (RowKey eq 'jonesj@contoso.com')</source>
          <target state="new">$filter=(PartitionKey eq 'email_Sales') and (RowKey eq 'jonesj@contoso.com')</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>如果你查询一组员工实体，则可以通过使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中相应的前缀查询实体，指定按员工 ID 顺序排序的范围或按电子邮件地址顺序排序的范围。</source>
          <target state="new">如果你查询一组员工实体，则可以通过使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中相应的前缀查询实体，指定按员工 ID 顺序排序的范围或按电子邮件地址顺序排序的范围。</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>要查找销售部门中的所有员工，其雇员 ID 范围为 <bpt id="p1">**</bpt>000100<ept id="p1">**</ept> 到 <bpt id="p2">**</bpt>000199<ept id="p2">**</ept> 按照 ID 序号排列，请使用：$filter=(PartitionKey eq 'empid\_Sales') and (RowKey ge '000100') and (RowKey le '000199')</source>
          <target state="new">要查找销售部门中的所有员工，其雇员 ID 范围为 <bpt id="p1">**</bpt>000100<ept id="p1">**</ept> 到 <bpt id="p2">**</bpt>000199<ept id="p2">**</ept> 按照 ID 序号排列，请使用：$filter=(PartitionKey eq 'empid\_Sales') and (RowKey ge '000100') and (RowKey le '000199')</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>要在销售部门中通过以“a”开头的邮件地址并按照邮件地址顺序查找所有员工，请使用：$filter=(PartitionKey eq 'email\_Sales') and (RowKey ge 'a') and (RowKey lt 'b')</source>
          <target state="new">要在销售部门中通过以“a”开头的邮件地址并按照邮件地址顺序查找所有员工，请使用：$filter=(PartitionKey eq 'email\_Sales') and (RowKey ge 'a') and (RowKey lt 'b')</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>请注意，上面的示例中使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id="p1">[</bpt>查询实体<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。</source>
          <target state="new">请注意，上面的示例中使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id="p1">[</bpt>查询实体<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>你可以使用<bpt id="p1">[</bpt>最终一致的事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept>将重复的实体最终与彼此保持一致，以维护主辅索引实体。</source>
          <target state="new">你可以使用<bpt id="p1">[</bpt>最终一致的事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept>将重复的实体最终与彼此保持一致，以维护主辅索引实体。</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>使用表存储相对比较便宜，因此存储重复数据的成本开销不应是主要考虑因素。但是，始终应根据预期的存储要求来评估设计成本，并且只通过添加重复的实体来支持客户端应用程序将执行的查询。</source>
          <target state="new">使用表存储相对比较便宜，因此存储重复数据的成本开销不应是主要考虑因素。但是，始终应根据预期的存储要求来评估设计成本，并且只通过添加重复的实体来支持客户端应用程序将执行的查询。</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>用于每个实体的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 的值必须唯一。请考虑使用复合键值。</source>
          <target state="new">用于每个实体的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 的值必须唯一。请考虑使用复合键值。</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中填充数字值（例如，员工 ID 000223）以实现正确地排序以及根据上限和下限进行筛选。</source>
          <target state="new">在 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中填充数字值（例如，员工 ID 000223）以实现正确地排序以及根据上限和下限进行筛选。</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>不一定需要重复实体的所有属性。例如，如果使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中的电子邮件地址查找实体的查询永远不会需要员工的年龄，则这些实体可以具有以下结构：</source>
          <target state="new">不一定需要重复实体的所有属性。例如，如果使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中的电子邮件地址查找实体的查询永远不会需要员工的年龄，则这些实体可以具有以下结构：</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>通常，最好存储重复数据并确保可以使用单个查询检索所有所需数据，而不是使用一个查询通过辅助索引找到实体，使用另一个查询通过主索引查找所需数据。</source>
          <target state="new">通常，最好存储重复数据并确保可以使用单个查询检索所有所需数据，而不是使用一个查询通过辅助索引找到实体，使用另一个查询通过主索引查找所需数据。</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>在以下情况下使用此模式：客户端应用程序需要使用各种不同的键检索实体；你的客户端需要以不同排序顺序检索实体；你可以使用各种唯一值确定每个实体。如果你想要在使用不同的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值执行实体查找时避免超过分区可伸缩性限制，请使用此模式。</source>
          <target state="new">在以下情况下使用此模式：客户端应用程序需要使用各种不同的键检索实体；你的客户端需要以不同排序顺序检索实体；你可以使用各种唯一值确定每个实体。如果你想要在使用不同的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值执行实体查找时避免超过分区可伸缩性限制，请使用此模式。</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>最终一致的事务模式</source>
          <target state="new">最终一致的事务模式</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>分区内辅助索引模式</source>
          <target state="new">分区内辅助索引模式</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>复合键模式</source>
          <target state="new">复合键模式</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>实体组事务</source>
          <target state="new">实体组事务</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>处理异类实体类型</source>
          <target state="new">处理异类实体类型</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="eventually-consistent-transactions-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 最终一致的事务模式</source>
          <target state="new"><ph id="ph1">&lt;a id="eventually-consistent-transactions-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 最终一致的事务模式</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>通过使用 Azure 队列跨分区边界或存储系统边界启用最终一致的行为。</source>
          <target state="new">通过使用 Azure 队列跨分区边界或存储系统边界启用最终一致的行为。</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>EGT 在多个共享同一分区键的实体之间启用原子事务。由于性能和可伸缩性原因，你可能会决定在不同分区或不同存储系统中存储具有一致性要求的实体：在这种情况下，你不能使用 EGT 来维护一致性。例如，你可能需要保持以下对象之间的最终一致性：</source>
          <target state="new">EGT 在多个共享同一分区键的实体之间启用原子事务。由于性能和可伸缩性原因，你可能会决定在不同分区或不同存储系统中存储具有一致性要求的实体：在这种情况下，你不能使用 EGT 来维护一致性。例如，你可能需要保持以下对象之间的最终一致性：</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>存储在同一个表的两个不同分区中的实体、存储在不同表中的实体、存储在不同存储帐户中的实体。</source>
          <target state="new">存储在同一个表的两个不同分区中的实体、存储在不同表中的实体、存储在不同存储帐户中的实体。</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>存储在表服务中的实体和存储在 Blob 服务中的 blob。</source>
          <target state="new">存储在表服务中的实体和存储在 Blob 服务中的 blob。</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>表服务中存储的实体和文件系统中的文件。</source>
          <target state="new">表服务中存储的实体和文件系统中的文件。</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>实体存储在表服务中还使用 Azure Search 服务编制了索引。</source>
          <target state="new">实体存储在表服务中还使用 Azure Search 服务编制了索引。</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>通过使用 Azure 队列，可以实现一种解决方案，用于在两个或更多个分区或存储系统之间提供最终一致性。为了说明此方法，假定你需要能够将旧员工实体存档。旧员工实体很少进行查询，并应从处理当前员工的任何活动中排除。为了实现这一要求，你将活动员工存储在 <bpt id="p1">**</bpt>Current<ept id="p1">**</ept> 表中，并将旧员工存储在 <bpt id="p2">**</bpt>Archive<ept id="p2">**</ept> 表中。将一名员工存档需要将相应实体从 <bpt id="p3">**</bpt>Current<ept id="p3">**</ept> 表中删除，然后将该实体添加到 <bpt id="p4">**</bpt>Archive<ept id="p4">**</ept> 表中，但你不能使用 EGT 执行这两个操作。若要避免故障导致实体同时出现在这两个表中或未出现在任一表中的风险，存档操作必须确保最终一致性。下面的序列图概述了此操作中的步骤。在随后的文本中提供了有关异常路径的更多详细信息。</source>
          <target state="new">通过使用 Azure 队列，可以实现一种解决方案，用于在两个或更多个分区或存储系统之间提供最终一致性。为了说明此方法，假定你需要能够将旧员工实体存档。旧员工实体很少进行查询，并应从处理当前员工的任何活动中排除。为了实现这一要求，你将活动员工存储在 <bpt id="p1">**</bpt>Current<ept id="p1">**</ept> 表中，并将旧员工存储在 <bpt id="p2">**</bpt>Archive<ept id="p2">**</ept> 表中。将一名员工存档需要将相应实体从 <bpt id="p3">**</bpt>Current<ept id="p3">**</ept> 表中删除，然后将该实体添加到 <bpt id="p4">**</bpt>Archive<ept id="p4">**</ept> 表中，但你不能使用 EGT 执行这两个操作。若要避免故障导致实体同时出现在这两个表中或未出现在任一表中的风险，存档操作必须确保最终一致性。下面的序列图概述了此操作中的步骤。在随后的文本中提供了有关异常路径的更多详细信息。</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>客户端通过在 Azure 队列中放置一条消息来启动存档操作，在此示例中要将员工 #456 存档。辅助角色将在队列中轮询新消息；当它找到一个新消息时，将读取该消息，并在队列上保留一个隐藏的副本。接下来，辅助角色从 <bpt id="p1">**</bpt>Current<ept id="p1">**</ept> 表中获取实体的副本，将该副本插入 <bpt id="p2">**</bpt>Archive<ept id="p2">**</ept> 表中，然后从 <bpt id="p3">**</bpt>Current<ept id="p3">**</ept> 表中删除原始实体。最后，如果在前面的步骤中没有出现错误，辅助角色将从队列中删除隐藏的消息。</source>
          <target state="new">客户端通过在 Azure 队列中放置一条消息来启动存档操作，在此示例中要将员工 #456 存档。辅助角色将在队列中轮询新消息；当它找到一个新消息时，将读取该消息，并在队列上保留一个隐藏的副本。接下来，辅助角色从 <bpt id="p1">**</bpt>Current<ept id="p1">**</ept> 表中获取实体的副本，将该副本插入 <bpt id="p2">**</bpt>Archive<ept id="p2">**</ept> 表中，然后从 <bpt id="p3">**</bpt>Current<ept id="p3">**</ept> 表中删除原始实体。最后，如果在前面的步骤中没有出现错误，辅助角色将从队列中删除隐藏的消息。</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>在此示例中，步骤 4 将该员工插入到 <bpt id="p1">**</bpt>Archive<ept id="p1">**</ept> 表中。它可以将该员工添加到 Blob 服务中的 blob 或文件系统中的文件。</source>
          <target state="new">在此示例中，步骤 4 将该员工插入到 <bpt id="p1">**</bpt>Archive<ept id="p1">**</ept> 表中。它可以将该员工添加到 Blob 服务中的 blob 或文件系统中的文件。</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>从故障中恢复</source>
          <target state="new">从故障中恢复</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>步骤 <bpt id="p1">**</bpt>4<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>5<ept id="p2">**</ept> 中的操作必须是<bpt id="p3">*</bpt>幂等<ept id="p3">*</ept>操作，这一点很重要，以防辅助角色需要重新启动存档操作。如果你使用的是表服务，对于步骤 <bpt id="p4">**</bpt>4<ept id="p4">**</ept> 应使用“插入或替换”操作；对于步骤 <bpt id="p5">**</bpt>5<ept id="p5">**</ept> 应使用所使用的客户端库中的“如果存在则删除”操作。如果你使用的是其他存储系统，则必须使用相应的幂等操作。</source>
          <target state="new">步骤 <bpt id="p1">**</bpt>4<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>5<ept id="p2">**</ept> 中的操作必须是<bpt id="p3">*</bpt>幂等<ept id="p3">*</ept>操作，这一点很重要，以防辅助角色需要重新启动存档操作。如果你使用的是表服务，对于步骤 <bpt id="p4">**</bpt>4<ept id="p4">**</ept> 应使用“插入或替换”操作；对于步骤 <bpt id="p5">**</bpt>5<ept id="p5">**</ept> 应使用所使用的客户端库中的“如果存在则删除”操作。如果你使用的是其他存储系统，则必须使用相应的幂等操作。</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>如果辅助角色永远不会完成步骤 <bpt id="p1">**</bpt>6<ept id="p1">**</ept>，则在超时后该消息将重新出现在队列中，以供辅助角色尝试重新处理它。辅助角色可以检查已读取队列中的某条消息多少次，如有必要，可通过将该消息发送到单独的队列来将其标记“坏”消息以供调查。有关读取队列消息以及检查取消排队计数的详细信息，请参阅<bpt id="p2">[</bpt>获取消息<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/dd179474.aspx)</ept>。</source>
          <target state="new">如果辅助角色永远不会完成步骤 <bpt id="p1">**</bpt>6<ept id="p1">**</ept>，则在超时后该消息将重新出现在队列中，以供辅助角色尝试重新处理它。辅助角色可以检查已读取队列中的某条消息多少次，如有必要，可通过将该消息发送到单独的队列来将其标记“坏”消息以供调查。有关读取队列消息以及检查取消排队计数的详细信息，请参阅<bpt id="p2">[</bpt>获取消息<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/dd179474.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>表和队列服务发生的一些错误是暂时性错误，客户端应用程序应包括适当的重试逻辑以处理这些错误。</source>
          <target state="new">表和队列服务发生的一些错误是暂时性错误，客户端应用程序应包括适当的重试逻辑以处理这些错误。</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>此解决方案不提供事务隔离。例如，当辅助角色执行步骤 <bpt id="p1">**</bpt>4<ept id="p1">**</ept> 和步骤 <bpt id="p2">**</bpt>5<ept id="p2">**</ept> 之间的操作时，客户端可以读取 <bpt id="p3">**</bpt>Current<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>Archive<ept id="p4">**</ept> 表，并查看数据的不一致视图。请注意，数据将最终保持一致。</source>
          <target state="new">此解决方案不提供事务隔离。例如，当辅助角色执行步骤 <bpt id="p1">**</bpt>4<ept id="p1">**</ept> 和步骤 <bpt id="p2">**</bpt>5<ept id="p2">**</ept> 之间的操作时，客户端可以读取 <bpt id="p3">**</bpt>Current<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>Archive<ept id="p4">**</ept> 表，并查看数据的不一致视图。请注意，数据将最终保持一致。</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>你必须确保步骤 4 和步骤 5 是幂等的，才能确保最终是一致的。</source>
          <target state="new">你必须确保步骤 4 和步骤 5 是幂等的，才能确保最终是一致的。</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>可以通过使用多个队列和辅助角色实例来扩展此解决方案。</source>
          <target state="new">可以通过使用多个队列和辅助角色实例来扩展此解决方案。</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>当你需要保证不同分区或表中存在的实体之间的最终一致性时，请使用此模式。你可以扩展此模式，以便确保表服务和 Blob 服务及其他非 Azure 存储数据源（如数据库或文件系统）中的操作的最终一致性。</source>
          <target state="new">当你需要保证不同分区或表中存在的实体之间的最终一致性时，请使用此模式。你可以扩展此模式，以便确保表服务和 Blob 服务及其他非 Azure 存储数据源（如数据库或文件系统）中的操作的最终一致性。</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>实体组事务</source>
          <target state="new">实体组事务</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>合并或替换</source>
          <target state="new">合并或替换</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>如果事务隔离对你的解决方案很重要，应考虑重新设计你的表，以便能够使用 EGT。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>如果事务隔离对你的解决方案很重要，应考虑重新设计你的表，以便能够使用 EGT。</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="index-entities-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 索引实体模式</source>
          <target state="new"><ph id="ph1">&lt;a id="index-entities-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 索引实体模式</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>维护索引实体以启用返回实体列表的高效搜索。</source>
          <target state="new">维护索引实体以启用返回实体列表的高效搜索。</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>表服务自动使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值为实体编制索引。这使客户端应用程序可以使用点查询高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以通过使用部门名称和员工 ID（<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>）来高效地检索单个员工实体。</source>
          <target state="new">表服务自动使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值为实体编制索引。这使客户端应用程序可以使用点查询高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以通过使用部门名称和员工 ID（<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>）来高效地检索单个员工实体。</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>如果你还要能够根据另一个非唯一的属性（如姓氏）的值检索员工实体的列表，则必须使用效率较低的分区扫描来查找匹配项，而不是使用索引来直接查找。这是因为表服务不提供辅助索引。</source>
          <target state="new">如果你还要能够根据另一个非唯一的属性（如姓氏）的值检索员工实体的列表，则必须使用效率较低的分区扫描来查找匹配项，而不是使用索引来直接查找。这是因为表服务不提供辅助索引。</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>若要实现使用上面所示的实体结构按姓氏查找，你必须维护员工 ID 的列表。如果要检索具有特定姓氏（例如 Jones）的员工实体，必须首先找到姓氏为“Jones”的员工的员工 ID 列表，然后再检索这些员工实体。有三个主要选项，用于存储员工 ID 列表：</source>
          <target state="new">若要实现使用上面所示的实体结构按姓氏查找，你必须维护员工 ID 的列表。如果要检索具有特定姓氏（例如 Jones）的员工实体，必须首先找到姓氏为“Jones”的员工的员工 ID 列表，然后再检索这些员工实体。有三个主要选项，用于存储员工 ID 列表：</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>使用 blob 存储。</source>
          <target state="new">使用 blob 存储。</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>在员工实体所在的同一分区中创建索引实体。</source>
          <target state="new">在员工实体所在的同一分区中创建索引实体。</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>在不同分区或表中创建索引实体。</source>
          <target state="new">在不同分区或表中创建索引实体。</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>选项 #1：使用 Blob 存储</source>
          <target state="new">选项 #1：使用 Blob 存储</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>使用第一个选项时，你为每个唯一的姓氏创建一个 Blob，并在每个 Blob 中存储具有该姓氏的员工的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>（部门）和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept>（员工 ID）值的列表。在添加或删除员工时，应确保相关 blob 的内容与员工实体是最终一致的。</source>
          <target state="new">使用第一个选项时，你为每个唯一的姓氏创建一个 Blob，并在每个 Blob 中存储具有该姓氏的员工的 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>（部门）和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept>（员工 ID）值的列表。在添加或删除员工时，应确保相关 blob 的内容与员工实体是最终一致的。</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>选项 #2：</source>
          <target state="new">选项 #2：</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>在同一个分区中创建索引实体</source>
          <target state="new">在同一个分区中创建索引实体</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>对于第二个选项，请使用存储以下数据的索引实体：</source>
          <target state="new">对于第二个选项，请使用存储以下数据的索引实体：</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EmployeeIDs<ept id="p1">**</ept> 属性包含姓氏存储在 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 中的员工的员工 ID 列表。</source>
          <target state="new"><bpt id="p1">**</bpt>EmployeeIDs<ept id="p1">**</ept> 属性包含姓氏存储在 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 中的员工的员工 ID 列表。</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>以下步骤概述了在添加新员工时，如果使用第二个选项应遵循的过程。在此示例中，我们要在销售部门 1 中添加 ID 为 000152、姓氏为 Jones 的员工。</source>
          <target state="new">以下步骤概述了在添加新员工时，如果使用第二个选项应遵循的过程。在此示例中，我们要在销售部门 1 中添加 ID 为 000152、姓氏为 Jones 的员工。</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值“Sales”和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值“Jones”检索索引实体。 保存此实体的 ETag 以便在步骤 2 中使用。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值“Sales”和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值“Jones”检索索引实体。 保存此实体的 ETag 以便在步骤 2 中使用。</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>创建一个实体组事务（即批量操作），该项通过将新的员工 ID 添加到 EmployeeIDs 字段的列表中，插入新的员工实体（<bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值“Sales”和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值“000152”），并更新索引实体（<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 值“Sales”和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>值“Jones”）。有关实体组事务的详细信息，请参阅<bpt id="p5">[</bpt>实体组事务<ept id="p5">](#entity-group-transactions)</ept>。</source>
          <target state="new">创建一个实体组事务（即批量操作），该项通过将新的员工 ID 添加到 EmployeeIDs 字段的列表中，插入新的员工实体（<bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值“Sales”和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值“000152”），并更新索引实体（<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 值“Sales”和 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept>值“Jones”）。有关实体组事务的详细信息，请参阅<bpt id="p5">[</bpt>实体组事务<ept id="p5">](#entity-group-transactions)</ept>。</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>如果实体组事务由于开放式并发错误（其他人刚修改了索引实体）而失败，则需要从步骤 1 重新开始。</source>
          <target state="new">如果实体组事务由于开放式并发错误（其他人刚修改了索引实体）而失败，则需要从步骤 1 重新开始。</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>如果你使用的是第二个选项，则可以使用类似的方法删除员工。更改员工的姓氏会稍微复杂一些，因为你将需要执行更新三个实体的实体组事务：员工实体、旧姓氏的索引实体和新姓氏的索引实体。你必须在进行任何更改之前检索每个实体以便检索 ETag 值，然后你可以使用该值利用开放式并发执行更新。</source>
          <target state="new">如果你使用的是第二个选项，则可以使用类似的方法删除员工。更改员工的姓氏会稍微复杂一些，因为你将需要执行更新三个实体的实体组事务：员工实体、旧姓氏的索引实体和新姓氏的索引实体。你必须在进行任何更改之前检索每个实体以便检索 ETag 值，然后你可以使用该值利用开放式并发执行更新。</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>如果你使用的是第二个选项，以下步骤概述了在需要查找部门中具有给定姓氏的所有员工时应遵循的过程。在此示例中，我们要在 Sales 部门中查找姓氏为 Jones 的所有员工：</source>
          <target state="new">如果你使用的是第二个选项，以下步骤概述了在需要查找部门中具有给定姓氏的所有员工时应遵循的过程。在此示例中，我们要在 Sales 部门中查找姓氏为 Jones 的所有员工：</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值“Sales”和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值“Jones”检索索引实体。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值“Sales”和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值“Jones”检索索引实体。</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>分析 EmployeeIDs 字段中的员工 ID 列表。</source>
          <target state="new">分析 EmployeeIDs 字段中的员工 ID 列表。</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>如果你需要有关其中每个员工的其他信息（例如其电子邮件地址），请使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值“Sales”和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值从你在步骤 2 中获得的员工列表中检索每个员工实体。</source>
          <target state="new">如果你需要有关其中每个员工的其他信息（例如其电子邮件地址），请使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值“Sales”和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值从你在步骤 2 中获得的员工列表中检索每个员工实体。</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>选项 #3：</source>
          <target state="new">选项 #3：</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>在不同分区或表中创建索引实体</source>
          <target state="new">在不同分区或表中创建索引实体</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>对于第三个选项，请使用存储以下数据的索引实体：</source>
          <target state="new">对于第三个选项，请使用存储以下数据的索引实体：</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>EmployeeIDs<ept id="p1">**</ept> 属性包含姓氏存储在 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 中的员工的员工 ID 列表。</source>
          <target state="new"><bpt id="p1">**</bpt>EmployeeIDs<ept id="p1">**</ept> 属性包含姓氏存储在 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 中的员工的员工 ID 列表。</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>使用第三个选项时，不能使用 EGT 来保持一致性，因为索引实体位于与员工实体不同的分区中。你应确保索引实体与员工实体是最终一致的。</source>
          <target state="new">使用第三个选项时，不能使用 EGT 来保持一致性，因为索引实体位于与员工实体不同的分区中。你应确保索引实体与员工实体是最终一致的。</target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>当决定如何实现此模式时，考虑以下几点：</source>
          <target state="new">当决定如何实现此模式时，考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>此解决方案要求至少两个查询来检索匹配实体：一个用于查询索引实体以获取 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值的列表，然后查询以检索列表中的各个实体。</source>
          <target state="new">此解决方案要求至少两个查询来检索匹配实体：一个用于查询索引实体以获取 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值的列表，然后查询以检索列表中的各个实体。</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>鉴于单个实体最大为 1 MB，解决方案中的选项 #2 和选项 #3 假定任何给定姓氏的员工 ID 列表从不会大于 1 MB。如果员工 ID 列表有可能大于 1 MB，请使用选项 #1 并将索引数据存储在 blob 存储中。</source>
          <target state="new">鉴于单个实体最大为 1 MB，解决方案中的选项 #2 和选项 #3 假定任何给定姓氏的员工 ID 列表从不会大于 1 MB。如果员工 ID 列表有可能大于 1 MB，请使用选项 #1 并将索引数据存储在 blob 存储中。</target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>如果使用选项 #2 （使用 EGT 处理员工添加和删除，以及员工姓氏的更改），则必须评估事务量是否将接近给定分区的可伸缩性限制。如果出现这种情况，应考虑最终一致的解决方案（#1 选项或选项 #3），即使用队列来处理更新请求并使你能够从员工实体将索引实体存储在单独的分区中。</source>
          <target state="new">如果使用选项 #2 （使用 EGT 处理员工添加和删除，以及员工姓氏的更改），则必须评估事务量是否将接近给定分区的可伸缩性限制。如果出现这种情况，应考虑最终一致的解决方案（#1 选项或选项 #3），即使用队列来处理更新请求并使你能够从员工实体将索引实体存储在单独的分区中。</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>选项 #2 该解决方案中假定你想要通过姓氏查找某个部门内的员工：例如，你想要检索销售部门姓氏为 Jones 的员工列表。如果想要能够查找整个单位内姓氏为 Jones 的所有员工，请使用选项 #1 或选项 #3。</source>
          <target state="new">选项 #2 该解决方案中假定你想要通过姓氏查找某个部门内的员工：例如，你想要检索销售部门姓氏为 Jones 的员工列表。如果想要能够查找整个单位内姓氏为 Jones 的所有员工，请使用选项 #1 或选项 #3。</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>可以实现基于队列的解决方案，其提供最终一致性（有关详细信息，请参阅<bpt id="p1">[</bpt>最终一致的事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept>）。</source>
          <target state="new">可以实现基于队列的解决方案，其提供最终一致性（有关详细信息，请参阅<bpt id="p1">[</bpt>最终一致的事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept>）。</target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>当你要查找所有共享一个公用属性值的实体集（如姓氏为 Jones 的所有员工）时，请使用此模式。</source>
          <target state="new">当你要查找所有共享一个公用属性值的实体集（如姓氏为 Jones 的所有员工）时，请使用此模式。</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>实现此模式时，也可能涉及以下模式和指南：</source>
          <target state="new">实现此模式时，也可能涉及以下模式和指南：</target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>复合键模式</source>
          <target state="new">复合键模式</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>最终一致的事务模式</source>
          <target state="new">最终一致的事务模式</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>实体组事务</source>
          <target state="new">实体组事务</target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>与异类实体类型协作</source>
          <target state="new">与异类实体类型协作</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="denormalization-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 非规范化模式</source>
          <target state="new"><ph id="ph1">&lt;a id="denormalization-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 非规范化模式</target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>将相关数据组合在一起放置在单个实体中，使你能够使用单个点查询检索所有所需的数据。</source>
          <target state="new">将相关数据组合在一起放置在单个实体中，使你能够使用单个点查询检索所有所需的数据。</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>在关系数据库中，你通常会规范化数据以消除从多个表中检索数据的查询产生的重复项。如果你规范化 Azure 表中的数据，则必须从客户端到服务器进行多次往返才能检索相关数据。例如，使用下面所示的表结构需要两次往返，才能检索某个部门的详细信息：一次用于提取包括经理 ID 的部门实体，然后另一次请求提取员工实体中的经理详细信息。</source>
          <target state="new">在关系数据库中，你通常会规范化数据以消除从多个表中检索数据的查询产生的重复项。如果你规范化 Azure 表中的数据，则必须从客户端到服务器进行多次往返才能检索相关数据。例如，使用下面所示的表结构需要两次往返，才能检索某个部门的详细信息：一次用于提取包括经理 ID 的部门实体，然后另一次请求提取员工实体中的经理详细信息。</target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>不是将数据存储在两个不同的实体中，而是对数据进行反规范化，并在部门实体中保留经理详细信息的副本。例如：</source>
          <target state="new">不是将数据存储在两个不同的实体中，而是对数据进行反规范化，并在部门实体中保留经理详细信息的副本。例如：</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>通过使用这些属性存储部门实体，你现在可以使用点查询检索有关某个部门的所有所需详细信息。</source>
          <target state="new">通过使用这些属性存储部门实体，你现在可以使用点查询检索有关某个部门的所有所需详细信息。</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>将一些数据存储两次会有一些相关的成本开销。性能优势（由于向存储服务发生的请求数减少而产生）的重要性通常高于存储成本的轻微增长（并且通过减少提取某个部门的详细信息时所需的事务数可以部分抵消这一开销）。</source>
          <target state="new">将一些数据存储两次会有一些相关的成本开销。性能优势（由于向存储服务发生的请求数减少而产生）的重要性通常高于存储成本的轻微增长（并且通过减少提取某个部门的详细信息时所需的事务数可以部分抵消这一开销）。</target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>你必须维护存储经理相关信息的两个实体的一致性。你可以通过使用 EGT 在单个原子事务中更新多个实体来处理一致性问题：在这种情况下，部门经理所在的部门实体和员工实体存储在同一个分区中。</source>
          <target state="new">你必须维护存储经理相关信息的两个实体的一致性。你可以通过使用 EGT 在单个原子事务中更新多个实体来处理一致性问题：在这种情况下，部门经理所在的部门实体和员工实体存储在同一个分区中。</target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>当你经常需要查找相关信息时，请使用此模式。此模式减少了客户端要检索它所需的数据必须执行的查询数。</source>
          <target state="new">当你经常需要查找相关信息时，请使用此模式。此模式减少了客户端要检索它所需的数据必须执行的查询数。</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>实现此模式时，也可能涉及以下模式和指南：</source>
          <target state="new">实现此模式时，也可能涉及以下模式和指南：</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>复合键模式</source>
          <target state="new">复合键模式</target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>实体组事务</source>
          <target state="new">实体组事务</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>与异类实体类型协作</source>
          <target state="new">与异类实体类型协作</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="compound-key-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 复合键模式</source>
          <target state="new"><ph id="ph1">&lt;a id="compound-key-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 复合键模式</target>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>使用复合 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值可让客户端使用单个点查询查找相关数据。</source>
          <target state="new">使用复合 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值可让客户端使用单个点查询查找相关数据。</target>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>在关系数据库中，很自然会在查询中使用联接以便在单个查询中向客户端返回相关的数据片段。例如，你可能会使用员工 ID 来查找包含该员工的绩效和评价数据的相关实体的列表。</source>
          <target state="new">在关系数据库中，很自然会在查询中使用联接以便在单个查询中向客户端返回相关的数据片段。例如，你可能会使用员工 ID 来查找包含该员工的绩效和评价数据的相关实体的列表。</target>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>假定你使用以下结构在表服务中存储员工实体：</source>
          <target state="new">假定你使用以下结构在表服务中存储员工实体：</target>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>你还需要存储有关员工为你组织工作的每年的评价和绩效的历史数据，并且你需要能够按年份访问此信息。一种选择是创建另一个表，该表存储具有以下结构的实体：</source>
          <target state="new">你还需要存储有关员工为你组织工作的每年的评价和绩效的历史数据，并且你需要能够按年份访问此信息。一种选择是创建另一个表，该表存储具有以下结构的实体：</target>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>请注意，使用此方法时，你可能会决定在新实体中重复一些信息（如名字和姓氏），以便可以使用单个请求检索你的数据。但是，你无法保持强一致性，因为你不能使用 EGT 以原子方式更新这两个实体。</source>
          <target state="new">请注意，使用此方法时，你可能会决定在新实体中重复一些信息（如名字和姓氏），以便可以使用单个请求检索你的数据。但是，你无法保持强一致性，因为你不能使用 EGT 以原子方式更新这两个实体。</target>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>在原始表中使用具有以下结构的实体存储新的实体类型：</source>
          <target state="new">在原始表中使用具有以下结构的实体存储新的实体类型：</target>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>请注意，<bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 现在作为复合键的方式（由员工 ID 和评价数据的年份组成），使用它只需针对单个实体发出单个请求，即可检索员工的绩效和评价数据。</source>
          <target state="new">请注意，<bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 现在作为复合键的方式（由员工 ID 和评价数据的年份组成），使用它只需针对单个实体发出单个请求，即可检索员工的绩效和评价数据。</target>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>下面的示例概述了如何检索特定员工的所有评价数据（如 Sales 部门中的员工 000123）：</source>
          <target state="new">下面的示例概述了如何检索特定员工的所有评价数据（如 Sales 部门中的员工 000123）：</target>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>$filter=(PartitionKey eq 'Sales') and (RowKey ge 'empid\_000123') and (RowKey lt 'empid\_000124')&amp;$select=RowKey,Manager Rating,Peer Rating,Comments</source>
          <target state="new">$filter=(PartitionKey eq 'Sales') and (RowKey ge 'empid\_000123') and (RowKey lt 'empid\_000124')&amp;$select=RowKey,Manager Rating,Peer Rating,Comments</target>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>应使用适当的分隔符，以便可轻松地分析 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值：例如 <bpt id="p2">**</bpt>000123_2012<ept id="p2">**</ept>。</source>
          <target state="new">应使用适当的分隔符，以便可轻松地分析 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值：例如 <bpt id="p2">**</bpt>000123_2012<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>你也将此实体存储在与包含同一员工的相关数据的其他实体在同一分区中，这意味着你可以使用 EGT 来维护强一致性。</source>
          <target state="new">你也将此实体存储在与包含同一员工的相关数据的其他实体在同一分区中，这意味着你可以使用 EGT 来维护强一致性。</target>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>你应考虑将查询数据的频率，以确定此模式是否合适。例如，如果你不经常访问评价数据但经常访问主要员工数据，则应将它们保存为不同的实体。</source>
          <target state="new">你应考虑将查询数据的频率，以确定此模式是否合适。例如，如果你不经常访问评价数据但经常访问主要员工数据，则应将它们保存为不同的实体。</target>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>当你需要存储一个或多个经常查询的相关实体时，请使用此模式。</source>
          <target state="new">当你需要存储一个或多个经常查询的相关实体时，请使用此模式。</target>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>实体组事务</source>
          <target state="new">实体组事务</target>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>处理异类实体类型</source>
          <target state="new">处理异类实体类型</target>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>最终一致的事务模式</source>
          <target state="new">最终一致的事务模式</target>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="log-tail-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 记录结尾模式</source>
          <target state="new"><ph id="ph1">&lt;a id="log-tail-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 记录结尾模式</target>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>通过使用以日期时间倒序排序的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值检索最近添加到分区中的 <bpt id="p2">*</bpt>n<ept id="p2">*</ept> 个实体。</source>
          <target state="new">通过使用以日期时间倒序排序的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值检索最近添加到分区中的 <bpt id="p2">*</bpt>n<ept id="p2">*</ept> 个实体。</target>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>一个常见的需求是能够检索最近创建的实体，例如某个员工提交的最近 10 个费用报销单。表查询支持 <bpt id="p1">**</bpt>$top<ept id="p1">**</ept> 查询操作以返回一个集中的前 n 个实体：没有等效的查询操作可返回一个集中的最后 <bpt id="p2">*</bpt>n<ept id="p2">*</ept> 个实体。</source>
          <target state="new">一个常见的需求是能够检索最近创建的实体，例如某个员工提交的最近 10 个费用报销单。表查询支持 <bpt id="p1">**</bpt>$top<ept id="p1">**</ept> 查询操作以返回一个集中的前 n 个实体：没有等效的查询操作可返回一个集中的最后 <bpt id="p2">*</bpt>n<ept id="p2">*</ept> 个实体。</target>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>使用自然地以日期/时间倒序排序的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 存储实体，通过使用这种方法，最新的条目将始终为表中的第一个条目。</source>
          <target state="new">使用自然地以日期/时间倒序排序的 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 存储实体，通过使用这种方法，最新的条目将始终为表中的第一个条目。</target>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>例如，若要能够检索某个员工提交的最近十个费用报销单，可以使用从当前日期/时间派生的反向时点值。下面的 C# 代码示例显示了一种为 RowKey 创建合适的“反向时点”值的方法，使 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 按从最新到最旧排序：</source>
          <target state="new">例如，若要能够检索某个员工提交的最近十个费用报销单，可以使用从当前日期/时间派生的反向时点值。下面的 C# 代码示例显示了一种为 RowKey 创建合适的“反向时点”值的方法，使 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 按从最新到最旧排序：</target>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>你可以使用以下代码恢复日期时间值：</source>
          <target state="new">你可以使用以下代码恢复日期时间值：</target>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>表查询如下所示：</source>
          <target state="new">表查询如下所示：</target>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>必须使用前导零填充反向时点值，以确保字符串值按预期方式排序。</source>
          <target state="new">必须使用前导零填充反向时点值，以确保字符串值按预期方式排序。</target>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>必须要注意分区级别的可伸缩性目标。请注意不要创建热点分区。</source>
          <target state="new">必须要注意分区级别的可伸缩性目标。请注意不要创建热点分区。</target>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>当你需要按反向日期/时间顺序访问实体或需要访问最近一次添加的实体时，请使用此模式。</source>
          <target state="new">当你需要按反向日期/时间顺序访问实体或需要访问最近一次添加的实体时，请使用此模式。</target>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>前置/后置反模式</source>
          <target state="new">前置/后置反模式</target>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>检索实体</source>
          <target state="new">检索实体</target>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="high-volume-delete-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 大量删除模式</source>
          <target state="new"><ph id="ph1">&lt;a id="high-volume-delete-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 大量删除模式</target>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>通过将要同时删除的所有实体都存储在它们自己的单独表中来实现删除大量实体；通过删除表来删除这些实体。</source>
          <target state="new">通过将要同时删除的所有实体都存储在它们自己的单独表中来实现删除大量实体；通过删除表来删除这些实体。</target>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>许多应用程序会删除不再需要向客户端应用程序提供或已归档到其他存储介质的旧数据。通常按日期标识此类数据：例如，你需要删除 60 天以前的所有登录请求的记录。</source>
          <target state="new">许多应用程序会删除不再需要向客户端应用程序提供或已归档到其他存储介质的旧数据。通常按日期标识此类数据：例如，你需要删除 60 天以前的所有登录请求的记录。</target>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>一个可能的设计是使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中登录请求的日期和时间：</source>
          <target state="new">一个可能的设计是使用 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 中登录请求的日期和时间：</target>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>此方法可避免产生分区热点，因为应用程序可以在一个单独的分区中插入和删除每个用户的登录实体。但是，如果你有大量实体，此方法可能成本高昂且非常耗时，因为你首先需要执行表扫描以便确定所有要删除的实体，然后必须删除每个旧实体。请注意，你可以通过在 EGT 中成批处理多个删除请求来减少到服务器的往返次数。</source>
          <target state="new">此方法可避免产生分区热点，因为应用程序可以在一个单独的分区中插入和删除每个用户的登录实体。但是，如果你有大量实体，此方法可能成本高昂且非常耗时，因为你首先需要执行表扫描以便确定所有要删除的实体，然后必须删除每个旧实体。请注意，你可以通过在 EGT 中成批处理多个删除请求来减少到服务器的往返次数。</target>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>对每天的登录尝试使用一个单独的表。在插入实体时可以使用上面的实体设计避免产生热点，而删除旧实体现在只是每天删除一个表的问题（单个存储操作），而不用每天查找并删除成百上千个单个登录实体。</source>
          <target state="new">对每天的登录尝试使用一个单独的表。在插入实体时可以使用上面的实体设计避免产生热点，而删除旧实体现在只是每天删除一个表的问题（单个存储操作），而不用每天查找并删除成百上千个单个登录实体。</target>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>你的设计支持应用程序将使用数据的其他方式（如查找特定实体、与其他数据链接或生成聚合信息）吗？</source>
          <target state="new">你的设计支持应用程序将使用数据的其他方式（如查找特定实体、与其他数据链接或生成聚合信息）吗？</target>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>插入新实体时，你的设计会避免产生热点吗？</source>
          <target state="new">插入新实体时，你的设计会避免产生热点吗？</target>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>如果要在删除某个表后重用同一表名，应会出现延迟。最好始终使用唯一表名。</source>
          <target state="new">如果要在删除某个表后重用同一表名，应会出现延迟。最好始终使用唯一表名。</target>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>当你首次使用一个新表时，应会有某种限制，因为在此期间表服务将了解访问模式，并在节点上分配分区。你应考虑需要创建新表的频率。</source>
          <target state="new">当你首次使用一个新表时，应会有某种限制，因为在此期间表服务将了解访问模式，并在节点上分配分区。你应考虑需要创建新表的频率。</target>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>当你有大量必须同时删除的实体时，请使用此模式。</source>
          <target state="new">当你有大量必须同时删除的实体时，请使用此模式。</target>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>实体组事务</source>
          <target state="new">实体组事务</target>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>修改实体</source>
          <target state="new">修改实体</target>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="data-series-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 数据系列模式</source>
          <target state="new"><ph id="ph1">&lt;a id="data-series-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 数据系列模式</target>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。</source>
          <target state="new">将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。</target>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>一个常见方案用于要存储一系列数据的应用程序，该应用程序通常需要一次检索所有这些数据。例如，你的应用程序可能会记录每个员工每小时发送的 IM 消息数，然后使用此信息来绘制每个用户在过去 24 小时内发送的消息数。一个设计可以是为每个员工存储 24 个实体：</source>
          <target state="new">一个常见方案用于要存储一系列数据的应用程序，该应用程序通常需要一次检索所有这些数据。例如，你的应用程序可能会记录每个员工每小时发送的 IM 消息数，然后使用此信息来绘制每个用户在过去 24 小时内发送的消息数。一个设计可以是为每个员工存储 24 个实体：</target>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>利用此设计，在应用程序需要更新消息计数值时，你可以方便地找到并更新要为每个员工更新的实体。但是，为了检索信息以绘制过去 24 小时的活动图，你必须检索 24 个实体。</source>
          <target state="new">利用此设计，在应用程序需要更新消息计数值时，你可以方便地找到并更新要为每个员工更新的实体。但是，为了检索信息以绘制过去 24 小时的活动图，你必须检索 24 个实体。</target>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>使用以下设计，其中使用单独的属性来存储每小时的消息计数：</source>
          <target state="new">使用以下设计，其中使用单独的属性来存储每小时的消息计数：</target>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>利用此设计，你可以使用合并操作来更新某个员工在特定小时内的消息计数。现在，你可以使用对单个实体的请求检索绘制图表所需的所有信息。</source>
          <target state="new">利用此设计，你可以使用合并操作来更新某个员工在特定小时内的消息计数。现在，你可以使用对单个实体的请求检索绘制图表所需的所有信息。</target>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>当决定如何实现此模式时要考虑以下几点：</source>
          <target state="new">当决定如何实现此模式时要考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>如果你的完成数据系列不适合单个实体（实体可具有最多 252 属性），请使用 Blob 等一个备用数据存储区。</source>
          <target state="new">如果你的完成数据系列不适合单个实体（实体可具有最多 252 属性），请使用 Blob 等一个备用数据存储区。</target>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>如果你有多个客户端同时更新实体，你需要使用 <bpt id="p1">**</bpt>ETag<ept id="p1">**</ept> 来实现开放式并发。如果你有许多客户端，则可能会遇到大量争用。</source>
          <target state="new">如果你有多个客户端同时更新实体，你需要使用 <bpt id="p1">**</bpt>ETag<ept id="p1">**</ept> 来实现开放式并发。如果你有许多客户端，则可能会遇到大量争用。</target>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>当你需要更新和检索与单个实体关联的数据序列时，请使用此模式。</source>
          <target state="new">当你需要更新和检索与单个实体关联的数据序列时，请使用此模式。</target>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>大实体模式</source>
          <target state="new">大实体模式</target>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>合并或替换</source>
          <target state="new">合并或替换</target>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>最终一致的事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept>（如果将数据序列存储在 Blob）</source>
          <target state="new"><bpt id="p1">[</bpt>最终一致的事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept>（如果将数据序列存储在 Blob）</target>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="wide-entities-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 宽实体模式</source>
          <target state="new"><ph id="ph1">&lt;a id="wide-entities-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 宽实体模式</target>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>使用多个物理实体来存储具有多于 252 个属性的逻辑实体。</source>
          <target state="new">使用多个物理实体来存储具有多于 252 个属性的逻辑实体。</target>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>单个实体不能具有超过 252 个的属性（不包括必需的系统属性），并且总共不能存储超过 1 MB 的数据。在关系数据库中，在遇到行大小限制时，通常可通过添加一个新表并在二者之间强制实施 1 对 1 关系来避开行大小的任何限制。</source>
          <target state="new">单个实体不能具有超过 252 个的属性（不包括必需的系统属性），并且总共不能存储超过 1 MB 的数据。在关系数据库中，在遇到行大小限制时，通常可通过添加一个新表并在二者之间强制实施 1 对 1 关系来避开行大小的任何限制。</target>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>使用表服务，你可以存储多个实体来表示具有多于 252 个属性的单个大型业务对象。例如，如果要存储每个员工在过去 365 天内发送的的 IM 消息计数，你可以使用以下设计（该设计使用两个具有不同架构的实体）：</source>
          <target state="new">使用表服务，你可以存储多个实体来表示具有多于 252 个属性的单个大型业务对象。例如，如果要存储每个员工在过去 365 天内发送的的 IM 消息计数，你可以使用以下设计（该设计使用两个具有不同架构的实体）：</target>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>如果你需要进行的更改需要更新这两个实体以使它们保持彼此同步，则可以使用 EGT。否则，可以使用单个合并操作来更新特定天的消息计数。若要检索单个员工的所有数据，必须检索这两个实体，这可以通过同时使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值的两个有效请求来实现。</source>
          <target state="new">如果你需要进行的更改需要更新这两个实体以使它们保持彼此同步，则可以使用 EGT。否则，可以使用单个合并操作来更新特定天的消息计数。若要检索单个员工的所有数据，必须检索这两个实体，这可以通过同时使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值的两个有效请求来实现。</target>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>检索完整的逻辑实体至少涉及两个存储事务：其中一个用于检索每个物理实体。</source>
          <target state="new">检索完整的逻辑实体至少涉及两个存储事务：其中一个用于检索每个物理实体。</target>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>当需要存储的实体的大小或属性数超出表服务中单个实体的限制时，请使用此模式。</source>
          <target state="new">当需要存储的实体的大小或属性数超出表服务中单个实体的限制时，请使用此模式。</target>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>实体组事务</source>
          <target state="new">实体组事务</target>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>合并或替换</source>
          <target state="new">合并或替换</target>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="large-entities-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 大实体模式</source>
          <target state="new"><ph id="ph1">&lt;a id="large-entities-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 大实体模式</target>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>使用 blob 存储来存储大属性值。</source>
          <target state="new">使用 blob 存储来存储大属性值。</target>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>单个实体不能存储总共超过 1 MB 的数据。如果一个或多个属性存储的值导致实体的总大小超出此值，则无法在表服务中存储整个实体。</source>
          <target state="new">单个实体不能存储总共超过 1 MB 的数据。如果一个或多个属性存储的值导致实体的总大小超出此值，则无法在表服务中存储整个实体。</target>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>如果由于一个或多个属性包含大量数据而导致实体的大小超过 1 MB，可以将数据存储在 Blob 服务中，然后在实体的属性中存储 blob 的地址。例如，你可以在 Blob 存储中存储员工的照片，然后在员工实体的 <bpt id="p1">**</bpt>Photo<ept id="p1">**</ept> 属性中存储指向照片的链接：</source>
          <target state="new">如果由于一个或多个属性包含大量数据而导致实体的大小超过 1 MB，可以将数据存储在 Blob 服务中，然后在实体的属性中存储 blob 的地址。例如，你可以在 Blob 存储中存储员工的照片，然后在员工实体的 <bpt id="p1">**</bpt>Photo<ept id="p1">**</ept> 属性中存储指向照片的链接：</target>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>若要维护表服务中的实体与 Blob 服务中的数据之间的最终一致性，请使用<bpt id="p1">[</bpt>最终一致事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept>。</source>
          <target state="new">若要维护表服务中的实体与 Blob 服务中的数据之间的最终一致性，请使用<bpt id="p1">[</bpt>最终一致事务模式<ept id="p1">](#eventually-consistent-transactions-pattern)</ept>。</target>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>检索完整实体至少涉及两个存储事务：一个用于检索实体，另一个用于检索 blob 数据。</source>
          <target state="new">检索完整实体至少涉及两个存储事务：一个用于检索实体，另一个用于检索 blob 数据。</target>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>当需要存储的实体大小超出表服务中单个实体的限制时，请使用此模式。</source>
          <target state="new">当需要存储的实体大小超出表服务中单个实体的限制时，请使用此模式。</target>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>最终一致的事务模式</source>
          <target state="new">最终一致的事务模式</target>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>宽实体模式</source>
          <target state="new">宽实体模式</target>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="prepend-append-anti-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 前置/后置反模式</source>
          <target state="new"><ph id="ph1">&lt;a id="prepend-append-anti-pattern"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 前置/后置反模式</target>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>当你需要进行大量插入操作时，可通过将插入操作分散到多个分区，来提高可伸缩性。</source>
          <target state="new">当你需要进行大量插入操作时，可通过将插入操作分散到多个分区，来提高可伸缩性。</target>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>将实体前置或后置于存储实体通常会导致应用程序将新实体添加到分区序列中的第一个分区或最后一个分区。在这种情况下，在任何给定时间所有插入都发生在同一个分区中，从而产生了热点，使表服务无法将插入负载平衡到多个节点，可能会导致应用程序命中分区的可伸缩性目标。例如，如果你有一个应用程序记录员工对网络和资源的访问，则在事务量达到单个分区的可伸缩性目标时，如下所示的实体结构可能会导致当前小时的分区成为热点：</source>
          <target state="new">将实体前置或后置于存储实体通常会导致应用程序将新实体添加到分区序列中的第一个分区或最后一个分区。在这种情况下，在任何给定时间所有插入都发生在同一个分区中，从而产生了热点，使表服务无法将插入负载平衡到多个节点，可能会导致应用程序命中分区的可伸缩性目标。例如，如果你有一个应用程序记录员工对网络和资源的访问，则在事务量达到单个分区的可伸缩性目标时，如下所示的实体结构可能会导致当前小时的分区成为热点：</target>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>以下替代实体结构在应用程序记录事件时可避免在任何特定分区上产生热点：</source>
          <target state="new">以下替代实体结构在应用程序记录事件时可避免在任何特定分区上产生热点：</target>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>通过此示例，请注意 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 如何作为复合键。<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 使用部门和员工 ID 将日志记录分布到多个分区。</source>
          <target state="new">通过此示例，请注意 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 如何作为复合键。<bpt id="p3">**</bpt>PartitionKey<ept id="p3">**</ept> 使用部门和员工 ID 将日志记录分布到多个分区。</target>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>在决定如何实现此模式时，请考虑以下几点：</source>
          <target state="new">在决定如何实现此模式时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>可避免在高效插入时产生热分区的替代键结构是否支持客户端应用程序进行的查询？</source>
          <target state="new">可避免在高效插入时产生热分区的替代键结构是否支持客户端应用程序进行的查询？</target>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>预期的事务量是否意味着可能会达到单个分区的可伸缩性目标而受存储服务限制？</source>
          <target state="new">预期的事务量是否意味着可能会达到单个分区的可伸缩性目标而受存储服务限制？</target>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>何时使用此模式</source>
          <target state="new">何时使用此模式</target>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>当你访问热分区时，如果事务量可能会导致受存储服务限制，请避免使用前置/后置反模式。</source>
          <target state="new">当你访问热分区时，如果事务量可能会导致受存储服务限制，请避免使用前置/后置反模式。</target>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>相关模式和指南</source>
          <target state="new">相关模式和指南</target>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>实现此模式时，以下模式和指南也可能相关：</source>
          <target state="new">实现此模式时，以下模式和指南也可能相关：</target>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>复合键模式</source>
          <target state="new">复合键模式</target>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>记录结尾模式</source>
          <target state="new">记录结尾模式</target>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>修改实体</source>
          <target state="new">修改实体</target>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>日志数据反模式</source>
          <target state="new">日志数据反模式</target>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>通常，应使用 Blob 服务（而不是表服务）来存储日志数据。</source>
          <target state="new">通常，应使用 Blob 服务（而不是表服务）来存储日志数据。</target>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>上下文和问题</source>
          <target state="new">上下文和问题</target>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>日志数据的一个常见用例是检索针对特定日期/时间范围选择的日志条目：例如，你想要查找应用程序在特定日期的 15:04 和 15:06 之间记录的所有错误和关键消息。你不希望使用日志消息的日期和时间来确定将日志实体保存到的分区：该操作会导致热分区，因为在任何给定时间，所有日志实体都共享同一 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值（请参阅<bpt id="p2">[</bpt>前置/后置反模式<ept id="p2">](#prepend-append-anti-pattern)</ept>部分）例如，日志消息的以下实体架构会导致热分区，因为应用程序会将当前日期小时的所有日志消息都写入到该分区：</source>
          <target state="new">日志数据的一个常见用例是检索针对特定日期/时间范围选择的日志条目：例如，你想要查找应用程序在特定日期的 15:04 和 15:06 之间记录的所有错误和关键消息。你不希望使用日志消息的日期和时间来确定将日志实体保存到的分区：该操作会导致热分区，因为在任何给定时间，所有日志实体都共享同一 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值（请参阅<bpt id="p2">[</bpt>前置/后置反模式<ept id="p2">](#prepend-append-anti-pattern)</ept>部分）例如，日志消息的以下实体架构会导致热分区，因为应用程序会将当前日期小时的所有日志消息都写入到该分区：</target>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>在此示例中，<bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 包括日志消息的日期和时间，以确保存储按日期/时间顺序排序的日志消息，并包括消息 ID 以防多条日志消息共享同一日期和时间。</source>
          <target state="new">在此示例中，<bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 包括日志消息的日期和时间，以确保存储按日期/时间顺序排序的日志消息，并包括消息 ID 以防多条日志消息共享同一日期和时间。</target>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>另一种方法是使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>，它可确保应用程序在一组分区中写入消息。例如，如果日志消息的源提供了一种方法可将消息分布到多个分区，则可以使用以下实体架构：</source>
          <target state="new">另一种方法是使用 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>，它可确保应用程序在一组分区中写入消息。例如，如果日志消息的源提供了一种方法可将消息分布到多个分区，则可以使用以下实体架构：</target>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>但是，此架构的问题是若要检索特定时间跨度的所有日志消息，必须搜索表中的每个分区。</source>
          <target state="new">但是，此架构的问题是若要检索特定时间跨度的所有日志消息，必须搜索表中的每个分区。</target>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>解决方案</source>
          <target state="new">解决方案</target>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>前一部分重点介绍了尝试使用表服务来存储日志条目的问题，并建议了两个并不令人满意的设计。一种解决方案会导致热分区并具有在写入日志消息时性能不佳的风险；另一种解决方案由于需要扫描表中的每个分区才能检索特定时间跨度的日志消息而导致查询性能不佳。对于此类方案，Blob 存储提供了更好的解决方案，这就是 Azure Storage Analytics 存储它收集的日志数据的方式。</source>
          <target state="new">前一部分重点介绍了尝试使用表服务来存储日志条目的问题，并建议了两个并不令人满意的设计。一种解决方案会导致热分区并具有在写入日志消息时性能不佳的风险；另一种解决方案由于需要扫描表中的每个分区才能检索特定时间跨度的日志消息而导致查询性能不佳。对于此类方案，Blob 存储提供了更好的解决方案，这就是 Azure Storage Analytics 存储它收集的日志数据的方式。</target>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>本部分通过概述 Storage Analytics 如何在 blob 存储中存储日志数据说明了此方法如何存储通常按范围查询的数据。</source>
          <target state="new">本部分通过概述 Storage Analytics 如何在 blob 存储中存储日志数据说明了此方法如何存储通常按范围查询的数据。</target>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Storage Analytics 以带分隔符格式将日志消息存储在多个 blob 中。使用带分隔符的格式，客户端应用程序可以轻松地分析日志消息中的数据。</source>
          <target state="new">Storage Analytics 以带分隔符格式将日志消息存储在多个 blob 中。使用带分隔符的格式，客户端应用程序可以轻松地分析日志消息中的数据。</target>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Storage Analytics 使用 blob 的命名约定，使你可以找到包含要搜索的日志消息的一个或多个 blob。例如，名为“queue/2014/07/31/1800/000001.log”的 blob 包含与从 2014 年 7 月 31 日 18:00 开始的 1 小时的队列服务相关的日志消息。“000001”指示这是此期间的第一个日志文件。Storage Analytics 还会记录该文件中存储的第一条和最后一条日志消息的时间戳作为 blob 的元数据的一部分。使用 blob 存储的 API 可以根据名称前缀在容器中查找 blob：若要查找包含从 18:00 开始的 1 小时的队列日志数据的所有 blob，可以使用前缀“queue/2014/07/31/1800”。</source>
          <target state="new">Storage Analytics 使用 blob 的命名约定，使你可以找到包含要搜索的日志消息的一个或多个 blob。例如，名为“queue/2014/07/31/1800/000001.log”的 blob 包含与从 2014 年 7 月 31 日 18:00 开始的 1 小时的队列服务相关的日志消息。“000001”指示这是此期间的第一个日志文件。Storage Analytics 还会记录该文件中存储的第一条和最后一条日志消息的时间戳作为 blob 的元数据的一部分。使用 blob 存储的 API 可以根据名称前缀在容器中查找 blob：若要查找包含从 18:00 开始的 1 小时的队列日志数据的所有 blob，可以使用前缀“queue/2014/07/31/1800”。</target>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Storage Analytics 在内部缓存日志消息，然后定期更新相应的 blob 或使用最新一批日志条目创建新的 blob。这将减少它必须执行的写入 blob 服务的次数。</source>
          <target state="new">Storage Analytics 在内部缓存日志消息，然后定期更新相应的 blob 或使用最新一批日志条目创建新的 blob。这将减少它必须执行的写入 blob 服务的次数。</target>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>如果你要在自己的应用程序中实现类似的解决方案，则必须考虑如何管理可靠性（在事件发生时向 blob 存储写入每个日志条目）与成本和可伸缩性（在应用程序中缓冲更新，然后批量将其写入到 blob 存储）之间的权衡。</source>
          <target state="new">如果你要在自己的应用程序中实现类似的解决方案，则必须考虑如何管理可靠性（在事件发生时向 blob 存储写入每个日志条目）与成本和可伸缩性（在应用程序中缓冲更新，然后批量将其写入到 blob 存储）之间的权衡。</target>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>问题和注意事项</source>
          <target state="new">问题和注意事项</target>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>在决定如何存储日志数据时，请考虑以下几点：</source>
          <target state="new">在决定如何存储日志数据时，请考虑以下几点：</target>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>如果你创建了可避免潜在热分区的表设计，则可能会发现无法高效地访问日志数据。</source>
          <target state="new">如果你创建了可避免潜在热分区的表设计，则可能会发现无法高效地访问日志数据。</target>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>若要处理日志数据，客户端通常需要加载多个记录。</source>
          <target state="new">若要处理日志数据，客户端通常需要加载多个记录。</target>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>虽然日志数据通常结构化，但 blob 存储可能会是更好的解决方案。</source>
          <target state="new">虽然日志数据通常结构化，但 blob 存储可能会是更好的解决方案。</target>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>实现注意事项</source>
          <target state="new">实现注意事项</target>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>本部分讨论在实现前面的部分中所述的模式时，需要牢记的一些注意事项。本部分的大部分内容使用以 C# 编写的示例，其中使用了存储客户端库（在撰写本文时为版本 4.3.0）。</source>
          <target state="new">本部分讨论在实现前面的部分中所述的模式时，需要牢记的一些注意事项。本部分的大部分内容使用以 C# 编写的示例，其中使用了存储客户端库（在撰写本文时为版本 4.3.0）。</target>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="retrieving-entities"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 检索实体</source>
          <target state="new"><ph id="ph1">&lt;a id="retrieving-entities"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 检索实体</target>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>如<bpt id="p1">[</bpt>针对查询的设计<ept id="p1">](#design-for-querying)</ept>这部分所述，最高效的查询是点查询。但是，在某些情况下，你可能需要检索多个实体。本部分介绍使用存储客户端库检索实体的一些常用方法。</source>
          <target state="new">如<bpt id="p1">[</bpt>针对查询的设计<ept id="p1">](#design-for-querying)</ept>这部分所述，最高效的查询是点查询。但是，在某些情况下，你可能需要检索多个实体。本部分介绍使用存储客户端库检索实体的一些常用方法。</target>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="retrieving-a-single-entity-using-the-storage-client-library"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 使用存储客户端库执行点查询</source>
          <target state="new"><ph id="ph1">&lt;a id="retrieving-a-single-entity-using-the-storage-client-library"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 使用存储客户端库执行点查询</target>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>执行点查询的最简单方法是使用 <bpt id="p1">**</bpt>Retrieve<ept id="p1">**</ept> 表操作，如以下 C# 代码段中所示，该代码段检索 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 值为“Sales”并且 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值为“212”的实体：</source>
          <target state="new">执行点查询的最简单方法是使用 <bpt id="p1">**</bpt>Retrieve<ept id="p1">**</ept> 表操作，如以下 C# 代码段中所示，该代码段检索 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 值为“Sales”并且 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值为“212”的实体：</target>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>请注意此示例如何将它检索的实体要求为 <bpt id="p1">**</bpt>EmployeeEntity<ept id="p1">**</ept> 类型。</source>
          <target state="new">请注意此示例如何将它检索的实体要求为 <bpt id="p1">**</bpt>EmployeeEntity<ept id="p1">**</ept> 类型。</target>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="retrieving-multiple-entities-using-linq"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 使用 LINQ 检索多个实体</source>
          <target state="new"><ph id="ph1">&lt;a id="retrieving-multiple-entities-using-linq"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 使用 LINQ 检索多个实体</target>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>可以通过将 LINQ 与存储客户端库配合使用，并为查询指定 <bpt id="p1">**</bpt>where<ept id="p1">**</ept> 子句来检索多个实体。若要避免表扫描，应始终在 where 子句中包括 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 值，如有可能也包括 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值以避免表和分区扫描。表服务支持一组有限的比较运算符（大于、大于等于、小于、小于等于、等于和不等于）可用于 where 子句。下面的 C# 代码段在销售部门（假定 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept> 存储部门名称）中查找姓氏以“B”开头（假定 <bpt id="p5">**</bpt>PartitionKey<ept id="p5">**</ept> 存储姓氏）的所有员工：</source>
          <target state="new">可以通过将 LINQ 与存储客户端库配合使用，并为查询指定 <bpt id="p1">**</bpt>where<ept id="p1">**</ept> 子句来检索多个实体。若要避免表扫描，应始终在 where 子句中包括 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 值，如有可能也包括 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值以避免表和分区扫描。表服务支持一组有限的比较运算符（大于、大于等于、小于、小于等于、等于和不等于）可用于 where 子句。下面的 C# 代码段在销售部门（假定 <bpt id="p4">**</bpt>RowKey<ept id="p4">**</ept> 存储部门名称）中查找姓氏以“B”开头（假定 <bpt id="p5">**</bpt>PartitionKey<ept id="p5">**</ept> 存储姓氏）的所有员工：</target>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>请注意该查询如何同时指定 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 以确保更佳性能。</source>
          <target state="new">请注意该查询如何同时指定 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 以确保更佳性能。</target>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>以下代码示例演示使用 Fluent API 的等效功能（有关 Fluent API 各个方面的详细信息，请参阅<bpt id="p1">[</bpt>设计 Fluent API 的最佳实践<ept id="p1">](http://visualstudiomagazine.com/articles/2013/12/01/best-practices-for-designing-a-fluent-api.aspx)</ept>）：</source>
          <target state="new">以下代码示例演示使用 Fluent API 的等效功能（有关 Fluent API 各个方面的详细信息，请参阅<bpt id="p1">[</bpt>设计 Fluent API 的最佳实践<ept id="p1">](http://visualstudiomagazine.com/articles/2013/12/01/best-practices-for-designing-a-fluent-api.aspx)</ept>）：</target>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>该示例嵌套了多个 <bpt id="p1">**</bpt>CombineFilters<ept id="p1">**</ept> 方法以包含三个筛选条件。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>该示例嵌套了多个 <bpt id="p1">**</bpt>CombineFilters<ept id="p1">**</ept> 方法以包含三个筛选条件。</target>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>通过查询检索大量实体</source>
          <target state="new">通过查询检索大量实体</target>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>最佳查询根据 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值返回单个实体。但是，在某些情况下，你可能需要从同一个分区或者甚至从多个分区返回多个实体。</source>
          <target state="new">最佳查询根据 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值和 <bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 值返回单个实体。但是，在某些情况下，你可能需要从同一个分区或者甚至从多个分区返回多个实体。</target>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>在这种情况下，应始终充分地测试应用程序的性能。</source>
          <target state="new">在这种情况下，应始终充分地测试应用程序的性能。</target>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>针对表服务的查询一次最多可以返回 1,000 个实体，并且可以执行时间最长为五秒。如果结果集包含超过 1,000 个的实体，则当查询未在 5 秒内完成或者查询跨越分区边界时，表服务将返回一个继续标记，客户端应用程序使用该标记可以请求下一组实体。有关继续标记如何工作的详细信息，请参阅 MSDN 上的<bpt id="p1">[</bpt>查询超时和分页<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd135718.aspx)</ept>。</source>
          <target state="new">针对表服务的查询一次最多可以返回 1,000 个实体，并且可以执行时间最长为五秒。如果结果集包含超过 1,000 个的实体，则当查询未在 5 秒内完成或者查询跨越分区边界时，表服务将返回一个继续标记，客户端应用程序使用该标记可以请求下一组实体。有关继续标记如何工作的详细信息，请参阅 MSDN 上的<bpt id="p1">[</bpt>查询超时和分页<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd135718.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>如果你使用的是存储客户端库，当它从表服务返回实体时，可以自动为你处理继续标记。以下 C# 代码示例使用存储客户端库自动处理继续标记（如果表服务在响应中返回继续标记）：</source>
          <target state="new">如果你使用的是存储客户端库，当它从表服务返回实体时，可以自动为你处理继续标记。以下 C# 代码示例使用存储客户端库自动处理继续标记（如果表服务在响应中返回继续标记）：</target>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>以下 C# 代码显式处理继续标记：</source>
          <target state="new">以下 C# 代码显式处理继续标记：</target>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>通过显式使用继续标记，可以控制应用程序何时检索下一个数据段。例如，如果客户端应用程序允许用户翻阅表中存储的实体，用户可能会决定不翻阅查询检索的所有实体，因此应用程序仅当用户翻阅完当前段中的所有实体后才会使用继续标记检索下一段。此方法具有以下几个优点：</source>
          <target state="new">通过显式使用继续标记，可以控制应用程序何时检索下一个数据段。例如，如果客户端应用程序允许用户翻阅表中存储的实体，用户可能会决定不翻阅查询检索的所有实体，因此应用程序仅当用户翻阅完当前段中的所有实体后才会使用继续标记检索下一段。此方法具有以下几个优点：</target>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>它使你能够限制要从表服务中检索的数据量以及通过网络移动的数据量。</source>
          <target state="new">它使你能够限制要从表服务中检索的数据量以及通过网络移动的数据量。</target>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>它使你可以在 .NET 中执行异步 IO。</source>
          <target state="new">它使你可以在 .NET 中执行异步 IO。</target>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>它使你可以将继续标记序列化到持久存储，以便可以在应用程序崩溃时继续。</source>
          <target state="new">它使你可以将继续标记序列化到持久存储，以便可以在应用程序崩溃时继续。</target>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>继续标记通常返回包含 1,000 个实体的段，尽管它可能会更少。这也适用于你通过使用 <bpt id="p1">**</bpt>Take<ept id="p1">**</ept> 返回与查找条件匹配的前 n 个实体来限制查询返回的条目数的情况：表服务可能会返回包含少于 n 个实体的段和一个继续标记，你使用该标记可以检索剩余实体。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>继续标记通常返回包含 1,000 个实体的段，尽管它可能会更少。这也适用于你通过使用 <bpt id="p1">**</bpt>Take<ept id="p1">**</ept> 返回与查找条件匹配的前 n 个实体来限制查询返回的条目数的情况：表服务可能会返回包含少于 n 个实体的段和一个继续标记，你使用该标记可以检索剩余实体。</target>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>以下 C# 代码演示如何修改段内返回的实体数：</source>
          <target state="new">以下 C# 代码演示如何修改段内返回的实体数：</target>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="server-side-projection"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 服务器端投影</source>
          <target state="new"><ph id="ph1">&lt;a id="server-side-projection"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 服务器端投影</target>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>单个实体最多可以具有 255 个属性，并且大小最多可以为 1 MB。当你查询表并检索实体时，你可能不需要所有属性，并可以避免不必要地传输数据（以帮助减少延迟和降低成本）。你可以使用服务器端投影来只传输你需要的属性。以下示例只检索查询选择的实体的 <bpt id="p1">**</bpt>Email<ept id="p1">**</ept> 属性（与 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept>、<bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept>、<bpt id="p4">**</bpt>Timestamp<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>ETag<ept id="p5">**</ept> 一起）。</source>
          <target state="new">单个实体最多可以具有 255 个属性，并且大小最多可以为 1 MB。当你查询表并检索实体时，你可能不需要所有属性，并可以避免不必要地传输数据（以帮助减少延迟和降低成本）。你可以使用服务器端投影来只传输你需要的属性。以下示例只检索查询选择的实体的 <bpt id="p1">**</bpt>Email<ept id="p1">**</ept> 属性（与 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept>、<bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept>、<bpt id="p4">**</bpt>Timestamp<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>ETag<ept id="p5">**</ept> 一起）。</target>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>请注意如何获得 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值（即使它未包含在要检索的属性列表中）。</source>
          <target state="new">请注意如何获得 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 值（即使它未包含在要检索的属性列表中）。</target>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>修改实体</source>
          <target state="new">修改实体</target>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>使用存储客户端库可以通过插入、删除和更新实体修改存储在表服务中的实体。可以使用 EGT 将多个插入、更新和删除操作一起批量处理以减少所需的往返次数并提高解决方案的性能。</source>
          <target state="new">使用存储客户端库可以通过插入、删除和更新实体修改存储在表服务中的实体。可以使用 EGT 将多个插入、更新和删除操作一起批量处理以减少所需的往返次数并提高解决方案的性能。</target>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>请注意，存储客户端库执行 EGT 时引发的异常通常包含导致批处理失败的实体的索引。如果你正在调试使用 EGT 的代码，这非常有用。</source>
          <target state="new">请注意，存储客户端库执行 EGT 时引发的异常通常包含导致批处理失败的实体的索引。如果你正在调试使用 EGT 的代码，这非常有用。</target>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>你还应考虑你的设计如何影响客户端应用程序处理并发和更新操作的方式。</source>
          <target state="new">你还应考虑你的设计如何影响客户端应用程序处理并发和更新操作的方式。</target>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>管理并发</source>
          <target state="new">管理并发</target>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>默认情况下，表服务在单个实体级别实现针对 <bpt id="p1">**</bpt>Insert<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Merge<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept> 操作的开放式并发检查，尽管客户端可以强制表服务跳过这些检查。有关表服务如何管理并发的详细信息，请参阅 Azure Web 应用上的<bpt id="p4">[</bpt>在 Azure 存储空间中管理并发<ept id="p4">](/documentation/articles/storage-concurrency)</ept> 。</source>
          <target state="new">默认情况下，表服务在单个实体级别实现针对 <bpt id="p1">**</bpt>Insert<ept id="p1">**</ept>、<bpt id="p2">**</bpt>Merge<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept> 操作的开放式并发检查，尽管客户端可以强制表服务跳过这些检查。有关表服务如何管理并发的详细信息，请参阅 Azure Web 应用上的<bpt id="p4">[</bpt>在 Azure 存储空间中管理并发<ept id="p4">](/documentation/articles/storage-concurrency)</ept> 。</target>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="merge-or-replace"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 合并或替换</source>
          <target state="new"><ph id="ph1">&lt;a id="merge-or-replace"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 合并或替换</target>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> 类的 <bpt id="p2">**</bpt>Replace<ept id="p2">**</ept> 方法始终替换表服务中的完整实体。如果在存储实体中存在某个属性时请求中未包含该属性，则请求将从存储实体中删除该属性。除非你想要从存储实体中显式删除某一属性，否则必须在请求中包含每个属性。</source>
          <target state="new"><bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> 类的 <bpt id="p2">**</bpt>Replace<ept id="p2">**</ept> 方法始终替换表服务中的完整实体。如果在存储实体中存在某个属性时请求中未包含该属性，则请求将从存储实体中删除该属性。除非你想要从存储实体中显式删除某一属性，否则必须在请求中包含每个属性。</target>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>要更新实体时，你可以使用 <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> 类的 <bpt id="p2">**</bpt>Merge<ept id="p2">**</ept> 方法来减少你发送到表服务的数据量。<bpt id="p3">**</bpt>Merge<ept id="p3">**</ept> 方法会将存储实体的任何属性替换为请求中包含的实体的属性值，但会将请求中未包含的存储实体的任何属性保持不变。如果你使用大型实体并且只需在请求中更新少量属性，则此方法很有用。</source>
          <target state="new">要更新实体时，你可以使用 <bpt id="p1">**</bpt>TableOperation<ept id="p1">**</ept> 类的 <bpt id="p2">**</bpt>Merge<ept id="p2">**</ept> 方法来减少你发送到表服务的数据量。<bpt id="p3">**</bpt>Merge<ept id="p3">**</ept> 方法会将存储实体的任何属性替换为请求中包含的实体的属性值，但会将请求中未包含的存储实体的任何属性保持不变。如果你使用大型实体并且只需在请求中更新少量属性，则此方法很有用。</target>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>如果该实体不存在，<bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>Merge<ept id="p2">**</ept> 方法将失败。作为替代方法，你可以使用 <bpt id="p3">**</bpt>InsertOrReplace<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>InsertOrMerge<ept id="p4">**</ept> 方法，这两个方法在实体不存在时会创建一个新实体。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>如果该实体不存在，<bpt id="p1">**</bpt>Replace<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>Merge<ept id="p2">**</ept> 方法将失败。作为替代方法，你可以使用 <bpt id="p3">**</bpt>InsertOrReplace<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>InsertOrMerge<ept id="p4">**</ept> 方法，这两个方法在实体不存在时会创建一个新实体。</target>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="working-with-heterogeneous-entity-types"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 处理异类实体类型</source>
          <target state="new"><ph id="ph1">&lt;a id="working-with-heterogeneous-entity-types"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 处理异类实体类型</target>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>表服务是<bpt id="p1">*</bpt>架构灵活<ept id="p1">*</ept>的表存储，意味着单个表可以存储多种类型的实体，从而在设计中提供了极大的灵活性。以下示例说明了同时存储员工实体和部门实体的表：</source>
          <target state="new">表服务是<bpt id="p1">*</bpt>架构灵活<ept id="p1">*</ept>的表存储，意味着单个表可以存储多种类型的实体，从而在设计中提供了极大的灵活性。以下示例说明了同时存储员工实体和部门实体的表：</target>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>PartitionKey</source>
          <target state="new">PartitionKey</target>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>RowKey</source>
          <target state="new">RowKey</target>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>Timestamp</source>
          <target state="new">Timestamp</target>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>DepartmentName</source>
          <target state="new">DepartmentName</target>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>EmployeeCount</source>
          <target state="new">EmployeeCount</target>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>请注意，每个实体仍然必须具有 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>、<bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Timestamp<ept id="p3">**</ept> 值，但可以具有任何一组属性。此外，没有任何信息指示实体的类型，除非你选择在某处存储该信息。有两个用于标识实体类型的选项：</source>
          <target state="new">请注意，每个实体仍然必须具有 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept>、<bpt id="p2">**</bpt>RowKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Timestamp<ept id="p3">**</ept> 值，但可以具有任何一组属性。此外，没有任何信息指示实体的类型，除非你选择在某处存储该信息。有两个用于标识实体类型的选项：</target>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept>（或可能 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept>）前面添加实体类型。例如，将 <bpt id="p3">**</bpt>EMPLOYEE_000123<ept id="p3">**</ept> 或 <bpt id="p4">**</bpt>DEPARTMENT_SALES<ept id="p4">**</ept> 作为 <bpt id="p5">**</bpt>RowKey<ept id="p5">**</ept> 值。</source>
          <target state="new">在 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept>（或可能 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept>）前面添加实体类型。例如，将 <bpt id="p3">**</bpt>EMPLOYEE_000123<ept id="p3">**</ept> 或 <bpt id="p4">**</bpt>DEPARTMENT_SALES<ept id="p4">**</ept> 作为 <bpt id="p5">**</bpt>RowKey<ept id="p5">**</ept> 值。</target>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>使用一个单独的属性来记录实体类型，如下表中所示。</source>
          <target state="new">使用一个单独的属性来记录实体类型，如下表中所示。</target>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>PartitionKey</source>
          <target state="new">PartitionKey</target>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>RowKey</source>
          <target state="new">RowKey</target>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>Timestamp</source>
          <target state="new">Timestamp</target>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>EntityType</source>
          <target state="new">EntityType</target>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>Employee</source>
          <target state="new">Employee</target>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>EntityType</source>
          <target state="new">EntityType</target>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Employee</source>
          <target state="new">Employee</target>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>EntityType</source>
          <target state="new">EntityType</target>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>DepartmentName</source>
          <target state="new">DepartmentName</target>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>EmployeeCount</source>
          <target state="new">EmployeeCount</target>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>Department</source>
          <target state="new">Department</target>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>EntityType</source>
          <target state="new">EntityType</target>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>FirstName</source>
          <target state="new">FirstName</target>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>LastName</source>
          <target state="new">LastName</target>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Age</source>
          <target state="new">Age</target>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Email</source>
          <target state="new">Email</target>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>Employee</source>
          <target state="new">Employee</target>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>如果存在两个不同类型的实体可能具有相同键值的情况，则第一个选项（在 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 前面添加实体类型）会很有用。它还会在分区中将同一类型的实体分组在一起。</source>
          <target state="new">如果存在两个不同类型的实体可能具有相同键值的情况，则第一个选项（在 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 前面添加实体类型）会很有用。它还会在分区中将同一类型的实体分组在一起。</target>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>此部分中讨论的技术与本指南中前面部分<bpt id="p1">[</bpt>模型关系<ept id="p1">](#modelling-relationships)</ept>讨论的<bpt id="p2">[</bpt>继承关系<ept id="p2">](#inheritance-relationships)</ept>有关。</source>
          <target state="new">此部分中讨论的技术与本指南中前面部分<bpt id="p1">[</bpt>模型关系<ept id="p1">](#modelling-relationships)</ept>讨论的<bpt id="p2">[</bpt>继承关系<ept id="p2">](#inheritance-relationships)</ept>有关。</target>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>你应考虑在实体类型值中包含版本号以允许客户端应用程序演变 POCO 对象并处理不同版本。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>你应考虑在实体类型值中包含版本号以允许客户端应用程序演变 POCO 对象并处理不同版本。</target>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>本部分的剩余部分将介绍存储客户端库中便于处理同一表中的多个实体类型的一些功能。</source>
          <target state="new">本部分的剩余部分将介绍存储客户端库中便于处理同一表中的多个实体类型的一些功能。</target>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>检索异类实体类型</source>
          <target state="new">检索异类实体类型</target>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>如果你使用存储客户端库，则有三个选项可处理多个实体类型。</source>
          <target state="new">如果你使用存储客户端库，则有三个选项可处理多个实体类型。</target>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>如果你知道使用特定 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 值存储的实体的类型，则在检索实体时可以指定该实体类型（如前面两个检索 <bpt id="p3">**</bpt>EmployeeEntity<ept id="p3">**</ept> 类型的实体的示例所示）：<bpt id="p4">[</bpt>使用存储客户端库检索单个实体<ept id="p4">](#retrieving-a-single-entity-using-the-storage-client-library)</ept>和<bpt id="p5">[</bpt>使用 LINQ 检索多个实体<ept id="p5">](#retrieving-multiple-entities-using-linq)</ept>。</source>
          <target state="new">如果你知道使用特定 <bpt id="p1">**</bpt>RowKey<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 值存储的实体的类型，则在检索实体时可以指定该实体类型（如前面两个检索 <bpt id="p3">**</bpt>EmployeeEntity<ept id="p3">**</ept> 类型的实体的示例所示）：<bpt id="p4">[</bpt>使用存储客户端库检索单个实体<ept id="p4">](#retrieving-a-single-entity-using-the-storage-client-library)</ept>和<bpt id="p5">[</bpt>使用 LINQ 检索多个实体<ept id="p5">](#retrieving-multiple-entities-using-linq)</ept>。</target>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>第二个选项是使用 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 类型（属性包）而不是具体的 POCO 实体类型（此选项还可以提高性能，因为无需序列化实体和将实体反序列化为 .NET 类型）。以下 C# 代码可能会从表中检索多个不同类型的实体，但会将所有实体作 <bpt id="p2">**</bpt>DynamicTableEntity<ept id="p2">**</ept> 实例返回。然后，它使用 <bpt id="p3">**</bpt>EntityType<ept id="p3">**</ept> 属性来确定每个实体的类型：</source>
          <target state="new">第二个选项是使用 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 类型（属性包）而不是具体的 POCO 实体类型（此选项还可以提高性能，因为无需序列化实体和将实体反序列化为 .NET 类型）。以下 C# 代码可能会从表中检索多个不同类型的实体，但会将所有实体作 <bpt id="p2">**</bpt>DynamicTableEntity<ept id="p2">**</ept> 实例返回。然后，它使用 <bpt id="p3">**</bpt>EntityType<ept id="p3">**</ept> 属性来确定每个实体的类型：</target>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>请注意，若要检索其他属性，必须对 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 类的 <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> 属性使用 <bpt id="p3">**</bpt>TryGetValue<ept id="p3">**</ept> 方法。</source>
          <target state="new">请注意，若要检索其他属性，必须对 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 类的 <bpt id="p2">**</bpt>Properties<ept id="p2">**</ept> 属性使用 <bpt id="p3">**</bpt>TryGetValue<ept id="p3">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>第三个选项是组合使用 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 类型和 <bpt id="p2">**</bpt>EntityResolver<ept id="p2">**</ept> 实例。使用此选项可以在同一查询中解析为多种 POCO 类型。在此示例中，<bpt id="p3">**</bpt>EntityResolver<ept id="p3">**</ept> 委托使用 <bpt id="p4">**</bpt>EntityType<ept id="p4">**</ept> 属性来区分查询返回的两种实体类型。 <bpt id="p5">**</bpt>Resolve<ept id="p5">**</ept> 方法使用 <bpt id="p6">**</bpt>resolver<ept id="p6">**</ept> 委托将 <bpt id="p7">**</bpt>DynamicTableEntity<ept id="p7">**</ept> 实例解析为 <bpt id="p8">**</bpt>TableEntity<ept id="p8">**</ept> 实例。</source>
          <target state="new">第三个选项是组合使用 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 类型和 <bpt id="p2">**</bpt>EntityResolver<ept id="p2">**</ept> 实例。使用此选项可以在同一查询中解析为多种 POCO 类型。在此示例中，<bpt id="p3">**</bpt>EntityResolver<ept id="p3">**</ept> 委托使用 <bpt id="p4">**</bpt>EntityType<ept id="p4">**</ept> 属性来区分查询返回的两种实体类型。 <bpt id="p5">**</bpt>Resolve<ept id="p5">**</ept> 方法使用 <bpt id="p6">**</bpt>resolver<ept id="p6">**</ept> 委托将 <bpt id="p7">**</bpt>DynamicTableEntity<ept id="p7">**</ept> 实例解析为 <bpt id="p8">**</bpt>TableEntity<ept id="p8">**</ept> 实例。</target>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>修改异类实体类型</source>
          <target state="new">修改异类实体类型</target>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>无需知道实体的类型就可删除该实体，在插入实体时你始终知道该实体的类型。但是，你可以使用 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 类型来更新实体，而不必知道其类型，也无需使用 POCO 实体类。以下代码示例检索单个实体，并在更新该实体前检查 <bpt id="p2">**</bpt>EmployeeCount<ept id="p2">**</ept> 属性是否存在。</source>
          <target state="new">无需知道实体的类型就可删除该实体，在插入实体时你始终知道该实体的类型。但是，你可以使用 <bpt id="p1">**</bpt>DynamicTableEntity<ept id="p1">**</ept> 类型来更新实体，而不必知道其类型，也无需使用 POCO 实体类。以下代码示例检索单个实体，并在更新该实体前检查 <bpt id="p2">**</bpt>EmployeeCount<ept id="p2">**</ept> 属性是否存在。</target>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="controlling-access-with-shared-access-signatures"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 使用共享访问签名控制访问权限</source>
          <target state="new"><ph id="ph1">&lt;a id="controlling-access-with-shared-access-signatures"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 使用共享访问签名控制访问权限</target>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>可以使用共享访问签名 (SAS) 令牌允许客户端应用程序直接修改（和查询）表实体，而无需直接使用表服务进行身份验证。通常情况下，在应用程序中使用 SAS 主要有以下三大优点：</source>
          <target state="new">可以使用共享访问签名 (SAS) 令牌允许客户端应用程序直接修改（和查询）表实体，而无需直接使用表服务进行身份验证。通常情况下，在应用程序中使用 SAS 主要有以下三大优点：</target>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>无需将存储帐户密钥分发到不安全的平台（如移动设备），即可允许该设备访问和修改表服务中的实体。</source>
          <target state="new">无需将存储帐户密钥分发到不安全的平台（如移动设备），即可允许该设备访问和修改表服务中的实体。</target>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>可以卸下 Web 角色和辅助角色在管理传递到客户端设备（如最终用户计算机和移动设备）的实体时执行的一些工作负荷。</source>
          <target state="new">可以卸下 Web 角色和辅助角色在管理传递到客户端设备（如最终用户计算机和移动设备）的实体时执行的一些工作负荷。</target>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>可以向客户端分配一组受约束且有时间限制的权限（如允许对特定资源进行只读访问）。</source>
          <target state="new">可以向客户端分配一组受约束且有时间限制的权限（如允许对特定资源进行只读访问）。</target>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>有关在表服务中使用 SAS 令牌的详细信息，请参阅<bpt id="p1">[</bpt>共享访问签名，第 1 部分：了解 SAS 模型<ept id="p1">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>。</source>
          <target state="new">有关在表服务中使用 SAS 令牌的详细信息，请参阅<bpt id="p1">[</bpt>共享访问签名，第 1 部分：了解 SAS 模型<ept id="p1">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>。</target>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>但是，仍必须生成授权客户端应用程序访问表服务中的实体的 SAS 令牌：应在可安全地访问存储帐户密钥的环境中执行此操作。通常，使用 Web 角色或辅助角色生成 SAS 令牌并将其传递给需要访问你的实体的客户端应用程序。由于生成 SAS 令牌并将其传递到客户端仍有开销，你应考虑如何最有效地减少此开销，尤其是在大容量方案中。</source>
          <target state="new">但是，仍必须生成授权客户端应用程序访问表服务中的实体的 SAS 令牌：应在可安全地访问存储帐户密钥的环境中执行此操作。通常，使用 Web 角色或辅助角色生成 SAS 令牌并将其传递给需要访问你的实体的客户端应用程序。由于生成 SAS 令牌并将其传递到客户端仍有开销，你应考虑如何最有效地减少此开销，尤其是在大容量方案中。</target>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>可以生成授权访问表中实体子集的 SAS 令牌。默认情况下，将为整个表创建 SAS 令牌，但也可以指定授权访问一组 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值或一组 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值的 SAS 令牌。可以选择为单个系统用户生成 SAS 令牌，使每个用户的 SAS 令牌仅允许他访问表服务中他自己的实体。</source>
          <target state="new">可以生成授权访问表中实体子集的 SAS 令牌。默认情况下，将为整个表创建 SAS 令牌，但也可以指定授权访问一组 <bpt id="p1">**</bpt>PartitionKey<ept id="p1">**</ept> 值或一组 <bpt id="p2">**</bpt>PartitionKey<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>RowKey<ept id="p3">**</ept> 值的 SAS 令牌。可以选择为单个系统用户生成 SAS 令牌，使每个用户的 SAS 令牌仅允许他访问表服务中他自己的实体。</target>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>异步和并行操作</source>
          <target state="new">异步和并行操作</target>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>假设你将请求分布到多个分区，你可以通过使用异步或并行查询来提高吞吐量和客户端响应能力。例如，你可以使用两个或更多个辅助角色实例并行访问表。你可以让单个辅助角色负责特定分区集，也可以直接使用多个辅助角色实例，每个辅助角色实例都能访问某个表中的所有分区。</source>
          <target state="new">假设你将请求分布到多个分区，你可以通过使用异步或并行查询来提高吞吐量和客户端响应能力。例如，你可以使用两个或更多个辅助角色实例并行访问表。你可以让单个辅助角色负责特定分区集，也可以直接使用多个辅助角色实例，每个辅助角色实例都能访问某个表中的所有分区。</target>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>在客户端实例中，可以通过以异步方式执行存储操作来提高吞吐量。使用存储客户端库，可以轻松地编写异步查询和修改。例如，你可以从用于检索某个分区中的所有实体的同步方法开始，如以下 C# 代码中所示：</source>
          <target state="new">在客户端实例中，可以通过以异步方式执行存储操作来提高吞吐量。使用存储客户端库，可以轻松地编写异步查询和修改。例如，你可以从用于检索某个分区中的所有实体的同步方法开始，如以下 C# 代码中所示：</target>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>可以轻松地修改此代码，使查询以异步方式运行，如下所示：</source>
          <target state="new">可以轻松地修改此代码，使查询以异步方式运行，如下所示：</target>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>在此异步示例中，你可以看到对同步版本进行了以下更改：</source>
          <target state="new">在此异步示例中，你可以看到对同步版本进行了以下更改：</target>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>方法签名现在包括 <bpt id="p1">**</bpt>async<ept id="p1">**</ept> 修饰符，并返回 <bpt id="p2">**</bpt>Task<ept id="p2">**</ept> 实例。</source>
          <target state="new">方法签名现在包括 <bpt id="p1">**</bpt>async<ept id="p1">**</ept> 修饰符，并返回 <bpt id="p2">**</bpt>Task<ept id="p2">**</ept> 实例。</target>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>不是调用 <bpt id="p1">**</bpt>ExecuteSegmented<ept id="p1">**</ept> 方法来检索结果，该方法现在调用 <bpt id="p2">**</bpt>ExecuteSegmentedAsync<ept id="p2">**</ept> 方法，并使用 <bpt id="p3">**</bpt>await<ept id="p3">**</ept> 修饰符来以异步方式检索结果。</source>
          <target state="new">不是调用 <bpt id="p1">**</bpt>ExecuteSegmented<ept id="p1">**</ept> 方法来检索结果，该方法现在调用 <bpt id="p2">**</bpt>ExecuteSegmentedAsync<ept id="p2">**</ept> 方法，并使用 <bpt id="p3">**</bpt>await<ept id="p3">**</ept> 修饰符来以异步方式检索结果。</target>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>客户端应用程序可以多次调用此方法（对 <bpt id="p1">**</bpt>department<ept id="p1">**</ept> 参数使用不同值），并且每个查询都将在一个单独的线程中运行。</source>
          <target state="new">客户端应用程序可以多次调用此方法（对 <bpt id="p1">**</bpt>department<ept id="p1">**</ept> 参数使用不同值），并且每个查询都将在一个单独的线程中运行。</target>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>请注意，<bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> 类中的 <bpt id="p2">**</bpt>Execute<ept id="p2">**</ept> 方法没有异步版本，因为 <bpt id="p3">**</bpt>IEnumerable<ept id="p3">**</ept> 接口不支持异步枚举。</source>
          <target state="new">请注意，<bpt id="p1">**</bpt>TableQuery<ept id="p1">**</ept> 类中的 <bpt id="p2">**</bpt>Execute<ept id="p2">**</ept> 方法没有异步版本，因为 <bpt id="p3">**</bpt>IEnumerable<ept id="p3">**</ept> 接口不支持异步枚举。</target>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>此外，还可以用异步方式插入、更新和删除实体。以下 C# 示例说明了一个简单的同步方法，该方法用于插入或替换员工实体：</source>
          <target state="new">此外，还可以用异步方式插入、更新和删除实体。以下 C# 示例说明了一个简单的同步方法，该方法用于插入或替换员工实体：</target>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>可以轻松地修改此代码，使更新以异步方式运行，如下所示：</source>
          <target state="new">可以轻松地修改此代码，使更新以异步方式运行，如下所示：</target>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>在此异步示例中，你可以看到对同步版本进行了以下更改：</source>
          <target state="new">在此异步示例中，你可以看到对同步版本进行了以下更改：</target>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>方法签名现在包括 <bpt id="p1">**</bpt>async<ept id="p1">**</ept> 修饰符，并返回 <bpt id="p2">**</bpt>Task<ept id="p2">**</ept> 实例。</source>
          <target state="new">方法签名现在包括 <bpt id="p1">**</bpt>async<ept id="p1">**</ept> 修饰符，并返回 <bpt id="p2">**</bpt>Task<ept id="p2">**</ept> 实例。</target>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>不是调用 <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> 方法来更新实体，该方法现在调用 <bpt id="p2">**</bpt>ExecuteAsync<ept id="p2">**</ept> 方法，并使用 <bpt id="p3">**</bpt>await<ept id="p3">**</ept> 修饰符来以异步方式检索结果。</source>
          <target state="new">不是调用 <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> 方法来更新实体，该方法现在调用 <bpt id="p2">**</bpt>ExecuteAsync<ept id="p2">**</ept> 方法，并使用 <bpt id="p3">**</bpt>await<ept id="p3">**</ept> 修饰符来以异步方式检索结果。</target>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>客户端应用程序可以调用多个类似这样的异步方法，每个方法调用都将在一个单独的线程中运行。</source>
          <target state="new">客户端应用程序可以调用多个类似这样的异步方法，每个方法调用都将在一个单独的线程中运行。</target>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>致谢</source>
          <target state="new">致谢</target>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>我们要特别感谢 Azure 团队以下成员所做出的贡献：Dominic Betts、Jason Hogg、Jean Ghanem、Jai Haridas、Jeff Irwin、Vamshidhar Kommineni、Vinay Shah 和 Serdar Ozler 以及来自 Microsoft DX 的 Tom Hollander。</source>
          <target state="new">我们要特别感谢 Azure 团队以下成员所做出的贡献：Dominic Betts、Jason Hogg、Jean Ghanem、Jai Haridas、Jeff Irwin、Vamshidhar Kommineni、Vinay Shah 和 Serdar Ozler 以及来自 Microsoft DX 的 Tom Hollander。</target>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>我们还要感谢以下 Microsoft MVP 在审核期间提供的有价值的反馈：Igor Papirov 和 Edward Bakker。</source>
          <target state="new">我们还要感谢以下 Microsoft MVP 在审核期间提供的有价值的反馈：Igor Papirov 和 Edward Bakker。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>