{
  "nodes": [
    {
      "content": "在 Azure 中使用 Socket.IO 创建 Node.js 聊天应用程序",
      "pos": [
        27,
        66
      ]
    },
    {
      "content": "此教程演示如何在托管于 Azure 上的 node.js Web 应用中使用 socket.io。",
      "pos": [
        85,
        134
      ]
    },
    {
      "content": "在 Azure 中使用 Socket.IO 创建 Node.js 聊天应用程序",
      "pos": [
        366,
        405
      ]
    },
    {
      "pos": [
        407,
        669
      ],
      "content": "Socket.IO 使用 WebSocket 在 node.js 服务器和客户端之间提供实时通信。还支持回退到使用低版本浏览器的其他传输（如长轮询）。本教程将演示如何以 Azure Web 应用的的形式托管基于 Socket.IO 的聊天应用程序，并说明如何通过 <bpt id=\"p1\">[</bpt>Azure Redis 缓存<ept id=\"p1\">](/documentation/services/redis-cache)</ept>来<bpt id=\"p2\">[</bpt>向外扩展<ept id=\"p2\">](#scale-out)</ept>应用程序。有关 Socket.IO 的详细信息，请参阅 <bpt id=\"p3\">[</bpt>http://socket.io/<ept id=\"p3\">][socketio]</ept>。"
    },
    {
      "pos": [
        673,
        878
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此任务中的过程适用于 <bpt id=\"p1\">[</bpt>Azure Web 应用<ept id=\"p1\">](/documentation/services/web-sites/)</ept>；对于云服务，请参阅<ph id=\"ph2\">&lt;a href=\"/documentation/articles/cloud-services-nodejs-chat-app-socketio/\"&gt;</ph>在 Azure 云服务中使用 Socket.IO 构建 Node.js 聊天应用程序<ph id=\"ph3\">&lt;/a&gt;</ph>。"
    },
    {
      "content": "下载聊天示例",
      "pos": [
        884,
        890
      ]
    },
    {
      "pos": [
        892,
        960
      ],
      "content": "对于此项目，我们将使用 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Socket.IO GitHub 存储库]</ept>中的聊天示例。执行以下步骤下载该示例并将其添加到您先前创建的项目中。"
    },
    {
      "pos": [
        966,
        1022
      ],
      "content": "下载 Socket.IO 项目的 <bpt id=\"p1\">[</bpt>ZIP 或 GZ 存档版本<ept id=\"p1\">][release]</ept>（本文档使用版本 1.3.5）"
    },
    {
      "pos": [
        1029,
        1085
      ],
      "content": "解压缩存档并将 <bpt id=\"p1\">**</bpt>examples\\\\chat<ept id=\"p1\">**</ept> 目录复制到新位置。例如，<bpt id=\"p2\">**</bpt>\\\\node\\\\chat<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "修改 App.js 并安装模块",
      "pos": [
        1090,
        1105
      ]
    },
    {
      "pos": [
        1111,
        1175
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>index.js<ept id=\"p1\">**</ept> 文件重命名为 <bpt id=\"p2\">**</bpt>app.js<ept id=\"p2\">**</ept>。这可支持 Azure 检测它是否为 Node.js 应用程序。"
    },
    {
      "pos": [
        1181,
        1255
      ],
      "content": "在文本编辑器中打开 <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept> 文件。更改包含 <ph id=\"ph1\">`var io = require('../..')(server);`</ph> 的行，如下所示："
    },
    {
      "pos": [
        1543,
        1609
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>package.json<ept id=\"p1\">**</ept> 文件，并在 <ph id=\"ph1\">`dependencies`</ph> 下面添加对 socket.io 的引用，如下所示："
    },
    {
      "pos": [
        1712,
        1764
      ],
      "content": "从命令行中，切换到 <bpt id=\"p1\">**</bpt>\\\\node\\\\chat<ept id=\"p1\">**</ept> 目录，然后使用 npm 安装此应用程序所需的模块："
    },
    {
      "pos": [
        1791,
        1825
      ],
      "content": "这会将模块安装到名为 <bpt id=\"p1\">**</bpt>node_modules<ept id=\"p1\">**</ept> 的子文件夹。"
    },
    {
      "content": "创建 Azure Web 应用",
      "pos": [
        1830,
        1845
      ]
    },
    {
      "content": "按照以下步骤创建 Azure Web 应用、启用 Git 发布，然后为 Web 应用启用 WebSocket 支持。",
      "pos": [
        1847,
        1905
      ]
    },
    {
      "pos": [
        1909,
        2063
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要完成本教程，你需要一个 Azure 帐户。如果你没有帐户，可以创建一个试用帐户，只需几分钟即可完成。有关详细信息，请参阅 <ph id=\"ph2\">&lt;a href=\"/pricing/1rmb-trial/?WT.mc_id=A7171371E\" target=\"_blank\"&gt;</ph>Azure 试用<ph id=\"ph3\">&lt;/a&gt;</ph>。"
    },
    {
      "pos": [
        2068,
        2173
      ],
      "content": "安装 Azure 命令行界面 (Azure CLI) 并连接到 Azure 订阅。请参阅<bpt id=\"p1\">[</bpt>安装和配置 Azure CLI<ept id=\"p1\">](/documentation/articles/xplat-cli-install)</ept>。"
    },
    {
      "content": "如果这是你第一次在 Azure 中设置存储库，则需要创建登录凭据。从 Azure CLI 输入以下命令：",
      "pos": [
        2178,
        2230
      ]
    },
    {
      "pos": [
        2298,
        2387
      ],
      "content": "切换到 <bpt id=\"p1\">**</bpt>\\\\node\\chat<ept id=\"p1\">**</ept> 目录，然后使用以下命令创建新的 Azure Web 应用和本地 Git 存储库。此命令还会创建名为 'azure' 的 Git 远程连接。"
    },
    {
      "content": "必须将“mysitename”替换为 Web 应用的唯一名称。",
      "pos": [
        2437,
        2468
      ]
    },
    {
      "content": "通过使用以下命令将现有文件提交到本地存储库：",
      "pos": [
        2473,
        2495
      ]
    },
    {
      "content": "使用以下命令将这些文件推送到 Azure Web 应用存储库：",
      "pos": [
        2558,
        2589
      ]
    },
    {
      "content": "系统出现提示时，请输入步骤 2 中的凭据。在服务器上导入模块时您将收到状态消息。此过程完成后，应用程序将在 Azure Web 应用上托管。",
      "pos": [
        2626,
        2696
      ]
    },
    {
      "pos": [
        2704,
        2759
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在模块安装过程中，您可能会注意到“找不到导入的项目...”错误。这些错误可放心地忽略。"
    },
    {
      "content": "Socket.IO 使用的 WebSocket 在 Azure 上默认不启用。若要启用 Web 套接字，请使用以下命令：",
      "pos": [
        2764,
        2824
      ]
    },
    {
      "content": "如果系统提示，请输入 Web 应用的名称。",
      "pos": [
        2857,
        2878
      ]
    },
    {
      "pos": [
        2902,
        3019
      ],
      "content": "“azure site set -w”命令仅适用于 Azure 命令行界面 0.7.4 或更高版本。你还可以使用 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>启用 WebSocket 支持。"
    },
    {
      "pos": [
        3025,
        3218
      ],
      "content": "<p>若要使用 [Azure 管理门户](https://manage.windowsazure.cn)启用 WebSocket，请选择你的 Web 应用的“配置”页，针对 Web 套接字条目选择“ON”，然后单击“保存”。\n<p>![websockets](./media/web-sites-nodejs-chat-app-socketio/websockets.png)",
      "leadings": [
        "",
        "    >"
      ],
      "nodes": [
        {
          "content": "若要使用 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 管理门户](https://manage.windowsazure.cn)</ept>启用 WebSocket，请选择你的 Web 应用的“配置”页，针对 Web 套接字条目选择“ON”，然后单击“保存”。",
          "pos": [
            3,
            112
          ]
        }
      ]
    },
    {
      "content": "要查看 Azure 上的 Web 应用，请使用以下命令启动 Web 浏览器并导航到托管的 Web 应用：",
      "pos": [
        3227,
        3279
      ]
    },
    {
      "content": "你的应用现在即可在 Azure 上运行，并可使用 Socket.IO 在不同客户端之间中继聊天消息。",
      "pos": [
        3308,
        3358
      ]
    },
    {
      "pos": [
        3362,
        3390
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"scale-out\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>向外扩展"
    },
    {
      "pos": [
        3392,
        3548
      ],
      "content": "Socket.IO 应用程序可通过<bpt id=\"p1\">__</bpt>适配器<ept id=\"p1\">__</ept>实现向外扩展，以在多个应用程序实例之间发布消息和事件。尽管有几个适配器可用，<bpt id=\"p2\">[</bpt>socket.io redis<ept id=\"p2\">](https://github.com/automattic/socket.io-redis)</ept> 适配器可轻松与 Azure Redis 缓存功能一同使用。"
    },
    {
      "pos": [
        3552,
        3765
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>向外扩展 Socket.IO 解决方案还要求支持粘滞会话。默认情况下，可以通过 Azure 请求路由为 Azure Web 应用启用粘滞会话。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 中的实例关联<ept id=\"p1\">](http://azure.microsoft.com/blog/2013/11/18/disabling-arrs-instance-affinity-in-windows-azure-web-sites/)</ept>"
    },
    {
      "content": "创建 Redis 缓存",
      "pos": [
        3770,
        3781
      ]
    },
    {
      "pos": [
        3783,
        3904
      ],
      "content": "执行<bpt id=\"p1\">[</bpt>在 Azure Redis 缓存中创建缓存<ept id=\"p1\">](/documentation/articles/cache-dotnet-how-to-use-azure-redis-cache/#create-a-cache)</ept>中的步骤，以创建新的缓存。"
    },
    {
      "pos": [
        3908,
        3958
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>保存用于缓存的<bpt id=\"p1\">__</bpt>主机名<ept id=\"p1\">__</ept>和<bpt id=\"p2\">__</bpt>主密钥<ept id=\"p2\">__</ept>，因为接下来的步骤需要这些信息。"
    },
    {
      "content": "添加 redis 和 socket.io redis 模块",
      "pos": [
        3963,
        3992
      ]
    },
    {
      "pos": [
        3997,
        4036
      ],
      "content": "在命令行中，切换到 <bpt id=\"p1\">__</bpt>\\\\node\\\\chat<ept id=\"p1\">__</ept> 目录，然后运行以下命令："
    },
    {
      "pos": [
        4107,
        4140
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此命令中指定的版本是测试本文时使用的版本。"
    },
    {
      "pos": [
        4145,
        4214
      ],
      "content": "修改 <bpt id=\"p1\">__</bpt>app.js<ept id=\"p1\">__</ept> 文件，紧接在 <ph id=\"ph1\">`var io = require('socket.io')(server);`</ph> 后面添加以下行"
    },
    {
      "pos": [
        4567,
        4622
      ],
      "content": "用你的 Redis 缓存的主机名和密钥替换 <bpt id=\"p1\">__</bpt>redishostname<ept id=\"p1\">__</ept> 和 <bpt id=\"p2\">__</bpt>rediskey<ept id=\"p2\">__</ept>。"
    },
    {
      "content": "这将创建到之前创建的 Redis 缓存的发布和订阅客户端。客户端然后与适配器一同使用，以配置 Socket.IO 将 Redis 缓存用于在应用程序的实例之间传递消息和事件",
      "pos": [
        4628,
        4714
      ]
    },
    {
      "pos": [
        4722,
        4863
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>尽管 <bpt id=\"p1\">__</bpt>socket.io redis<ept id=\"p1\">__</ept> 适配器能够与 Redis 直接通信，但当前版本不支持 Azure Redis 缓存所需的身份验证。因此需使用 <bpt id=\"p2\">__</bpt>redis<ept id=\"p2\">__</ept> 模块创建初始连接，将客户端传递给 <bpt id=\"p3\">__</bpt>socket.io redis<ept id=\"p3\">__</ept> 适配器。"
    },
    {
      "content": "尽管 Azure Redis Cache 支持使用端口 6380 进行安全连接，但此示例中使用的模块不支持自 2014 年 7 月 14 日起的安全连接。上述代码使用默认的 6379 非安全端口。",
      "pos": [
        4873,
        4971
      ]
    },
    {
      "pos": [
        4976,
        4993
      ],
      "content": "保存已修改的 <bpt id=\"p1\">__</bpt>app.js<ept id=\"p1\">__</ept>"
    },
    {
      "content": "提交更改并重新部署",
      "pos": [
        4998,
        5007
      ]
    },
    {
      "pos": [
        5009,
        5059
      ],
      "content": "从 <bpt id=\"p1\">__</bpt>\\\\node\\\\chat<ept id=\"p1\">__</ept> 目录中的命令行中，使用以下命令提交更改，并重新部署该应用程序。"
    },
    {
      "content": "将所做的更改推送到服务器后，您可以使用以下命令跨多个实例缩放您的 Web 应用。",
      "pos": [
        5145,
        5185
      ]
    },
    {
      "pos": [
        5233,
        5251
      ],
      "content": "其中 <bpt id=\"p1\">__</bpt>#<ept id=\"p1\">__</ept> 是要创建的实例数。"
    },
    {
      "content": "可以从多个浏览器或计算机连接到你的 Web 应用，以验证消息是否已正确发送给所有客户端。",
      "pos": [
        5253,
        5297
      ]
    },
    {
      "content": "故障排除",
      "pos": [
        5302,
        5306
      ]
    },
    {
      "content": "连接限制",
      "pos": [
        5311,
        5315
      ]
    },
    {
      "pos": [
        5317,
        5412
      ],
      "content": "Azure Web 应用提供多个 SKU，这些 SKU 用于确定你的站点可用的资源。包括允许的 WebSocket 连接数。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt> Web 应用定价页<ept id=\"p1\">][pricing]</ept>。"
    },
    {
      "content": "未使用 WebSocket 发送消息",
      "pos": [
        5417,
        5435
      ]
    },
    {
      "content": "如果客户端浏览器一直回退到长轮询而不是使用 Websocket，可能有以下几种原因。",
      "pos": [
        5437,
        5479
      ]
    },
    {
      "content": "尝试限制传输到该 Websocket",
      "pos": [
        5485,
        5503
      ]
    },
    {
      "pos": [
        5511,
        5747
      ],
      "content": "为了使 Socket.IO 使用 Websocket 进行消息传输，服务器和客户端必须支持 Websocket。如果其中任一个不支持，则 Socket.IO 将协商其他传输，如长轮询。Socket.IO 使用的默认传输列表为 <ph id=\"ph1\">` websocket, htmlfile, xhr-polling, jsonp-polling`</ph>。你可以在包含 <ph id=\"ph2\">`, nicknames = {};`</ph> 的行后面将以下代码添加到 <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept> 文件，以强制其仅使用 WebSocket。"
    },
    {
      "pos": [
        5849,
        5933
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>注意，上述代码为活动状态时，不支持 Websocket 的低版本浏览器将无法连接到站点，因为此代码将通信限制为仅支持 Websocket 通信。"
    },
    {
      "content": "使用 SSL",
      "pos": [
        5939,
        5945
      ]
    },
    {
      "pos": [
        5953,
        6063
      ],
      "content": "Websocket 依赖于某些较少使用的 HTTP 标头，如 <bpt id=\"p1\">**</bpt>Upgrade<ept id=\"p1\">**</ept> 标头。某些中间网络设备（例如 Web 代理）可能会删除这些标头。为避免发生此问题，可以建立基于 SSL 的 WebSocket 连接。"
    },
    {
      "pos": [
        6069,
        6245
      ],
      "content": "完成此操作的简单方法是将 Socket.IO 配置到 <ph id=\"ph1\">`match origin protocol`</ph>。这会指示 Socket.IO 保护 Websocket 通信，使之和网页原始 HTTP/HTTPS 请求一样。如果浏览器使用 HTTPS URL 访问您的 Web 应用，将基于 SSL 保护通过 Socket.IO 的后续 WebSocket 通信。"
    },
    {
      "pos": [
        6251,
        6317
      ],
      "content": "若要将此示例修改为启用此配置，请在 <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept> 文件中包含 <ph id=\"ph1\">`, nicknames = {};`</ph> 的行后面添加以下代码。"
    },
    {
      "content": "验证 web.config 设置",
      "pos": [
        6419,
        6435
      ]
    },
    {
      "pos": [
        6443,
        6571
      ],
      "content": "托管 Node.js 应用程序的 Azure Web 应用使用 <bpt id=\"p1\">**</bpt>web.config<ept id=\"p1\">**</ept> 文件将传入请求路由到 Node.js 应用程序。为了使 Websocket 对 Node.js 应用程序正常运行，<bpt id=\"p2\">**</bpt>web.config<ept id=\"p2\">**</ept> 必须包含以下条目。"
    },
    {
      "pos": [
        6615,
        6752
      ],
      "content": "这将禁用 IIS Websocket 模块，其中包括自身的 Websocket 实施以及与 Node.js 特定 WebSocket 模块（如 Socket.IO）的冲突。如果此行不存在，或者设置为 <ph id=\"ph1\">`true`</ph>，其原因主要是 WebSocket 传输不适用于你的应用程序。"
    },
    {
      "pos": [
        6758,
        6971
      ],
      "content": "Node.js 应用程序通常不包括 <bpt id=\"p1\">**</bpt>web.config<ept id=\"p1\">**</ept> 文件，因此 Azure Web 应用将在部署 Node.js 应用程序时自动生成一个。由于此文件是在服务器上自动生成的，因此必须使用 Web 应用的 FTP 或 FTPS URL 来查看此文件。你可以通过选择你的 Web 应用，然后选择“仪表板”链接，在 Azure 管理门户中查找 Web 应用的 FTP 和 FTPS URL。URL 将显示在“速览”部分。"
    },
    {
      "pos": [
        6979,
        7099
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果应用程序未提供 <bpt id=\"p1\">**</bpt>web.config<ept id=\"p1\">**</ept> 文件，则该文件将仅由 Azure Web 应用生成。如果在应用程序项目的根目录下提供了 <bpt id=\"p2\">**</bpt>web.config<ept id=\"p2\">**</ept> 文件，则 Azure Web 应用将使用该文件。"
    },
    {
      "pos": [
        7105,
        7233
      ],
      "content": "如果该条目不存在，或者已设置为值 <ph id=\"ph1\">`true`</ph>，则你应在 Node.js 应用程序的根目录中创建 <bpt id=\"p1\">**</bpt>web.config<ept id=\"p1\">**</ept> 并指定值 <ph id=\"ph2\">`false`</ph>。例如，使用 <bpt id=\"p2\">**</bpt>app.js<ept id=\"p2\">**</ept> 作为入口点的应用程序的默认 <bpt id=\"p3\">**</bpt>web.config<ept id=\"p3\">**</ept> 如下所示。"
    },
    {
      "pos": [
        9715,
        9808
      ],
      "content": "如果你的应用程序使用的入口点不是 <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept>，你必须将出现的所有 <bpt id=\"p2\">**</bpt>app.js<ept id=\"p2\">**</ept> 替换为正确的入口点。例如，将 <bpt id=\"p3\">**</bpt>app.js<ept id=\"p3\">**</ept> 替换为 <bpt id=\"p4\">**</bpt>server.js<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "后续步骤",
      "pos": [
        9812,
        9816
      ]
    },
    {
      "pos": [
        9818,
        9953
      ],
      "content": "在本教程中，你已学习如何创建一个在 Azure 中托管的聊天应用程序。您还可以将该应用程序作为 Azure 云服务托管。有关如何实现此目的的步骤，请参阅<bpt id=\"p1\">[</bpt>在 Azure 云服务中使用 Socket.IO 构建 Node.js 聊天应用程序<ept id=\"p1\">][cloudservice]</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"在 Azure 中使用 Socket.IO 创建 Node.js 聊天应用程序\"\n    description=\"此教程演示如何在托管于 Azure 上的 node.js Web 应用中使用 socket.io。\"\n    services=\"app-service\\web\"\n    documentationCenter=\"nodejs\"\n    authors=\"MikeWasson\"\n    manager=\"wpickett\"\n    editor=\"mollybos\"/>\n\n<tags\n    ms.service=\"web-sites\"\n    ms.date=\"01/09/2016\"\n    wacn.date=\"03/03/2016\"/>\n\n\n\n\n# 在 Azure 中使用 Socket.IO 创建 Node.js 聊天应用程序\n\nSocket.IO 使用 WebSocket 在 node.js 服务器和客户端之间提供实时通信。还支持回退到使用低版本浏览器的其他传输（如长轮询）。本教程将演示如何以 Azure Web 应用的的形式托管基于 Socket.IO 的聊天应用程序，并说明如何通过 [Azure Redis 缓存](/documentation/services/redis-cache)来[向外扩展](#scale-out)应用程序。有关 Socket.IO 的详细信息，请参阅 [http://socket.io/][socketio]。\n\n> [AZURE.NOTE]此任务中的过程适用于 [Azure Web 应用](/documentation/services/web-sites/)；对于云服务，请参阅<a href=\"/documentation/articles/cloud-services-nodejs-chat-app-socketio/\">在 Azure 云服务中使用 Socket.IO 构建 Node.js 聊天应用程序</a>。\n\n\n## 下载聊天示例\n\n对于此项目，我们将使用 [Socket.IO GitHub 存储库]中的聊天示例。执行以下步骤下载该示例并将其添加到您先前创建的项目中。\n\n1.  下载 Socket.IO 项目的 [ZIP 或 GZ 存档版本][release]（本文档使用版本 1.3.5）\n\n\n3.  解压缩存档并将 **examples\\\\chat** 目录复制到新位置。例如，**\\\\node\\\\chat**。\n\n## 修改 App.js 并安装模块\n\n1.  将 **index.js** 文件重命名为 **app.js**。这可支持 Azure 检测它是否为 Node.js 应用程序。\n\n1.  在文本编辑器中打开 **app.js** 文件。更改包含 `var io = require('../..')(server);` 的行，如下所示：\n\n        var express = require('express');\n        var app = express();\n        var server = require('http').createServer(app);\n        // var io = require('../..')(server);\n        // New:\n        var io = require('socket.io')(server);\n        var port = process.env.PORT || 3000;\n\n\n3. 打开 **package.json** 文件，并在 `dependencies` 下面添加对 socket.io 的引用，如下所示：\n\n        \"dependencies\": {\n          \"express\": \"3.4.8\",\n          \"socket.io\": \"1.3.5\"\n        }\n\n4. 从命令行中，切换到 **\\\\node\\\\chat** 目录，然后使用 npm 安装此应用程序所需的模块：\n\n        npm install\n\n    这会将模块安装到名为 **node_modules** 的子文件夹。\n\n## 创建 Azure Web 应用\n\n按照以下步骤创建 Azure Web 应用、启用 Git 发布，然后为 Web 应用启用 WebSocket 支持。\n\n> [AZURE.NOTE]若要完成本教程，你需要一个 Azure 帐户。如果你没有帐户，可以创建一个试用帐户，只需几分钟即可完成。有关详细信息，请参阅 <a href=\"/pricing/1rmb-trial/?WT.mc_id=A7171371E\" target=\"_blank\">Azure 试用</a>。\n\n1. 安装 Azure 命令行界面 (Azure CLI) 并连接到 Azure 订阅。请参阅[安装和配置 Azure CLI](/documentation/articles/xplat-cli-install)。\n\n2. 如果这是你第一次在 Azure 中设置存储库，则需要创建登录凭据。从 Azure CLI 输入以下命令：\n\n        azure site deployment user set [username] [password]\n\n\n3. 切换到 **\\\\node\\chat** 目录，然后使用以下命令创建新的 Azure Web 应用和本地 Git 存储库。此命令还会创建名为 'azure' 的 Git 远程连接。\n\n        azure site create mysitename --git\n\n    必须将“mysitename”替换为 Web 应用的唯一名称。\n\n2. 通过使用以下命令将现有文件提交到本地存储库：\n\n        git add .\n        git commit -m \"Initial commit\"\n\n3. 使用以下命令将这些文件推送到 Azure Web 应用存储库：\n\n        git push azure master\n\n    系统出现提示时，请输入步骤 2 中的凭据。在服务器上导入模块时您将收到状态消息。此过程完成后，应用程序将在 Azure Web 应用上托管。\n\n    > [AZURE.NOTE]在模块安装过程中，您可能会注意到“找不到导入的项目...”错误。这些错误可放心地忽略。\n\n4. Socket.IO 使用的 WebSocket 在 Azure 上默认不启用。若要启用 Web 套接字，请使用以下命令：\n\n        azure site set -w\n\n    如果系统提示，请输入 Web 应用的名称。\n\n    >[AZURE.NOTE]\n    “azure site set -w”命令仅适用于 Azure 命令行界面 0.7.4 或更高版本。你还可以使用 [Azure 管理门户](https://manage.windowsazure.cn)启用 WebSocket 支持。\n    ><p>若要使用 [Azure 管理门户](https://manage.windowsazure.cn)启用 WebSocket，请选择你的 Web 应用的“配置”页，针对 Web 套接字条目选择“ON”，然后单击“保存”。\n    ><p>![websockets](./media/web-sites-nodejs-chat-app-socketio/websockets.png)\n    \n5. 要查看 Azure 上的 Web 应用，请使用以下命令启动 Web 浏览器并导航到托管的 Web 应用：\n\n        azure site browse\n\n你的应用现在即可在 Azure 上运行，并可使用 Socket.IO 在不同客户端之间中继聊天消息。\n\n##<a name=\"scale-out\"></a>向外扩展\n\nSocket.IO 应用程序可通过__适配器__实现向外扩展，以在多个应用程序实例之间发布消息和事件。尽管有几个适配器可用，[socket.io redis](https://github.com/automattic/socket.io-redis) 适配器可轻松与 Azure Redis 缓存功能一同使用。\n\n> [AZURE.NOTE]向外扩展 Socket.IO 解决方案还要求支持粘滞会话。默认情况下，可以通过 Azure 请求路由为 Azure Web 应用启用粘滞会话。有关详细信息，请参阅 [Azure 中的实例关联](http://azure.microsoft.com/blog/2013/11/18/disabling-arrs-instance-affinity-in-windows-azure-web-sites/)\n\n###创建 Redis 缓存\n\n执行[在 Azure Redis 缓存中创建缓存](/documentation/articles/cache-dotnet-how-to-use-azure-redis-cache/#create-a-cache)中的步骤，以创建新的缓存。\n\n> [AZURE.NOTE]保存用于缓存的__主机名__和__主密钥__，因为接下来的步骤需要这些信息。\n\n###添加 redis 和 socket.io redis 模块\n\n1. 在命令行中，切换到 __\\\\node\\\\chat__ 目录，然后运行以下命令：\n\n        npm install socket.io-redis@0.1.4 redis@0.12.1 --save\n\n    > [AZURE.NOTE]此命令中指定的版本是测试本文时使用的版本。\n\n2. 修改 __app.js__ 文件，紧接在 `var io = require('socket.io')(server);` 后面添加以下行\n\n        var pub = require('redis').createClient(6379,'redishostname', {auth_pass: 'rediskey', return_buffers: true});\n        var sub = require('redis').createClient(6379,'redishostname', {auth_pass: 'rediskey', return_buffers: true});\n\n        var redis = require('socket.io-redis');\n        io.adapter(redis({pubClient: pub, subClient: sub}));\n\n    用你的 Redis 缓存的主机名和密钥替换 __redishostname__ 和 __rediskey__。\n\n    这将创建到之前创建的 Redis 缓存的发布和订阅客户端。客户端然后与适配器一同使用，以配置 Socket.IO 将 Redis 缓存用于在应用程序的实例之间传递消息和事件\n\n    > [AZURE.NOTE]尽管 __socket.io redis__ 适配器能够与 Redis 直接通信，但当前版本不支持 Azure Redis 缓存所需的身份验证。因此需使用 __redis__ 模块创建初始连接，将客户端传递给 __socket.io redis__ 适配器。\n    > <p>尽管 Azure Redis Cache 支持使用端口 6380 进行安全连接，但此示例中使用的模块不支持自 2014 年 7 月 14 日起的安全连接。上述代码使用默认的 6379 非安全端口。\n\n3. 保存已修改的 __app.js__\n\n###提交更改并重新部署\n\n从 __\\\\node\\\\chat__ 目录中的命令行中，使用以下命令提交更改，并重新部署该应用程序。\n\n    git add .\n    git commit -m \"implementing scale out\"\n    git push azure master\n\n将所做的更改推送到服务器后，您可以使用以下命令跨多个实例缩放您的 Web 应用。\n\n    azure site scale instances --instances #\n\n其中 __#__ 是要创建的实例数。\n\n可以从多个浏览器或计算机连接到你的 Web 应用，以验证消息是否已正确发送给所有客户端。\n\n## 故障排除\n\n###连接限制\n\nAzure Web 应用提供多个 SKU，这些 SKU 用于确定你的站点可用的资源。包括允许的 WebSocket 连接数。有关详细信息，请参阅 [ Web 应用定价页][pricing]。\n\n###未使用 WebSocket 发送消息\n\n如果客户端浏览器一直回退到长轮询而不是使用 Websocket，可能有以下几种原因。\n\n* **尝试限制传输到该 Websocket**\n\n    为了使 Socket.IO 使用 Websocket 进行消息传输，服务器和客户端必须支持 Websocket。如果其中任一个不支持，则 Socket.IO 将协商其他传输，如长轮询。Socket.IO 使用的默认传输列表为 ` websocket, htmlfile, xhr-polling, jsonp-polling`。你可以在包含 `, nicknames = {};` 的行后面将以下代码添加到 **app.js** 文件，以强制其仅使用 WebSocket。\n\n        io.configure(function() {\n          io.set('transports', ['websocket']);\n        });\n\n    > [AZURE.NOTE]注意，上述代码为活动状态时，不支持 Websocket 的低版本浏览器将无法连接到站点，因为此代码将通信限制为仅支持 Websocket 通信。\n\n* **使用 SSL**\n\n    Websocket 依赖于某些较少使用的 HTTP 标头，如 **Upgrade** 标头。某些中间网络设备（例如 Web 代理）可能会删除这些标头。为避免发生此问题，可以建立基于 SSL 的 WebSocket 连接。\n\n    完成此操作的简单方法是将 Socket.IO 配置到 `match origin protocol`。这会指示 Socket.IO 保护 Websocket 通信，使之和网页原始 HTTP/HTTPS 请求一样。如果浏览器使用 HTTPS URL 访问您的 Web 应用，将基于 SSL 保护通过 Socket.IO 的后续 WebSocket 通信。\n\n    若要将此示例修改为启用此配置，请在 **app.js** 文件中包含 `, nicknames = {};` 的行后面添加以下代码。\n\n        io.configure(function() {\n          io.set('match origin protocol', true);\n        });\n\n* **验证 web.config 设置**\n\n    托管 Node.js 应用程序的 Azure Web 应用使用 **web.config** 文件将传入请求路由到 Node.js 应用程序。为了使 Websocket 对 Node.js 应用程序正常运行，**web.config** 必须包含以下条目。\n\n        <webSocket enabled=\"false\"/>\n\n    这将禁用 IIS Websocket 模块，其中包括自身的 Websocket 实施以及与 Node.js 特定 WebSocket 模块（如 Socket.IO）的冲突。如果此行不存在，或者设置为 `true`，其原因主要是 WebSocket 传输不适用于你的应用程序。\n\n    Node.js 应用程序通常不包括 **web.config** 文件，因此 Azure Web 应用将在部署 Node.js 应用程序时自动生成一个。由于此文件是在服务器上自动生成的，因此必须使用 Web 应用的 FTP 或 FTPS URL 来查看此文件。你可以通过选择你的 Web 应用，然后选择“仪表板”链接，在 Azure 管理门户中查找 Web 应用的 FTP 和 FTPS URL。URL 将显示在“速览”部分。\n\n    > [AZURE.NOTE]如果应用程序未提供 **web.config** 文件，则该文件将仅由 Azure Web 应用生成。如果在应用程序项目的根目录下提供了 **web.config** 文件，则 Azure Web 应用将使用该文件。\n\n    如果该条目不存在，或者已设置为值 `true`，则你应在 Node.js 应用程序的根目录中创建 **web.config** 并指定值 `false`。例如，使用 **app.js** 作为入口点的应用程序的默认 **web.config** 如下所示。\n\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <!--\n             This configuration file is required if iisnode is used to run node processes behind\n             IIS or IIS Express.  For more information, visit:\n\n             https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config\n        -->\n\n        <configuration>\n          <system.webServer>\n            <!-- Visit http://blogs.msdn.com/b/windowsazure/archive/2013/11/14/introduction-to-websockets-on-windows-azure-web-sites.aspx for more information on WebSocket support -->\n            <webSocket enabled=\"false\" />\n            <handlers>\n              <!-- Indicates that the server.js file is a node.js web app to be handled by the iisnode module -->\n              <add name=\"iisnode\" path=\"app.js\" verb=\"*\" modules=\"iisnode\"/>\n            </handlers>\n            <rewrite>\n              <rules>\n                <!-- Do not interfere with requests for node-inspector debugging -->\n                <rule name=\"NodeInspector\" patternSyntax=\"ECMAScript\" stopProcessing=\"true\">\n                  <match url=\"^app.js\\/debug[\\/]?\" />\n                </rule>\n\n                <!-- First we consider whether the incoming URL matches a physical file in the /public folder -->\n                <rule name=\"StaticContent\">\n                  <action type=\"Rewrite\" url=\"public{REQUEST_URI}\"/>\n                </rule>\n\n                <!-- All other URLs are mapped to the node.js web app entry point -->\n                <rule name=\"DynamicContent\">\n                  <conditions>\n                    <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"True\"/>\n                  </conditions>\n                  <action type=\"Rewrite\" url=\"app.js\"/>\n                </rule>\n              </rules>\n            </rewrite>\n            <!--\n              You can control how Node is hosted within IIS using the following options:\n                * watchedFiles: semi-colon separated list of files that will be watched for changes to restart the server\n                * node_env: will be propagated to node as NODE_ENV environment variable\n                * debuggingEnabled - controls whether the built-in debugger is enabled\n\n              See https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config for a full list of options\n            -->\n            <!--<iisnode watchedFiles=\"web.config;*.js\"/>-->\n          </system.webServer>\n        </configuration>\n\n    如果你的应用程序使用的入口点不是 **app.js**，你必须将出现的所有 **app.js** 替换为正确的入口点。例如，将 **app.js** 替换为 **server.js**。\n\n##后续步骤\n\n在本教程中，你已学习如何创建一个在 Azure 中托管的聊天应用程序。您还可以将该应用程序作为 Azure 云服务托管。有关如何实现此目的的步骤，请参阅[在 Azure 云服务中使用 Socket.IO 构建 Node.js 聊天应用程序][cloudservice]。\n\n[socketio]: http://socket.io/\n[completed-app]: ./media/web-sites-nodejs-chat-app-socketio/websitesocketcomplete.png\n[Socket.IO GitHub 存储库]: https://github.com/Automattic/socket.io\n[release]: https://github.com/Automattic/socket.io/releases\n[cloudservice]: /documentation/articles/cloud-services-nodejs-chat-app-socketio/\n\n[chat-example-view]: ./media/web-sites-nodejs-chat-app-socketio/socketio-2.png\n[npm-output]: ./media/web-sites-nodejs-chat-app-socketio/socketio-7.png\n[pricing]: /home/features/web-site/#price\n \n\n<!---HONumber=Mooncake_1207_2015-->"
}