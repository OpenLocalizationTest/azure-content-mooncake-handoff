{
  "nodes": [
    {
      "pos": [
        3,
        54
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add-select-images\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>更新快速启动客户端应用以捕获和上载图像"
    },
    {
      "content": "在 Visual Studio 中，打开 Package.appxmanifest 文件，并在“功能”选项卡中启用“网络摄像机”和“麦克风”功能。",
      "pos": [
        59,
        132
      ]
    },
    {
      "content": "这样可以确保您的应用能够使用连接到计算机的相机。应用第一次运行时，将请求用户允许对相机进行访问。",
      "pos": [
        248,
        296
      ]
    },
    {
      "pos": [
        301,
        369
      ],
      "content": "打开 MainPage.xaml 文件，并将第一个 <bpt id=\"p1\">**</bpt>Task<ept id=\"p1\">**</ept> 元素之后紧邻的 <bpt id=\"p2\">**</bpt>StackPanel<ept id=\"p2\">**</ept> 元素替换为以下代码："
    },
    {
      "pos": [
        822,
        869
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>DataTemplate<ept id=\"p1\">**</ept> 中的 <bpt id=\"p2\">**</bpt>StackPanel<ept id=\"p2\">**</ept> 元素替换为以下代码："
    },
    {
      "pos": [
        1303,
        1361
      ],
      "content": "这样可将图像添加到 <bpt id=\"p1\">**</bpt>ItemTemplate<ept id=\"p1\">**</ept>，并将其绑定源设置为 Blob 存储服务中已上载图像的 URI。"
    },
    {
      "pos": [
        1366,
        1409
      ],
      "content": "打开 MainPage.xaml.cs 项目文件并添加以下 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句："
    },
    {
      "content": "在 TodoItem 类中，添加以下属性：",
      "pos": [
        1626,
        1647
      ]
    },
    {
      "pos": [
        2093,
        2339
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要将新属性添加到 JavaScript 后端移动服务中的 TodoItem 对象，你必须在你的移动服务中启用动态架构。启用动态架构时，新列自动添加到映射到这些新属性的 TodoItem 表。有关 .NET 后端移动服务的更多信息，请参阅<bpt id=\"p1\">[</bpt>如何对 .NET 后端移动服务进行数据模型更改<ept id=\"p1\">](/documentation/articles/mobile-services-dotnet-backend-how-to-use-code-first-migrations)</ept>。"
    },
    {
      "content": "在 MainPage 类中，添加以下代码：",
      "pos": [
        2344,
        2365
      ]
    },
    {
      "content": "这段代码显示用于拍摄图像的相机界面，并将图像保存到存储文件。",
      "pos": [
        2818,
        2848
      ]
    },
    {
      "pos": [
        2853,
        2886
      ],
      "content": "将现有的  <ph id=\"ph1\">`InsertTodoItem`</ph> 方法替换为以下代码："
    },
    {
      "content": "这段代码可向移动服务发送插入新 TodoItem 的请求，包括图像文件名。响应包含 SAS，用于将图像插入 Blob 存储中，还包含用于数据绑定的图像的 URI。",
      "pos": [
        5020,
        5101
      ]
    },
    {
      "content": "最后一个步骤是测试应用并验证上载是否成功。",
      "pos": [
        5103,
        5124
      ]
    },
    {
      "pos": [
        5137,
        5170
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"test\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>测试在你的应用程序中上载图像"
    },
    {
      "content": "在 Visual Studio 中，按 F5 键运行应用程序。",
      "pos": [
        5175,
        5206
      ]
    },
    {
      "content": "在“插入 TodoItem”下的文本框中输入文本，然后单击“照片”。",
      "pos": [
        5211,
        5245
      ]
    },
    {
      "content": "这样可以显示相机的拍照 UI。",
      "pos": [
        5363,
        5378
      ]
    },
    {
      "content": "单击图像以拍摄照片，然后单击“确定”。",
      "pos": [
        5383,
        5402
      ]
    },
    {
      "content": "单击“上载”可插入新项并上载图像。",
      "pos": [
        5521,
        5538
      ]
    },
    {
      "content": "新项和已上载图像都显示在列表视图中。",
      "pos": [
        5656,
        5674
      ]
    },
    {
      "pos": [
        5789,
        5874
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>新项的 <ph id=\"ph2\">&lt;code&gt;</ph><ph id=\"ph3\">imageUri</ph><ph id=\"ph4\">&lt;/code&gt;</ph> 属性绑定到<ph id=\"ph5\">&lt;strong&gt;</ph>图像<ph id=\"ph6\">&lt;/strong&gt;</ph>控件时，将从 Blob 存储服务自动下载图像。"
    }
  ],
  "content": "## <a name=\"add-select-images\"></a>更新快速启动客户端应用以捕获和上载图像\n\n1. 在 Visual Studio 中，打开 Package.appxmanifest 文件，并在“功能”选项卡中启用“网络摄像机”和“麦克风”功能。\n\n    ![](./media/mobile-services-windows-store-dotnet-upload-to-blob-storage/mobile-app-manifest-camera.png)\n \n    这样可以确保您的应用能够使用连接到计算机的相机。应用第一次运行时，将请求用户允许对相机进行访问。\n\n1. 打开 MainPage.xaml 文件，并将第一个 **Task** 元素之后紧邻的 **StackPanel** 元素替换为以下代码：\n\n        <StackPanel Orientation=\"Horizontal\" Margin=\"72,0,0,0\">\n            <TextBox Name=\"TextInput\" Margin=\"5\" MaxHeight=\"40\" MinWidth=\"300\"></TextBox>\n            <Button Name=\"btnTakePhoto\" Style=\"{StaticResource PhotoAppBarButtonStyle}\"\n                    Click=\"OnTakePhotoClick\" />\n            <Button Name=\"ButtonSave\" Style=\"{StaticResource UploadAppBarButtonStyle}\" \n                    Click=\"ButtonSave_Click\"/>\n        </StackPanel>\n\n2. 将 **DataTemplate** 中的 **StackPanel** 元素替换为以下代码：\n\n        <StackPanel Orientation=\"Vertical\">\n            <CheckBox Name=\"CheckBoxComplete\" IsChecked=\"{Binding Complete, Mode=TwoWay}\" \n                        Checked=\"CheckBoxComplete_Checked\" Content=\"{Binding Text}\" \n                        Margin=\"10,5\" VerticalAlignment=\"Center\"/>\n            <Image Name=\"ImageUpload\" Source=\"{Binding ImageUri, Mode=OneWay}\"\n                    MaxHeight=\"250\"/>\n        </StackPanel> \n\n    这样可将图像添加到 **ItemTemplate**，并将其绑定源设置为 Blob 存储服务中已上载图像的 URI。\n\n3. 打开 MainPage.xaml.cs 项目文件并添加以下 **using** 语句：\n    \n        using Windows.Media.Capture;\n        using Windows.Storage;\n        using Windows.UI.Popups;\n        using Microsoft.WindowsAzure.Storage.Auth;\n        using Microsoft.WindowsAzure.Storage.Blob;\n    \n4. 在 TodoItem 类中，添加以下属性：\n\n        [JsonProperty(PropertyName = \"containerName\")]\n        public string ContainerName { get; set; }\n        \n        [JsonProperty(PropertyName = \"resourceName\")]\n        public string ResourceName { get; set; }\n        \n        [JsonProperty(PropertyName = \"sasQueryString\")]\n        public string SasQueryString { get; set; }\n        \n        [JsonProperty(PropertyName = \"imageUri\")]\n        public string ImageUri { get; set; } \n\n    >[AZURE.NOTE]若要将新属性添加到 JavaScript 后端移动服务中的 TodoItem 对象，你必须在你的移动服务中启用动态架构。启用动态架构时，新列自动添加到映射到这些新属性的 TodoItem 表。有关 .NET 后端移动服务的更多信息，请参阅[如何对 .NET 后端移动服务进行数据模型更改](/documentation/articles/mobile-services-dotnet-backend-how-to-use-code-first-migrations)。\n\n5. 在 MainPage 类中，添加以下代码：\n\n        // Use a StorageFile to hold the captured image for upload.\n        StorageFile media = null;\n        \n        private async void OnTakePhotoClick(object sender, RoutedEventArgs e)\n        {\n            // Capture a new photo or video from the device.\n            CameraCaptureUI cameraCapture = new CameraCaptureUI();\n            media = await cameraCapture\n                .CaptureFileAsync(CameraCaptureUIMode.PhotoOrVideo);\n        }\n\n    这段代码显示用于拍摄图像的相机界面，并将图像保存到存储文件。\n\n6. 将现有的  `InsertTodoItem` 方法替换为以下代码：\n \n        private async void InsertTodoItem(TodoItem todoItem)\n        {\n            string errorString = string.Empty;\n            \n            if (media != null)\n            {\n                // Set blob properties of TodoItem.\n                todoItem.ContainerName = \"todoitemimages\";\n                todoItem.ResourceName = media.Name;\n            }\n            \n            // Send the item to be inserted. When blob properties are set this\n            // generates an SAS in the response.\n            await todoTable.InsertAsync(todoItem);\n            \n            // If we have a returned SAS, then upload the blob.\n            if (!string.IsNullOrEmpty(todoItem.SasQueryString))\n            {\n                // Get the URI generated that contains the SAS \n                // and extract the storage credentials.\n                StorageCredentials cred = new StorageCredentials(todoItem.SasQueryString);\n                var imageUri = new Uri(todoItem.ImageUri);\n                \n                // Instantiate a Blob store container based on the info in the returned item.\n                CloudBlobContainer container = new CloudBlobContainer(\n                    new Uri(string.Format(\"https://{0}/{1}\",\n                        imageUri.Host, todoItem.ContainerName)), cred);\n\n                // Get the new image as a stream.\n                using (var fileStream = await media.OpenStreamForReadAsync())\n                {                                       \n                    // Upload the new image as a BLOB from the stream.\n                    CloudBlockBlob blobFromSASCredential =\n                        container.GetBlockBlobReference(todoItem.ResourceName);\n                    await blobFromSASCredential.UploadFromStreamAsync(fileStream.AsInputStream());\n                }\n                \n                // When you request an SAS at the container-level instead of the blob-level,\n                // you are able to upload multiple streams using the same container credentials.\n            }\n            \n            // Add the new item to the collection.\n            items.Add(todoItem);\n        }\n\n    这段代码可向移动服务发送插入新 TodoItem 的请求，包括图像文件名。响应包含 SAS，用于将图像插入 Blob 存储中，还包含用于数据绑定的图像的 URI。\n\n最后一个步骤是测试应用并验证上载是否成功。\n        \n## <a name=\"test\"></a>测试在你的应用程序中上载图像\n\n1. 在 Visual Studio 中，按 F5 键运行应用程序。\n\n2. 在“插入 TodoItem”下的文本框中输入文本，然后单击“照片”。\n\n    ![](./media/mobile-services-windows-store-dotnet-upload-to-blob-storage/mobile-quickstart-blob-appbar.png)\n\n    这样可以显示相机的拍照 UI。\n\n3. 单击图像以拍摄照片，然后单击“确定”。\n  \n    ![](./media/mobile-services-windows-store-dotnet-upload-to-blob-storage/mobile-quickstart-blob-camera.png)\n\n4. 单击“上载”可插入新项并上载图像。\n\n    ![](./media/mobile-services-windows-store-dotnet-upload-to-blob-storage/mobile-quickstart-blob-appbar2.png)\n\n5. 新项和已上载图像都显示在列表视图中。\n\n    ![](./media/mobile-services-windows-store-dotnet-upload-to-blob-storage/mobile-quickstart-blob-ie.png)\n\n    >[AZURE.NOTE]新项的 <code>imageUri</code> 属性绑定到<strong>图像</strong>控件时，将从 Blob 存储服务自动下载图像。\n\n<!---HONumber=74-->"
}