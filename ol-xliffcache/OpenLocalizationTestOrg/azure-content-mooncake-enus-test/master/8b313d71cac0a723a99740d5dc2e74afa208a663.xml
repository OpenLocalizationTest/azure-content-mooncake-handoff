{
  "nodes": [
    {
      "content": "Azure 移动服务和 Sencha 入门",
      "pos": [
        27,
        48
      ]
    },
    {
      "content": "请按照本教程来开始使用移动服务和 Sencha HTML5 移动应用程序框架进行开发。",
      "pos": [
        67,
        110
      ]
    },
    {
      "pos": [
        330,
        381
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"getting-started\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>移动服务和 Sencha Touch 入门"
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        483,
        489
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        598,
        604
      ]
    },
    {
      "content": "概述",
      "pos": [
        695,
        697
      ]
    },
    {
      "pos": [
        699,
        871
      ],
      "content": "本教程演示了如何在您的 Sencha Touch 应用程序中利用 Azure 移动服务。使用可利用你通过 Azure 经典门户定义的移动服务的 Sencha Touch，来创建一个简单的<bpt id=\"p1\">*</bpt>待办事项列表<ept id=\"p1\">*</ept>应用。本教程适用于中级到高级的 Web 应用程序开发人员，这些开发人员非常了解 JavaScript 并熟悉 Sencha Touch 框架。"
    },
    {
      "content": "下面显示的是完成的应用程序的屏幕快照：",
      "pos": [
        874,
        893
      ]
    },
    {
      "content": "要求",
      "pos": [
        906,
        908
      ]
    },
    {
      "pos": [
        912,
        998
      ],
      "content": "下载并安装 <bpt id=\"p1\">[</bpt>Sencha Touch<ept id=\"p1\">](http://wwww.sencha.com/products/touch/download\"target=\"\\_blank\")</ept>。"
    },
    {
      "pos": [
        1002,
        1095
      ],
      "content": "下载并安装 <bpt id=\"p1\">[</bpt>Sencha Cmd Tool<ept id=\"p1\">](http://www.sencha.com/products/sencha-cmd/download\"target=\"\\_blank\")</ept>。"
    },
    {
      "content": "Java Runtime Environment (JRE) 或 Java 开发工具包（如果您创建 Android 应用程序）",
      "pos": [
        1099,
        1162
      ]
    },
    {
      "content": "Ruby 和 SASS gem。",
      "pos": [
        1165,
        1181
      ]
    },
    {
      "pos": [
        1187,
        1228
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-new-service\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>创建新的移动服务"
    },
    {
      "content": "创建 TodoItems 表",
      "pos": [
        1338,
        1352
      ]
    },
    {
      "content": "创建移动服务后，你可以在 Azure 经典门户中按照简单的快速入门来创建一个新数据库表，以便在该移动服务中使用。",
      "pos": [
        1354,
        1410
      ]
    },
    {
      "pos": [
        1415,
        1454
      ],
      "content": "在 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 经典门户]</ept>中单击“移动服务”，然后单击你刚刚创建的移动服务。"
    },
    {
      "content": "在快速启动选项卡中，单击“选择平台”下的“HTML”，然后展开“创建新的 HTML 应用程序”。",
      "pos": [
        1459,
        1507
      ]
    },
    {
      "content": "移动快速入门 HTML",
      "pos": [
        1515,
        1526
      ]
    },
    {
      "content": "此时将显示三个简单步骤，描述如何创建和托管与移动服务连接的 HTML 应用程序。",
      "pos": [
        1619,
        1659
      ]
    },
    {
      "content": "移动快速入门 HTML",
      "pos": [
        1667,
        1678
      ]
    },
    {
      "content": "单击“创建 TodoItem 表”以创建用于存储应用程序数据的表。",
      "pos": [
        1769,
        1802
      ]
    },
    {
      "pos": [
        1810,
        1885
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>不要从 Azure 经典门户下载 HTML 应用。相反，我们将在下面的部分中手动创建一个 Sencha Touch 应用程序。"
    },
    {
      "pos": [
        1891,
        1948
      ],
      "content": "记下 Azure 经典门户中的 <bpt id=\"p1\">**</bpt>appKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>appUrl<ept id=\"p2\">**</ept>。您将在本教程的其他部分中使用它们。"
    },
    {
      "content": "应用程序密钥",
      "pos": [
        1956,
        1962
      ]
    },
    {
      "pos": [
        2046,
        2149
      ],
      "content": "在“配置”选项卡中，验证 是否已列在“跨域资源共享(CORS)”下的“允许来自以下主机名的请求”列表中<ph id=\"ph1\">`localhost`</ph>。如果未列出，请在“主机名”字段中键入 <ph id=\"ph2\">`localhost`</ph>，然后单击“保存”。"
    },
    {
      "content": "为 localhost 设置 CORS",
      "pos": [
        2157,
        2176
      ]
    },
    {
      "content": "生成您的 Touch 应用程序",
      "pos": [
        2273,
        2288
      ]
    },
    {
      "content": "使用 Sencha Cmd 可轻松地生成 Sencha Touch 模板应用程序，同时它也是快速启动和运行应用程序的绝佳方式。",
      "pos": [
        2290,
        2353
      ]
    },
    {
      "content": "从安装了 Touch 框架的目录发出以下命令：",
      "pos": [
        2355,
        2378
      ]
    },
    {
      "content": "这将生成一个名为“Basic”的 Touch 模板应用程序。若要启动您的应用程序，只需将您的浏览器指向目录 /path/to/application，然后将显示标准的 Touch 示例应用程序。",
      "pos": [
        2434,
        2531
      ]
    },
    {
      "content": "安装 Sencha Touch Extensions for Azure",
      "pos": [
        2536,
        2572
      ]
    },
    {
      "content": "可手动安装 Azure 扩展或将其作为 Sencha 包进行安装。所使用的方法完全由您决定。",
      "pos": [
        2574,
        2620
      ]
    },
    {
      "content": "手动安装",
      "pos": [
        2626,
        2630
      ]
    },
    {
      "content": "在大多数 Touch 应用程序中，如果您希望添加类的外部库，则只需下载 Sencha 包、在应用程序目录中解压缩它并在该库的位置配置 Touch 加载程序。",
      "pos": [
        2632,
        2710
      ]
    },
    {
      "content": "您可以使用以下步骤手动将 Azure 扩展添加到您的应用程序：",
      "pos": [
        2712,
        2743
      ]
    },
    {
      "pos": [
        2748,
        2873
      ],
      "content": "从<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](https://market.sencha.com/extensions/sencha-extensions-for-microsoft-azure)</ept>下载 Azure 扩展包。（您可能会使用自己的 Sencha 论坛 ID 访问此区域。）"
    },
    {
      "content": "将该 Azure 扩展包从下载目录复制到您最终希望放置和解压缩它的位置：",
      "pos": [
        2878,
        2914
      ]
    },
    {
      "pos": [
        3027,
        3084
      ],
      "content": "这将创建包含整个程序包源、示例和文档的 <bpt id=\"p1\">**</bpt>azure<ept id=\"p1\">**</ept> 目录。该源将位于 <bpt id=\"p2\">**</bpt>azure/src<ept id=\"p2\">**</ept> 目录中。"
    },
    {
      "content": "作为 Sencha 包安装",
      "pos": [
        3091,
        3104
      ]
    },
    {
      "pos": [
        3108,
        3178
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>只有在使用 <ph id=\"ph2\">&lt;code&gt;</ph><ph id=\"ph3\">sencha generate app</ph><ph id=\"ph4\">&lt;/code&gt;</ph> 命令生成了应用程序时，才能使用此方法。"
    },
    {
      "content": "所有由 Sencha Cmd 生成的应用程序在根目录下都具有一个“packages”文件夹。可以配置“packages”文件夹的位置，但不管其位置如何，您的应用程序（或多个应用程序，如果您已创建 Sencha 工作区）都可以将该文件夹用于存储所有程序包。",
      "pos": [
        3180,
        3307
      ]
    },
    {
      "pos": [
        3309,
        3466
      ],
      "content": "由于 Ext.Azure 是 Sencha Cmd“包”，因此使用 Sencha Cmd 可轻松地安装源代码并将其包括在应用程序中。（有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Sencha Cmd 包<ept id=\"p1\">](http://docs.sencha.com/cmd/6.x/cmd_packages/cmd_packages.html)</ept>）。"
    },
    {
      "pos": [
        3468,
        3540
      ],
      "content": "若要从 Sencha 包存储库下载和安装 Azure 扩展包，你需要将程序包的名称添加到你的 <bpt id=\"p1\">**</bpt>app.json<ept id=\"p1\">**</ept> 文件并生成你的应用程序："
    },
    {
      "content": "将 Azure 包添加到需要 app.json 文件的部分：",
      "pos": [
        3545,
        3575
      ]
    },
    {
      "pos": [
        3704,
        3743
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>sencha cmd<ept id=\"p1\">**</ept> 重新生成你的应用程序以提取和安装该程序包："
    },
    {
      "pos": [
        3773,
        3912
      ],
      "content": "<bpt id=\"p1\">**</bpt>sencha app build<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>sencha app refresh<ept id=\"p2\">**</ept> 现在都将执行将程序包集成到你的应用程序所需的步骤。通常，在更改程序包的要求之后，你将需要运行 <bpt id=\"p3\">**</bpt>sencha app refresh<ept id=\"p3\">**</ept>，以便支持“开发人员模式”所需的元数据是最新的。"
    },
    {
      "content": "无论运行哪个命令，Sencha Cmd 都会将程序包下载到“packages”文件夹并将其展开。完成此操作后，您可以在工作区中找到“packages/touch-azure”文件夹。",
      "pos": [
        3914,
        4005
      ]
    },
    {
      "content": "包括并配置 Azure",
      "pos": [
        4010,
        4021
      ]
    },
    {
      "pos": [
        4023,
        4037
      ],
      "content": "<bpt id=\"p1\">**</bpt>文件名<ept id=\"p1\">**</ept>：app.js"
    },
    {
      "content": "由于已下载了 Azure 扩展并将其安装在您的应用程序目录下，下一步则要告知您的应用程序查找源文件的位置以及需要这些文件的位置：",
      "pos": [
        4039,
        4103
      ]
    },
    {
      "content": "使用源代码的位置配置 Sencha 加载程序：",
      "pos": [
        4108,
        4131
      ]
    },
    {
      "content": "需要 Azure 类文件：",
      "pos": [
        4366,
        4379
      ]
    },
    {
      "content": "配置 Azure：",
      "pos": [
        4491,
        4500
      ]
    },
    {
      "pos": [
        4506,
        4595
      ],
      "content": "通过调用应用程序的启动部分中的 <bpt id=\"p1\">**</bpt>Ext.Azure.init<ept id=\"p1\">**</ept> 方法来初始化 Azure 包。此方法将传递一个配置对象，该对象包含移动服务凭据以及需要使用的其他凭据和功能。"
    },
    {
      "pos": [
        4601,
        4712
      ],
      "content": "虽然你可以将配置对象直接传递给 init 方法，但我们建议创建一个名为 <bpt id=\"p1\">**</bpt>azure<ept id=\"p1\">**</ept> 的 Sencha 应用程序配置属性，并将所有相应信息都放入其中。然后，可以将此属性的值传递给 Ext.Azure.init 方法。"
    },
    {
      "pos": [
        4718,
        4870
      ],
      "content": "当你在 Azure 中创建移动服务时（请参阅 <bpt id=\"p1\">[</bpt>Azure 入门<ept id=\"p1\">](http://senchaazuredocs.azurewebsites.net/#!/guide/getting_started)</ept>），将应用程序密钥和 URL 分配给该服务。必须向 Azure 包提供此信息，以便它可以连接到您的服务。"
    },
    {
      "content": "此示例演示了在仅提供应用程序密钥和 URL 时进行的非常简单的 Azure 配置和初始化：",
      "pos": [
        4876,
        4921
      ]
    },
    {
      "content": "有关 Azure 配置选项的详细信息，请参阅 Ext.Azure API 文档。",
      "pos": [
        5343,
        5383
      ]
    },
    {
      "content": "祝贺你！ 您的应用程序现在应该可以访问您的移动服务。",
      "pos": [
        5386,
        5412
      ]
    },
    {
      "content": "生成 ToDo 应用程序",
      "pos": [
        5417,
        5429
      ]
    },
    {
      "content": "由于我们已将您的应用程序配置为包含 Azure 扩展，并向其提供了您的移动服务凭据，因此接下来我们可以创建一个可使用移动服务的 Touch 应用程序，以便查看和编辑存储在该服务中的 ToDo 列表数据。",
      "pos": [
        5431,
        5532
      ]
    },
    {
      "content": "配置 Azure 数据代理",
      "pos": [
        5538,
        5551
      ]
    },
    {
      "pos": [
        5553,
        5582
      ],
      "content": "<bpt id=\"p1\">**</bpt>文件名：<ept id=\"p1\">**</ept>app/model/TodoItem.js"
    },
    {
      "content": "Touch 应用程序可通过数据代理与移动服务进行通信。此代理执行将请求发送到移动服务和从移动服务接收数据的所有工作。如果将 Touch 应用程序与 Touch 数据模型和存储结合使用，则可以免去处理远程数据和将其获取到您的应用程序中的所有繁琐工作，Touch 将自行处理这些工作。",
      "pos": [
        5584,
        5724
      ]
    },
    {
      "content": "Sencha Touch 模型提供了您将在应用程序中使用的数据记录的定义。它们不仅允许您定义数据字段，而且还提供有关处理应用程序与 Azure 移动服务之间通信的代理的配置。",
      "pos": [
        5726,
        5813
      ]
    },
    {
      "content": "在下面的代码中您可以看到我们不仅为该模型定义字段（及其类型），还提供代理配置。当配置您的代理时，您需要为其提供类型（本例中为“azure”）、移动服务表名 (ToDoItem) 和其他可选参数。在此示例中，我们将启用代理分页，以便我们可以通过列表项无缝地向前和向后翻页。",
      "pos": [
        5815,
        5950
      ]
    },
    {
      "content": "Azure 代理会按照 Azure API 所预期的相应 CRUD 操作（包括身份验证凭据，如果它们存在）自动设置所有 HTTP 标头。",
      "pos": [
        5952,
        6020
      ]
    },
    {
      "content": "存储 ToDo 项",
      "pos": [
        6808,
        6817
      ]
    },
    {
      "pos": [
        6820,
        6851
      ],
      "content": "<bpt id=\"p1\">**</bpt>文件名<ept id=\"p1\">**</ept>: app/store/TodoItems.js"
    },
    {
      "content": "Sencha Touch 存储可用于存储用作 Touch 组件的源的数据记录（模型）的集合，以便以各种不同的方式显示这些记录。这可能包括网格、图表、列表等等。",
      "pos": [
        6853,
        6932
      ]
    },
    {
      "content": "此处，我们定义一个存储，用于保存从 Azure 移动服务检索到的所有存储 ToDo 列表项。请注意，此存储配置包含模型类型（Basic.model.TodoItem - 已在上面定义）的名称。这定义了该存储中所包含的记录的结构。",
      "pos": [
        6934,
        7048
      ]
    },
    {
      "content": "我们还有一些其他存储配置选项（如指定页的大小（8 个记录）），而且通过 Azure 移动服务远程完成对此存储的记录的排序（无法以本地方式在存储本身内进行排序）。",
      "pos": [
        7050,
        7130
      ]
    },
    {
      "content": "查看和编辑 ToDo 项",
      "pos": [
        7467,
        7479
      ]
    },
    {
      "pos": [
        7481,
        7510
      ],
      "content": "<bpt id=\"p1\">**</bpt>文件名<ept id=\"p1\">**</ept>： app/view/DataItem.js"
    },
    {
      "content": "由于我们已定义了每个 ToDo 项的结构并且已创建了存储来放置所有记录，因此应考虑希望如何向应用程序的用户显示此信息。我们通常通过使用“视图”向用户显示信息。视图可以是任意数量的 Touch 组件之一，可单独使用或与其他元素组合使用。",
      "pos": [
        7512,
        7629
      ]
    },
    {
      "content": "下面的视图由 ListItem 组成，它定义每个记录以及某些按钮的显示方式，这些按钮将容纳删除每个项的操作。",
      "pos": [
        7631,
        7685
      ]
    },
    {
      "content": "创建您的主视图",
      "pos": [
        9311,
        9318
      ]
    },
    {
      "pos": [
        9320,
        9344
      ],
      "content": "<bpt id=\"p1\">**</bpt>文件名<ept id=\"p1\">**</ept>：app/view/Main.js"
    },
    {
      "content": "由于我们已定义了单独的 ToDo 列表项（如上所示）的布局，因此我们希望在列表周围环绕一个完整的用户界面，该列表定义项的实际列表、应用程序标题和用于添加新任务的按钮。",
      "pos": [
        9346,
        9429
      ]
    },
    {
      "content": "使一切协同工作",
      "pos": [
        11164,
        11171
      ]
    },
    {
      "pos": [
        11173,
        11203
      ],
      "content": "<bpt id=\"p1\">**</bpt>文件名<ept id=\"p1\">**</ept>：app/controller/Main.js"
    },
    {
      "content": "我们的应用程序中的最后一步是对按钮按下（删除、保存等）做出响应，并提供所有这些请求背后的逻辑。Sencha Touch 使用可侦听这些事件并做出相应响应的控制器。",
      "pos": [
        11205,
        11286
      ]
    },
    {
      "content": "将其放在一起",
      "pos": [
        16935,
        16941
      ]
    },
    {
      "pos": [
        16943,
        16958
      ],
      "content": "<bpt id=\"p1\">**</bpt>文件名<ept id=\"p1\">**</ept>: app.js"
    },
    {
      "content": "我们的最后一个步骤是完成编辑主应用程序文件，并提供有关已定义的模型、存储、视图和控制器的信息。这些资源的源文件会自动加载到应用程序中。最后，调用 launch 方法，它创建并显示主应用程序视图“Basic.main.View”。",
      "pos": [
        16960,
        17074
      ]
    },
    {
      "content": "托管并运行 Sencha Touch 应用程序",
      "pos": [
        19097,
        19120
      ]
    },
    {
      "content": "本教程的最后一个阶段是在本地计算机上托管和运行您的新应用程序。",
      "pos": [
        19122,
        19153
      ]
    },
    {
      "content": "在您的终端中，浏览到您解压缩的应用程序的位置。",
      "pos": [
        19160,
        19183
      ]
    },
    {
      "content": "使用 Sencha Cmd，运行以下命令：",
      "pos": [
        19190,
        19211
      ]
    },
    {
      "content": "在 Web 浏览器中打开你的终端中列出的 URL，以启动该应用程序（例如 http://localhost:1841)）。",
      "pos": [
        19553,
        19614
      ]
    },
    {
      "content": "在应用程序中键入有意义的文本（例如 “完成此教程”），然后单击“添加”。",
      "pos": [
        19621,
        19657
      ]
    },
    {
      "pos": [
        19813,
        19856
      ],
      "content": "返回 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 经典门户]</ept>，单击“数据”选项卡，然后单击“TodoItems”表。"
    },
    {
      "content": "后续步骤",
      "pos": [
        20066,
        20070
      ]
    },
    {
      "content": "完成入门指南后，请了解如何通过 Sencha 在移动服务中执行其他重要任务。",
      "pos": [
        20071,
        20109
      ]
    },
    {
      "pos": [
        20111,
        20218
      ],
      "content": "<bpt id=\"p1\">[</bpt>下载<ept id=\"p1\">](https://github.com/arthurakay/sencha-touch-azure-example)</ept>具有其他样式和功能的已完成示例应用程序，以查看 Sencha Touch 还可以做些什么！"
    },
    {
      "content": "然后，深入了解有关 Sencha Touch Extensions for Azure 的详细信息：",
      "pos": [
        20220,
        20270
      ]
    },
    {
      "pos": [
        20276,
        20350
      ],
      "content": "示例应用程序<bpt id=\"p1\">[</bpt>演练<ept id=\"p1\">](http://docs.sencha.com/touch-azure/1.0.0/#!/guide/data_filters)</ept>"
    },
    {
      "pos": [
        20355,
        20402
      ],
      "content": "在 <bpt id=\"p1\">[</bpt>Sencha 论坛<ept id=\"p1\">](http://www.sencha.com/forum)</ept>中获得帮助"
    },
    {
      "pos": [
        20407,
        20446
      ],
      "content": "浏览 <bpt id=\"p1\">[</bpt>Sencha 文档<ept id=\"p1\">](http://docs.sencha.com/)</ept>"
    },
    {
      "pos": [
        20451,
        20587
      ],
      "content": "将 Sencha 与 Azure 移动服务配合使用：<bpt id=\"p1\">[</bpt>（视频）<ept id=\"p1\">](http://channel9.msdn.com/Shows/Cloud+Cover/Episode-126-Using-Sencha-With-Windows-Azure-Mobile-Services)</ept>"
    },
    {
      "content": "其他资源",
      "pos": [
        20593,
        20597
      ]
    },
    {
      "content": "下载 Sencha Touch",
      "pos": [
        20604,
        20619
      ]
    },
    {
      "content": "Sencha Touch Extensions for Azure",
      "pos": [
        20672,
        20705
      ]
    },
    {
      "content": "摘要",
      "pos": [
        20789,
        20791
      ]
    },
    {
      "content": "此处所述的示例在 Sencha Touch Extension for Azure 包中提供，并作为“基本数据”示例位于示例目录中。还提供了几个其他示例，它们演示了此扩展的其他功能以及详细的注释和说明。",
      "pos": [
        20793,
        20894
      ]
    },
    {
      "pos": [
        20896,
        20968
      ],
      "content": "有关 Sencha Touch 入门的详细信息，请访问整套<bpt id=\"p1\">[</bpt>指南<ept id=\"p1\">](http://docs.sencha.com/touch/#!/guide)</ept>"
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure 移动服务和 Sencha 入门\"\n    description=\"请按照本教程来开始使用移动服务和 Sencha HTML5 移动应用程序框架进行开发。\"\n    services=\"mobile-services\"\n    documentationCenter=\"\"\n    authors=\"ggailey777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.date=\"02/10/2016\"\n    wacn.date=\"03/21/2016\"/>\n\n#  <a name=\"getting-started\"></a>移动服务和 Sencha Touch 入门\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n[AZURE.INCLUDE [mobile-services-selector-get-started](../includes/mobile-services-selector-get-started.md)]\n&nbsp;\n\n[AZURE.INCLUDE [mobile-services-hero-slug](../includes/mobile-services-hero-slug.md)]\n\n##概述\n\n本教程演示了如何在您的 Sencha Touch 应用程序中利用 Azure 移动服务。使用可利用你通过 Azure 经典门户定义的移动服务的 Sencha Touch，来创建一个简单的*待办事项列表*应用。本教程适用于中级到高级的 Web 应用程序开发人员，这些开发人员非常了解 JavaScript 并熟悉 Sencha Touch 框架。\n\n\n下面显示的是完成的应用程序的屏幕快照：\n\n![][0]\n\n## 要求\n\n- 下载并安装 [Sencha Touch](http://wwww.sencha.com/products/touch/download\"target=\"\\_blank\")。\n\n- 下载并安装 [Sencha Cmd Tool](http://www.sencha.com/products/sencha-cmd/download\"target=\"\\_blank\")。\n\n- Java Runtime Environment (JRE) 或 Java 开发工具包（如果您创建 Android 应用程序）\n- Ruby 和 SASS gem。\n\n##  <a name=\"create-new-service\"></a>创建新的移动服务\n\n[AZURE.INCLUDE [mobile-services-create-new-service](../includes/mobile-services-create-new-service.md)]\n\n## 创建 TodoItems 表\n\n创建移动服务后，你可以在 Azure 经典门户中按照简单的快速入门来创建一个新数据库表，以便在该移动服务中使用。\n\n1. 在 [Azure 经典门户]中单击“移动服务”，然后单击你刚刚创建的移动服务。\n\n2. 在快速启动选项卡中，单击“选择平台”下的“HTML”，然后展开“创建新的 HTML 应用程序”。\n\n    ![移动快速入门 HTML](./media/partner-sencha-mobile-services-get-started/mobile-portal-quickstart-html.png)\n\n    此时将显示三个简单步骤，描述如何创建和托管与移动服务连接的 HTML 应用程序。\n\n    ![移动快速入门 HTML](./media/partner-sencha-mobile-services-get-started/mobile-quickstart-steps-html.png)\n\n3. 单击“创建 TodoItem 表”以创建用于存储应用程序数据的表。\n\n    > [AZURE.NOTE]不要从 Azure 经典门户下载 HTML 应用。相反，我们将在下面的部分中手动创建一个 Sencha Touch 应用程序。\n\n\n1. 记下 Azure 经典门户中的 **appKey** 和 **appUrl**。您将在本教程的其他部分中使用它们。\n\n    ![应用程序密钥](./media/partner-sencha-mobile-services-get-started/mobile-app-key-portal.png)\n\n1. 在“配置”选项卡中，验证 是否已列在“跨域资源共享(CORS)”下的“允许来自以下主机名的请求”列表中`localhost`。如果未列出，请在“主机名”字段中键入 `localhost`，然后单击“保存”。\n\n    ![为 localhost 设置 CORS](./media/partner-sencha-mobile-services-get-started/mobile-services-set-cors-localhost.png)\n\n## 生成您的 Touch 应用程序\n\n使用 Sencha Cmd 可轻松地生成 Sencha Touch 模板应用程序，同时它也是快速启动和运行应用程序的绝佳方式。\n\n从安装了 Touch 框架的目录发出以下命令：\n\n    $ sencha generate app Basic /path/to/application\n\n这将生成一个名为“Basic”的 Touch 模板应用程序。若要启动您的应用程序，只需将您的浏览器指向目录 /path/to/application，然后将显示标准的 Touch 示例应用程序。\n\n## 安装 Sencha Touch Extensions for Azure\n\n可手动安装 Azure 扩展或将其作为 Sencha 包进行安装。所使用的方法完全由您决定。\n\n### 手动安装\n\n在大多数 Touch 应用程序中，如果您希望添加类的外部库，则只需下载 Sencha 包、在应用程序目录中解压缩它并在该库的位置配置 Touch 加载程序。\n\n您可以使用以下步骤手动将 Azure 扩展添加到您的应用程序：\n\n1. 从[此处](https://market.sencha.com/extensions/sencha-extensions-for-microsoft-azure)下载 Azure 扩展包。（您可能会使用自己的 Sencha 论坛 ID 访问此区域。）\n\n2. 将该 Azure 扩展包从下载目录复制到您最终希望放置和解压缩它的位置：\n\n        $ cd /path/to/application\n        $ mv /download-location/azure.zip .\n        $ unzip azure.zip  \n\n    这将创建包含整个程序包源、示例和文档的 **azure** 目录。该源将位于 **azure/src** 目录中。\n\n\n### 作为 Sencha 包安装\n\n> [AZURE.NOTE]只有在使用 <code>sencha generate app</code> 命令生成了应用程序时，才能使用此方法。\n\n所有由 Sencha Cmd 生成的应用程序在根目录下都具有一个“packages”文件夹。可以配置“packages”文件夹的位置，但不管其位置如何，您的应用程序（或多个应用程序，如果您已创建 Sencha 工作区）都可以将该文件夹用于存储所有程序包。\n\n由于 Ext.Azure 是 Sencha Cmd“包”，因此使用 Sencha Cmd 可轻松地安装源代码并将其包括在应用程序中。（有关详细信息，请参阅 [Sencha Cmd 包](http://docs.sencha.com/cmd/6.x/cmd_packages/cmd_packages.html)）。\n\n若要从 Sencha 包存储库下载和安装 Azure 扩展包，你需要将程序包的名称添加到你的 **app.json** 文件并生成你的应用程序：\n\n1. 将 Azure 包添加到需要 app.json 文件的部分：\n\n        {\n            \"name\": \"Basic\",\n            \"requires\": [\n                \"touch-azure\"\n            ]\n        }\n    \n2. 使用 **sencha cmd** 重新生成你的应用程序以提取和安装该程序包：\n\n        $ sencha app build\n\n**sencha app build** 和 **sencha app refresh** 现在都将执行将程序包集成到你的应用程序所需的步骤。通常，在更改程序包的要求之后，你将需要运行 **sencha app refresh**，以便支持“开发人员模式”所需的元数据是最新的。\n\n无论运行哪个命令，Sencha Cmd 都会将程序包下载到“packages”文件夹并将其展开。完成此操作后，您可以在工作区中找到“packages/touch-azure”文件夹。\n\n## 包括并配置 Azure\n\n**文件名**：app.js\n\n由于已下载了 Azure 扩展并将其安装在您的应用程序目录下，下一步则要告知您的应用程序查找源文件的位置以及需要这些文件的位置：\n\n1. 使用源代码的位置配置 Sencha 加载程序：\n \n        Ext.Loader.setConfig({\n                    enabled : true,\n            paths   : {\n                'Ext'       : 'touch/src',\n                'Ext.azure' : '/path-to/azure-for-touch/azure/src'\n            }\n        });\n\n\n2. 需要 Azure 类文件：\n\n        Ext.application({\n\n            requires: [ 'Ext.azure.Azure' ],\n\n            // ...\n\n        });\n\n\n3. 配置 Azure：\n\n    通过调用应用程序的启动部分中的 **Ext.Azure.init** 方法来初始化 Azure 包。此方法将传递一个配置对象，该对象包含移动服务凭据以及需要使用的其他凭据和功能。\n\n    虽然你可以将配置对象直接传递给 init 方法，但我们建议创建一个名为 **azure** 的 Sencha 应用程序配置属性，并将所有相应信息都放入其中。然后，可以将此属性的值传递给 Ext.Azure.init 方法。\n\n    当你在 Azure 中创建移动服务时（请参阅 [Azure 入门](http://senchaazuredocs.azurewebsites.net/#!/guide/getting_started)），将应用程序密钥和 URL 分配给该服务。必须向 Azure 包提供此信息，以便它可以连接到您的服务。\n\n    此示例演示了在仅提供应用程序密钥和 URL 时进行的非常简单的 Azure 配置和初始化：\n\n        Ext.application({\n            name: 'Basic',\n\n            requires: [ 'Ext.azure.Azure' ],\n\n            azure: {\n                appKey: 'myazureservice-access-key',\n                appUrl: 'myazure-service.azure-mobile.net'\n            },\n\n            launch: function() {\n\n                // Call Azure initialization\n\n                Ext.Azure.init(this.config.azure);\n\n                }\n            });\n\n    有关 Azure 配置选项的详细信息，请参阅 Ext.Azure API 文档。\n\n\n祝贺你！ 您的应用程序现在应该可以访问您的移动服务。\n\n## 生成 ToDo 应用程序\n\n由于我们已将您的应用程序配置为包含 Azure 扩展，并向其提供了您的移动服务凭据，因此接下来我们可以创建一个可使用移动服务的 Touch 应用程序，以便查看和编辑存储在该服务中的 ToDo 列表数据。\n\n### 配置 Azure 数据代理\n\n**文件名：**app/model/TodoItem.js\n\nTouch 应用程序可通过数据代理与移动服务进行通信。此代理执行将请求发送到移动服务和从移动服务接收数据的所有工作。如果将 Touch 应用程序与 Touch 数据模型和存储结合使用，则可以免去处理远程数据和将其获取到您的应用程序中的所有繁琐工作，Touch 将自行处理这些工作。\n\nSencha Touch 模型提供了您将在应用程序中使用的数据记录的定义。它们不仅允许您定义数据字段，而且还提供有关处理应用程序与 Azure 移动服务之间通信的代理的配置。\n\n在下面的代码中您可以看到我们不仅为该模型定义字段（及其类型），还提供代理配置。当配置您的代理时，您需要为其提供类型（本例中为“azure”）、移动服务表名 (ToDoItem) 和其他可选参数。在此示例中，我们将启用代理分页，以便我们可以通过列表项无缝地向前和向后翻页。\n\nAzure 代理会按照 Azure API 所预期的相应 CRUD 操作（包括身份验证凭据，如果它们存在）自动设置所有 HTTP 标头。\n\n    Ext.define('Basic.model.TodoItem', {\n        extend : 'Ext.data.Model',\n\n        requires : [\n            'Ext.azure.Proxy'\n        ],\n\n        config : {\n            idProperty : 'id',\n            useCache   : false,\n\n            fields     : [\n                {\n                    name : 'id',\n                    type : 'int'\n                },\n                {\n                    name : 'text',\n                    type : 'string'\n                },\n                {\n                    name : 'complete',\n                    type : 'boolean'\n                }\n            ],\n\n            proxy : {\n                type               : 'azure',\n                tableName          : 'TodoItem',\n                enablePagingParams : true\n            }\n        }\n    });\n\n\n### 存储 ToDo 项 \n\n**文件名**: app/store/TodoItems.js\n\nSencha Touch 存储可用于存储用作 Touch 组件的源的数据记录（模型）的集合，以便以各种不同的方式显示这些记录。这可能包括网格、图表、列表等等。\n\n此处，我们定义一个存储，用于保存从 Azure 移动服务检索到的所有存储 ToDo 列表项。请注意，此存储配置包含模型类型（Basic.model.TodoItem - 已在上面定义）的名称。这定义了该存储中所包含的记录的结构。\n\n我们还有一些其他存储配置选项（如指定页的大小（8 个记录）），而且通过 Azure 移动服务远程完成对此存储的记录的排序（无法以本地方式在存储本身内进行排序）。\n\n    Ext.define('Basic.store.TodoItems', {\n        extend : 'Ext.data.Store',\n\n        requires : [\n            'Basic.model.TodoItem'\n        ],\n\n        config : {\n            model        : 'Basic.model.TodoItem',\n            pageSize     : 8,\n            remoteSort   : true,\n            remoteFilter : true\n        }\n    });\n\n\n### 查看和编辑 ToDo 项\n\n**文件名**： app/view/DataItem.js\n\n由于我们已定义了每个 ToDo 项的结构并且已创建了存储来放置所有记录，因此应考虑希望如何向应用程序的用户显示此信息。我们通常通过使用“视图”向用户显示信息。视图可以是任意数量的 Touch 组件之一，可单独使用或与其他元素组合使用。\n\n下面的视图由 ListItem 组成，它定义每个记录以及某些按钮的显示方式，这些按钮将容纳删除每个项的操作。\n\n    Ext.define('Basic.view.DataItem', {\n        extend : 'Ext.dataview.component.ListItem',\n        xtype  : 'basic-dataitem',\n\n        requires : [\n            'Ext.Button',\n            'Ext.layout.HBox',\n            'Ext.field.Checkbox'\n        ],\n\n        config : {\n            checkbox : {\n                docked     : 'left',\n                xtype      : 'checkboxfield',\n                width      : 50,\n                labelWidth : 0\n            },\n\n            text : {\n                flex : 1\n            },\n\n            button : {\n                docked   : 'right',\n                xtype    : 'button',\n                ui       : 'plain',\n                iconMask : true,\n                iconCls  : 'delete',\n                style    : 'color: red;'\n            },\n\n            dataMap : {\n                getText : {\n                    setHtml : 'text'\n                },\n\n                getCheckbox : {\n                    setChecked : 'complete'\n                }\n            },\n\n            layout : {\n                type : 'hbox',\n                align: 'stretch'\n            }\n        },\n\n        applyCheckbox : function(config) {\n            return Ext.factory(config, Ext.field.Checkbox, this.getCheckbox());\n        },\n\n        updateCheckbox : function (cmp) {\n            if (cmp) {\n                this.add(cmp);\n            }\n        },\n\n        applyButton : function(config) {\n            return Ext.factory(config, Ext.Button, this.getButton());\n        },\n\n        updateButton : function (cmp) {\n            if (cmp) {\n                this.add(cmp);\n            }\n        }\n\n    });\n\n\n### 创建您的主视图\n\n**文件名**：app/view/Main.js\n\n由于我们已定义了单独的 ToDo 列表项（如上所示）的布局，因此我们希望在列表周围环绕一个完整的用户界面，该列表定义项的实际列表、应用程序标题和用于添加新任务的按钮。\n\n    Ext.define('Basic.view.Main', {\n        extend : 'Ext.dataview.List',\n        xtype  : 'main',\n\n        requires : [\n            'Ext.TitleBar',\n            'Ext.dataview.List',\n            'Ext.data.Store',\n            'Ext.plugin.PullRefresh',\n            'Ext.plugin.ListPaging',\n            'Basic.view.DataItem'\n        ],\n\n        config : {\n            store : 'TodoItems',\n\n            useSimpleItems : false,\n            defaultType    : 'basic-dataitem',\n\n            plugins : [\n                {\n                    xclass          : 'Ext.plugin.PullRefresh',\n                    pullRefreshText : 'Pull down to refresh!'\n                },\n                {\n                    xclass     : 'Ext.plugin.ListPaging',\n                    autoPaging : true\n                }\n            ],\n\n            scrollable : {\n                direction     : 'vertical',\n                directionLock : true\n            },\n\n            items : [\n                {\n                    docked : 'top',\n                    xtype  : 'titlebar',\n                    title  : 'Azure Mobile - Basic Data Example'\n                },\n                {\n                    xtype  : 'toolbar',\n                    docked : 'bottom',\n                    items  : [\n                        {\n                            xtype       : 'textfield',\n                            placeHolder : 'Enter new task',\n                            flex        : 1\n                        },\n                        {\n                            xtype  : 'button',\n                            action : 'add',\n                            text   : 'Add'\n                        }\n                    ]\n                }\n            ]\n        }\n    });\n\n### 使一切协同工作\n\n**文件名**：app/controller/Main.js\n\n我们的应用程序中的最后一步是对按钮按下（删除、保存等）做出响应，并提供所有这些请求背后的逻辑。Sencha Touch 使用可侦听这些事件并做出相应响应的控制器。\n\n    Ext.define('Basic.controller.Main', {\n        extend : 'Ext.app.Controller',\n\n        config : {\n            refs : {\n                todoField : 'main toolbar textfield',\n                main      : 'main'\n            },\n\n            control : {\n                'button[action=add]'    : {\n                    tap : 'onAddItem'\n                },\n                'button[action=reload]' : {\n                    tap : 'onReload'\n                },\n\n                main : {\n                    activate      : 'loadInitialData',\n                    itemdoubletap : 'onItemEdit'\n                },\n\n                'basic-dataitem checkboxfield' : {\n                    change : 'onItemCompleteTap'\n                },\n\n                'basic-dataitem button' : {\n                    tap : 'onItemDeleteTap'\n                }\n            }\n        },\n\n        loadInitialData : function () {\n            Ext.getStore('TodoItems').load();\n        },\n\n        onItemDeleteTap : function (button, e, eOpts) {\n            var store    = Ext.getStore('TodoItems'),\n                dataItem = button.up('dataitem'),\n                rec      = dataItem.getRecord();\n\n            rec.erase({\n                success: function (rec, operation) {\n                    store.remove(rec);\n                },\n                failure: function (rec, operation) {\n                    Ext.Msg.alert(\n                        'Error',\n                        Ext.util.Format.format('There was an error deleting this task.<br/><br/>    Status Code: {0}<br/>Status Text: {1}', \n                        operation.error.status, \n                        operation.error.statusText)\n                    );\n                }\n            });\n        },\n\n        onItemCompleteTap : function (checkbox, newVal, oldVal, eOpts) {\n            var dataItem = checkbox.up('dataitem'),\n                rec      = dataItem.getRecord(),\n                recVal   = rec.get('complete');\n\n            // this check is needed to prevent an issue where multiple creates get triggered from one create\n            if (newVal !== recVal) {\n                rec.set('complete', newVal);\n                rec.save({\n                    success: function (rec, operation) {\n                        rec.commit();\n                    },\n                    failure: function (rec, operation) {\n                        // since there was a failure doing the update on the server then silently reject the change\n                        rec.reject(true);\n                        Ext.Msg.alert(\n                            'Error',\n                            Ext.util.Format.format('There was an error updating this task.<br/><br/>Status Code: {0}<br/>Status Text: {1}', \n                            operation.error.status, \n                            operation.error.statusText)\n                        );\n                    }\n                });\n            }\n        },\n\n        onItemEdit : function (list, index, target, record, e, eOpts) {\n            var rec = list.getSelection()[0];\n\n            Ext.Msg.prompt('Edit', 'Rename task',\n                function (buttonId, value) {\n                    if (buttonId === 'ok') {\n                        rec.set('text', value);\n                        rec.save({\n                            success: function (rec, operation) {\n                                rec.commit();\n                            },\n                            failure: function (rec, operation) {\n                                // since there was a failure doing the update on the server then reject the change\n                                rec.reject();\n                                Ext.Msg.alert(\n                                    'Error',\n                                    Ext.util.Format.format('There was an error updating this task.<br/><br/>Status Code: {0}<br/>Status Text: {1}', \n                                    operation.error.status, \n                                    operation.error.statusText)\n                                );\n                            }\n                        });\n                    }\n                },\n                null,\n                false,\n                record.get('text')\n            );\n        },\n\n        onReload : function () {\n            Ext.getStore('TodoItems').load();\n        },\n\n        onAddItem : function () {\n            var me = this,\n                rec,\n                store = Ext.getStore('TodoItems'),\n                field = me.getTodoField(),\n                value = field.getValue();\n\n            if (value === '') {\n                Ext.Msg.alert('Error', 'Please enter Task name', Ext.emptyFn);\n            }\n            else {\n                rec = Ext.create('Basic.model.TodoItem', {\n                    complete : false,\n                    text     : value\n                });\n                //store.insert(0, rec); //insert at the top\n                //store.sync();\n                rec.save({\n                    success: function (rec, operation) {\n                        store.insert(0, rec); //insert at the top\n                        field.setValue('');\n                    },\n                    failure: function (rec, operation) {\n                        Ext.Msg.alert(\n                            'Error',\n                            Ext.util.Format.format('There was an error creating this task.<br/><br/>Status Code: {0}<br/>Status Text: {1}', \n                            operation.error.status, \n                            operation.error.statusText)\n                        );\n                    }\n                });\n            }\n        }\n    });\n\n### 将其放在一起\n\n**文件名**: app.js\n\n我们的最后一个步骤是完成编辑主应用程序文件，并提供有关已定义的模型、存储、视图和控制器的信息。这些资源的源文件会自动加载到应用程序中。最后，调用 launch 方法，它创建并显示主应用程序视图“Basic.main.View”。\n\n\n    Ext.Loader.setConfig({\n        enabled : true,\n        paths   : {\n            'Ext'       : 'touch/src',\n            'Ext.azure' : 'packages/azure/src'\n        }\n    });\n\n    Ext.application({\n        name : 'Basic',\n\n        requires : [\n            'Ext.MessageBox',\n            'Ext.azure.Azure'\n        ],\n\n        views : [\n            'Main'\n        ],\n\n        controllers : [\n            'Main'\n        ],\n\n        stores : [\n            'TodoItems'\n        ],\n\n        azure : {\n            appUrl : 'YOUR_APP_URL.azure-mobile.net',\n            appKey : 'YOUR_APP_KEY'\n        },\n\n        icon : {\n            '57'  : 'resources/icons/Icon.png',\n            '72'  : 'resources/icons/Icon~ipad.png',\n            '114' : 'resources/icons/Icon@2x.png',\n            '144' : 'resources/icons/Icon~ipad@2x.png'\n        },\n\n        isIconPrecomposed : true,\n\n        startupImage : {\n            '320x460'   : 'resources/startup/320x460.jpg',\n            '640x920'   : 'resources/startup/640x920.png',\n            '768x1004'  : 'resources/startup/768x1004.png',\n            '748x1024'  : 'resources/startup/748x1024.png',\n            '1536x2008' : 'resources/startup/1536x2008.png',\n            '1496x2048' : 'resources/startup/1496x2048.png'\n        },\n\n        launch : function () {\n            // Destroy the #appLoadingIndicator element\n            Ext.fly('appLoadingIndicator').destroy();\n\n            // Initialize Azure\n            Ext.Azure.init(this.config.azure);\n\n            // Initialize the main view\n            Ext.Viewport.add(Ext.create('Basic.view.Main'));\n        },\n\n        onUpdated : function () {\n            Ext.Msg.confirm(\n                \"Application Update\",\n                \"This application has just successfully been updated to the latest version. Reload now?\",\n                function (buttonId) {\n                    if (buttonId === 'yes') {\n                        window.location.reload();\n                    }\n                }\n            );\n            }\n    });\n\n### 托管并运行 Sencha Touch 应用程序\n\n本教程的最后一个阶段是在本地计算机上托管和运行您的新应用程序。\n\n  1. 在您的终端中，浏览到您解压缩的应用程序的位置。\n\n  2. 使用 Sencha Cmd，运行以下命令：\n\n    * *sencha app refresh*：这将指示 Sencha Cmd 找到所有的应用程序依赖关系，并下载任何所需的程序包（例如，[Sencha Touch Extensions for Azure](https://market.sencha.com/extensions/sencha-extensions-for-microsoft-azure)）。\n\n    * *sencha web start*：这将启动本地的 Web 服务器以测试我们的应用程序。\n\n    ![sencha Web 启动](./media/partner-sencha-mobile-services-get-started/sencha-web-start.png)\n\n  3. 在 Web 浏览器中打开你的终端中列出的 URL，以启动该应用程序（例如 http://localhost:1841)）。\n\n  4. 在应用程序中键入有意义的文本（例如 “完成此教程”），然后单击“添加”。\n\n    ![新的 todo 项](./media/partner-sencha-mobile-services-get-started/new-todo-item.png)\n\n    这样可向在 Azure 中托管的新移动服务发送 POST 请求。来自请求的数据被插入到 TodoItem 表。\n\n  5. 返回 [Azure 经典门户]，单击“数据”选项卡，然后单击“TodoItems”表。\n\n    ![Todo 项表](./media/partner-sencha-mobile-services-get-started/mobile-data-tab.png)\n\n    这使您可以浏览此应用插入表中的数据。\n\n    ![浏览 todo 表](./media/partner-sencha-mobile-services-get-started/mobile-data-browse.png)\n\n## 后续步骤\n完成入门指南后，请了解如何通过 Sencha 在移动服务中执行其他重要任务。\n\n[下载](https://github.com/arthurakay/sencha-touch-azure-example)具有其他样式和功能的已完成示例应用程序，以查看 Sencha Touch 还可以做些什么！\n\n然后，深入了解有关 Sencha Touch Extensions for Azure 的详细信息：\n\n  * 示例应用程序[演练](http://docs.sencha.com/touch-azure/1.0.0/#!/guide/data_filters)\n  * 在 [Sencha 论坛](http://www.sencha.com/forum)中获得帮助\n  * 浏览 [Sencha 文档](http://docs.sencha.com/)\n  * 将 Sencha 与 Azure 移动服务配合使用：[（视频）](http://channel9.msdn.com/Shows/Cloud+Cover/Episode-126-Using-Sencha-With-Windows-Azure-Mobile-Services)\n\n\n## 其他资源\n\n  * [下载 Sencha Touch](http://pages.sencha.com/touch-for-azure.html)\n  * [Sencha Touch Extensions for Azure](https://market.sencha.com/extensions/sencha-extensions-for-microsoft-azure)\n \n\n## 摘要\n\n此处所述的示例在 Sencha Touch Extension for Azure 包中提供，并作为“基本数据”示例位于示例目录中。还提供了几个其他示例，它们演示了此扩展的其他功能以及详细的注释和说明。\n\n有关 Sencha Touch 入门的详细信息，请访问整套[指南](http://docs.sencha.com/touch/#!/guide)\n\n\n[AZURE.INCLUDE [app-service-disqus-feedback-slug](../includes/app-service-disqus-feedback-slug.md)]\n\n<!-- images -->\n\n[0]: ./media/partner-sencha-mobile-services-get-started/finished-app.png\n\n[Azure 经典门户]: https://manage.windowsazure.cn/\n\n<!---HONumber=Mooncake_0118_2016-->"
}