<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b07dc95c98b1e711bbeb3a4e3e70911afd3c9e5a</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>开始使用 blob 存储和 Visual Studio 连接服务 (ASP.NET 5) | Azure</source>
          <target state="new">开始使用 blob 存储和 Visual Studio 连接服务 (ASP.NET 5) | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在使用 Visual Studio 连接服务创建存储帐户后，如何开始在 Visual Studio ASP.NET 5 项目中使用 Azure Blob 存储</source>
          <target state="new">在使用 Visual Studio 连接服务创建存储帐户后，如何开始在 Visual Studio ASP.NET 5 项目中使用 Azure Blob 存储</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>开始使用 Azure Blob 存储和 Visual Studio 连接服务 (ASP.NET 5)</source>
          <target state="new">开始使用 Azure Blob 存储和 Visual Studio 连接服务 (ASP.NET 5)</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure Blob 存储。</source>
          <target state="new">本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure Blob 存储。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure Blob 存储是一项可存储大量非结构化数据的服务，用户可在世界任何地方通过 HTTP 或 HTTPS 访问这些数据。单个 Blob 可以是任意大小。Blob 可以是图像、音频和视频文件、原始数据以及文档文件等。本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建 Azure 存储帐户之后，如何开始使用 blob 存储。</source>
          <target state="new">Azure Blob 存储是一项可存储大量非结构化数据的服务，用户可在世界任何地方通过 HTTP 或 HTTPS 访问这些数据。单个 Blob 可以是任意大小。Blob 可以是图像、音频和视频文件、原始数据以及文档文件等。本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建 Azure 存储帐户之后，如何开始使用 blob 存储。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>正如文件位于文件夹中一样，存储 Blob 位于容器中。创建存储账号后，可以在存储账号中创建一个或多个容器。例如，在名为“Scrapbook”的存储空间中，可以在名为“images”的存储空间中创建容器，用于存储图片，还可以在名为“audio”的存储空间中创建另一个容器，用于存储音频文件。创建这些容器后，您可以向它们上载单独的 Blob 文件。有关以编程方式操作 blob 的详细信息，请参阅<bpt id="p1">[</bpt>如何通过 .NET 使用 Blob 存储<ept id="p1">]</ept><bpt id="p2">(/documentation/articles/storage-dotnet-how-to-use-blobs "</bpt>如何通过 .NET 使用 Blob 存储<ept id="p2">")</ept>。</source>
          <target state="new">正如文件位于文件夹中一样，存储 Blob 位于容器中。创建存储账号后，可以在存储账号中创建一个或多个容器。例如，在名为“Scrapbook”的存储空间中，可以在名为“images”的存储空间中创建容器，用于存储图片，还可以在名为“audio”的存储空间中创建另一个容器，用于存储音频文件。创建这些容器后，您可以向它们上载单独的 Blob 文件。有关以编程方式操作 blob 的详细信息，请参阅<bpt id="p1">[</bpt>如何通过 .NET 使用 Blob 存储<ept id="p1">]</ept><bpt id="p2">(/documentation/articles/storage-dotnet-how-to-use-blobs "</bpt>如何通过 .NET 使用 Blob 存储<ept id="p2">")</ept>。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>使用代码访问 blob 容器</source>
          <target state="new">使用代码访问 blob 容器</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>若要以编程方式访问 ASP.NET 5 项目中的 Blob，你需要添加以下项（如果尚未存在）。</source>
          <target state="new">若要以编程方式访问 ASP.NET 5 项目中的 Blob，你需要添加以下项（如果尚未存在）。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>在你希望以编程方式访问 Azure 存储服务的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。</source>
          <target state="new">在你希望以编程方式访问 Azure 存储服务的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>获取表示存储帐户信息的 <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。</source>
          <target state="new">获取表示存储帐户信息的 <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>在接下来的部分中，在代码的前面使用上述全部代码</source>
          <target state="new"><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>在接下来的部分中，在代码的前面使用上述全部代码</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 对象在存储帐户中获取到的现有容器的 <bpt id="p2">**</bpt>CloudBlobContainer<ept id="p2">**</ept> 引用。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 对象在存储帐户中获取到的现有容器的 <bpt id="p2">**</bpt>CloudBlobContainer<ept id="p2">**</ept> 引用。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>使用代码创建容器</source>
          <target state="new">使用代码创建容器</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>您还可以使用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 在存储帐户中创建容器。你需要做的就是按照以下代码为 <bpt id="p2">**</bpt>CreateIfNotExistsAsync<ept id="p2">**</ept> 添加调用：</source>
          <target state="new">您还可以使用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 在存储帐户中创建容器。你需要做的就是按照以下代码为 <bpt id="p2">**</bpt>CreateIfNotExistsAsync<ept id="p2">**</ept> 添加调用：</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>在 ASP.NET 5 中执行调出 Azure 存储的 API 是异步的。有关详细信息，请参阅<bpt id="p2">[</bpt>使用 Async 和 Await 进行异步编程<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。下面的代码假定正在使用异步编程方法。</source>
          <target state="new"><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>在 ASP.NET 5 中执行调出 Azure 存储的 API 是异步的。有关详细信息，请参阅<bpt id="p2">[</bpt>使用 Async 和 Await 进行异步编程<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。下面的代码假定正在使用异步编程方法。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>如果要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器。</source>
          <target state="new">如果要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>将 Blob 上载到容器中</source>
          <target state="new">将 Blob 上载到容器中</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>若要将 Blob 文件上载到容器中，请获取容器引用，并使用它来获取 Blob 引用。获取 blob 引用后，可以通过调用 <bpt id="p1">**</bpt>UploadFromStreamAsync<ept id="p1">**</ept> 方法将任何数据流上载到该 blob。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。</source>
          <target state="new">若要将 Blob 文件上载到容器中，请获取容器引用，并使用它来获取 Blob 引用。获取 blob 引用后，可以通过调用 <bpt id="p1">**</bpt>UploadFromStreamAsync<ept id="p1">**</ept> 方法将任何数据流上载到该 blob。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>列出容器中的 Blob</source>
          <target state="new">列出容器中的 Blob</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>若要列出容器中的 Blob，首先需要获取容器引用。然后，可以调用容器的 <bpt id="p1">**</bpt>ListBlobsSegmentedAsync<ept id="p1">**</ept> 方法检索 blob 和/或其中的目录。若要访问返回的 <bpt id="p2">**</bpt>IListBlobItem<ept id="p2">**</ept> 的丰富属性和方法，您必须将它转换到 <bpt id="p3">**</bpt>CloudBlockBlob<ept id="p3">**</ept>、<bpt id="p4">**</bpt>CloudPageBlob<ept id="p4">**</ept> 或 <bpt id="p5">**</bpt>CloudBlobDirectory<ept id="p5">**</ept> 对象。如果 Blob 类型未知，您可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出容器中每项的 URI。</source>
          <target state="new">若要列出容器中的 Blob，首先需要获取容器引用。然后，可以调用容器的 <bpt id="p1">**</bpt>ListBlobsSegmentedAsync<ept id="p1">**</ept> 方法检索 blob 和/或其中的目录。若要访问返回的 <bpt id="p2">**</bpt>IListBlobItem<ept id="p2">**</ept> 的丰富属性和方法，您必须将它转换到 <bpt id="p3">**</bpt>CloudBlockBlob<ept id="p3">**</ept>、<bpt id="p4">**</bpt>CloudPageBlob<ept id="p4">**</ept> 或 <bpt id="p5">**</bpt>CloudBlobDirectory<ept id="p5">**</ept> 对象。如果 Blob 类型未知，您可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出容器中每项的 URI。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>还有其他方法来列出 Blob 容器内容。有关详细信息，请参阅<bpt id="p1">[</bpt>如何通过 .NET 使用 Blob 存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-blobs#list-the-blobs-in-a-container)</ept>。</source>
          <target state="new">还有其他方法来列出 Blob 容器内容。有关详细信息，请参阅<bpt id="p1">[</bpt>如何通过 .NET 使用 Blob 存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-blobs#list-the-blobs-in-a-container)</ept>。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>下载 Blob</source>
          <target state="new">下载 Blob</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>若要下载 blob，请首先获取对该 blob 引用，然后调用 <bpt id="p1">**</bpt>DownloadToStreamAsync<ept id="p1">**</ept> 方法。下面的示例使用 <bpt id="p2">**</bpt>DownloadToStreamAsync<ept id="p2">**</ept> 方法将 blob 内容传输到稍后可以另存为本地文件的流对象。</source>
          <target state="new">若要下载 blob，请首先获取对该 blob 引用，然后调用 <bpt id="p1">**</bpt>DownloadToStreamAsync<ept id="p1">**</ept> 方法。下面的示例使用 <bpt id="p2">**</bpt>DownloadToStreamAsync<ept id="p2">**</ept> 方法将 blob 内容传输到稍后可以另存为本地文件的流对象。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>还有其他方法将 Blob 另存为文件。有关详细信息，请参阅<bpt id="p1">[</bpt>如何通过 .NET 使用 Blob 存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-blobs#download-blobs)</ept>。</source>
          <target state="new">还有其他方法将 Blob 另存为文件。有关详细信息，请参阅<bpt id="p1">[</bpt>如何通过 .NET 使用 Blob 存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-blobs#download-blobs)</ept>。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>删除 Blob</source>
          <target state="new">删除 Blob</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>若要删除 blob，请首先获取对该 blob 的引用，然后调用用于该 blob 的 <bpt id="p1">**</bpt>DeleteAsync<ept id="p1">**</ept> 方法。</source>
          <target state="new">若要删除 blob，请首先获取对该 blob 的引用，然后调用用于该 blob 的 <bpt id="p1">**</bpt>DeleteAsync<ept id="p1">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>