{
  "nodes": [
    {
      "content": "如何从媒体服务传送流内容",
      "pos": [
        28,
        40
      ]
    },
    {
      "content": "了解如何创建用于生成流 URL 的定位符。代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。",
      "pos": [
        60,
        114
      ]
    },
    {
      "content": "如何：传送流内容",
      "pos": [
        333,
        341
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        346,
        362
      ]
    },
    {
      "content": "REST",
      "pos": [
        366,
        370
      ]
    },
    {
      "content": ".NET",
      "pos": [
        446,
        450
      ]
    },
    {
      "content": "Portal",
      "pos": [
        521,
        527
      ]
    },
    {
      "content": "概述",
      "pos": [
        595,
        597
      ]
    },
    {
      "pos": [
        599,
        735
      ],
      "content": "你可以通过创建 OnDemand 流式处理定位符并生成流 URL 来流式传输自适应比特率 MP4 集。<bpt id=\"p1\">[</bpt>对资产进行编码<ept id=\"p1\">](/documentation/articles/media-services-encode-asset)</ept>主题说明了如何编码成自适应比特率 MP4 集。"
    },
    {
      "pos": [
        738,
        866
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果内容已加密，则在创建定位符之前配置资产传送策略（如<bpt id=\"p1\">[</bpt>本<ept id=\"p1\">](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)</ept>主题中所述）。"
    },
    {
      "content": "你也可以使用 OnDemand 流式处理定位符生成指向可渐进式下载的 MP4 文件的 URL。",
      "pos": [
        868,
        915
      ]
    },
    {
      "content": "本主题说明如何创建 OnDemand 流式处理定位符，以发布资产及生成平滑流、MPEG DASH 和 HLS 流 URL。此外，还将示范如何生成渐进式下载 URL。",
      "pos": [
        917,
        999
      ]
    },
    {
      "content": "创建 OnDemand 流式处理定位符",
      "pos": [
        1008,
        1027
      ]
    },
    {
      "content": "若要创建 OnDemand 流式处理定位符并获取 URL，你需要执行以下操作：",
      "pos": [
        1029,
        1068
      ]
    },
    {
      "content": "如果内容已加密，则定义访问策略。",
      "pos": [
        1076,
        1092
      ]
    },
    {
      "content": "创建 OnDemand 流式处理定位符。",
      "pos": [
        1099,
        1119
      ]
    },
    {
      "content": "如果你想要流式处理，请获取资产中的流式处理清单文件 (.ism)。",
      "pos": [
        1126,
        1159
      ]
    },
    {
      "content": "生成清单文件或 MP4 文件的 URL。",
      "pos": [
        1210,
        1230
      ]
    },
    {
      "content": "使用媒体服务 .NET SDK",
      "pos": [
        1240,
        1255
      ]
    },
    {
      "content": "生成流 URL",
      "pos": [
        1258,
        1265
      ]
    },
    {
      "content": "代码将输出：",
      "pos": [
        3138,
        3144
      ]
    },
    {
      "pos": [
        3770,
        3825
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你也可以通过 SSL 连接流式传输内容。为此，请确保流 URL 以 HTTPS 开头。"
    },
    {
      "content": "生成渐进式下载 URL",
      "pos": [
        3827,
        3838
      ]
    },
    {
      "content": "代码将输出：",
      "pos": [
        4992,
        4998
      ]
    },
    {
      "content": "使用 Azure 媒体服务 .NET SDK 扩展",
      "pos": [
        5614,
        5639
      ]
    },
    {
      "content": "以下代码将调用 .NET SDK 扩展方法，用于创建定位符，并为自适应流生成平滑流、HLS 和 MPEG-DASH URL。",
      "pos": [
        5641,
        5703
      ]
    },
    {
      "content": "另请参阅",
      "pos": [
        6192,
        6196
      ]
    },
    {
      "pos": [
        6198,
        6357
      ],
      "content": "<bpt id=\"p1\">[</bpt>下载资产<ept id=\"p1\">](/documentation/articles/media-services-deliver-asset-download)</ept> <bpt id=\"p2\">[</bpt>配置资产传送策略<ept id=\"p2\">](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)</ept>"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何从媒体服务传送流内容\" \n    description=\"了解如何创建用于生成流 URL 的定位符。代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\" \n    services=\"media-services\" \n    documentationCenter=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n\n#如何：传送流内容\n \n> [AZURE.SELECTOR]\n- [REST](/documentation/articles/media-services-rest-deliver-streaming-content)\n- [.NET](/documentation/articles/media-services-deliver-streaming-content)\n- [Portal](/documentation/articles/media-services-manage-content#publish)\n\n##概述\n\n你可以通过创建 OnDemand 流式处理定位符并生成流 URL 来流式传输自适应比特率 MP4 集。[对资产进行编码](/documentation/articles/media-services-encode-asset)主题说明了如何编码成自适应比特率 MP4 集。\n\n>[AZURE.NOTE]如果内容已加密，则在创建定位符之前配置资产传送策略（如[本](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)主题中所述）。\n\n你也可以使用 OnDemand 流式处理定位符生成指向可渐进式下载的 MP4 文件的 URL。\n\n本主题说明如何创建 OnDemand 流式处理定位符，以发布资产及生成平滑流、MPEG DASH 和 HLS 流 URL。此外，还将示范如何生成渐进式下载 URL。\n     \n##创建 OnDemand 流式处理定位符\n\n若要创建 OnDemand 流式处理定位符并获取 URL，你需要执行以下操作：\n\n   1. 如果内容已加密，则定义访问策略。\n   2. 创建 OnDemand 流式处理定位符。\n   3. 如果你想要流式处理，请获取资产中的流式处理清单文件 (.ism)。 \n        \n    如果你想要渐进式下载，请获取资产中的 MP4 文件名。  \n   4. 生成清单文件或 MP4 文件的 URL。 \n   \n\n###使用媒体服务 .NET SDK \n\n生成流 URL\n\n    private static void BuildStreamingURLs(IAsset asset)\n    {\n    \n        // Create a 30-day readonly access policy. \n        // You cannot create a streaming locator using an AccessPolicy that includes write or delete permissions.\n        IAccessPolicy policy = _context.AccessPolicies.Create(\"Streaming policy\",\n            TimeSpan.FromDays(30),\n            AccessPermissions.Read);\n    \n        // Create a locator to the streaming content on an origin. \n        ILocator originLocator = _context.Locators.CreateLocator(LocatorType.OnDemandOrigin, asset,\n            policy,\n            DateTime.UtcNow.AddMinutes(-5));\n    \n        // Display some useful values based on the locator.\n        Console.WriteLine(\"Streaming asset base path on origin: \");\n        Console.WriteLine(originLocator.Path);\n        Console.WriteLine();\n    \n        // Get a reference to the streaming manifest file from the  \n        // collection of files in the asset. \n        var manifestFile = asset.AssetFiles.Where(f => f.Name.ToLower().\n                                    EndsWith(\".ism\")).\n                                    FirstOrDefault();\n        \n        // Create a full URL to the manifest file. Use this for playback\n        // in streaming media clients. \n        string urlForClientStreaming = originLocator.Path + manifestFile.Name + \"/manifest\";\n        Console.WriteLine(\"URL to manifest for client streaming using Smooth Streaming protocol: \");\n        Console.WriteLine(urlForClientStreaming);\n        Console.WriteLine(\"URL to manifest for client streaming using HLS protocol: \");\n        Console.WriteLine(urlForClientStreaming + \"(format=m3u8-aapl)\");\n        Console.WriteLine(\"URL to manifest for client streaming using MPEG DASH protocol: \");\n        Console.WriteLine(urlForClientStreaming + \"(format=mpd-time-csf)\"); \n        Console.WriteLine();\n    }\n\n代码将输出：\n    \n    URL to manifest for client streaming using Smooth Streaming protocol:\n    http://amstest1.streaming.mediaservices.chinacloudapi.cn/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny.ism/manifest\n    URL to manifest for client streaming using HLS protocol:\n    http://amstest1.streaming.mediaservices.chinacloudapi.cn/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny.ism/manifest(format=m3u8-aapl)\n    URL to manifest for client streaming using MPEG DASH protocol:\n    http://amstest1.streaming.mediaservices.chinacloudapi.cn/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny.ism/manifest(format=mpd-time-csf)\n    \n\n>[AZURE.NOTE]你也可以通过 SSL 连接流式传输内容。为此，请确保流 URL 以 HTTPS 开头。\n\n生成渐进式下载 URL\n\n    private static void BuildProgressiveDownloadURLs(IAsset asset)\n    {\n        // Create a 30-day readonly access policy. \n        IAccessPolicy policy = _context.AccessPolicies.Create(\"Streaming policy\",\n            TimeSpan.FromDays(30),\n            AccessPermissions.Read);\n    \n        // Create an OnDemandOrigin locator to the asset. \n        ILocator originLocator = _context.Locators.CreateLocator(LocatorType.OnDemandOrigin, asset,\n            policy,\n            DateTime.UtcNow.AddMinutes(-5));\n    \n        // Display some useful values based on the locator.\n        Console.WriteLine(\"Streaming asset base path on origin: \");\n        Console.WriteLine(originLocator.Path);\n        Console.WriteLine();\n    \n        // Get MP4 files.\n        IEnumerable<IAssetFile> mp4AssetFiles = asset\n            .AssetFiles\n            .ToList()\n            .Where(af => af.Name.EndsWith(\".mp4\", StringComparison.OrdinalIgnoreCase));\n                \n        // Create a full URL to the MP4 files. Use this to progressively download files.\n        foreach (var pd in mp4AssetFiles)\n            Console.WriteLine(originLocator.Path + pd.Name);\n    }\n\n代码将输出：\n    \n    http://amstest1.streaming.mediaservices.chinacloudapi.cn/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny_H264_650kbps_AAC_und_ch2_96kbps.mp4\n    http://amstest1.streaming.mediaservices.chinacloudapi.cn/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny_H264_400kbps_AAC_und_ch2_96kbps.mp4\n    http://amstest1.streaming.mediaservices.chinacloudapi.cn/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny_H264_3400kbps_AAC_und_ch2_96kbps.mp4\n    http://amstest1.streaming.mediaservices.chinacloudapi.cn/3c5fe676-199c-4620-9b03-ba014900f214/BigBuckBunny_H264_2250kbps_AAC_und_ch2_96kbps.mp4\n    \n    . . . \n\n###使用 Azure 媒体服务 .NET SDK 扩展\n\n以下代码将调用 .NET SDK 扩展方法，用于创建定位符，并为自适应流生成平滑流、HLS 和 MPEG-DASH URL。\n\n    // Create a loctor.\n    _context.Locators.Create(\n        LocatorType.OnDemandOrigin,\n        inputAsset,\n        AccessPermissions.Read,\n        TimeSpan.FromDays(30));\n    \n    // Get the streaming URLs.\n    Uri smoothStreamingUri = inputAsset.GetSmoothStreamingUri();\n    Uri hlsUri = inputAsset.GetHlsUri();\n    Uri mpegDashUri = inputAsset.GetMpegDashUri();\n    \n    Console.WriteLine(smoothStreamingUri);\n    Console.WriteLine(hlsUri);\n    Console.WriteLine(mpegDashUri);\n\n\n\n##另请参阅\n\n[下载资产](/documentation/articles/media-services-deliver-asset-download) [配置资产传送策略](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)\n\n<!---HONumber=Mooncake_0307_2016-->"
}