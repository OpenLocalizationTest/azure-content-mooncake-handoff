{
  "nodes": [
    {
      "content": "开始使用表存储和 Visual Studio 连接服务（云服务）| Azure",
      "pos": [
        27,
        66
      ]
    },
    {
      "content": "在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的云服务项目中使用 Azure 表存储",
      "pos": [
        85,
        155
      ]
    },
    {
      "content": "开始使用 Azure 表存储和 Visual Studio 连接服务（云服务项目）",
      "pos": [
        356,
        397
      ]
    },
    {
      "content": "概述",
      "pos": [
        401,
        403
      ]
    },
    {
      "content": "本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在云服务项目中创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure 表存储。执行“添加连接服务”操作会安装相应的 NuGet 程序包，以访问项目中的 Azure 存储，并将存储帐户的连接字符串添加到项目配置文件中。",
      "pos": [
        405,
        570
      ]
    },
    {
      "content": "Azure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。",
      "pos": [
        572,
        664
      ]
    },
    {
      "pos": [
        666,
        841
      ],
      "content": "若要开始，首先需要在存储帐户中创建表。我们将展示如何使用代码创建 Azure 表，以及如何执行基本的表和实体操作，例如添加、修改、读取和删除表实体。示例是用 C# 代码编写的，并使用了 <bpt id=\"p1\">[</bpt>Azure .NET 存储客户端库<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)</ept>。"
    },
    {
      "pos": [
        843,
        985
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>执行 Azure 存储调用的一些 API 是异步的。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>使用 Async 和 Await 进行异步编程<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。下面的代码假定正在使用异步编程方法。"
    },
    {
      "pos": [
        989,
        1084
      ],
      "content": "有关以编程方式操作表的详细信息，请参阅<bpt id=\"p1\">[</bpt>如何通过 .NET 使用表存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。"
    },
    {
      "pos": [
        1087,
        1151
      ],
      "content": "有关 Azure 存储空间的常规信息，请参阅<bpt id=\"p1\">[</bpt>存储空间文档<ept id=\"p1\">](/documentation/services/storage)</ept>。"
    },
    {
      "pos": [
        1154,
        1223
      ],
      "content": "有关 Azure 云服务的常规信息，请参阅<bpt id=\"p1\">[</bpt>云服务文档<ept id=\"p1\">](/documentation/services/cloud-services)</ept>。"
    },
    {
      "pos": [
        1226,
        1286
      ],
      "content": "有关对 ASP.NET 应用程序进行编程的详细信息，请参阅 <bpt id=\"p1\">[</bpt>ASP.NET<ept id=\"p1\">](http://www.asp.net)</ept>。"
    },
    {
      "content": "使用代码访问表",
      "pos": [
        1291,
        1298
      ]
    },
    {
      "content": "若要在云服务项目中访问表，需要在访问 Azure 表存储的任何 C# 源文件中包含以下项。",
      "pos": [
        1300,
        1345
      ]
    },
    {
      "pos": [
        1350,
        1386
      ],
      "content": "请确保 C# 文件顶部的命名空间声明包括这些 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句。"
    },
    {
      "pos": [
        1640,
        1716
      ],
      "content": "获取表示存储帐户信息的 <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。"
    },
    {
      "pos": [
        1908,
        1942
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在下列示例中，在代码的前面使用上述全部代码。"
    },
    {
      "pos": [
        1947,
        1987
      ],
      "content": "获取 <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> 对象，以引用存储帐户中的表对象。"
    },
    {
      "pos": [
        2111,
        2145
      ],
      "content": "获取 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 引用对象，以引用特定的表和实体。"
    },
    {
      "content": "使用代码创建表",
      "pos": [
        2283,
        2290
      ]
    },
    {
      "pos": [
        2292,
        2380
      ],
      "content": "若要创建 Azure 表，只需在获取 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 对象后添加对 <bpt id=\"p2\">**</bpt>CreateIfNotExistsAsync<ept id=\"p2\">**</ept> 的调用，如“使用代码访问表”一节中所述。"
    },
    {
      "content": "将实体添加到表",
      "pos": [
        2479,
        2486
      ]
    },
    {
      "pos": [
        2488,
        2564
      ],
      "content": "若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义了将客户的名字和姓氏分别用作行键和分区键的 <bpt id=\"p1\">**</bpt>CustomerEntity<ept id=\"p1\">**</ept> 实体类。"
    },
    {
      "pos": [
        2918,
        3139
      ],
      "content": "将使用之前在“使用代码访问表”中创建的 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 对象完成涉及实体的表操作。 <bpt id=\"p2\">**</bpt>TableOperation<ept id=\"p2\">**</ept> 对象表示将完成的操作。以下代码示例演示如何创建 <bpt id=\"p3\">**</bpt>CloudTable<ept id=\"p3\">**</ept> 对象以及 <bpt id=\"p4\">**</bpt>CustomerEntity<ept id=\"p4\">**</ept> 对象。为准备此操作，会创建一个 <bpt id=\"p5\">**</bpt>TableOperation<ept id=\"p5\">**</ept> 以将客户实体插入该表中。最后，将通过调用 <bpt id=\"p6\">**</bpt>CloudTable.ExecuteAsync<ept id=\"p6\">**</ept> 执行此操作。"
    },
    {
      "content": "插入一批实体",
      "pos": [
        3684,
        3690
      ]
    },
    {
      "pos": [
        3692,
        3846
      ],
      "content": "您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（“Jeff Smith”和“Ben Smith”），使用 Insert 方法将它们添加到 <bpt id=\"p1\">**</bpt>TableBatchOperation<ept id=\"p1\">**</ept> 对象，然后通过调用 <bpt id=\"p2\">**</bpt>CloudTable.ExecuteBatchAsync<ept id=\"p2\">**</ept> 启动操作。"
    },
    {
      "content": "将实体添加到表",
      "pos": [
        4825,
        4832
      ]
    },
    {
      "pos": [
        4834,
        4910
      ],
      "content": "若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义了将客户的名字和姓氏分别用作行键和分区键的 <bpt id=\"p1\">**</bpt>CustomerEntity<ept id=\"p1\">**</ept> 实体类。"
    },
    {
      "pos": [
        5272,
        5489
      ],
      "content": "将使用之前在“使用代码访问表”中创建的 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 对象完成涉及实体的表操作。 <bpt id=\"p2\">**</bpt>TableOperation<ept id=\"p2\">**</ept> 对象表示将完成的操作。以下代码示例演示如何创建 <bpt id=\"p3\">**</bpt>CloudTable<ept id=\"p3\">**</ept> 对象以及 <bpt id=\"p4\">**</bpt>CustomerEntity<ept id=\"p4\">**</ept> 对象。为准备此操作，会创建一个 <bpt id=\"p5\">**</bpt>TableOperation<ept id=\"p5\">**</ept> 以将客户实体插入该表中。最后，将通过调用 CloudTable.ExecuteAsync 执行此操作。"
    },
    {
      "content": "插入一批实体",
      "pos": [
        6030,
        6036
      ]
    },
    {
      "pos": [
        6038,
        6192
      ],
      "content": "您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（“Jeff Smith”和“Ben Smith”），使用 Insert 方法将它们添加到 <bpt id=\"p1\">**</bpt>TableBatchOperation<ept id=\"p1\">**</ept> 对象，然后通过调用 <bpt id=\"p2\">**</bpt>CloudTable.ExecuteBatchAsync<ept id=\"p2\">**</ept> 启动操作。"
    },
    {
      "content": "获取分区中的所有实体",
      "pos": [
        7074,
        7084
      ]
    },
    {
      "pos": [
        7086,
        7182
      ],
      "content": "若要查询表以获取分区中的所有实体，请使用 <bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept> 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。"
    },
    {
      "content": "获取单个实体",
      "pos": [
        8097,
        8103
      ]
    },
    {
      "pos": [
        8105,
        8282
      ],
      "content": "您可以编写查询以获取单个特定实体。以下代码使用 <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> 对象来指定名为“Ben Smith”的客户。此方法仅返回一个实体，而不是一个集合，并且 <bpt id=\"p2\">**</bpt>TableResult.Result<ept id=\"p2\">**</ept> 中的返回值是一个 <bpt id=\"p3\">**</bpt>CustomerEntity<ept id=\"p3\">**</ept> 对象。在查询中同时指定分区键和行键是从<bpt id=\"p4\">**</bpt>表<ept id=\"p4\">**</ept>服务中检索单个实体的最快方法。"
    },
    {
      "content": "删除实体",
      "pos": [
        8932,
        8936
      ]
    },
    {
      "content": "您可以在找到实体后将其删除。以下代码将查找名为“Ben Smith”的客户实体，如果找到，会将其删除。",
      "pos": [
        8937,
        8988
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        9887,
        9891
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"开始使用表存储和 Visual Studio 连接服务（云服务）| Azure\"\n    description=\"在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的云服务项目中使用 Azure 表存储\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"TomArcher\"\n    manager=\"douge\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 开始使用 Azure 表存储和 Visual Studio 连接服务（云服务项目）\n\n##概述\n\n本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在云服务项目中创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure 表存储。执行“添加连接服务”操作会安装相应的 NuGet 程序包，以访问项目中的 Azure 存储，并将存储帐户的连接字符串添加到项目配置文件中。\n\nAzure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。\n\n若要开始，首先需要在存储帐户中创建表。我们将展示如何使用代码创建 Azure 表，以及如何执行基本的表和实体操作，例如添加、修改、读取和删除表实体。示例是用 C# 代码编写的，并使用了 [Azure .NET 存储客户端库](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)。\n\n**注意：**执行 Azure 存储调用的一些 API 是异步的。有关详细信息，请参阅[使用 Async 和 Await 进行异步编程](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)。下面的代码假定正在使用异步编程方法。\n\n- 有关以编程方式操作表的详细信息，请参阅[如何通过 .NET 使用表存储](/documentation/articles/storage-dotnet-how-to-use-tables)。\n- 有关 Azure 存储空间的常规信息，请参阅[存储空间文档](/documentation/services/storage)。\n- 有关 Azure 云服务的常规信息，请参阅[云服务文档](/documentation/services/cloud-services)。\n- 有关对 ASP.NET 应用程序进行编程的详细信息，请参阅 [ASP.NET](http://www.asp.net)。\n\n## 使用代码访问表\n\n若要在云服务项目中访问表，需要在访问 Azure 表存储的任何 C# 源文件中包含以下项。\n\n1. 请确保 C# 文件顶部的命名空间声明包括这些 **using** 语句。\n\n        using Microsoft.Framework.Configuration;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Table;\n        using System.Threading.Tasks;\n        using LogLevel = Microsoft.Framework.Logging.LogLevel;\n\n2. 获取表示存储帐户信息的 **CloudStorageAccount** 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。\n\n         CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n           CloudConfigurationManager.GetSetting(\"<storage account name>\n         _AzureStorageConnectionString\"));\n> [AZURE.NOTE]在下列示例中，在代码的前面使用上述全部代码。\n\n3. 获取 **CloudTableClient** 对象，以引用存储帐户中的表对象。\n\n         // Create the table client.\n         CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n4. 获取 **CloudTable** 引用对象，以引用特定的表和实体。\n\n        // Get a reference to a table named \"peopleTable\".\n        CloudTable table = tableClient.GetTableReference(\"peopleTable\");\n\n## 使用代码创建表\n\n若要创建 Azure 表，只需在获取 **CloudTable** 对象后添加对 **CreateIfNotExistsAsync** 的调用，如“使用代码访问表”一节中所述。\n\n    // Create the CloudTable if it does not exist.\n    await table.CreateIfNotExistsAsync();\n\n## 将实体添加到表\n\n若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义了将客户的名字和姓氏分别用作行键和分区键的 **CustomerEntity** 实体类。\n\n    public class CustomerEntity : TableEntity\n    {\n        public CustomerEntity(string lastName, string firstName)\n        {\n            this.PartitionKey = lastName;\n            this.RowKey = firstName;\n        }\n\n        public CustomerEntity() { }\n\n        public string Email { get; set; }\n\n        public string PhoneNumber { get; set; }\n    }\n\n将使用之前在“使用代码访问表”中创建的 **CloudTable** 对象完成涉及实体的表操作。 **TableOperation** 对象表示将完成的操作。以下代码示例演示如何创建 **CloudTable** 对象以及 **CustomerEntity** 对象。为准备此操作，会创建一个 **TableOperation** 以将客户实体插入该表中。最后，将通过调用 **CloudTable.ExecuteAsync** 执行此操作。\n\n    // Get a reference to the **CloudTable** object named 'peopleTable' as described in \"Access a table in code\".\n\n    // Create a new customer entity.\n    CustomerEntity customer1 = new CustomerEntity(\"Harp\", \"Walter\");\n    customer1.Email = \"Walter@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0101\";\n\n    // Create the TableOperation that inserts the customer entity.\n    TableOperation insertOperation = TableOperation.Insert(customer1);\n\n    // Execute the insert operation.\n    await peopleTable.ExecuteAsync(insertOperation);\n\n## 插入一批实体\n\n您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（“Jeff Smith”和“Ben Smith”），使用 Insert 方法将它们添加到 **TableBatchOperation** 对象，然后通过调用 **CloudTable.ExecuteBatchAsync** 启动操作。\n\n    // Get a reference to a **CloudTable** object named 'peopleTable' as described in \"Access a table in code\".\n\n    // Create the batch operation.\n    TableBatchOperation batchOperation = new TableBatchOperation();\n\n    // Create a customer entity and add it to the table.\n    CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\n    customer1.Email = \"Jeff@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0104\";\n\n    // Create another customer entity and add it to the table.\n    CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n    customer2.Email = \"Ben@contoso.com\";\n    customer2.PhoneNumber = \"425-555-0102\";\n\n    // Add both customer entities to the batch insert operation.\n    batchOperation.Insert(customer1);\n    batchOperation.Insert(customer2);\n\n    // Execute the batch operation.\n    await peopleTable.ExecuteBatchAsync(batchOperation);\n\n    // Create the CloudTable if it does not exist\n    await table.CreateIfNotExistsAsync();\n\n## 将实体添加到表\n\n若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义了将客户的名字和姓氏分别用作行键和分区键的 **CustomerEntity** 实体类。\n\n    public class CustomerEntity : TableEntity\n    {\n         public CustomerEntity(string lastName, string firstName)\n         {\n             this.PartitionKey = lastName;\n             this.RowKey = firstName;\n         }\n\n         public CustomerEntity() { }\n\n         public string Email { get; set; }\n\n         public string PhoneNumber { get; set; }\n    }\n\n将使用之前在“使用代码访问表”中创建的 **CloudTable** 对象完成涉及实体的表操作。 **TableOperation** 对象表示将完成的操作。以下代码示例演示如何创建 **CloudTable** 对象以及 **CustomerEntity** 对象。为准备此操作，会创建一个 **TableOperation** 以将客户实体插入该表中。最后，将通过调用 CloudTable.ExecuteAsync 执行此操作。\n\n    // Get a reference to the CloudTable object named 'peopleTable' as described in \"Access a table in code\".\n\n    // Create a new customer entity.\n    CustomerEntity customer1 = new CustomerEntity(\"Harp\", \"Walter\");\n    customer1.Email = \"Walter@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0101\";\n\n    // Create the TableOperation that inserts the customer entity.\n    TableOperation insertOperation = TableOperation.Insert(customer1);\n\n    // Execute the insert operation.\n    await peopleTable.ExecuteAsync(insertOperation);\n\n## 插入一批实体\n\n您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（“Jeff Smith”和“Ben Smith”），使用 Insert 方法将它们添加到 **TableBatchOperation** 对象，然后通过调用 **CloudTable.ExecuteBatchAsync** 启动操作。\n\n    // Get a reference to a CloudTable object named 'peopleTable' as described in \"Access a table in code\".\n\n    // Create the batch operation.\n    TableBatchOperation batchOperation = new TableBatchOperation();\n\n    // Create a customer entity and add it to the table.\n    CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\n    customer1.Email = \"Jeff@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0104\";\n\n    // Create another customer entity and add it to the table.\n    CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n    customer2.Email = \"Ben@contoso.com\";\n    customer2.PhoneNumber = \"425-555-0102\";\n\n    // Add both customer entities to the batch insert operation.\n    batchOperation.Insert(customer1);\n    batchOperation.Insert(customer2);\n\n    // Execute the batch operation.\n    await peopleTable.ExecuteBatchAsync(batchOperation);\n\n## 获取分区中的所有实体\n\n若要查询表以获取分区中的所有实体，请使用 **TableQuery** 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。\n\n    // Get a reference to a CloudTable object named 'peopleTable' as described in \"Access a table in code\".\n\n    // Construct the query operation for all customer entities where PartitionKey=\"Smith\".\n    TableQuery<CustomerEntity> query = new TableQuery<CustomerEntity>()\n        .Where(TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"));\n\n    // Print the fields for each customer.\n    TableContinuationToken token = null;\n    do\n    {\n        TableQuerySegment<CustomerEntity> resultSegment = await peopleTable.ExecuteQuerySegmentedAsync(query, token);\n        token = resultSegment.ContinuationToken;\n\n        foreach (CustomerEntity entity in resultSegment.Results)\n        {\n            Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n        }\n    } while (token != null);\n\n    return View();\n\n\n## 获取单个实体\n\n您可以编写查询以获取单个特定实体。以下代码使用 **TableOperation** 对象来指定名为“Ben Smith”的客户。此方法仅返回一个实体，而不是一个集合，并且 **TableResult.Result** 中的返回值是一个 **CustomerEntity** 对象。在查询中同时指定分区键和行键是从**表**服务中检索单个实体的最快方法。\n\n    // Get a reference to a **CloudTable** object named 'peopleTable' as described in \"Access a table in code\".\n\n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the retrieve operation.\n    TableResult retrievedResult = await peopleTable.ExecuteAsync(retrieveOperation);\n\n    // Print the phone number of the result.\n    if (retrievedResult.Result != null)\n       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);\n    else\n       Console.WriteLine(\"The phone number could not be retrieved.\");\n\n## 删除实体\n您可以在找到实体后将其删除。以下代码将查找名为“Ben Smith”的客户实体，如果找到，会将其删除。\n\n    // Get a reference to a **CloudTable** object named 'peopleTable' as described in \"Access a table in code\".\n\n    // Create a retrieve operation that expects a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the operation.\n    TableResult retrievedResult = peopleTable.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity object.\n    CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;\n\n    // Create the Delete TableOperation and then execute it.\n    if (deleteEntity != null)\n    {\n       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);\n\n       // Execute the operation.\n       await peopleTable.ExecuteAsync(deleteOperation);\n\n       Console.WriteLine(\"Entity deleted.\");\n    }\n\n    else\n       Console.WriteLine(\"Couldn't delete the entity.\");\n\n## 后续步骤\n\n[AZURE.INCLUDE [vs-storage-dotnet-blobs-next-steps](../includes/vs-storage-dotnet-blobs-next-steps.md)]\n\n<!---HONumber=Mooncake_0104_2016-->"
}