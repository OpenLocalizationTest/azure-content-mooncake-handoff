{
  "nodes": [
    {
      "content": "在 Ubuntu Linux 上配合 Tedious 使用 Node.js 连接到 SQL 数据库",
      "pos": [
        27,
        76
      ]
    },
    {
      "content": "演示了一个可以用来连接到 Azure SQL 数据库的 Node.js 代码示例。该示例使用 Tedious 驱动程序进行连接。",
      "pos": [
        95,
        159
      ]
    },
    {
      "content": "在 Ubuntu Linux 上配合 Tedious 使用 Node.js 连接到 SQL 数据库",
      "pos": [
        378,
        427
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        432,
        448
      ]
    },
    {
      "content": "Python",
      "pos": [
        452,
        458
      ]
    },
    {
      "content": "Node.js",
      "pos": [
        536,
        543
      ]
    },
    {
      "content": "Ruby",
      "pos": [
        614,
        618
      ]
    },
    {
      "content": "本主题演示一个在 Ubuntu Linux 上运行的 Node.js 代码示例。该示例将使用 Tedious 驱动程序连接到 Azure SQL 数据库。",
      "pos": [
        686,
        763
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        769,
        773
      ]
    },
    {
      "pos": [
        776,
        816
      ],
      "content": "打开终端并安装 <bpt id=\"p1\">**</bpt>node<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>npm<ept id=\"p2\">**</ept>（除非你的计算机上已安装）。"
    },
    {
      "pos": [
        880,
        946
      ],
      "content": "将计算机配置为使用 <bpt id=\"p1\">**</bpt>node<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>npm<ept id=\"p2\">**</ept> 之后，请导航到要在其中创建 Node.js 项目的目录，然后输入以下命令。"
    },
    {
      "pos": [
        998,
        1085
      ],
      "content": "<bpt id=\"p1\">**</bpt>npm init<ept id=\"p1\">**</ept> 将创建节点项目。若要在项目创建期间保留默认值，请一直按 Enter，直到创建了项目。现在，项目目录中会出现 <bpt id=\"p2\">**</bpt>package.json<ept id=\"p2\">**</ept> 文件。"
    },
    {
      "content": "SQL 数据库",
      "pos": [
        1092,
        1099
      ]
    },
    {
      "pos": [
        1101,
        1241
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>入门页<ept id=\"p1\">](/documentation/articles/sql-database-get-started)</ept>，以了解如何创建示例数据库。必须根据指南创建 <bpt id=\"p2\">**</bpt>AdventureWorks 数据库模板<ept id=\"p2\">**</ept>。下面所示的示例只适用于 <bpt id=\"p3\">**</bpt>AdventureWorks 架构<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "步骤 1：获取连接详细信息",
      "pos": [
        1246,
        1259
      ]
    },
    {
      "content": "步骤 2：连接",
      "pos": [
        1423,
        1430
      ]
    },
    {
      "pos": [
        1432,
        1517
      ],
      "content": "<bpt id=\"p1\">[</bpt>new Connection<ept id=\"p1\">](http://pekim.github.io/tedious/api-connection.html)</ept> 函数用于连接到 SQL 数据库。"
    },
    {
      "content": "步骤 3：执行查询",
      "pos": [
        2008,
        2017
      ]
    },
    {
      "pos": [
        2020,
        2287
      ],
      "content": "所有 SQL 语句都是使用 <bpt id=\"p1\">[</bpt>new Request()<ept id=\"p1\">](http://pekim.github.io/tedious/api-request.html)</ept> 函数执行的。如果语句返回了行（例如 SELECT 语句），则你可以使用 <bpt id=\"p2\">[</bpt>request.on()<ept id=\"p2\">](http://pekim.github.io/tedious/api-request.html)</ept> 函数检索这些行。如果未返回行，<bpt id=\"p3\">[</bpt>request.on()<ept id=\"p3\">](http://pekim.github.io/tedious/api-request.html)</ept> 函数将返回空列表。"
    },
    {
      "content": "步骤 4：插入行",
      "pos": [
        3850,
        3858
      ]
    },
    {
      "pos": [
        3860,
        4116
      ],
      "content": "在本示例中，你将了解如何安全地执行 <bpt id=\"p1\">[</bpt>INSERT<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/ms174335.aspx)</ept> 语句，传递参数以保护应用程序免遭 <bpt id=\"p2\">[</bpt>SQL 注入<ept id=\"p2\">](https://technet.microsoft.com/zh-cn/library/ms161953(v=sql.105).aspx)</ept> 漏洞的危害，然后检索自动生成的<bpt id=\"p3\">[</bpt>主键<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/ms179610.aspx)</ept>值。"
    },
    {
      "content": "后续步骤",
      "pos": [
        5702,
        5706
      ]
    },
    {
      "pos": [
        5708,
        5753
      ],
      "content": "有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Node.js 开发人员中心<ept id=\"p1\">](/develop/nodejs)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"在 Ubuntu Linux 上配合 Tedious 使用 Node.js 连接到 SQL 数据库\"\n    description=\"演示了一个可以用来连接到 Azure SQL 数据库的 Node.js 代码示例。该示例使用 Tedious 驱动程序进行连接。\"\n    services=\"sql-database\"\n    documentationCenter=\"\"\n    authors=\"meet-bhagdev\"\n    manager=\"jeffreyg\"\n    editor=\"\"/>\n\n\n<tags\n    ms.service=\"sql-database\"\n    ms.date=\"12/17/2015\"\n    wacn.date=\"01/15/2016\"/>\n\n\n# 在 Ubuntu Linux 上配合 Tedious 使用 Node.js 连接到 SQL 数据库\n\n\n> [AZURE.SELECTOR]\n- [Python](/documentation/articles/sql-database-develop-python-simple-ubuntu-linux)\n- [Node.js](/documentation/articles/sql-database-develop-nodejs-simple-linux)\n- [Ruby](/documentation/articles/sql-database-develop-ruby-simple-linux)\n\n\n本主题演示一个在 Ubuntu Linux 上运行的 Node.js 代码示例。该示例将使用 Tedious 驱动程序连接到 Azure SQL 数据库。\n\n\n## 先决条件\n\n\n打开终端并安装 **node** 和 **npm**（除非你的计算机上已安装）。\n\n\n    sudo apt-get install node\n    sudo apt-get install npm\n\n\n将计算机配置为使用 **node** 和 **npm** 之后，请导航到要在其中创建 Node.js 项目的目录，然后输入以下命令。\n\n\n    sudo npm init\n    sudo npm install tedious\n\n\n**npm init** 将创建节点项目。若要在项目创建期间保留默认值，请一直按 Enter，直到创建了项目。现在，项目目录中会出现 **package.json** 文件。\n\n\n### SQL 数据库\n\n请参阅[入门页](/documentation/articles/sql-database-get-started)，以了解如何创建示例数据库。必须根据指南创建 **AdventureWorks 数据库模板**。下面所示的示例只适用于 **AdventureWorks 架构**。\n\n## 步骤 1：获取连接详细信息\n\n[AZURE.INCLUDE [sql-database-include-connection-string-details-20-portalshots](../includes/sql-database-include-connection-string-details-20-portalshots.md)]\n\n## 步骤 2：连接\n\n[new Connection](http://pekim.github.io/tedious/api-connection.html) 函数用于连接到 SQL 数据库。\n\n    var Connection = require('tedious').Connection;\n    var config = {\n        userName: 'yourusername',\n        password: 'yourpassword',\n        server: 'yourserver.database.chinacloudapi.cn',\n        // If you are on Azure, you need this:\n        options: {encrypt: true, database: 'AdventureWorks'}\n    };\n    var connection = new Connection(config);\n    connection.on('connect', function(err) {\n    // If no error, then good to proceed.\n        console.log(\"Connected\");\n    });\n\n\n## 步骤 3：执行查询\n\n\n所有 SQL 语句都是使用 [new Request()](http://pekim.github.io/tedious/api-request.html) 函数执行的。如果语句返回了行（例如 SELECT 语句），则你可以使用 [request.on()](http://pekim.github.io/tedious/api-request.html) 函数检索这些行。如果未返回行，[request.on()](http://pekim.github.io/tedious/api-request.html) 函数将返回空列表。\n\n\n    var Connection = require('tedious').Connection;\n    var config = {\n        userName: 'yourusername',\n        password: 'yourpassword',\n        server: 'yourserver.database.chinacloudapi.cn',\n        // When you connect to Azure SQL Database, you need these next options.\n        options: {encrypt: true, database: 'AdventureWorks'}\n    };\n    var connection = new Connection(config);\n    connection.on('connect', function(err) {\n        // If no error, then good to proceed.\n        console.log(\"Connected\");\n        executeStatement();\n    });\n\n    var Request = require('tedious').Request;\n    var TYPES = require('tedious').TYPES;\n\n    function executeStatement() {\n        request = new Request(\"SELECT c.CustomerID, c.CompanyName,COUNT(soh.SalesOrderID) AS OrderCount FROM SalesLT.Customer AS c LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID GROUP BY c.CustomerID, c.CompanyName ORDER BY OrderCount DESC;\", function(err) {\n        if (err) {\n            console.log(err);}\n        });\n        var result = \"\";\n        request.on('row', function(columns) {\n            columns.forEach(function(column) {\n              if (column.value === null) {\n                console.log('NULL');\n              } else {\n                result+= column.value + \" \";\n              }\n            });\n            console.log(result);\n            result =\"\";\n        });\n\n        request.on('done', function(rowCount, more) {\n        console.log(rowCount + ' rows returned');\n        });\n        connection.execSql(request);\n    }\n\n\n## 步骤 4：插入行\n\n在本示例中，你将了解如何安全地执行 [INSERT](https://msdn.microsoft.com/zh-cn/library/ms174335.aspx) 语句，传递参数以保护应用程序免遭 [SQL 注入](https://technet.microsoft.com/zh-cn/library/ms161953(v=sql.105).aspx) 漏洞的危害，然后检索自动生成的[主键](https://msdn.microsoft.com/zh-cn/library/ms179610.aspx)值。\n\n\n    var Connection = require('tedious').Connection;\n    var config = {\n        userName: 'yourusername',\n        password: 'yourpassword',\n        server: 'yourserver.database.chinacloudapi.cn',\n        // If you are on Azure SQL Database, you need these next options.\n        options: {encrypt: true, database: 'AdventureWorks'}\n    };\n    var connection = new Connection(config);\n    connection.on('connect', function(err) {\n        // If no error, then good to proceed.\n        console.log(\"Connected\");\n        executeStatement1();\n    });\n\n    var Request = require('tedious').Request\n    var TYPES = require('tedious').TYPES;\n\n    function executeStatement1() {\n        request = new Request(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES (@Name, @Number, @Cost, @Price, CURRENT_TIMESTAMP);\", function(err) {\n         if (err) {\n            console.log(err);}\n        });\n        request.addParameter('Name', TYPES.NVarChar,'SQL Server Express 2014');\n        request.addParameter('Number', TYPES.NVarChar , 'SQLEXPRESS2014');\n        request.addParameter('Cost', TYPES.Int, 11);\n        request.addParameter('Price', TYPES.Int,11);\n        request.on('row', function(columns) {\n            columns.forEach(function(column) {\n              if (column.value === null) {\n                console.log('NULL');\n              } else {\n                console.log(\"Product id of inserted item is \" + column.value);\n              }\n            });\n        });     \n        connection.execSql(request);\n    }\n\n\n## 后续步骤\n\n有关详细信息，请参阅 [Node.js 开发人员中心](/develop/nodejs)。\n\n<!---HONumber=Mooncake_0104_2016-->\n"
}