{
  "nodes": [
    {
      "content": "如何通过 Python 使用 Azure Blob 存储 | Azure",
      "pos": [
        27,
        63
      ]
    },
    {
      "content": "了解如何通过 Python 使用 Azure Blob 服务上载、列出、下载和删除 Blob。",
      "pos": [
        82,
        129
      ]
    },
    {
      "content": "如何通过 Python 使用 Azure Blob 存储",
      "pos": [
        343,
        371
      ]
    },
    {
      "content": "概述",
      "pos": [
        471,
        473
      ]
    },
    {
      "pos": [
        475,
        570
      ],
      "content": "本指南将演示如何使用 Blob 存储执行常见方案。相关示例是使用 Python 编写的，并使用 <bpt id=\"p1\">[</bpt>Python Azure 存储服务包<ept id=\"p1\">][]</ept>。涉及的任务包括上传、列出、下载和删除 Blob。"
    },
    {
      "content": "创建容器",
      "pos": [
        767,
        771
      ]
    },
    {
      "pos": [
        775,
        888
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果您需要安装 Python 或 <bpt id=\"p1\">[</bpt>Python Azure 包<ept id=\"p1\">][]</ept>，请参阅 <bpt id=\"p2\">[</bpt>Python 安装指南<ept id=\"p2\">](/documentation/articles/python-how-to-install)</ept>。"
    },
    {
      "pos": [
        890,
        1010
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> 对象可以对容器和 Blob 进行操作。以下代码创建 <bpt id=\"p2\">**</bpt>BlobService<ept id=\"p2\">**</ept> 对象。在您希望在其中以编程方式访问 Azure 存储空间的任何 Python 文件中，将以下代码添加到文件的顶部附近。"
    },
    {
      "pos": [
        1060,
        1132
      ],
      "content": "以下代码使用存储帐户名称和帐户密钥创建一个 <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> 对象。使用实际帐户和密钥替换“myaccount”和“mykey”。"
    },
    {
      "pos": [
        1326,
        1372
      ],
      "content": "在以下代码示例中，如果该容器不存在，可以使用 <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> 对象来创建它。"
    },
    {
      "content": "默认情况下，新容器是专用容器，因此您必须指定存储访问密钥（如之前所做的那样）才能从该容器下载 Blob。如果您要让容器中的文件可供所有人使用，则可以使用以下代码创建容器并传递公共访问级别。",
      "pos": [
        1424,
        1518
      ]
    },
    {
      "content": "或者，也可以在创建容器后使用以下代码修改该容器。",
      "pos": [
        1607,
        1631
      ]
    },
    {
      "content": "在此更改后，Internet 上的任何人都可以查看公共容器中的 Blob，但只有您可以修改或删除它们。",
      "pos": [
        1721,
        1772
      ]
    },
    {
      "content": "将 Blob 上载到容器中",
      "pos": [
        1777,
        1790
      ]
    },
    {
      "pos": [
        1792,
        1968
      ],
      "content": "若要将数据上载到 Blob，请使用 <bpt id=\"p1\">**</bpt>put_block_blob_from_path<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>put_block_blob_from_file<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>put_block_blob_from_bytes<ept id=\"p3\">**</ept> 或 <bpt id=\"p4\">**</bpt>put_block_blob_from_text<ept id=\"p4\">**</ept> 方法。这些方法属于高级方法，用于在数据大小超过 64 MB 时执行必要的分块。"
    },
    {
      "pos": [
        1970,
        2153
      ],
      "content": "<bpt id=\"p1\">**</bpt>put_block_blob_from_path<ept id=\"p1\">**</ept> 上载指定路径中一个文件的内容，<bpt id=\"p2\">**</bpt>put_block_blob_from_file<ept id=\"p2\">**</ept> 上载已打开的文件/流中的内容。<bpt id=\"p3\">**</bpt>put_block_blob_from_bytes<ept id=\"p3\">**</ept> 上载一组字节，<bpt id=\"p4\">**</bpt>put_block_blob_from_text<ept id=\"p4\">**</ept> 使用使用指定的编码（默认为 UTF-8）上载指定的文本值。"
    },
    {
      "pos": [
        2155,
        2202
      ],
      "content": "下面的示例将 <bpt id=\"p1\">**</bpt>sunset.png<ept id=\"p1\">**</ept> 文件的内容上载到 <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> Blob。"
    },
    {
      "content": "列出容器中的 Blob",
      "pos": [
        2363,
        2374
      ]
    },
    {
      "pos": [
        2376,
        2525
      ],
      "content": "若要列出容器中的 Blob，请使用 <bpt id=\"p1\">**</bpt>list_blobs<ept id=\"p1\">**</ept> 方法。每次调用 <bpt id=\"p2\">**</bpt>list_blobs<ept id=\"p2\">**</ept> 将返回一段结果。若要获取所有结果，请检查结果的 <bpt id=\"p3\">**</bpt>next_marker<ept id=\"p3\">**</ept> 并在需要时再次调用 <bpt id=\"p4\">**</bpt>list_blobs<ept id=\"p4\">**</ept>。以下代码将容器中每个 Blob 的“名称”输出到控制台。"
    },
    {
      "content": "下载 Blob",
      "pos": [
        2813,
        2820
      ]
    },
    {
      "pos": [
        2822,
        2894
      ],
      "content": "每个结果段可以包含可变数目的 Blob，最大为 5000 个。如果存在特定数据段的 <bpt id=\"p1\">**</bpt>next_marker<ept id=\"p1\">**</ept>，容器中可能有多个 Blob。"
    },
    {
      "pos": [
        2896,
        3037
      ],
      "content": "若要从 Blob 下载数据，请使用 <bpt id=\"p1\">**</bpt>get_blob_to_path<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>get_blob_to_file<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>get_blob_to_bytes<ept id=\"p3\">**</ept> 或 <bpt id=\"p4\">**</bpt>get_blob_to_text<ept id=\"p4\">**</ept>。这些方法属于高级方法，用于在数据大小超过 64 MB 时执行必要的分块。"
    },
    {
      "pos": [
        3039,
        3124
      ],
      "content": "以下示例演示了如何使用 <bpt id=\"p1\">**</bpt>get_blob_to_path<ept id=\"p1\">**</ept> 下载 <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> Blob 的内容，并将其存储到 <bpt id=\"p3\">**</bpt>out-sunset.png<ept id=\"p3\">**</ept> 文件："
    },
    {
      "content": "删除 Blob",
      "pos": [
        3207,
        3214
      ]
    },
    {
      "content": "最后，若要删除 Blob，请调用 delete_blob。",
      "pos": [
        3216,
        3245
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        3305,
        3309
      ]
    },
    {
      "content": "现在，您已了解有关 Blob 存储的基础知识，可单击下面的链接来了解更复杂的存储任务。",
      "pos": [
        3311,
        3354
      ]
    },
    {
      "pos": [
        3358,
        3379
      ],
      "content": "访问 <bpt id=\"p1\">[</bpt>Azure 存储空间团队博客<ept id=\"p1\">][]</ept>"
    },
    {
      "content": "使用 AzCopy 命令行实用程序传输数据",
      "pos": [
        3383,
        3404
      ]
    },
    {
      "pos": [
        3451,
        3497
      ],
      "content": "有关详细信息，另请参阅 <bpt id=\"p1\">[</bpt>Python 开发人员中心<ept id=\"p1\">](/develop/python/)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何通过 Python 使用 Azure Blob 存储 | Azure\"\n    description=\"了解如何通过 Python 使用 Azure Blob 服务上载、列出、下载和删除 Blob。\"\n    services=\"storage\"\n    documentationCenter=\"python\"\n    authors=\"emgerner-msft\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"12/11/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 如何通过 Python 使用 Azure Blob 存储\n\n[AZURE.INCLUDE [storage-selector-blob-include](../includes/storage-selector-blob-include.md)]\n\n## 概述\n\n本指南将演示如何使用 Blob 存储执行常见方案。相关示例是使用 Python 编写的，并使用 [Python Azure 存储服务包][]。涉及的任务包括上传、列出、下载和删除 Blob。\n\n[AZURE.INCLUDE [storage-blob-concepts-include](../includes/storage-blob-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建容器\n\n> [AZURE.NOTE]如果您需要安装 Python 或 [Python Azure 包][]，请参阅 [Python 安装指南](/documentation/articles/python-how-to-install)。\n\n使用 **BlobService** 对象可以对容器和 Blob 进行操作。以下代码创建 **BlobService** 对象。在您希望在其中以编程方式访问 Azure 存储空间的任何 Python 文件中，将以下代码添加到文件的顶部附近。\n\n    from azure.storage.blob import BlobService\n\n以下代码使用存储帐户名称和帐户密钥创建一个 **BlobService** 对象。使用实际帐户和密钥替换“myaccount”和“mykey”。\n\n    blob_service = BlobService(account_name='myaccount', account_key='mykey')\n\n[AZURE.INCLUDE [storage-container-naming-rules-include](../includes/storage-container-naming-rules-include.md)]\n\n在以下代码示例中，如果该容器不存在，可以使用 **BlobService** 对象来创建它。\n\n    blob_service.create_container('mycontainer')\n\n默认情况下，新容器是专用容器，因此您必须指定存储访问密钥（如之前所做的那样）才能从该容器下载 Blob。如果您要让容器中的文件可供所有人使用，则可以使用以下代码创建容器并传递公共访问级别。\n\n    blob_service.create_container('mycontainer', x_ms_blob_public_access='container')\n\n或者，也可以在创建容器后使用以下代码修改该容器。\n\n    blob_service.set_container_acl('mycontainer', x_ms_blob_public_access='container')\n\n在此更改后，Internet 上的任何人都可以查看公共容器中的 Blob，但只有您可以修改或删除它们。\n\n## 将 Blob 上载到容器中\n\n若要将数据上载到 Blob，请使用 **put_block_blob_from_path**、**put_block_blob_from_file**、**put_block_blob_from_bytes** 或 **put_block_blob_from_text** 方法。这些方法属于高级方法，用于在数据大小超过 64 MB 时执行必要的分块。\n\n**put_block_blob_from_path** 上载指定路径中一个文件的内容，**put_block_blob_from_file** 上载已打开的文件/流中的内容。**put_block_blob_from_bytes** 上载一组字节，**put_block_blob_from_text** 使用使用指定的编码（默认为 UTF-8）上载指定的文本值。\n\n下面的示例将 **sunset.png** 文件的内容上载到 **myblob** Blob。\n\n    blob_service.put_block_blob_from_path(\n        'mycontainer',\n        'myblob',\n        'sunset.png',\n        x_ms_blob_content_type='image/png'\n    )\n\n## 列出容器中的 Blob\n\n若要列出容器中的 Blob，请使用 **list_blobs** 方法。每次调用 **list_blobs** 将返回一段结果。若要获取所有结果，请检查结果的 **next_marker** 并在需要时再次调用 **list_blobs**。以下代码将容器中每个 Blob 的“名称”输出到控制台。\n\n    blobs = []\n    marker = None\n    while True:\n        batch = blob_service.list_blobs('mycontainer', marker=marker)\n        blobs.extend(batch)\n        if not batch.next_marker:\n            break\n        marker = batch.next_marker\n    for blob in blobs:\n        print(blob.name)\n\n## 下载 Blob\n\n每个结果段可以包含可变数目的 Blob，最大为 5000 个。如果存在特定数据段的 **next_marker**，容器中可能有多个 Blob。\n\n若要从 Blob 下载数据，请使用 **get_blob_to_path**、**get_blob_to_file**、**get_blob_to_bytes** 或 **get_blob_to_text**。这些方法属于高级方法，用于在数据大小超过 64 MB 时执行必要的分块。\n\n以下示例演示了如何使用 **get_blob_to_path** 下载 **myblob** Blob 的内容，并将其存储到 **out-sunset.png** 文件：\n\n    blob_service.get_blob_to_path('mycontainer', 'myblob', 'out-sunset.png')\n\n## 删除 Blob\n\n最后，若要删除 Blob，请调用 delete_blob。\n\n    blob_service.delete_blob('mycontainer', 'myblob')\n\n## 后续步骤\n\n现在，您已了解有关 Blob 存储的基础知识，可单击下面的链接来了解更复杂的存储任务。\n\n- 访问 [Azure 存储空间团队博客][]\n- [使用 AzCopy 命令行实用程序传输数据](/documentation/articles/storage-use-azcopy)\n\n有关详细信息，另请参阅 [Python 开发人员中心](/develop/python/)。\n\n[Azure 存储空间团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n[Python Azure 包]: https://pypi.python.org/pypi/azure\n[Python Azure 存储服务包]: https://pypi.python.org/pypi/azure-storage\n\n<!---HONumber=Mooncake_0104_2016-->"
}