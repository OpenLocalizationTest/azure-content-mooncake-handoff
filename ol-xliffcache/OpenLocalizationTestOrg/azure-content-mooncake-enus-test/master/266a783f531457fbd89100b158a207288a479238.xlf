<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">266a783f531457fbd89100b158a207288a479238</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何使用队列存储 (C++) | Azure</source>
          <target state="new">如何使用队列存储 (C++) | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在 Azure 中使用队列存储服务。示例用 C++ 编写。</source>
          <target state="new">了解如何在 Azure 中使用队列存储服务。示例用 C++ 编写。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用队列存储</source>
          <target state="new">如何通过 C++ 使用队列存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本指南将演示如何使用 Azure 队列存储服务执行常见方案。示例用 C++ 编写，并使用<bpt id="p1">[</bpt>适用于 C++ 的 Azure 存储空间客户端库<ept id="p1">](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)</ept>。介绍的方案包括“插入”、“查看”、“获取”和“删除”队列消息以及“创建和删除队列”。</source>
          <target state="new">本指南将演示如何使用 Azure 队列存储服务执行常见方案。示例用 C++ 编写，并使用<bpt id="p1">[</bpt>适用于 C++ 的 Azure 存储空间客户端库<ept id="p1">](https://github.com/Azure/azure-storage-cpp/blob/v1.0.0/README.md)</ept>。介绍的方案包括“插入”、“查看”、“获取”和“删除”队列消息以及“创建和删除队列”。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 本指南主要面向适用于 C++ 的 Azure 存储空间客户端库 1.0.0 版及更高版本。建议的版本是存储空间客户端库 1.0.0，它可以通过 <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://www.nuget.org/packages/wastorage)</ept> 或 <bpt id="p2">[</bpt>GitHub<ept id="p2">](https://github.com/)</ept> 获得。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 本指南主要面向适用于 C++ 的 Azure 存储空间客户端库 1.0.0 版及更高版本。建议的版本是存储空间客户端库 1.0.0，它可以通过 <bpt id="p1">[</bpt>NuGet<ept id="p1">](http://www.nuget.org/packages/wastorage)</ept> 或 <bpt id="p2">[</bpt>GitHub<ept id="p2">](https://github.com/)</ept> 获得。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>创建 C++ 应用程序</source>
          <target state="new">创建 C++ 应用程序</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在本指南中，你将使用存储功能，这些功能可以在 C++ 应用程序中运行。</source>
          <target state="new">在本指南中，你将使用存储功能，这些功能可以在 C++ 应用程序中运行。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>为此，你将需要安装适用于 C++ 的 Azure 存储客户端库，并在你的 Azure 订阅中创建 Azure 存储帐户。</source>
          <target state="new">为此，你将需要安装适用于 C++ 的 Azure 存储客户端库，并在你的 Azure 订阅中创建 Azure 存储帐户。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>若要安装适用于 C++ 的 Azure 存储客户端库，你可以使用以下方法：</source>
          <target state="new">若要安装适用于 C++ 的 Azure 存储客户端库，你可以使用以下方法：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Linux：<ept id="p1">**</ept>按照<bpt id="p2">[</bpt>适用于 C++ 的 Azure 存储空间客户端库自述文件<ept id="p2">](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)</ept>页中提供的说明操作。</source>
          <target state="new"><bpt id="p1">**</bpt>Linux：<ept id="p1">**</ept>按照<bpt id="p2">[</bpt>适用于 C++ 的 Azure 存储空间客户端库自述文件<ept id="p2">](https://github.com/Azure/azure-storage-cpp/blob/master/README.md)</ept>页中提供的说明操作。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows：<ept id="p1">**</ept>在 Visual Studio 主菜单中，单击“工具”-&gt;“NuGet 程序包管理器”-&gt;“程序包管理器控制台”。在 <bpt id="p2">[</bpt>NuGet 程序包管理器控制台<ept id="p2">](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)</ept>窗口中输入以下命令，然后按 <bpt id="p3">**</bpt>ENTER<ept id="p3">**</ept>。</source>
          <target state="new"><bpt id="p1">**</bpt>Windows：<ept id="p1">**</ept>在 Visual Studio 主菜单中，单击“工具”-&gt;“NuGet 程序包管理器”-&gt;“程序包管理器控制台”。在 <bpt id="p2">[</bpt>NuGet 程序包管理器控制台<ept id="p2">](http://docs.nuget.org/docs/start-here/using-the-package-manager-console)</ept>窗口中输入以下命令，然后按 <bpt id="p3">**</bpt>ENTER<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>配置应用程序以访问队列存储</source>
          <target state="new">配置应用程序以访问队列存储</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>将以下 include 语句添加到 C++ 文件的顶部，你要在此使用 Azure 存储 API 来访问队列：</source>
          <target state="new">将以下 include 语句添加到 C++ 文件的顶部，你要在此使用 Azure 存储 API 来访问队列：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>设置 Azure 存储连接字符串</source>
          <target state="new">设置 Azure 存储连接字符串</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并使用<bpt id="p1">[</bpt>管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的存储帐户名称和存储访问密钥作为 <bpt id="p2">*</bpt>AccountName<ept id="p2">*</ept> 和 <bpt id="p3">*</bpt>AccountKey<ept id="p3">*</ept> 值。有关存储帐户和访问密钥的信息，请参阅<bpt id="p4">[</bpt>关于 Azure 存储帐户<ept id="p4">](/documentation/articles/storage-create-storage-account)</ept>。此示例演示如何声明一个静态字段以保存连接字符串：</source>
          <target state="new">Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并使用<bpt id="p1">[</bpt>管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的存储帐户名称和存储访问密钥作为 <bpt id="p2">*</bpt>AccountName<ept id="p2">*</ept> 和 <bpt id="p3">*</bpt>AccountKey<ept id="p3">*</ept> 值。有关存储帐户和访问密钥的信息，请参阅<bpt id="p4">[</bpt>关于 Azure 存储帐户<ept id="p4">](/documentation/articles/storage-create-storage-account)</ept>。此示例演示如何声明一个静态字段以保存连接字符串：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>若要在本地 Windows 计算机中测试你的应用程序，可以使用随 <bpt id="p1">[</bpt>Azure SDK<ept id="p1">](/downloads/)</ept> 一起安装的  Azure <bpt id="p2">[</bpt>存储模拟器<ept id="p2">](https://msdn.microsoft.com/zh-CN/library/azure/hh403989.aspx)</ept>。存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。以下示例演示如何声明一个静态字段以将连接字符串保存到你的本地存储模拟器：</source>
          <target state="new">若要在本地 Windows 计算机中测试你的应用程序，可以使用随 <bpt id="p1">[</bpt>Azure SDK<ept id="p1">](/downloads/)</ept> 一起安装的  Azure <bpt id="p2">[</bpt>存储模拟器<ept id="p2">](https://msdn.microsoft.com/zh-CN/library/azure/hh403989.aspx)</ept>。存储模拟器是一种用于模拟本地开发计算机上 Azure 中可用的 Blob、队列和表服务的实用程序。以下示例演示如何声明一个静态字段以将连接字符串保存到你的本地存储模拟器：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>若要启动 Azure 存储模拟器，请选择“开始”按钮或按 <bpt id="p1">**</bpt>Windows<ept id="p1">**</ept> 键。开始键入“Azure 存储模拟器”，然后从应用程序列表中选择“Azure 存储模拟器”。</source>
          <target state="new">若要启动 Azure 存储模拟器，请选择“开始”按钮或按 <bpt id="p1">**</bpt>Windows<ept id="p1">**</ept> 键。开始键入“Azure 存储模拟器”，然后从应用程序列表中选择“Azure 存储模拟器”。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>下面的示例假定你使用了这两个方法之一来获取存储连接字符串。</source>
          <target state="new">下面的示例假定你使用了这两个方法之一来获取存储连接字符串。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>检索你的连接字符串</source>
          <target state="new">检索你的连接字符串</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>可以使用 <bpt id="p1">**</bpt>cloud_storage_account<ept id="p1">**</ept> 类来表示您的存储帐户信息。若要从存储连接字符串中检索您的存储帐户信息，您可以使用 <bpt id="p2">**</bpt>parse<ept id="p2">**</ept> 方法。</source>
          <target state="new">可以使用 <bpt id="p1">**</bpt>cloud_storage_account<ept id="p1">**</ept> 类来表示您的存储帐户信息。若要从存储连接字符串中检索您的存储帐户信息，您可以使用 <bpt id="p2">**</bpt>parse<ept id="p2">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>如何：创建队列</source>
          <target state="new">如何：创建队列</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>cloud_queue_client<ept id="p1">**</ept> 对象可用于获取队列的引用对象。以下代码将创建 <bpt id="p2">**</bpt>cloud_queue_client<ept id="p2">**</ept> 对象。</source>
          <target state="new"><bpt id="p1">**</bpt>cloud_queue_client<ept id="p1">**</ept> 对象可用于获取队列的引用对象。以下代码将创建 <bpt id="p2">**</bpt>cloud_queue_client<ept id="p2">**</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>cloud_queue_client<ept id="p1">**</ept> 对象可获取对要使用的队列的引用。如果队列不存在，你可以创建它。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>cloud_queue_client<ept id="p1">**</ept> 对象可获取对要使用的队列的引用。如果队列不存在，你可以创建它。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>如何：在队列中插入消息</source>
          <target state="new">如何：在队列中插入消息</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>若要将消息插入到现有队列中，请先创建新的 <bpt id="p1">**</bpt>cloud_queue_message<ept id="p1">**</ept>。接下来，调用 <bpt id="p2">**</bpt>add_message<ept id="p2">**</ept> 方法。可以从字符串或 <bpt id="p3">**</bpt>字节<ept id="p3">**</ept> 数组创建 <bpt id="p4">**</bpt>cloud_queue_message<ept id="p4">**</ept>。以下代码将创建队列（如果该队列不存在）并插入消息  'Hello, World'。</source>
          <target state="new">若要将消息插入到现有队列中，请先创建新的 <bpt id="p1">**</bpt>cloud_queue_message<ept id="p1">**</ept>。接下来，调用 <bpt id="p2">**</bpt>add_message<ept id="p2">**</ept> 方法。可以从字符串或 <bpt id="p3">**</bpt>字节<ept id="p3">**</ept> 数组创建 <bpt id="p4">**</bpt>cloud_queue_message<ept id="p4">**</ept>。以下代码将创建队列（如果该队列不存在）并插入消息  'Hello, World'。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>如何：扫视下一条消息</source>
          <target state="new">如何：扫视下一条消息</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>通过调用 <bpt id="p1">**</bpt>peek_message<ept id="p1">**</ept> 方法，可以扫视队列最前面的消息，而不必从该队列中将其删除。</source>
          <target state="new">通过调用 <bpt id="p1">**</bpt>peek_message<ept id="p1">**</ept> 方法，可以扫视队列最前面的消息，而不必从该队列中将其删除。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>如何：更改已排队消息的内容</source>
          <target state="new">如何：更改已排队消息的内容</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 n，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。</source>
          <target state="new">你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 n，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>如何：取消下一条消息的排队</source>
          <target state="new">如何：取消下一条消息的排队</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>你的代码通过两个步骤来取消对队列中某条消息的排队。调用 <bpt id="p1">**</bpt>get_message<ept id="p1">**</ept> 时，您将获取队列中的下一条消息。从 <bpt id="p2">**</bpt>get_message<ept id="p2">**</ept> 返回的消息对从此队列读取消息的其他任何代码不可见。若要完成从队列中删除消息，您还必须调用 <bpt id="p3">**</bpt>delete_message<ept id="p3">**</ept>。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 <bpt id="p4">**</bpt>delete_message<ept id="p4">**</ept>。</source>
          <target state="new">你的代码通过两个步骤来取消对队列中某条消息的排队。调用 <bpt id="p1">**</bpt>get_message<ept id="p1">**</ept> 时，您将获取队列中的下一条消息。从 <bpt id="p2">**</bpt>get_message<ept id="p2">**</ept> 返回的消息对从此队列读取消息的其他任何代码不可见。若要完成从队列中删除消息，您还必须调用 <bpt id="p3">**</bpt>delete_message<ept id="p3">**</ept>。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 <bpt id="p4">**</bpt>delete_message<ept id="p4">**</ept>。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>如何：使用其他方法取消对消息的排队</source>
          <target state="new">如何：使用其他方法取消对消息的排队</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id="p1">**</bpt>get_messages<ept id="p1">**</ept> 方法来在一次调用中获取 20 条消息。然后，它会使用 <bpt id="p2">**</bpt>for<ept id="p2">**</ept> 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，将对所有消息同时启动 5 分钟的超时设置，因此调用 <bpt id="p3">**</bpt>get_messages<ept id="p3">**</ept> 的 5 分钟后，任何尚未删除的消息都将再次可见。</source>
          <target state="new">你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id="p1">**</bpt>get_messages<ept id="p1">**</ept> 方法来在一次调用中获取 20 条消息。然后，它会使用 <bpt id="p2">**</bpt>for<ept id="p2">**</ept> 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，将对所有消息同时启动 5 分钟的超时设置，因此调用 <bpt id="p3">**</bpt>get_messages<ept id="p3">**</ept> 的 5 分钟后，任何尚未删除的消息都将再次可见。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>如何：获取队列长度</source>
          <target state="new">如何：获取队列长度</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>你可以获取队列中消息的估计数。<bpt id="p1">**</bpt>download_attributes<ept id="p1">**</ept> 方法允许队列服务检索队列属性，包括消息计数。<bpt id="p2">**</bpt>approximate_message_count<ept id="p2">**</ept> 方法可获取队列中的大致消息数。</source>
          <target state="new">你可以获取队列中消息的估计数。<bpt id="p1">**</bpt>download_attributes<ept id="p1">**</ept> 方法允许队列服务检索队列属性，包括消息计数。<bpt id="p2">**</bpt>approximate_message_count<ept id="p2">**</ept> 方法可获取队列中的大致消息数。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>如何：删除队列</source>
          <target state="new">如何：删除队列</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>若要删除队列及其包含的所有消息，请对队列对象调用 <bpt id="p1">**</bpt>delete_queue_if_exists<ept id="p1">**</ept>。</source>
          <target state="new">若要删除队列及其包含的所有消息，请对队列对象调用 <bpt id="p1">**</bpt>delete_queue_if_exists<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>既然你已了解队列存储的基本知识，就可以按照以下链接了解有关 Azure 存储的详细信息。</source>
          <target state="new">既然你已了解队列存储的基本知识，就可以按照以下链接了解有关 Azure 存储的详细信息。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用 Blob 存储</source>
          <target state="new">如何通过 C++ 使用 Blob 存储</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>如何通过 C++ 使用表存储</source>
          <target state="new">如何通过 C++ 使用表存储</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>使用 C++ 列出 Azure 存储资源</source>
          <target state="new">使用 C++ 列出 Azure 存储资源</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>适用于 C++ 的存储空间客户端库参考</source>
          <target state="new">适用于 C++ 的存储空间客户端库参考</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Azure 存档文档</source>
          <target state="new">Azure 存档文档</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>