{
  "nodes": [
    {
      "content": "在 Linux VM 上运行 OpenFOAM 与 HPC Pack | Azure",
      "pos": [
        24,
        66
      ]
    },
    {
      "content": "在 Azure 上部署 Microsoft HPC Pack 群集，并在多个 Linux 计算节点上跨 RDMA 网络运行 OpenFOAM 作业。",
      "pos": [
        82,
        156
      ]
    },
    {
      "content": "在 Azure 中的 Linux RDMA 群集上运行 OpenFoam 和 Microsoft HPC Pack",
      "pos": [
        398,
        455
      ]
    },
    {
      "pos": [
        457,
        597
      ],
      "content": "本文介绍如何在 Azure 上部署 Microsoft HPC Pack 群集，以及如何在多个跨 Azure 远程直接内存访问 (RDMA) 网络进行连接的 Linux 计算节点上运行 <bpt id=\"p1\">[</bpt>OpenFoam<ept id=\"p1\">](http://openfoam.com/)</ept> 作业和 Intel MPI。"
    },
    {
      "pos": [
        599,
        693
      ],
      "content": "[AZURE.INCLUDE <bpt id=\"p1\">[</bpt>了解部署模型<ept id=\"p1\">](../includes/learn-about-deployment-models-classic-include.md)</ept>]资源管理器模型。"
    },
    {
      "content": "OpenFOAM（Open Field Operation and Manipulation 的缩写）是免费提供的开源计算流体动力学 (CFD) 软件包，广泛用于商业和学术组织的工程和科学项目中。它包括各种网格工具，最主要的工具是 snappyHexMesh，这是一个并行处理式网格器，适用于复杂的 CAD 几何以及预处理和后处理。几乎所有进程都是并行运行的，因此用户可以根据自己的需要充分利用计算机硬件。",
      "pos": [
        695,
        898
      ]
    },
    {
      "pos": [
        900,
        1212
      ],
      "content": "Microsoft HPC Pack 可提供在 Azure 虚拟机群集上运行各种大型 HPC 和并行应用程序的功能，包括 MPI 应用程序。从 Microsoft HPC Pack 2012 R2 Update 2 开始，HPC Pack 还支持在 HPC Pack 群集中部署的 Linux 计算节点 VM 上运行 Linux HPC 应用程序。有关将 Linux 计算节点与 HPC Pack 一起使用的简介，请参阅 <bpt id=\"p1\">[</bpt>Azure 的 HPC Pack 群集中的 Linux 计算节点入门<ept id=\"p1\">](/documentation/articles/virtual-machines-linux-cluster-hpcpack)</ept>。"
    },
    {
      "pos": [
        1215,
        1280
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本文假设你已对 Linux 系统管理以及如何在 Linux HPC 群集上运行 MPI 工作负荷有所了解。"
    },
    {
      "content": "先决条件",
      "pos": [
        1285,
        1289
      ]
    },
    {
      "pos": [
        1295,
        1662
      ],
      "content": "<bpt id=\"p1\">**</bpt>具有 Linux 计算节点的 HPC Pack 群集<ept id=\"p1\">**</ept> - 请参阅 <bpt id=\"p2\">[</bpt>Azure 的 HPC Pack 群集中的 Linux 计算节点入门<ept id=\"p2\">](/documentation/articles/virtual-machines-linux-cluster-hpcpack)</ept>，了解使用 Azure PowerShell 脚本和 Azure 应用商店中的 HPC Pack 映像，在 Azure 上部署 HPC Pack 群集与 Linux 计算节点的先决条件和步骤。如需使用 A8 计算密集型实例来访问 Azure RDMA 网络的其他注意事项，请参阅<bpt id=\"p3\">[</bpt>关于 A8、A9、A10 和 A11 计算密集型实例<ept id=\"p3\">](/documentation/articles/virtual-machines-a8-a9-a10-a11-specs)</ept>。"
    },
    {
      "content": "下面是一个示例 XML 配置文件，可以与脚本配合使用以部署基于 Azure 的 HPC Pack 群集，群集中包含一个 A8 大小的 Windows Server 2012 R2 头节点和 2 个 A8 大小的 SUSE Linux Enterprise Server 12 计算节点。请将订阅和服务名称替换为相应值。",
      "pos": [
        1668,
        1827
      ]
    },
    {
      "pos": [
        1834,
        2024
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>目前，在 Azure 中实现 Linux RDMA 联网只能在特定的 VM 上进行，这些 VM 是通过 Azure 应用商店中启用了 RDMA 的 SUSE Linux Enterprise Server 12 映像 (b4590d9e3ed742e4a1d46e5424aa335e\\_\\_suse-sles-12-hpc-v20150708) 创建的。"
    },
    {
      "pos": [
        3452,
        3742
      ],
      "content": "<bpt id=\"p1\">**</bpt>Intel MPI<ept id=\"p1\">**</ept> - 若要在 Azure 的 Linux 计算节点上运行 OpenFOAM，你需要 <bpt id=\"p2\">[</bpt>Intel.com site<ept id=\"p2\">](https://software.intel.com/zh-cn/intel-mpi-library/)</ept> 提供的 Intel MPI Library 5 运行时。在后面的步骤中，你需要在 Linux 计算节点上安装 Intel MPI。为此，向 Intel 注册后，请点击确认电子邮件中的链接转到相关网页，并复制相应版本的 Intel MPI 所对应的 .tgz 文件的下载链接。本文基于 Intel MPI 版本 5.0.3.048。"
    },
    {
      "pos": [
        3748,
        3979
      ],
      "content": "<bpt id=\"p1\">**</bpt>OpenFOAM Source Pack<ept id=\"p1\">**</ept> - 从 <bpt id=\"p2\">[</bpt>OpenFOAM Foundation 站点<ept id=\"p2\">](http://www.openfoam.org/download/source.php)</ept>下载 Linux 版 OpenFOAM Source Pack 软件。本文基于 2.3.1 版的 Source Pack（以 OpenFOAM-2.3.1.tgz 形式供用户下载）。请按本文后面的说明，在 Linux 计算节点上对 OpenFOAM 进行解包和编译。"
    },
    {
      "pos": [
        3985,
        4138
      ],
      "content": "<bpt id=\"p1\">**</bpt>EnSight<ept id=\"p1\">**</ept>（可选）- 若要查看 OpenFOAM 模拟结果，请下载 Windows 版的 <bpt id=\"p2\">[</bpt>EnSight<ept id=\"p2\">](https://www.ceisoftware.com/download/)</ept> 可视化和分析程序并将其安装在 HPC Pack 群集的头节点上。EnSight 站点提供了许可和下载信息。"
    },
    {
      "content": "在计算节点之间建立互信关系",
      "pos": [
        4144,
        4157
      ]
    },
    {
      "pos": [
        4159,
        4383
      ],
      "content": "在多个 Linux 节点上运行跨节点作业需要节点彼此信任（通过 <bpt id=\"p1\">**</bpt>rsh<ept id=\"p1\">**</ept> 或 <bpt id=\"p2\">**</bpt>ssh<ept id=\"p2\">**</ept>）。使用 Microsoft HPC Pack IaaS 部署脚本创建 HPC Pack 群集时，此脚本会自动为指定的管理员帐户建立永久性互信关系。对于在群集域中创建的非管理员用户，分配作业时必须在节点之间建立临时互信关系，并在作业完成后销毁互信关系。若要为每个用户执行此操作，请向群集提供一个 HPC Pack 用于建立信任关系的 RSA 密钥对。"
    },
    {
      "content": "生成一个 RSA 密钥对",
      "pos": [
        4389,
        4401
      ]
    },
    {
      "pos": [
        4403,
        4464
      ],
      "content": "通过运行 Linux <bpt id=\"p1\">**</bpt>ssh keygen<ept id=\"p1\">**</ept> 命令，可以很容易生成一个 RSA 密钥对，其中包含一个公钥和一个私钥。"
    },
    {
      "content": "登录到 Linux 计算机。",
      "pos": [
        4470,
        4484
      ]
    },
    {
      "content": "运行以下命令。",
      "pos": [
        4490,
        4497
      ]
    },
    {
      "content": "将目录切换到 ~/.ssh 目录。私钥存储在 id\\_rsa 中，公钥存储在 id\\_rsa.pub 中。",
      "pos": [
        4656,
        4709
      ]
    },
    {
      "content": "私钥和公钥",
      "pos": [
        4717,
        4722
      ]
    },
    {
      "content": "将密钥对添加到 HPC Pack 群集中",
      "pos": [
        4735,
        4755
      ]
    },
    {
      "content": "使用 HPC Pack 管理员帐户（运行部署脚本时设置的管理员帐户），以远程桌面连接方式连接至头节点。",
      "pos": [
        4760,
        4811
      ]
    },
    {
      "content": "使用 Windows Server 标准程序，在群集的 Active Directory 域中创建一个域用户帐户。例如，在头节点上使用 Active Directory 用户和计算机工具。本文中的示例假设你创建了一个名为 hpclab\\\\hpcuser 域用户。",
      "pos": [
        4816,
        4947
      ]
    },
    {
      "content": "创建一个名为 C:\\\\cred.xml 的文件，将 RSA 密钥数据复制到此文件中。你可以在本文末尾的示例文件中找到此文件的一个示例。",
      "pos": [
        4953,
        5020
      ]
    },
    {
      "pos": [
        5235,
        5330
      ],
      "content": "打开命令提示符，输入以下命令，为 hpclab\\\\hpcuser 帐户设置凭据数据。使用 <bpt id=\"p1\">**</bpt>extendeddata<ept id=\"p1\">**</ept> 参数传递你为关键数据创建的 C:\\\\cred.xml 文件的名称。"
    },
    {
      "content": "如果你在一个 Linux 节点上生成 RSA 密钥对，请记住在使用完成后删除这些密钥。如果找到一个现有 id\\_rsa 文件或 id\\_rsa.pub 文件，HPC Pack 并不会建立互信关系。",
      "pos": [
        5526,
        5624
      ]
    },
    {
      "pos": [
        5627,
        5918
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>我们不建议在共享群集上以群集管理员的身份运行 Linux 作业，因为由管理员提交的作业会在 Linux 节点的根帐户下运行。由非管理员用户提交的作业会在本地 Linux 用户帐户（名称与作业用户相同）下运行，HPC Pack 会在分配了此作业的所有节点内为这位 Linux 用户建立互信关系。在运行作业之前，你可以在 Linux 节点上手动设置 Linux 用户，也可以在提交作业时由 HPC Pack 自动创建用户。如果 HPC Pack 创建了一个用户，则作业完成后 HPC Pack 会删除此用户。在节点上完成作业后删除密钥，以减少安全威胁。"
    },
    {
      "content": "为 Linux 节点设置文件共享",
      "pos": [
        5923,
        5939
      ]
    },
    {
      "pos": [
        5941,
        6169
      ],
      "content": "现在，在头节点上对一个文件夹设置标准 SMB 共享，然后在所有 Linux 节点上装载此共享文件夹，就可以支持 Linux 节点使用一个通用路径访问应用程序文件。你可以根据需要使用其他文件共享选项，例如 Azure 文件共享（建议用于多种方案）或 NFS 共享。请参阅 <bpt id=\"p1\">[</bpt>Azure 的 HPC Pack 群集中的 Linux 计算节点入门<ept id=\"p1\">](virtual-machines-linux-cluster-hpcpack.md)</ept>中的文件共享信息和详细步骤。"
    },
    {
      "pos": [
        6175,
        6289
      ],
      "content": "在头节点上创建一个文件夹，然后通过设置读/写权限与所有人共享。例如，在头节点上将 C:\\\\OpenFOAM 共享为 \\\\\\SUSE12RDMA-HN\\\\OpenFOAM。在此处，<bpt id=\"p1\">*</bpt>SUSE12RDMA-HN<ept id=\"p1\">*</ept> 是头节点的主机名。"
    },
    {
      "content": "打开 Windows PowerShell 窗口并运行以下命令来装载共享文件夹。",
      "pos": [
        6295,
        6335
      ]
    },
    {
      "pos": [
        6578,
        6737
      ],
      "content": "第一个命令在 LinuxNodes 组中的所有节点上创建名为 /openfoam 的文件夹。第二个命令将共享文件夹 //SUSE12RDMA-HN/OpenFOAM 装载到 dir\\_mode 和 file\\_mode 位设置为 777 的 Linux 节点上。该命令中的<bpt id=\"p1\">*</bpt>用户名<ept id=\"p1\">*</ept>和<bpt id=\"p2\">*</bpt>密码<ept id=\"p2\">*</ept>应是头节点上的用户的凭据。"
    },
    {
      "pos": [
        6740,
        6810
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>第二个命令中的 “<ph id=\"ph2\">`” 符号是 PowerShell 的转义符号。“`</ph>,” 表示 “,”（逗号字符）是命令的一部分。"
    },
    {
      "content": "安装 MPI 和 OpenFOAM",
      "pos": [
        6815,
        6832
      ]
    },
    {
      "content": "若要在 RDMA 网络上以 MPI 作业的形式运行 OpenFOAM，你需要使用 Intel MPI 库编译 OpenFOAM。",
      "pos": [
        6834,
        6898
      ]
    },
    {
      "pos": [
        6900,
        6992
      ],
      "content": "你需要先运行多个 <bpt id=\"p1\">**</bpt>clusrun<ept id=\"p1\">**</ept> 命令，在所有 Linux 节点上安装 Intel MPI 库和 OpenFOAM。使用以前配置的头节点共享在 Linux 节点中共享安装文件。"
    },
    {
      "pos": [
        6995,
        7293
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>这些安装和编译步骤属于示例，需要对 Linux 系统管理有一定的了解，以确保正确安装相关内容（尤其是编译器和库）。你可能需要根据 Intel MPI 和 OpenFOAM 的版本修改某些环境变量或其他设置。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Intel MPI Library for Linux 安装指南<ept id=\"p1\">](http://scc.ustc.edu.cn/zlsc/tc4600/intel/impi/INSTALL.html)</ept>和 <bpt id=\"p2\">[</bpt>OpenFOAM Source Pack 安装<ept id=\"p2\">](http://www.openfoam.org/download/source.php)</ept>。"
    },
    {
      "content": "安装 Intel MPI",
      "pos": [
        7300,
        7312
      ]
    },
    {
      "pos": [
        7314,
        7472
      ],
      "content": "将下载的 Intel MPI 安装包（在此示例中为 l\\_mpi\\_p\\_5.0.3.048.tgz）保存到头节点上的 C:\\\\OpenFoam 中，使得 Linux 节点能够从 /openfoam 访问此文件。然后，运行 <bpt id=\"p1\">**</bpt>clusrun<ept id=\"p1\">**</ept> 在所有 Linux 节点上安装 Intel MPI Library。"
    },
    {
      "content": "以下命令复制安装包并将其解压缩到每个节点上的 /opt/intel。",
      "pos": [
        7478,
        7512
      ]
    },
    {
      "pos": [
        7781,
        8016
      ],
      "content": "若要以无提示方式安装 Intel MPI Library，请使用 silent.cfg 文件。你可以在本文末尾的示例文件中找到一个示例。将此文件放在共享文件夹 /openfoam 中。有关 silent.cfg 文件的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Intel MPI Library for Linux 安装指南 - 无提示安装<ept id=\"p1\">](http://scc.ustc.edu.cn/zlsc/tc4600/intel/impi/INSTALL.html#silentinstall)</ept>。"
    },
    {
      "pos": [
        8023,
        8111
      ],
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph>请确保将你的 silent.cfg 文件另存为带有 Linux 换行（仅 LF，而不是 CR LF）的文本文件。这可确保其在 Linux 节点上正常运行。"
    },
    {
      "content": "在静默模式下安装 Intel MPI Library。",
      "pos": [
        8117,
        8144
      ]
    },
    {
      "content": "配置 MPI",
      "pos": [
        8282,
        8288
      ]
    },
    {
      "content": "测试时，应将以下行添加到每个 Linux 节点的 /etc/security/limits.conf 中：",
      "pos": [
        8290,
        8343
      ]
    },
    {
      "pos": [
        8464,
        8522
      ],
      "content": "更新 limits.conf 文件之后，请重新启动 Linux 节点。例如，使用以下 <bpt id=\"p1\">**</bpt>clusrun<ept id=\"p1\">**</ept> 命令。"
    },
    {
      "content": "重新启动之后，请确保将共享文件夹以 /openfoam 形式装入。",
      "pos": [
        8586,
        8619
      ]
    },
    {
      "content": "编译并安装 OpenFOAM",
      "pos": [
        8625,
        8639
      ]
    },
    {
      "pos": [
        8641,
        8795
      ],
      "content": "将下载的 OpenFOAM Source Pack 安装包（在此示例中为 OpenFOAM-2.3.1.tgz）保存到头节点上的 C:\\\\OpenFoam 中，使得 Linux 节点能够从 /openfoam 访问此文件。然后，运行 <bpt id=\"p1\">**</bpt>clusrun<ept id=\"p1\">**</ept> 在所有 Linux 节点上编译 OpenFOAM。"
    },
    {
      "content": "在每个 Linux 节点上创建 /opt/OpenFOAM 文件夹，将源包复制到该文件夹中，然后解压缩。",
      "pos": [
        8802,
        8854
      ]
    },
    {
      "content": "若要通过 Intel MPI Library 编译 OpenFOAM，请先针对 Intel MPI 和 OpenFOAM 设置某些环境变量。使用名为 settings.sh 的 bash 脚本来执行该操作。你可以在本文末尾的示例文件中找到一个示例。将此文件（保存时带有 Linux 换行）置于共享文件夹 /openfoam 中。此文件还包含可以随后用来运行 OpenFOAM 作业的 MPI 和 OpenFOAM 运行时设置。",
      "pos": [
        9129,
        9342
      ]
    },
    {
      "pos": [
        9347,
        9424
      ],
      "content": "安装编译 OpenFOAM 所需的相关程序包。你可能需要添加存储库，具体取决于你的 Linux 分发。运行类似于以下命令的 <bpt id=\"p1\">**</bpt>clusrun<ept id=\"p1\">**</ept> 命令："
    },
    {
      "pos": [
        9765,
        9850
      ],
      "content": "运行以下命令以编译 OpenFOAM。编译过程需一段时间才能完成，并且会生成大量可供标准输出的日志信息，因此请使用 <bpt id=\"p1\">**</bpt>/interleaved<ept id=\"p1\">**</ept> 选项来交错显示输出。"
    },
    {
      "pos": [
        9997,
        10056
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>命令中的“\\`”符号是 PowerShell 的转义符号。“\\`&amp;”表示“&amp;”是命令的一部分。"
    },
    {
      "content": "准备运行 OpenFOAM 作业",
      "pos": [
        10061,
        10077
      ]
    },
    {
      "content": "现在，请准备好在 2 个 Linux 节点上运行名为 sloshingTank3D 的 MPI 作业，该作业是 OpenFoam 示例之一。",
      "pos": [
        10079,
        10149
      ]
    },
    {
      "content": "设置运行时环境",
      "pos": [
        10155,
        10162
      ]
    },
    {
      "content": "在头节点的 Windows PowerShell 窗口运行以下命令，以便在所有 Linux 节点上设置 MPI 和 OpenFOAM 的运行时环境。（此命令仅适用于 SUSE Linux。）",
      "pos": [
        10164,
        10259
      ]
    },
    {
      "content": "准备示例数据",
      "pos": [
        10351,
        10357
      ]
    },
    {
      "content": "使用以前配置的头节点共享在 Linux 节点中共享文件（装载为 /openfoam）。",
      "pos": [
        10359,
        10402
      ]
    },
    {
      "content": "通过 SSH 连接到 Linux 计算节点之一。",
      "pos": [
        10408,
        10432
      ]
    },
    {
      "content": "如果你尚未执行此操作，请运行以下命令以设置 OpenFOAM 运行时环境。",
      "pos": [
        10438,
        10475
      ]
    },
    {
      "content": "将 sloshingTank3D 示例复制到共享文件夹，然后导航到该文件夹。",
      "pos": [
        10539,
        10577
      ]
    },
    {
      "content": "使用此示例的默认参数时，可能需要数十分钟或更长的时间才能运行，因此你可能需要修改部分参数，使其运行速度加快。一种简单的方法是修改 system/controlDict 文件中的时间步骤变量 deltaT 和 writeInterval，该文件存储与时间控制以及解决方案数据的读取和写入相关的所有输入数据。例如，你可以将 deltaT 的值从 0.05 更改为 0.5，将 writeInterval 的值从 0.05 更改为 0.5。",
      "pos": [
        10727,
        10944
      ]
    },
    {
      "content": "修改步骤变量",
      "pos": [
        10952,
        10958
      ]
    },
    {
      "pos": [
        10981,
        11284
      ],
      "content": "在 system/decomposeParDict 文件中指定变量的所需值。此示例使用 2 个 Linux 节点，每个节点 8 个内核，因此可将 numberOfSubdomains 设置为 16，将 hierarchicalCoeffs 的 n 设置为 (1 1 16)，这表示使用 16 个流程并行运行 OpenFOAM。有关如何并行运行 OpenFOAM 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>OpenFOAM 用户指南：3.4 并行运行应用程序<ept id=\"p1\">](http://cfd.direct/openfoam/user-guide/running-applications-parallel/#x12-820003.4)</ept>。"
    },
    {
      "content": "对过程进行分解",
      "pos": [
        11292,
        11299
      ]
    },
    {
      "content": "从 sloshingTank3D 目录运行以下命令，对示例数据进行准备。",
      "pos": [
        11317,
        11353
      ]
    },
    {
      "content": "在头节点上，你会看到示例数据文件已复制到 C:\\\\OpenFoam\\\\sloshingTank3D 中。（C:\\\\OpenFoam 是头节点上的共享文件夹。）",
      "pos": [
        11648,
        11727
      ]
    },
    {
      "content": "头节点上的数据文件",
      "pos": [
        11735,
        11744
      ]
    },
    {
      "content": "mpirun 的主机文件",
      "pos": [
        11763,
        11775
      ]
    },
    {
      "pos": [
        11777,
        11822
      ],
      "content": "在此步骤中，你将创建一个可供 <bpt id=\"p1\">**</bpt>mpirun<ept id=\"p1\">**</ept> 命令使用的主机文件（计算节点的列表）。"
    },
    {
      "content": "在其中一个 Linux 节点的 /openfoam 下创建名为 hostfile 的新文件，使用户可以在所有 Linux 节点的 /openfoam/hostfile 位置访问此文件。",
      "pos": [
        11828,
        11920
      ]
    },
    {
      "content": "将 Linux 节点名称写入此文件中。在此示例中，该文件如下所示：",
      "pos": [
        11926,
        11959
      ]
    },
    {
      "pos": [
        12038,
        12160
      ],
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph>你还可以在头节点的 C:\\\\OpenFoam\\\\hostfile 中创建此文件。如果这样做，你可以将你的脚本另存为带有 Linux 换行（仅 LF，而不是 CR LF）的文本文件。这可确保其在 Linux 节点上正常运行。"
    },
    {
      "content": "提交 OpenFOAM 作业",
      "pos": [
        13353,
        13367
      ]
    },
    {
      "content": "现在，你可以在 HPC 群集管理器中提交作业。部分作业任务需要将脚本 hpcimpirun.sh 传递到命令行中。",
      "pos": [
        13369,
        13426
      ]
    },
    {
      "content": "连接到你的群集头节点，然后启动 HPC 群集管理器。",
      "pos": [
        13431,
        13457
      ]
    },
    {
      "content": "在“资源管理”中，确保 Linux 计算节点处于“联机”状态。如果节点未处于联机状态，请选择它们并单击“联机”。",
      "pos": [
        13462,
        13518
      ]
    },
    {
      "content": "在“作业管理”中，单击“新作业”。",
      "pos": [
        13524,
        13541
      ]
    },
    {
      "pos": [
        13547,
        13576
      ],
      "content": "为作业输入一个名称，如 <bpt id=\"p1\">_</bpt>sloshingTank3D<ept id=\"p1\">_</ept>。"
    },
    {
      "content": "作业详细信息",
      "pos": [
        13584,
        13590
      ]
    },
    {
      "content": "在“作业资源”中，将资源类型选为“节点”，并将“最小数量”设置为 2。这样就会在 2 个 Linux 节点上运行此作业，每个节点有 8 个内核（仅限本示例）。",
      "pos": [
        13610,
        13689
      ]
    },
    {
      "content": "作业资源",
      "pos": [
        13697,
        13701
      ]
    },
    {
      "content": "向作业添加 4 个任务，任务的命令行和设置如下。",
      "pos": [
        13723,
        13747
      ]
    },
    {
      "pos": [
        13754,
        13855
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>运行 <ph id=\"ph2\">`source /openfoam/settings.sh`</ph> 将设置 OpenFOAM 和 MPI 运行时环境，因此下述每个任务会在调用 OpenFOAM 命令之前调用它。"
    },
    {
      "pos": [
        13865,
        13928
      ],
      "content": "<bpt id=\"p1\">**</bpt>任务 1<ept id=\"p1\">**</ept>。运行 <bpt id=\"p2\">**</bpt>decomposePar<ept id=\"p2\">**</ept>，以便生成并行运行 <bpt id=\"p3\">**</bpt>interDyMFoam<ept id=\"p3\">**</ept> 所需的数据文件。"
    },
    {
      "content": "为任务分配 1 个节点",
      "pos": [
        13946,
        13957
      ]
    },
    {
      "pos": [
        13971,
        14075
      ],
      "content": "<bpt id=\"p1\">**</bpt>命令行<ept id=\"p1\">**</ept> - <ph id=\"ph1\">`source /openfoam/settings.sh &amp;&amp; decomposePar -force &gt; /openfoam/decomposePar${CCP_JOBID}.log`</ph>"
    },
    {
      "pos": [
        14093,
        14128
      ],
      "content": "<bpt id=\"p1\">**</bpt>工作目录<ept id=\"p1\">**</ept> - /openfoam/sloshingTank3D"
    },
    {
      "content": "请参阅下图。以相似的方式配置剩余任务。",
      "pos": [
        14146,
        14165
      ]
    },
    {
      "content": "任务 1 详细信息",
      "pos": [
        14177,
        14186
      ]
    },
    {
      "pos": [
        14212,
        14249
      ],
      "content": "<bpt id=\"p1\">**</bpt>任务 2<ept id=\"p1\">**</ept>。并行运行 <bpt id=\"p2\">**</bpt>interDyMFoam<ept id=\"p2\">**</ept> 以计算示例。"
    },
    {
      "content": "为任务分配 2 个节点",
      "pos": [
        14263,
        14274
      ]
    },
    {
      "pos": [
        14288,
        14419
      ],
      "content": "<bpt id=\"p1\">**</bpt>命令行<ept id=\"p1\">**</ept> - <ph id=\"ph1\">`source /openfoam/settings.sh &amp;&amp; /openfoam/hpcimpirun.sh interDyMFoam -parallel &gt; /openfoam/interDyMFoam${CCP_JOBID}.log`</ph>"
    },
    {
      "pos": [
        14433,
        14468
      ],
      "content": "<bpt id=\"p1\">**</bpt>工作目录<ept id=\"p1\">**</ept> - /openfoam/sloshingTank3D"
    },
    {
      "pos": [
        14478,
        14548
      ],
      "content": "<bpt id=\"p1\">**</bpt>任务 3<ept id=\"p1\">**</ept>。运行 <bpt id=\"p2\">**</bpt>reconstructPar<ept id=\"p2\">**</ept>，将每个 processor\\_N\\_ 目录的时间目录集合并到一个时间目录集中。"
    },
    {
      "content": "为任务分配 1 个节点",
      "pos": [
        14562,
        14573
      ]
    },
    {
      "pos": [
        14587,
        14688
      ],
      "content": "<bpt id=\"p1\">**</bpt>命令行<ept id=\"p1\">**</ept> - <ph id=\"ph1\">`source /openfoam/settings.sh &amp;&amp; reconstructPar &gt; /openfoam/reconstructPar${CCP_JOBID}.log`</ph>"
    },
    {
      "pos": [
        14702,
        14737
      ],
      "content": "<bpt id=\"p1\">**</bpt>工作目录<ept id=\"p1\">**</ept> - /openfoam/sloshingTank3D"
    },
    {
      "pos": [
        14747,
        14846
      ],
      "content": "<bpt id=\"p1\">**</bpt>任务 4<ept id=\"p1\">**</ept>。并行运行 <bpt id=\"p2\">**</bpt>foamToEnsight<ept id=\"p2\">**</ept>，将 OpenFOAM 结果文件转换成 EnSight 格式，然后将 EnSight 文件置于示例目录的名为 Ensight 的目录中。"
    },
    {
      "content": "为任务分配 2 个节点",
      "pos": [
        14860,
        14871
      ]
    },
    {
      "pos": [
        14885,
        15018
      ],
      "content": "<bpt id=\"p1\">**</bpt>命令行<ept id=\"p1\">**</ept> - <ph id=\"ph1\">`source /openfoam/settings.sh &amp;&amp; /openfoam/hpcimpirun.sh foamToEnsight -parallel &gt; /openfoam/foamToEnsight${CCP_JOBID}.log`</ph>"
    },
    {
      "pos": [
        15032,
        15067
      ],
      "content": "<bpt id=\"p1\">**</bpt>工作目录<ept id=\"p1\">**</ept> - /openfoam/sloshingTank3D"
    },
    {
      "content": "按任务顺序的升序将依赖项添加到这些任务中。",
      "pos": [
        15073,
        15094
      ]
    },
    {
      "content": "任务依赖项",
      "pos": [
        15102,
        15107
      ]
    },
    {
      "content": "单击“提交”运行此作业。",
      "pos": [
        15133,
        15145
      ]
    },
    {
      "content": "默认情况下，HPC Pack 将以当前登录的用户帐户提交作业。单击“提交”后，你可能会看到一个对话框，提示你输入用户名和密码。",
      "pos": [
        15151,
        15214
      ]
    },
    {
      "content": "作业凭据",
      "pos": [
        15222,
        15226
      ]
    },
    {
      "content": "在某些情况下，HPC Pack 会记住你之前输入的用户信息，并不会显示此对话框。为了使 HPC Pack 再次显示此对话框，在“命令提示符”窗口中输入以下命令，然后提交此作业。",
      "pos": [
        15240,
        15328
      ]
    },
    {
      "content": "根据你为示例设置的参数的不同，此作业可能需要数十分钟到数小时的时间才能完成。在热度地图中，你会看到该作业在 2 个 Linux 节点上运行。",
      "pos": [
        15374,
        15444
      ]
    },
    {
      "content": "热度地图",
      "pos": [
        15452,
        15456
      ]
    },
    {
      "content": "每个节点上启动了 8 个进程。",
      "pos": [
        15473,
        15488
      ]
    },
    {
      "content": "Linux 进程",
      "pos": [
        15496,
        15504
      ]
    },
    {
      "content": "作业结束时，可在 C:\\\\OpenFoam\\\\sloshingTank3D 下的文件夹中找到作业结果，在 C:\\\\OpenFoam 中找到日志文件。",
      "pos": [
        15528,
        15602
      ]
    },
    {
      "content": "在 EnSight 中查看结果",
      "pos": [
        15608,
        15623
      ]
    },
    {
      "pos": [
        15625,
        15839
      ],
      "content": "（可选）使用 <bpt id=\"p1\">[</bpt>EnSight<ept id=\"p1\">](https://www.ceisoftware.com/)</ept> 将 OpenFOAM 作业的结果可视化并对其进行分析。有关在 EnSight 中实现可视化和动画效果的详细信息，请参阅此<bpt id=\"p2\">[</bpt>视频指南<ept id=\"p2\">](http://www.ceisoftware.com/wp-content/uploads/screencasts/vof_visualization/vof_visualization.html)</ept>。"
    },
    {
      "content": "在头节点上安装 EnSight 后，启动它。",
      "pos": [
        15845,
        15867
      ]
    },
    {
      "content": "打开 C:\\\\OpenFoam\\\\sloshingTank3D\\\\EnSight\\\\sloshingTank3D.case。",
      "pos": [
        15873,
        15935
      ]
    },
    {
      "content": "你会在查看器中看到一个储槽。",
      "pos": [
        15941,
        15955
      ]
    },
    {
      "content": "EnSight 中的罐",
      "pos": [
        15963,
        15974
      ]
    },
    {
      "pos": [
        15987,
        16038
      ],
      "content": "从 <bpt id=\"p1\">**</bpt>internalMesh<ept id=\"p1\">**</ept> 创建“等值面”，然后选择变量 <bpt id=\"p2\">**</bpt>alpha\\_water<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "创建等值面",
      "pos": [
        16046,
        16051
      ]
    },
    {
      "pos": [
        16070,
        16118
      ],
      "content": "为前一步骤中创建的 <bpt id=\"p1\">**</bpt>Isosurface\\_part<ept id=\"p1\">**</ept> 设置颜色。例如，将其设置为水蓝色。"
    },
    {
      "content": "编辑等值面颜色",
      "pos": [
        16126,
        16133
      ]
    },
    {
      "content": "从“罐壁”创建“等值体”，方法是：在“部件”面板中选择“罐壁”，然后单击工具栏中的“等值面”按钮。",
      "pos": [
        16158,
        16207
      ]
    },
    {
      "content": "在对话框中，选择“等值体”作为“类型”，然后将“等值体范围”的最小值设置为 0.5。单击“使用所选部件创建”创建等值体。",
      "pos": [
        16213,
        16273
      ]
    },
    {
      "pos": [
        16279,
        16329
      ],
      "content": "为前一步骤中创建的 <bpt id=\"p1\">**</bpt>Iso\\_volume\\_part<ept id=\"p1\">**</ept> 设置颜色。例如，将其设置为深水蓝色。"
    },
    {
      "content": "设置“罐壁”的颜色。例如，将其设置为透明的白色。",
      "pos": [
        16335,
        16359
      ]
    },
    {
      "content": "现在，请单击“播放”查看模拟结果。",
      "pos": [
        16364,
        16381
      ]
    },
    {
      "content": "罐的结果",
      "pos": [
        16389,
        16393
      ]
    },
    {
      "content": "示例文件",
      "pos": [
        16412,
        16416
      ]
    },
    {
      "content": "示例 cred.xml 文件",
      "pos": [
        16423,
        16437
      ]
    },
    {
      "content": "示例 silent.cfg 文件",
      "pos": [
        18737,
        18753
      ]
    },
    {
      "content": "示例 settings.sh 脚本",
      "pos": [
        20947,
        20964
      ]
    },
    {
      "content": "实例 hpcimpirun.sh 脚本",
      "pos": [
        21409,
        21428
      ]
    }
  ],
  "content": "<properties\n pageTitle=\"在 Linux VM 上运行 OpenFOAM 与 HPC Pack | Azure\"\n description=\"在 Azure 上部署 Microsoft HPC Pack 群集，并在多个 Linux 计算节点上跨 RDMA 网络运行 OpenFOAM 作业。\"\n services=\"virtual-machines\"\n documentationCenter=\"\"\n authors=\"dlepow\"\n manager=\"timlt\"\n editor=\"\"\n tags=\"azure-service-management,hpc-pack\"/>\n<tags\n    ms.service=\"virtual-machines\"\n    ms.date=\"11/25/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n# 在 Azure 中的 Linux RDMA 群集上运行 OpenFoam 和 Microsoft HPC Pack\n\n本文介绍如何在 Azure 上部署 Microsoft HPC Pack 群集，以及如何在多个跨 Azure 远程直接内存访问 (RDMA) 网络进行连接的 Linux 计算节点上运行 [OpenFoam](http://openfoam.com/) 作业和 Intel MPI。\n\n[AZURE.INCLUDE [了解部署模型](../includes/learn-about-deployment-models-classic-include.md)]资源管理器模型。\n\nOpenFOAM（Open Field Operation and Manipulation 的缩写）是免费提供的开源计算流体动力学 (CFD) 软件包，广泛用于商业和学术组织的工程和科学项目中。它包括各种网格工具，最主要的工具是 snappyHexMesh，这是一个并行处理式网格器，适用于复杂的 CAD 几何以及预处理和后处理。几乎所有进程都是并行运行的，因此用户可以根据自己的需要充分利用计算机硬件。\n\nMicrosoft HPC Pack 可提供在 Azure 虚拟机群集上运行各种大型 HPC 和并行应用程序的功能，包括 MPI 应用程序。从 Microsoft HPC Pack 2012 R2 Update 2 开始，HPC Pack 还支持在 HPC Pack 群集中部署的 Linux 计算节点 VM 上运行 Linux HPC 应用程序。有关将 Linux 计算节点与 HPC Pack 一起使用的简介，请参阅 [Azure 的 HPC Pack 群集中的 Linux 计算节点入门](/documentation/articles/virtual-machines-linux-cluster-hpcpack)。\n\n>[AZURE.NOTE]本文假设你已对 Linux 系统管理以及如何在 Linux HPC 群集上运行 MPI 工作负荷有所了解。\n\n## 先决条件\n\n*   **具有 Linux 计算节点的 HPC Pack 群集** - 请参阅 [Azure 的 HPC Pack 群集中的 Linux 计算节点入门](/documentation/articles/virtual-machines-linux-cluster-hpcpack)，了解使用 Azure PowerShell 脚本和 Azure 应用商店中的 HPC Pack 映像，在 Azure 上部署 HPC Pack 群集与 Linux 计算节点的先决条件和步骤。如需使用 A8 计算密集型实例来访问 Azure RDMA 网络的其他注意事项，请参阅[关于 A8、A9、A10 和 A11 计算密集型实例](/documentation/articles/virtual-machines-a8-a9-a10-a11-specs)。\n\n    下面是一个示例 XML 配置文件，可以与脚本配合使用以部署基于 Azure 的 HPC Pack 群集，群集中包含一个 A8 大小的 Windows Server 2012 R2 头节点和 2 个 A8 大小的 SUSE Linux Enterprise Server 12 计算节点。请将订阅和服务名称替换为相应值。\n\n    >[AZURE.NOTE]目前，在 Azure 中实现 Linux RDMA 联网只能在特定的 VM 上进行，这些 VM 是通过 Azure 应用商店中启用了 RDMA 的 SUSE Linux Enterprise Server 12 映像 (b4590d9e3ed742e4a1d46e5424aa335e\\_\\_suse-sles-12-hpc-v20150708) 创建的。\n\n    \n        <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n        <IaaSClusterConfig>\n          <Subscription>\n            <SubscriptionName>Subscription-1</SubscriptionName>\n            <StorageAccount>allvhdsje</StorageAccount>\n          </Subscription>\n          <Location>Japan East</Location>  \n          <VNet>\n            <VNetName>suse12rdmavnet</VNetName>\n            <SubnetName>SUSE12RDMACluster</SubnetName>\n          </VNet>\n          <Domain>\n            <DCOption>HeadNodeAsDC</DCOption>\n            <DomainFQDN>hpclab.local</DomainFQDN>\n          </Domain>\n          <Database>\n            <DBOption>LocalDB</DBOption>\n          </Database>\n          <HeadNode>\n            <VMName>SUSE12RDMA-HN</VMName>\n            <ServiceName>suse12rdma-je</ServiceName>\n            <VMSize>A8</VMSize>\n            <EnableRESTAPI />\n            <EnableWebPortal />\n          </HeadNode>\n          <LinuxComputeNodes>\n            <VMNamePattern>SUSE12RDMA-LN%1%</VMNamePattern>\n            <ServiceName>suse12rdma-je</ServiceName>\n            <VMSize>A8</VMSize>\n            <NodeCount>2</NodeCount>\n            <ImageName>b4590d9e3ed742e4a1d46e5424aa335e__suse-sles-12-hpc-v20150708</ImageName>\n          </LinuxComputeNodes>\n        </IaaSClusterConfig>\n    \n\n    **其他须知项**\n\n    *   将所有 Linux 计算节点部署在一个云服务中，以便使用节点之间的 RDMA 网络连接。\n\n    *   部署 Linux 节点以后，若需通过 SSH 进行连接以执行其他管理任务，可在 Azure 门户中查找每个 Linux VM 的 SSH 连接详细信息。\n        \n*   **Intel MPI** - 若要在 Azure 的 Linux 计算节点上运行 OpenFOAM，你需要 [Intel.com site](https://software.intel.com/zh-cn/intel-mpi-library/) 提供的 Intel MPI Library 5 运行时。在后面的步骤中，你需要在 Linux 计算节点上安装 Intel MPI。为此，向 Intel 注册后，请点击确认电子邮件中的链接转到相关网页，并复制相应版本的 Intel MPI 所对应的 .tgz 文件的下载链接。本文基于 Intel MPI 版本 5.0.3.048。\n\n*   **OpenFOAM Source Pack** - 从 [OpenFOAM Foundation 站点](http://www.openfoam.org/download/source.php)下载 Linux 版 OpenFOAM Source Pack 软件。本文基于 2.3.1 版的 Source Pack（以 OpenFOAM-2.3.1.tgz 形式供用户下载）。请按本文后面的说明，在 Linux 计算节点上对 OpenFOAM 进行解包和编译。\n\n*   **EnSight**（可选）- 若要查看 OpenFOAM 模拟结果，请下载 Windows 版的 [EnSight](https://www.ceisoftware.com/download/) 可视化和分析程序并将其安装在 HPC Pack 群集的头节点上。EnSight 站点提供了许可和下载信息。\n\n\n## 在计算节点之间建立互信关系\n\n在多个 Linux 节点上运行跨节点作业需要节点彼此信任（通过 **rsh** 或 **ssh**）。使用 Microsoft HPC Pack IaaS 部署脚本创建 HPC Pack 群集时，此脚本会自动为指定的管理员帐户建立永久性互信关系。对于在群集域中创建的非管理员用户，分配作业时必须在节点之间建立临时互信关系，并在作业完成后销毁互信关系。若要为每个用户执行此操作，请向群集提供一个 HPC Pack 用于建立信任关系的 RSA 密钥对。\n\n### 生成一个 RSA 密钥对\n\n通过运行 Linux **ssh keygen** 命令，可以很容易生成一个 RSA 密钥对，其中包含一个公钥和一个私钥。\n\n1.  登录到 Linux 计算机。\n\n2.  运行以下命令。\n\n    \n        ssh-keygen -t rsa\n        \n\n    >[AZURE.NOTE]按 **Enter** 以使用默认设置，直至命令完成。请勿在此处输入密码；系统提示输入密码时，只需按 **Enter** 即可。\n\n    ![生成一个 RSA 密钥对][keygen]\n\n3.  将目录切换到 ~/.ssh 目录。私钥存储在 id\\_rsa 中，公钥存储在 id\\_rsa.pub 中。\n\n    ![私钥和公钥][keys]\n\n### 将密钥对添加到 HPC Pack 群集中\n1.  使用 HPC Pack 管理员帐户（运行部署脚本时设置的管理员帐户），以远程桌面连接方式连接至头节点。\n\n2. 使用 Windows Server 标准程序，在群集的 Active Directory 域中创建一个域用户帐户。例如，在头节点上使用 Active Directory 用户和计算机工具。本文中的示例假设你创建了一个名为 hpclab\\\\hpcuser 域用户。\n\n3.  创建一个名为 C:\\\\cred.xml 的文件，将 RSA 密钥数据复制到此文件中。你可以在本文末尾的示例文件中找到此文件的一个示例。\n\n    \n        <ExtendedData>\n            <PrivateKey>Copy the contents of private key here</PrivateKey>\n            <PublicKey>Copy the contents of public key here</PublicKey>\n        </ExtendedData>\n        \n\n4.  打开命令提示符，输入以下命令，为 hpclab\\\\hpcuser 帐户设置凭据数据。使用 **extendeddata** 参数传递你为关键数据创建的 C:\\\\cred.xml 文件的名称。\n\n    \n        hpccred setcreds /extendeddata:c:\\cred.xml /user:hpclab\\hpcuser /password:<UserPassword>\n        \n\n    此命令成功完成后，没有输出。为你需要运行作业的用户帐户设置凭据后，请将 cred.xml 文件存储在安全位置，或者删除 cred.xml 文件。\n\n5.  如果你在一个 Linux 节点上生成 RSA 密钥对，请记住在使用完成后删除这些密钥。如果找到一个现有 id\\_rsa 文件或 id\\_rsa.pub 文件，HPC Pack 并不会建立互信关系。\n\n>[AZURE.IMPORTANT]我们不建议在共享群集上以群集管理员的身份运行 Linux 作业，因为由管理员提交的作业会在 Linux 节点的根帐户下运行。由非管理员用户提交的作业会在本地 Linux 用户帐户（名称与作业用户相同）下运行，HPC Pack 会在分配了此作业的所有节点内为这位 Linux 用户建立互信关系。在运行作业之前，你可以在 Linux 节点上手动设置 Linux 用户，也可以在提交作业时由 HPC Pack 自动创建用户。如果 HPC Pack 创建了一个用户，则作业完成后 HPC Pack 会删除此用户。在节点上完成作业后删除密钥，以减少安全威胁。\n\n## 为 Linux 节点设置文件共享\n\n现在，在头节点上对一个文件夹设置标准 SMB 共享，然后在所有 Linux 节点上装载此共享文件夹，就可以支持 Linux 节点使用一个通用路径访问应用程序文件。你可以根据需要使用其他文件共享选项，例如 Azure 文件共享（建议用于多种方案）或 NFS 共享。请参阅 [Azure 的 HPC Pack 群集中的 Linux 计算节点入门](virtual-machines-linux-cluster-hpcpack.md)中的文件共享信息和详细步骤。\n\n1.  在头节点上创建一个文件夹，然后通过设置读/写权限与所有人共享。例如，在头节点上将 C:\\\\OpenFOAM 共享为 \\\\\\SUSE12RDMA-HN\\\\OpenFOAM。在此处，*SUSE12RDMA-HN* 是头节点的主机名。\n\n2.  打开 Windows PowerShell 窗口并运行以下命令来装载共享文件夹。\n\n    ```\n    clusrun /nodegroup:LinuxNodes mkdir -p /openfoam\n\n    clusrun /nodegroup:LinuxNodes mount -t cifs //SUSE12RDMA-HN/OpenFOAM /openfoam -o vers=2.1`,username=<username>`,password='<password>’`,dir_mode=0777`,file_mode=0777\n    ```\n\n第一个命令在 LinuxNodes 组中的所有节点上创建名为 /openfoam 的文件夹。第二个命令将共享文件夹 //SUSE12RDMA-HN/OpenFOAM 装载到 dir\\_mode 和 file\\_mode 位设置为 777 的 Linux 节点上。该命令中的*用户名*和*密码*应是头节点上的用户的凭据。\n\n>[AZURE.NOTE]第二个命令中的 “`” 符号是 PowerShell 的转义符号。“`,” 表示 “,”（逗号字符）是命令的一部分。\n\n## 安装 MPI 和 OpenFOAM\n\n若要在 RDMA 网络上以 MPI 作业的形式运行 OpenFOAM，你需要使用 Intel MPI 库编译 OpenFOAM。\n\n你需要先运行多个 **clusrun** 命令，在所有 Linux 节点上安装 Intel MPI 库和 OpenFOAM。使用以前配置的头节点共享在 Linux 节点中共享安装文件。\n\n>[AZURE.IMPORTANT]这些安装和编译步骤属于示例，需要对 Linux 系统管理有一定的了解，以确保正确安装相关内容（尤其是编译器和库）。你可能需要根据 Intel MPI 和 OpenFOAM 的版本修改某些环境变量或其他设置。有关详细信息，请参阅 [Intel MPI Library for Linux 安装指南](http://scc.ustc.edu.cn/zlsc/tc4600/intel/impi/INSTALL.html)和 [OpenFOAM Source Pack 安装](http://www.openfoam.org/download/source.php)。\n\n\n### 安装 Intel MPI\n\n将下载的 Intel MPI 安装包（在此示例中为 l\\_mpi\\_p\\_5.0.3.048.tgz）保存到头节点上的 C:\\\\OpenFoam 中，使得 Linux 节点能够从 /openfoam 访问此文件。然后，运行 **clusrun** 在所有 Linux 节点上安装 Intel MPI Library。\n\n1.  以下命令复制安装包并将其解压缩到每个节点上的 /opt/intel。\n\n    \n        clusrun /nodegroup:LinuxNodes mkdir -p /opt/intel\n    \n        clusrun /nodegroup:LinuxNodes cp /openfoam/l_mpi_p_5.0.3.048.tgz /opt/intel/\n    \n        clusrun /nodegroup:LinuxNodes tar -xzf /opt/intel/l_mpi_p_5.0.3.048.tgz -C /opt/intel/\n        \n\n2.  若要以无提示方式安装 Intel MPI Library，请使用 silent.cfg 文件。你可以在本文末尾的示例文件中找到一个示例。将此文件放在共享文件夹 /openfoam 中。有关 silent.cfg 文件的详细信息，请参阅 [Intel MPI Library for Linux 安装指南 - 无提示安装](http://scc.ustc.edu.cn/zlsc/tc4600/intel/impi/INSTALL.html#silentinstall)。\n\n    >[AZURE.TIP]请确保将你的 silent.cfg 文件另存为带有 Linux 换行（仅 LF，而不是 CR LF）的文本文件。这可确保其在 Linux 节点上正常运行。\n\n3.  在静默模式下安装 Intel MPI Library。\n\n    \n        clusrun /nodegroup:LinuxNodes bash /opt/intel/l_mpi_p_5.0.3.048/install.sh --silent /openfoam/silent.cfg\n        \n    \n### 配置 MPI\n\n测试时，应将以下行添加到每个 Linux 节点的 /etc/security/limits.conf 中：\n\n    \n    *               hard    memlock         unlimited\n    *               soft    memlock         unlimited\n    \n\n更新 limits.conf 文件之后，请重新启动 Linux 节点。例如，使用以下 **clusrun** 命令。\n\n    \n    clusrun /nodegroup:LinuxNodes systemctl reboot\n    \n\n重新启动之后，请确保将共享文件夹以 /openfoam 形式装入。\n\n### 编译并安装 OpenFOAM\n\n将下载的 OpenFOAM Source Pack 安装包（在此示例中为 OpenFOAM-2.3.1.tgz）保存到头节点上的 C:\\\\OpenFoam 中，使得 Linux 节点能够从 /openfoam 访问此文件。然后，运行 **clusrun** 在所有 Linux 节点上编译 OpenFOAM。\n\n\n1.  在每个 Linux 节点上创建 /opt/OpenFOAM 文件夹，将源包复制到该文件夹中，然后解压缩。\n\n    \n        clusrun /nodegroup:LinuxNodes mkdir -p /opt/OpenFOAM\n    \n        clusrun /nodegroup:LinuxNodes cp /openfoam/OpenFOAM-2.3.1.tgz /opt/OpenFOAM/\n    \n        clusrun /nodegroup:LinuxNodes tar -xzf /opt/OpenFOAM/OpenFOAM-2.3.1.tgz -C /opt/OpenFOAM/\n        \n\n2.  若要通过 Intel MPI Library 编译 OpenFOAM，请先针对 Intel MPI 和 OpenFOAM 设置某些环境变量。使用名为 settings.sh 的 bash 脚本来执行该操作。你可以在本文末尾的示例文件中找到一个示例。将此文件（保存时带有 Linux 换行）置于共享文件夹 /openfoam 中。此文件还包含可以随后用来运行 OpenFOAM 作业的 MPI 和 OpenFOAM 运行时设置。\n\n3. 安装编译 OpenFOAM 所需的相关程序包。你可能需要添加存储库，具体取决于你的 Linux 分发。运行类似于以下命令的 **clusrun** 命令：\n\n    \n        clusrun /nodegroup:LinuxNodes zypper ar http://download.opensuse.org/distribution/13.2/repo/oss/suse/ opensuse\n        \n        clusrun /nodegroup:LinuxNodes zypper -n --gpg-auto-import-keys install --repo opensuse --force-resolution -t pattern devel_C_C++\n        \n    \n    必要时可对每个 Linux 节点使用 ssh，以便运行相关命令来确认这些命令是否正常运行。\n\n4.  运行以下命令以编译 OpenFOAM。编译过程需一段时间才能完成，并且会生成大量可供标准输出的日志信息，因此请使用 **/interleaved** 选项来交错显示输出。\n\n    ```\n    clusrun /nodegroup:LinuxNodes /interleaved source /openfoam/settings.sh `&`& /opt/OpenFOAM/OpenFOAM-2.3.1/Allwmake\n    ```\n    \n    >[AZURE.NOTE]命令中的“\\`”符号是 PowerShell 的转义符号。“\\`&”表示“&”是命令的一部分。\n\n## 准备运行 OpenFOAM 作业\n\n现在，请准备好在 2 个 Linux 节点上运行名为 sloshingTank3D 的 MPI 作业，该作业是 OpenFoam 示例之一。\n\n### 设置运行时环境\n\n在头节点的 Windows PowerShell 窗口运行以下命令，以便在所有 Linux 节点上设置 MPI 和 OpenFOAM 的运行时环境。（此命令仅适用于 SUSE Linux。）\n\n    \n    clusrun /nodegroup:LinuxNodes cp /openfoam/settings.sh /etc/profile.d/\n    \n\n### 准备示例数据\n\n使用以前配置的头节点共享在 Linux 节点中共享文件（装载为 /openfoam）。\n\n1.  通过 SSH 连接到 Linux 计算节点之一。\n\n2.  如果你尚未执行此操作，请运行以下命令以设置 OpenFOAM 运行时环境。\n\n    \n        $ source /openfoam/settings.sh\n        \n    \n3.  将 sloshingTank3D 示例复制到共享文件夹，然后导航到该文件夹。\n\n    \n        $ cp -r $FOAM_TUTORIALS/multiphase/interDyMFoam/ras/sloshingTank3D /openfoam/\n    \n        $ cd /openfoam/sloshingTank3D\n        \n\n4.  使用此示例的默认参数时，可能需要数十分钟或更长的时间才能运行，因此你可能需要修改部分参数，使其运行速度加快。一种简单的方法是修改 system/controlDict 文件中的时间步骤变量 deltaT 和 writeInterval，该文件存储与时间控制以及解决方案数据的读取和写入相关的所有输入数据。例如，你可以将 deltaT 的值从 0.05 更改为 0.5，将 writeInterval 的值从 0.05 更改为 0.5。\n\n    ![修改步骤变量][step_variables]\n\n5.  在 system/decomposeParDict 文件中指定变量的所需值。此示例使用 2 个 Linux 节点，每个节点 8 个内核，因此可将 numberOfSubdomains 设置为 16，将 hierarchicalCoeffs 的 n 设置为 (1 1 16)，这表示使用 16 个流程并行运行 OpenFOAM。有关如何并行运行 OpenFOAM 的详细信息，请参阅 [OpenFOAM 用户指南：3.4 并行运行应用程序](http://cfd.direct/openfoam/user-guide/running-applications-parallel/#x12-820003.4)。\n\n    ![对过程进行分解][decompose]\n\n6.  从 sloshingTank3D 目录运行以下命令，对示例数据进行准备。\n\n    \n        $ . $WM_PROJECT_DIR/bin/tools/RunFunctions\n    \n        $ m4 constant/polyMesh/blockMeshDict.m4 > constant/polyMesh/blockMeshDict\n    \n        $ runApplication blockMesh\n    \n        $ cp 0/alpha.water.org 0/alpha.water\n    \n        $ runApplication setFields  \n        \n    \n7.  在头节点上，你会看到示例数据文件已复制到 C:\\\\OpenFoam\\\\sloshingTank3D 中。（C:\\\\OpenFoam 是头节点上的共享文件夹。）\n\n    ![头节点上的数据文件][data_files]\n\n### mpirun 的主机文件\n\n在此步骤中，你将创建一个可供 **mpirun** 命令使用的主机文件（计算节点的列表）。\n\n1.  在其中一个 Linux 节点的 /openfoam 下创建名为 hostfile 的新文件，使用户可以在所有 Linux 节点的 /openfoam/hostfile 位置访问此文件。\n\n2.  将 Linux 节点名称写入此文件中。在此示例中，该文件如下所示：\n\n           \n        SUSE12RDMA-LN1\n        SUSE12RDMA-LN2\n        \n    \n    >[AZURE.TIP]你还可以在头节点的 C:\\\\OpenFoam\\\\hostfile 中创建此文件。如果这样做，你可以将你的脚本另存为带有 Linux 换行（仅 LF，而不是 CR LF）的文本文件。这可确保其在 Linux 节点上正常运行。\n\n    **Bash 脚本包装**\n\n    如果你有多个 Linux 节点，并且你的作业仅在部分节点上运行，则最好不要使用固定的主机文件，因为你不知道哪些节点会分配给你的作业。在这种情况下，可以为 **mpirun** 编写一个 bash 脚本包装，以便自动创建主机文件。你可以在本文末尾的示例文件中找到一个示例性的名为 hpcimpirun.sh 的 bash 脚本包装，然后将其另存为 /openfoam/hpcimpirun.sh。此示例脚本执行以下任务：\n\n    1.  设置 **mpirun** 的环境变量以及其他命令参数，以便通过 RDMA 网络运行 MPI 作业。在本示例中，设置如下：\n\n        *   I\\_MPI\\_FABRICS=shm:dapl\n        *   I\\_MPI\\_DAPL\\_PROVIDER=ofa-v2-ib0\n        *   I\\_MPI\\_DYNAMIC\\_CONNECTION=0\n\n    2.  根据环境变量 $CCP\\_NODES\\_CORES 创建主机文件，该变量是在激活作业时由 HPC 头节点设置的。\n\n        $CCP\\_NODES\\_CORES 的格式遵循以下模式：\n\n        ```\n        <Number of nodes> <Name of node1> <Cores of node1> <Name of node2> <Cores of node2>...`\n        ```\n\n        其中\n\n        * `<Number of nodes>`：分配给此作业的节点数。  \n        \n        * `<Name of node_n_...>`：分配给此作业的每个节点的名称。\n        \n        * `<Cores of node_n_...>`：分配给此作业的节点上的内核数。\n\n        例如，如果作业需要 2 个节点才能运行，则 $CCP\\_NODES\\_CORES 将类似于\n\n    \n            2 SUSE12RDMA-LN1 8 SUSE12RDMA-LN2 8\n            \n        \n    3.  调用 **mpirun** 命令并将 2 个参数追加到命令行。\n\n        * `--hostfile <hostfilepath>: <hostfilepath>` - 该脚本创建的主机文件的路径\n\n        * `-np ${CCP_NUMCPUS}: ${CCP_NUMCPUS}` - HPC Pack 头节点设置的环境变量，用于存储分配给此作业的内核的总数。在本示例中，它指定 **mpirun** 的进程数。\n\n\n## 提交 OpenFOAM 作业\n\n现在，你可以在 HPC 群集管理器中提交作业。部分作业任务需要将脚本 hpcimpirun.sh 传递到命令行中。\n\n1. 连接到你的群集头节点，然后启动 HPC 群集管理器。\n\n2. 在“资源管理”中，确保 Linux 计算节点处于“联机”状态。如果节点未处于联机状态，请选择它们并单击“联机”。\n\n3.  在“作业管理”中，单击“新作业”。\n\n4.  为作业输入一个名称，如 _sloshingTank3D_。\n\n    ![作业详细信息][job_details]\n\n5.  在“作业资源”中，将资源类型选为“节点”，并将“最小数量”设置为 2。这样就会在 2 个 Linux 节点上运行此作业，每个节点有 8 个内核（仅限本示例）。\n\n    ![作业资源][job_resources]\n\n6.  向作业添加 4 个任务，任务的命令行和设置如下。\n\n    >[AZURE.NOTE]运行 `source /openfoam/settings.sh` 将设置 OpenFOAM 和 MPI 运行时环境，因此下述每个任务会在调用 OpenFOAM 命令之前调用它。\n\n    *   **任务 1**。运行 **decomposePar**，以便生成并行运行 **interDyMFoam** 所需的数据文件。\n    \n        *   为任务分配 1 个节点\n\n        *   **命令行** - `source /openfoam/settings.sh && decomposePar -force > /openfoam/decomposePar${CCP_JOBID}.log`\n    \n        *   **工作目录** - /openfoam/sloshingTank3D\n        \n        请参阅下图。以相似的方式配置剩余任务。\n\n        ![任务 1 详细信息][task_details1]\n\n    *   **任务 2**。并行运行 **interDyMFoam** 以计算示例。\n\n        *   为任务分配 2 个节点\n\n        *   **命令行** - `source /openfoam/settings.sh && /openfoam/hpcimpirun.sh interDyMFoam -parallel > /openfoam/interDyMFoam${CCP_JOBID}.log`\n\n        *   **工作目录** - /openfoam/sloshingTank3D\n\n    *   **任务 3**。运行 **reconstructPar**，将每个 processor\\_N\\_ 目录的时间目录集合并到一个时间目录集中。\n\n        *   为任务分配 1 个节点\n\n        *   **命令行** - `source /openfoam/settings.sh && reconstructPar > /openfoam/reconstructPar${CCP_JOBID}.log`\n\n        *   **工作目录** - /openfoam/sloshingTank3D\n\n    *   **任务 4**。并行运行 **foamToEnsight**，将 OpenFOAM 结果文件转换成 EnSight 格式，然后将 EnSight 文件置于示例目录的名为 Ensight 的目录中。\n\n        *   为任务分配 2 个节点\n\n        *   **命令行** - `source /openfoam/settings.sh && /openfoam/hpcimpirun.sh foamToEnsight -parallel > /openfoam/foamToEnsight${CCP_JOBID}.log`\n\n        *   **工作目录** - /openfoam/sloshingTank3D\n\n6.  按任务顺序的升序将依赖项添加到这些任务中。\n\n    ![任务依赖项][task_dependencies]\n\n7.  单击“提交”运行此作业。\n\n    默认情况下，HPC Pack 将以当前登录的用户帐户提交作业。单击“提交”后，你可能会看到一个对话框，提示你输入用户名和密码。\n\n    ![作业凭据][creds]\n\n    在某些情况下，HPC Pack 会记住你之前输入的用户信息，并不会显示此对话框。为了使 HPC Pack 再次显示此对话框，在“命令提示符”窗口中输入以下命令，然后提交此作业。\n\n    \n        hpccred delcreds\n        \n\n8.  根据你为示例设置的参数的不同，此作业可能需要数十分钟到数小时的时间才能完成。在热度地图中，你会看到该作业在 2 个 Linux 节点上运行。\n\n    ![热度地图][heat_map]\n\n    每个节点上启动了 8 个进程。\n\n    ![Linux 进程][linux_processes]\n\n9.  作业结束时，可在 C:\\\\OpenFoam\\\\sloshingTank3D 下的文件夹中找到作业结果，在 C:\\\\OpenFoam 中找到日志文件。\n\n\n## 在 EnSight 中查看结果\n\n（可选）使用 [EnSight](https://www.ceisoftware.com/) 将 OpenFOAM 作业的结果可视化并对其进行分析。有关在 EnSight 中实现可视化和动画效果的详细信息，请参阅此[视频指南](http://www.ceisoftware.com/wp-content/uploads/screencasts/vof_visualization/vof_visualization.html)。\n\n1.  在头节点上安装 EnSight 后，启动它。\n\n2.  打开 C:\\\\OpenFoam\\\\sloshingTank3D\\\\EnSight\\\\sloshingTank3D.case。\n\n    你会在查看器中看到一个储槽。\n\n    ![EnSight 中的罐][tank]\n\n3.  从 **internalMesh** 创建“等值面”，然后选择变量 **alpha\\_water**。\n\n    ![创建等值面][isosurface]\n\n4.  为前一步骤中创建的 **Isosurface\\_part** 设置颜色。例如，将其设置为水蓝色。\n\n    ![编辑等值面颜色][isosurface_color]\n\n5.  从“罐壁”创建“等值体”，方法是：在“部件”面板中选择“罐壁”，然后单击工具栏中的“等值面”按钮。\n\n6.  在对话框中，选择“等值体”作为“类型”，然后将“等值体范围”的最小值设置为 0.5。单击“使用所选部件创建”创建等值体。\n\n7.  为前一步骤中创建的 **Iso\\_volume\\_part** 设置颜色。例如，将其设置为深水蓝色。\n\n8.  设置“罐壁”的颜色。例如，将其设置为透明的白色。\n\n9. 现在，请单击“播放”查看模拟结果。\n\n    ![罐的结果][tank_result]\n\n## 示例文件\n\n\n### 示例 cred.xml 文件\n\n    \n    <ExtendedData>\n      <PrivateKey>-----BEGIN RSA PRIVATE KEY-----\n    MIIEpQIBAAKCAQEAxJKBABhnOsE9eneGHvsjdoXKooHUxpTHI1JVunAJkVmFy8JC\n    qFt1pV98QCtKEHTC6kQ7tj1UT2N6nx1EY9BBHpZacnXmknpKdX4Nu0cNlSphLpru\n    lscKPR3XVzkTwEF00OMiNJVknq8qXJF1T3lYx3rW5EnItn6C3nQm3gQPXP0ckYCF\n    Jdtu/6SSgzV9kaapctLGPNp1Vjf9KeDQMrJXsQNHxnQcfiICp21NiUCiXosDqJrR\n    AfzePdl0XwsNngouy8t0fPlNSngZvsx+kPGh/AKakKIYS0cO9W3FmdYNW8Xehzkc\n    VzrtJhU8x21hXGfSC7V0ZeD7dMeTL3tQCVxCmwIDAQABAoIBAQCve8Jh3Wc6koxZ\n    qh43xicwhdwSGyliZisoozYZDC/ebDb/Ydq0BYIPMiDwADVMX5AqJuPPmwyLGtm6\n    9hu5p46aycrQ5+QA299g6DlF+PZtNbowKuvX+rRvPxagrTmupkCswjglDUEYUHPW\n    05wQaNoSqtzwS9Y85M/b24FfLeyxK0n8zjKFErJaHdhVxI6cxw7RdVlSmM9UHmah\n    wTkW8HkblbOArilAHi6SlRTNZG4gTGeDzPb7fYZo3hzJyLbcaNfJscUuqnAJ+6pT\n    iY6NNp1E8PQgjvHe21yv3DRoVRM4egqQvNZgUbYAMUgr30T1UoxnUXwk2vqJMfg2\n    Nzw0ESGRAoGBAPkfXjjGfc4HryqPkdx0kjXs0bXC3js2g4IXItK9YUFeZzf+476y\n    OTMQg/8DUbqd5rLv7PITIAqpGs39pkfnyohPjOe2zZzeoyaXurYIPV98hhH880uH\n    ZUhOxJYnlqHGxGT7p2PmmnAlmY4TSJrp12VnuiQVVVsXWOGPqHx4S4f9AoGBAMn/\n    vuea7hsCgwIE25MJJ55FYCJodLkioQy6aGP4NgB89Azzg527WsQ6H5xhgVMKHWyu\n    Q1snp+q8LyzD0i1veEvWb8EYifsMyTIPXOUTwZgzaTTCeJNHdc4gw1U22vd7OBYy\n    nZCU7Tn8Pe6eIMNztnVduiv+2QHuiNPgN7M73/x3AoGBAOL0IcmFgy0EsR8MBq0Z\n    ge4gnniBXCYDptEINNBaeVStJUnNKzwab6PGwwm6w2VI3thbXbi3lbRAlMve7fKK\n    B2ghWNPsJOtppKbPCek2Hnt0HUwb7qX7Zlj2cX/99uvRAjChVsDbYA0VJAxcIwQG\n    TxXx5pFi4g0HexCa6LrkeKMdAoGAcvRIACX7OwPC6nM5QgQDt95jRzGKu5EpdcTf\n    g4TNtplliblLPYhRrzokoyoaHteyxxak3ktDFCLj9eW6xoCZRQ9Tqd/9JhGwrfxw\n    MS19DtCzHoNNewM/135tqyD8m7pTwM4tPQqDtmwGErWKj7BaNZARUlhFxwOoemsv\n    R6DbZyECgYEAhjL2N3Pc+WW+8x2bbIBN3rJcMjBBIivB62AwgYZnA2D5wk5o0DKD\n    eesGSKS5l22ZMXJNShgzPKmv3HpH22CSVpO0sNZ6R+iG8a3oq4QkU61MT1CfGoMI\n    a8lxTKnZCsRXU1HexqZs+DSc+30tz50bNqLdido/l5B4EJnQP03ciO0=\n    -----END RSA PRIVATE KEY-----</PrivateKey>\n      <PublicKey>ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDEkoEAGGc6wT16d4Ye+yN2hcqigdTGlMcjUlW6cAmRWYXLwkKoW3WlX3xAK0oQdMLqRDu2PVRPY3qfHURj0EEellpydeaSekp1fg27Rw2VKmEumu6Wxwo9HddXORPAQXTQ4yI0lWSerypckXVPeVjHetbkSci2foLedCbeBA9c/RyRgIUl227/pJKDNX2Rpqly0sY82nVWN/0p4NAyslexA0fGdBx+IgKnbU2JQKJeiwOomtEB/N492XRfCw2eCi7Ly3R8+U1KeBm+zH6Q8aH8ApqQohhLRw71bcWZ1g1bxd6HORxXOu0mFTzHbWFcZ9ILtXRl4Pt0x5Mve1AJXEKb username@servername;</PublicKey>\n    </ExtendedData>\n    \n### 示例 silent.cfg 文件\n\n    \n    \n        # Patterns used to check silent configuration file\n        #\n        # anythingpat - any string\n        # filepat     - the file location pattern (/file/location/to/license.lic)\n        # lspat       - the license server address pattern (0123@hostname)\n        # snpat       - the serial number pattern (ABCD-01234567)\n        \n        # accept EULA, valid values are: {accept, decline}\n        ACCEPT_EULA=accept\n        \n        # optional error behavior, valid values are: {yes, no}\n        CONTINUE_WITH_OPTIONAL_ERROR=yes\n        \n        # install location, valid values are: {/opt/intel, filepat}\n        PSET_INSTALL_DIR=/opt/intel\n        \n        # continue with overwrite of existing installation directory, valid values are: {yes, no}\n        CONTINUE_WITH_INSTALLDIR_OVERWRITE=yes\n        \n        # list of components to install, valid values are: {ALL, DEFAULTS, anythingpat}\n        COMPONENTS=DEFAULTS\n        \n        # installation mode, valid values are: {install, modify, repair, uninstall}\n        PSET_MODE=install\n        \n        # directory for non-RPM database, valid values are: {filepat}\n        #NONRPM_DB_DIR=filepat\n        \n        # Serial number, valid values are: {snpat}\n        #ACTIVATION_SERIAL_NUMBER=snpat\n        \n        # License file or license server, valid values are: {lspat, filepat}\n        #ACTIVATION_LICENSE_FILE=\n        \n        # Activation type, valid values are: {exist_lic, license_server, license_file, trial_lic, serial_number}\n        ACTIVATION_TYPE=trial_lic\n        \n        # Path to the cluster description file, valid values are: {filepat}\n        #CLUSTER_INSTALL_MACHINES_FILE=filepat\n        \n        # Intel(R) Software Improvement Program opt-in, valid values are: {yes, no}\n        PHONEHOME_SEND_USAGE_DATA=no\n        \n        # Perform validation of digital signatures of RPM files, valid values are: {yes, no}\n        SIGNING_ENABLED=yes\n        \n        # Select yes to enable mpi-selector integration, valid values are: {yes, no}\n        ENVIRONMENT_REG_MPI_ENV=no\n        \n        # Select yes to update ld.so.conf, valid values are: {yes, no}\n        ENVIRONMENT_LD_SO_CONF=no\n    \n    \n\n### 示例 settings.sh 脚本\n\n    \n    \n        #!/bin/bash\n        \n        # impi\n        source /opt/intel/impi/5.0.3.048/bin64/mpivars.sh\n        export MPI_ROOT=$I_MPI_ROOT\n        export I_MPI_FABRICS=shm:dapl\n        export I_MPI_DAPL_PROVIDER=ofa-v2-ib0\n        export I_MPI_DYNAMIC_CONNECTION=0\n        \n        # openfoam\n        export FOAM_INST_DIR=/opt/OpenFOAM\n        source /opt/OpenFOAM/OpenFOAM-2.3.1/etc/bashrc\n        export WM_MPLIB=INTELMPI\n    \n\n\n###实例 hpcimpirun.sh 脚本\n\n    \n    \n        #!/bin/bash\n        \n        # The path of this script\n        SCRIPT_PATH=\"$( dirname \"${BASH_SOURCE[0]}\" )\"\n        \n        # Set mpirun runtime evironment\n        source /opt/intel/impi/5.0.3.048/bin64/mpivars.sh\n        export MPI_ROOT=$I_MPI_ROOT\n        export I_MPI_FABRICS=shm:dapl\n        export I_MPI_DAPL_PROVIDER=ofa-v2-ib0\n        export I_MPI_DYNAMIC_CONNECTION=0\n        \n        # mpirun command\n        MPIRUN=mpirun\n        # Argument of \"--hostfile\"\n        NODELIST_OPT=\"--hostfile\"\n        # Argument of \"-np\"\n        NUMPROCESS_OPT=\"-np\"\n        \n        # Get node information from ENVs\n        NODESCORES=(${CCP_NODES_CORES})\n        COUNT=${#NODESCORES[@]}\n        \n        if [ ${COUNT} -eq 0 ]\n        then\n            # CCP_NODES_CORES is not found or is empty, just run the mpirun without hostfile arg.\n            ${MPIRUN} $*\n        else\n            # Create the hostfile file\n            NODELIST_PATH=${SCRIPT_PATH}/hostfile_$$\n        \n            # Get every node name and write into the hostfile file\n            I=1\n            while [ ${I} -lt ${COUNT} ]\n            do\n                echo \"${NODESCORES[${I}]}\" >> ${NODELIST_PATH}\n                let \"I=${I}+2\"\n            done\n        \n            # Run the mpirun with hostfile arg\n            ${MPIRUN} ${NUMPROCESS_OPT} ${CCP_NUMCPUS} ${NODELIST_OPT} ${NODELIST_PATH} $*\n        \n            RTNSTS=$?\n            rm -f ${NODELIST_PATH}\n        fi\n        \n        exit ${RTNSTS}\n    \n    \n\n\n\n\n\n<!--Image references-->\n[keygen]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/keygen.png\n[keys]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/keys.png\n[step_variables]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/step_variables.png\n[data_files]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/data_files.png\n[decompose]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/decompose.png\n[job_details]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/job_details.png\n[job_resources]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/job_resources.png\n[task_details1]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/task_details1.png\n[task_dependencies]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/task_dependencies.png\n[creds]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/creds.png\n[heat_map]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/heat_map.png\n[tank]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/tank.png\n[tank_result]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/tank_result.png\n[isosurface]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/isosurface.png\n[isosurface_color]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/isosurface_color.png\n[linux_processes]: ./media/virtual-machines-linux-cluster-hpcpack-openfoam/linux_processes.png\n\n<!---HONumber=Mooncake_0118_2016-->"
}