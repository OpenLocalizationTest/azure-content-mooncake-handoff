{
  "nodes": [
    {
      "content": "如何通过 Java 使用文件存储 | Azure",
      "pos": [
        28,
        52
      ]
    },
    {
      "content": "了解如何使用 Azure 文件服务上载、下载、列出和删除文件。用 Java 编写的示例。",
      "pos": [
        72,
        116
      ]
    },
    {
      "content": "&lt;tags",
      "pos": [
        247,
        252
      ]
    },
    {
      "content": "ms.service=\"storage\"",
      "pos": [
        258,
        278
      ]
    },
    {
      "content": "如何通过 Java 使用文件存储",
      "pos": [
        338,
        354
      ]
    },
    {
      "content": "概述",
      "pos": [
        454,
        456
      ]
    },
    {
      "content": "在本指南中，你将学习如何针对 Azure 文件存储服务执行基本的操作。通过以 Java 编写的示例，你将学习如何创建共享和目录，以及如何上载、列出和删除文件。如果你不熟悉 Azure 的文件存储服务，则若要了解这些示例，你需要学习后续部分的概念。",
      "pos": [
        458,
        581
      ]
    },
    {
      "content": "创建 Java 应用程序",
      "pos": [
        778,
        790
      ]
    },
    {
      "pos": [
        792,
        878
      ],
      "content": "若要生成示例，你需要 Java 开发工具包 (JDK) 和 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Java<ept id=\"p1\">][]</ept>。此外，你应该已经创建了一个 Azure 存储帐户。"
    },
    {
      "content": "设置你的应用程序以使用文件存储",
      "pos": [
        883,
        898
      ]
    },
    {
      "content": "若要使用 Azure 存储 API，请将下列语句添加到要通过其来访问存储服务的 Java 文件的顶部：",
      "pos": [
        900,
        951
      ]
    },
    {
      "content": "设置 Azure 存储连接字符串",
      "pos": [
        1101,
        1117
      ]
    },
    {
      "content": "若要使用文件存储，你需要连接到你的 Azure 存储帐户。第一步是配置连接字符串，我们将使用该字符串连接到你的存储帐户。为此，我们需要定义一个静态变量。",
      "pos": [
        1119,
        1195
      ]
    },
    {
      "pos": [
        1504,
        1585
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>将 your_storage_account_name 和 your_storage_account_key 替换为你的存储帐户的实际值。"
    },
    {
      "content": "连接到 Azure 存储帐户",
      "pos": [
        1590,
        1604
      ]
    },
    {
      "pos": [
        1606,
        1676
      ],
      "content": "若要连接到你的存储帐户，你需要使用 <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> 对象，以便将连接字符串传递到 <bpt id=\"p2\">**</bpt>parse<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "pos": [
        1948,
        2023
      ],
      "content": "<bpt id=\"p1\">**</bpt>CloudStorageAccount.parse<ept id=\"p1\">**</ept> 会引发 InvalidKeyException，因此须将其置于 try/catch 块内。"
    },
    {
      "content": "如何：创建共享",
      "pos": [
        2028,
        2035
      ]
    },
    {
      "pos": [
        2037,
        2127
      ],
      "content": "文件存储中的所有文件和目录都位于名为 <bpt id=\"p1\">**</bpt>Share<ept id=\"p1\">**</ept> 的容器内。你的存储帐户可以拥有无数的共享，只要你的帐户容量允许。若要获得共享及其内容的访问权限，你需要使用文件存储客户端。"
    },
    {
      "content": "使用文件存储客户端以后，你就可以获得对共享的引用。",
      "pos": [
        2242,
        2267
      ]
    },
    {
      "pos": [
        2383,
        2439
      ],
      "content": "实际创建共享时，请使用 CloudFileShare 对象的 <bpt id=\"p1\">**</bpt>createIfNotExists<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "pos": [
        2534,
        2578
      ],
      "content": "而在目前，<bpt id=\"p1\">**</bpt>share<ept id=\"p1\">**</ept> 保留对名为 <bpt id=\"p2\">**</bpt>sampleshare<ept id=\"p2\">**</ept> 的共享的引用。"
    },
    {
      "content": "如何：上载文件",
      "pos": [
        2583,
        2590
      ]
    },
    {
      "content": "Azure 文件存储共享至少包含文件所在的根目录。在本部分，你将学习如何将文件从本地存储上载到共享所在的根目录。",
      "pos": [
        2592,
        2648
      ]
    },
    {
      "pos": [
        2650,
        2720
      ],
      "content": "上载文件的第一步是获取对文件所在的目录的引用。为此，你需要调用共享对象的 <bpt id=\"p1\">**</bpt>getRootDirectoryReference<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "content": "现在，你已经有了共享所在的根目录的引用，因此可以使用以下代码来上载文件。",
      "pos": [
        2850,
        2886
      ]
    },
    {
      "content": "如何：创建目录",
      "pos": [
        3091,
        3098
      ]
    },
    {
      "pos": [
        3100,
        3207
      ],
      "content": "你也可以将文件置于子目录中，不必将其全部置于根目录中，以便对存储进行有效的组织。Azure 文件存储服务可以创建任意数目的目录，只要你的帐户允许。以下代码将在根目录下创建名为 <bpt id=\"p1\">**</bpt>sampledir<ept id=\"p1\">**</ept> 的子目录。"
    },
    {
      "content": "如何：列出共享中的文件和目录",
      "pos": [
        3635,
        3649
      ]
    },
    {
      "pos": [
        3651,
        3789
      ],
      "content": "可以轻松获取共享中文件和目录的列表，只需针对 CloudFileDirectory 引用调用 <bpt id=\"p1\">**</bpt>listFilesAndDirectories<ept id=\"p1\">**</ept> 即可。该方法将返回你可以对其进行循环访问的 ListFileItem 对象的列表。例如，下面的代码将列出根目录中的文件和目录。"
    },
    {
      "content": "如何：下载文件",
      "pos": [
        4049,
        4056
      ]
    },
    {
      "content": "对于文件存储，另一项需要更频繁执行的操作是下载文件。在下面的示例中，代码会下载 SampleFile.txt 并显示其内容。",
      "pos": [
        4058,
        4120
      ]
    },
    {
      "content": "如何：删除文件",
      "pos": [
        4617,
        4624
      ]
    },
    {
      "pos": [
        4626,
        4702
      ],
      "content": "另一项常见的文件存储操作是删除文件。下面的代码会删除名为 SampleFile.txt 的文件，该文件存储在名为 <bpt id=\"p1\">**</bpt>sampledir<ept id=\"p1\">**</ept> 的目录中。"
    },
    {
      "content": "如何：删除目录",
      "pos": [
        5204,
        5211
      ]
    },
    {
      "content": "删除目录相当简单，但需注意的是，你不能删除仍然包含有文件或其他目录的目录。",
      "pos": [
        5213,
        5250
      ]
    },
    {
      "content": "如何：删除共享",
      "pos": [
        5654,
        5661
      ]
    },
    {
      "pos": [
        5663,
        5730
      ],
      "content": "删除共享时，可针对 CloudFileShare 对象调用 <bpt id=\"p1\">**</bpt>deleteIfExists<ept id=\"p1\">**</ept> 方法。以下是具有此类功能的示例代码。"
    },
    {
      "content": "后续步骤",
      "pos": [
        6303,
        6307
      ]
    },
    {
      "content": "如果你还想更多地了解其他 Azure 存储 API，请点击以下链接。",
      "pos": [
        6309,
        6343
      ]
    },
    {
      "content": "Azure Storage SDK for Java",
      "pos": [
        6348,
        6374
      ]
    },
    {
      "content": "Azure 存储客户端 SDK 参考",
      "pos": [
        6379,
        6397
      ]
    },
    {
      "content": "Azure 存储 REST API",
      "pos": [
        6402,
        6419
      ]
    },
    {
      "content": "Azure 存储团队博客",
      "pos": [
        6424,
        6436
      ]
    },
    {
      "content": "使用 AzCopy 命令行实用程序传输数据",
      "pos": [
        6441,
        6462
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Java 使用文件存储 | Azure\" \n    description=\"了解如何使用 Azure 文件服务上载、下载、列出和删除文件。用 Java 编写的示例。\" \n    services=\"storage\" \n    documentationCenter=\"java\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"jimbe\" />\n\n<tags \n    ms.service=\"storage\" \n\n    ms.date=\"02/03/2016\"\n    wacn.date=\"03/21/2016\"/>\n\n# 如何通过 Java 使用文件存储\n\n[AZURE.INCLUDE [storage-selector-file-include](../includes/storage-selector-file-include.md)]\n\n## 概述\n\n在本指南中，你将学习如何针对 Azure 文件存储服务执行基本的操作。通过以 Java 编写的示例，你将学习如何创建共享和目录，以及如何上载、列出和删除文件。如果你不熟悉 Azure 的文件存储服务，则若要了解这些示例，你需要学习后续部分的概念。\n\n[AZURE.INCLUDE [storage-file-concepts-include](../includes/storage-file-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 Java 应用程序\n\n若要生成示例，你需要 Java 开发工具包 (JDK) 和 [Azure Storage SDK for Java][]。此外，你应该已经创建了一个 Azure 存储帐户。\n\n## 设置你的应用程序以使用文件存储\n\n若要使用 Azure 存储 API，请将下列语句添加到要通过其来访问存储服务的 Java 文件的顶部：\n\n    // Include the following imports to use blob APIs.\n    import com.microsoft.azure.storage.*;\n    import com.microsoft.azure.storage.file.*;\n\n## 设置 Azure 存储连接字符串\n\n若要使用文件存储，你需要连接到你的 Azure 存储帐户。第一步是配置连接字符串，我们将使用该字符串连接到你的存储帐户。为此，我们需要定义一个静态变量。\n\n    // Configure the connection-string with your values\n    public static final String storageConnectionString =\n        \"DefaultEndpointsProtocol=http;\" +\n        \"AccountName=your_storage_account_name;\" +\n        \"AccountKey=your_storage_account_key;\" +\n        \"EndpointSuffix=core.Chinacloudapi.cn\";\n\n> [AZURE.NOTE]将 your_storage_account_name 和 your_storage_account_key 替换为你的存储帐户的实际值。\n\n## 连接到 Azure 存储帐户\n\n若要连接到你的存储帐户，你需要使用 **CloudStorageAccount** 对象，以便将连接字符串传递到 **parse** 方法。\n\n    // Use the CloudStorageAccount object to connect to your storage account\n    try {\n        CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n    } catch (InvalidKeyException invalidKey) {\n        // Handle the exception\n    }\n\n**CloudStorageAccount.parse** 会引发 InvalidKeyException，因此须将其置于 try/catch 块内。\n\n## 如何：创建共享\n\n文件存储中的所有文件和目录都位于名为 **Share** 的容器内。你的存储帐户可以拥有无数的共享，只要你的帐户容量允许。若要获得共享及其内容的访问权限，你需要使用文件存储客户端。\n\n    // Create the file storage client.\n    CloudFileClient fileClient = storageAccount.createCloudFileClient();\n\n使用文件存储客户端以后，你就可以获得对共享的引用。\n\n    // Get a reference to the file share\n    CloudFileShare share = fileClient.getShareReference(\"sampleshare\");\n\n实际创建共享时，请使用 CloudFileShare 对象的 **createIfNotExists** 方法。\n\n    if (share.createIfNotExists()) {\n        System.out.println(\"New share created\");\n    }\n\n而在目前，**share** 保留对名为 **sampleshare** 的共享的引用。\n\n## 如何：上载文件\n\nAzure 文件存储共享至少包含文件所在的根目录。在本部分，你将学习如何将文件从本地存储上载到共享所在的根目录。\n\n上载文件的第一步是获取对文件所在的目录的引用。为此，你需要调用共享对象的 **getRootDirectoryReference** 方法。\n\n    //Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n现在，你已经有了共享所在的根目录的引用，因此可以使用以下代码来上载文件。\n\n    // Define the path to a local file.\n    final String filePath = \"C:\\\\temp\\\\Readme.txt\";\n\n    CloudFile cloudFile = rootDir.getFileReference(\"Readme.txt\");\n    cloudFile.uploadFromFile(filePath);\n\n## 如何：创建目录\n\n你也可以将文件置于子目录中，不必将其全部置于根目录中，以便对存储进行有效的组织。Azure 文件存储服务可以创建任意数目的目录，只要你的帐户允许。以下代码将在根目录下创建名为 **sampledir** 的子目录。\n\n    //Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n    //Get a reference to the sampledir directory\n    CloudFileDirectory sampleDir = rootDir.getDirectoryReference(\"sampledir\");\n\n    if (sampleDir.createIfNotExists()) {\n        System.out.println(\"sampledir created\");\n    } else {\n        System.out.println(\"sampledir already exists\");\n    }\n\n## 如何：列出共享中的文件和目录\n\n可以轻松获取共享中文件和目录的列表，只需针对 CloudFileDirectory 引用调用 **listFilesAndDirectories** 即可。该方法将返回你可以对其进行循环访问的 ListFileItem 对象的列表。例如，下面的代码将列出根目录中的文件和目录。\n\n    //Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n    for ( ListFileItem fileItem : rootDir.listFilesAndDirectories() ) {\n        System.out.println(fileItem.getUri());\n    }\n\n\n## 如何：下载文件\n\n对于文件存储，另一项需要更频繁执行的操作是下载文件。在下面的示例中，代码会下载 SampleFile.txt 并显示其内容。\n\n    //Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n    //Get a reference to the directory that contains the file\n    CloudFileDirectory sampleDir = rootDir.getDirectoryReference(\"sampledir\");\n\n    //Get a reference to the file you want to download\n    CloudFile file = sampleDir.getFileReference(\"SampleFile.txt\");\n\n    //Write the contents of the file to the console.\n    System.out.println(file.downloadText());\n\n## 如何：删除文件\n\n另一项常见的文件存储操作是删除文件。下面的代码会删除名为 SampleFile.txt 的文件，该文件存储在名为 **sampledir** 的目录中。\n\n\n    // Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n    // Get a reference to the directory where the file to be deleted is in\n    CloudFileDirectory containerDir = rootDir.getDirectoryReference(\"sampledir\");\n\n    String filename = \"SampleFile.txt\"\n    CloudFile file;\n\n    file = containerDir.getFileReference(filename)\n    if ( file.deleteIfExists() ) {\n        System.out.println(filename + \" was deleted\");\n    }\n\n\n## 如何：删除目录\n\n删除目录相当简单，但需注意的是，你不能删除仍然包含有文件或其他目录的目录。\n\n    // Get a reference to the root directory for the share.\n    CloudFileDirectory rootDir = share.getRootDirectoryReference();\n\n    // Get a reference to the directory you want to delete\n    CloudFileDirectory containerDir = rootDir.getDirectoryReference(\"sampledir\");\n\n    // Delete the directory\n    if ( containerDir.deleteIfExists() ) {\n        System.out.println(\"Directory deleted\");\n    }\n\n\n## 如何：删除共享\n\n删除共享时，可针对 CloudFileShare 对象调用 **deleteIfExists** 方法。以下是具有此类功能的示例代码。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the file client.\n       CloudFileClient fileClient = storageAccount.createCloudFileClient();\n\n       // Get a reference to the file share\n       CloudFileShare share = fileClient.getShareReference(\"sampleshare\");\n\n       if (share.deleteIfExists()) {\n           System.out.println(\"sampleshare deleted\");\n       }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n\n## 后续步骤\n\n如果你还想更多地了解其他 Azure 存储 API，请点击以下链接。\n\n- [Azure Storage SDK for Java]\n- [Azure 存储客户端 SDK 参考]\n- [Azure 存储 REST API]\n- [Azure 存储团队博客]\n- [使用 AzCopy 命令行实用程序传输数据](/documentation/articles/storage-use-azcopy)\n\n[Azure SDK for Java]: /develop/java/\n[Azure Storage SDK for Java]: https://github.com/azure/azure-storage-java\n[Azure Storage SDK for Android]: https://github.com/azure/azure-storage-android\n[Azure 存储客户端 SDK 参考]: http://dl.windowsazure.com/storage/javadoc/\n[Azure 存储 REST API]: https://msdn.microsoft.com/zh-cn/library/azure/dd179355.aspx\n[Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n \n\n<!---HONumber=Mooncake_0314_2016-->"
}