{
  "nodes": [
    {
      "pos": [
        4,
        43
      ],
      "content": "在名为 <ph id=\"ph1\">`ToDoBroadcastReceiver`</ph> 的项目中创建一个新类。"
    },
    {
      "pos": [
        48,
        92
      ],
      "content": "将以下 using 语句添加到 <bpt id=\"p1\">**</bpt>ToDoBroadcastReceiver<ept id=\"p1\">**</ept> 类："
    },
    {
      "pos": [
        177,
        220
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句和 <bpt id=\"p2\">**</bpt>namespace<ept id=\"p2\">**</ept> 声明之间添加以下权限请求："
    },
    {
      "pos": [
        776,
        818
      ],
      "content": "将现有的 <bpt id=\"p1\">**</bpt>ToDoBroadcastReceiver<ept id=\"p1\">**</ept> 类定义替换为以下代码："
    },
    {
      "pos": [
        1601,
        1677
      ],
      "content": "在上述代码中，你必须将 <bpt id=\"p1\">_</bpt><ph id=\"ph1\">`&lt;PROJECT_NUMBER&gt;`</ph><ept id=\"p1\">_</ept> 替换为你在 Google 开发人员门户中设置应用程序时 Google 分配的项目编号。"
    },
    {
      "pos": [
        1683,
        1751
      ],
      "content": "在 ToDoBroadcastReceiver.cs 项目文件中，添加定义 <bpt id=\"p1\">**</bpt>PushHandlerService<ept id=\"p1\">**</ept> 类的以下代码："
    },
    {
      "pos": [
        2073,
        2116
      ],
      "content": "请注意，此类派生自 <bpt id=\"p1\">**</bpt>GcmServiceBase<ept id=\"p1\">**</ept>，“服务”属性必须应用于此类。"
    },
    {
      "pos": [
        2123,
        2269
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph><bpt id=\"p1\">**</bpt>GcmServiceBase<ept id=\"p1\">**</ept> 类实现 <bpt id=\"p2\">**</bpt>OnRegistered()<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>OnUnRegistered()<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>OnMessage()<ept id=\"p4\">**</ept> 和 <bpt id=\"p5\">**</bpt>OnError()<ept id=\"p5\">**</ept> 方法。必须在 <bpt id=\"p6\">**</bpt>PushHandlerService<ept id=\"p6\">**</ept> 类中重写这些方法。"
    },
    {
      "pos": [
        2274,
        2337
      ],
      "content": "将以下代码添加到 <bpt id=\"p1\">**</bpt>PushHandlerService<ept id=\"p1\">**</ept> 类，以便重写 **OnRegistered **事件处理程序。"
    },
    {
      "content": "此方法使用返回的 GCM 注册 ID 向 Azure 注册以获取推送通知。",
      "pos": [
        3525,
        3562
      ]
    },
    {
      "pos": [
        3568,
        3620
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>PushHandlerService<ept id=\"p1\">**</ept> 中使用以下代码重写 <bpt id=\"p2\">**</bpt>OnMessage<ept id=\"p2\">**</ept> 方法："
    },
    {
      "pos": [
        5089,
        5140
      ],
      "content": "使用以下代码重写 <bpt id=\"p1\">**</bpt>OnUnRegistered ()<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>OnError ()<ept id=\"p2\">**</ept> 方法。"
    }
  ],
  "content": "\n4. 在名为 `ToDoBroadcastReceiver` 的项目中创建一个新类。\n\n5. 将以下 using 语句添加到 **ToDoBroadcastReceiver** 类：\n\n        using Gcm.Client;\n        using Microsoft.WindowsAzure.MobileServices;\n\n6. 在 **using** 语句和 **namespace** 声明之间添加以下权限请求：\n\n        [assembly: Permission(Name = \"@PACKAGE_NAME@.permission.C2D_MESSAGE\")]\n        [assembly: UsesPermission(Name = \"@PACKAGE_NAME@.permission.C2D_MESSAGE\")]\n        [assembly: UsesPermission(Name = \"com.google.android.c2dm.permission.RECEIVE\")]\n\n        //GET_ACCOUNTS is only needed for android versions 4.0.3 and below\n        [assembly: UsesPermission(Name = \"android.permission.GET_ACCOUNTS\")]\n        [assembly: UsesPermission(Name = \"android.permission.INTERNET\")]\n        [assembly: UsesPermission(Name = \"android.permission.WAKE_LOCK\")]\n\n7. 将现有的 **ToDoBroadcastReceiver** 类定义替换为以下代码：\n \n        [BroadcastReceiver(Permission = Gcm.Client.Constants.PERMISSION_GCM_INTENTS)]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_MESSAGE }, \n            Categories = new string[] { \"@PACKAGE_NAME@\" })]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_REGISTRATION_CALLBACK }, \n            Categories = new string[] { \"@PACKAGE_NAME@\" })]\n        [IntentFilter(new string[] { Gcm.Client.Constants.INTENT_FROM_GCM_LIBRARY_RETRY }, \n        Categories = new string[] { \"@PACKAGE_NAME@\" })]\n        public class ToDoBroadcastReceiver : GcmBroadcastReceiverBase<PushHandlerService>\n        {\n            // Set the Google app ID.\n            public static string[] senderIDs = new string[] { \"<PROJECT_NUMBER>\" };\n        }\n\n    在上述代码中，你必须将 _`<PROJECT_NUMBER>`_ 替换为你在 Google 开发人员门户中设置应用程序时 Google 分配的项目编号。 \n\n8. 在 ToDoBroadcastReceiver.cs 项目文件中，添加定义 **PushHandlerService** 类的以下代码：\n \n        // The ServiceAttribute must be applied to the class.\n        [Service] \n        public class PushHandlerService : GcmServiceBase\n        {\n            public static string RegistrationID { get; private set; }\n \n            public PushHandlerService() : base(ToDoBroadcastReceiver.senderIDs) { }\n        }\n\n    请注意，此类派生自 **GcmServiceBase**，“服务”属性必须应用于此类。\n\n    >[AZURE.NOTE]**GcmServiceBase** 类实现 **OnRegistered()**、**OnUnRegistered()**、**OnMessage()** 和 **OnError()** 方法。必须在 **PushHandlerService** 类中重写这些方法。\n\n6. 将以下代码添加到 **PushHandlerService** 类，以便重写 **OnRegistered **事件处理程序。\n\n        protected override void OnRegistered(Context context, string registrationId)\n        {\n            System.Diagnostics.Debug.WriteLine(\"The device has been registered with GCM.\", \"Success!\");\n            \n            // Get the MobileServiceClient from the current activity instance.\n            MobileServiceClient client = ToDoActivity.CurrentActivity.CurrentClient;           \n            var push = client.GetPush();\n\n            List<string> tags = null;\n\n            //// (Optional) Uncomment to add tags to the registration.\n            //var tags = new List<string>() { \"myTag\" }; // create tags if you want\n\n            try\n            {\n                // Make sure we run the registration on the same thread as the activity, \n                // to avoid threading errors.\n                ToDoActivity.CurrentActivity.RunOnUiThread(\n                    async () => await push.RegisterNativeAsync(registrationId, tags));\n            }\n            catch (Exception ex)\n            {\n                System.Diagnostics.Debug.WriteLine(\n                    string.Format(\"Error with Azure push registration: {0}\", ex.Message));                \n            }\n        }\n\n    此方法使用返回的 GCM 注册 ID 向 Azure 注册以获取推送通知。\n\n10. 在 **PushHandlerService** 中使用以下代码重写 **OnMessage** 方法：\n\n        protected override void OnMessage(Context context, Intent intent)\n        {          \n            string message = string.Empty;\n\n            // Extract the push notification message from the intent.\n            if (intent.Extras.ContainsKey(\"message\"))\n            {\n                message = intent.Extras.Get(\"message\").ToString();\n                var title = \"New item added:\";\n\n                // Create a notification manager to send the notification.\n                var notificationManager = \n                    GetSystemService(Context.NotificationService) as NotificationManager;\n\n                // Create a new intent to show the notification in the UI. \n                PendingIntent contentIntent = \n                    PendingIntent.GetActivity(context, 0, \n                    new Intent(this, typeof(ToDoActivity)), 0);           \n\n                // Create the notification using the builder.\n                var builder = new Notification.Builder(context);\n                builder.SetAutoCancel(true);\n                builder.SetContentTitle(title);\n                builder.SetContentText(message);\n                builder.SetSmallIcon(Resource.Drawable.ic_launcher);\n                builder.SetContentIntent(contentIntent);\n                var notification = builder.Build();\n\n                // Display the notification in the Notifications Area.\n                notificationManager.Notify(1, notification);\n\n            }\n        }\n\n8. 使用以下代码重写 **OnUnRegistered ()** 和 **OnError ()** 方法。\n\n        protected override void OnUnRegistered(Context context, string registrationId)\n        {\n            throw new NotImplementedException();\n        }\n\n        protected override void OnError(Context context, string errorId)\n        {\n            System.Diagnostics.Debug.WriteLine(\n                string.Format(\"Error occurred in the notification: {0}.\", errorId));\n        }\n\n<!---HONumber=74-->"
}