{
  "nodes": [
    {
      "content": "Azure 通知中心 - 使用 .NET 后端通知 iOS 用户",
      "pos": [
        27,
        59
      ]
    },
    {
      "content": "了解如何向 Azure 中的用户发送推送通知。使用 Objective-C 和 .NET API 为后端编写的代码示例。",
      "pos": [
        78,
        138
      ]
    },
    {
      "content": "Azure 通知中心 - 使用 .NET 后端通知 iOS 用户",
      "pos": [
        362,
        394
      ]
    },
    {
      "content": "概述",
      "pos": [
        544,
        546
      ]
    },
    {
      "pos": [
        548,
        778
      ],
      "content": "利用 Azure 中的推送通知支持，你可以访问易于使用且向外扩展的多平台推送基础结构，这大大简化了为移动平台的使用者应用程序和企业应用程序实现推送通知的过程。本教程说明如何使用 Azure 通知中心将推送通知发送到特定设备上的特定应用程序用户。ASP.NET WebAPI 后端用于对客户端进行身份验证并生成通知，如指南主题<bpt id=\"p1\">[</bpt>从应用后端注册<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn743807.aspx)</ept>中所述。"
    },
    {
      "pos": [
        782,
        1124
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本教程假设您已根据<bpt id=\"p1\">[</bpt>通知中心入门 (iOS)<ept id=\"p1\">](/documentation/articles/notification-hubs-ios-get-started)</ept> 中所述创建并配置了通知中心。此外，只有在学习本教程后，才可以学习<bpt id=\"p2\">[</bpt>安全推送 (iOS)<ept id=\"p2\">](/documentation/articles/notification-hubs-aspnet-backend-ios-secure-push)</ept> 教程。如果你使用移动服务作为后端服务，请参阅本教程的<bpt id=\"p3\">[</bpt>移动服务版本<ept id=\"p3\">](/documentation/articles/mobile-services-javascript-backend-ios-push-notifications-app-users)</ept>。"
    },
    {
      "content": "修改 iOS 应用",
      "pos": [
        1254,
        1263
      ]
    },
    {
      "pos": [
        1268,
        1361
      ],
      "content": "打开你在<bpt id=\"p1\">[</bpt>通知中心入门 (iOS)<ept id=\"p1\">](/documentation/articles/notification-hubs-ios-get-started)</ept> 教程中创建的“单页视图”应用。"
    },
    {
      "pos": [
        1365,
        1424
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在本节中我们假定你的项目已配置了空的组织名称。如果未配置，你将需要在所有类名前面追加组织名称。"
    },
    {
      "content": "在 Main.storyboard 中添加对象库中的组件，如下面的屏幕截图中所示。",
      "pos": [
        1429,
        1470
      ]
    },
    {
      "pos": [
        1492,
        1553
      ],
      "content": "<bpt id=\"p1\">**</bpt>用户名<ept id=\"p1\">**</ept>：包含占位符文本“输入用户名”的 UITextField，直接位于发送结果标签的下面并受左边距和右边距约束。"
    },
    {
      "pos": [
        1561,
        1648
      ],
      "content": "<bpt id=\"p1\">**</bpt>密码<ept id=\"p1\">**</ept>：包含占位符文本“输入密码”的 UITextField，直接位于用户名文本字段的下面并受左边距和右边距约束。选中属性检查器中“返回密钥”下的“安全文本输入”选项。"
    },
    {
      "pos": [
        1655,
        1713
      ],
      "content": "<bpt id=\"p1\">**</bpt>登录<ept id=\"p1\">**</ept>：在密码文本字段的直接下方标记的 UIButton 并取消选中属性检查器中“控件内容”下的“已启用”选项"
    },
    {
      "pos": [
        1720,
        1874
      ],
      "content": "<bpt id=\"p1\">**</bpt>WNS<ept id=\"p1\">**</ept>：标签和开关，用于已在中心设置 Windows 通知服务时，启用将通知发送到 Windows 通知服务。请参阅 <bpt id=\"p2\">[</bpt>Windows 入门<ept id=\"p2\">](/documentation/articles/notification-hubs-windows-store-dotnet-get-started)</ept>教程。"
    },
    {
      "pos": [
        1881,
        2043
      ],
      "content": "<bpt id=\"p1\">**</bpt>GCM<ept id=\"p1\">**</ept>：标签和开关，用于已在中心设置 Google Cloud Messaging 时，启用将通知发送到 Google Cloud Messaging。请参阅 <bpt id=\"p2\">[</bpt>Android 入门<ept id=\"p2\">](/documentation/articles/notification-hubs-android-get-started)</ept>教程。"
    },
    {
      "pos": [
        2050,
        2089
      ],
      "content": "<bpt id=\"p1\">**</bpt>APNS<ept id=\"p1\">**</ept>：标签和开关，用于启用将通知发送到 Apple 平台通知服务。"
    },
    {
      "pos": [
        2096,
        2164
      ],
      "content": "<bpt id=\"p1\">**</bpt>收件人用户名<ept id=\"p1\">**</ept>：包含占位符文本“收件人用户名标记”的 UITextField，直接位于 GCM 标签的下面并受左边距和右边距约束。"
    },
    {
      "pos": [
        2265,
        2315
      ],
      "content": "按 <bpt id=\"p1\">**</bpt>Ctrl<ept id=\"p1\">**</ept> 的同时从视图中的组件拖至 ViewController.h 并添加这些新插座。"
    },
    {
      "pos": [
        3130,
        3268
      ],
      "content": "在 ViewController.h 中，在 import 语句的正下方添加以下 <ph id=\"ph1\">`#define`</ph>。将 <bpt id=\"p1\">*</bpt>&lt; 输入你的后端终结点&gt;<ept id=\"p1\">*</ept> 占位符替换为在上一节中用于部署应用后端的目标 URL。例如，<bpt id=\"p2\">*</bpt>http://you_backend.chinacloudsites.cn<ept id=\"p2\">*</ept>。"
    },
    {
      "pos": [
        3340,
        3464
      ],
      "content": "在你的项目中，创建一个名为 <bpt id=\"p1\">**</bpt>RegisterClient<ept id=\"p1\">**</ept> 的新 <bpt id=\"p2\">**</bpt>Cocoa Touch 类<ept id=\"p2\">**</ept>，以便与你创建的 ASP.NET 后端交互。创建继承自 <ph id=\"ph1\">`NSObject`</ph> 的类。然后在 RegisterClient.h 中添加以下代码。"
    },
    {
      "pos": [
        3802,
        3841
      ],
      "content": "在 RegisterClient.m 中，更新 <ph id=\"ph1\">`@interface`</ph> 节："
    },
    {
      "pos": [
        4547,
        4596
      ],
      "content": "将 RegisterClient.m 中的 <ph id=\"ph1\">`@implementation`</ph> 节替换为以下代码。"
    },
    {
      "pos": [
        12283,
        12393
      ],
      "content": "在 ViewController.h 中，为 RegisterClient.h 添加 <ph id=\"ph1\">`#import`</ph> 语句。然后，在 <ph id=\"ph2\">`@interface`</ph> 中添加设备令牌的声明和对 <ph id=\"ph3\">`RegisterClient`</ph> 实例的引用："
    },
    {
      "pos": [
        12564,
        12608
      ],
      "content": "在 ViewController.m 的 <ph id=\"ph1\">`@interface`</ph> 中添加私有方法声明："
    },
    {
      "pos": [
        12974,
        13138
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>下面的代码段不是安全的身份验证方案，你应将 <bpt id=\"p1\">**</bpt>createAndSetAuthenticationHeaderWithUsername:AndPassword:<ept id=\"p1\">**</ept> 的实现替换为你的特定身份验证机制，该机制将生成要供注册客户端类（例如，OAuth、Active Directory）使用的身份验证令牌。"
    },
    {
      "pos": [
        13143,
        13215
      ],
      "content": "然后在 ViewController.m 的 <ph id=\"ph1\">`@implementation`</ph> 节中添加以下代码，以添加用于设置设备令牌的实现和身份验证标头。"
    },
    {
      "content": "请注意设置设备令牌时如何启用登录按钮。这是因为在登录操作过程中，视图控制器将使用应用后端注册推送通知。因此，我们不希望在正确设置设备令牌前可以访问登录操作。可以只要登录在推送注册之前发生，就将前者与后者解耦。",
      "pos": [
        14142,
        14246
      ]
    },
    {
      "content": "在 ViewController.m 中，使用以下代码段实现“登录”按钮的操作方法以及使用 ASP.NET 后端发送通知消息的方法。",
      "pos": [
        14252,
        14318
      ]
    },
    {
      "content": "更新“发送通知”按钮的操作以使用 ASP.NET 后端，发送开关启用的任何 PNS。",
      "pos": [
        17853,
        17895
      ]
    },
    {
      "pos": [
        18769,
        18830
      ],
      "content": "在函数 <bpt id=\"p1\">**</bpt>ViewDidLoad<ept id=\"p1\">**</ept> 中，添加以下内容来实例化 RegisterClient 实例并设置文本字段的委托。"
    },
    {
      "pos": [
        19060,
        19197
      ],
      "content": "现在，在 <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> 中，删除方法 <bpt id=\"p2\">**</bpt>application:didRegisterForPushNotificationWithDeviceToken:<ept id=\"p2\">**</ept> 的所有内容并将其替换为以下内容，以确保视图控制器包含从 APN 中检索到的最新设备令牌："
    },
    {
      "pos": [
        19582,
        19618
      ],
      "content": "最后，在 <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> 中，确保你使用了以下方法："
    },
    {
      "content": "测试应用程序",
      "pos": [
        19893,
        19899
      ]
    },
    {
      "content": "在 XCode 中，在物理 iOS 设备上运行此应用（推送通知将无法在模拟器中正常工作）。",
      "pos": [
        19904,
        19949
      ]
    },
    {
      "content": "在 iOS 应用 UI 中，输入用户名和密码。这些信息可以是任意字符串，但必须是相同的字符串值。然后，单击“登录”。",
      "pos": [
        19954,
        20012
      ]
    },
    {
      "pos": [
        20030,
        20057
      ],
      "content": "你应看到弹出窗口通知你注册成功。单击<bpt id=\"p1\">**</bpt>“确定”<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        20074,
        20115
      ],
      "content": "在 *<bpt id=\"p1\">*</bpt>“收件人用户名标记”<ept id=\"p1\">*</ept> 文本字段中，输入用于从另一台设备注册的用户名标记。"
    },
    {
      "content": "输入通知消息，然后单击“发送通知”。只有使用该用户名标记注册的设备才会收到通知消息。该消息将只发送给那些用户。",
      "pos": [
        20119,
        20174
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure 通知中心 - 使用 .NET 后端通知 iOS 用户\"\n    description=\"了解如何向 Azure 中的用户发送推送通知。使用 Objective-C 和 .NET API 为后端编写的代码示例。\"\n    documentationCenter=\"ios\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"\n    services=\"notification-hubs\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/16/2016\"/>\n\n#Azure 通知中心 - 使用 .NET 后端通知 iOS 用户\n\n[AZURE.INCLUDE [notification-hubs-selector-aspnet-backend-notify-users](../includes/notification-hubs-selector-aspnet-backend-notify-users.md)]\n\n## 概述\n\n利用 Azure 中的推送通知支持，你可以访问易于使用且向外扩展的多平台推送基础结构，这大大简化了为移动平台的使用者应用程序和企业应用程序实现推送通知的过程。本教程说明如何使用 Azure 通知中心将推送通知发送到特定设备上的特定应用程序用户。ASP.NET WebAPI 后端用于对客户端进行身份验证并生成通知，如指南主题[从应用后端注册](http://msdn.microsoft.com/zh-cn/library/dn743807.aspx)中所述。\n\n> [AZURE.NOTE]本教程假设您已根据[通知中心入门 (iOS)](/documentation/articles/notification-hubs-ios-get-started) 中所述创建并配置了通知中心。此外，只有在学习本教程后，才可以学习[安全推送 (iOS)](/documentation/articles/notification-hubs-aspnet-backend-ios-secure-push) 教程。如果你使用移动服务作为后端服务，请参阅本教程的[移动服务版本](/documentation/articles/mobile-services-javascript-backend-ios-push-notifications-app-users)。\n\n[AZURE.INCLUDE [notification-hubs-aspnet-backend-notifyusers](../includes/notification-hubs-aspnet-backend-notifyusers.md)]\n\n## 修改 iOS 应用\n\n1. 打开你在[通知中心入门 (iOS)](/documentation/articles/notification-hubs-ios-get-started) 教程中创建的“单页视图”应用。\n\n> [AZURE.NOTE]在本节中我们假定你的项目已配置了空的组织名称。如果未配置，你将需要在所有类名前面追加组织名称。\n\n2. 在 Main.storyboard 中添加对象库中的组件，如下面的屏幕截图中所示。 \n\n    ![][1]\n \n    + **用户名**：包含占位符文本“输入用户名”的 UITextField，直接位于发送结果标签的下面并受左边距和右边距约束。 \n    + **密码**：包含占位符文本“输入密码”的 UITextField，直接位于用户名文本字段的下面并受左边距和右边距约束。选中属性检查器中“返回密钥”下的“安全文本输入”选项。\n    + **登录**：在密码文本字段的直接下方标记的 UIButton 并取消选中属性检查器中“控件内容”下的“已启用”选项\n    + **WNS**：标签和开关，用于已在中心设置 Windows 通知服务时，启用将通知发送到 Windows 通知服务。请参阅 [Windows 入门](/documentation/articles/notification-hubs-windows-store-dotnet-get-started)教程。\n    + **GCM**：标签和开关，用于已在中心设置 Google Cloud Messaging 时，启用将通知发送到 Google Cloud Messaging。请参阅 [Android 入门](/documentation/articles/notification-hubs-android-get-started)教程。\n    + **APNS**：标签和开关，用于启用将通知发送到 Apple 平台通知服务。\n    + **收件人用户名**：包含占位符文本“收件人用户名标记”的 UITextField，直接位于 GCM 标签的下面并受左边距和右边距约束。\n    \n\n    某些组件已在[通知中心入 (iOS)](/documentation/articles/notification-hubs-ios-get-started) 教程中添加。\n\n3. 按 **Ctrl** 的同时从视图中的组件拖至 ViewController.h 并添加这些新插座。\n\n        @property (weak, nonatomic) IBOutlet UITextField *UsernameField;\n        @property (weak, nonatomic) IBOutlet UITextField *PasswordField;\n        @property (weak, nonatomic) IBOutlet UITextField *RecipientField;\n        @property (weak, nonatomic) IBOutlet UITextField *NotificationField;\n\n        // Used to enable the buttons on the UI\n        @property (weak, nonatomic) IBOutlet UIButton *LogInButton;\n        @property (weak, nonatomic) IBOutlet UIButton *SendNotificationButton;\n\n        // Used to enabled sending notifications across platforms\n        @property (weak, nonatomic) IBOutlet UISwitch *WNSSwitch;\n        @property (weak, nonatomic) IBOutlet UISwitch *GCMSwitch;\n        @property (weak, nonatomic) IBOutlet UISwitch *APNSSwitch;\n\n        - (IBAction)LogInAction:(id)sender;     \n\n4. 在 ViewController.h 中，在 import 语句的正下方添加以下 `#define`。将 *< 输入你的后端终结点>* 占位符替换为在上一节中用于部署应用后端的目标 URL。例如，*http://you_backend.chinacloudsites.cn*。\n\n        #define BACKEND_ENDPOINT @\"<Enter Your Backend Endpoint>\"\n\n4. 在你的项目中，创建一个名为 **RegisterClient** 的新 **Cocoa Touch 类**，以便与你创建的 ASP.NET 后端交互。创建继承自 `NSObject` 的类。然后在 RegisterClient.h 中添加以下代码。\n\n        @interface RegisterClient : NSObject\n\n        @property (strong, nonatomic) NSString* authenticationHeader;\n        \n        -(void) registerWithDeviceToken:(NSData*)token tags:(NSSet*)tags\n            andCompletion:(void(^)(NSError*))completion;\n\n        -(instancetype) initWithEndpoint:(NSString*)Endpoint;\n\n        @end\n\n5. 在 RegisterClient.m 中，更新 `@interface` 节：\n\n        @interface RegisterClient ()\n\n        @property (strong, nonatomic) NSURLSession* session;\n        @property (strong, nonatomic) NSURLSession* endpoint;\n\n        -(void) tryToRegisterWithDeviceToken:(NSData*)token tags:(NSSet*)tags retry:(BOOL)retry \n                    andCompletion:(void(^)(NSError*))completion;\n        -(void) retrieveOrRequestRegistrationIdWithDeviceToken:(NSString*)token \n                    completion:(void(^)(NSString*, NSError*))completion;\n        -(void) upsertRegistrationWithRegistrationId:(NSString*)registrationId deviceToken:(NSString*)token \n                    tags:(NSSet*)tags andCompletion:(void(^)(NSURLResponse*, NSError*))completion;\n\n        @end\n\n6. 将 RegisterClient.m 中的 `@implementation` 节替换为以下代码。\n\n\n        @implementation RegisterClient\n\n        // Globals used by RegisterClient\n        NSString *const RegistrationIdLocalStorageKey = @\"RegistrationId\";      \n\n        -(instancetype) initWithEndpoint:(NSString*)Endpoint\n        {\n            self = [super init];\n            if (self) {\n                NSURLSessionConfiguration* config = [NSURLSessionConfiguration defaultSessionConfiguration];\n                _session = [NSURLSession sessionWithConfiguration:config delegate:nil delegateQueue:nil];\n                _endpoint = Endpoint;\n            }\n            return self;\n        }\n\n        -(void) registerWithDeviceToken:(NSData*)token tags:(NSSet*)tags \n                    andCompletion:(void(^)(NSError*))completion\n        {\n            [self tryToRegisterWithDeviceToken:token tags:tags retry:YES andCompletion:completion];\n        }\n\n        -(void) tryToRegisterWithDeviceToken:(NSData*)token tags:(NSSet*)tags retry:(BOOL)retry \n                    andCompletion:(void(^)(NSError*))completion\n        {\n            NSSet* tagsSet = tags?tags:[[NSSet alloc] init];\n\n            NSString *deviceTokenString = [[token description] \n                stringByTrimmingCharactersInSet:[NSCharacterSet characterSetWithCharactersInString:@\"<>\"]];\n            deviceTokenString = [[deviceTokenString stringByReplacingOccurrencesOfString:@\" \" withString:@\"\"] \n                                    uppercaseString];\n\n            [self retrieveOrRequestRegistrationIdWithDeviceToken: deviceTokenString \n                completion:^(NSString* registrationId, NSError *error) {\n                NSLog(@\"regId: %@\", registrationId);\n                if (error) {\n                    completion(error);\n                    return;\n                }\n\n                [self upsertRegistrationWithRegistrationId:registrationId deviceToken:deviceTokenString \n                    tags:tagsSet andCompletion:^(NSURLResponse * response, NSError *error) {\n                    if (error) {\n                        completion(error);\n                        return;\n                    }\n\n                    NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*)response;\n                    if (httpResponse.statusCode == 200) {\n                        completion(nil);\n                    } else if (httpResponse.statusCode == 410 && retry) {\n                        [self tryToRegisterWithDeviceToken:token tags:tags retry:NO andCompletion:completion];\n                    } else {\n                        NSLog(@\"Registration error with response status: %ld\", (long) httpResponse.statusCode);\n\n                        completion([NSError errorWithDomain:@\"Registration\" code:httpResponse.statusCode \n                                    userInfo:nil]);\n                    }\n\n                }];\n            }];\n        }\n\n        -(void) upsertRegistrationWithRegistrationId:(NSString*)registrationId deviceToken:(NSData*)token \n                    tags:(NSSet*)tags andCompletion:(void(^)(NSURLResponse*, NSError*))completion\n        {\n            NSDictionary* deviceRegistration = @{@\"Platform\" : @\"apns\", @\"Handle\": token, \n                                                    @\"Tags\": [tags allObjects]};\n            NSData* jsonData = [NSJSONSerialization dataWithJSONObject:deviceRegistration \n                                options:NSJSONWritingPrettyPrinted error:nil];\n\n            NSLog(@\"JSON registration: %@\", [[NSString alloc] initWithData:jsonData \n                                                encoding:NSUTF8StringEncoding]);\n\n            NSString* endpoint = [NSString stringWithFormat:@\"%@/api/register/%@\", _endpoint, \n                                    registrationId];\n            NSURL* requestURL = [NSURL URLWithString:endpoint];\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"PUT\"];\n            [request setHTTPBody:jsonData];\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\", \n                                                    self.authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n            [request setValue:@\"application/json\" forHTTPHeaderField:@\"Content-Type\"];\n\n            NSURLSessionDataTask* dataTask = [self.session dataTaskWithRequest:request \n                completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) \n            {\n                if (!error)\n                {\n                    completion(response, error);\n                }\n                else\n                {\n                    NSLog(@\"Error request: %@\", error);\n                    completion(nil, error);\n                }\n            }];\n            [dataTask resume];\n        }\n\n        -(void) retrieveOrRequestRegistrationIdWithDeviceToken:(NSString*)token \n                    completion:(void(^)(NSString*, NSError*))completion\n        {\n            NSString* registrationId = [[NSUserDefaults standardUserDefaults] \n                                        objectForKey:RegistrationIdLocalStorageKey];\n\n            if (registrationId)\n            {\n                completion(registrationId, nil);\n                return;\n            }\n\n            // request new one & save\n            NSURL* requestURL = [NSURL URLWithString:[NSString stringWithFormat:@\"%@/api/register?handle=%@\", \n                                    _endpoint, token]];\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"POST\"];\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\", \n                                                    self.authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n\n            NSURLSessionDataTask* dataTask = [self.session dataTaskWithRequest:request \n                completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) \n            {\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (!error && httpResponse.statusCode == 200)\n                {\n                    NSString* registrationId = [[NSString alloc] initWithData:data \n                        encoding:NSUTF8StringEncoding];\n\n                    // remove quotes\n                    registrationId = [registrationId substringWithRange:NSMakeRange(1, \n                                        [registrationId length]-2)];\n\n                    [[NSUserDefaults standardUserDefaults] setObject:registrationId \n                        forKey:RegistrationIdLocalStorageKey];\n                    [[NSUserDefaults standardUserDefaults] synchronize];\n\n                    completion(registrationId, nil);\n                }\n                else\n                {\n                    NSLog(@\"Error status: %ld, request: %@\", (long)httpResponse.statusCode, error);\n                    if (error)\n                        completion(nil, error);\n                    else {\n                        completion(nil, [NSError errorWithDomain:@\"Registration\" code:httpResponse.statusCode \n                                    userInfo:nil]);\n                    }\n                }\n            }];\n            [dataTask resume];\n        }\n\n        @end\n\n    上面的代码使用 NSURLSession 对应用后端执行 REST 调用并使用 NSUserDefaults 在本地存储通知中心返回的 registrationId，实现了指南文章[从应用后端注册](/documentation/articles/notification-hubs-registration-management#registration-management-from-a-backend)中所述的逻辑。\n\n    请注意，此类需要设置其属性 **authorizationHeader**，才能正常工作。登录后，由 **ViewController** 类设置此属性。\n\n7. 在 ViewController.h 中，为 RegisterClient.h 添加 `#import` 语句。然后，在 `@interface` 中添加设备令牌的声明和对 `RegisterClient` 实例的引用：\n\n        #import \"RegisterClient.h\"\n\n        @property (strong, nonatomic) NSData* deviceToken;\n        @property (strong, nonatomic) RegisterClient* registerClient;\n\n8. 在 ViewController.m 的 `@interface` 中添加私有方法声明：\n\n        @interface ViewController () <UITextFieldDelegate, NSURLConnectionDataDelegate, NSXMLParserDelegate>\n\n        // create the Authorization header to perform Basic authentication with your app back-end\n        -(void) createAndSetAuthenticationHeaderWithUsername:(NSString*)username \n                        AndPassword:(NSString*)password;\n\n        @end\n\n> [AZURE.NOTE]下面的代码段不是安全的身份验证方案，你应将 **createAndSetAuthenticationHeaderWithUsername:AndPassword:** 的实现替换为你的特定身份验证机制，该机制将生成要供注册客户端类（例如，OAuth、Active Directory）使用的身份验证令牌。\n\n9. 然后在 ViewController.m 的 `@implementation` 节中添加以下代码，以添加用于设置设备令牌的实现和身份验证标头。 \n\n        -(void) setDeviceToken: (NSData*) deviceToken\n        {\n            _deviceToken = deviceToken;\n            self.LogInButton.enabled = YES;\n        }\n\n        -(void) createAndSetAuthenticationHeaderWithUsername:(NSString*)username \n                        AndPassword:(NSString*)password;\n        {\n            NSString* headerValue = [NSString stringWithFormat:@\"%@:%@\", username, password];\n\n            NSData* encodedData = [[headerValue dataUsingEncoding:NSUTF8StringEncoding] base64EncodedDataWithOptions:NSDataBase64EncodingEndLineWithCarriageReturn];\n\n            self.registerClient.authenticationHeader = [[NSString alloc] initWithData:encodedData \n                                                        encoding:NSUTF8StringEncoding];\n        }\n\n        -(BOOL)textFieldShouldReturn:(UITextField *)textField\n        {\n            [textField resignFirstResponder];\n            return YES;\n        }\n\n    请注意设置设备令牌时如何启用登录按钮。这是因为在登录操作过程中，视图控制器将使用应用后端注册推送通知。因此，我们不希望在正确设置设备令牌前可以访问登录操作。可以只要登录在推送注册之前发生，就将前者与后者解耦。\n\n10. 在 ViewController.m 中，使用以下代码段实现“登录”按钮的操作方法以及使用 ASP.NET 后端发送通知消息的方法。\n\n        - (IBAction)LogInAction:(id)sender {\n            // create authentication header and set it in register client\n            NSString* username = self.UsernameField.text;\n            NSString* password = self.PasswordField.text;\n\n            [self createAndSetAuthenticationHeaderWithUsername:username AndPassword:password];\n\n            __weak ViewController* selfie = self;\n            [self.registerClient registerWithDeviceToken:self.deviceToken tags:nil \n                andCompletion:^(NSError* error) {\n                if (!error) {\n                    dispatch_async(dispatch_get_main_queue(), \n                    ^{\n                        selfie.SendNotificationButton.enabled = YES;\n                        [self MessageBox:@\"Success\" message:@\"Registered successfully!\"];\n                    });\n                }\n            }];\n        }\n\n\n        - (void)SendNotificationASPNETBackend:(NSString*)pns UsernameTag:(NSString*)usernameTag \n                    Message:(NSString*)message\n        {\n            NSURLSession* session = [NSURLSession\n                sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration] delegate:nil\n                delegateQueue:nil];\n            \n            // Pass the pns and username tag as parameters with the REST URL to the ASP.NET backend\n            NSURL* requestURL = [NSURL URLWithString:[NSString \n                stringWithFormat:@\"%@/api/notifications?pns=%@&to_tag=%@\", BACKEND_ENDPOINT, pns, \n                usernameTag]];\n\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"POST\"];\n\n            // Get the mock authenticationheader from the register client\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\", \n                self.registerClient.authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n            \n            //Add the notification message body\n            [request setValue:@\"application/json;charset=utf-8\" forHTTPHeaderField:@\"Content-Type\"];\n            [request setHTTPBody:[message dataUsingEncoding:NSUTF8StringEncoding]];\n            \n            // Execute the send notification REST API on the ASP.NET Backend\n            NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request \n                completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) \n            {\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (error || httpResponse.statusCode != 200)\n                {\n                    NSString* status = [NSString stringWithFormat:@\"Error Status for %@: %d\\nError: %@\\n\", \n                                        pns, httpResponse.statusCode, error];\n                    dispatch_async(dispatch_get_main_queue(),\n                    ^{\n                        // Append text because all 3 PNS calls may also have information to view\n                        [self.sendResults setText:[self.sendResults.text stringByAppendingString:status]];\n                    });\n                    NSLog(status);\n                }\n                \n                if (data != NULL)\n                {\n                    xmlParser = [[NSXMLParser alloc] initWithData:data];\n                    [xmlParser setDelegate:self];\n                    [xmlParser parse];\n                }           \n            }];\n            [dataTask resume];\n        }\n\n\n11. 更新“发送通知”按钮的操作以使用 ASP.NET 后端，发送开关启用的任何 PNS。\n\n\n        - (IBAction)SendNotificationMessage:(id)sender\n        {\n            //[self SendNotificationRESTAPI];\n            [self SendToEnabledPlatforms];\n        }\n\n\n        -(void)SendToEnabledPlatforms\n        {\n            NSString* json = [NSString stringWithFormat:@\"\"%@\"\",self.notificationMessage.text];\n            \n            [self.sendResults setText:@\"\"];\n\n            if ([self.WNSSwitch isOn])\n                [self SendNotificationASPNETBackend:@\"wns\" UsernameTag:self.RecipientField.text Message:json];\n        \n            if ([self.GCMSwitch isOn])\n                [self SendNotificationASPNETBackend:@\"gcm\" UsernameTag:self.RecipientField.text Message:json];\n        \n            if ([self.APNSSwitch isOn])\n                [self SendNotificationASPNETBackend:@\"apns\" UsernameTag:self.RecipientField.text Message:json];\n        }\n        \n        \n\n11. 在函数 **ViewDidLoad** 中，添加以下内容来实例化 RegisterClient 实例并设置文本字段的委托。\n\n        self.UsernameField.delegate = self;\n        self.PasswordField.delegate = self;\n        self.RecipientField.delegate = self;\n        self.registerClient = [[RegisterClient alloc] initWithEndpoint:BACKEND_ENDPOINT];\n\n12. 现在，在 **AppDelegate.m** 中，删除方法 **application:didRegisterForPushNotificationWithDeviceToken:** 的所有内容并将其替换为以下内容，以确保视图控制器包含从 APN 中检索到的最新设备令牌：\n\n        // Add import to the top of the file\n        #import \"ViewController.h\"\n\n        - (void)application:(UIApplication *)application \n                    didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken \n        {\n            ViewController* rvc = (ViewController*) self.window.rootViewController;\n            rvc.deviceToken = deviceToken;\n        }\n\n13. 最后，在 **AppDelegate.m** 中，确保你使用了以下方法：\n\n        - (void)application:(UIApplication *)application didReceiveRemoteNotification: (NSDictionary *)userInfo {\n            NSLog(@\"%@\", userInfo);\n            [self MessageBox:@\"Notification\" message:[[userInfo objectForKey:@\"aps\"] valueForKey:@\"alert\"]];\n        }\n\n## 测试应用程序\n\n1. 在 XCode 中，在物理 iOS 设备上运行此应用（推送通知将无法在模拟器中正常工作）。\n\n2. 在 iOS 应用 UI 中，输入用户名和密码。这些信息可以是任意字符串，但必须是相同的字符串值。然后，单击“登录”。\n\n    ![][2]\n\n\n3. 你应看到弹出窗口通知你注册成功。单击**“确定”**。\n\n    ![][3]\n\n4. 在 **“收件人用户名标记”* 文本字段中，输入用于从另一台设备注册的用户名标记。\n5. 输入通知消息，然后单击“发送通知”。只有使用该用户名标记注册的设备才会收到通知消息。该消息将只发送给那些用户。\n\n    ![][4]\n\n\n[1]: ./media/notification-hubs-aspnet-backend-ios-notify-users/notification-hubs-ios-notify-users-interface.png\n[2]: ./media/notification-hubs-aspnet-backend-ios-notify-users/notification-hubs-ios-notify-users-enter-user-pwd.png\n[3]: ./media/notification-hubs-aspnet-backend-ios-notify-users/notification-hubs-ios-notify-users-registered.png\n[4]: ./media/notification-hubs-aspnet-backend-ios-notify-users/notification-hubs-ios-notify-users-enter-msg.png\n \n\n<!---HONumber=Mooncake_0104_2016-->"
}