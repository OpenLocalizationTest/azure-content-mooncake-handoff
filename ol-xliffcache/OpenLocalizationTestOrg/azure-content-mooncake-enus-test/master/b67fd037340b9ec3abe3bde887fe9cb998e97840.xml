{
  "nodes": [
    {
      "content": "如何使用 Azure Redis Cache",
      "pos": [
        28,
        50
      ]
    },
    {
      "content": "了解如何使用 Azure Redis 缓存提高 Azure 应用程序的性能",
      "pos": [
        70,
        107
      ]
    },
    {
      "content": "如何使用 Azure Redis Cache",
      "pos": [
        327,
        349
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        353,
        369
      ]
    },
    {
      "content": ".Net",
      "pos": [
        373,
        377
      ]
    },
    {
      "content": "Node.js",
      "pos": [
        449,
        456
      ]
    },
    {
      "content": "Java",
      "pos": [
        511,
        515
      ]
    },
    {
      "content": "Python",
      "pos": [
        568,
        574
      ]
    },
    {
      "pos": [
        627,
        776
      ],
      "content": "本指南说明如何开始使用 <bpt id=\"p1\">**</bpt>Azure Redis 缓存<ept id=\"p1\">**</ept>。Azure Redis 缓存基于流行的开放源代码 Redis 缓存。它让您访问 WindowsAzure.cn 管理的安全专用的 Redis 缓存。使用 Azure Redis 缓存创建的缓存可从 Azure 内的任何应用程序进行访问。"
    },
    {
      "content": "Azure Redis 缓存提供以下层：",
      "pos": [
        778,
        798
      ]
    },
    {
      "pos": [
        804,
        832
      ],
      "content": "<bpt id=\"p1\">**</bpt>基本<ept id=\"p1\">**</ept> - 单个节点。多种大小，最大 53 GB。"
    },
    {
      "pos": [
        837,
        880
      ],
      "content": "<bpt id=\"p1\">**</bpt>标准<ept id=\"p1\">**</ept> - 双节点主/副本配置。多种大小，最大 53 GB。99.9% SLA。"
    },
    {
      "pos": [
        885,
        1048
      ],
      "content": "<bpt id=\"p1\">**</bpt>高级<ept id=\"p1\">**</ept> - 双节点主/副本配置，最多有 10 个分片。从 6 GB 到 530 GB 的多种大小（有关详细信息，请与我们联系）。标准层的所有功能加上其他功能，支持 <bpt id=\"p2\">[</bpt>Redis 群集<ept id=\"p2\">](/documentation/articles/cache-how-to-premium-clustering)</ept>。99.9% SLA。"
    },
    {
      "pos": [
        1050,
        1090
      ],
      "content": "每个级别在功能和定价方面存在差异。有关定价信息，请参阅<bpt id=\"p1\">[</bpt>缓存定价详细信息<ept id=\"p1\">][]</ept>。"
    },
    {
      "pos": [
        1092,
        1228
      ],
      "content": "本指南说明如何使用以 C# 代码编写的 <bpt id=\"p1\">[</bpt>StackExchange.Redis<ept id=\"p1\">][]</ept> 客户端。涉及的任务包括<bpt id=\"p2\">**</bpt>创建和配置缓存<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>配置缓存客户端<ept id=\"p3\">**</ept>，以及<bpt id=\"p4\">**</bpt>在缓存中添加和删除对象<ept id=\"p4\">**</ept>。有关使用 Azure Redis 缓存的详细信息，请参阅<bpt id=\"p5\">[</bpt>后续步骤<ept id=\"p5\">][]</ept>部分。"
    },
    {
      "pos": [
        1232,
        1292
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"getting-started-cache-service\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Azure Redis 缓存入门"
    },
    {
      "content": "Azure Redis Cache 非常容易上手。若要开始使用，需要首先设置和配置缓存。接下来，配置缓存客户端，以便它们可以访问缓存。在配置了缓存客户端后，就可以开始使用它们。",
      "pos": [
        1294,
        1382
      ]
    },
    {
      "content": "创建缓存",
      "pos": [
        1389,
        1393
      ]
    },
    {
      "content": "配置缓存客户端",
      "pos": [
        1402,
        1409
      ]
    },
    {
      "pos": [
        1416,
        1467
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-cache\" id=\"create-a-cache\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>创建缓存"
    },
    {
      "content": "在 Azure 中国区，只能通过 Azure PowerShell 或 Azure CLI 管理 Redis 缓存",
      "pos": [
        1469,
        1526
      ]
    },
    {
      "content": "使用以下 PowerShell 脚本创建缓存：",
      "pos": [
        1657,
        1680
      ]
    },
    {
      "pos": [
        2074,
        2134
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"NuGet\" id=\"configure-the-cache-clients\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>配置缓存客户端"
    },
    {
      "pos": [
        2136,
        2266
      ],
      "content": "使用 Azure Redis 缓存创建的缓存可从任何应用程序访问。在 Visual Studio 中开发的 .NET 应用程序可以使用 <bpt id=\"p1\">**</bpt>StackExchange.Redis<ept id=\"p1\">**</ept> 缓存客户端，可使用 NuGet 包进行配置，以简化缓存客户端应用程序的配置。"
    },
    {
      "pos": [
        2269,
        2359
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>StackExchange.Redis<ept id=\"p1\">][]</ept> github 页面和 <bpt id=\"p2\">[</bpt>StackExchange.Redis 缓存客户端文档<ept id=\"p2\">][]</ept>。"
    },
    {
      "content": "若要使用 StackExchange.Redis NuGet 包配置客户端应用程序，请在“解决方案资源管理器”中右键单击项目，然后选择“管理 NuGet 包”。",
      "pos": [
        2361,
        2441
      ]
    },
    {
      "content": "管理 NuGet 包",
      "pos": [
        2445,
        2455
      ]
    },
    {
      "pos": [
        2469,
        2560
      ],
      "content": "在“联机搜索”文本框中键入 <bpt id=\"p1\">**</bpt>StackExchange.Redis<ept id=\"p1\">**</ept> 或 <bpt id=\"p2\">**</bpt>StackExchange.Redis.StrongName<ept id=\"p2\">**</ept>，从结果选择它，然后单击“安装”。"
    },
    {
      "pos": [
        2563,
        2685
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果你希望使用 <bpt id=\"p1\">**</bpt>StackExchange.Redis<ept id=\"p1\">**</ept> 客户端库强名称版本，请选择 <bpt id=\"p2\">**</bpt>StackExchange.Redis.StrongName<ept id=\"p2\">**</ept>；否则选择 <bpt id=\"p3\">**</bpt>StackExchange.Redis<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "StackExchange.Redis NuGet 程序包",
      "pos": [
        2689,
        2718
      ]
    },
    {
      "content": "NuGet 程序包会给客户端应用程序下载并添加所需的程序集引用，以访问带 StackExchange.Redis 缓存客户端的 Azure Redis Cache。",
      "pos": [
        2741,
        2823
      ]
    },
    {
      "content": "在配置了你的客户端项目的缓存后，你可以使用以下各节中介绍的方法来使用你的缓存。",
      "pos": [
        2825,
        2864
      ]
    },
    {
      "pos": [
        2868,
        2906
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"working-with-caches\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>使用缓存"
    },
    {
      "content": "本节中的步骤介绍如何使用缓存执行常见任务。",
      "pos": [
        2908,
        2929
      ]
    },
    {
      "content": "连接到缓存",
      "pos": [
        2936,
        2941
      ]
    },
    {
      "content": "添加和从缓存检索对象",
      "pos": [
        2950,
        2960
      ]
    },
    {
      "content": "处理缓存中的 .NET 对象",
      "pos": [
        2969,
        2983
      ]
    },
    {
      "pos": [
        3025,
        3061
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"connect-to-cache\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>连接到缓存"
    },
    {
      "content": "若要以编程方式使用缓存，你需要引用该缓存。以下代码添加到你想使用 StackExchange.Redis 客户端的任何文件的顶部，以访问 Azure Redis 缓存。",
      "pos": [
        3063,
        3147
      ]
    },
    {
      "pos": [
        3182,
        3242
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>StackExchange.Redis 客户端需要.NET Framework 4 或更高版本。"
    },
    {
      "pos": [
        3244,
        3331
      ],
      "content": "到 Azure Redis 缓存的连接由 <ph id=\"ph1\">`ConnectionMultiplexer`</ph> 类管理。此类旨在共享并在客户端应用程序中重复使用，不需要在每次执行操作的基础上创建。"
    },
    {
      "pos": [
        3333,
        3491
      ],
      "content": "要连接到 Azure Redis 缓存并返回连接的 <ph id=\"ph1\">`ConnectionMultiplexer`</ph> 的实例，请调用静态 <ph id=\"ph2\">`Connect`</ph> 方法并传递到缓存端点和密钥中，如下例所示。使用可以通过 <ph id=\"ph3\">`Get-AzureRmRedisCacheKey`</ph> PowerShell 命令获取的密钥作为 password 参数。"
    },
    {
      "pos": [
        3647,
        3745
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>警告：切勿将凭据存储在源代码中。为了使本示例简单明了，我将以源代码来呈现凭据内容。有关如何存储凭据的详细信息，请参阅<bpt id=\"p1\">[</bpt>应用程序字符串和连接字符串的工作原理<ept id=\"p1\">][]</ept>。"
    },
    {
      "pos": [
        3747,
        3789
      ],
      "content": "如果你不想使用 SSL，请设置 <ph id=\"ph1\">`ssl=false`</ph> 或者省略 <ph id=\"ph2\">`ssl`</ph> 参数。"
    },
    {
      "pos": [
        3792,
        3826
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>默认情况下，将为新缓存禁用非 SSL 端口。"
    },
    {
      "pos": [
        3828,
        4063
      ],
      "content": "共享应用程序中的 <ph id=\"ph1\">`ConnectionMultiplexer`</ph> 实例的一个方法是，拥有返回连接示例的静态属性（与下列示例类似）。这种线程安全方法，可仅初始化单一连接的 <ph id=\"ph2\">`ConnectionMultiplexer`</ph> 实例。在这些示例中，<ph id=\"ph3\">`abortConnect`</ph> 设置为 false，这表示即使未建立 Azure Redis 缓存连接，也可成功调用。<ph id=\"ph4\">`ConnectionMultiplexer`</ph> 的一个关键功能是，一旦还原网络问题和其他原因，它将自动还原缓存连接。"
    },
    {
      "pos": [
        4451,
        4500
      ],
      "content": "有关高级连接配置选项的详细信息，请参阅 <bpt id=\"p1\">[</bpt>StackExchange.Redis 配置模型<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "可以使用以下 PowerShell 命令获取缓存终结点和密钥：",
      "pos": [
        4502,
        4533
      ]
    },
    {
      "pos": [
        4639,
        4746
      ],
      "content": "建立连接后，通过调用 <ph id=\"ph1\">`ConnectionMultiplexer.GetDatabase`</ph> 方法返回对 Redis 缓存数据库的引用。从 <ph id=\"ph2\">`GetDatabase`</ph> 方法返回的对象是一个轻型直通对象，不需要存储。"
    },
    {
      "content": "现在您知道如何连接到 Azure Redis Cache 实例并将引用返回缓存数据库，让我们看看如何使用缓存。",
      "pos": [
        5236,
        5291
      ]
    },
    {
      "pos": [
        5295,
        5330
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add-object\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>添加和从缓存检索对象"
    },
    {
      "pos": [
        5332,
        5376
      ],
      "content": "可以使用 <ph id=\"ph1\">`StringSet`</ph> 和 <ph id=\"ph2\">`StringGet`</ph> 方法在缓存中存储和检索项。"
    },
    {
      "content": "Redis 将大多数数据存储为 Redis 字符串，但这些字符串可能包含许多类型的数据，包括序列化的二进制数据，可在缓存中存储 .NET 对象时使用。",
      "pos": [
        5505,
        5580
      ]
    },
    {
      "pos": [
        5582,
        5674
      ],
      "content": "调用 <ph id=\"ph1\">`StringGet`</ph> 时，如果该对象存在，则返回它，如果该对象不存在，则返回 <ph id=\"ph2\">`null`</ph>。在这种情况可以从所需的数据源检索值，并将其存储在缓存中供后续使用。这称为缓存端模式。"
    },
    {
      "pos": [
        5971,
        6017
      ],
      "content": "要在缓存中指定项的过期时间，请使用 <ph id=\"ph1\">`StringSet`</ph> 的 <ph id=\"ph2\">`TimeSpan`</ph> 参数。"
    },
    {
      "pos": [
        6088,
        6170
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"store-session\" id=\"work-with-net-objects-in-the-cache\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>处理缓存中的 .NET 对象"
    },
    {
      "content": "Azure Redis 缓存可以缓存 .NET 对象以及基元数据类型，但在缓存 .NET 对象之前，必须对其进行序列化。这是应用程序开发人员的责任，同时赋与开发人员选择序列化程序的弹性。",
      "pos": [
        6172,
        6265
      ]
    },
    {
      "pos": [
        6267,
        6440
      ],
      "content": "序列化对象的一种简单方式是使用 <bpt id=\"p1\">[</bpt>Newtonsoft.Json.NET<ept id=\"p1\">](https://www.nuget.org/packages/Newtonsoft.Json/8.0.1-beta1)</ept> 中的 <ph id=\"ph1\">`JsonConvert`</ph> 序列化方法，并与 JSON 相互序列化。以下示例演示了使用 <ph id=\"ph2\">`Employee`</ph> 对象实例执行 GET 和 SET。"
    },
    {
      "pos": [
        6923,
        6952
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"next-steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "content": "现在，你已学习了基础知识，接下来请打开以下链接了解有关 Azure Redis 缓存的详细信息。",
      "pos": [
        6954,
        7002
      ]
    },
    {
      "content": "了解 Azure Redis 缓存的 ASP.NET 提供程序。",
      "pos": [
        7008,
        7040
      ]
    },
    {
      "content": "Azure Redis 会话状态提供程序",
      "pos": [
        7050,
        7070
      ]
    },
    {
      "content": "Azure Redis 缓存 ASP.NET 输出缓存提供程序",
      "pos": [
        7143,
        7174
      ]
    },
    {
      "pos": [
        7241,
        7276
      ],
      "content": "查看 <bpt id=\"p1\">[</bpt>StackExchange.Redis 缓存客户端文档<ept id=\"p1\">][]</ept>。"
    },
    {
      "pos": [
        7285,
        7390
      ],
      "content": "可以从许多 Redis 客户端和开发语言访问 azure Redis 缓存。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>http://redis.io/clients<ept id=\"p1\">][]</ept> 和<bpt id=\"p2\">[</bpt>以其他语言开发 Azure Redis 缓存<ept id=\"p2\">][]</ept>。"
    },
    {
      "pos": [
        7395,
        7453
      ],
      "content": "请参阅 <bpt id=\"p1\">[</bpt>redis<ept id=\"p1\">][]</ept> 文档并阅读 <bpt id=\"p2\">[</bpt>redis 数据类型<ept id=\"p2\">][]</ept>和 <bpt id=\"p3\">[</bpt>Redis 数据类型的十五分钟介绍<ept id=\"p3\">][]</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何使用 Azure Redis Cache\" \n    description=\"了解如何使用 Azure Redis 缓存提高 Azure 应用程序的性能\" \n    services=\"redis-cache,app-service\" \n    documentationCenter=\"\" \n    authors=\"steved0x\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"cache\"\n    ms.date=\"12/03/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 如何使用 Azure Redis Cache\n\n> [AZURE.SELECTOR]\n- [.Net](/documentation/articles/cache-dotnet-how-to-use-azure-redis-cache)\n- [Node.js](/documentation/articles/cache-nodejs-get-started)\n- [Java](/documentation/articles/cache-java-get-started)\n- [Python](/documentation/articles/cache-python-get-started)\n\n本指南说明如何开始使用 **Azure Redis 缓存**。Azure Redis 缓存基于流行的开放源代码 Redis 缓存。它让您访问 WindowsAzure.cn 管理的安全专用的 Redis 缓存。使用 Azure Redis 缓存创建的缓存可从 Azure 内的任何应用程序进行访问。\n\nAzure Redis 缓存提供以下层：\n\n-   **基本** - 单个节点。多种大小，最大 53 GB。\n-   **标准** - 双节点主/副本配置。多种大小，最大 53 GB。99.9% SLA。\n-   **高级** - 双节点主/副本配置，最多有 10 个分片。从 6 GB 到 530 GB 的多种大小（有关详细信息，请与我们联系）。标准层的所有功能加上其他功能，支持 [Redis 群集](/documentation/articles/cache-how-to-premium-clustering)。99.9% SLA。\n\n每个级别在功能和定价方面存在差异。有关定价信息，请参阅[缓存定价详细信息][]。\n\n本指南说明如何使用以 C# 代码编写的 [StackExchange.Redis][] 客户端。涉及的任务包括**创建和配置缓存**、**配置缓存客户端**，以及**在缓存中添加和删除对象**。有关使用 Azure Redis 缓存的详细信息，请参阅[后续步骤][]部分。\n\n##<a name=\"getting-started-cache-service\"></a>Azure Redis 缓存入门\n\nAzure Redis Cache 非常容易上手。若要开始使用，需要首先设置和配置缓存。接下来，配置缓存客户端，以便它们可以访问缓存。在配置了缓存客户端后，就可以开始使用它们。\n\n-   [创建缓存][]\n-   [配置缓存客户端][]\n\n##<a name=\"create-cache\" id=\"create-a-cache\"></a>创建缓存\n\n在 Azure 中国区，只能通过 Azure PowerShell 或 Azure CLI 管理 Redis 缓存\n\n\n[AZURE.INCLUDE [azurerm-azurechinacloud-environment-parameter](../includes/azurerm-azurechinacloud-environment-parameter.md)]\n\n\n使用以下 PowerShell 脚本创建缓存：\n\n    $VerbosePreference = \"Continue\"\n\n    # Create a new cache with date string to make name unique. \n    $cacheName = \"MovieCache\" + $(Get-Date -Format ('ddhhmm')) \n    $location = \"China North\"\n    $resourceGroupName = \"Default-Web-ChinaNorth\"\n    \n    $movieCache = New-AzureRmRedisCache -Location $location -Name $cacheName  -ResourceGroupName $resourceGroupName -Size 250MB -Sku Basic\n\n##<a name=\"NuGet\" id=\"configure-the-cache-clients\"></a>配置缓存客户端\n\n使用 Azure Redis 缓存创建的缓存可从任何应用程序访问。在 Visual Studio 中开发的 .NET 应用程序可以使用 **StackExchange.Redis** 缓存客户端，可使用 NuGet 包进行配置，以简化缓存客户端应用程序的配置。\n\n>[AZURE.NOTE]有关详细信息，请参阅 [StackExchange.Redis][] github 页面和 [StackExchange.Redis 缓存客户端文档][]。\n\n若要使用 StackExchange.Redis NuGet 包配置客户端应用程序，请在“解决方案资源管理器”中右键单击项目，然后选择“管理 NuGet 包”。\n\n![管理 NuGet 包][NuGetMenu]\n\n在“联机搜索”文本框中键入 **StackExchange.Redis** 或 **StackExchange.Redis.StrongName**，从结果选择它，然后单击“安装”。\n\n>[AZURE.NOTE]如果你希望使用 **StackExchange.Redis** 客户端库强名称版本，请选择 **StackExchange.Redis.StrongName**；否则选择 **StackExchange.Redis**。\n\n![StackExchange.Redis NuGet 程序包][StackExchangeNuget]\n\nNuGet 程序包会给客户端应用程序下载并添加所需的程序集引用，以访问带 StackExchange.Redis 缓存客户端的 Azure Redis Cache。\n\n在配置了你的客户端项目的缓存后，你可以使用以下各节中介绍的方法来使用你的缓存。\n\n##<a name=\"working-with-caches\"></a>使用缓存\n\n本节中的步骤介绍如何使用缓存执行常见任务。\n\n-   [连接到缓存][]\n-   [添加和从缓存检索对象][]\n-   [处理缓存中的 .NET 对象](#work-with-net-objects-in-the-cache)\n\n##<a name=\"connect-to-cache\"></a>连接到缓存\n\n若要以编程方式使用缓存，你需要引用该缓存。以下代码添加到你想使用 StackExchange.Redis 客户端的任何文件的顶部，以访问 Azure Redis 缓存。\n\n    using StackExchange.Redis;\n\n>[AZURE.NOTE]StackExchange.Redis 客户端需要.NET Framework 4 或更高版本。\n\n到 Azure Redis 缓存的连接由 `ConnectionMultiplexer` 类管理。此类旨在共享并在客户端应用程序中重复使用，不需要在每次执行操作的基础上创建。\n\n要连接到 Azure Redis 缓存并返回连接的 `ConnectionMultiplexer` 的实例，请调用静态 `Connect` 方法并传递到缓存端点和密钥中，如下例所示。使用可以通过 `Get-AzureRmRedisCacheKey` PowerShell 命令获取的密钥作为 password 参数。\n\n    ConnectionMultiplexer connection = ConnectionMultiplexer.Connect(\"contoso5.redis.cache.chinacloudapi.cn,abortConnect=false,ssl=true,password=...\");\n\n>[AZURE.IMPORTANT]警告：切勿将凭据存储在源代码中。为了使本示例简单明了，我将以源代码来呈现凭据内容。有关如何存储凭据的详细信息，请参阅[应用程序字符串和连接字符串的工作原理][]。\n\n如果你不想使用 SSL，请设置 `ssl=false` 或者省略 `ssl` 参数。\n\n>[AZURE.NOTE]默认情况下，将为新缓存禁用非 SSL 端口。\n\n共享应用程序中的 `ConnectionMultiplexer` 实例的一个方法是，拥有返回连接示例的静态属性（与下列示例类似）。这种线程安全方法，可仅初始化单一连接的 `ConnectionMultiplexer` 实例。在这些示例中，`abortConnect` 设置为 false，这表示即使未建立 Azure Redis 缓存连接，也可成功调用。`ConnectionMultiplexer` 的一个关键功能是，一旦还原网络问题和其他原因，它将自动还原缓存连接。\n\n    private static Lazy<ConnectionMultiplexer> lazyConnection = new Lazy<ConnectionMultiplexer>(() =>\n    {\n        return ConnectionMultiplexer.Connect(\"contoso5.redis.cache.chinacloudapi.cn,abortConnect=false,ssl=true,password=...\");\n    });\n    \n    public static ConnectionMultiplexer Connection\n    {\n        get\n        {\n            return lazyConnection.Value;\n        }\n    }\n\n有关高级连接配置选项的详细信息，请参阅 [StackExchange.Redis 配置模型][]。\n\n可以使用以下 PowerShell 命令获取缓存终结点和密钥：\n\n    Get-AzureRmRedisCacheKey -Name \"<your cache name>\" -ResourceGroupName \"<your resource group name>\"\n\n建立连接后，通过调用 `ConnectionMultiplexer.GetDatabase` 方法返回对 Redis 缓存数据库的引用。从 `GetDatabase` 方法返回的对象是一个轻型直通对象，不需要存储。\n\n    // Connection refers to a property that returns a ConnectionMultiplexer\n    // as shown in the previous example.\n    IDatabase cache = Connection.GetDatabase();\n\n    // Perform cache operations using the cache object...\n    // Simple put of integral data types into the cache\n    cache.StringSet(\"key1\", \"value\");\n    cache.StringSet(\"key2\", 25);\n\n    // Simple get of data types from the cache\n    string key1 = cache.StringGet(\"key1\");\n    int key2 = (int)cache.StringGet(\"key2\");\n\n现在您知道如何连接到 Azure Redis Cache 实例并将引用返回缓存数据库，让我们看看如何使用缓存。\n\n##<a name=\"add-object\"></a>添加和从缓存检索对象\n\n可以使用 `StringSet` 和 `StringGet` 方法在缓存中存储和检索项。\n\n    // If key1 exists, it is overwritten.\n    cache.StringSet(\"key1\", \"value1\");\n\n    string value = cache.StringGet(\"key1\");\n\nRedis 将大多数数据存储为 Redis 字符串，但这些字符串可能包含许多类型的数据，包括序列化的二进制数据，可在缓存中存储 .NET 对象时使用。\n\n调用 `StringGet` 时，如果该对象存在，则返回它，如果该对象不存在，则返回 `null`。在这种情况可以从所需的数据源检索值，并将其存储在缓存中供后续使用。这称为缓存端模式。\n\n    string value = cache.StringGet(\"key1\");\n    if (value == null)\n    {\n        // The item keyed by \"key1\" is not in the cache. Obtain\n        // it from the desired data source and add it to the cache.\n        value = GetValueFromDataSource();\n\n        cache.StringSet(\"key1\", value);\n    }\n\n要在缓存中指定项的过期时间，请使用 `StringSet` 的 `TimeSpan` 参数。\n\n    cache.StringSet(\"key1\", \"value1\", TimeSpan.FromMinutes(90));\n\n## <a name=\"store-session\" id=\"work-with-net-objects-in-the-cache\"></a>处理缓存中的 .NET 对象\n\nAzure Redis 缓存可以缓存 .NET 对象以及基元数据类型，但在缓存 .NET 对象之前，必须对其进行序列化。这是应用程序开发人员的责任，同时赋与开发人员选择序列化程序的弹性。\n\n序列化对象的一种简单方式是使用 [Newtonsoft.Json.NET](https://www.nuget.org/packages/Newtonsoft.Json/8.0.1-beta1) 中的 `JsonConvert` 序列化方法，并与 JSON 相互序列化。以下示例演示了使用 `Employee` 对象实例执行 GET 和 SET。\n\n\n    class Employee\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n    \n        public Employee(int EmployeeId, string Name)\n        {\n            this.Id = EmployeeId;\n            this.Name = Name;\n        }\n    }\n\n    // Store to cache\n    cache.StringSet(\"e25\", JsonConvert.SerializeObject(new Employee(25, \"Clayton Gragg\")));\n\n    // Retrieve from cache\n    Employee e25 = JsonConvert.DeserializeObject<Employee>(cache.StringGet(\"e25\"));\n\n##<a name=\"next-steps\"></a>后续步骤\n\n现在，你已学习了基础知识，接下来请打开以下链接了解有关 Azure Redis 缓存的详细信息。\n\n-   了解 Azure Redis 缓存的 ASP.NET 提供程序。\n    -   [Azure Redis 会话状态提供程序](/documentation/articles/cache-asp.net-session-state-provider)\n    -   [Azure Redis 缓存 ASP.NET 输出缓存提供程序](/documentation/articles/cache-asp.net-output-cache-provider)\n-   查看 [StackExchange.Redis 缓存客户端文档][]。\n    -   可以从许多 Redis 客户端和开发语言访问 azure Redis 缓存。有关详细信息，请参阅 [http://redis.io/clients][] 和[以其他语言开发 Azure Redis 缓存][]。\n-   请参阅 [redis][] 文档并阅读 [redis 数据类型][]和 [Redis 数据类型的十五分钟介绍][]。\n\n\n\n<!-- INTRA-TOPIC LINKS -->\n[后续步骤]: #next-steps\n[Introduction to Azure Redis Cache (Video)]: #video\n[What is Azure Redis Cache?]: #what-is\n[Create an Azure Cache]: #create-cache\n[Which type of caching is right for me?]: #choosing-cache\n[Prepare Your Visual Studio Project to Use Azure Caching]: #prepare-vs\n[Configure Your Application to Use Caching]: #configure-app\n[Get Started with Azure Redis Cache]: #getting-started-cache-service\n[创建缓存]: #create-cache\n[Configure the cache]: #enable-caching\n[配置缓存客户端]: #NuGet\n[Working with Caches]: #working-with-caches\n[连接到缓存]: #connect-to-cache\n[添加和从缓存检索对象]: #add-object\n[Specify the expiration of an object in the cache]: #specify-expiration\n[Store ASP.NET session state in the cache]: #store-session\n\n  \n<!-- IMAGES -->\n[NewCacheMenu]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-new-cache-menu.png\n\n[CacheCreate]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-cache-create.png\n\n[StackExchangeNuget]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-stackexchange-redis.png\n\n[NuGetMenu]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-manage-nuget-menu.png\n\n[CacheProperties]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-properties.png\n\n[ManageKeys]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-manage-keys.png\n\n[SessionStateNuGet]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-session-state-provider.png\n\n[BrowseCaches]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-browse-caches.png\n\n[Caches]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-caches.png\n\n[CacheCreated]: ./media/cache-dotnet-how-to-use-azure-redis-cache/redis-cache-cache-created.png\n\n\n\n\n   \n<!-- LINKS -->\n[http://redis.io/clients]: http://redis.io/clients\n[以其他语言开发 Azure Redis 缓存]: /documentation/services/redis-cache\n[如何检索 Azure Redis 连接字符串并将其用于 Redsmin]: https://redsmin.uservoice.com/knowledgebase/articles/485711-how-to-connect-redsmin-to-azure-redis-cache\n[Azure Redis 会话状态提供程序]: /documentation/articles/cache-asp.net-session-state-provider\n[How to: Configure a Cache Client Programmatically]: http://msdn.microsoft.com/zh-cn/library/azure/gg618003.aspx\n[Session State Provider for Azure Cache]: http://go.microsoft.com/fwlink/?LinkId=320835\n[Azure AppFabric Cache: Caching Session State]: http://www.microsoft.com/showcase/details.aspx?uuid=87c833e9-97a9-42b2-8bb1-7601f9b5ca20\n[Output Cache Provider for Azure Cache]: http://go.microsoft.com/fwlink/?LinkId=320837\n[Azure Shared Caching]: http://msdn.microsoft.com/zh-cn/library/azure/gg278356.aspx\n[Team Blog]: http://blogs.msdn.com/b/windowsazure/\n[Azure Caching]: http://www.microsoft.com/showcase/Search.aspx?phrase=azure+caching\n[How to Configure Virtual Machine Sizes]: http://go.microsoft.com/fwlink/?LinkId=164387\n[Azure Caching Capacity Planning Considerations]: http://go.microsoft.com/fwlink/?LinkId=320167\n[Azure Caching]: http://go.microsoft.com/fwlink/?LinkId=252658\n[How to: Set the Cacheability of an ASP.NET Page Declaratively]: http://msdn.microsoft.com/zh-cn/library/zd1ysf1y.aspx\n[How to: Set a Page's Cacheability Programmatically]: http://msdn.microsoft.com/zh-cn/library/z852zf6b.aspx\n[Configure a cache in Azure Redis Cache]: http://msdn.microsoft.com/zh-cn/library/azure/dn793612.aspx\n\n[StackExchange.Redis 配置模型]: http://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/Configuration.md\n\n[处理缓存中的 .NET 对象]: /documentation/articles/cache-dotnet-how-to-use-azure-redis-cache#working-with-caches\n\n\n[NuGet Package Manager Installation]: http://go.microsoft.com/fwlink/?LinkId=240311\n[缓存定价详细信息]: /home/features/redis-cache/#price\n[Azure Management Portal]: https://manage.windowsazure.cn/\n\n[Azure Redis 缓存概述]: /documentation/services/redis-cache\n[Azure Redis 缓存]: /documentation/services/redis-cache\n\n[Migrate to Azure Redis Cache]: http://go.microsoft.com/fwlink/?LinkId=317347\n[Azure Redis Cache Samples]: http://go.microsoft.com/fwlink/?LinkId=320840\n[使用资源组管理 Azure 资源]: /documentation/articles/resource-group-overview/\n\n[StackExchange.Redis]: http://github.com/StackExchange/StackExchange.Redis\n[StackExchange.Redis 缓存客户端文档]: http://github.com/StackExchange/StackExchange.Redis#documentation\n\n[Redis]: http://redis.io/documentation\n[redis 数据类型]: http://redis.io/topics/data-types\n[Redis 数据类型的十五分钟介绍]: http://redis.io/topics/data-types-intro\n\n[应用程序字符串和连接字符串的工作原理]: http://azure.microsoft.com/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/\n\n[Azure Trial]: /pricing/1rmb-trial/?WT.mc_id=redis_cache_hero\n\n<!---HONumber=Mooncake_0104_2016-->"
}