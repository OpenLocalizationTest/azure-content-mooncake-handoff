{
  "nodes": [
    {
      "content": "开始使用 Visual Studio .NET 移动服务项目（连接服务）| Microsoft Azure",
      "pos": [
        27,
        80
      ]
    },
    {
      "content": "如何在 Visual Studio .NET 项目中开始使用 Azure 移动服务",
      "pos": [
        99,
        140
      ]
    },
    {
      "content": "移动服务入门（.NET 项目）",
      "pos": [
        357,
        372
      ]
    },
    {
      "content": "为了跟踪这些代码，您需要首先执行的步骤取决于您连接的移动服务类型。",
      "pos": [
        474,
        507
      ]
    },
    {
      "pos": [
        511,
        643
      ],
      "content": "对于 JavaScript 后端移动服务，需创建一个名为“TodoItem”表。创建表的方法：在服务器资源管理器中的 Azure node 下定位移动服务，右键单击该移动服务的 Node 打开上下文菜单，然后选择<bpt id=\"p1\">**</bpt>创建表<ept id=\"p1\">**</ept>。输入“TodoItem”作为表名称。"
    },
    {
      "pos": [
        647,
        793
      ],
      "content": "如果你使用的是 .NET 后端移动服务，那么 Visual Studio 为你创建的默认项目模板中已经有一个 TodoItem 表，但你需要将其发布到 Azure。发布方法：在解决方案资源管理器中打开移动服务项目的上下文菜单，然后选择<bpt id=\"p1\">**</bpt>发布 Web<ept id=\"p1\">**</ept>。接受默认设置，然后选择<bpt id=\"p2\">**</bpt>发布<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "获取对表的引用",
      "pos": [
        797,
        804
      ]
    },
    {
      "pos": [
        806,
        921
      ],
      "content": "以下代码将创建对表（<ph id=\"ph1\">`todoTable`</ph>，其中包含 TodoItem 的数据）的引用，你可以将该引用用于后续操作以便读取和更新数据表。您将需要 TodoItem 类，并将其属性设置为解释移动服务为响应您的查询而发送的 JSON。"
    },
    {
      "pos": [
        1269,
        1447
      ],
      "content": "如果您的表权限已设置为<bpt id=\"p1\">**</bpt>具有应用程序密钥的任何人<ept id=\"p1\">**</ept>，则此代码有效。如果您更改权限以保护您的移动服务，您将需要添加用户身份验证支持。请参阅<bpt id=\"p2\">[</bpt>身份验证入门<ept id=\"p2\">](/documentation/articles/mobile-services-dotnet-backend-windows-universal-dotnet-get-started-users)</ept>。"
    },
    {
      "content": "添加表项",
      "pos": [
        1451,
        1455
      ]
    },
    {
      "content": "将新的项目插入数据表。",
      "pos": [
        1457,
        1468
      ]
    },
    {
      "content": "读取或查询表",
      "pos": [
        1607,
        1613
      ]
    },
    {
      "content": "以下代码将查询表以获取所有项目。请注意，它仅返回数据的第一页，默认为 50 个项目。因为它是一个可选的参数，您可以传入所需的页大小。",
      "pos": [
        1615,
        1681
      ]
    },
    {
      "content": "更新表项",
      "pos": [
        1930,
        1934
      ]
    },
    {
      "content": "更新数据表中的行。参数项是指要更新的 TodoItem 对象。",
      "pos": [
        1936,
        1967
      ]
    },
    {
      "content": "删除表项",
      "pos": [
        2011,
        2015
      ]
    },
    {
      "content": "删除数据库中的行。参数项是指要删除的 TodoItem 对象。",
      "pos": [
        2017,
        2048
      ]
    },
    {
      "content": "详细了解移动服务",
      "pos": [
        2092,
        2100
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"开始使用 Visual Studio .NET 移动服务项目（连接服务）| Microsoft Azure\"\n    description=\"如何在 Visual Studio .NET 项目中开始使用 Azure 移动服务\"\n    services=\"mobile-services\"\n    documentationCenter=\"\"\n    authors=\"mlhoop\"\n    manager=\"douge\"\n    editor=\"\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.date=\"01/05/2016\"\n    wacn.date=\"03/21/2016\"/>\n\n#  移动服务入门（.NET 项目）\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../includes/mobile-services-note-mobile-apps.md)]\n\n为了跟踪这些代码，您需要首先执行的步骤取决于您连接的移动服务类型。\n\n- 对于 JavaScript 后端移动服务，需创建一个名为“TodoItem”表。创建表的方法：在服务器资源管理器中的 Azure node 下定位移动服务，右键单击该移动服务的 Node 打开上下文菜单，然后选择**创建表**。输入“TodoItem”作为表名称。\n\n- 如果你使用的是 .NET 后端移动服务，那么 Visual Studio 为你创建的默认项目模板中已经有一个 TodoItem 表，但你需要将其发布到 Azure。发布方法：在解决方案资源管理器中打开移动服务项目的上下文菜单，然后选择**发布 Web**。接受默认设置，然后选择**发布**。\n\n##获取对表的引用\n\n以下代码将创建对表（`todoTable`，其中包含 TodoItem 的数据）的引用，你可以将该引用用于后续操作以便读取和更新数据表。您将需要 TodoItem 类，并将其属性设置为解释移动服务为响应您的查询而发送的 JSON。\n\n    public class TodoItem\n    {\n        public string Id { get; set; }\n\n        [JsonProperty(PropertyName = \"text\")]\n        public string Text { get; set; }\n\n        [JsonProperty(PropertyName = \"complete\")]\n        public bool Complete { get; set; }\n    }\n\n    IMobileServiceTable<TodoItem> todoTable = App.<yourClient>.GetTable<TodoItem>();\n\n如果您的表权限已设置为**具有应用程序密钥的任何人**，则此代码有效。如果您更改权限以保护您的移动服务，您将需要添加用户身份验证支持。请参阅[身份验证入门](/documentation/articles/mobile-services-dotnet-backend-windows-universal-dotnet-get-started-users)。\n\n##添加表项\n\n将新的项目插入数据表。\n\n    TodoItem todoItem = new TodoItem() { Text = \"My first to do item\", Complete = false };\n    await todoTable.InsertAsync(todoItem);\n\n##读取或查询表\n\n以下代码将查询表以获取所有项目。请注意，它仅返回数据的第一页，默认为 50 个项目。因为它是一个可选的参数，您可以传入所需的页大小。\n\n    List<TodoItem> items;\n    try\n    {\n        // Query that returns all items.   \n        items = await todoTable.ToListAsync();             \n    }\n    catch (MobileServiceInvalidOperationException e)\n    {\n        // handle exception\n    }\n\n\n##更新表项\n\n更新数据表中的行。参数项是指要更新的 TodoItem 对象。\n\n    await todoTable.UpdateAsync(item);\n\n##删除表项\n\n删除数据库中的行。参数项是指要删除的 TodoItem 对象。\n\n    await todoTable.DeleteAsync(item);\n\n\n[详细了解移动服务](/documentation/services/mobile-services)\n\n<!---HONumber=Mooncake_0215_2016-->"
}