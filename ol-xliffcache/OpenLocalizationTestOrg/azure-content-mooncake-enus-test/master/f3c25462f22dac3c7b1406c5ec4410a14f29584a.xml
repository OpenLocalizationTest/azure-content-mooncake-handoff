{
  "nodes": [
    {
      "content": "将现有 Blob 复制到媒体服务资产中",
      "pos": [
        28,
        47
      ]
    },
    {
      "content": "本主题说明如何将现有 Blob 复制到媒体服务资产中。",
      "pos": [
        67,
        94
      ]
    },
    {
      "content": "将现有 Blob 复制到媒体服务资产中",
      "pos": [
        313,
        332
      ]
    },
    {
      "content": "本主题介绍如何将存储帐户中的 Blob 复制到新的 Azure 媒体服务资产中。",
      "pos": [
        334,
        374
      ]
    },
    {
      "pos": [
        376,
        526
      ],
      "content": "Blob 可以存在于与媒体服务帐户关联的存储帐户中，也可以存在于不与媒体服务帐户关联的存储帐户中。本主题演示如何将 Blob 从存储帐户复制到媒体服务资产中。请注意，你还可以跨数据中心复制。但是，这样做可能会产生费用。有关定价的详细信息，请参阅<bpt id=\"p1\">[</bpt>数据传输<ept id=\"p1\">](/pricing/#header-11)</ept>。"
    },
    {
      "pos": [
        529,
        586
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 在不使用媒体服务 API 的情况下，你不应该尝试更改媒体服务生成的 BLOB 容器内容。"
    },
    {
      "content": "先决条件",
      "pos": [
        590,
        594
      ]
    },
    {
      "pos": [
        598,
        699
      ],
      "content": "在新的或现有的 Azure 订阅中拥有两个媒体服务帐户。请参阅主题<bpt id=\"p1\">[</bpt>如何创建媒体服务帐户<ept id=\"p1\">](/documentation/articles/media-services-create-account)</ept>。"
    },
    {
      "content": "操作系统：Windows 10、Windows 7、Windows 2008 R2 或 Windows 8。",
      "pos": [
        702,
        756
      ]
    },
    {
      "content": ".NET Framework 4.5。",
      "pos": [
        759,
        778
      ]
    },
    {
      "content": "Visual Studio 2010 SP1（专业版、高级专业版、旗舰版或学习版）或更高版本。",
      "pos": [
        781,
        828
      ]
    },
    {
      "content": "设置项目",
      "pos": [
        832,
        836
      ]
    },
    {
      "content": "在本部分中，你将创建和设置一个 C# 控制台应用程序项目。",
      "pos": [
        838,
        867
      ]
    },
    {
      "content": "使用 Visual Studio 2012 或 Visual Studio 2010 SP1 创建包含 C# 控制台应用程序项目的新解决方案。",
      "pos": [
        872,
        943
      ]
    },
    {
      "content": "为“名称”输入 CopyExistingBlobsIntoAsset，然后单击“确定”。",
      "pos": [
        948,
        992
      ]
    },
    {
      "content": "使用 Nuget 添加对媒体服务相关 DLL 的引用。在 Visual Studio 主菜单中，选择“工具”-&gt;“库程序包管理器”-&gt;“程序包管理器控制台”。在控制台窗口中，键入 Install-Package windowsazure.mediaservices，然后按 Enter。",
      "pos": [
        996,
        1139
      ]
    },
    {
      "content": "添加此项目所需的其他引用：System.Configuration。",
      "pos": [
        1143,
        1177
      ]
    },
    {
      "content": "将默认添加到 Programs.cs 文件中的 using 语句替换为以下语句：",
      "pos": [
        1181,
        1221
      ]
    },
    {
      "content": "将 appSettings 节添加到 .config 文件，并根据媒体服务和 Storage 密钥与名称值更新值。",
      "pos": [
        1755,
        1812
      ]
    },
    {
      "content": "将 Blob 从存储帐户复制到媒体服务资产中",
      "pos": [
        2399,
        2421
      ]
    },
    {
      "content": "下面的代码示例执行以下任务：",
      "pos": [
        2423,
        2437
      ]
    },
    {
      "content": "创建 CloudMediaContext 实例。",
      "pos": [
        2442,
        2466
      ]
    },
    {
      "content": "创建 CloudStorageAccount 实例：\\_sourceStorageAccount 和\\_destinationStorageAccount。",
      "pos": [
        2471,
        2549
      ]
    },
    {
      "content": "将本地目录中的平滑流文件上载到位于 \\_sourceStorageAccount 中的 Blob 容器内。",
      "pos": [
        2553,
        2606
      ]
    },
    {
      "content": "创建一个新资产。为此资产创建的 Blob 容器位于 \\_destinationStorageAccount 中。",
      "pos": [
        2610,
        2666
      ]
    },
    {
      "content": "使用 Azure 存储 SDK 将指定的 Blob 复制到与此资产关联的容器中。",
      "pos": [
        2670,
        2710
      ]
    },
    {
      "pos": [
        2713,
        2745
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果定位符已过期，复制操作不会引发异常。"
    },
    {
      "content": "将 .ism 文件设置为主文件。",
      "pos": [
        2750,
        2766
      ]
    },
    {
      "content": "为与此资产关联的 OnDemandOrigin 定位符创建平滑流 URL。",
      "pos": [
        2770,
        2807
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"将现有 Blob 复制到媒体服务资产中\" \n    description=\"本主题说明如何将现有 Blob 复制到媒体服务资产中。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\" \n    wacn.date=\"03/17/2016\"/>\n\n#将现有 Blob 复制到媒体服务资产中\n\n本主题介绍如何将存储帐户中的 Blob 复制到新的 Azure 媒体服务资产中。\n\nBlob 可以存在于与媒体服务帐户关联的存储帐户中，也可以存在于不与媒体服务帐户关联的存储帐户中。本主题演示如何将 Blob 从存储帐户复制到媒体服务资产中。请注意，你还可以跨数据中心复制。但是，这样做可能会产生费用。有关定价的详细信息，请参阅[数据传输](/pricing/#header-11)。\n\n>[AZURE.NOTE] 在不使用媒体服务 API 的情况下，你不应该尝试更改媒体服务生成的 BLOB 容器内容。\n\n##先决条件\n\n- 在新的或现有的 Azure 订阅中拥有两个媒体服务帐户。请参阅主题[如何创建媒体服务帐户](/documentation/articles/media-services-create-account)。\n- 操作系统：Windows 10、Windows 7、Windows 2008 R2 或 Windows 8。\n- .NET Framework 4.5。\n- Visual Studio 2010 SP1（专业版、高级专业版、旗舰版或学习版）或更高版本。\n\n##设置项目\n\n在本部分中，你将创建和设置一个 C# 控制台应用程序项目。\n\n1. 使用 Visual Studio 2012 或 Visual Studio 2010 SP1 创建包含 C# 控制台应用程序项目的新解决方案。 \n2. 为“名称”输入 CopyExistingBlobsIntoAsset，然后单击“确定”。\n1. 使用 Nuget 添加对媒体服务相关 DLL 的引用。在 Visual Studio 主菜单中，选择“工具”->“库程序包管理器”->“程序包管理器控制台”。在控制台窗口中，键入 Install-Package windowsazure.mediaservices，然后按 Enter。\n1. 添加此项目所需的其他引用：System.Configuration。\n1. 将默认添加到 Programs.cs 文件中的 using 语句替换为以下语句：\n        \n        using System;\n        using System.Linq;\n        using System.Configuration;\n        using System.IO;\n        using System.Text;\n        using System.Threading;\n        using System.Threading.Tasks;\n        using System.Collections.Generic;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.MediaServices.Client;\n        using Microsoft.WindowsAzure;\n        using System.Web;\n        using Microsoft.WindowsAzure.Storage.Blob;\n        using Microsoft.WindowsAzure.Storage.Auth;\n\n1. 将 appSettings 节添加到 .config 文件，并根据媒体服务和 Storage 密钥与名称值更新值。\n\n        <appSettings>\n          <add key=\"MediaServicesAccountName\" value=\"Media-Services-Account-Name\"/>\n          <add key=\"MediaServicesAccountKey\" value=\"Media-Services-Account-Key\"/>\n          <add key=\"MediaServicesStorageAccountName\" value=\"Media-Services-Storage-Account-Name\"/>\n          <add key=\"MediaServicesStorageAccountKey\" value=\"Media-Services-Storage-Account-Key\"/>\n          <add key=\"ExternalStorageAccountName\" value=\"External-Storage-Account-Name\"/>\n          <add key=\"ExternalStorageAccountKey\" value=\"External-Storage-Account-Key\"/>\n        </appSettings>\n\n\n##将 Blob 从存储帐户复制到媒体服务资产中\n\n下面的代码示例执行以下任务：\n\n1. 创建 CloudMediaContext 实例。 \n1. 创建 CloudStorageAccount 实例：\\_sourceStorageAccount 和\\_destinationStorageAccount。\n1. 将本地目录中的平滑流文件上载到位于 \\_sourceStorageAccount 中的 Blob 容器内。\n1. 创建一个新资产。为此资产创建的 Blob 容器位于 \\_destinationStorageAccount 中。\n1. 使用 Azure 存储 SDK 将指定的 Blob 复制到与此资产关联的容器中。\n\n>[AZURE.NOTE]如果定位符已过期，复制操作不会引发异常。\n\n1. 将 .ism 文件设置为主文件。\n1. 为与此资产关联的 OnDemandOrigin 定位符创建平滑流 URL。 \n        \n        class Program\n        {\n            // Read values from the App.config file. \n            static string _accountName = ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n            static string _accountKey = ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n            static string _storageAccountName = ConfigurationManager.AppSettings[\"MediaServicesStorageAccountName\"];\n            static string _storageAccountKey = ConfigurationManager.AppSettings[\"MediaServicesStorageAccountKey\"];\n            static string _externalStorageAccountName = ConfigurationManager.AppSettings[\"ExternalStorageAccountName\"];\n            static string _externalStorageAccountKey = ConfigurationManager.AppSettings[\"ExternalStorageAccountKey\"];\n        \n            private static readonly String _defaultScope = \"urn:WindowsAzureMediaServices\";\n\n            // Azure China uses a different API server and a different ACS Base Address from the Global.\n            private static readonly String _chinaApiServerUrl = \"https://wamsshaclus001rest-hs.chinacloudapp.cn/API/\";\n            private static readonly String _chinaAcsBaseAddressUrl = \"https://wamsprodglobal001acs.accesscontrol.chinacloudapi.cn\";\n\n            // Azure China Storage Endpoint Suffix\n            private static readonly String _chinaEndpointSuffix = \"core.chinacloudapi.cn\";\n\n            private static MediaServicesCredentials _cachedCredentials = null;\n            private static CloudMediaContext _context = null;\n        \n            private static CloudStorageAccount _sourceStorageAccount = null;\n            private static CloudStorageAccount _destinationStorageAccount = null;\n        \n            static void Main(string[] args)\n            {\n                _cachedCredentials = new MediaServicesCredentials(\n                                _accountName,\n                                _accountKey,\n                                _defaultScope,\n                                _chinaAcsBaseAddressUrl);\n\n                // Create the API server Uri\n                _apiServer = new Uri(\"https://wamsshaclus001rest-hs.chinacloudapp.cn/API/\");\n\n                // Use the cached credentials to create CloudMediaContext.\n                _context = new CloudMediaContext(_apiServer, _cachedCredentials);\n        \n                // In this example the storage account from which we copy blobs is not \n                // associated with the Media Services account into which we copy blobs.\n                // But the same code will work for coping blobs from a storage account that is \n                // associated with the Media Services account.\n                //\n                // Get a reference to a storage account that is not associated with a Media Services account\n                // (an external account).  \n                StorageCredentials externalStorageCredentials =\n                    new StorageCredentials(_externalStorageAccountName, _externalStorageAccountKey);\n                _sourceStorageAccount = new CloudStorageAccount(externalStorageCredentials, _chinaEndpointSuffix, true);\n        \n                //Get a reference to the storage account that is associated with a Media Services account. \n                StorageCredentials mediaServicesStorageCredentials =\n                    new StorageCredentials(_storageAccountName, _storageAccountKey);\n                _destinationStorageAccount = new CloudStorageAccount(mediaServicesStorageCredentials, _chinaEndpointSuffix, false);\n        \n                // Upload Smooth Streaming files into a storage account.\n                string localMediaDir = @\"C:\\supportFiles\\streamingfiles\";\n                CloudBlobContainer blobContainer =\n                    UploadContentToStorageAccount(localMediaDir);\n        \n                // Create a new asset and copy the smooth streaming files into \n                // the container that is associated with the asset.\n                IAsset asset = CreateAssetFromExistingBlobs(blobContainer);\n        \n                // Get the streaming URL for the smooth streaming files \n                // that were copied into the asset.   \n                string urlForClientStreaming = CreateStreamingLocator(asset);\n                Console.WriteLine(\"Smooth Streaming URL: \" + urlForClientStreaming);\n        \n                Console.ReadLine();\n            }\n        \n            /// <summary>\n            /// Uploads content from a local directory into the specified storage account.\n            /// In this example the storage account is not associated with the Media Services account.\n            /// </summary>\n            /// <param name=\"localPath\">The path from which to upload the files.</param>\n            /// <returns>The container that contains the uploaded files.</returns>\n            static public CloudBlobContainer UploadContentToStorageAccount(string localPath)\n            {\n                CloudBlobClient externalCloudBlobClient = _sourceStorageAccount.CreateCloudBlobClient();\n                CloudBlobContainer externalMediaBlobContainer = externalCloudBlobClient.GetContainerReference(\"streamingfiles\");\n        \n                externalMediaBlobContainer.CreateIfNotExists();\n        \n                // Upload files to the blob container.  \n                DirectoryInfo uploadDirectory = new DirectoryInfo(localPath);\n                foreach (var file in uploadDirectory.EnumerateFiles())\n                {\n                    CloudBlockBlob blob = externalMediaBlobContainer.GetBlockBlobReference(file.Name);\n        \n                    blob.UploadFromFile(file.FullName, FileMode.Open);\n                }\n        \n                return externalMediaBlobContainer;\n            }\n        \n            /// <summary>\n            /// Creates a new asset and copies blobs from the specifed storage account.\n            /// </summary>\n            /// <param name=\"mediaBlobContainer\">The specified blob container.</param>\n            /// <returns>The new asset.</returns>\n            static public IAsset CreateAssetFromExistingBlobs(CloudBlobContainer mediaBlobContainer)\n            {\n                // Create a new asset. \n                IAsset asset = _context.Assets.Create(\"CopyBlob_\" + Guid.NewGuid(), AssetCreationOptions.None);\n        \n                IAccessPolicy writePolicy = _context.AccessPolicies.Create(\"writePolicy\", TimeSpan.FromHours(24), AccessPermissions.Write);\n                ILocator destinationLocator = _context.Locators.CreateLocator(LocatorType.Sas, asset, writePolicy);\n        \n                CloudBlobClient destBlobStorage = _destinationStorageAccount.CreateCloudBlobClient();\n        \n                // Get the asset container URI and Blob copy from mediaContainer to assetContainer. \n                string destinationContainerName = (new Uri(destinationLocator.Path)).Segments[1];\n        \n                CloudBlobContainer assetContainer = destBlobStorage.GetContainerReference(destinationContainerName);\n        \n                if (assetContainer.CreateIfNotExists())\n                {\n                    assetContainer.SetPermissions(new BlobContainerPermissions\n                    {\n                        PublicAccess = BlobContainerPublicAccessType.Blob\n                    });\n                }\n        \n                var blobList = mediaBlobContainer.ListBlobs();\n                foreach (var sourceBlob in blobList)\n                {\n                    var assetFile = asset.AssetFiles.Create((sourceBlob as ICloudBlob).Name);\n                    CopyBlob(sourceBlob as ICloudBlob, assetContainer);\n                    assetFile.ContentFileSize = (sourceBlob as ICloudBlob).Properties.Length;\n                    assetFile.Update();\n                }\n        \n                destinationLocator.Delete();\n                writePolicy.Delete();\n        \n                // Since we copied a set of Smooth Streaming files, \n                // set the .ism file to be the primary file. \n                SetISMFileAsPrimary(asset);\n        \n                return asset;\n            }\n        \n            /// <summary>\n            /// Creates the OnDemandOrigin locator in order to get the streaming URL.\n            /// </summary>\n            /// <param name=\"asset\">The asset that contains the smooth streaming files.</param>\n            /// <returns>The streaming URL.</returns>\n            static public string CreateStreamingLocator(IAsset asset)\n            {\n                var ismAssetFile = asset.AssetFiles.ToList().\n                    Where(f => f.Name.EndsWith(\".ism\", StringComparison.OrdinalIgnoreCase)).First();\n        \n                // Create a 30-day readonly access policy. \n            // You cannot create a streaming locator using an AccessPolicy that includes write or delete permissions.            \n                IAccessPolicy policy = _context.AccessPolicies.Create(\"Streaming policy\",\n                    TimeSpan.FromDays(30),\n                    AccessPermissions.Read);\n        \n                // Create a locator to the streaming content on an origin. \n                ILocator originLocator = _context.Locators.CreateLocator(LocatorType.OnDemandOrigin, asset,\n                    policy,\n                    DateTime.UtcNow.AddMinutes(-5));\n        \n                return originLocator.Path + ismAssetFile.Name + \"/manifest\";\n            }\n        \n            /// <summary>\n            /// Copies the specified blob into the specified container.\n            /// </summary>\n            /// <param name=\"sourceBlob\">The source container.</param>\n            /// <param name=\"destinationContainer\">The destination container.</param>\n            static private void CopyBlob(ICloudBlob sourceBlob, CloudBlobContainer destinationContainer)\n            {\n                var signature = sourceBlob.GetSharedAccessSignature(new SharedAccessBlobPolicy\n                {\n                    Permissions = SharedAccessBlobPermissions.Read,\n                    SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24)\n                });\n\n                ICloudBlob destinationBlob = destinationContainer.GetBlockBlobReference(sourceBlob.Name);\n\n                if (destinationBlob.Exists())\n                {\n                    Console.WriteLine(string.Format(\"Destination blob '{0}' already exists. Skipping.\", destinationBlob.Uri));\n                }\n                else\n                {\n                    try\n                    {\n                        Console.WriteLine(string.Format(\"Copy blob '{0}' to '{1}'\", sourceBlob.Uri, destinationBlob.Uri));\n                        destinationBlob.StartCopyFromBlob(new Uri(sourceBlob.Uri.AbsoluteUri + signature));\n\n\n                        while (true)\n                        {\n                            // The StartCopyFromBlob is an async operation, \n                            // so we want to check if the copy operation is completed before proceeding. \n                            // To do that, we call FetchAttributes on the blob and check the CopyStatus. \n                            destinationBlob.FetchAttributes();\n                            if (destinationBlob.CopyState.Status != CopyStatus.Pending)\n                            {\n                                break;\n                            }\n                            //It's still not completed. So wait for some time.\n                            System.Threading.Thread.Sleep(1000);\n                        }\n\n                        Console.WriteLine(\"Final blob copy status = \" + destinationBlob.CopyState.Status);\n                    }\n                    catch (Exception ex)\n                    {\n                        Console.WriteLine(string.Format(\"Error copying blob '{0}': {1}\", sourceBlob.Name, ex.Message));\n                    }\n                }\n            }\n        \n            /// <summary>\n            /// Sets a file with the .ism extension as a primary file.\n            /// </summary>\n            /// <param name=\"asset\">The asset that contains the smooth streaming files.</param>\n            static private void SetISMFileAsPrimary(IAsset asset)\n            {\n                var ismAssetFiles = asset.AssetFiles.ToList().\n                    Where(f => f.Name.EndsWith(\".ism\", StringComparison.OrdinalIgnoreCase)).ToArray();\n        \n                if (ismAssetFiles.Count() != 1)\n                    throw new ArgumentException(\"The asset should have only one, .ism file\");\n        \n                ismAssetFiles.First().IsPrimary = true;\n                ismAssetFiles.First().Update();\n            }\n        }\n \n\n<!---HONumber=Mooncake_0307_2016-->"
}