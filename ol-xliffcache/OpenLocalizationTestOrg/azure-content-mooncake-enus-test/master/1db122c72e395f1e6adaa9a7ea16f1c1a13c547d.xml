{
  "nodes": [
    {
      "content": "将消息发送到事件中心",
      "pos": [
        3,
        13
      ]
    },
    {
      "pos": [
        14,
        298
      ],
      "content": "在本部分中，我们将编写用于将事件发送到事件中心的 C 应用。我们将从 <bpt id=\"p1\">[</bpt>Apache Qpid 项目<ept id=\"p1\">](http://qpid.apache.org/)</ept>使用 Proton AMQP 库。这类似于从 C 中将服务总线队列和主题与 AMQP 配合使用，如<bpt id=\"p2\">[</bpt>此处<ept id=\"p2\">](https://code.msdn.microsoft.com/WindowsAzure/Using-Apache-Qpid-Proton-C-afd76504)</ept>所示。有关详细信息，请参阅 <bpt id=\"p3\">[</bpt>Qpid Proton 文档<ept id=\"p3\">](http://qpid.apache.org/proton/index.html)</ept>。"
    },
    {
      "pos": [
        303,
        544
      ],
      "content": "从 <bpt id=\"p1\">[</bpt>Qpid AMQP Messenger 页<ept id=\"p1\">](http://qpid.apache.org/components/messenger/index.html)</ept>中，单击“安装 Qpid Proton”链接，并根据你的环境，按照说明操作。我们将采用一个 Linux 环境；例如，装有 Ubuntu 14.04 的 <bpt id=\"p2\">[</bpt>Azure Linux VM<ept id=\"p2\">](/documentation/articles/virtual-machines-linux-tutorial-portal-rm)</ept>。"
    },
    {
      "content": "若要编译 Proton 库，请安装以下程序包：",
      "pos": [
        549,
        572
      ]
    },
    {
      "pos": [
        669,
        737
      ],
      "content": "下载 <bpt id=\"p1\">[</bpt>Qpid Proton 库<ept id=\"p1\">](http://qpid.apache.org/proton/index.html)</ept>并提取它，例如："
    },
    {
      "content": "创建生成目录、编译和安装：",
      "pos": [
        870,
        883
      ]
    },
    {
      "pos": [
        1020,
        1215
      ],
      "content": "在工作目录中，创建一个包含以下内容的名为 <bpt id=\"p1\">**</bpt>sender.c<ept id=\"p1\">**</ept> 的新文件。请记得替换事件中心名称和命名空间名称（后者通常为 <ph id=\"ph1\">`{event hub name}-ns`</ph>）的值。还必须为之前创建的 <bpt id=\"p2\">**</bpt>SendRule<ept id=\"p2\">**</ept> 替换密钥的 URL 编码版本。可以在<bpt id=\"p3\">[</bpt>此处<ept id=\"p3\">](http://www.w3schools.com/tags/ref_urlencode.asp)</ept>对它进行 URL 编码。"
    },
    {
      "pos": [
        3863,
        3880
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>gcc<ept id=\"p1\">**</ept> 编译该文件："
    },
    {
      "pos": [
        3930,
        4154
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在此代码中，我们使用传出窗口 1 以强制尽快发出消息。通常，你的应用程序应尝试批处理消息，以提高吞吐量。请参阅 <bpt id=\"p1\">[</bpt>Qpid AMQP Messenger 页<ept id=\"p1\">](http://qpid.apache.org/components/messenger/index.html)</ept>，以详细了解如何在此环境及其他环境中以及从为其提供了绑定的平台（目前为 Perl、PHP、Python 和 Ruby）中使用 Qpid Proton 库。"
    }
  ],
  "content": "## 将消息发送到事件中心\n在本部分中，我们将编写用于将事件发送到事件中心的 C 应用。我们将从 [Apache Qpid 项目](http://qpid.apache.org/)使用 Proton AMQP 库。这类似于从 C 中将服务总线队列和主题与 AMQP 配合使用，如[此处](https://code.msdn.microsoft.com/WindowsAzure/Using-Apache-Qpid-Proton-C-afd76504)所示。有关详细信息，请参阅 [Qpid Proton 文档](http://qpid.apache.org/proton/index.html)。\n\n1. 从 [Qpid AMQP Messenger 页](http://qpid.apache.org/components/messenger/index.html)中，单击“安装 Qpid Proton”链接，并根据你的环境，按照说明操作。我们将采用一个 Linux 环境；例如，装有 Ubuntu 14.04 的 [Azure Linux VM](/documentation/articles/virtual-machines-linux-tutorial-portal-rm)。\n\n2. 若要编译 Proton 库，请安装以下程序包：\n\n    ```\n    sudo apt-get install build-essential cmake uuid-dev openssl libssl-dev\n    ```\n\n3. 下载 [Qpid Proton 库](http://qpid.apache.org/proton/index.html)并提取它，例如：\n\n    ```\n    wget http://apache.fastbull.org/qpid/proton/0.7/qpid-proton-0.7.tar.gz\n    tar xvfz qpid-proton-0.7.tar.gz\n    ```\n\n4. 创建生成目录、编译和安装：\n\n    ```\n    cd qpid-proton-0.7\n    mkdir build\n    cd build\n    cmake -DCMAKE_INSTALL_PREFIX=/usr ..\n    sudo make install\n    ```\n\n5. 在工作目录中，创建一个包含以下内容的名为 **sender.c** 的新文件。请记得替换事件中心名称和命名空间名称（后者通常为 `{event hub name}-ns`）的值。还必须为之前创建的 **SendRule** 替换密钥的 URL 编码版本。可以在[此处](http://www.w3schools.com/tags/ref_urlencode.asp)对它进行 URL 编码。\n\n    ```\n    #include \"proton/message.h\"\n    #include \"proton/messenger.h\"\n    \n    #include <getopt.h>\n    #include <proton/util.h>\n    #include <sys/time.h>\n    #include <stddef.h>\n    #include <stdio.h>\n    #include <string.h>\n    #include <unistd.h>\n    #include <stdlib.h>\n    \n    #define check(messenger)                                                     \\\n      {                                                                          \\\n        if(pn_messenger_errno(messenger))                                        \\\n        {                                                                        \\\n          printf(\"check\\n\");                                                     \\\n          die(__FILE__, __LINE__, pn_error_text(pn_messenger_error(messenger))); \\\n        }                                                                        \\\n      }  \n    \n    pn_timestamp_t time_now(void)\n    {\n      struct timeval now;\n      if (gettimeofday(&now, NULL)) pn_fatal(\"gettimeofday failed\\n\");\n      return ((pn_timestamp_t)now.tv_sec) * 1000 + (now.tv_usec / 1000);\n    }  \n    \n    void die(const char *file, int line, const char *message)\n    {\n      printf(\"Dead\\n\");\n      fprintf(stderr, \"%s:%i: %s\\n\", file, line, message);\n      exit(1);\n    }\n    \n    int sendMessage(pn_messenger_t * messenger) {\n        char * address = (char *) \"amqps://SendRule:{Send Rule key}@{namespace name}.servicebus.windows.net/{event hub name}\";\n        char * msgtext = (char *) \"Hello from C!\";\n    \n        pn_message_t * message;\n        pn_data_t * body;\n        message = pn_message();\n    \n        pn_message_set_address(message, address);\n        pn_message_set_content_type(message, (char*) \"application/octect-stream\");\n        pn_message_set_inferred(message, true);\n    \n        body = pn_message_body(message);\n        pn_data_put_binary(body, pn_bytes(strlen(msgtext), msgtext));\n    \n        pn_messenger_put(messenger, message);\n        check(messenger);\n        pn_messenger_send(messenger, 1);\n        check(messenger);\n    \n        pn_message_free(message);\n    }\n    \n    int main(int argc, char** argv) {\n        printf(\"Press Ctrl-C to stop the sender process\\n\");\n    \n        pn_messenger_t *messenger = pn_messenger(NULL);\n        pn_messenger_set_outgoing_window(messenger, 1);\n        pn_messenger_start(messenger);\n    \n        while(true) {\n            sendMessage(messenger);\n            printf(\"Sent message\\n\");\n            sleep(1);\n        }\n    \n        // release messenger resources\n        pn_messenger_stop(messenger);\n        pn_messenger_free(messenger);\n    \n        return 0;\n    }\n    ```\n\n6. 使用 **gcc** 编译该文件：\n\n        gcc sender.c -o sender -lqpid-proton\n\n> [AZURE.NOTE]在此代码中，我们使用传出窗口 1 以强制尽快发出消息。通常，你的应用程序应尝试批处理消息，以提高吞吐量。请参阅 [Qpid AMQP Messenger 页](http://qpid.apache.org/components/messenger/index.html)，以详细了解如何在此环境及其他环境中以及从为其提供了绑定的平台（目前为 Perl、PHP、Python 和 Ruby）中使用 Qpid Proton 库。\n\n<!---HONumber=Mooncake_0104_2016-->"
}