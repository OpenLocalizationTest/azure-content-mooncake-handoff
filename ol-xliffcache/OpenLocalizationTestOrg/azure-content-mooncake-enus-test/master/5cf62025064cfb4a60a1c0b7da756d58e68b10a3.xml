{
  "nodes": [
    {
      "content": "如何将 Azure 媒体服务与 Java 配合使用",
      "pos": [
        28,
        53
      ]
    },
    {
      "content": "介绍如何使用 Azure 媒体服务执行编码、加密和流式处理资源等常见任务。",
      "pos": [
        73,
        110
      ]
    },
    {
      "content": "如何将媒体服务与 Java 结合使用",
      "pos": [
        343,
        361
      ]
    },
    {
      "pos": [
        472,
        514
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"setup-account\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>为媒体服务设置 Azure 帐户"
    },
    {
      "pos": [
        516,
        656
      ],
      "content": "若要设置你的媒体服务帐户，请使用 Azure 管理门户。请参阅主题<bpt id=\"p1\">[</bpt>如何创建媒体服务帐户<ept id=\"p1\">](/documentation/articles/media-services-create-account)</ept>。在 Azure 管理门户中创建帐户后，便可以设置你的计算机以进行媒体服务开发。"
    },
    {
      "pos": [
        660,
        695
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"setup-dev\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>完成设置以进行媒体服务开发"
    },
    {
      "content": "本部分介绍使用用于 Java 的媒体服务 SDK 进行媒体服务开发需要满足的一般性先决条件。",
      "pos": [
        697,
        743
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        748,
        752
      ]
    },
    {
      "pos": [
        758,
        859
      ],
      "content": "在新的或现有的 Azure 订阅中拥有一个媒体服务帐户。请参阅主题<bpt id=\"p1\">[</bpt>如何创建媒体服务帐户<ept id=\"p1\">](/documentation/articles/media-services-create-account)</ept>。"
    },
    {
      "pos": [
        864,
        911
      ],
      "content": "适用于 Java 的 Azure 库，可以从 <bpt id=\"p1\">[</bpt>Azure Java 开发人员中心<ept id=\"p1\">][]</ept>安装。"
    },
    {
      "pos": [
        915,
        953
      ],
      "content": "<ph id=\"ph1\">&lt;a if=\"connect\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何将媒体服务与 Java 结合使用"
    },
    {
      "content": "以下代码演示了如何创建一个资产、如何将媒体文件上载到该资产、如何使用任务运行某个作业以转换该资产，以及如何创建一个定位符用于流式传输你的视频。",
      "pos": [
        955,
        1026
      ]
    },
    {
      "pos": [
        1028,
        1131
      ],
      "content": "在使用此代码之前，需要设置一个媒体服务帐户。有关设置帐户的信息，请参阅<bpt id=\"p1\">[</bpt>如何创建媒体服务帐户<ept id=\"p1\">](/documentation/articles/media-services-create-account)</ept>。"
    },
    {
      "pos": [
        1133,
        1202
      ],
      "content": "将 <ph id=\"ph1\">`clientId`</ph> 和 <ph id=\"ph2\">`clientSecret`</ph> 变量替换为你的值。该代码还依赖于本地存储的文件。你需要提供自己的文件以供使用。"
    },
    {
      "content": "其他资源",
      "pos": [
        11734,
        11738
      ]
    },
    {
      "pos": [
        11740,
        11786
      ],
      "content": "有关媒体服务 Javadoc 文档，请参阅<bpt id=\"p1\">[</bpt>适用于 Java 的 Azure 库文档<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何将 Azure 媒体服务与 Java 配合使用\" \n    description=\"介绍如何使用 Azure 媒体服务执行编码、加密和流式处理资源等常见任务。\" \n    services=\"media-services\" \n    documentationCenter=\"java\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"  \n    wacn.date=\"03/21/2016\"/>\n\n#如何将媒体服务与 Java 结合使用\n\n[AZURE.INCLUDE [media-services-selector-get-started](../includes/media-services-selector-get-started.md)]\n\n##<a id=\"setup-account\"></a>为媒体服务设置 Azure 帐户\n\n若要设置你的媒体服务帐户，请使用 Azure 管理门户。请参阅主题[如何创建媒体服务帐户](/documentation/articles/media-services-create-account)。在 Azure 管理门户中创建帐户后，便可以设置你的计算机以进行媒体服务开发。\n\n##<a id=\"setup-dev\"></a>完成设置以进行媒体服务开发\n\n本部分介绍使用用于 Java 的媒体服务 SDK 进行媒体服务开发需要满足的一般性先决条件。\n\n###先决条件\n\n-   在新的或现有的 Azure 订阅中拥有一个媒体服务帐户。请参阅主题[如何创建媒体服务帐户](/documentation/articles/media-services-create-account)。\n-   适用于 Java 的 Azure 库，可以从 [Azure Java 开发人员中心][]安装。\n\n##<a if=\"connect\"></a>如何将媒体服务与 Java 结合使用\n\n以下代码演示了如何创建一个资产、如何将媒体文件上载到该资产、如何使用任务运行某个作业以转换该资产，以及如何创建一个定位符用于流式传输你的视频。\n\n在使用此代码之前，需要设置一个媒体服务帐户。有关设置帐户的信息，请参阅[如何创建媒体服务帐户](/documentation/articles/media-services-create-account)。\n\n将 `clientId` 和 `clientSecret` 变量替换为你的值。该代码还依赖于本地存储的文件。你需要提供自己的文件以供使用。\n    \n    import java.io.*;\n    import java.security.NoSuchAlgorithmException;\n    import java.util.EnumSet;\n    \n    import com.microsoft.windowsazure.Configuration;\n    import com.microsoft.windowsazure.exception.ServiceException;\n    import com.microsoft.windowsazure.services.media.MediaConfiguration;\n    import com.microsoft.windowsazure.services.media.MediaContract;\n    import com.microsoft.windowsazure.services.media.MediaService;\n    import com.microsoft.windowsazure.services.media.WritableBlobContainerContract;\n    import com.microsoft.windowsazure.services.media.models.AccessPolicy;\n    import com.microsoft.windowsazure.services.media.models.AccessPolicyInfo;\n    import com.microsoft.windowsazure.services.media.models.AccessPolicyPermission;\n    import com.microsoft.windowsazure.services.media.models.Asset;\n    import com.microsoft.windowsazure.services.media.models.AssetFile;\n    import com.microsoft.windowsazure.services.media.models.AssetFileInfo;\n    import com.microsoft.windowsazure.services.media.models.AssetInfo;\n    import com.microsoft.windowsazure.services.media.models.Job;\n    import com.microsoft.windowsazure.services.media.models.JobInfo;\n    import com.microsoft.windowsazure.services.media.models.JobState;\n    import com.microsoft.windowsazure.services.media.models.ListResult;\n    import com.microsoft.windowsazure.services.media.models.Locator;\n    import com.microsoft.windowsazure.services.media.models.LocatorInfo;\n    import com.microsoft.windowsazure.services.media.models.LocatorType;\n    import com.microsoft.windowsazure.services.media.models.MediaProcessor;\n    import com.microsoft.windowsazure.services.media.models.MediaProcessorInfo;\n    import com.microsoft.windowsazure.services.media.models.Task;\n    \n    \n    public class HelloMediaServices\n    {\n        // Media Services account credentials configuration\n        private static String mediaServiceUri = \"https://media.windows.cn/API/\";\n        private static String oAuthUri = \"https://wamsprodglobal001acs.accesscontrol.chinacloudapi.cn/v2/OAuth2-13\";\n        private static String clientId = \"account name\";\n        private static String clientSecret = \"account key\";\n        private static String scope = \"urn:WindowsAzureMediaServices\";\n        \n        // Encoder configuration\n        private static String preferedEncoder = \"Media Encoder Standard\";\n        private static String encodingPreset = \"H264 Multiple Bitrate 720p\";\n        \n        public static void main(String[] args)\n        {\n        \n            try {\n                // Set up the MediaContract object to call into the Media Services account\n                Configuration configuration = MediaConfiguration.configureWithOAuthAuthentication(\n                mediaServiceUri, oAuthUri, clientId, clientSecret, scope);\n                mediaService = MediaService.create(configuration);\n                \n                \n                // Upload a local file to an Asset\n                AssetInfo uploadAsset = uploadFileAndCreateAsset(\"BigBuckBunny.mp4\");\n                System.out.println(\"Uploaded Asset Id: \" + uploadAsset.getId());\n                \n                \n                // Transform the Asset\n                AssetInfo encodedAsset = encode(uploadAsset);\n                System.out.println(\"Encoded Asset Id: \" + encodedAsset.getId());\n                \n                // Create the Streaming Origin Locator\n                String url = getStreamingOriginLocator(encodedAsset);\n                \n                System.out.println(\"Origin Locator URL: \" + url);\n                System.out.println(\"Sample completed!\");\n            \n            } catch (ServiceException se) {\n                System.out.println(\"ServiceException encountered.\");\n                System.out.println(se.toString());\n            } catch (Exception e) {\n                System.out.println(\"Exception encountered.\");\n                System.out.println(e.toString());\n            }\n        \n        }\n    \n        private static AssetInfo uploadFileAndCreateAsset(String fileName)\n            throws ServiceException, FileNotFoundException, NoSuchAlgorithmException {\n\n            WritableBlobContainerContract uploader;\n            AssetInfo resultAsset;\n            AccessPolicyInfo uploadAccessPolicy;\n            LocatorInfo uploadLocator = null;\n            \n            // Create an Asset\n            resultAsset = mediaService.create(Asset.create().setName(fileName).setAlternateId(\"altId\"));\n            System.out.println(\"Created Asset \" + fileName);\n            \n            // Create an AccessPolicy that provides Write access for 15 minutes\n            uploadAccessPolicy = mediaService\n                .create(AccessPolicy.create(\"uploadAccessPolicy\", 15.0, EnumSet.of(AccessPolicyPermission.WRITE)));\n            \n            // Create a Locator using the AccessPolicy and Asset\n            uploadLocator = mediaService\n                .create(Locator.create(uploadAccessPolicy.getId(), resultAsset.getId(), LocatorType.SAS));\n            \n            // Create the Blob Writer using the Locator\n            uploader = mediaService.createBlobWriter(uploadLocator);\n            \n            File file = new File(\"BigBuckBunny.mp4\");//(ConnectToAMSView.class.getClassLoader().getResource(\"\").getPath() + fileName);\n            \n            // The local file that will be uploaded to your Media Services account\n            InputStream input = new FileInputStream(file);\n            \n            System.out.println(\"Uploading \" + fileName);\n            \n            // Upload the local file to the asset\n            uploader.createBlockBlob(fileName, input);\n            \n            // Inform Media Services about the uploaded files\n            mediaService.action(AssetFile.createFileInfos(resultAsset.getId()));\n            System.out.println(\"Uploaded Asset File \" + fileName);\n            \n            mediaService.delete(Locator.delete(uploadLocator.getId()));\n            mediaService.delete(AccessPolicy.delete(uploadAccessPolicy.getId()));\n            \n            return resultAsset;\n        }\n    \n        // Create a Job that contains a Task to transform the Asset\n        private static AssetInfo encode(AssetInfo assetToEncode)\n            throws ServiceException, InterruptedException {\n    \n            // Retrieve the list of Media Processors that match the name\n            ListResult<MediaProcessorInfo> mediaProcessors = mediaService\n                            .list(MediaProcessor.list().set(\"$filter\", String.format(\"Name eq '%s'\", preferedEncoder)));\n    \n            // Use the latest version of the Media Processor\n            MediaProcessorInfo mediaProcessor = null;\n            for (MediaProcessorInfo info : mediaProcessors) {\n                if (null == mediaProcessor || info.getVersion().compareTo(mediaProcessor.getVersion()) > 0) {\n                    mediaProcessor = info;\n                }\n            }\n    \n            System.out.println(\"Using Media Processor: \" + mediaProcessor.getName() + \" \" + mediaProcessor.getVersion());\n    \n            // Create a task with the specified Media Processor\n            String outputAssetName = String.format(\"%s as %s\", assetToEncode.getName(), encodingPreset);\n            String taskXml = \"<taskBody><inputAsset>JobInputAsset(0)</inputAsset>\"\n                    + \"<outputAsset assetCreationOptions=\"0\"\" // AssetCreationOptions.None\n                    + \" assetName=\"\" + outputAssetName + \"\">JobOutputAsset(0)</outputAsset></taskBody>\";\n    \n            Task.CreateBatchOperation task = Task.create(mediaProcessor.getId(), taskXml)\n                    .setConfiguration(encodingPreset).setName(\"Encoding\");\n    \n            // Create the Job; this automatically schedules and runs it.\n            Job.Creator jobCreator = Job.create()\n                    .setName(String.format(\"Encoding %s to %s\", assetToEncode.getName(), encodingPreset))\n                    .addInputMediaAsset(assetToEncode.getId()).setPriority(2).addTaskCreator(task);\n            JobInfo job = mediaService.create(jobCreator);\n            \n            String jobId = job.getId();\n            System.out.println(\"Created Job with Id: \" + jobId);\n    \n            // Check to see if the Job has completed\n            checkJobStatus(jobId);\n            // Done with the Job\n    \n            // Retrieve the output Asset\n            ListResult<AssetInfo> outputAssets = mediaService.list(Asset.list(job.getOutputAssetsLink()));\n            return outputAssets.get(0);\n        }\n        \n    \n        public static String getStreamingOriginLocator(AssetInfo asset) throws ServiceException {\n            // Get the .ISM AssetFile\n            ListResult<AssetFileInfo> assetFiles = mediaService.list(AssetFile.list(asset.getAssetFilesLink()));\n            AssetFileInfo streamingAssetFile = null;\n            for (AssetFileInfo file : assetFiles) {\n                if (file.getName().toLowerCase().endsWith(\".ism\")) {\n                    streamingAssetFile = file;\n                    break;\n                }\n            }\n    \n            AccessPolicyInfo originAccessPolicy;\n            LocatorInfo originLocator = null;\n    \n            // Create a 30-day readonly AccessPolicy\n            double durationInMinutes = 60 * 24 * 30;\n            originAccessPolicy = mediaService.create(\n                    AccessPolicy.create(\"Streaming policy\", durationInMinutes, EnumSet.of(AccessPolicyPermission.READ)));\n    \n            // Create a Locator using the AccessPolicy and Asset\n            originLocator = mediaService\n                    .create(Locator.create(originAccessPolicy.getId(), asset.getId(), LocatorType.OnDemandOrigin));\n    \n            // Create a Smooth Streaming base URL\n            return originLocator.getPath() + streamingAssetFile.getName() + \"/manifest\";\n        }\n    \n        private static void checkJobStatus(String jobId) throws InterruptedException, ServiceException {\n            boolean done = false;\n            JobState jobState = null;\n            while (!done) {\n                // Sleep for 5 seconds\n                Thread.sleep(5000);\n                \n                // Query the updated Job state\n                jobState = mediaService.get(Job.get(jobId)).getState();\n                System.out.println(\"Job state: \" + jobState);\n    \n                if (jobState == JobState.Finished || jobState == JobState.Canceled || jobState == JobState.Error) {\n                    done = true;\n                }\n            }\n        }\n    \n    }\n\n\n\n\n##其他资源\n\n有关媒体服务 Javadoc 文档，请参阅[适用于 Java 的 Azure 库文档][]。\n\n<!-- URLs. -->\n\n  [Azure Java 开发人员中心]: /develop/java/\n  [适用于 Java 的 Azure 库文档]: http://azure.github.io/azure-sdk-for-java/\n  [Media Services Client Development]: http://msdn.microsoft.com/zh-cn/library/azure/dn223283.aspx\n\n \n\n<!---HONumber=Mooncake_0314_2016-->"
}