{
  "nodes": [
    {
      "content": "从 Web 应用程序使用 Azure 密钥保管库 | Azure",
      "pos": [
        28,
        60
      ]
    },
    {
      "content": "本教程帮助你了解如何从 Web 应用程序使用 Azure 密钥保管库。",
      "pos": [
        80,
        115
      ]
    },
    {
      "content": "从 Web 应用程序使用 Azure 密钥保管库",
      "pos": [
        343,
        367
      ]
    },
    {
      "content": "介绍",
      "pos": [
        374,
        376
      ]
    },
    {
      "content": "本教程帮助你了解如何从 Azure 中的 Web 应用程序使用 Azure 密钥保管库。其中将会引导你访问 Azure 密钥保管库中的机密，以便可以在 Web 应用程序中使用该机密。",
      "pos": [
        379,
        470
      ]
    },
    {
      "pos": [
        472,
        488
      ],
      "content": "<bpt id=\"p1\">**</bpt>估计完成时间：<ept id=\"p1\">**</ept>15 分钟"
    },
    {
      "pos": [
        491,
        574
      ],
      "content": "有关 Azure 密钥保管库的概述信息，请参阅<bpt id=\"p1\">[</bpt>什么是 Azure 密钥保管库？<ept id=\"p1\">](/documentation/articles/key-vault-whatis)</ept>"
    },
    {
      "content": "先决条件",
      "pos": [
        579,
        583
      ]
    },
    {
      "content": "若要完成本教程，你必须准备好以下各项：",
      "pos": [
        586,
        605
      ]
    },
    {
      "content": "Azure 密钥保管库中的机密的 URI",
      "pos": [
        609,
        629
      ]
    },
    {
      "content": "已在 Azure Active Directory 中注册的、有权访问你的密钥保管库的 Web 应用程序的客户端 ID 和客户端密码",
      "pos": [
        632,
        698
      ]
    },
    {
      "content": "Web 应用程序。我们将演示针对 Azure 中作为 Web 应用程序部署的 ASP.NET MVC 应用程序的步骤。",
      "pos": [
        701,
        760
      ]
    },
    {
      "pos": [
        765,
        896
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你必须已完成 <bpt id=\"p1\">[</bpt>Azure 密钥保管库入门<ept id=\"p1\">](/documentation/articles/key-vault-get-started)</ept>中列出的适用于本教程的步骤，以便获取 Web 应用程序的机密、客户端 ID 和客户端密钥的 URI。"
    },
    {
      "content": "要访问密钥保管库的 Web 应用程序已在 Azure Active Directory 中注册，因此有权访问你的密钥保管库。如果这不是这样，请返回入门教程中的“注册应用程序”，并重复列出的步骤。",
      "pos": [
        898,
        995
      ]
    },
    {
      "pos": [
        997,
        1125
      ],
      "content": "本教程面向 Web 开发人员，他们已经了解有关在 Azure 上创建 Web 应用程序的基本知识。有关 Azure Web Sites 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Web Sites 概述<ept id=\"p1\">](/documentation/services/web-sites)</ept>。"
    },
    {
      "pos": [
        1132,
        1163
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"packages\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>添加 NuGet 包"
    },
    {
      "content": "需要在 Web 应用程序上安装三个包。",
      "pos": [
        1167,
        1186
      ]
    },
    {
      "content": "Active Directory 身份验证库 - 包含用来与 Azure Active Directory 交互以及管理用户标识的方法",
      "pos": [
        1190,
        1257
      ]
    },
    {
      "content": "Azure 密钥保管库库 - 包含用来与 Azure 密钥保管库交互的方法",
      "pos": [
        1260,
        1297
      ]
    },
    {
      "content": "可以在 Package Manager Console 中使用 Install-Package 命令安装所有这三个包。",
      "pos": [
        1300,
        1359
      ]
    },
    {
      "pos": [
        1564,
        1599
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"webconfig\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>修改 Web.Config"
    },
    {
      "content": "需要按如下所示将三个应用程序设置添加到 web.config 文件。",
      "pos": [
        1603,
        1637
      ]
    },
    {
      "content": "如果你不打算将应用程序作作为 Azure Web 应用程序托管，则应在 web.config 中添加实际的客户端 Id、客户端密钥和机密 URI 值。否则，请将这些虚构值，因为我们将在 Azure 门户中添加实际值以提高安全级别。",
      "pos": [
        1961,
        2076
      ]
    },
    {
      "pos": [
        2082,
        2114
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"gettoken\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>添加方法以获取访问令牌"
    },
    {
      "content": "若要使用密钥保管库 API，你需要一个访问令牌。密钥保管库客户端将处理对密钥保管库 API 的调用，但你需要为该 API 提供一个用于获取访问令牌的函数。",
      "pos": [
        2118,
        2195
      ]
    },
    {
      "content": "以下代码可从 Azure Active Directory 获取访问令牌。可将此代码添加在应用程序中的任意位置。我想要添加一个 Utils 或 EncryptionHelper 类。",
      "pos": [
        2197,
        2288
      ]
    },
    {
      "pos": [
        3231,
        3441
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>使用客户端 ID 和客户端密码是对 Azure AD 应用程序进行身份验证的最简单方法。并且在 web 应用程序中使用它可以实现职责分离，并更好地控制密钥管理。但它不依赖于将客户端密码放入配置设置中，对于某些人来说这可能就像将要保护的机密放入配置设置中一样具有风险。有关如何使用客户端 ID 和证书（而不是客户端 ID 和客户端密码）对 Azure AD 应用程序进行身份验证的讨论，请参阅下文。"
    },
    {
      "pos": [
        3448,
        3494
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"appstart\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>在 Application Start 中检索机密"
    },
    {
      "content": "现在，我们需要添加代码来调用密钥保管库 API 并检索机密。以下代码可添加到任何位置，前提是在使用之前调用它。我已将此代码放在 Global.asax 中的 Application Start 事件内，这样，在启动应用程序时，该代码将运行一次，并使机密可用于应用程序。",
      "pos": [
        3498,
        3632
      ]
    },
    {
      "content": "使用证书（而不是客户端密码）进行身份验证",
      "pos": [
        4155,
        4175
      ]
    },
    {
      "content": "另一种对 Azure AD 应用程序进行身份验证的方法是使用客户端 ID 和证书（而不是客户端 ID 和客户端密码）。下面是在 Azure Web 应用中使用证书的步骤：",
      "pos": [
        4177,
        4262
      ]
    },
    {
      "content": "获取或创建证书",
      "pos": [
        4267,
        4274
      ]
    },
    {
      "content": "将证书与 Azure AD 应用程序相关联",
      "pos": [
        4278,
        4299
      ]
    },
    {
      "content": "在 Web 应用中添加代码以使用证书",
      "pos": [
        4303,
        4321
      ]
    },
    {
      "content": "将证书添加到 Web 应用",
      "pos": [
        4325,
        4338
      ]
    },
    {
      "pos": [
        4341,
        4419
      ],
      "content": "<bpt id=\"p1\">**</bpt>获取或创建证书<ept id=\"p1\">**</ept> 出于我们的目的，我们将生成测试证书。下面是几个可在开发人员命令提示符下使用以创建证书的命令。将目录更改为要在其中创建证书文件的位置。"
    },
    {
      "content": "记下 .pfx 的结束日期和密码（在此示例中为：07/31/2016 和 test123）。稍后你将需要它们。",
      "pos": [
        4585,
        4640
      ]
    },
    {
      "pos": [
        4642,
        4729
      ],
      "content": "有关创建测试证书的详细信息，请参阅<bpt id=\"p1\">[</bpt>如何：创建自己的测试证书<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/ff699202.aspx)</ept>"
    },
    {
      "pos": [
        4732,
        4842
      ],
      "content": "<bpt id=\"p1\">**</bpt>将证书与 Azure AD 应用程序相关联<ept id=\"p1\">**</ept> 既然你拥有一个证书，你需要将其与 Azure AD 应用程序相关联。但当前 Azure 管理门户不支持此操作。你需要改用 Powershell。以下是你需要运行的命令："
    },
    {
      "content": "运行这些命令后，你可以在 Azure AD 中看到该应用程序。如果你最初未看到该应用程序，可搜索“我的公司拥有的应用程序”，而不是“我的公司使用的应用程序”。",
      "pos": [
        5839,
        5918
      ]
    },
    {
      "pos": [
        5920,
        6049
      ],
      "content": "若要了解有关 Azure AD 应用程序对象和 ServicePrincipal 对象的详细信息，请参阅<bpt id=\"p1\">[</bpt>应用程序对象和服务主体对象<ept id=\"p1\">](/documentation/articles/active-directory-application-objects)</ept>"
    },
    {
      "pos": [
        6053,
        6111
      ],
      "content": "<bpt id=\"p1\">**</bpt>在 Web 应用中添加代码以使用证书<ept id=\"p1\">**</ept> 现在，我们将在 Web 应用中添加代码以访问证书并使用它进行身份验证。"
    },
    {
      "content": "首先是用于访问证书的代码。",
      "pos": [
        6113,
        6126
      ]
    },
    {
      "content": "请注意，StoreLocation 是 CurrentUser，而不是 LocalMachine。并且，我们为 Find 方法提供“false”，因为我们使用的是测试证书。",
      "pos": [
        6867,
        6953
      ]
    },
    {
      "content": "其次是使用 CertificateHelper 并创建 ClientAssertionCertificate 的代码，这是身份验证所需的。",
      "pos": [
        6956,
        7025
      ]
    },
    {
      "content": "以下是新代码，用于获取访问令牌。这将替换上面的 GetToken 方法。为方便起见，我为它起了不同名称。",
      "pos": [
        7412,
        7464
      ]
    },
    {
      "content": "为了便于使用，我已将所有这些代码放到我的 Web 应用项目的 Utils 类中。",
      "pos": [
        7780,
        7820
      ]
    },
    {
      "content": "最后的代码更改是在 Application\\_Start 方法中。首先，我们需要调用 GetCert() 方法以加载 ClientAssertionCertificate。然后，我们将更改在创建新的 KeyVaultClient 时提供的回调方法。请注意，这将替换上面使用的代码。",
      "pos": [
        7822,
        7962
      ]
    },
    {
      "pos": [
        8085,
        8252
      ],
      "content": "<bpt id=\"p1\">**</bpt>将证书添加到 Web 应用<ept id=\"p1\">**</ept> 将证书添加到 Web 应用是一个简单的分为两步的过程。首先，转到 Azure 门户并导航到你的 Web 应用。在你的 Web 应用的“设置”边栏选项卡中，单击“自定义域和 SSL”所对应的条目。在打开的边栏选项卡中，你将能够上载上面创建的证书 KVWebApp.pfx，请确保记住 pfx 的密码。"
    },
    {
      "content": "你需要执行的最后一项操作是将应用程序设置添加到 Web 应用中，该设置名为 WEBSITE\\_LOAD\\_CERTIFICATES，值为 *。这将确保加载所有证书。如果你只想加载已上载的证书，则可以输入这些证书的指纹的逗号分隔列表。",
      "pos": [
        8255,
        8371
      ]
    },
    {
      "pos": [
        8373,
        8522
      ],
      "content": "若要了解有关将证书添加到 Web 应用的详细信息，请参阅<bpt id=\"p1\">[</bpt>在 Azure Web 应用应用程序中使用证书<ept id=\"p1\">](https://azure.microsoft.com/blog/2014/10/27/using-certificates-in-azure-websites-applications/)</ept>"
    },
    {
      "pos": [
        8529,
        8550
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"next\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "pos": [
        8556,
        8657
      ],
      "content": "有关编程参考，请参阅 <bpt id=\"p1\">[</bpt>Azure 密钥保管库 C# 客户端 API 参考<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn903628.aspx)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"从 Web 应用程序使用 Azure 密钥保管库 | Azure\" \n    description=\"本教程帮助你了解如何从 Web 应用程序使用 Azure 密钥保管库。\" \n    services=\"key-vault\" \n    documentationCenter=\"\" \n    authors=\"adamhurwitz\"\n    manager=\"\"\n    tags=\"azure-resource-manager\"/>\n\n<tags \n    ms.service=\"key-vault\" \n    ms.date=\"09/16/2015\" \n    wacn.date=\"01/21/2016\"/>\n\n# 从 Web 应用程序使用 Azure 密钥保管库 #\n\n## 介绍  \n本教程帮助你了解如何从 Azure 中的 Web 应用程序使用 Azure 密钥保管库。其中将会引导你访问 Azure 密钥保管库中的机密，以便可以在 Web 应用程序中使用该机密。\n\n**估计完成时间：**15 分钟\n\n\n有关 Azure 密钥保管库的概述信息，请参阅[什么是 Azure 密钥保管库？](/documentation/articles/key-vault-whatis)\n\n## 先决条件 \n\n若要完成本教程，你必须准备好以下各项：\n\n- Azure 密钥保管库中的机密的 URI\n- 已在 Azure Active Directory 中注册的、有权访问你的密钥保管库的 Web 应用程序的客户端 ID 和客户端密码\n- Web 应用程序。我们将演示针对 Azure 中作为 Web 应用程序部署的 ASP.NET MVC 应用程序的步骤。 \n\n> [AZURE.NOTE]你必须已完成 [Azure 密钥保管库入门](/documentation/articles/key-vault-get-started)中列出的适用于本教程的步骤，以便获取 Web 应用程序的机密、客户端 ID 和客户端密钥的 URI。\n\n要访问密钥保管库的 Web 应用程序已在 Azure Active Directory 中注册，因此有权访问你的密钥保管库。如果这不是这样，请返回入门教程中的“注册应用程序”，并重复列出的步骤。\n\n本教程面向 Web 开发人员，他们已经了解有关在 Azure 上创建 Web 应用程序的基本知识。有关 Azure Web Sites 的详细信息，请参阅 [Web Sites 概述](/documentation/services/web-sites)。\n\n\n\n## <a id=\"packages\"></a>添加 NuGet 包 ##\n需要在 Web 应用程序上安装三个包。\n\n- Active Directory 身份验证库 - 包含用来与 Azure Active Directory 交互以及管理用户标识的方法\n- Azure 密钥保管库库 - 包含用来与 Azure 密钥保管库交互的方法\n\n\n可以在 Package Manager Console 中使用 Install-Package 命令安装所有这三个包。\n\n    // this is currently the latest stable version of ADAL\n    Install-Package Microsoft.IdentityModel.Clients.ActiveDirectory -Version 2.16.204221202\n\n    Install-Package Microsoft.Azure.KeyVault \n\n\n## <a id=\"webconfig\"></a>修改 Web.Config ##\n需要按如下所示将三个应用程序设置添加到 web.config 文件。\n\n    <!-- ClientId and ClientSecret refer to the web application registration with Azure Active Directory -->\n    <add key=\"ClientId\" value=\"clientid\" />\n    <add key=\"ClientSecret\" value=\"clientsecret\" />\n\n    <!-- SecretUri is the URI for the secret in Azure Key Vault -->\n    <add key=\"SecretUri\" value=\"secreturi\" />\n\n\n如果你不打算将应用程序作作为 Azure Web 应用程序托管，则应在 web.config 中添加实际的客户端 Id、客户端密钥和机密 URI 值。否则，请将这些虚构值，因为我们将在 Azure 门户中添加实际值以提高安全级别。\n\n\n## <a id=\"gettoken\"></a>添加方法以获取访问令牌 ##\n若要使用密钥保管库 API，你需要一个访问令牌。密钥保管库客户端将处理对密钥保管库 API 的调用，但你需要为该 API 提供一个用于获取访问令牌的函数。\n\n以下代码可从 Azure Active Directory 获取访问令牌。可将此代码添加在应用程序中的任意位置。我想要添加一个 Utils 或 EncryptionHelper 类。\n\n    //add these using statements\n    using Microsoft.IdentityModel.Clients.ActiveDirectory;\n    using System.Web.Configuration;\n    \n    //this is an optional property to hold the secret after it is retrieved\n    public static string EncryptSecret { get; set; }\n\n    //the method that will be provided to the KeyVaultClient\n    public async static Task<string> GetToken(string authority, string resource, string scope)\n    {\n        var authContext = new AuthenticationContext(authority);\n        ClientCredential clientCred = new ClientCredential(WebConfigurationManager.AppSettings[\"ClientId\"],\n                    WebConfigurationManager.AppSettings[\"ClientSecret\"]);\n        AuthenticationResult result = await authContext.AcquireTokenAsync(resource, clientCred);\n        \n        if (result == null)\n            throw new InvalidOperationException(\"Failed to obtain the JWT token\");\n        \n        return result.AccessToken;\n    }\n\n> [AZURE.NOTE]使用客户端 ID 和客户端密码是对 Azure AD 应用程序进行身份验证的最简单方法。并且在 web 应用程序中使用它可以实现职责分离，并更好地控制密钥管理。但它不依赖于将客户端密码放入配置设置中，对于某些人来说这可能就像将要保护的机密放入配置设置中一样具有风险。有关如何使用客户端 ID 和证书（而不是客户端 ID 和客户端密码）对 Azure AD 应用程序进行身份验证的讨论，请参阅下文。\n\n\n\n## <a id=\"appstart\"></a>在 Application Start 中检索机密 ##\n现在，我们需要添加代码来调用密钥保管库 API 并检索机密。以下代码可添加到任何位置，前提是在使用之前调用它。我已将此代码放在 Global.asax 中的 Application Start 事件内，这样，在启动应用程序时，该代码将运行一次，并使机密可用于应用程序。\n\n    //add these using statements\n    using Microsoft.Azure.KeyVault;\n    using System.Web.Configuration;\n\n    // I put my GetToken method in a Utils class. Change for wherever you placed your method. \n    var kv = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(Utils.GetToken));\n\n    var sec = kv.GetSecretAsync(WebConfigurationManager.AppSettings[\"SecretUri\"]).Result.Value;\n    \n    //I put a variable in a Utils class to hold the secret for general  application use. \n    Utils.EncryptSecret = sec;\n\n\n## 使用证书（而不是客户端密码）进行身份验证 \n另一种对 Azure AD 应用程序进行身份验证的方法是使用客户端 ID 和证书（而不是客户端 ID 和客户端密码）。下面是在 Azure Web 应用中使用证书的步骤：\n\n1. 获取或创建证书\n2. 将证书与 Azure AD 应用程序相关联\n3. 在 Web 应用中添加代码以使用证书\n4. 将证书添加到 Web 应用\n\n\n**获取或创建证书** 出于我们的目的，我们将生成测试证书。下面是几个可在开发人员命令提示符下使用以创建证书的命令。将目录更改为要在其中创建证书文件的位置。\n\n    makecert -sv mykey.pvk -n \"cn=KVWebApp\" KVWebApp.cer -b 07/31/2015 -e 07/31/2016 -r\n    pvk2pfx -pvk mykey.pvk -spc KVWebApp.cer -pfx KVWebApp.pfx -po test123\n\n记下 .pfx 的结束日期和密码（在此示例中为：07/31/2016 和 test123）。稍后你将需要它们。\n\n有关创建测试证书的详细信息，请参阅[如何：创建自己的测试证书](https://msdn.microsoft.com/zh-cn/library/ff699202.aspx)\n\n\n**将证书与 Azure AD 应用程序相关联** 既然你拥有一个证书，你需要将其与 Azure AD 应用程序相关联。但当前 Azure 管理门户不支持此操作。你需要改用 Powershell。以下是你需要运行的命令：\n\n    $x509 = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2\n    \n    PS C:\\> $x509.Import(\"C:\\data\\KVWebApp.cer\")\n    \n    PS C:\\> $credValue = [System.Convert]::ToBase64String($x509.GetRawCertData())\n    \n    PS C:\\> $now = [System.DateTime]::Now\n    \n    # this is where the end date from the cert above is used\n    PS C:\\> $yearfromnow = [System.DateTime]::Parse(\"2016-07-31\") \n    \n    PS C:\\> $adapp = New-AzureADApplication -DisplayName \"KVWebApp\" -HomePage \"http://kvwebapp\" -IdentifierUris \"http://kvwebapp\" -KeyValue $credValue -KeyType \"AsymmetricX509Cert\" -KeyUsage \"Verify\" -StartDate $now -EndDate $yearfromnow\n    \n    PS C:\\> $sp = New-AzureADServicePrincipal -ApplicationId $adapp.ApplicationId\n    \n    PS C:\\> Set-AzureKeyVaultAccessPolicy -VaultName 'contosokv' -ServicePrincipalName $sp.ServicePrincipalName -PermissionsToKeys all -ResourceGroupName 'contosorg'\n    \n    # get the thumbprint to use in your app settings\n    PS C:\\>$x509.Thumbprint\n\n运行这些命令后，你可以在 Azure AD 中看到该应用程序。如果你最初未看到该应用程序，可搜索“我的公司拥有的应用程序”，而不是“我的公司使用的应用程序”。\n\n若要了解有关 Azure AD 应用程序对象和 ServicePrincipal 对象的详细信息，请参阅[应用程序对象和服务主体对象](/documentation/articles/active-directory-application-objects)\n\n\n\n**在 Web 应用中添加代码以使用证书** 现在，我们将在 Web 应用中添加代码以访问证书并使用它进行身份验证。\n\n首先是用于访问证书的代码。\n\n    public static class CertificateHelper\n    {\n        public static X509Certificate2 FindCertificateByThumbprint(string findValue)\n        {\n            X509Store store = new X509Store(StoreName.My, StoreLocation.CurrentUser);\n            try\n            {\n                store.Open(OpenFlags.ReadOnly);\n                X509Certificate2Collection col = store.Certificates.Find(X509FindType.FindByThumbprint, \n                    findValue, false); // Don't validate certs, since the test root isn't installed.\n                if (col == null || col.Count == 0)\n                    return null;\n                return col[0];\n            }\n            finally\n            {\n                store.Close();\n            }\n        }\n    }\n\n\n请注意，StoreLocation 是 CurrentUser，而不是 LocalMachine。并且，我们为 Find 方法提供“false”，因为我们使用的是测试证书。\n\n\n其次是使用 CertificateHelper 并创建 ClientAssertionCertificate 的代码，这是身份验证所需的。\n\n    public static ClientAssertionCertificate AssertionCert { get; set; }\n\n    public static void GetCert()\n    {\n        var clientAssertionCertPfx = CertificateHelper.FindCertificateByThumbprint(WebConfigurationManager.AppSettings[\"thumbprint\"]);\n        AssertionCert = new ClientAssertionCertificate(WebConfigurationManager.AppSettings[\"clientid\"], clientAssertionCertPfx);\n    }\n\n\n以下是新代码，用于获取访问令牌。这将替换上面的 GetToken 方法。为方便起见，我为它起了不同名称。\n\n    public static async Task<string> GetAccessToken(string authority, string resource, string scope)\n    {\n        var context = new AuthenticationContext(authority, TokenCache.DefaultShared);\n        var result = await context.AcquireTokenAsync(resource, AssertionCert);\n        return result.AccessToken;\n    }\n\n为了便于使用，我已将所有这些代码放到我的 Web 应用项目的 Utils 类中。\n\n最后的代码更改是在 Application\\_Start 方法中。首先，我们需要调用 GetCert() 方法以加载 ClientAssertionCertificate。然后，我们将更改在创建新的 KeyVaultClient 时提供的回调方法。请注意，这将替换上面使用的代码。\n\n    Utils.GetCert();\n    var kv = new KeyVaultClient(new KeyVaultClient.AuthenticationCallback(Utils.GetAccessToken));\n\n\n**将证书添加到 Web 应用** 将证书添加到 Web 应用是一个简单的分为两步的过程。首先，转到 Azure 门户并导航到你的 Web 应用。在你的 Web 应用的“设置”边栏选项卡中，单击“自定义域和 SSL”所对应的条目。在打开的边栏选项卡中，你将能够上载上面创建的证书 KVWebApp.pfx，请确保记住 pfx 的密码。\n\n\n你需要执行的最后一项操作是将应用程序设置添加到 Web 应用中，该设置名为 WEBSITE\\_LOAD\\_CERTIFICATES，值为 *。这将确保加载所有证书。如果你只想加载已上载的证书，则可以输入这些证书的指纹的逗号分隔列表。\n\n若要了解有关将证书添加到 Web 应用的详细信息，请参阅[在 Azure Web 应用应用程序中使用证书](https://azure.microsoft.com/blog/2014/10/27/using-certificates-in-azure-websites-applications/)\n\n\n\n## <a id=\"next\"></a>后续步骤 ##\n\n\n有关编程参考，请参阅 [Azure 密钥保管库 C# 客户端 API 参考](https://msdn.microsoft.com/zh-cn/library/azure/dn903628.aspx)。\n\n\n<!--Image references-->\n[1]: ./media/key-vault-use-from-web-application/PortalAppSettings.png\n[2]: ./media/key-vault-use-from-web-application/PortalAddCertificate.png\n \n\n<!---HONumber=Mooncake_1207_2015-->"
}