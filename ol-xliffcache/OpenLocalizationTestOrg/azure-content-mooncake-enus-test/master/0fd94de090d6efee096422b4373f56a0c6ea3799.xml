{
  "nodes": [
    {
      "content": "通知中心本地化的突发新闻教程 - iOS",
      "pos": [
        27,
        47
      ]
    },
    {
      "content": "了解如何使用 Azure 服务总线通知中心发送本地化的突发新闻通知 (iOS)。",
      "pos": [
        66,
        106
      ]
    },
    {
      "content": "使用通知中心将本地化的突发新闻发送到 iOS 设备",
      "pos": [
        331,
        356
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        360,
        376
      ]
    },
    {
      "content": "Windows Store C",
      "pos": [
        380,
        395
      ]
    },
    {
      "content": "iOS",
      "pos": [
        494,
        497
      ]
    },
    {
      "content": "概述",
      "pos": [
        579,
        581
      ]
    },
    {
      "pos": [
        583,
        773
      ],
      "content": "本主题演示如何使用 Azure 通知中心的<bpt id=\"p1\">[</bpt>模板<ept id=\"p1\">](/documentation/articles/notification-hubs-templates)</ept>功能广播已按语言和设备本地化的突发新闻通知。在本教程中，你从在<bpt id=\"p2\">[</bpt><ept id=\"p2\">使用通知中心发送突发新闻]</ept>中创建的 iOS 应用开始操作。完成时，你将可以注册感兴趣的突发新闻类别，指定要接收通知的语言并仅接收采用该语言的这些类别的推送通知。"
    },
    {
      "content": "此方案包含两个部分：",
      "pos": [
        776,
        786
      ]
    },
    {
      "content": "iOS 应用程序允许客户端设备指定一种语言并订阅不同的突发新闻类别；",
      "pos": [
        790,
        824
      ]
    },
    {
      "pos": [
        828,
        864
      ],
      "content": "后端使用 Azure 通知中心的<bpt id=\"p1\">**</bpt>标记<ept id=\"p1\">**</ept>和<bpt id=\"p2\">**</bpt>模板<ept id=\"p2\">**</ept>功能广播通知。"
    },
    {
      "content": "先决条件",
      "pos": [
        870,
        874
      ]
    },
    {
      "pos": [
        879,
        929
      ],
      "content": "你必须已完成学习<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心发送突发新闻]</ept>教程并具有可用的代码，因为本教程直接围绕该代码展开论述。"
    },
    {
      "content": "可以选用 Visual Studio 2012 或更高版本。",
      "pos": [
        931,
        961
      ]
    },
    {
      "content": "模板概念",
      "pos": [
        967,
        971
      ]
    },
    {
      "content": "在<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心发送突发新闻]</ept>中，你构建了一个使用<bpt id=\"p2\">**</bpt>标记<ept id=\"p2\">**</ept>订阅不同新闻类别通知的应用程序。",
      "pos": [
        973,
        1020
      ]
    },
    {
      "content": "但是，很多应用程序针对多个市场，需要本地化。这意味着通知内容本身必须本地化且传递到正确的设备组。",
      "pos": [
        1021,
        1069
      ]
    },
    {
      "content": "在本主题中，我们将演示如何使用通知中心的<bpt id=\"p1\">**</bpt>模板<ept id=\"p1\">**</ept>功能轻松传递本地化的突发新闻通知。",
      "pos": [
        1070,
        1113
      ]
    },
    {
      "content": "注意：发送本地化的通知的一种方式是创建每个标签的多个版本。例如，要支持英语、法语和汉语，我们需要三种不同的标签用于世界新闻：“world\\_en”、“world\\_fr”和“world\\_ch”。我们然后必须将世界新闻的本地化版本分别发送到这些标签。在本主题中，我们使用模板来避免增生标签和发送多个消息的要求。",
      "pos": [
        1115,
        1270
      ]
    },
    {
      "content": "在较高级别上，模板是指定特定设备应如何接收通知的一种方法。模板通过引用作为你应用程序后端所发消息的一部分的属性，指定确切的负载格式。在我们的示例中，我们将发送包含所有支持的语言的区域设置未知的消息：",
      "pos": [
        1272,
        1371
      ]
    },
    {
      "content": "然后我们将确保设备注册到引用正确属性的模板。例如，要注册法语新闻的 iOS 应用程序将注册以下模板：",
      "pos": [
        1478,
        1528
      ]
    },
    {
      "pos": [
        1603,
        1685
      ],
      "content": "模板是很强大的功能，你可以在<bpt id=\"p1\">[</bpt>模板<ept id=\"p1\">](/documentation/articles/notification-hubs-templates)</ept>一文中了解其更多信息。"
    },
    {
      "content": "应用程序用户界面",
      "pos": [
        1689,
        1697
      ]
    },
    {
      "pos": [
        1699,
        1753
      ],
      "content": "我们现在将修改你在<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心发送突发新闻]</ept>主题中创建的“突发新闻”应用，以使用模板发送本地化的突发新闻。"
    },
    {
      "content": "在 MainStoryboard\\_iPhone.storyboard 中，添加使用我们支持的三种语言的分段控件：英语、法语和汉语。",
      "pos": [
        1756,
        1822
      ]
    },
    {
      "content": "然后确保在 ViewController.h 中添加 IBOutlet，如下所示：",
      "pos": [
        1833,
        1874
      ]
    },
    {
      "content": "构建 iOS 应用程序",
      "pos": [
        1887,
        1898
      ]
    },
    {
      "pos": [
        1904,
        1973
      ],
      "content": "在 Notification.h 中，添加 <bpt id=\"p1\">*</bpt>retrieveLocale<ept id=\"p1\">*</ept> 方法，然后修改存储区和 subscribe 方法，如下所示："
    },
    {
      "pos": [
        2328,
        2406
      ],
      "content": "在 Notification.m 中，通过添加区域设置参数并将它存储在用户默认值中，修改 <bpt id=\"p1\">*</bpt>storeCategoriesAndSubscribe<ept id=\"p1\">*</ept> 方法："
    },
    {
      "pos": [
        2947,
        2975
      ],
      "content": "然后修改 <bpt id=\"p1\">*</bpt>subscribe<ept id=\"p1\">*</ept> 方法以包括该区域设置："
    },
    {
      "pos": [
        4013,
        4181
      ],
      "content": "请注意，我们现在使用的是 <bpt id=\"p1\">*</bpt>registerTemplateWithDeviceToken<ept id=\"p1\">*</ept> 方法而非 <bpt id=\"p2\">*</bpt>registerNativeWithDeviceToken<ept id=\"p2\">*</ept>。当我们注册一个模板时，必须提供 json 模板，还要指定其名称（因为我们的应用程序可能要注册不同的模板）。确保将类别作为标记注册，因为我们要确保接收有关这些新闻的通知。"
    },
    {
      "content": "添加一个方法以从用户默认设置中检索区域设置：",
      "pos": [
        4187,
        4209
      ]
    },
    {
      "pos": [
        4475,
        4581
      ],
      "content": "现在我们修改了 Notifications 类，必须确保 ViewController 使用新的 UISegmentControl。在 <bpt id=\"p1\">*</bpt>viewDidLoad<ept id=\"p1\">*</ept> 方法中添加以下行，以确保显示当前选择的区域设置："
    },
    {
      "pos": [
        4671,
        4732
      ],
      "content": "然后，在 <bpt id=\"p1\">*</bpt>subscribe<ept id=\"p1\">*</ept> 方法中，将对 <bpt id=\"p2\">*</bpt>storeCategoriesAndSubscribe<ept id=\"p2\">*</ept> 的调用更改为："
    },
    {
      "pos": [
        5326,
        5452
      ],
      "content": "最后，你必须在 AppDelegate.m 中更新 <bpt id=\"p1\">*</bpt>didRegisterForRemoteNotificationsWithDeviceToken<ept id=\"p1\">*</ept> 方法，以便在应用启动时正确刷新你的注册信息。将对通知的 <bpt id=\"p2\">*</bpt>subscribe<ept id=\"p2\">*</ept> 方法的调用更改为："
    },
    {
      "content": "（可选）通过 .NET 控制台应用发送本地化的模板通知。",
      "pos": [
        5825,
        5853
      ]
    },
    {
      "content": "（可选）通过设备发送本地化的模板通知",
      "pos": [
        5968,
        5986
      ]
    },
    {
      "pos": [
        5988,
        6097
      ],
      "content": "如果你无权访问 Visual Studio，或者只是想要试一试直接从设备上的应用发送本地化的模板通知。那么，你只需将本地化的模板参数添加到你在前一教程中定义的 <ph id=\"ph1\">`SendNotificationRESTAPI`</ph> 方法。"
    },
    {
      "content": "后续步骤",
      "pos": [
        9294,
        9298
      ]
    },
    {
      "content": "有关使用模板的详细信息，请参阅：",
      "pos": [
        9300,
        9316
      ]
    },
    {
      "content": "使用通知中心通知用户：ASP.NET",
      "pos": [
        9321,
        9339
      ]
    },
    {
      "content": "使用通知中心通知用户：移动服务",
      "pos": [
        9345,
        9360
      ]
    },
    {
      "content": "通知中心指南",
      "pos": [
        9366,
        9372
      ]
    },
    {
      "pos": [
        9376,
        9412
      ],
      "content": "<bpt id=\"p1\">[</bpt><ept id=\"p1\">适用于 iOS 的通知中心操作方法]</ept>中提供了模板表达式语言的参考信息。"
    }
  ],
  "content": "<properties\n    pageTitle=\"通知中心本地化的突发新闻教程 - iOS\"\n    description=\"了解如何使用 Azure 服务总线通知中心发送本地化的突发新闻通知 (iOS)。\"\n    services=\"notification-hubs\"\n    documentationCenter=\"ios\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n<tags \n    ms.service=\"notification-hubs\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 使用通知中心将本地化的突发新闻发送到 iOS 设备\n\n> [AZURE.SELECTOR]\n- [Windows Store C#](/documentation/articles/notification-hubs-windows-store-dotnet-send-localized-breaking-news)\n- [iOS](/documentation/articles/notification-hubs-ios-send-localized-breaking-news)\n\n\n##概述\n\n本主题演示如何使用 Azure 通知中心的[模板](/documentation/articles/notification-hubs-templates)功能广播已按语言和设备本地化的突发新闻通知。在本教程中，你从在[使用通知中心发送突发新闻]中创建的 iOS 应用开始操作。完成时，你将可以注册感兴趣的突发新闻类别，指定要接收通知的语言并仅接收采用该语言的这些类别的推送通知。\n\n\n此方案包含两个部分：\n\n- iOS 应用程序允许客户端设备指定一种语言并订阅不同的突发新闻类别；\n\n- 后端使用 Azure 通知中心的**标记**和**模板**功能广播通知。\n\n\n\n##先决条件 ##\n\n你必须已完成学习[使用通知中心发送突发新闻]教程并具有可用的代码，因为本教程直接围绕该代码展开论述。\n\n可以选用 Visual Studio 2012 或更高版本。\n\n\n\n##模板概念\n\n在[使用通知中心发送突发新闻]中，你构建了一个使用**标记**订阅不同新闻类别通知的应用程序。\n但是，很多应用程序针对多个市场，需要本地化。这意味着通知内容本身必须本地化且传递到正确的设备组。\n在本主题中，我们将演示如何使用通知中心的**模板**功能轻松传递本地化的突发新闻通知。\n\n注意：发送本地化的通知的一种方式是创建每个标签的多个版本。例如，要支持英语、法语和汉语，我们需要三种不同的标签用于世界新闻：“world\\_en”、“world\\_fr”和“world\\_ch”。我们然后必须将世界新闻的本地化版本分别发送到这些标签。在本主题中，我们使用模板来避免增生标签和发送多个消息的要求。\n\n在较高级别上，模板是指定特定设备应如何接收通知的一种方法。模板通过引用作为你应用程序后端所发消息的一部分的属性，指定确切的负载格式。在我们的示例中，我们将发送包含所有支持的语言的区域设置未知的消息：\n\n    {\n        \"News_English\": \"...\",\n        \"News_French\": \"...\",\n        \"News_Mandarin\": \"...\"\n    }\n\n然后我们将确保设备注册到引用正确属性的模板。例如，要注册法语新闻的 iOS 应用程序将注册以下模板：\n\n    {\n        aps:{\n            alert: \"$(News_French)\"\n        }\n    }\n\n模板是很强大的功能，你可以在[模板](/documentation/articles/notification-hubs-templates)一文中了解其更多信息。\n\n##应用程序用户界面\n\n我们现在将修改你在[使用通知中心发送突发新闻]主题中创建的“突发新闻”应用，以使用模板发送本地化的突发新闻。\n\n\n在 MainStoryboard\\_iPhone.storyboard 中，添加使用我们支持的三种语言的分段控件：英语、法语和汉语。\n\n![][13]\n\n然后确保在 ViewController.h 中添加 IBOutlet，如下所示：\n\n![][14]\n\n##构建 iOS 应用程序\n\n\n1. 在 Notification.h 中，添加 *retrieveLocale* 方法，然后修改存储区和 subscribe 方法，如下所示：\n\n        - (void) storeCategoriesAndSubscribeWithLocale:(int) locale categories:(NSSet*) categories completion: (void (^)(NSError* error))completion;\n\n        - (void) subscribeWithLocale:(int) locale categories:(NSSet*) categories completion:(void (^)(NSError *))completion;\n\n        - (NSSet*) retrieveCategories;\n\n        - (int) retrieveLocale;\n\n    在 Notification.m 中，通过添加区域设置参数并将它存储在用户默认值中，修改 *storeCategoriesAndSubscribe* 方法：\n\n        - (void) storeCategoriesAndSubscribeWithLocale:(int) locale categories:(NSSet *)categories completion:(void (^)(NSError *))completion {\n            NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];\n            [defaults setValue:[categories allObjects] forKey:@\"BreakingNewsCategories\"];\n            [defaults setInteger:locale forKey:@\"BreakingNewsLocale\"];\n            [defaults synchronize];\n            \n            [self subscribeWithLocale: locale categories:categories completion:completion];\n        }\n\n    然后修改 *subscribe* 方法以包括该区域设置：\n    \n        - (void) subscribeWithLocale: (int) locale categories:(NSSet *)categories completion:(void (^)(NSError *))completion{\n            SBNotificationHub* hub = [[SBNotificationHub alloc] initWithConnectionString:@\"<connection string>\" notificationHubPath:@\"<hub name>\"];\n            \n            NSString* localeString;\n            switch (locale) {\n                case 0:\n                    localeString = @\"English\";\n                    break;\n                case 1:\n                    localeString = @\"French\";\n                    break;\n                case 2:\n                    localeString = @\"Mandarin\";\n                    break;\n            }\n            \n            NSString* template = [NSString stringWithFormat:@\"{\"aps\":{\"alert\":\"$(News_%@)\"},\"inAppMessage\":\"$(News_%@)\"}\", localeString, localeString];\n\n            [hub registerTemplateWithDeviceToken:self.deviceToken name:@\"localizednewsTemplate\" jsonBodyTemplate:template expiryTemplate:@\"0\" tags:categories completion:completion];\n        }\n        \n    请注意，我们现在使用的是 *registerTemplateWithDeviceToken* 方法而非 *registerNativeWithDeviceToken*。当我们注册一个模板时，必须提供 json 模板，还要指定其名称（因为我们的应用程序可能要注册不同的模板）。确保将类别作为标记注册，因为我们要确保接收有关这些新闻的通知。\n\n    添加一个方法以从用户默认设置中检索区域设置：\n\n        - (int) retrieveLocale {\n            NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];\n            \n            int locale = [defaults integerForKey:@\"BreakingNewsLocale\"];\n            \n            return locale < 0?0:locale;\n        }\n\n2. 现在我们修改了 Notifications 类，必须确保 ViewController 使用新的 UISegmentControl。在 *viewDidLoad* 方法中添加以下行，以确保显示当前选择的区域设置：\n\n        self.Locale.selectedSegmentIndex = [notifications retrieveLocale];\n        \n    然后，在 *subscribe* 方法中，将对 *storeCategoriesAndSubscribe* 的调用更改为：\n    \n        [notifications storeCategoriesAndSubscribeWithLocale: self.Locale.selectedSegmentIndex categories:[NSSet setWithArray:categories] completion: ^(NSError* error) {\n            if (!error) {\n                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Notification\" message:\n                                      @\"Subscribed!\" delegate:nil cancelButtonTitle:\n                                      @\"OK\" otherButtonTitles:nil, nil];\n                [alert show];\n            } else {\n                NSLog(@\"Error subscribing: %@\", error);\n            }\n        }];\n\n3. 最后，你必须在 AppDelegate.m 中更新 *didRegisterForRemoteNotificationsWithDeviceToken* 方法，以便在应用启动时正确刷新你的注册信息。将对通知的 *subscribe* 方法的调用更改为：\n\n        NSSet* categories = [self.notifications retrieveCategories];\n        int locale = [self.notifications retrieveLocale];\n        [self.notifications subscribeWithLocale: locale categories:categories completion:^(NSError* error) {\n            if (error != nil) {\n                NSLog(@\"Error registering for notifications: %@\", error);\n            }\n        }];\n\n##（可选）通过 .NET 控制台应用发送本地化的模板通知。\n\n[AZURE.INCLUDE [notification-hubs-localized-back-end](../includes/notification-hubs-localized-back-end.md)]\n\n\n\n##（可选）通过设备发送本地化的模板通知\n\n如果你无权访问 Visual Studio，或者只是想要试一试直接从设备上的应用发送本地化的模板通知。那么，你只需将本地化的模板参数添加到你在前一教程中定义的 `SendNotificationRESTAPI` 方法。\n\n        - (void)SendNotificationRESTAPI:(NSString*)categoryTag\n        {\n            NSURLSession* session = [NSURLSession sessionWithConfiguration:[NSURLSessionConfiguration\n                                     defaultSessionConfiguration] delegate:nil delegateQueue:nil];\n\n            NSString *json;\n\n            // Construct the messages REST endpoint\n            NSURL* url = [NSURL URLWithString:[NSString stringWithFormat:@\"%@%@/messages/%@\", HubEndpoint,\n                                               HUBNAME, API_VERSION]];\n\n            // Generated the token to be used in the authorization header.\n            NSString* authorizationToken = [self generateSasToken:[url absoluteString]];\n\n            //Create the request to add the template notification message to the hub\n            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n            [request setHTTPMethod:@\"POST\"];\n\n            // Add the category as a tag\n            [request setValue:categoryTag forHTTPHeaderField:@\"ServiceBusNotification-Tags\"];\n\n            // Template notification\n            json = [NSString stringWithFormat:@\"{\"messageParam\":\"Breaking %@ News : %@\",\"\n                    \"News_English\":\"Breaking %@ News in English : %@\",\"\n                    \"News_French\":\"Breaking %@ News in French : %@\",\"\n                    \"News_Mandarin\":\"Breaking %@ News in Mandarin : %@\",\"\n                    categoryTag, self.notificationMessage.text,\n                    categoryTag, self.notificationMessage.text,  // insert English localized news here\n                    categoryTag, self.notificationMessage.text,  // insert French localized news here\n                    categoryTag, self.notificationMessage.text]; // insert Mandarin localized news here\n\n            // Signify template notification format\n            [request setValue:@\"template\" forHTTPHeaderField:@\"ServiceBusNotification-Format\"];\n\n            // JSON Content-Type\n            [request setValue:@\"application/json;charset=utf-8\" forHTTPHeaderField:@\"Content-Type\"];\n\n            //Authenticate the notification message POST request with the SaS token\n            [request setValue:authorizationToken forHTTPHeaderField:@\"Authorization\"];\n\n            //Add the notification message body\n            [request setHTTPBody:[json dataUsingEncoding:NSUTF8StringEncoding]];\n\n            // Send the REST request\n            NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request\n                       completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)\n               {\n               NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                   if (error || httpResponse.statusCode != 200)\n                   {\n                       NSLog(@\"\\nError status: %d\\nError: %@\", httpResponse.statusCode, error);\n                   }\n                   if (data != NULL)\n                   {\n                       //xmlParser = [[NSXMLParser alloc] initWithData:data];\n                       //[xmlParser setDelegate:self];\n                       //[xmlParser parse];\n                   }\n               }];\n\n            [dataTask resume];\n        }\n\n\n\n\n## 后续步骤\n\n有关使用模板的详细信息，请参阅：\n\n- [使用通知中心通知用户：ASP.NET] \n- [使用通知中心通知用户：移动服务] \n- [通知中心指南] \n\n[适用于 iOS 的通知中心操作方法]中提供了模板表达式语言的参考信息。\n\n\n\n        \n<!-- Anchors. -->\n[模板概念]: #concepts\n[应用程序用户界面]: #ui\n[构建 iOS 应用程序]: #building-client\n[从后端发送通知]: #send\n[Next Steps]: #next-steps\n\n<!-- Images. -->\n\n\n[13]: ./media/notification-hubs-ios-send-localized-breaking-news/ios_localized1.png\n[14]: ./media/notification-hubs-ios-send-localized-breaking-news/ios_localized2.png\n\n<!-- URLs. -->\n[操作方法：服务总线通知中心（iOS 应用）]: https://msdn.microsoft.com/zh-cn/library/dn530748.aspx\n[使用通知中心发送突发新闻]: /documentation/articles/notification-hubs-windows-store-dotnet-send-breaking-news\n[使用通知中心通知用户：ASP.NET]: /documentation/articles/notification-hubs-aspnet-cross-platform-notify-users\n[使用通知中心通知用户：移动服务]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-push-notifications-app-users/\n[通知中心指南]: http://msdn.microsoft.com/zh-cn/library/jj927170.aspx\n[适用于 iOS 的通知中心操作方法]: /documentation/articles/notification-hubs-ios-get-started\n<!---HONumber=Mooncake_0104_2016-->"
}