<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66638ab9e111ff7e60e3f63acfd3a0e9d41f48a2</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>通过 .NET 开始使用 Azure 队列存储 | Azure</source>
          <target state="new">通过 .NET 开始使用 Azure 队列存储 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>使用 Azure 队列存储在应用程序组件之间异步发送和接收消息。立即开始使用简单的队列存储操作，包括创建和删除队列以及添加、读取和删除队列消息。</source>
          <target state="new">使用 Azure 队列存储在应用程序组件之间异步发送和接收消息。立即开始使用简单的队列存储操作，包括创建和删除队列以及添加、读取和删除队列消息。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>通过 .NET 开始使用 Azure 队列存储</source>
          <target state="new">通过 .NET 开始使用 Azure 队列存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure 队列存储是一种在云中提供消息传递队列的服务。在设计应用程序以实现可伸缩性时，通常要将各个应用程序组件分离，使其可以独立地进行伸缩。队列存储为在应用程序组件之间进行异步通信提供了一种可靠的消息传送解决方案，无论这些应用程序组件是在云中、在桌面上、在本地服务器上运行还是在移动设备上运行。队列存储还支持管理异步任务以及构建过程工作流。</source>
          <target state="new">Azure 队列存储是一种在云中提供消息传递队列的服务。在设计应用程序以实现可伸缩性时，通常要将各个应用程序组件分离，使其可以独立地进行伸缩。队列存储为在应用程序组件之间进行异步通信提供了一种可靠的消息传送解决方案，无论这些应用程序组件是在云中、在桌面上、在本地服务器上运行还是在移动设备上运行。队列存储还支持管理异步任务以及构建过程工作流。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>本教程演示如何针对使用 Azure 队列存储一些常见情形编写 .NET 代码。涉及的方案包括创建和删除队列、添加、读取和删除队列消息。</source>
          <target state="new">本教程演示如何针对使用 Azure 队列存储一些常见情形编写 .NET 代码。涉及的方案包括创建和删除队列、添加、读取和删除队列消息。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>以编程方式访问队列存储</source>
          <target state="new">以编程方式访问队列存储</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>命名空间声明</source>
          <target state="new">命名空间声明</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在你希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部：</source>
          <target state="new">在你希望以编程方式访问 Azure 存储的任何 C# 文件中，将以下代码命名空间声明添加到文件的顶部：</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>确保你引用 <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。</source>
          <target state="new">确保你引用 <ph id="ph1">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>创建队列</source>
          <target state="new">创建队列</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>利用 <bpt id="p1">**</bpt>CloudQueueClient<ept id="p1">**</ept> 对象，可以获取队列的引用对象。以下代码将创建 <bpt id="p2">**</bpt>CloudQueueClient<ept id="p2">**</ept> 对象。本指南中的所有代码都使用存储在 Azure 应用程序的服务配置中的存储连接字符串。还可采用其他方法创建 <bpt id="p3">**</bpt>CloudStorageAccount<ept id="p3">**</ept> 对象。有关详细信息，请参阅 <bpt id="p4">[</bpt>CloudStorageAccount<ept id="p4">][]</ept> 文档。</source>
          <target state="new">利用 <bpt id="p1">**</bpt>CloudQueueClient<ept id="p1">**</ept> 对象，可以获取队列的引用对象。以下代码将创建 <bpt id="p2">**</bpt>CloudQueueClient<ept id="p2">**</ept> 对象。本指南中的所有代码都使用存储在 Azure 应用程序的服务配置中的存储连接字符串。还可采用其他方法创建 <bpt id="p3">**</bpt>CloudStorageAccount<ept id="p3">**</ept> 对象。有关详细信息，请参阅 <bpt id="p4">[</bpt>CloudStorageAccount<ept id="p4">][]</ept> 文档。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>queueClient<ept id="p1">**</ept> 对象获取对要使用的队列的引用。如果队列不存在，你可以创建它。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>queueClient<ept id="p1">**</ept> 对象获取对要使用的队列的引用。如果队列不存在，你可以创建它。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在队列中插入消息</source>
          <target state="new">在队列中插入消息</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>若要将消息插入现有队列，请先创建一个新的 <bpt id="p1">**</bpt>CloudQueueMessage<ept id="p1">**</ept>。接下来，调用 <bpt id="p2">**</bpt>AddMessage<ept id="p2">**</ept> 方法。可从字符串（UTF-8 格式）或<bpt id="p3">**</bpt>字节<ept id="p3">**</ept>数组创建 <bpt id="p4">**</bpt>CloudQueueMessage<ept id="p4">**</ept>。以下代码将创建队列（如果该队列不存在）并插入消息“Hello, World”：</source>
          <target state="new">若要将消息插入现有队列，请先创建一个新的 <bpt id="p1">**</bpt>CloudQueueMessage<ept id="p1">**</ept>。接下来，调用 <bpt id="p2">**</bpt>AddMessage<ept id="p2">**</ept> 方法。可从字符串（UTF-8 格式）或<bpt id="p3">**</bpt>字节<ept id="p3">**</ept>数组创建 <bpt id="p4">**</bpt>CloudQueueMessage<ept id="p4">**</ept>。以下代码将创建队列（如果该队列不存在）并插入消息“Hello, World”：</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>扫视下一条消息</source>
          <target state="new">扫视下一条消息</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>通过调用 <bpt id="p1">**</bpt>PeekMessage<ept id="p1">**</ept> 方法，可以查看队列前面的消息，而不必从队列中将其删除。</source>
          <target state="new">通过调用 <bpt id="p1">**</bpt>PeekMessage<ept id="p1">**</ept> 方法，可以查看队列前面的消息，而不必从队列中将其删除。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>更改已排队消息的内容</source>
          <target state="new">更改已排队消息的内容</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 <bpt id="p1">*</bpt>n<ept id="p1">*</ept> ，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。</source>
          <target state="new">你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 <bpt id="p1">*</bpt>n<ept id="p1">*</ept> ，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>取消对下一条消息的排队</source>
          <target state="new">取消对下一条消息的排队</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>你的代码通过两个步骤来取消对队列中某条消息的排队。调用 <bpt id="p1">**</bpt>GetMessage<ept id="p1">**</ept> 时，你将获取队列中的下一条消息。从 <bpt id="p2">**</bpt>GetMessage<ept id="p2">**</ept> 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要从队列中删除消息，你还必须调用 <bpt id="p3">**</bpt>DeleteMessage<ept id="p3">**</ept>。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 <bpt id="p4">**</bpt>DeleteMessage<ept id="p4">**</ept>。</source>
          <target state="new">你的代码通过两个步骤来取消对队列中某条消息的排队。调用 <bpt id="p1">**</bpt>GetMessage<ept id="p1">**</ept> 时，你将获取队列中的下一条消息。从 <bpt id="p2">**</bpt>GetMessage<ept id="p2">**</ept> 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要从队列中删除消息，你还必须调用 <bpt id="p3">**</bpt>DeleteMessage<ept id="p3">**</ept>。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 <bpt id="p4">**</bpt>DeleteMessage<ept id="p4">**</ept>。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>将 Async-Await 模式与公用队列存储 API 配合使用</source>
          <target state="new">将 Async-Await 模式与公用队列存储 API 配合使用</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>此示例演示如何将 Async-Await 模式和公用队列存储 API 配合使用。示例调用每个给定方法的异步版本，如每个方法的 <bpt id="p1">*</bpt>Async<ept id="p1">*</ept> 后缀所示。使用异步方法时，async-await 模式将暂停本地执行，直到调用完成。此行为允许当前的线程执行其他工作，这有助于避免性能瓶颈并提高应用程序的整体响应能力。有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 <bpt id="p2">[</bpt>Async 和 Await（C# 和 Visual Basic）<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept></source>
          <target state="new">此示例演示如何将 Async-Await 模式和公用队列存储 API 配合使用。示例调用每个给定方法的异步版本，如每个方法的 <bpt id="p1">*</bpt>Async<ept id="p1">*</ept> 后缀所示。使用异步方法时，async-await 模式将暂停本地执行，直到调用完成。此行为允许当前的线程执行其他工作，这有助于避免性能瓶颈并提高应用程序的整体响应能力。有关在 .NET 中使用 Async-Await 模式的详细信息，请参阅 <bpt id="p2">[</bpt>Async 和 Await（C# 和 Visual Basic）<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept></target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>使用其他方法取消对消息的排队</source>
          <target state="new">使用其他方法取消对消息的排队</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id="p1">**</bpt>GetMessages<ept id="p1">**</ept> 方法在一次调用中获取 20 条消息。然后，它使用 <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，5 分钟超时时间对于所有消息都是同时开始的，因此在调用 <bpt id="p3">**</bpt>GetMessages<ept id="p3">**</ept> 5 分钟后，尚未删除的任何消息都将再次变得可见。</source>
          <target state="new">你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id="p1">**</bpt>GetMessages<ept id="p1">**</ept> 方法在一次调用中获取 20 条消息。然后，它使用 <bpt id="p2">**</bpt>foreach<ept id="p2">**</ept> 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，5 分钟超时时间对于所有消息都是同时开始的，因此在调用 <bpt id="p3">**</bpt>GetMessages<ept id="p3">**</ept> 5 分钟后，尚未删除的任何消息都将再次变得可见。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>获取队列长度</source>
          <target state="new">获取队列长度</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>你可以获取队列中消息的估计数。使用 <bpt id="p1">**</bpt>FetchAttributes<ept id="p1">**</ept> 方法可请求队列服务检索队列属性，包括消息计数。<bpt id="p2">**</bpt>ApproximateMessageCount<ept id="p2">**</ept> 属性返回 <bpt id="p3">**</bpt>FetchAttributes<ept id="p3">**</ept> 方法检索到的最后一个值，而不会调用队列服务。</source>
          <target state="new">你可以获取队列中消息的估计数。使用 <bpt id="p1">**</bpt>FetchAttributes<ept id="p1">**</ept> 方法可请求队列服务检索队列属性，包括消息计数。<bpt id="p2">**</bpt>ApproximateMessageCount<ept id="p2">**</ept> 属性返回 <bpt id="p3">**</bpt>FetchAttributes<ept id="p3">**</ept> 方法检索到的最后一个值，而不会调用队列服务。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>删除队列</source>
          <target state="new">删除队列</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>若要删除队列及其包含的所有消息，请对队列对象调用 <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> 方法。</source>
          <target state="new">若要删除队列及其包含的所有消息，请对队列对象调用 <bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>现在，您已了解有关队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。</source>
          <target state="new">现在，您已了解有关队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>查看队列服务参考文档，了解有关可用 API 的完整详细信息：</source>
          <target state="new">查看队列服务参考文档，了解有关可用 API 的完整详细信息：</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>.NET 存储客户端库参考</source>
          <target state="new">.NET 存储客户端库参考</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>REST API 参考</source>
          <target state="new">REST API 参考</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>了解如何通过使用 <bpt id="p1">[</bpt>Azure WebJobs SDK<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 简化为使用 Azure 存储空间而写的代码。</source>
          <target state="new">了解如何通过使用 <bpt id="p1">[</bpt>Azure WebJobs SDK<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 简化为使用 Azure 存储空间而写的代码。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>查看更多功能指南，以了解在 Azure 中存储数据的其他方式。</source>
          <target state="new">查看更多功能指南，以了解在 Azure 中存储数据的其他方式。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>使用<bpt id="p1">[</bpt>表存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>来存储结构化数据。</source>
          <target state="new">使用<bpt id="p1">[</bpt>表存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>来存储结构化数据。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">[</bpt>Blob 存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>来存储非结构化数据。</source>
          <target state="new">使用 <bpt id="p1">[</bpt>Blob 存储<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>来存储非结构化数据。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">[</bpt>SQL 数据库<ept id="p1">](/documentation/articles/sql-database-dotnet-how-to-use)</ept>来存储关系数据。</source>
          <target state="new">使用 <bpt id="p1">[</bpt>SQL 数据库<ept id="p1">](/documentation/articles/sql-database-dotnet-how-to-use)</ept>来存储关系数据。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>