{
  "nodes": [
    {
      "content": "先前示例显示标准登录，这要求在此应用每次启动时客户端同时联系标识提供商和移动服务。此方法不仅效率低下，而且如果很多客户尝试同时启动您的应用，您会遇到关于使用率的问题。更好的方法是缓存移动服务返回的授权令牌，然后在使用基于提供商的登录之前首先尝试使用此令牌。",
      "pos": [
        1,
        129
      ]
    },
    {
      "pos": [
        133,
        199
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>无论您使用客户端管理的还是服务管理的身份验证，都可以缓存由移动服务颁发的令牌。本教程使用服务管理的身份验证。"
    },
    {
      "pos": [
        204,
        247
      ],
      "content": "在 MainPage.xaml.cs 项目文件中，添加以下 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句："
    },
    {
      "pos": [
        343,
        377
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>AuthenticateAsync<ept id=\"p1\">**</ept> 方法替换为以下代码："
    },
    {
      "pos": [
        3681,
        3802
      ],
      "content": "在此版本的 <bpt id=\"p1\">**</bpt>AuthenticateAsync<ept id=\"p1\">**</ept> 中，此应用尝试使用在本地存储中加密存储的凭证来访问移动服务。发送一个简单查询以验证存储的令牌是否未到期。返回 401 时，尝试了基于提供商的常规登录。没有存储任何凭证时，也执行常规登录。"
    },
    {
      "pos": [
        3812,
        4066
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此应用在登录过程中测试令牌是否到期，但正在使用此应用时，可能会在身份验证之后发生令牌到期。有关用于处理到期令牌相关的授权错误的解决方案，请参阅文章<bpt id=\"p1\">[</bpt>在 Azure 移动服务托管 SDK 中缓存和处理到期令牌<ept id=\"p1\">](http://blogs.msdn.com/b/carlosfigueira/archive/2014/03/13/caching-and-handling-expired-tokens-in-azure-mobile-services-managed-sdk.aspx)</ept>。"
    },
    {
      "content": "两次重新启动此应用。",
      "pos": [
        4075,
        4085
      ]
    },
    {
      "content": "请注意，在第一次启动时，再次需要使用此提供商进行登录。但是，在第二次重新启动时，将使用缓存的凭证，而绕过登录。",
      "pos": [
        4091,
        4146
      ]
    }
  ],
  "content": "\n先前示例显示标准登录，这要求在此应用每次启动时客户端同时联系标识提供商和移动服务。此方法不仅效率低下，而且如果很多客户尝试同时启动您的应用，您会遇到关于使用率的问题。更好的方法是缓存移动服务返回的授权令牌，然后在使用基于提供商的登录之前首先尝试使用此令牌。 \n\n>[AZURE.NOTE]无论您使用客户端管理的还是服务管理的身份验证，都可以缓存由移动服务颁发的令牌。本教程使用服务管理的身份验证。\n\n1. 在 MainPage.xaml.cs 项目文件中，添加以下 **using** 语句：\n\n        using System.IO.IsolatedStorage;\n        using System.Security.Cryptography;     \n\n2. 将 **AuthenticateAsync** 方法替换为以下代码：\n\n        private async System.Threading.Tasks.Task AuthenticateAsync()\n        {\n            string message;\n            // This sample uses the Facebook provider.\n            var provider = \"Facebook\";\n\n            // Provide some additional app-specific security for the encryption.\n            byte [] entropy = { 1, 8, 3, 6, 5 };\n\n            // Authorization credential.\n            MobileServiceUser user = null;\n\n            // Isolated storage for the app.\n            IsolatedStorageSettings settings =\n                IsolatedStorageSettings.ApplicationSettings;\n\n            while (user == null)\n            {\n                // Try to get an existing encrypted credential from isolated storage.                    \n                if (settings.Contains(provider))\n                {\n                    // Get the encrypted byte array, decrypt and deserialize the user.\n                    var encryptedUser = settings[provider] as byte[];\n                    var userBytes = ProtectedData.Unprotect(encryptedUser, entropy);\n                    user = JsonConvert.DeserializeObject<MobileServiceUser>(\n                        System.Text.Encoding.Unicode.GetString(userBytes, 0, userBytes.Length));\n                }\n                if (user != null)\n                {\n                    // Set the user from the stored credentials.\n                    App.MobileService.CurrentUser = user;\n\n                    try\n                    {\n                        // Try to return an item now to determine if the cached credential has expired.\n                        await App.MobileService.GetTable<TodoItem>().Take(1).ToListAsync();\n                    }\n                    catch (MobileServiceInvalidOperationException ex)\n                    {\n                        if (ex.Response.StatusCode == System.Net.HttpStatusCode.Unauthorized)\n                        {\n                            // Remove the credential with the expired token.\n                            settings.Remove(provider);\n                            user = null;\n                            continue;\n                        }\n                    }\n                }\n                else\n                {\n                    try\n                    {\n                        // Login with the identity provider.\n                        user = await App.MobileService\n                            .LoginAsync(provider);\n\n                        // Serialize the user into an array of bytes and encrypt with DPAPI.\n                        var userBytes = System.Text.Encoding.Unicode\n                            .GetBytes(JsonConvert.SerializeObject(user));\n                        byte[] encryptedUser = ProtectedData.Protect(userBytes, entropy);\n\n                        // Store the encrypted user credentials in local settings.\n                        settings.Add(provider, encryptedUser);\n                        settings.Save();\n                    }\n                    catch (MobileServiceInvalidOperationException ex)\n                    {\n                        message = \"You must log in. Login Required\";\n                    }\n                }\n                message = string.Format(\"You are now logged in - {0}\", user.UserId);\n                MessageBox.Show(message);\n            }\n        }\n\n    在此版本的 **AuthenticateAsync** 中，此应用尝试使用在本地存储中加密存储的凭证来访问移动服务。发送一个简单查询以验证存储的令牌是否未到期。返回 401 时，尝试了基于提供商的常规登录。没有存储任何凭证时，也执行常规登录。   \n\n    >[AZURE.NOTE]此应用在登录过程中测试令牌是否到期，但正在使用此应用时，可能会在身份验证之后发生令牌到期。有关用于处理到期令牌相关的授权错误的解决方案，请参阅文章[在 Azure 移动服务托管 SDK 中缓存和处理到期令牌](http://blogs.msdn.com/b/carlosfigueira/archive/2014/03/13/caching-and-handling-expired-tokens-in-azure-mobile-services-managed-sdk.aspx)。\n    \n3. 两次重新启动此应用。\n\n    请注意，在第一次启动时，再次需要使用此提供商进行登录。但是，在第二次重新启动时，将使用缓存的凭证，而绕过登录。\n\n<!---HONumber=71-->"
}