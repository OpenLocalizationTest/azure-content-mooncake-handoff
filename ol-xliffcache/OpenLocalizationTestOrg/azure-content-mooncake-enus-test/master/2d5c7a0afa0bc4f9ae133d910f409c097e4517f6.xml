{
  "nodes": [
    {
      "content": "SQL 数据仓库中的循环 | Azure",
      "pos": [
        26,
        46
      ]
    },
    {
      "content": "有关在开发解决方案时使用 Azure SQL 数据仓库中的 Transact-SQL 循环和替换游标的技巧。",
      "pos": [
        64,
        118
      ]
    },
    {
      "content": "SQL 数据仓库中的循环",
      "pos": [
        337,
        349
      ]
    },
    {
      "pos": [
        350,
        528
      ],
      "content": "SQL 数据仓库支持对重复执行的语句块使用 <bpt id=\"p1\">[</bpt>WHILE<ept id=\"p1\">][]</ept> 循环。只要指定的条件都成立，或者在代码专门使用 <ph id=\"ph1\">`BREAK`</ph> 关键字终止循环之前，这些语句将不断继续。循环特别适合用于替换 SQL 代码中定义的游标。幸运的是，几乎所有以 SQL 代码编写的游标都是快进的只读变体。因此，如果你发现自己必须替换一个游标，<bpt id=\"p2\">[</bpt><ept id=\"p2\">WHILE]</ept> 循环是绝佳的替代方案。"
    },
    {
      "content": "利用循环和替换 SQL 数据仓库中的游标",
      "pos": [
        533,
        553
      ]
    },
    {
      "content": "但是，在深入学习之前，你应该先自问以下问题：“此游标是否可重写以使用基于集的操作？”。在许多情况下，答案是肯定的，通常这也是最佳方法。基于集的操作的执行速度通常比迭代性的逐行方法要快得多。",
      "pos": [
        554,
        648
      ]
    },
    {
      "content": "可以轻松使用循环构造来替换快进只读游标。下面是一个简单的示例。此代码示例将更新数据库中每个表的统计信息。通过迭代循环中的表，我们就能够依次执行每个命令。",
      "pos": [
        650,
        726
      ]
    },
    {
      "content": "首先，创建一个临时表，其中包含用于标识各个语句的唯一行号：",
      "pos": [
        728,
        757
      ]
    },
    {
      "content": "其次，初始化执行循环所需的变量：",
      "pos": [
        1017,
        1033
      ]
    },
    {
      "content": "现在，每次对一个语句执行一次循环：",
      "pos": [
        1123,
        1140
      ]
    },
    {
      "content": "最后，将第一个步骤创建的临时表删除",
      "pos": [
        1336,
        1353
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        1502,
        1506
      ]
    },
    {
      "pos": [
        1507,
        1528
      ],
      "content": "有关更多开发技巧，请参阅<bpt id=\"p1\">[</bpt>开发概述<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"SQL 数据仓库中的循环 | Azure\"\n   description=\"有关在开发解决方案时使用 Azure SQL 数据仓库中的 Transact-SQL 循环和替换游标的技巧。\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"lodipalm\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.date=\"09/22/2015\"\n   wacn.date=\"01/20/2016\"/>\n\n# SQL 数据仓库中的循环\nSQL 数据仓库支持对重复执行的语句块使用 [WHILE][] 循环。只要指定的条件都成立，或者在代码专门使用 `BREAK` 关键字终止循环之前，这些语句将不断继续。循环特别适合用于替换 SQL 代码中定义的游标。幸运的是，几乎所有以 SQL 代码编写的游标都是快进的只读变体。因此，如果你发现自己必须替换一个游标，[WHILE] 循环是绝佳的替代方案。\n\n## 利用循环和替换 SQL 数据仓库中的游标\n但是，在深入学习之前，你应该先自问以下问题：“此游标是否可重写以使用基于集的操作？”。在许多情况下，答案是肯定的，通常这也是最佳方法。基于集的操作的执行速度通常比迭代性的逐行方法要快得多。\n\n可以轻松使用循环构造来替换快进只读游标。下面是一个简单的示例。此代码示例将更新数据库中每个表的统计信息。通过迭代循环中的表，我们就能够依次执行每个命令。\n\n首先，创建一个临时表，其中包含用于标识各个语句的唯一行号：\n  \n```\nCREATE TABLE #tbl \nWITH \n(   LOCATION     = USER_DB\n,   DISTRIBUTION = ROUND_ROBIN\n)\nAS\nSELECT  ROW_NUMBER() OVER(ORDER BY (SELECT NULL)) ) AS Sequence\n,       [name]\n,       'UPDATE STATISTICS '+QUOTENAME([name]) AS sql_code\nFROM    sys.tables\n;\n```\n\n其次，初始化执行循环所需的变量：\n\n```\nDECLARE @nbr_statements INT = (SELECT COUNT(*) FROM #tbl)\n,       @i INT = 1\n;\n```\n\n现在，每次对一个语句执行一次循环：\n\n```\nWHILE   @i <= @nbr_statements\nBEGIN\n    DECLARE @sql_code NVARCHAR(4000) = (SELECT sql_code FROM #tbl WHERE Sequence = @i);\n    EXEC    sp_executesql @sql_code;\n    SET     @i +=1;\nEND\n```\n\n最后，将第一个步骤创建的临时表删除\n\n```\nDROP TABLE #tbl;\n```\n\n\n<!--Every topic should have next steps and links to the next logical set of content to keep the customer engaged-->\n\n## 后续步骤\n有关更多开发技巧，请参阅[开发概述][]。\n\n<!--Image references-->\n\n<!--Article references-->\n[开发概述]: /documentation/articles/sql-data-warehouse-overview-develop\n\n<!--MSDN references-->\n[WHILE]: https://msdn.microsoft.com/zh-cn/library/ms178642.aspx\n\n\n<!--Other Web references-->\n\n<!---HONumber=Mooncake_1207_2015-->\n"
}