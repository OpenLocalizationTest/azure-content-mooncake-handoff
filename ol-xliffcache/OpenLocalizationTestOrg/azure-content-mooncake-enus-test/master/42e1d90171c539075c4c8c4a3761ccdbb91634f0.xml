{
  "nodes": [
    {
      "content": "安装 Windows 应用商店应用程序的存储客户端",
      "pos": [
        3,
        28
      ]
    },
    {
      "content": "若要使用 SAS 将图像上载到 Blob 存储，必须先添加 NuGet 包，该包用于安装 Windows 应用商店应用程序的存储客户端库。",
      "pos": [
        30,
        99
      ]
    },
    {
      "content": "在 Visual Studio 的“解决方案资源管理器”中，右键单击项目名称，然后选择“管理 NuGet 包”。",
      "pos": [
        104,
        160
      ]
    },
    {
      "pos": [
        165,
        237
      ],
      "content": "在左窗格中，选择“联机”类别，搜索 <ph id=\"ph1\">`WindowsAzure.Storage`</ph>，在“Azure 存储空间”包上单击“安装”，然后接受许可协议。"
    },
    {
      "content": "随即会将 Azure 存储服务的客户端库添加到项目。",
      "pos": [
        369,
        395
      ]
    },
    {
      "content": "接下来，你要更新快速入门应用程序以捕获和上载图像。",
      "pos": [
        397,
        422
      ]
    },
    {
      "content": "更新快速启动客户端应用以捕获和上载图像",
      "pos": [
        427,
        446
      ]
    },
    {
      "content": "在 Visual Studio 中，打开 Windows 应用程序项目的 Package.appxmanifest 文件，并在“功能”选项卡中启用“网络摄像机”和“麦克风”功能。",
      "pos": [
        451,
        540
      ]
    },
    {
      "content": "这样可以确保你的应用能够使用连接到计算机的相机。应用第一次运行时，将请求用户允许对相机进行访问。",
      "pos": [
        660,
        708
      ]
    },
    {
      "content": "对 Windows Phone 应用程序项目重复上述步骤。",
      "pos": [
        713,
        742
      ]
    },
    {
      "pos": [
        748,
        844
      ],
      "content": "在 Windows 应用程序项目中，打开 MainPage.xaml 文件，并将第一个 <bpt id=\"p1\">**</bpt>QuickStartTask<ept id=\"p1\">**</ept> 元素之后紧邻的 <bpt id=\"p2\">**</bpt>StackPanel<ept id=\"p2\">**</ept> 元素替换为以下代码："
    },
    {
      "pos": [
        2018,
        2065
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>DataTemplate<ept id=\"p1\">**</ept> 中的 <bpt id=\"p2\">**</bpt>StackPanel<ept id=\"p2\">**</ept> 元素替换为以下代码："
    },
    {
      "pos": [
        2499,
        2557
      ],
      "content": "这样可将图像添加到 <bpt id=\"p1\">**</bpt>ItemTemplate<ept id=\"p1\">**</ept>，并将其绑定源设置为 Blob 存储服务中已上载图像的 URI。"
    },
    {
      "pos": [
        2562,
        2634
      ],
      "content": "在 Windows Phone 应用程序项目中，打开 MainPage.xaml 文件，并将 <bpt id=\"p1\">**</bpt>ButtonSave<ept id=\"p1\">**</ept> 元素替换为以下代码："
    },
    {
      "pos": [
        4131,
        4178
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>DataTemplate<ept id=\"p1\">**</ept> 中的 <bpt id=\"p2\">**</bpt>StackPanel<ept id=\"p2\">**</ept> 元素替换为以下代码："
    },
    {
      "content": "在共享的 DataModel 文件夹中，打开 TodoItem.cs 项目文件并将以下属性添加到 TodoItem 类：",
      "pos": [
        4606,
        4666
      ]
    },
    {
      "pos": [
        5110,
        5156
      ],
      "content": "打开共享的 MainPage.xaml.cs 项目文件并添加以下 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句："
    },
    {
      "content": "在 MainPage 类中，添加以下代码：",
      "pos": [
        5463,
        5484
      ]
    },
    {
      "content": "这段代码显示用于捕获图像的 UI，并将图像保存到存储文件中。",
      "pos": [
        9224,
        9254
      ]
    },
    {
      "pos": [
        9259,
        9291
      ],
      "content": "将现有的 <ph id=\"ph1\">`InsertTodoItem`</ph> 方法替换为以下代码："
    },
    {
      "content": "这段代码可向移动服务发送插入新 TodoItem 的请求。响应包含 SAS，然后可将其用于将图像从本地存储上载到 Azure Blob 存储。已上载的图像的 URL 用于数据绑定。",
      "pos": [
        11401,
        11491
      ]
    },
    {
      "content": "最后一个步骤是测试应用程序的两个版本并验证从两个设备上载是否成功。",
      "pos": [
        11493,
        11526
      ]
    },
    {
      "pos": [
        11539,
        11572
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"test\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>测试在你的应用程序中上载图像"
    },
    {
      "content": "在 Visual Studio 中，请确保 Windows 项目被设置为默认项目，然后按 F5 键运行应用程序。",
      "pos": [
        11577,
        11633
      ]
    },
    {
      "content": "在“插入 TodoItem”下的文本框中输入文本，然后单击“照片”。",
      "pos": [
        11638,
        11672
      ]
    },
    {
      "content": "单击或点击以拍摄照片，然后单击“上载”插入新项并上载图像。",
      "pos": [
        11677,
        11706
      ]
    },
    {
      "content": "新项和已上载图像都显示在列表视图中。",
      "pos": [
        11828,
        11846
      ]
    },
    {
      "pos": [
        11965,
        12024
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>新项的 <bpt id=\"p1\">*</bpt>imageUri<ept id=\"p1\">*</ept> 属性绑定到<bpt id=\"p2\">**</bpt>图像<ept id=\"p2\">**</ept>控件时，将从 Blob 存储自动下载图像。"
    },
    {
      "content": "停止此应用程序并重新启动该应用程序的 Windows Phone 项目版本。",
      "pos": [
        12029,
        12067
      ]
    },
    {
      "content": "显示以前上载的图像。",
      "pos": [
        12073,
        12083
      ]
    },
    {
      "content": "和前面一样，在文本框中输入一些文本，然后单击“照片”。",
      "pos": [
        12088,
        12115
      ]
    },
    {
      "content": "单击预览以拍摄照片，然后单击“上载”插入新项并上载图像。",
      "pos": [
        12238,
        12266
      ]
    },
    {
      "content": "你已完成上载图像教程。",
      "pos": [
        12392,
        12403
      ]
    }
  ],
  "content": "## 安装 Windows 应用商店应用程序的存储客户端\n\n若要使用 SAS 将图像上载到 Blob 存储，必须先添加 NuGet 包，该包用于安装 Windows 应用商店应用程序的存储客户端库。\n\n1. 在 Visual Studio 的“解决方案资源管理器”中，右键单击项目名称，然后选择“管理 NuGet 包”。\n\n2. 在左窗格中，选择“联机”类别，搜索 `WindowsAzure.Storage`，在“Azure 存储空间”包上单击“安装”，然后接受许可协议。\n\n    ![](./media/mobile-services-windows-universal-dotnet-upload-to-blob-storage/mobile-add-storage-nuget-package-dotnet.png)\n\n    随即会将 Azure 存储服务的客户端库添加到项目。\n\n接下来，你要更新快速入门应用程序以捕获和上载图像。\n\n## 更新快速启动客户端应用以捕获和上载图像\n\n1. 在 Visual Studio 中，打开 Windows 应用程序项目的 Package.appxmanifest 文件，并在“功能”选项卡中启用“网络摄像机”和“麦克风”功能。\n\n    ![](./media/mobile-services-windows-universal-dotnet-upload-to-blob-storage/mobile-app-manifest-camera.png)\n \n    这样可以确保你的应用能够使用连接到计算机的相机。应用第一次运行时，将请求用户允许对相机进行访问。\n\n2. 对 Windows Phone 应用程序项目重复上述步骤。\n \n3. 在 Windows 应用程序项目中，打开 MainPage.xaml 文件，并将第一个 **QuickStartTask** 元素之后紧邻的 **StackPanel** 元素替换为以下代码：\n\n        <StackPanel Orientation=\"Horizontal\" Margin=\"72,0,0,0\">\n            <TextBox Name=\"TextInput\" Margin=\"5\" MaxHeight=\"40\" MinWidth=\"300\"></TextBox>\n            <AppBarButton Label=\"Photo\" Icon=\"Camera\" Name=\"ButtonCapture\" Click=\"ButtonCapture_Click\" />\n            <AppBarButton Label=\"Upload\" Icon=\"Upload\" Name=\"ButtonSave\" Click=\"ButtonSave_Click\"/>\n        </StackPanel>\n        <Grid Name=\"captureGrid\" Margin=\"62,0,0,0\" Visibility=\"Collapsed\" >\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"*\" />\n                <RowDefinition Height=\"Auto\" />\n            </Grid.RowDefinitions>\n            <CaptureElement x:Name=\"previewElement\" Grid.Row=\"0\" Tapped=\"previewElement_Tapped\" />\n            <Image Name=\"imagePreview\" Grid.Row=\"0\"  />\n            <StackPanel Name=\"captureButtons\" Orientation=\"Horizontal\" Grid.Row=\"1\">\n                <TextBlock Name=\"TextCapture\" />\n                <AppBarButton Label=\"Retake\" Icon=\"Redo\" Name=\"ButtonRetake\" Click=\"ButtonCapture_Click\" />\n                <AppBarButton Label=\"Cancel\" Icon=\"Cancel\" Name=\"ButtonCancel\" Click=\"ButtonCancel_Click\" />\n            </StackPanel>\n        </Grid>\n\n2. 将 **DataTemplate** 中的 **StackPanel** 元素替换为以下代码：\n\n        <StackPanel Orientation=\"Vertical\">\n            <CheckBox Name=\"CheckBoxComplete\" IsChecked=\"{Binding Complete, Mode=TwoWay}\" \n                        Checked=\"CheckBoxComplete_Checked\" Content=\"{Binding Text}\" \n                        Margin=\"10,5\" VerticalAlignment=\"Center\"/>\n            <Image Name=\"ImageUpload\" Source=\"{Binding ImageUri, Mode=OneWay}\"\n                    MaxHeight=\"250\"/>\n        </StackPanel> \n\n    这样可将图像添加到 **ItemTemplate**，并将其绑定源设置为 Blob 存储服务中已上载图像的 URI。\n\n3. 在 Windows Phone 应用程序项目中，打开 MainPage.xaml 文件，并将 **ButtonSave** 元素替换为以下代码：\n\n        <StackPanel Grid.Row =\"1\" Grid.Column=\"1\"  Orientation=\"Horizontal\">\n            <AppBarButton Label=\"Photo\" Icon=\"Camera\" Name=\"ButtonCapture\" \n                          Click=\"ButtonCapture_Click\" Height=\"78\" Width=\"62\" />\n            <AppBarButton Label=\"Upload\" Icon=\"Upload\" Name=\"ButtonSave\" \n                          Click=\"ButtonSave_Click\"/>\n        </StackPanel>\n        <Grid Grid.Row=\"2\" Name=\"captureGrid\" Grid.RowSpan=\"3\" Grid.ColumnSpan=\"2\" \n              Canvas.ZIndex=\"99\" Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\" \n              Visibility=\"Collapsed\">\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"*\" />\n                <RowDefinition Height=\"Auto\" />\n            </Grid.RowDefinitions>\n            <CaptureElement Grid.Row=\"0\" x:Name=\"previewElement\" Tapped=\"previewElement_Tapped\" />                    \n            <Image Grid.Row=\"0\" Name=\"imagePreview\" Visibility=\"Collapsed\" />\n            <StackPanel Grid.Row=\"1\" Name=\"captureButtons\" \n                        Orientation=\"Horizontal\" Visibility=\"Collapsed\">\n                <TextBlock Name=\"TextCapture\" VerticalAlignment=\"Bottom\" />\n                <AppBarButton Label=\"Retake\" Icon=\"Redo\" Name=\"ButtonRetake\" \n                              Click=\"ButtonRetake_Click\" />\n                <AppBarButton Label=\"Cancel\" Icon=\"Cancel\" Name=\"ButtonCancel\" \n                              Click=\"ButtonCancel_Click\" />\n            </StackPanel>\n        </Grid>\n\n2. 将 **DataTemplate** 中的 **StackPanel** 元素替换为以下代码：\n\n        <StackPanel Orientation=\"Vertical\">\n            <CheckBox Name=\"CheckBoxComplete\" IsChecked=\"{Binding Complete, Mode=TwoWay}\" \n                      Checked=\"CheckBoxComplete_Checked\" Content=\"{Binding Text}\" \n                      Margin=\"10,5\" VerticalAlignment=\"Center\"/>\n            <Image Name=\"ImageUpload\" Source=\"{Binding ImageUri, Mode=OneWay}\" \n                   MaxHeight=\"150\"/>\n        </StackPanel>\n\n4. 在共享的 DataModel 文件夹中，打开 TodoItem.cs 项目文件并将以下属性添加到 TodoItem 类：\n\n        [JsonProperty(PropertyName = \"containerName\")]\n        public string ContainerName { get; set; }\n        \n        [JsonProperty(PropertyName = \"resourceName\")]\n        public string ResourceName { get; set; }\n        \n        [JsonProperty(PropertyName = \"sasQueryString\")]\n        public string SasQueryString { get; set; }\n        \n        [JsonProperty(PropertyName = \"imageUri\")]\n        public string ImageUri { get; set; } \n\n3. 打开共享的 MainPage.xaml.cs 项目文件并添加以下 **using** 语句：\n    \n        using Windows.Media.Capture;\n        using Windows.Media.MediaProperties;\n        using Windows.Storage;\n        using Windows.UI.Xaml.Input;\n        using Microsoft.WindowsAzure.Storage.Auth;\n        using Microsoft.WindowsAzure.Storage.Blob;\n        using Windows.UI.Xaml.Media.Imaging;\n\n5. 在 MainPage 类中，添加以下代码：\n\n        // Use a StorageFile to hold the captured image for upload.\n        StorageFile media = null;\n        MediaCapture cameraCapture;\n        bool IsCaptureInProgress;\n\n        private async Task CaptureImage()\n        {\n            // Capture a new photo or video from the device.\n            cameraCapture = new MediaCapture();\n            cameraCapture.Failed += cameraCapture_Failed;\n\n            // Initialize the camera for capture.\n            await cameraCapture.InitializeAsync();\n\n            #if WINDOWS_PHONE_APP\n            cameraCapture.SetPreviewRotation(VideoRotation.Clockwise90Degrees);\n            cameraCapture.SetRecordRotation(VideoRotation.Clockwise90Degrees);\n            #endif\n\n            captureGrid.Visibility = Windows.UI.Xaml.Visibility.Visible;\n            previewElement.Visibility = Windows.UI.Xaml.Visibility.Visible;\n            previewElement.Source = cameraCapture;\n            await cameraCapture.StartPreviewAsync();\n        }\n\n        private async void previewElement_Tapped(object sender, TappedRoutedEventArgs e)\n        {\n            // Block multiple taps.\n            if (!IsCaptureInProgress)\n            {                \n                IsCaptureInProgress = true;\n\n                // Create the temporary storage file.\n                media = await ApplicationData.Current.LocalFolder\n                    .CreateFileAsync(\"capture_file.jpg\", CreationCollisionOption.ReplaceExisting);\n\n                // Take the picture and store it locally as a JPEG.\n                await cameraCapture.CapturePhotoToStorageFileAsync(\n                    ImageEncodingProperties.CreateJpeg(), media);\n\n                captureButtons.Visibility = Visibility.Visible;\n\n                // Use the stored image as the preview source.\n                BitmapImage tempBitmap = new BitmapImage(new Uri(media.Path));\n                imagePreview.Source = tempBitmap;\n                imagePreview.Visibility = Visibility.Visible;\n                previewElement.Visibility = Visibility.Collapsed;\n                IsCaptureInProgress = false;\n            }\n        }\n\n        private async void cameraCapture_Failed(MediaCapture sender, MediaCaptureFailedEventArgs errorEventArgs)\n        {\n            // It's safest to return this back onto the UI thread to show the message dialog.\n            MessageDialog dialog = new MessageDialog(errorEventArgs.Message);\n            await this.Dispatcher.RunAsync(Windows.UI.Core.CoreDispatcherPriority.Normal, \n                async () => { await dialog.ShowAsync(); });            \n        }\n\n        private async void ButtonCapture_Click(object sender, RoutedEventArgs e)\n        {\n            // Prevent multiple initializations.\n            ButtonCapture.IsEnabled = false;\n\n            await CaptureImage();\n        }\n\n        private async void ButtonRetake_Click(object sender, Windows.UI.Xaml.RoutedEventArgs e)\n        {\n            // Reset the capture and then start again.\n            await ResetCaptureAsync();\n            await CaptureImage();\n        }\n\n        private async void ButtonCancel_Click(object sender, Windows.UI.Xaml.RoutedEventArgs e)\n        {\n            await ResetCaptureAsync();\n        }\n\n        private async Task ResetCaptureAsync()\n        {\n            captureGrid.Visibility = Windows.UI.Xaml.Visibility.Collapsed;\n            imagePreview.Visibility = Visibility.Collapsed;\n            captureButtons.Visibility = Visibility.Collapsed;\n            previewElement.Source = null;\n            ButtonCapture.IsEnabled = true;\n\n            // Make sure we stop the preview and release resources.\n            await cameraCapture.StopPreviewAsync();\n            cameraCapture.Dispose();\n            media = null;\n        }\n\n    这段代码显示用于捕获图像的 UI，并将图像保存到存储文件中。\n\n6. 将现有的 `InsertTodoItem` 方法替换为以下代码：\n \n        private async Task InsertTodoItem(TodoItem todoItem)\n        {\n            string errorString = string.Empty;\n\n            if (media != null)\n            {\n                // Set blob properties of TodoItem.\n                todoItem.ContainerName = \"todoitemimages\";\n\n                // Use a unigue GUID to avoid collisions.\n                todoItem.ResourceName = Guid.NewGuid().ToString();\n            }\n\n            // Send the item to be inserted. When blob properties are set this\n            // generates an SAS in the response.\n            await todoTable.InsertAsync(todoItem);\n\n            // If we have a returned SAS, then upload the blob.\n            if (!string.IsNullOrEmpty(todoItem.SasQueryString))\n            {\n                // Get the URI generated that contains the SAS \n                // and extract the storage credentials.\n                StorageCredentials cred = new StorageCredentials(todoItem.SasQueryString);\n                var imageUri = new Uri(todoItem.ImageUri);\n\n                // Instantiate a Blob store container based on the info in the returned item.\n                CloudBlobContainer container = new CloudBlobContainer(\n                    new Uri(string.Format(\"https://{0}/{1}\",\n                        imageUri.Host, todoItem.ContainerName)), cred);\n\n                // Get the new image as a stream.\n                using (var inputStream = await media.OpenReadAsync())\n                {\n                    // Upload the new image as a BLOB from the stream.\n                    CloudBlockBlob blobFromSASCredential =\n                        container.GetBlockBlobReference(todoItem.ResourceName);\n                    await blobFromSASCredential.UploadFromStreamAsync(inputStream);\n                }\n\n                // When you request an SAS at the container-level instead of the blob-level,\n                // you are able to upload multiple streams using the same container credentials.\n\n                await ResetCaptureAsync();\n            }\n\n            // Add the new item to the collection.\n            items.Add(todoItem);\n        }\n\n    这段代码可向移动服务发送插入新 TodoItem 的请求。响应包含 SAS，然后可将其用于将图像从本地存储上载到 Azure Blob 存储。已上载的图像的 URL 用于数据绑定。\n\n最后一个步骤是测试应用程序的两个版本并验证从两个设备上载是否成功。\n        \n## <a name=\"test\"></a>测试在你的应用程序中上载图像\n\n1. 在 Visual Studio 中，请确保 Windows 项目被设置为默认项目，然后按 F5 键运行应用程序。\n\n2. 在“插入 TodoItem”下的文本框中输入文本，然后单击“照片”。\n\n3. 单击或点击以拍摄照片，然后单击“上载”插入新项并上载图像。\n\n    ![](./media/mobile-services-windows-universal-dotnet-upload-to-blob-storage/mobile-quickstart-blob-appbar2.png)\n\n4. 新项和已上载图像都显示在列表视图中。\n\n    ![](./media/mobile-services-windows-universal-dotnet-upload-to-blob-storage/mobile-quickstart-blob-ie.png)\n\n    >[AZURE.NOTE]新项的 *imageUri* 属性绑定到**图像**控件时，将从 Blob 存储自动下载图像。\n\n5. 停止此应用程序并重新启动该应用程序的 Windows Phone 项目版本。\n\n    显示以前上载的图像。\n\n6. 和前面一样，在文本框中输入一些文本，然后单击“照片”。\n\n    ![](./media/mobile-services-windows-universal-dotnet-upload-to-blob-storage/mobile-upload-blob-app-view-wp8.png)\n\n3. 单击预览以拍摄照片，然后单击“上载”插入新项并上载图像。\n\n    ![](./media/mobile-services-windows-universal-dotnet-upload-to-blob-storage/mobile-upload-blob-app-view-final-wp8.png)\n\n你已完成上载图像教程。\n\n<!---HONumber=74-->"
}