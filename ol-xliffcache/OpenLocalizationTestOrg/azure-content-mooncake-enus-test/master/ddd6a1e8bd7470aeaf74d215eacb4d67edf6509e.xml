{
  "nodes": [
    {
      "content": "如何通过 Java 使用表存储 | Azure",
      "pos": [
        28,
        51
      ]
    },
    {
      "content": "了解如何在 Azure 中使用表存储服务。代码示例用 Java 代码编写。",
      "pos": [
        71,
        108
      ]
    },
    {
      "content": "如何通过 Java 使用表存储",
      "pos": [
        330,
        345
      ]
    },
    {
      "content": "概述",
      "pos": [
        447,
        449
      ]
    },
    {
      "pos": [
        451,
        611
      ],
      "content": "本指南将演示如何使用 Azure 表存储服务执行常见方案。这些示例用 Java 编写并使用 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Java<ept id=\"p1\">][]</ept>。涉及的方案包括“创建”、“列出”和“删除”表，以及“插入”、“查询”、“修改”和“删除”表中的实体。有关表的详细信息，请参阅<bpt id=\"p2\">[</bpt>后续步骤<ept id=\"p2\">](#NextSteps)</ept>部分。"
    },
    {
      "pos": [
        613,
        699
      ],
      "content": "注意：为在 Android 设备上使用 Azure 存储的开发人员提供了 SDK。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Android<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "创建 Java 应用程序",
      "pos": [
        898,
        910
      ]
    },
    {
      "content": "在本指南中，你将使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。",
      "pos": [
        912,
        983
      ]
    },
    {
      "pos": [
        985,
        1224
      ],
      "content": "为此，你将需要安装 Java 开发工具包 (JDK)，并在你的 Azure 订阅中创建一个 Azure 存储帐户。完成此操作后，你将需要验证开发系统满足最低要求和 GitHub 上的 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Java<ept id=\"p1\">][]</ept> 存储库中列出的依赖项。如果你的系统满足这些要求，你可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。完成这些任务后，您将能够创建一个 Java 应用程序，以便使用本文中的示例。"
    },
    {
      "content": "配置应用程序以访问表存储",
      "pos": [
        1229,
        1241
      ]
    },
    {
      "content": "将以下导入语句添加到要在其中使用 Azure 存储 API 访问表的 Java 文件的顶部：",
      "pos": [
        1243,
        1289
      ]
    },
    {
      "content": "设置 Azure 存储连接字符串",
      "pos": [
        1499,
        1515
      ]
    },
    {
      "pos": [
        1517,
        1674
      ],
      "content": "Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 <bpt id=\"p1\">*</bpt>AccountName<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>AccountKey<ept id=\"p2\">*</ept> 值使用管理门户中列出的存储帐户的名称和存储帐户的主访问密钥。此示例演示如何声明一个静态字段以保存连接字符串："
    },
    {
      "pos": [
        1973,
        2167
      ],
      "content": "在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件 <bpt id=\"p1\">*</bpt>ServiceConfiguration.cscfg<ept id=\"p1\">*</ept> 中，并可通过调用 <bpt id=\"p2\">**</bpt>RoleEnvironment.getConfigurationSettings<ept id=\"p2\">**</ept> 方法进行访问。下面是从服务配置文件中名为 <bpt id=\"p3\">*</bpt>StorageConnectionString<ept id=\"p3\">*</ept> 的 <bpt id=\"p4\">**</bpt>Setting<ept id=\"p4\">**</ept> 元素中获取连接字符串的示例："
    },
    {
      "content": "下面的示例假定你使用了这两个方法之一来获取存储连接字符串。",
      "pos": [
        2347,
        2376
      ]
    },
    {
      "content": "如何：创建表",
      "pos": [
        2381,
        2387
      ]
    },
    {
      "pos": [
        2389,
        2606
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> 对象，您可以获得表和实体的引用对象。以下代码将创建 <bpt id=\"p2\">**</bpt>CloudTableClient<ept id=\"p2\">**</ept> 对象并使用它创建新的 <bpt id=\"p3\">**</bpt>CloudTable<ept id=\"p3\">**</ept> 对象，用于表示名为“people”的表。（注意：还有其他方式来创建 <bpt id=\"p4\">**</bpt>CloudStorageAccount<ept id=\"p4\">**</ept> 对象；有关详细信息，请参阅 <bpt id=\"p5\">[</bpt><ept id=\"p5\">Azure 存储客户端 SDK 参考]</ept>中的 <bpt id=\"p6\">**</bpt>CloudStorageAccount<ept id=\"p6\">**</ept>。）"
    },
    {
      "content": "如何：列出表",
      "pos": [
        3209,
        3215
      ]
    },
    {
      "pos": [
        3217,
        3278
      ],
      "content": "若要获取表的列表，请调用 <bpt id=\"p1\">**</bpt>CloudTableClient.listTables()<ept id=\"p1\">**</ept> 方法来检索表名称的迭代列表。"
    },
    {
      "content": "如何：向表中添加实体",
      "pos": [
        3892,
        3902
      ]
    },
    {
      "pos": [
        3904,
        4146
      ],
      "content": "实体将映射到使用实现了 <bpt id=\"p1\">**</bpt>TableEntity<ept id=\"p1\">**</ept> 的自定义类的 Java 对象。为方便起见，<bpt id=\"p2\">**</bpt>TableServiceEntity<ept id=\"p2\">**</ept> 类实现 <bpt id=\"p3\">**</bpt>TableEntity<ept id=\"p3\">**</ept>，并使用反射将属性映射到以它们本身命名的 getter 和 setter 方法。若要将实体添加到表，首先要创建用于定义实体的属性的类。以下代码定义了将客户的名字和姓氏分别用作行键和分区键的实体类。实体的分区键和行键共同唯一地标识表中的实体。查询分区键相同的实体的速度可以快于查询分区键不同的实体的速度。"
    },
    {
      "pos": [
        4858,
        5218
      ],
      "content": "涉及实体的表操作需要 <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> 对象。此对象用于定义要对实体执行的操作，该操作可使用 <bpt id=\"p2\">**</bpt>CloudTable<ept id=\"p2\">**</ept> 对象执行。以下代码创建了包含要存储的某些客户数据的 <bpt id=\"p3\">**</bpt>CustomerEntity<ept id=\"p3\">**</ept> 类的新实例。接下来，该代码调用 <bpt id=\"p4\">**</bpt>TableOperation.insertOrReplace<ept id=\"p4\">**</ept> 创建一个 <bpt id=\"p5\">**</bpt>TableOperation<ept id=\"p5\">**</ept> 对象，以便将实体插入表中，并将新的 <bpt id=\"p6\">**</bpt>CustomerEntity<ept id=\"p6\">**</ept> 与之关联。最后，该代码对 <bpt id=\"p7\">**</bpt>CloudTable<ept id=\"p7\">**</ept> 对象调用 <bpt id=\"p8\">**</bpt>execute<ept id=\"p8\">**</ept> 方法，并指定了“people”表和新的 <bpt id=\"p9\">**</bpt>TableOperation<ept id=\"p9\">**</ept>，后者随后向存储服务发送将新客户实体插入“people”表或在实体已存在的情况下替换实体的请求。"
    },
    {
      "content": "如何：插入一批实体",
      "pos": [
        6269,
        6278
      ]
    },
    {
      "pos": [
        6280,
        6546
      ],
      "content": "你可以通过一次写入操作将一批实体插入到表服务。以下代码创建一个 <bpt id=\"p1\">**</bpt>TableBatchOperation<ept id=\"p1\">**</ept> 对象，然后向其中添加三个插入操作。每个插入操作的添加方法如下：创建一个新的实体对象，设置它的值，然后对 <bpt id=\"p2\">**</bpt>TableBatchOperation<ept id=\"p2\">**</ept> 对象调用 <bpt id=\"p3\">**</bpt>insert<ept id=\"p3\">**</ept> 方法以将实体与新的插入操作相关联。然后，该代码对 <bpt id=\"p4\">**</bpt>CloudTable<ept id=\"p4\">**</ept> 调用 <bpt id=\"p5\">**</bpt>execute<ept id=\"p5\">**</ept>，并指定“people”表和 <bpt id=\"p6\">**</bpt>TableBatchOperation<ept id=\"p6\">**</ept> 对象，后者将在一个请求中向存储服务发送一批表操作。"
    },
    {
      "content": "批处理操作的注意事项如下：",
      "pos": [
        8138,
        8151
      ]
    },
    {
      "content": "您在单次批处理操作中最多可以执行 100 个插入、删除、合并、替换、插入或合并以及插入或替换操作（可以是这些操作的任意组合）。",
      "pos": [
        8155,
        8218
      ]
    },
    {
      "content": "批处理操作也可以包含检索操作，但前提是检索操作是批处理中仅有的操作。",
      "pos": [
        8221,
        8255
      ]
    },
    {
      "content": "单次批处理操作中的所有实体都必须具有相同的分区键。",
      "pos": [
        8258,
        8283
      ]
    },
    {
      "content": "批处理操作的数据负载限制为 4MB。",
      "pos": [
        8286,
        8304
      ]
    },
    {
      "content": "如何：检索分区中的所有实体",
      "pos": [
        8309,
        8322
      ]
    },
    {
      "pos": [
        8324,
        8715
      ],
      "content": "若要从表中查询分区中的实体，可以使用 <bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept>。调用 <bpt id=\"p2\">**</bpt>TableQuery.from<ept id=\"p2\">**</ept> 可创建一个针对特定表的查询，该查询将返回指定的结果类型。以下代码指定了一个筛选器，用于筛选其中的分区键是“Smith”的实体。<bpt id=\"p3\">**</bpt>TableQuery.generateFilterCondition<ept id=\"p3\">**</ept> 是一个用于创建查询筛选器的帮助器方法。对 <bpt id=\"p4\">**</bpt>TableQuery.from<ept id=\"p4\">**</ept> 方法返回的引用调用 <bpt id=\"p5\">**</bpt>where<ept id=\"p5\">**</ept> 可对查询应用筛选器。当通过对 <bpt id=\"p6\">**</bpt>CloudTable<ept id=\"p6\">**</ept> 对象调用 <bpt id=\"p7\">**</bpt>execute<ept id=\"p7\">**</ept> 来执行查询时，该查询将返回指定了 <bpt id=\"p8\">**</bpt>CustomerEntity<ept id=\"p8\">**</ept> 结果类型的 <bpt id=\"p9\">**</bpt>Iterator<ept id=\"p9\">**</ept>。然后，你可以利用在 for each 循环中返回的 <bpt id=\"p10\">**</bpt>Iterator<ept id=\"p10\">**</ept> 来使用结果。此代码会将查询结果中每个实体的字段打印到控制台。"
    },
    {
      "content": "如何：检索分区中的一部分实体",
      "pos": [
        10246,
        10260
      ]
    },
    {
      "content": "如果不想查询分区中的所有实体，则可以在筛选器中使用比较运算符来指定一个范围。以下代码组合了两个筛选器来获取分区“Smith”中的、行键（名字）以字母“E”及字母“E”前面的字母开头的所有实体。然后，该代码打印了查询结果。如果使用添加到本指南的批量插入部分的表的实体，则此次只返回两个实体（Ben 和 Denise Smith），而不会包括 Jeff Smith。",
      "pos": [
        10262,
        10443
      ]
    },
    {
      "content": "如何：检索单个实体",
      "pos": [
        12414,
        12423
      ]
    },
    {
      "pos": [
        12425,
        12716
      ],
      "content": "你可以编写查询以检索单个特定实体。以下代码使用分区键和行键参数调用 <bpt id=\"p1\">**</bpt>TableOperation.retrieve<ept id=\"p1\">**</ept> 来指定客户“Jeff Smith”，而不是创建 <bpt id=\"p2\">**</bpt>TableQuery<ept id=\"p2\">**</ept> 并使用筛选器来执行同一操作。执行的检索操作将只返回一个实体，而不会返回一个集合。<bpt id=\"p3\">**</bpt>getResultAsType<ept id=\"p3\">**</ept> 方法会将结果强制转换为分配目标的类型 - <bpt id=\"p4\">**</bpt>CustomerEntity<ept id=\"p4\">**</ept> 对象。如果此类型与为查询指定的类型不兼容，则会引发异常。如果没有实体具有完全匹配的分区键和行键，则会返回 null 值。在查询中指定分区键和行键是从表服务中检索单个实体的最快方法。"
    },
    {
      "content": "如何：修改实体",
      "pos": [
        13971,
        13978
      ]
    },
    {
      "pos": [
        13980,
        14243
      ],
      "content": "若要修改实体，请从表服务中检索它，对实体对象进行更改，然后通过替换或合并操作将更改保存回表服务。以下代码将更改现有客户的电话号码。此代码将调用 <bpt id=\"p1\">**</bpt>TableOperation.replace<ept id=\"p1\">**</ept>，而不是像执行插入时那样调用 <bpt id=\"p2\">**</bpt>TableOperation.insert<ept id=\"p2\">**</ept>。<bpt id=\"p3\">**</bpt>CloudTable.execute<ept id=\"p3\">**</ept> 方法将调用表服务，并替换该实体，除非在此应用程序检索到该实体之后另一个应用程序对它进行了更改。如果出现这种情况，则会引发异常，必须再次检索、修改并保存该实体。此乐观并发重试模式在分布式存储系统中很常见。"
    },
    {
      "content": "如何：查询实体属性子集",
      "pos": [
        15503,
        15514
      ]
    },
    {
      "pos": [
        15516,
        15745
      ],
      "content": "对表的查询可以只检索实体中的少数几个属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。以下代码中的查询使用 <bpt id=\"p1\">**</bpt>select<ept id=\"p1\">**</ept> 方法，仅返回表中实体的电子邮件地址。返回结果在 <bpt id=\"p2\">**</bpt>EntityResolver<ept id=\"p2\">**</ept>（用于对从服务器返回的实体执行类型转换）的帮助下投影到一个 <bpt id=\"p3\">**</bpt>String<ept id=\"p3\">**</ept> 集合中。你可以在此<bpt id=\"p4\">[</bpt>博客文章<ept id=\"p4\">][]</ept>中了解有关投影的详细信息。请注意，本地存储模拟器不支持投影，因此，此代码仅在使用表服务中的帐户时才能运行。"
    },
    {
      "content": "如何：插入或替换实体",
      "pos": [
        17160,
        17170
      ]
    },
    {
      "pos": [
        17172,
        17538
      ],
      "content": "你经常需要将某个实体添加到表中，但又不知道该实体是否已存在于表中。利用插入或替换操作，您可以提出一个以下形式的请求：如果实体不存在，则插入一个实体；如果实体存在，则将其替换为现有实体。以下代码基于前面的示例针对“Walter Harp”插入或替换实体。创建新实体后，此代码调用 <bpt id=\"p1\">**</bpt>TableOperation.insertOrReplace<ept id=\"p1\">**</ept> 方法。此代码随后使用表和插入或替换表操作作为参数对 <bpt id=\"p2\">**</bpt>CloudTable<ept id=\"p2\">**</ept> 对象调用 <bpt id=\"p3\">**</bpt>execute<ept id=\"p3\">**</ept>。若要只更新实体的一部分，则可以改用 <bpt id=\"p4\">**</bpt>TableOperation.insertOrMerge<ept id=\"p4\">**</ept> 方法。请注意，本地存储仿真程序不支持插入或替换，因此，此代码仅在使用表服务中的帐户时才能运行。你可以在此<bpt id=\"p5\">[</bpt>博客文章<ept id=\"p5\">][]</ept>中了解有关插入或替换以及插入或合并的更多信息。"
    },
    {
      "content": "如何：删除实体",
      "pos": [
        18554,
        18561
      ]
    },
    {
      "pos": [
        18563,
        18675
      ],
      "content": "你可以在检索到实体后轻松将其删除。检索到实体后，对要删除的实体调用 <bpt id=\"p1\">**</bpt>TableOperation.delete<ept id=\"p1\">**</ept>。然后对 <bpt id=\"p2\">**</bpt>CloudTable<ept id=\"p2\">**</ept> 对象调用 <bpt id=\"p3\">**</bpt>execute<ept id=\"p3\">**</ept>。以下代码检索并删除一个客户实体。"
    },
    {
      "content": "如何：删除表",
      "pos": [
        19867,
        19873
      ]
    },
    {
      "content": "最后，以下代码将从存储帐户中删除一个表。表在删除之后的一小段时间（通常小于四十秒）内无法重新创建。",
      "pos": [
        19875,
        19924
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        20503,
        20507
      ]
    },
    {
      "content": "现在，你已了解有关表存储的基础知识，可单击下面的链接来了解如何执行更复杂的存储任务。",
      "pos": [
        20509,
        20551
      ]
    },
    {
      "content": "Azure Storage SDK for Java",
      "pos": [
        20556,
        20582
      ]
    },
    {
      "content": "Azure 存储客户端 SDK 参考",
      "pos": [
        20589,
        20607
      ]
    },
    {
      "content": "Azure 存储 REST API",
      "pos": [
        20614,
        20631
      ]
    },
    {
      "content": "Azure 存储团队博客",
      "pos": [
        20638,
        20650
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Java 使用表存储 | Azure\" \n    description=\"了解如何在 Azure 中使用表存储服务。代码示例用 Java 代码编写。\" \n    services=\"storage\" \n    documentationCenter=\"java\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"12/01/2015\" \n    wacn.date=\"01/29/2016\"/>\n\n\n# 如何通过 Java 使用表存储\n\n[AZURE.INCLUDE [storage-selector-table-include](../includes/storage-selector-table-include.md)]\n\n## 概述\n\n本指南将演示如何使用 Azure 表存储服务执行常见方案。这些示例用 Java 编写并使用 [Azure Storage SDK for Java][]。涉及的方案包括“创建”、“列出”和“删除”表，以及“插入”、“查询”、“修改”和“删除”表中的实体。有关表的详细信息，请参阅[后续步骤](#NextSteps)部分。\n\n注意：为在 Android 设备上使用 Azure 存储的开发人员提供了 SDK。有关详细信息，请参阅 [Azure Storage SDK for Android][]。\n\n[AZURE.INCLUDE [storage-table-concepts-include](../includes/storage-table-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 Java 应用程序\n\n在本指南中，你将使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。\n\n为此，你将需要安装 Java 开发工具包 (JDK)，并在你的 Azure 订阅中创建一个 Azure 存储帐户。完成此操作后，你将需要验证开发系统满足最低要求和 GitHub 上的 [Azure Storage SDK for Java][] 存储库中列出的依赖项。如果你的系统满足这些要求，你可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。完成这些任务后，您将能够创建一个 Java 应用程序，以便使用本文中的示例。\n\n## 配置应用程序以访问表存储\n\n将以下导入语句添加到要在其中使用 Azure 存储 API 访问表的 Java 文件的顶部：\n\n    // Include the following imports to use table APIs\n    import com.microsoft.azure.storage.*;\n    import com.microsoft.azure.storage.table.*;\n    import com.microsoft.azure.storage.table.TableQuery.*;\n\n## 设置 Azure 存储连接字符串\n\nAzure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 *AccountName* 和 *AccountKey* 值使用管理门户中列出的存储帐户的名称和存储帐户的主访问密钥。此示例演示如何声明一个静态字段以保存连接字符串：\n\n    // Define the connection-string with your values.\n    public static final String storageConnectionString = \n        \"DefaultEndpointsProtocol=http;\" + \n        \"AccountName=your_storage_account;\" + \n        \"AccountKey=your_storage_account_key;\" +\n    \"EndpointSuffix=core.chinacloudapi.cn\";\n\n在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件 *ServiceConfiguration.cscfg* 中，并可通过调用 **RoleEnvironment.getConfigurationSettings** 方法进行访问。下面是从服务配置文件中名为 *StorageConnectionString* 的 **Setting** 元素中获取连接字符串的示例：\n\n    // Retrieve storage account from connection-string.\n    String storageConnectionString = \n        RoleEnvironment.getConfigurationSettings().get(\"StorageConnectionString\");\n\n下面的示例假定你使用了这两个方法之一来获取存储连接字符串。\n\n## 如何：创建表\n\n利用 **CloudTableClient** 对象，您可以获得表和实体的引用对象。以下代码将创建 **CloudTableClient** 对象并使用它创建新的 **CloudTable** 对象，用于表示名为“people”的表。（注意：还有其他方式来创建 **CloudStorageAccount** 对象；有关详细信息，请参阅 [Azure 存储客户端 SDK 参考]中的 **CloudStorageAccount**。）\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n           CloudStorageAccount.parse(storageConnectionString);\n\n       // Create the table client.\n       CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n       // Create the table if it doesn't exist.\n       String tableName = \"people\";\n       CloudTable cloudTable = new CloudTable(tableName,tableClient);\n       cloudTable.createIfNotExists();\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：列出表\n\n若要获取表的列表，请调用 **CloudTableClient.listTables()** 方法来检索表名称的迭代列表。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n        // Loop through the collection of table names.\n        for (String table : tableClient.listTables())\n        {\n          // Output each table name.\n          System.out.println(table);\n       }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：向表中添加实体\n\n实体将映射到使用实现了 **TableEntity** 的自定义类的 Java 对象。为方便起见，**TableServiceEntity** 类实现 **TableEntity**，并使用反射将属性映射到以它们本身命名的 getter 和 setter 方法。若要将实体添加到表，首先要创建用于定义实体的属性的类。以下代码定义了将客户的名字和姓氏分别用作行键和分区键的实体类。实体的分区键和行键共同唯一地标识表中的实体。查询分区键相同的实体的速度可以快于查询分区键不同的实体的速度。\n\n    public class CustomerEntity extends TableServiceEntity {\n        public CustomerEntity(String lastName, String firstName) {\n            this.partitionKey = lastName;\n            this.rowKey = firstName;\n        }\n\n        public CustomerEntity() { }\n\n        String email;\n        String phoneNumber;\n        \n        public String getEmail() {\n            return this.email;\n        }\n        \n        public void setEmail(String email) {\n            this.email = email;\n        }\n        \n        public String getPhoneNumber() {\n            return this.phoneNumber;\n        }\n        \n        public void setPhoneNumber(String phoneNumber) {\n            this.phoneNumber = phoneNumber;\n        }\n    }\n\n涉及实体的表操作需要 **TableOperation** 对象。此对象用于定义要对实体执行的操作，该操作可使用 **CloudTable** 对象执行。以下代码创建了包含要存储的某些客户数据的 **CustomerEntity** 类的新实例。接下来，该代码调用 **TableOperation.insertOrReplace** 创建一个 **TableOperation** 对象，以便将实体插入表中，并将新的 **CustomerEntity** 与之关联。最后，该代码对 **CloudTable** 对象调用 **execute** 方法，并指定了“people”表和新的 **TableOperation**，后者随后向存储服务发送将新客户实体插入“people”表或在实体已存在的情况下替换实体的请求。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n            \n        // Create a cloud table object for the table.\n        CloudTable cloudTable = tableClient.getTableReference(\"people\");\n            \n        // Create a new customer entity.\n        CustomerEntity customer1 = new CustomerEntity(\"Harp\", \"Walter\");\n        customer1.setEmail(\"Walter@contoso.com\");\n        customer1.setPhoneNumber(\"425-555-0101\");\n            \n        // Create an operation to add the new customer to the people table.\n        TableOperation insertCustomer1 = TableOperation.insertOrReplace(customer1);\n\n        // Submit the operation to the table service.\n        cloudTable.execute(insertCustomer1);\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：插入一批实体\n\n你可以通过一次写入操作将一批实体插入到表服务。以下代码创建一个 **TableBatchOperation** 对象，然后向其中添加三个插入操作。每个插入操作的添加方法如下：创建一个新的实体对象，设置它的值，然后对 **TableBatchOperation** 对象调用 **insert** 方法以将实体与新的插入操作相关联。然后，该代码对 **CloudTable** 调用 **execute**，并指定“people”表和 **TableBatchOperation** 对象，后者将在一个请求中向存储服务发送一批表操作。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n        // Define a batch operation.\n        TableBatchOperation batchOperation = new TableBatchOperation();\n\n        // Create a cloud table object for the table.\n        CloudTable cloudTable = tableClient.getTableReference(\"people\");\n\n        // Create a customer entity to add to the table.\n        CustomerEntity customer = new CustomerEntity(\"Smith\", \"Jeff\");\n        customer.setEmail(\"Jeff@contoso.com\");\n        customer.setPhoneNumber(\"425-555-0104\");\n        batchOperation.insertOrReplace(customer);\n\n       // Create another customer entity to add to the table.\n       CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n       customer2.setEmail(\"Ben@contoso.com\");\n       customer2.setPhoneNumber(\"425-555-0102\");\n       batchOperation.insertOrReplace(customer2);\n\n       // Create a third customer entity to add to the table.\n       CustomerEntity customer3 = new CustomerEntity(\"Smith\", \"Denise\");\n       customer3.setEmail(\"Denise@contoso.com\");\n       customer3.setPhoneNumber(\"425-555-0103\");\n       batchOperation.insertOrReplace(customer3);\n\n       // Execute the batch of operations on the \"people\" table.\n       cloudTable.execute(batchOperation);\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n批处理操作的注意事项如下：\n\n- 您在单次批处理操作中最多可以执行 100 个插入、删除、合并、替换、插入或合并以及插入或替换操作（可以是这些操作的任意组合）。\n- 批处理操作也可以包含检索操作，但前提是检索操作是批处理中仅有的操作。\n- 单次批处理操作中的所有实体都必须具有相同的分区键。\n- 批处理操作的数据负载限制为 4MB。\n\n## 如何：检索分区中的所有实体\n\n若要从表中查询分区中的实体，可以使用 **TableQuery**。调用 **TableQuery.from** 可创建一个针对特定表的查询，该查询将返回指定的结果类型。以下代码指定了一个筛选器，用于筛选其中的分区键是“Smith”的实体。**TableQuery.generateFilterCondition** 是一个用于创建查询筛选器的帮助器方法。对 **TableQuery.from** 方法返回的引用调用 **where** 可对查询应用筛选器。当通过对 **CloudTable** 对象调用 **execute** 来执行查询时，该查询将返回指定了 **CustomerEntity** 结果类型的 **Iterator**。然后，你可以利用在 for each 循环中返回的 **Iterator** 来使用结果。此代码会将查询结果中每个实体的字段打印到控制台。\n\n    try\n    {\n        // Define constants for filters.\n        final String PARTITION_KEY = \"PartitionKey\";\n        final String ROW_KEY = \"RowKey\";\n        final String TIMESTAMP = \"Timestamp\";\n\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n            \n       // Create a cloud table object for the table.\n       CloudTable cloudTable = tableClient.getTableReference(\"people\");\n\n        // Create a filter condition where the partition key is \"Smith\".\n        String partitionFilter = TableQuery.generateFilterCondition(\n           PARTITION_KEY, \n           QueryComparisons.EQUAL,\n           \"Smith\");\n\n       // Specify a partition query, using \"Smith\" as the partition key filter.\n       TableQuery<CustomerEntity> partitionQuery =\n           TableQuery.from(CustomerEntity.class)\n           .where(partitionFilter);\n\n        // Loop through the results, displaying information about the entity.\n        for (CustomerEntity entity : cloudTable.execute(partitionQuery)) {\n            System.out.println(entity.getPartitionKey() +\n                \" \" + entity.getRowKey() + \n                \"\\t\" + entity.getEmail() +\n                \"\\t\" + entity.getPhoneNumber());\n       }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：检索分区中的一部分实体\n\n如果不想查询分区中的所有实体，则可以在筛选器中使用比较运算符来指定一个范围。以下代码组合了两个筛选器来获取分区“Smith”中的、行键（名字）以字母“E”及字母“E”前面的字母开头的所有实体。然后，该代码打印了查询结果。如果使用添加到本指南的批量插入部分的表的实体，则此次只返回两个实体（Ben 和 Denise Smith），而不会包括 Jeff Smith。\n\n    try\n    {\n        // Define constants for filters.\n        final String PARTITION_KEY = \"PartitionKey\";\n        final String ROW_KEY = \"RowKey\";\n        final String TIMESTAMP = \"Timestamp\";\n            \n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n           CloudStorageAccount.parse(storageConnectionString);\n\n       // Create the table client.\n       CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n       // Create a cloud table object for the table.\n       CloudTable cloudTable = tableClient.getTableReference(\"people\");\n\n        // Create a filter condition where the partition key is \"Smith\".\n        String partitionFilter = TableQuery.generateFilterCondition(\n           PARTITION_KEY, \n           QueryComparisons.EQUAL,\n           \"Smith\");\n\n        // Create a filter condition where the row key is less than the letter \"E\".\n        String rowFilter = TableQuery.generateFilterCondition(\n           ROW_KEY, \n           QueryComparisons.LESS_THAN,\n           \"E\");\n\n        // Combine the two conditions into a filter expression.\n        String combinedFilter = TableQuery.combineFilters(partitionFilter, \n            Operators.AND, rowFilter);\n\n        // Specify a range query, using \"Smith\" as the partition key,\n        // with the row key being up to the letter \"E\".\n        TableQuery<CustomerEntity> rangeQuery =\n           TableQuery.from(CustomerEntity.class)\n           .where(combinedFilter);\n\n        // Loop through the results, displaying information about the entity\n        for (CustomerEntity entity : cloudTable.execute(rangeQuery)) {\n            System.out.println(entity.getPartitionKey() +\n                \" \" + entity.getRowKey() +\n                \"\\t\" + entity.getEmail() +\n                \"\\t\" + entity.getPhoneNumber());\n        }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：检索单个实体\n\n你可以编写查询以检索单个特定实体。以下代码使用分区键和行键参数调用 **TableOperation.retrieve** 来指定客户“Jeff Smith”，而不是创建 **TableQuery** 并使用筛选器来执行同一操作。执行的检索操作将只返回一个实体，而不会返回一个集合。**getResultAsType** 方法会将结果强制转换为分配目标的类型 - **CustomerEntity** 对象。如果此类型与为查询指定的类型不兼容，则会引发异常。如果没有实体具有完全匹配的分区键和行键，则会返回 null 值。在查询中指定分区键和行键是从表服务中检索单个实体的最快方法。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n        // Create a cloud table object for the table.\n        CloudTable cloudTable = tableClient.getTableReference(\"people\");\n\n        // Retrieve the entity with partition key of \"Smith\" and row key of \"Jeff\"\n        TableOperation retrieveSmithJeff = \n           TableOperation.retrieve(\"Smith\", \"Jeff\", CustomerEntity.class);\n\n       // Submit the operation to the table service and get the specific entity.\n       CustomerEntity specificEntity =\n            cloudTable.execute(retrieveSmithJeff).getResultAsType();\n            \n        // Output the entity.\n        if (specificEntity != null)\n        {\n            System.out.println(specificEntity.getPartitionKey() +\n                \" \" + specificEntity.getRowKey() +\n                \"\\t\" + specificEntity.getEmail() +\n                \"\\t\" + specificEntity.getPhoneNumber());\n       }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：修改实体\n\n若要修改实体，请从表服务中检索它，对实体对象进行更改，然后通过替换或合并操作将更改保存回表服务。以下代码将更改现有客户的电话号码。此代码将调用 **TableOperation.replace**，而不是像执行插入时那样调用 **TableOperation.insert**。**CloudTable.execute** 方法将调用表服务，并替换该实体，除非在此应用程序检索到该实体之后另一个应用程序对它进行了更改。如果出现这种情况，则会引发异常，必须再次检索、修改并保存该实体。此乐观并发重试模式在分布式存储系统中很常见。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n        // Create a cloud table object for the table.\n        CloudTable cloudTable = tableClient.getTableReference(\"people\");\n\n        // Retrieve the entity with partition key of \"Smith\" and row key of \"Jeff\".\n        TableOperation retrieveSmithJeff = \n           TableOperation.retrieve(\"Smith\", \"Jeff\", CustomerEntity.class);\n\n        // Submit the operation to the table service and get the specific entity.\n        CustomerEntity specificEntity =\n          cloudTable.execute(retrieveSmithJeff).getResultAsType();\n\n        // Specify a new phone number.\n        specificEntity.setPhoneNumber(\"425-555-0105\");\n\n        // Create an operation to replace the entity.\n        TableOperation replaceEntity = TableOperation.replace(specificEntity);\n\n        // Submit the operation to the table service.\n        cloudTable.execute(replaceEntity);\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：查询实体属性子集\n\n对表的查询可以只检索实体中的少数几个属性。此方法称为“投影”，可减少带宽并提高查询性能，尤其适用于大型实体。以下代码中的查询使用 **select** 方法，仅返回表中实体的电子邮件地址。返回结果在 **EntityResolver**（用于对从服务器返回的实体执行类型转换）的帮助下投影到一个 **String** 集合中。你可以在此[博客文章][]中了解有关投影的详细信息。请注意，本地存储模拟器不支持投影，因此，此代码仅在使用表服务中的帐户时才能运行。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n        // Create a cloud table object for the table.\n        CloudTable cloudTable = tableClient.getTableReference(\"people\");\n\n        // Define a projection query that retrieves only the Email property\n        TableQuery<CustomerEntity> projectionQuery = \n           TableQuery.from(CustomerEntity.class)\n           .select(new String[] {\"Email\"});\n\n        // Define a Entity resolver to project the entity to the Email value.\n        EntityResolver<String> emailResolver = new EntityResolver<String>() {\n            @Override\n            public String resolve(String PartitionKey, String RowKey, Date timeStamp, HashMap<String, EntityProperty> properties, String etag) {\n                return properties.get(\"Email\").getValueAsString();\n            }\n        };\n\n        // Loop through the results, displaying the Email values.\n        for (String projectedString : \n            cloudTable.execute(projectionQuery, emailResolver)) {\n                System.out.println(projectedString);\n        }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：插入或替换实体\n\n你经常需要将某个实体添加到表中，但又不知道该实体是否已存在于表中。利用插入或替换操作，您可以提出一个以下形式的请求：如果实体不存在，则插入一个实体；如果实体存在，则将其替换为现有实体。以下代码基于前面的示例针对“Walter Harp”插入或替换实体。创建新实体后，此代码调用 **TableOperation.insertOrReplace** 方法。此代码随后使用表和插入或替换表操作作为参数对 **CloudTable** 对象调用 **execute**。若要只更新实体的一部分，则可以改用 **TableOperation.insertOrMerge** 方法。请注意，本地存储仿真程序不支持插入或替换，因此，此代码仅在使用表服务中的帐户时才能运行。你可以在此[博客文章][]中了解有关插入或替换以及插入或合并的更多信息。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n        // Create a cloud table object for the table.\n        CloudTable cloudTable = tableClient.getTableReference(\"people\");\n\n        // Create a new customer entity.\n        CustomerEntity customer5 = new CustomerEntity(\"Harp\", \"Walter\");\n        customer5.setEmail(\"Walter@contoso.com\");\n        customer5.setPhoneNumber(\"425-555-0106\");\n\n        // Create an operation to add the new customer to the people table.\n        TableOperation insertCustomer5 = TableOperation.insertOrReplace(customer5);\n\n        // Submit the operation to the table service.\n        cloudTable.execute(insertCustomer5);\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：删除实体\n\n你可以在检索到实体后轻松将其删除。检索到实体后，对要删除的实体调用 **TableOperation.delete**。然后对 **CloudTable** 对象调用 **execute**。以下代码检索并删除一个客户实体。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n        // Create a cloud table object for the table.\n        CloudTable cloudTable = tableClient.getTableReference(\"people\");\n\n        // Create an operation to retrieve the entity with partition key of \"Smith\" and row key of \"Jeff\".\n        TableOperation retrieveSmithJeff = TableOperation.retrieve(\"Smith\", \"Jeff\", CustomerEntity.class);\n\n        // Retrieve the entity with partition key of \"Smith\" and row key of \"Jeff\".\n        CustomerEntity entitySmithJeff =\n            cloudTable.execute(retrieveSmithJeff).getResultAsType();\n\n        // Create an operation to delete the entity.\n        TableOperation deleteSmithJeff = TableOperation.delete(entitySmithJeff);\n\n        // Submit the delete operation to the table service.\n        cloudTable.execute(deleteSmithJeff);\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：删除表\n\n最后，以下代码将从存储帐户中删除一个表。表在删除之后的一小段时间（通常小于四十秒）内无法重新创建。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.createCloudTableClient();\n\n        // Delete the table and all its data if it exists.\n        CloudTable cloudTable = new CloudTable(\"people\",tableClient);\n        cloudTable.deleteIfExists();\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 后续步骤\n\n现在，你已了解有关表存储的基础知识，可单击下面的链接来了解如何执行更复杂的存储任务。\n\n- [Azure Storage SDK for Java][]\n- [Azure 存储客户端 SDK 参考][]\n- [Azure 存储 REST API][]\n- [Azure 存储团队博客][]\n\n[Azure SDK for Java]: /develop/java/\n[Azure Storage SDK for Java]: https://github.com/azure/azure-storage-java\n[Azure Storage SDK for Android]: https://github.com/azure/azure-storage-android\n[Azure 存储客户端 SDK 参考]: http://dl.windowsazure.com/storage/javadoc/\n[Azure 存储 REST API]: https://msdn.microsoft.com/zh-cn/library/azure/dd179355.aspx\n[Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n[博客文章]: http://blogs.msdn.com/b/windowsazurestorage/archive/2011/09/15/windows-azure-tables-introducing-upsert-and-query-projection.aspx\n\n<!---HONumber=Mooncake_0118_2016-->"
}