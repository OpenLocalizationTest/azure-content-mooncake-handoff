<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef9a2519ec1a9203afb45a30e59a78b8ba55e93e</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>向移动服务应用 (Xamarin.Forms) 添加推送通知 - 移动服务</source>
          <target state="new">向移动服务应用 (Xamarin.Forms) 添加推送通知 - 移动服务</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何借助 Azure 移动服务在 Xamarin.Forms 应用中使用推送通知。</source>
          <target state="new">了解如何借助 Azure 移动服务在 Xamarin.Forms 应用中使用推送通知。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>向 Xamarin.Forms 应用添加推送通知</source>
          <target state="new">向 Xamarin.Forms 应用添加推送通知</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>&amp;nbsp;</source>
          <target state="new">&amp;nbsp;</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>本教程演示如何使用 Azure 移动服务将推送通知发送到 Xamarin.Forms 解决方案的 iOS、Android 和 Windows Phone 应用。首先，创建移动服务。然后，将下载初学者示例、注册到相应的推送通知服务，并将代码添加到解决方案以从这些新服务接收通知。</source>
          <target state="new">本教程演示如何使用 Azure 移动服务将推送通知发送到 Xamarin.Forms 解决方案的 iOS、Android 和 Windows Phone 应用。首先，创建移动服务。然后，将下载初学者示例、注册到相应的推送通知服务，并将代码添加到解决方案以从这些新服务接收通知。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>你完成本教程后，每当用户向其中一个应用添加任务时，你的移动服务都会发送推送通知。你可以在此处找到已完成的示例：<bpt id="p1">[</bpt><ept id="p1">已完成的 Xamarin.Forms Azure 推送通知示例]</ept>。</source>
          <target state="new">你完成本教程后，每当用户向其中一个应用添加任务时，你的移动服务都会发送推送通知。你可以在此处找到已完成的示例：<bpt id="p1">[</bpt><ept id="p1">已完成的 Xamarin.Forms Azure 推送通知示例]</ept>。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>本教程需要的内容如下：</source>
          <target state="new">本教程需要的内容如下：</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>IOS 8 设备（无法在 iOS 模拟器中测试推送通知）</source>
          <target state="new">IOS 8 设备（无法在 iOS 模拟器中测试推送通知）</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>iOS 开发人员计划成员身份</source>
          <target state="new">iOS 开发人员计划成员身份</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Xamarin.iOS Studio</source>
          <target state="new">Xamarin.iOS Studio</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Azure 移动服务组件</source>
          <target state="new">Azure 移动服务组件</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>有效的 Google 帐户</source>
          <target state="new">有效的 Google 帐户</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><ept id="p1">Google Cloud Messaging 客户端组件]</ept>。在学习本教程的过程中，你将要添加此组件。</source>
          <target state="new"><bpt id="p1">[</bpt><ept id="p1">Google Cloud Messaging 客户端组件]</ept>。在学习本教程的过程中，你将要添加此组件。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>本主题内容：</source>
          <target state="new">本主题内容：</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>创建新的移动服务</source>
          <target state="new">创建新的移动服务</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>下载并配置初学者示例</source>
          <target state="new">下载并配置初学者示例</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>向 Xamarin.Forms.iOS 应用添加推送通知</source>
          <target state="new">向 Xamarin.Forms.iOS 应用添加推送通知</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>向 Xamarin.Forms.Android 应用添加推送通知</source>
          <target state="new">向 Xamarin.Forms.Android 应用添加推送通知</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>向 Xamarin.Forms.Windows 应用添加推送通知</source>
          <target state="new">向 Xamarin.Forms.Windows 应用添加推送通知</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>更新 Azure 表插入脚本将推送通知发送到所有应用</source>
          <target state="new">更新 Azure 表插入脚本将推送通知发送到所有应用</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="create-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>创建新的移动服务</source>
          <target state="new"><ph id="ph1">&lt;a name="create-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>创建新的移动服务</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>为了能够在新移动服务中存储应用程序数据，必须先创建一个新表。</source>
          <target state="new">为了能够在新移动服务中存储应用程序数据，必须先创建一个新表。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>Azure 经典门户<ept id="p1">**</ept>中单击“移动服务”，然后单击你刚刚创建的移动服务。</source>
          <target state="new">在 <bpt id="p1">**</bpt>Azure 经典门户<ept id="p1">**</ept>中单击“移动服务”，然后单击你刚刚创建的移动服务。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>单击“数据”选项卡，然后单击“+创建”。</source>
          <target state="new">单击“数据”选项卡，然后单击“+创建”。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>此时将显示“创建新表”对话框。</source>
          <target state="new">此时将显示“创建新表”对话框。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>在“表名”中键入 <bpt id="p1">_</bpt>TodoItem<ept id="p1">_</ept>，然后单击勾选按钮。</source>
          <target state="new">在“表名”中键入 <bpt id="p1">_</bpt>TodoItem<ept id="p1">_</ept>，然后单击勾选按钮。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>这将创建一个新的设置了默认权限的存储表 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept>，这意味着任何应用程序用户均可访问和更改该表中的数据。</source>
          <target state="new">这将创建一个新的设置了默认权限的存储表 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept>，这意味着任何应用程序用户均可访问和更改该表中的数据。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>移动服务快速入门中使用了相同的表名。但是，每个表是在特定于给定移动服务的架构中创建的。这是为了防止当多个移动服务使用同一数据库时发生数据冲突。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>移动服务快速入门中使用了相同的表名。但是，每个表是在特定于给定移动服务的架构中创建的。这是为了防止当多个移动服务使用同一数据库时发生数据冲突。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>单击新的 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 表，然后验证是否不存在任何数据行。</source>
          <target state="new">单击新的 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 表，然后验证是否不存在任何数据行。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>单击“列”选项卡，并验证是否只有一个“ID”列，该列是自动为你创建的。</source>
          <target state="new">单击“列”选项卡，并验证是否只有一个“ID”列，该列是自动为你创建的。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>这是对移动服务中的表的最低要求。</source>
          <target state="new">这是对移动服务中的表的最低要求。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>如果在移动服务中启用了动态架构，则通过插入或更新操作向移动服务发送 JSON 对象时，将自动创建新列。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>如果在移动服务中启用了动态架构，则通过插入或更新操作向移动服务发送 JSON 对象时，将自动创建新列。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>现在，您可以将新移动服务用作应用的数据存储。</source>
          <target state="new">现在，您可以将新移动服务用作应用的数据存储。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="download-starter-sample"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>下载并配置初学者示例</source>
          <target state="new"><ph id="ph1">&lt;a name="download-starter-sample"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>下载并配置初学者示例</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>我们将向现有示例添加推送通知。</source>
          <target state="new">我们将向现有示例添加推送通知。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>下载以下示例：<bpt id="p1">[</bpt><ept id="p1">Xamarin.Forms Azure 推送通知初学者示例]</ept>。</source>
          <target state="new">下载以下示例：<bpt id="p1">[</bpt><ept id="p1">Xamarin.Forms Azure 推送通知初学者示例]</ept>。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中单击“移动服务”，然后单击该移动服务。单击“仪表板”选项卡，并记下“站点 URL”。然后单击“管理密钥”，并记下“应用程序密钥”。从应用代码访问移动服务时，你需要使用这些值。</source>
          <target state="new">在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中单击“移动服务”，然后单击该移动服务。单击“仪表板”选项卡，并记下“站点 URL”。然后单击“管理密钥”，并记下“应用程序密钥”。从应用代码访问移动服务时，你需要使用这些值。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>在解决方案的 <bpt id="p1">**</bpt>ToDoAzure(Portable)<ept id="p1">**</ept> 项目中，打开 <bpt id="p2">**</bpt>Constants.cs<ept id="p2">**</ept> 文件，将 <ph id="ph1">`ApplicationURL`</ph> 和 <ph id="ph2">`ApplicationKey`</ph> 替换为你在上一步中获得的站点 URL 和应用程序密钥。</source>
          <target state="new">在解决方案的 <bpt id="p1">**</bpt>ToDoAzure(Portable)<ept id="p1">**</ept> 项目中，打开 <bpt id="p2">**</bpt>Constants.cs<ept id="p2">**</ept> 文件，将 <ph id="ph1">`ApplicationURL`</ph> 和 <ph id="ph2">`ApplicationKey`</ph> 替换为你在上一步中获得的站点 URL 和应用程序密钥。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="iOS"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向 Xamarin.Forms.iOS 应用添加推送通知</source>
          <target state="new"><ph id="ph1">&lt;a name="iOS"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向 Xamarin.Forms.iOS 应用添加推送通知</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>你将使用 Apple 推送通知服务 (APNS) 向 iOS 应用添加推送通知。你将需要有效的 Google 帐户和 <bpt id="p1">[</bpt><ept id="p1">Google Cloud Messaging 客户端组件]</ept>。</source>
          <target state="new">你将使用 Apple 推送通知服务 (APNS) 向 iOS 应用添加推送通知。你将需要有效的 Google 帐户和 <bpt id="p1">[</bpt><ept id="p1">Google Cloud Messaging 客户端组件]</ept>。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph>由于 Apple 推送通知服务 (APNS) 要求，你必须在支持 iOS 的设备（iPhone 或 iPad），而不是在模拟器上部署和测试推送通知。</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph>由于 Apple 推送通知服务 (APNS) 要求，你必须在支持 iOS 的设备（iPhone 或 iPad），而不是在模拟器上部署和测试推送通知。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>APNS 使用证书对你的移动服务进行身份验证。按照以下说明创建必要的证书并将其上载到你的移动服务。有关正式的 APNS 功能文档，请参阅 <bpt id="p1">[</bpt><ept id="p1">Apple 推送通知服务]</ept>。</source>
          <target state="new">APNS 使用证书对你的移动服务进行身份验证。按照以下说明创建必要的证书并将其上载到你的移动服务。有关正式的 APNS 功能文档，请参阅 <bpt id="p1">[</bpt><ept id="p1">Apple 推送通知服务]</ept>。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="certificates"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>生成证书签名请求文件</source>
          <target state="new"><ph id="ph1">&lt;a name="certificates"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>生成证书签名请求文件</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>首先，你必须生成证书签名请求 (CSR) 文件，Apple 将使用该文件生成签名证书。</source>
          <target state="new">首先，你必须生成证书签名请求 (CSR) 文件，Apple 将使用该文件生成签名证书。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>从“Utilities”（实用工具）中，运行 <bpt id="p1">**</bpt>Keychain Access<ept id="p1">**</ept> 工具。</source>
          <target state="new">从“Utilities”（实用工具）中，运行 <bpt id="p1">**</bpt>Keychain Access<ept id="p1">**</ept> 工具。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>单击“Keychain Access”，展开“Certificate Assistant”（证书助理），然后单击“Request a Certificate from a Certificate Authority...”（从证书颁发机构请求证书...）。</source>
          <target state="new">单击“Keychain Access”，展开“Certificate Assistant”（证书助理），然后单击“Request a Certificate from a Certificate Authority...”（从证书颁发机构请求证书...）。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>输入你的“User Email Address”（用户电子邮件地址），键入“Common Name”（公用名）值，确保已选择“Saved to disk”（保存到磁盘），然后单击“Continue”（继续）。</source>
          <target state="new">输入你的“User Email Address”（用户电子邮件地址），键入“Common Name”（公用名）值，确保已选择“Saved to disk”（保存到磁盘），然后单击“Continue”（继续）。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>在“Save As”（另存为）中为证书签名请求 (CSR) 文件键入一个名称，在“Where”（位置）中选择一个位置，然后单击“Save”（保存）。</source>
          <target state="new">在“Save As”（另存为）中为证书签名请求 (CSR) 文件键入一个名称，在“Where”（位置）中选择一个位置，然后单击“Save”（保存）。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>请记住你选择的位置。</source>
          <target state="new">请记住你选择的位置。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>接下来，你将要向 Apple 注册你的应用程序、启用推送通知并上载这个导出的 CSR 以创建一个推送证书。</source>
          <target state="new">接下来，你将要向 Apple 注册你的应用程序、启用推送通知并上载这个导出的 CSR 以创建一个推送证书。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="register"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>为推送通知注册应用程序</source>
          <target state="new"><ph id="ph1">&lt;a name="register"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>为推送通知注册应用程序</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>若要将推送通知从移动服务发送到 iOS 应用程序，你必须向 Apple 注册应用程序，并注册推送通知。</source>
          <target state="new">若要将推送通知从移动服务发送到 iOS 应用程序，你必须向 Apple 注册应用程序，并注册推送通知。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>如果你尚未注册应用程序，请导航到 Apple 开发人员中心的 <ph id="ph1">&lt;a href="http://go.microsoft.com/fwlink/p/?LinkId=272456" target="_blank"&gt;</ph>iOS 设置门户<ph id="ph2">&lt;/a&gt;</ph>，使用 Apple ID 登录，单击“Identifiers”（标识符），然后单击“App IDs”（应用程序 ID），最后单击“+”符号创建应用程序的应用程序 ID。</source>
          <target state="new">如果你尚未注册应用程序，请导航到 Apple 开发人员中心的 <ph id="ph1">&lt;a href="http://go.microsoft.com/fwlink/p/?LinkId=272456" target="_blank"&gt;</ph>iOS 设置门户<ph id="ph2">&lt;/a&gt;</ph>，使用 Apple ID 登录，单击“Identifiers”（标识符），然后单击“App IDs”（应用程序 ID），最后单击“+”符号创建应用程序的应用程序 ID。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>在“Description”（说明）中为应用程序键入一个名称，记住唯一的“Bundle Identifier”（捆绑标识符），在“App Services”（应用程序服务）部分中选中“Push Notifications”（推送通知）选项，然后单击“Continue”（继续）。此示例将使用 ID <bpt id="p1">**</bpt>MobileServices.Quickstart<ept id="p1">**</ept>，但你不可以重用这个 ID，因为应用程序 ID 在所有用户之间必须唯一。因此，建议在应用程序名称的后面附加完整名称或首字母。</source>
          <target state="new">在“Description”（说明）中为应用程序键入一个名称，记住唯一的“Bundle Identifier”（捆绑标识符），在“App Services”（应用程序服务）部分中选中“Push Notifications”（推送通知）选项，然后单击“Continue”（继续）。此示例将使用 ID <bpt id="p1">**</bpt>MobileServices.Quickstart<ept id="p1">**</ept>，但你不可以重用这个 ID，因为应用程序 ID 在所有用户之间必须唯一。因此，建议在应用程序名称的后面附加完整名称或首字母。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>此时将会生成你的应用程序 ID 并请求你<bpt id="p1">**</bpt>提交<ept id="p1">**</ept>该信息。单击“提交”。</source>
          <target state="new">此时将会生成你的应用程序 ID 并请求你<bpt id="p1">**</bpt>提交<ept id="p1">**</ept>该信息。单击“提交”。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>单击“Submit”（提交）后，你将会看到如下所示的“Registration complete”（注册已完成）屏幕。单击“Done”（完成）。</source>
          <target state="new">单击“Submit”（提交）后，你将会看到如下所示的“Registration complete”（注册已完成）屏幕。单击“Done”（完成）。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>找到你刚刚创建的应用程序 ID，然后单击其行。</source>
          <target state="new">找到你刚刚创建的应用程序 ID，然后单击其行。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>单击应用程序 ID 会显示有关应用程序和应用程序 ID 的详细信息。单击“设置”按钮。</source>
          <target state="new">单击应用程序 ID 会显示有关应用程序和应用程序 ID 的详细信息。单击“设置”按钮。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>滚动到屏幕底部并单击“Development Push SSL Certificate”（开发推送 SSL 证书 ）部分下的“Create Certificate...”（创建证书...）按钮。</source>
          <target state="new">滚动到屏幕底部并单击“Development Push SSL Certificate”（开发推送 SSL 证书 ）部分下的“Create Certificate...”（创建证书...）按钮。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>将显示“Add iOS Certificate”（添加 iOS 证书）助手。</source>
          <target state="new">将显示“Add iOS Certificate”（添加 iOS 证书）助手。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>注意：本教程使用开发证书。注册生产证书时使用相同的过程。将证书上载至移动服务时，只需确保设置了相同的证书类型即可。</source>
          <target state="new">注意：本教程使用开发证书。注册生产证书时使用相同的过程。将证书上载至移动服务时，只需确保设置了相同的证书类型即可。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>单击“Choose File”（选择文件），浏览到前面保存 CSR 文件的位置，然后单击“Generate”（生成）。</source>
          <target state="new">单击“Choose File”（选择文件），浏览到前面保存 CSR 文件的位置，然后单击“Generate”（生成）。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>门户创建证书之后，请单击“Download”（下载）按钮，然后单击“Done”（完成）。</source>
          <target state="new">门户创建证书之后，请单击“Download”（下载）按钮，然后单击“Done”（完成）。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>随后将会下载签名证书并将其保存到计算机上的 Downloads 文件夹。</source>
          <target state="new">随后将会下载签名证书并将其保存到计算机上的 Downloads 文件夹。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>注意：默认情况下，下载的文件（开发证书）名为 <ph id="ph1">&lt;strong&gt;</ph>aps\_development.cer<ph id="ph2">&lt;/strong&gt;</ph>。</source>
          <target state="new">注意：默认情况下，下载的文件（开发证书）名为 <ph id="ph1">&lt;strong&gt;</ph>aps\_development.cer<ph id="ph2">&lt;/strong&gt;</ph>。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>双击下载的推送证书 <bpt id="p1">**</bpt>aps\_development.cer<ept id="p1">**</ept>。</source>
          <target state="new">双击下载的推送证书 <bpt id="p1">**</bpt>aps\_development.cer<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>将在 Keychain 中安装新证书，如下所示：</source>
          <target state="new">将在 Keychain 中安装新证书，如下所示：</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>注意：证书中的名称可能不同，但将以 <ph id="ph1">&lt;strong&gt;</ph>Apple Development iOS Push Notification Services:<ph id="ph2">&lt;/strong&gt;</ph> 作为前缀。</source>
          <target state="new">注意：证书中的名称可能不同，但将以 <ph id="ph1">&lt;strong&gt;</ph>Apple Development iOS Push Notification Services:<ph id="ph2">&lt;/strong&gt;</ph> 作为前缀。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>稍后，你将要使用此证书生成一个 .p12 文件，并将其上载到移动服务以使用 APNS 启用身份验证。</source>
          <target state="new">稍后，你将要使用此证书生成一个 .p12 文件，并将其上载到移动服务以使用 APNS 启用身份验证。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="profile"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>为应用程序创建配置文件</source>
          <target state="new"><ph id="ph1">&lt;a name="profile"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>为应用程序创建配置文件</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>返回 <ph id="ph1">&lt;a href="http://go.microsoft.com/fwlink/p/?LinkId=272456" target="_blank"&gt;</ph>iOS 设置门户<ph id="ph2">&lt;/a&gt;</ph>，选择“Provisioning Profiles”（设置配置文件），选择“All”（全部），然后单击“+”按钮创建一个新的配置文件。此时会启动“Add iOS Provisiong Profile”（添加 iOS 设置配置文件）向导。</source>
          <target state="new">返回 <ph id="ph1">&lt;a href="http://go.microsoft.com/fwlink/p/?LinkId=272456" target="_blank"&gt;</ph>iOS 设置门户<ph id="ph2">&lt;/a&gt;</ph>，选择“Provisioning Profiles”（设置配置文件），选择“All”（全部），然后单击“+”按钮创建一个新的配置文件。此时会启动“Add iOS Provisiong Profile”（添加 iOS 设置配置文件）向导。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>选择“Development”（开发）下的“iOS App Development”（iOS 应用程序开发）作为设置配置文件类型，然后单击“Continue”（继续）。</source>
          <target state="new">选择“Development”（开发）下的“iOS App Development”（iOS 应用程序开发）作为设置配置文件类型，然后单击“Continue”（继续）。</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>接下来，从“App ID”（应用程序 ID）下拉列表中选择移动服务快速入门应用程序的应用程序 ID，然后单击“Continue”（继续）。</source>
          <target state="new">接下来，从“App ID”（应用程序 ID）下拉列表中选择移动服务快速入门应用程序的应用程序 ID，然后单击“Continue”（继续）。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>在“Select certificates”（选择证书）屏幕中，选择前面创建的证书，然后单击“Continue”（继续）。</source>
          <target state="new">在“Select certificates”（选择证书）屏幕中，选择前面创建的证书，然后单击“Continue”（继续）。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>接下来，选择要用于测试的“Devices”（设备），然后单击“Continue”（继续）。</source>
          <target state="new">接下来，选择要用于测试的“Devices”（设备），然后单击“Continue”（继续）。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>最后，在“Profile Name”（配置文件名称）中为配置文件选取一个名称，单击“Generate”（生成），然后单击“Done”（完成）。</source>
          <target state="new">最后，在“Profile Name”（配置文件名称）中为配置文件选取一个名称，单击“Generate”（生成），然后单击“Done”（完成）。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>此操作可创建新的配置文件。</source>
          <target state="new">此操作可创建新的配置文件。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>在 Xcode 中，打开“Organizer”（组织程序）并选择“Devices”（设备）视图，在左窗格的“Library”（库）部分选择“Provisioning Profiles”（预配配置文件），然后单击中间窗格底部的“刷新”按钮。</source>
          <target state="new">在 Xcode 中，打开“Organizer”（组织程序）并选择“Devices”（设备）视图，在左窗格的“Library”（库）部分选择“Provisioning Profiles”（预配配置文件），然后单击中间窗格底部的“刷新”按钮。</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="configure-mobileServices"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置移动服务以发送推送请求</source>
          <target state="new"><ph id="ph1">&lt;a name="configure-mobileServices"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置移动服务以发送推送请求</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>将应用注册到 APNS 并配置项目后，接下来必须配置移动服务以便与 APNS 集成。</source>
          <target state="new">将应用注册到 APNS 并配置项目后，接下来必须配置移动服务以便与 APNS 集成。</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>在 Keychain Access 中，右键单击新证书，单击“Export”（导出），为文件命名，选择 <bpt id="p1">**</bpt>.p12<ept id="p1">**</ept> 格式，然后单击“Save”（保存）。</source>
          <target state="new">在 Keychain Access 中，右键单击新证书，单击“Export”（导出），为文件命名，选择 <bpt id="p1">**</bpt>.p12<ept id="p1">**</ept> 格式，然后单击“Save”（保存）。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>记下文件名和导出的证书的位置。</source>
          <target state="new">记下文件名和导出的证书的位置。</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>登录到 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>，单击“移动服务”，然后单击你的应用。</source>
          <target state="new">登录到 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>，单击“移动服务”，然后单击你的应用。</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>单击“推送”选项卡，单击“Apple 推送通知设置”下的“上载”。</source>
          <target state="new">单击“推送”选项卡，单击“Apple 推送通知设置”下的“上载”。</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>此时将显示“上载证书”对话框。</source>
          <target state="new">此时将显示“上载证书”对话框。</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>单击“文件”，选择导出的 .p12 证书文件，输入“密码”，确保已选择正确的“模式”，单击勾选图标，然后单击“保存”。</source>
          <target state="new">单击“文件”，选择导出的 .p12 证书文件，输入“密码”，确保已选择正确的“模式”，单击勾选图标，然后单击“保存”。</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>现在，你的移动服务已配置为使用 APNS。</source>
          <target state="new">现在，你的移动服务已配置为使用 APNS。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="configure-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置 Xamarin.iOS 应用程序</source>
          <target state="new"><ph id="ph1">&lt;a name="configure-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置 Xamarin.iOS 应用程序</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>在 Xamarin.Studio 或 Visual Studio 中，打开 <bpt id="p1">**</bpt>Info.plist<ept id="p1">**</ept>，然后使用前面创建的 ID 更新“捆绑标识符”。</source>
          <target state="new">在 Xamarin.Studio 或 Visual Studio 中，打开 <bpt id="p1">**</bpt>Info.plist<ept id="p1">**</ept>，然后使用前面创建的 ID 更新“捆绑标识符”。</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>向下滚动到“Background Modes”（后台模式）并选中“Enable Background Modes”（启用后台模式）框和“Remote notifications”（远程通知）框。</source>
          <target state="new">向下滚动到“Background Modes”（后台模式）并选中“Enable Background Modes”（启用后台模式）框和“Remote notifications”（远程通知）框。</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>在解决方案面板中双击你的项目以打开“Project Options”（项目选项）。</source>
          <target state="new">在解决方案面板中双击你的项目以打开“Project Options”（项目选项）。</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>在“Build”（生成）下面选择“iOS Bundle Signing”（iOS 捆绑签名），并选择你刚刚为此项目设置的“Identity”（标识）和“Provisioning profile”（设置配置文件）。</source>
          <target state="new">在“Build”（生成）下面选择“iOS Bundle Signing”（iOS 捆绑签名），并选择你刚刚为此项目设置的“Identity”（标识）和“Provisioning profile”（设置配置文件）。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>这可以确保 Xamarin 项目使用新配置文件进行代码签名。有关正式的 Xamarin 设备设置文档，请参阅 <bpt id="p1">[</bpt><ept id="p1">Xamarin 设备设置]</ept>。</source>
          <target state="new">这可以确保 Xamarin 项目使用新配置文件进行代码签名。有关正式的 Xamarin 设备设置文档，请参阅 <bpt id="p1">[</bpt><ept id="p1">Xamarin 设备设置]</ept>。</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="add-push"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向应用程序添加推送通知</source>
          <target state="new"><ph id="ph1">&lt;a name="add-push"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向应用程序添加推送通知</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>在 Xamarin.Studio 或 Visual Studio 中，展开 <bpt id="p1">**</bpt>ToDoAzure.iOS<ept id="p1">**</ept> 项目，打开 <bpt id="p2">**</bpt>AppDelegate<ept id="p2">**</ept> 类，然后将 <bpt id="p3">**</bpt>FinishedLaunching<ept id="p3">**</ept> 事件替换为以下代码：</source>
          <target state="new">在 Xamarin.Studio 或 Visual Studio 中，展开 <bpt id="p1">**</bpt>ToDoAzure.iOS<ept id="p1">**</ept> 项目，打开 <bpt id="p2">**</bpt>AppDelegate<ept id="p2">**</ept> 类，然后将 <bpt id="p3">**</bpt>FinishedLaunching<ept id="p3">**</ept> 事件替换为以下代码：</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>AppDelegate<ept id="p1">**</ept> 中，重写 <bpt id="p2">**</bpt>RegisteredForRemoteNotifications<ept id="p2">**</ept> 事件：</source>
          <target state="new">在 <bpt id="p1">**</bpt>AppDelegate<ept id="p1">**</ept> 中，重写 <bpt id="p2">**</bpt>RegisteredForRemoteNotifications<ept id="p2">**</ept> 事件：</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>AppDelegate<ept id="p1">**</ept> 中，重写 <bpt id="p2">**</bpt>ReceivedRemoteNotification<ept id="p2">**</ept> 事件：</source>
          <target state="new">在 <bpt id="p1">**</bpt>AppDelegate<ept id="p1">**</ept> 中，重写 <bpt id="p2">**</bpt>ReceivedRemoteNotification<ept id="p2">**</ept> 事件：</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>你的应用现已更新，可支持推送通知。</source>
          <target state="new">你的应用现已更新，可支持推送通知。</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="update-scripts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在 Azure 经典门户中更新已注册的插入脚本</source>
          <target state="new"><ph id="ph1">&lt;a name="update-scripts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在 Azure 经典门户中更新已注册的插入脚本</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>在 Azure 经典门户中，单击“数据”选项卡，然后单击“TodoItem”表。</source>
          <target state="new">在 Azure 经典门户中，单击“数据”选项卡，然后单击“TodoItem”表。</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>todoitem<ept id="p1">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。</source>
          <target state="new">在 <bpt id="p1">**</bpt>todoitem<ept id="p1">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>将显示当 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 表中发生插入时所调用的函数。</source>
          <target state="new">将显示当 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 表中发生插入时所调用的函数。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>将 insert 函数替换为以下代码，然后单击“保存”：</source>
          <target state="new">将 insert 函数替换为以下代码，然后单击“保存”：</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。</source>
          <target state="new">这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>此脚本将延迟发送通知，使你有足够的时间关闭应用程序以接收 toast 通知。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>此脚本将延迟发送通知，使你有足够的时间关闭应用程序以接收 toast 通知。</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="test"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在应用程序中测试推送通知</source>
          <target state="new"><ph id="ph1">&lt;a name="test"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在应用程序中测试推送通知</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>在支持 iOS 的设备中按“运行”按钮以生成项目并启动应用程序，然后单击“确定”接受推送通知</source>
          <target state="new">在支持 iOS 的设备中按“运行”按钮以生成项目并启动应用程序，然后单击“确定”接受推送通知</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>你必须显式接受来自应用程序的推送通知。此请求只会在首次运行应用程序时出现。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>你必须显式接受来自应用程序的推送通知。此请求只会在首次运行应用程序时出现。</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>在应用中，单击“添加”按钮，添加任务标题，然后单击“保存”按钮。</source>
          <target state="new">在应用中，单击“添加”按钮，添加任务标题，然后单击“保存”按钮。</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>检查是否已收到通知，然后单击“确定”以取消通知。</source>
          <target state="new">检查是否已收到通知，然后单击“确定”以取消通知。</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>你已成功完成本教程。</source>
          <target state="new">你已成功完成本教程。</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="Android"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向 Xamarin.Forms.Android 应用添加推送通知</source>
          <target state="new"><ph id="ph1">&lt;a name="Android"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向 Xamarin.Forms.Android 应用添加推送通知</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>你将使用 Google Cloud Messaging (GCM) 服务向 Android 应用添加推送通知。你将需要有效的 Google 帐户和 <bpt id="p1">[</bpt><ept id="p1">Google Cloud Messaging 客户端组件]</ept>。</source>
          <target state="new">你将使用 Google Cloud Messaging (GCM) 服务向 Android 应用添加推送通知。你将需要有效的 Google 帐户和 <bpt id="p1">[</bpt><ept id="p1">Google Cloud Messaging 客户端组件]</ept>。</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="register"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>启用 Google Cloud Messaging</source>
          <target state="new"><ph id="ph1">&lt;a id="register"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>启用 Google Cloud Messaging</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="configure"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置移动服务以发送推送请求</source>
          <target state="new"><ph id="ph1">&lt;a id="configure"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置移动服务以发送推送请求</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="update-scripts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新已注册的插入脚本以发送通知</source>
          <target state="new"><ph id="ph1">&lt;a id="update-scripts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新已注册的插入脚本以发送通知</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>以下步骤说明了如何在 Azure 经典门户中，更新已注册到 TodoItem 表上的插入操作的脚本。你也可以在 Visual Studio 的“服务器资源管理器”的“Azure”节点中直接访问和编辑此移动服务脚本。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>以下步骤说明了如何在 Azure 经典门户中，更新已注册到 TodoItem 表上的插入操作的脚本。你也可以在 Visual Studio 的“服务器资源管理器”的“Azure”节点中直接访问和编辑此移动服务脚本。</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中，单击“数据”选项卡，然后单击“TodoItem”表。</source>
          <target state="new">在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中，单击“数据”选项卡，然后单击“TodoItem”表。</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>todoitem<ept id="p1">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。</source>
          <target state="new">在 <bpt id="p1">**</bpt>todoitem<ept id="p1">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>将显示当 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 表中发生插入时所调用的函数。</source>
          <target state="new">将显示当 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 表中发生插入时所调用的函数。</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>将 insert 函数替换为以下代码，然后单击“保存”：</source>
          <target state="new">将 insert 函数替换为以下代码，然后单击“保存”：</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。</source>
          <target state="new">这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>此脚本将延迟发送通知，使你有足够的时间关闭应用程序以接收 toast 通知。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>此脚本将延迟发送通知，使你有足够的时间关闭应用程序以接收 toast 通知。</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="configure-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>为推送通知配置现有项目</source>
          <target state="new"><ph id="ph1">&lt;a id="configure-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>为推送通知配置现有项目</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>在“解决方案”视图中，展开 Xamarin.Android 应用中的 <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> 文件夹，确保 Azure 移动服务包已安装。</source>
          <target state="new">在“解决方案”视图中，展开 Xamarin.Android 应用中的 <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> 文件夹，确保 Azure 移动服务包已安装。</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>右键单击 <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> 文件夹，单击“获取更多组件...”，搜索 <bpt id="p2">**</bpt>Google Cloud Messaging 客户端<ept id="p2">**</ept>组件，并将其添加到项目中。</source>
          <target state="new">右键单击 <bpt id="p1">**</bpt>Components<ept id="p1">**</ept> 文件夹，单击“获取更多组件...”，搜索 <bpt id="p2">**</bpt>Google Cloud Messaging 客户端<ept id="p2">**</ept>组件，并将其添加到项目中。</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>打开 MainActivity.cs 项目文件，将以下 using 语句添加到该类：</source>
          <target state="new">打开 MainActivity.cs 项目文件，将以下 using 语句添加到该类：</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>MainActivity<ept id="p1">**</ept> 类中，将以下代码添加到 <bpt id="p2">**</bpt>OnCreate<ept id="p2">**</ept> 方法中调用 <bpt id="p3">**</bpt>LoadApplication<ept id="p3">**</ept> 方法的后面：</source>
          <target state="new">在 <bpt id="p1">**</bpt>MainActivity<ept id="p1">**</ept> 类中，将以下代码添加到 <bpt id="p2">**</bpt>OnCreate<ept id="p2">**</ept> 方法中调用 <bpt id="p3">**</bpt>LoadApplication<ept id="p3">**</ept> 方法的后面：</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>你的 <bpt id="p1">**</bpt>MainActivity<ept id="p1">**</ept> 现已准备就绪，可以添加推送通知了。</source>
          <target state="new">你的 <bpt id="p1">**</bpt>MainActivity<ept id="p1">**</ept> 现已准备就绪，可以添加推送通知了。</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="add-push"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向应用程序添加推送通知代码</source>
          <target state="new"><ph id="ph1">&lt;a id="add-push"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向应用程序添加推送通知代码</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>在 ToDoAzure.Droid 项目中，创建一个名为 <ph id="ph1">`GcmService`</ph> 的新类。</source>
          <target state="new">在 ToDoAzure.Droid 项目中，创建一个名为 <ph id="ph1">`GcmService`</ph> 的新类。</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>将以下 using 语句添加到 <bpt id="p1">**</bpt>GcmService<ept id="p1">**</ept> 类：</source>
          <target state="new">将以下 using 语句添加到 <bpt id="p1">**</bpt>GcmService<ept id="p1">**</ept> 类：</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句和 <bpt id="p2">**</bpt>namespace<ept id="p2">**</ept> 声明之间添加以下权限请求：</source>
          <target state="new">在 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句和 <bpt id="p2">**</bpt>namespace<ept id="p2">**</ept> 声明之间添加以下权限请求：</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>GcmService.cs<ept id="p1">**</ept> 项目文件中，添加以下类：</source>
          <target state="new">在 <bpt id="p1">**</bpt>GcmService.cs<ept id="p1">**</ept> 项目文件中，添加以下类：</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>在上述代码中，你必须将 <bpt id="p1">_</bpt><ph id="ph1">`&lt;PROJECT_NUMBER&gt;`</ph><ept id="p1">_</ept> 替换为你在 Google 开发人员门户中预配应用时 Google 分配的项目编号。</source>
          <target state="new">在上述代码中，你必须将 <bpt id="p1">_</bpt><ph id="ph1">`&lt;PROJECT_NUMBER&gt;`</ph><ept id="p1">_</ept> 替换为你在 Google 开发人员门户中预配应用时 Google 分配的项目编号。</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>在 GcmService.cs 项目文件中，添加定义 <bpt id="p1">**</bpt>GcmService<ept id="p1">**</ept> 类的以下代码：</source>
          <target state="new">在 GcmService.cs 项目文件中，添加定义 <bpt id="p1">**</bpt>GcmService<ept id="p1">**</ept> 类的以下代码：</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>请注意，此类派生自 <bpt id="p1">**</bpt>GcmServiceBase<ept id="p1">**</ept>，<bpt id="p2">**</bpt>Service<ept id="p2">**</ept> 属性必须应用于此类。</source>
          <target state="new">请注意，此类派生自 <bpt id="p1">**</bpt>GcmServiceBase<ept id="p1">**</ept>，<bpt id="p2">**</bpt>Service<ept id="p2">**</ept> 属性必须应用于此类。</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph><bpt id="p1">**</bpt>GcmServiceBase<ept id="p1">**</ept> 类实现 <bpt id="p2">**</bpt>OnRegistered()<ept id="p2">**</ept>、<bpt id="p3">**</bpt>OnUnRegistered()<ept id="p3">**</ept>、<bpt id="p4">**</bpt>OnMessage()<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>OnError()<ept id="p5">**</ept> 方法。必须在 <bpt id="p6">**</bpt>GcmService<ept id="p6">**</ept> 类中重写这些方法。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph><bpt id="p1">**</bpt>GcmServiceBase<ept id="p1">**</ept> 类实现 <bpt id="p2">**</bpt>OnRegistered()<ept id="p2">**</ept>、<bpt id="p3">**</bpt>OnUnRegistered()<ept id="p3">**</ept>、<bpt id="p4">**</bpt>OnMessage()<ept id="p4">**</ept> 和 <bpt id="p5">**</bpt>OnError()<ept id="p5">**</ept> 方法。必须在 <bpt id="p6">**</bpt>GcmService<ept id="p6">**</ept> 类中重写这些方法。</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>将以下代码添加到 <bpt id="p1">**</bpt>GcmService<ept id="p1">**</ept> 类，以便重写 <bpt id="p2">**</bpt>OnRegistered<ept id="p2">**</ept> 事件处理程序。</source>
          <target state="new">将以下代码添加到 <bpt id="p1">**</bpt>GcmService<ept id="p1">**</ept> 类，以便重写 <bpt id="p2">**</bpt>OnRegistered<ept id="p2">**</ept> 事件处理程序。</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>此方法使用返回的 GCM 注册 ID 向 Azure 注册以获取推送通知。</source>
          <target state="new">此方法使用返回的 GCM 注册 ID 向 Azure 注册以获取推送通知。</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>GcmService<ept id="p1">**</ept> 中使用以下代码重写 <bpt id="p2">**</bpt>OnMessage<ept id="p2">**</ept> 方法：</source>
          <target state="new">在 <bpt id="p1">**</bpt>GcmService<ept id="p1">**</ept> 中使用以下代码重写 <bpt id="p2">**</bpt>OnMessage<ept id="p2">**</ept> 方法：</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>为项目编译所需的 <bpt id="p1">**</bpt>OnUnRegistered()<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>OnError()<ept id="p2">**</ept> 添加以下方法重写。</source>
          <target state="new">为项目编译所需的 <bpt id="p1">**</bpt>OnUnRegistered()<ept id="p1">**</ept> 和 <bpt id="p2">**</bpt>OnError()<ept id="p2">**</ept> 添加以下方法重写。</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>protected override void OnUnRegistered(Context context, string registrationId)</source>
          <target state="new">protected override void OnUnRegistered(Context context, string registrationId)</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>{</source>
          <target state="new">{</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Log.Error("GcmService", "Unregistered RegisterationId : " + registrationId);</source>
          <target state="new">Log.Error("GcmService", "Unregistered RegisterationId : " + registrationId);</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>}</source>
          <target state="new">}</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="test"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在应用程序中测试推送通知</source>
          <target state="new"><ph id="ph1">&lt;a id="test"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在应用程序中测试推送通知</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>你可以通过以下方式测试应用程序：使用 USB 电缆直接连接 Android 手机，或者在模拟器中使用虚拟设备。</source>
          <target state="new">你可以通过以下方式测试应用程序：使用 USB 电缆直接连接 Android 手机，或者在模拟器中使用虚拟设备。</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>当你在模拟器中运行此应用程序时，请确保使用支持 Google API 的 Android 虚拟设备 (AVD)。</source>
          <target state="new">当你在模拟器中运行此应用程序时，请确保使用支持 Google API 的 Android 虚拟设备 (AVD)。</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph>为了接收推送通知，你必须在 Android 虚拟设备上设置 Google 帐户（方法如下：在模拟器中，导航到“设置”，然后单击“添加帐户”）。此外，请确保模拟器已连接到 Internet。</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph>为了接收推送通知，你必须在 Android 虚拟设备上设置 Google 帐户（方法如下：在模拟器中，导航到“设置”，然后单击“添加帐户”）。此外，请确保模拟器已连接到 Internet。</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>从“工具”中，单击“打开 Android 模拟器管理器”，选择你的设备，然后单击“编辑”。</source>
          <target state="new">从“工具”中，单击“打开 Android 模拟器管理器”，选择你的设备，然后单击“编辑”。</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>在“目标”中选择“Google API”，然后单击“确定”。</source>
          <target state="new">在“目标”中选择“Google API”，然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>在顶部工具栏中，单击“运行”，然后选择你的应用。这将启动模拟器并运行该应用程序。</source>
          <target state="new">在顶部工具栏中，单击“运行”，然后选择你的应用。这将启动模拟器并运行该应用程序。</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>应用将从 GCM 检索 <bpt id="p1">*</bpt>registrationId<ept id="p1">*</ept> 并注册到通知中心。</source>
          <target state="new">应用将从 GCM 检索 <bpt id="p1">*</bpt>registrationId<ept id="p1">*</ept> 并注册到通知中心。</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>在应用中，添加新的任务。</source>
          <target state="new">在应用中，添加新的任务。</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>从屏幕顶部向下轻扫，打开设备的通知中心以查看通知。</source>
          <target state="new">从屏幕顶部向下轻扫，打开设备的通知中心以查看通知。</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="Windows"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向 Xamarin.Forms.Windows 应用添加推送通知</source>
          <target state="new"><ph id="ph1">&lt;a name="Windows"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>向 Xamarin.Forms.Windows 应用添加推送通知</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>本节演示如何使用 Azure 移动服务将推送通知发送到 Xamarin.Forms 解决方案包含的 Windows Phone Silverlight 应用。</source>
          <target state="new">本节演示如何使用 Azure 移动服务将推送通知发送到 Xamarin.Forms 解决方案包含的 Windows Phone Silverlight 应用。</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="update-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新应用程序以注册通知</source>
          <target state="new"><ph id="ph1">&lt;a id="update-app"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新应用程序以注册通知</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>只有在你注册通知通道后，你的应用程序才能接收推送通知。</source>
          <target state="new">只有在你注册通知通道后，你的应用程序才能接收推送通知。</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，打开文件 App.xaml.cs 并添加以下 <ph id="ph1">`using`</ph> 语句：</source>
          <target state="new">在 Visual Studio 中，打开文件 App.xaml.cs 并添加以下 <ph id="ph1">`using`</ph> 语句：</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>将以下代码添加到 App.xaml.cs：</source>
          <target state="new">将以下代码添加到 App.xaml.cs：</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>此代码检索 ChannelURI 以查找来自 Microsoft 推送通知服务 (MPNS) （由 Windows Phone 8.x "Silverlight" 使用）的应用程序， 然后注册该 ChannelURI 以支持推送通知。</source>
          <target state="new">此代码检索 ChannelURI 以查找来自 Microsoft 推送通知服务 (MPNS) （由 Windows Phone 8.x "Silverlight" 使用）的应用程序， 然后注册该 ChannelURI 以支持推送通知。</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>在本教程中，移动服务将向设备发送一条 toast 通知。而当你发送磁贴通知时，必须在通道上调用 <bpt id="p1">**</bpt>BindToShellTile<ept id="p1">**</ept> 方法。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>在本教程中，移动服务将向设备发送一条 toast 通知。而当你发送磁贴通知时，必须在通道上调用 <bpt id="p1">**</bpt>BindToShellTile<ept id="p1">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>在 App.xaml.cs 中 <bpt id="p1">**</bpt>Application\_Launching<ept id="p1">**</ept> 事件处理程序的顶部，添加对新的 <bpt id="p2">**</bpt>AcquirePushChannel<ept id="p2">**</ept> 方法的以下调用：</source>
          <target state="new">在 App.xaml.cs 中 <bpt id="p1">**</bpt>Application\_Launching<ept id="p1">**</ept> 事件处理程序的顶部，添加对新的 <bpt id="p2">**</bpt>AcquirePushChannel<ept id="p2">**</ept> 方法的以下调用：</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>这可以确保每次加载页时都会请求注册。在应用程序中，你可能只需要定期执行此注册以确保注册是最新的。</source>
          <target state="new">这可以确保每次加载页时都会请求注册。在应用程序中，你可能只需要定期执行此注册以确保注册是最新的。</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>按 <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 键以运行应用。将显示包含注册密钥的弹出式对话框。</source>
          <target state="new">按 <bpt id="p1">**</bpt>F5<ept id="p1">**</ept> 键以运行应用。将显示包含注册密钥的弹出式对话框。</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>在解决方案资源管理器中，展开“属性”，打开 WMAppManifest.xml 文件，单击“功能”选项卡并确保选中 <bpt id="p1">**</bpt>ID\_\_\_CAP\_\_\_PUSH\_NOTIFICATION<ept id="p1">**</ept> 功能。</source>
          <target state="new">在解决方案资源管理器中，展开“属性”，打开 WMAppManifest.xml 文件，单击“功能”选项卡并确保选中 <bpt id="p1">**</bpt>ID\_\_\_CAP\_\_\_PUSH\_NOTIFICATION<ept id="p1">**</ept> 功能。</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>在 VS 中启用通知</source>
          <target state="new">在 VS 中启用通知</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>这可以确保你的应用程序能够引发 toast 通知。</source>
          <target state="new">这可以确保你的应用程序能够引发 toast 通知。</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="update-scripts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新服务器脚本以发送推送通知</source>
          <target state="new"><ph id="ph1">&lt;a id="update-scripts"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>更新服务器脚本以发送推送通知</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>最后，您必须更新注册到 TodoItem 表上的插入操作的脚本，以便发送通知。</source>
          <target state="new">最后，您必须更新注册到 TodoItem 表上的插入操作的脚本，以便发送通知。</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中，单击“数据”选项卡，然后单击“TodoItem”表。</source>
          <target state="new">在 <bpt id="p1">[</bpt><ept id="p1">Azure 经典门户]</ept>中，单击“数据”选项卡，然后单击“TodoItem”表。</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>todoitem<ept id="p1">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。</source>
          <target state="new">在 <bpt id="p1">**</bpt>todoitem<ept id="p1">**</ept> 中，单击“脚本”选项卡，然后选择“插入”。</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>将显示当 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 表中发生插入时所调用的函数。</source>
          <target state="new">将显示当 <bpt id="p1">**</bpt>TodoItem<ept id="p1">**</ept> 表中发生插入时所调用的函数。</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>将 insert 函数替换为以下代码，然后单击“保存”：</source>
          <target state="new">将 insert 函数替换为以下代码，然后单击“保存”：</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。</source>
          <target state="new">这将会注册一个新的插入脚本，该脚本将推送通知（插入的文本）发送到插入请求中提供的设备。</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>单击“推送”选项卡，选中“启用未经身份验证的推送通知”，然后单击“保存”。</source>
          <target state="new">单击“推送”选项卡，选中“启用未经身份验证的推送通知”，然后单击“保存”。</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>这样，移动服务便可以连接到处于未经身份验证模式的 MPNS 以发送推送通知。</source>
          <target state="new">这样，移动服务便可以连接到处于未经身份验证模式的 MPNS 以发送推送通知。</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>本教程使用未经身份验证模式下的 MPNS。在此模式下，MPNS 将限制可发送到某个设备通道的通知数。若要解除此限制，必须生成一个证书，然后通过单击“上载”并选择该证书来上载该证书。有关生成证书的详细信息，请参阅 [设置已经过身份验证的 Web 服务以便为 Windows Phone 发送推送通知]。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>本教程使用未经身份验证模式下的 MPNS。在此模式下，MPNS 将限制可发送到某个设备通道的通知数。若要解除此限制，必须生成一个证书，然后通过单击“上载”并选择该证书来上载该证书。有关生成证书的详细信息，请参阅 [设置已经过身份验证的 Web 服务以便为 Windows Phone 发送推送通知]。</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="test"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在应用程序中测试推送通知</source>
          <target state="new"><ph id="ph1">&lt;a id="test"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在应用程序中测试推送通知</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，按 F5 键运行应用程序。</source>
          <target state="new">在 Visual Studio 中，按 F5 键运行应用程序。</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>在 Windows Phone 模拟器测试时，你可能会遇到 401 错误“未授权的 RegistrationAuthorizationException”。由于 Windows Phone 模拟器时钟与主机电脑时钟的同步问题，在调用 <ph id="ph2">`RegisterNativeAsync()`</ph> 期间可能会出现此错误。这可能会导致安全令牌被拒绝。若要解决此问题，只需在模拟器中手动设置时钟，然后再开始测试。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>在 Windows Phone 模拟器测试时，你可能会遇到 401 错误“未授权的 RegistrationAuthorizationException”。由于 Windows Phone 模拟器时钟与主机电脑时钟的同步问题，在调用 <ph id="ph2">`RegisterNativeAsync()`</ph> 期间可能会出现此错误。这可能会导致安全令牌被拒绝。若要解决此问题，只需在模拟器中手动设置时钟，然后再开始测试。</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>在应用中，创建具有标题 <bpt id="p1">**</bpt>Hello push<ept id="p1">**</ept> 的新任务，然后立即单击“开始”按钮，或者单击“后退”按钮以退出应用。</source>
          <target state="new">在应用中，创建具有标题 <bpt id="p1">**</bpt>Hello push<ept id="p1">**</ept> 的新任务，然后立即单击“开始”按钮，或者单击“后退”按钮以退出应用。</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>此时会将一个插入请求发送到移动服务，以存储添加的项。可以看到，设备收到了一条包含 <bpt id="p1">**</bpt>hello push<ept id="p1">**</ept> 字样的 toast 通知。</source>
          <target state="new">此时会将一个插入请求发送到移动服务，以存储添加的项。可以看到，设备收到了一条包含 <bpt id="p1">**</bpt>hello push<ept id="p1">**</ept> 字样的 toast 通知。</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>收到的 Toast 通知</source>
          <target state="new">收到的 Toast 通知</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>如果你仍未退出应用程序，则不会收到该通知。若要在应用处于活动状态时接收 toast 通知，你必须处理 <bpt id="p1">[</bpt>ShellToastNotificationReceived<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/windowsphone/develop/microsoft.phone.notification.httpnotificationchannel.shelltoastnotificationreceived(v=vs.105).aspx)</ept> 事件。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>如果你仍未退出应用程序，则不会收到该通知。若要在应用处于活动状态时接收 toast 通知，你必须处理 <bpt id="p1">[</bpt>ShellToastNotificationReceived<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/windowsphone/develop/microsoft.phone.notification.httpnotificationchannel.shelltoastnotificationreceived(v=vs.105).aspx)</ept> 事件。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>