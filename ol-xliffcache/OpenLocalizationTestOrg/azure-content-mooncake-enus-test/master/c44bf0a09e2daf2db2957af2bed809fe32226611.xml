{
  "nodes": [
    {
      "content": "SQL 数据仓库中用户定义的架构 | Azure",
      "pos": [
        26,
        50
      ]
    },
    {
      "content": "有关在开发解决方案时使用 Azure SQL 数据仓库中的 Transact-SQL 架构的技巧。",
      "pos": [
        68,
        117
      ]
    },
    {
      "content": "SQL 数据仓库中用户定义的架构",
      "pos": [
        341,
        357
      ]
    },
    {
      "content": "传统数据仓库通常使用不同的数据库，根据工作负荷、域或安全性来创建应用程序边界。例如，传统 SQL Server 数据仓库可能包含过渡数据库、数据仓库数据库和某些数据集市数据库。在此拓扑中，每个数据库均作为体系结构中的工作负荷和安全边界来运行。",
      "pos": [
        359,
        480
      ]
    },
    {
      "content": "相比之下，SQL 数据仓库在一个数据库中运行整个数据仓库工作负荷。不允许跨数据库联接。因此，SQL 数据仓库预期仓库使用的所有表都存储在一个数据库中。",
      "pos": [
        482,
        557
      ]
    },
    {
      "pos": [
        561,
        616
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>SQL 数据仓库不支持任何种类的跨数据库查询。因此，需要修改利用此模式的数据仓库实现。"
    },
    {
      "content": "建议",
      "pos": [
        621,
        623
      ]
    },
    {
      "content": "以下是针对使用用户定义的架构合并工作负荷、安全性、域和功能边界的一些建议",
      "pos": [
        626,
        662
      ]
    },
    {
      "content": "使用一个 SQL 数据仓库数据库来运行整个数据仓库工作负荷",
      "pos": [
        667,
        696
      ]
    },
    {
      "content": "合并现有的数据仓库环境，以使用一个 SQL 数据仓库数据库",
      "pos": [
        700,
        729
      ]
    },
    {
      "pos": [
        733,
        762
      ],
      "content": "利用<bpt id=\"p1\">**</bpt>用户定义的架构<ept id=\"p1\">**</ept>来提供以前使用数据库实现的边界。"
    },
    {
      "content": "如果以前尚未使用用户定义的架构，则就不会存在任何记录。只需使用旧数据库名称作为 SQL 数据仓库数据库中用户定义架构的基础。",
      "pos": [
        764,
        826
      ]
    },
    {
      "content": "如果已使用架构，则你可以采用以下几个选项：",
      "pos": [
        828,
        849
      ]
    },
    {
      "content": "删除旧架构名称并重新开始",
      "pos": [
        854,
        866
      ]
    },
    {
      "content": "在表名称前面附加旧架构名称，以保留旧架构名称。",
      "pos": [
        870,
        893
      ]
    },
    {
      "content": "在额外架构中的表上实现视图来重建旧架构结构，以保留旧架构名称。",
      "pos": [
        897,
        928
      ]
    },
    {
      "pos": [
        932,
        1062
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在首次检查时，选项 3 似乎像是最吸引人的选项。但是，细节决定成败。SQL 数据仓库中的视图为只读状态。任何表修改或数据修改只能针对基础表执行。选项 3 还在系统中引入了一个视图层。如果已在体系结构中使用视图，你可以再三考虑一下此选项。"
    },
    {
      "content": "示例:",
      "pos": [
        1069,
        1072
      ]
    },
    {
      "content": "基于数据库名称实现用户定义的架构",
      "pos": [
        1077,
        1093
      ]
    },
    {
      "content": "在表名称前面附加旧架构名称，以保留旧架构名称。使用工作负荷边界的架构。",
      "pos": [
        1513,
        1548
      ]
    },
    {
      "content": "使用视图保留旧架构名称",
      "pos": [
        2019,
        2030
      ]
    },
    {
      "pos": [
        2709,
        2798
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果架构策略发生任何更改，则需要检查数据库的安全模型。在许多情况下，你可以在架构级别分配权限，以简化安全模型。如果需要更高粒度的权限，可以使用数据库角色。"
    },
    {
      "content": "后续步骤",
      "pos": [
        2803,
        2807
      ]
    },
    {
      "pos": [
        2808,
        2829
      ],
      "content": "有关更多开发技巧，请参阅<bpt id=\"p1\">[</bpt>开发概述<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"SQL 数据仓库中用户定义的架构 | Azure\"\n   description=\"有关在开发解决方案时使用 Azure SQL 数据仓库中的 Transact-SQL 架构的技巧。\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.date=\"09/22/2015\"\n   wacn.date=\"01/20/2016\"/>\n\n# SQL 数据仓库中用户定义的架构\n\n传统数据仓库通常使用不同的数据库，根据工作负荷、域或安全性来创建应用程序边界。例如，传统 SQL Server 数据仓库可能包含过渡数据库、数据仓库数据库和某些数据集市数据库。在此拓扑中，每个数据库均作为体系结构中的工作负荷和安全边界来运行。\n\n相比之下，SQL 数据仓库在一个数据库中运行整个数据仓库工作负荷。不允许跨数据库联接。因此，SQL 数据仓库预期仓库使用的所有表都存储在一个数据库中。\n\n> [AZURE.NOTE]SQL 数据仓库不支持任何种类的跨数据库查询。因此，需要修改利用此模式的数据仓库实现。\n\n## 建议 \n\n以下是针对使用用户定义的架构合并工作负荷、安全性、域和功能边界的一些建议\n\n1. 使用一个 SQL 数据仓库数据库来运行整个数据仓库工作负荷\n2. 合并现有的数据仓库环境，以使用一个 SQL 数据仓库数据库\n3. 利用**用户定义的架构**来提供以前使用数据库实现的边界。\n\n如果以前尚未使用用户定义的架构，则就不会存在任何记录。只需使用旧数据库名称作为 SQL 数据仓库数据库中用户定义架构的基础。\n\n如果已使用架构，则你可以采用以下几个选项：\n\n1. 删除旧架构名称并重新开始\n2. 在表名称前面附加旧架构名称，以保留旧架构名称。\n3. 在额外架构中的表上实现视图来重建旧架构结构，以保留旧架构名称。\n\n> [AZURE.NOTE]在首次检查时，选项 3 似乎像是最吸引人的选项。但是，细节决定成败。SQL 数据仓库中的视图为只读状态。任何表修改或数据修改只能针对基础表执行。选项 3 还在系统中引入了一个视图层。如果已在体系结构中使用视图，你可以再三考虑一下此选项。\n\n\n### 示例:\n\n1. 基于数据库名称实现用户定义的架构\n\n```\nCREATE SCHEMA [stg]; -- stg previously database name for staging database\nGO\nCREATE SCHEMA [edw]; -- edw previously database name for the data warehouse\nGO\nCREATE TABLE [stg].[customer] -- create staging tables in the stg schema\n(       CustKey BIGINT NOT NULL\n,       ...\n);\nGO\nCREATE TABLE [edw].[customer] -- create data warehouse tables in the edw schema\n(       CustKey BIGINT NOT NULL\n,       ...\n);\n```\n\n2. 在表名称前面附加旧架构名称，以保留旧架构名称。使用工作负荷边界的架构。\n\n```\nCREATE SCHEMA [stg]; -- stg defines the staging boundary\nGO\nCREATE SCHEMA [edw]; -- edw defines the data warehouse boundary\nGO\nCREATE TABLE [stg].[dim_customer] --pre-pend the old schema name to the table and create in the staging boundary\n(       CustKey BIGINT NOT NULL\n,       ...\n);\nGO\nCREATE TABLE [edw].[dim_customer] --pre-pend the old schema name to the table and create in the data warehouse boundary\n(       CustKey BIGINT NOT NULL\n,       ...\n);\n```\n\n3. 使用视图保留旧架构名称\n\n```\nCREATE SCHEMA [stg]; -- stg defines the staging boundary\nGO\nCREATE SCHEMA [edw]; -- stg defines the data warehouse boundary\nGO\nCREATE SCHEMA [dim]; -- edw defines the legacy schema name boundary\nGO\nCREATE TABLE [stg].[customer] -- create the base staging tables in the staging boundary\n(       CustKey BIGINT NOT NULL\n,       ...\n)\nGO\nCREATE TABLE [edw].[customer] -- create the base data warehouse tables in the data warehouse boundary\n(       CustKey BIGINT NOT NULL\n,       ...\n)\nGO\nCREATE VIEW [dim].[customer] -- create a view in the legacy schema name boundary for presentation consistency purposes only\nAS\nSELECT  CustKey\n,       ...\nFROM    [edw].customer\n;\n```\n\n> [AZURE.NOTE]如果架构策略发生任何更改，则需要检查数据库的安全模型。在许多情况下，你可以在架构级别分配权限，以简化安全模型。如果需要更高粒度的权限，可以使用数据库角色。\n\n## 后续步骤\n有关更多开发技巧，请参阅[开发概述][]。\n\n<!--Image references-->\n\n<!--Article references-->\n[开发概述]: /documentation/articles/sql-data-warehouse-overview-develop\n\n<!--MSDN references-->\n\n<!--Other Web references-->\n\n<!---HONumber=Mooncake_1207_2015-->\n"
}