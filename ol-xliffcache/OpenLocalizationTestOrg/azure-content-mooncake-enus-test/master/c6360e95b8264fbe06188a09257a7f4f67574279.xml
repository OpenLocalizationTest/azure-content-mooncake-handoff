{
  "nodes": [
    {
      "content": ".NET 多层应用程序 | Azure",
      "pos": [
        27,
        46
      ]
    },
    {
      "content": "本 .NET 教程可帮助你在 Azure 中开发使用服务总线队列在各层之间进行通信的多层应用。",
      "pos": [
        65,
        112
      ]
    },
    {
      "content": "使用 Azure 服务总线队列创建 .NET 多层应用程序",
      "pos": [
        327,
        356
      ]
    },
    {
      "content": "介绍",
      "pos": [
        361,
        363
      ]
    },
    {
      "content": "使用 Visual Studio 和免费的 Azure SDK for .NET，可以轻松针对 Azure 进行开发。如果你还没有 Visual Studio，则此 SDK 将自动安装 Visual Studio Express，以便你能完全免费地开始针对 Azure 进行开发。本文假设你之前未使用过 Azure。完成本教程之后，你将拥有使用多项 Azure 资源的应用程序，该应用程序在本地环境中运行并演示多层应用程序的工作方式。",
      "pos": [
        365,
        582
      ]
    },
    {
      "content": "你将学习以下内容：",
      "pos": [
        584,
        593
      ]
    },
    {
      "content": "如何通过单个下载和安装来使你的计算机能够进行 Azure 开发。",
      "pos": [
        599,
        631
      ]
    },
    {
      "content": "如何使用 Visual Studio 针对 Azure 进行开发。",
      "pos": [
        636,
        669
      ]
    },
    {
      "content": "如何使用 Web 角色和辅助角色在 Azure 中创建多层应用程序。",
      "pos": [
        674,
        708
      ]
    },
    {
      "content": "如何使用服务总线队列在各层之间进行通信。",
      "pos": [
        713,
        733
      ]
    },
    {
      "pos": [
        810,
        982
      ],
      "content": "在本教程中，你将生成多层应用程序并在 Azure 云服务中运行它。前端将为 ASP.NET MVC Web 角色，后端将为辅助角色。你可以创建与前端相同的多层应用程序，作为将部署到 Azure Web 应用而不是云服务的 Web 项目。有关如何以不同方式处理 Azure Web 应用前端的说明，请参阅<bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#nextsteps)</ept>部分。"
    },
    {
      "content": "以下屏幕截图显示了已完成的应用程序。",
      "pos": [
        984,
        1002
      ]
    },
    {
      "pos": [
        1014,
        1125
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>Azure 还提供了存储队列功能。有关 Azure 存储队列和服务总线队列的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 队列和 Azure 服务总线队列 - 比较与对照<ept id=\"p1\">][sbqueuecomparison]</ept>。"
    },
    {
      "content": "方案概述：角色间通信",
      "pos": [
        1130,
        1140
      ]
    },
    {
      "content": "若要提交处理命令，以 Web 角色运行的前端 UI 组件必须与以辅助角色运行的中间层逻辑进行交互。此示例使用服务总线中转消息传送在各层之间进行通信。",
      "pos": [
        1142,
        1216
      ]
    },
    {
      "content": "在 Web 层和中间层之间使用中转消息传送将分离这两个组件。与直接消息传送（即 TCP 或 HTTP）不同，Web 层不会直接连接到中间层，而是将工作单元作为消息推送到服务总线，服务总线将以可靠方式保留这些工作单元，直到中间层准备好使用和处理它们。",
      "pos": [
        1218,
        1342
      ]
    },
    {
      "content": "服务总线提供了两个实体以支持中转消息传送、队列和主题。通过队列，发送到队列的每个消息均由一个接收方使用。主题支持发布/订阅模式，在该模式中，会为注册到主题中的订阅提供每个已发布消息。每个订阅都会以逻辑方式保留其自己的消息队列。此外，还可以使用筛选规则配置订阅，这些规则可将传递给订阅队列的消息集限制为符合筛选条件的消息集。以下示例使用服务总线队列。",
      "pos": [
        1344,
        1518
      ]
    },
    {
      "content": "与直接消息传送相比，此通信机制具有多项优势：",
      "pos": [
        1528,
        1550
      ]
    },
    {
      "pos": [
        1556,
        1703
      ],
      "content": "<bpt id=\"p1\">**</bpt>暂时分离。<ept id=\"p1\">**</ept> 使用异步消息传送模式，生产者和使用者不需要在同一时间联机。服务总线可靠地存储消息，直到使用方准备好接收它们。这将允许分布式应用程序的组件断开连接，例如，为进行维护而自动断开，或因组件故障断开连接，而不会影响系统的整体性能。此外，使用方应用程序可能只需在一天的特定时段内联机。"
    },
    {
      "pos": [
        1709,
        1863
      ],
      "content": "<bpt id=\"p1\">**</bpt>负载量。<ept id=\"p1\">**</ept> 在许多应用程序中，系统负载随时间而变化，而每个工作单元所需的处理时间通常为常量。使用队列在消息创建者与使用者之间中继意味着，只需将使用方应用程序（辅助）预配为适应平均负载而非最大负载。队列深度将随传入负载的变化而加大和减小。这将直接根据为应用程序加载提供服务所需的基础结构的数目来节省成本。"
    },
    {
      "pos": [
        1869,
        2008
      ],
      "content": "<bpt id=\"p1\">**</bpt>负载平衡。<ept id=\"p1\">**</ept> 随着负载增加，可添加更多的工作进程以从队列中读取。每条消息仅由一个辅助进程处理。另外，可通过此基于拉取的负载平衡来以最合理的方式使用辅助计算机，即使这些辅助计算机具有不同的处理能力（因为它们将以其最大速率拉取消息）也是如此。此模式通常称为<bpt id=\"p2\">*</bpt>使用者竞争<ept id=\"p2\">*</ept>模式。"
    },
    {
      "content": "以下各节讨论了实现此体系结构的代码。",
      "pos": [
        2022,
        2040
      ]
    },
    {
      "content": "设置开发环境",
      "pos": [
        2045,
        2051
      ]
    },
    {
      "content": "在你可以开始开发 Azure 应用程序之前，需要下载相应工具并设置开发环境：",
      "pos": [
        2053,
        2091
      ]
    },
    {
      "content": "若要安装 Azure SDK for .NET，请单击以下链接。",
      "pos": [
        2097,
        2129
      ]
    },
    {
      "content": "获取工具和 SDK",
      "pos": [
        2136,
        2145
      ]
    },
    {
      "content": "单击要使用的 Visual Studio 版本的链接。本教程中的步骤使用 Visual Studio 2013。",
      "pos": [
        2154,
        2210
      ]
    },
    {
      "content": "当提示你运行或保存安装文件时，请单击“运行”。",
      "pos": [
        2229,
        2252
      ]
    },
    {
      "content": "在 Web 平台安装程序中，单击“安装”，然后继续安装。",
      "pos": [
        2270,
        2298
      ]
    },
    {
      "content": "安装完成后，你便做好了开发应用的准备工作。SDK 包含了一些工具，可利用这些工具在 Visual Studio 中开发 Azure 应用程序。如果你未安装 Visual Studio，它还会安装免费的Visual Studio Express for Web。",
      "pos": [
        2317,
        2447
      ]
    },
    {
      "content": "设置服务总线命名空间",
      "pos": [
        2452,
        2462
      ]
    },
    {
      "content": "下一步是创建服务命名空间并获取共享访问签名 (SAS) 密钥。命名空间为每个通过服务总线公开的应用程序提供应用程序边界。创建服务命名空间时，系统将会生成 SAS 密钥。命名空间与 SAS 密钥的组合为服务总线提供了用于验证应用程序访问权限的凭据。",
      "pos": [
        2464,
        2587
      ]
    },
    {
      "content": "使用 Azure 经典门户设置命名空间",
      "pos": [
        2593,
        2612
      ]
    },
    {
      "pos": [
        2618,
        2637
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "在门户的左侧导航窗格中，单击“服务总线”。",
      "pos": [
        2643,
        2664
      ]
    },
    {
      "content": "在门户的下方窗格中，单击“创建”。",
      "pos": [
        2670,
        2687
      ]
    },
    {
      "content": "在“添加新命名空间”页中，输入命名空间名称。系统会立即检查该名称是否可用。",
      "pos": [
        2705,
        2742
      ]
    },
    {
      "content": "在确保命名空间名称可用后，选择应承载您的命名空间的国家或地区（确保使用在其中部署计算资源的同一国家/地区）。此外，请确保在命名空间“类型”字段中选择“消息”，在“消息层”字段中选择“标准”。",
      "pos": [
        2760,
        2855
      ]
    },
    {
      "pos": [
        2863,
        2910
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>选取要部署应用程序的<bpt id=\"p1\">**</bpt>相同区域<ept id=\"p1\">**</ept>。这将为您提供最佳性能。"
    },
    {
      "content": "单击“确定”复选标记。系统现已创建您的服务命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户配置资源。",
      "pos": [
        2916,
        2974
      ]
    },
    {
      "content": "在主窗口中，单击你的服务命名空间的名称。",
      "pos": [
        2993,
        3013
      ]
    },
    {
      "content": "单击“连接信息”。",
      "pos": [
        3031,
        3040
      ]
    },
    {
      "content": "在“访问连接信息”窗格中，找到包含 SAS 密钥和密钥名称的连接字符串。",
      "pos": [
        3059,
        3095
      ]
    },
    {
      "content": "记下这些凭据，或将它们复制到剪贴板。",
      "pos": [
        3115,
        3133
      ]
    },
    {
      "content": "创建 Web 角色",
      "pos": [
        3138,
        3147
      ]
    },
    {
      "content": "在本部分中，你将生成应用程序的前端。首先，你将创建应用程序显示的各种页面。之后，你将添加代码，以便将项提交到服务总线队列并显示有关队列的状态信息。",
      "pos": [
        3149,
        3222
      ]
    },
    {
      "content": "创建项目",
      "pos": [
        3228,
        3232
      ]
    },
    {
      "content": "使用管理员权限启动 Microsoft VisualStudio 2013 或 Microsoft Visual Studio Express。若要使用管理员权限启动 Visual Studio，请右键单击“Microsoft Visual Studio 2013”（或“Microsoft Visual Studio Express”），然后单击“以管理员身份运行”。Azure 计算模拟器（本文后面会讨论）要求使用管理员权限启动 Visual Studio。",
      "pos": [
        3238,
        3469
      ]
    },
    {
      "content": "在 Visual Studio 的“文件”菜单中，单击“新建”，然后单击“项目”。",
      "pos": [
        3475,
        3516
      ]
    },
    {
      "pos": [
        3534,
        3613
      ],
      "content": "从“Visual C#”下的“已安装模板”中，单击“云”，然后单击“Azure 云服务”。将项目命名为 <bpt id=\"p1\">**</bpt>MultiTierApp<ept id=\"p1\">**</ept>。然后，单击“确定”。"
    },
    {
      "content": "在“.NET Framework 4.5”角色中，双击“ASP.NET Web 角色”。",
      "pos": [
        3631,
        3675
      ]
    },
    {
      "content": "将鼠标指针停留在“Azure 云服务解决方案”下的“WebRole1”上，单击铅笔图标，并将 Web 角色重命名为“FrontendWebRole”。然后，单击“确定”。（请确保你输入“Frontend”而不是“FrontEnd”，此处为小写“e”。）",
      "pos": [
        3694,
        3820
      ]
    },
    {
      "content": "从“新建 ASP.NET 项目”对话框的“选择模板”列表中，单击“MVC”，然后单击“确定”。",
      "pos": [
        3839,
        3886
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击“引用”，然后单击“管理 NuGet 包”或“添加库程序包引用”。",
      "pos": [
        3905,
        3956
      ]
    },
    {
      "content": "在该对话框的左侧选择“联机”。搜索“服务总线”并选择“Azure 服务总线”项。然后，完成安装过程并关闭此对话框。",
      "pos": [
        3962,
        4019
      ]
    },
    {
      "content": "请注意，现已引用所需的客户端程序集并已添加部分新代码文件。",
      "pos": [
        4038,
        4067
      ]
    },
    {
      "pos": [
        4073,
        4152
      ],
      "content": "在“解决方案资源管理器”中，右键单击“模型”，然后依次单击“添加”和“类”。在“名称”框中，键入名称 <bpt id=\"p1\">**</bpt>OnlineOrder.cs<ept id=\"p1\">**</ept>。然后单击“添加”。"
    },
    {
      "content": "为你的 Web 角色编写代码",
      "pos": [
        4158,
        4172
      ]
    },
    {
      "content": "在本部分，你将创建应用程序显示的各种页面。",
      "pos": [
        4174,
        4195
      ]
    },
    {
      "content": "在 Visual Studio 的 OnlineOrder.cs 文件中将现有命名空间定义替换为以下代码：",
      "pos": [
        4201,
        4254
      ]
    },
    {
      "pos": [
        4492,
        4586
      ],
      "content": "在“解决方案资源管理器”中，双击“Controllers\\HomeController.cs”。在文件顶部添加以下 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句以包括针对你刚创建的模型以及服务总线的命名空间。"
    },
    {
      "content": "仍在 Visual Studio 的 HomeController.cs 文件中，将现有命名空间定义替换为以下代码。此代码包含用于处理将项提交到队列这一任务的方法。",
      "pos": [
        4713,
        4795
      ]
    },
    {
      "content": "在“生成”菜单中，单击“生成解决方案”以测试工作的准确性。",
      "pos": [
        6452,
        6481
      ]
    },
    {
      "pos": [
        6487,
        6553
      ],
      "content": "现在，你将为前面创建的 <bpt id=\"p1\">**</bpt>Submit()<ept id=\"p1\">**</ept> 方法创建视图。在 <bpt id=\"p2\">**</bpt>Submit()<ept id=\"p2\">**</ept> 方法内右键单击，然后选择“添加视图”。"
    },
    {
      "content": "此时将显示一个用于创建视图的对话框。在“模板”列表中，选择“创建”。在“模型类”列表中，单击“OnlineOrder”类。",
      "pos": [
        6572,
        6633
      ]
    },
    {
      "pos": [
        6652,
        6663
      ],
      "content": "单击<bpt id=\"p1\">**</bpt>“添加”<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "现在，请更改应用程序的显示名称。在“解决方案资源管理器”中，双击“Views\\Shared\\_Layout.cshtml”文件以在 Visual Studio 编辑器中将其打开。",
      "pos": [
        6669,
        6758
      ]
    },
    {
      "pos": [
        6764,
        6823
      ],
      "content": "将每一处 <bpt id=\"p1\">**</bpt>My ASP.NET Application<ept id=\"p1\">**</ept> 替换为 <bpt id=\"p2\">**</bpt>LITWARE'S Products<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "删除“Home”、“About”和“Contact”链接。删除突出显示的代码：",
      "pos": [
        6829,
        6868
      ]
    },
    {
      "pos": [
        6887,
        7052
      ],
      "content": "最后，修改提交页以包含有关队列的一些信息。在“解决方案资源管理器”中，双击“Views\\Home\\Submit.cshtml”文件以在 Visual Studio 编辑器中将其打开。在 <bpt id=\"p1\">**</bpt>&amp;lt;h2&gt;Submit&amp;lt;/h2&gt;<ept id=\"p1\">**</ept> 后面添加以下行。<bpt id=\"p2\">**</bpt>ViewBag.MessageCount<ept id=\"p2\">**</ept> 目前为空。稍后你将填充它。"
    },
    {
      "pos": [
        7155,
        7198
      ],
      "content": "现在，你已实现你的 UI。你可以按 <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> 运行应用程序并确认其按预期方式运行。"
    },
    {
      "content": "编写用于将项提交到 Service Bus 队列的代码",
      "pos": [
        7217,
        7244
      ]
    },
    {
      "content": "现在，你将添加用于将项提交到队列的代码。首先，你将创建一个包含服务总线队列连接信息的类。然后，你将从 Global.aspx.cs 初始化你的连接。最后，你将更新你之前在 HomeController.cs 中创建的提交代码以便实际将项提交到服务总线队列。",
      "pos": [
        7246,
        7374
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击“FrontendWebRole”（右键单击项目而不是角色）。单击“添加”，然后单击“类”。",
      "pos": [
        7380,
        7444
      ]
    },
    {
      "content": "将类命名为 QueueConnector.cs。单击“添加”以创建类。",
      "pos": [
        7450,
        7485
      ]
    },
    {
      "pos": [
        7491,
        7622
      ],
      "content": "现在，将添加可封装连接信息并初始化服务总线队列连接的代码。在 QueueConnector.cs 中添加以下代码，并输入 <bpt id=\"p1\">**</bpt>Namespace<ept id=\"p1\">**</ept>（你的服务命名空间）和 <bpt id=\"p2\">**</bpt>yourKey<ept id=\"p2\">**</ept>（前面通过 <bpt id=\"p3\">[</bpt>Azure 经典门户<ept id=\"p3\">][]</ept>获取的 SAS 密钥）的值。"
    },
    {
      "pos": [
        10015,
        10058
      ],
      "content": "稍后在本教程中，你将学习如何将<bpt id=\"p1\">**</bpt>命名空间<ept id=\"p1\">**</ept>名称和 SAS 密钥值存储在配置文件中。"
    },
    {
      "pos": [
        10064,
        10140
      ],
      "content": "现在，请确保你的 <bpt id=\"p1\">**</bpt>Initialize<ept id=\"p1\">**</ept> 方法会被调用。在“解决方案资源管理器”中，双击“Global.asax\\Global.asax.cs”。"
    },
    {
      "pos": [
        10146,
        10182
      ],
      "content": "将以下行添加到 <bpt id=\"p1\">**</bpt>Application_Start<ept id=\"p1\">**</ept> 方法的底部。"
    },
    {
      "content": "最后，更新之前创建的 Web 代码以便将项提交到队列。在“解决方案资源管理器”中，双击“Controllers\\HomeController.cs”。",
      "pos": [
        10242,
        10317
      ]
    },
    {
      "pos": [
        10323,
        10357
      ],
      "content": "更新 <bpt id=\"p1\">**</bpt>Submit()<ept id=\"p1\">**</ept> 方法（如下所示）获取队列的消息计数。"
    },
    {
      "pos": [
        10864,
        10916
      ],
      "content": "更新 <bpt id=\"p1\">**</bpt>Submit(OnlineOrder order)<ept id=\"p1\">**</ept> 方法（如下所示）将订单信息提交到队列。"
    },
    {
      "content": "现在，你可以重新运行应用程序。每当你提交订单时，消息计数都会增大。",
      "pos": [
        11405,
        11438
      ]
    },
    {
      "content": "云配置管理器",
      "pos": [
        11456,
        11462
      ]
    },
    {
      "pos": [
        11464,
        11700
      ],
      "content": "<bpt id=\"p1\">[</bpt>Microsoft.WindowsAzure.Configuration.CloudConfigurationManager<ept id=\"p1\">][]</ept> 类中的 <bpt id=\"p2\">[</bpt>GetSetting<ept id=\"p2\">][]</ept> 方法可让你从平台的配置存储中读取配置设置。例如，如果代码在 Web 或辅助角色中运行，则 <bpt id=\"p3\">[</bpt>GetSetting<ept id=\"p3\">][]</ept> 方法将读取 ServiceConfiguration.cscfg 文件；如果代码在标准的控制台应用中运行，则 <bpt id=\"p4\">[</bpt>GetSetting<ept id=\"p4\">][]</ept> 方法将读取 app.config 文件。"
    },
    {
      "pos": [
        11702,
        11943
      ],
      "content": "如果你将服务总线命名空间的连接字符串存储在配置文件中，则可以使用 <bpt id=\"p1\">[</bpt>GetSetting<ept id=\"p1\">][]</ept> 方法来读取可用于实例化 <bpt id=\"p2\">[</bpt>NamespaceMananger<ept id=\"p2\">][]</ept> 对象的连接字符串。你可以使用 <bpt id=\"p3\">[</bpt>NamespaceMananger<ept id=\"p3\">][]</ept> 实例以编程方式来配置服务总线命名空间。可以使用同一连接字符串来实例化可用于执行运行时操作（例如发送和接收消息）的客户端对象（例如 <bpt id=\"p4\">[</bpt>QueueClient<ept id=\"p4\">][]</ept>、<bpt id=\"p5\">[</bpt>TopicClient<ept id=\"p5\">][]</ept> 和 <bpt id=\"p6\">[</bpt>EventHubClient<ept id=\"p6\">][]</ept> 对象）。"
    },
    {
      "content": "连接字符串",
      "pos": [
        11949,
        11954
      ]
    },
    {
      "pos": [
        11956,
        12079
      ],
      "content": "若要实例化客户端（例如服务总线 <bpt id=\"p1\">[</bpt>QueueClient<ept id=\"p1\">][]</ept>），可以将配置信息表示为连接字符串。在客户端，有一个通过使用该连接字符串实例化客户端类型的 <ph id=\"ph1\">`CreateFromConnectionString()`</ph> 方法。例如，考虑下面的配置部分"
    },
    {
      "content": "以下代码检索连接字符串，创建队列并初始化与队列的连接。",
      "pos": [
        12354,
        12381
      ]
    },
    {
      "pos": [
        12869,
        12974
      ],
      "content": "以下部分中的代码使用 <bpt id=\"p1\">[</bpt>CloudConfigurationManager<ept id=\"p1\">][Microsoft.WindowsAzure.Configuration.CloudConfigurationManager]</ept> 类。"
    },
    {
      "content": "创建辅助角色",
      "pos": [
        12979,
        12985
      ]
    },
    {
      "content": "现在，你将创建用于处理订单提交的辅助角色。此示例使用“服务总线队列的辅助角色”Visual Studio 项目模板。首先，请使用 Visual Studio 中的“服务器资源管理器”获取所需凭据。",
      "pos": [
        12987,
        13085
      ]
    },
    {
      "content": "确保已将 Visual Studio 连接到你的 Azure 帐户。",
      "pos": [
        13090,
        13124
      ]
    },
    {
      "content": "在 Visual Studio 的“解决方案资源管理器”中，右键单击“MultiTierApp”项目下的“角色”文件夹。",
      "pos": [
        13130,
        13190
      ]
    },
    {
      "content": "单击“添加”，然后单击“新建辅助角色项目”。此时将显示“添加新角色项目”对话框。",
      "pos": [
        13196,
        13236
      ]
    },
    {
      "content": "在“添加新角色项目”对话框中，单击“服务总线队列的辅助角色”。",
      "pos": [
        13255,
        13286
      ]
    },
    {
      "pos": [
        13305,
        13353
      ],
      "content": "在“名称”框中，将项目命名为 <bpt id=\"p1\">**</bpt>OrderProcessingRole<ept id=\"p1\">**</ept>。然后单击“添加”。"
    },
    {
      "pos": [
        13359,
        13516
      ],
      "content": "在“服务器资源管理器”中，右键单击服务命名空间的名称，然后单击“属性”。在 Visual Studio 的“属性”窗格中，第一个条目包含使用包含所需授权凭据的命名空间终结点填充的连接字符串。例如，请参阅以下屏幕截图。双击“ConnectionString”，然后按 <bpt id=\"p1\">**</bpt>Ctrl+C<ept id=\"p1\">**</ept> 将此字符串复制到剪贴板中。"
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击你在步骤 5 中创建的“OrderProcessingRole”（确保右键单击“角色”下的“OrderProcessingRole”而不是类）。然后单击“属性”。",
      "pos": [
        13535,
        13634
      ]
    },
    {
      "content": "在“属性”对话框的“设置”选项卡中，在“Microsoft.ServiceBus.ConnectionString”的“值”框内单击，然后粘贴你在步骤 6 中复制的终结点值。",
      "pos": [
        13640,
        13727
      ]
    },
    {
      "pos": [
        13746,
        13871
      ],
      "content": "当你从队列中处理订单时，创建一个 <bpt id=\"p1\">**</bpt>OnlineOrder<ept id=\"p1\">**</ept> 类来表示这些订单。你可以重用已创建的类。在“解决方案资源管理器”中，右键单击“OrderProcessingRole”项目（右键单击项目而不是角色）。单击“添加”，然后单击“现有项”。"
    },
    {
      "pos": [
        13877,
        13945
      ],
      "content": "浏览到 <bpt id=\"p1\">**</bpt>FrontendWebRole\\Models<ept id=\"p1\">**</ept> 的子文件夹，然后双击“OnlineOrder.cs”以将其添加到此项目中。"
    },
    {
      "pos": [
        13951,
        14062
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>WorkerRole.cs<ept id=\"p1\">**</ept> 中，将 <bpt id=\"p2\">**</bpt>WorkerRole.cs<ept id=\"p2\">**</ept> 中 <bpt id=\"p3\">**</bpt>QueueName<ept id=\"p3\">**</ept> 变量的值 <ph id=\"ph1\">`\"ProcessingQueue\"`</ph> 替换为 <ph id=\"ph2\">`\"OrdersQueue\"`</ph>，如以下代码所示。"
    },
    {
      "content": "在 WorkerRole.cs 文件顶部添加以下 using 语句。",
      "pos": [
        14152,
        14186
      ]
    },
    {
      "pos": [
        14231,
        14278
      ],
      "content": "在 <ph id=\"ph1\">`Run()`</ph> 函数的 <ph id=\"ph2\">`OnMessage`</ph> 调用中，添加以下代码到 <ph id=\"ph3\">`try`</ph> 子句。"
    },
    {
      "content": "你已完成此应用程序。你可以测试整个应用程序，方法是右键单击“解决方案资源管理器”中的 MultiTierApp 项目，选择“设置为启动项目”，然后按 F5。请注意，消息计数不会递增，因为辅助角色会处理队列中的项并将其标记为完成。你可以通过查看 Azure 计算模拟器 UI 来查看辅助角色的跟踪输出。可通过右击任务栏的通知区域中的模拟器图标并选择“显示计算模拟器 UI”来执行此操作。",
      "pos": [
        14603,
        14795
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        14826,
        14830
      ]
    },
    {
      "content": "若要了解有关 Service Bus 的详细信息，请参阅以下资源：",
      "pos": [
        14834,
        14867
      ]
    },
    {
      "content": "Azure 服务总线",
      "pos": [
        14872,
        14882
      ]
    },
    {
      "content": "服务总线服务页",
      "pos": [
        14897,
        14904
      ]
    },
    {
      "content": "如何使用 Service Bus 队列",
      "pos": [
        14920,
        14939
      ]
    },
    {
      "content": "若要了解有关多层方案的详细信息，或者要了解如何将应用程序部署到云服务，请参阅：",
      "pos": [
        14959,
        14998
      ]
    },
    {
      "content": "使用存储表、队列和 Blob 的 .NET 多层应用程序",
      "pos": [
        15003,
        15031
      ]
    },
    {
      "pos": [
        15053,
        15155
      ],
      "content": "你可能需要在 Azure Web 应用而不是 Azure 云服务中实现多层应用程序的前端。若要详细了解 Web 应用和云服务之间的差异，请参阅 <bpt id=\"p1\">[</bpt>Azure 执行模型<ept id=\"p1\">][executionmodels]</ept>。"
    },
    {
      "content": "若要实施在本教程中以标准 Web 项目而不是云服务 Web 角色方式创建的应用程序，请遵循本教程中的步骤，但需注意以下差异：",
      "pos": [
        15157,
        15219
      ]
    },
    {
      "content": "创建项目时，请选择 Web 类别中的“ASP.NET MVC Web 应用程序”项目模板，而不是“云”类别中的“云服务”模板。然后，请遵循创建 MVC 应用程序时遵循的相同指导，直到你转到“云配置管理器”部分。",
      "pos": [
        15224,
        15329
      ]
    },
    {
      "content": "创建辅助角色时，请在新的独立解决方案中创建它，采用的说明与创建 Web 角色所用的原始说明类似。不过现在，你只是在云服务项目中创建辅助角色。然后，请遵循创建辅助角色所用的相同说明。",
      "pos": [
        15334,
        15424
      ]
    },
    {
      "content": "你可以分别测试前端和后端，也可以在单独的 Visual Studio 实例中同时运行这二者。",
      "pos": [
        15429,
        15475
      ]
    },
    {
      "pos": [
        15477,
        15676
      ],
      "content": "若要了解如何将前端部署到 Azure Web 应用，请参阅[在 Azure App Service 中创建 ASP.NET Web 应用]](/documentation/articles/web-sites-dotnet-get-started)。若要了解如何将后端部署到 Azure 云服务，请参阅<bpt id=\"p1\">[</bpt>使用存储表、队列和 Blob 的 .NET 多层应用程序<ept id=\"p1\">][mutitierstorage]</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\".NET 多层应用程序 | Azure\"\n    description=\"本 .NET 教程可帮助你在 Azure 中开发使用服务总线队列在各层之间进行通信的多层应用。\"\n    services=\"service-bus\"\n    documentationCenter=\".net\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.date=\"10/07/2015\"\n    wacn.date=\"01/21/2016\"/>\n\n# 使用 Azure 服务总线队列创建 .NET 多层应用程序\n\n## 介绍\n\n使用 Visual Studio 和免费的 Azure SDK for .NET，可以轻松针对 Azure 进行开发。如果你还没有 Visual Studio，则此 SDK 将自动安装 Visual Studio Express，以便你能完全免费地开始针对 Azure 进行开发。本文假设你之前未使用过 Azure。完成本教程之后，你将拥有使用多项 Azure 资源的应用程序，该应用程序在本地环境中运行并演示多层应用程序的工作方式。\n\n你将学习以下内容：\n\n-   如何通过单个下载和安装来使你的计算机能够进行 Azure 开发。\n-   如何使用 Visual Studio 针对 Azure 进行开发。\n-   如何使用 Web 角色和辅助角色在 Azure 中创建多层应用程序。\n-   如何使用服务总线队列在各层之间进行通信。\n\n[AZURE.INCLUDE [create-account-note](../includes/create-account-note.md)]\n\n在本教程中，你将生成多层应用程序并在 Azure 云服务中运行它。前端将为 ASP.NET MVC Web 角色，后端将为辅助角色。你可以创建与前端相同的多层应用程序，作为将部署到 Azure Web 应用而不是云服务的 Web 项目。有关如何以不同方式处理 Azure Web 应用前端的说明，请参阅[后续步骤](#nextsteps)部分。\n\n以下屏幕截图显示了已完成的应用程序。\n\n![][0]\n\n> [AZURE.NOTE]Azure 还提供了存储队列功能。有关 Azure 存储队列和服务总线队列的详细信息，请参阅 [Azure 队列和 Azure 服务总线队列 - 比较与对照][sbqueuecomparison]。\n\n## 方案概述：角色间通信\n\n若要提交处理命令，以 Web 角色运行的前端 UI 组件必须与以辅助角色运行的中间层逻辑进行交互。此示例使用服务总线中转消息传送在各层之间进行通信。\n\n在 Web 层和中间层之间使用中转消息传送将分离这两个组件。与直接消息传送（即 TCP 或 HTTP）不同，Web 层不会直接连接到中间层，而是将工作单元作为消息推送到服务总线，服务总线将以可靠方式保留这些工作单元，直到中间层准备好使用和处理它们。\n\n服务总线提供了两个实体以支持中转消息传送、队列和主题。通过队列，发送到队列的每个消息均由一个接收方使用。主题支持发布/订阅模式，在该模式中，会为注册到主题中的订阅提供每个已发布消息。每个订阅都会以逻辑方式保留其自己的消息队列。此外，还可以使用筛选规则配置订阅，这些规则可将传递给订阅队列的消息集限制为符合筛选条件的消息集。以下示例使用服务总线队列。\n\n![][1]\n\n与直接消息传送相比，此通信机制具有多项优势：\n\n-   **暂时分离。** 使用异步消息传送模式，生产者和使用者不需要在同一时间联机。服务总线可靠地存储消息，直到使用方准备好接收它们。这将允许分布式应用程序的组件断开连接，例如，为进行维护而自动断开，或因组件故障断开连接，而不会影响系统的整体性能。此外，使用方应用程序可能只需在一天的特定时段内联机。\n\n-   **负载量。** 在许多应用程序中，系统负载随时间而变化，而每个工作单元所需的处理时间通常为常量。使用队列在消息创建者与使用者之间中继意味着，只需将使用方应用程序（辅助）预配为适应平均负载而非最大负载。队列深度将随传入负载的变化而加大和减小。这将直接根据为应用程序加载提供服务所需的基础结构的数目来节省成本。\n\n-   **负载平衡。** 随着负载增加，可添加更多的工作进程以从队列中读取。每条消息仅由一个辅助进程处理。另外，可通过此基于拉取的负载平衡来以最合理的方式使用辅助计算机，即使这些辅助计算机具有不同的处理能力（因为它们将以其最大速率拉取消息）也是如此。此模式通常称为*使用者竞争*模式。\n\n    ![][2]\n\n以下各节讨论了实现此体系结构的代码。\n\n## 设置开发环境\n\n在你可以开始开发 Azure 应用程序之前，需要下载相应工具并设置开发环境：\n\n1.  若要安装 Azure SDK for .NET，请单击以下链接。\n\n    [获取工具和 SDK][]\n\n2.  单击要使用的 Visual Studio 版本的链接。本教程中的步骤使用 Visual Studio 2013。\n\n    ![][32]\n\n3.  当提示你运行或保存安装文件时，请单击“运行”。\n\n    ![][3]\n\n4.  在 Web 平台安装程序中，单击“安装”，然后继续安装。\n\n    ![][33]\n\n5.  安装完成后，你便做好了开发应用的准备工作。SDK 包含了一些工具，可利用这些工具在 Visual Studio 中开发 Azure 应用程序。如果你未安装 Visual Studio，它还会安装免费的Visual Studio Express for Web。\n\n## 设置服务总线命名空间\n\n下一步是创建服务命名空间并获取共享访问签名 (SAS) 密钥。命名空间为每个通过服务总线公开的应用程序提供应用程序边界。创建服务命名空间时，系统将会生成 SAS 密钥。命名空间与 SAS 密钥的组合为服务总线提供了用于验证应用程序访问权限的凭据。\n\n### 使用 Azure 经典门户设置命名空间\n\n1.  登录到 [Azure 经典门户][]。\n\n2.  在门户的左侧导航窗格中，单击“服务总线”。\n\n3.  在门户的下方窗格中，单击“创建”。\n\n    ![][6]\n\n4.  在“添加新命名空间”页中，输入命名空间名称。系统会立即检查该名称是否可用。\n\n    ![][7]\n\n5.  在确保命名空间名称可用后，选择应承载您的命名空间的国家或地区（确保使用在其中部署计算资源的同一国家/地区）。此外，请确保在命名空间“类型”字段中选择“消息”，在“消息层”字段中选择“标准”。\n\n    > [AZURE.IMPORTANT]选取要部署应用程序的**相同区域**。这将为您提供最佳性能。\n\n6.  单击“确定”复选标记。系统现已创建您的服务命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户配置资源。\n\n    ![][27]\n\n7.  在主窗口中，单击你的服务命名空间的名称。\n\n    ![][30]\n\n8. 单击“连接信息”。\n\n    ![][31]\n\n9.  在“访问连接信息”窗格中，找到包含 SAS 密钥和密钥名称的连接字符串。\n\n    ![][35]\n\n10.  记下这些凭据，或将它们复制到剪贴板。\n\n## 创建 Web 角色\n\n在本部分中，你将生成应用程序的前端。首先，你将创建应用程序显示的各种页面。之后，你将添加代码，以便将项提交到服务总线队列并显示有关队列的状态信息。\n\n### 创建项目\n\n1.  使用管理员权限启动 Microsoft VisualStudio 2013 或 Microsoft Visual Studio Express。若要使用管理员权限启动 Visual Studio，请右键单击“Microsoft Visual Studio 2013”（或“Microsoft Visual Studio Express”），然后单击“以管理员身份运行”。Azure 计算模拟器（本文后面会讨论）要求使用管理员权限启动 Visual Studio。\n\n    在 Visual Studio 的“文件”菜单中，单击“新建”，然后单击“项目”。\n\n    ![][8]\n\n2.  从“Visual C#”下的“已安装模板”中，单击“云”，然后单击“Azure 云服务”。将项目命名为 **MultiTierApp**。然后，单击“确定”。\n\n    ![][9]\n\n3.  在“.NET Framework 4.5”角色中，双击“ASP.NET Web 角色”。\n\n    ![][10]\n\n4.  将鼠标指针停留在“Azure 云服务解决方案”下的“WebRole1”上，单击铅笔图标，并将 Web 角色重命名为“FrontendWebRole”。然后，单击“确定”。（请确保你输入“Frontend”而不是“FrontEnd”，此处为小写“e”。）\n\n    ![][11]\n\n5.  从“新建 ASP.NET 项目”对话框的“选择模板”列表中，单击“MVC”，然后单击“确定”。\n\n    ![][12]\n\n6.  在“解决方案资源管理器”中，右键单击“引用”，然后单击“管理 NuGet 包”或“添加库程序包引用”。\n\n7.  在该对话框的左侧选择“联机”。搜索“服务总线”并选择“Azure 服务总线”项。然后，完成安装过程并关闭此对话框。\n\n    ![][13]\n\n8.  请注意，现已引用所需的客户端程序集并已添加部分新代码文件。\n\n9.  在“解决方案资源管理器”中，右键单击“模型”，然后依次单击“添加”和“类”。在“名称”框中，键入名称 **OnlineOrder.cs**。然后单击“添加”。\n\n### 为你的 Web 角色编写代码\n\n在本部分，你将创建应用程序显示的各种页面。\n\n1.  在 Visual Studio 的 OnlineOrder.cs 文件中将现有命名空间定义替换为以下代码：\n\n        namespace FrontendWebRole.Models\n        {\n            public class OnlineOrder\n            {\n                public string Customer { get; set; }\n                public string Product { get; set; }\n            }\n        }\n\n2.  在“解决方案资源管理器”中，双击“Controllers\\HomeController.cs”。在文件顶部添加以下 **using** 语句以包括针对你刚创建的模型以及服务总线的命名空间。\n\n        using FrontendWebRole.Models;\n        using Microsoft.ServiceBus.Messaging;\n        using Microsoft.ServiceBus;\n\n3.  仍在 Visual Studio 的 HomeController.cs 文件中，将现有命名空间定义替换为以下代码。此代码包含用于处理将项提交到队列这一任务的方法。\n\n        namespace FrontendWebRole.Controllers\n        {\n            public class HomeController : Controller\n            {\n                public ActionResult Index()\n                {\n                    // Simply redirect to Submit, since Submit will serve as the\n                    // front page of this application.\n                    return RedirectToAction(\"Submit\");\n                }\n\n                public ActionResult About()\n                {\n                    return View();\n                }\n\n                // GET: /Home/Submit.\n                // Controller method for a view you will create for the submission\n                // form.\n                public ActionResult Submit()\n                {\n                    // Will put code for displaying queue message count here.\n\n                    return View();\n                }\n\n                // POST: /Home/Submit.\n                // Controller method for handling submissions from the submission\n                // form.\n                [HttpPost]\n                // Attribute to help prevent cross-site scripting attacks and\n                // cross-site request forgery.  \n                [ValidateAntiForgeryToken]\n                public ActionResult Submit(OnlineOrder order)\n                {\n                    if (ModelState.IsValid)\n                    {\n                        // Will put code for submitting to queue here.\n\n                        return RedirectToAction(\"Submit\");\n                    }\n                    else\n                    {\n                        return View(order);\n                    }\n                }\n            }\n        }\n\n4.  在“生成”菜单中，单击“生成解决方案”以测试工作的准确性。\n\n5.  现在，你将为前面创建的 **Submit()** 方法创建视图。在 **Submit()** 方法内右键单击，然后选择“添加视图”。\n\n    ![][14]\n\n6.  此时将显示一个用于创建视图的对话框。在“模板”列表中，选择“创建”。在“模型类”列表中，单击“OnlineOrder”类。\n\n    ![][15]\n\n7.  单击**“添加”**。\n\n8.  现在，请更改应用程序的显示名称。在“解决方案资源管理器”中，双击“Views\\Shared\\_Layout.cshtml”文件以在 Visual Studio 编辑器中将其打开。\n\n9.  将每一处 **My ASP.NET Application** 替换为 **LITWARE'S Products**。\n\n10. 删除“Home”、“About”和“Contact”链接。删除突出显示的代码：\n\n    ![][28]\n\n11. 最后，修改提交页以包含有关队列的一些信息。在“解决方案资源管理器”中，双击“Views\\Home\\Submit.cshtml”文件以在 Visual Studio 编辑器中将其打开。在 **&lt;h2>Submit&lt;/h2>** 后面添加以下行。**ViewBag.MessageCount** 目前为空。稍后你将填充它。\n\n        <p>Current number of orders in queue waiting to be processed: @ViewBag.MessageCount</p>\n\n12. 现在，你已实现你的 UI。你可以按 **F5** 运行应用程序并确认其按预期方式运行。\n\n    ![][17]\n\n### 编写用于将项提交到 Service Bus 队列的代码\n\n现在，你将添加用于将项提交到队列的代码。首先，你将创建一个包含服务总线队列连接信息的类。然后，你将从 Global.aspx.cs 初始化你的连接。最后，你将更新你之前在 HomeController.cs 中创建的提交代码以便实际将项提交到服务总线队列。\n\n1.  在“解决方案资源管理器”中，右键单击“FrontendWebRole”（右键单击项目而不是角色）。单击“添加”，然后单击“类”。\n\n2.  将类命名为 QueueConnector.cs。单击“添加”以创建类。\n\n3.  现在，将添加可封装连接信息并初始化服务总线队列连接的代码。在 QueueConnector.cs 中添加以下代码，并输入 **Namespace**（你的服务命名空间）和 **yourKey**（前面通过 [Azure 经典门户][]获取的 SAS 密钥）的值。\n\n        using System;\n        using System.Collections.Generic;\n        using System.Linq;\n        using System.Web;\n        using Microsoft.ServiceBus.Messaging;\n        using Microsoft.ServiceBus;\n\n        namespace FrontendWebRole\n        {\n            public static class QueueConnector\n            {\n                // Thread-safe. Recommended that you cache rather than recreating it\n                // on every request.\n                public static QueueClient OrdersQueueClient;\n\n                // Obtain these values from the portal.\n                public const string Namespace = \"your service bus namespace\";\n\n                // The name of your queue.\n                public const string QueueName = \"OrdersQueue\";\n\n                public static NamespaceManager CreateNamespaceManager()\n                {\n                    // Create the namespace manager which gives you access to\n                    // management operations.\n                    var uri = ServiceBusEnvironment.CreateServiceUri(\n                        \"sb\", Namespace, String.Empty);\n                    var tP = TokenProvider.CreateSharedAccessSignatureTokenProvider(\n                        \"RootManageSharedAccessKey\", \"yourKey\");\n                    return new NamespaceManager(uri, tP);\n                }\n\n                public static void Initialize()\n                {\n                    // Using Http to be friendly with outbound firewalls.\n                    ServiceBusEnvironment.SystemConnectivity.Mode =\n                        ConnectivityMode.Http;\n\n                    // Create the namespace manager which gives you access to\n                    // management operations.\n                    var namespaceManager = CreateNamespaceManager();\n\n                    // Create the queue if it does not exist already.\n                    if (!namespaceManager.QueueExists(QueueName))\n                    {\n                        namespaceManager.CreateQueue(QueueName);\n                    }\n\n                    // Get a client to the queue.\n                    var messagingFactory = MessagingFactory.Create(\n                        namespaceManager.Address,\n                        namespaceManager.Settings.TokenProvider);\n                    OrdersQueueClient = messagingFactory.CreateQueueClient(\n                        \"OrdersQueue\");\n                }\n            }\n        }\n\n    稍后在本教程中，你将学习如何将**命名空间**名称和 SAS 密钥值存储在配置文件中。\n\n4.  现在，请确保你的 **Initialize** 方法会被调用。在“解决方案资源管理器”中，双击“Global.asax\\Global.asax.cs”。\n\n5.  将以下行添加到 **Application_Start** 方法的底部。\n\n        FrontendWebRole.QueueConnector.Initialize();\n\n6.  最后，更新之前创建的 Web 代码以便将项提交到队列。在“解决方案资源管理器”中，双击“Controllers\\HomeController.cs”。\n\n7.  更新 **Submit()** 方法（如下所示）获取队列的消息计数。\n\n        public ActionResult Submit()\n        {\n            // Get a NamespaceManager which allows you to perform management and\n            // diagnostic operations on your Service Bus queues.\n            var namespaceManager = QueueConnector.CreateNamespaceManager();\n\n            // Get the queue, and obtain the message count.\n            var queue = namespaceManager.GetQueue(QueueConnector.QueueName);\n            ViewBag.MessageCount = queue.MessageCount;\n\n            return View();\n        }\n\n8.  更新 **Submit(OnlineOrder order)** 方法（如下所示）将订单信息提交到队列。\n\n        public ActionResult Submit(OnlineOrder order)\n        {\n            if (ModelState.IsValid)\n            {\n                // Create a message from the order.\n                var message = new BrokeredMessage(order);\n\n                // Submit the order.\n                QueueConnector.OrdersQueueClient.Send(message);\n                return RedirectToAction(\"Submit\");\n            }\n            else\n            {\n                return View(order);\n            }\n        }\n\n9.  现在，你可以重新运行应用程序。每当你提交订单时，消息计数都会增大。\n\n    ![][18]\n\n## 云配置管理器\n\n[Microsoft.WindowsAzure.Configuration.CloudConfigurationManager][] 类中的 [GetSetting][] 方法可让你从平台的配置存储中读取配置设置。例如，如果代码在 Web 或辅助角色中运行，则 [GetSetting][] 方法将读取 ServiceConfiguration.cscfg 文件；如果代码在标准的控制台应用中运行，则 [GetSetting][] 方法将读取 app.config 文件。\n\n如果你将服务总线命名空间的连接字符串存储在配置文件中，则可以使用 [GetSetting][] 方法来读取可用于实例化 [NamespaceMananger][] 对象的连接字符串。你可以使用 [NamespaceMananger][] 实例以编程方式来配置服务总线命名空间。可以使用同一连接字符串来实例化可用于执行运行时操作（例如发送和接收消息）的客户端对象（例如 [QueueClient][]、[TopicClient][] 和 [EventHubClient][] 对象）。\n\n### 连接字符串\n\n若要实例化客户端（例如服务总线 [QueueClient][]），可以将配置信息表示为连接字符串。在客户端，有一个通过使用该连接字符串实例化客户端类型的 `CreateFromConnectionString()` 方法。例如，考虑下面的配置部分\n\n    <ConfigurationSettings>\n    ...\n        <Setting name=\"Microsoft.ServiceBus.ConnectionString\" value=\"Endpoint=sb://[yourServiceNamespace].servicebus.windows.net/;SharedSecretIssuer=RootManageSharedAccessKey;SharedSecretValue=[yourKey]\" />\n    </ConfigurationSettings>\n\n以下代码检索连接字符串，创建队列并初始化与队列的连接。\n\n    QueueClient Client;\n\n    string connectionString =\n     CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\n    var namespaceManager =\n     NamespaceManager.CreateFromConnectionString(connectionString);\n\n    if (!namespaceManager.QueueExists(QueueName))\n    {\n        namespaceManager.CreateQueue(QueueName);\n    }\n\n    // Initialize the connection to Service Bus queue.\n    Client = QueueClient.CreateFromConnectionString(connectionString, QueueName);\n\n以下部分中的代码使用 [CloudConfigurationManager][Microsoft.WindowsAzure.Configuration.CloudConfigurationManager] 类。\n\n## 创建辅助角色\n\n现在，你将创建用于处理订单提交的辅助角色。此示例使用“服务总线队列的辅助角色”Visual Studio 项目模板。首先，请使用 Visual Studio 中的“服务器资源管理器”获取所需凭据。\n\n1. 确保已将 Visual Studio 连接到你的 Azure 帐户。\n\n2.  在 Visual Studio 的“解决方案资源管理器”中，右键单击“MultiTierApp”项目下的“角色”文件夹。\n\n3.  单击“添加”，然后单击“新建辅助角色项目”。此时将显示“添加新角色项目”对话框。\n\n    ![][26]\n\n4.  在“添加新角色项目”对话框中，单击“服务总线队列的辅助角色”。\n\n    ![][23]\n\n5.  在“名称”框中，将项目命名为 **OrderProcessingRole**。然后单击“添加”。\n\n6.  在“服务器资源管理器”中，右键单击服务命名空间的名称，然后单击“属性”。在 Visual Studio 的“属性”窗格中，第一个条目包含使用包含所需授权凭据的命名空间终结点填充的连接字符串。例如，请参阅以下屏幕截图。双击“ConnectionString”，然后按 **Ctrl+C** 将此字符串复制到剪贴板中。\n\n    ![][24]\n\n7.  在“解决方案资源管理器”中，右键单击你在步骤 5 中创建的“OrderProcessingRole”（确保右键单击“角色”下的“OrderProcessingRole”而不是类）。然后单击“属性”。\n\n8.  在“属性”对话框的“设置”选项卡中，在“Microsoft.ServiceBus.ConnectionString”的“值”框内单击，然后粘贴你在步骤 6 中复制的终结点值。\n\n    ![][25]\n\n9.  当你从队列中处理订单时，创建一个 **OnlineOrder** 类来表示这些订单。你可以重用已创建的类。在“解决方案资源管理器”中，右键单击“OrderProcessingRole”项目（右键单击项目而不是角色）。单击“添加”，然后单击“现有项”。\n\n10. 浏览到 **FrontendWebRole\\Models** 的子文件夹，然后双击“OnlineOrder.cs”以将其添加到此项目中。\n\n11. 在 **WorkerRole.cs** 中，将 **WorkerRole.cs** 中 **QueueName** 变量的值 `\"ProcessingQueue\"` 替换为 `\"OrdersQueue\"`，如以下代码所示。\n\n        // The name of your queue.\n        const string QueueName = \"OrdersQueue\";\n\n12. 在 WorkerRole.cs 文件顶部添加以下 using 语句。\n\n        using FrontendWebRole.Models;\n\n13. 在 `Run()` 函数的 `OnMessage` 调用中，添加以下代码到 `try` 子句。\n\n        Trace.WriteLine(\"Processing\", receivedMessage.SequenceNumber.ToString());\n        // View the message as an OnlineOrder.\n        OnlineOrder order = receivedMessage.GetBody<OnlineOrder>();\n        Trace.WriteLine(order.Customer + \": \" + order.Product, \"ProcessingMessage\");\n        receivedMessage.Complete();\n\n14. 你已完成此应用程序。你可以测试整个应用程序，方法是右键单击“解决方案资源管理器”中的 MultiTierApp 项目，选择“设置为启动项目”，然后按 F5。请注意，消息计数不会递增，因为辅助角色会处理队列中的项并将其标记为完成。你可以通过查看 Azure 计算模拟器 UI 来查看辅助角色的跟踪输出。可通过右击任务栏的通知区域中的模拟器图标并选择“显示计算模拟器 UI”来执行此操作。\n\n    ![][19]\n\n    ![][20]\n\n## 后续步骤  \n\n若要了解有关 Service Bus 的详细信息，请参阅以下资源：\n\n* [Azure 服务总线][sbmsdn]  \n* [服务总线服务页][sbwacom]  \n* [如何使用 Service Bus 队列][sbwacomqhowto]  \n\n若要了解有关多层方案的详细信息，或者要了解如何将应用程序部署到云服务，请参阅：\n\n* [使用存储表、队列和 Blob 的 .NET 多层应用程序][mutitierstorage]  \n\n你可能需要在 Azure Web 应用而不是 Azure 云服务中实现多层应用程序的前端。若要详细了解 Web 应用和云服务之间的差异，请参阅 [Azure 执行模型][executionmodels]。\n\n若要实施在本教程中以标准 Web 项目而不是云服务 Web 角色方式创建的应用程序，请遵循本教程中的步骤，但需注意以下差异：\n\n1. 创建项目时，请选择 Web 类别中的“ASP.NET MVC Web 应用程序”项目模板，而不是“云”类别中的“云服务”模板。然后，请遵循创建 MVC 应用程序时遵循的相同指导，直到你转到“云配置管理器”部分。\n\n2. 创建辅助角色时，请在新的独立解决方案中创建它，采用的说明与创建 Web 角色所用的原始说明类似。不过现在，你只是在云服务项目中创建辅助角色。然后，请遵循创建辅助角色所用的相同说明。\n\n3. 你可以分别测试前端和后端，也可以在单独的 Visual Studio 实例中同时运行这二者。\n\n若要了解如何将前端部署到 Azure Web 应用，请参阅[在 Azure App Service 中创建 ASP.NET Web 应用]](/documentation/articles/web-sites-dotnet-get-started)。若要了解如何将后端部署到 Azure 云服务，请参阅[使用存储表、队列和 Blob 的 .NET 多层应用程序][mutitierstorage]。\n\n\n  [0]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-01.png\n  [1]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-100.png\n  [sbqueuecomparison]: /documentation/articles/service-bus-azure-and-service-bus-queues-compared-contrasted\n  [2]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-101.png\n  [获取工具和 SDK]: /develop/net/\n  [3]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-3.png\n\n\n  [GetSetting]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.cloudconfigurationmanager.getsetting.aspx\n  [Microsoft.WindowsAzure.Configuration.CloudConfigurationManager]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.cloudconfigurationmanager.aspx\n  [NamespaceMananger]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx\n\n  [QueueClient]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.aspx\n\n  [TopicClient]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.topicclient.aspx\n\n  [EventHubClient]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.eventhubclient.aspx\n\n  [Azure portal]: http://manage.windowsazure.cn\n  [Azure 经典门户]: http://manage.windowsazure.cn\n  [6]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/sb-queues-03.png\n  [7]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/sb-queues-04.png\n  [8]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-09.png\n  [9]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-10.png\n  [10]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-11.png\n  [11]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-02.png\n  [12]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-12.png\n  [13]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-13.png\n  [14]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-33.png\n  [15]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-34.png\n  [16]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-35.png\n  [17]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-36.png\n  [18]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-37.png\n\n  [19]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-38.png\n  [20]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-39.png\n  [23]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/SBWorkerRole1.png\n  [24]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/SBExplorerProperties.png\n  [25]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/SBWorkerRoleProperties.png\n  [26]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/SBNewWorkerRole.png\n  [27]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-27.png\n  [28]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-multi-tier-40.png\n  [30]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/sb-queues-09.png\n  [31]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/sb-queues-06.png\n  [32]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-41.png\n  [33]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/getting-started-4-2-WebPI.png\n  [35]: ./media/service-bus-dotnet-multi-tier-app-using-service-bus-queues/multi-web-45.png\n  [sbmsdn]: http://msdn.microsoft.com/zh-cn/library/azure/ee732537.aspx\n  [sbwacom]: /home/features/identity/\n  [sbwacomqhowto]: /documentation/articles/service-bus-dotnet-how-to-use-queues\n  [mutitierstorage]: https://code.msdn.microsoft.com/Windows-Azure-Multi-Tier-eadceb36\n  [executionmodels]: /documentation/articles/fundamentals-application-models\n\n<!---HONumber=Mooncake_0104_2016-->"
}