{
  "nodes": [
    {
      "content": "事件中心 API 概述 | Azure",
      "pos": [
        27,
        46
      ]
    },
    {
      "content": "汇总了一些重要的事件中心 .NET 客户端 API。",
      "pos": [
        64,
        90
      ]
    },
    {
      "content": "事件中心 API 概述",
      "pos": [
        295,
        306
      ]
    },
    {
      "content": "本文汇总了一些重要的事件中心 .NET 客户端 API。有两个类别：管理 API 和运行时 API。运行时 API 包括发送和接收消息所需的全部操作。使用管理操作，你可以通过创建、更新和删除实体来管理事件中心实体状态。",
      "pos": [
        308,
        417
      ]
    },
    {
      "pos": [
        419,
        634
      ],
      "content": "监视方案跨越了管理操作和运行时操作。有关 .NET API 的详细参考文档，请参阅 <bpt id=\"p1\">[</bpt>.NET 类库<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/jj933431.aspx)</ept>和 <bpt id=\"p2\">[</bpt>EventProcessorHost API<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.messaging.aspx)</ept> 参考。"
    },
    {
      "content": "管理 API",
      "pos": [
        639,
        645
      ]
    },
    {
      "pos": [
        647,
        681
      ],
      "content": "若要执行以下管理操作，你必须对服务总线命名空间具有<bpt id=\"p1\">**</bpt>管理<ept id=\"p1\">**</ept>权限："
    },
    {
      "content": "创建",
      "pos": [
        687,
        689
      ]
    },
    {
      "content": "更新",
      "pos": [
        893,
        895
      ]
    },
    {
      "content": "删除",
      "pos": [
        1407,
        1409
      ]
    },
    {
      "content": "运行时 API",
      "pos": [
        1486,
        1493
      ]
    },
    {
      "content": "创建发布者",
      "pos": [
        1499,
        1504
      ]
    },
    {
      "content": "发布消息",
      "pos": [
        1682,
        1686
      ]
    },
    {
      "content": "创建使用者",
      "pos": [
        2280,
        2285
      ]
    },
    {
      "content": "使用消息",
      "pos": [
        2975,
        2979
      ]
    },
    {
      "content": "事件处理程序主机 API",
      "pos": [
        3237,
        3249
      ]
    },
    {
      "content": "这些 API 为可能变成不可用状态但在多个可用辅助进程之间分布分片的辅助进程提供弹性。",
      "pos": [
        3251,
        3294
      ]
    },
    {
      "pos": [
        4203,
        4322
      ],
      "content": "<bpt id=\"p1\">[</bpt>IEventProcessor<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.messaging.ieventprocessor.aspx)</ept> 接口定义如下："
    },
    {
      "content": "后续步骤",
      "pos": [
        5228,
        5232
      ]
    },
    {
      "content": "若要了解有关事件中心方案的详细信息，请访问以下链接：",
      "pos": [
        5234,
        5260
      ]
    },
    {
      "content": "事件中心编程指南",
      "pos": [
        5265,
        5273
      ]
    },
    {
      "content": "事件中心概述",
      "pos": [
        5332,
        5338
      ]
    },
    {
      "content": "事件中心代码示例",
      "pos": [
        5388,
        5396
      ]
    },
    {
      "content": "下面提供了 .NET API 参考：",
      "pos": [
        5519,
        5537
      ]
    },
    {
      "content": "服务总线和事件中心 .NET API 参考",
      "pos": [
        5542,
        5563
      ]
    },
    {
      "content": "事件处理程序主机 API 参考",
      "pos": [
        5624,
        5639
      ]
    }
  ],
  "content": "<properties \n   pageTitle=\"事件中心 API 概述 | Azure\"\n   description=\"汇总了一些重要的事件中心 .NET 客户端 API。\"\n   services=\"event-hubs\"\n   documentationCenter=\"na\"\n   authors=\"sethmanheim\"\n   manager=\"timlt\"\n   editor=\"\" />\n<tags \n   ms.service=\"event-hubs\"\n   ms.date=\"10/14/2015\"\n   wacn.date=\"11/02/2015\" />\n\n# 事件中心 API 概述\n\n本文汇总了一些重要的事件中心 .NET 客户端 API。有两个类别：管理 API 和运行时 API。运行时 API 包括发送和接收消息所需的全部操作。使用管理操作，你可以通过创建、更新和删除实体来管理事件中心实体状态。\n\n监视方案跨越了管理操作和运行时操作。有关 .NET API 的详细参考文档，请参阅 [.NET 类库](https://msdn.microsoft.com/zh-cn/library/jj933431.aspx)和 [EventProcessorHost API](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.messaging.aspx) 参考。\n\n## 管理 API\n\n若要执行以下管理操作，你必须对服务总线命名空间具有**管理**权限：\n\n### 创建\n\n```\n// Create the Event Hub\nEventHubDescription ehd = new EventHubDescription(eventHubName);\nehd.PartitionCount = SampleManager.numPartitions;\nnamespaceManager.CreateEventHubAsync(ehd).Wait();\n```\n\n### 更新\n\n```\nEventHubDescription ehd = await namespaceManager.GetEventHubAsync(eventHubName);\n\n// Create a customer SAS rule with Manage permissions\nehd.UserMetadata = \"Some updated info\";\nstring ruleName = \"myeventhubmanagerule\";\nstring ruleKey = SharedAccessAuthorizationRule.GenerateRandomKey();\nehd.Authorization.Add(new SharedAccessAuthorizationRule(ruleName, ruleKey, new AccessRights[] {AccessRights.Manage, AccessRights.Listen, AccessRights.Send} )); \nnamespaceManager.UpdateEventHubAsync(ehd).Wait();\n```\n\n### 删除\n\n```\nnamespaceManager.DeleteEventHubAsync(\"event hub name\").Wait();\n```\n\n## 运行时 API\n\n### 创建发布者\n\n```\n// EventHubClient model (uses implicit factory instance, so all links on same connection)\nEventHubClient eventHubClient = EventHubClient.Create(\"event hub name\");\n```\n\n### 发布消息\n\n```\n// Create the device/temperature metric\nMetricEvent info = new MetricEvent() { DeviceId = random.Next(SampleManager.NumDevices), Temperature = random.Next(100) };\nEventData data = new EventData(new byte[10]); // Byte array\nEventData data = new EventData(Stream); // Stream \nEventData data = new EventData(info, serializer) //Object and serializer \n    {\n       PartitionKey = info.DeviceId.ToString()\n    };\n\n// Set user properties if needed\ndata.Properties.Add(\"Type\", \"Telemetry_\" + DateTime.Now.ToLongTimeString());\n\n// Send single message async\nawait client.SendAsync(data);\n```\n\n### 创建使用者\n\n```\n// Create the Event Hub client\nEventHubClient eventHubClient = EventHubClient.Create(EventHubName);\n\n// Get the default subscriber group\nEventHubSubscriberGroup defaultSubscriberGroup = eventHubClient.GetDefaultSubscriberGroup();\n\n// All messages\nEventHubReceiver consumer = await defaultConsumerGroup.CreateReceiverAsync(shardId: index);\n\n// From one day ago\nEventHubReceiver consumer = await defaultConsumerGroup.CreateReceiverAsync(shardId: index, startingDateTimeUtc:DateTime.Now.AddDays(-1));\n                        \n// From specific offset, -1 means oldest\nEventHubReceiver consumer = await defaultConsumerGroup.CreateReceiverAsync(shardId: index,startingOffset:-1); \n```\n\n### 使用消息\n\n```\nvar message = await consumer.ReceiveAsync();\n\n// Provide a serializer\nvar info = message.GetBody<Type>(Serializer)\n                                    \n// Get a byte[]\nvar info = message.GetBytes(); \nmsg = UnicodeEncoding.UTF8.GetString(info);\n```\n\n## 事件处理程序主机 API\n\n这些 API 为可能变成不可用状态但在多个可用辅助进程之间分布分片的辅助进程提供弹性。\n\n```\n// Checkpointing is done within the SimpleEventProcessor and on a per-consumerGroup per-partition basis, workers resume from where they last left off.\n// Use the EventData.Offset value for checkpointing yourself, this value is unique per partition.\nstring eventHubConnectionString = System.Configuration.ConfigurationManager.AppSettings[\"Microsoft.ServiceBus.ConnectionString\"];\nstring blobConnectionString = System.Configuration.ConfigurationManager.AppSettings[\"AzureStorageConnectionString\"]; // Required for checkpoint/state\n\nEventHubDescription eventHubDescription = new EventHubDescription(EventHubName);\nEventProcessorHost host = new EventProcessorHost(WorkerName, EventHubName, defaultConsumerGroup.GroupName, eventHubConnectionString, blobConnectionString);\n            host.RegisterEventProcessorAsync<SimpleEventProcessor>();\n\n// To close\nhost.UnregisterEventProcessorAsync().Wait();   \n```\n\n[IEventProcessor](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.messaging.ieventprocessor.aspx) 接口定义如下：\n\n```\npublic class SimpleEventProcessor : IEventProcessor\n{\n    IDictionary<string, string> map;\n    PartitionContext partitionContext;\n\n    public SimpleEventProcessor()\n    {\n        this.map = new Dictionary<string, string>();\n    }\n\n    public Task OpenAsync(PartitionContext context)\n    {\n        this.partitionContext = context;\n\n        return Task.FromResult<object>(null);\n    }\n\n    public async Task ProcessEventsAsync(PartitionContext context, IEnumerable<EventData> messages)\n    {\n        foreach (EventData message in messages)\n        {\n            Process messages here\n        }\n        \n        // Checkpoint when appropriate\n        await context.CheckpointAsync();\n\n    }\n\n\n    public async Task CloseAsync(PartitionContext context, CloseReason reason)\n    {\n        if (reason == CloseReason.Shutdown)\n        {\n            await context.CheckpointAsync();\n        }\n    }\n}\n```\n\n## 后续步骤\n\n若要了解有关事件中心方案的详细信息，请访问以下链接：\n\n- [事件中心编程指南](/documentation/articles/event-hubs-programming-guide)\n- [事件中心概述](/documentation/articles/event-hubs-overview)\n- [事件中心代码示例](https://code.msdn.microsoft.com/site/search?query=event%20hub&f%5B0%5D.Value=event%20hub&f%5B0%5D.Type=SearchText&ac=5)\n\n下面提供了 .NET API 参考：\n\n- [服务总线和事件中心 .NET API 参考](https://msdn.microsoft.com/zh-cn/library/jj933424.aspx)\n- [事件处理程序主机 API 参考](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.messaging.eventprocessorhost.aspx)\n\n<!---HONumber=66-->"
}