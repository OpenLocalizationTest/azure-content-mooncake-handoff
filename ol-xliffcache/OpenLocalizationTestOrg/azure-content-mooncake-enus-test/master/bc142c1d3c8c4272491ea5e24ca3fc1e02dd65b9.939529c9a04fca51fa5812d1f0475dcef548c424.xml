{"nodes":[{"content":"在 Azure Web 应用中使用 ASP.NET Web API 和 SQL 数据库创建 REST 服务","pos":[28,81]},{"content":"本教程将向您介绍如何通过使用 Visual Studio 将使用 ASP.NET Web API 的应用程序部署到 Azure Web 应用。","pos":[101,172]},{"content":"在 Azure Web 应用中使用 ASP.NET Web API 和 SQL 数据库创建 REST 服务","pos":[433,486]},{"pos":[488,639],"content":"本教程介绍如何使用 Visual Studio 2013 或 Visual Studio 2013 Community Edition 中的“发布 Web”向导将 ASP.NET Web 应用部署到 <bpt id=\"p1\">[</bpt>Azure Web 应用<ept id=\"p1\">](/documentation/services/web-sites/)</ept>。","source":"本教程介绍如何使用 Visual Studio 2013 或 Visual Studio 2013 Community Edition 中的“发布 Web”向导将 ASP.NET Web 应用部署到 [Azure Web 应用](/documentation/services/web-sites/)。"},{"content":"你可以免费注册一个 Azure 帐户，而且，如果你还没有 Visual Studio 2013，则此 SDK 会自动安装 Visual Studio 2013 for Web Express。","pos":[641,737]},{"content":"这样你就能够完全免费地开始针对 Azure 进行开发了。","pos":[737,765]},{"content":"本教程假定你之前未使用过 Azure。","pos":[767,786]},{"content":"完成本教程之后，你将能够在云中启动并运行简单的 Web 应用。","pos":[786,817]},{"content":"学习内容：","pos":[820,825]},{"content":"如何通过安装 Azure SDK 来让你的计算机可以进行 Azure 开发。","pos":[829,867]},{"content":"如何创建 Visual Studio ASP.NET MVC 5 项目并将其发布到 Azure 应用。","pos":[870,921]},{"content":"如何使用 ASP.NET Web API 实现 Restful API 调用。","pos":[924,963]},{"content":"如何使用 SQL 数据库在 Azure 中存储数据。","pos":[966,992]},{"content":"如何将应用程序更新发布到 Azure。","pos":[995,1014]},{"content":"你将生成一个简单的联系人列表 Web 应用，该 Web 应用基于 ASP.NET MVC 5 构建并使用 ADO.NET Entity Framework 进行数据库访问。","pos":[1016,1102]},{"content":"下图演示了完整的应用程序：","pos":[1102,1115]},{"content":"Web 应用屏幕截图","pos":[1120,1130]},{"content":"创建项目","pos":[1248,1252]},{"content":"启动 Visual Studio 2013。","pos":[1257,1279]},{"content":"在“文件”菜单中，单击“新建项目”。","pos":[1283,1301]},{"content":"在“新建项目”对话框中，展开“Visual C#”并选择“Web”，然后选择“ASP.NET Web 应用”。","pos":[1305,1360]},{"content":"将该应用程序命名为 <bpt id=\"p1\">**</bpt>ContactManager<ept id=\"p1\">**</ept>，然后单击“确定”。","pos":[1360,1398],"source":"将该应用程序命名为 **ContactManager**，然后单击“确定”。"},{"content":"“新建项目”对话框","pos":[1406,1415]},{"content":"在“新建 ASP.NET 项目”对话框中，选择“MVC”模板，选中“Web API”，确保“在云中托管”处于未选中状态，然后单击“确定”。","pos":[1492,1561]},{"content":"“新建 ASP.NET 项目”对话框","pos":[1569,1587]},{"content":"如果你在 Azure 中还没有 Web 应用，则可以转到 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](http://manage.windowsazure.cn)</ept>创建一个。","pos":[1661,1738],"source":"如果你在 Azure 中还没有 Web 应用，则可以转到 [Azure 管理门户](http://manage.windowsazure.cn)创建一个。"},{"content":"创建 Web 应用后，请转到“仪表板”，在“速览”下可以下载发布配置文件。","pos":[1738,1775]},{"content":"在本文的发布部分中，你将需要它。","pos":[1775,1791]},{"content":"如果你有数据库服务器，请使用它来创建新的数据库。","pos":[1793,1817]},{"content":"数据库服务器是非常宝贵的资源，而且你通常会想要在同一台服务器上创建多个数据库来进行测试和开发，而不是在每个数据库中各创建一个数据库服务器。","pos":[1817,1886]},{"content":"请确保你的 Web 应用和数据库位于相同区域中。","pos":[1886,1910]},{"content":"设置页眉和页脚","pos":[1916,1923]},{"pos":[1929,1990],"content":"在“解决方案资源管理器”中，展开 <bpt id=\"p1\">*</bpt>Views<ph id=\"ph1\">\\\\</ph>Shared<ept id=\"p1\">*</ept> 文件夹并打开 <bpt id=\"p2\">*</bpt><ph id=\"ph2\">\\_</ph>Layout.cshtml<ept id=\"p2\">*</ept> 文件。","source":"在“解决方案资源管理器”中，展开 *Views\\\\Shared* 文件夹并打开 *\\_Layout.cshtml* 文件。"},{"content":"Layout.cshtml in Solution Explorer","pos":[2000,2034]},{"pos":[2051,2097],"content":"将 <bpt id=\"p1\">*</bpt>Views<ph id=\"ph1\">\\\\</ph>Shared<ph id=\"ph2\">\\_</ph>Layout.cshtml<ept id=\"p1\">*</ept> 文件的内容替换为以下代码：","source":"将 *Views\\\\Shared\\_Layout.cshtml* 文件的内容替换为以下代码："},{"content":"上面的标记会将应用程序名称从 \"My ASP.NET App\" 更改为 \"Contact Manager\"，并移除到“主页”、“关于”以及“联系人”的链接。","pos":[3470,3548]},{"content":"在本地运行应用程序","pos":[3554,3563]},{"content":"按 Ctrl+F5 运行应用程序。","pos":[3568,3585]},{"content":"随后在默认浏览器中显示该应用程序主页。","pos":[3586,3605],"source":"\n随后在默认浏览器中显示该应用程序主页。"},{"content":"到待办事项列表主页","pos":[3613,3622]},{"content":"这就是你创建将要部署到 Azure 的应用程序目前所需的全部操作。","pos":[3696,3729]},{"content":"稍后你将添加数据库功能。","pos":[3729,3741]},{"content":"将应用程序部署到 Azure","pos":[3746,3760]},{"content":"在 Visual Studio 中，在“解决方案资源管理器”中右键单击该项目，从上下文菜单中选择“发布”。","pos":[3765,3818]},{"content":"项目上下文菜单中的“发布”","pos":[3826,3839]},{"content":"“发布 Web”向导将打开。","pos":[3865,3879]},{"content":"单击“发布”。","pos":[3885,3892]},{"content":"点击“导入”，并选择之前下载的“发布配置文件”。","pos":[3892,3916]},{"content":"“设置”选项卡","pos":[3924,3931]},{"content":"Visual Studio 开始执行将文件复制到 Azure 服务器的过程。","pos":[4008,4046]},{"content":"“输出”窗口将显示已执行的部署操作并报告已成功完成部署。","pos":[4046,4074]},{"content":"默认浏览器会自动打开，并指向所部署站点的 URL。","pos":[4080,4105]},{"content":"你创建的应用程序现在在云中运行。","pos":[4111,4127]},{"content":"在 Azure 中运行的待办事项列表主页","pos":[4139,4159]},{"content":"向应用程序添加数据库","pos":[4171,4181]},{"content":"接下来，你将更新 MVC 应用程序以添加显示和更新联系人以及在数据库中存储数据的功能。","pos":[4183,4226]},{"content":"应用程序将使用 Entity Framework 创建数据库并读取和更新数据库中的数据。","pos":[4226,4270]},{"content":"为联系人添加数据模型类","pos":[4276,4287]},{"content":"首先，使用代码创建一个简单的数据模型。","pos":[4289,4308]},{"content":"在“解决方案资源管理器”中，右键单击 Models 文件夹，单击“添加”，然后单击“类”。","pos":[4313,4358]},{"content":"Models 文件夹上下文菜单中的“添加类”","pos":[4366,4388]},{"pos":[4404,4449],"content":"在“添加新项”对话框中，将新的类文件命名为 <bpt id=\"p1\">*</bpt>Contact.cs<ept id=\"p1\">*</ept> ，然后单击“添加”。","source":"在“添加新项”对话框中，将新的类文件命名为 *Contact.cs* ，然后单击“添加”。"},{"content":"“添加新项”对话框","pos":[4457,4466]},{"content":"将 Contacts.cs 文件的内容替换为以下代码。","pos":[4482,4509]},{"content":"<bpt id=\"p1\">**</bpt>Contact<ept id=\"p1\">**</ept> 类定义你将为每个联系人存储的数据以及数据库需要的主键 ContactID。","pos":[5308,5357],"source":"**Contact** 类定义你将为每个联系人存储的数据以及数据库需要的主键 ContactID。"},{"content":"你可以在本教程末尾的<bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#nextsteps)</ept>部分中获取有关数据模型的详细信息。","pos":[5357,5402],"source":"你可以在本教程末尾的[后续步骤](#nextsteps)部分中获取有关数据模型的详细信息。"},{"content":"创建使应用程序用户可以使用联系人的网页","pos":[5408,5427]},{"content":"ASP.NET MVC 基架功能可以自动生成用于执行创建、读取、更新和删除 (CRUD) 操作的代码。","pos":[5429,5480]},{"content":"为数据添加控制器和视图","pos":[5485,5496]},{"content":"在“解决方案资源管理器”中，展开“控制器”文件夹。","pos":[5501,5526]},{"content":"生成项目 <bpt id=\"p1\">**</bpt>(Ctrl+Shift+B)<ept id=\"p1\">**</ept>。","pos":[5531,5555],"source":"生成项目 **(Ctrl+Shift+B)**。"},{"content":"（在使用基架机制前必须生成项目。","pos":[5555,5571]},{"content":"）","pos":[5571,5572]},{"content":"右键单击“控制器”文件夹，单击“添加”，然后单击“控制器”。","pos":[5577,5607]},{"content":"Controllers 文件夹上下文菜单中的“添加控制器”","pos":[5615,5644]},{"content":"在“添加基架”对话框中，选择“包含视图的 MVC 控制器(使用 Entity Framework)”并单击“添加”。","pos":[5662,5720]},{"content":"添加控制器","pos":[5728,5733]},{"content":"将控制器名设置为 <bpt id=\"p1\">**</bpt>HomeController<ept id=\"p1\">**</ept>。","pos":[5811,5839],"source":"将控制器名设置为 **HomeController**。"},{"content":"选择“联系人”作为模型类。","pos":[5839,5852]},{"content":"单击“新建数据上下文”按钮并接受默认的“ContactManager.Models.ContactManagerContext”为“新的数据上下文类型”。","pos":[5852,5929]},{"content":"单击<bpt id=\"p1\">**</bpt>“添加”<ept id=\"p1\">**</ept>。","pos":[5929,5940],"source":"单击**“添加”**。"},{"content":"“添加控制器”对话框","pos":[5948,5958]},{"content":"将出现一个提示对话框：“名为 HomeController 的文件已存在。","pos":[6036,6073]},{"content":"是否希望将其替换？","pos":[6073,6082]},{"content":"”。","pos":[6082,6084]},{"content":"单击<bpt id=\"p1\">**</bpt>“是”<ept id=\"p1\">**</ept>。","pos":[6084,6094],"source":"单击**“是”**。"},{"content":"我们正在覆盖使用新项目创建的主控制器。","pos":[6094,6113]},{"content":"我们将为联系人列表使用新的主控制器。","pos":[6113,6131]},{"pos":[6137,6191],"content":"Visual Studio 将为 <bpt id=\"p1\">**</bpt>Contact<ept id=\"p1\">**</ept> 对象的 CRUD 数据库操作创建控制器方法和视图。","source":"Visual Studio 将为 **Contact** 对象的 CRUD 数据库操作创建控制器方法和视图。"},{"content":"启用迁移、创建数据库、添加示例数据和数据初始值设定项","pos":[6196,6222]},{"pos":[6227,6306],"content":"接下来的任务是启用 <bpt id=\"p1\">[</bpt>Code First 迁移<ept id=\"p1\">](http://curah.microsoft.com/55220)</ept>功能以便基于你创建的数据模型创建数据库。","source":"接下来的任务是启用 [Code First 迁移](http://curah.microsoft.com/55220)功能以便基于你创建的数据模型创建数据库。"},{"content":"在“工具”菜单中，依次选择“库包管理器”和“包管理器控制台”。","pos":[6311,6342]},{"content":"“工具”菜单中的“程序包管理器控制台”","pos":[6350,6369]},{"content":"在“包管理器控制台”窗口中，输入以下命令：","pos":[6387,6408]},{"pos":[6444,6544],"content":"<bpt id=\"p1\">**</bpt>enable-migrations<ept id=\"p1\">**</ept> 命令将创建一个 <bpt id=\"p2\">*</bpt>Migrations<ept id=\"p2\">*</ept> 文件夹，并在该文件夹中放入一个可编辑以配置 Migrations 的 <bpt id=\"p3\">*</bpt>Configuration.cs<ept id=\"p3\">*</ept> 文件。","source":"**enable-migrations** 命令将创建一个 *Migrations* 文件夹，并在该文件夹中放入一个可编辑以配置 Migrations 的 *Configuration.cs* 文件。"},{"content":"在“包管理器控制台”窗口中，输入以下命令：","pos":[6549,6570]},{"content":"<bpt id=\"p1\">**</bpt>add-migration Initial<ept id=\"p1\">**</ept> 命令将生成一个创建数据库的名为 <bpt id=\"p2\">**</bpt><ph id=\"ph1\">&amp;lt;</ph>date<ph id=\"ph2\">\\_</ph>stamp<ph id=\"ph3\">&amp;gt;</ph>Initial<ept id=\"p2\">**</ept> 的类。","pos":[6607,6683],"source":"**add-migration Initial** 命令将生成一个创建数据库的名为 **&lt;date\\_stamp&gt;Initial** 的类。"},{"content":"第一个参数 (<bpt id=\"p1\">*</bpt>Initial<ept id=\"p1\">*</ept>) 是任意参数并将用于创建文件名称。","pos":[6683,6717],"source":"第一个参数 (*Initial*) 是任意参数并将用于创建文件名称。"},{"content":"你可以在“解决方案资源管理器”中查看新的类文件。","pos":[6717,6741]},{"pos":[6747,6826],"content":"在 <bpt id=\"p1\">**</bpt>Initial<ept id=\"p1\">**</ept> 类中，<bpt id=\"p2\">**</bpt>Up<ept id=\"p2\">**</ept> 方法用于创建 Contacts 表，而 <bpt id=\"p3\">**</bpt>Down<ept id=\"p3\">**</ept> 方法（在你想要返回到以前的状态时使用）用于删除该表。","source":"在 **Initial** 类中，**Up** 方法用于创建 Contacts 表，而 **Down** 方法（在你想要返回到以前的状态时使用）用于删除该表。"},{"pos":[6831,6868],"content":"打开 <bpt id=\"p1\">*</bpt>Migrations<ph id=\"ph1\">\\\\</ph>Configuration.cs<ept id=\"p1\">*</ept> 文件。","source":"打开 *Migrations\\\\Configuration.cs* 文件。"},{"content":"添加以下命名空间。","pos":[6873,6882]},{"pos":[6926,6945],"content":"将 <bpt id=\"p1\">*</bpt>Seed<ept id=\"p1\">*</ept> 方法替换为以下代码：","source":"将 *Seed* 方法替换为以下代码："},{"content":"上面这段代码将用联系人信息初始化数据库。","pos":[8937,8957]},{"content":"有关对数据库进行种子设定的更多信息，请参阅调试 <bpt id=\"p1\">[</bpt>Entity Framework (EF) 数据库<ept id=\"p1\">](http://blogs.msdn.com/b/rickandy/archive/2013/02/12/seeding-and-debugging-entity-framework-ef-dbs.aspx)</ept>。","pos":[8957,9113],"source":"有关对数据库进行种子设定的更多信息，请参阅调试 [Entity Framework (EF) 数据库](http://blogs.msdn.com/b/rickandy/archive/2013/02/12/seeding-and-debugging-entity-framework-ef-dbs.aspx)。"},{"content":"在“包管理器控制台”中输入以下命令：","pos":[9119,9137]},{"content":"“程序包管理器控制台”命令","pos":[9170,9183]},{"content":"<bpt id=\"p1\">**</bpt>update-database<ept id=\"p1\">**</ept> 用于运行将创建数据库的初始迁移。","pos":[9202,9238],"source":"**update-database** 用于运行将创建数据库的初始迁移。"},{"content":"默认情况下，将以 SQL Server Express LocalDB 数据库的形式创建数据库。","pos":[9238,9286]},{"content":"按 Ctrl+F5 运行应用程序。","pos":[9291,9308]},{"content":"应用程序将显示种子数据并提供编辑、详细信息和删除链接。","pos":[9310,9337]},{"content":"数据的 MVC 视图","pos":[9341,9351]},{"content":"编辑视图","pos":[9363,9367]},{"content":"打开 <bpt id=\"p1\">*</bpt>Views<ph id=\"ph1\">\\\\</ph>Home<ph id=\"ph2\">\\\\</ph>Index.cshtml<ept id=\"p1\">*</ept> 文件。","pos":[9372,9406],"source":"打开 *Views\\\\Home\\\\Index.cshtml* 文件。"},{"content":"在下一步中，我们将生成的标记替换为使用 <bpt id=\"p1\">[</bpt>jQuery<ept id=\"p1\">](http://jquery.com/)</ept> 和 <bpt id=\"p2\">[</bpt>Knockout.js<ept id=\"p2\">](http://knockoutjs.com/)</ept> 的代码。","pos":[9406,9499],"source":"在下一步中，我们将生成的标记替换为使用 [jQuery](http://jquery.com/) 和 [Knockout.js](http://knockoutjs.com/) 的代码。"},{"content":"此新代码将使用 Web API 和 JSON 检索联系人列表，然后使用 knockout.js 将联系人数据绑定至 UI。","pos":[9499,9560]},{"content":"有关详细信息，请参阅本教程末尾的<bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#nextsteps)</ept>部分。","pos":[9560,9597],"source":"有关详细信息，请参阅本教程末尾的[后续步骤](#nextsteps)部分。"},{"content":"将文件的内容替换为以下代码。","pos":[9604,9618]},{"content":"右键单击 Content 文件夹并单击“添加”，然后单击“新建项...”。","pos":[13571,13608]},{"content":"在 Content 文件夹上下文菜单中添加样式表","pos":[13616,13640]},{"pos":[13658,13727],"content":"在“添加新项”对话框中，在右上的搜索框中输入 **Style**，然后选择“样式表”。\n ![“添加新项”对话框][rxStyle]","leadings":["","   "],"nodes":[{"content":"在“添加新项”对话框中，在右上的搜索框中输入 <bpt id=\"p1\">**</bpt>Style<ept id=\"p1\">**</ept>，然后选择“样式表”。","pos":[0,43],"source":"在“添加新项”对话框中，在右上的搜索框中输入 **Style**，然后选择“样式表”。"},{"content":"“添加新项”对话框","pos":[47,56]}]},{"content":"将文件命名为 <bpt id=\"p1\">*</bpt>Contacts.css<ept id=\"p1\">*</ept> 并单击“添加”。","pos":[13732,13762],"source":"将文件命名为 *Contacts.css* 并单击“添加”。"},{"content":"将文件的内容替换为以下代码。","pos":[13762,13776]},{"content":"该样式表将用作联系人管理器应用程序的布局、颜色和样式。","pos":[15073,15100]},{"pos":[15105,15141],"content":"打开 <bpt id=\"p1\">*</bpt>App<ph id=\"ph1\">\\_</ph>Start<ph id=\"ph2\">\\\\</ph>BundleConfig.cs<ept id=\"p1\">*</ept> 文件。","source":"打开 *App\\_Start\\\\BundleConfig.cs* 文件。"},{"pos":[15147,15210],"content":"添加以下代码以注册 <bpt id=\"p1\">[</bpt>Knockout<ept id=\"p1\">]</ept><bpt id=\"p2\">(http://knockoutjs.com/index.html \"</bpt>KO<ept id=\"p2\">\")</ept> 插件。","source":"添加以下代码以注册 [Knockout](http://knockoutjs.com/index.html \"KO\") 插件。"},{"content":"此示例使用 knockout 来简化处理屏幕模板的动态 JavaScript 代码。","pos":[15341,15383]},{"content":"修改 contents/css 条目以注册 <bpt id=\"p1\">*</bpt>contacts.css<ept id=\"p1\">*</ept> 样式表。","pos":[15388,15429],"source":"修改 contents/css 条目以注册 *contacts.css* 样式表。"},{"content":"将以下行","pos":[15429,15433]},{"content":"更改为：","pos":[15595,15599]},{"content":"在“程序包管理器控制台”中运行以下命令以安装 Knockout。","pos":[15801,15833]},{"content":"为 Web API Restful 接口添加控制器","pos":[15874,15899]},{"content":"在“解决方案资源管理器”中，右键单击“控制器”，然后依次单击“添加”和“控制器....”。","pos":[15904,15949]},{"content":"在“添加基架”对话框中，进入“包含操作的 Web API 2 控制器(使用 Entity Framework)”并单击“添加”。","pos":[15955,16019]},{"content":"添加 API 控制器","pos":[16027,16037]},{"content":"在“添加控制器”对话框中，输入“ContactsController”作为控制器名称。","pos":[16114,16157]},{"content":"为“模型类”选择“Contact (ContactManager.Models)”。","pos":[16157,16199]},{"content":"保留“数据上下文类”的默认值。","pos":[16199,16214]},{"pos":[16219,16230],"content":"单击<bpt id=\"p1\">**</bpt>“添加”<ept id=\"p1\">**</ept>。","source":"单击**“添加”**。"},{"content":"在本地运行应用程序","pos":[16236,16245]},{"content":"按 Ctrl+F5 运行应用程序。","pos":[16250,16267]},{"content":"索引页面","pos":[16275,16279]},{"content":"输入联系人信息并单击“添加”。","pos":[16295,16310]},{"content":"该应用程序将返回主页并显示刚才输入的联系人信息。","pos":[16310,16334]},{"content":"包含待办事项列表项的索引页面","pos":[16342,16356]},{"pos":[16376,16410],"content":"在浏览器中，将 <bpt id=\"p1\">**</bpt>/api/contacts<ept id=\"p1\">**</ept> 追加到 URL。","source":"在浏览器中，将 **/api/contacts** 追加到 URL。"},{"content":"生成的 URL 将类似于 http://localhost:1234/api/contacts。","pos":[16416,16464]},{"content":"添加的 RESTful Web API 将返回存储的联系人。","pos":[16464,16494]},{"content":"Firefox 和 Chrome 将以 XML 格式显示数据。","pos":[16494,16525]},{"content":"包含待办事项列表项的索引页面","pos":[16533,16547]},{"content":"IE 将提示你打开或保存联系人。","pos":[16571,16587]},{"content":"Web API 保存对话框","pos":[16595,16608]},{"content":"你可以在记事本或浏览器中打开返回的联系人。","pos":[16638,16659]},{"content":"此输出可由另一个应用程序（如移动 Web 页面或应用程序）使用。","pos":[16669,16701]},{"content":"Web API 保存对话框","pos":[16709,16722]},{"content":"<bpt id=\"p1\">**</bpt>安全警告<ept id=\"p1\">**</ept>：此时，你的应用程序是不安全的，而且容易受到 CSRF 攻击。","pos":[16743,16782],"source":"**安全警告**：此时，你的应用程序是不安全的，而且容易受到 CSRF 攻击。"},{"content":"本教程稍后部分将将解决这一漏洞。","pos":[16782,16798]},{"content":"有关详细信息，请参阅<bpt id=\"p1\">[</bpt>防止跨站点请求伪造 (CSRF) 攻击<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt><ept id=\"p2\">prevent-csrf-attacks]</ept>。","pos":[16798,16852],"source":"有关详细信息，请参阅[防止跨站点请求伪造 (CSRF) 攻击][prevent-csrf-attacks]。"},{"content":"添加 XSRF 保护","pos":[16856,16866]},{"content":"跨站点请求伪造（也称为 XSRF 或 CSRF）是一种针对 Web 托管型应用程序的攻击，恶意 Web 应用凭此可以影响客户端浏览器与受该浏览器信任的 Web 应用之间的交互。","pos":[16868,16956]},{"content":"这些攻击出现的原因可能是 Web 浏览器针对每一个对 Web 应用的请求自动发送身份验证令牌。","pos":[16956,17003]},{"content":"典型示例是身份验证 cookie，如 ASP.NET 的表单身份验证票证。","pos":[17003,17040]},{"content":"然而，使用任何持久身份验证（如 Windows Authentication、Basic 等）的 Web 应用也可能成为受攻击目标。","pos":[17040,17106]},{"content":"XSRF 攻击不同于网络钓鱼攻击。","pos":[17108,17125]},{"content":"网络钓鱼攻击需要与受害者进行交互。","pos":[17125,17142]},{"content":"在网络钓鱼攻击中，恶意 Web 应用将仿冒目标 Web 应用，受到欺骗的受害者会向攻击者提供敏感信息。","pos":[17142,17193]},{"content":"在 XSRF 攻击中，通常不必与受害者进行交互。","pos":[17193,17217]},{"content":"相反，浏览器自动向目标 Web 应用发送所有相关 Cookie 为攻击者提供了可乘之机。","pos":[17217,17261]},{"pos":[17263,17414],"content":"有关详细信息，请参阅<bpt id=\"p1\">[</bpt>打开 Web 应用安全项目<ept id=\"p1\">](https://www.owasp.org/index.php/Main_Page)</ept> (OWASP) <bpt id=\"p2\">[</bpt>XSRF<ept id=\"p2\">](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))</ept>。","source":"有关详细信息，请参阅[打开 Web 应用安全项目](https://www.owasp.org/index.php/Main_Page) (OWASP) [XSRF](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))。"},{"content":"在“解决方案资源管理器”中，右键单击“ContactManager”项目并单击“添加”，然后单击“类”。","pos":[17419,17471]},{"pos":[17476,17534],"content":"将文件命名为 <bpt id=\"p1\">*</bpt>ValidateHttpAntiForgeryTokenAttribute.cs<ept id=\"p1\">*</ept> 并添加以下代码：","source":"将文件命名为 *ValidateHttpAntiForgeryTokenAttribute.cs* 并添加以下代码："},{"pos":[20451,20520],"content":"将以下 <bpt id=\"p1\">*</bpt>using<ept id=\"p1\">*</ept> 语句添加到联系人控制器以便你可以访问 <bpt id=\"p2\">**</bpt>[ValidateHttpAntiForgeryToken]<ept id=\"p2\">**</ept> 属性。","source":"将以下 *using* 语句添加到联系人控制器以便你可以访问 **[ValidateHttpAntiForgeryToken]** 属性。"},{"content":"将 <bpt id=\"p1\">**</bpt>[ValidateHttpAntiForgeryToken]<ept id=\"p1\">**</ept> 属性添加到 <bpt id=\"p2\">**</bpt>ContactsController<ept id=\"p2\">**</ept> 的 Post 方法以保护其免受 XSRF 威胁。","pos":[20564,20654],"source":"将 **[ValidateHttpAntiForgeryToken]** 属性添加到 **ContactsController** 的 Post 方法以保护其免受 XSRF 威胁。"},{"content":"将其添加到 \"PutContact\"、\"PostContact\" 和 <bpt id=\"p1\">**</bpt>DeleteContact<ept id=\"p1\">**</ept> 操作方法。","pos":[20654,20712],"source":"将其添加到 \"PutContact\"、\"PostContact\" 和 **DeleteContact** 操作方法。"},{"pos":[20844,20910],"content":"更新 <bpt id=\"p1\">*</bpt>Views<ph id=\"ph1\">\\\\</ph>Home<ph id=\"ph2\">\\\\</ph>Index.cshtml<ept id=\"p1\">*</ept> 文件的 <bpt id=\"p2\">*</bpt>Scripts<ept id=\"p2\">*</ept> 部分以包含代码，从而获取 XSRF 令牌。","source":"更新 *Views\\\\Home\\\\Index.cshtml* 文件的 *Scripts* 部分以包含代码，从而获取 XSRF 令牌。"},{"content":"将应用程序更新发布到 Azure 和 SQL 数据库","pos":[22838,22864]},{"content":"若要发布应用程序，可重复之前遵循的过程。","pos":[22866,22886]},{"content":"在“解决方案资源管理器”中，右键单击项目并选择“发布”。","pos":[22891,22919]},{"content":"发布","pos":[22927,22929]},{"content":"单击“导入”，然后选择上面下载的发布配置文件。","pos":[22940,22963]},{"content":"在 <bpt id=\"p1\">**</bpt>ContactsManagerContext(ContactsManagerContext)<ept id=\"p1\">**</ept> 之下，单击 <bpt id=\"p2\">**</bpt>v<ept id=\"p2\">**</ept> 图标将<bpt id=\"p3\">*</bpt>远程连接字符串<ept id=\"p3\">*</ept>更改为联系人数据库的连接字符串。","pos":[22972,23065],"source":"在 **ContactsManagerContext(ContactsManagerContext)** 之下，单击 **v** 图标将*远程连接字符串*更改为联系人数据库的连接字符串。"},{"content":"单击“ContactDB”。","pos":[23065,23079]},{"content":"设置","pos":[23087,23089]},{"content":"选中“执行代码优先迁移(应用程序启动时运行)”复选框。","pos":[23166,23193]},{"content":"单击“下一步”，然后单击“预览”。","pos":[23198,23215]},{"content":"Visual Studio 将显示一个需要添加或更新的文件列表。","pos":[23215,23247]},{"content":"单击“发布”。","pos":[23252,23259]},{"content":"部署完成后，浏览器将打开该应用程序的主页。","pos":[23260,23281],"source":"\n部署完成后，浏览器将打开该应用程序的主页。"},{"content":"没有任何联系人的索引页面","pos":[23289,23301]},{"content":"Visual Studio 发布过程自动将部署的 <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> 文件中的连接字符串配置为指向 SQL 数据库。","pos":[23318,23379],"source":"Visual Studio 发布过程自动将部署的 *Web.config* 文件中的连接字符串配置为指向 SQL 数据库。"},{"content":"其还配置了代码优先迁移，以在部署后应用程序首次访问数据库时自动将数据库升级至最新版本。","pos":[23379,23422]},{"content":"由于这种配置，通过运行之前创建的 <bpt id=\"p1\">**</bpt>Initial<ept id=\"p1\">**</ept> 类中的代码，代码优先创建了数据库。","pos":[23428,23474],"source":"由于这种配置，通过运行之前创建的 **Initial** 类中的代码，代码优先创建了数据库。"},{"content":"其会在应用程序在部署后首次尝试访问数据库时进行。","pos":[23474,23498]},{"content":"在本地运行应用程序时按之前所做输入一个联系人以验证数据库部署是否成功。","pos":[23503,23538]},{"content":"当看到输入的项得到了保存并显示在联系人管理器页面，你就可以知晓其已存储在数据库中。","pos":[23540,23581]},{"content":"包含联系人的索引页面","pos":[23585,23595]},{"content":"该应用程序现在是运行在云中，使用 SQL 数据库存储其数据。","pos":[23612,23642]},{"content":"在 Azure 中测试应用程序完成后，将其删除。","pos":[23642,23666]},{"content":"该应用程序是公开的并且没有限制访问的机制。","pos":[23666,23687]},{"pos":[23715,23719],"content":"后续步骤"},{"content":"实际的应用程序需要身份验证和授权，你可以使用成员资格数据库实现此目的。","pos":[23721,23756]},{"content":"教程<bpt id=\"p1\">[</bpt>使用 OAuth、成员资格以及 SQL 数据库部署安全的 ASP.NET MVC 应用程序<ept id=\"p1\">](/documentation/articles/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database)</ept>基于本教程，其中介绍了如何部署包含成员资格数据库的 Web 应用。","pos":[23756,23932],"source":"教程[使用 OAuth、成员资格以及 SQL 数据库部署安全的 ASP.NET MVC 应用程序](/documentation/articles/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database)基于本教程，其中介绍了如何部署包含成员资格数据库的 Web 应用。"},{"content":"另一种在 Azure 应用程序中存储数据的方法是使用 Azure 存储，该方法以 Blob 和表的形式提供非关系数据存储。","pos":[23934,23995]},{"content":"以下链接提供了更多有关 Web API、ASP.NET MVC 以及 Window Azure 的信息。","pos":[23995,24047]},{"pos":[24053,24107],"content":"<bpt id=\"p1\">[</bpt>使用 MVC 的 Entity Framework 入门<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt><ept id=\"p2\">EFCodeFirstMVCTutorial]</ept>","source":"[使用 MVC 的 Entity Framework 入门][EFCodeFirstMVCTutorial]"},{"content":"ASP.NET MVC 5 简介","pos":[24111,24127]},{"content":"你的第一个 ASP.NET Web API","pos":[24201,24222]},{"content":"调试 WAWS","pos":[24328,24335]},{"pos":[24407,24509],"content":"本教程和示例应用程序由 <bpt id=\"p1\">[</bpt>Rick Anderson<ept id=\"p1\">](http://blogs.msdn.com/b/rickandy/)</ept> 在 Tom Dykstra 和 Barry Dorrans 的帮助下编写完成。","source":"本教程和示例应用程序由 [Rick Anderson](http://blogs.msdn.com/b/rickandy/) 在 Tom Dykstra 和 Barry Dorrans 的帮助下编写完成。"},{"content":"请提供有关你喜欢的内容或者你希望看到改善的内容的反馈，不仅关于教程本身，也关于它所演示的产品。","pos":[24511,24558]},{"content":"你的反馈将帮助我们确定优先改进哪些方面。","pos":[24558,24578]},{"content":"我们特别希望确定大家对于对配置和部署成员资格数据库的流程进行更多自动化的兴趣有多大。","pos":[24578,24620]}],"content":"<properties \n    pageTitle=\"在 Azure Web 应用中使用 ASP.NET Web API 和 SQL 数据库创建 REST 服务\" \n    description=\"本教程将向您介绍如何通过使用 Visual Studio 将使用 ASP.NET Web API 的应用程序部署到 Azure Web 应用。\" \n    services=\"app-service\\web\" \n    documentationCenter=\".net\" \n    authors=\"Rick-Anderson\" \n    writer=\"Rick-Anderson\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service-web\"\n    ms.date=\"12/04/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n# 在 Azure Web 应用中使用 ASP.NET Web API 和 SQL 数据库创建 REST 服务\n\n本教程介绍如何使用 Visual Studio 2013 或 Visual Studio 2013 Community Edition 中的“发布 Web”向导将 ASP.NET Web 应用部署到 [Azure Web 应用](/documentation/services/web-sites/)。\n\n你可以免费注册一个 Azure 帐户，而且，如果你还没有 Visual Studio 2013，则此 SDK 会自动安装 Visual Studio 2013 for Web Express。这样你就能够完全免费地开始针对 Azure 进行开发了。\n\n本教程假定你之前未使用过 Azure。完成本教程之后，你将能够在云中启动并运行简单的 Web 应用。\n \n学习内容：\n\n* 如何通过安装 Azure SDK 来让你的计算机可以进行 Azure 开发。\n* 如何创建 Visual Studio ASP.NET MVC 5 项目并将其发布到 Azure 应用。\n* 如何使用 ASP.NET Web API 实现 Restful API 调用。\n* 如何使用 SQL 数据库在 Azure 中存储数据。\n* 如何将应用程序更新发布到 Azure。\n\n你将生成一个简单的联系人列表 Web 应用，该 Web 应用基于 ASP.NET MVC 5 构建并使用 ADO.NET Entity Framework 进行数据库访问。下图演示了完整的应用程序：\n\n![ Web 应用屏幕截图][intro001]\n\n[AZURE.INCLUDE [create-account-and-websites-note](../includes/create-account-and-websites-note.md)]\n\n### 创建项目\n\n1. 启动 Visual Studio 2013。\n1. 在“文件”菜单中，单击“新建项目”。\n3. 在“新建项目”对话框中，展开“Visual C#”并选择“Web”，然后选择“ASP.NET Web 应用”。将该应用程序命名为 **ContactManager**，然后单击“确定”。\n\n    ![“新建项目”对话框](./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rr4.png)\n\n1. 在“新建 ASP.NET 项目”对话框中，选择“MVC”模板，选中“Web API”，确保“在云中托管”处于未选中状态，然后单击“确定”。\n\n    ![“新建 ASP.NET 项目”对话框](./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rt3.png)\n\n如果你在 Azure 中还没有 Web 应用，则可以转到 [Azure 管理门户](http://manage.windowsazure.cn)创建一个。创建 Web 应用后，请转到“仪表板”，在“速览”下可以下载发布配置文件。在本文的发布部分中，你将需要它。\n\n如果你有数据库服务器，请使用它来创建新的数据库。数据库服务器是非常宝贵的资源，而且你通常会想要在同一台服务器上创建多个数据库来进行测试和开发，而不是在每个数据库中各创建一个数据库服务器。请确保你的 Web 应用和数据库位于相同区域中。\n\n### 设置页眉和页脚\n\n\n1. 在“解决方案资源管理器”中，展开 *Views\\\\Shared* 文件夹并打开 *\\_Layout.cshtml* 文件。\n\n    ![\\_Layout.cshtml in Solution Explorer][newapp004]\n\n1. 将 *Views\\\\Shared\\_Layout.cshtml* 文件的内容替换为以下代码：\n\n\n        <!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"utf-8\" />\n            <title>@ViewBag.Title - Contact Manager</title>\n            <link href=\"~/favicon.ico\" rel=\"shortcut icon\" type=\"image/x-icon\" />\n            <meta name=\"viewport\" content=\"width=device-width\" />\n            @Styles.Render(\"~/Content/css\")\n            @Scripts.Render(\"~/bundles/modernizr\")\n        </head>\n        <body>\n            <header>\n                <div class=\"content-wrapper\">\n                    <div class=\"float-left\">\n                        <p class=\"site-title\">@Html.ActionLink(\"Contact Manager\", \"Index\", \"Home\")</p>\n                    </div>\n                </div>\n            </header>\n            <div id=\"body\">\n                @RenderSection(\"featured\", required: false)\n                <section class=\"content-wrapper main-content clear-fix\">\n                    @RenderBody()\n                </section>\n            </div>\n            <footer>\n                <div class=\"content-wrapper\">\n                    <div class=\"float-left\">\n                        <p>&copy; @DateTime.Now.Year - Contact Manager</p>\n                    </div>\n                </div>\n            </footer>\n            @Scripts.Render(\"~/bundles/jquery\")\n            @RenderSection(\"scripts\", required: false)\n        </body>\n        </html>\n            \n上面的标记会将应用程序名称从 \"My ASP.NET App\" 更改为 \"Contact Manager\"，并移除到“主页”、“关于”以及“联系人”的链接。\n\n### 在本地运行应用程序\n\n1. 按 Ctrl+F5 运行应用程序。\n随后在默认浏览器中显示该应用程序主页。\n\n    ![到待办事项列表主页](./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rr5.png)\n\n这就是你创建将要部署到 Azure 的应用程序目前所需的全部操作。稍后你将添加数据库功能。\n\n## 将应用程序部署到 Azure\n\n1. 在 Visual Studio 中，在“解决方案资源管理器”中右键单击该项目，从上下文菜单中选择“发布”。\n\n    ![项目上下文菜单中的“发布”][PublishVSSolution]\n\n    “发布 Web”向导将打开。\n\n12. 单击“发布”。点击“导入”，并选择之前下载的“发布配置文件”。\n\n    ![“设置”选项卡](./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/pw.png)\n\n    Visual Studio 开始执行将文件复制到 Azure 服务器的过程。“输出”窗口将显示已执行的部署操作并报告已成功完成部署。\n\n14. 默认浏览器会自动打开，并指向所部署站点的 URL。\n\n    你创建的应用程序现在在云中运行。\n    \n    ![在 Azure 中运行的待办事项列表主页][rxz2]\n\n## 向应用程序添加数据库\n\n接下来，你将更新 MVC 应用程序以添加显示和更新联系人以及在数据库中存储数据的功能。应用程序将使用 Entity Framework 创建数据库并读取和更新数据库中的数据。\n\n### 为联系人添加数据模型类\n\n首先，使用代码创建一个简单的数据模型。\n\n1. 在“解决方案资源管理器”中，右键单击 Models 文件夹，单击“添加”，然后单击“类”。\n\n    ![Models 文件夹上下文菜单中的“添加类”][adddb001]\n\n2. 在“添加新项”对话框中，将新的类文件命名为 *Contact.cs* ，然后单击“添加”。\n\n    ![“添加新项”对话框][adddb002]\n\n3. 将 Contacts.cs 文件的内容替换为以下代码。\n\n        using System.Globalization;\n        namespace ContactManager.Models\n        {\n            public class Contact\n            {\n                public int ContactId { get; set; }\n                public string Name { get; set; }\n                public string Address { get; set; }\n                public string City { get; set; }\n                public string State { get; set; }\n                public string Zip { get; set; }\n                public string Email { get; set; }\n                public string Twitter { get; set; }\n                public string Self\n                {\n                    get { return string.Format(CultureInfo.CurrentCulture,\n                         \"api/contacts/{0}\", this.ContactId); }\n                    set { }\n                }\n            }\n        }\n\n**Contact** 类定义你将为每个联系人存储的数据以及数据库需要的主键 ContactID。你可以在本教程末尾的[后续步骤](#nextsteps)部分中获取有关数据模型的详细信息。\n\n### 创建使应用程序用户可以使用联系人的网页\n\nASP.NET MVC 基架功能可以自动生成用于执行创建、读取、更新和删除 (CRUD) 操作的代码。\n\n## 为数据添加控制器和视图\n\n1. 在“解决方案资源管理器”中，展开“控制器”文件夹。\n\n3. 生成项目 **(Ctrl+Shift+B)**。（在使用基架机制前必须生成项目。）\n\n4. 右键单击“控制器”文件夹，单击“添加”，然后单击“控制器”。\n\n    ![Controllers 文件夹上下文菜单中的“添加控制器”][addcode001]\n\n1. 在“添加基架”对话框中，选择“包含视图的 MVC 控制器(使用 Entity Framework)”并单击“添加”。\n\n    ![添加控制器](./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rrAC.png)\n\n6. 将控制器名设置为 **HomeController**。选择“联系人”作为模型类。单击“新建数据上下文”按钮并接受默认的“ContactManager.Models.ContactManagerContext”为“新的数据上下文类型”。单击**“添加”**。\n\n    ![“添加控制器”对话框](./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rr9.png)\n\n    将出现一个提示对话框：“名为 HomeController 的文件已存在。是否希望将其替换？”。单击**“是”**。我们正在覆盖使用新项目创建的主控制器。我们将为联系人列表使用新的主控制器。\n\n    Visual Studio 将为 **Contact** 对象的 CRUD 数据库操作创建控制器方法和视图。\n\n## 启用迁移、创建数据库、添加示例数据和数据初始值设定项 ##\n\n接下来的任务是启用 [Code First 迁移](http://curah.microsoft.com/55220)功能以便基于你创建的数据模型创建数据库。\n\n1. 在“工具”菜单中，依次选择“库包管理器”和“包管理器控制台”。\n\n    ![“工具”菜单中的“程序包管理器控制台”][addcode008]\n\n2. 在“包管理器控制台”窗口中，输入以下命令：\n\n        enable-migrations \n  \n    **enable-migrations** 命令将创建一个 *Migrations* 文件夹，并在该文件夹中放入一个可编辑以配置 Migrations 的 *Configuration.cs* 文件。\n\n2. 在“包管理器控制台”窗口中，输入以下命令：\n\n        add-migration Initial\n\n    **add-migration Initial** 命令将生成一个创建数据库的名为 **&lt;date\\_stamp&gt;Initial** 的类。第一个参数 (*Initial*) 是任意参数并将用于创建文件名称。你可以在“解决方案资源管理器”中查看新的类文件。\n\n    在 **Initial** 类中，**Up** 方法用于创建 Contacts 表，而 **Down** 方法（在你想要返回到以前的状态时使用）用于删除该表。\n\n3. 打开 *Migrations\\\\Configuration.cs* 文件。\n\n4. 添加以下命名空间。\n\n         using ContactManager.Models;\n\n5. 将 *Seed* 方法替换为以下代码：\n        \n        protected override void Seed(ContactManager.Models.ContactManagerContext context)\n        {\n            context.Contacts.AddOrUpdate(p => p.Name,\n               new Contact\n               {\n                   Name = \"Debra Garcia\",\n                   Address = \"1234 Main St\",\n                   City = \"Redmond\",\n                   State = \"WA\",\n                   Zip = \"10999\",\n                   Email = \"debra@example.com\",\n                   Twitter = \"debra_example\"\n               },\n                new Contact\n                {\n                    Name = \"Thorsten Weinrich\",\n                    Address = \"5678 1st Ave W\",\n                    City = \"Redmond\",\n                    State = \"WA\",\n                    Zip = \"10999\",\n                    Email = \"thorsten@example.com\",\n                    Twitter = \"thorsten_example\"\n                },\n                new Contact\n                {\n                    Name = \"Yuhong Li\",\n                    Address = \"9012 State st\",\n                    City = \"Redmond\",\n                    State = \"WA\",\n                    Zip = \"10999\",\n                    Email = \"yuhong@example.com\",\n                    Twitter = \"yuhong_example\"\n                },\n                new Contact\n                {\n                    Name = \"Jon Orton\",\n                    Address = \"3456 Maple St\",\n                    City = \"Redmond\",\n                    State = \"WA\",\n                    Zip = \"10999\",\n                    Email = \"jon@example.com\",\n                    Twitter = \"jon_example\"\n                },\n                new Contact\n                {\n                    Name = \"Diliana Alexieva-Bosseva\",\n                    Address = \"7890 2nd Ave E\",\n                    City = \"Redmond\",\n                    State = \"WA\",\n                    Zip = \"10999\",\n                    Email = \"diliana@example.com\",\n                    Twitter = \"diliana_example\"\n                }\n                );\n        }\n\n    上面这段代码将用联系人信息初始化数据库。有关对数据库进行种子设定的更多信息，请参阅调试 [Entity Framework (EF) 数据库](http://blogs.msdn.com/b/rickandy/archive/2013/02/12/seeding-and-debugging-entity-framework-ef-dbs.aspx)。\n\n\n1. 在“包管理器控制台”中输入以下命令：\n\n        update-database\n\n    ![“程序包管理器控制台”命令][addcode009]\n\n    **update-database** 用于运行将创建数据库的初始迁移。默认情况下，将以 SQL Server Express LocalDB 数据库的形式创建数据库。\n\n1. 按 Ctrl+F5 运行应用程序。\n\n应用程序将显示种子数据并提供编辑、详细信息和删除链接。\n\n![数据的 MVC 视图][rxz3]\n\n## 编辑视图\n\n1. 打开 *Views\\\\Home\\\\Index.cshtml* 文件。在下一步中，我们将生成的标记替换为使用 [jQuery](http://jquery.com/) 和 [Knockout.js](http://knockoutjs.com/) 的代码。此新代码将使用 Web API 和 JSON 检索联系人列表，然后使用 knockout.js 将联系人数据绑定至 UI。有关详细信息，请参阅本教程末尾的[后续步骤](#nextsteps)部分。 \n\n\n2. 将文件的内容替换为以下代码。\n\n        @model IEnumerable<ContactManager.Models.Contact>\n        @{\n            ViewBag.Title = \"Home\";\n        }\n        @section Scripts {\n            @Scripts.Render(\"~/bundles/knockout\")\n            <script type=\"text/javascript\">\n                function ContactsViewModel() {\n                    var self = this;\n                    self.contacts = ko.observableArray([]);\n                    self.addContact = function () {\n                        $.post(\"api/contacts\",\n                            $(\"#addContact\").serialize(),\n                            function (value) {\n                                self.contacts.push(value);\n                            },\n                            \"json\");\n                    }\n                    self.removeContact = function (contact) {\n                        $.ajax({\n                            type: \"DELETE\",\n                            url: contact.Self,\n                            success: function () {\n                                self.contacts.remove(contact);\n                            }\n                        });\n                    }\n\n                    $.getJSON(\"api/contacts\", function (data) {\n                        self.contacts(data);\n                    });\n                }\n                ko.applyBindings(new ContactsViewModel());  \n        </script>\n        }\n        <ul id=\"contacts\" data-bind=\"foreach: contacts\">\n            <li class=\"ui-widget-content ui-corner-all\">\n                <h1 data-bind=\"text: Name\" class=\"ui-widget-header\"></h1>\n                <div><span data-bind=\"text: $data.Address || 'Address?'\"></span></div>\n                <div>\n                    <span data-bind=\"text: $data.City || 'City?'\"></span>,\n                    <span data-bind=\"text: $data.State || 'State?'\"></span>\n                    <span data-bind=\"text: $data.Zip || 'Zip?'\"></span>\n                </div>\n                <div data-bind=\"if: $data.Email\"><a data-bind=\"attr: { href: 'mailto:' + Email }, text: Email\"></a></div>\n                <div data-bind=\"ifnot: $data.Email\"><span>Email?</span></div>\n                <div data-bind=\"if: $data.Twitter\"><a data-bind=\"attr: { href: 'http://twitter.com/' + Twitter }, text: '@@' + Twitter\"></a></div>\n                <div data-bind=\"ifnot: $data.Twitter\"><span>Twitter?</span></div>\n                <p><a data-bind=\"attr: { href: Self }, click: $root.removeContact\" class=\"removeContact ui-state-default ui-corner-all\">Remove</a></p>\n            </li>\n        </ul>\n        <form id=\"addContact\" data-bind=\"submit: addContact\">\n            <fieldset>\n                <legend>Add New Contact</legend>\n                <ol>\n                    <li>\n                        <label for=\"Name\">Name</label>\n                        <input type=\"text\" name=\"Name\" />\n                    </li>\n                    <li>\n                        <label for=\"Address\">Address</label>\n                        <input type=\"text\" name=\"Address\" >\n                    </li>\n                    <li>\n                        <label for=\"City\">City</label>\n                        <input type=\"text\" name=\"City\" />\n                    </li>\n                    <li>\n                        <label for=\"State\">State</label>\n                        <input type=\"text\" name=\"State\" />\n                    </li>\n                    <li>\n                        <label for=\"Zip\">Zip</label>\n                        <input type=\"text\" name=\"Zip\" />\n                    </li>\n                    <li>\n                        <label for=\"Email\">E-mail</label>\n                        <input type=\"text\" name=\"Email\" />\n                    </li>\n                    <li>\n                        <label for=\"Twitter\">Twitter</label>\n                        <input type=\"text\" name=\"Twitter\" />\n                    </li>\n                </ol>\n                <input type=\"submit\" value=\"Add\" />\n            </fieldset>\n        </form>\n\n3. 右键单击 Content 文件夹并单击“添加”，然后单击“新建项...”。\n\n    ![在 Content 文件夹上下文菜单中添加样式表][addcode005]\n\n4. 在“添加新项”对话框中，在右上的搜索框中输入 **Style**，然后选择“样式表”。\n    ![“添加新项”对话框][rxStyle]\n\n5. 将文件命名为 *Contacts.css* 并单击“添加”。将文件的内容替换为以下代码。\n    \n        .column {\n            float: left;\n            width: 50%;\n            padding: 0;\n            margin: 5px 0;\n        }\n        form ol {\n            list-style-type: none;\n            padding: 0;\n            margin: 0;\n        }\n        form li {\n            padding: 1px;\n            margin: 3px;\n        }\n        form input[type=\"text\"] {\n            width: 100%;\n        }\n        #addContact {\n            width: 300px;\n            float: left;\n            width:30%;\n        }\n        #contacts {\n            list-style-type: none;\n            margin: 0;\n            padding: 0;\n            float:left;\n            width: 70%;\n        }\n        #contacts li {\n            margin: 3px 3px 3px 0;\n            padding: 1px;\n            float: left;\n            width: 300px;\n            text-align: center;\n            background-image: none;\n            background-color: #F5F5F5;\n        }\n        #contacts li h1\n        {\n            padding: 0;\n            margin: 0;\n            background-image: none;\n            background-color: Orange;\n            color: White;\n            font-family: Trebuchet MS, Tahoma, Verdana, Arial, sans-serif;\n        }\n        .removeContact, .viewImage\n        {\n            padding: 3px;\n            text-decoration: none;\n        }\n\n    该样式表将用作联系人管理器应用程序的布局、颜色和样式。\n\n6. 打开 *App\\_Start\\\\BundleConfig.cs* 文件。\n\n\n7. 添加以下代码以注册 [Knockout](http://knockoutjs.com/index.html \"KO\") 插件。\n\n        bundles.Add(new ScriptBundle(\"~/bundles/knockout\").Include(\n                    \"~/Scripts/knockout-{version}.js\"));\n    此示例使用 knockout 来简化处理屏幕模板的动态 JavaScript 代码。\n\n8. 修改 contents/css 条目以注册 *contacts.css* 样式表。将以下行\n\n                 bundles.Add(new StyleBundle(\"~/Content/css\").Include(\n                   \"~/Content/bootstrap.css\",\n                   \"~/Content/site.css\"));\n更改为：\n\n        bundles.Add(new StyleBundle(\"~/Content/css\").Include(\n                   \"~/Content/bootstrap.css\",\n                   \"~/Content/contacts.css\",\n                   \"~/Content/site.css\"));\n\n1. 在“程序包管理器控制台”中运行以下命令以安装 Knockout。\n\n        Install-Package knockoutjs\n\n## 为 Web API Restful 接口添加控制器\n\n1. 在“解决方案资源管理器”中，右键单击“控制器”，然后依次单击“添加”和“控制器....”。 \n\n1. 在“添加基架”对话框中，进入“包含操作的 Web API 2 控制器(使用 Entity Framework)”并单击“添加”。\n\n    ![添加 API 控制器](./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rt1.png)\n\n4. 在“添加控制器”对话框中，输入“ContactsController”作为控制器名称。为“模型类”选择“Contact (ContactManager.Models)”。保留“数据上下文类”的默认值。\n\n6. 单击**“添加”**。\n\n### 在本地运行应用程序\n\n1. 按 Ctrl+F5 运行应用程序。\n\n    ![索引页面][intro001]\n\n2. 输入联系人信息并单击“添加”。该应用程序将返回主页并显示刚才输入的联系人信息。\n\n    ![包含待办事项列表项的索引页面][addwebapi004]\n\n3. 在浏览器中，将 **/api/contacts** 追加到 URL。\n\n    生成的 URL 将类似于 http://localhost:1234/api/contacts。添加的 RESTful Web API 将返回存储的联系人。Firefox 和 Chrome 将以 XML 格式显示数据。\n\n    ![包含待办事项列表项的索引页面][rxFFchrome]\n    \n\n    IE 将提示你打开或保存联系人。\n\n    ![Web API 保存对话框][addwebapi006]\n    \n    \n    你可以在记事本或浏览器中打开返回的联系人。\n    \n    此输出可由另一个应用程序（如移动 Web 页面或应用程序）使用。\n\n    ![Web API 保存对话框][addwebapi007]\n\n    **安全警告**：此时，你的应用程序是不安全的，而且容易受到 CSRF 攻击。本教程稍后部分将将解决这一漏洞。有关详细信息，请参阅[防止跨站点请求伪造 (CSRF) 攻击][prevent-csrf-attacks]。\n## 添加 XSRF 保护\n\n跨站点请求伪造（也称为 XSRF 或 CSRF）是一种针对 Web 托管型应用程序的攻击，恶意 Web 应用凭此可以影响客户端浏览器与受该浏览器信任的 Web 应用之间的交互。这些攻击出现的原因可能是 Web 浏览器针对每一个对 Web 应用的请求自动发送身份验证令牌。典型示例是身份验证 cookie，如 ASP.NET 的表单身份验证票证。然而，使用任何持久身份验证（如 Windows Authentication、Basic 等）的 Web 应用也可能成为受攻击目标。\n\nXSRF 攻击不同于网络钓鱼攻击。网络钓鱼攻击需要与受害者进行交互。在网络钓鱼攻击中，恶意 Web 应用将仿冒目标 Web 应用，受到欺骗的受害者会向攻击者提供敏感信息。在 XSRF 攻击中，通常不必与受害者进行交互。相反，浏览器自动向目标 Web 应用发送所有相关 Cookie 为攻击者提供了可乘之机。\n\n有关详细信息，请参阅[打开 Web 应用安全项目](https://www.owasp.org/index.php/Main_Page) (OWASP) [XSRF](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))。\n\n1. 在“解决方案资源管理器”中，右键单击“ContactManager”项目并单击“添加”，然后单击“类”。\n\n2. 将文件命名为 *ValidateHttpAntiForgeryTokenAttribute.cs* 并添加以下代码：\n\n        using System;\n        using System.Collections.Generic;\n        using System.Linq;\n        using System.Net;\n        using System.Net.Http;\n        using System.Web.Helpers;\n        using System.Web.Http.Controllers;\n        using System.Web.Http.Filters;\n        using System.Web.Mvc;\n        namespace ContactManager.Filters\n        {\n            public class ValidateHttpAntiForgeryTokenAttribute : AuthorizationFilterAttribute\n            {\n                public override void OnAuthorization(HttpActionContext actionContext)\n                {\n                    HttpRequestMessage request = actionContext.ControllerContext.Request;\n                    try\n                    {\n                        if (IsAjaxRequest(request))\n                        {\n                            ValidateRequestHeader(request);\n                        }\n                        else\n                        {\n                            AntiForgery.Validate();\n                        }\n                    }\n                    catch (HttpAntiForgeryException e)\n                    {\n                        actionContext.Response = request.CreateErrorResponse(HttpStatusCode.Forbidden, e);\n                    }\n                }\n                private bool IsAjaxRequest(HttpRequestMessage request)\n                {\n                    IEnumerable<string> xRequestedWithHeaders;\n                    if (request.Headers.TryGetValues(\"X-Requested-With\", out xRequestedWithHeaders))\n                    {\n                        string headerValue = xRequestedWithHeaders.FirstOrDefault();\n                        if (!String.IsNullOrEmpty(headerValue))\n                        {\n                            return String.Equals(headerValue, \"XMLHttpRequest\", StringComparison.OrdinalIgnoreCase);\n                        }\n                    }\n                    return false;\n                }\n                private void ValidateRequestHeader(HttpRequestMessage request)\n                {\n                    string cookieToken = String.Empty;\n                    string formToken = String.Empty;\n                    IEnumerable<string> tokenHeaders;\n                    if (request.Headers.TryGetValues(\"RequestVerificationToken\", out tokenHeaders))\n                    {\n                        string tokenValue = tokenHeaders.FirstOrDefault();\n                        if (!String.IsNullOrEmpty(tokenValue))\n                        {\n                            string[] tokens = tokenValue.Split(':');\n                            if (tokens.Length == 2)\n                            {\n                                cookieToken = tokens[0].Trim();\n                                formToken = tokens[1].Trim();\n                            }\n                        }\n                    }\n                    AntiForgery.Validate(cookieToken, formToken);\n                }\n            }\n        }\n\n1. 将以下 *using* 语句添加到联系人控制器以便你可以访问 **[ValidateHttpAntiForgeryToken]** 属性。\n\n        using ContactManager.Filters;\n\n1. 将 **[ValidateHttpAntiForgeryToken]** 属性添加到 **ContactsController** 的 Post 方法以保护其免受 XSRF 威胁。将其添加到 \"PutContact\"、\"PostContact\" 和 **DeleteContact** 操作方法。\n\n        [ValidateHttpAntiForgeryToken]\n            public IHttpActionResult PutContact(int id, Contact contact)\n            {\n\n1. 更新 *Views\\\\Home\\\\Index.cshtml* 文件的 *Scripts* 部分以包含代码，从而获取 XSRF 令牌。\n\n         @section Scripts {\n            @Scripts.Render(\"~/bundles/knockout\")\n            <script type=\"text/javascript\">\n                @functions{\n                   public string TokenHeaderValue()\n                   {\n                      string cookieToken, formToken;\n                      AntiForgery.GetTokens(null, out cookieToken, out formToken);\n                      return cookieToken + \":\" + formToken;                \n                   }\n                }\n\n               function ContactsViewModel() {\n                  var self = this;\n                  self.contacts = ko.observableArray([]);\n                  self.addContact = function () {\n\n                     $.ajax({\n                        type: \"post\",\n                        url: \"api/contacts\",\n                        data: $(\"#addContact\").serialize(),\n                        dataType: \"json\",\n                        success: function (value) {\n                           self.contacts.push(value);\n                        },\n                        headers: {\n                           'RequestVerificationToken': '@TokenHeaderValue()'\n                        }\n                     });\n\n                  }\n                  self.removeContact = function (contact) {\n                     $.ajax({\n                        type: \"DELETE\",\n                        url: contact.Self,\n                        success: function () {\n                           self.contacts.remove(contact);\n                        },\n                        headers: {\n                           'RequestVerificationToken': '@TokenHeaderValue()'\n                        }\n\n                     });\n                  }\n\n                  $.getJSON(\"api/contacts\", function (data) {\n                     self.contacts(data);\n                  });\n               }\n               ko.applyBindings(new ContactsViewModel());\n            </script>\n         }\n\n\n## 将应用程序更新发布到 Azure 和 SQL 数据库\n\n若要发布应用程序，可重复之前遵循的过程。\n\n1. 在“解决方案资源管理器”中，右键单击项目并选择“发布”。\n\n    ![发布][rxP]\n\n5. 单击“导入”，然后选择上面下载的发布配置文件。\n    \n1. 在 **ContactsManagerContext(ContactsManagerContext)** 之下，单击 **v** 图标将*远程连接字符串*更改为联系人数据库的连接字符串。单击“ContactDB”。\n\n    ![设置](./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rt5.png)\n\n7. 选中“执行代码优先迁移(应用程序启动时运行)”复选框。\n\n1. 单击“下一步”，然后单击“预览”。Visual Studio 将显示一个需要添加或更新的文件列表。\n\n8. 单击“发布”。\n部署完成后，浏览器将打开该应用程序的主页。\n\n    ![没有任何联系人的索引页面][intro001]\n\n    Visual Studio 发布过程自动将部署的 *Web.config* 文件中的连接字符串配置为指向 SQL 数据库。其还配置了代码优先迁移，以在部署后应用程序首次访问数据库时自动将数据库升级至最新版本。\n\n    由于这种配置，通过运行之前创建的 **Initial** 类中的代码，代码优先创建了数据库。其会在应用程序在部署后首次尝试访问数据库时进行。\n\n9. 在本地运行应用程序时按之前所做输入一个联系人以验证数据库部署是否成功。\n\n当看到输入的项得到了保存并显示在联系人管理器页面，你就可以知晓其已存储在数据库中。\n\n![包含联系人的索引页面][addwebapi004]\n\n该应用程序现在是运行在云中，使用 SQL 数据库存储其数据。在 Azure 中测试应用程序完成后，将其删除。该应用程序是公开的并且没有限制访问的机制。\n\n##<a name=\"nextsteps\"></a>后续步骤\n\n实际的应用程序需要身份验证和授权，你可以使用成员资格数据库实现此目的。教程[使用 OAuth、成员资格以及 SQL 数据库部署安全的 ASP.NET MVC 应用程序](/documentation/articles/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database)基于本教程，其中介绍了如何部署包含成员资格数据库的 Web 应用。\n\n另一种在 Azure 应用程序中存储数据的方法是使用 Azure 存储，该方法以 Blob 和表的形式提供非关系数据存储。以下链接提供了更多有关 Web API、ASP.NET MVC 以及 Window Azure 的信息。\n \n\n* [使用 MVC 的 Entity Framework 入门][EFCodeFirstMVCTutorial]\n* [ASP.NET MVC 5 简介](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)\n* [你的第一个 ASP.NET Web API](http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api)\n* [调试 WAWS](/documentation/articles/web-sites-dotnet-troubleshoot-visual-studio)\n\n本教程和示例应用程序由 [Rick Anderson](http://blogs.msdn.com/b/rickandy/) 在 Tom Dykstra 和 Barry Dorrans 的帮助下编写完成。\n\n请提供有关你喜欢的内容或者你希望看到改善的内容的反馈，不仅关于教程本身，也关于它所演示的产品。你的反馈将帮助我们确定优先改进哪些方面。我们特别希望确定大家对于对配置和部署成员资格数据库的流程进行更多自动化的兴趣有多大。\n\n<!-- bookmarks -->\n[Add an OAuth Provider]: #addOauth\n[Add Roles to the Membership Database]: #mbrDB\n[Create a Data Deployment Script]: #ppd\n[Update the Membership Database]: #ppd2\n[setupdbenv]: #bkmk_setupdevenv\n[setupwindowsazureenv]: #bkmk_setupwindowsazure\n[createapplication]: #bkmk_createmvc4app\n[deployapp1]: #bkmk_deploytowindowsazure1\n[adddb]: #bkmk_addadatabase\n[addcontroller]: #bkmk_addcontroller\n[addwebapi]: #bkmk_addwebapi\n[deploy2]: #bkmk_deploydatabaseupdate\n\n<!-- links -->\n[EFCodeFirstMVCTutorial]: http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application\n[dbcontext-link]: http://msdn.microsoft.com/zh-cn/library/system.data.entity.dbcontext(v=VS.103).aspx\n\n\n<!-- images-->\n[rxE]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxE.png\n[rxP]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxP.png\n[rx22]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/\n[rxb2]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxb2.png\n[rxz]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxz.png\n[rxzz]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxzz.png\n[rxz2]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxz2.png\n[rxz3]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxz3.png\n[rxStyle]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxStyle.png\n[rxz4]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxz4.png\n[rxz44]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxz44.png\n[rxNewCtx]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxNewCtx.png\n[rxPrevDB]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxPrevDB.png\n[rxOverwrite]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxOverwrite.png\n[rxPWS]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxPWS.png\n[rxNewCtx]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxNewCtx.png\n[rxAddApiController]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxAddApiController.png\n[rxFFchrome]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxFFchrome.png\n[intro001]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobil-intro-finished-web-app.png\n[rxCreateWSwithDB]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/rxCreateWSwithDB.png\n[setup007]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-setup-azure-site-004.png\n[setup009]: ../Media/dntutmobile-setup-azure-site-006.png\n[newapp002]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-createapp-002.png\n[newapp004]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-createapp-004.png\n[firsdeploy007]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-deploy1-publish-005.png\n[firsdeploy009]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-deploy1-publish-007.png\n[adddb001]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-adddatabase-001.png\n[adddb002]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-adddatabase-002.png\n[addcode001]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-controller-add-context-menu.png\n[addcode002]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-controller-add-controller-dialog.png\n[addcode004]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-controller-modify-index-context.png\n[addcode005]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-controller-add-contents-context-menu.png\n[addcode007]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-controller-modify-bundleconfig-context.png\n[addcode008]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-migrations-package-manager-menu.png\n[addcode009]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-migrations-package-manager-console.png\n[addwebapi004]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-webapi-added-contact.png\n[addwebapi006]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-webapi-save-returned-contacts.png\n[addwebapi007]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/dntutmobile-webapi-contacts-in-notepad.png\n[Add XSRF Protection]: #xsrf\n[WebPIAzureSdk20NetVS12]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/WebPIAzureSdk20NetVS12.png\n[添加 XSRF 保护]: #xsrf\n[ImportPublishSettings]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/ImportPublishSettings.png\n[ImportPublishProfile]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/ImportPublishProfile.png\n[PublishVSSolution]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/PublishVSSolution.png\n[ValidateConnection]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/ValidateConnection.png\n[WebPIAzureSdk20NetVS12]: ./media/web-sites-dotnet-rest-service-aspnet-api-sql-database/WebPIAzureSdk20NetVS12.png\n[prevent-csrf-attacks]: http://www.asp.net/web-api/overview/security/preventing-cross-site-request-forgery-(csrf)-attacks\n \n\n<!---HONumber=Mooncake_0118_2016-->"}