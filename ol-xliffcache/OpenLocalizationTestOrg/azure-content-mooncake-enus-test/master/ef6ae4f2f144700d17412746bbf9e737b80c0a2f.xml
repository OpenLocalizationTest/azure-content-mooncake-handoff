{
  "nodes": [
    {
      "content": "如何通过 WebJobs SDK 使用 Azure 队列存储",
      "pos": [
        28,
        58
      ]
    },
    {
      "content": "了解如何通过 WebJobs SDK 使用 Azure 队列存储。创建和删除队列；插入、扫视、获取和删除队列消息，等等。",
      "pos": [
        78,
        138
      ]
    },
    {
      "content": "如何通过 WebJobs SDK 使用 Azure 队列存储",
      "pos": [
        380,
        410
      ]
    },
    {
      "content": "概述",
      "pos": [
        415,
        417
      ]
    },
    {
      "content": "本指南提供了 C# 代码示例，用于演示如何在 Azure 队列存储服务中使用 Azure WebJobs SDK 版本 1.x。",
      "pos": [
        419,
        483
      ]
    },
    {
      "pos": [
        485,
        779
      ],
      "content": "本指南假设你了解<bpt id=\"p1\">[</bpt>如何使用指向存储帐户的连接字符串在 Visual Studio 中创建 WebJob 项目<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-get-started#configure-storage)</ept>或创建<bpt id=\"p2\">[</bpt>多个存储帐户<ept id=\"p2\">](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)</ept>。"
    },
    {
      "pos": [
        781,
        823
      ],
      "content": "大多数代码段只显示函数，不同于创建 <ph id=\"ph1\">`JobHost`</ph> 对象的代码，如以下示例所示："
    },
    {
      "content": "本指南涉及以下主题：",
      "pos": [
        968,
        978
      ]
    },
    {
      "content": "如何在接收队列消息时触发函数",
      "pos": [
        985,
        999
      ]
    },
    {
      "content": "字符串队列消息",
      "pos": [
        1017,
        1024
      ]
    },
    {
      "content": "POCO 队列消息",
      "pos": [
        1031,
        1040
      ]
    },
    {
      "content": "异步函数",
      "pos": [
        1047,
        1051
      ]
    },
    {
      "content": "QueueTrigger 属性适用的类型",
      "pos": [
        1058,
        1078
      ]
    },
    {
      "content": "轮询算法",
      "pos": [
        1085,
        1089
      ]
    },
    {
      "content": "多个实例",
      "pos": [
        1096,
        1100
      ]
    },
    {
      "content": "并行执行",
      "pos": [
        1107,
        1111
      ]
    },
    {
      "content": "获取队列或队列消息元数据",
      "pos": [
        1118,
        1130
      ]
    },
    {
      "content": "正常关闭",
      "pos": [
        1137,
        1141
      ]
    },
    {
      "content": "如何在处理队列消息时创建队列消息",
      "pos": [
        1147,
        1163
      ]
    },
    {
      "content": "字符串队列消息",
      "pos": [
        1185,
        1192
      ]
    },
    {
      "content": "POCO 队列消息",
      "pos": [
        1199,
        1208
      ]
    },
    {
      "content": "在异步函数中创建多个消息",
      "pos": [
        1215,
        1227
      ]
    },
    {
      "content": "Queue 属性适用的类型",
      "pos": [
        1234,
        1247
      ]
    },
    {
      "content": "在函数正文中使用 WebJobs SDK 属性",
      "pos": [
        1254,
        1277
      ]
    },
    {
      "content": "如何在处理队列消息时读取和写入 Blob",
      "pos": [
        1283,
        1303
      ]
    },
    {
      "content": "字符串队列消息",
      "pos": [
        1319,
        1326
      ]
    },
    {
      "content": "POCO 队列消息",
      "pos": [
        1333,
        1342
      ]
    },
    {
      "content": "Blob 属性适用的类型",
      "pos": [
        1349,
        1361
      ]
    },
    {
      "content": "如何处理有害消息",
      "pos": [
        1367,
        1375
      ]
    },
    {
      "content": "自动处理有害消息",
      "pos": [
        1392,
        1400
      ]
    },
    {
      "content": "手动处理有害消息",
      "pos": [
        1407,
        1415
      ]
    },
    {
      "content": "如何设置配置选项",
      "pos": [
        1421,
        1429
      ]
    },
    {
      "content": "在代码中设置 SDK 连接字符串",
      "pos": [
        1446,
        1462
      ]
    },
    {
      "content": "配置 QueueTrigger 设置",
      "pos": [
        1469,
        1487
      ]
    },
    {
      "content": "在代码中设置 WebJobs SDK 构造函数参数的值",
      "pos": [
        1494,
        1521
      ]
    },
    {
      "content": "如何手动触发函数",
      "pos": [
        1527,
        1535
      ]
    },
    {
      "content": "如何写入日志",
      "pos": [
        1551,
        1557
      ]
    },
    {
      "content": "如何处理错误和配置超时",
      "pos": [
        1572,
        1583
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        1599,
        1603
      ]
    },
    {
      "pos": [
        1621,
        1655
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"trigger\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在收到队列消息时触发函数"
    },
    {
      "pos": [
        1657,
        1762
      ],
      "content": "若要编写在收到队列消息时 WebJobs SDK 调用的函数，请使用 <ph id=\"ph1\">`QueueTrigger`</ph> 属性。该属性构造函数使用一个字符串参数来指定要轮询的队列名称。你也可以<bpt id=\"p1\">[</bpt>动态设置队列名称<ept id=\"p1\">](#config)</ept>。"
    },
    {
      "content": "字符串队列消息",
      "pos": [
        1768,
        1775
      ]
    },
    {
      "pos": [
        1777,
        1874
      ],
      "content": "在下面的示例中，队列中包含一个字符串消息，因此，<ph id=\"ph1\">`QueueTrigger`</ph> 已应用到包含队列消息内容的 <ph id=\"ph2\">`logMessage`</ph> 字符串参数。该函数<bpt id=\"p1\">[</bpt>向仪表板写入一条日志消息<ept id=\"p1\">](#logs)</ept>。"
    },
    {
      "pos": [
        2053,
        2112
      ],
      "content": "除了 <ph id=\"ph1\">`string`</ph> 以外，参数还可以是字节数组、<ph id=\"ph2\">`CloudQueueMessage`</ph> 对象或您定义的 POCO。"
    },
    {
      "pos": [
        2118,
        2191
      ],
      "content": "POCO<bpt id=\"p1\">[</bpt>（普通旧 CLR 对象<ept id=\"p1\">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>）队列消息"
    },
    {
      "pos": [
        2193,
        2272
      ],
      "content": "在下面的示例中，队列消息包含 <ph id=\"ph1\">`BlobInformation`</ph> 对象的 JSON，该对象包含一个 <ph id=\"ph2\">`BlobName`</ph> 属性。SDK 会自动反序列化该对象。"
    },
    {
      "pos": [
        2491,
        2651
      ],
      "content": "SDK 使用 <bpt id=\"p1\">[</bpt>Newtonsoft.Json NuGet 包<ept id=\"p1\">](http://www.nuget.org/packages/Newtonsoft.Json)</ept>序列化和反序列化消息。如果你在不使用 WebJobs SDK 的程序中创建队列消息，则可以如以下示例所示编写代码，以创建 SDK 可以分析的 POCO 队列消息。"
    },
    {
      "content": "异步函数",
      "pos": [
        2873,
        2877
      ]
    },
    {
      "pos": [
        2879,
        2903
      ],
      "content": "以下异步函数<bpt id=\"p1\">[</bpt>将日志写入仪表板<ept id=\"p1\">](#logs)</ept>。"
    },
    {
      "pos": [
        3102,
        3286
      ],
      "content": "异步函数可以采用<bpt id=\"p1\">[</bpt>取消标记<ept id=\"p1\">](http://www.asp.net/mvc/overview/performance/using-asynchronous-methods-in-aspnet-mvc-4#CancelToken)</ept>，如以下用于复制 blob 的示例中所示。（有关 <ph id=\"ph1\">`queueTrigger`</ph> 占位符的说明，请参阅 <bpt id=\"p2\">[</bpt>Blob<ept id=\"p2\">](#blobs)</ept> 部分）。"
    },
    {
      "pos": [
        3722,
        3771
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"qtattributetypes\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>QueueTrigger 属性适用的类型"
    },
    {
      "pos": [
        3773,
        3799
      ],
      "content": "可以对 <ph id=\"ph1\">`QueueTrigger`</ph> 使用以下类型："
    },
    {
      "content": "序列化为 JSON 的 POCO 类型",
      "pos": [
        3814,
        3833
      ]
    },
    {
      "pos": [
        3872,
        3896
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"polling\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>轮询算法"
    },
    {
      "pos": [
        3898,
        4056
      ],
      "content": "SDK 实现了随机指数退让算法，以降低空闲队列轮询对存储事务成本造成的影响。当找到消息时，SDK 将等待两秒钟，然后检查另一条消息；如果未找到消息，它将等待大约四秒，然后重试。如果后续尝试获取队列消息失败，则等待时间会继续增加，直到达到最长等待时间（默认为 1 分钟）。<bpt id=\"p1\">[</bpt>最长等待时间是可配置的<ept id=\"p1\">](#config)</ept>。"
    },
    {
      "pos": [
        4062,
        4088
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"instances\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>多个实例"
    },
    {
      "pos": [
        4090,
        4257
      ],
      "content": "如果 Web 应用在多个实例上运行，则每台计算机上都会运行一个连续 Web 作业，并且每台计算机将等待触发器并尝试运行函数。WebJobs SDK 队列触发器会自动阻止函数多次处理队列消息；函数无需编写为幂等函数。但是，如果你想要确保即使有多个主机 Web 应用的实例，也只有一个函数实例运行，可以使用 <ph id=\"ph1\">`Singleton`</ph> 属性。"
    },
    {
      "pos": [
        4263,
        4288
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"parallel\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>并行执行"
    },
    {
      "content": "如果有多个函数在侦听不同的队列，SDK 将在同时接收消息时并行调用这些函数。",
      "pos": [
        4290,
        4328
      ]
    },
    {
      "pos": [
        4330,
        4513
      ],
      "content": "接收单个队列的多个消息时，也是如此。默认情况下，SDK 每次获取包含 16 个队列消息的批，然后并行执行处理这些消息的函数。<bpt id=\"p1\">[</bpt>批大小是可配置的<ept id=\"p1\">](#config)</ept>。当处理的数量达到批大小的一半时，SDK 将获取另一个批，并开始处理这些消息。因此，每个函数处理的最大并发消息数是批大小的 1.5 倍。此限制分别应用于各个包含 <ph id=\"ph1\">`QueueTrigger`</ph> 属性的函数。"
    },
    {
      "pos": [
        4515,
        4665
      ],
      "content": "如果不希望对队列上收到的消息并行执行，可以将批大小设置为 1。另请参阅 <bpt id=\"p1\">[</bpt>Azure WebJobs SDK 1.1.0 RTM<ept id=\"p1\">](http://azure.microsoft.com/zh-cn/blog/azure-webjobs-sdk-1-1-0-rtm/)</ept> 中的<bpt id=\"p2\">**</bpt>更好地控制队列处理<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        4671,
        4709
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"queuemetadata\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>获取队列或队列消息元数据"
    },
    {
      "content": "你可以通过将参数添加到方法签名来获取以下消息属性：",
      "pos": [
        4711,
        4736
      ]
    },
    {
      "pos": [
        4740,
        4771
      ],
      "content": "<ph id=\"ph1\">`DateTimeOffset`</ph> expirationTime"
    },
    {
      "pos": [
        4774,
        4804
      ],
      "content": "<ph id=\"ph1\">`DateTimeOffset`</ph> insertionTime"
    },
    {
      "pos": [
        4807,
        4839
      ],
      "content": "<ph id=\"ph1\">`DateTimeOffset`</ph> nextVisibleTime"
    },
    {
      "pos": [
        4842,
        4871
      ],
      "content": "<ph id=\"ph1\">`string`</ph> queueTrigger（包含消息文本）"
    },
    {
      "pos": [
        4874,
        4885
      ],
      "content": "<ph id=\"ph1\">`string`</ph> id"
    },
    {
      "pos": [
        4888,
        4907
      ],
      "content": "<ph id=\"ph1\">`string`</ph> popReceipt"
    },
    {
      "pos": [
        4910,
        4928
      ],
      "content": "<ph id=\"ph1\">`int`</ph> dequeueCount"
    },
    {
      "pos": [
        4930,
        4984
      ],
      "content": "如果您想直接使用 Azure 存储 API，则还可以添加 <ph id=\"ph1\">`CloudStorageAccount`</ph> 参数。"
    },
    {
      "content": "下面的示例将所有这些元数据写入 INFO 应用程序日志。在该示例中，logMessage 和 queueTrigger 包含队列消息的内容。",
      "pos": [
        4986,
        5056
      ]
    },
    {
      "content": "下面是示例代码编写的示例日志：",
      "pos": [
        6010,
        6025
      ]
    },
    {
      "pos": [
        6445,
        6470
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"graceful\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>正常关闭"
    },
    {
      "pos": [
        6472,
        6576
      ],
      "content": "在连续 Web 作业中运行的函数可以接受 <ph id=\"ph1\">`CancellationToken`</ph> 参数，以便操作系统能够在 Web 作业即将终止时通知此函数。你可以使用此通知来确保该函数不会意外终止，导致数据处于不一致状态。"
    },
    {
      "content": "下面的示例演示了如何在函数中检查即将发生的 Web 作业终止。",
      "pos": [
        6578,
        6609
      ]
    },
    {
      "pos": [
        7160,
        7190
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意<ept id=\"p1\">**</ept>：仪表板可能会错误显示已关闭函数的的状态和输出。"
    },
    {
      "pos": [
        7193,
        7297
      ],
      "content": "有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Web 作业正常关闭<ept id=\"p1\">](http://blog.amitapple.com/post/2014/05/webjobs-graceful-shutdown/#.VCt1GXl0wpR)</ept>。"
    },
    {
      "pos": [
        7302,
        7342
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"createqueue\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在处理队列消息时创建队列消息"
    },
    {
      "pos": [
        7344,
        7433
      ],
      "content": "若要编写用于新建队列消息的函数，请使用 <ph id=\"ph1\">`Queue`</ph> 属性。与 <ph id=\"ph2\">`QueueTrigger`</ph> 一样，你可以传入字符串形式的队列名称，或者<bpt id=\"p1\">[</bpt>动态设置队列名称<ept id=\"p1\">](#config)</ept>。"
    },
    {
      "content": "字符串队列消息",
      "pos": [
        7439,
        7446
      ]
    },
    {
      "pos": [
        7448,
        7569
      ],
      "content": "下面的非异步代码示例在名为“outputqueue”的队列中创建新的队列消息，该消息的内容与名为“inputqueue”的队列中收到的队列消息相同。（对于异步函数，请按照本部分稍后将介绍的方法使用 <ph id=\"ph1\">`IAsyncCollector&lt;T&gt;`</ph>。）"
    },
    {
      "pos": [
        7822,
        7895
      ],
      "content": "POCO<bpt id=\"p1\">[</bpt>（普通旧 CLR 对象<ept id=\"p1\">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>）队列消息"
    },
    {
      "pos": [
        7897,
        7957
      ],
      "content": "若要创建包含 POCO（而不是字符串）的队列消息，请将 POCO 类型作为输出参数传递给 <ph id=\"ph1\">`Queue`</ph> 属性构造函数。"
    },
    {
      "content": "SDK 会自动将对象序列化为 JSON。即使对象为 null，也始终会创建队列消息。",
      "pos": [
        8216,
        8258
      ]
    },
    {
      "content": "在异步函数中创建多个消息",
      "pos": [
        8264,
        8276
      ]
    },
    {
      "pos": [
        8278,
        8348
      ],
      "content": "若要创建多个消息，请设置输出队列 <ph id=\"ph1\">`ICollector&lt;T&gt;`</ph> 或 <ph id=\"ph2\">`IAsyncCollector&lt;T&gt;`</ph> 的参数类型，如以下示例所示。"
    },
    {
      "pos": [
        8766,
        8791
      ],
      "content": "调用 <ph id=\"ph1\">`Add`</ph> 方法时，将立即创建每个队列消息。"
    },
    {
      "content": "Queue 属性适用的类型",
      "pos": [
        8797,
        8810
      ]
    },
    {
      "pos": [
        8812,
        8834
      ],
      "content": "可对以下参数类型使用 <ph id=\"ph1\">`Queue`</ph> 属性："
    },
    {
      "pos": [
        8838,
        8878
      ],
      "content": "<ph id=\"ph1\">`out string`</ph>（函数结束时，如果参数值为非 null，则创建队列消息）"
    },
    {
      "pos": [
        8881,
        8911
      ],
      "content": "<ph id=\"ph1\">`out byte[]`</ph>（工作方式类似于 <ph id=\"ph2\">`string`</ph>）"
    },
    {
      "pos": [
        8915,
        8956
      ],
      "content": "<ph id=\"ph1\">`out CloudQueueMessage`</ph>（工作方式类似于 <ph id=\"ph2\">`string`</ph>）"
    },
    {
      "pos": [
        8960,
        9014
      ],
      "content": "<ph id=\"ph1\">`out POCO`</ph>（一种可序列化类型，如果在函数结束时参数为 null，则创建包含 null 对象的消息）"
    },
    {
      "pos": [
        9052,
        9092
      ],
      "content": "<ph id=\"ph1\">`CloudQueue`</ph>（用于直接通过 Azure 存储 API 手动创建消息）"
    },
    {
      "pos": [
        9098,
        9141
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"ibinder\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>在函数主体中使用 WebJobs SDK 属性"
    },
    {
      "pos": [
        9143,
        9225
      ],
      "content": "如果您需要在使用 <ph id=\"ph1\">`Queue`</ph>、<ph id=\"ph2\">`Blob`</ph> 或 <ph id=\"ph3\">`Table`</ph> 等 WebJobs SDK 属性之前在函数中执行某项操作，则可以使用 <ph id=\"ph4\">`IBinder`</ph> 接口。"
    },
    {
      "content": "下面的示例采用一个输入队列消息，并在输出队列中创建具有相同内容的新消息。输出队列名称由函数正文中的代码设置。",
      "pos": [
        9227,
        9281
      ]
    },
    {
      "pos": [
        9757,
        9798
      ],
      "content": "<ph id=\"ph1\">`IBinder`</ph> 接口也可以与 <ph id=\"ph2\">`Table`</ph> 和 <ph id=\"ph3\">`Blob`</ph> 属性一起使用。"
    },
    {
      "pos": [
        9803,
        9844
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"blobs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在处理队列消息时读取和写入 blob 和表"
    },
    {
      "pos": [
        9846,
        10169
      ],
      "content": "可以使用 <ph id=\"ph1\">`Blob`</ph> 和 <ph id=\"ph2\">`Table`</ph> 属性来读取和写入 blob 和表。本部分中的示例适用于 Blob。有关展示如何在创建或更新 blob 时触发进程的代码示例，请参阅<bpt id=\"p1\">[</bpt>如何结合使用 Azure blob 存储和 WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-blobs-how-to)</ept>；有关用于读取和写入表的代码示例，请参阅<bpt id=\"p2\">[</bpt>如何结合使用 Azure 表存储和 WebJobs SDK<ept id=\"p2\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-tables-how-to)</ept>。"
    },
    {
      "content": "触发 Blob 操作的字符串队列消息",
      "pos": [
        10175,
        10193
      ]
    },
    {
      "pos": [
        10195,
        10265
      ],
      "content": "对于包含字符串的队列消息，<ph id=\"ph1\">`queueTrigger`</ph> 是占位符，可以用于包含消息内容的 <ph id=\"ph2\">`Blob`</ph> 属性的 <ph id=\"ph3\">`blobPath`</ph> 参数。"
    },
    {
      "pos": [
        10267,
        10364
      ],
      "content": "下面的示例使用 <ph id=\"ph1\">`Stream`</ph> 对象读取和写入 blob。队列消息是位于 textBlobs 容器中的 Blob 名称。将在同一个容器中创建 Blob 的副本，并在其名称后面附加“-new”。"
    },
    {
      "pos": [
        10713,
        10882
      ],
      "content": "<ph id=\"ph1\">`Blob`</ph> 属性构造函数采用指定容器和 blob 名称的 <ph id=\"ph2\">`blobPath`</ph> 参数。有关此占位符的详细信息，请参阅<bpt id=\"p1\">[</bpt>如何结合使用 Azure blob 存储和 WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-blobs-how-to)</ept>。"
    },
    {
      "pos": [
        10884,
        10945
      ],
      "content": "当属性修饰 <ph id=\"ph1\">`Stream`</ph> 对象时，另一个构造函数参数会将 <ph id=\"ph2\">`FileAccess`</ph> 模式指定为读取、写入或读取/写入。"
    },
    {
      "pos": [
        10947,
        10997
      ],
      "content": "下面的示例使用 <ph id=\"ph1\">`CloudBlockBlob`</ph> 对象删除 blob。队列消息是 Blob 的名称。"
    },
    {
      "pos": [
        11237,
        11332
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"pocoblobs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>POCO<bpt id=\"p1\">[</bpt>（普通旧 CLR 对象<ept id=\"p1\">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>）队列消息"
    },
    {
      "pos": [
        11334,
        11439
      ],
      "content": "对于在队列消息中存储为 JSON 的 POCO，您可以使用占位符来命名 <ph id=\"ph1\">`Queue`</ph> 属性的 <ph id=\"ph2\">`blobPath`</ph> 参数中的对象属性。还可以将<bpt id=\"p1\">[</bpt>队列元数据属性名称<ept id=\"p1\">](#queuemetadata)</ept>用作占位符。"
    },
    {
      "pos": [
        11441,
        11575
      ],
      "content": "下面的示例将 Blob 复制到具有不同扩展名的新 Blob。队列消息是包含 <ph id=\"ph1\">`BlobName`</ph> 和 <ph id=\"ph2\">`BlobNameWithoutExtension`</ph> 属性的 <ph id=\"ph3\">`BlobInformation`</ph> 对象。属性名称用作 <ph id=\"ph4\">`Blob`</ph> 属性的 blob 路径中的占位符。"
    },
    {
      "pos": [
        11936,
        12096
      ],
      "content": "SDK 使用 <bpt id=\"p1\">[</bpt>Newtonsoft.Json NuGet 包<ept id=\"p1\">](http://www.nuget.org/packages/Newtonsoft.Json)</ept>序列化和反序列化消息。如果你在不使用 WebJobs SDK 的程序中创建队列消息，则可以如以下示例所示编写代码，以创建 SDK 可以分析的 POCO 队列消息。"
    },
    {
      "pos": [
        12350,
        12424
      ],
      "content": "如果在将 blob 绑定到对象之前，您需要在函数中执行某项操作，则可以在函数主体中使用属性，<bpt id=\"p1\">[</bpt>如前面的 Queue 属性所示<ept id=\"p1\">](#ibinder)</ept>。"
    },
    {
      "pos": [
        12430,
        12473
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"blobattributetypes\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Blob 属性适用的类型"
    },
    {
      "pos": [
        12476,
        12492
      ],
      "content": "<ph id=\"ph1\">`Blob`</ph> 属性适用以下类型："
    },
    {
      "pos": [
        12496,
        12536
      ],
      "content": "<ph id=\"ph1\">`Stream`</ph>（读取或写入，通过使用 FileAccess 构造函数参数指定）"
    },
    {
      "pos": [
        12569,
        12581
      ],
      "content": "<ph id=\"ph1\">`string`</ph>（读取）"
    },
    {
      "pos": [
        12584,
        12637
      ],
      "content": "<ph id=\"ph1\">`out string`</ph>（写入；仅当字符串参数在函数返回结果时为非 null 的情况下，才创建 blob）"
    },
    {
      "content": "POCO（读取）",
      "pos": [
        12640,
        12648
      ]
    },
    {
      "content": "out POCO（写入；始终创建 Blob，如果函数返回时 POCO 参数为 null，则创建 null 对象）",
      "pos": [
        12651,
        12707
      ]
    },
    {
      "pos": [
        12710,
        12731
      ],
      "content": "<ph id=\"ph1\">`CloudBlobStream`</ph>（写入）"
    },
    {
      "pos": [
        12734,
        12753
      ],
      "content": "<ph id=\"ph1\">`ICloudBlob`</ph>（读取或写入）"
    },
    {
      "pos": [
        12756,
        12779
      ],
      "content": "<ph id=\"ph1\">`CloudBlockBlob`</ph>（读取或写入）"
    },
    {
      "pos": [
        12783,
        12805
      ],
      "content": "<ph id=\"ph1\">`CloudPageBlob`</ph>（读取或写入）"
    },
    {
      "pos": [
        12811,
        12838
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"poison\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何处理病毒消息"
    },
    {
      "pos": [
        12840,
        12925
      ],
      "content": "内容导致函数失败的消息称为<bpt id=\"p1\">*</bpt>病毒消息<ept id=\"p1\">*</ept>。当函数失败时，将不删除并最终再次选择队列消息，从而导致周期重复。在达到限制的迭代次数后，SDK 可自动中断周期，你也可以手动中断。"
    },
    {
      "content": "自动处理有害消息",
      "pos": [
        12931,
        12939
      ]
    },
    {
      "pos": [
        12941,
        13010
      ],
      "content": "SDK 在处理一个队列消息时最多会调用某个函数 5 次。如果第五次尝试失败，消息将移到有害队列。<bpt id=\"p1\">[</bpt>最大重试次数可配置<ept id=\"p1\">](#config)</ept>。"
    },
    {
      "pos": [
        13012,
        13091
      ],
      "content": "病毒队列的名称为 <bpt id=\"p1\">*</bpt>{originalqueuename}<ept id=\"p1\">*</ept>-poison。你可以编写一个函数来处理有害队列中的消息，并记录这些消息，或者发送需要注意的通知。"
    },
    {
      "pos": [
        13093,
        13229
      ],
      "content": "在下面的示例中，如果队列消息包含不存在的 blob 名称，则 <ph id=\"ph1\">`CopyBlob`</ph> 函数会失败。在这种情况，消息将从 copyBlobqueue 队列移到 copyBlobqueue-poison 队列。然后，<ph id=\"ph2\">`ProcessPoisonMessage`</ph> 将记录有害消息。"
    },
    {
      "content": "下图显示了处理有害消息时这些函数的控制台输出。",
      "pos": [
        13804,
        13827
      ]
    },
    {
      "content": "处理病毒消息时的控制台输出",
      "pos": [
        13831,
        13844
      ]
    },
    {
      "content": "手动处理有害消息",
      "pos": [
        13921,
        13929
      ]
    },
    {
      "pos": [
        13931,
        14036
      ],
      "content": "您可以向您的函数添加名为 <ph id=\"ph1\">`dequeueCount`</ph> 的 <ph id=\"ph2\">`int`</ph> 参数，获取选择处理某消息的次数。然后，你可以检查函数代码中的取消排队计数，并在处理次数超过阈值时执行自己的有害消息处理，如以下示例中所示。"
    },
    {
      "pos": [
        14609,
        14636
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"config\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何设置配置选项"
    },
    {
      "pos": [
        14638,
        14678
      ],
      "content": "您可以使用 <ph id=\"ph1\">`JobHostConfiguration`</ph> 类型设置以下配置选项："
    },
    {
      "content": "在代码中设置 SDK 连接字符串。",
      "pos": [
        14682,
        14699
      ]
    },
    {
      "pos": [
        14702,
        14734
      ],
      "content": "配置 <ph id=\"ph1\">`QueueTrigger`</ph> 设置，例如最大取消排队计数。"
    },
    {
      "content": "从配置中获取队列名称。",
      "pos": [
        14737,
        14748
      ]
    },
    {
      "pos": [
        14754,
        14793
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"setconnstr\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>在代码中设置 SDK 连接字符串"
    },
    {
      "content": "在代码中设置 SDK 连接字符串可以在配置文件或环境变量中使用自己的连接字符串名称，如以下示例中所示。",
      "pos": [
        14795,
        14846
      ]
    },
    {
      "pos": [
        15671,
        15713
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"configqueue\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>配置 QueueTrigger 设置"
    },
    {
      "content": "你可以配置以下用于处理队列消息的设置：",
      "pos": [
        15715,
        15734
      ]
    },
    {
      "content": "同时选择的、要并行执行的最大队列消息数（默认值为 16）。",
      "pos": [
        15738,
        15767
      ]
    },
    {
      "content": "在将队列消息发送到有害队列之前要重试的最大次数（默认值为 5）。",
      "pos": [
        15770,
        15802
      ]
    },
    {
      "content": "当队列为空时，再次轮询之前要等待的最长时间（默认值为 1 分钟）。",
      "pos": [
        15805,
        15838
      ]
    },
    {
      "content": "下面的示例演示如何配置这些设置：",
      "pos": [
        15840,
        15856
      ]
    },
    {
      "pos": [
        16234,
        16288
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"setnamesincode\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>在代码中设置 WebJobs SDK 构造函数参数的值"
    },
    {
      "pos": [
        16290,
        16373
      ],
      "content": "有时，你想要在代码中指定队列名称、Blob 名称、容器或表名称，而不是进行硬编码。例如，您可能想在配置文件或环境变量中指定 <ph id=\"ph1\">`QueueTrigger`</ph> 的队列名称。"
    },
    {
      "pos": [
        16375,
        16516
      ],
      "content": "为此，您可以向 <ph id=\"ph1\">`JobHostConfiguration`</ph> 类型传递 <ph id=\"ph2\">`NameResolver`</ph> 对象。此时，你可以在 WebJobs SDK 属性构造函数参数中包含以百分号 (%) 括住的特殊占位符，你的 <ph id=\"ph3\">`NameResolver`</ph> 代码将指定要用于取代这些占位符的实际值。"
    },
    {
      "pos": [
        16518,
        16672
      ],
      "content": "例如，假设你要在测试环境中使用名为 logqueuetest 的队列，并在生产环境中使用名为 logqueueprod 的队列。您希望在具有实际队列名称的 <ph id=\"ph1\">`appSettings`</ph> 集合中指定条目名称，而不是硬编码的队列名称。如果 <ph id=\"ph2\">`appSettings`</ph> 键为 logqueue，则函数如以下示例所示。"
    },
    {
      "pos": [
        16822,
        16874
      ],
      "content": "然后，<ph id=\"ph1\">`NameResolver`</ph> 类可以从 <ph id=\"ph2\">`appSettings`</ph> 获取队列名称，如以下示例所示："
    },
    {
      "pos": [
        17101,
        17144
      ],
      "content": "将 <ph id=\"ph1\">`NameResolver`</ph> 类传入 <ph id=\"ph2\">`JobHost`</ph> 对象，如以下示例中所示。"
    },
    {
      "pos": [
        17417,
        17502
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>每次调用函数，都会解析队列名称、表名称和 blob 名称，但 blob 容器名称只会在应用程序启动时进行解析。在作业运行时，您无法更改 blob 容器名称。"
    },
    {
      "pos": [
        17507,
        17534
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"manual\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何手动触发函数"
    },
    {
      "pos": [
        17536,
        17626
      ],
      "content": "若要手动触发函数，请对 <ph id=\"ph1\">`JobHost`</ph> 对象使用 <ph id=\"ph2\">`Call`</ph> 或 <ph id=\"ph3\">`CallAsync`</ph> 方法，并对函数使用 <ph id=\"ph4\">`NoAutomaticTrigger`</ph> 属性，如以下示例所示。"
    },
    {
      "pos": [
        18258,
        18281
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"logs\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何写入日志"
    },
    {
      "content": "仪表板在两个位置显示日志：针对 Web 作业的页，以及针对特定 Web 作业调用的页。",
      "pos": [
        18283,
        18326
      ]
    },
    {
      "content": "WebJob 页中的日志",
      "pos": [
        18330,
        18342
      ]
    },
    {
      "content": "函数调用页中的日志",
      "pos": [
        18427,
        18436
      ]
    },
    {
      "pos": [
        18516,
        18621
      ],
      "content": "在函数或 <ph id=\"ph1\">`Main()`</ph> 方法中调用的控制台方法的输出在 Web 作业的仪表板页面上显示，而不是在特定方法调用页面上显示。从方法签名的参数中获取的 TextWriter 对象的输出在方法调用的仪表板页中显示。"
    },
    {
      "content": "无法将控制台输出链接到特定的方法调用，因为控制台是单线程的，而许多作业函数可能同时运行。正因如此，SDK 为每个函数调用提供了自身唯一的日志写入器对象。",
      "pos": [
        18623,
        18699
      ]
    },
    {
      "pos": [
        18701,
        19168
      ],
      "content": "若要写入<bpt id=\"p1\">[</bpt>应用程序跟踪日志<ept id=\"p1\">](/documentation/articles/web-sites-dotnet-troubleshoot-visual-studio#logsoverview)</ept>，请使用 <ph id=\"ph1\">`Console.Out`</ph>（创建标记为 INFO 的日志）和 <ph id=\"ph2\">`Console.Error`</ph>（创建标记为 ERROR 的日志）。或者，您可以使用 <bpt id=\"p2\">[</bpt>Trace 或 TraceSource<ept id=\"p2\">](http://blogs.msdn.com/b/mcsuksoldev/archive/2014/09/04/adding-trace-to-azure-web-sites-and-web-jobs.aspx)</ept>，它除了提供“信息”和“错误”外，还提供“详细”、“警告”和“严重级别”。应用程序跟踪日志将显示在 Web 应用日志文件、Azure 表或 Azure Blob 中，具体取决于你如何配置 Azure Web 应用。与所有控制台输出一样，最近的 100 条应用程序日志也会显示在 Web 作业的仪表板页中，而不是显示在函数调用的页中。"
    },
    {
      "content": "仅当程序在 Azure Web 作业中运行（而不是在本地运行或者在其他某个环境中运行）时，控制台输出才显示在仪表板中。",
      "pos": [
        19170,
        19229
      ]
    },
    {
      "content": "为高吞吐量方案禁用仪表板日志记录。默认情况下，SDK 将日志写入存储，此活动会在处理的消息较多时降低性能。若要禁用日志记录，请按以下示例中所示，将仪表板连接字符串设置为 null。",
      "pos": [
        19231,
        19321
      ]
    },
    {
      "content": "下面的示例演示了写入日志的多种方法：",
      "pos": [
        19524,
        19542
      ]
    },
    {
      "pos": [
        19951,
        20017
      ],
      "content": "在 WebJobs SDK 仪表板中，当您转到特定函数调用页面并单击“切换输出”时，您会看到 <ph id=\"ph1\">`TextWriter`</ph> 对象的输出："
    },
    {
      "content": "单击函数调用链接",
      "pos": [
        20021,
        20029
      ]
    },
    {
      "content": "函数调用页中的日志",
      "pos": [
        20118,
        20127
      ]
    },
    {
      "content": "在 WebJobs SDK 仪表板中，当您转到 Web 作业（而不是函数调用）页面并单击“切换输出”时，您会看到最近的 100 行控制台输出。",
      "pos": [
        20207,
        20278
      ]
    },
    {
      "content": "单击“切换输出”",
      "pos": [
        20283,
        20291
      ]
    },
    {
      "pos": [
        20374,
        20460
      ],
      "content": "在连续 Web 作业中，应用程序日志显示在 Web 应用文件系统的 /data/jobs/continuous/<bpt id=\"p1\">*</bpt>{webjobname}<ept id=\"p1\">*</ept>/job\\_log.txt 中。"
    },
    {
      "content": "在 Azure blob 中，应用程序日志如下所示：",
      "pos": [
        20683,
        20709
      ]
    },
    {
      "content": "2014-09-26T21:01:13,Information,contosoadsnew,491e54,635473620738373502,0,17404,17,Console.Write - Hello world!,",
      "pos": [
        20718,
        20830
      ]
    },
    {
      "content": "2014-09-26T21:01:13,Error,contosoadsnew,491e54,635473620738373502,0,17404,19,Console.Error - Hello world!,",
      "pos": [
        20839,
        20945
      ]
    },
    {
      "content": "2014-09-26T21:01:13,Information,contosoadsnew,491e54,635473620738529920,0,17404,17,Console.Out - Hello world!,",
      "pos": [
        20954,
        21064
      ]
    },
    {
      "pos": [
        21066,
        21116
      ],
      "content": "在 Azure 表中，<ph id=\"ph1\">`Console.Out`</ph> 和 <ph id=\"ph2\">`Console.Error`</ph> 日志如下所示："
    },
    {
      "content": "表中的信息日志",
      "pos": [
        21120,
        21127
      ]
    },
    {
      "content": "表中的错误日志",
      "pos": [
        21205,
        21212
      ]
    },
    {
      "pos": [
        21289,
        21412
      ],
      "content": "如果要插入自己的记录器，请参阅<bpt id=\"p1\">[</bpt>此示例<ept id=\"p1\">](http://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Program.cs)</ept>。"
    },
    {
      "pos": [
        21417,
        21447
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"errors\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何处理错误和配置超时"
    },
    {
      "pos": [
        21449,
        21754
      ],
      "content": "WebJobs SDK 还包括 <bpt id=\"p1\">[</bpt>Timeout<ept id=\"p1\">](http://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Functions.cs)</ept> 属性，可用于在函数未在指定的时间内完成时取消函数。而且，如果你想要在指定的时间段内发生太多错误时引发警报，可以使用 <ph id=\"ph1\">`ErrorTrigger`</ph> 属性。下面是 <bpt id=\"p2\">[</bpt>ErrorTrigger 示例<ept id=\"p2\">](https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Error-Monitoring)</ept>。"
    },
    {
      "pos": [
        22158,
        22357
      ],
      "content": "你还可以使用配置开关（可以是应用设置或环境变量名称）动态地禁用和启用函数以控制是否可以触发它们。有关示例代码，请参阅 <bpt id=\"p1\">[</bpt>WebJobs SDK 示例存储库<ept id=\"p1\">](https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Functions.cs)</ept>中的 <ph id=\"ph1\">`Disable`</ph> 属性。"
    },
    {
      "pos": [
        22362,
        22388
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"nextsteps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "pos": [
        22390,
        22544
      ],
      "content": "本指南提供的代码示例演示了如何处理常见方案以操作 Azure 队列。若要详细了解如何使用 Azure WebJobs 和 WebJobs SDK，请参阅<bpt id=\"p1\">[</bpt>有关 Azure WebJobs 的推荐资源<ept id=\"p1\">](/documentation/articles/websites-webjobs-resources/)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 WebJobs SDK 使用 Azure 队列存储\" \n    description=\"了解如何通过 WebJobs SDK 使用 Azure 队列存储。创建和删除队列；插入、扫视、获取和删除队列消息，等等。\" \n    services=\"app-service\\web, storage\" \n    documentationCenter=\".net\" \n    authors=\"tdykstra\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags\n    ms.service=\"app-service-web\"\n    ms.date=\"12/14/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n# 如何通过 WebJobs SDK 使用 Azure 队列存储\n\n## 概述\n\n本指南提供了 C# 代码示例，用于演示如何在 Azure 队列存储服务中使用 Azure WebJobs SDK 版本 1.x。\n\n本指南假设你了解[如何使用指向存储帐户的连接字符串在 Visual Studio 中创建 WebJob 项目](/documentation/articles/websites-dotnet-webjobs-sdk-get-started#configure-storage)或创建[多个存储帐户](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)。\n\n大多数代码段只显示函数，不同于创建 `JobHost` 对象的代码，如以下示例所示：\n\n        static void Main(string[] args)\n        {\n            JobHost host = new JobHost();\n            host.RunAndBlock();\n        }\n        \n本指南涉及以下主题：\n\n-   [如何在接收队列消息时触发函数](#trigger)\n    - 字符串队列消息\n    - POCO 队列消息\n    - 异步函数\n    - QueueTrigger 属性适用的类型\n    - 轮询算法\n    - 多个实例\n    - 并行执行\n    - 获取队列或队列消息元数据\n    - 正常关闭\n-   [如何在处理队列消息时创建队列消息](#createqueue)\n    - 字符串队列消息\n    - POCO 队列消息\n    - 在异步函数中创建多个消息\n    - Queue 属性适用的类型\n    - 在函数正文中使用 WebJobs SDK 属性\n-   [如何在处理队列消息时读取和写入 Blob](#blobs)\n    - 字符串队列消息\n    - POCO 队列消息\n    - Blob 属性适用的类型\n-   [如何处理有害消息](#poison)\n    - 自动处理有害消息\n    - 手动处理有害消息\n-   [如何设置配置选项](#config)\n    - 在代码中设置 SDK 连接字符串\n    - 配置 QueueTrigger 设置\n    - 在代码中设置 WebJobs SDK 构造函数参数的值\n-   [如何手动触发函数](#manual)\n-   [如何写入日志](#logs) \n-   [如何处理错误和配置超时](#errors)\n-   [后续步骤](#nextsteps)\n\n## <a id=\"trigger\"></a>如何在收到队列消息时触发函数\n\n若要编写在收到队列消息时 WebJobs SDK 调用的函数，请使用 `QueueTrigger` 属性。该属性构造函数使用一个字符串参数来指定要轮询的队列名称。你也可以[动态设置队列名称](#config)。\n\n### 字符串队列消息\n\n在下面的示例中，队列中包含一个字符串消息，因此，`QueueTrigger` 已应用到包含队列消息内容的 `logMessage` 字符串参数。该函数[向仪表板写入一条日志消息](#logs)。\n \n\n        public static void ProcessQueueMessage([QueueTrigger(\"logqueue\")] string logMessage, TextWriter logger)\n        {\n            logger.WriteLine(logMessage);\n        }\n\n除了 `string` 以外，参数还可以是字节数组、`CloudQueueMessage` 对象或您定义的 POCO。\n\n### POCO[（普通旧 CLR 对象](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)）队列消息\n\n在下面的示例中，队列消息包含 `BlobInformation` 对象的 JSON，该对象包含一个 `BlobName` 属性。SDK 会自动反序列化该对象。\n\n        public static void WriteLogPOCO([QueueTrigger(\"logqueue\")] BlobInformation blobInfo, TextWriter logger)\n        {\n            logger.WriteLine(\"Queue message refers to blob: \" + blobInfo.BlobName);\n        }\n\nSDK 使用 [Newtonsoft.Json NuGet 包](http://www.nuget.org/packages/Newtonsoft.Json)序列化和反序列化消息。如果你在不使用 WebJobs SDK 的程序中创建队列消息，则可以如以下示例所示编写代码，以创建 SDK 可以分析的 POCO 队列消息。\n\n        BlobInformation blobInfo = new BlobInformation() { BlobName = \"log.txt\" };\n        var queueMessage = new CloudQueueMessage(JsonConvert.SerializeObject(blobInfo));\n        logQueue.AddMessage(queueMessage);\n\n### 异步函数\n\n以下异步函数[将日志写入仪表板](#logs)。\n\n        public async static Task ProcessQueueMessageAsync([QueueTrigger(\"logqueue\")] string logMessage, TextWriter logger)\n        {\n            await logger.WriteLineAsync(logMessage);\n        }\n\n异步函数可以采用[取消标记](http://www.asp.net/mvc/overview/performance/using-asynchronous-methods-in-aspnet-mvc-4#CancelToken)，如以下用于复制 blob 的示例中所示。（有关 `queueTrigger` 占位符的说明，请参阅 [Blob](#blobs) 部分）。\n\n        public async static Task ProcessQueueMessageAsyncCancellationToken(\n            [QueueTrigger(\"blobcopyqueue\")] string blobName, \n            [Blob(\"textblobs/{queueTrigger}\",FileAccess.Read)] Stream blobInput,\n            [Blob(\"textblobs/{queueTrigger}-new\",FileAccess.Write)] Stream blobOutput,\n            CancellationToken token)\n        {\n            await blobInput.CopyToAsync(blobOutput, 4096, token);\n        }\n\n### <a id=\"qtattributetypes\"></a>QueueTrigger 属性适用的类型\n\n可以对 `QueueTrigger` 使用以下类型：\n\n* `string`\n* 序列化为 JSON 的 POCO 类型\n* `byte[]`\n* `CloudQueueMessage`\n\n### <a id=\"polling\"></a>轮询算法\n\nSDK 实现了随机指数退让算法，以降低空闲队列轮询对存储事务成本造成的影响。当找到消息时，SDK 将等待两秒钟，然后检查另一条消息；如果未找到消息，它将等待大约四秒，然后重试。如果后续尝试获取队列消息失败，则等待时间会继续增加，直到达到最长等待时间（默认为 1 分钟）。[最长等待时间是可配置的](#config)。\n\n### <a id=\"instances\"></a>多个实例\n\n如果 Web 应用在多个实例上运行，则每台计算机上都会运行一个连续 Web 作业，并且每台计算机将等待触发器并尝试运行函数。WebJobs SDK 队列触发器会自动阻止函数多次处理队列消息；函数无需编写为幂等函数。但是，如果你想要确保即使有多个主机 Web 应用的实例，也只有一个函数实例运行，可以使用 `Singleton` 属性。\n\n### <a id=\"parallel\"></a>并行执行\n\n如果有多个函数在侦听不同的队列，SDK 将在同时接收消息时并行调用这些函数。\n\n接收单个队列的多个消息时，也是如此。默认情况下，SDK 每次获取包含 16 个队列消息的批，然后并行执行处理这些消息的函数。[批大小是可配置的](#config)。当处理的数量达到批大小的一半时，SDK 将获取另一个批，并开始处理这些消息。因此，每个函数处理的最大并发消息数是批大小的 1.5 倍。此限制分别应用于各个包含 `QueueTrigger` 属性的函数。\n\n如果不希望对队列上收到的消息并行执行，可以将批大小设置为 1。另请参阅 [Azure WebJobs SDK 1.1.0 RTM](http://azure.microsoft.com/zh-cn/blog/azure-webjobs-sdk-1-1-0-rtm/) 中的**更好地控制队列处理**。\n\n### <a id=\"queuemetadata\"></a>获取队列或队列消息元数据\n\n你可以通过将参数添加到方法签名来获取以下消息属性：\n\n* `DateTimeOffset` expirationTime\n* `DateTimeOffset` insertionTime\n* `DateTimeOffset` nextVisibleTime\n* `string` queueTrigger（包含消息文本）\n* `string` id\n* `string` popReceipt\n* `int` dequeueCount\n\n如果您想直接使用 Azure 存储 API，则还可以添加 `CloudStorageAccount` 参数。\n\n下面的示例将所有这些元数据写入 INFO 应用程序日志。在该示例中，logMessage 和 queueTrigger 包含队列消息的内容。\n\n        public static void WriteLog([QueueTrigger(\"logqueue\")] string logMessage,\n            DateTimeOffset expirationTime,\n            DateTimeOffset insertionTime,\n            DateTimeOffset nextVisibleTime,\n            string id,\n            string popReceipt,\n            int dequeueCount,\n            string queueTrigger,\n            CloudStorageAccount cloudStorageAccount,\n            TextWriter logger)\n        {\n            logger.WriteLine(\n                \"logMessage={0}\\n\" +\n            \"expirationTime={1}\\ninsertionTime={2}\\n\" +\n                \"nextVisibleTime={3}\\n\" +\n                \"id={4}\\npopReceipt={5}\\ndequeueCount={6}\\n\" +\n                \"queue endpoint={7} queueTrigger={8}\",\n                logMessage, expirationTime,\n                insertionTime,\n                nextVisibleTime, id,\n                popReceipt, dequeueCount,\n                cloudStorageAccount.QueueEndpoint,\n                queueTrigger);\n        }\n\n下面是示例代码编写的示例日志：\n\n        logMessage=Hello world!\n        expirationTime=10/14/2014 10:31:04 PM +00:00\n        insertionTime=10/7/2014 10:31:04 PM +00:00\n        nextVisibleTime=10/7/2014 10:41:23 PM +00:00\n        id=262e49cd-26d3-4303-ae88-33baf8796d91\n        popReceipt=AgAAAAMAAAAAAAAAfc9H0n/izwE=\n        dequeueCount=1\n        queue endpoint=https://contosoads.queue.core.chinacloudapi.cn/\n        queueTrigger=Hello world!\n\n### <a id=\"graceful\"></a>正常关闭\n\n在连续 Web 作业中运行的函数可以接受 `CancellationToken` 参数，以便操作系统能够在 Web 作业即将终止时通知此函数。你可以使用此通知来确保该函数不会意外终止，导致数据处于不一致状态。\n\n下面的示例演示了如何在函数中检查即将发生的 Web 作业终止。\n\n    public static void GracefulShutdownDemo(\n                [QueueTrigger(\"inputqueue\")] string inputText,\n                TextWriter logger,\n                CancellationToken token)\n    {\n        for (int i = 0; i < 100; i++)\n        {\n            if (token.IsCancellationRequested)\n            {\n                logger.WriteLine(\"Function was cancelled at iteration {0}\", i);\n                break;\n            }\n            Thread.Sleep(1000);\n            logger.WriteLine(\"Normal processing for queue message={0}\", inputText);\n        }\n    }\n\n**注意**：仪表板可能会错误显示已关闭函数的的状态和输出。\n \n有关详细信息，请参阅 [Web 作业正常关闭](http://blog.amitapple.com/post/2014/05/webjobs-graceful-shutdown/#.VCt1GXl0wpR)。\n\n## <a id=\"createqueue\"></a>如何在处理队列消息时创建队列消息\n\n若要编写用于新建队列消息的函数，请使用 `Queue` 属性。与 `QueueTrigger` 一样，你可以传入字符串形式的队列名称，或者[动态设置队列名称](#config)。\n\n### 字符串队列消息\n\n下面的非异步代码示例在名为“outputqueue”的队列中创建新的队列消息，该消息的内容与名为“inputqueue”的队列中收到的队列消息相同。（对于异步函数，请按照本部分稍后将介绍的方法使用 `IAsyncCollector<T>`。）\n\n\n        public static void CreateQueueMessage(\n            [QueueTrigger(\"inputqueue\")] string queueMessage,\n            [Queue(\"outputqueue\")] out string outputQueueMessage )\n        {\n            outputQueueMessage = queueMessage;\n        }\n  \n### POCO[（普通旧 CLR 对象](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)）队列消息\n\n若要创建包含 POCO（而不是字符串）的队列消息，请将 POCO 类型作为输出参数传递给 `Queue` 属性构造函数。\n \n        public static void CreateQueueMessage(\n            [QueueTrigger(\"inputqueue\")] BlobInformation blobInfoInput,\n            [Queue(\"outputqueue\")] out BlobInformation blobInfoOutput )\n        {\n            blobInfoOutput = blobInfoInput;\n        }\n\nSDK 会自动将对象序列化为 JSON。即使对象为 null，也始终会创建队列消息。\n\n### 在异步函数中创建多个消息\n\n若要创建多个消息，请设置输出队列 `ICollector<T>` 或 `IAsyncCollector<T>` 的参数类型，如以下示例所示。\n\n        public static void CreateQueueMessages(\n            [QueueTrigger(\"inputqueue\")] string queueMessage,\n            [Queue(\"outputqueue\")] ICollector<string> outputQueueMessage,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"Creating 2 messages in outputqueue\");\n            outputQueueMessage.Add(queueMessage + \"1\");\n            outputQueueMessage.Add(queueMessage + \"2\");\n        }\n\n调用 `Add` 方法时，将立即创建每个队列消息。\n\n### Queue 属性适用的类型\n\n可对以下参数类型使用 `Queue` 属性：\n\n* `out string`（函数结束时，如果参数值为非 null，则创建队列消息）\n* `out byte[]`（工作方式类似于 `string`） \n* `out CloudQueueMessage`（工作方式类似于 `string`） \n* `out POCO`（一种可序列化类型，如果在函数结束时参数为 null，则创建包含 null 对象的消息）\n* `ICollector`\n* `IAsyncCollector`\n* `CloudQueue`（用于直接通过 Azure 存储 API 手动创建消息）\n\n### <a id=\"ibinder\"></a>在函数主体中使用 WebJobs SDK 属性\n\n如果您需要在使用 `Queue`、`Blob` 或 `Table` 等 WebJobs SDK 属性之前在函数中执行某项操作，则可以使用 `IBinder` 接口。\n\n下面的示例采用一个输入队列消息，并在输出队列中创建具有相同内容的新消息。输出队列名称由函数正文中的代码设置。\n\n        public static void CreateQueueMessage(\n            [QueueTrigger(\"inputqueue\")] string queueMessage,\n            IBinder binder)\n        {\n            string outputQueueName = \"outputqueue\" + DateTime.Now.Month.ToString();\n            QueueAttribute queueAttribute = new QueueAttribute(outputQueueName);\n            CloudQueue outputQueue = binder.Bind<CloudQueue>(queueAttribute);\n            outputQueue.AddMessage(new CloudQueueMessage(queueMessage));\n        }\n\n`IBinder` 接口也可以与 `Table` 和 `Blob` 属性一起使用。\n\n## <a id=\"blobs\"></a>如何在处理队列消息时读取和写入 blob 和表\n\n可以使用 `Blob` 和 `Table` 属性来读取和写入 blob 和表。本部分中的示例适用于 Blob。有关展示如何在创建或更新 blob 时触发进程的代码示例，请参阅[如何结合使用 Azure blob 存储和 WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk-storage-blobs-how-to)；有关用于读取和写入表的代码示例，请参阅[如何结合使用 Azure 表存储和 WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk-storage-tables-how-to)。\n\n### 触发 Blob 操作的字符串队列消息\n\n对于包含字符串的队列消息，`queueTrigger` 是占位符，可以用于包含消息内容的 `Blob` 属性的 `blobPath` 参数。\n\n下面的示例使用 `Stream` 对象读取和写入 blob。队列消息是位于 textBlobs 容器中的 Blob 名称。将在同一个容器中创建 Blob 的副本，并在其名称后面附加“-new”。\n\n        public static void ProcessQueueMessage(\n            [QueueTrigger(\"blobcopyqueue\")] string blobName, \n            [Blob(\"textblobs/{queueTrigger}\",FileAccess.Read)] Stream blobInput,\n            [Blob(\"textblobs/{queueTrigger}-new\",FileAccess.Write)] Stream blobOutput)\n        {\n            blobInput.CopyTo(blobOutput, 4096);\n        }\n\n`Blob` 属性构造函数采用指定容器和 blob 名称的 `blobPath` 参数。有关此占位符的详细信息，请参阅[如何结合使用 Azure blob 存储和 WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk-storage-blobs-how-to)。\n\n当属性修饰 `Stream` 对象时，另一个构造函数参数会将 `FileAccess` 模式指定为读取、写入或读取/写入。\n\n下面的示例使用 `CloudBlockBlob` 对象删除 blob。队列消息是 Blob 的名称。\n\n        public static void DeleteBlob(\n            [QueueTrigger(\"deleteblobqueue\")] string blobName,\n            [Blob(\"textblobs/{queueTrigger}\")] CloudBlockBlob blobToDelete)\n        {\n            blobToDelete.Delete();\n        }\n\n### <a id=\"pocoblobs\"></a>POCO[（普通旧 CLR 对象](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)）队列消息\n\n对于在队列消息中存储为 JSON 的 POCO，您可以使用占位符来命名 `Queue` 属性的 `blobPath` 参数中的对象属性。还可以将[队列元数据属性名称](#queuemetadata)用作占位符。\n\n下面的示例将 Blob 复制到具有不同扩展名的新 Blob。队列消息是包含 `BlobName` 和 `BlobNameWithoutExtension` 属性的 `BlobInformation` 对象。属性名称用作 `Blob` 属性的 blob 路径中的占位符。\n \n        public static void CopyBlobPOCO(\n            [QueueTrigger(\"copyblobqueue\")] BlobInformation blobInfo,\n            [Blob(\"textblobs/{BlobName}\", FileAccess.Read)] Stream blobInput,\n            [Blob(\"textblobs/{BlobNameWithoutExtension}.txt\", FileAccess.Write)] Stream blobOutput)\n        {\n            blobInput.CopyTo(blobOutput, 4096);\n        }\n\nSDK 使用 [Newtonsoft.Json NuGet 包](http://www.nuget.org/packages/Newtonsoft.Json)序列化和反序列化消息。如果你在不使用 WebJobs SDK 的程序中创建队列消息，则可以如以下示例所示编写代码，以创建 SDK 可以分析的 POCO 队列消息。\n\n        BlobInformation blobInfo = new BlobInformation() { BlobName = \"boot.log\", BlobNameWithoutExtension = \"boot\" };\n        var queueMessage = new CloudQueueMessage(JsonConvert.SerializeObject(blobInfo));\n        logQueue.AddMessage(queueMessage);\n\n如果在将 blob 绑定到对象之前，您需要在函数中执行某项操作，则可以在函数主体中使用属性，[如前面的 Queue 属性所示](#ibinder)。\n\n### <a id=\"blobattributetypes\"></a>Blob 属性适用的类型\n \n`Blob` 属性适用以下类型：\n\n* `Stream`（读取或写入，通过使用 FileAccess 构造函数参数指定）\n* `TextReader`\n* `TextWriter`\n* `string`（读取）\n* `out string`（写入；仅当字符串参数在函数返回结果时为非 null 的情况下，才创建 blob）\n* POCO（读取）\n* out POCO（写入；始终创建 Blob，如果函数返回时 POCO 参数为 null，则创建 null 对象）\n* `CloudBlobStream`（写入）\n* `ICloudBlob`（读取或写入）\n* `CloudBlockBlob`（读取或写入） \n* `CloudPageBlob`（读取或写入） \n\n## <a id=\"poison\"></a>如何处理病毒消息\n\n内容导致函数失败的消息称为*病毒消息*。当函数失败时，将不删除并最终再次选择队列消息，从而导致周期重复。在达到限制的迭代次数后，SDK 可自动中断周期，你也可以手动中断。\n\n### 自动处理有害消息\n\nSDK 在处理一个队列消息时最多会调用某个函数 5 次。如果第五次尝试失败，消息将移到有害队列。[最大重试次数可配置](#config)。\n\n病毒队列的名称为 *{originalqueuename}*-poison。你可以编写一个函数来处理有害队列中的消息，并记录这些消息，或者发送需要注意的通知。\n\n在下面的示例中，如果队列消息包含不存在的 blob 名称，则 `CopyBlob` 函数会失败。在这种情况，消息将从 copyBlobqueue 队列移到 copyBlobqueue-poison 队列。然后，`ProcessPoisonMessage` 将记录有害消息。\n\n        public static void CopyBlob(\n            [QueueTrigger(\"copyblobqueue\")] string blobName,\n            [Blob(\"textblobs/{queueTrigger}\", FileAccess.Read)] Stream blobInput,\n            [Blob(\"textblobs/{queueTrigger}-new\", FileAccess.Write)] Stream blobOutput)\n        {\n            blobInput.CopyTo(blobOutput, 4096);\n        }\n        \n        public static void ProcessPoisonMessage(\n            [QueueTrigger(\"copyblobqueue-poison\")] string blobName, TextWriter logger)\n        {\n            logger.WriteLine(\"Failed to copy blob, name=\" + blobName);\n        }\n\n下图显示了处理有害消息时这些函数的控制台输出。\n\n![处理病毒消息时的控制台输出](./media/websites-dotnet-webjobs-sdk-storage-queues-how-to/poison.png)\n\n### 手动处理有害消息\n\n您可以向您的函数添加名为 `dequeueCount` 的 `int` 参数，获取选择处理某消息的次数。然后，你可以检查函数代码中的取消排队计数，并在处理次数超过阈值时执行自己的有害消息处理，如以下示例中所示。\n\n        public static void CopyBlob(\n            [QueueTrigger(\"copyblobqueue\")] string blobName, int dequeueCount,\n            [Blob(\"textblobs/{queueTrigger}\", FileAccess.Read)] Stream blobInput,\n            [Blob(\"textblobs/{queueTrigger}-new\", FileAccess.Write)] Stream blobOutput,\n            TextWriter logger)\n        {\n            if (dequeueCount > 3)\n            {\n                logger.WriteLine(\"Failed to copy blob, name=\" + blobName);\n            }\n            else\n            {\n            blobInput.CopyTo(blobOutput, 4096);\n            }\n        }\n\n## <a id=\"config\"></a>如何设置配置选项\n\n您可以使用 `JobHostConfiguration` 类型设置以下配置选项：\n\n* 在代码中设置 SDK 连接字符串。\n* 配置 `QueueTrigger` 设置，例如最大取消排队计数。\n* 从配置中获取队列名称。\n\n### <a id=\"setconnstr\"></a>在代码中设置 SDK 连接字符串\n\n在代码中设置 SDK 连接字符串可以在配置文件或环境变量中使用自己的连接字符串名称，如以下示例中所示。\n\n        static void Main(string[] args)\n        {\n            var _storageConn = ConfigurationManager\n                .ConnectionStrings[\"MyStorageConnection\"].ConnectionString;\n        \n            var _dashboardConn = ConfigurationManager\n                .ConnectionStrings[\"MyDashboardConnection\"].ConnectionString;\n        \n            var _serviceBusConn = ConfigurationManager\n                .ConnectionStrings[\"MyServiceBusConnection\"].ConnectionString;\n        \n            JobHostConfiguration config = new JobHostConfiguration();\n            config.StorageConnectionString = _storageConn;\n            config.DashboardConnectionString = _dashboardConn;\n            config.ServiceBusConnectionString = _serviceBusConn;\n            JobHost host = new JobHost(config);\n            host.RunAndBlock();\n        }\n\n### <a id=\"configqueue\"></a>配置 QueueTrigger 设置\n\n你可以配置以下用于处理队列消息的设置：\n\n- 同时选择的、要并行执行的最大队列消息数（默认值为 16）。\n- 在将队列消息发送到有害队列之前要重试的最大次数（默认值为 5）。\n- 当队列为空时，再次轮询之前要等待的最长时间（默认值为 1 分钟）。\n\n下面的示例演示如何配置这些设置：\n\n        static void Main(string[] args)\n        {\n            JobHostConfiguration config = new JobHostConfiguration();\n            config.Queues.BatchSize = 8;\n            config.Queues.MaxDequeueCount = 4;\n            config.Queues.MaxPollingInterval = TimeSpan.FromSeconds(15);\n            JobHost host = new JobHost(config);\n            host.RunAndBlock();\n        }\n\n### <a id=\"setnamesincode\"></a>在代码中设置 WebJobs SDK 构造函数参数的值\n\n有时，你想要在代码中指定队列名称、Blob 名称、容器或表名称，而不是进行硬编码。例如，您可能想在配置文件或环境变量中指定 `QueueTrigger` 的队列名称。\n\n为此，您可以向 `JobHostConfiguration` 类型传递 `NameResolver` 对象。此时，你可以在 WebJobs SDK 属性构造函数参数中包含以百分号 (%) 括住的特殊占位符，你的 `NameResolver` 代码将指定要用于取代这些占位符的实际值。\n\n例如，假设你要在测试环境中使用名为 logqueuetest 的队列，并在生产环境中使用名为 logqueueprod 的队列。您希望在具有实际队列名称的 `appSettings` 集合中指定条目名称，而不是硬编码的队列名称。如果 `appSettings` 键为 logqueue，则函数如以下示例所示。\n\n        public static void WriteLog([QueueTrigger(\"%logqueue%\")] string logMessage)\n        {\n            Console.WriteLine(logMessage);\n        }\n\n然后，`NameResolver` 类可以从 `appSettings` 获取队列名称，如以下示例所示：\n\n        public class QueueNameResolver : INameResolver\n        {\n            public string Resolve(string name)\n            {\n                return ConfigurationManager.AppSettings[name].ToString();\n            }\n        }\n\n将 `NameResolver` 类传入 `JobHost` 对象，如以下示例中所示。\n\n        static void Main(string[] args)\n        {\n            JobHostConfiguration config = new JobHostConfiguration();\n            config.NameResolver = new QueueNameResolver();\n            JobHost host = new JobHost(config);\n            host.RunAndBlock();\n        }\n \n**注意：**每次调用函数，都会解析队列名称、表名称和 blob 名称，但 blob 容器名称只会在应用程序启动时进行解析。在作业运行时，您无法更改 blob 容器名称。\n\n## <a id=\"manual\"></a>如何手动触发函数\n\n若要手动触发函数，请对 `JobHost` 对象使用 `Call` 或 `CallAsync` 方法，并对函数使用 `NoAutomaticTrigger` 属性，如以下示例所示。\n\n        public class Program\n        {\n            static void Main(string[] args)\n            {\n                JobHost host = new JobHost();\n                host.Call(typeof(Program).GetMethod(\"CreateQueueMessage\"), new { value = \"Hello world!\" });\n            }\n        \n            [NoAutomaticTrigger]\n            public static void CreateQueueMessage(\n                TextWriter logger, \n                string value, \n                [Queue(\"outputqueue\")] out string message)\n            {\n                message = value;\n                logger.WriteLine(\"Creating queue message: \", message);\n            }\n        }\n\n## <a id=\"logs\"></a>如何写入日志\n\n仪表板在两个位置显示日志：针对 Web 作业的页，以及针对特定 Web 作业调用的页。\n\n![WebJob 页中的日志](./media/websites-dotnet-webjobs-sdk-storage-queues-how-to/dashboardapplogs.png)\n\n![函数调用页中的日志](./media/websites-dotnet-webjobs-sdk-storage-queues-how-to/dashboardlogs.png)\n\n在函数或 `Main()` 方法中调用的控制台方法的输出在 Web 作业的仪表板页面上显示，而不是在特定方法调用页面上显示。从方法签名的参数中获取的 TextWriter 对象的输出在方法调用的仪表板页中显示。\n\n无法将控制台输出链接到特定的方法调用，因为控制台是单线程的，而许多作业函数可能同时运行。正因如此，SDK 为每个函数调用提供了自身唯一的日志写入器对象。\n\n若要写入[应用程序跟踪日志](/documentation/articles/web-sites-dotnet-troubleshoot-visual-studio#logsoverview)，请使用 `Console.Out`（创建标记为 INFO 的日志）和 `Console.Error`（创建标记为 ERROR 的日志）。或者，您可以使用 [Trace 或 TraceSource](http://blogs.msdn.com/b/mcsuksoldev/archive/2014/09/04/adding-trace-to-azure-web-sites-and-web-jobs.aspx)，它除了提供“信息”和“错误”外，还提供“详细”、“警告”和“严重级别”。应用程序跟踪日志将显示在 Web 应用日志文件、Azure 表或 Azure Blob 中，具体取决于你如何配置 Azure Web 应用。与所有控制台输出一样，最近的 100 条应用程序日志也会显示在 Web 作业的仪表板页中，而不是显示在函数调用的页中。\n\n仅当程序在 Azure Web 作业中运行（而不是在本地运行或者在其他某个环境中运行）时，控制台输出才显示在仪表板中。\n\n为高吞吐量方案禁用仪表板日志记录。默认情况下，SDK 将日志写入存储，此活动会在处理的消息较多时降低性能。若要禁用日志记录，请按以下示例中所示，将仪表板连接字符串设置为 null。\n\n        JobHostConfiguration config = new JobHostConfiguration();       \n        config.DashboardConnectionString = \"\";        \n        JobHost host = new JobHost(config);\n        host.RunAndBlock();\n\n下面的示例演示了写入日志的多种方法：\n\n        public static void WriteLog(\n            [QueueTrigger(\"logqueue\")] string logMessage,\n            TextWriter logger)\n        {\n            Console.WriteLine(\"Console.Write - \" + logMessage);\n            Console.Out.WriteLine(\"Console.Out - \" + logMessage);\n            Console.Error.WriteLine(\"Console.Error - \" + logMessage);\n            logger.WriteLine(\"TextWriter - \" + logMessage);\n        }\n\n在 WebJobs SDK 仪表板中，当您转到特定函数调用页面并单击“切换输出”时，您会看到 `TextWriter` 对象的输出：\n\n![单击函数调用链接](./media/websites-dotnet-webjobs-sdk-storage-queues-how-to/dashboardinvocations.png)\n\n![函数调用页中的日志](./media/websites-dotnet-webjobs-sdk-storage-queues-how-to/dashboardlogs.png)\n\n在 WebJobs SDK 仪表板中，当您转到 Web 作业（而不是函数调用）页面并单击“切换输出”时，您会看到最近的 100 行控制台输出。\n \n![单击“切换输出”](./media/websites-dotnet-webjobs-sdk-storage-queues-how-to/dashboardapplogs.png)\n\n在连续 Web 作业中，应用程序日志显示在 Web 应用文件系统的 /data/jobs/continuous/*{webjobname}*/job\\_log.txt 中。\n\n        [09/26/2014 21:01:13 > 491e54: INFO] Console.Write - Hello world!\n        [09/26/2014 21:01:13 > 491e54: ERR ] Console.Error - Hello world!\n        [09/26/2014 21:01:13 > 491e54: INFO] Console.Out - Hello world!\n\n在 Azure blob 中，应用程序日志如下所示：\n        2014-09-26T21:01:13,Information,contosoadsnew,491e54,635473620738373502,0,17404,17,Console.Write - Hello world!,\n        2014-09-26T21:01:13,Error,contosoadsnew,491e54,635473620738373502,0,17404,19,Console.Error - Hello world!,\n        2014-09-26T21:01:13,Information,contosoadsnew,491e54,635473620738529920,0,17404,17,Console.Out - Hello world!,\n\n在 Azure 表中，`Console.Out` 和 `Console.Error` 日志如下所示：\n\n![表中的信息日志](./media/websites-dotnet-webjobs-sdk-storage-queues-how-to/tableinfo.png)\n\n![表中的错误日志](./media/websites-dotnet-webjobs-sdk-storage-queues-how-to/tableerror.png)\n\n如果要插入自己的记录器，请参阅[此示例](http://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Program.cs)。\n\n## <a id=\"errors\"></a>如何处理错误和配置超时\n\nWebJobs SDK 还包括 [Timeout](http://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Functions.cs) 属性，可用于在函数未在指定的时间内完成时取消函数。而且，如果你想要在指定的时间段内发生太多错误时引发警报，可以使用 `ErrorTrigger` 属性。下面是 [ErrorTrigger 示例](https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Error-Monitoring)。\n\n    \n    public static void ErrorMonitor(\n    [ErrorTrigger(\"00:01:00\", 1)] TraceFilter filter, TextWriter log,\n    [SendGrid(\n        To = \"admin@emailaddress.com\",\n        Subject = \"Error!\")]\n     SendGridMessage message)\n    {\n        // log last 5 detailed errors to the Dashboard\n       log.WriteLine(filter.GetDetailedMessage(5));\n       message.Text = filter.GetDetailedMessage(1);\n    }\n    \n\n你还可以使用配置开关（可以是应用设置或环境变量名称）动态地禁用和启用函数以控制是否可以触发它们。有关示例代码，请参阅 [WebJobs SDK 示例存储库](https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/MiscOperations/Functions.cs)中的 `Disable` 属性。\n\n## <a id=\"nextsteps\"></a>后续步骤\n\n本指南提供的代码示例演示了如何处理常见方案以操作 Azure 队列。若要详细了解如何使用 Azure WebJobs 和 WebJobs SDK，请参阅[有关 Azure WebJobs 的推荐资源](/documentation/articles/websites-webjobs-resources/)。\n \n\n<!---HONumber=Mooncake_0118_2016-->"
}