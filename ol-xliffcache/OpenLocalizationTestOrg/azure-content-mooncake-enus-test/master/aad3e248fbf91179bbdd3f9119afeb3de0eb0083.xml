{
  "nodes": [
    {
      "content": "在 Ubuntu 上使用 Ruby 和 TinyTDS 连接到 SQL 数据库",
      "pos": [
        27,
        66
      ]
    },
    {
      "content": "提供可在 Ubuntu Linux 上以客户端形式运行的，用于连接到 Azure SQL 数据库的 Ruby 代码示例。",
      "pos": [
        85,
        145
      ]
    },
    {
      "content": "在 Ubuntu Linux 上使用 Ruby 连接到 SQL 数据库",
      "pos": [
        357,
        392
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        397,
        413
      ]
    },
    {
      "content": "Python",
      "pos": [
        417,
        423
      ]
    },
    {
      "content": "Node.js",
      "pos": [
        501,
        508
      ]
    },
    {
      "content": "Ruby",
      "pos": [
        579,
        583
      ]
    },
    {
      "content": "本主题演示了一个在 Unbutu Linux 客户端计算机上运行的，用于连接到 Azure SQL 数据库的 Ruby 代码示例。",
      "pos": [
        651,
        716
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        721,
        725
      ]
    },
    {
      "content": "安装所需的模块",
      "pos": [
        731,
        738
      ]
    },
    {
      "content": "打开终端并安装 FreeTDS（如果尚未在计算机上安装）。",
      "pos": [
        740,
        769
      ]
    },
    {
      "content": "在计算机上配置 FreeTDS 后，安装 Ruby（如果尚未安装）。",
      "pos": [
        871,
        905
      ]
    },
    {
      "content": "如果遇到了任何签名问题，请运行以下命令。",
      "pos": [
        1043,
        1063
      ]
    },
    {
      "content": "如果签名没有问题，请运行以下命令。",
      "pos": [
        1131,
        1148
      ]
    },
    {
      "content": "确保运行版本 2.1.2 或 Ruby VM。",
      "pos": [
        1243,
        1266
      ]
    },
    {
      "content": "接下来，安装 TinyTDS。",
      "pos": [
        1268,
        1283
      ]
    },
    {
      "content": "SQL 数据库",
      "pos": [
        1315,
        1322
      ]
    },
    {
      "pos": [
        1324,
        1464
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>入门页<ept id=\"p1\">](/documentation/articles/sql-database-get-started)</ept>，以了解如何创建示例数据库。必须根据指南创建 <bpt id=\"p2\">**</bpt>AdventureWorks 数据库模板<ept id=\"p2\">**</ept>。下面所示的示例只适用于 <bpt id=\"p3\">**</bpt>AdventureWorks 架构<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "步骤 1：获取连接详细信息",
      "pos": [
        1470,
        1483
      ]
    },
    {
      "content": "步骤 2：连接",
      "pos": [
        1647,
        1654
      ]
    },
    {
      "pos": [
        1656,
        1735
      ],
      "content": "<bpt id=\"p1\">[</bpt>TinyTDS::Client<ept id=\"p1\">](https://github.com/rails-sqlserver/tiny_tds)</ept> 函数用于连接到 SQL 数据库。"
    },
    {
      "content": "步骤 3：执行查询",
      "pos": [
        1965,
        1974
      ]
    },
    {
      "pos": [
        1976,
        2163
      ],
      "content": "<bpt id=\"p1\">[</bpt>TinyTds::Result<ept id=\"p1\">](https://github.com/rails-sqlserver/tiny_tds)</ept> 函数用于检索针对 SQL 数据库执行的查询所返回的结果集。此函数接受查询并返回结果集。可以使用 <bpt id=\"p2\">[</bpt>result.each do |row|<ept id=\"p2\">](https://github.com/rails-sqlserver/tiny_tds)</ept> 循环访问结果集。"
    },
    {
      "content": "步骤 4：插入行",
      "pos": [
        2526,
        2534
      ]
    },
    {
      "pos": [
        2536,
        2792
      ],
      "content": "在本示例中，你将了解如何安全地执行 <bpt id=\"p1\">[</bpt>INSERT<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/ms174335.aspx)</ept> 语句，传递参数以保护应用程序免遭 <bpt id=\"p2\">[</bpt>SQL 注入<ept id=\"p2\">](https://technet.microsoft.com/zh-cn/library/ms161953(v=sql.105).aspx)</ept> 漏洞的危害，然后检索自动生成的<bpt id=\"p3\">[</bpt>主键<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/ms179610.aspx)</ept>值。"
    },
    {
      "pos": [
        2794,
        2940
      ],
      "content": "若要配合使用 TinyTDS 和 Azure，建议你运行多个 <ph id=\"ph1\">`SET`</ph> 语句来更改当前会话处理特定信息的方式。建议使用代码示例中所提供的 <ph id=\"ph2\">`SET`</ph> 语句。例如，即使未显式指定列的可为 null 状态，<ph id=\"ph3\">`SET ANSI_NULL_DFLT_ON`</ph> 也可以让你创建新列来允许 null 值。"
    },
    {
      "pos": [
        2942,
        3122
      ],
      "content": "为了符合 Microsoft SQL Server <bpt id=\"p1\">[</bpt>日期时间<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/ms187819.aspx)</ept>格式，请使用 <bpt id=\"p2\">[</bpt>strftime<ept id=\"p2\">](http://ruby-doc.org/core-2.2.0/Time.html#method-i-strftime)</ept> 函数转换成对应的日期时间格式。"
    }
  ],
  "content": "<properties\n    pageTitle=\"在 Ubuntu 上使用 Ruby 和 TinyTDS 连接到 SQL 数据库\"\n    description=\"提供可在 Ubuntu Linux 上以客户端形式运行的，用于连接到 Azure SQL 数据库的 Ruby 代码示例。\"\n    services=\"sql-database\"\n    documentationCenter=\"\"\n    authors=\"ajlam\"\n    manager=\"jeffreyg\"\n    editor=\"\"/>\n\n\n<tags\n    ms.service=\"sql-database\"\n    ms.date=\"12/17/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n\n# 在 Ubuntu Linux 上使用 Ruby 连接到 SQL 数据库\n\n\n> [AZURE.SELECTOR]\n- [Python](/documentation/articles/sql-database-develop-python-simple-ubuntu-linux)\n- [Node.js](/documentation/articles/sql-database-develop-nodejs-simple-linux)\n- [Ruby](/documentation/articles/sql-database-develop-ruby-simple-linux)\n\n\n本主题演示了一个在 Unbutu Linux 客户端计算机上运行的，用于连接到 Azure SQL 数据库的 Ruby 代码示例。\n\n## 先决条件\n\n### 安装所需的模块\n\n打开终端并安装 FreeTDS（如果尚未在计算机上安装）。\n\n    sudo apt-get --assume-yes update\n    sudo apt-get --assume-yes install freetds-dev freetds-bin\n\n在计算机上配置 FreeTDS 后，安装 Ruby（如果尚未安装）。\n\n    sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev\n    curl -L https://get.rvm.io | bash -s stable\n\n如果遇到了任何签名问题，请运行以下命令。\n\n    command curl -sSL https://rvm.io/mpapis.asc | gpg --import -\n\n如果签名没有问题，请运行以下命令。\n\n    source ~/.rvm/scripts/rvm\n    rvm install 2.1.2\n    rvm use 2.1.2 --default\n    ruby -v\n\n确保运行版本 2.1.2 或 Ruby VM。\n\n接下来，安装 TinyTDS。\n\n    gem install tiny_tds\n\n### SQL 数据库\n\n请参阅[入门页](/documentation/articles/sql-database-get-started)，以了解如何创建示例数据库。必须根据指南创建 **AdventureWorks 数据库模板**。下面所示的示例只适用于 **AdventureWorks 架构**。\n\n\n## 步骤 1：获取连接详细信息\n\n[AZURE.INCLUDE [sql-database-include-connection-string-details-20-portalshots](../includes/sql-database-include-connection-string-details-20-portalshots.md)]\n\n## 步骤 2：连接\n\n[TinyTDS::Client](https://github.com/rails-sqlserver/tiny_tds) 函数用于连接到 SQL 数据库。\n\n    require 'tiny_tds'\n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword',\n    host: 'yourserver.database.chinacloudapi.cn', port: 1433,\n    database: 'AdventureWorks', azure:true\n\n## 步骤 3：执行查询\n\n[TinyTds::Result](https://github.com/rails-sqlserver/tiny_tds) 函数用于检索针对 SQL 数据库执行的查询所返回的结果集。此函数接受查询并返回结果集。可以使用 [result.each do |row|](https://github.com/rails-sqlserver/tiny_tds) 循环访问结果集。\n\n    require 'tiny_tds'  \n    print 'test'     \n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword',\n    host: 'yourserver.database.chinacloudapi.cn', port: 1433,\n    database: 'AdventureWorks', azure:true\n    results = client.execute(\"select * from SalesLT.Product\")\n    results.each do |row|\n    puts row\n    end\n\n## 步骤 4：插入行\n\n在本示例中，你将了解如何安全地执行 [INSERT](https://msdn.microsoft.com/zh-cn/library/ms174335.aspx) 语句，传递参数以保护应用程序免遭 [SQL 注入](https://technet.microsoft.com/zh-cn/library/ms161953(v=sql.105).aspx) 漏洞的危害，然后检索自动生成的[主键](https://msdn.microsoft.com/zh-cn/library/ms179610.aspx)值。\n\n若要配合使用 TinyTDS 和 Azure，建议你运行多个 `SET` 语句来更改当前会话处理特定信息的方式。建议使用代码示例中所提供的 `SET` 语句。例如，即使未显式指定列的可为 null 状态，`SET ANSI_NULL_DFLT_ON` 也可以让你创建新列来允许 null 值。\n\n为了符合 Microsoft SQL Server [日期时间](http://msdn.microsoft.com/zh-cn/library/ms187819.aspx)格式，请使用 [strftime](http://ruby-doc.org/core-2.2.0/Time.html#method-i-strftime) 函数转换成对应的日期时间格式。\n\n    require 'tiny_tds'\n    client = TinyTds::Client.new username: 'yourusername@yourserver', password: 'yourpassword',\n    host: 'yourserver.database.chinacloudapi.cn', port: 1433,\n    database: 'AdventureWorks', azure:true\n    results = client.execute(\"SET ANSI_NULLS ON\")\n    results = client.execute(\"SET CURSOR_CLOSE_ON_COMMIT OFF\")\n    results = client.execute(\"SET ANSI_NULL_DFLT_ON ON\")\n    results = client.execute(\"SET IMPLICIT_TRANSACTIONS OFF\")\n    results = client.execute(\"SET ANSI_PADDING ON\")\n    results = client.execute(\"SET QUOTED_IDENTIFIER ON\")\n    results = client.execute(\"SET ANSI_WARNINGS ON\")\n    results = client.execute(\"SET CONCAT_NULL_YIELDS_NULL ON\")\n    require 'date'\n    t = Time.now\n    curr_date = t.strftime(\"%Y-%m-%d %H:%M:%S.%L\")\n    results = client.execute(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate)\n    OUTPUT INSERTED.ProductID VALUES ('SQL Server Express New', 'SQLEXPRESS New', 0, 0, '#{curr_date}' )\")\n    results.each do |row|\n    puts row\n    end\n\n<!---HONumber=Mooncake_0118_2016-->\n"
}