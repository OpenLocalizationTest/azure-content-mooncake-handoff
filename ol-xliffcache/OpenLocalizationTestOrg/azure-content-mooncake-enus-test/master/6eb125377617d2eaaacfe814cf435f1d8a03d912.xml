{
  "nodes": [
    {
      "content": "WebAPI 项目",
      "pos": [
        3,
        12
      ]
    },
    {
      "pos": [
        17,
        72
      ],
      "content": "在 Visual Studio 中，打开您在<bpt id=\"p1\">**</bpt>通知用户<ept id=\"p1\">**</ept>教程中创建的 <bpt id=\"p2\">**</bpt>AppBackend<ept id=\"p2\">**</ept> 项目。"
    },
    {
      "pos": [
        76,
        280
      ],
      "content": "在 Notifications.cs 中，将整个 <bpt id=\"p1\">**</bpt>Notifications<ept id=\"p1\">**</ept> 类替换为以下代码。请确保将占位符替换为通知中心的连接字符串（具有完全访问权限）和中心名称。可以从 <bpt id=\"p2\">[</bpt>Azure 管理门户<ept id=\"p2\">](http://manage.windowsazure.cn)</ept>中获取这些值。现在，该模块将表示要发送的其他安全通知。在完整的实现中，通知将存储在数据库中；为简单起见，在此示例中我们将它们存储在内存中。"
    },
    {
      "pos": [
        1454,
        1632
      ],
      "content": "在 NotificationsController.cs 中，将 <bpt id=\"p1\">**</bpt>NotificationsController<ept id=\"p1\">**</ept> 类定义中的代码替换为以下代码。该组件为设备实现了一种安全检索通知的方法，还提供了一种方法来触发到设备的安全推送（用于本教程的教学目的）。请注意，在向通知中心发送通知时，我们将只发送一个包含通知 ID（且没有实际的消息内容）的原始通知："
    },
    {
      "pos": [
        3122,
        3217
      ],
      "content": "请注意，<ph id=\"ph1\">`Post`</ph> 方法现在不发送 toast 通知。它将发送只包含通知 ID 且没有任何敏感内容的原始通知。另外，请确保注释在通知中心上未配置其凭据的平台的发送操作，因为它们会导致错误。"
    },
    {
      "pos": [
        3223,
        3299
      ],
      "content": "现在，我们将此应用重新部署到 Azure Web 应用，以便可以从所有设备对其进行访问。右键单击 <bpt id=\"p1\">**</bpt>AppBackend<ept id=\"p1\">**</ept> 项目，然后选择“发布”。"
    },
    {
      "pos": [
        3305,
        3424
      ],
      "content": "选择 Azure Web 应用作为发布目标。使用您的 Azure 帐户登录，选择一个现有的或新的 Web 应用，并记下“连接”选项卡中的<bpt id=\"p1\">**</bpt>目标 URL<ept id=\"p1\">**</ept> 属性。在本教程后面的部分中，我们将此 URL 称为<bpt id=\"p2\">*</bpt>后端终结点<ept id=\"p2\">*</ept>。单击“发布”。"
    }
  ],
  "content": "## WebAPI 项目\n\n1. 在 Visual Studio 中，打开您在**通知用户**教程中创建的 **AppBackend** 项目。\n2. 在 Notifications.cs 中，将整个 **Notifications** 类替换为以下代码。请确保将占位符替换为通知中心的连接字符串（具有完全访问权限）和中心名称。可以从 [Azure 管理门户](http://manage.windowsazure.cn)中获取这些值。现在，该模块将表示要发送的其他安全通知。在完整的实现中，通知将存储在数据库中；为简单起见，在此示例中我们将它们存储在内存中。\n\n        public class Notification\n        {\n            public int Id { get; set; }\n            public string Payload { get; set; }\n            public bool Read { get; set; }\n        }\n    \n    \n        public class Notifications\n        {\n            public static Notifications Instance = new Notifications();\n            \n            private List<Notification> notifications = new List<Notification>();\n    \n            public NotificationHubClient Hub { get; set; }\n    \n            private Notifications() {\n                Hub = NotificationHubClient.CreateClientFromConnectionString(\"{conn string with full access}\",  \"{hub name}\");\n            }\n\n            public Notification CreateNotification(string payload)\n            {\n                var notification = new Notification() {\n                Id = notifications.Count,\n                Payload = payload,\n                Read = false\n                };\n\n                notifications.Add(notification);\n\n                return notification;\n            }\n\n            public Notification ReadNotification(int id)\n            {\n                return notifications.ElementAt(id);\n            }\n        }\n\n20. 在 NotificationsController.cs 中，将 **NotificationsController** 类定义中的代码替换为以下代码。该组件为设备实现了一种安全检索通知的方法，还提供了一种方法来触发到设备的安全推送（用于本教程的教学目的）。请注意，在向通知中心发送通知时，我们将只发送一个包含通知 ID（且没有实际的消息内容）的原始通知：\n\n        public NotificationsController()\n        {\n            Notifications.Instance.CreateNotification(\"This is a secure notification!\");\n        }\n\n        // GET api/notifications/id\n        public Notification Get(int id)\n        {\n            return Notifications.Instance.ReadNotification(id);\n        }\n\n        public async Task<HttpResponseMessage> Post()\n        {\n            var secureNotificationInTheBackend = Notifications.Instance.CreateNotification(\"Secure confirmation.\");\n            var usernameTag = \"username:\" + HttpContext.Current.User.Identity.Name;\n\n            // windows\n            var rawNotificationToBeSent = new Microsoft.Azure.NotificationHubs.WindowsNotification(secureNotificationInTheBackend.Id.ToString(),\n                            new Dictionary<string, string> {\n                                {\"X-WNS-Type\", \"wns/raw\"}\n                            });\n            await Notifications.Instance.Hub.SendNotificationAsync(rawNotificationToBeSent, usernameTag);\n\n            // apns\n            await Notifications.Instance.Hub.SendAppleNativeNotificationAsync(\"{\"aps\": {\"content-available\": 1}, \"secureId\": \"\" + secureNotificationInTheBackend.Id.ToString() + \"\"}\", usernameTag);\n\n            // gcm\n            await Notifications.Instance.Hub.SendGcmNativeNotificationAsync(\"{\"data\": {\"secureId\": \"\" + secureNotificationInTheBackend.Id.ToString() + \"\"}}\", usernameTag);\n\n\n            return Request.CreateResponse(HttpStatusCode.OK);\n        }\n\n\n请注意，`Post` 方法现在不发送 toast 通知。它将发送只包含通知 ID 且没有任何敏感内容的原始通知。另外，请确保注释在通知中心上未配置其凭据的平台的发送操作，因为它们会导致错误。\n\n21. 现在，我们将此应用重新部署到 Azure Web 应用，以便可以从所有设备对其进行访问。右键单击 **AppBackend** 项目，然后选择“发布”。\n\n24. 选择 Azure Web 应用作为发布目标。使用您的 Azure 帐户登录，选择一个现有的或新的 Web 应用，并记下“连接”选项卡中的**目标 URL** 属性。在本教程后面的部分中，我们将此 URL 称为*后端终结点*。单击“发布”。\n\n<!---HONumber=82-->"
}