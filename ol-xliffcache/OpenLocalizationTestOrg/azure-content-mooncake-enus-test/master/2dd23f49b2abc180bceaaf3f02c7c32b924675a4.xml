{
  "nodes": [
    {
      "pos": [
        4,
        45
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"update-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>更新应用程序以调用自定义 API"
    },
    {
      "pos": [
        50,
        142
      ],
      "content": "在 Visual Studio 中，打开快速启动项目中的 MainPage.xaml 文件，找到名为 <ph id=\"ph1\">`ButtonRefresh`</ph> 的“按钮”元素，并将其替换为以下 XAML 代码："
    },
    {
      "content": "这样可将新按钮添加到页。",
      "pos": [
        481,
        493
      ]
    },
    {
      "content": "打开 MainPage.xaml.cs 代码文件，并添加以下类定义代码：",
      "pos": [
        498,
        534
      ]
    },
    {
      "content": "此类用于保存自定义 API 返回的行计数值。",
      "pos": [
        639,
        661
      ]
    },
    {
      "pos": [
        666,
        744
      ],
      "content": "找到 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类中的 <bpt id=\"p2\">**</bpt>RefreshTodoItems<ept id=\"p2\">**</ept> 方法，并确认 <ph id=\"ph1\">`query`</ph> 是使用以下 <bpt id=\"p3\">**</bpt>Where<ept id=\"p3\">**</ept> 方法定义的："
    },
    {
      "content": "这样可以筛选项，使得查询不返回已完成的项。",
      "pos": [
        806,
        827
      ]
    },
    {
      "pos": [
        832,
        857
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>MainPage<ept id=\"p1\">**</ept> 类中，添加以下方法："
    },
    {
      "pos": [
        1707,
        1950
      ],
      "content": "此方法可处理新按钮的 <bpt id=\"p1\">**</bpt>Click<ept id=\"p1\">**</ept> 事件。在客户端上调用 <bpt id=\"p2\">[</bpt>InvokeApiAsync<ept id=\"p2\">](https://msdn.microsoft.com/zh-CN/library/windowsazure/microsoft.windowsazure.mobileservices.mobileserviceclient.invokeapiasync.aspx)</ept> 方法，该客户端向新的自定义 API 发送 POST 请求。与任何错误相同，自定义 API 返回的结果也显示在消息对话框中。"
    },
    {
      "pos": [
        1955,
        1984
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"test-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>测试应用程序"
    },
    {
      "pos": [
        1989,
        2030
      ],
      "content": "在 Visual Studio 中，按 <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept> 键以重新生成项目并启动应用。"
    },
    {
      "content": "在应用的“插入 TodoItem”中键入一些文本，然后单击“保存”。",
      "pos": [
        2035,
        2069
      ]
    },
    {
      "content": "重复上述步骤，直至你将多个 ToDo 项添加到列表。",
      "pos": [
        2074,
        2100
      ]
    },
    {
      "content": "单击“完成全部”按钮。",
      "pos": [
        2105,
        2116
      ]
    },
    {
      "content": "此时会显示一个消息框，指示标记为完成的多个项，并再次执行筛选查询，将所有项从列表中清除。",
      "pos": [
        2239,
        2283
      ]
    }
  ],
  "content": "\n## <a name=\"update-app\"></a>更新应用程序以调用自定义 API\n\n1. 在 Visual Studio 中，打开快速启动项目中的 MainPage.xaml 文件，找到名为 `ButtonRefresh` 的“按钮”元素，并将其替换为以下 XAML 代码： \n\n        <StackPanel Orientation=\"Horizontal\">\n            <Button Margin=\"72,0,0,0\" Name=\"ButtonRefresh\" \n                    Click=\"ButtonRefresh_Click\">Refresh</Button>\n            <Button Margin=\"12,0,0,0\" Name=\"ButtonCompleteAll\" \n                    Click=\"ButtonCompleteAll_Click\">Complete All</Button>\n        </StackPanel>\n\n    这样可将新按钮添加到页。\n\n2. 打开 MainPage.xaml.cs 代码文件，并添加以下类定义代码：\n\n        public class MarkAllResult\n        {\n            public int Count { get; set; }\n        }\n\n    此类用于保存自定义 API 返回的行计数值。\n\n3. 找到 **MainPage** 类中的 **RefreshTodoItems** 方法，并确认 `query` 是使用以下 **Where** 方法定义的：\n\n        .Where(todoItem => todoItem.Complete == false)\n\n    这样可以筛选项，使得查询不返回已完成的项。\n\n4. 在 **MainPage** 类中，添加以下方法：\n\n        private async void ButtonCompleteAll_Click(object sender, RoutedEventArgs e)\n        {\n            string message;\n            try\n            {\n                // Asynchronously call the custom API using the POST method. \n                var result = await App.MobileService\n                    .InvokeApiAsync<MarkAllResult>(\"completeAll\", \n                    System.Net.Http.HttpMethod.Post, null);\n                message =  result.Count + \" item(s) marked as complete.\";\n                RefreshTodoItems();\n            }\n            catch (MobileServiceInvalidOperationException ex)\n            {\n                message = ex.Message;                \n            }\n        \n            var dialog = new MessageDialog(message);\n            dialog.Commands.Add(new UICommand(\"OK\"));\n            await dialog.ShowAsync();\n        }\n\n    此方法可处理新按钮的 **Click** 事件。在客户端上调用 [InvokeApiAsync](https://msdn.microsoft.com/zh-CN/library/windowsazure/microsoft.windowsazure.mobileservices.mobileserviceclient.invokeapiasync.aspx) 方法，该客户端向新的自定义 API 发送 POST 请求。与任何错误相同，自定义 API 返回的结果也显示在消息对话框中。\n\n## <a name=\"test-app\"></a>测试应用程序\n\n1. 在 Visual Studio 中，按 **F5** 键以重新生成项目并启动应用。\n\n2. 在应用的“插入 TodoItem”中键入一些文本，然后单击“保存”。\n\n3. 重复上述步骤，直至你将多个 ToDo 项添加到列表。\n\n4. 单击“完成全部”按钮。\n\n    ![](./media/mobile-services-windows-store-dotnet-call-custom-api/mobile-custom-api-windows-store-completed.png)\n\n    此时会显示一个消息框，指示标记为完成的多个项，并再次执行筛选查询，将所有项从列表中清除。\n\n<!---HONumber=74-->"
}