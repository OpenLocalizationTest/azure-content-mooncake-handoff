{
  "nodes": [
    {
      "content": "如何结合使用通知中心与 Java",
      "pos": [
        29,
        45
      ]
    },
    {
      "content": "了解如何从 Java 后端使用 Azure 通知中心。",
      "pos": [
        65,
        92
      ]
    },
    {
      "content": "如何通过 Java 使用通知中心",
      "pos": [
        326,
        342
      ]
    },
    {
      "content": "本主题将向你介绍完全受支持的全新官方 Azure 通知中心 Java SDK 的主要功能。",
      "pos": [
        470,
        515
      ]
    },
    {
      "content": "这是一个开源项目，你可以在 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Java SDK]</ept> 查看完整的 SDK 代码。",
      "pos": [
        516,
        554
      ]
    },
    {
      "pos": [
        556,
        739
      ],
      "content": "通常情况下，如 MSDN 主题<bpt id=\"p1\">[</bpt>通知中心 REST API<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/dn223264.aspx)</ept> 中所述，你可以使用通知中心 REST 接口从 Java/PHP/Python/Ruby 后端访问所有通知中心功能。此 Java SDK 在以 Java 形式表示的 REST 接口上提供瘦包装器。"
    },
    {
      "content": "SDK 当前支持：",
      "pos": [
        741,
        750
      ]
    },
    {
      "content": "通知中心上的 CRUD",
      "pos": [
        754,
        765
      ]
    },
    {
      "content": "注册上的 CRUD",
      "pos": [
        769,
        778
      ]
    },
    {
      "content": "安装管理",
      "pos": [
        781,
        785
      ]
    },
    {
      "content": "导入/导出注册",
      "pos": [
        788,
        795
      ]
    },
    {
      "content": "常规发送",
      "pos": [
        798,
        802
      ]
    },
    {
      "content": "计划发送",
      "pos": [
        805,
        809
      ]
    },
    {
      "content": "通过 Java NIO 的异步操作",
      "pos": [
        812,
        829
      ]
    },
    {
      "content": "支持的平台：APNS (iOS)、GCM (Android)、WNS（Windows 应用商店应用）、MPNS (Windows Phone)、ADM (Amazon Kindle Fire)、百度（没有 Google 服务的 Android）",
      "pos": [
        832,
        954
      ]
    },
    {
      "content": "SDK 用法",
      "pos": [
        960,
        966
      ]
    },
    {
      "content": "编译和生成",
      "pos": [
        972,
        977
      ]
    },
    {
      "pos": [
        979,
        989
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Maven]</ept>"
    },
    {
      "content": "生成：",
      "pos": [
        991,
        994
      ]
    },
    {
      "content": "代码",
      "pos": [
        1016,
        1018
      ]
    },
    {
      "content": "通知中心 CRUD",
      "pos": [
        1024,
        1033
      ]
    },
    {
      "content": "创建命名空间管理器：",
      "pos": [
        1037,
        1047
      ]
    },
    {
      "content": "创建通知中心：",
      "pos": [
        1140,
        1147
      ]
    },
    {
      "content": "或者",
      "pos": [
        1362,
        1364
      ]
    },
    {
      "content": "获取通知中心：",
      "pos": [
        1432,
        1439
      ]
    },
    {
      "content": "更新通知中心：",
      "pos": [
        1508,
        1515
      ]
    },
    {
      "content": "删除通知中心：",
      "pos": [
        1651,
        1658
      ]
    },
    {
      "content": "注册 CRUD",
      "pos": [
        1726,
        1733
      ]
    },
    {
      "content": "创建通知中心客户端：",
      "pos": [
        1736,
        1746
      ]
    },
    {
      "content": "创建 Windows 注册：",
      "pos": [
        1816,
        1830
      ]
    },
    {
      "content": "创建 iOS 注册：",
      "pos": [
        2019,
        2029
      ]
    },
    {
      "content": "同样，可以针对 Android (GCM)、Windows Phone (MPNS) 和 Kindle Fire (ADM) 创建注册。",
      "pos": [
        2200,
        2268
      ]
    },
    {
      "content": "创建模板注册：",
      "pos": [
        2272,
        2279
      ]
    },
    {
      "content": "使用“创建 registrationid + upsert 模式”创建注册",
      "pos": [
        2481,
        2518
      ]
    },
    {
      "content": "如果在设备上存储注册 ID，请删除重复项以防出现任何响应丢失：",
      "pos": [
        2522,
        2553
      ]
    },
    {
      "content": "更新注册：",
      "pos": [
        2715,
        2720
      ]
    },
    {
      "content": "删除注册：",
      "pos": [
        2764,
        2769
      ]
    },
    {
      "content": "查询注册：",
      "pos": [
        2815,
        2820
      ]
    },
    {
      "content": "获取单个注册：",
      "pos": [
        2830,
        2837
      ]
    },
    {
      "content": "获取中心的所有注册：",
      "pos": [
        2892,
        2902
      ]
    },
    {
      "content": "获取具有标记的注册：",
      "pos": [
        2953,
        2963
      ]
    },
    {
      "content": "按渠道获取注册：",
      "pos": [
        3026,
        3034
      ]
    },
    {
      "content": "所有集合查询都支持 $top 和继续标记。",
      "pos": [
        3097,
        3118
      ]
    },
    {
      "content": "安装 API 用法",
      "pos": [
        3124,
        3133
      ]
    },
    {
      "content": "安装 API 是一种注册管理的替代机制。其现在可以使用“单个”安装对象，而不是维护着多个注册，后者不但工作量较大，而且容易出错且效率低下。",
      "pos": [
        3134,
        3203
      ]
    },
    {
      "content": "安装包含你所需的一切：推送通道（设备标记）、标记、模板、辅助磁贴（用于 WNS 和 APNS）。你不必再调用该服务以获取 ID - 只需生成 GUID 或任何其他标识符，将其保存在设备上并与推送通道（设备标记）一起发送到你的后端即可。",
      "pos": [
        3204,
        3321
      ]
    },
    {
      "content": "在后端，你应当只做一个调用：CreateOrUpdateInstallation，其完全是幂等的，因此，如果需要，可随时重试。",
      "pos": [
        3322,
        3385
      ]
    },
    {
      "content": "针对 Amazon Kindle Fire，示例如下：",
      "pos": [
        3387,
        3414
      ]
    },
    {
      "content": "如果你希望进行更新：",
      "pos": [
        3582,
        3592
      ]
    },
    {
      "content": "对于高级方案，我们提供有部分更新功能，以允许仅修改安装对象的特定属性。基本上，部分更新是你针对安装对象运行 JSON Patch 操作的子集。",
      "pos": [
        3933,
        4004
      ]
    },
    {
      "content": "删除安装：",
      "pos": [
        4546,
        4551
      ]
    },
    {
      "content": "CreateOrUpdate、Patch 和 Delete 最终与 Get 一致。你请求的操作会在调用期间进入系统队列并在后台执行。请注意，Get 并不适用于主运行时方案，只适用于调试和故障排除，其会受到服务的严密限制。",
      "pos": [
        4616,
        4726
      ]
    },
    {
      "content": "安装的发送流与注册的一样。我们只是引入了一个选项以将通知锁定至特定安装 - 仅使用了标记 \"InstallationId:{desired-id}\"。对于上述情况，其如下所示：",
      "pos": [
        4728,
        4816
      ]
    },
    {
      "content": "为多个模板之一：",
      "pos": [
        4957,
        4965
      ]
    },
    {
      "content": "计划通知（适用于标准层）",
      "pos": [
        5227,
        5239
      ]
    },
    {
      "content": "与常规发送相同，但多了一个参数 - scheduledTime，表示通知应传递的时间。服务接受现在 + 5 分钟与现在 + 7 天之间的任何时间点。",
      "pos": [
        5241,
        5315
      ]
    },
    {
      "content": "计划 Windows 本机通知：",
      "pos": [
        5319,
        5335
      ]
    },
    {
      "content": "导入/导出（可用于标准层）",
      "pos": [
        5537,
        5550
      ]
    },
    {
      "content": "有时需要针对注册执行批量操作。通常这是为了与另一个系统集成，或只是一个大规模修复以更新标记。如果涉及到数以千计的注册，强烈不建议使用 Get/Update 流。导入/导出功能专门针对以下方案设计。基本上，你会在存储帐户下提供对一些 BLOB 容器的访问权限作为传入数据的源和输出的位置。",
      "pos": [
        5551,
        5694
      ]
    },
    {
      "content": "提交导出作业：",
      "pos": [
        5698,
        5705
      ]
    },
    {
      "content": "提交导入作业：",
      "pos": [
        5944,
        5951
      ]
    },
    {
      "content": "等待直到作业完成：",
      "pos": [
        6258,
        6267
      ]
    },
    {
      "content": "获取所有作业：",
      "pos": [
        6477,
        6484
      ]
    },
    {
      "content": "使用 SAS 签名的 URI：",
      "pos": [
        6560,
        6575
      ]
    },
    {
      "content": "这是某些 BLOB 文件或 BLOB 容器的 URL，，加上一组参数（例如权限和到期日期），再加上使用帐户的 SAS 密钥生成的所有这些内容的签名。Azure 存储 Java SDK 具有丰富的功能，包括创建这种类型的 URI。作为简单的替代，你可以考虑使用 ImportExportE2E 测试类（来自 github 位置），其具有非常基本、精简的签名算法。",
      "pos": [
        6578,
        6758
      ]
    },
    {
      "content": "发送通知",
      "pos": [
        6763,
        6767
      ]
    },
    {
      "content": "通知对象只有带有标头的正文，一些实用工具方法可帮助你构建本机和模板通知对象。",
      "pos": [
        6768,
        6806
      ]
    },
    {
      "content": "Windows 应用商店和 Windows Phone 8.1（非 Silverlight）",
      "pos": [
        6812,
        6858
      ]
    },
    {
      "pos": [
        6866,
        7095
      ],
      "content": "String toast = \"<toast><visual><binding template=\\\"ToastText01\\\"><text id=\\\"1\\\">Hello from Java!</text></binding></visual></toast>\";\n  Notification n = Notification.createWindowsNotification(toast);\n  hub.sendNotification(n);",
      "leadings": [
        "",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "String toast = \"",
          "pos": [
            0,
            16
          ]
        },
        {
          "content": "&lt;binding template=\\\"ToastText01\\\"&gt;&lt;text id=\\\"1\\\"&gt;Hello from Java!",
          "pos": [
            31,
            96
          ]
        },
        {
          "content": "\";",
          "pos": [
            130,
            132
          ]
        },
        {
          "content": "Notification n = Notification.createWindowsNotification(toast);",
          "pos": [
            135,
            198
          ]
        },
        {
          "content": "hub.sendNotification(n);",
          "pos": [
            201,
            225
          ]
        }
      ]
    },
    {
      "content": "iOS",
      "pos": [
        7101,
        7104
      ]
    },
    {
      "pos": [
        7112,
        7267
      ],
      "content": "String alert = \"{\\\"aps\\\":{\\\"alert\\\":\\\"Hello from Java!\\\"}}\";\n  Notification n = Notification.createAppleNotification(alert);\n  hub.sendNotification(n);",
      "leadings": [
        "",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "String alert = \"{\\\"aps\\\":{\\\"alert\\\":\\\"Hello from Java!\\\"}}\";",
          "pos": [
            0,
            60
          ]
        },
        {
          "content": "Notification n = Notification.createAppleNotification(alert);",
          "pos": [
            63,
            124
          ]
        },
        {
          "content": "hub.sendNotification(n);",
          "pos": [
            127,
            151
          ]
        }
      ]
    },
    {
      "content": "Android",
      "pos": [
        7273,
        7280
      ]
    },
    {
      "content": "Windows Phone 8.0 和 8.1 Silverlight",
      "pos": [
        7462,
        7497
      ]
    },
    {
      "pos": [
        7505,
        7900
      ],
      "content": "String toast = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n              \"<wp:Notification xmlns:wp=\\\"WPNotification\\\">\" +\n                 \"<wp:Toast>\" +\n                      \"<wp:Text1>Hello from Java!</wp:Text1>\" +\n                 \"</wp:Toast> \" +\n              \"</wp:Notification>\";\n  Notification n = Notification.createMpnsNotification(toast);\n  hub.sendNotification(n);",
      "leadings": [
        "",
        "  ",
        "  ",
        "  ",
        "  ",
        "  ",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "String toast = \"",
          "pos": [
            0,
            16
          ]
        },
        {
          "content": "\" +",
          "pos": [
            58,
            61
          ]
        },
        {
          "content": "\"&lt;wp:Notification xmlns:wp=\\\"WPNotification\\\"&gt;\" +",
          "pos": [
            76,
            125
          ]
        },
        {
          "content": "\"&lt;wp:Toast&gt;\" +",
          "pos": [
            143,
            157
          ]
        },
        {
          "content": "\"&lt;wp:Text1&gt;Hello from Java!&lt;/wp:Text1&gt;\" +",
          "pos": [
            180,
            221
          ]
        },
        {
          "content": "\"&lt;/wp:Toast&gt; \" +",
          "pos": [
            239,
            255
          ]
        },
        {
          "content": "\"&lt;/wp:Notification&gt;\";",
          "pos": [
            270,
            291
          ]
        },
        {
          "content": "Notification n = Notification.createMpnsNotification(toast);",
          "pos": [
            294,
            354
          ]
        },
        {
          "content": "hub.sendNotification(n);",
          "pos": [
            357,
            381
          ]
        }
      ]
    },
    {
      "content": "Kindle Fire",
      "pos": [
        7906,
        7917
      ]
    },
    {
      "content": "发送到标记",
      "pos": [
        8099,
        8104
      ]
    },
    {
      "content": "发送到标记表达式",
      "pos": [
        8252,
        8260
      ]
    },
    {
      "content": "发送模板通知",
      "pos": [
        8318,
        8324
      ]
    },
    {
      "content": "运行 Java 代码，现在应该生成显示在目标设备上的通知。",
      "pos": [
        8567,
        8596
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"next-steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤",
      "pos": [
        8601,
        8630
      ]
    },
    {
      "content": "在本主题中，我们介绍了如何为通知中心创建简单的 Java REST 客户端。从这里你可以：",
      "pos": [
        8631,
        8676
      ]
    },
    {
      "pos": [
        8680,
        8711
      ],
      "content": "下载完整的 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Java SDK]</ept>，其中包含整个 SDK 代码。"
    },
    {
      "content": "播放示例：",
      "pos": [
        8715,
        8720
      ]
    },
    {
      "content": "通知中心入门",
      "pos": [
        8728,
        8734
      ]
    },
    {
      "content": "发送突发新闻",
      "pos": [
        8743,
        8749
      ]
    },
    {
      "content": "发送当地的突发新闻",
      "pos": [
        8758,
        8767
      ]
    },
    {
      "content": "发送通知到经身份验证的用户",
      "pos": [
        8776,
        8789
      ]
    },
    {
      "content": "发送跨平台通知到经身份验证的用户",
      "pos": [
        8798,
        8814
      ]
    }
  ],
  "content": "\n<properties \n    pageTitle=\"如何结合使用通知中心与 Java\" \n    description=\"了解如何从 Java 后端使用 Azure 通知中心。\" \n    services=\"notification-hubs\" \n    documentationCenter=\"\" \n    authors=\"ysxu\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags       \n    ms.service=\"notification-hubs\" \n        ms.date=\"11/01/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 如何通过 Java 使用通知中心\n[AZURE.INCLUDE [notification-hubs-backend-how-to-selector](../includes/notification-hubs-backend-how-to-selector.md)]\n        \n本主题将向你介绍完全受支持的全新官方 Azure 通知中心 Java SDK 的主要功能。\n这是一个开源项目，你可以在 [Java SDK] 查看完整的 SDK 代码。\n\n通常情况下，如 MSDN 主题[通知中心 REST API](http://msdn.microsoft.com/zh-cn/library/dn223264.aspx) 中所述，你可以使用通知中心 REST 接口从 Java/PHP/Python/Ruby 后端访问所有通知中心功能。此 Java SDK 在以 Java 形式表示的 REST 接口上提供瘦包装器。\n\nSDK 当前支持：\n\n- 通知中心上的 CRUD \n- 注册上的 CRUD\n- 安装管理\n- 导入/导出注册\n- 常规发送\n- 计划发送\n- 通过 Java NIO 的异步操作\n- 支持的平台：APNS (iOS)、GCM (Android)、WNS（Windows 应用商店应用）、MPNS (Windows Phone)、ADM (Amazon Kindle Fire)、百度（没有 Google 服务的 Android） \n\n## SDK 用法\n\n### 编译和生成\n\n使用 [Maven]\n\n生成：\n\n    mvn package\n\n## 代码\n\n### 通知中心 CRUD\n\n**创建命名空间管理器：**\n    \n    NamespaceManager namespaceManager = new NamespaceManager(\"connection string\")\n\n**创建通知中心：**\n    \n    NotificationHubDescription hub = new NotificationHubDescription(\"hubname\");\n    hub.setWindowsCredential(new WindowsCredential(\"sid\",\"key\"));\n    hub = namespaceManager.createNotificationHub(hub);\n    \n 或者\n\n    hub = new NotificationHub(\"connection string\", \"hubname\");\n\n**获取通知中心：**\n    \n    hub = namespaceManager.getNotificationHub(\"hubname\");\n\n**更新通知中心：**\n    \n    hub.setMpnsCredential(new MpnsCredential(\"mpnscert\", \"mpnskey\"));\n    hub = namespaceManager.updateNotificationHub(hub);\n\n**删除通知中心：**\n    \n    namespaceManager.deleteNotificationHub(\"hubname\");\n\n### 注册 CRUD\n**创建通知中心客户端：**\n\n    hub = new NotificationHub(\"connection string\", \"hubname\");\n\n**创建 Windows 注册：**\n\n    WindowsRegistration reg = new WindowsRegistration(new URI(CHANNELURI));\n    reg.getTags().add(\"myTag\");\n    reg.getTags().add(\"myOtherTag\");    \n    hub.createRegistration(reg);\n\n**创建 iOS 注册：**\n\n    AppleRegistration reg = new AppleRegistration(DEVICETOKEN);\n    reg.getTags().add(\"myTag\");\n    reg.getTags().add(\"myOtherTag\");\n    hub.createRegistration(reg);\n\n同样，可以针对 Android (GCM)、Windows Phone (MPNS) 和 Kindle Fire (ADM) 创建注册。\n\n**创建模板注册：**\n\n    WindowsTemplateRegistration reg = new WindowsTemplateRegistration(new URI(CHANNELURI), WNSBODYTEMPLATE);\n    reg.getHeaders().put(\"X-WNS-Type\", \"wns/toast\");\n    hub.createRegistration(reg);\n\n**使用“创建 registrationid + upsert 模式”创建注册**\n\n如果在设备上存储注册 ID，请删除重复项以防出现任何响应丢失：\n\n    String id = hub.createRegistrationId();\n    WindowsRegistration reg = new WindowsRegistration(id, new URI(CHANNELURI));\n    hub.upsertRegistration(reg);\n\n**更新注册：**\n    \n    hub.updateRegistration(reg);\n\n**删除注册：**\n    \n    hub.deleteRegistration(regid);\n\n**查询注册：**\n\n*   **获取单个注册：**\n    \n        hub.getRegistration(regid);\n    \n*   **获取中心的所有注册：**\n    \n        hub.getRegistrations();\n    \n*   **获取具有标记的注册：**\n    \n        hub.getRegistrationsByTag(\"myTag\");\n    \n*   **按渠道获取注册：**\n    \n        hub.getRegistrationsByChannel(\"devicetoken\");\n\n所有集合查询都支持 $top 和继续标记。\n\n### 安装 API 用法\n安装 API 是一种注册管理的替代机制。其现在可以使用“单个”安装对象，而不是维护着多个注册，后者不但工作量较大，而且容易出错且效率低下。\n安装包含你所需的一切：推送通道（设备标记）、标记、模板、辅助磁贴（用于 WNS 和 APNS）。你不必再调用该服务以获取 ID - 只需生成 GUID 或任何其他标识符，将其保存在设备上并与推送通道（设备标记）一起发送到你的后端即可。\n在后端，你应当只做一个调用：CreateOrUpdateInstallation，其完全是幂等的，因此，如果需要，可随时重试。\n\n针对 Amazon Kindle Fire，示例如下：\n\n    Installation installation = new Installation(\"installation-id\", NotificationPlatform.Adm, \"adm-push-channel\");\n    hub.createOrUpdateInstallation(installation);\n\n如果你希望进行更新：\n\n    installation.addTag(\"foo\");\n    installation.addTemplate(\"template1\", new InstallationTemplate(\"{\\\"data\\\":{\\\"key1\\\":\\\"$(value1)\\\"}}\",\"tag-for-template1\"));\n    installation.addTemplate(\"template2\", new InstallationTemplate(\"{\\\"data\\\":{\\\"key2\\\":\\\"$(value2)\\\"}}\",\"tag-for-template2\"));\n    hub.createOrUpdateInstallation(installation);\n\n对于高级方案，我们提供有部分更新功能，以允许仅修改安装对象的特定属性。基本上，部分更新是你针对安装对象运行 JSON Patch 操作的子集。\n\n    PartialUpdateOperation addChannel = new PartialUpdateOperation(UpdateOperationType.Add, \"/pushChannel\", \"adm-push-channel2\");\n    PartialUpdateOperation addTag = new PartialUpdateOperation(UpdateOperationType.Add, \"/tags\", \"bar\");\n    PartialUpdateOperation replaceTemplate = new PartialUpdateOperation(UpdateOperationType.Replace, \"/templates/template1\", new InstallationTemplate(\"{\\\"data\\\":{\\\"key3\\\":\\\"$(value3)\\\"}}\",\"tag-for-template1\")).toJson());\n    hub.patchInstallation(\"installation-id\", addChannel, addTag, replaceTemplate);\n\n删除安装：\n\n    hub.deleteInstallation(installation.getInstallationId());\n\nCreateOrUpdate、Patch 和 Delete 最终与 Get 一致。你请求的操作会在调用期间进入系统队列并在后台执行。请注意，Get 并不适用于主运行时方案，只适用于调试和故障排除，其会受到服务的严密限制。\n\n安装的发送流与注册的一样。我们只是引入了一个选项以将通知锁定至特定安装 - 仅使用了标记 \"InstallationId:{desired-id}\"。对于上述情况，其如下所示：\n\n    Notification n = Notification.createWindowsNotification(\"WNS body\");\n    hub.sendNotification(n, \"InstallationId:{installation-id}\");\n\n为多个模板之一：\n\n    Map<String, String> prop =  new HashMap<String, String>();\n    prop.put(\"value3\", \"some value\");\n    Notification n = Notification.createTemplateNotification(prop);\n    hub.sendNotification(n, \"InstallationId:{installation-id} && tag-for-template1\");\n\n### 计划通知（适用于标准层）\n\n与常规发送相同，但多了一个参数 - scheduledTime，表示通知应传递的时间。服务接受现在 + 5 分钟与现在 + 7 天之间的任何时间点。\n\n**计划 Windows 本机通知：**\n\n    Calendar c = Calendar.getInstance();\n    c.add(Calendar.DATE, 1);    \n    Notification n = Notification.createWindowsNotification(\"WNS body\");\n    hub.scheduleNotification(n, c.getTime());\n\n### 导入/导出（可用于标准层）\n有时需要针对注册执行批量操作。通常这是为了与另一个系统集成，或只是一个大规模修复以更新标记。如果涉及到数以千计的注册，强烈不建议使用 Get/Update 流。导入/导出功能专门针对以下方案设计。基本上，你会在存储帐户下提供对一些 BLOB 容器的访问权限作为传入数据的源和输出的位置。\n\n**提交导出作业：**\n\n    NotificationHubJob job = new NotificationHubJob();\n    job.setJobType(NotificationHubJobType.ExportRegistrations);\n    job.setOutputContainerUri(\"container uri with SAS signature\");\n    job = hub.submitNotificationHubJob(job);\n\n\n**提交导入作业：**\n\n    NotificationHubJob job = new NotificationHubJob();\n    job.setJobType(NotificationHubJobType.ImportCreateRegistrations);\n    job.setImportFileUri(\"input file uri with SAS signature\");\n    job.setOutputContainerUri(\"container uri with SAS signature\");\n    job = hub.submitNotificationHubJob(job);\n\n**等待直到作业完成：**\n\n    while(true){\n        Thread.sleep(1000);\n        job = hub.getNotificationHubJob(job.getJobId());\n        if(job.getJobStatus() == NotificationHubJobStatus.Completed)\n            break;\n    }       \n\n**获取所有作业：**\n\n    List<NotificationHubJob> jobs = hub.getAllNotificationHubJobs();\n\n**使用 SAS 签名的 URI：**\n这是某些 BLOB 文件或 BLOB 容器的 URL，，加上一组参数（例如权限和到期日期），再加上使用帐户的 SAS 密钥生成的所有这些内容的签名。Azure 存储 Java SDK 具有丰富的功能，包括创建这种类型的 URI。作为简单的替代，你可以考虑使用 ImportExportE2E 测试类（来自 github 位置），其具有非常基本、精简的签名算法。\n\n###发送通知\n通知对象只有带有标头的正文，一些实用工具方法可帮助你构建本机和模板通知对象。\n\n* **Windows 应用商店和 Windows Phone 8.1（非 Silverlight）**\n\n    String toast = \"<toast><visual><binding template=\\\"ToastText01\\\"><text id=\\\"1\\\">Hello from Java!</text></binding></visual></toast>\";\n    Notification n = Notification.createWindowsNotification(toast);\n    hub.sendNotification(n);\n\n* **iOS**\n\n    String alert = \"{\\\"aps\\\":{\\\"alert\\\":\\\"Hello from Java!\\\"}}\";\n    Notification n = Notification.createAppleNotification(alert);\n    hub.sendNotification(n);\n\n* **Android**\n\n        String message = \"{\\\"data\\\":{\\\"msg\\\":\\\"Hello from Java!\\\"}}\";\n        Notification n = Notification.createGcmNotification(message);\n        hub.sendNotification(n);\n\n* **Windows Phone 8.0 和 8.1 Silverlight**\n\n    String toast = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n                \"<wp:Notification xmlns:wp=\\\"WPNotification\\\">\" +\n                   \"<wp:Toast>\" +\n                        \"<wp:Text1>Hello from Java!</wp:Text1>\" +\n                   \"</wp:Toast> \" +\n                \"</wp:Notification>\";\n    Notification n = Notification.createMpnsNotification(toast);\n    hub.sendNotification(n);\n\n* **Kindle Fire**\n\n        String message = \"{\\\"data\\\":{\\\"msg\\\":\\\"Hello from Java!\\\"}}\";\n        Notification n = Notification.createAdmNotification(message);\n        hub.sendNotification(n);\n\n* **发送到标记**\n\n        Set<String> tags = new HashSet<String>();\n        tags.add(\"boo\");\n        tags.add(\"foo\");\n        hub.sendNotification(n, tags);\n\n* **发送到标记表达式**\n\n        hub.sendNotification(n, \"foo && ! bar\");\n\n* **发送模板通知**\n\n        Map<String, String> prop =  new HashMap<String, String>();\n        prop.put(\"prop1\", \"v1\");\n        prop.put(\"prop2\", \"v2\");\n        Notification n = Notification.createTemplateNotification(prop);\n        hub.sendNotification(n);\n\n运行 Java 代码，现在应该生成显示在目标设备上的通知。\n\n\n##<a name=\"next-steps\"></a>后续步骤\n在本主题中，我们介绍了如何为通知中心创建简单的 Java REST 客户端。从这里你可以：\n\n* 下载完整的 [Java SDK]，其中包含整个 SDK 代码。 \n* 播放示例：\n    - [通知中心入门]\n    - [发送突发新闻]\n    - [发送当地的突发新闻]\n    - [发送通知到经身份验证的用户]\n    - [发送跨平台通知到经身份验证的用户]\n\n[Java SDK]: https://github.com/Azure/azure-notificationhubs-java-backend\n[Get started tutorial]: /documentation/articles/notification-hubs-ios-get-started\n[通知中心入门]: /documentation/articles/notification-hubs-windows-store-dotnet-get-started\n[发送突发新闻]: /documentation/articles/notification-hubs-windows-store-dotnet-send-breaking-news\n[发送当地的突发新闻]: /documentation/articles/notification-hubs-windows-store-dotnet-send-localized-breaking-news\n[发送通知到经身份验证的用户]: /documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-push-notifications-app-users\n[发送跨平台通知到经身份验证的用户]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-push-notifications-app-users\n[Maven]: http://maven.apache.org/\n \n\n<!---HONumber=Mooncake_1207_2015-->"
}