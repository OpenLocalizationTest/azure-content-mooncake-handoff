{
  "nodes": [
    {
      "pos": [
        1,
        301
      ],
      "content": "本节演示了如何从 .NET 控制台应用以及其他任何应用发送通知。如果你使用的是移动服务，请参阅<bpt id=\"p1\">[</bpt>推送入门<ept id=\"p1\">](/zh-cn/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-push/)</ept>教程。如果你使用的是 Java 或 PHP，请参阅<bpt id=\"p2\">[</bpt>如何从 Java/PHP 使用通知中心<ept id=\"p2\">](/zh-cn/documentation/articles/notification-hubs-java-backend-how-to/)</ept>。你可使用<bpt id=\"p3\">[</bpt><ept id=\"p3\">通知中心 REST 接口]</ept>通过任何后端发送通知。"
    },
    {
      "content": "以下代码可将通知发送到 Windows 应用商店、Windows Phone、iOS 和 Android 设备。",
      "pos": [
        303,
        359
      ]
    },
    {
      "pos": [
        361,
        410
      ],
      "content": "如果你在完成<bpt id=\"p1\">[</bpt>通知中心入门<ept id=\"p1\">][get-started]</ept>时创建了控制台应用程序，则跳过步骤 1-3。"
    },
    {
      "content": "在 Visual Studio 中创建新的 Visual C# 控制台应用程序：",
      "pos": [
        415,
        455
      ]
    },
    {
      "pos": [
        474,
        554
      ],
      "content": "在 Visual Studio 主菜单中，依次单击“工具”、“库程序包管理器”和“程序包管理器控制台”，然后在控制台窗口中键入以下命令并按 <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept>："
    },
    {
      "pos": [
        622,
        769
      ],
      "content": "这将使用 <ph id=\"ph1\">&lt;a href=\"http://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/\"&gt;</ph>Microsoft.Azure.Notification Hubs NuGet 包<ph id=\"ph2\">&lt;/a&gt;</ph>添加对 Azure 通知中心 SDK 的引用。"
    },
    {
      "pos": [
        774,
        807
      ],
      "content": "打开文件 Program.cs 并添加以下 <ph id=\"ph1\">`using`</ph> 语句："
    },
    {
      "pos": [
        861,
        897
      ],
      "content": "在 <ph id=\"ph1\">`Program`</ph> 类中，添加以下方法，或替换此方法（如果已存在）："
    },
    {
      "content": "此代码将针对字符串数组中的所有 6 个标记将通知发送到 Windows 应用商店、Windows Phone 和 iOS 设备。使用标记是为了确保设备仅接收注册类别的通知。",
      "pos": [
        3196,
        3282
      ]
    },
    {
      "pos": [
        3294,
        3389
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此后端代码支持 Windows 应用商店、Windows Phone、iOS 和 Android 客户端。发送方法将在尚未为特定客户端平台配置通知中心时返回错误响应。"
    },
    {
      "pos": [
        3394,
        3523
      ],
      "content": "在上面的代码中，将 <ph id=\"ph1\">`&lt;hub name&gt;`</ph> 和 <ph id=\"ph2\">`&lt;connection string with full access&gt;`</ph> 占位符替换为你的通知中心的名称和你之前获取的 <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">*</ept> 的连接字符串。"
    },
    {
      "pos": [
        3528,
        3548
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main<ept id=\"p1\">**</ept> 方法中添加以下行："
    }
  ],
  "content": "\n本节演示了如何从 .NET 控制台应用以及其他任何应用发送通知。如果你使用的是移动服务，请参阅[推送入门](/zh-cn/documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-get-started-push/)教程。如果你使用的是 Java 或 PHP，请参阅[如何从 Java/PHP 使用通知中心](/zh-cn/documentation/articles/notification-hubs-java-backend-how-to/)。你可使用[通知中心 REST 接口]通过任何后端发送通知。\n\n以下代码可将通知发送到 Windows 应用商店、Windows Phone、iOS 和 Android 设备。\n\n如果你在完成[通知中心入门][get-started]时创建了控制台应用程序，则跳过步骤 1-3。\n\n1. 在 Visual Studio 中创建新的 Visual C# 控制台应用程序： \n\n    ![][13]\n\n2. 在 Visual Studio 主菜单中，依次单击“工具”、“库程序包管理器”和“程序包管理器控制台”，然后在控制台窗口中键入以下命令并按 **Enter**：\n\n        Install-Package Microsoft.Azure.NotificationHubs\n    \n    这将使用 <a href=\"http://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/\">Microsoft.Azure.Notification Hubs NuGet 包</a>添加对 Azure 通知中心 SDK 的引用。\n\n3. 打开文件 Program.cs 并添加以下 `using` 语句：\n\n        using Microsoft.Azure.NotificationHubs;\n\n4. 在 `Program` 类中，添加以下方法，或替换此方法（如果已存在）：\n\n        private static async void SendNotificationAsync()\n        {\n            // Define the notification hub.\n            NotificationHubClient hub = \n                NotificationHubClient.CreateClientFromConnectionString(\n                    \"<connection string with full access>\", \"<hub name>\");\n        \n            // Create an array of breaking news categories.\n            var categories = new string[] { \"World\", \"Politics\", \"Business\", \n                \"Technology\", \"Science\", \"Sports\"};\n        \n            foreach (var category in categories)\n            {\n                try\n                {\n                    // Define a Windows Store toast.\n                    var wnsToast = \"<toast><visual><binding template=\\\"ToastText01\\\">\" \n                        + \"<text id=\\\"1\\\">Breaking \" + category + \" News!\" \n                        + \"</text></binding></visual></toast>\";         \n                    await hub.SendWindowsNativeNotificationAsync(wnsToast, category);\n\n                    // Define a Windows Phone toast.\n                    var mpnsToast =\n                        \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\" +\n                        \"<wp:Notification xmlns:wp=\\\"WPNotification\\\">\" +\n                            \"<wp:Toast>\" +\n                                \"<wp:Text1>Breaking \" + category + \" News!</wp:Text1>\" +\n                            \"</wp:Toast> \" +\n                        \"</wp:Notification>\";         \n                    await hub.SendMpnsNativeNotificationAsync(mpnsToast, category);\n\n                    // Define an iOS alert.\n                    var alert = \"{\\\"aps\\\":{\\\"alert\\\":\\\"Breaking \" + category + \" News!\\\"}}\";\n                    await hub.SendAppleNativeNotificationAsync(alert, category);\n\n                    // Define an Android notification.\n                    var notification = \"{\\\"data\\\":{\\\"msg\\\":\\\"Breaking \" + category + \" News!\\\"}}\";\n                    await hub.SendGcmNativeNotificationAsync(notification, category);\n                }\n                catch (ArgumentException)\n                {\n                    // An exception is raised when the notification hub hasn't been \n                    // registered for the iOS, Windows Store, or Windows Phone platform. \n                }\n            }\n         }\n\n    此代码将针对字符串数组中的所有 6 个标记将通知发送到 Windows 应用商店、Windows Phone 和 iOS 设备。使用标记是为了确保设备仅接收注册类别的通知。\n    \n    > [AZURE.NOTE]此后端代码支持 Windows 应用商店、Windows Phone、iOS 和 Android 客户端。发送方法将在尚未为特定客户端平台配置通知中心时返回错误响应。\n\n6. 在上面的代码中，将 `<hub name>` 和 `<connection string with full access>` 占位符替换为你的通知中心的名称和你之前获取的 *DefaultFullSharedAccessSignature* 的连接字符串。\n\n7. 在 **Main** 方法中添加以下行：\n\n         SendNotificationAsync();\n         Console.ReadLine();\n\n<!-- Anchors -->\n[通过控制台应用]: #console\n[通过移动服务]: #mobile-services\n[运行应用并生成通知]: #test-app\n\n<!-- Images. -->\n[13]: ./media/notification-hubs-back-end/notification-hub-create-console-app.png\n\n[15]: ./media/notification-hubs-back-end/notification-hub-scheduler1.png\n[16]: ./media/notification-hubs-back-end/notification-hub-scheduler2.png\n\n<!-- URLs. -->\n[get-started]: /documentation/articles/notification-hubs-windows-store-dotnet-get-started/\n[通知中心 REST 接口]: http://msdn.microsoft.com/zh-cn/library/windowsazure/dn223264.aspx\n\n<!---HONumber=82-->"
}