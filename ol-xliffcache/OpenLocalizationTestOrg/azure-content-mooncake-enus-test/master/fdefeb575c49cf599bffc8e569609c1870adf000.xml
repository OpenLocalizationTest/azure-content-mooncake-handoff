{
  "nodes": [
    {
      "content": "弹性数据库作业入门",
      "pos": [
        27,
        36
      ]
    },
    {
      "content": "如何使用弹性数据库作业",
      "pos": [
        55,
        66
      ]
    },
    {
      "content": "弹性数据库作业入门",
      "pos": [
        267,
        276
      ]
    },
    {
      "pos": [
        278,
        431
      ],
      "content": "Azure SQL 数据库的弹性数据库作业（预览版）可让你跨多个数据库可靠执行 T-SQL 脚本，同时自动重试并提供最终完成保证。有关弹性数据库作业功能的详细信息，请参阅<bpt id=\"p1\">[</bpt>功能概述页<ept id=\"p1\">](/documentation/articles/sql-database-elastic-jobs-overview)</ept>。"
    },
    {
      "pos": [
        433,
        554
      ],
      "content": "本主题对<bpt id=\"p1\">[</bpt>弹性数据库工具入门<ept id=\"p1\">](/documentation/articles/sql-database-elastic-scale-get-started)</ept>中的示例做了延伸。完成本主题后，你将学会如何创建和管理用于管理一组相关数据库的作业。"
    },
    {
      "content": "先决条件",
      "pos": [
        559,
        563
      ]
    },
    {
      "pos": [
        565,
        648
      ],
      "content": "下载并运行<bpt id=\"p1\">[</bpt>弹性数据库工具示例入门<ept id=\"p1\">](/documentation/articles/sql-database-elastic-scale-get-started)</ept>。"
    },
    {
      "content": "使用示例应用程序创建分片映射管理器",
      "pos": [
        653,
        670
      ]
    },
    {
      "content": "在此处，你将创建分片映射管理器以及多个分片，然后将数据插入分片。如果你的分片中设置了分片数据，则你可以跳过下面的步骤，直接转到下一部分。",
      "pos": [
        672,
        740
      ]
    },
    {
      "pos": [
        745,
        926
      ],
      "content": "生成并运行<bpt id=\"p1\">**</bpt>弹性数据库工具入门<ept id=\"p1\">**</ept>示例应用程序。一直执行到<bpt id=\"p2\">[</bpt>下载和运行示例应用<ept id=\"p2\">](/documentation/articles/sql-database-elastic-scale-get-started/#Getting-started-with-elastic-database-tools)</ept>部分中的步骤 7。在步骤 7 结束时，你将看到以下命令提示符："
    },
    {
      "content": "命令提示符",
      "pos": [
        934,
        939
      ]
    },
    {
      "pos": [
        949,
        1044
      ],
      "content": "在命令窗口中键入“1”，然后按 <bpt id=\"p1\">**</bpt>Enter<ept id=\"p1\">**</ept>。这会创建分片映射管理器，并将两个分片添加到服务器。然后键入“3”并按 <bpt id=\"p2\">**</bpt>Enter<ept id=\"p2\">**</ept>；重复该操作四次。这会在你的分片中插入示例数据行。"
    },
    {
      "pos": [
        1050,
        1114
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>应会在 v12 服务器中显示三个新的数据库："
    },
    {
      "content": "Visual Studio 确认",
      "pos": [
        1122,
        1138
      ]
    },
    {
      "content": "现在，我们将创建一个自定义数据库集合，用于反映分片映射中的所有数据库。这样，我们便可以创建和执行用于跨分片添加新表的作业。",
      "pos": [
        1148,
        1209
      ]
    },
    {
      "pos": [
        1211,
        1352
      ],
      "content": "我们通常会使用 <bpt id=\"p1\">**</bpt>New-AzureSqlJobTarget<ept id=\"p1\">**</ept> cmdlet 来创建分片映射目标。必须将分片映射管理器数据库设置为数据库目标，然后将特定分片映射指定为目标。而我们的做法是枚举服务器中的所有数据库，并将这些数据库添加到 master 数据库除外的其他新自定义集合。"
    },
    {
      "content": "创建自定义集合并将服务器中的所有数据库添加到 master 除外的自定义集合目标。",
      "pos": [
        1356,
        1397
      ]
    },
    {
      "content": "创建 T-SQL 脚本用于跨数据库执行",
      "pos": [
        3108,
        3127
      ]
    },
    {
      "content": "创建作业以跨自定义数据库组执行脚本",
      "pos": [
        3591,
        3608
      ]
    },
    {
      "content": "执行作业",
      "pos": [
        3988,
        3992
      ]
    },
    {
      "content": "以下 PowerShell 脚本可以用于执行现有的作业：",
      "pos": [
        3995,
        4023
      ]
    },
    {
      "content": "更新以下变量以反映要执行的所需作业名称：",
      "pos": [
        4025,
        4045
      ]
    },
    {
      "content": "检索单个作业执行的状态",
      "pos": [
        4187,
        4198
      ]
    },
    {
      "pos": [
        4200,
        4309
      ],
      "content": "使用相同 <bpt id=\"p1\">**</bpt>Get-AzureSqlJobExecution<ept id=\"p1\">**</ept> cmdlet 搭配 <bpt id=\"p2\">**</bpt>IncludeChildren<ept id=\"p2\">**</ept> 参数，以查看子作业执行的状态，还就是针对作为作业目标的每个数据库的每个作业执行的特定状态。"
    },
    {
      "content": "查看多个作业执行的状态",
      "pos": [
        4486,
        4497
      ]
    },
    {
      "pos": [
        4499,
        4609
      ],
      "content": "<bpt id=\"p1\">**</bpt>Get-AzureSqlJobExecution<ept id=\"p1\">**</ept> cmdlet 具有多个可选参数，用于显示多个作业执行（已通过提供的参数进行筛选）。下面演示了 Get-AzureSqlJobExecution 的一些可能的用法："
    },
    {
      "content": "检索所有处于活动状态的顶级作业执行：",
      "pos": [
        4611,
        4629
      ]
    },
    {
      "content": "检索所有顶级作业执行，包括非活动的作业执行：",
      "pos": [
        4661,
        4683
      ]
    },
    {
      "content": "检索已提供作业执行 ID 的所有子作业执行，包括非活动的作业执行：",
      "pos": [
        4732,
        4765
      ]
    },
    {
      "content": "检索使用计划/作业组合创建的所有作业执行，包括非活动的作业：",
      "pos": [
        4940,
        4970
      ]
    },
    {
      "content": "检索以指定的分片映射为目标的所有作业，包括非活动的作业：",
      "pos": [
        5131,
        5159
      ]
    },
    {
      "content": "检索以指定的自定义集合为目标的所有作业，包括非活动的作业：",
      "pos": [
        5544,
        5573
      ]
    },
    {
      "content": "检索特定作业执行内的作业任务执行的列表：",
      "pos": [
        5785,
        5805
      ]
    },
    {
      "content": "检索作业任务执行详细信息：",
      "pos": [
        5974,
        5987
      ]
    },
    {
      "content": "以下 PowerShell 脚本可用于查看作业任务执行的详细信息，在调试执行失败时特别有用。",
      "pos": [
        5989,
        6035
      ]
    },
    {
      "content": "检索作业任务执行内的失败",
      "pos": [
        6221,
        6233
      ]
    },
    {
      "pos": [
        6235,
        6359
      ],
      "content": "JobTaskExecution 对象包括任务生命周期的属性以及 Message 属性。如果作业任务执行失败，生命周期属性将设为 <bpt id=\"p1\">*</bpt>Failed<ept id=\"p1\">*</ept>，且消息属性将设为生成的异常消息及其堆栈。如果作业不成功，必须查看给定操作不成功的作业任务的详细信息。"
    },
    {
      "content": "等待作业执行完成",
      "pos": [
        6695,
        6703
      ]
    },
    {
      "content": "以下 PowerShell 脚本可用于等待作业任务完成：",
      "pos": [
        6705,
        6733
      ]
    },
    {
      "content": "创建自定义执行策略",
      "pos": [
        6845,
        6854
      ]
    },
    {
      "content": "弹性数据库作业支持创建可在启动作业时应用的自定义执行策略。",
      "pos": [
        6856,
        6885
      ]
    },
    {
      "content": "执行策略当前允许定义：",
      "pos": [
        6889,
        6900
      ]
    },
    {
      "content": "名称：执行策略的标识符。",
      "pos": [
        6904,
        6916
      ]
    },
    {
      "content": "作业超时：弹性数据库作业取消作业之前的总时间。",
      "pos": [
        6919,
        6942
      ]
    },
    {
      "content": "初始重试间隔：第一次重试之前等待的间隔。",
      "pos": [
        6945,
        6965
      ]
    },
    {
      "content": "最大重试间隔：要使用的重试间隔上限。",
      "pos": [
        6968,
        6986
      ]
    },
    {
      "content": "重试间隔回退系数：用于计算每两次重试的下一个间隔系数。使用以下公式：(初始重试间隔) * Math.pow((间隔回退指数),(重试次数) - 2)。",
      "pos": [
        6989,
        7064
      ]
    },
    {
      "content": "最大尝试次数：重试在作业中执行的最大次数。",
      "pos": [
        7068,
        7089
      ]
    },
    {
      "content": "默认的执行策略使用以下值：",
      "pos": [
        7091,
        7104
      ]
    },
    {
      "content": "名称：默认执行策略",
      "pos": [
        7108,
        7117
      ]
    },
    {
      "content": "作业超时：1 周",
      "pos": [
        7120,
        7128
      ]
    },
    {
      "content": "初始重试间隔：100 毫秒",
      "pos": [
        7131,
        7144
      ]
    },
    {
      "content": "最大重试间隔：30 分钟",
      "pos": [
        7147,
        7159
      ]
    },
    {
      "content": "重试间隔系数：2",
      "pos": [
        7162,
        7170
      ]
    },
    {
      "content": "最大尝试次数：2,147,483,647",
      "pos": [
        7173,
        7193
      ]
    },
    {
      "content": "创建所需的执行策略：",
      "pos": [
        7195,
        7205
      ]
    },
    {
      "content": "更新自定义执行策略",
      "pos": [
        7828,
        7837
      ]
    },
    {
      "content": "更新要更新的所需执行策略：",
      "pos": [
        7839,
        7852
      ]
    },
    {
      "content": "取消作业",
      "pos": [
        8489,
        8493
      ]
    },
    {
      "content": "弹性数据库作业支持作业取消请求。如果弹性数据库作业检测到当前正在执行作业的取消请求，它将尝试停止作业。",
      "pos": [
        8495,
        8546
      ]
    },
    {
      "content": "弹性数据库作业可通过两种不同的方式执行取消：",
      "pos": [
        8548,
        8570
      ]
    },
    {
      "content": "取消当前正在执行的任务：如果在任务正在执行时检测到取消，将在当前正在执行的任务层面尝试取消。例如：当尝试取消时，如果有某个长时间运行的查询当前正在执行，将尝试取消该查询。",
      "pos": [
        8575,
        8660
      ]
    },
    {
      "content": "取消任务重试：如果控制线程在启动任务执行之前检测到取消，控制线程将避免启动该任务，并将请求声明为已取消。",
      "pos": [
        8664,
        8716
      ]
    },
    {
      "content": "如果针对父作业请求了作业取消，则会对父作业及其所有子作业执行取消请求。",
      "pos": [
        8718,
        8753
      ]
    },
    {
      "pos": [
        8756,
        8832
      ],
      "content": "若要提交取消请求，请使用 <bpt id=\"p1\">**</bpt>Stop-AzureSqlJobExecution<ept id=\"p1\">**</ept> cmdlet 并设置 <bpt id=\"p2\">**</bpt>JobExecutionId<ept id=\"p2\">**</ept> 参数。"
    },
    {
      "content": "根据名称和作业的历史记录删除作业",
      "pos": [
        8943,
        8959
      ]
    },
    {
      "content": "弹性数据库作业支持异步删除作业。可将某个作业标记为待删除，系统将在作业的作业执行都已完成后，删除该作业及其所有作业历史记录。系统不会自动取消处于活动状态的作业执行。",
      "pos": [
        8961,
        9043
      ]
    },
    {
      "content": "必须调用 Stop-AzureSqlJobExecution 来取消处于活动状态的作业执行。",
      "pos": [
        9045,
        9091
      ]
    },
    {
      "pos": [
        9093,
        9155
      ],
      "content": "若要触发作业删除，请使用 <bpt id=\"p1\">**</bpt>Remove-AzureSqlJob<ept id=\"p1\">**</ept> cmdlet 并设置 <bpt id=\"p2\">**</bpt>JobName<ept id=\"p2\">**</ept> 参数。"
    },
    {
      "content": "创建自定义数据库目标",
      "pos": [
        9231,
        9241
      ]
    },
    {
      "pos": [
        9242,
        9360
      ],
      "content": "自定义数据库目标可以在弹性数据库作业中定义，可用于直接执行或包含在自定义数据库组内。由于<bpt id=\"p1\">**</bpt>弹性数据库池<ept id=\"p1\">**</ept>尚不能通过 PowerShell API 直接支持，你只需创建自定义数据库目标和自定义数据库集合目标，其中包含池中的所有数据库。"
    },
    {
      "content": "设置以下变量以反映所需的数据库信息：",
      "pos": [
        9362,
        9380
      ]
    },
    {
      "content": "创建自定义数据库集合目标",
      "pos": [
        9561,
        9573
      ]
    },
    {
      "content": "可以自定义数据库集合目标，以跨多个已定义数据库目标执行。创建数据库组之后，数据库可与自定义集合目标相关联。",
      "pos": [
        9574,
        9627
      ]
    },
    {
      "content": "设置以下变量以反映所需的自定义集合目标配置：",
      "pos": [
        9629,
        9651
      ]
    },
    {
      "content": "将数据库添加到自定义数据库集合目标",
      "pos": [
        9793,
        9810
      ]
    },
    {
      "content": "数据库目标可以与自定义数据库集合目标相关联，以创建数据库组。每当创建以自定义数据库集合目标为目标的作业时，都会在执行时扩展为以关联到该组的数据库为目标。",
      "pos": [
        9812,
        9888
      ]
    },
    {
      "content": "将所需的数据库添加到特定的自定义集合：",
      "pos": [
        9890,
        9909
      ]
    },
    {
      "content": "查看自定义数据库集合目标内的数据库",
      "pos": [
        10198,
        10215
      ]
    },
    {
      "pos": [
        10217,
        10272
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>Get-AzureSqlJobTarget<ept id=\"p1\">**</ept> cmdlet 检索自定义数据库集合目标内的子数据库。"
    },
    {
      "content": "创建作业以跨自定义数据库集合目标执行脚本",
      "pos": [
        10530,
        10550
      ]
    },
    {
      "pos": [
        10552,
        10690
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>New-AzureSqlJob<ept id=\"p1\">**</ept> cmdlet 可以针对自定义数据库集合目标定义的数据库组创建作业。弹性数据库作业将作业扩展为多个子作业（每个子作业映射到与自定义数据库集合目标关联的数据库），并确保脚本针对每个数据库执行。同样，重要的是脚本具有幂等处理重试的弹性。"
    },
    {
      "content": "跨数据库收集数据",
      "pos": [
        11086,
        11094
      ]
    },
    {
      "pos": [
        11096,
        11210
      ],
      "content": "<bpt id=\"p1\">**</bpt>弹性数据库作业<ept id=\"p1\">**</ept>支持跨数据库组执行查询，并将结果发送到指定的数据库表。可以在事实之后查询数据表，以查看每个数据库的查询结果。这提供了跨多个数据库执行查询的异步机制。例如其中一个数据库暂时不可用的失败案例是通过重试自动处理。"
    },
    {
      "content": "如果不存在与返回的结果集架构相符的指定目标表，则自动创建该表。如果脚本执行返回多个结果集，弹性数据库作业只将第一个结果集发送到提供的目标表。",
      "pos": [
        11212,
        11282
      ]
    },
    {
      "content": "以下 PowerShell 脚本可用于执行脚本，将其结果收集到指定的表。此脚本假设已创建一个可输出单个结果集的 T-SQL 脚本，并且已创建自定义的数据库集合目标。",
      "pos": [
        11284,
        11366
      ]
    },
    {
      "content": "设置以下项以反映所需的脚本、凭据和执行目标：",
      "pos": [
        11368,
        11390
      ]
    },
    {
      "content": "创建和启动用于数据库收集方案的作业",
      "pos": [
        11950,
        11967
      ]
    },
    {
      "content": "使用作业触发器创建作业执行计划",
      "pos": [
        12513,
        12528
      ]
    },
    {
      "content": "以下 PowerShell 脚本可用于创建重复计划。此脚本使用一分钟间隔，但是 New-AzureSqlJobSchedule 也支持 -DayInterval、-HourInterval、-MonthInterval 和 -WeekInterval 参数。可以通过传递 -OneTime 来创建仅执行一次的计划。",
      "pos": [
        12530,
        12687
      ]
    },
    {
      "content": "创建新计划：",
      "pos": [
        12689,
        12695
      ]
    },
    {
      "content": "创建作业触发器，使作业按时间计划执行",
      "pos": [
        12961,
        12979
      ]
    },
    {
      "content": "可以定义作业触发器，使作业根据时间计划执行。以下 PowerShell 脚本可用于创建作业触发器。",
      "pos": [
        12981,
        13030
      ]
    },
    {
      "content": "设置以下变量以对应于所需的作业和计划：",
      "pos": [
        13032,
        13051
      ]
    },
    {
      "content": "删除计划的关联，以停止按计划执行作业",
      "pos": [
        13240,
        13258
      ]
    },
    {
      "pos": [
        13260,
        13348
      ],
      "content": "若要通过作业触发器中断作业重复执行，可以删除作业触发器。使用 <bpt id=\"p1\">**</bpt>Remove-AzureSqlJobTrigger<ept id=\"p1\">**</ept> cmdlet 删除作业触发器，以停止作业根据计划执行。"
    },
    {
      "content": "将弹性数据库查询结果导入 Excel",
      "pos": [
        13500,
        13518
      ]
    },
    {
      "content": "你可以将查询结果导入到 Excel 文件。",
      "pos": [
        13521,
        13542
      ]
    },
    {
      "content": "启动 Excel 2013。",
      "pos": [
        13547,
        13561
      ]
    },
    {
      "content": "导航到“数据”功能区。",
      "pos": [
        13566,
        13577
      ]
    },
    {
      "content": "单击“从其他源”，然后单击“从 SQL Server”。",
      "pos": [
        13582,
        13610
      ]
    },
    {
      "content": "从其他源导入 Excel",
      "pos": [
        13618,
        13630
      ]
    },
    {
      "content": "在“数据连接向导”中，键入服务器名称和登录凭据。然后，单击“下一步”。",
      "pos": [
        13639,
        13674
      ]
    },
    {
      "pos": [
        13679,
        13725
      ],
      "content": "在对话框“选择包含所需数据的数据库”中，选择 <bpt id=\"p1\">**</bpt>ElasticDBQuery<ept id=\"p1\">**</ept> 数据库。"
    },
    {
      "content": "在列表视图中选择“客户”表并单击“下一步”。然后单击“完成”。",
      "pos": [
        13730,
        13761
      ]
    },
    {
      "content": "在“导入数据”窗体中的“请选择该数据在工作簿中的显示方式”下，选择“表”，然后单击“确定”。",
      "pos": [
        13766,
        13812
      ]
    },
    {
      "content": "存储在不同分片中、来自“客户”表的所有行将填入 Excel 工作表。",
      "pos": [
        13814,
        13848
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        13853,
        13857
      ]
    },
    {
      "content": "现在，你可以使用 Excel 的强大数据功能。你可以使用包含服务器名称、数据库名称和凭据的连接字符串，将 BI 和数据集成工具连接到弹性查询数据库。请确保支持将 SQL Server 用作工具的数据源。你可以引用弹性查询数据库和外部表，就如同使用工具连接的任何其他 SQL Server 数据库和 SQL Server 表一样。",
      "pos": [
        13858,
        14022
      ]
    },
    {
      "content": "成本",
      "pos": [
        14028,
        14030
      ]
    },
    {
      "content": "使用弹性数据库查询功能不会产生额外的费用。但是，目前此功能只能在用作终结点的高级数据库上使用，但分片可以是任何服务层。",
      "pos": [
        14031,
        14090
      ]
    },
    {
      "pos": [
        14092,
        14155
      ],
      "content": "有关价格信息，请参阅 <bpt id=\"p1\">[</bpt>SQL 数据库定价详细信息<ept id=\"p1\">](/home/features/sql-database/#price)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"弹性数据库作业入门\"\n    description=\"如何使用弹性数据库作业\"\n    services=\"sql-database\"\n    documentationCenter=\"\"  \n    manager=\"jeffreyg\"\n    authors=\"sidneyh\"/>\n\n<tags\n    ms.service=\"sql-database\"\n    ms.date=\"12/01/2015\"\n    wacn.date=\"01/29/2016\" />\n\n# 弹性数据库作业入门\n\nAzure SQL 数据库的弹性数据库作业（预览版）可让你跨多个数据库可靠执行 T-SQL 脚本，同时自动重试并提供最终完成保证。有关弹性数据库作业功能的详细信息，请参阅[功能概述页](/documentation/articles/sql-database-elastic-jobs-overview)。\n\n本主题对[弹性数据库工具入门](/documentation/articles/sql-database-elastic-scale-get-started)中的示例做了延伸。完成本主题后，你将学会如何创建和管理用于管理一组相关数据库的作业。\n\n## 先决条件\n\n下载并运行[弹性数据库工具示例入门](/documentation/articles/sql-database-elastic-scale-get-started)。\n\n## 使用示例应用程序创建分片映射管理器\n\n在此处，你将创建分片映射管理器以及多个分片，然后将数据插入分片。如果你的分片中设置了分片数据，则你可以跳过下面的步骤，直接转到下一部分。\n\n1. 生成并运行**弹性数据库工具入门**示例应用程序。一直执行到[下载和运行示例应用](/documentation/articles/sql-database-elastic-scale-get-started/#Getting-started-with-elastic-database-tools)部分中的步骤 7。在步骤 7 结束时，你将看到以下命令提示符：\n\n    ![命令提示符][1]\n\n2.  在命令窗口中键入“1”，然后按 **Enter**。这会创建分片映射管理器，并将两个分片添加到服务器。然后键入“3”并按 **Enter**；重复该操作四次。这会在你的分片中插入示例数据行。\n\n3.  [Azure 门户](https://manage.windowsazure.cn)应会在 v12 服务器中显示三个新的数据库：\n\n    ![Visual Studio 确认][2]\n\n    现在，我们将创建一个自定义数据库集合，用于反映分片映射中的所有数据库。这样，我们便可以创建和执行用于跨分片添加新表的作业。\n\n我们通常会使用 **New-AzureSqlJobTarget** cmdlet 来创建分片映射目标。必须将分片映射管理器数据库设置为数据库目标，然后将特定分片映射指定为目标。而我们的做法是枚举服务器中的所有数据库，并将这些数据库添加到 master 数据库除外的其他新自定义集合。\n\n##创建自定义集合并将服务器中的所有数据库添加到 master 除外的自定义集合目标。\n\n\n    $customCollectionName = \"dbs_in_server\"\n    New-AzureSqlJobTarget -CustomCollectionName $customCollectionName \n    $ResourceGroupName = \"ddove_samples\"\n    $ServerName = \"samples\"\n    $dbsinserver = Get-AzureRMSqlDatabase -ResourceGroupName $ResourceGroupName -ServerName $ServerName \n    $dbsinserver | %{\n    $currentdb = $_.DatabaseName \n    $ErrorActionPreference = \"Stop\"\n    Write-Output \"\"\n\n    Try\n    {\n       New-AzureSqlJobTarget -ServerName $ServerName -DatabaseName $currentdb | Write-Output\n    }\n    Catch \n    {\n        $ErrorMessage = $_.Exception.Message\n        $ErrorCategory = $_.CategoryInfo.Reason\n                \n        if ($ErrorCategory -eq 'UniqueConstraintViolatedException')\n        {\n             Write-Host $currentdb \"is already a database target.\" \n        }\n\n        else\n        {\n            throw $_\n        }\n    \n    }\n\n    Try\n    {\n        if ($currentdb -eq \"master\")\n        {\n            Write-Host $currentdb \"will not be added custom collection target\" $CustomCollectionName \".\"\n        }\n\n        else\n        {\n            Add-AzureSqlJobChildTarget -CustomCollectionName $CustomCollectionName -ServerName $ServerName -DatabaseName $currentdb\n            Write-Host $currentdb \"was added to\" $CustomCollectionName \".\"\n        }\n\n    }\n    Catch \n    {\n        $ErrorMessage = $_.Exception.Message\n        $ErrorCategory = $_.CategoryInfo.Reason\n\n        if ($ErrorCategory -eq 'UniqueConstraintViolatedException')\n        {\n             Write-Host $currentdb \"is already in the custom collection target\" $CustomCollectionName\".\"\n        }\n\n        else\n        {\n            throw $_\n        }\n    }\n    $ErrorActionPreference = \"Continue\"\n    }\n    \n## 创建 T-SQL 脚本用于跨数据库执行\n\n    $scriptName = \"NewTable\"\n    $scriptCommandText = \"\n    IF NOT EXISTS (SELECT name FROM sys.tables WHERE name = 'Test')\n    BEGIN\n        CREATE TABLE Test(\n            TestId INT PRIMARY KEY IDENTITY,\n            InsertionTime DATETIME2\n        );\n    END\n    GO\n    INSERT INTO Test(InsertionTime) VALUES (sysutcdatetime());\n    GO\"\n\n    $script = New-AzureSqlJobContent -ContentName $scriptName -CommandText $scriptCommandText\n    Write-Output $script\n\n##创建作业以跨自定义数据库组执行脚本\n\n    $jobName = \"create on server dbs\"\n    $scriptName = \"NewTable\"\n    $customCollectionName = \"dbs_in_server\"\n    $credentialName = \"ddove66\"\n    $target = Get-AzureSqlJobTarget -CustomCollectionName $customCollectionName\n    $job = New-AzureSqlJob -JobName $jobName -CredentialName $credentialName -ContentName $scriptName -TargetId $target.TargetId\n    Write-Output $job\n\n\n##执行作业 \n\n以下 PowerShell 脚本可以用于执行现有的作业：\n\n更新以下变量以反映要执行的所需作业名称：\n\n    $jobName = \"create on server dbs\"\n    $jobExecution = Start-AzureSqlJobExecution -JobName $jobName \n    Write-Output $jobExecution\n \n## 检索单个作业执行的状态\n\n使用相同 **Get-AzureSqlJobExecution** cmdlet 搭配 **IncludeChildren** 参数，以查看子作业执行的状态，还就是针对作为作业目标的每个数据库的每个作业执行的特定状态。\n\n    $jobExecutionId = \"{Job Execution Id}\"\n    $jobExecutions = Get-AzureSqlJobExecution -JobExecutionId $jobExecutionId -IncludeChildren\n    Write-Output $jobExecutions \n\n## 查看多个作业执行的状态\n\n**Get-AzureSqlJobExecution** cmdlet 具有多个可选参数，用于显示多个作业执行（已通过提供的参数进行筛选）。下面演示了 Get-AzureSqlJobExecution 的一些可能的用法：\n\n检索所有处于活动状态的顶级作业执行：\n\n    Get-AzureSqlJobExecution\n\n检索所有顶级作业执行，包括非活动的作业执行：\n\n    Get-AzureSqlJobExecution -IncludeInactive\n\n检索已提供作业执行 ID 的所有子作业执行，包括非活动的作业执行：\n\n    $parentJobExecutionId = \"{Job Execution Id}\"\n    Get-AzureSqlJobExecution -AzureSqlJobExecution -JobExecutionId $parentJobExecutionId –IncludeInactive -IncludeChildren\n\n检索使用计划/作业组合创建的所有作业执行，包括非活动的作业：\n\n    $jobName = \"{Job Name}\"\n    $scheduleName = \"{Schedule Name}\"\n    Get-AzureSqlJobExecution -JobName $jobName -ScheduleName $scheduleName -IncludeInactive\n\n检索以指定的分片映射为目标的所有作业，包括非活动的作业：\n\n    $shardMapServerName = \"{Shard Map Server Name}\"\n    $shardMapDatabaseName = \"{Shard Map Database Name}\"\n    $shardMapName = \"{Shard Map Name}\"\n    $target = Get-AzureSqlJobTarget -ShardMapManagerDatabaseName $shardMapDatabaseName -ShardMapManagerServerName $shardMapServerName -ShardMapName $shardMapName\n    Get-AzureSqlJobExecution -TargetId $target.TargetId –IncludeInactive\n\n检索以指定的自定义集合为目标的所有作业，包括非活动的作业：\n\n    $customCollectionName = \"{Custom Collection Name}\"\n    $target = Get-AzureSqlJobTarget -CustomCollectionName $customCollectionName\n    Get-AzureSqlJobExecution -TargetId $target.TargetId –IncludeInactive\n \n检索特定作业执行内的作业任务执行的列表：\n\n    $jobExecutionId = \"{Job Execution Id}\"\n    $jobTaskExecutions = Get-AzureSqlJobTaskExecution -JobExecutionId $jobExecutionId\n    Write-Output $jobTaskExecutions \n\n检索作业任务执行详细信息：\n\n以下 PowerShell 脚本可用于查看作业任务执行的详细信息，在调试执行失败时特别有用。\n\n    $jobTaskExecutionId = \"{Job Task Execution Id}\"\n    $jobTaskExecution = Get-AzureSqlJobTaskExecution -JobTaskExecutionId $jobTaskExecutionId\n    Write-Output $jobTaskExecution\n\n## 检索作业任务执行内的失败\n\nJobTaskExecution 对象包括任务生命周期的属性以及 Message 属性。如果作业任务执行失败，生命周期属性将设为 *Failed*，且消息属性将设为生成的异常消息及其堆栈。如果作业不成功，必须查看给定操作不成功的作业任务的详细信息。\n\n    $jobExecutionId = \"{Job Execution Id}\"\n    $jobTaskExecutions = Get-AzureSqlJobTaskExecution -JobExecutionId $jobExecutionId\n    Foreach($jobTaskExecution in $jobTaskExecutions) \n        {\n        if($jobTaskExecution.Lifecycle -ne 'Succeeded')\n            {\n            Write-Output $jobTaskExecution\n            }\n        }\n\n## 等待作业执行完成\n\n以下 PowerShell 脚本可用于等待作业任务完成：\n\n    $jobExecutionId = \"{Job Execution Id}\"\n    Wait-AzureSqlJobExecution -JobExecutionId $jobExecutionId \n\n## 创建自定义执行策略\n\n弹性数据库作业支持创建可在启动作业时应用的自定义执行策略。\n  \n执行策略当前允许定义：\n\n* 名称：执行策略的标识符。\n* 作业超时：弹性数据库作业取消作业之前的总时间。\n* 初始重试间隔：第一次重试之前等待的间隔。\n* 最大重试间隔：要使用的重试间隔上限。\n* 重试间隔回退系数：用于计算每两次重试的下一个间隔系数。使用以下公式：(初始重试间隔) * Math.pow((间隔回退指数),(重试次数) - 2)。 \n* 最大尝试次数：重试在作业中执行的最大次数。\n\n默认的执行策略使用以下值：\n\n* 名称：默认执行策略\n* 作业超时：1 周\n* 初始重试间隔：100 毫秒\n* 最大重试间隔：30 分钟\n* 重试间隔系数：2\n* 最大尝试次数：2,147,483,647\n\n创建所需的执行策略：\n\n    $executionPolicyName = \"{Execution Policy Name}\"\n    $initialRetryInterval = New-TimeSpan -Seconds 10\n    $jobTimeout = New-TimeSpan -Minutes 30\n    $maximumAttempts = 999999\n    $maximumRetryInterval = New-TimeSpan -Minutes 1\n    $retryIntervalBackoffCoefficient = 1.5\n    $executionPolicy = New-AzureSqlJobExecutionPolicy -ExecutionPolicyName $executionPolicyName -InitialRetryInterval $initialRetryInterval -JobTimeout $jobTimeout -MaximumAttempts $maximumAttempts -MaximumRetryInterval $maximumRetryInterval -RetryIntervalBackoffCoefficient $retryIntervalBackoffCoefficient\n    Write-Output $executionPolicy\n\n### 更新自定义执行策略\n\n更新要更新的所需执行策略：\n\n    $executionPolicyName = \"{Execution Policy Name}\"\n    $initialRetryInterval = New-TimeSpan -Seconds 15\n    $jobTimeout = New-TimeSpan -Minutes 30\n    $maximumAttempts = 999999\n    $maximumRetryInterval = New-TimeSpan -Minutes 1\n    $retryIntervalBackoffCoefficient = 1.5\n    $updatedExecutionPolicy = Set-AzureSqlJobExecutionPolicy -ExecutionPolicyName $executionPolicyName -InitialRetryInterval $initialRetryInterval -JobTimeout $jobTimeout -MaximumAttempts $maximumAttempts -MaximumRetryInterval $maximumRetryInterval -RetryIntervalBackoffCoefficient $retryIntervalBackoffCoefficient\n    Write-Output $updatedExecutionPolicy\n \n## 取消作业\n\n弹性数据库作业支持作业取消请求。如果弹性数据库作业检测到当前正在执行作业的取消请求，它将尝试停止作业。\n\n弹性数据库作业可通过两种不同的方式执行取消：\n\n1. 取消当前正在执行的任务：如果在任务正在执行时检测到取消，将在当前正在执行的任务层面尝试取消。例如：当尝试取消时，如果有某个长时间运行的查询当前正在执行，将尝试取消该查询。\n2. 取消任务重试：如果控制线程在启动任务执行之前检测到取消，控制线程将避免启动该任务，并将请求声明为已取消。\n\n如果针对父作业请求了作业取消，则会对父作业及其所有子作业执行取消请求。\n \n若要提交取消请求，请使用 **Stop-AzureSqlJobExecution** cmdlet 并设置 **JobExecutionId** 参数。\n\n    $jobExecutionId = \"{Job Execution Id}\"\n    Stop-AzureSqlJobExecution -JobExecutionId $jobExecutionId\n\n## 根据名称和作业的历史记录删除作业\n\n弹性数据库作业支持异步删除作业。可将某个作业标记为待删除，系统将在作业的作业执行都已完成后，删除该作业及其所有作业历史记录。系统不会自动取消处于活动状态的作业执行。\n\n必须调用 Stop-AzureSqlJobExecution 来取消处于活动状态的作业执行。\n\n若要触发作业删除，请使用 **Remove-AzureSqlJob** cmdlet 并设置 **JobName** 参数。\n\n    $jobName = \"{Job Name}\"\n    Remove-AzureSqlJob -JobName $jobName\n \n## 创建自定义数据库目标\n自定义数据库目标可以在弹性数据库作业中定义，可用于直接执行或包含在自定义数据库组内。由于**弹性数据库池**尚不能通过 PowerShell API 直接支持，你只需创建自定义数据库目标和自定义数据库集合目标，其中包含池中的所有数据库。\n\n设置以下变量以反映所需的数据库信息：\n\n    $databaseName = \"{Database Name}\"\n    $databaseServerName = \"{Server Name}\"\n    New-AzureSqlJobDatabaseTarget -DatabaseName $databaseName -ServerName $databaseServerName \n\n## 创建自定义数据库集合目标\n可以自定义数据库集合目标，以跨多个已定义数据库目标执行。创建数据库组之后，数据库可与自定义集合目标相关联。\n\n设置以下变量以反映所需的自定义集合目标配置：\n\n    $customCollectionName = \"{Custom Database Collection Name}\"\n    New-AzureSqlJobTarget -CustomCollectionName $customCollectionName \n\n### 将数据库添加到自定义数据库集合目标\n\n数据库目标可以与自定义数据库集合目标相关联，以创建数据库组。每当创建以自定义数据库集合目标为目标的作业时，都会在执行时扩展为以关联到该组的数据库为目标。\n\n将所需的数据库添加到特定的自定义集合：\n\n    $serverName = \"{Database Server Name}\"\n    $databaseName = \"{Database Name}\"\n    $customCollectionName = \"{Custom Database Collection Name}\"\n    Add-AzureSqlJobChildTarget -CustomCollectionName $customCollectionName -DatabaseName $databaseName -ServerName $databaseServerName \n\n#### 查看自定义数据库集合目标内的数据库\n\n使用 **Get-AzureSqlJobTarget** cmdlet 检索自定义数据库集合目标内的子数据库。\n \n    $customCollectionName = \"{Custom Database Collection Name}\"\n    $target = Get-AzureSqlJobTarget -CustomCollectionName $customCollectionName\n    $childTargets = Get-AzureSqlJobTarget -ParentTargetId $target.TargetId\n    Write-Output $childTargets\n\n### 创建作业以跨自定义数据库集合目标执行脚本\n\n使用 **New-AzureSqlJob** cmdlet 可以针对自定义数据库集合目标定义的数据库组创建作业。弹性数据库作业将作业扩展为多个子作业（每个子作业映射到与自定义数据库集合目标关联的数据库），并确保脚本针对每个数据库执行。同样，重要的是脚本具有幂等处理重试的弹性。\n\n    $jobName = \"{Job Name}\"\n    $scriptName = \"{Script Name}\"\n    $customCollectionName = \"{Custom Collection Name}\"\n    $credentialName = \"{Credential Name}\"\n    $target = Get-AzureSqlJobTarget -CustomCollectionName $customCollectionName\n    $job = New-AzureSqlJob -JobName $jobName -CredentialName $credentialName -ContentName $scriptName -TargetId $target.TargetId\n    Write-Output $job\n\n## 跨数据库收集数据\n\n**弹性数据库作业**支持跨数据库组执行查询，并将结果发送到指定的数据库表。可以在事实之后查询数据表，以查看每个数据库的查询结果。这提供了跨多个数据库执行查询的异步机制。例如其中一个数据库暂时不可用的失败案例是通过重试自动处理。\n\n如果不存在与返回的结果集架构相符的指定目标表，则自动创建该表。如果脚本执行返回多个结果集，弹性数据库作业只将第一个结果集发送到提供的目标表。\n\n以下 PowerShell 脚本可用于执行脚本，将其结果收集到指定的表。此脚本假设已创建一个可输出单个结果集的 T-SQL 脚本，并且已创建自定义的数据库集合目标。\n\n设置以下项以反映所需的脚本、凭据和执行目标：\n\n    $jobName = \"{Job Name}\"\n    $scriptName = \"{Script Name}\"\n    $executionCredentialName = \"{Execution Credential Name}\"\n    $customCollectionName = \"{Custom Collection Name}\"\n    $destinationCredentialName = \"{Destination Credential Name}\"\n    $destinationServerName = \"{Destination Server Name}\"\n    $destinationDatabaseName = \"{Destination Database Name}\"\n    $destinationSchemaName = \"{Destination Schema Name}\"\n    $destinationTableName = \"{Destination Table Name}\"\n    $target = Get-AzureSqlJobTarget -CustomCollectionName $customCollectionName\n\n### 创建和启动用于数据库收集方案的作业\n    $job = New-AzureSqlJob -JobName $jobName -CredentialName $executionCredentialName -ContentName $scriptName -ResultSetDestinationServerName $destinationServerName -ResultSetDestinationDatabaseName $destinationDatabaseName -ResultSetDestinationSchemaName $destinationSchemaName -ResultSetDestinationTableName $destinationTableName -ResultSetDestinationCredentialName $destinationCredentialName -TargetId $target.TargetId\n    Write-Output $job\n    $jobExecution = Start-AzureSqlJobExecution -JobName $jobName\n    Write-Output $jobExecution\n\n## 使用作业触发器创建作业执行计划\n\n以下 PowerShell 脚本可用于创建重复计划。此脚本使用一分钟间隔，但是 New-AzureSqlJobSchedule 也支持 -DayInterval、-HourInterval、-MonthInterval 和 -WeekInterval 参数。可以通过传递 -OneTime 来创建仅执行一次的计划。\n\n创建新计划：\n\n    $scheduleName = \"Every one minute\"\n    $minuteInterval = 1\n    $startTime = (Get-Date).ToUniversalTime()\n    $schedule = New-AzureSqlJobSchedule -MinuteInterval $minuteInterval -ScheduleName $scheduleName -StartTime $startTime \n    Write-Output $schedule\n\n### 创建作业触发器，使作业按时间计划执行\n\n可以定义作业触发器，使作业根据时间计划执行。以下 PowerShell 脚本可用于创建作业触发器。\n\n设置以下变量以对应于所需的作业和计划：\n\n    $jobName = \"{Job Name}\"\n    $scheduleName = \"{Schedule Name}\"\n    $jobTrigger = New-AzureSqlJobTrigger -ScheduleName $scheduleName –JobName $jobName\n    Write-Output $jobTrigger\n\n### 删除计划的关联，以停止按计划执行作业\n\n若要通过作业触发器中断作业重复执行，可以删除作业触发器。使用 **Remove-AzureSqlJobTrigger** cmdlet 删除作业触发器，以停止作业根据计划执行。\n\n    $jobName = \"{Job Name}\"\n    $scheduleName = \"{Schedule Name}\"\n    Remove-AzureSqlJobTrigger -ScheduleName $scheduleName -JobName $jobName\n\n\n\n\n\n## 将弹性数据库查询结果导入 Excel\n\n 你可以将查询结果导入到 Excel 文件。\n\n1. 启动 Excel 2013。\n2.  导航到“数据”功能区。\n3.  单击“从其他源”，然后单击“从 SQL Server”。\n\n    ![从其他源导入 Excel][5]\n4.  在“数据连接向导”中，键入服务器名称和登录凭据。然后，单击“下一步”。\n5.  在对话框“选择包含所需数据的数据库”中，选择 **ElasticDBQuery** 数据库。\n6.  在列表视图中选择“客户”表并单击“下一步”。然后单击“完成”。\n7.  在“导入数据”窗体中的“请选择该数据在工作簿中的显示方式”下，选择“表”，然后单击“确定”。\n\n存储在不同分片中、来自“客户”表的所有行将填入 Excel 工作表。\n\n## 后续步骤\n现在，你可以使用 Excel 的强大数据功能。你可以使用包含服务器名称、数据库名称和凭据的连接字符串，将 BI 和数据集成工具连接到弹性查询数据库。请确保支持将 SQL Server 用作工具的数据源。你可以引用弹性查询数据库和外部表，就如同使用工具连接的任何其他 SQL Server 数据库和 SQL Server 表一样。\n\n### 成本\n使用弹性数据库查询功能不会产生额外的费用。但是，目前此功能只能在用作终结点的高级数据库上使用，但分片可以是任何服务层。\n\n有关价格信息，请参阅 [SQL 数据库定价详细信息](/home/features/sql-database/#price)。\n\n\n[AZURE.INCLUDE [elastic-scale-include](../includes/elastic-scale-include.md)]\n\n<!--Image references-->\n[1]: ./media/sql-database-elastic-query-getting-started/cmd-prompt.png\n[2]: ./media/sql-database-elastic-query-getting-started/portal.png\n[3]: ./media/sql-database-elastic-query-getting-started/tiers.png\n[4]: ./media/sql-database-elastic-query-getting-started/details.png\n[5]: ./media/sql-database-elastic-query-getting-started/exel-sources.png\n<!--anchors-->\n\n<!---HONumber=Mooncake_0118_2016-->\n"
}