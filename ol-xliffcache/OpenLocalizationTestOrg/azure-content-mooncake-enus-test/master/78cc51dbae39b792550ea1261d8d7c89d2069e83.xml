{
  "nodes": [
    {
      "content": "Hyperlapse 媒体文件与 Azure Media Hyperlapse",
      "pos": [
        27,
        66
      ]
    },
    {
      "content": "Azure Media Hyperlapse 可以使用第一人称视角或运动相机内容创建流畅缩时视频。本主题说明如何使用 Media Indexer。",
      "pos": [
        85,
        158
      ]
    },
    {
      "content": "Hyperlapse 媒体文件与 Azure Media Hyperlapse",
      "pos": [
        378,
        417
      ]
    },
    {
      "pos": [
        419,
        665
      ],
      "content": "Azure Media Hyperlapse 是可以使用第一人称视角或运动相机内容创建流畅缩时视频的媒体处理器 (MP)。Azure 媒体服务的基于云的 Microsoft Hyperlapse 与 <bpt id=\"p1\">[</bpt>Microsoft Research 的桌面 Hyperlapse Pro 和手机版 Hyperlapse Mobile<ept id=\"p1\">](http://aka.ms/hyperlapse)</ept> 相似，它运用大规模的 Azure 媒体服务媒体处理平台来实现水平缩放，以及并行化批量 Hyperlapse 处理。"
    },
    {
      "pos": [
        668,
        753
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> Azure 媒体服务的 Microsoft Hyperlapse 目前以免费公开预览版提供。作业限制为输入资产的前 10,000 帧。"
    },
    {
      "pos": [
        758,
        961
      ],
      "content": "Microsoft Hyperlapse 最适合用于通过移动相机拍摄第一人称视角内容。尽管在静态相机中也能运行，但 Azure 媒体 Hyperlapse 媒体处理器无法保证其他类型内容的性能及质量。若要深入了解 Azure 媒体服务的 Microsoft Hyperlapse 并观看一些示例视频，请查看公开预览版的<bpt id=\"p1\">[</bpt>简介博客文章<ept id=\"p1\">](http://aka.ms/azurehyperlapseblog)</ept>。"
    },
    {
      "content": "Azure Media Hyperlapse 作业接受输入 MP4、MOV 或 WMV 资产文件以及配置文件，以指定视频中要缩时的帧及其速度（例如前 10,000 帧的速度为 2x）。输出是输入视频经过稳定和缩时转译的结果。",
      "pos": [
        963,
        1075
      ]
    },
    {
      "pos": [
        1077,
        1138
      ],
      "content": "有关最新的 Azure Media Hyperlapse 更新，请参阅<bpt id=\"p1\">[</bpt>媒体服务博客<ept id=\"p1\">](/blog/tags/媒体服务)</ept>。"
    },
    {
      "content": "将资产进行 Hyperlapse 处理",
      "pos": [
        1143,
        1162
      ]
    },
    {
      "pos": [
        1164,
        1284
      ],
      "content": "首先，请将所需的输入文件上载到 Azure 媒体服务。若要深入了解有关上载和管理内容的概念，请阅读<bpt id=\"p1\">[</bpt>内容管理文章<ept id=\"p1\">](/documentation/articles/media-services-manage-content#upload)</ept>。"
    },
    {
      "pos": [
        1291,
        1333
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"configuration\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>Hyperlapse 的配置预设"
    },
    {
      "content": "将内容上载到媒体服务帐户后，需要构造你的配置预设。下表说明了用户指定的字段：",
      "pos": [
        1335,
        1373
      ]
    },
    {
      "content": "字段",
      "pos": [
        1376,
        1378
      ]
    },
    {
      "content": "说明",
      "pos": [
        1381,
        1383
      ]
    },
    {
      "content": "StartFrame",
      "pos": [
        1406,
        1416
      ]
    },
    {
      "content": "开始 Microsoft Hyperlapse 处理时所在的帧。",
      "pos": [
        1417,
        1449
      ]
    },
    {
      "content": "NumFrames",
      "pos": [
        1450,
        1459
      ]
    },
    {
      "content": "要处理的帧数",
      "pos": [
        1460,
        1466
      ]
    },
    {
      "content": "Speed",
      "pos": [
        1467,
        1472
      ]
    },
    {
      "content": "用于加速输入视频的倍数。",
      "pos": [
        1473,
        1485
      ]
    },
    {
      "content": "下面是采用 JSON 和 XML 格式且符合要求的配置文件示例：",
      "pos": [
        1487,
        1519
      ]
    },
    {
      "content": "XML 预设：",
      "pos": [
        1523,
        1530
      ]
    },
    {
      "content": "JSON 预设：",
      "pos": [
        1947,
        1955
      ]
    },
    {
      "pos": [
        2215,
        2277
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"sample_code\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>包含 AMS .NET SDK 的 Microsoft Hyperlapse"
    },
    {
      "content": "以下方法将媒体文件上载为资产，然后使用 Azure Media Hyperlapse 媒体处理器来创建作业。",
      "pos": [
        2279,
        2333
      ]
    },
    {
      "pos": [
        2337,
        2479
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 为了使代码正常工作，你应该事先在名为“context”的作用域中创建 CloudMediaContext。若要了解详细信息，请阅读<bpt id=\"p1\">[</bpt>内容管理文章<ept id=\"p1\">](/documentation/articles/media-services-manage-content)</ept>。"
    },
    {
      "pos": [
        2483,
        2545
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 字符串参数“hyperConfig”应是上述采用 JSON 或 XML 格式且符合要求的配置预设。"
    },
    {
      "pos": [
        6752,
        6782
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"file_types\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>支持的文件类型"
    },
    {
      "content": "MP4",
      "pos": [
        6786,
        6789
      ]
    },
    {
      "content": "MOV",
      "pos": [
        6792,
        6795
      ]
    },
    {
      "content": "WMV",
      "pos": [
        6798,
        6801
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"Hyperlapse 媒体文件与 Azure Media Hyperlapse\"\n    description=\"Azure Media Hyperlapse 可以使用第一人称视角或运动相机内容创建流畅缩时视频。本主题说明如何使用 Media Indexer。\"\n    services=\"media-services\"\n    documentationCenter=\"\"\n    authors=\"asolanki\"\n    manager=\"johndeu\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/12/2015\"   \n    wacn.date=\"03/17/2016\"/>\n\n\n# Hyperlapse 媒体文件与 Azure Media Hyperlapse\n\nAzure Media Hyperlapse 是可以使用第一人称视角或运动相机内容创建流畅缩时视频的媒体处理器 (MP)。Azure 媒体服务的基于云的 Microsoft Hyperlapse 与 [Microsoft Research 的桌面 Hyperlapse Pro 和手机版 Hyperlapse Mobile](http://aka.ms/hyperlapse) 相似，它运用大规模的 Azure 媒体服务媒体处理平台来实现水平缩放，以及并行化批量 Hyperlapse 处理。\n\n>[AZURE.IMPORTANT] Azure 媒体服务的 Microsoft Hyperlapse 目前以免费公开预览版提供。作业限制为输入资产的前 10,000 帧。\n\n\n> Microsoft Hyperlapse 最适合用于通过移动相机拍摄第一人称视角内容。尽管在静态相机中也能运行，但 Azure 媒体 Hyperlapse 媒体处理器无法保证其他类型内容的性能及质量。若要深入了解 Azure 媒体服务的 Microsoft Hyperlapse 并观看一些示例视频，请查看公开预览版的[简介博客文章](http://aka.ms/azurehyperlapseblog)。\n\nAzure Media Hyperlapse 作业接受输入 MP4、MOV 或 WMV 资产文件以及配置文件，以指定视频中要缩时的帧及其速度（例如前 10,000 帧的速度为 2x）。输出是输入视频经过稳定和缩时转译的结果。\n\n有关最新的 Azure Media Hyperlapse 更新，请参阅[媒体服务博客](/blog/tags/媒体服务)。\n\n## 将资产进行 Hyperlapse 处理\n\n首先，请将所需的输入文件上载到 Azure 媒体服务。若要深入了解有关上载和管理内容的概念，请阅读[内容管理文章](/documentation/articles/media-services-manage-content#upload)。\n\n###  <a id=\"configuration\"></a>Hyperlapse 的配置预设\n\n将内容上载到媒体服务帐户后，需要构造你的配置预设。下表说明了用户指定的字段：\n\n 字段 | 说明\n-------|-------------\nStartFrame|开始 Microsoft Hyperlapse 处理时所在的帧。\nNumFrames|要处理的帧数\nSpeed|用于加速输入视频的倍数。\n\n下面是采用 JSON 和 XML 格式且符合要求的配置文件示例：\n\n**XML 预设：**\n\n    <?xml version=\"1.0\" encoding=\"utf-16\"?>\n    <Preset xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" Version=\"1.0\" xmlns=\"http://www.windowsazure.com/media/encoding/Preset/2014/03\">\n        <Sources>\n            <Source StartFrame=\"0\" NumFrames=\"10000\" />\n        </Sources>\n        <Options>\n            <Speed>12</Speed>\n        </Options>\n    </Preset>\n\n**JSON 预设：**\n\n    {\n        \"Version\":1.0,\n        \"Sources\": [\n            {\n                \"StartFrame\":0,\n                \"NumFrames\":2147483647\n            }\n        ],\n        \"Options\": {\n            \"Speed\":1,\n            \"Stabilize\":false\n        }\n    }\n\n###  <a id=\"sample_code\"></a>包含 AMS .NET SDK 的 Microsoft Hyperlapse\n\n以下方法将媒体文件上载为资产，然后使用 Azure Media Hyperlapse 媒体处理器来创建作业。\n\n> [AZURE.NOTE] 为了使代码正常工作，你应该事先在名为“context”的作用域中创建 CloudMediaContext。若要了解详细信息，请阅读[内容管理文章](/documentation/articles/media-services-manage-content)。\n\n> [AZURE.NOTE] 字符串参数“hyperConfig”应是上述采用 JSON 或 XML 格式且符合要求的配置预设。\n\n    static bool RunHyperlapseJob(string input, string output, string hyperConfig)\n    {\n        // create asset with input file\n        IAsset asset = context\n                       .Assets\n                       .CreateAssetAndUploadSingleFile(input, \"My Hyperlapse Input\", AssetCreationOptions.None);\n\n        // grab instances of Azure Media Hyperlapse MP\n        IMediaProcessor mp = context\n                             .MediaProcessors\n                             .GetLatestMediaProcessorByName(\"Azure Media Hyperlapse\");\n\n        // create Job with Hyperlapse task\n        IJob job = context\n                   .Jobs\n                   .Create(String.Format(\"Hyperlapse {0}\", input));\n\n        if (String.IsNullOrEmpty(hyperConfig))\n        {\n            // config cannot be empty\n            return false;\n        }\n\n        hyperConfig = File.ReadAllText(hyperConfig);\n\n        ITask hyperlapseTask = job.Tasks.AddNew(\"Hyperlapse task\",\n                                                mp,\n                                                hyperConfig,\n                                                TaskOptions.None);\n        hyperlapseTask.InputAssets.Add(asset);\n        hyperlapseTask.OutputAssets.AddNew(\"Hyperlapse output\",\n                                            AssetCreationOptions.None);\n\n\n        job.Submit();\n\n        // Create progress printing and querying tasks\n            Task progressPrintTask = new Task(() =>\n            {\n\n                IJob jobQuery = null;\n                do\n                {\n                    var progressContext = context;\n                    jobQuery = progressContext.Jobs\n                                              .Where(j => j.Id == job.Id)\n                                              .First();\n                    Console.WriteLine(string.Format(\"{0}\\t{1}\\t{2}\",\n                                      DateTime.Now,\n                                      jobQuery.State,\n                                      jobQuery.Tasks[0].Progress));\n                    Thread.Sleep(10000);\n                }\n                while (jobQuery.State != JobState.Finished &&\n                       jobQuery.State != JobState.Error &&\n                       jobQuery.State != JobState.Canceled);\n            });\n            progressPrintTask.Start();\n\n            Task progressJobTask = job.GetExecutionProgressTask(\n                                                 CancellationToken.None);\n            progressJobTask.Wait();\n\n            // If job state is Error, the event handling\n            // method for job progress should log errors.  Here we check\n            // for error state and exit if needed.\n            if (job.State == JobState.Error)\n            {\n                ErrorDetail error = job.Tasks.First().ErrorDetails.First();\n                Console.WriteLine(string.Format(\"Error: {0}. {1}\",\n                                                error.Code,\n                                                error.Message));  \n                return false;                  \n            }\n\n        DownloadAsset(job.OutputMediaAssets.First(), output);\n        return true;\n    }\n\n    static void DownloadAsset(IAsset asset, string outputDirectory)\n    {\n        foreach (IAssetFile file in asset.AssetFiles)\n        {\n            file.Download(Path.Combine(outputDirectory, file.Name));\n        }\n    }\n\n\n    static IAsset CreateAssetAndUploadSingleFile(string filePath, string assetName, AssetCreationOptions options)\n    {\n        IAsset asset = context.Assets.Create(assetName, options);\n\n        var assetFile = asset.AssetFiles.Create(Path.GetFileName(filePath));\n        assetFile.Upload(filePath);\n\n        return asset;\n    }\n\n    static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n    {\n        var processor = context.MediaProcessors\n        .Where(p => p.Name == mediaProcessorName)\n        .ToList()\n        .OrderBy(p => new Version(p.Version))\n        .LastOrDefault();\n\n        if (processor == null)\n            throw new ArgumentException(string.Format(\"Unknown media processor\",\n                                                       mediaProcessorName));\n\n        return processor;\n    }\n\n### <a id=\"file_types\"></a>支持的文件类型\n\n- MP4\n- MOV\n- WMV\n\n\n\n\n\n\n\n\n\n\n\n<!-- Anchors. -->\n\n<!-- Images. -->\n\n<!-- URLs. -->\n\n<!---HONumber=Mooncake_0307_2016-->"
}