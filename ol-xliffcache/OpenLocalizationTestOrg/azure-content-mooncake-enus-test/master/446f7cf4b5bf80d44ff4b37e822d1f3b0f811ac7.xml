{
  "nodes": [
    {
      "content": "使用安装适用于 .NET 的媒体服务 SDK 配置内容密钥授权策略",
      "pos": [
        28,
        61
      ]
    },
    {
      "content": "了解如何使用适用于 .NET 的媒体服务 SDK 配置内容密钥的授权策略。",
      "pos": [
        81,
        118
      ]
    },
    {
      "content": "动态加密：配置内容密钥授权策略",
      "pos": [
        347,
        362
      ]
    },
    {
      "content": "概述",
      "pos": [
        497,
        499
      ]
    },
    {
      "content": "借助 Azure 媒体服务，你可以传送使用高级加密标准 (AES)（使用 128 位加密密钥）和/或 PlayReady DRM 动态加密的内容。媒体服务还提供了用于向已授权客户端传送密钥和 PlayReady 许可证的服务。",
      "pos": [
        501,
        614
      ]
    },
    {
      "content": "当前你可以加密以下流格式：HLS、MPEG DASH 和平滑流。无法加密 HDS 流格式或渐进式下载。",
      "pos": [
        616,
        667
      ]
    },
    {
      "pos": [
        669,
        839
      ],
      "content": "如果你需要媒体服务来加密资产，则需要将加密密钥（<bpt id=\"p1\">**</bpt>CommonEncryption<ept id=\"p1\">**</ept> 或 <bpt id=\"p2\">**</bpt>EnvelopeEncryption<ept id=\"p2\">**</ept>）与资产相关联（如<bpt id=\"p3\">[</bpt>此处<ept id=\"p3\">](/documentation/articles/media-services-dotnet-create-contentkey)</ept>所述），并且配置密钥的授权策略（如本文所述）。"
    },
    {
      "content": "当播放器请求流时，媒体服务将使用指定的密钥通过 AES 或 PlayReady 加密来动态加密你的内容。为了解密流，播放器将从密钥传送服务请求密钥。为了确定用户是否被授权获取密钥，服务将评估你为密钥指定的授权策略。",
      "pos": [
        841,
        948
      ]
    },
    {
      "pos": [
        950,
        1176
      ],
      "content": "媒体服务支持通过多种方式对发出密钥请求的用户进行身份验证。内容密钥授权策略可能受到一种或多种授权限制：<bpt id=\"p1\">**</bpt>开放<ept id=\"p1\">**</ept> 或 <bpt id=\"p2\">**</bpt>令牌<ept id=\"p2\">**</ept> 限制。令牌限制策略必须附带由安全令牌服务 (STS) 颁发的令牌。媒体服务支持采用 <bpt id=\"p3\">**</bpt>简单 Web 令牌<ept id=\"p3\">**</ept> (<bpt id=\"p4\">[</bpt>SWT<ept id=\"p4\">](https://msdn.microsoft.com/zh-cn/library/gg185950.aspx#BKMK_2)</ept>) 格式和 <bpt id=\"p5\">**</bpt>JSON Web 令牌<ept id=\"p5\">**</ept> (JWT) 格式的令牌。"
    },
    {
      "content": "媒体服务不提供安全令牌服务。你可以创建自定义 STS 或利用 Azure ACS 来颁发令牌。必须将 STS 配置为创建令牌，该令牌使用指定密钥以及你在令牌限制配置中指定的颁发声明进行签名（如本文所述）。如果令牌有效，而且令牌中的声明与为内容密钥配置的声明相匹配，则媒体服务密钥传送服务会将加密密钥返回到客户端。",
      "pos": [
        1178,
        1334
      ]
    },
    {
      "content": "有关详细信息，请参阅",
      "pos": [
        1336,
        1346
      ]
    },
    {
      "content": "JWT 令牌身份验证",
      "pos": [
        1349,
        1359
      ]
    },
    {
      "pos": [
        1472,
        1632
      ],
      "content": "<bpt id=\"p1\">[</bpt>将基于 Azure 媒体服务 OWIN MVC 的应用与 Azure Active Directory 相集成，并基于 JWT 声明限制内容密钥传送<ept id=\"p1\">](http://www.gtrifonov.com/2015/01/24/mvc-owin-azure-media-services-ad-integration/)</ept>。"
    },
    {
      "pos": [
        1634,
        1697
      ],
      "content": "<bpt id=\"p1\">[</bpt>使用 Azure ACS 颁发令牌<ept id=\"p1\">](http://mingfeiy.com/acs-with-key-services)</ept>。"
    },
    {
      "content": "请注意以下事项：",
      "pos": [
        1702,
        1710
      ]
    },
    {
      "pos": [
        1714,
        1850
      ],
      "content": "为了能够使用动态打包和动态加密，必须确保至少有一个流式处理保留单位。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>如何缩放媒体服务<ept id=\"p1\">](/documentation/articles/media-services-manage-origins#scale_streaming_endpoints)</ept>。"
    },
    {
      "pos": [
        1854,
        1961
      ],
      "content": "你的资产必须包含一组自适应比特率 MP4 或自适应比特率平滑流文件。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>对资产进行编码<ept id=\"p1\">](/documentation/articles/media-services-encode-asset)</ept>。"
    },
    {
      "pos": [
        1966,
        2025
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>AssetCreationOptions.StorageEncrypted<ept id=\"p1\">**</ept> 选项上载资产并对其进行编码。"
    },
    {
      "content": "如果你打算创建需要相同策略配置的多个内容密钥，我们强烈建议你创建单个授权策略，并将其重复用于多个内容密钥。",
      "pos": [
        2028,
        2081
      ]
    },
    {
      "content": "密钥传送服务将 ContentKeyAuthorizationPolicy 及其相关对象（策略选项和限制）缓存 15 分钟。如果你创建 ContentKeyAuthorizationPolicy 并指定使用“令牌”限制，然后对其进行测试，再将策略更新为“开放”限制，则现有策略切换到“开放”版本的策略需要大约 15 分钟。",
      "pos": [
        2084,
        2245
      ]
    },
    {
      "content": "如果你添加或更新资产的传送策略，则必须删除现有定位符（如果有）并创建新定位符。",
      "pos": [
        2248,
        2287
      ]
    },
    {
      "content": "AES-128 动态加密",
      "pos": [
        2292,
        2304
      ]
    },
    {
      "content": "开放限制",
      "pos": [
        2310,
        2314
      ]
    },
    {
      "content": "开放限制意味着系统会将密钥传送到发出密钥请求的任何用户。此限制可能适用于测试用途。",
      "pos": [
        2316,
        2357
      ]
    },
    {
      "content": "以下示例创建开放授权策略，并将其添加到内容密钥。",
      "pos": [
        2359,
        2383
      ]
    },
    {
      "content": "令牌限制",
      "pos": [
        3907,
        3911
      ]
    },
    {
      "content": "本部分介绍如何创建内容密钥授权策略，以及如何将其与内容密钥相关联。授权策略描述了必须达到什么授权要求才能确定用户是否有权接收密钥（例如，“验证密钥”列表是否包含令牌签名时使用的密钥）。",
      "pos": [
        3913,
        4005
      ]
    },
    {
      "content": "若要配置令牌限制选项，你需要使用 XML 来描述令牌的授权要求。令牌限制配置 XML 必须符合以下 XML 架构。",
      "pos": [
        4007,
        4064
      ]
    },
    {
      "pos": [
        4070,
        4095
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"schema\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>令牌限制架构"
    },
    {
      "pos": [
        6895,
        7064
      ],
      "content": "在配置 <bpt id=\"p1\">**</bpt>令牌<ept id=\"p1\">**</ept> 限制策略时，必须指定主 <bpt id=\"p2\">**</bpt>验证密钥<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>颁发者<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>受众<ept id=\"p4\">**</ept> 参数。<bpt id=\"p5\">**</bpt>主验证密钥<ept id=\"p5\">**</ept> 包含用来为令牌签名的的密钥，<bpt id=\"p6\">**</bpt>颁发者<ept id=\"p6\">**</ept> 是颁发令牌的安全令牌服务。<bpt id=\"p7\">**</bpt>受众<ept id=\"p7\">**</ept>（有时称为 <bpt id=\"p8\">**</bpt>范围<ept id=\"p8\">**</ept> ）描述该令牌的意图，或者令牌授权访问的资源。媒体服务密钥交付服务将验证令牌中的这些值是否与模板中的值匹配。"
    },
    {
      "pos": [
        7066,
        7211
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>适用于 .NET 的媒体服务 SDK<ept id=\"p1\">**</ept> 时，可以使用 <bpt id=\"p2\">**</bpt>TokenRestrictionTemplate<ept id=\"p2\">**</ept> 类来生成限制令牌。以下示例创建包含令牌限制的授权策略。在此示例中，客户端必须出示令牌，其中包含：签名密钥 (VerificationKey)、令牌颁发者和必需的声明。"
    },
    {
      "pos": [
        9488,
        9509
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"test\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>测试令牌"
    },
    {
      "content": "若要获取用于密钥授权策略的基于令牌限制的测试令牌，请执行以下操作。",
      "pos": [
        9511,
        9544
      ]
    },
    {
      "content": "PlayReady 动态加密",
      "pos": [
        10505,
        10519
      ]
    },
    {
      "content": "媒体服务允许你配置相应的权限和限制，以便在用户尝试播放受保护的内容时，PlayReady DRM 运行时会强制实施这些权限和限制。",
      "pos": [
        10522,
        10587
      ]
    },
    {
      "pos": [
        10589,
        10848
      ],
      "content": "使用 PlayReady 保护你的内容时，需要在授权策略中指定的项目之一是用于定义 <bpt id=\"p1\">[</bpt>PlayReady 许可证模板<ept id=\"p1\">](/documentation/articles/media-services-playready-license-template-overview)</ept>的 XML 字符串。在适用于 .NET 的媒体服务 SDK 中，<bpt id=\"p2\">**</bpt>PlayReadyLicenseResponseTemplate<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>PlayReadyLicenseTemplate<ept id=\"p3\">**</ept> 类将帮助你定义 PlayReady 许可证模板。"
    },
    {
      "content": "开放限制",
      "pos": [
        10853,
        10857
      ]
    },
    {
      "content": "开放限制意味着系统会将密钥传送到发出密钥请求的任何用户。此限制可能适用于测试用途。",
      "pos": [
        10863,
        10904
      ]
    },
    {
      "content": "以下示例创建开放授权策略，并将其添加到内容密钥。",
      "pos": [
        10906,
        10930
      ]
    },
    {
      "content": "令牌限制",
      "pos": [
        12444,
        12448
      ]
    },
    {
      "pos": [
        12450,
        12523
      ],
      "content": "若要配置令牌限制选项，你需要使用 XML 来描述令牌的授权要求。令牌限制配置 XML 必须符合<bpt id=\"p1\">[</bpt>此<ept id=\"p1\">](#schema)</ept>部分中所示的 XML 架构。"
    },
    {
      "pos": [
        18078,
        18119
      ],
      "content": "若要获取用于密钥授权策略的基于令牌限制的测试令牌，请参阅<bpt id=\"p1\">[</bpt>此<ept id=\"p1\">](#test)</ept>部分。"
    },
    {
      "pos": [
        18123,
        18180
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"types\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>定义 ContentKeyAuthorizationPolicy 时使用的类型"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"ContentKeyRestrictionType\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ContentKeyRestrictionType",
      "pos": [
        18185,
        18248
      ]
    },
    {
      "content": "public enum ContentKeyRestrictionType",
      "pos": [
        18253,
        18290
      ]
    },
    {
      "content": "{",
      "pos": [
        18295,
        18296
      ]
    },
    {
      "content": "Open = 0,",
      "pos": [
        18305,
        18314
      ]
    },
    {
      "content": "TokenRestricted = 1,",
      "pos": [
        18323,
        18343
      ]
    },
    {
      "content": "IPRestricted = 2,",
      "pos": [
        18352,
        18369
      ]
    },
    {
      "content": "}",
      "pos": [
        18374,
        18375
      ]
    },
    {
      "pos": [
        18380,
        18437
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"ContentKeyDeliveryType\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>ContentKeyDeliveryType"
    },
    {
      "pos": [
        18581,
        18612
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"TokenType\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>TokenType"
    },
    {
      "content": "后续步骤",
      "pos": [
        18819,
        18823
      ]
    },
    {
      "content": "在配置内容密钥的授权策略后，请转到<bpt id=\"p1\">[</bpt>如何配置资产传送策略<ept id=\"p1\">](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)</ept>主题。",
      "pos": [
        18824,
        18935
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"使用安装适用于 .NET 的媒体服务 SDK 配置内容密钥授权策略\" \n    description=\"了解如何使用适用于 .NET 的媒体服务 SDK 配置内容密钥的授权策略。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako,Mingfeiy\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"\n    wacn.date=\"12/31/2015\"/>\n\n\n\n#动态加密：配置内容密钥授权策略 \n[AZURE.INCLUDE [media-services-selector-content-key-auth-policy](../includes/media-services-selector-content-key-auth-policy.md)]\n\n##概述\n\n借助 Azure 媒体服务，你可以传送使用高级加密标准 (AES)（使用 128 位加密密钥）和/或 PlayReady DRM 动态加密的内容。媒体服务还提供了用于向已授权客户端传送密钥和 PlayReady 许可证的服务。\n\n当前你可以加密以下流格式：HLS、MPEG DASH 和平滑流。无法加密 HDS 流格式或渐进式下载。\n\n如果你需要媒体服务来加密资产，则需要将加密密钥（**CommonEncryption** 或 **EnvelopeEncryption**）与资产相关联（如[此处](/documentation/articles/media-services-dotnet-create-contentkey)所述），并且配置密钥的授权策略（如本文所述）。\n\n当播放器请求流时，媒体服务将使用指定的密钥通过 AES 或 PlayReady 加密来动态加密你的内容。为了解密流，播放器将从密钥传送服务请求密钥。为了确定用户是否被授权获取密钥，服务将评估你为密钥指定的授权策略。\n\n媒体服务支持通过多种方式对发出密钥请求的用户进行身份验证。内容密钥授权策略可能受到一种或多种授权限制：**开放** 或 **令牌** 限制。令牌限制策略必须附带由安全令牌服务 (STS) 颁发的令牌。媒体服务支持采用 **简单 Web 令牌** ([SWT](https://msdn.microsoft.com/zh-cn/library/gg185950.aspx#BKMK_2)) 格式和 **JSON Web 令牌** (JWT) 格式的令牌。\n\n媒体服务不提供安全令牌服务。你可以创建自定义 STS 或利用 Azure ACS 来颁发令牌。必须将 STS 配置为创建令牌，该令牌使用指定密钥以及你在令牌限制配置中指定的颁发声明进行签名（如本文所述）。如果令牌有效，而且令牌中的声明与为内容密钥配置的声明相匹配，则媒体服务密钥传送服务会将加密密钥返回到客户端。\n\n有关详细信息，请参阅\n\n[JWT 令牌身份验证](http://www.gtrifonov.com/2015/01/03/jwt-token-authentication-in-azure-media-services-and-dynamic-encryption/)\n\n[将基于 Azure 媒体服务 OWIN MVC 的应用与 Azure Active Directory 相集成，并基于 JWT 声明限制内容密钥传送](http://www.gtrifonov.com/2015/01/24/mvc-owin-azure-media-services-ad-integration/)。\n\n[使用 Azure ACS 颁发令牌](http://mingfeiy.com/acs-with-key-services)。\n\n###请注意以下事项：\n\n- 为了能够使用动态打包和动态加密，必须确保至少有一个流式处理保留单位。有关详细信息，请参阅[如何缩放媒体服务](/documentation/articles/media-services-manage-origins#scale_streaming_endpoints)。 \n- 你的资产必须包含一组自适应比特率 MP4 或自适应比特率平滑流文件。有关详细信息，请参阅[对资产进行编码](/documentation/articles/media-services-encode-asset)。  \n- 使用 **AssetCreationOptions.StorageEncrypted** 选项上载资产并对其进行编码。\n- 如果你打算创建需要相同策略配置的多个内容密钥，我们强烈建议你创建单个授权策略，并将其重复用于多个内容密钥。\n- 密钥传送服务将 ContentKeyAuthorizationPolicy 及其相关对象（策略选项和限制）缓存 15 分钟。如果你创建 ContentKeyAuthorizationPolicy 并指定使用“令牌”限制，然后对其进行测试，再将策略更新为“开放”限制，则现有策略切换到“开放”版本的策略需要大约 15 分钟。\n- 如果你添加或更新资产的传送策略，则必须删除现有定位符（如果有）并创建新定位符。\n\n\n##AES-128 动态加密 \n\n###开放限制\n\n开放限制意味着系统会将密钥传送到发出密钥请求的任何用户。此限制可能适用于测试用途。\n\n以下示例创建开放授权策略，并将其添加到内容密钥。\n    \n    static public void AddOpenAuthorizationPolicy(IContentKey contentKey)\n    {\n        // Create ContentKeyAuthorizationPolicy with Open restrictions \n        // and create authorization policy             \n        IContentKeyAuthorizationPolicy policy = _context.\n                                ContentKeyAuthorizationPolicies.\n                                CreateAsync(\"Open Authorization Policy\").Result;\n    \n        List<ContentKeyAuthorizationPolicyRestriction> restrictions =\n            new List<ContentKeyAuthorizationPolicyRestriction>();\n    \n        ContentKeyAuthorizationPolicyRestriction restriction =\n            new ContentKeyAuthorizationPolicyRestriction\n            {\n                Name = \"HLS Open Authorization Policy\",\n                KeyRestrictionType = (int)ContentKeyRestrictionType.Open,\n                Requirements = null // no requirements needed for HLS\n            };\n    \n        restrictions.Add(restriction);\n    \n        IContentKeyAuthorizationPolicyOption policyOption =\n            _context.ContentKeyAuthorizationPolicyOptions.Create(\n            \"policy\", \n            ContentKeyDeliveryType.BaselineHttp, \n            restrictions, \n            \"\");\n    \n        policy.Options.Add(policyOption);\n    \n        // Add ContentKeyAutorizationPolicy to ContentKey\n        contentKey.AuthorizationPolicyId = policy.Id;\n        IContentKey updatedKey = contentKey.UpdateAsync().Result;\n        Console.WriteLine(\"Adding Key to Asset: Key ID is \" + updatedKey.Id);\n    }\n\n\n###令牌限制\n\n本部分介绍如何创建内容密钥授权策略，以及如何将其与内容密钥相关联。授权策略描述了必须达到什么授权要求才能确定用户是否有权接收密钥（例如，“验证密钥”列表是否包含令牌签名时使用的密钥）。\n\n若要配置令牌限制选项，你需要使用 XML 来描述令牌的授权要求。令牌限制配置 XML 必须符合以下 XML 架构。\n\n####<a id=\"schema\"></a>令牌限制架构\n    \n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <xs:schema xmlns:tns=\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\" elementFormDefault=\"qualified\" targetNamespace=\"http://schemas.microsoft.com/Azure/MediaServices/KeyDelivery/TokenRestrictionTemplate/v1\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n      <xs:complexType name=\"TokenClaim\">\n        <xs:sequence>\n          <xs:element name=\"ClaimType\" nillable=\"true\" type=\"xs:string\" />\n          <xs:element minOccurs=\"0\" name=\"ClaimValue\" nillable=\"true\" type=\"xs:string\" />\n        </xs:sequence>\n      </xs:complexType>\n      <xs:element name=\"TokenClaim\" nillable=\"true\" type=\"tns:TokenClaim\" />\n      <xs:complexType name=\"TokenRestrictionTemplate\">\n        <xs:sequence>\n          <xs:element minOccurs=\"0\" name=\"AlternateVerificationKeys\" nillable=\"true\" type=\"tns:ArrayOfTokenVerificationKey\" />\n          <xs:element name=\"Audience\" nillable=\"true\" type=\"xs:anyURI\" />\n          <xs:element name=\"Issuer\" nillable=\"true\" type=\"xs:anyURI\" />\n          <xs:element name=\"PrimaryVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\n          <xs:element minOccurs=\"0\" name=\"RequiredClaims\" nillable=\"true\" type=\"tns:ArrayOfTokenClaim\" />\n        </xs:sequence>\n      </xs:complexType>\n      <xs:element name=\"TokenRestrictionTemplate\" nillable=\"true\" type=\"tns:TokenRestrictionTemplate\" />\n      <xs:complexType name=\"ArrayOfTokenVerificationKey\">\n        <xs:sequence>\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"TokenVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\n        </xs:sequence>\n      </xs:complexType>\n      <xs:element name=\"ArrayOfTokenVerificationKey\" nillable=\"true\" type=\"tns:ArrayOfTokenVerificationKey\" />\n      <xs:complexType name=\"TokenVerificationKey\">\n        <xs:sequence />\n      </xs:complexType>\n      <xs:element name=\"TokenVerificationKey\" nillable=\"true\" type=\"tns:TokenVerificationKey\" />\n      <xs:complexType name=\"ArrayOfTokenClaim\">\n        <xs:sequence>\n          <xs:element minOccurs=\"0\" maxOccurs=\"unbounded\" name=\"TokenClaim\" nillable=\"true\" type=\"tns:TokenClaim\" />\n        </xs:sequence>\n      </xs:complexType>\n      <xs:element name=\"ArrayOfTokenClaim\" nillable=\"true\" type=\"tns:ArrayOfTokenClaim\" />\n      <xs:complexType name=\"SymmetricVerificationKey\">\n        <xs:complexContent mixed=\"false\">\n          <xs:extension base=\"tns:TokenVerificationKey\">\n            <xs:sequence>\n              <xs:element name=\"KeyValue\" nillable=\"true\" type=\"xs:base64Binary\" />\n            </xs:sequence>\n          </xs:extension>\n        </xs:complexContent>\n      </xs:complexType>\n      <xs:element name=\"SymmetricVerificationKey\" nillable=\"true\" type=\"tns:SymmetricVerificationKey\" />\n    </xs:schema>\n\n在配置 **令牌** 限制策略时，必须指定主 **验证密钥**、**颁发者** 和 **受众** 参数。**主验证密钥** 包含用来为令牌签名的的密钥，**颁发者** 是颁发令牌的安全令牌服务。**受众**（有时称为 **范围** ）描述该令牌的意图，或者令牌授权访问的资源。媒体服务密钥交付服务将验证令牌中的这些值是否与模板中的值匹配。\n\n使用 **适用于 .NET 的媒体服务 SDK** 时，可以使用 **TokenRestrictionTemplate** 类来生成限制令牌。以下示例创建包含令牌限制的授权策略。在此示例中，客户端必须出示令牌，其中包含：签名密钥 (VerificationKey)、令牌颁发者和必需的声明。\n    \n    public static string AddTokenRestrictedAuthorizationPolicy(IContentKey contentKey)\n    {\n        string tokenTemplateString = GenerateTokenRequirements();\n    \n        IContentKeyAuthorizationPolicy policy = _context.\n                                ContentKeyAuthorizationPolicies.\n                                CreateAsync(\"HLS token restricted authorization policy\").Result;\n    \n        List<ContentKeyAuthorizationPolicyRestriction> restrictions =\n                new List<ContentKeyAuthorizationPolicyRestriction>();\n    \n        ContentKeyAuthorizationPolicyRestriction restriction =\n                new ContentKeyAuthorizationPolicyRestriction\n                {\n                    Name = \"Token Authorization Policy\",\n                    KeyRestrictionType = (int)ContentKeyRestrictionType.TokenRestricted,\n                    Requirements = tokenTemplateString\n                };\n    \n        restrictions.Add(restriction);\n    \n        //You could have multiple options \n        IContentKeyAuthorizationPolicyOption policyOption =\n            _context.ContentKeyAuthorizationPolicyOptions.Create(\n                \"Token option for HLS\",\n                ContentKeyDeliveryType.BaselineHttp,\n                restrictions,\n                null  // no key delivery data is needed for HLS\n                );\n    \n        policy.Options.Add(policyOption);\n    \n        // Add ContentKeyAutorizationPolicy to ContentKey\n        contentKey.AuthorizationPolicyId = policy.Id;\n        IContentKey updatedKey = contentKey.UpdateAsync().Result;\n        Console.WriteLine(\"Adding Key to Asset: Key ID is \" + updatedKey.Id);\n    \n        return tokenTemplateString;\n    }\n    \n    static private string GenerateTokenRequirements()\n    {\n        TokenRestrictionTemplate template = new TokenRestrictionTemplate(TokenType.SWT);\n    \n        template.PrimaryVerificationKey = new SymmetricVerificationKey();\n        template.AlternateVerificationKeys.Add(new SymmetricVerificationKey());\n            template.Audience = _sampleAudience.ToString();\n            template.Issuer = _sampleIssuer.ToString();\n    \n        template.RequiredClaims.Add(TokenClaim.ContentKeyIdentifierClaim);\n    \n        return TokenRestrictionTemplateSerializer.Serialize(template);\n    }\n\n####<a id=\"test\"></a>测试令牌\n\n若要获取用于密钥授权策略的基于令牌限制的测试令牌，请执行以下操作。\n    \n    // Deserializes a string containing an Xml representation of a TokenRestrictionTemplate\n    // back into a TokenRestrictionTemplate class instance.\n    TokenRestrictionTemplate tokenTemplate =\n        TokenRestrictionTemplateSerializer.Deserialize(tokenTemplateString);\n    \n    // Generate a test token based on the the data in the given TokenRestrictionTemplate.\n    // Note, you need to pass the key id Guid because we specified \n    // TokenClaim.ContentKeyIdentifierClaim in during the creation of TokenRestrictionTemplate.\n    Guid rawkey = EncryptionUtils.GetKeyIdAsGuid(key.Id);\n    \n    //The GenerateTestToken method returns the token without the word “Bearer” in front\n    //so you have to add it in front of the token string. \n    string testToken = TokenRestrictionTemplateSerializer.GenerateTestToken(tokenTemplate, null, rawkey);\n    Console.WriteLine(\"The authorization token is:\\nBearer {0}\", testToken);\n    Console.WriteLine();\n\n\n##PlayReady 动态加密 \n\n媒体服务允许你配置相应的权限和限制，以便在用户尝试播放受保护的内容时，PlayReady DRM 运行时会强制实施这些权限和限制。\n\n使用 PlayReady 保护你的内容时，需要在授权策略中指定的项目之一是用于定义 [PlayReady 许可证模板](/documentation/articles/media-services-playready-license-template-overview)的 XML 字符串。在适用于 .NET 的媒体服务 SDK 中，**PlayReadyLicenseResponseTemplate** 和 **PlayReadyLicenseTemplate** 类将帮助你定义 PlayReady 许可证模板。\n\n###开放限制\n    \n开放限制意味着系统会将密钥传送到发出密钥请求的任何用户。此限制可能适用于测试用途。\n\n以下示例创建开放授权策略，并将其添加到内容密钥。\n\n    static public void AddOpenAuthorizationPolicy(IContentKey contentKey)\n    {\n    \n        // Create ContentKeyAuthorizationPolicy with Open restrictions \n        // and create authorization policy          \n    \n        List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\n        {\n            new ContentKeyAuthorizationPolicyRestriction \n            { \n                Name = \"Open\", \n                KeyRestrictionType = (int)ContentKeyRestrictionType.Open, \n                Requirements = null\n            }\n        };\n    \n        // Configure PlayReady license template.\n        string newLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\n    \n        IContentKeyAuthorizationPolicyOption policyOption =\n            _context.ContentKeyAuthorizationPolicyOptions.Create(\"\",\n                ContentKeyDeliveryType.PlayReadyLicense,\n                    restrictions, newLicenseTemplate);\n    \n        IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\n                    ContentKeyAuthorizationPolicies.\n                    CreateAsync(\"Deliver Common Content Key with no restrictions\").\n                    Result;\n    \n    \n        contentKeyAuthorizationPolicy.Options.Add(policyOption);\n    \n        // Associate the content key authorization policy with the content key.\n        contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\n        contentKey = contentKey.UpdateAsync().Result;\n    }\n\n###令牌限制\n\n若要配置令牌限制选项，你需要使用 XML 来描述令牌的授权要求。令牌限制配置 XML 必须符合[此](#schema)部分中所示的 XML 架构。\n    \n    public static string AddTokenRestrictedAuthorizationPolicy(IContentKey contentKey)\n    {\n        string tokenTemplateString = GenerateTokenRequirements();\n    \n        IContentKeyAuthorizationPolicy policy = _context.\n                                ContentKeyAuthorizationPolicies.\n                                CreateAsync(\"HLS token restricted authorization policy\").Result;\n    \n        List<ContentKeyAuthorizationPolicyRestriction> restrictions = new List<ContentKeyAuthorizationPolicyRestriction>\n        {\n            new ContentKeyAuthorizationPolicyRestriction \n            { \n                Name = \"Token Authorization Policy\", \n                KeyRestrictionType = (int)ContentKeyRestrictionType.TokenRestricted,\n                Requirements = tokenTemplateString, \n            }\n        };\n    \n        // Configure PlayReady license template.\n        string newLicenseTemplate = ConfigurePlayReadyLicenseTemplate();\n    \n        IContentKeyAuthorizationPolicyOption policyOption =\n            _context.ContentKeyAuthorizationPolicyOptions.Create(\"Token option\",\n                ContentKeyDeliveryType.PlayReadyLicense,\n                    restrictions, newLicenseTemplate);\n    \n        IContentKeyAuthorizationPolicy contentKeyAuthorizationPolicy = _context.\n                    ContentKeyAuthorizationPolicies.\n                    CreateAsync(\"Deliver Common Content Key with no restrictions\").\n                    Result;\n                \n        policy.Options.Add(policyOption);\n    \n        // Add ContentKeyAutorizationPolicy to ContentKey\n        contentKeyAuthorizationPolicy.Options.Add(policyOption);\n    \n        // Associate the content key authorization policy with the content key\n        contentKey.AuthorizationPolicyId = contentKeyAuthorizationPolicy.Id;\n        contentKey = contentKey.UpdateAsync().Result;\n    \n        return tokenTemplateString;\n    }\n    \n    static private string GenerateTokenRequirements()\n    {\n    \n        TokenRestrictionTemplate template = new TokenRestrictionTemplate(TokenType.SWT);\n    \n        template.PrimaryVerificationKey = new SymmetricVerificationKey();\n        template.AlternateVerificationKeys.Add(new SymmetricVerificationKey());\n            template.Audience = _sampleAudience.ToString();\n            template.Issuer = _sampleIssuer.ToString();\n    \n    \n        template.RequiredClaims.Add(TokenClaim.ContentKeyIdentifierClaim);\n    \n        return TokenRestrictionTemplateSerializer.Serialize(template);\n    } \n    \n    static private string ConfigurePlayReadyLicenseTemplate()\n    {\n        // The following code configures PlayReady License Template using .NET classes\n        // and returns the XML string.\n\n        //The PlayReadyLicenseResponseTemplate class represents the template for the response sent back to the end user. \n        //It contains a field for a custom data string between the license server and the application \n        //(may be useful for custom app logic) as well as a list of one or more license templates.\n        PlayReadyLicenseResponseTemplate responseTemplate = new PlayReadyLicenseResponseTemplate();\n\n        // The PlayReadyLicenseTemplate class represents a license template for creating PlayReady licenses\n        // to be returned to the end users. \n        //It contains the data on the content key in the license and any rights or restrictions to be \n        //enforced by the PlayReady DRM runtime when using the content key.\n        PlayReadyLicenseTemplate licenseTemplate = new PlayReadyLicenseTemplate();\n        //Configure whether the license is persistent (saved in persistent storage on the client) \n        //or non-persistent (only held in memory while the player is using the license).  \n        licenseTemplate.LicenseType = PlayReadyLicenseType.Nonpersistent;\n       \n        // AllowTestDevices controls whether test devices can use the license or not.  \n        // If true, the MinimumSecurityLevel property of the license\n        // is set to 150.  If false (the default), the MinimumSecurityLevel property of the license is set to 2000.\n        licenseTemplate.AllowTestDevices = true;\n\n\n        // You can also configure the Play Right in the PlayReady license by using the PlayReadyPlayRight class. \n        // It grants the user the ability to playback the content subject to the zero or more restrictions \n        // configured in the license and on the PlayRight itself (for playback specific policy). \n        // Much of the policy on the PlayRight has to do with output restrictions \n        // which control the types of outputs that the content can be played over and \n        // any restrictions that must be put in place when using a given output.\n        // For example, if the DigitalVideoOnlyContentRestriction is enabled, \n        //then the DRM runtime will only allow the video to be displayed over digital outputs \n        //(analog video outputs won't be allowed to pass the content).\n\n        //IMPORTANT: These types of restrictions can be very powerful but can also affect the consumer experience. \n        // If the output protections are configured too restrictive, \n        // the content might be unplayable on some clients. For more information, see the PlayReady Compliance Rules document.\n\n        // For example:\n        //licenseTemplate.PlayRight.AgcAndColorStripeRestriction = new AgcAndColorStripeRestriction(1);\n\n        responseTemplate.LicenseTemplates.Add(licenseTemplate);\n\n        return MediaServicesLicenseTemplateSerializer.Serialize(responseTemplate);\n    }\n\n\n若要获取用于密钥授权策略的基于令牌限制的测试令牌，请参阅[此](#test)部分。\n\n##<a id=\"types\"></a>定义 ContentKeyAuthorizationPolicy 时使用的类型\n\n###<a id=\"ContentKeyRestrictionType\"></a>ContentKeyRestrictionType\n    public enum ContentKeyRestrictionType\n    {\n        Open = 0,\n        TokenRestricted = 1,\n        IPRestricted = 2,\n    }\n\n###<a id=\"ContentKeyDeliveryType\"></a>ContentKeyDeliveryType\n\n    public enum ContentKeyDeliveryType\n    {\n      None = 0,\n      PlayReadyLicense = 1,\n      BaselineHttp = 2,\n      Widevine = 3\n    }\n\n###<a id=\"TokenType\"></a>TokenType\n\n    public enum TokenType\n    {\n        Undefined = 0,\n        SWT = 1,\n        JWT = 2,\n    }\n\n\n\n[AZURE.INCLUDE [media-services-user-voice-include](../includes/media-services-user-voice-include.md)]\n\n\n\n##后续步骤\n在配置内容密钥的授权策略后，请转到[如何配置资产传送策略](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)主题。\n \n\n<!---HONumber=Mooncake_0307_2016-->"
}