{
  "nodes": [
    {
      "content": "使用 .NET SDK 创建频道，以执行从单比特率流到多比特率流的实时编码",
      "pos": [
        28,
        65
      ]
    },
    {
      "content": "本教程将指导你使用 .NET SDK 完成创建频道的步骤，该频道接收单比特率实时流，并将其编码为多比特率流。",
      "pos": [
        85,
        139
      ]
    },
    {
      "content": "使用 .NET SDK 创建频道，以执行从单比特率流到多比特率流的实时编码",
      "pos": [
        366,
        403
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        407,
        423
      ]
    },
    {
      "content": "门户",
      "pos": [
        427,
        429
      ]
    },
    {
      "content": ".NET",
      "pos": [
        519,
        523
      ]
    },
    {
      "content": "REST API",
      "pos": [
        613,
        621
      ]
    },
    {
      "content": "若要完成本教程，你需要一个 Azure 帐户。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 试用<ept id=\"p1\">](/pricing/1rmb-trial/?WT.mc_id=A261C142F)</ept>。",
      "pos": [
        700,
        786
      ]
    },
    {
      "content": "概述",
      "pos": [
        790,
        792
      ]
    },
    {
      "pos": [
        794,
        840
      ],
      "content": "本教程将指导你完成创建<bpt id=\"p1\">**</bpt>频道<ept id=\"p1\">**</ept>的步骤，该频道接收单比特率实时流，并将其编码为多比特率流。"
    },
    {
      "pos": [
        842,
        973
      ],
      "content": "如需与能够进行实时编码的频道相关的更多概念信息，请参阅 <bpt id=\"p1\">[</bpt>使用执行从单比特率到多比特率流的实时编码的频道<ept id=\"p1\">](/documentation/articles/media-services-manage-live-encoder-enabled-channels)</ept>。"
    },
    {
      "content": "常见的实时流方案",
      "pos": [
        978,
        986
      ]
    },
    {
      "content": "以下步骤介绍创建常见的实时流式处理应用程序时涉及的任务。",
      "pos": [
        988,
        1016
      ]
    },
    {
      "pos": [
        1019,
        1106
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 目前，实时事件的最大建议持续时间为 8 小时。如果你需要运行一个需要更长时间的频道，请通过 WindowsAzure.cn 联系 amslived。"
    },
    {
      "pos": [
        1111,
        1313
      ],
      "content": "将视频摄像机连接到计算机。启动并配置可以通过以下协议之一输出单比特率流的本地实时编码器：RTMP、平滑流式处理或 RTP (MPEG-TS)。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 媒体服务 RTMP 支持和实时编码器<ept id=\"p1\">](https://azure.microsoft.com/zh-cn/blog/azure-media-services-rtmp-support-and-live-encoders/)</ept>。"
    },
    {
      "content": "此步骤也可以在创建频道后执行。",
      "pos": [
        1319,
        1334
      ]
    },
    {
      "content": "创建并启动频道。",
      "pos": [
        1339,
        1347
      ]
    },
    {
      "content": "检索频道引入 URL。",
      "pos": [
        1352,
        1363
      ]
    },
    {
      "content": "实时编码器使用引入 URL 将流发送到频道。",
      "pos": [
        1369,
        1391
      ]
    },
    {
      "content": "检索频道预览 URL。",
      "pos": [
        1396,
        1407
      ]
    },
    {
      "content": "使用此 URL 来验证频道是否正常接收实时流。",
      "pos": [
        1413,
        1436
      ]
    },
    {
      "content": "创建资源。",
      "pos": [
        1441,
        1446
      ]
    },
    {
      "content": "如果你想让资源在播放期间进行动态加密，请执行以下操作：",
      "pos": [
        1450,
        1477
      ]
    },
    {
      "content": "创建内容密钥。",
      "pos": [
        1481,
        1488
      ]
    },
    {
      "content": "配置内容密钥授权策略。",
      "pos": [
        1492,
        1503
      ]
    },
    {
      "content": "配置资产传送策略（由动态打包和动态加密使用）。",
      "pos": [
        1507,
        1530
      ]
    },
    {
      "content": "创建节目并指定使用你创建的资产。",
      "pos": [
        1534,
        1550
      ]
    },
    {
      "content": "通过创建按需定位器发布与节目关联的资产。",
      "pos": [
        1554,
        1574
      ]
    },
    {
      "content": "确保你要从中以流形式传输内容的流式传输终结点上至少有一个流式传输保留单元。",
      "pos": [
        1580,
        1617
      ]
    },
    {
      "content": "在准备好开始流式传输和存档时，启动节目。",
      "pos": [
        1622,
        1642
      ]
    },
    {
      "content": "（可选）可以向实时编码器发信号，以启动广告。将广告插入到输出流中。",
      "pos": [
        1646,
        1679
      ]
    },
    {
      "content": "在要停止对事件进行流式传输和存档时，停止节目。",
      "pos": [
        1683,
        1706
      ]
    },
    {
      "content": "删除节目（并选择性地删除资产）。",
      "pos": [
        1710,
        1726
      ]
    },
    {
      "content": "学习内容",
      "pos": [
        1731,
        1735
      ]
    },
    {
      "content": "本主题演示如何使用适用于 .NET 的媒体服务 SDK 对频道和节目执行不同操作。由于许多操作都长时间运行，因此将使用管理长时间运行的操作的 .NET API。",
      "pos": [
        1737,
        1817
      ]
    },
    {
      "content": "本主题说明如何执行以下任务：",
      "pos": [
        1819,
        1833
      ]
    },
    {
      "content": "创建并启动通道。将使用长时间运行的 API。",
      "pos": [
        1838,
        1860
      ]
    },
    {
      "content": "获取频道引入（输入）终结点。应将此终结点提供给可以发送单比特率实时流的编码器。",
      "pos": [
        1864,
        1903
      ]
    },
    {
      "content": "获取预览终结点。此终结点用于预览流。",
      "pos": [
        1907,
        1925
      ]
    },
    {
      "content": "创建将用于存储你的内容的资源。还应配置资源传送策略，如此示例中所示。",
      "pos": [
        1929,
        1963
      ]
    },
    {
      "content": "创建节目并指定使用你先前创建的资源。启动该节目。将使用长时间运行的 API。",
      "pos": [
        1967,
        2005
      ]
    },
    {
      "content": "为资源创建定位器，以便发布内容，并可以将内容流式传输到客户端。",
      "pos": [
        2009,
        2040
      ]
    },
    {
      "content": "显示和隐藏清单。启动和停止广告。将使用长时间运行的 API。",
      "pos": [
        2044,
        2074
      ]
    },
    {
      "content": "清理频道及所有关联的资源。",
      "pos": [
        2078,
        2091
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        2096,
        2100
      ]
    },
    {
      "content": "以下是完成本教程所需具备的条件。",
      "pos": [
        2102,
        2118
      ]
    },
    {
      "content": "若要完成本教程，你需要一个 Azure 帐户。",
      "pos": [
        2122,
        2145
      ]
    },
    {
      "pos": [
        2156,
        2336
      ],
      "content": "如果你没有帐户，可以创建一个试用帐户，只需几分钟即可完成。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 试用<ept id=\"p1\">](/pricing/1rmb-trial/?WT.mc_id=A261C142F)</ept>。获取可用来尝试付费版 Azure 服务的信用额度。即使在信用额度用完之后，你也可以保留该帐户，使用那些免费的 Azure 服务和功能，例如 Azure 中的 Web 应用功能。"
    },
    {
      "pos": [
        2339,
        2424
      ],
      "content": "一个媒体服务帐户。若要创建媒体服务帐户，请参阅<bpt id=\"p1\">[</bpt>创建帐户<ept id=\"p1\">](/documentation/articles/media-services-create-account)</ept>。"
    },
    {
      "content": "Visual Studio 2010 SP1（Professional、Premium、Ultimate 或 Express）或更高版本。",
      "pos": [
        2427,
        2496
      ]
    },
    {
      "content": "必须使用适用于 .NET 的媒体服务 SDK 版本 3.2.0.0 或更高版本。",
      "pos": [
        2499,
        2539
      ]
    },
    {
      "content": "可以发送单比特率实时流的摄像头和编码器。",
      "pos": [
        2542,
        2562
      ]
    },
    {
      "content": "注意事项",
      "pos": [
        2566,
        2570
      ]
    },
    {
      "content": "目前，实时事件的最大建议持续时间为 8 小时。如果你需要运行一个需要更长时间的频道，请通过 WindowsAzure.cn 联系 amslived。",
      "pos": [
        2574,
        2648
      ]
    },
    {
      "content": "确保你要从中以流形式传输内容的流式传输终结点上至少有一个流式传输保留单元。",
      "pos": [
        2651,
        2688
      ]
    },
    {
      "content": "使用用于 .NET 的媒体服务 SDK 进行开发设置",
      "pos": [
        2693,
        2719
      ]
    },
    {
      "content": "使用 Visual Studio 创建控制台应用程序。",
      "pos": [
        2724,
        2751
      ]
    },
    {
      "content": "使用媒体服务 NuGet 包将适用于 .NET 的媒体服务 SDK 添加到控制台应用程序。",
      "pos": [
        2755,
        2800
      ]
    },
    {
      "content": "连接到媒体服务",
      "pos": [
        2804,
        2811
      ]
    },
    {
      "content": "最佳做法是，应使用 app.config 文件来存储媒体服务名称和帐户密钥。",
      "pos": [
        2812,
        2850
      ]
    },
    {
      "pos": [
        2853,
        2946
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要查找名称和密钥值，请转到 Azure 管理门户，选择你的媒体服务帐户，然后单击门户窗口底部的“管理密钥”图标。单击每个文本框旁边的图标将值复制到系统剪贴板中。"
    },
    {
      "content": "在 app.config 文件中添加 appSettings 部分，并设置媒体服务帐户名称和帐户密钥的值。",
      "pos": [
        2948,
        3001
      ]
    },
    {
      "content": "代码示例",
      "pos": [
        3293,
        3297
      ]
    },
    {
      "content": "想要寻找其他内容吗？",
      "pos": [
        20078,
        20088
      ]
    },
    {
      "content": "如果本主题不包含你所期待的内容、缺少某些内容，或在其他方面不符合你的需求，请使用下面的 Disqus 会话向我们提供反馈。",
      "pos": [
        20090,
        20151
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"使用 .NET SDK 创建频道，以执行从单比特率流到多比特率流的实时编码\" \n    description=\"本教程将指导你使用 .NET SDK 完成创建频道的步骤，该频道接收单比特率实时流，并将其编码为多比特率流。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako,anilmur\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n\n#使用 .NET SDK 创建频道，以执行从单比特率流到多比特率流的实时编码\n\n> [AZURE.SELECTOR]\n- [门户](/documentation/articles/media-services-portal-creating-live-encoder-enabled-channel)\n- [.NET](/documentation/articles/media-services-dotnet-creating-live-encoder-enabled-channel)\n- [REST API](https://msdn.microsoft.com/zh-cn/library/azure/dn783458.aspx)\n\n>[AZURE.NOTE]\n若要完成本教程，你需要一个 Azure 帐户。有关详细信息，请参阅 [Azure 试用](/pricing/1rmb-trial/?WT.mc_id=A261C142F)。\n\n##概述\n\n本教程将指导你完成创建**频道**的步骤，该频道接收单比特率实时流，并将其编码为多比特率流。\n\n如需与能够进行实时编码的频道相关的更多概念信息，请参阅 [使用执行从单比特率到多比特率流的实时编码的频道](/documentation/articles/media-services-manage-live-encoder-enabled-channels)。\n\n\n##常见的实时流方案\n\n以下步骤介绍创建常见的实时流式处理应用程序时涉及的任务。\n\n>[AZURE.NOTE] 目前，实时事件的最大建议持续时间为 8 小时。如果你需要运行一个需要更长时间的频道，请通过 WindowsAzure.cn 联系 amslived。\n\n1. 将视频摄像机连接到计算机。启动并配置可以通过以下协议之一输出单比特率流的本地实时编码器：RTMP、平滑流式处理或 RTP (MPEG-TS)。有关详细信息，请参阅 [Azure 媒体服务 RTMP 支持和实时编码器](https://azure.microsoft.com/zh-cn/blog/azure-media-services-rtmp-support-and-live-encoders/)。\n\n    此步骤也可以在创建频道后执行。\n\n1. 创建并启动频道。\n\n1. 检索频道引入 URL。\n\n    实时编码器使用引入 URL 将流发送到频道。\n\n1. 检索频道预览 URL。\n\n    使用此 URL 来验证频道是否正常接收实时流。\n\n2. 创建资源。\n3. 如果你想让资源在播放期间进行动态加密，请执行以下操作：\n1. 创建内容密钥。\n1. 配置内容密钥授权策略。\n1. 配置资产传送策略（由动态打包和动态加密使用）。\n3. 创建节目并指定使用你创建的资产。\n1. 通过创建按需定位器发布与节目关联的资产。\n\n    确保你要从中以流形式传输内容的流式传输终结点上至少有一个流式传输保留单元。\n\n1. 在准备好开始流式传输和存档时，启动节目。\n2. （可选）可以向实时编码器发信号，以启动广告。将广告插入到输出流中。\n1. 在要停止对事件进行流式传输和存档时，停止节目。\n1. 删除节目（并选择性地删除资产）。\n\n## 学习内容\n\n本主题演示如何使用适用于 .NET 的媒体服务 SDK 对频道和节目执行不同操作。由于许多操作都长时间运行，因此将使用管理长时间运行的操作的 .NET API。\n\n本主题说明如何执行以下任务：\n\n1. 创建并启动通道。将使用长时间运行的 API。\n1. 获取频道引入（输入）终结点。应将此终结点提供给可以发送单比特率实时流的编码器。\n1. 获取预览终结点。此终结点用于预览流。\n1. 创建将用于存储你的内容的资源。还应配置资源传送策略，如此示例中所示。\n1. 创建节目并指定使用你先前创建的资源。启动该节目。将使用长时间运行的 API。\n1. 为资源创建定位器，以便发布内容，并可以将内容流式传输到客户端。\n1. 显示和隐藏清单。启动和停止广告。将使用长时间运行的 API。\n1. 清理频道及所有关联的资源。\n\n\n##先决条件\n\n以下是完成本教程所需具备的条件。\n\n- 若要完成本教程，你需要一个 Azure 帐户。 \n    \n    如果你没有帐户，可以创建一个试用帐户，只需几分钟即可完成。有关详细信息，请参阅 [Azure 试用](/pricing/1rmb-trial/?WT.mc_id=A261C142F)。获取可用来尝试付费版 Azure 服务的信用额度。即使在信用额度用完之后，你也可以保留该帐户，使用那些免费的 Azure 服务和功能，例如 Azure 中的 Web 应用功能。\n- 一个媒体服务帐户。若要创建媒体服务帐户，请参阅[创建帐户](/documentation/articles/media-services-create-account)。\n- Visual Studio 2010 SP1（Professional、Premium、Ultimate 或 Express）或更高版本。\n- 必须使用适用于 .NET 的媒体服务 SDK 版本 3.2.0.0 或更高版本。\n- 可以发送单比特率实时流的摄像头和编码器。\n\n##注意事项\n\n- 目前，实时事件的最大建议持续时间为 8 小时。如果你需要运行一个需要更长时间的频道，请通过 WindowsAzure.cn 联系 amslived。\n- 确保你要从中以流形式传输内容的流式传输终结点上至少有一个流式传输保留单元。\n\n\n##使用用于 .NET 的媒体服务 SDK 进行开发设置\n\n1. 使用 Visual Studio 创建控制台应用程序。\n1. 使用媒体服务 NuGet 包将适用于 .NET 的媒体服务 SDK 添加到控制台应用程序。\n\n##连接到媒体服务\n最佳做法是，应使用 app.config 文件来存储媒体服务名称和帐户密钥。\n\n>[AZURE.NOTE]若要查找名称和密钥值，请转到 Azure 管理门户，选择你的媒体服务帐户，然后单击门户窗口底部的“管理密钥”图标。单击每个文本框旁边的图标将值复制到系统剪贴板中。\n\n在 app.config 文件中添加 appSettings 部分，并设置媒体服务帐户名称和帐户密钥的值。\n\n\n    <?xml version=\"1.0\"?>\n    <configuration>\n      <appSettings>\n          <add key=\"MediaServicesAccountName\" value=\"YouMediaServicesAccountName\" />\n          <add key=\"MediaServicesAccountKey\" value=\"YouMediaServicesAccountKey\" />\n      </appSettings>\n    </configuration>\n     \n    \n##代码示例\n\n    using System;\n    using System.Collections.Generic;\n    using System.Configuration;\n    using System.IO;\n    using System.Linq;\n    using System.Net;\n    using Microsoft.WindowsAzure.MediaServices.Client;\n    using Microsoft.WindowsAzure.MediaServices.Client.DynamicEncryption;\n    \n    namespace EncodeLiveStreamWithAmsClear\n    {\n        class Program\n        {\n            private const string ChannelName = \"channel001\";\n            private const string AssetlName = \"asset001\";\n            private const string ProgramlName = \"program001\";\n    \n            // Read values from the App.config file.\n            private static readonly string _mediaServicesAccountName =\n                ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n            private static readonly string _mediaServicesAccountKey =\n                ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n    \n            // Field for service context.\n            private static CloudMediaContext _context = null;\n            private static MediaServicesCredentials _cachedCredentials = null;\n    \n    \n            static void Main(string[] args)\n            {\n                // Create and cache the Media Services credentials in a static class variable.\n                _cachedCredentials = new MediaServicesCredentials(\n                                _mediaServicesAccountName,\n                                _mediaServicesAccountKey);\n                // Used the cached credentials to create CloudMediaContext.\n                _context = new CloudMediaContext(_cachedCredentials);\n    \n                IChannel channel = CreateAndStartChannel();\n    \n                // The channel's input endpoint:\n                string ingestUrl = channel.Input.Endpoints.FirstOrDefault().Url.ToString();\n    \n                Console.WriteLine(\"Intest URL: {0}\", ingestUrl);\n    \n    \n                // Use the previewEndpoint to preview and verify \n                // that the input from the encoder is actually reaching the Channel. \n                string previewEndpoint = channel.Preview.Endpoints.FirstOrDefault().Url.ToString();\n    \n                Console.WriteLine(\"Preview URL: {0}\", previewEndpoint);\n    \n                // When Live Encoding is enabled, you can now get a preview of the live feed as it reaches the Channel. \n                // This can be a valuable tool to check whether your live feed is actually reaching the Channel. \n                // The thumbnail is exposed via the same end-point as the Channel Preview URL.\n                string thumbnailUri = new UriBuilder\n                {\n                    Scheme = Uri.UriSchemeHttps,\n                    Host = channel.Preview.Endpoints.FirstOrDefault().Url.Host,\n                    Path = \"thumbnails/input.jpg\"\n                }.Uri.ToString();\n    \n                Console.WriteLine(\"Thumbain URL: {0}\", thumbnailUri);\n    \n                // Once you previewed your stream and verified that it is flowing into your Channel, \n                // you can create an event by creating an Asset, Program, and Streaming Locator. \n                IAsset asset = CreateAndConfigureAsset();\n    \n                IProgram program = CreateAndStartProgram(channel, asset);\n    \n                ILocator locator = CreateLocatorForAsset(program.Asset, program.ArchiveWindowLength);\n    \n                // You can use slates and ads only if the channel type is Standard.  \n                StartStopAdsSlates(channel);\n    \n                // Once you are done streaming, clean up your resources.\n                Cleanup(channel);\n    \n            }\n    \n            public static IChannel CreateAndStartChannel()\n            {\n                var channelInput = CreateChannelInput();\n                var channePreview = CreateChannelPreview();\n                var channelEncoding = CreateChannelEncoding();\n    \n    \n                ChannelCreationOptions options = new ChannelCreationOptions\n                {\n                    EncodingType = ChannelEncodingType.Standard,\n                    Name = ChannelName,\n                    Input = channelInput,\n                    Preview = channePreview,\n                    Encoding = channelEncoding\n                };\n    \n                Log(\"Creating channel\");\n                IOperation channelCreateOperation = _context.Channels.SendCreateOperation(options);\n                string channelId = TrackOperation(channelCreateOperation, \"Channel create\");\n    \n                IChannel channel = _context.Channels.Where(c => c.Id == channelId).FirstOrDefault();\n    \n                Log(\"Starting channel\");\n                var channelStartOperation = channel.SendStartOperation();\n                TrackOperation(channelStartOperation, \"Channel start\");\n    \n                return channel;\n            }\n    \n            /// <summary>\n            /// Create channel input, used in channel creation options. \n            /// </summary>\n            /// <returns></returns>\n            private static ChannelInput CreateChannelInput()\n            {\n                return new ChannelInput\n                {\n                    StreamingProtocol = StreamingProtocol.RTPMPEG2TS,\n                    AccessControl = new ChannelAccessControl\n                    {\n                        IPAllowList = new List<IPRange>\n                        {\n                            new IPRange\n                            {\n                                Name = \"TestChannelInput001\",\n                                Address = IPAddress.Parse(\"0.0.0.0\"),\n                                SubnetPrefixLength = 0\n                            }\n                        }\n                    }\n                };\n            }\n    \n            /// <summary>\n            /// Create channel preview, used in channel creation options. \n            /// </summary>\n            /// <returns></returns>\n            private static ChannelPreview CreateChannelPreview()\n            {\n                return new ChannelPreview\n                {\n                    AccessControl = new ChannelAccessControl\n                    {\n                        IPAllowList = new List<IPRange>\n                        {\n                            new IPRange\n                            {\n                                Name = \"TestChannelPreview001\",\n                                Address = IPAddress.Parse(\"0.0.0.0\"),\n                                SubnetPrefixLength = 0\n                            }\n                        }\n                    }\n                };\n            }\n    \n            /// <summary>\n            /// Create channel encoding, used in channel creation options. \n            /// </summary>\n            /// <returns></returns>\n            private static ChannelEncoding CreateChannelEncoding()\n            {\n                return new ChannelEncoding\n                {\n                    SystemPreset = \"Default720p\",\n                    IgnoreCea708ClosedCaptions = false,\n                    AdMarkerSource = AdMarkerSource.Api,\n                    // You can only set audio if streaming protocol is set to StreamingProtocol.RTPMPEG2TS.\n                    AudioStreams = new List<AudioStream> { new AudioStream { Index = 103, Language = \"eng\" } }.AsReadOnly()\n                };\n            }\n    \n            /// <summary>\n            /// Create an asset and configure asset delivery policies.\n            /// </summary>\n            /// <returns></returns>\n            public static IAsset CreateAndConfigureAsset()\n            {\n                IAsset asset = _context.Assets.Create(AssetlName, AssetCreationOptions.None);\n    \n                IAssetDeliveryPolicy policy =\n                    _context.AssetDeliveryPolicies.Create(\"Clear Policy\",\n                    AssetDeliveryPolicyType.NoDynamicEncryption,\n                    AssetDeliveryProtocol.HLS | AssetDeliveryProtocol.SmoothStreaming | AssetDeliveryProtocol.Dash, null);\n    \n                asset.DeliveryPolicies.Add(policy);\n    \n                return asset;\n            }\n    \n            /// <summary>\n            /// Create a Program on the Channel. You can have multiple Programs that overlap or are sequential;\n            /// however each Program must have a unique name within your Media Services account.\n            /// </summary>\n            /// <param name=\"channel\"></param>\n            /// <param name=\"asset\"></param>\n            /// <returns></returns>\n            public static IProgram CreateAndStartProgram(IChannel channel, IAsset asset)\n            {\n                IProgram program = channel.Programs.Create(ProgramlName, TimeSpan.FromHours(3), asset.Id);\n                Log(\"Program created\", program.Id);\n    \n                Log(\"Starting program\");\n                var programStartOperation = program.SendStartOperation();\n                TrackOperation(programStartOperation, \"Program start\");\n    \n                return program;\n            }\n    \n            /// <summary>\n            /// Create locators in order to be able to publish and stream the video.\n            /// </summary>\n            /// <param name=\"asset\"></param>\n            /// <param name=\"ArchiveWindowLength\"></param>\n            /// <returns></returns>\n            public static ILocator CreateLocatorForAsset(IAsset asset, TimeSpan ArchiveWindowLength)\n            {\n                // You cannot create a streaming locator using an AccessPolicy that includes write or delete permissions.            \n                var locator = _context.Locators.CreateLocator\n                    (\n                        LocatorType.OnDemandOrigin,\n                        asset,\n                        _context.AccessPolicies.Create\n                            (\n                                \"Live Stream Policy\",\n                                ArchiveWindowLength,\n                                AccessPermissions.Read\n                            )\n                    );\n    \n                return locator;\n            }\n    \n            /// <summary>\n            /// Perform operations on slates.\n            /// </summary>\n            /// <param name=\"channel\"></param>\n            public static void StartStopAdsSlates(IChannel channel)\n            {\n                int cueId = new Random().Next(int.MaxValue);\n                var path = Path.GetFullPath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @\"..\\\\..\\\\SlateJPG\\\\DefaultAzurePortalSlate.jpg\"));\n    \n                Log(\"Creating asset\");\n                var slateAsset = _context.Assets.Create(\"Slate test asset \" + DateTime.Now.ToString(\"yyyy-MM-dd HH-mm\"), AssetCreationOptions.None);\n                Log(\"Slate asset created\", slateAsset.Id);\n    \n                Log(\"Uploading file\");\n                var assetFile = slateAsset.AssetFiles.Create(\"DefaultAzurePortalSlate.jpg\");\n                assetFile.Upload(path);\n                assetFile.IsPrimary = true;\n                assetFile.Update();\n    \n                Log(\"Showing slate\");\n                var showSlateOpeartion = channel.SendShowSlateOperation(TimeSpan.FromMinutes(1), slateAsset.Id);\n                TrackOperation(showSlateOpeartion, \"Show slate\");\n    \n                Log(\"Hiding slate\");\n                var hideSlateOperation = channel.SendHideSlateOperation();\n                TrackOperation(hideSlateOperation, \"Hide slate\");\n    \n                Log(\"Starting ad\");\n                var startAdOperation = channel.SendStartAdvertisementOperation(TimeSpan.FromMinutes(1), cueId, false);\n                TrackOperation(startAdOperation, \"Start ad\");\n    \n                Log(\"Ending ad\");\n                var endAdOperation = channel.SendEndAdvertisementOperation(cueId);\n                TrackOperation(endAdOperation, \"End ad\");\n    \n                Log(\"Deleting slate asset\");\n                slateAsset.Delete();\n            }\n    \n            /// <summary>\n            /// Clean up resources associated with the channel.\n            /// </summary>\n            /// <param name=\"channel\"></param>\n            public static void Cleanup(IChannel channel)\n            {\n                IAsset asset;\n                if (channel != null)\n                {\n                    foreach (var program in channel.Programs)\n                    {\n                        asset = _context.Assets.Where(se => se.Id == program.AssetId)\n                                                .FirstOrDefault();\n    \n                        Log(\"Stopping program\");\n                        var programStopOperation = program.SendStopOperation();\n                        TrackOperation(programStopOperation, \"Program stop\");\n    \n                        program.Delete();\n    \n                        if (asset != null)\n                        {\n                            Log(\"Deleting locators\");\n                            foreach (var l in asset.Locators)\n                                l.Delete();\n    \n                            Log(\"Deleting asset\");\n                            asset.Delete();\n                        }\n                    }\n    \n                    Log(\"Stopping channel\");\n                    var channelStopOperation = channel.SendStopOperation();\n                    TrackOperation(channelStopOperation, \"Channel stop\");\n    \n                    Log(\"Deleting channel\");\n                    var channelDeleteOperation = channel.SendDeleteOperation();\n                    TrackOperation(channelDeleteOperation, \"Channel delete\");\n                }\n            }\n    \n    \n            /// <summary>\n            /// Track long running operations.\n            /// </summary>\n            /// <param name=\"operation\"></param>\n            /// <param name=\"description\"></param>\n            /// <returns></returns>\n            public static string TrackOperation(IOperation operation, string description)\n            {\n                string entityId = null;\n                bool isCompleted = false;\n    \n                Log(\"starting to track \", null, operation.Id);\n                while (isCompleted == false)\n                {\n                    operation = _context.Operations.GetOperation(operation.Id);\n                    isCompleted = IsCompleted(operation, out entityId);\n                    System.Threading.Thread.Sleep(TimeSpan.FromSeconds(30));\n                }\n                // If we got here, the operation succeeded.\n                Log(description + \" in completed\", operation.TargetEntityId, operation.Id);\n    \n                return entityId;\n            }\n    \n            /// <summary> \n            /// Checks if the operation has been completed. \n            /// If the operation succeeded, the created entity Id is returned in the out parameter.\n            /// </summary> \n            /// <param name=\"operationId\">The operation Id.</param> \n            /// <param name=\"channel\">\n            /// If the operation succeeded, \n            /// the entity Id associated with the sucessful operation is returned in the out parameter.</param>\n            /// <returns>Returns false if the operation is still in progress; otherwise, true.</returns> \n            private static bool IsCompleted(IOperation operation, out string entityId)\n            {\n    \n                bool completed = false;\n    \n                entityId = null;\n    \n                switch (operation.State)\n                {\n                    case OperationState.Failed:\n                        // Handle the failure. \n                        // For example, throw an exception. \n                        // Use the following information in the exception: operationId, operation.ErrorMessage.\n                        Log(\"operation failed\", operation.TargetEntityId, operation.Id);\n                        break;\n                    case OperationState.Succeeded:\n                        completed = true;\n                        entityId = operation.TargetEntityId;\n                        break;\n                    case OperationState.InProgress:\n                        completed = false;\n                        Log(\"operation in progress\", operation.TargetEntityId, operation.Id);\n                        break;\n                }\n                return completed;\n            }\n    \n    \n            private static void Log(string action, string entityId = null, string operationId = null)\n            {\n                Console.WriteLine(\n                    \"{0,-21}{1,-51}{2,-51}{3,-51}\",\n                    DateTime.Now.ToString(\"yyyy'-'MM'-'dd HH':'mm':'ss\"),\n                    action,\n                    entityId ?? string.Empty,\n                    operationId ?? string.Empty);\n            }\n        }\n    }   \n\n\n[AZURE.INCLUDE [media-services-user-voice-include](../includes/media-services-user-voice-include.md)]\n\n### 想要寻找其他内容吗？\n\n如果本主题不包含你所期待的内容、缺少某些内容，或在其他方面不符合你的需求，请使用下面的 Disqus 会话向我们提供反馈。\n\n<!---HONumber=Mooncake_0307_2016-->"
}