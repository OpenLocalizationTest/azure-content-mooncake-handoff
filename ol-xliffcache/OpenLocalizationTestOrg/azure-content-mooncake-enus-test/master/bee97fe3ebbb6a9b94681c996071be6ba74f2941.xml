{
  "nodes": [
    {
      "content": "使用 C# 查询 SQL 数据库 | Azure",
      "pos": [
        27,
        51
      ]
    },
    {
      "content": "有关使用 IP 地址、连接字符串、安全登录配置文件和免费 Visual Studio 让 C# 程序能够使用 ADO.NET 连接到云中的 Azure SQL 数据库的详细信息。",
      "pos": [
        70,
        159
      ]
    },
    {
      "content": "使用 C&amp;#x23; 连接和查询 SQL 数据库",
      "pos": [
        374,
        398
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        402,
        418
      ]
    },
    {
      "content": "C",
      "pos": [
        422,
        423
      ]
    },
    {
      "content": "SSMS",
      "pos": [
        481,
        485
      ]
    },
    {
      "content": "Excel",
      "pos": [
        547,
        552
      ]
    },
    {
      "content": "你想要编写一个 C# 程序，该程序使用 ADO.NET 连接到云中的 Azure SQL 数据库。",
      "pos": [
        607,
        656
      ]
    },
    {
      "content": "本主题为那些不熟悉 Azure SQL 数据库和 C# 的用户介绍每个步骤。对于熟悉 Microsoft SQL Server 和 C# 的用户，可以跳过一些步骤，重点关注那些特定于 SQL 数据库的步骤。",
      "pos": [
        658,
        761
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        767,
        771
      ]
    },
    {
      "content": "若要运行 C# 代码示例，你必须拥有：",
      "pos": [
        774,
        793
      ]
    },
    {
      "pos": [
        798,
        843
      ],
      "content": "Azure 帐户和订阅。你可以注册<bpt id=\"p1\">[</bpt>试用版<ept id=\"p1\">](/pricing/1rmb-trial/)</ept>。"
    },
    {
      "pos": [
        848,
        892
      ],
      "content": "Azure SQL 数据库服务的 <bpt id=\"p1\">**</bpt>AdventureWorksLT<ept id=\"p1\">**</ept> 演示数据库。"
    },
    {
      "pos": [
        896,
        961
      ],
      "content": "在几分钟内<bpt id=\"p1\">[</bpt>创建演示数据库<ept id=\"p1\">](/documentation/articles/sql-database-get-started)</ept>。"
    },
    {
      "pos": [
        966,
        1044
      ],
      "content": "Visual Studio 2013 Update 4（或更高版本）。Microsoft 现在<bpt id=\"p1\">*</bpt>免费<ept id=\"p1\">*</ept>提供 Visual Studio Community。"
    },
    {
      "content": "Visual Studio Community，下载",
      "pos": [
        1049,
        1075
      ]
    },
    {
      "content": "Visual Studio 的更多免费选项",
      "pos": [
        1146,
        1167
      ]
    },
    {
      "pos": [
        1240,
        1340
      ],
      "content": "或者，使用本主题中稍后介绍的<bpt id=\"p1\">[</bpt>步骤<ept id=\"p1\">](#InstallVSForFree)</ept>，在 <bpt id=\"p2\">[</bpt>Azure 门户<ept id=\"p2\">](https://manage.windowsazure.cn)</ept>中安装 Visual Studio。"
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        1398,
        1404
      ]
    },
    {
      "content": "步骤 1：免费安装 Visual Studio Community",
      "pos": [
        1409,
        1442
      ]
    },
    {
      "content": "如果你需要安装 Visual Studio，可以：",
      "pos": [
        1445,
        1470
      ]
    },
    {
      "content": "使用浏览器导航到 Visual Studio 产品网页（该网页提供免费下载及其他选项），免费安装 Visual Studio Community；或者",
      "pos": [
        1474,
        1549
      ]
    },
    {
      "pos": [
        1552,
        1619
      ],
      "content": "让 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>指导你找到下载网页，这将在后面的部分进行介绍。"
    },
    {
      "content": "通过 Azure 门户安装 Visual Studio",
      "pos": [
        1626,
        1653
      ]
    },
    {
      "pos": [
        1659,
        1744
      ],
      "content": "通过 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>（网址为 https://manage.windowsazure.cn )登录。"
    },
    {
      "content": "单击“浏览*全部”&gt;“SQL 数据库”。将打开边栏选项卡搜索数据库。",
      "pos": [
        1749,
        1783
      ]
    },
    {
      "pos": [
        1788,
        1835
      ],
      "content": "在顶部附近的筛选器文本框中，开始键入 <bpt id=\"p1\">**</bpt>AdventureWorksLT<ept id=\"p1\">**</ept> 数据库的名称。"
    },
    {
      "content": "当你在服务器上看到你的数据库行时，请单击该行。将为你的数据库打开边栏选项卡。",
      "pos": [
        1840,
        1878
      ]
    },
    {
      "content": "为方便起见，可单击以前每个边栏选项卡上的最小化控件。",
      "pos": [
        1883,
        1909
      ]
    },
    {
      "content": "单击数据库边栏选项卡顶部附近的“在 Visual Studio 中打开”按钮。将打开一个关于 Visual Studio 的新边栏选项卡，其中包含指向 Visual Studio 安装位置的链接。",
      "pos": [
        1914,
        2012
      ]
    },
    {
      "content": "“在 Visual Studio 中打开”按钮",
      "pos": [
        2021,
        2044
      ]
    },
    {
      "content": "单击“Community (免费)”链接或类似的链接。将添加新的网页。",
      "pos": [
        2079,
        2114
      ]
    },
    {
      "content": "使用新网页上的链接安装 Visual Studio。",
      "pos": [
        2119,
        2145
      ]
    },
    {
      "content": "安装 Visual Studio 后，请在“在 Visual Studio 中打开”边栏选项卡中，单击“在 Visual Studio 中打开”按钮。将打开 Visual Studio。",
      "pos": [
        2150,
        2243
      ]
    },
    {
      "pos": [
        2249,
        2310
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>SQL Server 对象资源管理器<ept id=\"p1\">**</ept>窗格中，Visual Studio 会要求你在对话框中填写连接字符串字段。"
    },
    {
      "content": "选择“SQL Server 身份验证”，而非“Windows 身份验证”。",
      "pos": [
        2314,
        2351
      ]
    },
    {
      "pos": [
        2355,
        2407
      ],
      "content": "记住要指定自己的 <bpt id=\"p1\">**</bpt>AdventureWorksLT<ept id=\"p1\">**</ept> 数据库（对话框中的“选项”&gt;“连接属性”）。"
    },
    {
      "content": "在“SQL Server 对象资源管理器”中，展开数据库的节点。",
      "pos": [
        2413,
        2445
      ]
    },
    {
      "content": "步骤 2：在 Visual Studio 中创建新项目",
      "pos": [
        2451,
        2478
      ]
    },
    {
      "content": "在 Visual Studio 中，按照“C#”&gt;“Windows”&gt;“控制台应用程序”的初学者模板创建新项目。",
      "pos": [
        2481,
        2537
      ]
    },
    {
      "content": "单击“文件”&gt;“新建”&gt;“项目”。将显示“***”对话框。",
      "pos": [
        2543,
        2572
      ]
    },
    {
      "content": "在“已安装”下，扩展到 C# 和 Windows，以便“控制台应用程序”选项显示在中间窗格中。",
      "pos": [
        2577,
        2624
      ]
    },
    {
      "content": "“新建项目”对话框",
      "pos": [
        2632,
        2641
      ]
    },
    {
      "pos": [
        2664,
        2715
      ],
      "content": "对于“名称”，请输入 <bpt id=\"p1\">**</bpt>ConnectAndQuery\\_Example<ept id=\"p1\">**</ept>。单击<bpt id=\"p2\">**</bpt>“确定”<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "步骤 3：添加程序集引用以进行配置处理",
      "pos": [
        2721,
        2740
      ]
    },
    {
      "pos": [
        2743,
        2817
      ],
      "content": "我们的 C# 示例使用 .NET Framework 程序集 <bpt id=\"p1\">**</bpt>System.Configuration.dll<ept id=\"p1\">**</ept>，因此让我们来添加对它的引用。"
    },
    {
      "content": "在“解决方案资源管理器”窗格中，右键单击“引用”&gt;“添加引用”。系统将显示“引用管理器”窗口。",
      "pos": [
        2823,
        2870
      ]
    },
    {
      "content": "展开“程序集”&gt;“Framework”。",
      "pos": [
        2875,
        2895
      ]
    },
    {
      "pos": [
        2900,
        2950
      ],
      "content": "向下滚动，然后单击以突出显示 <bpt id=\"p1\">**</bpt>System.Configuration<ept id=\"p1\">**</ept>。确保已选中其复选框。"
    },
    {
      "pos": [
        2955,
        2966
      ],
      "content": "单击<bpt id=\"p1\">**</bpt>“确定”<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "通过菜单“生成”&gt;“生成解决方案”编译程序。",
      "pos": [
        2971,
        2993
      ]
    },
    {
      "content": "步骤 4：获取连接字符串",
      "pos": [
        2999,
        3011
      ]
    },
    {
      "pos": [
        3014,
        3071
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>复制数据库的连接字符串。"
    },
    {
      "pos": [
        3073,
        3142
      ],
      "content": "首次使用时，系统会将 Visual Studio 连接到 Azure SQL 数据库的 <bpt id=\"p1\">**</bpt>AdventureWorksLT<ept id=\"p1\">**</ept> 数据库。"
    },
    {
      "content": "步骤 5：将连接字符串添加到 App.config 文件",
      "pos": [
        3292,
        3320
      ]
    },
    {
      "content": "在 Visual Studio 中，从“解决方案资源管理器”窗格中打开 App.config 文件。",
      "pos": [
        3326,
        3376
      ]
    },
    {
      "pos": [
        3381,
        3469
      ],
      "content": "如下面的示例 App.config 代码示例所示，添加 <bpt id=\"p1\">**</bpt>&amp;#x3c;configuration&amp;#x3e; &amp;#x3c;/configuration&amp;#x3e;<ept id=\"p1\">**</ept> 元素。"
    },
    {
      "pos": [
        3473,
        3509
      ],
      "content": "将 <bpt id=\"p1\">*</bpt>{your\\_placeholders}<ept id=\"p1\">*</ept> 替换为你自己的实际值："
    },
    {
      "content": "保存 App.config 的更改。",
      "pos": [
        4084,
        4102
      ]
    },
    {
      "pos": [
        4107,
        4155
      ],
      "content": "在“解决方案资源管理器”窗格中，右键单击 <bpt id=\"p1\">**</bpt>App.config<ept id=\"p1\">**</ept> 节点，然后单击“属性”。"
    },
    {
      "content": "将“复制到输出目录”设置为“始终复制”。",
      "pos": [
        4160,
        4180
      ]
    },
    {
      "content": "这将导致 App.config 文件的内容替换 &amp;#x2a;.exe.config 文件的内容，位于 &amp;#x2a;.exe 文件的生成目录。每次重新编译 &amp;#x2a;.exe 时都会进行此替换。",
      "pos": [
        4184,
        4281
      ]
    },
    {
      "content": "当系统运行我们的示例 C# 程序时，会读取 &amp;#x2a;.exe.config 文件。",
      "pos": [
        4285,
        4328
      ]
    },
    {
      "content": "复制到输出目录 = 始终复制",
      "pos": [
        4336,
        4350
      ]
    },
    {
      "content": "步骤 6：在示例 C# 代码中粘贴",
      "pos": [
        4393,
        4410
      ]
    },
    {
      "pos": [
        4416,
        4472
      ],
      "content": "在 Visual Studio 中，使用“解决方案资源管理器”窗格打开你的 <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "content": "在示例 C# 程序代码中粘贴",
      "pos": [
        4481,
        4495
      ]
    },
    {
      "content": "通过在下面的示例 C# 代码中粘贴，覆盖 Program.cs 中的所有起始代码。",
      "pos": [
        4524,
        4565
      ]
    },
    {
      "pos": [
        4569,
        4708
      ],
      "content": "如果你想要更短的代码示例，可以将整个连接字符串作为文本分配给变量 <bpt id=\"p1\">**</bpt>SQLConnectionString<ept id=\"p1\">**</ept>。然后可以擦除 <bpt id=\"p2\">**</bpt>GetConnectionStringFromExeConfig<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>GatherPasswordFromConsole<ept id=\"p3\">**</ept> 这两个方法。"
    },
    {
      "content": "编译程序",
      "pos": [
        8884,
        8888
      ]
    },
    {
      "content": "在 Visual Studio 中，通过单击菜单“生成”&gt;“生成解决方案”来编译程序。",
      "pos": [
        8894,
        8937
      ]
    },
    {
      "content": "示例程序中的操作摘要",
      "pos": [
        8944,
        8954
      ]
    },
    {
      "content": "从配置文件中读取大部分 SQL 连接字符串。",
      "pos": [
        8960,
        8982
      ]
    },
    {
      "content": "从键盘收集用户名和密码，添加它们以完成连接字符串。",
      "pos": [
        8987,
        9012
      ]
    },
    {
      "pos": [
        9017,
        9083
      ],
      "content": "使用该连接字符串和 ADO.NET 类连接到 Azure SQL 数据库中的 <bpt id=\"p1\">**</bpt>AdventureWorksLT<ept id=\"p1\">**</ept> 演示数据库。"
    },
    {
      "pos": [
        9088,
        9126
      ],
      "content": "发出 SQL <bpt id=\"p1\">**</bpt>SELECT<ept id=\"p1\">**</ept> 以从 <bpt id=\"p2\">**</bpt>SalesLT<ept id=\"p2\">**</ept> 表中读取。"
    },
    {
      "content": "将返回的行打印到控制台。",
      "pos": [
        9131,
        9143
      ]
    },
    {
      "content": "我们努力让 C# 示例简短。但我们添加了代码来读取配置文件，这样才能服务于来自像你一样的客户的多个请求。我们同意，要生产高质量程序，应使用配置文件，而不是 .exe 中的硬编码文本。",
      "pos": [
        9146,
        9237
      ]
    },
    {
      "pos": [
        9242,
        9320
      ],
      "content": "<ph id=\"ph1\">[AZURE.WARNING]</ph>为了代码简短起见，我们选择在此教授示例中不包括用于异常处理的代码以及重试逻辑。但是你与云数据库进行交互的生产程序应包括这两者。"
    },
    {
      "pos": [
        9325,
        9412
      ],
      "content": "<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](/documentation/articles/sql-database-develop-csharp-retry-windows)</ept>是具有重试逻辑的代码示例的链接。"
    },
    {
      "content": "步骤 7：在服务器防火墙中添加允许的 IP 地址范围",
      "pos": [
        9418,
        9444
      ]
    },
    {
      "content": "在将客户端计算机的 IP 地址添加到 SQL 数据库防火墙之前，客户端 C# 程序无法连接到 Azure SQL 数据库。你的程序将失败，并显示简单的错误消息，指出必需的 IP 地址。",
      "pos": [
        9447,
        9539
      ]
    },
    {
      "pos": [
        9542,
        9599
      ],
      "content": "可以使用 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>添加该 IP 地址。"
    },
    {
      "content": "有关详细信息，请参阅",
      "pos": [
        9730,
        9740
      ]
    },
    {
      "content": "如何：在 SQL 数据库上配置防火墙设置",
      "pos": [
        9747,
        9767
      ]
    },
    {
      "content": "步骤 8：运行程序",
      "pos": [
        9841,
        9850
      ]
    },
    {
      "content": "在 Visual Studio 中，通过菜单“调试”&gt;“启动调试”运行程序。将显示控制台窗口。",
      "pos": [
        9856,
        9903
      ]
    },
    {
      "content": "按照指导输入用户名和密码。",
      "pos": [
        9908,
        9921
      ]
    },
    {
      "content": "有几个连接工具需要将你的用户名附加到“@{your\\_serverName\\_here}”，但对于 ADO.NET 此后缀是可选的。你不必费神键入后缀。",
      "pos": [
        9925,
        10001
      ]
    },
    {
      "content": "系统将显示数据行。",
      "pos": [
        10006,
        10015
      ]
    },
    {
      "content": "相关链接",
      "pos": [
        10021,
        10025
      ]
    },
    {
      "content": "SQL 数据库的客户端快速入门代码示例",
      "pos": [
        10031,
        10050
      ]
    },
    {
      "content": "如果你的客户端程序运行在 Azure VM 上，请参阅",
      "pos": [
        10133,
        10160
      ]
    },
    {
      "content": "<bpt id=\"p1\">[</bpt>适用于 ADO.NET 4.5 和 SQL 数据库 V12 的 1433 之外的端口<ept id=\"p1\">](/documentation/articles/sql-database-develop-direct-route-ports-adonet-v12)</ept>，了解 1433 以外的 TCP 端口。",
      "pos": [
        10165,
        10305
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"使用 C# 查询 SQL 数据库 | Azure\"\n    description=\"有关使用 IP 地址、连接字符串、安全登录配置文件和免费 Visual Studio 让 C# 程序能够使用 ADO.NET 连接到云中的 Azure SQL 数据库的详细信息。\"\n    services=\"sql-database\"\n    documentationCenter=\"\"\n    authors=\"MightyPen\"\n    manager=\"jeffreyg\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"sql-database\"\n    ms.date=\"10/09/2015\"\n    wacn.date=\"12/22/2015\"/>\n\n\n# 使用 C&#x23; 连接和查询 SQL 数据库\n\n> [AZURE.SELECTOR]\n- [C#](/documentation/articles/sql-database-connect-query)\n- [SSMS](/documentation/articles/sql-database-connect-query-ssms)\n- [Excel](/documentation/articles/sql-database-connect-excel)\n\n你想要编写一个 C# 程序，该程序使用 ADO.NET 连接到云中的 Azure SQL 数据库。\n\n本主题为那些不熟悉 Azure SQL 数据库和 C# 的用户介绍每个步骤。对于熟悉 Microsoft SQL Server 和 C# 的用户，可以跳过一些步骤，重点关注那些特定于 SQL 数据库的步骤。\n\n\n## 先决条件\n\n\n若要运行 C# 代码示例，你必须拥有：\n\n\n- Azure 帐户和订阅。你可以注册[试用版](/pricing/1rmb-trial/)。\n\n\n- Azure SQL 数据库服务的 **AdventureWorksLT** 演示数据库。\n - 在几分钟内[创建演示数据库](/documentation/articles/sql-database-get-started)。\n\n\n- Visual Studio 2013 Update 4（或更高版本）。Microsoft 现在*免费*提供 Visual Studio Community。\n - [Visual Studio Community，下载](http://www.visualstudio.com/products/visual-studio-community-vs)\n - [Visual Studio 的更多免费选项](http://www.visualstudio.com/products/free-developer-offers-vs.aspx)\n - 或者，使用本主题中稍后介绍的[步骤](#InstallVSForFree)，在 [Azure 门户](https://manage.windowsazure.cn)中安装 Visual Studio。\n\n\n<a name=\"InstallVSForFree\" id=\"InstallVSForFree\"></a>\n\n&nbsp;\n\n## 步骤 1：免费安装 Visual Studio Community\n\n\n如果你需要安装 Visual Studio，可以：\n\n- 使用浏览器导航到 Visual Studio 产品网页（该网页提供免费下载及其他选项），免费安装 Visual Studio Community；或者\n- 让 [Azure 门户](https://manage.windowsazure.cn)指导你找到下载网页，这将在后面的部分进行介绍。\n\n\n### 通过 Azure 门户安装 Visual Studio\n\n\n1. 通过 [Azure 门户](https://manage.windowsazure.cn)（网址为 https://manage.windowsazure.cn )登录。\n\n2. 单击“浏览*全部”>“SQL 数据库”。将打开边栏选项卡搜索数据库。\n\n3. 在顶部附近的筛选器文本框中，开始键入 **AdventureWorksLT** 数据库的名称。\n\n4. 当你在服务器上看到你的数据库行时，请单击该行。将为你的数据库打开边栏选项卡。\n\n5. 为方便起见，可单击以前每个边栏选项卡上的最小化控件。\n\n6. 单击数据库边栏选项卡顶部附近的“在 Visual Studio 中打开”按钮。将打开一个关于 Visual Studio 的新边栏选项卡，其中包含指向 Visual Studio 安装位置的链接。\n \n    ![“在 Visual Studio 中打开”按钮][20-OpenInVisualStudioButton]\n\n7. 单击“Community (免费)”链接或类似的链接。将添加新的网页。\n\n8. 使用新网页上的链接安装 Visual Studio。\n\n9. 安装 Visual Studio 后，请在“在 Visual Studio 中打开”边栏选项卡中，单击“在 Visual Studio 中打开”按钮。将打开 Visual Studio。\n\n10. 在 **SQL Server 对象资源管理器**窗格中，Visual Studio 会要求你在对话框中填写连接字符串字段。\n - 选择“SQL Server 身份验证”，而非“Windows 身份验证”。\n - 记住要指定自己的 **AdventureWorksLT** 数据库（对话框中的“选项”>“连接属性”）。\n\n11. 在“SQL Server 对象资源管理器”中，展开数据库的节点。\n\n\n## 步骤 2：在 Visual Studio 中创建新项目\n\n\n在 Visual Studio 中，按照“C#”>“Windows”>“控制台应用程序”的初学者模板创建新项目。\n\n\n1. 单击“文件”>“新建”>“项目”。将显示“***”对话框。\n\n2. 在“已安装”下，扩展到 C# 和 Windows，以便“控制台应用程序”选项显示在中间窗格中。\n\n    ![“新建项目”对话框][30-VSNewProject]\n\n2. 对于“名称”，请输入 **ConnectAndQuery\\_Example**。单击**“确定”**。\n\n\n## 步骤 3：添加程序集引用以进行配置处理\n\n\n我们的 C# 示例使用 .NET Framework 程序集 **System.Configuration.dll**，因此让我们来添加对它的引用。\n\n\n1. 在“解决方案资源管理器”窗格中，右键单击“引用”>“添加引用”。系统将显示“引用管理器”窗口。\n\n2. 展开“程序集”>“Framework”。\n\n3. 向下滚动，然后单击以突出显示 **System.Configuration**。确保已选中其复选框。\n\n4. 单击**“确定”**。\n\n5. 通过菜单“生成”>“生成解决方案”编译程序。\n\n\n## 步骤 4：获取连接字符串\n\n\n使用 [Azure 门户](https://manage.windowsazure.cn)复制数据库的连接字符串。\n\n首次使用时，系统会将 Visual Studio 连接到 Azure SQL 数据库的 **AdventureWorksLT** 数据库。\n\n\n[AZURE.INCLUDE [sql-database-include-connection-string-20-portalshots](../includes/sql-database-include-connection-string-20-portalshots.md)]\n\n\n## 步骤 5：将连接字符串添加到 App.config 文件\n\n\n1. 在 Visual Studio 中，从“解决方案资源管理器”窗格中打开 App.config 文件。\n\n2. 如下面的示例 App.config 代码示例所示，添加 **&#x3c;configuration&#x3e; &#x3c;/configuration&#x3e;** 元素。\n - 将 *{your\\_placeholders}* 替换为你自己的实际值：\n\n```\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?>\n    <configuration>\n       <startup> \n            <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />\n        </startup>\n    \n        <connectionStrings>\n            <clear />\n            <add name=\"ConnectionString4NoUserIDNoPassword\"\n            connectionString=\"Server=tcp:{your_serverName_here}.database.chinacloudapi.cn,1433; Database={your_databaseName_here}; Connection Timeout=30; Encrypt=True; TrustServerCertificate=False;\"\n            />\n        </connectionStrings>\n    </configuration>\n```\n\n3. 保存 App.config 的更改。\n\n4. 在“解决方案资源管理器”窗格中，右键单击 **App.config** 节点，然后单击“属性”。\n\n5. 将“复制到输出目录”设置为“始终复制”。\n - 这将导致 App.config 文件的内容替换 &#x2a;.exe.config 文件的内容，位于 &#x2a;.exe 文件的生成目录。每次重新编译 &#x2a;.exe 时都会进行此替换。\n - 当系统运行我们的示例 C# 程序时，会读取 &#x2a;.exe.config 文件。\n\n    ![复制到输出目录 = 始终复制][50-VSCopyToOutputDirectoryProperty]\n\n\n## 步骤 6：在示例 C# 代码中粘贴\n\n\n1. 在 Visual Studio 中，使用“解决方案资源管理器”窗格打开你的 **Program.cs** 文件。 \n\n    ![在示例 C# 程序代码中粘贴][40-VSProgramCsOverlay]\n\n2. 通过在下面的示例 C# 代码中粘贴，覆盖 Program.cs 中的所有起始代码。\n - 如果你想要更短的代码示例，可以将整个连接字符串作为文本分配给变量 **SQLConnectionString**。然后可以擦除 **GetConnectionStringFromExeConfig** 和 **GatherPasswordFromConsole** 这两个方法。\n\n\n```\nusing System;  // C#\nusing G = System.Configuration;   // System.Configuration.dll\nusing D = System.Data;            // System.Data.dll\nusing C = System.Data.SqlClient;  // System.Data.dll\nusing T = System.Text;\n    \nnamespace ConnectAndQuery_Example\n{\n    class Program\n    {\n        static void Main()\n        {\n            string connectionString4NoUserIDNoPassword,\n                password, userName, SQLConnectionString;\n    \n            // Get most of the connection string from ConnectAndQuery_Example.exe.config\n            // file, in the same directory where ConnectAndQuery_Example.exe resides.\n            connectionString4NoUserIDNoPassword = Program.GetConnectionStringFromExeConfig\n                (\"ConnectionString4NoUserIDNoPassword\");\n            // Get the user name from keyboard input.\n            Console.WriteLine(\"Enter your User ID, without the trailing @ and server name: \");\n            userName = Console.ReadLine();\n            // Get the password from keyboard input.\n            password = Program.GatherPasswordFromConsole();\n    \n            SQLConnectionString = \"Password=\" + password + ';' +\n                \"User ID=\" + userName + \";\" + connectionString4NoUserIDNoPassword;\n    \n            // Create an SqlConnection from the provided connection string.\n            using (C.SqlConnection connection = new C.SqlConnection(SQLConnectionString))\n            {\n                // Formulate the command.\n                C.SqlCommand command = new C.SqlCommand();\n                command.Connection = connection;\n    \n                // Specify the query to be executed.\n                command.CommandType = D.CommandType.Text;\n                command.CommandText = @\"\n                    SELECT TOP 9 CustomerID, NameStyle, Title, FirstName, LastName\n                    FROM SalesLT.Customer;  -- In AdventureWorksLT database.\n                    \";\n                // Open a connection to database.\n                connection.Open();\n    \n                // Read data returned for the query.\n                C.SqlDataReader reader = command.ExecuteReader();\n                while (reader.Read())\n                {\n                    Console.WriteLine(\"Values:  {0}, {1}, {2}, {3}, {4}\",\n                        reader[0], reader[1], reader[2], reader[3], reader[4]);\n                }\n            }\n            Console.WriteLine(\"View the results here, then press any key to finish...\");\n            Console.ReadKey(true);\n        }\n        //----------------------------------------------------------------------------------\n    \n        static string GetConnectionStringFromExeConfig(string connectionStringNameInConfig)\n        {\n            G.ConnectionStringSettings connectionStringSettings =\n                G.ConfigurationManager.ConnectionStrings[connectionStringNameInConfig];\n    \n            if (connectionStringSettings == null)\n            {\n                throw new ApplicationException(String.Format\n                    (\"Error. Connection string not found for name '{0}'.\",\n                    connectionStringNameInConfig));\n            }\n                return connectionStringSettings.ConnectionString;\n        }\n    \n        static string GatherPasswordFromConsole()\n        {\n            T.StringBuilder passwordBuilder = new T.StringBuilder(32);\n            ConsoleKeyInfo key;\n            Console.WriteLine(\"Enter your password: \");\n            do\n            {\n                key = Console.ReadKey(true);\n                if (key.Key != ConsoleKey.Backspace)\n                {\n                    passwordBuilder.Append(key.KeyChar);\n                    Console.Write(\"*\");\n                }\n                else  // Backspace char was entered.\n                {\n                    // Retreat the cursor, overlay '*' with ' ', retreat again.\n                    Console.Write(\"\\b \\b\");\n                    passwordBuilder.Length = passwordBuilder.Length - 1;\n                }\n            }\n            while (key.Key != ConsoleKey.Enter); // Enter key will end the looping.\n            Console.WriteLine(Environment.NewLine);\n            return passwordBuilder.ToString();\n        }\n    }\n}\n```\n\n\n### 编译程序\n\n\n1. 在 Visual Studio 中，通过单击菜单“生成”>“生成解决方案”来编译程序。\n\n\n### 示例程序中的操作摘要\n\n\n1. 从配置文件中读取大部分 SQL 连接字符串。\n\n2. 从键盘收集用户名和密码，添加它们以完成连接字符串。\n\n3. 使用该连接字符串和 ADO.NET 类连接到 Azure SQL 数据库中的 **AdventureWorksLT** 演示数据库。\n\n4. 发出 SQL **SELECT** 以从 **SalesLT** 表中读取。\n\n5. 将返回的行打印到控制台。\n\n\n我们努力让 C# 示例简短。但我们添加了代码来读取配置文件，这样才能服务于来自像你一样的客户的多个请求。我们同意，要生产高质量程序，应使用配置文件，而不是 .exe 中的硬编码文本。\n\n\n> [AZURE.WARNING]为了代码简短起见，我们选择在此教授示例中不包括用于异常处理的代码以及重试逻辑。但是你与云数据库进行交互的生产程序应包括这两者。\n>\n> [此处](/documentation/articles/sql-database-develop-csharp-retry-windows)是具有重试逻辑的代码示例的链接。\n\n\n## 步骤 7：在服务器防火墙中添加允许的 IP 地址范围\n\n\n在将客户端计算机的 IP 地址添加到 SQL 数据库防火墙之前，客户端 C# 程序无法连接到 Azure SQL 数据库。你的程序将失败，并显示简单的错误消息，指出必需的 IP 地址。\n\n\n可以使用 [Azure 门户](https://manage.windowsazure.cn)添加该 IP 地址。\n\n\n\n[AZURE.INCLUDE [sql-database-include-ip-address-22-v12portal](../includes/sql-database-include-ip-address-22-v12portal.md)]\n\n\n\n有关详细信息，请参阅<br/> [如何：在 SQL 数据库上配置防火墙设置](/documentation/articles/sql-database-configure-firewall-settings)\n\n\n\n## 步骤 8：运行程序\n\n\n1. 在 Visual Studio 中，通过菜单“调试”>“启动调试”运行程序。将显示控制台窗口。\n\n2. 按照指导输入用户名和密码。\n - 有几个连接工具需要将你的用户名附加到“@{your\\_serverName\\_here}”，但对于 ADO.NET 此后缀是可选的。你不必费神键入后缀。\n\n3. 系统将显示数据行。\n\n\n## 相关链接\n\n\n- [SQL 数据库的客户端快速入门代码示例](/documentation/articles/sql-database-develop-quick-start-client-code-samples)\n\n- 如果你的客户端程序运行在 Azure VM 上，请参阅<br/>[适用于 ADO.NET 4.5 和 SQL 数据库 V12 的 1433 之外的端口](/documentation/articles/sql-database-develop-direct-route-ports-adonet-v12)，了解 1433 以外的 TCP 端口。\n\n\n\n<!-- Image references. -->\n\n[20-OpenInVisualStudioButton]: ./media/sql-database-connect-query/connqry-free-vs-e.png\n\n[30-VSNewProject]: ./media/sql-database-connect-query/connqry-vs-new-project-f.png\n\n[40-VSProgramCsOverlay]: ./media/sql-database-connect-query/connqry-vs-program-cs-overlay-g.png\n\n[50-VSCopyToOutputDirectoryProperty]: ./media/sql-database-connect-query/connqry-vs-appconfig-copytoputputdir-h.png\n\n<!---HONumber=Mooncake_1207_2015-->"
}