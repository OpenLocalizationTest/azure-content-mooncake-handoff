{
  "nodes": [
    {
      "content": "如何通过 Node.js 使用 Blob 存储 | Azure",
      "pos": [
        28,
        59
      ]
    },
    {
      "content": "了解如何使用 Azure Blob 服务上载、下载、列出和删除 Blob 内容。示例用 Node.js 编写。",
      "pos": [
        79,
        134
      ]
    },
    {
      "content": "如何通过 Node.js 使用 Blob 存储",
      "pos": [
        353,
        376
      ]
    },
    {
      "content": "概述",
      "pos": [
        476,
        478
      ]
    },
    {
      "content": "本文将演示如何使用 Azure Blob 服务执行常见方案。相关示例是通过 Node.js API 编写的。涉及的方案包括“上传”、“列出”、“下载”和“删除”Blob。",
      "pos": [
        480,
        565
      ]
    },
    {
      "content": "创建 Node.js 应用程序",
      "pos": [
        762,
        777
      ]
    },
    {
      "pos": [
        779,
        916
      ],
      "content": "有关创建 Node.js 应用程序的说明，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">创建 Node.js 应用程序并将其部署到 Azure Web 应用]</ept>、<bpt id=\"p2\">[</bpt>Node.js 云服务<ept id=\"p2\">][Node.js 云服务]</ept>（使用 Windows PowerShell）或 <bpt id=\"p3\">[</bpt><ept id=\"p3\">使用 WebMatrix 构建 Web 应用]</ept>。"
    },
    {
      "content": "配置应用程序以访问存储",
      "pos": [
        921,
        932
      ]
    },
    {
      "content": "若要使用 Azure 存储空间，你需要 Azure Storage SDK for Node.js，其中包括一组便于与存储 REST 服务进行通信的库。",
      "pos": [
        934,
        1010
      ]
    },
    {
      "content": "使用 Node 包管理器 (NPM) 可获取该程序包",
      "pos": [
        1016,
        1042
      ]
    },
    {
      "pos": [
        1048,
        1140
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows)、<bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac) 或 <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix) 等命令行界面导航到您在其中创建了示例应用程序的文件夹。"
    },
    {
      "pos": [
        1146,
        1201
      ],
      "content": "在命令窗口中键入 <bpt id=\"p1\">**</bpt>npm install azure-storage<ept id=\"p1\">**</ept>。该命令的输出类似于以下代码示例。"
    },
    {
      "pos": [
        1914,
        2007
      ],
      "content": "可以手动运行 <bpt id=\"p1\">**</bpt>ls<ept id=\"p1\">**</ept> 命令来验证是否创建了 <bpt id=\"p2\">**</bpt>node\\_modules<ept id=\"p2\">**</ept> 文件夹。在该文件夹中，您将找到 <bpt id=\"p3\">**</bpt>azure-storage<ept id=\"p3\">**</ept> 包，其中包含您访问存储所需的库。"
    },
    {
      "content": "导入包",
      "pos": [
        2013,
        2016
      ]
    },
    {
      "pos": [
        2018,
        2075
      ],
      "content": "使用记事本或其他文本编辑器将以下内容添加到您要在其中使用存储的应用程序的 <bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> 文件的顶部："
    },
    {
      "content": "设置 Azure 存储连接",
      "pos": [
        2123,
        2136
      ]
    },
    {
      "pos": [
        2138,
        2314
      ],
      "content": "Azure 模块将读取环境变量 <ph id=\"ph1\">`AZURE_STORAGE_ACCOUNT`</ph>、<ph id=\"ph2\">`AZURE_STORAGE_ACCESS_KEY`</ph> 或 <ph id=\"ph3\">`AZURE_STORAGE_CONNECTION_STRING`</ph>，以便获取连接到 Azure 存储帐户所需的信息。如果未设置这些环境变量，则在调用 <bpt id=\"p1\">**</bpt>createBlobService<ept id=\"p1\">**</ept> 时必须指定帐户信息。"
    },
    {
      "pos": [
        2316,
        2375
      ],
      "content": "有关在管理门户中为 Azure Web 应用设置环境变量的示例，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用存储构建 Node.js Web 应用]</ept>。"
    },
    {
      "content": "创建容器",
      "pos": [
        2380,
        2384
      ]
    },
    {
      "pos": [
        2386,
        2478
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> 对象可以对容器和 Blob 进行操作。以下代码创建 <bpt id=\"p2\">**</bpt>BlobService<ept id=\"p2\">**</ept> 对象。将以下内容添加到 <bpt id=\"p3\">**</bpt>server.js<ept id=\"p3\">**</ept> 顶部附近。"
    },
    {
      "pos": [
        2528,
        2702
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 您可以匿名访问 Blob，只需使用 <bpt id=\"p1\">**</bpt>createBlobServiceAnonymous<ept id=\"p1\">**</ept> 并提供主机地址即可。例如，使用 <ph id=\"ph2\">`var blobSvc = azure.createBlobServiceAnonymous('https://myblob.blob.core.chinacloudapi.cn/');`</ph>。"
    },
    {
      "pos": [
        2817,
        2891
      ],
      "content": "若要创建一个新的容器，请使用 <bpt id=\"p1\">**</bpt>createContainerIfNotExists<ept id=\"p1\">**</ept>。以下代码示例将创建名为“mycontainer”的新容器"
    },
    {
      "pos": [
        3151,
        3283
      ],
      "content": "如果该容器是新建的，则 <ph id=\"ph1\">`result`</ph> 为 true。如果容器已存在，<ph id=\"ph2\">`result`</ph> 将为 false。<ph id=\"ph3\">`response`</ph> 将包含有关操作的信息，包括容器的 <bpt id=\"p1\">[</bpt>ETag<ept id=\"p1\">](http://zh.wikipedia.org/wiki/HTTP_ETag)</ept> 信息。"
    },
    {
      "content": "容器安全性",
      "pos": [
        3289,
        3294
      ]
    },
    {
      "content": "默认情况下，新容器是私有的，不能匿名访问。若要使容器公开，以便能够对其进行匿名访问，可将容器的访问级别设置为“Blob”或“容器”。",
      "pos": [
        3296,
        3362
      ]
    },
    {
      "pos": [
        3366,
        3428
      ],
      "content": "<bpt id=\"p1\">**</bpt>Blob<ept id=\"p1\">**</ept> - 可匿名读取此容器中的 Blob 内容和元数据，但无法匿名读取容器元数据（如列出容器中的所有 Blob）"
    },
    {
      "pos": [
        3432,
        3466
      ],
      "content": "<bpt id=\"p1\">**</bpt>容器<ept id=\"p1\">**</ept> - 可匿名读取 Blob 内容和元数据，以及容器元数据"
    },
    {
      "content": "以下代码示例演示了如何将访问级别设置为“Blob”：",
      "pos": [
        3468,
        3494
      ]
    },
    {
      "pos": [
        3693,
        3760
      ],
      "content": "另外，您可以通过使用 <bpt id=\"p1\">**</bpt>setContainerAcl<ept id=\"p1\">**</ept> 指定访问级别来修改容器的访问级别。以下代码示例将访问级别更改为“容器”："
    },
    {
      "pos": [
        3994,
        4024
      ],
      "content": "结果将包含有关操作的信息，包括容器的当前 <bpt id=\"p1\">**</bpt>ETag<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "筛选器",
      "pos": [
        4030,
        4033
      ]
    },
    {
      "pos": [
        4035,
        4108
      ],
      "content": "你可以向使用 <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> 执行的操作应用可选的筛选操作。筛选操作可包括日志记录、自动重试等。筛选器是实现具有签名的方法的对象："
    },
    {
      "content": "在对请求选项执行预处理后，该方法需要调用“next”并且传递具有以下签名的回调：",
      "pos": [
        4158,
        4198
      ]
    },
    {
      "content": "在此回调中并且在处理 returnObject（来自对服务器请求的响应）后，回调需要调用 next（如果它存在以便继续处理其他筛选器）或只调用 finalCallback 以便结束服务调用。",
      "pos": [
        4254,
        4349
      ]
    },
    {
      "pos": [
        4351,
        4527
      ],
      "content": "Azure SDK for Node.js 中附带了两个实现了重试逻辑的筛选器，分别是 <bpt id=\"p1\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>LinearRetryPolicyFilter<ept id=\"p2\">**</ept>。下面的代码将创建一个 <bpt id=\"p3\">**</bpt>BlobService<ept id=\"p3\">**</ept> 对象，该对象使用 <bpt id=\"p4\">**</bpt>ExponentialRetryPolicyFilter<ept id=\"p4\">**</ept>："
    },
    {
      "content": "将 Blob 上载到容器中",
      "pos": [
        4674,
        4687
      ]
    },
    {
      "pos": [
        4689,
        4841
      ],
      "content": "Blob 可以基于块，也可以基于页。块 Blob 可以让你更高效地上传大型数据，而页 Blob 则针对读/写操作进行了优化。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>了解块 Blob 和页 Blob<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/ee691964.aspx)</ept>。"
    },
    {
      "content": "块 Blob",
      "pos": [
        4846,
        4852
      ]
    },
    {
      "content": "若要将数据上传到块 Blob，可使用以下方法：",
      "pos": [
        4854,
        4877
      ]
    },
    {
      "pos": [
        4881,
        4936
      ],
      "content": "<bpt id=\"p1\">**</bpt>createBlockBlobFromLocalFile<ept id=\"p1\">**</ept> - 创建新的块 Blob 和上传文件的内容。"
    },
    {
      "pos": [
        4940,
        4991
      ],
      "content": "<bpt id=\"p1\">**</bpt>createBlockBlobFromStream<ept id=\"p1\">**</ept> - 创建新的块 Blob 和上传流的内容。"
    },
    {
      "pos": [
        4995,
        5046
      ],
      "content": "<bpt id=\"p1\">**</bpt>createBlockBlobFromText<ept id=\"p1\">**</ept> - 创建新的块 Blob 和上传字符串的内容。"
    },
    {
      "pos": [
        5050,
        5099
      ],
      "content": "<bpt id=\"p1\">**</bpt>createWriteStreamToBlockBlob<ept id=\"p1\">**</ept> - 向块 Blob 提供写入流。"
    },
    {
      "pos": [
        5101,
        5144
      ],
      "content": "以下代码示例将 <bpt id=\"p1\">**</bpt>test.txt<ept id=\"p1\">**</ept> 文件的内容上传到 <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> 中。"
    },
    {
      "pos": [
        5319,
        5366
      ],
      "content": "这些方法返回的 <ph id=\"ph1\">`result`</ph> 将包含有关操作的信息，例如 Blob 的 <bpt id=\"p1\">**</bpt>ETag<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "页 Blob",
      "pos": [
        5372,
        5378
      ]
    },
    {
      "content": "若要将数据上传到页 Blob，可使用以下方法：",
      "pos": [
        5380,
        5403
      ]
    },
    {
      "pos": [
        5407,
        5444
      ],
      "content": "<bpt id=\"p1\">**</bpt>createPageBlob<ept id=\"p1\">**</ept> - 创建新的特定长度的页 Blob。"
    },
    {
      "pos": [
        5448,
        5502
      ],
      "content": "<bpt id=\"p1\">**</bpt>createPageBlobFromLocalFile<ept id=\"p1\">**</ept> - 创建新的页 Blob 并上传文件的内容。"
    },
    {
      "pos": [
        5506,
        5556
      ],
      "content": "<bpt id=\"p1\">**</bpt>createPageBlobFromStream<ept id=\"p1\">**</ept> - 创建新的页 Blob 并上传流的内容。"
    },
    {
      "pos": [
        5560,
        5618
      ],
      "content": "<bpt id=\"p1\">**</bpt>createWriteStreamToExistingPageBlob<ept id=\"p1\">**</ept> - 向现有页 Blob 提供写入流。"
    },
    {
      "pos": [
        5622,
        5679
      ],
      "content": "<bpt id=\"p1\">**</bpt>createWriteStreamToNewPageBlob<ept id=\"p1\">**</ept> - 创建新的 blob，然后向其提供写入流。"
    },
    {
      "pos": [
        5681,
        5728
      ],
      "content": "以下代码示例将 <bpt id=\"p1\">**</bpt>test.txt<ept id=\"p1\">**</ept> 文件的内容上传到 <bpt id=\"p2\">**</bpt>mypageblob<ept id=\"p2\">**</ept> 中。"
    },
    {
      "pos": [
        5908,
        5971
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 页 Blob 包含 512 字节的“页面”。当你上传大小不是 512 倍数的数据时，可能会收到错误。"
    },
    {
      "content": "列出容器中的 Blob",
      "pos": [
        5976,
        5987
      ]
    },
    {
      "pos": [
        5989,
        6089
      ],
      "content": "若要列出容器中的 Blob，请使用 <bpt id=\"p1\">**</bpt>listBlobsSegmented<ept id=\"p1\">**</ept> 方法。如果您想要返回带特定前缀的 Blob，请使用 <bpt id=\"p2\">**</bpt>listBlobsSegmentedWithPrefix<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        6356,
        6470
      ],
      "content": "<ph id=\"ph1\">`result`</ph> 包含一个 <ph id=\"ph2\">`entries`</ph> 集合，该集合是一组用于描述每个 Blob 的对象。如果不能返回所有 Blob，<ph id=\"ph3\">`result`</ph> 还将提供 <ph id=\"ph4\">`continuationToken`</ph>，这可用作第二个参数来检索其他条目。"
    },
    {
      "content": "下载 Blob",
      "pos": [
        6475,
        6482
      ]
    },
    {
      "content": "若要从 Blob 下载数据，可使用以下方法：",
      "pos": [
        6484,
        6506
      ]
    },
    {
      "pos": [
        6510,
        6548
      ],
      "content": "<bpt id=\"p1\">**</bpt>getBlobToLocalFile<ept id=\"p1\">**</ept> - 将 Blob 内容写入文件"
    },
    {
      "pos": [
        6552,
        6586
      ],
      "content": "<bpt id=\"p1\">**</bpt>getBlobToStream<ept id=\"p1\">**</ept> - 将 Blob 内容写入流"
    },
    {
      "pos": [
        6590,
        6624
      ],
      "content": "<bpt id=\"p1\">**</bpt>getBlobToText<ept id=\"p1\">**</ept> - 将 Blob 内容写入字符串"
    },
    {
      "pos": [
        6628,
        6667
      ],
      "content": "<bpt id=\"p1\">**</bpt>createReadStream<ept id=\"p1\">**</ept> - 提供可从 Blob 读取内容的流"
    },
    {
      "pos": [
        6669,
        6756
      ],
      "content": "以下代码示例演示了如何使用 <bpt id=\"p1\">**</bpt>getBlobToStream<ept id=\"p1\">**</ept> 下载 <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> Blob 的内容，并使用一个流将其存储到 <bpt id=\"p3\">**</bpt>output.txt<ept id=\"p3\">**</ept> 文件："
    },
    {
      "pos": [
        6971,
        7009
      ],
      "content": "<ph id=\"ph1\">`result`</ph> 包含有关 Blob 的信息，包括 <bpt id=\"p1\">**</bpt>ETag<ept id=\"p1\">**</ept> 信息。"
    },
    {
      "content": "删除 Blob",
      "pos": [
        7014,
        7021
      ]
    },
    {
      "pos": [
        7023,
        7085
      ],
      "content": "最后，若要删除 Blob，请调用 <bpt id=\"p1\">**</bpt>deleteBlob<ept id=\"p1\">**</ept>。以下代码示例将删除名为 <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> 的 Blob。"
    },
    {
      "content": "并发访问",
      "pos": [
        7233,
        7237
      ]
    },
    {
      "pos": [
        7239,
        7291
      ],
      "content": "若要允许从多个客户端或多个进程实例并发访问某个 Blob，您可以使用 <bpt id=\"p1\">**</bpt>ETag<ept id=\"p1\">**</ept> 或<bpt id=\"p2\">**</bpt>租约<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        7295,
        7329
      ],
      "content": "<bpt id=\"p1\">**</bpt>Etag<ept id=\"p1\">**</ept> - 用于检测 Blob 或容器是否已被其他进程修改"
    },
    {
      "pos": [
        7333,
        7373
      ],
      "content": "<bpt id=\"p1\">**</bpt>租约<ept id=\"p1\">**</ept> - 用于在某个时段内获取对 Blob 的独占式可续订写入或删除访问"
    },
    {
      "content": "ETag",
      "pos": [
        7379,
        7383
      ]
    },
    {
      "content": "如果你需要允许多个客户端或实例同时写入该 Blob，请使用 ETag。ETag 用于确定自从你第一次读取或创建某个容器或 Blob 以来，该容器或 Blob 是否被修改，这样就可以避免覆盖其他客户端或进程提交的更改。",
      "pos": [
        7385,
        7493
      ]
    },
    {
      "pos": [
        7495,
        7611
      ],
      "content": "可以使用可选的 <ph id=\"ph1\">`options.accessConditions`</ph> 参数设置ETag 条件。如果 Blob 已存在且具有 <ph id=\"ph2\">`etagToMatch`</ph> 所包含的 ETag 值，则以下代码示例将仅上传 <bpt id=\"p1\">**</bpt>test.txt<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "content": "当你使用 ETag 时，常规模式为：",
      "pos": [
        7836,
        7854
      ]
    },
    {
      "content": "通过创建、列出或获取操作来获取 ETag。",
      "pos": [
        7859,
        7880
      ]
    },
    {
      "content": "执行一个操作，查看 ETag 值是否尚未修改。",
      "pos": [
        7885,
        7908
      ]
    },
    {
      "content": "如果值已修改，则表明在你获得 ETag 值后，其他客户端或实例已修改该 Blob 或容器。",
      "pos": [
        7910,
        7955
      ]
    },
    {
      "content": "租约",
      "pos": [
        7961,
        7963
      ]
    },
    {
      "pos": [
        7965,
        8046
      ],
      "content": "新的租约可使用 <bpt id=\"p1\">**</bpt>acquireLease<ept id=\"p1\">**</ept> 方法获取，只需指定您希望获取其租约的 Blob 或容器即可。例如，以下代码将获取 <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> 的租约。"
    },
    {
      "pos": [
        8215,
        8302
      ],
      "content": "对 <bpt id=\"p1\">**</bpt>myblob<ept id=\"p1\">**</ept> 的后续操作必须提供 <ph id=\"ph1\">`options.leaseId`</ph> 参数。租约 ID 作为 <ph id=\"ph2\">`result.id`</ph> 从 <bpt id=\"p2\">**</bpt>acquireLease<ept id=\"p2\">**</ept> 返回。"
    },
    {
      "pos": [
        8306,
        8391
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 默认情况下，租约期限为无期。您可以指定一个无限的租期（15 到 60 秒），只需提供 <ph id=\"ph2\">`options.leaseDuration`</ph> 参数即可。"
    },
    {
      "pos": [
        8393,
        8473
      ],
      "content": "若要删除租约，请使用 <bpt id=\"p1\">**</bpt>releaseLease<ept id=\"p1\">**</ept>。若要中断租约，但又要防止其他人在您的原始租约到期之前获得新租约，则可使用 <bpt id=\"p2\">**</bpt>breakLease<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "使用共享访问签名",
      "pos": [
        8478,
        8486
      ]
    },
    {
      "content": "共享访问签名 (SAS) 是一种安全的方法，用于对 Blob 和容器进行细致访问而无需提供你的存储帐户名或密钥。通常使用共享访问签名来提供对你的数据的有限访问权限，例如允许移动应用程序访问 Blob。",
      "pos": [
        8488,
        8588
      ]
    },
    {
      "pos": [
        8592,
        8656
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 虽然你也可以允许匿名访问 Blob，但共享访问签名可以让你提供更受控制的访问，因为你必须生成 SAS。"
    },
    {
      "pos": [
        8658,
        8829
      ],
      "content": "受信任的应用程序（例如基于云的服务）可使用 <bpt id=\"p1\">**</bpt>BlobService<ept id=\"p1\">**</ept> 的 <bpt id=\"p2\">**</bpt>generateSharedAccessSignature<ept id=\"p2\">**</ept> 生成共享访问签名，然后将其提供给不受信任的或不完全受信任的应用程序，例如移动应用。共享访问签名可使用策略生成，该策略描述了共享访问签名的生效日期和失效日期，以及授予共享访问签名持有者的访问级别。"
    },
    {
      "pos": [
        8831,
        8905
      ],
      "content": "以下代码示例生成了一个新的共享访问策略，该策略将允许共享访问签名持有者对 <bpt id=\"p1\">**</bpt>myblob<ept id=\"p1\">**</ept> Blob 执行读取操作，在创建后 100 分钟过期。"
    },
    {
      "content": "请注意，还必须提供主机信息，因为共享访问签名持有者尝试访问容器时，必须提供该信息。",
      "pos": [
        9421,
        9462
      ]
    },
    {
      "pos": [
        9464,
        9546
      ],
      "content": "然后，客户端应用程序将共享访问签名用于 <bpt id=\"p1\">**</bpt>BlobServiceWithSAS<ept id=\"p1\">**</ept>，以便针对 Blob 执行操作。以下语句获取有关 <bpt id=\"p2\">**</bpt>myblob<ept id=\"p2\">**</ept> 的信息。"
    },
    {
      "content": "由于共享访问签名在生成时具有只读访问权限，因此如果尝试修改 Blob，则会返回错误。",
      "pos": [
        9779,
        9821
      ]
    },
    {
      "content": "访问控制列表",
      "pos": [
        9827,
        9833
      ]
    },
    {
      "content": "你还可以使用访问控制列表 (ACL) 为 SAS 设置访问策略。如果你希望允许多个客户端访问某个容器，但为每个客户端提供了不同的访问策略，则访问控制列表会很有用。",
      "pos": [
        9835,
        9916
      ]
    },
    {
      "content": "ACL 是使用一组访问策略实施的，每个策略都有一个关联的 ID。以下代码示例定义了两个策略，一个用于“user1”，一个用于“user2”：",
      "pos": [
        9918,
        9988
      ]
    },
    {
      "pos": [
        10433,
        10503
      ],
      "content": "以下代码示例将获取 <bpt id=\"p1\">**</bpt>mycontainer<ept id=\"p1\">**</ept> 的当前 ACL，然后使用 <bpt id=\"p2\">**</bpt>setBlobAcl<ept id=\"p2\">**</ept> 添加新策略。此方法具有以下用途："
    },
    {
      "content": "设置 ACL 后，你可以根据某个策略的 ID 创建共享访问签名。以下代码示例将为“user2”创建新的共享访问签名：",
      "pos": [
        10880,
        10938
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        11029,
        11033
      ]
    },
    {
      "content": "有关详细信息，请参阅以下资源。",
      "pos": [
        11035,
        11050
      ]
    },
    {
      "content": "Azure Storage SDK for Node API 参考",
      "pos": [
        11057,
        11090
      ]
    },
    {
      "content": "[Azure 存储团队博客][]",
      "pos": [
        11098,
        11114
      ]
    },
    {
      "pos": [
        11119,
        11163
      ],
      "content": "GitHub 上的 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Node<ept id=\"p1\">][]</ept> 存储库"
    },
    {
      "content": "Node.js 开发人员中心",
      "pos": [
        11169,
        11183
      ]
    },
    {
      "content": "使用 AzCopy 命令行实用程序传输数据",
      "pos": [
        11208,
        11229
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Node.js 使用 Blob 存储 | Azure\" \n    description=\"了解如何使用 Azure Blob 服务上载、下载、列出和删除 Blob 内容。示例用 Node.js 编写。\"\n    services=\"storage\" \n    documentationCenter=\"nodejs\" \n    authors=\"MikeWasson\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"12/01/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n\n\n# 如何通过 Node.js 使用 Blob 存储\n\n[AZURE.INCLUDE [storage-selector-blob-include](../includes/storage-selector-blob-include.md)]\n\n## 概述\n\n本文将演示如何使用 Azure Blob 服务执行常见方案。相关示例是通过 Node.js API 编写的。涉及的方案包括“上传”、“列出”、“下载”和“删除”Blob。\n\n[AZURE.INCLUDE [storage-blob-concepts-include](../includes/storage-blob-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 Node.js 应用程序\n\n有关创建 Node.js 应用程序的说明，请参阅[创建 Node.js 应用程序并将其部署到 Azure Web 应用]、[Node.js 云服务][Node.js 云服务]（使用 Windows PowerShell）或 [使用 WebMatrix 构建 Web 应用]。\n\n## 配置应用程序以访问存储\n\n若要使用 Azure 存储空间，你需要 Azure Storage SDK for Node.js，其中包括一组便于与存储 REST 服务进行通信的库。\n\n### 使用 Node 包管理器 (NPM) 可获取该程序包\n\n1.  使用 **PowerShell** (Windows)、**Terminal** (Mac) 或 **Bash** (Unix) 等命令行界面导航到您在其中创建了示例应用程序的文件夹。\n\n2.  在命令窗口中键入 **npm install azure-storage**。该命令的输出类似于以下代码示例。\n\n        azure-storage@0.5.0 node_modules\\azure-storage\n        +-- extend@1.2.1\n        +-- xmlbuilder@0.4.3\n        +-- mime@1.2.11\n        +-- node-uuid@1.4.3\n        +-- validator@3.22.2\n        +-- underscore@1.4.4\n        +-- readable-stream@1.0.33 (string_decoder@0.10.31, isarray@0.0.1, inherits@2.0.1, core-util-is@1.0.1)\n        +-- xml2js@0.2.7 (sax@0.5.2)\n        +-- request@2.57.0 (caseless@0.10.0, aws-sign2@0.5.0, forever-agent@0.6.1, stringstream@0.0.4, oauth-sign@0.8.0, tunnel-agent@0.4.1, isstream@0.1.2, json-stringify-safe@5.0.1, bl@0.9.4, combined-stream@1.0.5, qs@3.1.0, mime-types@2.0.14, form-data@0.2.0, http-signature@0.11.0, tough-cookie@2.0.0, hawk@2.3.1, har-validator@1.8.0)\n\n3.  可以手动运行 **ls** 命令来验证是否创建了 **node\\_modules** 文件夹。在该文件夹中，您将找到 **azure-storage** 包，其中包含您访问存储所需的库。\n\n### 导入包\n\n使用记事本或其他文本编辑器将以下内容添加到您要在其中使用存储的应用程序的 **server.js** 文件的顶部：\n\n    var azure = require('azure-storage');\n\n## 设置 Azure 存储连接\n\nAzure 模块将读取环境变量 `AZURE_STORAGE_ACCOUNT`、`AZURE_STORAGE_ACCESS_KEY` 或 `AZURE_STORAGE_CONNECTION_STRING`，以便获取连接到 Azure 存储帐户所需的信息。如果未设置这些环境变量，则在调用 **createBlobService** 时必须指定帐户信息。\n\n有关在管理门户中为 Azure Web 应用设置环境变量的示例，请参阅[使用存储构建 Node.js Web 应用]。\n\n## 创建容器\n\n使用 **BlobService** 对象可以对容器和 Blob 进行操作。以下代码创建 **BlobService** 对象。将以下内容添加到 **server.js** 顶部附近。\n\n    var blobSvc = azure.createBlobService();\n\n> [AZURE.NOTE] 您可以匿名访问 Blob，只需使用 **createBlobServiceAnonymous** 并提供主机地址即可。例如，使用 `var blobSvc = azure.createBlobServiceAnonymous('https://myblob.blob.core.chinacloudapi.cn/');`。\n\n[AZURE.INCLUDE [storage-container-naming-rules-include](../includes/storage-container-naming-rules-include.md)]\n\n若要创建一个新的容器，请使用 **createContainerIfNotExists**。以下代码示例将创建名为“mycontainer”的新容器\n\n    blobSvc.createContainerIfNotExists('mycontainer', function(error, result, response){\n      if(!error){\n        // Container exists and allows\n        // anonymous read access to blob\n        // content and metadata within this container\n      }\n    });\n\n如果该容器是新建的，则 `result` 为 true。如果容器已存在，`result` 将为 false。`response` 将包含有关操作的信息，包括容器的 [ETag](http://zh.wikipedia.org/wiki/HTTP_ETag) 信息。\n\n### 容器安全性\n\n默认情况下，新容器是私有的，不能匿名访问。若要使容器公开，以便能够对其进行匿名访问，可将容器的访问级别设置为“Blob”或“容器”。\n\n* **Blob** - 可匿名读取此容器中的 Blob 内容和元数据，但无法匿名读取容器元数据（如列出容器中的所有 Blob）\n\n* **容器** - 可匿名读取 Blob 内容和元数据，以及容器元数据\n\n以下代码示例演示了如何将访问级别设置为“Blob”：\n\n    blobSvc.createContainerIfNotExists('mycontainer', {publicAccessLevel : 'blob'}, function(error, result, response){\n      if(!error){\n        // Container exists and is private\n      }\n    });\n\n另外，您可以通过使用 **setContainerAcl** 指定访问级别来修改容器的访问级别。以下代码示例将访问级别更改为“容器”：\n\n    blobSvc.setContainerAcl('mycontainer', null /* signedIdentifiers */, 'container' /* publicAccessLevel*/, function(error, result, response){\n      if(!error){\n        // Container access level set to 'container'\n      }\n    });\n\n结果将包含有关操作的信息，包括容器的当前 **ETag**。\n\n### 筛选器\n\n你可以向使用 **BlobService** 执行的操作应用可选的筛选操作。筛选操作可包括日志记录、自动重试等。筛选器是实现具有签名的方法的对象：\n\n        function handle (requestOptions, next)\n\n在对请求选项执行预处理后，该方法需要调用“next”并且传递具有以下签名的回调：\n\n        function (returnObject, finalCallback, next)\n\n在此回调中并且在处理 returnObject（来自对服务器请求的响应）后，回调需要调用 next（如果它存在以便继续处理其他筛选器）或只调用 finalCallback 以便结束服务调用。\n\nAzure SDK for Node.js 中附带了两个实现了重试逻辑的筛选器，分别是 **ExponentialRetryPolicyFilter** 和 **LinearRetryPolicyFilter**。下面的代码将创建一个 **BlobService** 对象，该对象使用 **ExponentialRetryPolicyFilter**：\n\n    var retryOperations = new azure.ExponentialRetryPolicyFilter();\n    var blobSvc = azure.createBlobService().withFilter(retryOperations);\n\n## 将 Blob 上载到容器中\n\nBlob 可以基于块，也可以基于页。块 Blob 可以让你更高效地上传大型数据，而页 Blob 则针对读/写操作进行了优化。有关详细信息，请参阅[了解块 Blob 和页 Blob](http://msdn.microsoft.com/zh-cn/library/azure/ee691964.aspx)。\n\n###块 Blob\n\n若要将数据上传到块 Blob，可使用以下方法：\n\n* **createBlockBlobFromLocalFile** - 创建新的块 Blob 和上传文件的内容。\n\n* **createBlockBlobFromStream** - 创建新的块 Blob 和上传流的内容。\n\n* **createBlockBlobFromText** - 创建新的块 Blob 和上传字符串的内容。\n\n* **createWriteStreamToBlockBlob** - 向块 Blob 提供写入流。\n\n以下代码示例将 **test.txt** 文件的内容上传到 **myblob** 中。\n\n    blobSvc.createBlockBlobFromLocalFile('mycontainer', 'myblob', 'test.txt', function(error, result, response){\n      if(!error){\n        // file uploaded\n      }\n    });\n\n这些方法返回的 `result` 将包含有关操作的信息，例如 Blob 的 **ETag**。\n\n### 页 Blob\n\n若要将数据上传到页 Blob，可使用以下方法：\n\n* **createPageBlob** - 创建新的特定长度的页 Blob。\n\n* **createPageBlobFromLocalFile** - 创建新的页 Blob 并上传文件的内容。\n\n* **createPageBlobFromStream** - 创建新的页 Blob 并上传流的内容。\n\n* **createWriteStreamToExistingPageBlob** - 向现有页 Blob 提供写入流。\n\n* **createWriteStreamToNewPageBlob** - 创建新的 blob，然后向其提供写入流。\n\n以下代码示例将 **test.txt** 文件的内容上传到 **mypageblob** 中。\n\n    blobSvc.createPageBlobFromLocalFile('mycontainer', 'mypageblob', 'test.txt', function(error, result, response){\n      if(!error){\n        // file uploaded\n      }\n    });\n\n> [AZURE.NOTE] 页 Blob 包含 512 字节的“页面”。当你上传大小不是 512 倍数的数据时，可能会收到错误。\n\n## 列出容器中的 Blob\n\n若要列出容器中的 Blob，请使用 **listBlobsSegmented** 方法。如果您想要返回带特定前缀的 Blob，请使用 **listBlobsSegmentedWithPrefix**。\n\n    blobSvc.listBlobsSegmented('mycontainer', null, function(error, result, response){\n      if(!error){\n        // result.entries contains the entries\n        // If not all blobs were returned, result.continuationToken has the continuation token.\n      }\n    });\n\n`result` 包含一个 `entries` 集合，该集合是一组用于描述每个 Blob 的对象。如果不能返回所有 Blob，`result` 还将提供 `continuationToken`，这可用作第二个参数来检索其他条目。\n\n## 下载 Blob\n\n若要从 Blob 下载数据，可使用以下方法：\n\n* **getBlobToLocalFile** - 将 Blob 内容写入文件\n\n* **getBlobToStream** - 将 Blob 内容写入流\n\n* **getBlobToText** - 将 Blob 内容写入字符串\n\n* **createReadStream** - 提供可从 Blob 读取内容的流\n\n以下代码示例演示了如何使用 **getBlobToStream** 下载 **myblob** Blob 的内容，并使用一个流将其存储到 **output.txt** 文件：\n\n    var fs = require('fs');\n    blobSvc.getBlobToStream('mycontainer', 'myblob', fs.createWriteStream('output.txt'), function(error, result, response){\n      if(!error){\n        // blob retrieved\n      }\n    });\n\n`result` 包含有关 Blob 的信息，包括 **ETag** 信息。\n\n## 删除 Blob\n\n最后，若要删除 Blob，请调用 **deleteBlob**。以下代码示例将删除名为 **myblob** 的 Blob。\n\n    blobSvc.deleteBlob(containerName, 'myblob', function(error, response){\n      if(!error){\n        // Blob has been deleted\n      }\n    });\n\n## 并发访问\n\n若要允许从多个客户端或多个进程实例并发访问某个 Blob，您可以使用 **ETag** 或**租约**。\n\n* **Etag** - 用于检测 Blob 或容器是否已被其他进程修改\n\n* **租约** - 用于在某个时段内获取对 Blob 的独占式可续订写入或删除访问\n\n### ETag\n\n如果你需要允许多个客户端或实例同时写入该 Blob，请使用 ETag。ETag 用于确定自从你第一次读取或创建某个容器或 Blob 以来，该容器或 Blob 是否被修改，这样就可以避免覆盖其他客户端或进程提交的更改。\n\n可以使用可选的 `options.accessConditions` 参数设置ETag 条件。如果 Blob 已存在且具有 `etagToMatch` 所包含的 ETag 值，则以下代码示例将仅上传 **test.txt** 文件。\n\n    blobSvc.createBlockBlobFromLocalFile('mycontainer', 'myblob', 'test.txt', { accessConditions: { 'if-match': etagToMatch} }, function(error, result, response){\n      if(!error){\n        // file uploaded\n      }\n    });\n\n当你使用 ETag 时，常规模式为：\n\n1. 通过创建、列出或获取操作来获取 ETag。\n\n2. 执行一个操作，查看 ETag 值是否尚未修改。\n\n如果值已修改，则表明在你获得 ETag 值后，其他客户端或实例已修改该 Blob 或容器。\n\n### 租约\n\n新的租约可使用 **acquireLease** 方法获取，只需指定您希望获取其租约的 Blob 或容器即可。例如，以下代码将获取 **myblob** 的租约。\n\n    blobSvc.acquireLease('mycontainer', 'myblob', function(error, result, response){\n      if(!error) {\n        console.log('leaseId: ' + result.id);\n      }\n    });\n\n对 **myblob** 的后续操作必须提供 `options.leaseId` 参数。租约 ID 作为 `result.id` 从 **acquireLease** 返回。\n\n> [AZURE.NOTE] 默认情况下，租约期限为无期。您可以指定一个无限的租期（15 到 60 秒），只需提供 `options.leaseDuration` 参数即可。\n\n若要删除租约，请使用 **releaseLease**。若要中断租约，但又要防止其他人在您的原始租约到期之前获得新租约，则可使用 **breakLease**。\n\n## 使用共享访问签名\n\n共享访问签名 (SAS) 是一种安全的方法，用于对 Blob 和容器进行细致访问而无需提供你的存储帐户名或密钥。通常使用共享访问签名来提供对你的数据的有限访问权限，例如允许移动应用程序访问 Blob。\n\n> [AZURE.NOTE] 虽然你也可以允许匿名访问 Blob，但共享访问签名可以让你提供更受控制的访问，因为你必须生成 SAS。\n\n受信任的应用程序（例如基于云的服务）可使用 **BlobService** 的 **generateSharedAccessSignature** 生成共享访问签名，然后将其提供给不受信任的或不完全受信任的应用程序，例如移动应用。共享访问签名可使用策略生成，该策略描述了共享访问签名的生效日期和失效日期，以及授予共享访问签名持有者的访问级别。\n\n以下代码示例生成了一个新的共享访问策略，该策略将允许共享访问签名持有者对 **myblob** Blob 执行读取操作，在创建后 100 分钟过期。\n\n    var startDate = new Date();\n    var expiryDate = new Date(startDate);\n    expiryDate.setMinutes(startDate.getMinutes() + 100);\n    startDate.setMinutes(startDate.getMinutes() - 100);\n\n    var sharedAccessPolicy = {\n      AccessPolicy: {\n        Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,\n        Start: startDate,\n        Expiry: expiryDate\n      },\n    };\n\n    var blobSAS = blobSvc.generateSharedAccessSignature('mycontainer', 'myblob', sharedAccessPolicy);\n    var host = blobSvc.host;\n\n请注意，还必须提供主机信息，因为共享访问签名持有者尝试访问容器时，必须提供该信息。\n\n然后，客户端应用程序将共享访问签名用于 **BlobServiceWithSAS**，以便针对 Blob 执行操作。以下语句获取有关 **myblob** 的信息。\n\n    var sharedBlobSvc = azure.createBlobServiceWithSas(host, blobSAS);\n    sharedBlobSvc.getBlobProperties('mycontainer', 'myblob', function (error, result, response) {\n      if(!error) {\n        // retrieved info\n      }\n    });\n\n由于共享访问签名在生成时具有只读访问权限，因此如果尝试修改 Blob，则会返回错误。\n\n### 访问控制列表\n\n你还可以使用访问控制列表 (ACL) 为 SAS 设置访问策略。如果你希望允许多个客户端访问某个容器，但为每个客户端提供了不同的访问策略，则访问控制列表会很有用。\n\nACL 是使用一组访问策略实施的，每个策略都有一个关联的 ID。以下代码示例定义了两个策略，一个用于“user1”，一个用于“user2”：\n\n    var sharedAccessPolicy = [\n      {\n        AccessPolicy: {\n          Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,\n          Start: startDate,\n          Expiry: expiryDate\n        },\n        Id: 'user1'\n      },\n      {\n        AccessPolicy: {\n          Permissions: azure.BlobUtilities.SharedAccessPermissions.WRITE,\n          Start: startDate,\n          Expiry: expiryDate\n        },\n        Id: 'user2'\n      }\n    ];\n\n以下代码示例将获取 **mycontainer** 的当前 ACL，然后使用 **setBlobAcl** 添加新策略。此方法具有以下用途：\n\n    blobSvc.getBlobAcl('mycontainer', function(error, result, response) {\n      if(!error){\n        //push the new policy into signedIdentifiers\n        result.signedIdentifiers.push(sharedAccessPolicy);\n        blobSvc.setBlobAcl('mycontainer', result, function(error, result, response){\n          if(!error){\n            // ACL set\n          }\n        });\n      }\n    });\n\n设置 ACL 后，你可以根据某个策略的 ID 创建共享访问签名。以下代码示例将为“user2”创建新的共享访问签名：\n\n    blobSAS = blobSvc.generateSharedAccessSignature('mycontainer', { Id: 'user2' });\n\n## 后续步骤\n\n有关详细信息，请参阅以下资源。\n\n-   [Azure Storage SDK for Node API 参考][]\n-   [Azure 存储团队博客][]\n-   GitHub 上的 [Azure Storage SDK for Node][] 存储库\n-   [Node.js 开发人员中心](/develop/nodejs/)\n-   [使用 AzCopy 命令行实用程序传输数据](/documentation/articles/storage-use-azcopy)\n\n  [Azure Storage SDK for Node]: https://github.com/Azure/azure-storage-node\n  [创建 Node.js 应用程序并将其部署到 Azure Web 应用]: /documentation/articles/web-sites-nodejs-develop-deploy-mac\n  [使用存储构建 Node.js 云服务]: /zh-cn/documentation/articles/storage-nodejs-use-table-storage-cloud-service-app\n  [使用存储构建 Node.js Web 应用]: /zh-cn/documentation/articles/storage-nodejs-use-table-storage-web-site\n  [使用 WebMatrix 构建 Web 应用]: /zh-cn/documentation/articles/web-sites-nodejs-use-webmatrix\n  [使用 REST API]: http://msdn.microsoft.com/zh-cn/library/azure/hh264518.aspx\n  [Azure 管理门户]: http://manage.windowsazure.cn\n  [Node.js 云服务]: /zh-cn/documentation/articles/cloud-services-nodejs-develop-deploy-app\n  [Azure 存储空间团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n[Azure Storage SDK for Node API 参考]: http://dl.windowsazure.com/nodestoragedocs/index.html\n \n\n<!---HONumber=Mooncake_0118_2016-->"
}