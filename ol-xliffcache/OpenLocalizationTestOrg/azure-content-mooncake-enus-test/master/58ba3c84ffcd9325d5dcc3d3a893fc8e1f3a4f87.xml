{
  "nodes": [
    {
      "content": "将 SQL 代码迁移到 SQL 数据仓库 | Azure",
      "pos": [
        26,
        54
      ]
    },
    {
      "content": "有关在开发解决方案时将 SQL 代码迁移到 Azure SQL 数据仓库的技巧。",
      "pos": [
        72,
        112
      ]
    },
    {
      "content": "将 SQL 代码迁移到 SQL 数据仓库",
      "pos": [
        331,
        351
      ]
    },
    {
      "content": "为了确保代码符合 SQL 数据仓库的要求，你很可能需要更改代码基。某些 SQL 数据仓库功能设计为直接以分布方式运行，因此可以大幅改善性能。但是，为了保持性能和缩放性，某些功能还无法使用。",
      "pos": [
        353,
        447
      ]
    },
    {
      "content": "Transact-SQL 代码更改",
      "pos": [
        452,
        469
      ]
    },
    {
      "content": "以下列表汇总了 Azure SQL 数据仓库不支持的主要功能。单击这些链接可以转到解决不支持功能的方法：",
      "pos": [
        471,
        523
      ]
    },
    {
      "content": "Update 中的 ANSI Join",
      "pos": [
        528,
        547
      ]
    },
    {
      "content": "Delete 中的 ANSI Join",
      "pos": [
        554,
        573
      ]
    },
    {
      "content": "Merge 语句",
      "pos": [
        580,
        588
      ]
    },
    {
      "content": "跨数据库联接",
      "pos": [
        594,
        600
      ]
    },
    {
      "content": "游标",
      "pos": [
        604,
        606
      ]
    },
    {
      "content": "SELECT..INTO",
      "pos": [
        613,
        625
      ]
    },
    {
      "content": "INSERT..EXEC",
      "pos": [
        632,
        644
      ]
    },
    {
      "content": "output 子句",
      "pos": [
        650,
        659
      ]
    },
    {
      "content": "内联用户定义的函数",
      "pos": [
        662,
        671
      ]
    },
    {
      "content": "多语句函数",
      "pos": [
        674,
        679
      ]
    },
    {
      "content": "通用表表达式",
      "pos": [
        683,
        689
      ]
    },
    {
      "content": "[递归通用表表达式 (CTE)](#Recursive-common-table-expressions-(CTE)",
      "pos": [
        720,
        778
      ]
    },
    {
      "content": "CLR 函数和过程",
      "pos": [
        781,
        790
      ]
    },
    {
      "content": "$partition 函数",
      "pos": [
        793,
        806
      ]
    },
    {
      "content": "表变量",
      "pos": [
        809,
        812
      ]
    },
    {
      "content": "表值参数",
      "pos": [
        815,
        819
      ]
    },
    {
      "content": "分布式事务",
      "pos": [
        822,
        827
      ]
    },
    {
      "content": "提交/回滚工作",
      "pos": [
        830,
        837
      ]
    },
    {
      "content": "保存事务",
      "pos": [
        840,
        844
      ]
    },
    {
      "content": "执行上下文 (EXECUTE AS)",
      "pos": [
        847,
        865
      ]
    },
    {
      "content": "结合 rollup / cube / grouping sets 选项的 Group By 子句",
      "pos": [
        869,
        917
      ]
    },
    {
      "content": "嵌套级别超过 8",
      "pos": [
        924,
        932
      ]
    },
    {
      "content": "通过视图更新",
      "pos": [
        939,
        945
      ]
    },
    {
      "content": "使用 select 分配变量",
      "pos": [
        952,
        966
      ]
    },
    {
      "content": "动态 SQL 字符串没有 MAX 数据类型",
      "pos": [
        973,
        994
      ]
    },
    {
      "content": "幸好可以解决其中的大多数限制。上面提到的相关开发文章已提供了说明。",
      "pos": [
        999,
        1032
      ]
    },
    {
      "content": "通用表表达式",
      "pos": [
        1038,
        1044
      ]
    },
    {
      "content": "SQL 数据仓库中当前的通用表表达式 (CTE) 实现具有以下功能和限制：",
      "pos": [
        1045,
        1082
      ]
    },
    {
      "content": "CTE 功能",
      "pos": [
        1086,
        1092
      ]
    },
    {
      "content": "可以在 SELECT 语句中指定 CTE。",
      "pos": [
        1097,
        1118
      ]
    },
    {
      "content": "可以在 CREATE VIEW 语句中指定 CTE。",
      "pos": [
        1121,
        1147
      ]
    },
    {
      "content": "可以在 CREATE TABLE AS SELECT (CTAS) 语句中指定 CTE。",
      "pos": [
        1150,
        1194
      ]
    },
    {
      "content": "可以在 CREATE REMOTE TABLE AS SELECT (CRTAS) 语句中指定 CTE。",
      "pos": [
        1197,
        1249
      ]
    },
    {
      "content": "可以在 CREATE EXTERNAL TABLE AS SELECT (CETAS) 语句中指定 CTE。",
      "pos": [
        1252,
        1306
      ]
    },
    {
      "content": "可以从 CTE 引用远程表。",
      "pos": [
        1309,
        1323
      ]
    },
    {
      "content": "可以从 CTE 引用外部表。",
      "pos": [
        1326,
        1340
      ]
    },
    {
      "content": "可以在一个 CTE 中定义多个 CTE 查询定义。",
      "pos": [
        1343,
        1368
      ]
    },
    {
      "content": "CTE 限制",
      "pos": [
        1372,
        1378
      ]
    },
    {
      "content": "CTE 必须后接单个 SELECT 语句。INSERT、UPDATE、DELETE 和 MERGE 语句不受支持。",
      "pos": [
        1383,
        1440
      ]
    },
    {
      "content": "包含自身引用（递归通用表表达式）的通用表表达式不受支持（请参阅下一部分）。",
      "pos": [
        1443,
        1480
      ]
    },
    {
      "content": "不允许在一个 CTE 中指定多个 WITH 子句。例如，如果 CTE\\_query\\_definition 包含子查询，则该子查询不能包含定义另一个 CTE 的嵌套 WITH 子句。",
      "pos": [
        1483,
        1574
      ]
    },
    {
      "content": "ORDER BY 子句不能在 CTE\\_query\\_definition 中使用，除非指定了 TOP 子句。",
      "pos": [
        1577,
        1632
      ]
    },
    {
      "content": "如果在属于批处理的语句中使用 CTE，该 CTE 前面的语句必须后接分号。",
      "pos": [
        1635,
        1672
      ]
    },
    {
      "content": "在 sp\\_prepare 准备的语句中使用时，CTE 的行为与 PDW 中其他 SELECT 语句的行为相同。但是，如果 CTE 用作 sp\\_prepare 所准备的 CETAS 的一部分，则因为针对 sp\\_prepare 实现绑定的方式不同，CTE 的行为将与 SQL Server 和其他 PDW 语句不同。如果引用 CTE 的 SELECT 使用了不在 CTE 中的错误列，sp\\_prepare 将会通过且不检测错误，但在 sp\\_execute 期间将引发错误。",
      "pos": [
        1675,
        1914
      ]
    },
    {
      "content": "递归通用表表达式 (CTE)",
      "pos": [
        1920,
        1934
      ]
    },
    {
      "pos": [
        1936,
        2109
      ],
      "content": "这是一种复杂的迁移方案，最佳过程是细分 CTE 并逐步处理。通常你可以使用循环，并在循环访问递归的临时查询时填充临时表。填充临时表之后，你可以使用单个结果集返回数据。类似的方法已用于解决<bpt id=\"p1\">[</bpt>结合 rollup / cube / grouping sets 选项的 Group By 子句<ept id=\"p1\">][]</ept>一文中所述的 <ph id=\"ph1\">`GROUP BY WITH CUBE`</ph>。"
    },
    {
      "content": "系统函数",
      "pos": [
        2115,
        2119
      ]
    },
    {
      "content": "还有一些不支持的系统函数。在数据仓库中，你可能经常发现使用了下面这些主要函数：",
      "pos": [
        2121,
        2160
      ]
    },
    {
      "content": "NEWID()",
      "pos": [
        2164,
        2171
      ]
    },
    {
      "content": "NEWSEQUENTIALID()",
      "pos": [
        2174,
        2191
      ]
    },
    {
      "content": "@@NESTLEVEL()",
      "pos": [
        2194,
        2207
      ]
    },
    {
      "content": "@@IDENTITY()",
      "pos": [
        2210,
        2222
      ]
    },
    {
      "content": "@@ROWCOUNT()",
      "pos": [
        2225,
        2237
      ]
    },
    {
      "content": "ROWCOUNT\\_BIG",
      "pos": [
        2240,
        2253
      ]
    },
    {
      "content": "ERROR\\_LINE()",
      "pos": [
        2256,
        2269
      ]
    },
    {
      "content": "同样，其中的许多问题都可以得到解决。",
      "pos": [
        2271,
        2289
      ]
    },
    {
      "content": "例如，以下代码是检索 @@ROWCOUNT 信息的替代解决方法：",
      "pos": [
        2291,
        2323
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        2712,
        2716
      ]
    },
    {
      "pos": [
        2717,
        2739
      ],
      "content": "有关开发代码的建议，请参阅<bpt id=\"p1\">[</bpt>开发概述<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"将 SQL 代码迁移到 SQL 数据仓库 | Azure\"\n   description=\"有关在开发解决方案时将 SQL 代码迁移到 Azure SQL 数据仓库的技巧。\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"lodipalm\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.date=\"12/09/2015\"\n   wacn.date=\"01/29/2015\"/>\n\n# 将 SQL 代码迁移到 SQL 数据仓库\n\n为了确保代码符合 SQL 数据仓库的要求，你很可能需要更改代码基。某些 SQL 数据仓库功能设计为直接以分布方式运行，因此可以大幅改善性能。但是，为了保持性能和缩放性，某些功能还无法使用。\n\n## Transact-SQL 代码更改\n\n以下列表汇总了 Azure SQL 数据仓库不支持的主要功能。单击这些链接可以转到解决不支持功能的方法：\n\n- [Update 中的 ANSI Join][]\n- [Delete 中的 ANSI Join][]\n- [Merge 语句][]\n- 跨数据库联接\n- [游标][]\n- [SELECT..INTO][]\n- [INSERT..EXEC][]\n- output 子句\n- 内联用户定义的函数\n- 多语句函数\n- [通用表表达式](#Common-table-expressions)\n- [递归通用表表达式 (CTE)](#Recursive-common-table-expressions-(CTE)\n- CLR 函数和过程\n- $partition 函数\n- 表变量\n- 表值参数\n- 分布式事务\n- 提交/回滚工作\n- 保存事务\n- 执行上下文 (EXECUTE AS)\n- [结合 rollup / cube / grouping sets 选项的 Group By 子句][]\n- [嵌套级别超过 8][]\n- [通过视图更新][]\n- [使用 select 分配变量][]\n- [动态 SQL 字符串没有 MAX 数据类型][]\n\n幸好可以解决其中的大多数限制。上面提到的相关开发文章已提供了说明。\n\n### 通用表表达式\nSQL 数据仓库中当前的通用表表达式 (CTE) 实现具有以下功能和限制：\n\n**CTE 功能**\n+ 可以在 SELECT 语句中指定 CTE。\n+ 可以在 CREATE VIEW 语句中指定 CTE。\n+ 可以在 CREATE TABLE AS SELECT (CTAS) 语句中指定 CTE。\n+ 可以在 CREATE REMOTE TABLE AS SELECT (CRTAS) 语句中指定 CTE。\n+ 可以在 CREATE EXTERNAL TABLE AS SELECT (CETAS) 语句中指定 CTE。\n+ 可以从 CTE 引用远程表。\n+ 可以从 CTE 引用外部表。\n+ 可以在一个 CTE 中定义多个 CTE 查询定义。\n\n**CTE 限制**\n+ CTE 必须后接单个 SELECT 语句。INSERT、UPDATE、DELETE 和 MERGE 语句不受支持。\n+ 包含自身引用（递归通用表表达式）的通用表表达式不受支持（请参阅下一部分）。\n+ 不允许在一个 CTE 中指定多个 WITH 子句。例如，如果 CTE\\_query\\_definition 包含子查询，则该子查询不能包含定义另一个 CTE 的嵌套 WITH 子句。\n+ ORDER BY 子句不能在 CTE\\_query\\_definition 中使用，除非指定了 TOP 子句。\n+ 如果在属于批处理的语句中使用 CTE，该 CTE 前面的语句必须后接分号。\n+ 在 sp\\_prepare 准备的语句中使用时，CTE 的行为与 PDW 中其他 SELECT 语句的行为相同。但是，如果 CTE 用作 sp\\_prepare 所准备的 CETAS 的一部分，则因为针对 sp\\_prepare 实现绑定的方式不同，CTE 的行为将与 SQL Server 和其他 PDW 语句不同。如果引用 CTE 的 SELECT 使用了不在 CTE 中的错误列，sp\\_prepare 将会通过且不检测错误，但在 sp\\_execute 期间将引发错误。\n\n### 递归通用表表达式 (CTE)\n\n这是一种复杂的迁移方案，最佳过程是细分 CTE 并逐步处理。通常你可以使用循环，并在循环访问递归的临时查询时填充临时表。填充临时表之后，你可以使用单个结果集返回数据。类似的方法已用于解决[结合 rollup / cube / grouping sets 选项的 Group By 子句][]一文中所述的 `GROUP BY WITH CUBE`。\n\n### 系统函数\n\n还有一些不支持的系统函数。在数据仓库中，你可能经常发现使用了下面这些主要函数：\n\n- NEWID()\n- NEWSEQUENTIALID()\n- @@NESTLEVEL()\n- @@IDENTITY()\n- @@ROWCOUNT()\n- ROWCOUNT\\_BIG\n- ERROR\\_LINE()\n\n同样，其中的许多问题都可以得到解决。\n\n例如，以下代码是检索 @@ROWCOUNT 信息的替代解决方法：\n\n```\nSELECT  SUM(row_count) AS row_count \nFROM    sys.dm_pdw_sql_requests \nWHERE   row_count <> -1 \nAND     request_id IN \n                    (   SELECT TOP 1    request_id \n                        FROM            sys.dm_pdw_exec_requests \n                        WHERE           session_id = SESSION_ID() \n                        ORDER BY end_time DESC\n                    )\n;\n``` \n\n## 后续步骤\n有关开发代码的建议，请参阅[开发概述][]。\n\n<!--Image references-->\n\n<!--Article references-->\n[Update 中的 ANSI Join]: /documentation/articles/sql-data-warehouse-develop-ctas\n[Delete 中的 ANSI Join]: /documentation/articles/sql-data-warehouse-develop-ctas\n[Merge 语句]: /documentation/articles/sql-data-warehouse-develop-ctas\n[INSERT..EXEC]: /documentation/articles/sql-data-warehouse-develop-temporary-tables\n\n[游标]: /documentation/articles/sql-data-warehouse-develop-loops\n[SELECT..INTO]: /documentation/articles/sql-data-warehouse-develop-ctas\n[结合 rollup / cube / grouping sets 选项的 Group By 子句]: /documentation/articles/sql-data-warehouse-develop-group-by-options\n[嵌套级别超过 8]: /documentation/articles/sql-data-warehouse-develop-transactions\n[通过视图更新]: /documentation/articles/sql-data-warehouse-develop-views\n[使用 select 分配变量]: /documentation/articles/sql-data-warehouse-develop-variable-assignment\n[动态 SQL 字符串没有 MAX 数据类型]: /documentation/articles/sql-data-warehouse-develop-dynamic-sql\n[开发概述]: /documentation/articles/sql-data-warehouse-overview-develop\n\n<!--MSDN references-->\n\n<!--Other Web references-->\n\n<!---HONumber=Mooncake_0118_2016-->"
}