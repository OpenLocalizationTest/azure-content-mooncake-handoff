{
  "nodes": [
    {
      "content": "使用 Azure Web 应用进行灵便软件开发",
      "pos": [
        27,
        50
      ]
    },
    {
      "content": "学习如何使用支持灵便软件开发的方式，通过 Azure Web 应用创建高缩放性的复杂应用程序。",
      "pos": [
        69,
        116
      ]
    },
    {
      "content": "使用 Azure Web 应用进行灵便软件开发",
      "pos": [
        328,
        351
      ]
    },
    {
      "pos": [
        355,
        498
      ],
      "content": "在本教程中，你将学习如何使用支持<bpt id=\"p1\">[</bpt>灵便软件开发<ept id=\"p1\">](https://en.wikipedia.org/wiki/Agile_software_development)</ept>的方式，通过 <bpt id=\"p2\">[</bpt>Azure Web 应用<ept id=\"p2\">](/home/features/web-site/)</ept>创建高缩放性的复杂应用程序。"
    },
    {
      "pos": [
        500,
        822
      ],
      "content": "技术流程限制通常会妨碍成功的实施灵便方法。如果在 <bpt id=\"p1\">[</bpt>Azure 资源管理器<ept id=\"p1\">](/documentation/articles/resource-group-overview)</ept>中合理地结合了部署的协调与管理，则具有<bpt id=\"p2\">[</bpt>连续发布<ept id=\"p2\">](/documentation/articles/web-sites-publish-source-control)</ept>、<bpt id=\"p3\">[</bpt>过渡环境<ept id=\"p3\">](/documentation/articles/web-sites-staged-publishing)</ept>（槽）和<bpt id=\"p4\">[</bpt>监视<ept id=\"p4\">](/documentation/articles/web-sites-monitor)</ept>等功能的 Azure Web 应用是非常适合采用灵便软件开发的开发人员的解决方案。"
    },
    {
      "content": "下表是灵便开发的相关要求以及 Azure 服务如何启用它们的简短列表。",
      "pos": [
        824,
        859
      ]
    },
    {
      "content": "要求",
      "pos": [
        863,
        865
      ]
    },
    {
      "content": "Azure 如何实现",
      "pos": [
        868,
        878
      ]
    },
    {
      "content": "- 将构建版本设为自我测试",
      "pos": [
        1168,
        1181
      ]
    },
    {
      "content": "负载测试、Web 测试等可以使用 Azure 资源管理器模板进行部署。",
      "pos": [
        1184,
        1219
      ]
    },
    {
      "content": "- 在生产环境的复本中运行测试",
      "pos": [
        1223,
        1238
      ]
    },
    {
      "content": "Azure 资源管理器模板可以用来创建 Azure 生产环境的复本（包括应用设置、连接字符串模板、缩放等）以通过快速且可预测的方式测试。",
      "pos": [
        1241,
        1309
      ]
    },
    {
      "content": "执行的操作",
      "pos": [
        1315,
        1320
      ]
    },
    {
      "pos": [
        1325,
        1559
      ],
      "content": "你将逐步执行典型的“开发-测试-过渡-生产”工作流，以将新更改发布到 <bpt id=\"p1\">[</bpt>ToDoApp<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp)</ept> 示例应用程序（包含两个<bpt id=\"p2\">[</bpt> Web 应用<ept id=\"p2\">](/home/features/web-site/)</ept>：一个是前端 (FE)，另一个是 Web API 后端 (BE)）和 <bpt id=\"p3\">[</bpt>SQL 数据库<ept id=\"p3\">](/home/features/sql-database/)</ept>。将按如下所示使用部署体系结构："
    },
    {
      "content": "将图片放入文字：",
      "pos": [
        1638,
        1646
      ]
    },
    {
      "pos": [
        1652,
        1813
      ],
      "content": "部署体系结构分成三个不同的环境（或 Azure 中的<bpt id=\"p1\">[</bpt>资源组<ept id=\"p1\">](/documentation/articles/resource-group-overview)</ept>），各有其自身的 App Service 计划、<bpt id=\"p2\">[</bpt>缩放<ept id=\"p2\">](/documentation/articles/web-sites-scale)</ept>设置和 SQL 数据库。"
    },
    {
      "content": "你可以单独管理每个环境。它们甚至可以存在于不同的订阅中。",
      "pos": [
        1819,
        1847
      ]
    },
    {
      "content": "过渡和生产环境实现为相同 Web 应用应用的两个槽。",
      "pos": [
        1852,
        1878
      ]
    },
    {
      "pos": [
        1883,
        1985
      ],
      "content": "在过渡槽（包含生产数据）上验证主分支的提交时，已验证的过渡应用将交换到生产槽，且<bpt id=\"p1\">[</bpt>不会造成停机<ept id=\"p1\">](/documentation/articles/web-sites-staged-publishing)</ept>。"
    },
    {
      "pos": [
        1987,
        2156
      ],
      "content": "生产和过渡环境由 <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>&amp;lt;repository\\_root&gt;<ept id=\"p2\">*</ept>/ARMTemplates/ProdandStage.json<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp/blob/master/ARMTemplates/ProdAndStage.json)</ept> 中的模板定义。"
    },
    {
      "pos": [
        2158,
        2309
      ],
      "content": "开发和测试环境由 <bpt id=\"p1\">[</bpt><bpt id=\"p2\">*</bpt>&amp;lt;repository\\_root&gt;<ept id=\"p2\">*</ept>/ARMTemplates/Dev.json<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp/blob/master/ARMTemplates/Dev.json)</ept> 中的模板定义。"
    },
    {
      "content": "你还要使用典型分支策略，其中，代码从开发分支移到测试分支，然后移到主分支（所谓的质量提升）。",
      "pos": [
        2311,
        2357
      ]
    },
    {
      "content": "所需的项目",
      "pos": [
        2435,
        2440
      ]
    },
    {
      "content": "一个 Azure 帐户",
      "pos": [
        2449,
        2460
      ]
    },
    {
      "pos": [
        2465,
        2500
      ],
      "content": "一个 <bpt id=\"p1\">[</bpt>GitHub<ept id=\"p1\">](https://github.com/)</ept> 帐户"
    },
    {
      "pos": [
        2505,
        2606
      ],
      "content": "Git Shell（与 <bpt id=\"p1\">[</bpt>GitHub for Windows<ept id=\"p1\">](https://windows.github.com/)</ept> 一起安装）- 可让你在相同的会话中运行 Git 和 PowerShell 命令"
    },
    {
      "pos": [
        2612,
        2740
      ],
      "content": "最新的 <bpt id=\"p1\">[</bpt>Azure PowerShell<ept id=\"p1\">](https://github.com/Azure/azure-powershell/releases/download/0.9.4-June2015/azure-powershell.0.9.4.msi)</ept> 软件"
    },
    {
      "pos": [
        2751,
        2820
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 如果使用的是 Auzre PowerShell 1.0 或更高版本，需要对“deploy.ps1”进行大量修改。"
    },
    {
      "pos": [
        2831,
        2860
      ],
      "content": "需要删除所有 <ph id=\"ph1\">`Switch-AzureMode`</ph> 命令。"
    },
    {
      "pos": [
        2870,
        2946
      ],
      "content": "将 <ph id=\"ph1\">`Get-AzureResource`</ph> 替换为 <ph id=\"ph2\">`Get-AzureRmResource`</ph>，并删除 <ph id=\"ph3\">`-OutputObjectFormat`</ph> 参数"
    },
    {
      "pos": [
        2956,
        3298
      ],
      "content": "将 <ph id=\"ph1\">`New-AzureResourceGroup`</ph> 解构为 <ph id=\"ph2\">`New-AzureRmResourceGroup`</ph> 和 <ph id=\"ph3\">`New-AzureRmResourceGroupDeployment`</ph>，例如 <ph id=\"ph4\">`New-AzureRmResourceGroup -Name $RG_Name -Location $RG_Location`</ph> 和 <ph id=\"ph5\">`New-AzureRmResourceGroupDeployment -Verbose -name $RG_Name -ResourceGroupName $RG_Name -TemplateFile \".\\$TemplateFile\" -TemplateParameterFile \".\\temp.json\" -ErrorAction Stop`</ph>"
    },
    {
      "content": "基本了解以下知识：",
      "pos": [
        3304,
        3313
      ]
    },
    {
      "pos": [
        3322,
        3388
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure 资源管理器<ept id=\"p1\">](/documentation/articles/resource-group-overview)</ept>模板部署"
    },
    {
      "content": "Git",
      "pos": [
        3398,
        3401
      ]
    },
    {
      "content": "PowerShell",
      "pos": [
        3446,
        3456
      ]
    },
    {
      "pos": [
        3520,
        3553
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 完成本教程需要有一个 Azure 帐户："
    },
    {
      "pos": [
        3558,
        3673
      ],
      "content": "你可以<bpt id=\"p1\">[</bpt>建立一个试用 Azure 帐户<ept id=\"p1\">](/pricing/1rmb-trial/)</ept> - 获取可用来试用付费版 Azure 服务的信用额度，甚至在用完信用额度后，你仍可以保留帐户和使用免费的 Azure 服务（如 Web 应用）。"
    },
    {
      "content": "设置生产环境",
      "pos": [
        3679,
        3685
      ]
    },
    {
      "content": "在典型的 DevOps 方案中，应用程序在 Azure 中实时运行，并且你可以对它进行更改。此方案将会提供你开发、测试和使用的模板来部署生产环境。本部分将介绍如何设置生产环境。",
      "pos": [
        3690,
        3778
      ]
    },
    {
      "pos": [
        3784,
        3944
      ],
      "content": "创建 <bpt id=\"p1\">[</bpt>ToDoApp<ept id=\"p1\">](https://github.com/azure-appservice-samples/ToDoApp)</ept> 存储库的专属分叉。有关创建分叉的信息，请参阅<bpt id=\"p2\">[</bpt>分叉存储库<ept id=\"p2\">](https://help.github.com/articles/fork-a-repo/)</ept>。创建分叉后，可以在浏览器中查看它。"
    },
    {
      "pos": [
        4038,
        4127
      ],
      "content": "打开 Git Shell 会话。如果你还没有 Git Shell，请立即安装 <bpt id=\"p1\">[</bpt>GitHub for Windows<ept id=\"p1\">](https://windows.github.com/)</ept>。"
    },
    {
      "content": "通过执行以下命令创建分叉的本地复本：",
      "pos": [
        4133,
        4151
      ]
    },
    {
      "pos": [
        4220,
        4294
      ],
      "content": "创建本地复本后，请导航到 <bpt id=\"p1\">*</bpt>&amp;lt;repository\\_root&gt;<ept id=\"p1\">*</ept>\\\\ARMTemplates 并运行 deploy.ps1 脚本，如下所示："
    },
    {
      "pos": [
        4375,
        4426
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 在使用这些模板之前，你需要进行以下编辑，以适应 Azure 中国区的云环境："
    },
    {
      "content": "打开文件“ProdAndStage.json”，然后搜索“sourcecontrols”。",
      "pos": [
        4437,
        4482
      ]
    },
    {
      "pos": [
        4492,
        4572
      ],
      "content": "在块和 fater <ph id=\"ph1\">`\"branch\": \"[parameters('branch')]\"`</ph> 中添加 <ph id=\"ph2\">`\"IsManualIntegration\": true`</ph>"
    },
    {
      "content": "在“ProdAndStage.json”和“deploy.ps1”中，将“West US”或“East US”替换为“China East”或“China North”",
      "pos": [
        4582,
        4666
      ]
    },
    {
      "content": "由于 Ibiza 门户尚未在 Azure 中国区推出，因此我们无法设置 GitHub 凭据。",
      "pos": [
        4674,
        4720
      ]
    },
    {
      "content": "出现提示时，键入所需的用户名和密码来访问数据库。",
      "pos": [
        4726,
        4750
      ]
    },
    {
      "content": "你应会看到各种 Azure 资源的设置进度。部署完成后，脚本将在浏览器中启动应用程序，并发出友好的提示音。",
      "pos": [
        4756,
        4809
      ]
    },
    {
      "pos": [
        4906,
        5023
      ],
      "content": "<ph id=\"ph1\">[AZURE.TIP]</ph> 查看 <bpt id=\"p1\">*</bpt>&amp;lt;repository\\_root&gt;<ept id=\"p1\">*</ept>\\\\ARMTemplates\\\\Deploy.ps1，以了解它如何生成具有唯一 ID 的资源。可以使用相同的方法来创建相同部署的复本，而不必担心资源名称冲突。"
    },
    {
      "content": "返回 Git Shell 会话，运行：",
      "pos": [
        5030,
        5049
      ]
    },
    {
      "pos": [
        5186,
        5269
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 对于 Azure PowerShell 1.0 和更高版本，请删除“swap.ps1”中的所有 <ph id=\"ph2\">`Switch-AzureMode`</ph> 命令。"
    },
    {
      "pos": [
        5275,
        5373
      ],
      "content": "脚本完成后，请返回浏览到前端的地址 (http://ToDoApp<bpt id=\"p1\">*</bpt>&amp;lt;unique_string&gt;<ept id=\"p1\">*</ept>master.chinacloudsites.cn/)，以查看在生产环境中运行的应用程序。"
    },
    {
      "pos": [
        5380,
        5438
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn/)</ept>并查看创建的内容。"
    },
    {
      "pos": [
        5444,
        5625
      ],
      "content": "你应该可以看到两个 Web 应用，其中一个 Web 应用的名称包含 <ph id=\"ph1\">`Api`</ph> 后缀。你还会看到 SQL 数据库和服务器、App Service 计划，以及 Web 应用的过渡槽。浏览不同的资源，并将它们与 <bpt id=\"p1\">*</bpt>&amp;lt;repository\\_root&gt;<ept id=\"p1\">*</ept>\\\\ARMTemplates\\\\ProdAndStage.json 进行比较，以查看它们在模板中的配置方式。"
    },
    {
      "content": "你现在已经设置了生产环境。接下来，将要开始更新应用程序。",
      "pos": [
        5628,
        5656
      ]
    },
    {
      "content": "创建开发和测试分支",
      "pos": [
        5661,
        5670
      ]
    },
    {
      "content": "现在，你已在 Azure 的生产环境中创建了一个复杂应用程序，接下来，你要使用灵便方法来更新应用程序。在本部分中，你将要创建需要进行必要更新的开发和测试分支。",
      "pos": [
        5675,
        5754
      ]
    },
    {
      "pos": [
        5760,
        5819
      ],
      "content": "首先创建测试环境。在 Git Shell 会话中，运行以下命令来创建名为 <bpt id=\"p1\">**</bpt>NewUpdate<ept id=\"p1\">**</ept> 的新分支的环境。"
    },
    {
      "pos": [
        6013,
        6077
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 应该对“Dev.json”进行相同的修改，就像你对“ProdAndStage.json”所做的修改一样"
    },
    {
      "content": "出现提示时，键入所需的用户名和密码来访问数据库。",
      "pos": [
        6083,
        6107
      ]
    },
    {
      "content": "部署完成后，脚本将在浏览器中启动应用程序，并发出友好的提示音。这时，你已创建了带有自身测试环境的新分支。请花点时间来了解有关此测试环境的一些要点：",
      "pos": [
        6113,
        6186
      ]
    },
    {
      "content": "你可以在任何 Azure 订阅中创建测试环境。这意味着，你可以分开管理生产环境和测试环境。",
      "pos": [
        6196,
        6241
      ]
    },
    {
      "content": "测试环境在 Azure 中实时运行。",
      "pos": [
        6250,
        6268
      ]
    },
    {
      "content": "测试环境类似于生产环境，差别在于过渡槽和缩放设置。因为这是 ProdandStage.json 与 Dev.json 之间的唯一差别，所以你可以得知这项信息。",
      "pos": [
        6277,
        6356
      ]
    },
    {
      "pos": [
        6365,
        6412
      ],
      "content": "你可以在其自身 App Service 计划与不同的价格层（例如<bpt id=\"p1\">**</bpt>免费<ept id=\"p1\">**</ept>）中管理测试环境。"
    },
    {
      "pos": [
        6421,
        6467
      ],
      "content": "删除这个测试环境就像删除资源组一样简单。<bpt id=\"p1\">[</bpt>稍后<ept id=\"p1\">](#delete)</ept>你将学习如何执行这项操作。"
    },
    {
      "content": "运行以下命令，以继续创建开发分支：",
      "pos": [
        6473,
        6490
      ]
    },
    {
      "content": "出现提示时，键入所需的用户名和密码来访问数据库。",
      "pos": [
        6663,
        6687
      ]
    },
    {
      "content": "请花点时间来了解有关此开发环境的一些要点：",
      "pos": [
        6693,
        6714
      ]
    },
    {
      "content": "开发环境的配置与测试环境相同，因为它是使用相同模板部署的。",
      "pos": [
        6724,
        6753
      ]
    },
    {
      "content": "在开发人员自己的 Azure 订阅中，可以创建每个开发环境，但分开管理测试环境。",
      "pos": [
        6762,
        6802
      ]
    },
    {
      "content": "开发环境在 Azure 中实时运行。",
      "pos": [
        6811,
        6829
      ]
    },
    {
      "pos": [
        6838,
        6882
      ],
      "content": "删除开发环境就像删除资源组一样简单。<bpt id=\"p1\">[</bpt>稍后<ept id=\"p1\">](#delete)</ept>你将学习如何执行这项操作。"
    },
    {
      "pos": [
        6885,
        6942
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 有多位开发人员处理新的更新时，只要执行以下操作，每一位都可以轻松创建分支和专用开发环境："
    },
    {
      "pos": [
        6949,
        7032
      ],
      "content": "在 GitHub 中创建其在存储库中的专属分叉（请参阅<bpt id=\"p1\">[</bpt>分叉存储库<ept id=\"p1\">](https://help.github.com/articles/fork-a-repo/)</ept>）。"
    },
    {
      "content": "克隆其本地计算机上的分叉",
      "pos": [
        7037,
        7049
      ]
    },
    {
      "content": "运行相同的命令，以创建其自身的开发分支和环境。",
      "pos": [
        7054,
        7077
      ]
    },
    {
      "content": "完成后，GitHub 分叉应有三个分支：",
      "pos": [
        7079,
        7099
      ]
    },
    {
      "pos": [
        7177,
        7253
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中应该有六个 Web 应用（一共三组，每组两个 Web 应用）："
    },
    {
      "pos": [
        7257,
        7326
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 请注意，ProdandStage.json 将生产环境指定为使用<bpt id=\"p1\">**</bpt>标准<ept id=\"p1\">**</ept>定价层，这适合生产应用程序的缩放性。"
    },
    {
      "content": "将代码合并到测试环境",
      "pos": [
        7332,
        7342
      ]
    },
    {
      "content": "准备好将代码从 Dev 分支推送到 NewUpdate 分支后，请执行标准的 git 过程：",
      "pos": [
        7347,
        7393
      ]
    },
    {
      "content": "在 GitHub 中，将 NewUpdate 的任何新提交（例如其他开发人员所创建的提交）合并到 Dev 分支。GitHub 上的任何新提交都会在开发环境中触发代码推送和构建。然后可以确保开发分支中的代码仍能与 NewUpdate 分支中的最新位一起运行。",
      "pos": [
        7399,
        7527
      ]
    },
    {
      "content": "在 GitHub 中，将所有新提交从 Dev 分支合并到 NewUpdate 分支。此操作将在测试环境中触发代码推送和构建。",
      "pos": [
        7533,
        7595
      ]
    },
    {
      "pos": [
        7597,
        7647
      ],
      "content": "现在，请将你的代码推送到 <bpt id=\"p1\">**</bpt>NewUpdate<ept id=\"p1\">**</ept> 分支。在 Git Shell 中运行以下命令："
    },
    {
      "content": "就这么简单！",
      "pos": [
        7755,
        7761
      ]
    },
    {
      "content": "转到测试环境的 Web 应用边栏选项卡，以查看新提交是否已推送到测试环境（合并到 NewUpdate 分支）。然后，单击“浏览”查看样式更改是否在 Azure 中实时运行。",
      "pos": [
        7763,
        7849
      ]
    },
    {
      "content": "将更新部署到生产环境",
      "pos": [
        7854,
        7864
      ]
    },
    {
      "content": "将代码推送到过渡和生产环境的过程类似于前面将代码所推送到测试环境。真的就这么简单。",
      "pos": [
        7869,
        7910
      ]
    },
    {
      "content": "在 Git Shell 中运行以下命令：",
      "pos": [
        7912,
        7932
      ]
    },
    {
      "pos": [
        8037,
        8176
      ],
      "content": "请记住，根据在 ProdandStage.json 中设置过渡和生产环境的方式，新代码将推送到“过渡”槽，并在该处运行。因此，如果你导航到过渡槽的 URL，则会看到新代码正在该处运行。为此，请在 Git Shell 中运行 <ph id=\"ph1\">`Show-AzureWebsite`</ph> cmdlet。"
    },
    {
      "content": "现在，在过渡槽中验证更新之后，唯一要做的就是将它交换到生产环境。在 Git Shell 中，只要运行以下命令：",
      "pos": [
        8251,
        8306
      ]
    },
    {
      "content": "祝贺你！ 你已成功地将新的更新发布到生产 Web 应用。不仅如此，完成的方式也只是轻松地创建开发和测试环境，以及构建和测试每项提交。这些是灵便软件开发的重要构建块。",
      "pos": [
        8397,
        8479
      ]
    },
    {
      "content": "删除开发和测试环境",
      "pos": [
        8506,
        8515
      ]
    },
    {
      "content": "由于你特意将开发和测试环境构建为独立的资源组，因此可以很容易删除它们。若要删除你在本教程中创建的环境（GitHub 分支和 Azure 项目），只需在 Git Shell 中运行以下命令：",
      "pos": [
        8520,
        8614
      ]
    },
    {
      "content": "摘要",
      "pos": [
        8904,
        8906
      ]
    },
    {
      "content": "对于许多想要采用 Azure 作为其应用程序平台的公司而言，灵便软件开发是必不可少的。在本教程中，你已学习如何轻松创建和删除生产环境的确切副本或近似副本，即使对于复杂应用程序也是一样。你还学习了如何利用此功能创建开发过程，以便在 Azure 中构建和测试每项提交。本教程旨在演示如何最恰当地将 Azure Web 应用和 Azure 资源管理器配合使用，以创建提供灵便方法的 DevOps 解决方案。接下来，你可以通过执行高级 DevOps 技术，基于此方案生成项目。",
      "pos": [
        8911,
        9145
      ]
    },
    {
      "content": "更多资源",
      "pos": [
        9150,
        9154
      ]
    },
    {
      "content": "灵便开发实践：有关现代化开发周期的提示和技巧",
      "pos": [
        9164,
        9186
      ]
    },
    {
      "content": "使用资源管理器模板为 Azure Web 应用制定高级部署策略",
      "pos": [
        9246,
        9277
      ]
    },
    {
      "content": "创作 Azure 资源管理器模板",
      "pos": [
        9334,
        9350
      ]
    },
    {
      "content": "JSONLint – JSON 验证程序",
      "pos": [
        9417,
        9437
      ]
    },
    {
      "content": "ARMClient - 设置从 GitHub 到站点的发布",
      "pos": [
        9466,
        9495
      ]
    },
    {
      "content": "Git 分支 - 基本分支和合并",
      "pos": [
        9581,
        9597
      ]
    },
    {
      "content": "David Ebbo 的博客",
      "pos": [
        9681,
        9695
      ]
    },
    {
      "content": "Azure PowerShell",
      "pos": [
        9730,
        9746
      ]
    },
    {
      "content": "Azure 跨平台命令行工具",
      "pos": [
        9807,
        9821
      ]
    },
    {
      "content": "在 Azure AD 中创建或编辑用户",
      "pos": [
        9871,
        9890
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"使用 Azure Web 应用进行灵便软件开发\"\n    description=\"学习如何使用支持灵便软件开发的方式，通过 Azure Web 应用创建高缩放性的复杂应用程序。\"\n    services=\"app-service\"\n    documentationCenter=\"\"\n    authors=\"cephalin\"\n    manager=\"wpickett\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service\"\n    ms.date=\"10/16/2015\"\n    wacn.date=\"02/17/2016\"/>\n\n\n# 使用 Azure Web 应用进行灵便软件开发 #\n\n在本教程中，你将学习如何使用支持[灵便软件开发](https://en.wikipedia.org/wiki/Agile_software_development)的方式，通过 [Azure Web 应用](/home/features/web-site/)创建高缩放性的复杂应用程序。\n\n技术流程限制通常会妨碍成功的实施灵便方法。如果在 [Azure 资源管理器](/documentation/articles/resource-group-overview)中合理地结合了部署的协调与管理，则具有[连续发布](/documentation/articles/web-sites-publish-source-control)、[过渡环境](/documentation/articles/web-sites-staged-publishing)（槽）和[监视](/documentation/articles/web-sites-monitor)等功能的 Azure Web 应用是非常适合采用灵便软件开发的开发人员的解决方案。\n\n下表是灵便开发的相关要求以及 Azure 服务如何启用它们的简短列表。\n\n| 要求 | Azure 如何实现 |\n|---------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| - 将构建版本设为自我测试 | 负载测试、Web 测试等可以使用 Azure 资源管理器模板进行部署。|\n| - 在生产环境的复本中运行测试 | Azure 资源管理器模板可以用来创建 Azure 生产环境的复本（包括应用设置、连接字符串模板、缩放等）以通过快速且可预测的方式测试。|\n\n## 执行的操作 ##\n\n你将逐步执行典型的“开发-测试-过渡-生产”工作流，以将新更改发布到 [ToDoApp](https://github.com/azure-appservice-samples/ToDoApp) 示例应用程序（包含两个[ Web 应用](/home/features/web-site/)：一个是前端 (FE)，另一个是 Web API 后端 (BE)）和 [SQL 数据库](/home/features/sql-database/)。将按如下所示使用部署体系结构：\n\n![](./media/app-service-agile-software-development/what-1-architecture.png)\n\n将图片放入文字：\n\n-   部署体系结构分成三个不同的环境（或 Azure 中的[资源组](/documentation/articles/resource-group-overview)），各有其自身的 App Service 计划、[缩放](/documentation/articles/web-sites-scale)设置和 SQL 数据库。 \n-   你可以单独管理每个环境。它们甚至可以存在于不同的订阅中。\n-   过渡和生产环境实现为相同 Web 应用应用的两个槽。\n-   在过渡槽（包含生产数据）上验证主分支的提交时，已验证的过渡应用将交换到生产槽，且[不会造成停机](/documentation/articles/web-sites-staged-publishing)。\n\n生产和过渡环境由 [*&lt;repository\\_root>*/ARMTemplates/ProdandStage.json](https://github.com/azure-appservice-samples/ToDoApp/blob/master/ARMTemplates/ProdAndStage.json) 中的模板定义。\n\n开发和测试环境由 [*&lt;repository\\_root>*/ARMTemplates/Dev.json](https://github.com/azure-appservice-samples/ToDoApp/blob/master/ARMTemplates/Dev.json) 中的模板定义。\n\n你还要使用典型分支策略，其中，代码从开发分支移到测试分支，然后移到主分支（所谓的质量提升）。\n\n![](./media/app-service-agile-software-development/what-2-branches.png)\n\n## 所需的项目 ##\n\n-   一个 Azure 帐户\n-   一个 [GitHub](https://github.com/) 帐户\n-   Git Shell（与 [GitHub for Windows](https://windows.github.com/) 一起安装）- 可让你在相同的会话中运行 Git 和 PowerShell 命令 \n-   最新的 [Azure PowerShell](https://github.com/Azure/azure-powershell/releases/download/0.9.4-June2015/azure-powershell.0.9.4.msi) 软件\n    \n    >[AZURE.NOTE] 如果使用的是 Auzre PowerShell 1.0 或更高版本，需要对“deploy.ps1”进行大量修改。\n\n    > 1. 需要删除所有 `Switch-AzureMode` 命令。\n    > 2. 将 `Get-AzureResource` 替换为 `Get-AzureRmResource`，并删除 `-OutputObjectFormat` 参数\n    > 3. 将 `New-AzureResourceGroup` 解构为 `New-AzureRmResourceGroup` 和 `New-AzureRmResourceGroupDeployment`，例如 `New-AzureRmResourceGroup -Name $RG_Name -Location $RG_Location` 和 `New-AzureRmResourceGroupDeployment -Verbose -name $RG_Name -ResourceGroupName $RG_Name -TemplateFile \".\\$TemplateFile\" -TemplateParameterFile \".\\temp.json\" -ErrorAction Stop`\n\n-   基本了解以下知识：\n    -   [Azure 资源管理器](/documentation/articles/resource-group-overview)模板部署\n    -   [Git](http://git-scm.com/documentation)\n    -   [PowerShell](https://technet.microsoft.com/zh-cn/library/bb978526.aspx)\n\n> [AZURE.NOTE] 完成本教程需要有一个 Azure 帐户：\n> + 你可以[建立一个试用 Azure 帐户](/pricing/1rmb-trial/) - 获取可用来试用付费版 Azure 服务的信用额度，甚至在用完信用额度后，你仍可以保留帐户和使用免费的 Azure 服务（如 Web 应用）。\n\n\n## 设置生产环境 ##\n\n在典型的 DevOps 方案中，应用程序在 Azure 中实时运行，并且你可以对它进行更改。此方案将会提供你开发、测试和使用的模板来部署生产环境。本部分将介绍如何设置生产环境。\n\n1.  创建 [ToDoApp](https://github.com/azure-appservice-samples/ToDoApp) 存储库的专属分叉。有关创建分叉的信息，请参阅[分叉存储库](https://help.github.com/articles/fork-a-repo/)。创建分叉后，可以在浏览器中查看它。\n \n    ![](./media/app-service-agile-software-development/production-1-private-repo.png)\n\n2.  打开 Git Shell 会话。如果你还没有 Git Shell，请立即安装 [GitHub for Windows](https://windows.github.com/)。\n\n3.  通过执行以下命令创建分叉的本地复本：\n\n        git clone https://github.com/<your_fork>/ToDoApp.git \n\n4.  创建本地复本后，请导航到 *&lt;repository\\_root>*\\\\ARMTemplates 并运行 deploy.ps1 脚本，如下所示：\n\n        .\\deploy.ps1 -RepoUrl https://github.com/<your_fork>/todoapp.git\n\n    >[AZURE.NOTE] 在使用这些模板之前，你需要进行以下编辑，以适应 Azure 中国区的云环境：\n\n    > 1. 打开文件“ProdAndStage.json”，然后搜索“sourcecontrols”。\n    > 2. 在块和 fater `\"branch\": \"[parameters('branch')]\"` 中添加 `\"IsManualIntegration\": true`\n    > 3. 在“ProdAndStage.json”和“deploy.ps1”中，将“West US”或“East US”替换为“China East”或“China North”\n\n    > 由于 Ibiza 门户尚未在 Azure 中国区推出，因此我们无法设置 GitHub 凭据。\n\n4.  出现提示时，键入所需的用户名和密码来访问数据库。\n\n    你应会看到各种 Azure 资源的设置进度。部署完成后，脚本将在浏览器中启动应用程序，并发出友好的提示音。\n\n    ![](./media/app-service-agile-software-development/production-2-app-in-browser.png)\n \n    >[AZURE.TIP] 查看 *&lt;repository\\_root>*\\\\ARMTemplates\\\\Deploy.ps1，以了解它如何生成具有唯一 ID 的资源。可以使用相同的方法来创建相同部署的复本，而不必担心资源名称冲突。\n \n6.  返回 Git Shell 会话，运行：\n\n        .\\swap -Name ToDoApp<unique_string>master\n\n    ![](./media/app-service-agile-software-development/production-4-swap.png)\n\n    >[AZURE.NOTE] 对于 Azure PowerShell 1.0 和更高版本，请删除“swap.ps1”中的所有 `Switch-AzureMode` 命令。\n\n7.  脚本完成后，请返回浏览到前端的地址 (http://ToDoApp*&lt;unique_string>*master.chinacloudsites.cn/)，以查看在生产环境中运行的应用程序。\n \n5.  登录到 [Azure 管理门户](https://manage.windowsazure.cn/)并查看创建的内容。\n\n    你应该可以看到两个 Web 应用，其中一个 Web 应用的名称包含 `Api` 后缀。你还会看到 SQL 数据库和服务器、App Service 计划，以及 Web 应用的过渡槽。浏览不同的资源，并将它们与 *&lt;repository\\_root>*\\\\ARMTemplates\\\\ProdAndStage.json 进行比较，以查看它们在模板中的配置方式。\n\n\n你现在已经设置了生产环境。接下来，将要开始更新应用程序。\n\n## 创建开发和测试分支 ##\n\n现在，你已在 Azure 的生产环境中创建了一个复杂应用程序，接下来，你要使用灵便方法来更新应用程序。在本部分中，你将要创建需要进行必要更新的开发和测试分支。\n\n1.  首先创建测试环境。在 Git Shell 会话中，运行以下命令来创建名为 **NewUpdate** 的新分支的环境。 \n\n        git checkout -b NewUpdate\n        git push origin NewUpdate \n        .\\deploy.ps1 -TemplateFile .\\Dev.json -RepoUrl https://github.com/<your_fork>/ToDoApp.git -Branch NewUpdate\n\n    >[AZURE.NOTE] 应该对“Dev.json”进行相同的修改，就像你对“ProdAndStage.json”所做的修改一样\n\n1.  出现提示时，键入所需的用户名和密码来访问数据库。\n\n    部署完成后，脚本将在浏览器中启动应用程序，并发出友好的提示音。这时，你已创建了带有自身测试环境的新分支。请花点时间来了解有关此测试环境的一些要点：\n\n    -   你可以在任何 Azure 订阅中创建测试环境。这意味着，你可以分开管理生产环境和测试环境。\n    -   测试环境在 Azure 中实时运行。\n    -   测试环境类似于生产环境，差别在于过渡槽和缩放设置。因为这是 ProdandStage.json 与 Dev.json 之间的唯一差别，所以你可以得知这项信息。\n    -   你可以在其自身 App Service 计划与不同的价格层（例如**免费**）中管理测试环境。\n    -   删除这个测试环境就像删除资源组一样简单。[稍后](#delete)你将学习如何执行这项操作。\n\n2.  运行以下命令，以继续创建开发分支：\n\n        git checkout -b Dev\n        git push origin Dev\n        .\\deploy.ps1 -TemplateFile .\\Dev.json -RepoUrl https://github.com/<your_fork>/ToDoApp.git -Branch Dev\n\n3.  出现提示时，键入所需的用户名和密码来访问数据库。\n\n    请花点时间来了解有关此开发环境的一些要点：\n\n    -   开发环境的配置与测试环境相同，因为它是使用相同模板部署的。\n    -   在开发人员自己的 Azure 订阅中，可以创建每个开发环境，但分开管理测试环境。\n    -   开发环境在 Azure 中实时运行。\n    -   删除开发环境就像删除资源组一样简单。[稍后](#delete)你将学习如何执行这项操作。\n\n>[AZURE.NOTE] 有多位开发人员处理新的更新时，只要执行以下操作，每一位都可以轻松创建分支和专用开发环境：\n>\n>1. 在 GitHub 中创建其在存储库中的专属分叉（请参阅[分叉存储库](https://help.github.com/articles/fork-a-repo/)）。\n>2. 克隆其本地计算机上的分叉\n>3. 运行相同的命令，以创建其自身的开发分支和环境。\n\n完成后，GitHub 分叉应有三个分支：\n\n![](./media/app-service-agile-software-development/test-1-github-view.png)\n\n[Azure 管理门户](https://manage.windowsazure.cn)中应该有六个 Web 应用（一共三组，每组两个 Web 应用）：\n \n>[AZURE.NOTE] 请注意，ProdandStage.json 将生产环境指定为使用**标准**定价层，这适合生产应用程序的缩放性。\n\n\n## 将代码合并到测试环境 ##\n\n准备好将代码从 Dev 分支推送到 NewUpdate 分支后，请执行标准的 git 过程：\n\n1.  在 GitHub 中，将 NewUpdate 的任何新提交（例如其他开发人员所创建的提交）合并到 Dev 分支。GitHub 上的任何新提交都会在开发环境中触发代码推送和构建。然后可以确保开发分支中的代码仍能与 NewUpdate 分支中的最新位一起运行。\n\n2.  在 GitHub 中，将所有新提交从 Dev 分支合并到 NewUpdate 分支。此操作将在测试环境中触发代码推送和构建。\n\n现在，请将你的代码推送到 **NewUpdate** 分支。在 Git Shell 中运行以下命令：\n\n    git checkout NewUpdate\n    git pull origin NewUpdate\n    git merge Dev\n    git push origin NewUpdate\n\n就这么简单！\n\n转到测试环境的 Web 应用边栏选项卡，以查看新提交是否已推送到测试环境（合并到 NewUpdate 分支）。然后，单击“浏览”查看样式更改是否在 Azure 中实时运行。\n\n## 将更新部署到生产环境 ##\n\n将代码推送到过渡和生产环境的过程类似于前面将代码所推送到测试环境。真的就这么简单。\n\n在 Git Shell 中运行以下命令：\n\n    git checkout master\n    git pull origin master\n    git merge NewUpdate\n    git push origin master\n\n请记住，根据在 ProdandStage.json 中设置过渡和生产环境的方式，新代码将推送到“过渡”槽，并在该处运行。因此，如果你导航到过渡槽的 URL，则会看到新代码正在该处运行。为此，请在 Git Shell 中运行 `Show-AzureWebsite` cmdlet。\n\n    Show-AzureWebsite -Name ToDoApp<unique_string>master -Slot Staging\n \n现在，在过渡槽中验证更新之后，唯一要做的就是将它交换到生产环境。在 Git Shell 中，只要运行以下命令：\n\n    cd <repository_root>\\ARMTemplates\n    .\\swap.ps1 -Name ToDoApp<unique_string>master\n\n祝贺你！ 你已成功地将新的更新发布到生产 Web 应用。不仅如此，完成的方式也只是轻松地创建开发和测试环境，以及构建和测试每项提交。这些是灵便软件开发的重要构建块。\n\n<a name=\"delete\"></a>\n## 删除开发和测试环境 ##\n\n由于你特意将开发和测试环境构建为独立的资源组，因此可以很容易删除它们。若要删除你在本教程中创建的环境（GitHub 分支和 Azure 项目），只需在 Git Shell 中运行以下命令：\n\n    git branch -d Dev\n    git push origin :Dev\n    git branch -d NewUpdate\n    git push origin :NewUpdate\n    Remove-AzureRmResourceGroup -Name ToDoApp<unique_string>dev-group -Force -Verbose\n    Remove-AzureRmResourceGroup -Name ToDoApp<unique_string>newupdate-group -Force -Verbose\n\n## 摘要 ##\n\n对于许多想要采用 Azure 作为其应用程序平台的公司而言，灵便软件开发是必不可少的。在本教程中，你已学习如何轻松创建和删除生产环境的确切副本或近似副本，即使对于复杂应用程序也是一样。你还学习了如何利用此功能创建开发过程，以便在 Azure 中构建和测试每项提交。本教程旨在演示如何最恰当地将 Azure Web 应用和 Azure 资源管理器配合使用，以创建提供灵便方法的 DevOps 解决方案。接下来，你可以通过执行高级 DevOps 技术，基于此方案生成项目。\n\n## 更多资源 ##\n\n-   [灵便开发实践：有关现代化开发周期的提示和技巧](http://channel9.msdn.com/Events/Ignite/2015/BRK3707)\n-   [使用资源管理器模板为 Azure Web 应用制定高级部署策略](http://channel9.msdn.com/Events/Build/2015/2-620)\n-   [创作 Azure 资源管理器模板](/documentation/articles/resource-group-authoring-templates)\n-   [JSONLint – JSON 验证程序](http://jsonlint.com/)\n-   [ARMClient - 设置从 GitHub 到站点的发布](https://github.com/projectKudu/ARMClient/wiki/Setup-GitHub-publishing-to-Site)\n-   [Git 分支 - 基本分支和合并](http://www.git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging)\n-   [David Ebbo 的博客](http://blog.davidebbo.com/)\n-   [Azure PowerShell](/documentation/articles/powershell-install-configure)\n-   [Azure 跨平台命令行工具](/documentation/articles/xplat-cli-install)\n-   [在 Azure AD 中创建或编辑用户](https://msdn.microsoft.com/zh-cn/library/azure/hh967632.aspx#BKMK_1)\n\n<!---HONumber=Mooncake_0118_2016-->"
}