{
  "nodes": [
    {
      "content": "如何使用媒体编码器标准版对资产进行编码",
      "pos": [
        28,
        47
      ]
    },
    {
      "content": "本主题介绍如何使用 .NET 通过媒体编码器标准版对资产进行编码。",
      "pos": [
        67,
        100
      ]
    },
    {
      "content": "如何使用媒体编码器标准版对资产进行编码",
      "pos": [
        329,
        348
      ]
    },
    {
      "content": "编码作业是媒体服务中最常见的处理操作之一。可通过创建编码作业将媒体文件从一种编码转换为另一种编码。进行编码时，可以使用媒体服务内置的 Media Encoder。你也可以使用媒体服务合作伙伴提供的编码器；可通过 Azure 应用商店获取第三方编码器。",
      "pos": [
        350,
        475
      ]
    },
    {
      "pos": [
        477,
        606
      ],
      "content": "本主题介绍如何使用 .NET 通过媒体编码器标准 (MES) 对资产进行编码。媒体编码器标准使用<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/mt269960.aspx)</ept>所述的编码器预设之一进行配置。"
    },
    {
      "pos": [
        608,
        867
      ],
      "content": "建议始终将夹层文件编码为自适应比特率 MP4 集，然后使用<bpt id=\"p1\">[</bpt>动态打包<ept id=\"p1\">](/documentation/articles/media-services-dynamic-packaging-overview)</ept>将该集转换为所需的格式。若要利用动态打包，首先必须获取你计划从中传送内容的流式处理终结点的至少一个点播流单元。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>如何缩放媒体服务<ept id=\"p2\">](/documentation/articles/media-services-manage-origins#scale_streaming_endpoints)</ept>。"
    },
    {
      "pos": [
        869,
        997
      ],
      "content": "如果你的输出资产已经过存储加密，则必须配置资产传送策略。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>配置资产传送策略<ept id=\"p1\">](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)</ept>。"
    },
    {
      "pos": [
        1000,
        1140
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>MES 将生成一个输出文件，其名称包含输入文件名的前 32 个字符。该名称基于预设文件中指定的内容。例如，\"FileName\": \"{Basename}\\_{Index}{Extension}\"。{Basename} 将替换为输入文件名的前 32 个字符。"
    },
    {
      "content": "MES 格式",
      "pos": [
        1145,
        1151
      ]
    },
    {
      "content": "格式和编解码器",
      "pos": [
        1154,
        1161
      ]
    },
    {
      "content": "MES 预设",
      "pos": [
        1238,
        1244
      ]
    },
    {
      "pos": [
        1246,
        1336
      ],
      "content": "媒体编码器标准使用<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/mt269960.aspx)</ept>所述的编码器预设之一进行配置。"
    },
    {
      "content": "MES 输入和输出元数据",
      "pos": [
        1341,
        1353
      ]
    },
    {
      "pos": [
        1355,
        1432
      ],
      "content": "<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dn783120.aspx)</ept>说明了编码器输入元数据。"
    },
    {
      "pos": [
        1434,
        1511
      ],
      "content": "<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dn783217.aspx)</ept>说明了编码器输出元数据。"
    },
    {
      "content": "示例",
      "pos": [
        1516,
        1518
      ]
    },
    {
      "content": "以下代码示例使用媒体服务 .NET SDK 执行下列任务：",
      "pos": [
        1520,
        1549
      ]
    },
    {
      "content": "创建编码作业。",
      "pos": [
        1553,
        1560
      ]
    },
    {
      "content": "获取对媒体编码器标准版编码器的引用。",
      "pos": [
        1563,
        1581
      ]
    },
    {
      "pos": [
        1584,
        1770
      ],
      "content": "指定使用“H264 多比特率 720p”预设。你可以在<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/mt269960.aspx)</ept>看到所有预设。你还可以在<bpt id=\"p2\">[</bpt>此处<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/mt269962.aspx)</ept>查看相关主题，了解这些预设必须遵循的架构。"
    },
    {
      "content": "将一个编码任务添加到该作业。",
      "pos": [
        1773,
        1787
      ]
    },
    {
      "content": "指定要编码的输入资产。",
      "pos": [
        1791,
        1802
      ]
    },
    {
      "content": "创建将包含所编码资产的输出资产。",
      "pos": [
        1805,
        1821
      ]
    },
    {
      "content": "添加事件处理程序以检查作业进度。",
      "pos": [
        1824,
        1840
      ]
    },
    {
      "content": "提交作业。",
      "pos": [
        1843,
        1848
      ]
    },
    {
      "content": "另请参阅",
      "pos": [
        4961,
        4965
      ]
    },
    {
      "content": "如何使用媒体编码器标准通过 .NET 来生成缩略图",
      "pos": [
        4969,
        4994
      ]
    },
    {
      "content": "媒体服务编码概述",
      "pos": [
        5072,
        5080
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何使用媒体编码器标准版对资产进行编码\" \n    description=\"本主题介绍如何使用 .NET 通过媒体编码器标准版对资产进行编码。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako,anilmur\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"  \n    wacn.date=\"03/17/2016\"/>\n\n\n#如何使用媒体编码器标准版对资产进行编码\n\n编码作业是媒体服务中最常见的处理操作之一。可通过创建编码作业将媒体文件从一种编码转换为另一种编码。进行编码时，可以使用媒体服务内置的 Media Encoder。你也可以使用媒体服务合作伙伴提供的编码器；可通过 Azure 应用商店获取第三方编码器。\n\n本主题介绍如何使用 .NET 通过媒体编码器标准 (MES) 对资产进行编码。媒体编码器标准使用[此处](https://msdn.microsoft.com/zh-cn/library/azure/mt269960.aspx)所述的编码器预设之一进行配置。\n\n建议始终将夹层文件编码为自适应比特率 MP4 集，然后使用[动态打包](/documentation/articles/media-services-dynamic-packaging-overview)将该集转换为所需的格式。若要利用动态打包，首先必须获取你计划从中传送内容的流式处理终结点的至少一个点播流单元。有关详细信息，请参阅[如何缩放媒体服务](/documentation/articles/media-services-manage-origins#scale_streaming_endpoints)。\n\n如果你的输出资产已经过存储加密，则必须配置资产传送策略。有关详细信息，请参阅[配置资产传送策略](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)。\n\n>[AZURE.NOTE]MES 将生成一个输出文件，其名称包含输入文件名的前 32 个字符。该名称基于预设文件中指定的内容。例如，\"FileName\": \"{Basename}\\_{Index}{Extension}\"。{Basename} 将替换为输入文件名的前 32 个字符。\n\n###MES 格式\n\n[格式和编解码器](/documentation/articles/media-services-media-encoder-standard-formats)\n\n###MES 预设\n\n媒体编码器标准使用[此处](https://msdn.microsoft.com/zh-cn/library/azure/mt269960.aspx)所述的编码器预设之一进行配置。\n\n###MES 输入和输出元数据\n\n[此处](http://msdn.microsoft.com/zh-cn/library/azure/dn783120.aspx)说明了编码器输入元数据。\n\n[此处](http://msdn.microsoft.com/zh-cn/library/azure/dn783217.aspx)说明了编码器输出元数据。\n\n\n##示例\n\n以下代码示例使用媒体服务 .NET SDK 执行下列任务：\n\n- 创建编码作业。\n- 获取对媒体编码器标准版编码器的引用。\n- 指定使用“H264 多比特率 720p”预设。你可以在[此处](https://msdn.microsoft.com/zh-cn/library/azure/mt269960.aspx)看到所有预设。你还可以在[此处](https://msdn.microsoft.com/zh-cn/library/mt269962.aspx)查看相关主题，了解这些预设必须遵循的架构。\n- 将一个编码任务添加到该作业。 \n- 指定要编码的输入资产。\n- 创建将包含所编码资产的输出资产。\n- 添加事件处理程序以检查作业进度。\n- 提交作业。\n        \n        static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\n        {\n            // Declare a new job.\n            IJob job = _context.Jobs.Create(\"Media Encoder Standard Job\");\n            // Get a media processor reference, and pass to it the name of the \n            // processor to use for the specific task.\n            IMediaProcessor processor = GetLatestMediaProcessorByName(\"Media Encoder Standard\");\n        \n\n            // Create a task with the encoding details, using a string preset.\n            // In this case \"H264 Multiple Bitrate 720p\" preset is used.\n            ITask task = job.Tasks.AddNew(\"My encoding task\",\n                processor,\n                \"H264 Multiple Bitrate 720p\",\n                TaskOptions.None);\n        \n            // Specify the input asset to be encoded.\n            task.InputAssets.Add(asset);\n            // Add an output asset to contain the results of the job. \n            // This output is specified as AssetCreationOptions.None, which \n            // means the output asset is not encrypted. \n            task.OutputAssets.AddNew(\"Output asset\",\n                AssetCreationOptions.None);\n        \n            job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\n            job.Submit();\n            job.GetExecutionProgressTask(CancellationToken.None).Wait();\n        \n            return job.OutputMediaAssets[0];\n        }\n        \n        private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\n        {\n            Console.WriteLine(\"Job state changed event:\");\n            Console.WriteLine(\"  Previous state: \" + e.PreviousState);\n            Console.WriteLine(\"  Current state: \" + e.CurrentState);\n            switch (e.CurrentState)\n            {\n                case JobState.Finished:\n                    Console.WriteLine();\n                    Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\n                    break;\n                case JobState.Canceling:\n                case JobState.Queued:\n                case JobState.Scheduled:\n                case JobState.Processing:\n                    Console.WriteLine(\"Please wait...\\n\");\n                    break;\n                case JobState.Canceled:\n                case JobState.Error:\n        \n                    // Cast sender as a job.\n                    IJob job = (IJob)sender;\n        \n                    // Display or log error details as needed.\n                    break;\n                default:\n                    break;\n            }\n        }\n        \n        \n        private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n        {\n            var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\n            ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\n        \n            if (processor == null)\n                throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\n        \n            return processor;\n        }\n\n\n\n\n##另请参阅 \n\n[如何使用媒体编码器标准通过 .NET 来生成缩略图](/documentation/articles/media-services-dotnet-generate-thumbnail-with-mes)\n[媒体服务编码概述](/documentation/articles/media-services-encode-asset)\n\n<!---HONumber=Mooncake_0307_2016-->"
}