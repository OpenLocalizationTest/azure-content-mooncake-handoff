{
  "nodes": [
    {
      "content": "将消息发送到事件中心",
      "pos": [
        3,
        13
      ]
    },
    {
      "pos": [
        14,
        386
      ],
      "content": "在本部分中，我们将编写用于将事件发送到事件中心的 Java 控制台应用。我们将从 <bpt id=\"p1\">[</bpt>Apache Qpid 项目<ept id=\"p1\">](http://qpid.apache.org/)</ept>利用 JMS AMQP 提供者。这类似于通过 Java 将服务总线队列和主题与 AMQP 配合使用，如<bpt id=\"p2\">[</bpt>此处<ept id=\"p2\">](/documentation/articles/service-bus-java-how-to-use-jms-api-amqp)</ept>所示。有关详细信息，请参阅 <bpt id=\"p3\">[</bpt>Qpid JMS 文档<ept id=\"p3\">](http://qpid.apache.org/releases/qpid-0.30/programming/book/QpidJMS.html)</ept>和 <bpt id=\"p4\">[</bpt>Java 消息服务<ept id=\"p4\">](http://www.oracle.com/technetwork/java/jms/index.html)</ept>。"
    },
    {
      "pos": [
        391,
        519
      ],
      "content": "在 Eclipse 中，安装 <bpt id=\"p1\">[</bpt>Azure Toolkit for Eclipse<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/hh690946.aspx)</ept>。这包括 Qpid JMS AMQP 客户端库。"
    },
    {
      "pos": [
        524,
        565
      ],
      "content": "在 Eclipse 中，创建一个名为 <bpt id=\"p1\">**</bpt>Sender<ept id=\"p1\">**</ept> 的新 Java 项目。"
    },
    {
      "pos": [
        570,
        723
      ],
      "content": "在 Eclipse 包资源管理器中，右键单击该 <bpt id=\"p1\">**</bpt>Sender<ept id=\"p1\">**</ept> 项目并选择“属性”。在对话框的左窗格中，单击“Java 生成路径”，然后单击“库”选项卡，然后单击“添加库”按钮。选择“Apache Qpid JMS 客户端包(由 MS Open Tech 开发)”，单击“下一步”，然后单击“完成”。"
    },
    {
      "pos": [
        740,
        813
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Sender<ept id=\"p1\">**</ept> 项目的根目录中，创建一个名为 <bpt id=\"p2\">**</bpt>servicebus.properties<ept id=\"p2\">**</ept> 的文件，其内容如下。请记得替换以下值："
    },
    {
      "content": "事件中心名称。",
      "pos": [
        820,
        827
      ]
    },
    {
      "pos": [
        834,
        870
      ],
      "content": "命名空间名称（后者通常是 <ph id=\"ph1\">`{event hub name}-ns`</ph>）。"
    },
    {
      "pos": [
        877,
        986
      ],
      "content": "URL 编码的 <bpt id=\"p1\">**</bpt>SendRule<ept id=\"p1\">**</ept> 键（你在创建事件中心时已经记下了此键）。可以在<bpt id=\"p2\">[</bpt>此处<ept id=\"p2\">](http://www.w3schools.com/tags/ref_urlencode.asp)</ept>对它进行 URL 编码。"
    },
    {
      "content": "servicebus.properties - sample JNDI configuration",
      "pos": [
        998,
        1047
      ]
    },
    {
      "content": "Register a ConnectionFactory in JNDI using the form:",
      "pos": [
        1059,
        1111
      ]
    },
    {
      "content": "connectionfactory.[jndi_name] = [ConnectionURL]",
      "pos": [
        1122,
        1169
      ]
    },
    {
      "content": "connectionfactory.SBCF = amqps://SendRule:{Send Rule key}@{namespace name}.servicebus.chinacloudapi.cn/?sync-publish=false",
      "pos": [
        1178,
        1300
      ]
    },
    {
      "content": "Register some queues in JNDI using the form",
      "pos": [
        1312,
        1355
      ]
    },
    {
      "content": "queue.[jndi_name] = [physical_name]",
      "pos": [
        1366,
        1401
      ]
    },
    {
      "content": "topic.[jndi_name] = [physical_name]",
      "pos": [
        1412,
        1447
      ]
    },
    {
      "content": "queue.EventHub = {event hub name}",
      "pos": [
        1456,
        1489
      ]
    },
    {
      "pos": [
        1494,
        1532
      ],
      "content": "创建名为 <bpt id=\"p1\">**</bpt>Sender<ept id=\"p1\">**</ept> 的新类。添加以下  <ph id=\"ph1\">`import`</ph> 语句："
    },
    {
      "content": "然后，给它添加以下代码：",
      "pos": [
        2153,
        2165
      ]
    }
  ],
  "content": "## 将消息发送到事件中心\n在本部分中，我们将编写用于将事件发送到事件中心的 Java 控制台应用。我们将从 [Apache Qpid 项目](http://qpid.apache.org/)利用 JMS AMQP 提供者。这类似于通过 Java 将服务总线队列和主题与 AMQP 配合使用，如[此处](/documentation/articles/service-bus-java-how-to-use-jms-api-amqp)所示。有关详细信息，请参阅 [Qpid JMS 文档](http://qpid.apache.org/releases/qpid-0.30/programming/book/QpidJMS.html)和 [Java 消息服务](http://www.oracle.com/technetwork/java/jms/index.html)。\n\n1. 在 Eclipse 中，安装 [Azure Toolkit for Eclipse](https://msdn.microsoft.com/zh-cn/library/azure/hh690946.aspx)。这包括 Qpid JMS AMQP 客户端库。\n\n2. 在 Eclipse 中，创建一个名为 **Sender** 的新 Java 项目。\n\n3. 在 Eclipse 包资源管理器中，右键单击该 **Sender** 项目并选择“属性”。在对话框的左窗格中，单击“Java 生成路径”，然后单击“库”选项卡，然后单击“添加库”按钮。选择“Apache Qpid JMS 客户端包(由 MS Open Tech 开发)”，单击“下一步”，然后单击“完成”。\n\n    ![][8]\n\n4. 在 **Sender** 项目的根目录中，创建一个名为 **servicebus.properties** 的文件，其内容如下。请记得替换以下值：\n    - 事件中心名称。\n    - 命名空间名称（后者通常是 `{event hub name}-ns`）。\n    - URL 编码的 **SendRule** 键（你在创建事件中心时已经记下了此键）。可以在[此处](http://www.w3schools.com/tags/ref_urlencode.asp)对它进行 URL 编码。\n\n        # servicebus.properties - sample JNDI configuration\n\n        # Register a ConnectionFactory in JNDI using the form:\n        # connectionfactory.[jndi_name] = [ConnectionURL]\n        connectionfactory.SBCF = amqps://SendRule:{Send Rule key}@{namespace name}.servicebus.chinacloudapi.cn/?sync-publish=false\n\n        # Register some queues in JNDI using the form\n        # queue.[jndi_name] = [physical_name]\n        # topic.[jndi_name] = [physical_name]\n        queue.EventHub = {event hub name}\n\n5. 创建名为 **Sender** 的新类。添加以下  `import` 语句：\n\n        import java.io.BufferedReader;\n        import java.io.IOException;\n        import java.io.InputStreamReader;\n        import java.io.UnsupportedEncodingException;\n        import java.util.Hashtable;\n        \n        import javax.jms.BytesMessage;\n        import javax.jms.Connection;\n        import javax.jms.ConnectionFactory;\n        import javax.jms.Destination;\n        import javax.jms.JMSException;\n        import javax.jms.MessageProducer;\n        import javax.jms.Session;\n        import javax.naming.Context;\n        import javax.naming.InitialContext;\n        import javax.naming.NamingException; \n\n6. 然后，给它添加以下代码：\n\n        public static void main(String[] args) throws NamingException,\n                JMSException, IOException, InterruptedException {\n            // Configure JNDI environment\n            Hashtable<String, String> env = new Hashtable<String, String>();\n            env.put(Context.INITIAL_CONTEXT_FACTORY,\n                    \"org.apache.qpid.amqp_1_0.jms.jndi.PropertiesFileInitialContextFactory\");\n            env.put(Context.PROVIDER_URL, \"servicebus.properties\");\n            Context context = new InitialContext(env);\n    \n            ConnectionFactory cf = (ConnectionFactory) context.lookup(\"SBCF\");\n    \n            Destination queue = (Destination) context.lookup(\"EventHub\");\n    \n            // Create Connection\n            Connection connection = cf.createConnection();\n    \n            // Create sender-side Session and MessageProducer\n            Session sendSession = connection.createSession(false,\n                    Session.AUTO_ACKNOWLEDGE);\n            MessageProducer sender = sendSession.createProducer(queue);\n    \n            System.out.println(\"Press Ctrl-C to stop the sender process\");\n            System.out.println(\"Press Enter to start now\");\n            BufferedReader commandLine = new java.io.BufferedReader(\n                    new InputStreamReader(System.in));\n            commandLine.readLine();\n    \n            while (true) {\n                sendBytesMessage(sendSession, sender);\n                Thread.sleep(200);\n            }\n        }\n        \n        private static void sendBytesMessage(Session sendSession, MessageProducer sender) throws JMSException, UnsupportedEncodingException {\n            BytesMessage message = sendSession.createBytesMessage();\n            message.writeBytes(\"Test AMQP message from JMS\".getBytes(\"UTF-8\"));\n            sender.send(message);\n            System.out.println(\"Sent message\");\n        }\n\n\n\n<!-- Images -->\n[8]: ./media/service-bus-event-hubs-getstarted/create-sender-java1.png\n\n<!---HONumber=Mooncake_1207_2015-->"
}