{
  "nodes": [
    {
      "content": "如何使用 SQL 数据库 (.NET) - Azure",
      "pos": [
        28,
        55
      ]
    },
    {
      "content": "SQL Database 入门。了解如何创建 SQL Database 实例，以及如何使用 ADO.NET、ODBC 和 EntityClient Provider 与该实例建立连接。",
      "pos": [
        75,
        167
      ]
    },
    {
      "content": "如何在 .NET 应用程序中使用 Azure SQL 数据库",
      "pos": [
        393,
        423
      ]
    },
    {
      "content": "本指南说明如何在 Azure SQL 数据库 上创建逻辑服务器和数据库实例，以及如何使用下列 .NET Framework 数据提供程序技术连接到数据库：ADO.NET、ODBC 和 EntityClient Provider。",
      "pos": [
        425,
        539
      ]
    },
    {
      "content": "SQL 数据库 为 Azure 提供关系数据库管理系统并且基于 SQL Server 技术。使用 SQL 数据库 实例，您可以轻松地配置关系数据库解决方案并将其部署到云中，并且利用能够为企业级可用性、可缩放性和安全性提供内置数据保护和自愈优势的分布式数据中心。",
      "pos": [
        544,
        674
      ]
    },
    {
      "content": "登录 Azure",
      "pos": [
        681,
        689
      ]
    },
    {
      "content": "SQL 数据库 在 Azure 上提供关系数据存储、访问和管理服务。若要使用它，您将需要一个 Azure 订阅。",
      "pos": [
        691,
        747
      ]
    },
    {
      "pos": [
        752,
        856
      ],
      "content": "打开 Web 浏览器并浏览到 <bpt id=\"p1\">[</bpt>http://www.windowsazure.cn<ept id=\"p1\">](http://www.windowsazure.cn)</ept>。若要开始使用免费帐户，请单击右上角的“免费试用”并执行相应步骤。"
    },
    {
      "content": "现已创建您的帐户。一切准备就绪，即可开始。",
      "pos": [
        861,
        882
      ]
    },
    {
      "content": "创建和配置 SQL 数据库",
      "pos": [
        888,
        901
      ]
    },
    {
      "content": "接下来，创建并配置数据库和服务器。在 Azure 管理门户中，你可以先使用已修订的工作流创建数据库，然后配置服务器。",
      "pos": [
        903,
        961
      ]
    },
    {
      "content": "创建数据库实例和逻辑服务器：",
      "pos": [
        965,
        979
      ]
    },
    {
      "pos": [
        986,
        1034
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](http://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "单击页面底部的“新建”。",
      "pos": [
        1039,
        1051
      ]
    },
    {
      "content": "单击“数据服务”。",
      "pos": [
        1056,
        1065
      ]
    },
    {
      "content": "单击“SQL 数据库”。",
      "pos": [
        1070,
        1082
      ]
    },
    {
      "content": "单击“自定义创建”。",
      "pos": [
        1087,
        1097
      ]
    },
    {
      "content": "在“名称”中，输入数据库名称。",
      "pos": [
        1102,
        1117
      ]
    },
    {
      "content": "选择版本、最大大小和排序规则。考虑到本指南的用途，你可以使用默认值。",
      "pos": [
        1122,
        1156
      ]
    },
    {
      "content": "SQL 数据库提供三个数据库版本：基本、标准和高级。",
      "pos": [
        1162,
        1188
      ]
    },
    {
      "content": "最大大小是在首次创建数据库时指定的，稍后可以使用“更改数据库”对其进行更改。最大大小可限制数据库的大小。",
      "pos": [
        1194,
        1246
      ]
    },
    {
      "content": "在 Azure 上创建的每个 SQL 数据库实际上都具有三个副本。这样做是为了确保实现高可用性。故障转移是透明的并且是该服务的一部分。",
      "pos": [
        1252,
        1319
      ]
    },
    {
      "content": "在“服务器”中，选择“新建 SQL 数据库 服务器”。",
      "pos": [
        1324,
        1351
      ]
    },
    {
      "content": "单击箭头，转到下一页。",
      "pos": [
        1356,
        1367
      ]
    },
    {
      "content": "在“服务器设置”中，输入 SQL Server 身份验证登录名。",
      "pos": [
        1373,
        1405
      ]
    },
    {
      "content": "SQL 数据库 使用 SQL 身份验证进行加密连接。将使用您提供的名称创建一个分配给 sysadmin 固定服务器角色的新 SQL Server 身份验证登录名。",
      "pos": [
        1411,
        1492
      ]
    },
    {
      "content": "该登录名不能是电子邮件地址、Windows 用户帐户或 Windows Live ID。SQL 数据库不支持声明，也不支持 Windows 身份验证。",
      "pos": [
        1499,
        1574
      ]
    },
    {
      "content": "提供由大小写值以及数字或符号共同组成的 8 个以上字符的强密码。",
      "pos": [
        1580,
        1612
      ]
    },
    {
      "content": "选择区域。区域将确定服务器的地理位置。区域不能随意切换，因此要选择一个对此服务器有效的区域。选择一个最靠近您的位置。将 Azure 应用程序和数据库放置在同一区域可以降低出口带宽成本以及减少数据延迟情况。",
      "pos": [
        1618,
        1720
      ]
    },
    {
      "content": "确保“允许 Azure 服务访问服务器”选项处于选中状态，以便你能够使用 SQL 数据库的管理门户、存储服务以及 Azure 上的其他服务连接到此数据库。",
      "pos": [
        1726,
        1803
      ]
    },
    {
      "content": "完成后，请单击页面底部的复选标记。",
      "pos": [
        1809,
        1826
      ]
    },
    {
      "content": "请注意，您没有指定服务器名称。SQL 数据库 会自动生成服务器名称以确保没有重复的 DNS 条目。服务器名称是一个由 10 个字符组成的字母数字字符串。您不能更改 SQL 数据库 服务器的名称。",
      "pos": [
        1828,
        1925
      ]
    },
    {
      "content": "创建数据库后，单击它以打开其仪表板。仪表板提供可在应用程序代码中复制和使用的连接字符串。仪表板还显示了你在从 Management Studio 或其他管理工具中连接到数据库时所需要指定的管理 URL。",
      "pos": [
        1927,
        2028
      ]
    },
    {
      "content": "SQL 数据库 仪表板",
      "pos": [
        2033,
        2044
      ]
    },
    {
      "content": "在下一步中，您将配置防火墙以便允许您网络上运行的应用程序通过建立连接来访问相关数据。",
      "pos": [
        2107,
        2149
      ]
    },
    {
      "content": "配置逻辑服务器的防火墙",
      "pos": [
        2153,
        2164
      ]
    },
    {
      "content": "单击“SQL 数据库”，单击页面顶部的“服务器”，然后单击你刚才创建的服务器。",
      "pos": [
        2171,
        2210
      ]
    },
    {
      "content": "设置防火墙",
      "pos": [
        2218,
        2223
      ]
    },
    {
      "pos": [
        2287,
        2298
      ],
      "content": "单击<bpt id=\"p1\">**</bpt>“配置”<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "复制当前客户端 IP 地址。如果您从某网络进行连接，则为您的路由器或代理服务器侦听的 IP 地址。SQL 数据库 会检测当前连接所使用的 IP 地址，以便您可以创建一个接受来自该设备的连接请求的防火墙规则。",
      "pos": [
        2303,
        2406
      ]
    },
    {
      "content": "将 IP 地址粘贴到“起始 IP 地址”和“结束 IP 地址”中，以确定允许访问服务器的地址范围。日后，如果您遇到指示该范围太窄的连接错误，则可以编辑此规则来扩大范围。",
      "pos": [
        2412,
        2496
      ]
    },
    {
      "content": "如果客户端计算机使用动态分配的 IP 地址，您必须指定较宽范围的地址，使其足以包含分配给您网络中计算机的 IP 地址。从较窄的范围开始，然后仅在您需要时对其进行扩展。",
      "pos": [
        2502,
        2585
      ]
    },
    {
      "content": "为防火墙规则输入名称，例如，您的计算机或公司的名称。",
      "pos": [
        2590,
        2616
      ]
    },
    {
      "content": "单击该规则旁边的复选标记进行保存。",
      "pos": [
        2621,
        2638
      ]
    },
    {
      "content": "防火墙设置的 IP 范围",
      "pos": [
        2646,
        2658
      ]
    },
    {
      "content": "单击页面底部的“保存”以完成该步骤。如果没有看到“保存”，请刷新浏览器页面。",
      "pos": [
        2721,
        2759
      ]
    },
    {
      "content": "现在，你拥有数据库实例、逻辑服务器、允许来自你的 IP 地址的入站连接的防火墙规则以及管理员登录名。你现在可以通过编程方式连接到数据库。",
      "pos": [
        2761,
        2829
      ]
    },
    {
      "content": "连接到 SQL Database",
      "pos": [
        2835,
        2851
      ]
    },
    {
      "content": "本节介绍如何使用不同的 .NET Framework 数据提供程序连接到 SQL Database 实例。有关连接到 SQL 数据库服务器和数据库的中心建议，请参阅：",
      "pos": [
        2853,
        2936
      ]
    },
    {
      "pos": [
        2941,
        3031
      ],
      "content": "<bpt id=\"p1\">[</bpt>到 SQL 数据库的连接：中心建议<ept id=\"p1\">](/documentation/articles/sql-database-connect-central-recommendations)</ept>。"
    },
    {
      "content": "如果你选择使用 Visual Studio 并且你的配置没有将 Azure Web 应用包含为前端，则无需在开发计算机上安装其他工具或 SDK。你现在即可开始开发应用程序。",
      "pos": [
        3034,
        3120
      ]
    },
    {
      "content": "您可以使用 Visual Studio 中的所有相同设计器工具处理 SQL 数据库，就像可以使用这些工具处理 SQL Server 一样。服务器资源管理器允许您查看（但不能编辑）数据库对象。Visual Studio 实体数据模型设计器功能完备，您可以用它来创建针对 SQL 数据库 的模型以用于 Entity Framework。",
      "pos": [
        3122,
        3288
      ]
    },
    {
      "content": "使用用于 SQL Server 的 .NET Framework 数据提供程序",
      "pos": [
        3293,
        3332
      ]
    },
    {
      "pos": [
        3334,
        3403
      ],
      "content": "<bpt id=\"p1\">**</bpt>System.Data.SqlClient<ept id=\"p1\">**</ept> 命名空间是用于 SQL Server 的 .NET Framework 数据提供程序。"
    },
    {
      "content": "标准连接字符串类似于以下内容：",
      "pos": [
        3405,
        3420
      ]
    },
    {
      "pos": [
        3559,
        3615
      ],
      "content": "你可以使用 <bpt id=\"p1\">**</bpt>SQLConnectionStringBuilder<ept id=\"p1\">**</ept> 类构建连接字符串，如以下代码示例所示："
    },
    {
      "content": "如果事先知道连接字符串的元素，则可以将其存储在配置文件中并在运行时进行检索，从而构造一个连接字符串。下面是配置文件中的一个连接字符串示例：",
      "pos": [
        3959,
        4028
      ]
    },
    {
      "pos": [
        4300,
        4348
      ],
      "content": "要检索配置文件中的连接字符串，你可以使用 <bpt id=\"p1\">**</bpt>ConfigurationManager<ept id=\"p1\">**</ept> 类："
    },
    {
      "content": "使用用于 ODBC 的 .NET Framework 数据提供程序",
      "pos": [
        4720,
        4753
      ]
    },
    {
      "pos": [
        4755,
        4832
      ],
      "content": "<bpt id=\"p1\">**</bpt>System.Data.Odbc<ept id=\"p1\">**</ept> 命名空间是用于 ODBC 的 .NET Framework 数据提供程序。下面是一个 ODBC 连接字符串示例："
    },
    {
      "pos": [
        4975,
        5024
      ],
      "content": "<bpt id=\"p1\">**</bpt>OdbcConnection<ept id=\"p1\">**</ept> 类表示与数据源的开放连接。下面是有关如何打开连接的代码示例："
    },
    {
      "pos": [
        5371,
        5426
      ],
      "content": "如果要在运行时构建连接字符串，你可以使用 <bpt id=\"p1\">**</bpt>OdbcConnectionStringBuilder<ept id=\"p1\">**</ept> 类。"
    },
    {
      "content": "使用 EntityClient Provider",
      "pos": [
        5431,
        5455
      ]
    },
    {
      "pos": [
        5457,
        5535
      ],
      "content": "<bpt id=\"p1\">**</bpt>System.Data.EntityClient<ept id=\"p1\">**</ept> 命名空间是用于 Entity Framework 的 .NET Framework 数据提供程序。"
    },
    {
      "pos": [
        5537,
        5699
      ],
      "content": "使用 Entity Framework，开发人员可以通过针对概念应用程序模型进行编程（而不是直接针对关系存储架构进行编程）来创建数据访问应用程序。通过提供与基础数据提供程序和关系数据库的 <bpt id=\"p1\">**</bpt>EntityConnection<ept id=\"p1\">**</ept>，可在特定于存储的 ADO.NET 数据提供程序的基础上构建 Entity Framework。"
    },
    {
      "pos": [
        5701,
        5820
      ],
      "content": "要构造一个 <bpt id=\"p1\">**</bpt>EntityConnection<ept id=\"p1\">**</ept> 对象，你必须引用一组包含所需模型和映射的元数据，还要引用特定于存储的数据提供程序名称和连接字符串。<bpt id=\"p2\">**</bpt>EntityConnection<ept id=\"p2\">**</ept> 建立之后，即可通过概念模型生成的类访问实体。"
    },
    {
      "content": "下面是一个连接字符串示例：",
      "pos": [
        5822,
        5835
      ]
    },
    {
      "pos": [
        6121,
        6232
      ],
      "content": "有关详细信息，请参阅<bpt id=\"p1\">[</bpt>针对 Entity Framework 的 EntityClient Provider<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/bb738561.aspx)</ept>。"
    },
    {
      "content": "后续步骤",
      "pos": [
        6237,
        6241
      ]
    },
    {
      "pos": [
        6243,
        6365
      ],
      "content": "现在，你已经了解连接到 SQL 数据库的相关基础知识，接下来请查看<bpt id=\"p1\">[</bpt>开发：操作方法主题（SQL 数据库）<ept id=\"p1\">](http://msdn.microsoft.com//zh-cn/library/windowsazure/ee621787.aspx)</ept>"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何使用 SQL 数据库 (.NET) - Azure\" \n    description=\"SQL Database 入门。了解如何创建 SQL Database 实例，以及如何使用 ADO.NET、ODBC 和 EntityClient Provider 与该实例建立连接。\" \n    services=\"sql-database\" \n    documentationCenter=\".net\" \n    authors=\"jeffgoll\" \n    manager=\"jeffreyg\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"sql-database\" \n    ms.date=\"07/07/2015\" \n    wacn.date=\"01/21/2016\"/>\n\n\n# 如何在 .NET 应用程序中使用 Azure SQL 数据库\n\n本指南说明如何在 Azure SQL 数据库 上创建逻辑服务器和数据库实例，以及如何使用下列 .NET Framework 数据提供程序技术连接到数据库：ADO.NET、ODBC 和 EntityClient Provider。\n\n\n\n\nSQL 数据库 为 Azure 提供关系数据库管理系统并且基于 SQL Server 技术。使用 SQL 数据库 实例，您可以轻松地配置关系数据库解决方案并将其部署到云中，并且利用能够为企业级可用性、可缩放性和安全性提供内置数据保护和自愈优势的分布式数据中心。\n\n\n\n## 登录 Azure\n\nSQL 数据库 在 Azure 上提供关系数据存储、访问和管理服务。若要使用它，您将需要一个 Azure 订阅。\n\n1. 打开 Web 浏览器并浏览到 [http://www.windowsazure.cn](http://www.windowsazure.cn)。若要开始使用免费帐户，请单击右上角的“免费试用”并执行相应步骤。\n\n2. 现已创建您的帐户。一切准备就绪，即可开始。\n\n\n## 创建和配置 SQL 数据库\n\n接下来，创建并配置数据库和服务器。在 Azure 管理门户中，你可以先使用已修订的工作流创建数据库，然后配置服务器。\n\n**创建数据库实例和逻辑服务器：**\n\n1. 登录到 [Azure 管理门户](http://manage.windowsazure.cn)。\n\n2. 单击页面底部的“新建”。\n\n3. 单击“数据服务”。\n\n4. 单击“SQL 数据库”。\n\n5. 单击“自定义创建”。\n\n6. 在“名称”中，输入数据库名称。\n\n7. 选择版本、最大大小和排序规则。考虑到本指南的用途，你可以使用默认值。\n\n    SQL 数据库提供三个数据库版本：基本、标准和高级。\n\n    最大大小是在首次创建数据库时指定的，稍后可以使用“更改数据库”对其进行更改。最大大小可限制数据库的大小。\n\n    在 Azure 上创建的每个 SQL 数据库实际上都具有三个副本。这样做是为了确保实现高可用性。故障转移是透明的并且是该服务的一部分。\n\n8. 在“服务器”中，选择“新建 SQL 数据库 服务器”。\n\n9. 单击箭头，转到下一页。\n\n10. 在“服务器设置”中，输入 SQL Server 身份验证登录名。\n\n    SQL 数据库 使用 SQL 身份验证进行加密连接。将使用您提供的名称创建一个分配给 sysadmin 固定服务器角色的新 SQL Server 身份验证登录名。 \n\n    该登录名不能是电子邮件地址、Windows 用户帐户或 Windows Live ID。SQL 数据库不支持声明，也不支持 Windows 身份验证。\n\n11. 提供由大小写值以及数字或符号共同组成的 8 个以上字符的强密码。\n\n12. 选择区域。区域将确定服务器的地理位置。区域不能随意切换，因此要选择一个对此服务器有效的区域。选择一个最靠近您的位置。将 Azure 应用程序和数据库放置在同一区域可以降低出口带宽成本以及减少数据延迟情况。\n\n13. 确保“允许 Azure 服务访问服务器”选项处于选中状态，以便你能够使用 SQL 数据库的管理门户、存储服务以及 Azure 上的其他服务连接到此数据库。\n\n14. 完成后，请单击页面底部的复选标记。\n\n请注意，您没有指定服务器名称。SQL 数据库 会自动生成服务器名称以确保没有重复的 DNS 条目。服务器名称是一个由 10 个字符组成的字母数字字符串。您不能更改 SQL 数据库 服务器的名称。\n\n创建数据库后，单击它以打开其仪表板。仪表板提供可在应用程序代码中复制和使用的连接字符串。仪表板还显示了你在从 Management Studio 或其他管理工具中连接到数据库时所需要指定的管理 URL。\n\n\n![SQL 数据库 仪表板](./media/sql-database-dotnet-how-to-use/SQLDbDashboard.PNG)\n\n\n在下一步中，您将配置防火墙以便允许您网络上运行的应用程序通过建立连接来访问相关数据。\n\n**配置逻辑服务器的防火墙**\n\n1. 单击“SQL 数据库”，单击页面顶部的“服务器”，然后单击你刚才创建的服务器。\n\n    ![设置防火墙](./media/sql-database-dotnet-how-to-use/SQLDBFirewall.PNG)\n\n2. 单击**“配置”**。\n\n3. 复制当前客户端 IP 地址。如果您从某网络进行连接，则为您的路由器或代理服务器侦听的 IP 地址。SQL 数据库 会检测当前连接所使用的 IP 地址，以便您可以创建一个接受来自该设备的连接请求的防火墙规则。 \n\n4. 将 IP 地址粘贴到“起始 IP 地址”和“结束 IP 地址”中，以确定允许访问服务器的地址范围。日后，如果您遇到指示该范围太窄的连接错误，则可以编辑此规则来扩大范围。\n\n    如果客户端计算机使用动态分配的 IP 地址，您必须指定较宽范围的地址，使其足以包含分配给您网络中计算机的 IP 地址。从较窄的范围开始，然后仅在您需要时对其进行扩展。\n\n5. 为防火墙规则输入名称，例如，您的计算机或公司的名称。\n\n6. 单击该规则旁边的复选标记进行保存。\n\n    ![防火墙设置的 IP 范围](./media/sql-database-dotnet-how-to-use/SQLDBIPRange.PNG)\n\n7. 单击页面底部的“保存”以完成该步骤。如果没有看到“保存”，请刷新浏览器页面。\n\n现在，你拥有数据库实例、逻辑服务器、允许来自你的 IP 地址的入站连接的防火墙规则以及管理员登录名。你现在可以通过编程方式连接到数据库。\n\n\n## 连接到 SQL Database\n\n本节介绍如何使用不同的 .NET Framework 数据提供程序连接到 SQL Database 实例。有关连接到 SQL 数据库服务器和数据库的中心建议，请参阅：\n\n\n- [到 SQL 数据库的连接：中心建议](/documentation/articles/sql-database-connect-central-recommendations)。\n\n\n如果你选择使用 Visual Studio 并且你的配置没有将 Azure Web 应用包含为前端，则无需在开发计算机上安装其他工具或 SDK。你现在即可开始开发应用程序。\n\n您可以使用 Visual Studio 中的所有相同设计器工具处理 SQL 数据库，就像可以使用这些工具处理 SQL Server 一样。服务器资源管理器允许您查看（但不能编辑）数据库对象。Visual Studio 实体数据模型设计器功能完备，您可以用它来创建针对 SQL 数据库 的模型以用于 Entity Framework。\n\n## 使用用于 SQL Server 的 .NET Framework 数据提供程序\n\n**System.Data.SqlClient** 命名空间是用于 SQL Server 的 .NET Framework 数据提供程序。\n\n标准连接字符串类似于以下内容：\n\n    Server=tcp:.database.chinacloudapi.cn;\n    Database=;\n    User ID=@;\n    Password=;\n    Trusted_Connection=False;\n    Encrypt=True;\n\n你可以使用 **SQLConnectionStringBuilder** 类构建连接字符串，如以下代码示例所示：\n\n    SqlConnectionStringBuilder csBuilder;\n    csBuilder = new SqlConnectionStringBuilder();\n    csBuilder.DataSource = xxxxxxxxxx.database.chinacloudapi.cn;\n    csBuilder.InitialCatalog = testDB;\n    csBuilder.Encrypt = true;\n    csBuilder.TrustServerCertificate = false;\n    csBuilder.UserID = MyAdmin;\n    csBuilder.Password = pass@word1;\n\n如果事先知道连接字符串的元素，则可以将其存储在配置文件中并在运行时进行检索，从而构造一个连接字符串。下面是配置文件中的一个连接字符串示例：\n\n    <connectionStrings>\n      <add name=\"ConnectionString\" \n           connectionString =\"Server=tcp:xxxxxxxxxx.database.chinacloudapi.cn;Database=testDB;User ID=MyAdmin@xxxxxxxxxx;Password=pass@word1;Trusted_Connection=False;Encrypt=True;\" />\n    </connectionStrings>\n\n要检索配置文件中的连接字符串，你可以使用 **ConfigurationManager** 类：\n\n    SqlConnectionStringBuilder csBuilder;\n    csBuilder = new SqlConnectionStringBuilder(ConfigurationManager.ConnectionStrings[\"ConnectionString\"].ConnectionString);\n    After you have built your connection string, you can use the SQLConnection class to connect the SQL 数据库 server:\n    SqlConnection conn = new SqlConnection(csBuilder.ToString());\n    conn.Open();\n\n## 使用用于 ODBC 的 .NET Framework 数据提供程序\n\n**System.Data.Odbc** 命名空间是用于 ODBC 的 .NET Framework 数据提供程序。下面是一个 ODBC 连接字符串示例：\n\n    Driver={SQL Server Native Client 10.0};\n    Server=tcp:.database.chinacloudapi.cn;\n    Database=;\n    Uid=@;\n    Pwd=;\n    Encrypt=yes;\n\n**OdbcConnection** 类表示与数据源的开放连接。下面是有关如何打开连接的代码示例：\n\n    string cs = \"Driver={SQL Server Native Client 10.0};\" +\n                \"Server=tcp:xxxxxxxxxx.database.chinacloudapi.cn;\" +\n                \"Database=testDB;\"+\n                \"Uid=MyAdmin@xxxxxxxxxx;\" +\n                \"Pwd=pass@word1;\"+\n                \"Encrypt=yes;\";\n\n    OdbcConnection conn = new OdbcConnection(cs);\n    conn.Open();\n\n如果要在运行时构建连接字符串，你可以使用 **OdbcConnectionStringBuilder** 类。\n\n## 使用 EntityClient Provider\n\n**System.Data.EntityClient** 命名空间是用于 Entity Framework 的 .NET Framework 数据提供程序。\n\n使用 Entity Framework，开发人员可以通过针对概念应用程序模型进行编程（而不是直接针对关系存储架构进行编程）来创建数据访问应用程序。通过提供与基础数据提供程序和关系数据库的 **EntityConnection**，可在特定于存储的 ADO.NET 数据提供程序的基础上构建 Entity Framework。\n\n要构造一个 **EntityConnection** 对象，你必须引用一组包含所需模型和映射的元数据，还要引用特定于存储的数据提供程序名称和连接字符串。**EntityConnection** 建立之后，即可通过概念模型生成的类访问实体。\n\n下面是一个连接字符串示例：\n\n    metadata=res://*/SchoolModel.csdl|res://*/SchoolModel.ssdl|res://*/SchoolModel.msl;provider=System.Data.SqlClient;provider connection string=\"Data Source=xxxxxxxxxx.database.chinacloudapi.cn;Initial Catalog=School;Persist Security Info=True;User ID=MyAdmin;Password=***********\"\n\n有关详细信息，请参阅[针对 Entity Framework 的 EntityClient Provider](http://msdn.microsoft.com/zh-cn/library/bb738561.aspx)。\n\n## 后续步骤\n\n现在，你已经了解连接到 SQL 数据库的相关基础知识，接下来请查看[开发：操作方法主题（SQL 数据库）](http://msdn.microsoft.com//zh-cn/library/windowsazure/ee621787.aspx)\n \n\n<!---HONumber=69-->"
}