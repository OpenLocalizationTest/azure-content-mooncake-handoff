{
  "nodes": [
    {
      "content": "通知中心入门（Xamarin iOS 应用）| Azure",
      "pos": [
        27,
        56
      ]
    },
    {
      "content": "在本教程中，你将了解如何使用 Azure 通知中心将推送通知发送到 Xamarin iOS 应用程序。",
      "pos": [
        75,
        126
      ]
    },
    {
      "content": "通知中心入门",
      "pos": [
        350,
        356
      ]
    },
    {
      "content": "概述",
      "pos": [
        473,
        475
      ]
    },
    {
      "content": "本教程演示如何使用 Azure 通知中心将推送通知发送到 iOS 应用程序。",
      "pos": [
        477,
        515
      ]
    },
    {
      "content": "你将创建一个空白 Xamarin.iOS 应用，它使用 Apple Push Notification 服务 (APNS) 接收推送通知。完成后，你将能够使用通知中心将推送通知广播到运行你的应用的所有设备。<bpt id=\"p1\">[</bpt>NotificationHubs 应用程序<ept id=\"p1\">][GitHub]</ept> 示例中提供了完成的代码。",
      "pos": [
        516,
        663
      ]
    },
    {
      "content": "本教程演示使用通知中心的简单广播方案。",
      "pos": [
        665,
        684
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        688,
        692
      ]
    },
    {
      "content": "本教程需要的内容如下：",
      "pos": [
        694,
        705
      ]
    },
    {
      "content": "Xcode 6.0",
      "pos": [
        710,
        719
      ]
    },
    {
      "content": "支持 iOS 7.0（或更高版本）的设备",
      "pos": [
        738,
        758
      ]
    },
    {
      "content": "iOS 开发人员计划成员身份",
      "pos": [
        761,
        775
      ]
    },
    {
      "content": "Xamarin.iOS",
      "pos": [
        779,
        790
      ]
    },
    {
      "content": "Azure 移动服务组件",
      "pos": [
        795,
        807
      ]
    },
    {
      "pos": [
        814,
        884
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>由于推送通知配置要求，你必须在支持 iOS 的设备（iPhone 或 iPad）而不是在模拟器上部署和测试推送通知。"
    },
    {
      "content": "只有在完成本教程后，才能完成有关 Xamarin.iOS 应用的所有其他通知中心教程。",
      "pos": [
        886,
        929
      ]
    },
    {
      "pos": [
        933,
        1051
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>若要完成本教程，你必须有一个有效的 Azure 帐户。如果你没有帐户，只需花费几分钟就能创建一个免费试用帐户。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 免费试用<ept id=\"p1\">](/pricing/1rmb-trial/)</ept>。"
    },
    {
      "pos": [
        1053,
        1155
      ],
      "content": "[AZURE.INCLUDE <bpt id=\"p1\">[</bpt>通知中心：启用 Apple 推送通知<ept id=\"p1\">](../includes/notification-hubs-enable-apple-push-notifications.md)</ept>]"
    },
    {
      "content": "配置通知中心",
      "pos": [
        1160,
        1166
      ]
    },
    {
      "pos": [
        1168,
        1241
      ],
      "content": "本部分将引导你使用创建的 <bpt id=\"p1\">**</bpt>.p12<ept id=\"p1\">**</ept> 推送证书创建新的通知中心并配置 APNS 身份验证。如果你想要使用已创建的通知中心，可以跳到步骤 5。"
    },
    {
      "content": "单击顶部的“配置”选项卡，然后单击 Apple 通知设置中的“上载”按钮，以上载证书指纹。<ph id=\"ph1\">&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</ph>然后选择前面导出的 <ph id=\"ph2\">&lt;b&gt;</ph>.p12<ph id=\"ph3\">&lt;/b&gt;</ph> 证书以及证书的密码。",
      "pos": [
        1382,
        1473
      ]
    },
    {
      "content": "由于此项目用于开发，因此请务必选择“沙箱”模式。<ph id=\"ph1\">&lt;b&gt;&lt;/b&gt;</ph>仅当你想要将推送通知发送给从应用商店购买你应用的用户时，才使用“生产”模式。",
      "pos": [
        1481,
        1550
      ]
    },
    {
      "content": "&amp;emsp;&amp;emsp;<ph id=\"ph1\">![](./media/notification-hubs-ios-get-started/notification-hubs-upload-cert.png)</ph>",
      "pos": [
        1574,
        1666
      ]
    },
    {
      "pos": [
        1668,
        1762
      ],
      "content": "&amp;emsp;&amp;emsp;<ph id=\"ph1\">![](./media/notification-hubs-ios-get-started/notification-hubs-configure-ios.png)</ph>"
    },
    {
      "content": "你的通知中心现在已配置为使用 APNS，并且你有连接字符串用于注册你的应用程序和发送推送通知。",
      "pos": [
        1765,
        1812
      ]
    },
    {
      "content": "将你的应用连接到通知中心",
      "pos": [
        1820,
        1832
      ]
    },
    {
      "content": "创建新项目",
      "pos": [
        1839,
        1844
      ]
    },
    {
      "content": "在 Xamarin Studio 中，创建新的 iOS 项目，然后选择“统一 API”&gt;“单视图应用程序”模板。",
      "pos": [
        1849,
        1905
      ]
    },
    {
      "content": "添加对 Azure 消息传送组件的引用。在“解决方案”视图中，右键单击你项目的“Components”文件夹，然后选择“获取更多组件”。搜索“Azure 消息传送”组件，并向你的项目添加该组件。",
      "pos": [
        1923,
        2020
      ]
    },
    {
      "pos": [
        2025,
        2062
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate.cs<ept id=\"p1\">**</ept> 中，添加以下 using 语句："
    },
    {
      "content": "using WindowsAzure.Messaging;",
      "pos": [
        2068,
        2097
      ]
    },
    {
      "pos": [
        2102,
        2131
      ],
      "content": "声明 <bpt id=\"p1\">**</bpt>SBNotificationHub<ept id=\"p1\">**</ept> 的实例："
    },
    {
      "pos": [
        2189,
        2217
      ],
      "content": "使用以下变量创建 <bpt id=\"p1\">**</bpt>Constants.cs<ept id=\"p1\">**</ept> 类："
    },
    {
      "pos": [
        2431,
        2489
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate.cs<ept id=\"p1\">**</ept> 中，更新 <bpt id=\"p2\">**</bpt>FinishedLaunching()<ept id=\"p2\">**</ept> 以匹配以下内容："
    },
    {
      "pos": [
        3427,
        3494
      ],
      "content": "重写 <bpt id=\"p1\">**</bpt>AppDelegate.cs<ept id=\"p1\">**</ept> 中的 <bpt id=\"p2\">**</bpt>RegisteredForRemoteNotifications()<ept id=\"p2\">**</ept> 方法："
    },
    {
      "pos": [
        4308,
        4369
      ],
      "content": "重写 <bpt id=\"p1\">**</bpt>AppDelegate.cs<ept id=\"p1\">**</ept> 中的 <bpt id=\"p2\">**</bpt>ReceivedRemoteNotification()<ept id=\"p2\">**</ept> 方法："
    },
    {
      "pos": [
        4551,
        4607
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate.cs<ept id=\"p1\">**</ept> 中创建以下 <bpt id=\"p2\">**</bpt>ProcessNotification()<ept id=\"p2\">**</ept> 方法："
    },
    {
      "pos": [
        6315,
        6392
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你可以选择覆盖 <bpt id=\"p1\">**</bpt>FailedToRegisterForRemoteNotifications()<ept id=\"p1\">**</ept> 以处理无网络连接等情况。"
    },
    {
      "content": "在你的设备上运行应用程序。",
      "pos": [
        6399,
        6412
      ]
    },
    {
      "content": "发送通知",
      "pos": [
        6418,
        6422
      ]
    },
    {
      "content": "在 [Azure 经典门户] 中通过通知中心上的调试选项卡（如以下屏幕中所示）来发送通知，可以在应用中测试通知的接收情况。",
      "pos": [
        6425,
        6486
      ]
    },
    {
      "content": "通常，推送通知是在后端服务（例如，移动服务，或者使用兼容库的 ASP.NET）中发送的。如果你的后端没有可用的库，则你也可以使用 REST API 直接发送通知消息。",
      "pos": [
        6572,
        6655
      ]
    },
    {
      "pos": [
        6657,
        6875
      ],
      "content": "在本教程中，为了保持内容的简单性，我们只会演示如何在控制台应用程序（而不是后端服务）中，使用通知中心的 .NET SDK 发送通知，以此测试你的客户端应用。建议你接下来学习<bpt id=\"p1\">[</bpt>使用通知中心向用户推送通知<ept id=\"p1\">](/documentation/articles/notification-hubs-aspnet-backend-ios-notify-users)</ept>教程，以了解如何从 ASP.NET 后端发送通知。不过，可以使用以下方法来发送通知："
    },
    {
      "pos": [
        6879,
        6980
      ],
      "content": "<bpt id=\"p1\">**</bpt>REST 接口<ept id=\"p1\">**</ept>：可以使用 <bpt id=\"p2\">[</bpt>REST 接口<ept id=\"p2\">](http://msdn.microsoft.com/library/windowsazure/dn223264.aspx)</ept>在任何后端平台上支持通知。"
    },
    {
      "pos": [
        6984,
        7158
      ],
      "content": "<bpt id=\"p1\">**</bpt>Azure 通知中心 .NET SDK<ept id=\"p1\">**</ept>：在 Visual Studio 的 Nuget 包管理器中，运行 <bpt id=\"p2\">[</bpt>Install-Package Microsoft.Azure.NotificationHubs<ept id=\"p2\">](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)</ept>。"
    },
    {
      "pos": [
        7162,
        7275
      ],
      "content": "<bpt id=\"p1\">**</bpt>Node.js<ept id=\"p1\">**</ept>：<bpt id=\"p2\">[</bpt>如何通过 Node.js 使用通知中心<ept id=\"p2\">](/documentation/articles/notification-hubs-nodejs-how-to-use-notification-hubs)</ept>。"
    },
    {
      "pos": [
        7279,
        7571
      ],
      "content": "<bpt id=\"p1\">**</bpt>Azure 移动服务<ept id=\"p1\">**</ept>：有关如何从与通知中心集成的 Azure 移动服务后端发送通知的示例，请参阅“移动服务中的推送通知入门”（<bpt id=\"p2\">[</bpt>.NET 后端<ept id=\"p2\">](/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push)</ept> | <bpt id=\"p3\">[</bpt>JavaScript 后端<ept id=\"p3\">](/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push)</ept>）。"
    },
    {
      "pos": [
        7575,
        7779
      ],
      "content": "<bpt id=\"p1\">**</bpt>Java/PHP<ept id=\"p1\">**</ept>：有关如何使用 REST API 发送通知的示例，请参阅“如何通过 Java/PHP 使用通知中心”(<bpt id=\"p2\">[</bpt>Java<ept id=\"p2\">](/documentation/articles/notification-hubs-java-backend-how-to)</ept> | <bpt id=\"p3\">[</bpt>PHP<ept id=\"p3\">](/documentation/articles/notification-hubs-php-backend-how-to)</ept>)。"
    },
    {
      "content": "（可选）通过 .NET 控制台应用发送通知。",
      "pos": [
        7786,
        7808
      ]
    },
    {
      "content": "在本部分，你将使用 .NET 控制台应用发送通知",
      "pos": [
        7810,
        7834
      ]
    },
    {
      "content": "创建新的 Visual C# 控制台应用程序：",
      "pos": [
        7839,
        7862
      ]
    },
    {
      "content": "在 Visual Studio 中，依次单击“工具”、“NuGet 包管理器”和“包管理器控制台”。",
      "pos": [
        7882,
        7932
      ]
    },
    {
      "content": "这会在 Visual Studio 中显示“包管理器控制台”。",
      "pos": [
        7938,
        7969
      ]
    },
    {
      "content": "在“包管理器控制台”窗口中，将“默认项目”设置为新的控制台应用程序项目，然后在控制台窗口中执行以下命令：",
      "pos": [
        7974,
        8026
      ]
    },
    {
      "pos": [
        8090,
        8237
      ],
      "content": "这将使用 <ph id=\"ph1\">&lt;a href=\"http://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/\"&gt;</ph>Microsoft.Azure.Notification Hubs NuGet 包<ph id=\"ph2\">&lt;/a&gt;</ph>添加对 Azure 通知中心 SDK 的引用。"
    },
    {
      "pos": [
        8349,
        8382
      ],
      "content": "打开文件 Program.cs 并添加以下 <ph id=\"ph1\">`using`</ph> 语句："
    },
    {
      "pos": [
        8436,
        8457
      ],
      "content": "在 <ph id=\"ph1\">`Program`</ph> 类中添加以下方法。"
    },
    {
      "pos": [
        8824,
        8842
      ],
      "content": "在 <ph id=\"ph1\">`Main`</ph> 方法中添加以下行："
    },
    {
      "content": "按 F5 键以运行应用。你应在设备上收到警报。如果正在使用 Wi-Fi，请确保你的连接有效。",
      "pos": [
        8911,
        8957
      ]
    },
    {
      "pos": [
        8959,
        8993
      ],
      "content": "可以在 Apple <bpt id=\"p1\">[</bpt><ept id=\"p1\">本地和推送通知编程指南]</ept>中找到所有可能的负载。"
    },
    {
      "content": "（可选）从移动服务发送通知",
      "pos": [
        9000,
        9013
      ]
    },
    {
      "content": "在本部分，我们将使用移动服务通过节点脚本来发送通知。",
      "pos": [
        9015,
        9041
      ]
    },
    {
      "pos": [
        9043,
        9076
      ],
      "content": "若要使用移动服务发送通知，请按<bpt id=\"p1\">[</bpt><ept id=\"p1\">移动服务入门]</ept>中的说明操作，然后："
    },
    {
      "pos": [
        9081,
        9107
      ],
      "content": "登录到<bpt id=\"p1\">[</bpt><ept id=\"p1\"> Azure 管理门户]</ept>并选择你的移动服务。"
    },
    {
      "content": "选择顶部的“计划程序”选项卡。",
      "pos": [
        9112,
        9127
      ]
    },
    {
      "content": "创建新的计划作业，插入名称，然后选择“按需”。",
      "pos": [
        9146,
        9169
      ]
    },
    {
      "content": "创建作业时，单击该作业名称。然后单击顶部栏上的“脚本”选项卡。",
      "pos": [
        9188,
        9219
      ]
    },
    {
      "pos": [
        9224,
        9313
      ],
      "content": "在你的计划程序函数中插入以下脚本。确保将占位符替换为你先前获取的通知中心名称和 <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">*</ept> 的连接字符串。单击“保存”。"
    },
    {
      "content": "单击底部栏上的“运行一次”。你应在设备上收到警报。",
      "pos": [
        9829,
        9854
      ]
    },
    {
      "pos": [
        9859,
        9888
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"next-steps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "pos": [
        9890,
        10031
      ],
      "content": "在这个简单的示例中，你已将通知广播到所有 iOS 设备。若要针对特定客户，请参考教程<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心将通知推送到用户]</ept>。如果要按兴趣组划分用户，可以阅读<bpt id=\"p2\">[</bpt><ept id=\"p2\">使用通知中心发送突发新闻]</ept>。请在<bpt id=\"p3\">[</bpt><ept id=\"p3\">通知中心指南]</ept>和<bpt id=\"p4\">[</bpt><ept id=\"p4\">适用于 iOS 的通知中心操作方法指南]</ept>中了解有关如何使用通知中心的详细信息。"
    }
  ],
  "content": "<properties\n    pageTitle=\"通知中心入门（Xamarin iOS 应用）| Azure\"\n    description=\"在本教程中，你将了解如何使用 Azure 通知中心将推送通知发送到 Xamarin iOS 应用程序。\"\n    services=\"notification-hubs\"\n    documentationCenter=\"xamarin\"\n    authors=\"ysxu\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"11/17/2015\"\n    wacn.date=\"01/14/2015\"/>\n\n# 通知中心入门\n\n[AZURE.INCLUDE [notification-hubs-selector-get-started](../includes/notification-hubs-selector-get-started.md)]\n\n##概述\n\n本教程演示如何使用 Azure 通知中心将推送通知发送到 iOS 应用程序。\n你将创建一个空白 Xamarin.iOS 应用，它使用 Apple Push Notification 服务 (APNS) 接收推送通知。完成后，你将能够使用通知中心将推送通知广播到运行你的应用的所有设备。[NotificationHubs 应用程序][GitHub] 示例中提供了完成的代码。\n\n本教程演示使用通知中心的简单广播方案。\n\n##先决条件\n\n本教程需要的内容如下：\n\n+ [Xcode 6.0][Install Xcode]\n+ 支持 iOS 7.0（或更高版本）的设备\n+ iOS 开发人员计划成员身份\n+ [Xamarin.iOS]\n+ [Azure 移动服务组件]\n\n   >[AZURE.NOTE]由于推送通知配置要求，你必须在支持 iOS 的设备（iPhone 或 iPad）而不是在模拟器上部署和测试推送通知。\n\n只有在完成本教程后，才能完成有关 Xamarin.iOS 应用的所有其他通知中心教程。\n\n> [AZURE.IMPORTANT]若要完成本教程，你必须有一个有效的 Azure 帐户。如果你没有帐户，只需花费几分钟就能创建一个免费试用帐户。有关详细信息，请参阅 [Azure 免费试用](/pricing/1rmb-trial/)。\n\n[AZURE.INCLUDE [通知中心：启用 Apple 推送通知](../includes/notification-hubs-enable-apple-push-notifications.md)]\n\n\n##配置通知中心\n\n本部分将引导你使用创建的 **.p12** 推送证书创建新的通知中心并配置 APNS 身份验证。如果你想要使用已创建的通知中心，可以跳到步骤 5。\n\n[AZURE.INCLUDE [notification-hubs-portal-create-new-hub](../includes/notification-hubs-portal-create-new-hub.md)]\n\n\n<ol start=\"7\">\n<li>\n<p>单击顶部的“配置”选项卡，然后单击 Apple 通知设置中的“上载”按钮，以上载证书指纹。<b></b><b></b>然后选择前面导出的 <b>.p12</b> 证书以及证书的密码。</p>\n<p>由于此项目用于开发，因此请务必选择“沙箱”模式。<b></b>仅当你想要将推送通知发送给从应用商店购买你应用的用户时，才使用“生产”模式。<b></b></p>\n</li>\n</ol>\n&emsp;&emsp;![](./media/notification-hubs-ios-get-started/notification-hubs-upload-cert.png)\n\n&emsp;&emsp;![](./media/notification-hubs-ios-get-started/notification-hubs-configure-ios.png)\n\n\n你的通知中心现在已配置为使用 APNS，并且你有连接字符串用于注册你的应用程序和发送推送通知。\n\n\n\n\n\n##将你的应用连接到通知中心\n\n#### 创建新项目\n\n1. 在 Xamarin Studio 中，创建新的 iOS 项目，然后选择“统一 API”>“单视图应用程序”模板。\n\n    ![][31]\n\n2. 添加对 Azure 消息传送组件的引用。在“解决方案”视图中，右键单击你项目的“Components”文件夹，然后选择“获取更多组件”。搜索“Azure 消息传送”组件，并向你的项目添加该组件。\n\n3. 在 **AppDelegate.cs** 中，添加以下 using 语句：\n\n    using WindowsAzure.Messaging;\n\n4. 声明 **SBNotificationHub** 的实例：\n\n        private SBNotificationHub Hub { get; set; }\n\n5. 使用以下变量创建 **Constants.cs** 类：\n\n        // Azure app specific connection string and hub path\n        public const string ConnectionString = \"<Azure connection string>\";\n        public const string NotificationHubPath = \"<Azure hub path>\";\n\n\n6. 在 **AppDelegate.cs** 中，更新 **FinishedLaunching()** 以匹配以下内容：\n\n        public override bool FinishedLaunching(UIApplication application, NSDictionary launchOptions)\n        {\n            if (UIDevice.CurrentDevice.CheckSystemVersion (8, 0)) {\n                var pushSettings = UIUserNotificationSettings.GetSettingsForTypes (\n                       UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound,\n                       new NSSet ());\n\n                UIApplication.SharedApplication.RegisterUserNotificationSettings (pushSettings);\n                UIApplication.SharedApplication.RegisterForRemoteNotifications ();\n            } else {\n                UIRemoteNotificationType notificationTypes = UIRemoteNotificationType.Alert | UIRemoteNotificationType.Badge | UIRemoteNotificationType.Sound;\n                UIApplication.SharedApplication.RegisterForRemoteNotificationTypes (notificationTypes);\n            }\n\n            return true;\n        }\n\n7. 重写 **AppDelegate.cs** 中的 **RegisteredForRemoteNotifications()** 方法：\n\n        public override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)\n        {\n            Hub = new SBNotificationHub(Constants.ConnectionString, Constants.NotificationHubPath);\n\n            Hub.UnregisterAllAsync (deviceToken, (error) => {\n                if (error != null)\n                {\n                    Console.WriteLine(\"Error calling Unregister: {0}\", error.ToString());\n                    return;\n                }\n\n                NSSet tags = null; // create tags if you want\n                Hub.RegisterNativeAsync(deviceToken, tags, (errorCallback) => {\n                    if (errorCallback != null)\n                        Console.WriteLine(\"RegisterNativeAsync error: \" + errorCallback.ToString());\n                });\n            });\n        }\n\n8. 重写 **AppDelegate.cs** 中的 **ReceivedRemoteNotification()** 方法：\n\n        public override void ReceivedRemoteNotification(UIApplication application, NSDictionary userInfo)\n        {\n            ProcessNotification(userInfo, false);\n        }\n\n9. 在 **AppDelegate.cs** 中创建以下 **ProcessNotification()** 方法：\n\n        void ProcessNotification(NSDictionary options, bool fromFinishedLaunching)\n        {\n            // Check to see if the dictionary has the aps key.  This is the notification payload you would have sent\n            if (null != options && options.ContainsKey(new NSString(\"aps\")))\n            {\n                //Get the aps dictionary\n                NSDictionary aps = options.ObjectForKey(new NSString(\"aps\")) as NSDictionary;\n\n                string alert = string.Empty;\n\n                //Extract the alert text\n                // NOTE: If you're using the simple alert by just specifying\n                // \"  aps:{alert:\"alert msg here\"}  \", this will work fine.\n                // But if you're using a complex alert with Localization keys, etc.,\n                // your \"alert\" object from the aps dictionary will be another NSDictionary.\n                // Basically the JSON gets dumped right into a NSDictionary,\n                // so keep that in mind.\n                if (aps.ContainsKey(new NSString(\"alert\")))\n                    alert = (aps [new NSString(\"alert\")] as NSString).ToString();\n\n                //If this came from the ReceivedRemoteNotification while the app was running,\n                // we of course need to manually process things like the sound, badge, and alert.\n                if (!fromFinishedLaunching)\n                {\n                    //Manually show an alert\n                    if (!string.IsNullOrEmpty(alert))\n                    {\n                        UIAlertView avAlert = new UIAlertView(\"Notification\", alert, null, \"OK\", null);\n                        avAlert.Show();\n                    }\n                }\n            }\n        }\n\n    > [AZURE.NOTE]你可以选择覆盖 **FailedToRegisterForRemoteNotifications()** 以处理无网络连接等情况。\n\n\n10. 在你的设备上运行应用程序。\n\n\n## 发送通知\n\n\n在 [Azure 经典门户] 中通过通知中心上的调试选项卡（如以下屏幕中所示）来发送通知，可以在应用中测试通知的接收情况。\n\n![](./media/notification-hubs-ios-get-started/notification-hubs-debug-hub-ios.png)\n\n通常，推送通知是在后端服务（例如，移动服务，或者使用兼容库的 ASP.NET）中发送的。如果你的后端没有可用的库，则你也可以使用 REST API 直接发送通知消息。\n\n在本教程中，为了保持内容的简单性，我们只会演示如何在控制台应用程序（而不是后端服务）中，使用通知中心的 .NET SDK 发送通知，以此测试你的客户端应用。建议你接下来学习[使用通知中心向用户推送通知](/documentation/articles/notification-hubs-aspnet-backend-ios-notify-users)教程，以了解如何从 ASP.NET 后端发送通知。不过，可以使用以下方法来发送通知：\n\n* **REST 接口**：可以使用 [REST 接口](http://msdn.microsoft.com/library/windowsazure/dn223264.aspx)在任何后端平台上支持通知。\n\n* **Azure 通知中心 .NET SDK**：在 Visual Studio 的 Nuget 包管理器中，运行 [Install-Package Microsoft.Azure.NotificationHubs](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/)。\n\n* **Node.js**：[如何通过 Node.js 使用通知中心](/documentation/articles/notification-hubs-nodejs-how-to-use-notification-hubs)。\n\n* **Azure 移动服务**：有关如何从与通知中心集成的 Azure 移动服务后端发送通知的示例，请参阅“移动服务中的推送通知入门”（[.NET 后端](/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push) | [JavaScript 后端](/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-push)）。\n\n* **Java/PHP**：有关如何使用 REST API 发送通知的示例，请参阅“如何通过 Java/PHP 使用通知中心”([Java](/documentation/articles/notification-hubs-java-backend-how-to) | [PHP](/documentation/articles/notification-hubs-php-backend-how-to))。\n\n\n####（可选）通过 .NET 控制台应用发送通知。\n\n在本部分，你将使用 .NET 控制台应用发送通知\n\n1. 创建新的 Visual C# 控制台应用程序： \n\n    ![][213]\n\n2. 在 Visual Studio 中，依次单击“工具”、“NuGet 包管理器”和“包管理器控制台”。\n\n    这会在 Visual Studio 中显示“包管理器控制台”。\n\n3. 在“包管理器控制台”窗口中，将“默认项目”设置为新的控制台应用程序项目，然后在控制台窗口中执行以下命令：\n\n        Install-Package Microsoft.Azure.NotificationHubs\n\n    这将使用 <a href=\"http://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/\">Microsoft.Azure.Notification Hubs NuGet 包</a>添加对 Azure 通知中心 SDK 的引用。\n\n    ![](./media/notification-hubs-windows-store-dotnet-get-started/notification-hub-package-manager.png)\n\n\n4. 打开文件 Program.cs 并添加以下 `using` 语句：\n\n        using Microsoft.Azure.NotificationHubs;\n\n3. 在 `Program` 类中添加以下方法。\n\n        private static async void SendNotificationAsync()\n        {\n            NotificationHubClient hub = NotificationHubClient.CreateClientFromConnectionString(\"<connection string with full access>\", \"<hub name>\");\n            var alert = \"{\\\"aps\\\":{\\\"alert\\\":\\\"Hello from .NET!\\\"}}\";\n            await hub.SendAppleNativeNotificationAsync(alert);\n        }\n\n4. 在 `Main` 方法中添加以下行：\n\n         SendNotificationAsync();\n         Console.ReadLine();\n\n5. 按 F5 键以运行应用。你应在设备上收到警报。如果正在使用 Wi-Fi，请确保你的连接有效。\n\n可以在 Apple [本地和推送通知编程指南]中找到所有可能的负载。\n\n\n####（可选）从移动服务发送通知\n\n在本部分，我们将使用移动服务通过节点脚本来发送通知。\n\n若要使用移动服务发送通知，请按[移动服务入门]中的说明操作，然后：\n\n1. 登录到[ Azure 管理门户]并选择你的移动服务。\n\n2. 选择顶部的“计划程序”选项卡。\n\n    ![][215]\n\n3. 创建新的计划作业，插入名称，然后选择“按需”。\n\n    ![][216]\n\n4. 创建作业时，单击该作业名称。然后单击顶部栏上的“脚本”选项卡。\n\n5. 在你的计划程序函数中插入以下脚本。确保将占位符替换为你先前获取的通知中心名称和 *DefaultFullSharedAccessSignature* 的连接字符串。单击“保存”。\n\n        var azure = require('azure');\n        var notificationHubService = azure.createNotificationHubService('<Hubname>', '<SAS Full access >');\n        notificationHubService.apns.send(\n            null,\n            {\"aps\":\n                {\n                \"alert\": \"Hello from Mobile Services!\"\n                }\n            },\n            function (error)\n            {\n                if (!error) {\n                    console.warn(\"Notification successful\");\n                }\n            }\n        );\n\n\n6. 单击底部栏上的“运行一次”。你应在设备上收到警报。\n\n## <a name=\"next-steps\"></a>后续步骤\n\n在这个简单的示例中，你已将通知广播到所有 iOS 设备。若要针对特定客户，请参考教程[使用通知中心将通知推送到用户]。如果要按兴趣组划分用户，可以阅读[使用通知中心发送突发新闻]。请在[通知中心指南]和[适用于 iOS 的通知中心操作方法指南]中了解有关如何使用通知中心的详细信息。\n\n<!-- Anchors. -->\n[Generate the certificate signing request]: #certificates\n[Register your app and enable push notifications]: #register\n[Create a provisioning profile for the app]: #profile\n[Configure your Notification Hub]: #configure-hub\n[Connecting your app to the Notification Hub]: #connecting-app\n[Send notifications from your back-end]: #send\n[Next Steps]: #next-steps\n\n<!-- Images. -->\n\n[213]: ./media/partner-xamarin-notification-hubs-ios-get-started/notification-hub-create-console-app.png\n\n\n\n[215]: ./media/partner-xamarin-notification-hubs-ios-get-started/notification-hub-scheduler1.png\n[216]: ./media/partner-xamarin-notification-hubs-ios-get-started/notification-hub-scheduler2.png\n\n\n[31]: ./media/partner-xamarin-notification-hubs-ios-get-started/notification-hub-create-ios-app.png\n\n\n\n\n<!-- URLs. -->\n[移动服务入门]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-push-notifications-app-users\n[ Azure 管理门户]: https://manage.windowsazure.cn/\n[通知中心指南]: http://msdn.microsoft.com/zh-cn/library/jj927170.aspx\n[适用于 iOS 的通知中心操作方法指南]: http://msdn.microsoft.com/zh-cn/library/jj927168.aspx\n[Install Xcode]: https://go.microsoft.com/fwLink/p/?LinkID=266532\n[使用通知中心将通知推送到用户]: /documentation/articles/notification-hubs-aspnet-backend-windows-dotnet-notify-users\n[使用通知中心发送突发新闻]: /documentation/articles/notification-hubs-windows-store-dotnet-send-breaking-news\n\n[本地和推送通知编程指南]: http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW1\n[Apple 推送通知服务]: http://go.microsoft.com/fwlink/p/?LinkId=272584\n\n[Azure 移动服务组件]: http://components.xamarin.com/view/azure-mobile-services/\n[GitHub]: http://go.microsoft.com/fwlink/p/?LinkId=331329\n[Xamarin.iOS]: http://xamarin.com/download\n[WindowsAzure.Messaging]: https://github.com/ghuntley/WindowsAzure.Messaging.iOS\n<!---HONumber=Mooncake_0104_2016-->"
}