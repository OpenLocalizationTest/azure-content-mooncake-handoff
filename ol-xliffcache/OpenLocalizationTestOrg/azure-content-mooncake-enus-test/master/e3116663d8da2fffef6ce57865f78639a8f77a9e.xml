{
  "nodes": [
    {
      "content": "将移动服务准备就绪后，您可以更新应用，以便在移动服务而不是本地集合中存储项。",
      "pos": [
        0,
        38
      ]
    },
    {
      "pos": [
        44,
        83
      ],
      "content": "如果您还没有<bpt id=\"p1\">[</bpt><ept id=\"p1\">移动服务 Android SDK]</ept>，请立即下载并展开压缩的文件。"
    },
    {
      "pos": [
        88,
        169
      ],
      "content": "将  <ph id=\"ph1\">`.jar`</ph> 文件从 SDK 的  <ph id=\"ph2\">`mobileservices`</ph> 文件夹复制到 GetStartedWithData 项目的  <ph id=\"ph3\">`libs`</ph> 文件夹中。"
    },
    {
      "pos": [
        174,
        235
      ],
      "content": "在 Eclipse 中的“程序包资源管理器”中，右键单击 <ph id=\"ph1\">`libs`</ph> 文件夹，单击“刷新”，复制的 jar 文件将会出现"
    },
    {
      "content": "这样可将移动服务 SDK 引用添加到工作区。",
      "pos": [
        241,
        263
      ]
    },
    {
      "content": "打开 AndroidManifest.xml 文件并添加以下代码行，以便应用能够访问 Azure 中的移动服务。",
      "pos": [
        268,
        324
      ]
    },
    {
      "content": "在“程序包资源管理器”中，打开位于 com.example.getstartedwithdata 程序包中的 TodoActivity.java 文件，并且取消注释以下代码行：",
      "pos": [
        401,
        489
      ]
    },
    {
      "content": "取消注释以下行：",
      "pos": [
        1343,
        1351
      ]
    },
    {
      "pos": [
        1424,
        1511
      ],
      "content": "我们将删除应用当前使用的内存中列表，因此可将其替换为移动服务。在 <bpt id=\"p1\">**</bpt>ToDoActivity<ept id=\"p1\">**</ept> 类中，注释掉以下定义现有 <bpt id=\"p2\">**</bpt>toDoItemList<ept id=\"p2\">**</ept> 列表的代码行。"
    },
    {
      "pos": [
        1589,
        1661
      ],
      "content": "保存文件，项目将指示生成错误。搜索剩余三个使用  <ph id=\"ph1\">`toDoItemList`</ph> 变量的位置，并取消注释所指示的部分。这样可以完全删除内存中列表。"
    },
    {
      "content": "现在，我们将添加移动服务。取消注释以下代码行：",
      "pos": [
        1667,
        1690
      ]
    },
    {
      "pos": [
        1807,
        1887
      ],
      "content": "找到文件底部的 <bpt id=\"p1\">*</bpt>ProgressFilter<ept id=\"p1\">*</ept> 类，并取消其注释。当 <bpt id=\"p2\">*</bpt>MobileServiceClient<ept id=\"p2\">*</ept> 运行网络操作时，此类显示“正在加载”指示器。"
    },
    {
      "content": "在管理门户中单击“移动服务”，然后单击你刚刚创建的移动服务。",
      "pos": [
        1894,
        1924
      ]
    },
    {
      "content": "单击“仪表板”选项卡并记下“站点 URL”中的值，然后单击“管理密钥”并记下“应用程序密钥”中的值。",
      "pos": [
        1930,
        1980
      ]
    },
    {
      "content": "从应用代码访问移动服务时，您需要使用这些值。",
      "pos": [
        2058,
        2080
      ]
    },
    {
      "pos": [
        2086,
        2145
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>onCreate<ept id=\"p1\">**</ept> 方法中，取消注释以下定义 <bpt id=\"p2\">**</bpt>MobileServiceClient<ept id=\"p2\">**</ept> 变量的代码行："
    },
    {
      "pos": [
        2752,
        2840
      ],
      "content": "这将创建用于访问移动服务的  <bpt id=\"p1\">*</bpt>MobileServiceClient<ept id=\"p1\">*</ept> 的新实例。它还将创建用于代理移动服务中的数据存储的  <bpt id=\"p2\">*</bpt>MobileServiceTable<ept id=\"p2\">*</ept> 实例。"
    },
    {
      "pos": [
        2846,
        2912
      ],
      "content": "在上面的代码中，请将  <ph id=\"ph1\">`MobileServiceUrl`</ph> 和  <ph id=\"ph2\">`AppKey`</ph> 依次替换为移动服务的 URL 和应用程序密钥。"
    },
    {
      "pos": [
        2920,
        2946
      ],
      "content": "取消注释 <bpt id=\"p1\">**</bpt>checkItem<ept id=\"p1\">**</ept> 方法的以下行："
    },
    {
      "content": "这会将项更新发送到移动服务，并从适配器中删除已选中的项。",
      "pos": [
        3679,
        3707
      ]
    },
    {
      "pos": [
        3717,
        3741
      ],
      "content": "取消注释 <bpt id=\"p1\">**</bpt>addItem<ept id=\"p1\">**</ept> 方法的以下行："
    },
    {
      "content": "此代码将创建一个新项目并将其插入到远程移动服务的表中。",
      "pos": [
        4463,
        4490
      ]
    },
    {
      "pos": [
        4496,
        4534
      ],
      "content": "取消注释 <bpt id=\"p1\">**</bpt>refreshItemsFromTable<ept id=\"p1\">**</ept> 方法的以下行："
    },
    {
      "content": "这将查询移动服务，并返回未标记为“完成”的所有项。这些项目将添加到用于绑定的适配器。",
      "pos": [
        5460,
        5502
      ]
    }
  ],
  "content": "将移动服务准备就绪后，您可以更新应用，以便在移动服务而不是本地集合中存储项。 \n\n1. 如果您还没有[移动服务 Android SDK]，请立即下载并展开压缩的文件。\n\n2. 将  `.jar` 文件从 SDK 的  `mobileservices` 文件夹复制到 GetStartedWithData 项目的  `libs` 文件夹中。\n\n3. 在 Eclipse 中的“程序包资源管理器”中，右键单击 `libs` 文件夹，单击“刷新”，复制的 jar 文件将会出现\n\n    这样可将移动服务 SDK 引用添加到工作区。\n\n4. 打开 AndroidManifest.xml 文件并添加以下代码行，以便应用能够访问 Azure 中的移动服务。\n\n        <uses-permission android:name=\"android.permission.INTERNET\" />\n\n5. 在“程序包资源管理器”中，打开位于 com.example.getstartedwithdata 程序包中的 TodoActivity.java 文件，并且取消注释以下代码行：\n\n        import java.net.MalformedURLException;\n        import android.os.AsyncTask;\n        import com.google.common.util.concurrent.FutureCallback;\n        import com.google.common.util.concurrent.Futures;\n        import com.google.common.util.concurrent.ListenableFuture;\n        import com.microsoft.windowsazure.mobileservices.MobileServiceClient;\n        import com.microsoft.windowsazure.mobileservices.MobileServiceList;\n        import com.microsoft.windowsazure.mobileservices.http.NextServiceFilterCallback;\n        import com.microsoft.windowsazure.mobileservices.http.ServiceFilter;\n        import com.microsoft.windowsazure.mobileservices.http.ServiceFilterRequest;\n        import com.microsoft.windowsazure.mobileservices.http.ServiceFilterResponse;\n        import com.microsoft.windowsazure.mobileservices.table.MobileServiceTable;\n\n \n6. 取消注释以下行：\n\n        import java.util.ArrayList;\n        import java.util.List;\n\n7. 我们将删除应用当前使用的内存中列表，因此可将其替换为移动服务。在 **ToDoActivity** 类中，注释掉以下定义现有 **toDoItemList** 列表的代码行。\n\n        public List<ToDoItem> toDoItemList = new ArrayList<ToDoItem>();\n\n8. 保存文件，项目将指示生成错误。搜索剩余三个使用  `toDoItemList` 变量的位置，并取消注释所指示的部分。这样可以完全删除内存中列表。 \n\n9. 现在，我们将添加移动服务。取消注释以下代码行：\n\n        private MobileServiceClient mClient;\n        private private MobileServiceTable<ToDoItem> mToDoTable;\n\n10. 找到文件底部的 *ProgressFilter* 类，并取消其注释。当 *MobileServiceClient* 运行网络操作时，此类显示“正在加载”指示器。\n\n\n11. 在管理门户中单击“移动服务”，然后单击你刚刚创建的移动服务。\n\n12. 单击“仪表板”选项卡并记下“站点 URL”中的值，然后单击“管理密钥”并记下“应用程序密钥”中的值。\n\n    ![](./media/download-android-sample-code/mobile-dashboard-tab.png)\n\n    从应用代码访问移动服务时，您需要使用这些值。\n\n13. 在 **onCreate** 方法中，取消注释以下定义 **MobileServiceClient** 变量的代码行：\n\n        try {\n        // Create the Mobile Service Client instance, using the provided\n        // Mobile Service URL and key\n            mClient = new MobileServiceClient(\n                    \"MobileServiceUrl\",\n                    \"AppKey\", \n                    this).withFilter(new ProgressFilter());\n\n            // Get the Mobile Service Table instance to use\n            mToDoTable = mClient.getTable(ToDoItem.class);\n        } catch (MalformedURLException e) {\n            createAndShowDialog(new Exception(\"There was an error creating the Mobile Service. Verify the URL\"), \"Error\");\n        }\n\n    这将创建用于访问移动服务的  *MobileServiceClient* 的新实例。它还将创建用于代理移动服务中的数据存储的  *MobileServiceTable* 实例。\n\n14. 在上面的代码中，请将  `MobileServiceUrl` 和  `AppKey` 依次替换为移动服务的 URL 和应用程序密钥。\n\n\n\n15. 取消注释 **checkItem** 方法的以下行：\n\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.update(item).get();\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            if (item.isComplete()) {\n                                mAdapter.remove(item);\n                            }\n                            refreshItemsFromTable();\n                        }\n                    });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n\n    这会将项更新发送到移动服务，并从适配器中删除已选中的项。\n    \n16. 取消注释 **addItem** 方法的以下行：\n    \n        // Insert the new item\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.insert(item).get();\n                    if (!item.isComplete()) {\n                        runOnUiThread(new Runnable() {\n                            public void run() {\n                                mAdapter.add(item);\n                            }\n                        });\n                    }\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n        \n\n    此代码将创建一个新项目并将其插入到远程移动服务的表中。\n\n17. 取消注释 **refreshItemsFromTable** 方法的以下行：\n\n        // Get the items that weren't marked as completed and add them in the adapter\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final MobileServiceList<ToDoItem> result = mToDoTable.where().field(\"complete\").eq(false).execute().get();\n                    runOnUiThread(new Runnable() {\n                        @Override\n                        public void run() {\n                            mAdapter.clear();\n\n                            for (ToDoItem item : result) {\n                                mAdapter.add(item);\n                            }\n                        }\n                    });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n\n    这将查询移动服务，并返回未标记为“完成”的所有项。这些项目将添加到用于绑定的适配器。\n        \n\n<!-- URLs. -->\n[移动服务 Android SDK]: https://zumo.blob.core.windows.net/sdk/azuresdk-android-2.0.2-beta2.zip\n\n<!---HONumber=71-->"
}