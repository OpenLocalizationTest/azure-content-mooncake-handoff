{
  "nodes": [
    {
      "content": "开始使用队列存储和 Visual Studio 连接服务 (ASP.NET 5) | Azure",
      "pos": [
        27,
        75
      ]
    },
    {
      "content": "如何开始在 Visual Studio 中的 ASP.NET 5 项目中使用 Azure 队列存储",
      "pos": [
        94,
        143
      ]
    },
    {
      "content": "开始使用队列存储和 Visual Studio 连接服务 (ASP.NET 5)",
      "pos": [
        344,
        384
      ]
    },
    {
      "content": "概述",
      "pos": [
        388,
        390
      ]
    },
    {
      "content": "本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure 表存储。执行“添加连接服务”操作会安装相应的 NuGet 程序包，以访问项目中的 Azure 存储，并将存储帐户的连接字符串添加到项目配置文件中。",
      "pos": [
        392,
        566
      ]
    },
    {
      "content": "Azure 队列存储是一项可存储大量消息的服务，用户可以通过经验证的呼叫，使用 HTTP 或 HTTPS 从世界任何地方访问这些消息。一条队列消息的大小最多可为 64 千字节 (KB)，一个队列中可以包含数百万条消息，直至达到存储帐户的总容量限值。",
      "pos": [
        568,
        692
      ]
    },
    {
      "pos": [
        694,
        868
      ],
      "content": "若要开始，首先需要在存储帐户中创建 Azure 队列。我们将向你展示如何使用代码创建队列。此外，我们将展示如何执行基本的队列操作，例如添加、修改、读取和删除队列消息。示例是使用 C# 代码编写的，并使用了 .NET 的 Azure 存储客户端库。有关 ASP.NET 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>ASP.NET<ept id=\"p1\">](http://www.asp.net)</ept>。"
    },
    {
      "pos": [
        870,
        1025
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>在 ASP.NET 5 中执行调用 Azure 存储的一些 API 是异步的。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>使用 Async 和 Await 进行异步编程<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>。下面的代码假定正在使用异步编程方法。"
    },
    {
      "pos": [
        1029,
        1126
      ],
      "content": "有关以编程方式操作队列的详细信息，请参阅<bpt id=\"p1\">[</bpt>如何通过 .NET 使用队列存储<ept id=\"p1\">](/documentation/articles/storage-dotnet-how-to-use-queues)</ept>。"
    },
    {
      "pos": [
        1129,
        1194
      ],
      "content": "有关 Azure 存储空间的常规信息，请参阅<bpt id=\"p1\">[</bpt>存储空间文档<ept id=\"p1\">](/documentation/services/storage/)</ept>。"
    },
    {
      "pos": [
        1197,
        1267
      ],
      "content": "有关 Azure 云服务的常规信息，请参阅<bpt id=\"p1\">[</bpt>云服务文档<ept id=\"p1\">](/documentation/services/cloud-services/)</ept>。"
    },
    {
      "pos": [
        1270,
        1330
      ],
      "content": "有关对 ASP.NET 应用程序进行编程的详细信息，请参阅 <bpt id=\"p1\">[</bpt>ASP.NET<ept id=\"p1\">](http://www.asp.net)</ept>。"
    },
    {
      "content": "使用代码访问队列",
      "pos": [
        1338,
        1346
      ]
    },
    {
      "content": "若要访问 ASP.NET 5 项目中的队列，需要将下列事项包含在访问 Azure 队列存储的任何 C# 源文件中。",
      "pos": [
        1348,
        1405
      ]
    },
    {
      "pos": [
        1410,
        1446
      ],
      "content": "请确保 C# 文件顶部的命名空间声明包括这些 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句。"
    },
    {
      "pos": [
        1700,
        1776
      ],
      "content": "获取表示存储帐户信息的 <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。"
    },
    {
      "pos": [
        1960,
        2001
      ],
      "content": "获取 <bpt id=\"p1\">**</bpt>CloudQueueClient<ept id=\"p1\">**</ept> 对象，以引用存储帐户中的队列对象。"
    },
    {
      "pos": [
        2123,
        2152
      ],
      "content": "获取 <bpt id=\"p1\">**</bpt>CloudQueue<ept id=\"p1\">**</ept> 对象，以引用特定队列。"
    },
    {
      "pos": [
        2296,
        2325
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>在下列示例中，在代码的前面使用上述全部代码。"
    },
    {
      "content": "使用代码创建队列",
      "pos": [
        2330,
        2338
      ]
    },
    {
      "pos": [
        2340,
        2395
      ],
      "content": "若要在代码中创建 Azure 队列，只需添加对 <bpt id=\"p1\">**</bpt>CreateIfNotExistsAsync<ept id=\"p1\">**</ept> 的调用。"
    },
    {
      "content": "向队列添加消息",
      "pos": [
        2500,
        2507
      ]
    },
    {
      "pos": [
        2509,
        2581
      ],
      "content": "若要在现有队列中插入消息，请创建新的 <bpt id=\"p1\">**</bpt>CloudQueueMessage<ept id=\"p1\">**</ept> 对象，然后调用 <bpt id=\"p2\">**</bpt>AddMessageAsync<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "pos": [
        2583,
        2631
      ],
      "content": "可从字符串（UTF-8 格式）或字节数组创建 <bpt id=\"p1\">**</bpt>CloudQueueMessage<ept id=\"p1\">**</ept> 对象。"
    },
    {
      "content": "以下示例插入了消息“Hello, World”。",
      "pos": [
        2633,
        2657
      ]
    },
    {
      "content": "读取队列中的消息",
      "pos": [
        2942,
        2950
      ]
    },
    {
      "pos": [
        2952,
        3005
      ],
      "content": "通过调用 <bpt id=\"p1\">**</bpt>PeekMessageAsync<ept id=\"p1\">**</ept> 方法，可以查看队列前面的消息，而不必从队列中将其删除。"
    },
    {
      "content": "读取和删除队列中的消息",
      "pos": [
        3228,
        3239
      ]
    },
    {
      "pos": [
        3241,
        3421
      ],
      "content": "你的代码分两步从队列中删除消息（取消对消息的排队）。1.调用 <bpt id=\"p1\">**</bpt>GetMessageAsync<ept id=\"p1\">**</ept>，以获得队列中的下一条消息。从 <bpt id=\"p2\">**</bpt>GetMessageAsync<ept id=\"p2\">**</ept> 返回的消息将变为对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。2.若要完成从队列中删除消息的操作，请调用 <bpt id=\"p3\">**</bpt>DeleteMessageAsync<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        3423,
        3520
      ],
      "content": "此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。以下代码将在处理消息后立即调用 <bpt id=\"p1\">**</bpt>DeleteMessageAsync<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "使用其他方法取消对消息的排队",
      "pos": [
        3906,
        3920
      ]
    },
    {
      "pos": [
        3922,
        4181
      ],
      "content": "你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id=\"p1\">**</bpt>GetMessages<ept id=\"p1\">**</ept> 方法在一次调用中获取 20 条消息。然后，它使用 <bpt id=\"p2\">**</bpt>foreach<ept id=\"p2\">**</ept> 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，5 分钟超时时间对于所有消息都是同时开始的，因此在调用 <bpt id=\"p3\">**</bpt>GetMessages<ept id=\"p3\">**</ept> 5 分钟后，尚未删除的任何消息都将再次变得可见。"
    },
    {
      "content": "获取队列长度",
      "pos": [
        4542,
        4548
      ]
    },
    {
      "pos": [
        4550,
        4685
      ],
      "content": "你可以获取队列中消息的估计数。使用 <bpt id=\"p1\">**</bpt>FetchAttributes<ept id=\"p1\">**</ept> 方法可请求队列服务检索队列属性，包括消息计数。<bpt id=\"p2\">**</bpt>ApproximateMethodCount<ept id=\"p2\">**</ept> 属性返回 <bpt id=\"p3\">**</bpt>FetchAttributes<ept id=\"p3\">**</ept> 方法检索到的最后一个值，而不会调用队列服务。"
    },
    {
      "content": "共同使用 Async Await 模式和公用队列 API",
      "pos": [
        5109,
        5137
      ]
    },
    {
      "pos": [
        5139,
        5424
      ],
      "content": "此示例演示如何共同使用 Async Await 模式和公用队列 API。示例代码会调用每个给定方法的异步版本，这可以通过每个方法的 Async 后修补程序体现。使用异步方法时，async-await 模式将暂停本地执行，直到调用完成。此行为允许当前的线程执行其他工作，这有助于避免性能瓶颈并提高应用程序的整体响应能力。有关在.NET 中使用 Async-Await 模式的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Async 和 Await（C# 和 Visual Basic）<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)</ept>"
    },
    {
      "content": "删除队列",
      "pos": [
        6140,
        6144
      ]
    },
    {
      "pos": [
        6146,
        6185
      ],
      "content": "若要删除队列及其包含的所有消息，请对队列对象调用 <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "content": "后续步骤",
      "pos": [
        6356,
        6360
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"开始使用队列存储和 Visual Studio 连接服务 (ASP.NET 5) | Azure\"\n    description=\"如何开始在 Visual Studio 中的 ASP.NET 5 项目中使用 Azure 队列存储\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"TomArcher\"\n    manager=\"douge\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 开始使用队列存储和 Visual Studio 连接服务 (ASP.NET 5)\n\n##概述\n\n本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 5 项目中已创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure 表存储。执行“添加连接服务”操作会安装相应的 NuGet 程序包，以访问项目中的 Azure 存储，并将存储帐户的连接字符串添加到项目配置文件中。\n\nAzure 队列存储是一项可存储大量消息的服务，用户可以通过经验证的呼叫，使用 HTTP 或 HTTPS 从世界任何地方访问这些消息。一条队列消息的大小最多可为 64 千字节 (KB)，一个队列中可以包含数百万条消息，直至达到存储帐户的总容量限值。\n\n若要开始，首先需要在存储帐户中创建 Azure 队列。我们将向你展示如何使用代码创建队列。此外，我们将展示如何执行基本的队列操作，例如添加、修改、读取和删除队列消息。示例是使用 C# 代码编写的，并使用了 .NET 的 Azure 存储客户端库。有关 ASP.NET 的详细信息，请参阅 [ASP.NET](http://www.asp.net)。\n\n**注意：**在 ASP.NET 5 中执行调用 Azure 存储的一些 API 是异步的。有关详细信息，请参阅[使用 Async 和 Await 进行异步编程](http://msdn.microsoft.com/zh-cn/library/hh191443.aspx)。下面的代码假定正在使用异步编程方法。\n\n- 有关以编程方式操作队列的详细信息，请参阅[如何通过 .NET 使用队列存储](/documentation/articles/storage-dotnet-how-to-use-queues)。\n- 有关 Azure 存储空间的常规信息，请参阅[存储空间文档](/documentation/services/storage/)。\n- 有关 Azure 云服务的常规信息，请参阅[云服务文档](/documentation/services/cloud-services/)。\n- 有关对 ASP.NET 应用程序进行编程的详细信息，请参阅 [ASP.NET](http://www.asp.net)。\n\n\n\n\n\n##使用代码访问队列\n\n若要访问 ASP.NET 5 项目中的队列，需要将下列事项包含在访问 Azure 队列存储的任何 C# 源文件中。\n\n1. 请确保 C# 文件顶部的命名空间声明包括这些 **using** 语句。\n\n        using Microsoft.Framework.Configuration;\n        using Microsoft.WindowsAzure.Storage;\n        using Microsoft.WindowsAzure.Storage.Queue;\n        using System.Threading.Tasks;\n        using LogLevel = Microsoft.Framework.Logging.LogLevel;\n\n2. 获取表示存储帐户信息的 **CloudStorageAccount** 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。\n\n         CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n           CloudConfigurationManager.GetSetting(\"<storage-account-name>_AzureStorageConnectionString\"));\n\n3. 获取 **CloudQueueClient** 对象，以引用存储帐户中的队列对象。\n\n        // Create the table client.\n        CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n\n4. 获取 **CloudQueue** 对象，以引用特定队列。\n\n        // Get a reference to a table named \"messageQueue\"\n        CloudQueue messageQueue = queueClient.GetQueueReference(\"messageQueue\");\n\n\n**注意：**在下列示例中，在代码的前面使用上述全部代码。\n\n###使用代码创建队列\n\n若要在代码中创建 Azure 队列，只需添加对 **CreateIfNotExistsAsync** 的调用。\n\n    // Create the CloudTable if it does not exist.\n    await messageQueue.CreateIfNotExistsAsync();\n\n##向队列添加消息\n\n若要在现有队列中插入消息，请创建新的 **CloudQueueMessage** 对象，然后调用 **AddMessageAsync** 方法。\n\n可从字符串（UTF-8 格式）或字节数组创建 **CloudQueueMessage** 对象。\n\n以下示例插入了消息“Hello, World”。\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Create a message and add it to the queue.\n    CloudQueueMessage message = new CloudQueueMessage(\"Hello, World\");\n    await messageQueue.AddMessageAsync(message);\n\n##读取队列中的消息\n\n通过调用 **PeekMessageAsync** 方法，可以查看队列前面的消息，而不必从队列中将其删除。\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\".\n\n    // Display the message.\n    CloudQueueMessage peekedMessage = await messageQueue.PeekMessageAsync();\n\n\n##读取和删除队列中的消息\n\n你的代码分两步从队列中删除消息（取消对消息的排队）。1.调用 **GetMessageAsync**，以获得队列中的下一条消息。从 **GetMessageAsync** 返回的消息将变为对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。2.若要完成从队列中删除消息的操作，请调用 **DeleteMessageAsync**。\n\n此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。以下代码将在处理消息后立即调用 **DeleteMessageAsync**。\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\".\n\n    // Get the next message in the queue.\n    CloudQueueMessage retrievedMessage = await messageQueue.GetMessageAsync();\n\n    // Process the message in less than 30 seconds.\n\n    // Then delete the message.\n    await messageQueue.DeleteMessageAsync(retrievedMessage);\n\n## 使用其他方法取消对消息的排队\n\n你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 **GetMessages** 方法在一次调用中获取 20 条消息。然后，它使用 **foreach** 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。请注意，5 分钟超时时间对于所有消息都是同时开始的，因此在调用 **GetMessages** 5 分钟后，尚未删除的任何消息都将再次变得可见。\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\".\n\n    foreach (CloudQueueMessage message in messageQueue.GetMessages(20, TimeSpan.FromMinutes(5)))\n    {\n        // Process all messages in less than 5 minutes, deleting each message after processing.\n        queue.DeleteMessage(message);\n    }\n\n## 获取队列长度\n\n你可以获取队列中消息的估计数。使用 **FetchAttributes** 方法可请求队列服务检索队列属性，包括消息计数。**ApproximateMethodCount** 属性返回 **FetchAttributes** 方法检索到的最后一个值，而不会调用队列服务。\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\"\n\n    // Fetch the queue attributes.\n    messageQueue.FetchAttributes();\n\n    // Retrieve the cached approximate message count.\n    int? cachedMessageCount = messageQueue.ApproximateMessageCount;\n\n    // Display number of messages.\n    Console.WriteLine(\"Number of messages in queue: \" + cachedMessageCount);\n\n## 共同使用 Async Await 模式和公用队列 API\n\n此示例演示如何共同使用 Async Await 模式和公用队列 API。示例代码会调用每个给定方法的异步版本，这可以通过每个方法的 Async 后修补程序体现。使用异步方法时，async-await 模式将暂停本地执行，直到调用完成。此行为允许当前的线程执行其他工作，这有助于避免性能瓶颈并提高应用程序的整体响应能力。有关在.NET 中使用 Async-Await 模式的详细信息，请参阅 [Async 和 Await（C# 和 Visual Basic）](https://msdn.microsoft.com/zh-cn/library/hh191443.aspx)\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\".\n\n    // Create a message to put in the queue.\n    CloudQueueMessage cloudQueueMessage = new CloudQueueMessage(\"My message\");\n\n    // Async enqueue the message.\n    await messageQueue.AddMessageAsync(cloudQueueMessage);\n    Console.WriteLine(\"Message added\");\n\n    // Async dequeue the message.\n    CloudQueueMessage retrievedMessage = await messageQueue.GetMessageAsync();\n    Console.WriteLine(\"Retrieved message with content '{0}'\", retrievedMessage.AsString);\n\n    // Async delete the message.\n    await messageQueue.DeleteMessageAsync(retrievedMessage);\n    Console.WriteLine(\"Deleted message\");\n## 删除队列\n\n若要删除队列及其包含的所有消息，请对队列对象调用 **Delete** 方法。\n\n    // Get a reference to the CloudQueue object named 'messageQueue' as described in \"Access a queue in code\".\n\n    // Delete the queue.\n    messageQueue.Delete();\n\n\n\n##后续步骤\n\n[AZURE.INCLUDE [vs-storage-dotnet-queues-next-steps](../includes/vs-storage-dotnet-queues-next-steps.md)]\n\n<!---HONumber=Mooncake_0104_2016-->"
}