{
  "nodes": [
    {
      "content": "如何在 Azure 虚拟机上的 .NET 中运行需要进行大量计算的任务",
      "pos": [
        27,
        62
      ]
    },
    {
      "content": "了解如何在 Azure 虚拟机上部署和运行需要进行大量计算的 .NET 应用以及如何使用 Azure Service Bus 队列远程监视进度。",
      "pos": [
        81,
        153
      ]
    },
    {
      "content": "如何在 Azure 虚拟机上的 .NET 中运行需要进行大量计算的任务",
      "pos": [
        393,
        428
      ]
    },
    {
      "content": "借助 Azure，您可以使用虚拟机来处理需要进行大量计算的任务。例如，虚拟机可以处理任务并将结果传送给客户端计算机或移动应用程序。完成本教程后，你将了解如何创建虚拟机来运行需要进行大量计算的可由另一个 .NET 应用程序监视的 .NET 应用程序。",
      "pos": [
        430,
        554
      ]
    },
    {
      "content": "本教程假定您了解如何创建 .NET 控制台应用程序，而不了解 Azure。",
      "pos": [
        556,
        593
      ]
    },
    {
      "content": "你将学习以下内容：",
      "pos": [
        595,
        604
      ]
    },
    {
      "content": "如何创建虚拟机。",
      "pos": [
        608,
        616
      ]
    },
    {
      "content": "如何远程登录到虚拟机。",
      "pos": [
        619,
        630
      ]
    },
    {
      "content": "如何创建服务总线命名空间。",
      "pos": [
        633,
        646
      ]
    },
    {
      "content": "如何创建 .NET 应用程序来执行需要进行大量计算的任务。",
      "pos": [
        649,
        678
      ]
    },
    {
      "content": "如何创建 .NET 应用程序来监视需要进行大量计算的任务的进度。",
      "pos": [
        681,
        713
      ]
    },
    {
      "content": "如何运行 .NET 应用程序。",
      "pos": [
        716,
        731
      ]
    },
    {
      "content": "如何停止 .NET 应用程序。",
      "pos": [
        734,
        749
      ]
    },
    {
      "content": "本教程会将旅行商问题用于需要进行大量计算的任务。以下是运行需要进行大量计算的任务的 .NET 应用程序示例。",
      "pos": [
        751,
        805
      ]
    },
    {
      "content": "旅行商问题解算器",
      "pos": [
        809,
        817
      ]
    },
    {
      "content": "以下是监视需要进行大量计算的任务的 .NET 应用程序示例。",
      "pos": [
        835,
        865
      ]
    },
    {
      "content": "旅行商问题客户端",
      "pos": [
        869,
        877
      ]
    },
    {
      "content": "创建虚拟机",
      "pos": [
        989,
        994
      ]
    },
    {
      "pos": [
        999,
        1046
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "单击“新建”。",
      "pos": [
        1050,
        1057
      ]
    },
    {
      "content": "单击“虚拟机”。",
      "pos": [
        1061,
        1069
      ]
    },
    {
      "content": "单击“快速创建”。",
      "pos": [
        1073,
        1082
      ]
    },
    {
      "content": "在“创建虚拟机”屏幕中，为“DNS 名称”输入一个值。",
      "pos": [
        1086,
        1113
      ]
    },
    {
      "content": "从“映像”下拉列表中，选择一个映像，如“Windows Server 2012 R2”。",
      "pos": [
        1117,
        1161
      ]
    },
    {
      "content": "在“用户名”字段中输入管理员的名称。记住你下次要输入的此名称和密码，远程登录虚拟机时你将使用它们。",
      "pos": [
        1165,
        1214
      ]
    },
    {
      "content": "在“新密码”字段中输入密码，然后在“确认”字段中重新输入一次。",
      "pos": [
        1218,
        1249
      ]
    },
    {
      "content": "从“位置”下拉列表中，选择虚拟机的数据中心位置。",
      "pos": [
        1253,
        1277
      ]
    },
    {
      "content": "单击“创建虚拟机”。你可以在 Azure 门户的“虚拟机”部分对状态进行监视。当状态显示为“活动”时，你就可以登录该虚拟机。",
      "pos": [
        1282,
        1344
      ]
    },
    {
      "content": "远程登录到虚拟机",
      "pos": [
        1349,
        1357
      ]
    },
    {
      "pos": [
        1362,
        1404
      ],
      "content": "登录到<bpt id=\"p1\">[</bpt>管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "单击“虚拟机”。",
      "pos": [
        1408,
        1416
      ]
    },
    {
      "content": "单击您要登录的虚拟机名称。",
      "pos": [
        1420,
        1433
      ]
    },
    {
      "content": "单击“连接”。",
      "pos": [
        1437,
        1444
      ]
    },
    {
      "content": "根据需要响应提示以连接到虚拟机。提示需要管理员名称和密码时，请使用您创建虚拟机时提供的值。",
      "pos": [
        1448,
        1493
      ]
    },
    {
      "content": "如何创建服务总线命名空间",
      "pos": [
        1498,
        1510
      ]
    },
    {
      "content": "若要开始在 Azure 中使用服务总线队列，必须先创建一个服务命名空间。服务命名空间提供了用于对应用程序中的服务总线资源进行寻址的范围容器。",
      "pos": [
        1512,
        1582
      ]
    },
    {
      "content": "创建服务命名空间：",
      "pos": [
        1584,
        1593
      ]
    },
    {
      "pos": [
        1599,
        1646
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "在 Azure 门户的左侧导航窗格中，单击“服务总线”。",
      "pos": [
        1651,
        1679
      ]
    },
    {
      "content": "在 Azure 门户的下方窗格中，单击“创建”。",
      "pos": [
        1684,
        1708
      ]
    },
    {
      "content": "新建 Service Bus",
      "pos": [
        1716,
        1730
      ]
    },
    {
      "content": "在“创建命名空间”对话框中，输入命名空间名称。系统会立即检查该名称是否可用，因为该名称必须是唯一名称。",
      "pos": [
        1756,
        1807
      ]
    },
    {
      "content": "“创建命名空间”对话框",
      "pos": [
        1815,
        1826
      ]
    },
    {
      "content": "在确保命名空间名称可用后，选择应托管您的命名空间的区域（确保使用在其中托管虚拟机的同一区域）。",
      "pos": [
        1857,
        1904
      ]
    },
    {
      "pos": [
        1912,
        1963
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>选取用于或要用于你的虚拟机的<bpt id=\"p1\">**</bpt>同一区域<ept id=\"p1\">**</ept>。这将为您提供最佳性能。"
    },
    {
      "content": "如果您登录使用的帐户拥有多个 Azure 订阅，请选择要用于命名空间的订阅。（如果你登录使用的帐户只有一个订阅，则你不会看到包含订阅的下拉列表。）",
      "pos": [
        1968,
        2041
      ]
    },
    {
      "content": "单击复选标记。系统现已创建您的服务命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户配置资源。",
      "pos": [
        2045,
        2099
      ]
    },
    {
      "content": "单击创建屏幕快照",
      "pos": [
        2107,
        2115
      ]
    },
    {
      "content": "你创建的命名空间随后将显示在 Azure 门户中，然后要花费一段时间来激活。请等到状态变为“活动”后再继续下一步。",
      "pos": [
        2132,
        2189
      ]
    },
    {
      "content": "获取命名空间的默认管理凭据",
      "pos": [
        2194,
        2207
      ]
    },
    {
      "content": "若要在新命名空间上执行管理操作（如创建队列），则需要获取该命名空间的管理凭据。",
      "pos": [
        2209,
        2248
      ]
    },
    {
      "content": "在左侧导航窗格中，单击“Service Bus”以显示可用命名空间的列表。",
      "pos": [
        2254,
        2291
      ]
    },
    {
      "content": "“可用命名空间”屏幕快照",
      "pos": [
        2293,
        2305
      ]
    },
    {
      "content": "从列表中选择刚刚创建的命名空间。",
      "pos": [
        2333,
        2349
      ]
    },
    {
      "content": "“命名空间列表”屏幕快照",
      "pos": [
        2351,
        2363
      ]
    },
    {
      "content": "单击“连接信息”。",
      "pos": [
        2384,
        2393
      ]
    },
    {
      "content": "访问键按钮",
      "pos": [
        2395,
        2400
      ]
    },
    {
      "content": "在对话框中，找到“连接字符串”条目。记下该值，因为你将在本教程的后面使用此信息来对命名空间执行操作。",
      "pos": [
        2425,
        2475
      ]
    },
    {
      "content": "如何创建 .NET 应用程序来执行需要进行大量计算的任务",
      "pos": [
        2480,
        2508
      ]
    },
    {
      "pos": [
        2513,
        2573
      ],
      "content": "在你的开发计算机（不必是你创建的虚拟机）上，下载 <bpt id=\"p1\">[</bpt>Azure SDK for .NET<ept id=\"p1\">](/develop/net)</ept>。"
    },
    {
      "pos": [
        2577,
        2771
      ],
      "content": "使用名为 TSPSolver 的项目创建 .NET 控制台应用程序。确保为 .<bpt id=\"p1\">**</bpt>NET Framework 4<ept id=\"p1\">**</ept> 或更高版本（而不是 <bpt id=\"p2\">**</bpt>.NET Framework 4 Client Profile<ept id=\"p2\">**</ept>）设置了目标框架。在你创建项目之后，即可通过以下方式设置目标框架：在 Visual Studio 菜单上，依次单击“项目”、“属性”、“应用程序”选项卡，然后为“目标框架”设置值。"
    },
    {
      "content": "添加 Microsoft ServiceBus 库。在 Visual Studio 解决方案资源管理器中，右键单击“TSPSolver”，单击“添加引用”，单击“浏览”选项卡，浏览至 Azure .NET SDK（例如，C:\\\\Program Files\\\\Microsoft SDKs\\\\Azure.NET SDK\\\\v2.5\\\\ToolsRef），然后将“Microsoft.ServiceBus.dll”选为引用。",
      "pos": [
        2775,
        2985
      ]
    },
    {
      "content": "添加 System Runtime Serialization 库。在 Visual Studio 解决方案资源管理器中，右键单击“TSPSolver”，单击“添加引用”，单击“.NET”选项卡，然后将 System.Runtime.Serialization 选为引用。",
      "pos": [
        2989,
        3125
      ]
    },
    {
      "content": "将本节末尾的示例代码用于 Program.cs 文件的内容。",
      "pos": [
        3129,
        3159
      ]
    },
    {
      "pos": [
        3163,
        3224
      ],
      "content": "修改 <bpt id=\"p1\">**</bpt>your\\_connection\\_string<ept id=\"p1\">**</ept> 占位符以使用 Service Bus <bpt id=\"p2\">**</bpt>连接字符串<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "编译应用程序。这将在项目的 bin 文件夹（bin\\\\release 或者 bin\\\\debug，具体取决于您是针对发布版本还是调试版本）中创建 TSPSolver.exe。稍后您会将此可执行文件和 Microsoft.ServiceBus.dll 复制到您的虚拟机。",
      "pos": [
        3228,
        3362
      ]
    },
    {
      "content": "如何创建 .NET 应用程序来监视需要进行大量计算的任务的进度",
      "pos": [
        12156,
        12187
      ]
    },
    {
      "pos": [
        12192,
        12397
      ],
      "content": "在开发计算机上，创建一个将 TSPClient 用作项目名称的 .NET 控制台应用程序。确保为 .<bpt id=\"p1\">**</bpt>NET Framework 4<ept id=\"p1\">**</ept> 或更高版本（而不是 <bpt id=\"p2\">**</bpt>.NET Framework 4 Client Profile<ept id=\"p2\">**</ept>）设置了目标框架。在你创建项目之后，即可通过以下方式设置目标框架：在 Visual Studio 菜单上，依次单击“项目”、“属性”、“应用程序”选项卡，然后为“目标框架”设置值。"
    },
    {
      "content": "加入 Microsoft ServiceBus 库。在 Visual Studio 解决方案资源管理器中，右键单击“TSPClient”，单击“添加引用”，单击“浏览”选项卡，浏览至 Azure .NET SDK（例如，C:\\\\Program Files\\\\Microsoft SDKs\\\\Azure.NET SDK\\\\v2.5\\\\ToolsRef），然后将“Microsoft.ServiceBus.dll”选为引用。",
      "pos": [
        12401,
        12611
      ]
    },
    {
      "content": "添加 System Runtime Serialization 库。在 Visual Studio 解决方案资源管理器中，右键单击“TSPClient”、单击“添加引用”、单击“.NET”选项卡，然后将 System.Runtime.Serialization 选为引用。",
      "pos": [
        12615,
        12751
      ]
    },
    {
      "content": "将本节末尾的示例代码用于 Program.cs 文件的内容。",
      "pos": [
        12755,
        12785
      ]
    },
    {
      "pos": [
        12789,
        12850
      ],
      "content": "修改 <bpt id=\"p1\">**</bpt>your\\_connection\\_string<ept id=\"p1\">**</ept> 占位符以使用 Service Bus <bpt id=\"p2\">**</bpt>连接字符串<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "编译应用程序。这将在项目的 bin 文件夹（bin\\\\release 或者 bin\\\\debug，具体取决于您是针对发布版本还是调试版本）中创建 TSPClient.exe。您可以从开发计算机上运行此代码，或将此可执行文件和 Microsoft.ServiceBus.dll 复制到将要运行该客户端应用程序的计算计上（不需要放置于您的虚拟机上）。",
      "pos": [
        12854,
        13027
      ]
    },
    {
      "content": "如何运行 .NET 应用程序",
      "pos": [
        16775,
        16789
      ]
    },
    {
      "content": "运行需要进行大量计算的应用程序，首先创建队列，然后解决旅行商问题，这样会将当前最佳路线添加到 Service Bus 队列。需要进行大量计算的应用程序正在运行时（或运行后），运行客户端可显示来自 Service Bus 队列的结果。",
      "pos": [
        16791,
        16907
      ]
    },
    {
      "content": "如何运行需要进行大量计算的应用程序",
      "pos": [
        16913,
        16930
      ]
    },
    {
      "content": "登录虚拟机。",
      "pos": [
        16935,
        16941
      ]
    },
    {
      "content": "创建一个名为 c:\\\\TSP 的文件夹。这是您将要运行应用程序的位置。",
      "pos": [
        16945,
        16980
      ]
    },
    {
      "content": "将 TSPSolver.exe 和 Microsoft.ServiceBus.dll（两者均位于 TSPSolver 项目的 bin 文件夹中）复制到 c:\\\\TSP。",
      "pos": [
        16984,
        17068
      ]
    },
    {
      "content": "创建一个具有以下内容的名为 c:\\\\TSP\\\\cities.txt 的文件。",
      "pos": [
        17072,
        17110
      ]
    },
    {
      "content": "在命令提示符处，将目录更改为 c:\\\\TSP。",
      "pos": [
        18774,
        18797
      ]
    },
    {
      "content": "在运行 TSP 解算器排列之前，你需要先创建 Service Bus 队列。运行以下命令以创建 Service Bus 队列。",
      "pos": [
        18801,
        18864
      ]
    },
    {
      "content": "在创建该队列后，您可以运行 TSP 解算器排列。例如，运行以下命令可对 8 个城市运行解算器。",
      "pos": [
        18900,
        18947
      ]
    },
    {
      "content": "如果您没有指定数字，则解算器将对 10 个城市运行。在解算器找到当前最短的路线后，它会将这些路线添加到该队列中。",
      "pos": [
        18971,
        19027
      ]
    },
    {
      "content": "解算器会一直运行，直到检测完所有路线为止。",
      "pos": [
        19029,
        19050
      ]
    },
    {
      "pos": [
        19054,
        19201
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>您指定的数字越大，解算器运行的时间将越长。例如，对 14 个城市运行可能需要几分钟时间，而对 15 个城市运行可能需要几小时时间。增加到 16 个或更多个城市可能需要数天的运行时间（最终数周、数月和数年时间）。这是因为，随着城市数量的增加，解算器评估的排列数会迅速增加。"
    },
    {
      "content": "如何运行监视客户端应用程序",
      "pos": [
        19207,
        19220
      ]
    },
    {
      "content": "登录到你要在其中运行客户端应用程序的计算机。虽然不需要是运行 TSPSolver 应用程序的同一计算机，但也可以是同一计算机。",
      "pos": [
        19224,
        19287
      ]
    },
    {
      "content": "创建一个您要在其中运行应用程序的文件夹。例如，c:\\\\TSP。",
      "pos": [
        19291,
        19322
      ]
    },
    {
      "content": "将 TSPClient.exe 和 Microsoft.ServiceBus.dll（两者均位于 TSPClient 项目的 bin 文件夹中）复制到 c:\\\\TSP 文件夹。",
      "pos": [
        19326,
        19414
      ]
    },
    {
      "content": "在命令提示符处，将目录更改为 c:\\\\TSP。",
      "pos": [
        19418,
        19441
      ]
    },
    {
      "content": "运行以下命令。",
      "pos": [
        19445,
        19452
      ]
    },
    {
      "content": "或者，也可以通过传入命令行参数来指定检查队列之间休眠的分钟数。检查队列的默认休眠期是 3 分钟，如果没有命令行参数传入 TSPClient，则会使用该默认值。如果你要使用不同的休眠时间间隔值（如一分钟），请运行以下命令。",
      "pos": [
        19477,
        19587
      ]
    },
    {
      "content": "客户端会一直运行，直到它看到“完成”的队列消息为止。请注意，如果您多次运行解算器而没有运行客户端，则您可能需要多次运行客户端才能完全清空队列。或者，您可以删除该队列，然后重新创建一个。若要删除队列，请运行以下 TSPSolver（不是 TSPClient）命令。",
      "pos": [
        19614,
        19745
      ]
    },
    {
      "content": "如何停止 .NET 应用程序",
      "pos": [
        19781,
        19795
      ]
    },
    {
      "content": "对于解算器和客户端应用程序，如果您希望在正常完成之前结束，则可以按 Ctrl+C 退出。",
      "pos": [
        19797,
        19841
      ]
    },
    {
      "content": "使用 TSPSolver 创建或删除队列的替代方法",
      "pos": [
        19846,
        19871
      ]
    },
    {
      "pos": [
        19872,
        20064
      ],
      "content": "除了使用 TSPSolver 创建或删除队列外，你还可以使用 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>创建或删除队列。访问 Azure 门户的 Service Bus 部分即可访问用于创建或删除队列以及检索连接字符串、颁发者和访问密钥的用户界面。你也可以查看 Service Bus 队列的仪表板，从而使你可以查看传入消息和传出消息的指标。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何在 Azure 虚拟机上的 .NET 中运行需要进行大量计算的任务\"\n    description=\"了解如何在 Azure 虚拟机上部署和运行需要进行大量计算的 .NET 应用以及如何使用 Azure Service Bus 队列远程监视进度。\"\n    services=\"virtual-machines\"\n    documentationCenter=\".net\"\n    authors=\"wadepickett\"\n    manager=\"wpickett\"\n    editor=\"mollybos\"/>\n\n<tags\n    ms.service=\"virtual-machines\"\n    ms.date=\"06/25/2015\"\n        wacn.date=\"09/18/2015\"/>\n\n# 如何在 Azure 虚拟机上的 .NET 中运行需要进行大量计算的任务\n\n借助 Azure，您可以使用虚拟机来处理需要进行大量计算的任务。例如，虚拟机可以处理任务并将结果传送给客户端计算机或移动应用程序。完成本教程后，你将了解如何创建虚拟机来运行需要进行大量计算的可由另一个 .NET 应用程序监视的 .NET 应用程序。\n\n本教程假定您了解如何创建 .NET 控制台应用程序，而不了解 Azure。\n\n你将学习以下内容：\n\n* 如何创建虚拟机。\n* 如何远程登录到虚拟机。\n* 如何创建服务总线命名空间。\n* 如何创建 .NET 应用程序来执行需要进行大量计算的任务。\n* 如何创建 .NET 应用程序来监视需要进行大量计算的任务的进度。\n* 如何运行 .NET 应用程序。\n* 如何停止 .NET 应用程序。\n\n本教程会将旅行商问题用于需要进行大量计算的任务。以下是运行需要进行大量计算的任务的 .NET 应用程序示例。\n\n![旅行商问题解算器][solver_output]\n\n以下是监视需要进行大量计算的任务的 .NET 应用程序示例。\n\n![旅行商问题客户端][client_output]\n\n[AZURE.INCLUDE [create-account-and-vms-note](../includes/create-account-and-vms-note.md)]\n\n## 创建虚拟机\n\n1. 登录到 [Azure 门户](https://manage.windowsazure.cn)。\n2. 单击“新建”。\n3. 单击“虚拟机”。\n4. 单击“快速创建”。\n5. 在“创建虚拟机”屏幕中，为“DNS 名称”输入一个值。\n6. 从“映像”下拉列表中，选择一个映像，如“Windows Server 2012 R2”。\n7. 在“用户名”字段中输入管理员的名称。记住你下次要输入的此名称和密码，远程登录虚拟机时你将使用它们。\n8. 在“新密码”字段中输入密码，然后在“确认”字段中重新输入一次。\n9. 从“位置”下拉列表中，选择虚拟机的数据中心位置。\n10. 单击“创建虚拟机”。你可以在 Azure 门户的“虚拟机”部分对状态进行监视。当状态显示为“活动”时，你就可以登录该虚拟机。\n\n## 远程登录到虚拟机\n\n1. 登录到[管理门户](https://manage.windowsazure.cn)。\n2. 单击“虚拟机”。\n3. 单击您要登录的虚拟机名称。\n4. 单击“连接”。\n5. 根据需要响应提示以连接到虚拟机。提示需要管理员名称和密码时，请使用您创建虚拟机时提供的值。\n\n## 如何创建服务总线命名空间\n\n若要开始在 Azure 中使用服务总线队列，必须先创建一个服务命名空间。服务命名空间提供了用于对应用程序中的服务总线资源进行寻址的范围容器。\n\n创建服务命名空间：\n\n1.  登录到 [Azure 门户](https://manage.windowsazure.cn)。\n2.  在 Azure 门户的左侧导航窗格中，单击“服务总线”。\n3.  在 Azure 门户的下方窗格中，单击“创建”。\n\n    ![新建 Service Bus][create_service_bus]\n4.  在“创建命名空间”对话框中，输入命名空间名称。系统会立即检查该名称是否可用，因为该名称必须是唯一名称。\n\n    ![“创建命名空间”对话框][create_namespace_dialog]\n5.  在确保命名空间名称可用后，选择应托管您的命名空间的区域（确保使用在其中托管虚拟机的同一区域）。\n\n    > [AZURE.IMPORTANT]选取用于或要用于你的虚拟机的**同一区域**。这将为您提供最佳性能。\n\n6. 如果您登录使用的帐户拥有多个 Azure 订阅，请选择要用于命名空间的订阅。（如果你登录使用的帐户只有一个订阅，则你不会看到包含订阅的下拉列表。）\n7. 单击复选标记。系统现已创建您的服务命名空间并已将其启用。您可能需要等待几分钟，因为系统将为您的帐户配置资源。\n\n    ![单击创建屏幕快照][click_create]\n\n你创建的命名空间随后将显示在 Azure 门户中，然后要花费一段时间来激活。请等到状态变为“活动”后再继续下一步。\n\n## 获取命名空间的默认管理凭据\n\n若要在新命名空间上执行管理操作（如创建队列），则需要获取该命名空间的管理凭据。\n\n1.  在左侧导航窗格中，单击“Service Bus”以显示可用命名空间的列表。![“可用命名空间”屏幕快照][available_namespaces]\n2.  从列表中选择刚刚创建的命名空间。![“命名空间列表”屏幕快照][namespace_list]\n3. 单击“连接信息”。![访问键按钮][access_key_button]\n4.  在对话框中，找到“连接字符串”条目。记下该值，因为你将在本教程的后面使用此信息来对命名空间执行操作。\n\n## 如何创建 .NET 应用程序来执行需要进行大量计算的任务\n\n1. 在你的开发计算机（不必是你创建的虚拟机）上，下载 [Azure SDK for .NET](/develop/net)。\n2. 使用名为 TSPSolver 的项目创建 .NET 控制台应用程序。确保为 .**NET Framework 4** 或更高版本（而不是 **.NET Framework 4 Client Profile**）设置了目标框架。在你创建项目之后，即可通过以下方式设置目标框架：在 Visual Studio 菜单上，依次单击“项目”、“属性”、“应用程序”选项卡，然后为“目标框架”设置值。\n3. 添加 Microsoft ServiceBus 库。在 Visual Studio 解决方案资源管理器中，右键单击“TSPSolver”，单击“添加引用”，单击“浏览”选项卡，浏览至 Azure .NET SDK（例如，C:\\\\Program Files\\\\Microsoft SDKs\\\\Azure.NET SDK\\\\v2.5\\\\ToolsRef），然后将“Microsoft.ServiceBus.dll”选为引用。\n4. 添加 System Runtime Serialization 库。在 Visual Studio 解决方案资源管理器中，右键单击“TSPSolver”，单击“添加引用”，单击“.NET”选项卡，然后将 System.Runtime.Serialization 选为引用。\n5. 将本节末尾的示例代码用于 Program.cs 文件的内容。\n6. 修改 **your\\_connection\\_string** 占位符以使用 Service Bus **连接字符串**。\n7. 编译应用程序。这将在项目的 bin 文件夹（bin\\\\release 或者 bin\\\\debug，具体取决于您是针对发布版本还是调试版本）中创建 TSPSolver.exe。稍后您会将此可执行文件和 Microsoft.ServiceBus.dll 复制到您的虚拟机。\n\n<p/>\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.IO;\n\n    using Microsoft.ServiceBus;\n    using Microsoft.ServiceBus.Messaging;\n\n    namespace TSPSolver\n    {\n        class Program\n        {\n            // Value specifying how often to provide an update to the console.\n            private static long loopCheck = 100000000;\n            private static long nTimes = 0, nLoops = 0;\n\n            private static double[,] distances;\n            private static String[] cityNames;\n            private static int[] bestOrder;\n            private static double minDistance;\n\n            private static NamespaceManager namespaceManager;\n            private static QueueClient queueClient;\n            private static String queueName = \"TSPQueue\";\n\n            private static void BuildDistances(String fileLocation, int numCities)\n            {\n\n                try\n                {\n                    StreamReader sr = new StreamReader(fileLocation);\n                    String[] sep1 = { \", \" };\n\n                    double[,] cityLocs = new double[numCities, 2];\n\n                    for (int i = 0; i < numCities; i++)\n                    {\n                        String[] line = sr.ReadLine().Split(sep1, StringSplitOptions.None);\n                        cityNames[i] = line[0];\n                        cityLocs[i, 0] = Convert.ToDouble(line[1]);\n                        cityLocs[i, 1] = Convert.ToDouble(line[2]);\n                    }\n                    sr.Close();\n\n                    for (int i = 0; i < numCities; i++)\n                    {\n                        for (int j = i; j < numCities; j++)\n                        {\n                            distances[i, j] = hypot(Math.Abs(cityLocs[i, 0] - cityLocs[j, 0]), Math.Abs(cityLocs[i, 1] - cityLocs[j, 1]));\n                            distances[j, i] = distances[i, j];\n                        }\n                    }\n                }\n                catch (Exception e)\n                {\n                    throw e;\n                }\n            }\n\n            private static double hypot(double x, double y)\n            {\n                return Math.Sqrt(x * x + y * y);\n            }\n\n            private static void permutation(List<int> startCities, double distSoFar, List<int> restCities)\n            {\n                try\n                {\n\n                    nTimes++;\n                    if (nTimes == loopCheck)\n                    {\n                        nLoops++;\n                        nTimes = 0;\n                        DateTime dateTime = DateTime.Now;\n                        Console.Write(\"Current time is {0}.\", dateTime);\n                        Console.WriteLine(\" Completed {0} iterations of size of {1}.\", nLoops, loopCheck);\n                    }\n\n                    if ((restCities.Count == 1) && ((minDistance == -1) || (distSoFar + distances[restCities[0], startCities[0]] + distances[restCities[0], startCities[startCities.Count - 1]] < minDistance)))\n                    {\n                        startCities.Add(restCities[0]);\n                        newBestDistance(startCities, distSoFar + distances[restCities[0], startCities[0]] + distances[restCities[0], startCities[startCities.Count - 2]]);\n                        startCities.Remove(startCities[startCities.Count - 1]);\n                    }\n                    else\n                    {\n                        for (int i = 0; i < restCities.Count; i++)\n                        {\n                            startCities.Add(restCities[0]);\n                            restCities.Remove(restCities[0]);\n                            permutation(startCities, distSoFar + distances[startCities[startCities.Count - 1], startCities[startCities.Count - 2]], restCities);\n                            restCities.Add(startCities[startCities.Count - 1]);\n                            startCities.Remove(startCities[startCities.Count - 1]);\n                        }\n                    }\n                }\n                catch (Exception e)\n                {\n                    throw e;\n                }\n            }\n\n            private static void newBestDistance(List<int> cities, double distance)\n            {\n                try\n                {\n                    minDistance = distance;\n                    String cityList = \"Shortest distance is \" + minDistance + \", with route: \";\n\n                    for (int i = 0; i < bestOrder.Length; i++)\n                    {\n                        bestOrder[i] = cities[i];\n                        cityList += cityNames[bestOrder[i]];\n                        if (i != bestOrder.Length - 1)\n                            cityList += \", \";\n                    }\n                    Console.WriteLine(cityList);\n                    queueClient.Send(new BrokeredMessage(cityList));\n                }\n                catch (Exception e)\n                {\n                    throw e;\n                }\n            }\n\n            static void Main(string[] args)\n            {\n                try\n                {\n\n                  String connectionString = @\"your_connection_string\";\n\n                    int numCities = 10; // Use as the default, if no value is specified\n                    // at the command line.\n                    if (args.Count() != 0)\n                    {\n\n                        if (args[0].ToLower().CompareTo(\"createqueue\") == 0)\n                        {\n                            // No processing to occur other than creating the queue.\n                            namespaceManager = NamespaceManager.CreateFromConnectionString(connectionString);\n                            namespaceManager.CreateQueue(queueName);\n                            Console.WriteLine(\"Queue named {0} was created.\", queueName);\n                            Environment.Exit(0);\n                        }\n\n                        if (args[0].ToLower().CompareTo(\"deletequeue\") == 0)\n                        {\n                            // No processing to occur other than deleting the queue.\n                            namespaceManager = NamespaceManager.CreateFromConnectionString(connectionString);\n                            namespaceManager.DeleteQueue(\"TSPQueue\");\n                            Console.WriteLine(\"Queue named {0} was deleted.\", queueName);\n                            Environment.Exit(0);\n                        }\n\n                        // Neither creating or deleting a queue.\n                        // Assume the value passed in is the number of cities to solve.\n                        numCities = Convert.ToInt32(args[0]);\n                    }\n\n                    Console.WriteLine(\"Running for {0} cities.\", numCities);\n\n                    queueClient = QueueClient.CreateFromConnectionString(connectionString, \"TSPQueue\");\n\n                    List<int> startCities = new List<int>();\n                    List<int> restCities = new List<int>();\n\n                    startCities.Add(0);\n                    for (int i = 1; i < numCities; i++)\n                    {\n                        restCities.Add(i);\n                    }\n                    distances = new double[numCities, numCities];\n                    cityNames = new String[numCities];\n                    BuildDistances(@\"c:\\tsp\\cities.txt\", numCities);\n                    minDistance = -1;\n                    bestOrder = new int[numCities];\n                    permutation(startCities, 0, restCities);\n                    Console.WriteLine(\"Final solution found!\");\n                    queueClient.Send(new BrokeredMessage(\"Complete\"));\n\n                    queueClient.Close();\n                    Environment.Exit(0);\n\n                }\n                catch (ServerBusyException serverBusyException)\n                {\n                    Console.WriteLine(\"ServerBusyException encountered\");\n                    Console.WriteLine(serverBusyException.Message);\n                    Console.WriteLine(serverBusyException.StackTrace);\n                    Environment.Exit(-1);\n                }\n                catch (ServerErrorException serverErrorException)\n                {\n                    Console.WriteLine(\"ServerErrorException encountered\");\n                    Console.WriteLine(serverErrorException.Message);\n                    Console.WriteLine(serverErrorException.StackTrace);\n                    Environment.Exit(-1);\n                }\n                catch (Exception exception)\n                {\n                    Console.WriteLine(\"Exception encountered\");\n                    Console.WriteLine(exception.Message);\n                    Console.WriteLine(exception.StackTrace);\n                    Environment.Exit(-1);\n                }\n            }\n        }\n    }\n\n\n\n## 如何创建 .NET 应用程序来监视需要进行大量计算的任务的进度\n\n1. 在开发计算机上，创建一个将 TSPClient 用作项目名称的 .NET 控制台应用程序。确保为 .**NET Framework 4** 或更高版本（而不是 **.NET Framework 4 Client Profile**）设置了目标框架。在你创建项目之后，即可通过以下方式设置目标框架：在 Visual Studio 菜单上，依次单击“项目”、“属性”、“应用程序”选项卡，然后为“目标框架”设置值。\n2. 加入 Microsoft ServiceBus 库。在 Visual Studio 解决方案资源管理器中，右键单击“TSPClient”，单击“添加引用”，单击“浏览”选项卡，浏览至 Azure .NET SDK（例如，C:\\\\Program Files\\\\Microsoft SDKs\\\\Azure.NET SDK\\\\v2.5\\\\ToolsRef），然后将“Microsoft.ServiceBus.dll”选为引用。\n3. 添加 System Runtime Serialization 库。在 Visual Studio 解决方案资源管理器中，右键单击“TSPClient”、单击“添加引用”、单击“.NET”选项卡，然后将 System.Runtime.Serialization 选为引用。\n4. 将本节末尾的示例代码用于 Program.cs 文件的内容。\n5. 修改 **your\\_connection\\_string** 占位符以使用 Service Bus **连接字符串**。\n6. 编译应用程序。这将在项目的 bin 文件夹（bin\\\\release 或者 bin\\\\debug，具体取决于您是针对发布版本还是调试版本）中创建 TSPClient.exe。您可以从开发计算机上运行此代码，或将此可执行文件和 Microsoft.ServiceBus.dll 复制到将要运行该客户端应用程序的计算计上（不需要放置于您的虚拟机上）。\n\n<p/>\n\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Text;\n    using System.IO;\n\n    using Microsoft.ServiceBus;\n    using Microsoft.ServiceBus.Messaging;\n    using System.Threading; // For Thread.Sleep\n\n    namespace TSPClient\n    {\n        class Program\n        {\n\n            static void Main(string[] args)\n            {\n\n                try\n                {\n\n                    Console.WriteLine(\"Starting at {0}\", DateTime.Now);\n\n                                    String connectionString = @\"your_connection_string\";\n\n                    QueueClient queueClient = QueueClient.CreateFromConnectionString(connectionString, \"TSPQueue\");\n\n                    BrokeredMessage message;\n\n                    int waitMinutes = 3;  // Use as the default, if no value\n                    // is specified at command line.\n\n                    if (0 != args.Length)\n                    {\n                        waitMinutes = Convert.ToInt16(args[0]);\n                    }\n\n                    String waitString;\n                    waitString = (waitMinutes == 1) ? \"minute\" : waitMinutes.ToString() + \" minutes\";\n\n                    while (true)\n                    {\n                        message = queueClient.Receive();\n\n                        if (message != null)\n                        {\n                            try\n                            {\n                                string str = message.GetBody<string>();\n                                Console.WriteLine(str);\n\n                                // Remove message from queue.\n                                message.Complete();\n\n                                if (\"Complete\" == str)\n                                {\n                                    Console.WriteLine(\"Finished at {0}.\", DateTime.Now);\n                                    break;\n                                }\n                            }\n                            catch (Exception e)\n                            {\n                                // Indicates a problem. Unlock the message in the queue.\n                                message.Abandon();\n                                throw e;\n                            }\n                        }\n                        else\n                        {\n                            // The queue is empty.\n                            Console.WriteLine(\"Queue is empty. Sleeping for another {0}.\", waitString);\n                            System.Threading.Thread.Sleep(60000 * waitMinutes);\n                        }\n                    }\n                    queueClient.Close();\n                    Environment.Exit(0);\n                }\n                catch (ServerBusyException serverBusyException)\n                {\n                    Console.WriteLine(\"ServerBusyException encountered\");\n                    Console.WriteLine(serverBusyException.Message);\n                    Console.WriteLine(serverBusyException.StackTrace);\n                    Environment.Exit(-1);\n                }\n                catch (ServerErrorException serverErrorException)\n                {\n                    Console.WriteLine(\"ServerErrorException encountered\");\n                    Console.WriteLine(serverErrorException.Message);\n                    Console.WriteLine(serverErrorException.StackTrace);\n                    Environment.Exit(-1);\n                }\n                catch (Exception exception)\n                {\n                    Console.WriteLine(\"Exception encountered\");\n                    Console.WriteLine(exception.Message);\n                    Console.WriteLine(exception.StackTrace);\n                    Environment.Exit(-1);\n                }\n            }\n        }\n    }\n\n## 如何运行 .NET 应用程序\n\n运行需要进行大量计算的应用程序，首先创建队列，然后解决旅行商问题，这样会将当前最佳路线添加到 Service Bus 队列。需要进行大量计算的应用程序正在运行时（或运行后），运行客户端可显示来自 Service Bus 队列的结果。\n\n### 如何运行需要进行大量计算的应用程序\n\n1. 登录虚拟机。\n2. 创建一个名为 c:\\\\TSP 的文件夹。这是您将要运行应用程序的位置。\n3. 将 TSPSolver.exe 和 Microsoft.ServiceBus.dll（两者均位于 TSPSolver 项目的 bin 文件夹中）复制到 c:\\\\TSP。\n4. 创建一个具有以下内容的名为 c:\\\\TSP\\\\cities.txt 的文件。\n\n        City_1, 1002.81, -1841.35\n        City_2, -953.55, -229.6\n        City_3, -1363.11, -1027.72\n        City_4, -1884.47, -1616.16\n        City_5, 1603.08, -1030.03\n        City_6, -1555.58, 218.58\n        City_7, 578.8, -12.87\n        City_8, 1350.76, 77.79\n        City_9, 293.36, -1820.01\n        City_10, 1883.14, 1637.28\n        City_11, -1271.41, -1670.5\n        City_12, 1475.99, 225.35\n        City_13, 1250.78, 379.98\n        City_14, 1305.77, 569.75\n        City_15, 230.77, 231.58\n        City_16, -822.63, -544.68\n        City_17, -817.54, -81.92\n        City_18, 303.99, -1823.43\n        City_19, 239.95, 1007.91\n        City_20, -1302.92, 150.39\n        City_21, -116.11, 1933.01\n        City_22, 382.64, 835.09\n        City_23, -580.28, 1040.04\n        City_24, 205.55, -264.23\n        City_25, -238.81, -576.48\n        City_26, -1722.9, -909.65\n        City_27, 445.22, 1427.28\n        City_28, 513.17, 1828.72\n        City_29, 1750.68, -1668.1\n        City_30, 1705.09, -309.35\n        City_31, -167.34, 1003.76\n        City_32, -1162.85, -1674.33\n        City_33, 1490.32, 821.04\n        City_34, 1208.32, 1523.3\n        City_35, 18.04, 1857.11\n        City_36, 1852.46, 1647.75\n        City_37, -167.44, -336.39\n        City_38, 115.4, 0.2\n        City_39, -66.96, 917.73\n        City_40, 915.96, 474.1\n        City_41, 140.03, 725.22\n        City_42, -1582.68, 1608.88\n        City_43, -567.51, 1253.83\n        City_44, 1956.36, 830.92\n        City_45, -233.38, 909.93\n        City_46, -1750.45, 1940.76\n        City_47, 405.81, 421.84\n        City_48, 363.68, 768.21\n        City_49, -120.3, -463.13\n        City_50, 588.51, 679.33\n\n5. 在命令提示符处，将目录更改为 c:\\\\TSP。\n6. 在运行 TSP 解算器排列之前，你需要先创建 Service Bus 队列。运行以下命令以创建 Service Bus 队列。\n\n        TSPSolver createqueue\n\n7. 在创建该队列后，您可以运行 TSP 解算器排列。例如，运行以下命令可对 8 个城市运行解算器。\n\n        TSPSolver 8\n\n 如果您没有指定数字，则解算器将对 10 个城市运行。在解算器找到当前最短的路线后，它会将这些路线添加到该队列中。\n\n解算器会一直运行，直到检测完所有路线为止。\n\n> [AZURE.NOTE]您指定的数字越大，解算器运行的时间将越长。例如，对 14 个城市运行可能需要几分钟时间，而对 15 个城市运行可能需要几小时时间。增加到 16 个或更多个城市可能需要数天的运行时间（最终数周、数月和数年时间）。这是因为，随着城市数量的增加，解算器评估的排列数会迅速增加。\n\n### 如何运行监视客户端应用程序\n1. 登录到你要在其中运行客户端应用程序的计算机。虽然不需要是运行 TSPSolver 应用程序的同一计算机，但也可以是同一计算机。\n2. 创建一个您要在其中运行应用程序的文件夹。例如，c:\\\\TSP。\n3. 将 TSPClient.exe 和 Microsoft.ServiceBus.dll（两者均位于 TSPClient 项目的 bin 文件夹中）复制到 c:\\\\TSP 文件夹。\n4. 在命令提示符处，将目录更改为 c:\\\\TSP。\n5. 运行以下命令。\n\n        TSPClient\n\n    或者，也可以通过传入命令行参数来指定检查队列之间休眠的分钟数。检查队列的默认休眠期是 3 分钟，如果没有命令行参数传入 TSPClient，则会使用该默认值。如果你要使用不同的休眠时间间隔值（如一分钟），请运行以下命令。\n\n        TSPClient 1\n\n    客户端会一直运行，直到它看到“完成”的队列消息为止。请注意，如果您多次运行解算器而没有运行客户端，则您可能需要多次运行客户端才能完全清空队列。或者，您可以删除该队列，然后重新创建一个。若要删除队列，请运行以下 TSPSolver（不是 TSPClient）命令。\n\n        TSPSolver deletequeue\n\n## 如何停止 .NET 应用程序\n\n对于解算器和客户端应用程序，如果您希望在正常完成之前结束，则可以按 Ctrl+C 退出。\n\n## 使用 TSPSolver 创建或删除队列的替代方法\n除了使用 TSPSolver 创建或删除队列外，你还可以使用 [Azure 门户](https://manage.windowsazure.cn)创建或删除队列。访问 Azure 门户的 Service Bus 部分即可访问用于创建或删除队列以及检索连接字符串、颁发者和访问密钥的用户界面。你也可以查看 Service Bus 队列的仪表板，从而使你可以查看传入消息和传出消息的指标。\n\n[solver_output]: ./media/virtual-machines-dotnet-run-compute-intensive-task/WA_dotNetTSPSolver.png\n[client_output]: ./media/virtual-machines-dotnet-run-compute-intensive-task/WA_dotNetTSPClient.png\n[create_service_bus]: ./media/virtual-machines-dotnet-run-compute-intensive-task/ServiceBusCreateNew.png\n[create_namespace_dialog]: ./media/virtual-machines-dotnet-run-compute-intensive-task/CreateNameSpaceDialog.png\n[available_namespaces]: ./media/virtual-machines-dotnet-run-compute-intensive-task/AvailableNamespaces.png\n[click_create]: ./media/virtual-machines-dotnet-run-compute-intensive-task/ClickCreate.png\n[namespace_list]: ./media/virtual-machines-dotnet-run-compute-intensive-task/NamespaceList.png\n[access_key_button]: ./media/virtual-machines-dotnet-run-compute-intensive-task/AccessKey.png\n\n<!---HONumber=70-->"
}