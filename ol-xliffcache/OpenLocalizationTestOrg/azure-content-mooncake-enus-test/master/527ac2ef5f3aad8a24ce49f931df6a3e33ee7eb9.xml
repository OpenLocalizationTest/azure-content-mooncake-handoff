{
  "nodes": [
    {
      "content": "在 Windows上使用 Node.js 连接到 SQL 数据库",
      "pos": [
        27,
        59
      ]
    },
    {
      "content": "演示了一个可以用来连接到 Azure SQL 数据库的 Node.js 代码示例。该示例在 Windows 客户端计算机上运行。",
      "pos": [
        78,
        142
      ]
    },
    {
      "content": "在 Windows上使用 Node.js 连接到 SQL 数据库",
      "pos": [
        361,
        393
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        398,
        414
      ]
    },
    {
      "content": "C",
      "pos": [
        418,
        419
      ]
    },
    {
      "content": "PHP",
      "pos": [
        485,
        488
      ]
    },
    {
      "content": "Python",
      "pos": [
        558,
        564
      ]
    },
    {
      "content": "Ruby",
      "pos": [
        637,
        641
      ]
    },
    {
      "content": "Java",
      "pos": [
        712,
        716
      ]
    },
    {
      "content": "Node.js",
      "pos": [
        787,
        794
      ]
    },
    {
      "content": "本主题演示了一个可以用来连接到 Azure SQL 数据库的 Node.js 代码示例。该 Node.js 程序在 Windows 客户端计算机上运行。若要管理连接，请使用 msnodesql 驱动程序。",
      "pos": [
        866,
        968
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        974,
        978
      ]
    },
    {
      "content": "你的客户端开发计算机上必须存在以下软件项。",
      "pos": [
        981,
        1002
      ]
    },
    {
      "pos": [
        1008,
        1159
      ],
      "content": "Node.js – <bpt id=\"p1\">[</bpt>版本 0.8.9（32 位版本）<ept id=\"p1\">](http://blog.nodejs.org/2012/09/11/node-v0-8-9-stable)</ept>。滚动页面，然后单击 32 位 x86 Windows 安装程序（而不是 64 位 Windows x64 安装程序）对应的“下载”链接。"
    },
    {
      "pos": [
        1162,
        1247
      ],
      "content": "<bpt id=\"p1\">[</bpt>Python 2.7.6<ept id=\"p1\">](https://www.python.org/download/releases/2.7.6)</ept> - 适用于 x86 或 x64 的安装程序。"
    },
    {
      "pos": [
        1250,
        1595
      ],
      "content": "<bpt id=\"p1\">[</bpt>Visual C++ 2010<ept id=\"p1\">](https://app.vssps.visualstudio.com/profile/review?download=true&amp;family=VisualStudioCExpress&amp;release=VisualStudio2010&amp;type=web&amp;slcid=0x409&amp;context=eyJwZSI6MSwicGMiOjEsImljIjoxLCJhbyI6MCwiYW0iOjEsIm9wIjpudWxsLCJhZCI6bnVsbCwiZmEiOjAsImF1IjpudWxsLCJjdiI6OTY4OTg2MzU1LCJmcyI6MCwic3UiOjAsImVyIjoxfQ2)</ept> - 可从 Microsoft 下载免费的 Express 版本。"
    },
    {
      "pos": [
        1598,
        1773
      ],
      "content": "SQL Server Native Client 11.0 - 在 <bpt id=\"p1\">[</bpt>SQL Server 2012 Feature Pack<ept id=\"p1\">](http://www.microsoft.com/zh-cn/download/details.aspx?id=29065)</ept> 中作为 Microsoft SQL Server 2012 Native Client 提供。"
    },
    {
      "content": "安装所需的模块",
      "pos": [
        1780,
        1787
      ]
    },
    {
      "content": "满足这些要求后，请确保在 Node.js 版本 0.8.9 上操作。可以在命令行终端上使用以下命令来检查是否使用了此版本：node -v。",
      "pos": [
        1789,
        1858
      ]
    },
    {
      "content": "在 <bpt id=\"p1\">**</bpt>cmd.exe<ept id=\"p1\">**</ept> 命令行窗口中，导航到项目目录 - 例如 C:\\\\NodeJSSQLProject。按照显示的顺序输入以下命令。",
      "pos": [
        1863,
        1932
      ]
    },
    {
      "pos": [
        1974,
        2161
      ],
      "content": "接下来，请导航到 node\\_modules\\\\msnodesql 文件夹并运行 <bpt id=\"p1\">**</bpt>msnodesql-0.2.1-v0.8-ia32<ept id=\"p1\">**</ept> 可执行文件。遵循安装向导中的步骤操作，并在完成后单击“完成”。此时，应已安装 Node.js SQL Server 驱动程序。遵循后续步骤来获取连接字符串，然后，你应能从 Node.js 应用程序连接到 Azure SQL 数据库。"
    },
    {
      "content": "SQL 数据库",
      "pos": [
        2168,
        2175
      ]
    },
    {
      "pos": [
        2177,
        2317
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>入门页<ept id=\"p1\">](/documentation/articles/sql-database-get-started)</ept>，以了解如何创建示例数据库。必须根据指南创建 <bpt id=\"p2\">**</bpt>AdventureWorks 数据库模板<ept id=\"p2\">**</ept>。下面所示的示例只适用于 <bpt id=\"p3\">**</bpt>AdventureWorks 架构<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "步骤 1：获取连接详细信息",
      "pos": [
        2323,
        2336
      ]
    },
    {
      "content": "步骤 2：连接",
      "pos": [
        2500,
        2507
      ]
    },
    {
      "content": "将以下代码复制到项目目录中的某个 .js 文件。",
      "pos": [
        2512,
        2536
      ]
    },
    {
      "content": "现在，请通过发出以下命令运行该 .js 文件。",
      "pos": [
        3247,
        3270
      ]
    },
    {
      "content": "步骤 3：执行查询",
      "pos": [
        3300,
        3309
      ]
    },
    {
      "content": "步骤 4：插入行",
      "pos": [
        4501,
        4509
      ]
    },
    {
      "content": "步骤 5：回退事务",
      "pos": [
        5661,
        5670
      ]
    },
    {
      "pos": [
        5673,
        5746
      ],
      "content": "方法 <bpt id=\"p1\">**</bpt>conn.beginTransactions<ept id=\"p1\">**</ept> 在 Azure SQL 数据库中不起作用。请遵循代码示例在 SQL 数据库中执行事务。"
    },
    {
      "content": "步骤 6：存储过程",
      "pos": [
        7111,
        7120
      ]
    },
    {
      "content": "要正常运行此代码示例，必须事先准备或创建一个不输入任何参数的存储过程。可以使用 SQL Server Management Studio (SSMS.exe) 等工具创建存储过程。",
      "pos": [
        7122,
        7212
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        8051,
        8055
      ]
    },
    {
      "pos": [
        8057,
        8102
      ],
      "content": "有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Node.js 开发人员中心<ept id=\"p1\">](/develop/nodejs)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"在 Windows上使用 Node.js 连接到 SQL 数据库\"\n    description=\"演示了一个可以用来连接到 Azure SQL 数据库的 Node.js 代码示例。该示例在 Windows 客户端计算机上运行。\"\n    services=\"sql-database\"\n    documentationCenter=\"\"\n    authors=\"meet-bhagdev\"\n    manager=\"jeffreyg\"\n    editor=\"\"/>\n\n\n<tags\n    ms.service=\"sql-database\"\n    ms.date=\"12/17/2015\"\n    wacn.date=\"01/15/2016\"/>\n\n\n# 在 Windows上使用 Node.js 连接到 SQL 数据库\n\n\n> [AZURE.SELECTOR]\n- [C#](/documentation/articles/sql-database-develop-dotnet-simple)\n- [PHP](/documentation/articles/sql-database-develop-php-simple-windows)\n- [Python](/documentation/articles/sql-database-develop-python-simple-windows)\n- [Ruby](/documentation/articles/sql-database-develop-ruby-simple-windows)\n- [Java](/documentation/articles/sql-database-develop-java-simple-windows)\n- [Node.js](/documentation/articles/sql-database-develop-nodejs-simple-windows)\n\n\n本主题演示了一个可以用来连接到 Azure SQL 数据库的 Node.js 代码示例。该 Node.js 程序在 Windows 客户端计算机上运行。若要管理连接，请使用 msnodesql 驱动程序。\n\n\n## 先决条件\n\n\n你的客户端开发计算机上必须存在以下软件项。\n\n\n-  Node.js – [版本 0.8.9（32 位版本）](http://blog.nodejs.org/2012/09/11/node-v0-8-9-stable)。滚动页面，然后单击 32 位 x86 Windows 安装程序（而不是 64 位 Windows x64 安装程序）对应的“下载”链接。\n- [Python 2.7.6](https://www.python.org/download/releases/2.7.6) - 适用于 x86 或 x64 的安装程序。\n- [Visual C++ 2010](https://app.vssps.visualstudio.com/profile/review?download=true&family=VisualStudioCExpress&release=VisualStudio2010&type=web&slcid=0x409&context=eyJwZSI6MSwicGMiOjEsImljIjoxLCJhbyI6MCwiYW0iOjEsIm9wIjpudWxsLCJhZCI6bnVsbCwiZmEiOjAsImF1IjpudWxsLCJjdiI6OTY4OTg2MzU1LCJmcyI6MCwic3UiOjAsImVyIjoxfQ2) - 可从 Microsoft 下载免费的 Express 版本。\n- SQL Server Native Client 11.0 - 在 [SQL Server 2012 Feature Pack](http://www.microsoft.com/zh-cn/download/details.aspx?id=29065) 中作为 Microsoft SQL Server 2012 Native Client 提供。\n\n\n### 安装所需的模块\n\n满足这些要求后，请确保在 Node.js 版本 0.8.9 上操作。可以在命令行终端上使用以下命令来检查是否使用了此版本：node -v。\n<br>在 **cmd.exe** 命令行窗口中，导航到项目目录 - 例如 C:\\\\NodeJSSQLProject。按照显示的顺序输入以下命令。\n\n    npm init\n    npm install msnodesql\n\n接下来，请导航到 node\\_modules\\\\msnodesql 文件夹并运行 **msnodesql-0.2.1-v0.8-ia32** 可执行文件。遵循安装向导中的步骤操作，并在完成后单击“完成”。此时，应已安装 Node.js SQL Server 驱动程序。遵循后续步骤来获取连接字符串，然后，你应能从 Node.js 应用程序连接到 Azure SQL 数据库。\n\n\n### SQL 数据库\n\n请参阅[入门页](/documentation/articles/sql-database-get-started)，以了解如何创建示例数据库。必须根据指南创建 **AdventureWorks 数据库模板**。下面所示的示例只适用于 **AdventureWorks 架构**。\n\n\n## 步骤 1：获取连接详细信息\n\n[AZURE.INCLUDE [sql-database-include-connection-string-details-20-portalshots](../includes/sql-database-include-connection-string-details-20-portalshots.md)]\n\n## 步骤 2：连接\n\n\n- 将以下代码复制到项目目录中的某个 .js 文件。\n\n\n        var http = require('http');\n        var sql = require('msnodesql');\n        var http = require('http');\n        var fs = require('fs');\n        var useTrustedConnection = false;\n        var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.chinacloudapi.cn;\" +\n        (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") +\n        \"Database={AdventureWorks};\"\n        sql.open(conn_str, function (err, conn) {\n            if (err) {\n                console.log(\"Error opening the connection!\");\n                return;\n            }\n            else\n                console.log(\"Successfuly connected\");\n        });\n\n\n- 现在，请通过发出以下命令运行该 .js 文件。\n\n\n        node index.js\n\n\n## 步骤 3：执行查询\n\n\n    var http = require('http');\n    var sql = require('msnodesql');\n    var http = require('http');\n    var fs = require('fs');\n    var useTrustedConnection = false;\n    var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.chinacloudapi.cn;\" +\n    (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") +\n    \"Database={AdventureWorks};\"\n    sql.open(conn_str, function (err, conn) {\n        if (err) {\n            console.log(\"Error opening the connection!\");\n            return;\n        }\n        else\n            console.log(\"Successfuly connected\");\n\n\n        conn.queryRaw(\"SELECT c.CustomerID, c.CompanyName,COUNT(soh.SalesOrderID) AS OrderCount FROM SalesLT.Customer AS c LEFT OUTER JOIN SalesLT.SalesOrderHeader AS soh ON c.CustomerID = soh.CustomerID GROUP BY c.CustomerID, c.CompanyName ORDER BY OrderCount DESC;\", function (err, results) {\n            if (err) {\n                console.log(\"Error running query1!\");\n                return;\n            }\n            for (var i = 0; i < results.rows.length; i++) {\n                console.log(results.rows[i]);\n            }\n        });\n    });\n\n\n## 步骤 4：插入行\n\n\n    var http = require('http');\n    var sql = require('msnodesql');\n    var http = require('http');\n    var fs = require('fs');\n    var useTrustedConnection = false;\n    var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.chinacloudapi.cn;\" +\n    (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") +\n    \"Database={AdventureWorks};\"\n    sql.open(conn_str, function (err, conn) {\n        if (err) {\n            console.log(\"Error opening the connection!\");\n            return;\n        }\n        else\n            console.log(\"Successfuly connected\");\n\n\n        conn.queryRaw(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES ('SQL Server Express', 'SQLEXPRESS', 0, 0, CURRENT_TIMESTAMP)\", function (err, results) {\n            if (err) {\n                console.log(\"Error running query!\");\n                return;\n            }\n            for (var i = 0; i < results.rows.length; i++) {\n                console.log(\"Product ID Inserted : \"+results.rows[i]);\n            }\n        });\n    });\n\n\n## 步骤 5：回退事务\n\n\n方法 **conn.beginTransactions** 在 Azure SQL 数据库中不起作用。请遵循代码示例在 SQL 数据库中执行事务。\n\n\n    var http = require('http');\n    var sql = require('msnodesql');\n    var http = require('http');\n    var fs = require('fs');\n    var useTrustedConnection = false;\n    var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.chinacloudapi.cn;\" +\n    (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") +\n    \"Database={AdventureWorks};\"\n    sql.open(conn_str, function (err, conn) {\n        if (err) {\n            console.log(\"Error opening the connection!\");\n            return;\n        }\n        else\n            console.log(\"Successfuly connected\");\n\n\n        conn.queryRaw(\"INSERT SalesLT.Product (Name, ProductNumber, StandardCost, ListPrice, SellStartDate) OUTPUT INSERTED.ProductID VALUES ('SQL Server Express New ', 'SQLEXPRESS New', 1, 1, CURRENT_TIMESTAMP)\", function (err, results) {\n            if (err) {\n                console.log(\"Error running query!\");\n                return;\n            }\n            for (var i = 0; i < results.rows.length; i++) {\n                console.log(\"Product ID Inserted : \"+results.rows[i]);\n            }\n        });\n\n        conn.queryRaw(\"ROLLBACK TRANSACTION; \", function (err, results) {\n                if (err) {\n                console.log(\"Rollback failed\");\n                return;\n            }\n            });\n    });\n\n\n## 步骤 6：存储过程\n\n要正常运行此代码示例，必须事先准备或创建一个不输入任何参数的存储过程。可以使用 SQL Server Management Studio (SSMS.exe) 等工具创建存储过程。\n\n\n    var http = require('http');\n    var sql = require('msnodesql');\n    var http = require('http');\n    var fs = require('fs');\n    var useTrustedConnection = false;\n    var conn_str = \"Driver={SQL Server Native Client 11.0};Server=tcp:yourserver.database.chinacloudapi.cn;\" +\n    (useTrustedConnection == true ? \"Trusted_Connection={Yes};\" : \"UID=yourusername;PWD=yourpassword;\") +\n    \"Database={AdventureWorks};\"\n    sql.open(conn_str, function (err, conn) {\n        if (err) {\n            console.log(\"Error opening the connection!\");\n            return;\n        }\n        else\n            console.log(\"Successfuly connected\");\n\n        conn.query(\"exec NameOfStoredProcedure\", function (err, results) {\n            if (err) {\n            console.log(\"Error running query8!\");\n            return;\n        }\n        });\n    });\n\n\n## 后续步骤\n\n有关详细信息，请参阅 [Node.js 开发人员中心](/develop/nodejs)。\n\n<!---HONumber=Mooncake_0104_2016-->\n"
}