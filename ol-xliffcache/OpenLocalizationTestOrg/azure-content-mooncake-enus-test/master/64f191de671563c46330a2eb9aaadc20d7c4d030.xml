{
  "nodes": [
    {
      "content": "Azure 存储表设计指南 |Azure",
      "pos": [
        27,
        47
      ]
    },
    {
      "content": "在 Azure 表存储中设计可伸缩的高性能表",
      "pos": [
        66,
        88
      ]
    },
    {
      "content": "Azure 存储表设计指南：设计可伸缩的高性能表",
      "pos": [
        286,
        310
      ]
    },
    {
      "pos": [
        314,
        358
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"azure-table-service-overview\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 概述"
    },
    {
      "content": "要设计可伸缩的高性能表，必须考虑许多因素（如性能、可伸缩性和成本）。如果你以前已为关系数据库设计过架构，这些注意事项对你来说将会很熟悉，尽管 Azure 表服务存储模型与关系模型之间有一些相似之处，但也有许多重大差异。这些差异通常会导致非常不同的设计，这些设计对于熟悉关系数据库的人来说可能看起来不直观或是错误的，但如果你正在设计 Azure 表服务等 NoSQL 键/值存储，就会体会到这些设计是很合理的。许多设计差异将反映这样一个事实：表服务旨在支持云级别应用程序，这些应用程序可包含数十亿个实体（相当于关系数据库术语中的行）的数据，或者用于必须支持非常高事务量的数据集：因此，你需要以不同方式考虑如何存储数据，并了解表服务的工作原理。相对于使用关系数据库的解决方案而言，设计良好的 NoSQL 数据存储可以使你的解决方案更进一步的扩展（以更低的成本）。本指南可帮助你了解这些主题。",
      "pos": [
        360,
        753
      ]
    },
    {
      "content": "关于 Azure 表服务",
      "pos": [
        758,
        770
      ]
    },
    {
      "pos": [
        772,
        1069
      ],
      "content": "本部分重点介绍表服务的一些主要功能，这些功能尤其与设计性能和可伸缩性相关。如果你不熟悉 Azure 存储和表服务，在阅读本文的其他部分之前，请先阅读 <bpt id=\"p1\">[</bpt>Azure 存储简介<ept id=\"p1\">](/documentation/articles/storage-introduction)</ept> 和<bpt id=\"p2\">[</bpt>如何通过 .NET 使用表存储<ept id=\"p2\">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。尽管本指南的重点是介绍表服务，但它也将包括 Azure 队列和 Blob 服务的一些讨论，并介绍如何在解决方案中将这些 Azure 队列和 Blob 服务与表服务一起使用。"
    },
    {
      "content": "什么是表服务？ 从名称可以推测出，表服务将使用表格格式来存储数据。在标准术语中，表的每一行表示一个实体，而列存储该实体的各种属性。每个实体都有一对密钥来唯一标识它，并具有一个时间戳列，表服务使用该列来跟踪上次更新实体的时间（此操作是自动发生的，无法手动使用任意值来覆盖时间戳）。表服务使用此上次修改时间戳 (LMT) 来管理开放式并发。",
      "pos": [
        1073,
        1241
      ]
    },
    {
      "pos": [
        1244,
        1345
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>表服务 REST API 操作还返回它从上次修过时间戳 (LMT) 获得的 <bpt id=\"p1\">**</bpt>ETag<ept id=\"p1\">**</ept> 值。在本文档中，我们将互换使用术语 ETag 和 LMT，因为它们是指同一基础数据。"
    },
    {
      "content": "下面的示例演示了一个简单的表设计，该表用于存储员工和部门实体。本指南后面所示的许多示例都基于此简单设计。",
      "pos": [
        1347,
        1399
      ]
    },
    {
      "content": "PartitionKey",
      "pos": [
        1418,
        1430
      ]
    },
    {
      "content": "RowKey",
      "pos": [
        1440,
        1446
      ]
    },
    {
      "content": "Timestamp",
      "pos": [
        1456,
        1465
      ]
    },
    {
      "content": "Marketing",
      "pos": [
        1496,
        1505
      ]
    },
    {
      "content": "00001",
      "pos": [
        1515,
        1520
      ]
    },
    {
      "content": "2014-08-22T00:50:32Z",
      "pos": [
        1530,
        1550
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        1578,
        1587
      ]
    },
    {
      "content": "LastName",
      "pos": [
        1597,
        1605
      ]
    },
    {
      "content": "Age",
      "pos": [
        1615,
        1618
      ]
    },
    {
      "content": "Email",
      "pos": [
        1628,
        1633
      ]
    },
    {
      "content": "Don",
      "pos": [
        1654,
        1657
      ]
    },
    {
      "content": "Hall",
      "pos": [
        1667,
        1671
      ]
    },
    {
      "content": "34",
      "pos": [
        1681,
        1683
      ]
    },
    {
      "content": "donh@contoso.com",
      "pos": [
        1693,
        1709
      ]
    },
    {
      "content": "Marketing",
      "pos": [
        1745,
        1754
      ]
    },
    {
      "content": "00002",
      "pos": [
        1764,
        1769
      ]
    },
    {
      "content": "2014-08-22T00:50:34Z",
      "pos": [
        1779,
        1799
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        1827,
        1836
      ]
    },
    {
      "content": "LastName",
      "pos": [
        1846,
        1854
      ]
    },
    {
      "content": "Age",
      "pos": [
        1864,
        1867
      ]
    },
    {
      "content": "Email",
      "pos": [
        1877,
        1882
      ]
    },
    {
      "content": "Jun",
      "pos": [
        1903,
        1906
      ]
    },
    {
      "content": "Cao",
      "pos": [
        1916,
        1919
      ]
    },
    {
      "content": "47",
      "pos": [
        1929,
        1931
      ]
    },
    {
      "content": "junc@contoso.com",
      "pos": [
        1941,
        1957
      ]
    },
    {
      "content": "Marketing",
      "pos": [
        1993,
        2002
      ]
    },
    {
      "content": "Department",
      "pos": [
        2012,
        2022
      ]
    },
    {
      "content": "2014-08-22T00:50:30Z",
      "pos": [
        2032,
        2052
      ]
    },
    {
      "content": "DepartmentName",
      "pos": [
        2080,
        2094
      ]
    },
    {
      "content": "EmployeeCount",
      "pos": [
        2104,
        2117
      ]
    },
    {
      "content": "Marketing",
      "pos": [
        2138,
        2147
      ]
    },
    {
      "content": "153",
      "pos": [
        2157,
        2160
      ]
    },
    {
      "content": "Sales",
      "pos": [
        2202,
        2207
      ]
    },
    {
      "content": "00010",
      "pos": [
        2217,
        2222
      ]
    },
    {
      "content": "2014-08-22T00:50:44Z",
      "pos": [
        2232,
        2252
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        2280,
        2289
      ]
    },
    {
      "content": "LastName",
      "pos": [
        2299,
        2307
      ]
    },
    {
      "content": "Age",
      "pos": [
        2317,
        2320
      ]
    },
    {
      "content": "Email",
      "pos": [
        2330,
        2335
      ]
    },
    {
      "content": "Ken",
      "pos": [
        2356,
        2359
      ]
    },
    {
      "content": "Kwok",
      "pos": [
        2369,
        2373
      ]
    },
    {
      "content": "23",
      "pos": [
        2383,
        2385
      ]
    },
    {
      "content": "kenk@contoso.com",
      "pos": [
        2395,
        2411
      ]
    },
    {
      "pos": [
        2455,
        2799
      ],
      "content": "到目前为止，这看起来非常类似于关系数据库中的表，主要区别是有必需的列，以及能够在同一个表中存储多种实体类型。此外，每个用户定义的属性（如 <bpt id=\"p1\">**</bpt>FirstName<ept id=\"p1\">**</ept> 或 <bpt id=\"p2\">**</bpt>Age<ept id=\"p2\">**</ept>）还具有数据类型（如 integer 或 string），就像关系数据库中的列一样。虽然与关系数据库中不同，表服务的架构灵活性质意味着每个实体的属性不需要具有相同的数据类型。若要在单个属性中存储复杂数据类型，必须使用序列化格式（例如，JSON 或 XML）。有关表服务的详细信息（如支持的数据类型、支持的日期范围、命名规则和大小限制），请参阅 MSDN 上的<bpt id=\"p3\">[</bpt>了解表服务数据模型<ept id=\"p3\">](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)</ept>。"
    },
    {
      "pos": [
        2801,
        3036
      ],
      "content": "正如你将看到的，你所选的 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 是良好的表设计的基础。存储在表中的每个实体都必须具有唯一的 <bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>RowKey<ept id=\"p4\">**</ept>。与关系数据库表中的键一样，将对 <bpt id=\"p5\">**</bpt>PartitionKey<ept id=\"p5\">**</ept> 和 <bpt id=\"p6\">**</bpt>RowKey<ept id=\"p6\">**</ept> 值进行索引，以创建聚集索引，从而实现快速查找；但是，表服务不创建任何辅助索引，因此，这两个属性是仅有的两个编制索引的属性（后面所述的一些模式将显示如何解决这种明显的限制）。"
    },
    {
      "pos": [
        3038,
        3224
      ],
      "content": "表由一个或多个分区组成，正如你将看到的，你所做的很多设计决策都将围绕选择合适的 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 进行，以便优化你的解决方案。一个解决方案可以仅由单个表构成，该表包含组织成分区的所有实体，但通常一个解决方案将具有多个表。表可帮助你在逻辑上组织你的实体，帮助你使用访问控制列表管理对数据的访问，并且你可以使用单个存储操作删除整个表。"
    },
    {
      "content": "表分区",
      "pos": [
        3230,
        3233
      ]
    },
    {
      "pos": [
        3236,
        3456
      ],
      "content": "帐户名称、表名称和 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 共同标识表服务用于存储实体的存储服务中的分区。作为实体寻址方案的一部分，分区定义事务的作用域（请参阅下面的<bpt id=\"p2\">[</bpt>实体组事务<ept id=\"p2\">](#entity-group-transactions)</ept>），并形成表服务如何缩放的基础。有关分区的详细信息，请参阅 <bpt id=\"p3\">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id=\"p3\">](/documentation/articles/storage-scalability-targets)</ept>。"
    },
    {
      "pos": [
        3458,
        3585
      ],
      "content": "在表服务中，单个节点为一个或多个完整的分区提供服务，并且该服务可通过对节点上的分区进行动态负载平衡来进行缩放。如果某个节点负载过轻，表服务可以将该节点提供服务的分区范围<bpt id=\"p1\">*</bpt>拆分<ept id=\"p1\">*</ept>为不同节点；当流量下降时，该服务可将无操作的节点的分区范围<bpt id=\"p2\">*</bpt>合并<ept id=\"p2\">*</ept>为单个节点。"
    },
    {
      "pos": [
        3587,
        3806
      ],
      "content": "有关表服务内部细节的详细信息（特别是该服务如何管理分区），请参阅文章 <bpt id=\"p1\">[</bpt>Azure 存储：具有高度一致性的高可用云存储服务<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/11/20/windows-azure-storage-a-highly-available-cloud-storage-service-with-strong-consistency.aspx)</ept>。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"entity-group-transactions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 实体组事务",
      "pos": [
        3811,
        3855
      ]
    },
    {
      "content": "在表服务中，实体组事务 (EGT) 是唯一内置机制，用于对多个实体执行原子更新。在一些文档中，EGT 也称为<bpt id=\"p1\">*</bpt>批处理事务<ept id=\"p1\">*</ept>。EGT 只能应用于存储在同一分区（共享给定表中的同一分区键）的实体，因此每当你需要对多个实体执行原子事务行为时，都需要确保这些实体位于同一分区。这通常是将多个实体类型保存在同一个表（和分区）中，而不是对不同实体类型使用多个表的原因。单个 EGT 最多可应用于 100 个实体。如果你提交多个用于处理的并发 EGT，请确保不在 EGT 共用实体上操作这些 EGT，这一点很重要，否则处理会延迟。",
      "pos": [
        3856,
        4114
      ]
    },
    {
      "pos": [
        4116,
        4443
      ],
      "content": "EGT 还为你引入了潜在的权衡以便在设计中进行评估：使用更多分区将增加应用程序的可伸缩性，因为 Azure 有更多机会对节点的请求进行负载平衡，但这可能会限制应用程序执行原子事务和维护数据高一致性的能力。此外，在分区级别还有特定的可伸缩性目标，这些目标可能会限制你可以对单个节点预期的事务吞吐量：有关 Azure 存储帐户和表服务的可伸缩性目标的详细信息，请参阅 MSDN 上的 <bpt id=\"p1\">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id=\"p1\">](/documentation/articles/storage-scalability-targets/)</ept>。本指南的后面部分将讨论各种设计策略，这些策略可帮助你管理此类权衡，并讨论如何根据客户端应用程序的特定要求最好地选择分区键。"
    },
    {
      "content": "容量注意事项",
      "pos": [
        4451,
        4457
      ]
    },
    {
      "content": "下表包括设计表服务解决方案时要注意的一些关键值：",
      "pos": [
        4458,
        4482
      ]
    },
    {
      "content": "Azure 存储帐户的总容量",
      "pos": [
        4485,
        4499
      ]
    },
    {
      "content": "500 TB",
      "pos": [
        4500,
        4506
      ]
    },
    {
      "content": "Azure 存储帐户中表的个数",
      "pos": [
        4561,
        4576
      ]
    },
    {
      "content": "仅受存储帐户的容量限制",
      "pos": [
        4579,
        4590
      ]
    },
    {
      "content": "表中的分区个数",
      "pos": [
        4594,
        4601
      ]
    },
    {
      "content": "仅受存储帐户的容量限制",
      "pos": [
        4604,
        4615
      ]
    },
    {
      "content": "分区中实体的个数",
      "pos": [
        4619,
        4627
      ]
    },
    {
      "content": "仅受存储帐户的容量限制",
      "pos": [
        4630,
        4641
      ]
    },
    {
      "content": "单个实体的大小",
      "pos": [
        4644,
        4651
      ]
    },
    {
      "pos": [
        4654,
        4723
      ],
      "content": "最大可为 1 MB，最多具有 255 个属性（包括<bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>Timestamp<ept id=\"p3\">**</ept>）"
    },
    {
      "pos": [
        4727,
        4747
      ],
      "content": "<bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 的大小"
    },
    {
      "content": "大小最大为 1 KB 的字符串",
      "pos": [
        4750,
        4765
      ]
    },
    {
      "pos": [
        4770,
        4784
      ],
      "content": "<bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 的大小"
    },
    {
      "content": "大小最大为 1 KB 的字符串",
      "pos": [
        4787,
        4802
      ]
    },
    {
      "content": "实体组事务的大小",
      "pos": [
        4806,
        4814
      ]
    },
    {
      "content": "一个事务最多可包含 100 个实体，并且负载大小必须小于 4 MB。EGT 只能更新一次实体。",
      "pos": [
        4817,
        4864
      ]
    },
    {
      "pos": [
        4868,
        4959
      ],
      "content": "有关详细信息，请参阅 MSDN 上的<bpt id=\"p1\">[</bpt>了解表服务数据模型<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)</ept>。"
    },
    {
      "content": "成本注意事项",
      "pos": [
        4965,
        4971
      ]
    },
    {
      "pos": [
        4974,
        5129
      ],
      "content": "表存储的价格相对便宜，但在评估任何使用表服务的解决方案时，应同时针对容量使用情况和事务数量进行成本估算。但是，在许多情况下，为提高解决方案的性能或可伸缩性，存储非规范化或重复的数据是可采取的有效方法。有关定价的详细信息，请参阅<bpt id=\"p1\">[</bpt>存储定价详细信息<ept id=\"p1\">](/home/features/storage/#price)</ept>。"
    },
    {
      "content": "比较 Azure 表和 SQL Azure",
      "pos": [
        5135,
        5156
      ]
    },
    {
      "pos": [
        5159,
        5302
      ],
      "content": "有关 Azure SQL 数据库（关系数据库服务）与表服务之间的比较，请参阅 MSDN 上的 <bpt id=\"p1\">[</bpt>Azure 表存储和 Azure SQL 数据库 - 比较和对照<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/jj553018.aspx)</ept>。"
    },
    {
      "content": "表设计准则",
      "pos": [
        5309,
        5314
      ]
    },
    {
      "content": "这些列表汇总了一些设计表时需要牢记的重要原则，本指南稍后会更详细地对其进行解释。本指南的内容与设计关系数据库通常所遵循的指导原则大不相同。",
      "pos": [
        5317,
        5386
      ]
    },
    {
      "pos": [
        5388,
        5406
      ],
      "content": "将表服务解决方案设计为高效<bpt id=\"p1\">*</bpt>读取<ept id=\"p1\">*</ept>："
    },
    {
      "pos": [
        5412,
        5497
      ],
      "content": "<bpt id=\"p1\">***</bpt>针对查询大量读取应用程序进行设计。<ept id=\"p1\">***</ept> 设计表时，在考虑将如何更新实体之前，请先考虑将执行的查询（特别是延迟敏感的查询）。这通常会产生一个高效且高性能的解决方案。"
    },
    {
      "pos": [
        5504,
        5560
      ],
      "content": "<bpt id=\"p1\">***</bpt>在查询中指定 PartitionKey 和 RowKey。<ept id=\"p1\">***</ept> <bpt id=\"p2\">*</bpt>点查询<ept id=\"p2\">*</ept>此类查询是最高效的表服务查询。"
    },
    {
      "pos": [
        5567,
        5625
      ],
      "content": "<bpt id=\"p1\">***</bpt>请考虑存储实体的重复副本。<ept id=\"p1\">***</ept> 表存储比较便宜，因此请考虑多次存储同一实体（使用不同键）以实现更高效的查询。"
    },
    {
      "pos": [
        5632,
        5701
      ],
      "content": "<bpt id=\"p1\">***</bpt>请考虑反规范你的数据。<ept id=\"p1\">***</ept> 表存储比较便宜，因此请考虑反规范化你的数据。例如，存储摘要实体，以便对聚合数据的查询只需访问单个实体。"
    },
    {
      "pos": [
        5708,
        5786
      ],
      "content": "<bpt id=\"p1\">***</bpt>使用复合键值。<ept id=\"p1\">***</ept> 你具有的唯一键是 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept>。例如，使用复合键值来启用对实体的备用键控访问路径。"
    },
    {
      "pos": [
        5793,
        5837
      ],
      "content": "<bpt id=\"p1\">***</bpt>使用查询投影。<ept id=\"p1\">***</ept> 你可以通过使用只选择所需字段的查询来减少网络上传输的数据量。"
    },
    {
      "pos": [
        5841,
        5859
      ],
      "content": "将表服务解决方案设计为高效<bpt id=\"p1\">*</bpt>写入<ept id=\"p1\">*</ept>："
    },
    {
      "pos": [
        5865,
        5904
      ],
      "content": "<bpt id=\"p1\">***</bpt>不要创建热分区。<ept id=\"p1\">***</ept> 选择在任何时间点都能够将请求散布到多个分区的键。"
    },
    {
      "pos": [
        5911,
        5953
      ],
      "content": "<bpt id=\"p1\">***</bpt>避免出现流量高峰。<ept id=\"p1\">***</ept> 使流量在合理的时间段内均匀分布，并避免出现流量高峰。"
    },
    {
      "pos": [
        5958,
        6032
      ],
      "content": "<bpt id=\"p1\">***</bpt>不一定为实体的每种类型都创建一个单独的实体。<ept id=\"p1\">***</ept> 当你需要对多种实体类型执行原子事务操作时，可以将这些实体类型存储在同一个表的同一个分区中。"
    },
    {
      "pos": [
        6037,
        6092
      ],
      "content": "<bpt id=\"p1\">***</bpt>请考虑你必须实现的最大吞吐量。<ept id=\"p1\">***</ept> 必须了解表服务的可伸缩性目标，并确保你的设计不会使你超出这些目标。"
    },
    {
      "content": "在阅读本指南时，你将会看到将所有这些原则付诸实践的示例。",
      "pos": [
        6096,
        6124
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"design-for-querying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 针对查询的设计",
      "pos": [
        6128,
        6168
      ]
    },
    {
      "content": "表服务解决方案可能需要进行大量读取操作和/或大量写入操作。本部分重点介绍在将表服务设计为支持高效读取操作时需要牢记的事项。通常，支持高效读取操作的设计对于写入操作来说也是高效的。但是，在设计以支持写入操作时还有一些其他注意事项需要牢记，这些注意事项将在下一部分<bpt id=\"p1\">[</bpt>针对数据修改的设计<ept id=\"p1\">](#design-for-data-modification)</ept>中进行讨论。",
      "pos": [
        6171,
        6349
      ]
    },
    {
      "content": "将表服务解决方案设计为能够高效读取数据的良好起点是问“我的应用程序将需要执行哪些查询来从表服务中检索它所需的数据？”",
      "pos": [
        6351,
        6409
      ]
    },
    {
      "pos": [
        6412,
        6510
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>使用表服务时，预先将设计做正确很重要，因为以后进行更改会很难并且开销会很高。例如，在关系数据库中，通常只需通过向现有数据库添加索引就可以解决性能问题：而这不是表服务的选项。"
    },
    {
      "content": "本部分重点介绍在设计要查询的表时必须解决的关键问题。本部分涉及的主题包括：",
      "pos": [
        6512,
        6549
      ]
    },
    {
      "content": "所选的 PartitionKey 和 RowKey 如何影响查询性能",
      "pos": [
        6554,
        6588
      ]
    },
    {
      "content": "选择适当的 PartitionKey",
      "pos": [
        6664,
        6682
      ]
    },
    {
      "content": "使用表服务的键值存储优化查询",
      "pos": [
        6726,
        6740
      ]
    },
    {
      "content": "对表服务的键值存储中的数据进行排序",
      "pos": [
        6811,
        6828
      ]
    },
    {
      "pos": [
        6891,
        7007
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"how-your-choice-of-partitionkey-and-rowkey-impacts-query-performance\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 所选的 PartitionKey 和 RowKey 如何影响查询性能"
    },
    {
      "pos": [
        7011,
        7067
      ],
      "content": "下面的示例假定表服务使用以下结构存储员工实体（为清楚起见，大多数示例将省略 <bpt id=\"p1\">**</bpt>Timestamp<ept id=\"p1\">**</ept> 属性）："
    },
    {
      "content": "列名称",
      "pos": [
        7071,
        7074
      ]
    },
    {
      "content": "数据类型",
      "pos": [
        7078,
        7082
      ]
    },
    {
      "pos": [
        7115,
        7137
      ],
      "content": "<bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept>（部门名称）"
    },
    {
      "content": "String",
      "pos": [
        7138,
        7144
      ]
    },
    {
      "pos": [
        7147,
        7164
      ],
      "content": "<bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept>（员工 ID）"
    },
    {
      "content": "String",
      "pos": [
        7165,
        7171
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        7176,
        7185
      ]
    },
    {
      "content": "String",
      "pos": [
        7188,
        7194
      ]
    },
    {
      "content": "LastName",
      "pos": [
        7199,
        7207
      ]
    },
    {
      "content": "String",
      "pos": [
        7210,
        7216
      ]
    },
    {
      "content": "Age",
      "pos": [
        7221,
        7224
      ]
    },
    {
      "content": "Integer",
      "pos": [
        7227,
        7234
      ]
    },
    {
      "content": "EmailAddress",
      "pos": [
        7239,
        7251
      ]
    },
    {
      "content": "String",
      "pos": [
        7254,
        7260
      ]
    },
    {
      "pos": [
        7263,
        7486
      ],
      "content": "前面的章节 <bpt id=\"p1\">[</bpt>Azure 表服务概述<ept id=\"p1\">](#azure-table-service-overview)</ept>介绍了对查询设计有直接影响的 Azure 表服务的一些主要功能。这些功能产生了以下设计表服务查询的通用准则。请注意，下面的示例所使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id=\"p2\">[</bpt>查询实体<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。"
    },
    {
      "pos": [
        7492,
        7649
      ],
      "content": "<bpt id=\"p1\">***</bpt>点查询<ept id=\"p1\">***</ept>是一种最高效的查找，可用于并建议用于大容量查找或要求最低延迟的查找。此类查询可以通过指定 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept> 值使用索引非常高效地查找单个实体。例如：$filter=(PartitionKey eq 'Sales') and (RowKey eq '2')"
    },
    {
      "pos": [
        7656,
        7844
      ],
      "content": "第二好的是<bpt id=\"p1\">***</bpt>范围查询<ept id=\"p1\">***</ept>，它使用 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept>，并对某一范围的 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept> 值进行筛选以返回多个实体。<bpt id=\"p4\">**</bpt>PartitionKey<ept id=\"p4\">**</ept> 值确定特定分区，<bpt id=\"p5\">**</bpt>RowKey<ept id=\"p5\">**</ept> 值确定该分区中的实体子集。例如：$filter=PartitionKey eq 'Sales' and RowKey ge 'S' and RowKey lt 'T'"
    },
    {
      "pos": [
        7851,
        8013
      ],
      "content": "第三好的是<bpt id=\"p1\">***</bpt>分区扫描<ept id=\"p1\">***</ept>，它使用 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept>，并对另一个非键属性进行筛选，并可能会返回多个实体。<bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 值确定特定分区，而属性值将选择该分区中的实体子集。例如：$filter=PartitionKey eq 'Sales' and LastName eq 'Smith'"
    },
    {
      "pos": [
        8020,
        8146
      ],
      "content": "<bpt id=\"p1\">***</bpt>表扫描<ept id=\"p1\">***</ept>不包括 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 并且非常低效，因为它会依次搜索构成表的所有分区，以查找所有匹配的实体。它将执行表扫描而不管你的筛选器是否使用 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept>。例如：$filter=LastName eq 'Jones'"
    },
    {
      "pos": [
        8153,
        8247
      ],
      "content": "返回多个实体的查询将按 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 顺序返回实体。若要避免对客户端中的实体进行重新排序，请选择定义了最常见排序顺序的 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        8251,
        8393
      ],
      "content": "请注意，使用“<bpt id=\"p1\">**</bpt>or<ept id=\"p1\">**</ept>”指定基于 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值的筛选器将导致分区扫描，而不会视为范围查询。因此，应避免使用筛选器 （如查询：$filter=PartitionKey eq 'Sales' and (RowKey eq '121' or RowKey eq '322')"
    },
    {
      "content": "有关使用存储客户端库执行高效查询的客户端代码的示例，请参阅：",
      "pos": [
        8395,
        8425
      ]
    },
    {
      "content": "使用存储客户端库检索单个实体",
      "pos": [
        8432,
        8446
      ]
    },
    {
      "content": "使用 LINQ 检索多个实体",
      "pos": [
        8515,
        8529
      ]
    },
    {
      "content": "服务器端投影",
      "pos": [
        8578,
        8584
      ]
    },
    {
      "content": "有关可以处理存储在同一个表中的多个实体类型的客户端代码的示例，请参阅：",
      "pos": [
        8614,
        8649
      ]
    },
    {
      "content": "处理异类实体类型",
      "pos": [
        8656,
        8664
      ]
    },
    {
      "pos": [
        8714,
        8782
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"choosing-an-appropriate-partitionkey\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 选择适当的 PartitionKey"
    },
    {
      "pos": [
        8786,
        8856
      ],
      "content": "所选的 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 应该权衡启用 EGT（以确保一致性）的需求与将实体分布到多个分区（以确保可伸缩的解决方案）的需求。"
    },
    {
      "content": "一种极端做法是，可以将所有实体都存储在单个分区，但这可能会限制解决方案的可伸缩性并且会使表服务无法对请求进行负载平衡。另一种极端做法是，可以每个分区存储一个实体，这样具有高可伸缩性并且使得表服务能够对请求进行负载平衡，但这样你将无法使用实体组事务。",
      "pos": [
        8858,
        8982
      ]
    },
    {
      "pos": [
        8984,
        9081
      ],
      "content": "理想的 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 是这样的，你可以使用高效查询，并具有足够多的分区以确保你的解决方案是可扩展的。通常，你会发现你的实体将具有合适的属性，可以将你的实体分布到足够多的分区。"
    },
    {
      "pos": [
        9084,
        9224
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>例如，在存储有关用户或员工的信息的系统中，UserID 可以是一个好的 PartitionKey。你可拥有多个使用某个给定 UserID 作为分区键的实体。存储有关用户数据的每个实体分组到单个分区，因此通过实体组事务可访问这些实体，同时仍具有高度可伸缩性。"
    },
    {
      "pos": [
        9226,
        9324
      ],
      "content": "在选择 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 时还有一些与如何插入、更新和删除实体相关的其他注意事项：请参阅下面的<bpt id=\"p2\">[</bpt>针对数据修改的设计<ept id=\"p2\">](#design-for-data-modification)</ept>。"
    },
    {
      "pos": [
        9329,
        9415
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"optimizing-queries-with-a-key-value-store-for-the-table-service\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 针对表服务优化查询"
    },
    {
      "pos": [
        9419,
        9544
      ],
      "content": "表服务将使用单个聚集索引中的 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值自动为你的实体编制索引，这就是点查询使用起来最高效的原因。但是，除了 <bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>RowKey<ept id=\"p4\">**</ept> 上的聚集索引外没有其他索引。"
    },
    {
      "pos": [
        9546,
        9672
      ],
      "content": "许多设计必须满足要求，才能允许根据多个条件查找实体。例如，根据电子邮件、员工 ID 或姓氏查找员工实体。<bpt id=\"p1\">[</bpt>表设计模式<ept id=\"p1\">](#table-design-patterns)</ept>这部分中的以下模式满足这些类型的要求，并说明了解决表服务不提供辅助索引这一事实的方法："
    },
    {
      "pos": [
        9678,
        9812
      ],
      "content": "<bpt id=\"p1\">[</bpt>内分区的第二索引模式<ept id=\"p1\">](#intra-partition-secondary-index-pattern)</ept> - 存储使用不同 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept> 值来替换排序顺序。"
    },
    {
      "pos": [
        9819,
        9949
      ],
      "content": "<bpt id=\"p1\">[</bpt>内分区的第二索引模式<ept id=\"p1\">](#inter-partition-secondary-index-pattern)</ept> - 存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值来替换排序顺序。"
    },
    {
      "pos": [
        9956,
        10013
      ],
      "content": "<bpt id=\"p1\">[</bpt>索引实体模式<ept id=\"p1\">](#index-entities-pattern)</ept> - 维护索引实体以启用返回实体列表的高效搜索。"
    },
    {
      "pos": [
        10020,
        10100
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"sorting-data-in-a-key-value-store-in-the-table-service\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 对表服务中的数据进行排序"
    },
    {
      "pos": [
        10104,
        10258
      ],
      "content": "表服务基于 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 然后按 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 以升序排序返回实体。这些键是字符串值，以确保数字值正确排序，应将值转换为固定长度并使用零进行填充。例如，如果用作 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept> 的员工 ID 值是个整数值，则应将员工 ID <bpt id=\"p4\">**</bpt>123<ept id=\"p4\">**</ept> 转换为 <bpt id=\"p5\">**</bpt>00000123<ept id=\"p5\">**</ept>。"
    },
    {
      "pos": [
        10260,
        10357
      ],
      "content": "许多应用程序要求使用按不同顺序排序的数据：例如，按名称或按加入日期对员工进行排序。<bpt id=\"p1\">[</bpt>表设计模式<ept id=\"p1\">](#table-design-patterns)</ept>这部分中的以下模式解决如何为你的实体替换排序顺序："
    },
    {
      "pos": [
        10363,
        10485
      ],
      "content": "<bpt id=\"p1\">[</bpt>内分区的第二索引模式<ept id=\"p1\">](#intra-partition-secondary-index-pattern)</ept>存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 RowKey 值替换排序顺序。"
    },
    {
      "pos": [
        10492,
        10614
      ],
      "content": "<bpt id=\"p1\">[</bpt>内分区的第二索引模式<ept id=\"p1\">](#inter-partition-secondary-index-pattern)</ept>存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不桶 RowKey 值替换排序顺序。"
    },
    {
      "pos": [
        10619,
        10696
      ],
      "content": "<bpt id=\"p1\">[</bpt>日志结尾模式<ept id=\"p1\">](#log-tail-pattern)</ept> - 通过使用以日期时间倒序排序的 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值检索最近添加到分区中的 <bpt id=\"p3\">*</bpt>n<ept id=\"p3\">*</ept> 个实体。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"design-for-data-modification\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 针对数据修改的设计",
      "pos": [
        10702,
        10753
      ]
    },
    {
      "content": "本部分重点介绍优化插入、更新和删除的设计注意事项。在某些情况下，你将需要在针对查询优化的设计与针对数据修改优化的设计之间进行权衡，就像你在设计关系数据库时要做的那样（尽管在关系数据库中，管理设计权衡的方法是不同的）。<bpt id=\"p1\">[</bpt>表设计模式<ept id=\"p1\">](#table-design-patterns)</ept>这部分介绍了表服务的一些详细设计模式，并着重介绍了其中一些权衡。在实践中，你会发现许多针对查询实体优化的设计对于修改实体也能很好地工作。",
      "pos": [
        10754,
        10961
      ]
    },
    {
      "content": "优化插入、更新和删除操作的性能",
      "pos": [
        10967,
        10982
      ]
    },
    {
      "pos": [
        10986,
        11200
      ],
      "content": "若要更新或删除某个实体，必须能够通过使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值来确定该实体。就这一点来说，你选择的用于修改实体的 <bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>RowKey<ept id=\"p4\">**</ept> 应遵循为支持点查询所选择的类似条件，因为你希望尽可能高效地确定实体。你不希望使用效率低下的分区或表扫描来查找实体，以便发现所需的 <bpt id=\"p5\">**</bpt>PartitionKey<ept id=\"p5\">**</ept> 和 <bpt id=\"p6\">**</bpt>RowKey<ept id=\"p6\">**</ept> 值来更新或删除该实体。"
    },
    {
      "pos": [
        11202,
        11261
      ],
      "content": "<bpt id=\"p1\">[</bpt>表设计模式<ept id=\"p1\">](#table-design-patterns)</ept>这部分中的以下模式解决了优化性能或插入、更新和删除操作："
    },
    {
      "pos": [
        11267,
        11357
      ],
      "content": "<bpt id=\"p1\">[</bpt>高容量删除模式<ept id=\"p1\">](#high-volume-delete-pattern)</ept> - 通过将要同时删除的所有实体都存储在它们自己的单独表中来实现删除大量实体；通过删除表来删除这些实体。"
    },
    {
      "pos": [
        11364,
        11430
      ],
      "content": "<bpt id=\"p1\">[</bpt>数据系列模式<ept id=\"p1\">](#data-series-pattern)</ept> - 将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。"
    },
    {
      "pos": [
        11437,
        11500
      ],
      "content": "<bpt id=\"p1\">[</bpt>宽实体模式<ept id=\"p1\">](#wide-entities-pattern)</ept> - 使用多个物理实体来存储具有多于 252 个属性的逻辑实体。"
    },
    {
      "pos": [
        11507,
        11560
      ],
      "content": "<bpt id=\"p1\">[</bpt>大实体模式<ept id=\"p1\">](#large-entities-pattern)</ept> - 使用 blob 存储来存储大属性值。"
    },
    {
      "content": "确保存储实体中的一致性",
      "pos": [
        11568,
        11579
      ]
    },
    {
      "content": "影响你选择用于优化数据修改的键的其他关键因素是如何通过使用原子事务来确保一致性。你只能使用 EGT 作用于存储在同一个分区中的实体。",
      "pos": [
        11583,
        11649
      ]
    },
    {
      "pos": [
        11651,
        11702
      ],
      "content": "<bpt id=\"p1\">[</bpt>表设计模式<ept id=\"p1\">](#table-design-patterns)</ept>这一节中的以下模式解决了管理一致性问题："
    },
    {
      "pos": [
        11708,
        11842
      ],
      "content": "<bpt id=\"p1\">[</bpt>内分区的第二索引模式<ept id=\"p1\">](#intra-partition-secondary-index-pattern)</ept> - 存储使用不同 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept> 值来替换排序顺序。"
    },
    {
      "pos": [
        11849,
        11979
      ],
      "content": "<bpt id=\"p1\">[</bpt>内分区的第二索引模式<ept id=\"p1\">](#inter-partition-secondary-index-pattern)</ept> - 存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值来替换排序顺序。"
    },
    {
      "pos": [
        11986,
        12080
      ],
      "content": "<bpt id=\"p1\">[</bpt>最终一致性事务模式<ept id=\"p1\">](#eventually-consistent-transactions-pattern)</ept> - 通过使用 Azure 队列跨分区边界或存储系统边界启用最终一致的行为。"
    },
    {
      "pos": [
        12085,
        12142
      ],
      "content": "<bpt id=\"p1\">[</bpt>索引实体模式<ept id=\"p1\">](#index-entities-pattern)</ept> - 维护索引实体以启用返回实体列表的高效搜索。"
    },
    {
      "pos": [
        12149,
        12225
      ],
      "content": "<bpt id=\"p1\">[</bpt>反规范模式<ept id=\"p1\">](#denormalization-pattern)</ept> - 将相关数据组合在一起放置在单个实体中，使你能够使用单个点查询检索所有所需的数据。"
    },
    {
      "pos": [
        12232,
        12298
      ],
      "content": "<bpt id=\"p1\">[</bpt>数据系列模式<ept id=\"p1\">](#data-series-pattern)</ept> - 将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。"
    },
    {
      "pos": [
        12302,
        12354
      ],
      "content": "有关实体组事务的详细信息，请参阅<bpt id=\"p1\">[</bpt>实体组事务<ept id=\"p1\">](#entity-group-transactions)</ept>。"
    },
    {
      "content": "确保用于高效修改的设计便于高效查询",
      "pos": [
        12360,
        12377
      ]
    },
    {
      "pos": [
        12381,
        12506
      ],
      "content": "在许多情况下，用于高效查询的设计会产生高效修改的效果，但你应始终评估这是否适用于你的特定方案。<bpt id=\"p1\">[</bpt>表设计模式<ept id=\"p1\">](#table-design-patterns)</ept>这部分的某些模式显式评估了查询实体和修改实体之间的权衡利弊，你应始终考虑到每种类型操作的数目。"
    },
    {
      "pos": [
        12508,
        12579
      ],
      "content": "<bpt id=\"p1\">[</bpt>表设计模式<ept id=\"p1\">](#table-design-patterns)</ept>这部分中的以下模式实施针对高效查询的设计与针对高效数据修改的设计之间的折衷方案："
    },
    {
      "pos": [
        12585,
        12654
      ],
      "content": "<bpt id=\"p1\">[</bpt>复合键模式<ept id=\"p1\">](#compound-key-pattern)</ept> - 使用复合 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值可让客户端使用单个点查询查找相关数据。"
    },
    {
      "pos": [
        12661,
        12738
      ],
      "content": "<bpt id=\"p1\">[</bpt>日志结尾模式<ept id=\"p1\">](#log-tail-pattern)</ept> - 通过使用以日期时间倒序排序的 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值检索最近添加到分区中的 <bpt id=\"p3\">*</bpt>n<ept id=\"p3\">*</ept> 个实体。"
    },
    {
      "content": "对表数据进行加密",
      "pos": [
        12745,
        12753
      ]
    },
    {
      "content": ".NET Azure 存储空间客户端库支持对插入和替换操作的字符串实体属性进行加密。加密的字符串作为二进制属性存储在服务中，并在解密之后转换回字符串。",
      "pos": [
        12764,
        12839
      ]
    },
    {
      "content": "对于表，除了加密策略以外，用户还必须指定要加密的属性。可以通过指定 [EncryptProperty] 特性（适用于从 TableEntity 派生的 POCO 实体）或在请求选项中指定加密解析程序来完成此操作。加密解析程序是一个委托，它接受分区键、行键和属性名称并返回一个布尔值以指示是否应加密该属性。在加密过程中，客户端库将使用此信息来确定是否应在写入到网络时加密属性。该委托还可以围绕如何加密属性来实现逻辑的可能性。（例如，如果 X，则加密属性 A，否则加密属性 A 和 B。） 请注意，在读取或查询实体时，不需要提供此信息。",
      "pos": [
        12841,
        13107
      ]
    },
    {
      "content": "请注意，当前不支持合并。由于属性的子集可能以前已使用不同的密钥加密，因此只合并新属性和更新元数据将导致数据丢失。合并需要进行额外的服务调用以从服务中读取预先存在的实体，或者需要为属性使用一个新密钥，由于性能方面的原因，这两种方案都不适用。",
      "pos": [
        13109,
        13228
      ]
    },
    {
      "pos": [
        13230,
        13336
      ],
      "content": "有关对表数据进行加密的信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 存储空间的客户端加密和 Azure 密钥保管库<ept id=\"p1\">](/documentation/articles/storage-client-side-encryption)</ept>。"
    },
    {
      "pos": [
        13340,
        13382
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"modelling-relationships\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 为关系建模"
    },
    {
      "content": "构建域模型是复杂系统设计中的一个关键步骤。通常，你通过建模过程来确定实体以及实体之间的关系，并将它作为了解业务域并通知设计有关系统的信息的方式。本部分重点介绍如何将域模型中找到的一些常见关系类型转换为表服务的设计。从逻辑数据模型映射到基于 NoSQL 的物理数据模型的过程与在设计关系数据库时使用的过程大不相同。关系数据库设计通常采用数据规范化过程（针对最大限度减少冗余进行优化）和声明性查询功能（提取了数据库工作原理的实现方式）。",
      "pos": [
        13384,
        13600
      ]
    },
    {
      "pos": [
        13605,
        13649
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"one-to-many-relationships\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 一对多关系"
    },
    {
      "content": "业务域对象之间的一对多关系非常频繁地发生：例如，一个部门有许多员工。有多种方法可在表服务中实现一对多关系，每种方法都有与特定方案相关的利弊。",
      "pos": [
        13653,
        13723
      ]
    },
    {
      "content": "请考虑这样一个示例：一个具有数万个部门和员工实体的大型跨国公司，其中每个部门都有许多员工，每个员工都与一个特定部门相关联。一种方法是存储不同的部门和员工实体，如下所示：",
      "pos": [
        13725,
        13809
      ]
    },
    {
      "pos": [
        13819,
        13871
      ],
      "content": "此示例展示了类型之间基于 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 值的隐式一对多关系。每个部门可以有许多员工。"
    },
    {
      "content": "此示例还显示了同一个分区中的部门实体及其相关的员工实体。你可以选择对不同实体类型使用不同分区、表或甚至不同存储帐户。",
      "pos": [
        13873,
        13931
      ]
    },
    {
      "content": "另一种方法是使数据非规范化，并只存储具有非规范化部门数据的员工实体，如下面的示例所示。在此特定方案中，如果你要求能够更改部门经理的详细信息，则此非规范化方法可能不是最佳方法，因为要这样做，需要更新部门中的每个员工。",
      "pos": [
        13933,
        14040
      ]
    },
    {
      "pos": [
        14050,
        14101
      ],
      "content": "有关详细信息，请参阅本指南后面的<bpt id=\"p1\">[</bpt>反规范化模式<ept id=\"p1\">](#denormalization-pattern)</ept>。"
    },
    {
      "content": "下表总结了上述每种方法对于存储具有一对多关系的员工和部门的优缺点。你还应考虑你希望执行各种操作的频率：如果你的设计中包含的代价高昂的操作很少发生，则这可能是可以接受的。",
      "pos": [
        14103,
        14187
      ]
    },
    {
      "content": "方法",
      "pos": [
        14206,
        14208
      ]
    },
    {
      "content": "优点",
      "pos": [
        14218,
        14220
      ]
    },
    {
      "content": "缺点",
      "pos": [
        14230,
        14232
      ]
    },
    {
      "content": "不同的实体类型、同一分区、同一个表",
      "pos": [
        14253,
        14270
      ]
    },
    {
      "content": "可以使用单个操作来更新部门实体。",
      "pos": [
        14290,
        14306
      ]
    },
    {
      "content": "如果你需要在更新/插入/删除员工实体时修改部门实体，则可以使用 EGT 来保持一致性。例如，如果维护每个部门的部门员工计数。",
      "pos": [
        14316,
        14378
      ]
    },
    {
      "content": "你可能需要针对一些客户端活动同时检索员工和部门实体。",
      "pos": [
        14410,
        14436
      ]
    },
    {
      "content": "存储操作发生在同一个分区。在事务量很大时，这可能会产生热点。",
      "pos": [
        14446,
        14476
      ]
    },
    {
      "content": "不能使用 EGT 将员工移到新部门。",
      "pos": [
        14486,
        14504
      ]
    },
    {
      "content": "不同的实体类型、不同的分区或表或存储帐户",
      "pos": [
        14537,
        14557
      ]
    },
    {
      "content": "可以使用单个操作更新部门实体或员工实体。",
      "pos": [
        14577,
        14597
      ]
    },
    {
      "content": "在事务量很高时，这可能有助于将负载分布到多个分区。",
      "pos": [
        14607,
        14632
      ]
    },
    {
      "content": "你可能需要针对一些客户端活动同时检索员工和部门实体。",
      "pos": [
        14664,
        14690
      ]
    },
    {
      "content": "在更新/插入/删除员工以及更新部门时，不能使用 EGT 来保持一致性。例如，更新部门实体中的员工计数。",
      "pos": [
        14700,
        14751
      ]
    },
    {
      "content": "不能使用 EGT 将员工移到新部门。",
      "pos": [
        14761,
        14779
      ]
    },
    {
      "content": "非规范化为单个实体类型",
      "pos": [
        14812,
        14823
      ]
    },
    {
      "content": "使用单个请求即可检索所需的所有信息。",
      "pos": [
        14843,
        14861
      ]
    },
    {
      "content": "如果你需要更新部门信息（这将需要更新部门中的所有员工），则保持一致性的开销会很大。",
      "pos": [
        14893,
        14934
      ]
    },
    {
      "content": "如何在这些选项中进行选择，以及哪些优点和缺点最重要，取决于特定应用程序方案。例如，你修改部门实体的频率；你的所有员工查询是否都需要附加部门信息；你有多接近对分区或存储帐户的可伸缩性限制？",
      "pos": [
        14968,
        15061
      ]
    },
    {
      "content": "一对一关系",
      "pos": [
        15067,
        15072
      ]
    },
    {
      "pos": [
        15076,
        15289
      ],
      "content": "域模型可能包括实体之间的一对一关系。如果你需要在表服务中实现一对一关系，还必须选择在需要检索两个相关的实体时如何链接这两个实体。此链接可以是隐式的（基于键值中的约定），也可是显式的（通过在每个实体中以 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值的形式存储指向其相关实体的链接。有关是否应将相关实体存储在同一个分区中的讨论，请参阅<bpt id=\"p3\">[</bpt>一对多关系<ept id=\"p3\">](#one-to-many-relationships)</ept>这部分。"
    },
    {
      "content": "请注意，还有可能引导你在表服务中实现一对一关系的实现注意事项：",
      "pos": [
        15291,
        15322
      ]
    },
    {
      "pos": [
        15328,
        15383
      ],
      "content": "处理大实体（有关详细信息，请参阅<bpt id=\"p1\">[</bpt>使用大实体<ept id=\"p1\">](#working-with-large-entities)</ept>）。"
    },
    {
      "pos": [
        15390,
        15476
      ],
      "content": "实施访问控制（有关详细信息，请参阅<bpt id=\"p1\">[</bpt>使用共享访问签名控制访问权限<ept id=\"p1\">](#controlling-access-with-shared-access-signatures)</ept>）。"
    },
    {
      "content": "在客户端中联接",
      "pos": [
        15484,
        15491
      ]
    },
    {
      "content": "尽管可通过多种方式在表服务中为关系建模，但你不应忘记使用表服务的两个主要原因是可伸缩性和性能。如果你发现你要建模的多个关系损害解决方案的性能和可伸缩性，则应问自己是否有必要在表设计中构建所有数据关系。如果你让客户端应用程序执行任何必要的联接，则可能能够简化设计并改进解决方案的可伸缩性和性能。",
      "pos": [
        15495,
        15641
      ]
    },
    {
      "content": "例如，如果你的小型表包含不经常更改的数据，则可以检索一次此数据并将其缓存在客户端。这可以避免为检索相同数据而进行的重复往返操作。在本指南中我们已查看过的示例中，小型组织中的部门集可能很小并且不经常更改，使它成为合适的数据候选项，客户端应用程序可以下载一次该数据并将其缓存为查找数据。",
      "pos": [
        15643,
        15784
      ]
    },
    {
      "pos": [
        15789,
        15832
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"inheritance-relationships\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 继承关系"
    },
    {
      "pos": [
        15836,
        15934
      ],
      "content": "如果你的客户端应用程序使用一组构成继承关系的的类来表示业务实体，则可以轻松地在表服务中持久保存这些实体。例如，你可能会在客户端应用程序中定义了以下一组类，其中 <bpt id=\"p1\">**</bpt>Person<ept id=\"p1\">**</ept> 是一个抽象类。"
    },
    {
      "content": "你可以使用单个 Person 表通过如下代码中的实体在表服务中持久保存两个具体类的实例：",
      "pos": [
        15944,
        15988
      ]
    },
    {
      "pos": [
        15998,
        16116
      ],
      "content": "有关在客户端代码中处理同一个表中的多个实体类型的详细信息，请参阅本指南后面的<bpt id=\"p1\">[</bpt>处理异类实体类型<ept id=\"p1\">](#working-with-heterogeneous-entity-types)</ept>部分。此部分提供了如何在客户端代码中识别实体类型的示例。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"table-design-patterns\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 表设计模式",
      "pos": [
        16120,
        16160
      ]
    },
    {
      "content": "在前面部分，你已看到有关如何优化表设计的一些详细讨论，这包括如何使用查询检索实体数据，以及如何插入、更新和删除实体数据。本部分介绍适用于表服务解决方案的一些模式。此外，你还将了解如何实际解决先前在本指南中提出的一些问题和权衡。下图总结了不同模式之间的关系：",
      "pos": [
        16161,
        16289
      ]
    },
    {
      "pos": [
        16299,
        16526
      ],
      "content": "上面的模式映射突出显示了本指南中介绍的模式（蓝色）和反模式（橙色）之间的某些关系。当然，还有许多其他值得考虑的模式。例如，表服务的重要方案之一是存储<bpt id=\"p1\">[</bpt>命令查询职责分离<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/jj554200.aspx)</ept> (CQRS) 模式的<bpt id=\"p2\">[</bpt>具体化视图<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/dn589782.aspx)</ept>。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"intra-partition-secondary-index-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 分区内辅助索引模式",
      "pos": [
        16531,
        16593
      ]
    },
    {
      "content": "使用不同 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值（在同一分区中）存储每个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值替换排序顺序。可以使用 EGT 使副本之间的更新保持一致。",
      "pos": [
        16594,
        16691
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        16698,
        16704
      ]
    },
    {
      "pos": [
        16705,
        16887
      ],
      "content": "表服务自动使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值为实体编制索引。这使客户端应用程序可以使用这些值高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以使用点查询，以通过部门名称和员工 ID（<bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>RowKey<ept id=\"p4\">**</ept>）来检索单个员工实体。客户端还可以在每个部门内检索按员工 ID 排序的实体。"
    },
    {
      "pos": [
        16897,
        17003
      ],
      "content": "如果还要能够基于另一个属性（例如，电子邮件地址）的值查找员工实体，则必须使用效率较低的分区扫描来查找匹配项。这是因为表服务不提供辅助索引。此外，还无法选择请求按 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 顺序以外顺序排序的员工列表。"
    },
    {
      "content": "解决方案",
      "pos": [
        17010,
        17014
      ]
    },
    {
      "pos": [
        17015,
        17183
      ],
      "content": "若要解决缺少辅助索引的问题，可以存储每个实体的多个副本，其中每个副本使用不同 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值。如果你存储如下所示的结构的实体，则可以有效地基于邮件地址或员工 ID 检索员工实体。<bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 的前缀值“empid\\_”和“email\\_”使你能够通过使用一定范围的邮件地址或员工 ID 查询单个员工或某个范围内的员工。"
    },
    {
      "content": "以下两个筛选条件（一个按员工 ID 查找，一个按电子邮件地址查找）都指定点查询：",
      "pos": [
        17193,
        17233
      ]
    },
    {
      "content": "$filter=(PartitionKey eq 'Sales') and (RowKey eq 'empid_000223')",
      "pos": [
        17239,
        17303
      ]
    },
    {
      "content": "$filter=(PartitionKey eq 'Sales') and (RowKey eq 'email_jonesj@contoso.com')",
      "pos": [
        17310,
        17386
      ]
    },
    {
      "pos": [
        17390,
        17464
      ],
      "content": "如果你查询一组员工实体，则可以通过使用 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 中相应的前缀查询实体，指定按员工 ID 顺序排序的范围或按电子邮件地址顺序排序的范围。"
    },
    {
      "content": "要查找销售部门中的所有雇员，其雇员 ID 范围为 000100 到 000199，请使用：$filter=(PartitionKey eq 'Sales') and (RowKey ge 'empid\\_000100') and (RowKey le 'empid\\_000199')",
      "pos": [
        17470,
        17612
      ]
    },
    {
      "content": "要通过以字母“a”开头的邮件地址查找销售部门中的所有雇员，请使用：$filter=(PartitionKey eq 'Sales') and (RowKey ge 'email\\_a') and (RowKey lt 'email\\_b')",
      "pos": [
        17619,
        17739
      ]
    },
    {
      "pos": [
        17744,
        17863
      ],
      "content": "请注意，上面的示例中使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id=\"p1\">[</bpt>查询实体<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。"
    },
    {
      "content": "问题和注意事项",
      "pos": [
        17870,
        17877
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        17881,
        17901
      ]
    },
    {
      "content": "使用表存储相对比较便宜，因此存储重复数据的成本开销不应是主要考虑因素。但是，始终应根据预期的存储要求来评估设计成本，并且只通过添加重复的实体来支持客户端应用程序将执行的查询。",
      "pos": [
        17907,
        17994
      ]
    },
    {
      "content": "由于辅助索引实体与原始实体存储在同一分区，因此应确保不超过单个分区的可伸缩性目标。",
      "pos": [
        18001,
        18042
      ]
    },
    {
      "pos": [
        18049,
        18162
      ],
      "content": "可以通过使用 EGT 以原子方式更新实体的两个副本，来使重复的实体彼此保持一致。这意味着应将实体的所有副本都存储在同一个分区。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>使用实体组事务<ept id=\"p1\">](#entity-group-transactions)</ept>部分。"
    },
    {
      "pos": [
        18169,
        18205
      ],
      "content": "用于每个实体的 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 的值必须唯一。请考虑使用复合键值。"
    },
    {
      "pos": [
        18212,
        18270
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 中填充数字值（例如，员工 ID 000223）以实现正确地排序以及根据上限和下限进行筛选。"
    },
    {
      "pos": [
        18277,
        18352
      ],
      "content": "不一定需要重复实体的所有属性。例如，如果使用 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 中的电子邮件地址查找实体的查询永远不会需要员工的年龄，则这些实体可以具有以下结构："
    },
    {
      "content": "通常，最好存储重复数据并确保可以使用单个查询检索所有所需数据，而不是使用一个查询来找到实体，使用另一个查询来查找所需数据。",
      "pos": [
        18366,
        18427
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        18436,
        18443
      ]
    },
    {
      "pos": [
        18447,
        18561
      ],
      "content": "在以下情况下使用此模式：客户端应用程序需要使用各种不同的键检索实体；你的客户端需要以不同排序顺序检索实体；你可以使用各种唯一值确定每个实体。但是，在使用不同 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值执行实体查找时，应确保不超过分区可伸缩性限制。"
    },
    {
      "content": "相关模式和指南",
      "pos": [
        18568,
        18575
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        18579,
        18599
      ]
    },
    {
      "content": "分区间辅助索引模式",
      "pos": [
        18606,
        18615
      ]
    },
    {
      "content": "复合键模式",
      "pos": [
        18664,
        18669
      ]
    },
    {
      "content": "实体组事务",
      "pos": [
        18699,
        18704
      ]
    },
    {
      "content": "处理异类实体类型",
      "pos": [
        18739,
        18747
      ]
    },
    {
      "content": "分区间辅助索引模式",
      "pos": [
        18796,
        18805
      ]
    },
    {
      "pos": [
        18806,
        18883
      ],
      "content": "使用不同 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值在不同分区或不同表中存储每个实体的多个副本，以实现快速高效的查找，并通过使用不同 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值替换排序顺序。"
    },
    {
      "content": "上下文和问题",
      "pos": [
        18890,
        18896
      ]
    },
    {
      "pos": [
        18897,
        19079
      ],
      "content": "表服务自动使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值为实体编制索引。这使客户端应用程序可以使用这些值高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以使用点查询，以通过部门名称和员工 ID（<bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>RowKey<ept id=\"p4\">**</ept>）来检索单个员工实体。客户端还可以在每个部门内检索按员工 ID 排序的实体。"
    },
    {
      "pos": [
        19089,
        19195
      ],
      "content": "如果还要能够基于另一个属性（例如，电子邮件地址）的值查找员工实体，则必须使用效率较低的分区扫描来查找匹配项。这是因为表服务不提供辅助索引。此外，还无法选择请求按 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 顺序以外顺序排序的员工列表。"
    },
    {
      "content": "你预期针对这些实体的事务量很大，并且想要将表服务限制客户端的风险降到最低。",
      "pos": [
        19197,
        19234
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        19241,
        19245
      ]
    },
    {
      "pos": [
        19248,
        19424
      ],
      "content": "要解决缺少辅助索引的问题，你可以存储每个实体的多个副本，其中每个副本都使用不同的 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值。如果你存储如下所示的结构的实体，则可以有效地基于邮件地址或员工 ID 检索员工实体。针对 <bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept>，“empid\\_”和“email\\_”的前缀值使你能够识别用于查询想要使用的索引。"
    },
    {
      "content": "以下两个筛选条件（一个按员工 ID 查找，一个按电子邮件地址查找）都指定点查询：",
      "pos": [
        19435,
        19475
      ]
    },
    {
      "content": "$filter=(PartitionKey eq 'empid_Sales') and (RowKey eq '000223')",
      "pos": [
        19481,
        19545
      ]
    },
    {
      "content": "$filter=(PartitionKey eq 'email_Sales') and (RowKey eq 'jonesj@contoso.com')",
      "pos": [
        19550,
        19626
      ]
    },
    {
      "pos": [
        19630,
        19704
      ],
      "content": "如果你查询一组员工实体，则可以通过使用 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 中相应的前缀查询实体，指定按员工 ID 顺序排序的范围或按电子邮件地址顺序排序的范围。"
    },
    {
      "pos": [
        19710,
        19864
      ],
      "content": "要查找销售部门中的所有员工，其雇员 ID 范围为 <bpt id=\"p1\">**</bpt>000100<ept id=\"p1\">**</ept> 到 <bpt id=\"p2\">**</bpt>000199<ept id=\"p2\">**</ept> 按照 ID 序号排列，请使用：$filter=(PartitionKey eq 'empid\\_Sales') and (RowKey ge '000100') and (RowKey le '000199')"
    },
    {
      "content": "要在销售部门中通过以“a”开头的邮件地址并按照邮件地址顺序查找所有员工，请使用：$filter=(PartitionKey eq 'email\\_Sales') and (RowKey ge 'a') and (RowKey lt 'b')",
      "pos": [
        19871,
        19991
      ]
    },
    {
      "pos": [
        19995,
        20114
      ],
      "content": "请注意，上面的示例中使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的<bpt id=\"p1\">[</bpt>查询实体<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)</ept>。"
    },
    {
      "content": "问题和注意事项",
      "pos": [
        20121,
        20128
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        20131,
        20151
      ]
    },
    {
      "pos": [
        20157,
        20244
      ],
      "content": "你可以使用<bpt id=\"p1\">[</bpt>最终一致的事务模式<ept id=\"p1\">](#eventually-consistent-transactions-pattern)</ept>将重复的实体最终与彼此保持一致，以维护主辅索引实体。"
    },
    {
      "content": "使用表存储相对比较便宜，因此存储重复数据的成本开销不应是主要考虑因素。但是，始终应根据预期的存储要求来评估设计成本，并且只通过添加重复的实体来支持客户端应用程序将执行的查询。",
      "pos": [
        20251,
        20338
      ]
    },
    {
      "pos": [
        20345,
        20381
      ],
      "content": "用于每个实体的 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 的值必须唯一。请考虑使用复合键值。"
    },
    {
      "pos": [
        20388,
        20446
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 中填充数字值（例如，员工 ID 000223）以实现正确地排序以及根据上限和下限进行筛选。"
    },
    {
      "pos": [
        20453,
        20528
      ],
      "content": "不一定需要重复实体的所有属性。例如，如果使用 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 中的电子邮件地址查找实体的查询永远不会需要员工的年龄，则这些实体可以具有以下结构："
    },
    {
      "content": "通常，最好存储重复数据并确保可以使用单个查询检索所有所需数据，而不是使用一个查询通过辅助索引找到实体，使用另一个查询通过主索引查找所需数据。",
      "pos": [
        20547,
        20617
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        20624,
        20631
      ]
    },
    {
      "pos": [
        20634,
        20755
      ],
      "content": "在以下情况下使用此模式：客户端应用程序需要使用各种不同的键检索实体；你的客户端需要以不同排序顺序检索实体；你可以使用各种唯一值确定每个实体。如果你想要在使用不同的 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值执行实体查找时避免超过分区可伸缩性限制，请使用此模式。"
    },
    {
      "content": "相关模式和指南",
      "pos": [
        20762,
        20769
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        20770,
        20790
      ]
    },
    {
      "content": "最终一致的事务模式",
      "pos": [
        20797,
        20806
      ]
    },
    {
      "content": "分区内辅助索引模式",
      "pos": [
        20860,
        20869
      ]
    },
    {
      "content": "复合键模式",
      "pos": [
        20920,
        20925
      ]
    },
    {
      "content": "实体组事务",
      "pos": [
        20957,
        20962
      ]
    },
    {
      "content": "处理异类实体类型",
      "pos": [
        20999,
        21007
      ]
    },
    {
      "pos": [
        21057,
        21122
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"eventually-consistent-transactions-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 最终一致的事务模式"
    },
    {
      "content": "通过使用 Azure 队列跨分区边界或存储系统边界启用最终一致的行为。",
      "pos": [
        21126,
        21161
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        21168,
        21174
      ]
    },
    {
      "content": "EGT 在多个共享同一分区键的实体之间启用原子事务。由于性能和可伸缩性原因，你可能会决定在不同分区或不同存储系统中存储具有一致性要求的实体：在这种情况下，你不能使用 EGT 来维护一致性。例如，你可能需要保持以下对象之间的最终一致性：",
      "pos": [
        21178,
        21295
      ]
    },
    {
      "content": "存储在同一个表的两个不同分区中的实体、存储在不同表中的实体、存储在不同存储帐户中的实体。",
      "pos": [
        21301,
        21345
      ]
    },
    {
      "content": "存储在表服务中的实体和存储在 Blob 服务中的 blob。",
      "pos": [
        21352,
        21382
      ]
    },
    {
      "content": "表服务中存储的实体和文件系统中的文件。",
      "pos": [
        21389,
        21408
      ]
    },
    {
      "content": "实体存储在表服务中还使用 Azure Search 服务编制了索引。",
      "pos": [
        21415,
        21449
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        21458,
        21462
      ]
    },
    {
      "pos": [
        21466,
        21794
      ],
      "content": "通过使用 Azure 队列，可以实现一种解决方案，用于在两个或更多个分区或存储系统之间提供最终一致性。为了说明此方法，假定你需要能够将旧员工实体存档。旧员工实体很少进行查询，并应从处理当前员工的任何活动中排除。为了实现这一要求，你将活动员工存储在 <bpt id=\"p1\">**</bpt>Current<ept id=\"p1\">**</ept> 表中，并将旧员工存储在 <bpt id=\"p2\">**</bpt>Archive<ept id=\"p2\">**</ept> 表中。将一名员工存档需要将相应实体从 <bpt id=\"p3\">**</bpt>Current<ept id=\"p3\">**</ept> 表中删除，然后将该实体添加到 <bpt id=\"p4\">**</bpt>Archive<ept id=\"p4\">**</ept> 表中，但你不能使用 EGT 执行这两个操作。若要避免故障导致实体同时出现在这两个表中或未出现在任一表中的风险，存档操作必须确保最终一致性。下面的序列图概述了此操作中的步骤。在随后的文本中提供了有关异常路径的更多详细信息。"
    },
    {
      "pos": [
        21805,
        22016
      ],
      "content": "客户端通过在 Azure 队列中放置一条消息来启动存档操作，在此示例中要将员工 #456 存档。辅助角色将在队列中轮询新消息；当它找到一个新消息时，将读取该消息，并在队列上保留一个隐藏的副本。接下来，辅助角色从 <bpt id=\"p1\">**</bpt>Current<ept id=\"p1\">**</ept> 表中获取实体的副本，将该副本插入 <bpt id=\"p2\">**</bpt>Archive<ept id=\"p2\">**</ept> 表中，然后从 <bpt id=\"p3\">**</bpt>Current<ept id=\"p3\">**</ept> 表中删除原始实体。最后，如果在前面的步骤中没有出现错误，辅助角色将从队列中删除隐藏的消息。"
    },
    {
      "pos": [
        22018,
        22088
      ],
      "content": "在此示例中，步骤 4 将该员工插入到 <bpt id=\"p1\">**</bpt>Archive<ept id=\"p1\">**</ept> 表中。它可以将该员工添加到 Blob 服务中的 blob 或文件系统中的文件。"
    },
    {
      "content": "从故障中恢复",
      "pos": [
        22095,
        22101
      ]
    },
    {
      "pos": [
        22105,
        22258
      ],
      "content": "步骤 <bpt id=\"p1\">**</bpt>4<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>5<ept id=\"p2\">**</ept> 中的操作必须是<bpt id=\"p3\">*</bpt>幂等<ept id=\"p3\">*</ept>操作，这一点很重要，以防辅助角色需要重新启动存档操作。如果你使用的是表服务，对于步骤 <bpt id=\"p4\">**</bpt>4<ept id=\"p4\">**</ept> 应使用“插入或替换”操作；对于步骤 <bpt id=\"p5\">**</bpt>5<ept id=\"p5\">**</ept> 应使用所使用的客户端库中的“如果存在则删除”操作。如果你使用的是其他存储系统，则必须使用相应的幂等操作。"
    },
    {
      "pos": [
        22260,
        22467
      ],
      "content": "如果辅助角色永远不会完成步骤 <bpt id=\"p1\">**</bpt>6<ept id=\"p1\">**</ept>，则在超时后该消息将重新出现在队列中，以供辅助角色尝试重新处理它。辅助角色可以检查已读取队列中的某条消息多少次，如有必要，可通过将该消息发送到单独的队列来将其标记“坏”消息以供调查。有关读取队列消息以及检查取消排队计数的详细信息，请参阅<bpt id=\"p2\">[</bpt>获取消息<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/dd179474.aspx)</ept>。"
    },
    {
      "content": "表和队列服务发生的一些错误是暂时性错误，客户端应用程序应包括适当的重试逻辑以处理这些错误。",
      "pos": [
        22469,
        22514
      ]
    },
    {
      "content": "问题和注意事项",
      "pos": [
        22521,
        22528
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        22529,
        22549
      ]
    },
    {
      "pos": [
        22555,
        22666
      ],
      "content": "此解决方案不提供事务隔离。例如，当辅助角色执行步骤 <bpt id=\"p1\">**</bpt>4<ept id=\"p1\">**</ept> 和步骤 <bpt id=\"p2\">**</bpt>5<ept id=\"p2\">**</ept> 之间的操作时，客户端可以读取 <bpt id=\"p3\">**</bpt>Current<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>Archive<ept id=\"p4\">**</ept> 表，并查看数据的不一致视图。请注意，数据将最终保持一致。"
    },
    {
      "content": "你必须确保步骤 4 和步骤 5 是幂等的，才能确保最终是一致的。",
      "pos": [
        22673,
        22705
      ]
    },
    {
      "content": "可以通过使用多个队列和辅助角色实例来扩展此解决方案。",
      "pos": [
        22712,
        22738
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        22747,
        22754
      ]
    },
    {
      "content": "当你需要保证不同分区或表中存在的实体之间的最终一致性时，请使用此模式。你可以扩展此模式，以便确保表服务和 Blob 服务及其他非 Azure 存储数据源（如数据库或文件系统）中的操作的最终一致性。",
      "pos": [
        22757,
        22855
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        22862,
        22869
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        22872,
        22892
      ]
    },
    {
      "content": "实体组事务",
      "pos": [
        22900,
        22905
      ]
    },
    {
      "content": "合并或替换",
      "pos": [
        22940,
        22945
      ]
    },
    {
      "pos": [
        22968,
        23019
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果事务隔离对你的解决方案很重要，应考虑重新设计你的表，以便能够使用 EGT。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"index-entities-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 索引实体模式",
      "pos": [
        23024,
        23066
      ]
    },
    {
      "content": "维护索引实体以启用返回实体列表的高效搜索。",
      "pos": [
        23067,
        23088
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        23095,
        23101
      ]
    },
    {
      "pos": [
        23105,
        23258
      ],
      "content": "表服务自动使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值为实体编制索引。这使客户端应用程序可以使用点查询高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以通过使用部门名称和员工 ID（<bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>RowKey<ept id=\"p4\">**</ept>）来高效地检索单个员工实体。"
    },
    {
      "content": "如果你还要能够根据另一个非唯一的属性（如姓氏）的值检索员工实体的列表，则必须使用效率较低的分区扫描来查找匹配项，而不是使用索引来直接查找。这是因为表服务不提供辅助索引。",
      "pos": [
        23269,
        23353
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        23360,
        23364
      ]
    },
    {
      "content": "若要实现使用上面所示的实体结构按姓氏查找，你必须维护员工 ID 的列表。如果要检索具有特定姓氏（例如 Jones）的员工实体，必须首先找到姓氏为“Jones”的员工的员工 ID 列表，然后再检索这些员工实体。有三个主要选项，用于存储员工 ID 列表：",
      "pos": [
        23368,
        23493
      ]
    },
    {
      "content": "使用 blob 存储。",
      "pos": [
        23499,
        23510
      ]
    },
    {
      "content": "在员工实体所在的同一分区中创建索引实体。",
      "pos": [
        23517,
        23537
      ]
    },
    {
      "content": "在不同分区或表中创建索引实体。",
      "pos": [
        23544,
        23559
      ]
    },
    {
      "content": "选项 #1：使用 Blob 存储",
      "pos": [
        23566,
        23582
      ]
    },
    {
      "pos": [
        23588,
        23719
      ],
      "content": "使用第一个选项时，你为每个唯一的姓氏创建一个 Blob，并在每个 Blob 中存储具有该姓氏的员工的 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept>（部门）和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept>（员工 ID）值的列表。在添加或删除员工时，应确保相关 blob 的内容与员工实体是最终一致的。"
    },
    {
      "content": "选项 #2：",
      "pos": [
        23724,
        23730
      ]
    },
    {
      "content": "在同一个分区中创建索引实体",
      "pos": [
        23734,
        23747
      ]
    },
    {
      "content": "对于第二个选项，请使用存储以下数据的索引实体：",
      "pos": [
        23749,
        23772
      ]
    },
    {
      "pos": [
        23783,
        23834
      ],
      "content": "<bpt id=\"p1\">**</bpt>EmployeeIDs<ept id=\"p1\">**</ept> 属性包含姓氏存储在 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 中的员工的员工 ID 列表。"
    },
    {
      "content": "以下步骤概述了在添加新员工时，如果使用第二个选项应遵循的过程。在此示例中，我们要在销售部门 1 中添加 ID 为 000152、姓氏为 Jones 的员工。",
      "pos": [
        23836,
        23914
      ]
    },
    {
      "pos": [
        23921,
        24002
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 值“Sales”和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值“Jones”检索索引实体。 保存此实体的 ETag 以便在步骤 2 中使用。"
    },
    {
      "pos": [
        24009,
        24227
      ],
      "content": "创建一个实体组事务（即批量操作），该项通过将新的员工 ID 添加到 EmployeeIDs 字段的列表中，插入新的员工实体（<bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 值“Sales”和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值“000152”），并更新索引实体（<bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 值“Sales”和 <bpt id=\"p4\">**</bpt>RowKey<ept id=\"p4\">**</ept>值“Jones”）。有关实体组事务的详细信息，请参阅<bpt id=\"p5\">[</bpt>实体组事务<ept id=\"p5\">](#entity-group-transactions)</ept>。"
    },
    {
      "content": "如果实体组事务由于开放式并发错误（其他人刚修改了索引实体）而失败，则需要从步骤 1 重新开始。",
      "pos": [
        24233,
        24280
      ]
    },
    {
      "content": "如果你使用的是第二个选项，则可以使用类似的方法删除员工。更改员工的姓氏会稍微复杂一些，因为你将需要执行更新三个实体的实体组事务：员工实体、旧姓氏的索引实体和新姓氏的索引实体。你必须在进行任何更改之前检索每个实体以便检索 ETag 值，然后你可以使用该值利用开放式并发执行更新。",
      "pos": [
        24282,
        24420
      ]
    },
    {
      "content": "如果你使用的是第二个选项，以下步骤概述了在需要查找部门中具有给定姓氏的所有员工时应遵循的过程。在此示例中，我们要在 Sales 部门中查找姓氏为 Jones 的所有员工：",
      "pos": [
        24422,
        24507
      ]
    },
    {
      "pos": [
        24513,
        24569
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 值“Sales”和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值“Jones”检索索引实体。"
    },
    {
      "content": "分析 EmployeeIDs 字段中的员工 ID 列表。",
      "pos": [
        24576,
        24604
      ]
    },
    {
      "pos": [
        24611,
        24710
      ],
      "content": "如果你需要有关其中每个员工的其他信息（例如其电子邮件地址），请使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 值“Sales”和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值从你在步骤 2 中获得的员工列表中检索每个员工实体。"
    },
    {
      "content": "选项 #3：",
      "pos": [
        24717,
        24723
      ]
    },
    {
      "content": "在不同分区或表中创建索引实体",
      "pos": [
        24728,
        24742
      ]
    },
    {
      "content": "对于第三个选项，请使用存储以下数据的索引实体：",
      "pos": [
        24744,
        24767
      ]
    },
    {
      "pos": [
        24778,
        24829
      ],
      "content": "<bpt id=\"p1\">**</bpt>EmployeeIDs<ept id=\"p1\">**</ept> 属性包含姓氏存储在 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 中的员工的员工 ID 列表。"
    },
    {
      "content": "使用第三个选项时，不能使用 EGT 来保持一致性，因为索引实体位于与员工实体不同的分区中。你应确保索引实体与员工实体是最终一致的。",
      "pos": [
        24831,
        24896
      ]
    },
    {
      "content": "问题和注意事项",
      "pos": [
        24903,
        24910
      ]
    },
    {
      "content": "当决定如何实现此模式时，考虑以下几点：",
      "pos": [
        24914,
        24933
      ]
    },
    {
      "pos": [
        24938,
        25005
      ],
      "content": "此解决方案要求至少两个查询来检索匹配实体：一个用于查询索引实体以获取 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值的列表，然后查询以检索列表中的各个实体。"
    },
    {
      "content": "鉴于单个实体最大为 1 MB，解决方案中的选项 #2 和选项 #3 假定任何给定姓氏的员工 ID 列表从不会大于 1 MB。如果员工 ID 列表有可能大于 1 MB，请使用选项 #1 并将索引数据存储在 blob 存储中。",
      "pos": [
        25012,
        25123
      ]
    },
    {
      "content": "如果使用选项 #2 （使用 EGT 处理员工添加和删除，以及员工姓氏的更改），则必须评估事务量是否将接近给定分区的可伸缩性限制。如果出现这种情况，应考虑最终一致的解决方案（#1 选项或选项 #3），即使用队列来处理更新请求并使你能够从员工实体将索引实体存储在单独的分区中。",
      "pos": [
        25130,
        25266
      ]
    },
    {
      "content": "选项 #2 该解决方案中假定你想要通过姓氏查找某个部门内的员工：例如，你想要检索销售部门姓氏为 Jones 的员工列表。如果想要能够查找整个单位内姓氏为 Jones 的所有员工，请使用选项 #1 或选项 #3。",
      "pos": [
        25273,
        25378
      ]
    },
    {
      "pos": [
        25383,
        25474
      ],
      "content": "可以实现基于队列的解决方案，其提供最终一致性（有关详细信息，请参阅<bpt id=\"p1\">[</bpt>最终一致的事务模式<ept id=\"p1\">](#eventually-consistent-transactions-pattern)</ept>）。"
    },
    {
      "content": "何时使用此模式",
      "pos": [
        25481,
        25488
      ]
    },
    {
      "content": "当你要查找所有共享一个公用属性值的实体集（如姓氏为 Jones 的所有员工）时，请使用此模式。",
      "pos": [
        25492,
        25539
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        25546,
        25553
      ]
    },
    {
      "content": "实现此模式时，也可能涉及以下模式和指南：",
      "pos": [
        25557,
        25577
      ]
    },
    {
      "content": "复合键模式",
      "pos": [
        25585,
        25590
      ]
    },
    {
      "content": "最终一致的事务模式",
      "pos": [
        25620,
        25629
      ]
    },
    {
      "content": "实体组事务",
      "pos": [
        25681,
        25686
      ]
    },
    {
      "content": "与异类实体类型协作",
      "pos": [
        25721,
        25730
      ]
    },
    {
      "pos": [
        25778,
        25821
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"denormalization-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 非规范化模式"
    },
    {
      "content": "将相关数据组合在一起放置在单个实体中，使你能够使用单个点查询检索所有所需的数据。",
      "pos": [
        25825,
        25865
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        25872,
        25878
      ]
    },
    {
      "content": "在关系数据库中，你通常会规范化数据以消除从多个表中检索数据的查询产生的重复项。如果你规范化 Azure 表中的数据，则必须从客户端到服务器进行多次往返才能检索相关数据。例如，使用下面所示的表结构需要两次往返，才能检索某个部门的详细信息：一次用于提取包括经理 ID 的部门实体，然后另一次请求提取员工实体中的经理详细信息。",
      "pos": [
        25882,
        26042
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        26058,
        26062
      ]
    },
    {
      "content": "不是将数据存储在两个不同的实体中，而是对数据进行反规范化，并在部门实体中保留经理详细信息的副本。例如：",
      "pos": [
        26066,
        26117
      ]
    },
    {
      "content": "通过使用这些属性存储部门实体，你现在可以使用点查询检索有关某个部门的所有所需详细信息。",
      "pos": [
        26128,
        26171
      ]
    },
    {
      "content": "问题和注意事项",
      "pos": [
        26178,
        26185
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        26189,
        26209
      ]
    },
    {
      "content": "将一些数据存储两次会有一些相关的成本开销。性能优势（由于向存储服务发生的请求数减少而产生）的重要性通常高于存储成本的轻微增长（并且通过减少提取某个部门的详细信息时所需的事务数可以部分抵消这一开销）。",
      "pos": [
        26215,
        26314
      ]
    },
    {
      "content": "你必须维护存储经理相关信息的两个实体的一致性。你可以通过使用 EGT 在单个原子事务中更新多个实体来处理一致性问题：在这种情况下，部门经理所在的部门实体和员工实体存储在同一个分区中。",
      "pos": [
        26321,
        26412
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        26421,
        26428
      ]
    },
    {
      "content": "当你经常需要查找相关信息时，请使用此模式。此模式减少了客户端要检索它所需的数据必须执行的查询数。",
      "pos": [
        26429,
        26477
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        26484,
        26491
      ]
    },
    {
      "content": "实现此模式时，也可能涉及以下模式和指南：",
      "pos": [
        26492,
        26512
      ]
    },
    {
      "content": "复合键模式",
      "pos": [
        26518,
        26523
      ]
    },
    {
      "content": "实体组事务",
      "pos": [
        26553,
        26558
      ]
    },
    {
      "content": "与异类实体类型协作",
      "pos": [
        26593,
        26602
      ]
    },
    {
      "pos": [
        26650,
        26689
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"compound-key-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 复合键模式"
    },
    {
      "pos": [
        26693,
        26729
      ],
      "content": "使用复合 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值可让客户端使用单个点查询查找相关数据。"
    },
    {
      "content": "上下文和问题",
      "pos": [
        26736,
        26742
      ]
    },
    {
      "content": "在关系数据库中，很自然会在查询中使用联接以便在单个查询中向客户端返回相关的数据片段。例如，你可能会使用员工 ID 来查找包含该员工的绩效和评价数据的相关实体的列表。",
      "pos": [
        26746,
        26828
      ]
    },
    {
      "content": "假定你使用以下结构在表服务中存储员工实体：",
      "pos": [
        26830,
        26851
      ]
    },
    {
      "content": "你还需要存储有关员工为你组织工作的每年的评价和绩效的历史数据，并且你需要能够按年份访问此信息。一种选择是创建另一个表，该表存储具有以下结构的实体：",
      "pos": [
        26862,
        26935
      ]
    },
    {
      "content": "请注意，使用此方法时，你可能会决定在新实体中重复一些信息（如名字和姓氏），以便可以使用单个请求检索你的数据。但是，你无法保持强一致性，因为你不能使用 EGT 以原子方式更新这两个实体。",
      "pos": [
        26946,
        27038
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        27045,
        27049
      ]
    },
    {
      "content": "在原始表中使用具有以下结构的实体存储新的实体类型：",
      "pos": [
        27050,
        27075
      ]
    },
    {
      "pos": [
        27086,
        27164
      ],
      "content": "请注意，<bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 现在作为复合键的方式（由员工 ID 和评价数据的年份组成），使用它只需针对单个实体发出单个请求，即可检索员工的绩效和评价数据。"
    },
    {
      "content": "下面的示例概述了如何检索特定员工的所有评价数据（如 Sales 部门中的员工 000123）：",
      "pos": [
        27166,
        27213
      ]
    },
    {
      "content": "$filter=(PartitionKey eq 'Sales') and (RowKey ge 'empid\\_000123') and (RowKey lt 'empid\\_000124')&amp;$select=RowKey,Manager Rating,Peer Rating,Comments",
      "pos": [
        27215,
        27363
      ]
    },
    {
      "content": "问题和注意事项",
      "pos": [
        27370,
        27377
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        27378,
        27398
      ]
    },
    {
      "pos": [
        27404,
        27455
      ],
      "content": "应使用适当的分隔符，以便可轻松地分析 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值：例如 <bpt id=\"p2\">**</bpt>000123_2012<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "你也将此实体存储在与包含同一员工的相关数据的其他实体在同一分区中，这意味着你可以使用 EGT 来维护强一致性。",
      "pos": [
        27462,
        27517
      ]
    },
    {
      "content": "你应考虑将查询数据的频率，以确定此模式是否合适。例如，如果你不经常访问评价数据但经常访问主要员工数据，则应将它们保存为不同的实体。",
      "pos": [
        27522,
        27587
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        27596,
        27603
      ]
    },
    {
      "content": "当你需要存储一个或多个经常查询的相关实体时，请使用此模式。",
      "pos": [
        27607,
        27636
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        27643,
        27650
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        27654,
        27674
      ]
    },
    {
      "content": "实体组事务",
      "pos": [
        27681,
        27686
      ]
    },
    {
      "content": "处理异类实体类型",
      "pos": [
        27723,
        27731
      ]
    },
    {
      "content": "最终一致的事务模式",
      "pos": [
        27782,
        27791
      ]
    },
    {
      "pos": [
        27844,
        27880
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"log-tail-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 记录结尾模式"
    },
    {
      "pos": [
        27884,
        27931
      ],
      "content": "通过使用以日期时间倒序排序的 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值检索最近添加到分区中的 <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept> 个实体。"
    },
    {
      "content": "上下文和问题",
      "pos": [
        27938,
        27944
      ]
    },
    {
      "pos": [
        27948,
        28053
      ],
      "content": "一个常见的需求是能够检索最近创建的实体，例如某个员工提交的最近 10 个费用报销单。表查询支持 <bpt id=\"p1\">**</bpt>$top<ept id=\"p1\">**</ept> 查询操作以返回一个集中的前 n 个实体：没有等效的查询操作可返回一个集中的最后 <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept> 个实体。"
    },
    {
      "content": "解决方案",
      "pos": [
        28060,
        28064
      ]
    },
    {
      "pos": [
        28068,
        28128
      ],
      "content": "使用自然地以日期/时间倒序排序的 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 存储实体，通过使用这种方法，最新的条目将始终为表中的第一个条目。"
    },
    {
      "pos": [
        28130,
        28241
      ],
      "content": "例如，若要能够检索某个员工提交的最近十个费用报销单，可以使用从当前日期/时间派生的反向时点值。下面的 C# 代码示例显示了一种为 RowKey 创建合适的“反向时点”值的方法，使 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 按从最新到最旧排序："
    },
    {
      "content": "你可以使用以下代码恢复日期时间值：",
      "pos": [
        28344,
        28361
      ]
    },
    {
      "content": "表查询如下所示：",
      "pos": [
        28448,
        28456
      ]
    },
    {
      "content": "问题和注意事项",
      "pos": [
        28558,
        28565
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        28569,
        28589
      ]
    },
    {
      "content": "必须使用前导零填充反向时点值，以确保字符串值按预期方式排序。",
      "pos": [
        28595,
        28625
      ]
    },
    {
      "content": "必须要注意分区级别的可伸缩性目标。请注意不要创建热点分区。",
      "pos": [
        28632,
        28661
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        28670,
        28677
      ]
    },
    {
      "content": "当你需要按反向日期/时间顺序访问实体或需要访问最近一次添加的实体时，请使用此模式。",
      "pos": [
        28681,
        28722
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        28729,
        28736
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        28740,
        28760
      ]
    },
    {
      "content": "前置/后置反模式",
      "pos": [
        28767,
        28775
      ]
    },
    {
      "content": "检索实体",
      "pos": [
        28814,
        28818
      ]
    },
    {
      "pos": [
        28848,
        28894
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"high-volume-delete-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 大量删除模式"
    },
    {
      "content": "通过将要同时删除的所有实体都存储在它们自己的单独表中来实现删除大量实体；通过删除表来删除这些实体。",
      "pos": [
        28898,
        28947
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        28954,
        28960
      ]
    },
    {
      "content": "许多应用程序会删除不再需要向客户端应用程序提供或已归档到其他存储介质的旧数据。通常按日期标识此类数据：例如，你需要删除 60 天以前的所有登录请求的记录。",
      "pos": [
        28964,
        29041
      ]
    },
    {
      "pos": [
        29043,
        29077
      ],
      "content": "一个可能的设计是使用 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 中登录请求的日期和时间："
    },
    {
      "content": "此方法可避免产生分区热点，因为应用程序可以在一个单独的分区中插入和删除每个用户的登录实体。但是，如果你有大量实体，此方法可能成本高昂且非常耗时，因为你首先需要执行表扫描以便确定所有要删除的实体，然后必须删除每个旧实体。请注意，你可以通过在 EGT 中成批处理多个删除请求来减少到服务器的往返次数。",
      "pos": [
        29088,
        29236
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        29243,
        29247
      ]
    },
    {
      "content": "对每天的登录尝试使用一个单独的表。在插入实体时可以使用上面的实体设计避免产生热点，而删除旧实体现在只是每天删除一个表的问题（单个存储操作），而不用每天查找并删除成百上千个单个登录实体。",
      "pos": [
        29251,
        29343
      ]
    },
    {
      "content": "问题和注意事项",
      "pos": [
        29350,
        29357
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        29361,
        29381
      ]
    },
    {
      "content": "你的设计支持应用程序将使用数据的其他方式（如查找特定实体、与其他数据链接或生成聚合信息）吗？",
      "pos": [
        29387,
        29433
      ]
    },
    {
      "content": "插入新实体时，你的设计会避免产生热点吗？",
      "pos": [
        29440,
        29460
      ]
    },
    {
      "content": "如果要在删除某个表后重用同一表名，应会出现延迟。最好始终使用唯一表名。",
      "pos": [
        29467,
        29502
      ]
    },
    {
      "content": "当你首次使用一个新表时，应会有某种限制，因为在此期间表服务将了解访问模式，并在节点上分配分区。你应考虑需要创建新表的频率。",
      "pos": [
        29509,
        29570
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        29579,
        29586
      ]
    },
    {
      "content": "当你有大量必须同时删除的实体时，请使用此模式。",
      "pos": [
        29590,
        29613
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        29620,
        29627
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        29631,
        29651
      ]
    },
    {
      "content": "实体组事务",
      "pos": [
        29658,
        29663
      ]
    },
    {
      "content": "修改实体",
      "pos": [
        29698,
        29702
      ]
    },
    {
      "pos": [
        29752,
        29791
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"data-series-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 数据系列模式"
    },
    {
      "content": "将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。",
      "pos": [
        29795,
        29828
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        29835,
        29841
      ]
    },
    {
      "content": "一个常见方案用于要存储一系列数据的应用程序，该应用程序通常需要一次检索所有这些数据。例如，你的应用程序可能会记录每个员工每小时发送的 IM 消息数，然后使用此信息来绘制每个用户在过去 24 小时内发送的消息数。一个设计可以是为每个员工存储 24 个实体：",
      "pos": [
        29845,
        29972
      ]
    },
    {
      "content": "利用此设计，在应用程序需要更新消息计数值时，你可以方便地找到并更新要为每个员工更新的实体。但是，为了检索信息以绘制过去 24 小时的活动图，你必须检索 24 个实体。",
      "pos": [
        29983,
        30066
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        30073,
        30077
      ]
    },
    {
      "content": "使用以下设计，其中使用单独的属性来存储每小时的消息计数：",
      "pos": [
        30081,
        30109
      ]
    },
    {
      "content": "利用此设计，你可以使用合并操作来更新某个员工在特定小时内的消息计数。现在，你可以使用对单个实体的请求检索绘制图表所需的所有信息。",
      "pos": [
        30120,
        30184
      ]
    },
    {
      "content": "问题和注意事项",
      "pos": [
        30191,
        30198
      ]
    },
    {
      "content": "当决定如何实现此模式时要考虑以下几点：",
      "pos": [
        30202,
        30221
      ]
    },
    {
      "content": "如果你的完成数据系列不适合单个实体（实体可具有最多 252 属性），请使用 Blob 等一个备用数据存储区。",
      "pos": [
        30228,
        30282
      ]
    },
    {
      "pos": [
        30289,
        30350
      ],
      "content": "如果你有多个客户端同时更新实体，你需要使用 <bpt id=\"p1\">**</bpt>ETag<ept id=\"p1\">**</ept> 来实现开放式并发。如果你有许多客户端，则可能会遇到大量争用。"
    },
    {
      "content": "何时使用此模式",
      "pos": [
        30359,
        30366
      ]
    },
    {
      "content": "当你需要更新和检索与单个实体关联的数据序列时，请使用此模式。",
      "pos": [
        30370,
        30400
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        30407,
        30414
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        30418,
        30438
      ]
    },
    {
      "content": "大实体模式",
      "pos": [
        30445,
        30450
      ]
    },
    {
      "content": "合并或替换",
      "pos": [
        30482,
        30487
      ]
    },
    {
      "pos": [
        30537,
        30610
      ],
      "content": "<bpt id=\"p1\">[</bpt>最终一致的事务模式<ept id=\"p1\">](#eventually-consistent-transactions-pattern)</ept>（如果将数据序列存储在 Blob）"
    },
    {
      "pos": [
        30617,
        30657
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"wide-entities-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 宽实体模式"
    },
    {
      "content": "使用多个物理实体来存储具有多于 252 个属性的逻辑实体。",
      "pos": [
        30661,
        30690
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        30697,
        30703
      ]
    },
    {
      "content": "单个实体不能具有超过 252 个的属性（不包括必需的系统属性），并且总共不能存储超过 1 MB 的数据。在关系数据库中，在遇到行大小限制时，通常可通过添加一个新表并在二者之间强制实施 1 对 1 关系来避开行大小的任何限制。",
      "pos": [
        30707,
        30819
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        30826,
        30830
      ]
    },
    {
      "content": "使用表服务，你可以存储多个实体来表示具有多于 252 个属性的单个大型业务对象。例如，如果要存储每个员工在过去 365 天内发送的的 IM 消息计数，你可以使用以下设计（该设计使用两个具有不同架构的实体）：",
      "pos": [
        30834,
        30937
      ]
    },
    {
      "pos": [
        30948,
        31089
      ],
      "content": "如果你需要进行的更改需要更新这两个实体以使它们保持彼此同步，则可以使用 EGT。否则，可以使用单个合并操作来更新特定天的消息计数。若要检索单个员工的所有数据，必须检索这两个实体，这可以通过同时使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值的两个有效请求来实现。"
    },
    {
      "content": "问题和注意事项",
      "pos": [
        31096,
        31103
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        31107,
        31127
      ]
    },
    {
      "content": "检索完整的逻辑实体至少涉及两个存储事务：其中一个用于检索每个物理实体。",
      "pos": [
        31133,
        31168
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        31177,
        31184
      ]
    },
    {
      "content": "当需要存储的实体的大小或属性数超出表服务中单个实体的限制时，请使用此模式。",
      "pos": [
        31188,
        31225
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        31232,
        31239
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        31243,
        31263
      ]
    },
    {
      "content": "实体组事务",
      "pos": [
        31270,
        31275
      ]
    },
    {
      "content": "合并或替换",
      "pos": [
        31310,
        31315
      ]
    },
    {
      "pos": [
        31363,
        31404
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"large-entities-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 大实体模式"
    },
    {
      "content": "使用 blob 存储来存储大属性值。",
      "pos": [
        31408,
        31426
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        31433,
        31439
      ]
    },
    {
      "content": "单个实体不能存储总共超过 1 MB 的数据。如果一个或多个属性存储的值导致实体的总大小超出此值，则无法在表服务中存储整个实体。",
      "pos": [
        31443,
        31506
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        31513,
        31517
      ]
    },
    {
      "pos": [
        31521,
        31649
      ],
      "content": "如果由于一个或多个属性包含大量数据而导致实体的大小超过 1 MB，可以将数据存储在 Blob 服务中，然后在实体的属性中存储 blob 的地址。例如，你可以在 Blob 存储中存储员工的照片，然后在员工实体的 <bpt id=\"p1\">**</bpt>Photo<ept id=\"p1\">**</ept> 属性中存储指向照片的链接："
    },
    {
      "content": "问题和注意事项",
      "pos": [
        31665,
        31672
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        31676,
        31696
      ]
    },
    {
      "pos": [
        31702,
        31794
      ],
      "content": "若要维护表服务中的实体与 Blob 服务中的数据之间的最终一致性，请使用<bpt id=\"p1\">[</bpt>最终一致事务模式<ept id=\"p1\">](#eventually-consistent-transactions-pattern)</ept>。"
    },
    {
      "content": "检索完整实体至少涉及两个存储事务：一个用于检索实体，另一个用于检索 blob 数据。",
      "pos": [
        31799,
        31841
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        31850,
        31857
      ]
    },
    {
      "content": "当需要存储的实体大小超出表服务中单个实体的限制时，请使用此模式。",
      "pos": [
        31861,
        31893
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        31900,
        31907
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        31911,
        31931
      ]
    },
    {
      "content": "最终一致的事务模式",
      "pos": [
        31938,
        31947
      ]
    },
    {
      "content": "宽实体模式",
      "pos": [
        32001,
        32006
      ]
    },
    {
      "pos": [
        32035,
        32084
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"prepend-append-anti-pattern\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 前置/后置反模式"
    },
    {
      "content": "当你需要进行大量插入操作时，可通过将插入操作分散到多个分区，来提高可伸缩性。",
      "pos": [
        32088,
        32126
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        32133,
        32139
      ]
    },
    {
      "content": "将实体前置或后置于存储实体通常会导致应用程序将新实体添加到分区序列中的第一个分区或最后一个分区。在这种情况下，在任何给定时间所有插入都发生在同一个分区中，从而产生了热点，使表服务无法将插入负载平衡到多个节点，可能会导致应用程序命中分区的可伸缩性目标。例如，如果你有一个应用程序记录员工对网络和资源的访问，则在事务量达到单个分区的可伸缩性目标时，如下所示的实体结构可能会导致当前小时的分区成为热点：",
      "pos": [
        32143,
        32341
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        32357,
        32361
      ]
    },
    {
      "content": "以下替代实体结构在应用程序记录事件时可避免在任何特定分区上产生热点：",
      "pos": [
        32365,
        32399
      ]
    },
    {
      "pos": [
        32410,
        32499
      ],
      "content": "通过此示例，请注意 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 如何作为复合键。<bpt id=\"p3\">**</bpt>PartitionKey<ept id=\"p3\">**</ept> 使用部门和员工 ID 将日志记录分布到多个分区。"
    },
    {
      "content": "问题和注意事项",
      "pos": [
        32506,
        32513
      ]
    },
    {
      "content": "在决定如何实现此模式时，请考虑以下几点：",
      "pos": [
        32517,
        32537
      ]
    },
    {
      "content": "可避免在高效插入时产生热分区的替代键结构是否支持客户端应用程序进行的查询？",
      "pos": [
        32543,
        32580
      ]
    },
    {
      "content": "预期的事务量是否意味着可能会达到单个分区的可伸缩性目标而受存储服务限制？",
      "pos": [
        32587,
        32623
      ]
    },
    {
      "content": "何时使用此模式",
      "pos": [
        32632,
        32639
      ]
    },
    {
      "content": "当你访问热分区时，如果事务量可能会导致受存储服务限制，请避免使用前置/后置反模式。",
      "pos": [
        32643,
        32684
      ]
    },
    {
      "content": "相关模式和指南",
      "pos": [
        32691,
        32698
      ]
    },
    {
      "content": "实现此模式时，以下模式和指南也可能相关：",
      "pos": [
        32702,
        32722
      ]
    },
    {
      "content": "复合键模式",
      "pos": [
        32729,
        32734
      ]
    },
    {
      "content": "记录结尾模式",
      "pos": [
        32766,
        32772
      ]
    },
    {
      "content": "修改实体",
      "pos": [
        32800,
        32804
      ]
    },
    {
      "content": "日志数据反模式",
      "pos": [
        32855,
        32862
      ]
    },
    {
      "content": "通常，应使用 Blob 服务（而不是表服务）来存储日志数据。",
      "pos": [
        32866,
        32896
      ]
    },
    {
      "content": "上下文和问题",
      "pos": [
        32903,
        32909
      ]
    },
    {
      "pos": [
        32913,
        33172
      ],
      "content": "日志数据的一个常见用例是检索针对特定日期/时间范围选择的日志条目：例如，你想要查找应用程序在特定日期的 15:04 和 15:06 之间记录的所有错误和关键消息。你不希望使用日志消息的日期和时间来确定将日志实体保存到的分区：该操作会导致热分区，因为在任何给定时间，所有日志实体都共享同一 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 值（请参阅<bpt id=\"p2\">[</bpt>前置/后置反模式<ept id=\"p2\">](#prepend-append-anti-pattern)</ept>部分）例如，日志消息的以下实体架构会导致热分区，因为应用程序会将当前日期小时的所有日志消息都写入到该分区："
    },
    {
      "pos": [
        33183,
        33261
      ],
      "content": "在此示例中，<bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 包括日志消息的日期和时间，以确保存储按日期/时间顺序排序的日志消息，并包括消息 ID 以防多条日志消息共享同一日期和时间。"
    },
    {
      "pos": [
        33263,
        33350
      ],
      "content": "另一种方法是使用 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept>，它可确保应用程序在一组分区中写入消息。例如，如果日志消息的源提供了一种方法可将消息分布到多个分区，则可以使用以下实体架构："
    },
    {
      "content": "但是，此架构的问题是若要检索特定时间跨度的所有日志消息，必须搜索表中的每个分区。",
      "pos": [
        33361,
        33401
      ]
    },
    {
      "content": "解决方案",
      "pos": [
        33408,
        33412
      ]
    },
    {
      "content": "前一部分重点介绍了尝试使用表服务来存储日志条目的问题，并建议了两个并不令人满意的设计。一种解决方案会导致热分区并具有在写入日志消息时性能不佳的风险；另一种解决方案由于需要扫描表中的每个分区才能检索特定时间跨度的日志消息而导致查询性能不佳。对于此类方案，Blob 存储提供了更好的解决方案，这就是 Azure Storage Analytics 存储它收集的日志数据的方式。",
      "pos": [
        33416,
        33602
      ]
    },
    {
      "content": "本部分通过概述 Storage Analytics 如何在 blob 存储中存储日志数据说明了此方法如何存储通常按范围查询的数据。",
      "pos": [
        33604,
        33669
      ]
    },
    {
      "content": "Storage Analytics 以带分隔符格式将日志消息存储在多个 blob 中。使用带分隔符的格式，客户端应用程序可以轻松地分析日志消息中的数据。",
      "pos": [
        33671,
        33747
      ]
    },
    {
      "content": "Storage Analytics 使用 blob 的命名约定，使你可以找到包含要搜索的日志消息的一个或多个 blob。例如，名为“queue/2014/07/31/1800/000001.log”的 blob 包含与从 2014 年 7 月 31 日 18:00 开始的 1 小时的队列服务相关的日志消息。“000001”指示这是此期间的第一个日志文件。Storage Analytics 还会记录该文件中存储的第一条和最后一条日志消息的时间戳作为 blob 的元数据的一部分。使用 blob 存储的 API 可以根据名称前缀在容器中查找 blob：若要查找包含从 18:00 开始的 1 小时的队列日志数据的所有 blob，可以使用前缀“queue/2014/07/31/1800”。",
      "pos": [
        33749,
        34093
      ]
    },
    {
      "content": "Storage Analytics 在内部缓存日志消息，然后定期更新相应的 blob 或使用最新一批日志条目创建新的 blob。这将减少它必须执行的写入 blob 服务的次数。",
      "pos": [
        34095,
        34183
      ]
    },
    {
      "content": "如果你要在自己的应用程序中实现类似的解决方案，则必须考虑如何管理可靠性（在事件发生时向 blob 存储写入每个日志条目）与成本和可伸缩性（在应用程序中缓冲更新，然后批量将其写入到 blob 存储）之间的权衡。",
      "pos": [
        34185,
        34289
      ]
    },
    {
      "content": "问题和注意事项",
      "pos": [
        34296,
        34303
      ]
    },
    {
      "content": "在决定如何存储日志数据时，请考虑以下几点：",
      "pos": [
        34307,
        34328
      ]
    },
    {
      "content": "如果你创建了可避免潜在热分区的表设计，则可能会发现无法高效地访问日志数据。",
      "pos": [
        34334,
        34371
      ]
    },
    {
      "content": "若要处理日志数据，客户端通常需要加载多个记录。",
      "pos": [
        34378,
        34401
      ]
    },
    {
      "content": "虽然日志数据通常结构化，但 blob 存储可能会是更好的解决方案。",
      "pos": [
        34408,
        34441
      ]
    },
    {
      "content": "实现注意事项",
      "pos": [
        34449,
        34455
      ]
    },
    {
      "content": "本部分讨论在实现前面的部分中所述的模式时，需要牢记的一些注意事项。本部分的大部分内容使用以 C# 编写的示例，其中使用了存储客户端库（在撰写本文时为版本 4.3.0）。",
      "pos": [
        34459,
        34543
      ]
    },
    {
      "pos": [
        34548,
        34585
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"retrieving-entities\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 检索实体"
    },
    {
      "pos": [
        34589,
        34685
      ],
      "content": "如<bpt id=\"p1\">[</bpt>针对查询的设计<ept id=\"p1\">](#design-for-querying)</ept>这部分所述，最高效的查询是点查询。但是，在某些情况下，你可能需要检索多个实体。本部分介绍使用存储客户端库检索实体的一些常用方法。"
    },
    {
      "pos": [
        34691,
        34777
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"retrieving-a-single-entity-using-the-storage-client-library\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 使用存储客户端库执行点查询"
    },
    {
      "pos": [
        34781,
        34885
      ],
      "content": "执行点查询的最简单方法是使用 <bpt id=\"p1\">**</bpt>Retrieve<ept id=\"p1\">**</ept> 表操作，如以下 C# 代码段中所示，该代码段检索 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 值为“Sales”并且 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept> 值为“212”的实体："
    },
    {
      "pos": [
        35189,
        35230
      ],
      "content": "请注意此示例如何将它检索的实体要求为 <bpt id=\"p1\">**</bpt>EmployeeEntity<ept id=\"p1\">**</ept> 类型。"
    },
    {
      "pos": [
        35236,
        35303
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"retrieving-multiple-entities-using-linq\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 使用 LINQ 检索多个实体"
    },
    {
      "pos": [
        35307,
        35563
      ],
      "content": "可以通过将 LINQ 与存储客户端库配合使用，并为查询指定 <bpt id=\"p1\">**</bpt>where<ept id=\"p1\">**</ept> 子句来检索多个实体。若要避免表扫描，应始终在 where 子句中包括 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 值，如有可能也包括 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept> 值以避免表和分区扫描。表服务支持一组有限的比较运算符（大于、大于等于、小于、小于等于、等于和不等于）可用于 where 子句。下面的 C# 代码段在销售部门（假定 <bpt id=\"p4\">**</bpt>RowKey<ept id=\"p4\">**</ept> 存储部门名称）中查找姓氏以“B”开头（假定 <bpt id=\"p5\">**</bpt>PartitionKey<ept id=\"p5\">**</ept> 存储姓氏）的所有员工："
    },
    {
      "pos": [
        35970,
        36021
      ],
      "content": "请注意该查询如何同时指定 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 以确保更佳性能。"
    },
    {
      "pos": [
        36023,
        36201
      ],
      "content": "以下代码示例演示使用 Fluent API 的等效功能（有关 Fluent API 各个方面的详细信息，请参阅<bpt id=\"p1\">[</bpt>设计 Fluent API 的最佳实践<ept id=\"p1\">](http://visualstudiomagazine.com/articles/2013/12/01/best-practices-for-designing-a-fluent-api.aspx)</ept>）："
    },
    {
      "pos": [
        36781,
        36833
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>该示例嵌套了多个 <bpt id=\"p1\">**</bpt>CombineFilters<ept id=\"p1\">**</ept> 方法以包含三个筛选条件。"
    },
    {
      "content": "通过查询检索大量实体",
      "pos": [
        36840,
        36850
      ]
    },
    {
      "pos": [
        36854,
        36937
      ],
      "content": "最佳查询根据 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 值和 <bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 值返回单个实体。但是，在某些情况下，你可能需要从同一个分区或者甚至从多个分区返回多个实体。"
    },
    {
      "content": "在这种情况下，应始终充分地测试应用程序的性能。",
      "pos": [
        36939,
        36962
      ]
    },
    {
      "pos": [
        36964,
        37184
      ],
      "content": "针对表服务的查询一次最多可以返回 1,000 个实体，并且可以执行时间最长为五秒。如果结果集包含超过 1,000 个的实体，则当查询未在 5 秒内完成或者查询跨越分区边界时，表服务将返回一个继续标记，客户端应用程序使用该标记可以请求下一组实体。有关继续标记如何工作的详细信息，请参阅 MSDN 上的<bpt id=\"p1\">[</bpt>查询超时和分页<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/dd135718.aspx)</ept>。"
    },
    {
      "content": "如果你使用的是存储客户端库，当它从表服务返回实体时，可以自动为你处理继续标记。以下 C# 代码示例使用存储客户端库自动处理继续标记（如果表服务在响应中返回继续标记）：",
      "pos": [
        37186,
        37269
      ]
    },
    {
      "content": "以下 C# 代码显式处理继续标记：",
      "pos": [
        37614,
        37631
      ]
    },
    {
      "content": "通过显式使用继续标记，可以控制应用程序何时检索下一个数据段。例如，如果客户端应用程序允许用户翻阅表中存储的实体，用户可能会决定不翻阅查询检索的所有实体，因此应用程序仅当用户翻阅完当前段中的所有实体后才会使用继续标记检索下一段。此方法具有以下几个优点：",
      "pos": [
        38179,
        38304
      ]
    },
    {
      "content": "它使你能够限制要从表服务中检索的数据量以及通过网络移动的数据量。",
      "pos": [
        38310,
        38342
      ]
    },
    {
      "content": "它使你可以在 .NET 中执行异步 IO。",
      "pos": [
        38349,
        38370
      ]
    },
    {
      "content": "它使你可以将继续标记序列化到持久存储，以便可以在应用程序崩溃时继续。",
      "pos": [
        38377,
        38411
      ]
    },
    {
      "pos": [
        38416,
        38555
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>继续标记通常返回包含 1,000 个实体的段，尽管它可能会更少。这也适用于你通过使用 <bpt id=\"p1\">**</bpt>Take<ept id=\"p1\">**</ept> 返回与查找条件匹配的前 n 个实体来限制查询返回的条目数的情况：表服务可能会返回包含少于 n 个实体的段和一个继续标记，你使用该标记可以检索剩余实体。"
    },
    {
      "content": "以下 C# 代码演示如何修改段内返回的实体数：",
      "pos": [
        38557,
        38580
      ]
    },
    {
      "pos": [
        38623,
        38665
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"server-side-projection\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 服务器端投影"
    },
    {
      "pos": [
        38669,
        38864
      ],
      "content": "单个实体最多可以具有 255 个属性，并且大小最多可以为 1 MB。当你查询表并检索实体时，你可能不需要所有属性，并可以避免不必要地传输数据（以帮助减少延迟和降低成本）。你可以使用服务器端投影来只传输你需要的属性。以下示例只检索查询选择的实体的 <bpt id=\"p1\">**</bpt>Email<ept id=\"p1\">**</ept> 属性（与 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>Timestamp<ept id=\"p4\">**</ept> 和 <bpt id=\"p5\">**</bpt>ETag<ept id=\"p5\">**</ept> 一起）。"
    },
    {
      "pos": [
        39349,
        39388
      ],
      "content": "请注意如何获得 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 值（即使它未包含在要检索的属性列表中）。"
    },
    {
      "content": "修改实体",
      "pos": [
        39394,
        39398
      ]
    },
    {
      "content": "使用存储客户端库可以通过插入、删除和更新实体修改存储在表服务中的实体。可以使用 EGT 将多个插入、更新和删除操作一起批量处理以减少所需的往返次数并提高解决方案的性能。",
      "pos": [
        39402,
        39486
      ]
    },
    {
      "content": "请注意，存储客户端库执行 EGT 时引发的异常通常包含导致批处理失败的实体的索引。如果你正在调试使用 EGT 的代码，这非常有用。",
      "pos": [
        39488,
        39553
      ]
    },
    {
      "content": "你还应考虑你的设计如何影响客户端应用程序处理并发和更新操作的方式。",
      "pos": [
        39555,
        39588
      ]
    },
    {
      "content": "管理并发",
      "pos": [
        39595,
        39599
      ]
    },
    {
      "pos": [
        39603,
        39789
      ],
      "content": "默认情况下，表服务在单个实体级别实现针对 <bpt id=\"p1\">**</bpt>Insert<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>Merge<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>Delete<ept id=\"p3\">**</ept> 操作的开放式并发检查，尽管客户端可以强制表服务跳过这些检查。有关表服务如何管理并发的详细信息，请参阅 Azure Web 应用上的<bpt id=\"p4\">[</bpt>在 Azure 存储空间中管理并发<ept id=\"p4\">](/documentation/articles/storage-concurrency)</ept> 。"
    },
    {
      "pos": [
        39797,
        39832
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"merge-or-replace\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 合并或替换"
    },
    {
      "pos": [
        39836,
        39962
      ],
      "content": "<bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> 类的 <bpt id=\"p2\">**</bpt>Replace<ept id=\"p2\">**</ept> 方法始终替换表服务中的完整实体。如果在存储实体中存在某个属性时请求中未包含该属性，则请求将从存储实体中删除该属性。除非你想要从存储实体中显式删除某一属性，否则必须在请求中包含每个属性。"
    },
    {
      "pos": [
        39964,
        40121
      ],
      "content": "要更新实体时，你可以使用 <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> 类的 <bpt id=\"p2\">**</bpt>Merge<ept id=\"p2\">**</ept> 方法来减少你发送到表服务的数据量。<bpt id=\"p3\">**</bpt>Merge<ept id=\"p3\">**</ept> 方法会将存储实体的任何属性替换为请求中包含的实体的属性值，但会将请求中未包含的存储实体的任何属性保持不变。如果你使用大型实体并且只需在请求中更新少量属性，则此方法很有用。"
    },
    {
      "pos": [
        40124,
        40252
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果该实体不存在，<bpt id=\"p1\">**</bpt>Replace<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>Merge<ept id=\"p2\">**</ept> 方法将失败。作为替代方法，你可以使用 <bpt id=\"p3\">**</bpt>InsertOrReplace<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>InsertOrMerge<ept id=\"p4\">**</ept> 方法，这两个方法在实体不存在时会创建一个新实体。"
    },
    {
      "pos": [
        40257,
        40318
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"working-with-heterogeneous-entity-types\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 处理异类实体类型"
    },
    {
      "pos": [
        40322,
        40394
      ],
      "content": "表服务是<bpt id=\"p1\">*</bpt>架构灵活<ept id=\"p1\">*</ept>的表存储，意味着单个表可以存储多种类型的实体，从而在设计中提供了极大的灵活性。以下示例说明了同时存储员工实体和部门实体的表："
    },
    {
      "content": "PartitionKey",
      "pos": [
        40413,
        40425
      ]
    },
    {
      "content": "RowKey",
      "pos": [
        40435,
        40441
      ]
    },
    {
      "content": "Timestamp",
      "pos": [
        40451,
        40460
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        40539,
        40548
      ]
    },
    {
      "content": "LastName",
      "pos": [
        40558,
        40566
      ]
    },
    {
      "content": "Age",
      "pos": [
        40576,
        40579
      ]
    },
    {
      "content": "Email",
      "pos": [
        40589,
        40594
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        40729,
        40738
      ]
    },
    {
      "content": "LastName",
      "pos": [
        40748,
        40756
      ]
    },
    {
      "content": "Age",
      "pos": [
        40766,
        40769
      ]
    },
    {
      "content": "Email",
      "pos": [
        40779,
        40784
      ]
    },
    {
      "content": "DepartmentName",
      "pos": [
        40919,
        40933
      ]
    },
    {
      "content": "EmployeeCount",
      "pos": [
        40943,
        40956
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        41077,
        41086
      ]
    },
    {
      "content": "LastName",
      "pos": [
        41096,
        41104
      ]
    },
    {
      "content": "Age",
      "pos": [
        41114,
        41117
      ]
    },
    {
      "content": "Email",
      "pos": [
        41127,
        41132
      ]
    },
    {
      "pos": [
        41226,
        41345
      ],
      "content": "请注意，每个实体仍然必须具有 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>RowKey<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>Timestamp<ept id=\"p3\">**</ept> 值，但可以具有任何一组属性。此外，没有任何信息指示实体的类型，除非你选择在某处存储该信息。有两个用于标识实体类型的选项："
    },
    {
      "pos": [
        41351,
        41458
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept>（或可能 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept>）前面添加实体类型。例如，将 <bpt id=\"p3\">**</bpt>EMPLOYEE_000123<ept id=\"p3\">**</ept> 或 <bpt id=\"p4\">**</bpt>DEPARTMENT_SALES<ept id=\"p4\">**</ept> 作为 <bpt id=\"p5\">**</bpt>RowKey<ept id=\"p5\">**</ept> 值。"
    },
    {
      "content": "使用一个单独的属性来记录实体类型，如下表中所示。",
      "pos": [
        41465,
        41489
      ]
    },
    {
      "content": "PartitionKey",
      "pos": [
        41510,
        41522
      ]
    },
    {
      "content": "RowKey",
      "pos": [
        41532,
        41538
      ]
    },
    {
      "content": "Timestamp",
      "pos": [
        41548,
        41557
      ]
    },
    {
      "content": "EntityType",
      "pos": [
        41636,
        41646
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        41656,
        41665
      ]
    },
    {
      "content": "LastName",
      "pos": [
        41675,
        41683
      ]
    },
    {
      "content": "Age",
      "pos": [
        41693,
        41696
      ]
    },
    {
      "content": "Email",
      "pos": [
        41706,
        41711
      ]
    },
    {
      "content": "Employee",
      "pos": [
        41732,
        41740
      ]
    },
    {
      "content": "EntityType",
      "pos": [
        41864,
        41874
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        41884,
        41893
      ]
    },
    {
      "content": "LastName",
      "pos": [
        41903,
        41911
      ]
    },
    {
      "content": "Age",
      "pos": [
        41921,
        41924
      ]
    },
    {
      "content": "Email",
      "pos": [
        41934,
        41939
      ]
    },
    {
      "content": "Employee",
      "pos": [
        41960,
        41968
      ]
    },
    {
      "content": "EntityType",
      "pos": [
        42092,
        42102
      ]
    },
    {
      "content": "DepartmentName",
      "pos": [
        42112,
        42126
      ]
    },
    {
      "content": "EmployeeCount",
      "pos": [
        42136,
        42149
      ]
    },
    {
      "content": "Department",
      "pos": [
        42170,
        42180
      ]
    },
    {
      "content": "EntityType",
      "pos": [
        42290,
        42300
      ]
    },
    {
      "content": "FirstName",
      "pos": [
        42310,
        42319
      ]
    },
    {
      "content": "LastName",
      "pos": [
        42329,
        42337
      ]
    },
    {
      "content": "Age",
      "pos": [
        42347,
        42350
      ]
    },
    {
      "content": "Email",
      "pos": [
        42360,
        42365
      ]
    },
    {
      "content": "Employee",
      "pos": [
        42386,
        42394
      ]
    },
    {
      "pos": [
        42477,
        42557
      ],
      "content": "如果存在两个不同类型的实体可能具有相同键值的情况，则第一个选项（在 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 前面添加实体类型）会很有用。它还会在分区中将同一类型的实体分组在一起。"
    },
    {
      "pos": [
        42559,
        42649
      ],
      "content": "此部分中讨论的技术与本指南中前面部分<bpt id=\"p1\">[</bpt>模型关系<ept id=\"p1\">](#modelling-relationships)</ept>讨论的<bpt id=\"p2\">[</bpt>继承关系<ept id=\"p2\">](#inheritance-relationships)</ept>有关。"
    },
    {
      "pos": [
        42652,
        42708
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你应考虑在实体类型值中包含版本号以允许客户端应用程序演变 POCO 对象并处理不同版本。"
    },
    {
      "content": "本部分的剩余部分将介绍存储客户端库中便于处理同一表中的多个实体类型的一些功能。",
      "pos": [
        42710,
        42749
      ]
    },
    {
      "content": "检索异类实体类型",
      "pos": [
        42756,
        42764
      ]
    },
    {
      "content": "如果你使用存储客户端库，则有三个选项可处理多个实体类型。",
      "pos": [
        42768,
        42796
      ]
    },
    {
      "pos": [
        42798,
        43042
      ],
      "content": "如果你知道使用特定 <bpt id=\"p1\">**</bpt>RowKey<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 值存储的实体的类型，则在检索实体时可以指定该实体类型（如前面两个检索 <bpt id=\"p3\">**</bpt>EmployeeEntity<ept id=\"p3\">**</ept> 类型的实体的示例所示）：<bpt id=\"p4\">[</bpt>使用存储客户端库检索单个实体<ept id=\"p4\">](#retrieving-a-single-entity-using-the-storage-client-library)</ept>和<bpt id=\"p5\">[</bpt>使用 LINQ 检索多个实体<ept id=\"p5\">](#retrieving-multiple-entities-using-linq)</ept>。"
    },
    {
      "pos": [
        43044,
        43237
      ],
      "content": "第二个选项是使用 <bpt id=\"p1\">**</bpt>DynamicTableEntity<ept id=\"p1\">**</ept> 类型（属性包）而不是具体的 POCO 实体类型（此选项还可以提高性能，因为无需序列化实体和将实体反序列化为 .NET 类型）。以下 C# 代码可能会从表中检索多个不同类型的实体，但会将所有实体作 <bpt id=\"p2\">**</bpt>DynamicTableEntity<ept id=\"p2\">**</ept> 实例返回。然后，它使用 <bpt id=\"p3\">**</bpt>EntityType<ept id=\"p3\">**</ept> 属性来确定每个实体的类型："
    },
    {
      "pos": [
        44303,
        44385
      ],
      "content": "请注意，若要检索其他属性，必须对 <bpt id=\"p1\">**</bpt>DynamicTableEntity<ept id=\"p1\">**</ept> 类的 <bpt id=\"p2\">**</bpt>Properties<ept id=\"p2\">**</ept> 属性使用 <bpt id=\"p3\">**</bpt>TryGetValue<ept id=\"p3\">**</ept> 方法。"
    },
    {
      "pos": [
        44387,
        44619
      ],
      "content": "第三个选项是组合使用 <bpt id=\"p1\">**</bpt>DynamicTableEntity<ept id=\"p1\">**</ept> 类型和 <bpt id=\"p2\">**</bpt>EntityResolver<ept id=\"p2\">**</ept> 实例。使用此选项可以在同一查询中解析为多种 POCO 类型。在此示例中，<bpt id=\"p3\">**</bpt>EntityResolver<ept id=\"p3\">**</ept> 委托使用 <bpt id=\"p4\">**</bpt>EntityType<ept id=\"p4\">**</ept> 属性来区分查询返回的两种实体类型。 <bpt id=\"p5\">**</bpt>Resolve<ept id=\"p5\">**</ept> 方法使用 <bpt id=\"p6\">**</bpt>resolver<ept id=\"p6\">**</ept> 委托将 <bpt id=\"p7\">**</bpt>DynamicTableEntity<ept id=\"p7\">**</ept> 实例解析为 <bpt id=\"p8\">**</bpt>TableEntity<ept id=\"p8\">**</ept> 实例。"
    },
    {
      "content": "修改异类实体类型",
      "pos": [
        45805,
        45813
      ]
    },
    {
      "pos": [
        45817,
        45965
      ],
      "content": "无需知道实体的类型就可删除该实体，在插入实体时你始终知道该实体的类型。但是，你可以使用 <bpt id=\"p1\">**</bpt>DynamicTableEntity<ept id=\"p1\">**</ept> 类型来更新实体，而不必知道其类型，也无需使用 POCO 实体类。以下代码示例检索单个实体，并在更新该实体前检查 <bpt id=\"p2\">**</bpt>EmployeeCount<ept id=\"p2\">**</ept> 属性是否存在。"
    },
    {
      "pos": [
        46481,
        46557
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"controlling-access-with-shared-access-signatures\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 使用共享访问签名控制访问权限"
    },
    {
      "content": "可以使用共享访问签名 (SAS) 令牌允许客户端应用程序直接修改（和查询）表实体，而无需直接使用表服务进行身份验证。通常情况下，在应用程序中使用 SAS 主要有以下三大优点：",
      "pos": [
        46561,
        46648
      ]
    },
    {
      "content": "无需将存储帐户密钥分发到不安全的平台（如移动设备），即可允许该设备访问和修改表服务中的实体。",
      "pos": [
        46654,
        46700
      ]
    },
    {
      "content": "可以卸下 Web 角色和辅助角色在管理传递到客户端设备（如最终用户计算机和移动设备）的实体时执行的一些工作负荷。",
      "pos": [
        46707,
        46763
      ]
    },
    {
      "content": "可以向客户端分配一组受约束且有时间限制的权限（如允许对特定资源进行只读访问）。",
      "pos": [
        46770,
        46809
      ]
    },
    {
      "pos": [
        46813,
        46935
      ],
      "content": "有关在表服务中使用 SAS 令牌的详细信息，请参阅<bpt id=\"p1\">[</bpt>共享访问签名，第 1 部分：了解 SAS 模型<ept id=\"p1\">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>。"
    },
    {
      "content": "但是，仍必须生成授权客户端应用程序访问表服务中的实体的 SAS 令牌：应在可安全地访问存储帐户密钥的环境中执行此操作。通常，使用 Web 角色或辅助角色生成 SAS 令牌并将其传递给需要访问你的实体的客户端应用程序。由于生成 SAS 令牌并将其传递到客户端仍有开销，你应考虑如何最有效地减少此开销，尤其是在大容量方案中。",
      "pos": [
        46937,
        47097
      ]
    },
    {
      "pos": [
        47099,
        47269
      ],
      "content": "可以生成授权访问表中实体子集的 SAS 令牌。默认情况下，将为整个表创建 SAS 令牌，但也可以指定授权访问一组 <bpt id=\"p1\">**</bpt>PartitionKey<ept id=\"p1\">**</ept> 值或一组 <bpt id=\"p2\">**</bpt>PartitionKey<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>RowKey<ept id=\"p3\">**</ept> 值的 SAS 令牌。可以选择为单个系统用户生成 SAS 令牌，使每个用户的 SAS 令牌仅允许他访问表服务中他自己的实体。"
    },
    {
      "content": "异步和并行操作",
      "pos": [
        47275,
        47282
      ]
    },
    {
      "content": "假设你将请求分布到多个分区，你可以通过使用异步或并行查询来提高吞吐量和客户端响应能力。例如，你可以使用两个或更多个辅助角色实例并行访问表。你可以让单个辅助角色负责特定分区集，也可以直接使用多个辅助角色实例，每个辅助角色实例都能访问某个表中的所有分区。",
      "pos": [
        47286,
        47411
      ]
    },
    {
      "content": "在客户端实例中，可以通过以异步方式执行存储操作来提高吞吐量。使用存储客户端库，可以轻松地编写异步查询和修改。例如，你可以从用于检索某个分区中的所有实体的同步方法开始，如以下 C# 代码中所示：",
      "pos": [
        47413,
        47509
      ]
    },
    {
      "content": "可以轻松地修改此代码，使查询以异步方式运行，如下所示：",
      "pos": [
        48226,
        48253
      ]
    },
    {
      "content": "在此异步示例中，你可以看到对同步版本进行了以下更改：",
      "pos": [
        49008,
        49034
      ]
    },
    {
      "pos": [
        49040,
        49079
      ],
      "content": "方法签名现在包括 <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> 修饰符，并返回 <bpt id=\"p2\">**</bpt>Task<ept id=\"p2\">**</ept> 实例。"
    },
    {
      "pos": [
        49086,
        49185
      ],
      "content": "不是调用 <bpt id=\"p1\">**</bpt>ExecuteSegmented<ept id=\"p1\">**</ept> 方法来检索结果，该方法现在调用 <bpt id=\"p2\">**</bpt>ExecuteSegmentedAsync<ept id=\"p2\">**</ept> 方法，并使用 <bpt id=\"p3\">**</bpt>await<ept id=\"p3\">**</ept> 修饰符来以异步方式检索结果。"
    },
    {
      "pos": [
        49189,
        49252
      ],
      "content": "客户端应用程序可以多次调用此方法（对 <bpt id=\"p1\">**</bpt>department<ept id=\"p1\">**</ept> 参数使用不同值），并且每个查询都将在一个单独的线程中运行。"
    },
    {
      "pos": [
        49254,
        49327
      ],
      "content": "请注意，<bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept> 类中的 <bpt id=\"p2\">**</bpt>Execute<ept id=\"p2\">**</ept> 方法没有异步版本，因为 <bpt id=\"p3\">**</bpt>IEnumerable<ept id=\"p3\">**</ept> 接口不支持异步枚举。"
    },
    {
      "content": "此外，还可以用异步方式插入、更新和删除实体。以下 C# 示例说明了一个简单的同步方法，该方法用于插入或替换员工实体：",
      "pos": [
        49329,
        49387
      ]
    },
    {
      "content": "可以轻松地修改此代码，使更新以异步方式运行，如下所示：",
      "pos": [
        49685,
        49712
      ]
    },
    {
      "content": "在此异步示例中，你可以看到对同步版本进行了以下更改：",
      "pos": [
        50032,
        50058
      ]
    },
    {
      "pos": [
        50064,
        50103
      ],
      "content": "方法签名现在包括 <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> 修饰符，并返回 <bpt id=\"p2\">**</bpt>Task<ept id=\"p2\">**</ept> 实例。"
    },
    {
      "pos": [
        50110,
        50191
      ],
      "content": "不是调用 <bpt id=\"p1\">**</bpt>Execute<ept id=\"p1\">**</ept> 方法来更新实体，该方法现在调用 <bpt id=\"p2\">**</bpt>ExecuteAsync<ept id=\"p2\">**</ept> 方法，并使用 <bpt id=\"p3\">**</bpt>await<ept id=\"p3\">**</ept> 修饰符来以异步方式检索结果。"
    },
    {
      "content": "客户端应用程序可以调用多个类似这样的异步方法，每个方法调用都将在一个单独的线程中运行。",
      "pos": [
        50195,
        50238
      ]
    },
    {
      "content": "致谢",
      "pos": [
        50245,
        50247
      ]
    },
    {
      "content": "我们要特别感谢 Azure 团队以下成员所做出的贡献：Dominic Betts、Jason Hogg、Jean Ghanem、Jai Haridas、Jeff Irwin、Vamshidhar Kommineni、Vinay Shah 和 Serdar Ozler 以及来自 Microsoft DX 的 Tom Hollander。",
      "pos": [
        50248,
        50416
      ]
    },
    {
      "content": "我们还要感谢以下 Microsoft MVP 在审核期间提供的有价值的反馈：Igor Papirov 和 Edward Bakker。",
      "pos": [
        50418,
        50485
      ]
    }
  ],
  "content": "<properties \n   pageTitle=\"Azure 存储表设计指南 |Azure\" \n   description=\"在 Azure 表存储中设计可伸缩的高性能表\"\n   services=\"storage\"\n   documentationCenter=\"na\"\n   authors=\"jasonnewyork\" \n   manager=\"tadb\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"storage\"\n   ms.date=\"12/03/2015\"\n   wacn.date=\"01/21/2016\"/>\n\n# Azure 存储表设计指南：设计可伸缩的高性能表\n\n##<a id=\"azure-table-service-overview\"></a> 概述\n\n要设计可伸缩的高性能表，必须考虑许多因素（如性能、可伸缩性和成本）。如果你以前已为关系数据库设计过架构，这些注意事项对你来说将会很熟悉，尽管 Azure 表服务存储模型与关系模型之间有一些相似之处，但也有许多重大差异。这些差异通常会导致非常不同的设计，这些设计对于熟悉关系数据库的人来说可能看起来不直观或是错误的，但如果你正在设计 Azure 表服务等 NoSQL 键/值存储，就会体会到这些设计是很合理的。许多设计差异将反映这样一个事实：表服务旨在支持云级别应用程序，这些应用程序可包含数十亿个实体（相当于关系数据库术语中的行）的数据，或者用于必须支持非常高事务量的数据集：因此，你需要以不同方式考虑如何存储数据，并了解表服务的工作原理。相对于使用关系数据库的解决方案而言，设计良好的 NoSQL 数据存储可以使你的解决方案更进一步的扩展（以更低的成本）。本指南可帮助你了解这些主题。\n\n## 关于 Azure 表服务\n\n本部分重点介绍表服务的一些主要功能，这些功能尤其与设计性能和可伸缩性相关。如果你不熟悉 Azure 存储和表服务，在阅读本文的其他部分之前，请先阅读 [Azure 存储简介](/documentation/articles/storage-introduction) 和[如何通过 .NET 使用表存储](/documentation/articles/storage-dotnet-how-to-use-tables)。尽管本指南的重点是介绍表服务，但它也将包括 Azure 队列和 Blob 服务的一些讨论，并介绍如何在解决方案中将这些 Azure 队列和 Blob 服务与表服务一起使用。  \n\n什么是表服务？ 从名称可以推测出，表服务将使用表格格式来存储数据。在标准术语中，表的每一行表示一个实体，而列存储该实体的各种属性。每个实体都有一对密钥来唯一标识它，并具有一个时间戳列，表服务使用该列来跟踪上次更新实体的时间（此操作是自动发生的，无法手动使用任意值来覆盖时间戳）。表服务使用此上次修改时间戳 (LMT) 来管理开放式并发。\n\n>[AZURE.NOTE]表服务 REST API 操作还返回它从上次修过时间戳 (LMT) 获得的 **ETag** 值。在本文档中，我们将互换使用术语 ETag 和 LMT，因为它们是指同一基础数据。\n\n下面的示例演示了一个简单的表设计，该表用于存储员工和部门实体。本指南后面所示的许多示例都基于此简单设计。\n\n<table>\n<tr>\n<th>PartitionKey</th>\n<th>RowKey</th>\n<th>Timestamp</th>\n<th></th>\n</tr>\n<tr>\n<td>Marketing</td>\n<td>00001</td>\n<td>2014-08-22T00:50:32Z</td>\n<td>\n<table>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td>Don</td>\n<td>Hall</td>\n<td>34</td>\n<td>donh@contoso.com</td>\n</tr>\n</table>\n</tr>\n<tr>\n<td>Marketing</td>\n<td>00002</td>\n<td>2014-08-22T00:50:34Z</td>\n<td>\n<table>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td>Jun</td>\n<td>Cao</td>\n<td>47</td>\n<td>junc@contoso.com</td>\n</tr>\n</table>\n</tr>\n<tr>\n<td>Marketing</td>\n<td>Department</td>\n<td>2014-08-22T00:50:30Z</td>\n<td>\n<table>\n<tr>\n<th>DepartmentName</th>\n<th>EmployeeCount</th>\n</tr>\n<tr>\n<td>Marketing</td>\n<td>153</td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td>Sales</td>\n<td>00010</td>\n<td>2014-08-22T00:50:44Z</td>\n<td>\n<table>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td>Ken</td>\n<td>Kwok</td>\n<td>23</td>\n<td>kenk@contoso.com</td>\n</tr>\n</table>\n</td>\n</tr>\n</table>\n\n\n到目前为止，这看起来非常类似于关系数据库中的表，主要区别是有必需的列，以及能够在同一个表中存储多种实体类型。此外，每个用户定义的属性（如 **FirstName** 或 **Age**）还具有数据类型（如 integer 或 string），就像关系数据库中的列一样。虽然与关系数据库中不同，表服务的架构灵活性质意味着每个实体的属性不需要具有相同的数据类型。若要在单个属性中存储复杂数据类型，必须使用序列化格式（例如，JSON 或 XML）。有关表服务的详细信息（如支持的数据类型、支持的日期范围、命名规则和大小限制），请参阅 MSDN 上的[了解表服务数据模型](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)。\n\n正如你将看到的，你所选的 **PartitionKey** 和 **RowKey** 是良好的表设计的基础。存储在表中的每个实体都必须具有唯一的 **PartitionKey** 和 **RowKey**。与关系数据库表中的键一样，将对 **PartitionKey** 和 **RowKey** 值进行索引，以创建聚集索引，从而实现快速查找；但是，表服务不创建任何辅助索引，因此，这两个属性是仅有的两个编制索引的属性（后面所述的一些模式将显示如何解决这种明显的限制）。\n\n表由一个或多个分区组成，正如你将看到的，你所做的很多设计决策都将围绕选择合适的 **PartitionKey** 和 **RowKey** 进行，以便优化你的解决方案。一个解决方案可以仅由单个表构成，该表包含组织成分区的所有实体，但通常一个解决方案将具有多个表。表可帮助你在逻辑上组织你的实体，帮助你使用访问控制列表管理对数据的访问，并且你可以使用单个存储操作删除整个表。\n\n### 表分区  \n帐户名称、表名称和 **PartitionKey** 共同标识表服务用于存储实体的存储服务中的分区。作为实体寻址方案的一部分，分区定义事务的作用域（请参阅下面的[实体组事务](#entity-group-transactions)），并形成表服务如何缩放的基础。有关分区的详细信息，请参阅 [Azure 存储空间可伸缩性和性能目标](/documentation/articles/storage-scalability-targets)。\n\n在表服务中，单个节点为一个或多个完整的分区提供服务，并且该服务可通过对节点上的分区进行动态负载平衡来进行缩放。如果某个节点负载过轻，表服务可以将该节点提供服务的分区范围*拆分*为不同节点；当流量下降时，该服务可将无操作的节点的分区范围*合并*为单个节点。\n\n有关表服务内部细节的详细信息（特别是该服务如何管理分区），请参阅文章 [Azure 存储：具有高度一致性的高可用云存储服务](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/11/20/windows-azure-storage-a-highly-available-cloud-storage-service-with-strong-consistency.aspx)。\n\n###<a id=\"entity-group-transactions\"></a> 实体组事务\n在表服务中，实体组事务 (EGT) 是唯一内置机制，用于对多个实体执行原子更新。在一些文档中，EGT 也称为*批处理事务*。EGT 只能应用于存储在同一分区（共享给定表中的同一分区键）的实体，因此每当你需要对多个实体执行原子事务行为时，都需要确保这些实体位于同一分区。这通常是将多个实体类型保存在同一个表（和分区）中，而不是对不同实体类型使用多个表的原因。单个 EGT 最多可应用于 100 个实体。如果你提交多个用于处理的并发 EGT，请确保不在 EGT 共用实体上操作这些 EGT，这一点很重要，否则处理会延迟。\n\nEGT 还为你引入了潜在的权衡以便在设计中进行评估：使用更多分区将增加应用程序的可伸缩性，因为 Azure 有更多机会对节点的请求进行负载平衡，但这可能会限制应用程序执行原子事务和维护数据高一致性的能力。此外，在分区级别还有特定的可伸缩性目标，这些目标可能会限制你可以对单个节点预期的事务吞吐量：有关 Azure 存储帐户和表服务的可伸缩性目标的详细信息，请参阅 MSDN 上的 [Azure 存储空间可伸缩性和性能目标](/documentation/articles/storage-scalability-targets/)。本指南的后面部分将讨论各种设计策略，这些策略可帮助你管理此类权衡，并讨论如何根据客户端应用程序的特定要求最好地选择分区键。  \n\n### 容量注意事项\n下表包括设计表服务解决方案时要注意的一些关键值：\n\n|Azure 存储帐户的总容量|500 TB|\n|------------------------------------------|------|\n|Azure 存储帐户中表的个数 | 仅受存储帐户的容量限制 |\n|表中的分区个数 | 仅受存储帐户的容量限制 |\n|分区中实体的个数 | 仅受存储帐户的容量限制|\n|单个实体的大小 | 最大可为 1 MB，最多具有 255 个属性（包括**PartitionKey**、**RowKey** 和 **Timestamp**） |\n|**PartitionKey** 的大小 | 大小最大为 1 KB 的字符串 |\n| **RowKey** 的大小 | 大小最大为 1 KB 的字符串 |\n|实体组事务的大小 | 一个事务最多可包含 100 个实体，并且负载大小必须小于 4 MB。EGT 只能更新一次实体。 |\n\n有关详细信息，请参阅 MSDN 上的[了解表服务数据模型](http://msdn.microsoft.com/zh-cn/library/azure/dd179338.aspx)。\n\n### 成本注意事项  \n表存储的价格相对便宜，但在评估任何使用表服务的解决方案时，应同时针对容量使用情况和事务数量进行成本估算。但是，在许多情况下，为提高解决方案的性能或可伸缩性，存储非规范化或重复的数据是可采取的有效方法。有关定价的详细信息，请参阅[存储定价详细信息](/home/features/storage/#price)。\n\n### 比较 Azure 表和 SQL Azure  \n有关 Azure SQL 数据库（关系数据库服务）与表服务之间的比较，请参阅 MSDN 上的 [Azure 表存储和 Azure SQL 数据库 - 比较和对照](http://msdn.microsoft.com/zh-cn/library/azure/jj553018.aspx)。  \n\n## 表设计准则  \n这些列表汇总了一些设计表时需要牢记的重要原则，本指南稍后会更详细地对其进行解释。本指南的内容与设计关系数据库通常所遵循的指导原则大不相同。\n\n将表服务解决方案设计为高效*读取*：\n\n-   ***针对查询大量读取应用程序进行设计。*** 设计表时，在考虑将如何更新实体之前，请先考虑将执行的查询（特别是延迟敏感的查询）。这通常会产生一个高效且高性能的解决方案。  \n-   ***在查询中指定 PartitionKey 和 RowKey。*** *点查询*此类查询是最高效的表服务查询。  \n-   ***请考虑存储实体的重复副本。*** 表存储比较便宜，因此请考虑多次存储同一实体（使用不同键）以实现更高效的查询。  \n-   ***请考虑反规范你的数据。*** 表存储比较便宜，因此请考虑反规范化你的数据。例如，存储摘要实体，以便对聚合数据的查询只需访问单个实体。  \n-   ***使用复合键值。*** 你具有的唯一键是 **PartitionKey** 和 **RowKey**。例如，使用复合键值来启用对实体的备用键控访问路径。  \n-   ***使用查询投影。*** 你可以通过使用只选择所需字段的查询来减少网络上传输的数据量。  \n\n将表服务解决方案设计为高效*写入*：\n\n-   ***不要创建热分区。*** 选择在任何时间点都能够将请求散布到多个分区的键。  \n-   ***避免出现流量高峰。*** 使流量在合理的时间段内均匀分布，并避免出现流量高峰。\n-   ***不一定为实体的每种类型都创建一个单独的实体。*** 当你需要对多种实体类型执行原子事务操作时，可以将这些实体类型存储在同一个表的同一个分区中。\n-   ***请考虑你必须实现的最大吞吐量。*** 必须了解表服务的可伸缩性目标，并确保你的设计不会使你超出这些目标。  \n\n在阅读本指南时，你将会看到将所有这些原则付诸实践的示例。\n\n##<a id=\"design-for-querying\"></a> 针对查询的设计  \n表服务解决方案可能需要进行大量读取操作和/或大量写入操作。本部分重点介绍在将表服务设计为支持高效读取操作时需要牢记的事项。通常，支持高效读取操作的设计对于写入操作来说也是高效的。但是，在设计以支持写入操作时还有一些其他注意事项需要牢记，这些注意事项将在下一部分[针对数据修改的设计](#design-for-data-modification)中进行讨论。\n\n将表服务解决方案设计为能够高效读取数据的良好起点是问“我的应用程序将需要执行哪些查询来从表服务中检索它所需的数据？”\n\n>[AZURE.NOTE]使用表服务时，预先将设计做正确很重要，因为以后进行更改会很难并且开销会很高。例如，在关系数据库中，通常只需通过向现有数据库添加索引就可以解决性能问题：而这不是表服务的选项。\n\n本部分重点介绍在设计要查询的表时必须解决的关键问题。本部分涉及的主题包括：\n\n- [所选的 PartitionKey 和 RowKey 如何影响查询性能](#how-your-choice-of-partitionkey-and-rowkey-impacts-query-performance)\n- [选择适当的 PartitionKey](#choosing-an-appropriate-partitionkey)\n- [使用表服务的键值存储优化查询](#optimizing-queries-with-a-key-value-store-for-the-table-service)\n- [对表服务的键值存储中的数据进行排序](#sorting-data-in-a-key-value-store-in-the-table-service)\n\n###<a id=\"how-your-choice-of-partitionkey-and-rowkey-impacts-query-performance\"></a> 所选的 PartitionKey 和 RowKey 如何影响查询性能  \n\n下面的示例假定表服务使用以下结构存储员工实体（为清楚起见，大多数示例将省略 **Timestamp** 属性）：\n\n|*列名称* |*数据类型*|\n|--------------|-----------|\n|**PartitionKey**（部门名称）|String|\n|**RowKey**（员工 ID）|String|\n|**FirstName**|String|\n|**LastName**|String|\n|**Age**|Integer|\n|**EmailAddress**|String|\n\n前面的章节 [Azure 表服务概述](#azure-table-service-overview)介绍了对查询设计有直接影响的 Azure 表服务的一些主要功能。这些功能产生了以下设计表服务查询的通用准则。请注意，下面的示例所使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的[查询实体](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)。\n\n-   ***点查询***是一种最高效的查找，可用于并建议用于大容量查找或要求最低延迟的查找。此类查询可以通过指定 **PartitionKey** 和 **RowKey** 值使用索引非常高效地查找单个实体。例如：$filter=(PartitionKey eq 'Sales') and (RowKey eq '2')  \n-   第二好的是***范围查询***，它使用 **PartitionKey**，并对某一范围的 **RowKey** 值进行筛选以返回多个实体。**PartitionKey** 值确定特定分区，**RowKey** 值确定该分区中的实体子集。例如：$filter=PartitionKey eq 'Sales' and RowKey ge 'S' and RowKey lt 'T'  \n-   第三好的是***分区扫描***，它使用 **PartitionKey**，并对另一个非键属性进行筛选，并可能会返回多个实体。**PartitionKey** 值确定特定分区，而属性值将选择该分区中的实体子集。例如：$filter=PartitionKey eq 'Sales' and LastName eq 'Smith'  \n-   ***表扫描***不包括 **PartitionKey** 并且非常低效，因为它会依次搜索构成表的所有分区，以查找所有匹配的实体。它将执行表扫描而不管你的筛选器是否使用 **RowKey**。例如：$filter=LastName eq 'Jones'  \n-   返回多个实体的查询将按 **PartitionKey** 和 **RowKey** 顺序返回实体。若要避免对客户端中的实体进行重新排序，请选择定义了最常见排序顺序的 **RowKey**。  \n\n请注意，使用“**or**”指定基于 **RowKey** 值的筛选器将导致分区扫描，而不会视为范围查询。因此，应避免使用筛选器 （如查询：$filter=PartitionKey eq 'Sales' and (RowKey eq '121' or RowKey eq '322')\n\n有关使用存储客户端库执行高效查询的客户端代码的示例，请参阅：\n\n-   [使用存储客户端库检索单个实体](#retrieving-a-single-entity-using-the-storage-client-library)\n-   [使用 LINQ 检索多个实体](#retrieving-multiple-entities-using-linq)\n-   [服务器端投影](#server-side-projection)  \n\n有关可以处理存储在同一个表中的多个实体类型的客户端代码的示例，请参阅：\n\n-   [处理异类实体类型](#working-with-heterogeneous-entity-types)  \n\n###<a id=\"choosing-an-appropriate-partitionkey\"></a> 选择适当的 PartitionKey  \n\n所选的 **PartitionKey** 应该权衡启用 EGT（以确保一致性）的需求与将实体分布到多个分区（以确保可伸缩的解决方案）的需求。\n\n一种极端做法是，可以将所有实体都存储在单个分区，但这可能会限制解决方案的可伸缩性并且会使表服务无法对请求进行负载平衡。另一种极端做法是，可以每个分区存储一个实体，这样具有高可伸缩性并且使得表服务能够对请求进行负载平衡，但这样你将无法使用实体组事务。\n\n理想的 **PartitionKey** 是这样的，你可以使用高效查询，并具有足够多的分区以确保你的解决方案是可扩展的。通常，你会发现你的实体将具有合适的属性，可以将你的实体分布到足够多的分区。\n\n>[AZURE.NOTE]例如，在存储有关用户或员工的信息的系统中，UserID 可以是一个好的 PartitionKey。你可拥有多个使用某个给定 UserID 作为分区键的实体。存储有关用户数据的每个实体分组到单个分区，因此通过实体组事务可访问这些实体，同时仍具有高度可伸缩性。\n\n在选择 **PartitionKey** 时还有一些与如何插入、更新和删除实体相关的其他注意事项：请参阅下面的[针对数据修改的设计](#design-for-data-modification)。\n\n###<a id=\"optimizing-queries-with-a-key-value-store-for-the-table-service\"></a> 针对表服务优化查询  \n\n表服务将使用单个聚集索引中的 **PartitionKey** 和 **RowKey** 值自动为你的实体编制索引，这就是点查询使用起来最高效的原因。但是，除了 **PartitionKey** 和 **RowKey** 上的聚集索引外没有其他索引。\n\n许多设计必须满足要求，才能允许根据多个条件查找实体。例如，根据电子邮件、员工 ID 或姓氏查找员工实体。[表设计模式](#table-design-patterns)这部分中的以下模式满足这些类型的要求，并说明了解决表服务不提供辅助索引这一事实的方法：\n\n-   [内分区的第二索引模式](#intra-partition-secondary-index-pattern) - 存储使用不同 **RowKey** 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 **RowKey** 值来替换排序顺序。  \n-   [内分区的第二索引模式](#inter-partition-secondary-index-pattern) - 存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 **RowKey** 值来替换排序顺序。  \n-   [索引实体模式](#index-entities-pattern) - 维护索引实体以启用返回实体列表的高效搜索。  \n\n###<a id=\"sorting-data-in-a-key-value-store-in-the-table-service\"></a> 对表服务中的数据进行排序  \n\n表服务基于 **PartitionKey** 然后按 **RowKey** 以升序排序返回实体。这些键是字符串值，以确保数字值正确排序，应将值转换为固定长度并使用零进行填充。例如，如果用作 **RowKey** 的员工 ID 值是个整数值，则应将员工 ID **123** 转换为 **00000123**。\n\n许多应用程序要求使用按不同顺序排序的数据：例如，按名称或按加入日期对员工进行排序。[表设计模式](#table-design-patterns)这部分中的以下模式解决如何为你的实体替换排序顺序：\n\n-   [内分区的第二索引模式](#intra-partition-secondary-index-pattern)存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 RowKey 值替换排序顺序。  \n-   [内分区的第二索引模式](#inter-partition-secondary-index-pattern)存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不桶 RowKey 值替换排序顺序。\n-   [日志结尾模式](#log-tail-pattern) - 通过使用以日期时间倒序排序的 **RowKey** 值检索最近添加到分区中的 *n* 个实体。  \n\n##<a id=\"design-for-data-modification\"></a> 针对数据修改的设计\n本部分重点介绍优化插入、更新和删除的设计注意事项。在某些情况下，你将需要在针对查询优化的设计与针对数据修改优化的设计之间进行权衡，就像你在设计关系数据库时要做的那样（尽管在关系数据库中，管理设计权衡的方法是不同的）。[表设计模式](#table-design-patterns)这部分介绍了表服务的一些详细设计模式，并着重介绍了其中一些权衡。在实践中，你会发现许多针对查询实体优化的设计对于修改实体也能很好地工作。\n\n### 优化插入、更新和删除操作的性能  \n\n若要更新或删除某个实体，必须能够通过使用 **PartitionKey** 和 **RowKey** 值来确定该实体。就这一点来说，你选择的用于修改实体的 **PartitionKey** 和 **RowKey** 应遵循为支持点查询所选择的类似条件，因为你希望尽可能高效地确定实体。你不希望使用效率低下的分区或表扫描来查找实体，以便发现所需的 **PartitionKey** 和 **RowKey** 值来更新或删除该实体。\n\n[表设计模式](#table-design-patterns)这部分中的以下模式解决了优化性能或插入、更新和删除操作：\n\n-   [高容量删除模式](#high-volume-delete-pattern) - 通过将要同时删除的所有实体都存储在它们自己的单独表中来实现删除大量实体；通过删除表来删除这些实体。  \n-   [数据系列模式](#data-series-pattern) - 将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。  \n-   [宽实体模式](#wide-entities-pattern) - 使用多个物理实体来存储具有多于 252 个属性的逻辑实体。  \n-   [大实体模式](#large-entities-pattern) - 使用 blob 存储来存储大属性值。  \n\n### 确保存储实体中的一致性  \n\n影响你选择用于优化数据修改的键的其他关键因素是如何通过使用原子事务来确保一致性。你只能使用 EGT 作用于存储在同一个分区中的实体。\n\n[表设计模式](#table-design-patterns)这一节中的以下模式解决了管理一致性问题：\n\n-   [内分区的第二索引模式](#intra-partition-secondary-index-pattern) - 存储使用不同 **RowKey** 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 **RowKey** 值来替换排序顺序。  \n-   [内分区的第二索引模式](#inter-partition-secondary-index-pattern) - 存储使用不同 RowKey 值（在同一分区中）的各个实体的多个副本，以实现快速高效的查找，并通过使用不同 **RowKey** 值来替换排序顺序。  \n-   [最终一致性事务模式](#eventually-consistent-transactions-pattern) - 通过使用 Azure 队列跨分区边界或存储系统边界启用最终一致的行为。\n-   [索引实体模式](#index-entities-pattern) - 维护索引实体以启用返回实体列表的高效搜索。  \n-   [反规范模式](#denormalization-pattern) - 将相关数据组合在一起放置在单个实体中，使你能够使用单个点查询检索所有所需的数据。  \n-   [数据系列模式](#data-series-pattern) - 将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。  \n\n有关实体组事务的详细信息，请参阅[实体组事务](#entity-group-transactions)。\n\n### 确保用于高效修改的设计便于高效查询  \n\n在许多情况下，用于高效查询的设计会产生高效修改的效果，但你应始终评估这是否适用于你的特定方案。[表设计模式](#table-design-patterns)这部分的某些模式显式评估了查询实体和修改实体之间的权衡利弊，你应始终考虑到每种类型操作的数目。\n\n[表设计模式](#table-design-patterns)这部分中的以下模式实施针对高效查询的设计与针对高效数据修改的设计之间的折衷方案：\n\n-   [复合键模式](#compound-key-pattern) - 使用复合 **RowKey** 值可让客户端使用单个点查询查找相关数据。  \n-   [日志结尾模式](#log-tail-pattern) - 通过使用以日期时间倒序排序的 **RowKey** 值检索最近添加到分区中的 *n* 个实体。  \n\n## 对表数据进行加密    \n     \n.NET Azure 存储空间客户端库支持对插入和替换操作的字符串实体属性进行加密。加密的字符串作为二进制属性存储在服务中，并在解密之后转换回字符串。\n\n对于表，除了加密策略以外，用户还必须指定要加密的属性。可以通过指定 [EncryptProperty] 特性（适用于从 TableEntity 派生的 POCO 实体）或在请求选项中指定加密解析程序来完成此操作。加密解析程序是一个委托，它接受分区键、行键和属性名称并返回一个布尔值以指示是否应加密该属性。在加密过程中，客户端库将使用此信息来确定是否应在写入到网络时加密属性。该委托还可以围绕如何加密属性来实现逻辑的可能性。（例如，如果 X，则加密属性 A，否则加密属性 A 和 B。） 请注意，在读取或查询实体时，不需要提供此信息。\n\n请注意，当前不支持合并。由于属性的子集可能以前已使用不同的密钥加密，因此只合并新属性和更新元数据将导致数据丢失。合并需要进行额外的服务调用以从服务中读取预先存在的实体，或者需要为属性使用一个新密钥，由于性能方面的原因，这两种方案都不适用。\n\n有关对表数据进行加密的信息，请参阅 [Azure 存储空间的客户端加密和 Azure 密钥保管库](/documentation/articles/storage-client-side-encryption)。\n\n##<a id=\"modelling-relationships\"></a> 为关系建模\n\n构建域模型是复杂系统设计中的一个关键步骤。通常，你通过建模过程来确定实体以及实体之间的关系，并将它作为了解业务域并通知设计有关系统的信息的方式。本部分重点介绍如何将域模型中找到的一些常见关系类型转换为表服务的设计。从逻辑数据模型映射到基于 NoSQL 的物理数据模型的过程与在设计关系数据库时使用的过程大不相同。关系数据库设计通常采用数据规范化过程（针对最大限度减少冗余进行优化）和声明性查询功能（提取了数据库工作原理的实现方式）。\n\n###<a id=\"one-to-many-relationships\"></a> 一对多关系  \n\n业务域对象之间的一对多关系非常频繁地发生：例如，一个部门有许多员工。有多种方法可在表服务中实现一对多关系，每种方法都有与特定方案相关的利弊。\n\n请考虑这样一个示例：一个具有数万个部门和员工实体的大型跨国公司，其中每个部门都有许多员工，每个员工都与一个特定部门相关联。一种方法是存储不同的部门和员工实体，如下所示：\n\n![][1]\n\n此示例展示了类型之间基于 **PartitionKey** 值的隐式一对多关系。每个部门可以有许多员工。\n\n此示例还显示了同一个分区中的部门实体及其相关的员工实体。你可以选择对不同实体类型使用不同分区、表或甚至不同存储帐户。\n\n另一种方法是使数据非规范化，并只存储具有非规范化部门数据的员工实体，如下面的示例所示。在此特定方案中，如果你要求能够更改部门经理的详细信息，则此非规范化方法可能不是最佳方法，因为要这样做，需要更新部门中的每个员工。\n\n![][2]\n\n有关详细信息，请参阅本指南后面的[反规范化模式](#denormalization-pattern)。\n\n下表总结了上述每种方法对于存储具有一对多关系的员工和部门的优缺点。你还应考虑你希望执行各种操作的频率：如果你的设计中包含的代价高昂的操作很少发生，则这可能是可以接受的。\n\n<table>\n<tr>\n<th>方法</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n<tr>\n<td>不同的实体类型、同一分区、同一个表</td>\n<td>\n<ul>\n<li>可以使用单个操作来更新部门实体。</li>\n<li>如果你需要在更新/插入/删除员工实体时修改部门实体，则可以使用 EGT 来保持一致性。例如，如果维护每个部门的部门员工计数。</li>\n</ul>\n</td>\n<td>\n<ul>\n<li>你可能需要针对一些客户端活动同时检索员工和部门实体。</li>\n<li>存储操作发生在同一个分区。在事务量很大时，这可能会产生热点。</li>\n<li>不能使用 EGT 将员工移到新部门。</li>\n</ul>\n</td>\n</tr>\n<tr>\n<td>不同的实体类型、不同的分区或表或存储帐户</td>\n<td>\n<ul>\n<li>可以使用单个操作更新部门实体或员工实体。</li>\n<li>在事务量很高时，这可能有助于将负载分布到多个分区。</li>\n</ul>\n</td>\n<td>\n<ul>\n<li>你可能需要针对一些客户端活动同时检索员工和部门实体。</li>\n<li>在更新/插入/删除员工以及更新部门时，不能使用 EGT 来保持一致性。例如，更新部门实体中的员工计数。</li>\n<li>不能使用 EGT 将员工移到新部门。</li>\n</ul>\n</td>\n</tr>\n<tr>\n<td>非规范化为单个实体类型</td>\n<td>\n<ul>\n<li>使用单个请求即可检索所需的所有信息。</li>\n</ul>\n</td>\n<td>\n<ul>\n<li>如果你需要更新部门信息（这将需要更新部门中的所有员工），则保持一致性的开销会很大。</li>\n</ul>\n</td>\n</tr>\n</table>\n\n如何在这些选项中进行选择，以及哪些优点和缺点最重要，取决于特定应用程序方案。例如，你修改部门实体的频率；你的所有员工查询是否都需要附加部门信息；你有多接近对分区或存储帐户的可伸缩性限制？\n\n### 一对一关系  \n\n域模型可能包括实体之间的一对一关系。如果你需要在表服务中实现一对一关系，还必须选择在需要检索两个相关的实体时如何链接这两个实体。此链接可以是隐式的（基于键值中的约定），也可是显式的（通过在每个实体中以 **PartitionKey** 和 **RowKey** 值的形式存储指向其相关实体的链接。有关是否应将相关实体存储在同一个分区中的讨论，请参阅[一对多关系](#one-to-many-relationships)这部分。\n\n请注意，还有可能引导你在表服务中实现一对一关系的实现注意事项：\n\n-   处理大实体（有关详细信息，请参阅[使用大实体](#working-with-large-entities)）。  \n-   实施访问控制（有关详细信息，请参阅[使用共享访问签名控制访问权限](#controlling-access-with-shared-access-signatures)）。  \n\n### 在客户端中联接  \n\n尽管可通过多种方式在表服务中为关系建模，但你不应忘记使用表服务的两个主要原因是可伸缩性和性能。如果你发现你要建模的多个关系损害解决方案的性能和可伸缩性，则应问自己是否有必要在表设计中构建所有数据关系。如果你让客户端应用程序执行任何必要的联接，则可能能够简化设计并改进解决方案的可伸缩性和性能。\n\n例如，如果你的小型表包含不经常更改的数据，则可以检索一次此数据并将其缓存在客户端。这可以避免为检索相同数据而进行的重复往返操作。在本指南中我们已查看过的示例中，小型组织中的部门集可能很小并且不经常更改，使它成为合适的数据候选项，客户端应用程序可以下载一次该数据并将其缓存为查找数据。\n\n###<a id=\"inheritance-relationships\"></a> 继承关系  \n\n如果你的客户端应用程序使用一组构成继承关系的的类来表示业务实体，则可以轻松地在表服务中持久保存这些实体。例如，你可能会在客户端应用程序中定义了以下一组类，其中 **Person** 是一个抽象类。\n\n![][3]\n\n你可以使用单个 Person 表通过如下代码中的实体在表服务中持久保存两个具体类的实例：\n\n![][4]\n\n有关在客户端代码中处理同一个表中的多个实体类型的详细信息，请参阅本指南后面的[处理异类实体类型](#working-with-heterogeneous-entity-types)部分。此部分提供了如何在客户端代码中识别实体类型的示例。\n\n##<a id=\"table-design-patterns\"></a> 表设计模式\n在前面部分，你已看到有关如何优化表设计的一些详细讨论，这包括如何使用查询检索实体数据，以及如何插入、更新和删除实体数据。本部分介绍适用于表服务解决方案的一些模式。此外，你还将了解如何实际解决先前在本指南中提出的一些问题和权衡。下图总结了不同模式之间的关系：\n\n![][5]\n\n上面的模式映射突出显示了本指南中介绍的模式（蓝色）和反模式（橙色）之间的某些关系。当然，还有许多其他值得考虑的模式。例如，表服务的重要方案之一是存储[命令查询职责分离](https://msdn.microsoft.com/zh-cn/library/azure/jj554200.aspx) (CQRS) 模式的[具体化视图](https://msdn.microsoft.com/zh-cn/library/azure/dn589782.aspx)。\n\n###<a id=\"intra-partition-secondary-index-pattern\"></a> 分区内辅助索引模式\n使用不同 **RowKey** 值（在同一分区中）存储每个实体的多个副本，以实现快速高效的查找，并通过使用不同 **RowKey** 值替换排序顺序。可以使用 EGT 使副本之间的更新保持一致。\n\n#### 上下文和问题\n表服务自动使用 **PartitionKey** 和 **RowKey** 值为实体编制索引。这使客户端应用程序可以使用这些值高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以使用点查询，以通过部门名称和员工 ID（**PartitionKey** 和 **RowKey**）来检索单个员工实体。客户端还可以在每个部门内检索按员工 ID 排序的实体。\n\n![][6]\n\n如果还要能够基于另一个属性（例如，电子邮件地址）的值查找员工实体，则必须使用效率较低的分区扫描来查找匹配项。这是因为表服务不提供辅助索引。此外，还无法选择请求按 **RowKey** 顺序以外顺序排序的员工列表。\n\n#### 解决方案\n若要解决缺少辅助索引的问题，可以存储每个实体的多个副本，其中每个副本使用不同 **RowKey** 值。如果你存储如下所示的结构的实体，则可以有效地基于邮件地址或员工 ID 检索员工实体。**RowKey** 的前缀值“empid\\_”和“email\\_”使你能够通过使用一定范围的邮件地址或员工 ID 查询单个员工或某个范围内的员工。\n\n![][7]\n\n以下两个筛选条件（一个按员工 ID 查找，一个按电子邮件地址查找）都指定点查询：\n\n-   $filter=(PartitionKey eq 'Sales') and (RowKey eq 'empid_000223')  \n-   $filter=(PartitionKey eq 'Sales') and (RowKey eq 'email_jonesj@contoso.com')  \n\n如果你查询一组员工实体，则可以通过使用 **RowKey** 中相应的前缀查询实体，指定按员工 ID 顺序排序的范围或按电子邮件地址顺序排序的范围。\n\n-   要查找销售部门中的所有雇员，其雇员 ID 范围为 000100 到 000199，请使用：$filter=(PartitionKey eq 'Sales') and (RowKey ge 'empid\\_000100') and (RowKey le 'empid\\_000199')  \n-   要通过以字母“a”开头的邮件地址查找销售部门中的所有雇员，请使用：$filter=(PartitionKey eq 'Sales') and (RowKey ge 'email\\_a') and (RowKey lt 'email\\_b')  \n\n 请注意，上面的示例中使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的[查询实体](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)。\n\n#### 问题和注意事项  \n\n在决定如何实现此模式时，请考虑以下几点：\n\n-   使用表存储相对比较便宜，因此存储重复数据的成本开销不应是主要考虑因素。但是，始终应根据预期的存储要求来评估设计成本，并且只通过添加重复的实体来支持客户端应用程序将执行的查询。  \n-   由于辅助索引实体与原始实体存储在同一分区，因此应确保不超过单个分区的可伸缩性目标。  \n-   可以通过使用 EGT 以原子方式更新实体的两个副本，来使重复的实体彼此保持一致。这意味着应将实体的所有副本都存储在同一个分区。有关详细信息，请参阅[使用实体组事务](#entity-group-transactions)部分。  \n-   用于每个实体的 **RowKey** 的值必须唯一。请考虑使用复合键值。  \n-   在 **RowKey** 中填充数字值（例如，员工 ID 000223）以实现正确地排序以及根据上限和下限进行筛选。  \n-   不一定需要重复实体的所有属性。例如，如果使用 **RowKey** 中的电子邮件地址查找实体的查询永远不会需要员工的年龄，则这些实体可以具有以下结构：\n\n![][8]\n\n-   通常，最好存储重复数据并确保可以使用单个查询检索所有所需数据，而不是使用一个查询来找到实体，使用另一个查询来查找所需数据。  \n\n#### 何时使用此模式  \n\n在以下情况下使用此模式：客户端应用程序需要使用各种不同的键检索实体；你的客户端需要以不同排序顺序检索实体；你可以使用各种唯一值确定每个实体。但是，在使用不同 **RowKey** 值执行实体查找时，应确保不超过分区可伸缩性限制。\n\n#### 相关模式和指南  \n\n实现此模式时，以下模式和指南也可能相关：\n\n-   [分区间辅助索引模式](#inter-partition-secondary-index-pattern)\n-   [复合键模式](#compound-key-pattern)\n-   [实体组事务](#entity-group-transactions)\n-   [处理异类实体类型](#working-with-heterogeneous-entity-types)\n\n### 分区间辅助索引模式\n使用不同 **RowKey** 值在不同分区或不同表中存储每个实体的多个副本，以实现快速高效的查找，并通过使用不同 **RowKey** 值替换排序顺序。\n\n#### 上下文和问题\n表服务自动使用 **PartitionKey** 和 **RowKey** 值为实体编制索引。这使客户端应用程序可以使用这些值高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以使用点查询，以通过部门名称和员工 ID（**PartitionKey** 和 **RowKey**）来检索单个员工实体。客户端还可以在每个部门内检索按员工 ID 排序的实体。\n\n![][9]\n\n如果还要能够基于另一个属性（例如，电子邮件地址）的值查找员工实体，则必须使用效率较低的分区扫描来查找匹配项。这是因为表服务不提供辅助索引。此外，还无法选择请求按 **RowKey** 顺序以外顺序排序的员工列表。\n\n你预期针对这些实体的事务量很大，并且想要将表服务限制客户端的风险降到最低。\n\n#### 解决方案  \n要解决缺少辅助索引的问题，你可以存储每个实体的多个副本，其中每个副本都使用不同的 **PartitionKey** 和 **RowKey** 值。如果你存储如下所示的结构的实体，则可以有效地基于邮件地址或员工 ID 检索员工实体。针对 **PartitionKey**，“empid\\_”和“email\\_”的前缀值使你能够识别用于查询想要使用的索引。\n\n![][10]\n\n以下两个筛选条件（一个按员工 ID 查找，一个按电子邮件地址查找）都指定点查询：\n\n-   $filter=(PartitionKey eq 'empid_Sales') and (RowKey eq '000223')\n-   $filter=(PartitionKey eq 'email_Sales') and (RowKey eq 'jonesj@contoso.com')  \n\n如果你查询一组员工实体，则可以通过使用 **RowKey** 中相应的前缀查询实体，指定按员工 ID 顺序排序的范围或按电子邮件地址顺序排序的范围。\n\n-   要查找销售部门中的所有员工，其雇员 ID 范围为 **000100** 到 **000199** 按照 ID 序号排列，请使用：$filter=(PartitionKey eq 'empid\\_Sales') and (RowKey ge '000100') and (RowKey le '000199')  \n-   要在销售部门中通过以“a”开头的邮件地址并按照邮件地址顺序查找所有员工，请使用：$filter=(PartitionKey eq 'email\\_Sales') and (RowKey ge 'a') and (RowKey lt 'b')  \n\n请注意，上面的示例中使用的筛选器语法源自表服务 REST API，有关详细信息，请参阅 MSDN 上的[查询实体](http://msdn.microsoft.com/zh-cn/library/azure/dd179421.aspx)。\n\n#### 问题和注意事项  \n在决定如何实现此模式时，请考虑以下几点：\n\n-   你可以使用[最终一致的事务模式](#eventually-consistent-transactions-pattern)将重复的实体最终与彼此保持一致，以维护主辅索引实体。  \n-   使用表存储相对比较便宜，因此存储重复数据的成本开销不应是主要考虑因素。但是，始终应根据预期的存储要求来评估设计成本，并且只通过添加重复的实体来支持客户端应用程序将执行的查询。  \n-   用于每个实体的 **RowKey** 的值必须唯一。请考虑使用复合键值。  \n-   在 **RowKey** 中填充数字值（例如，员工 ID 000223）以实现正确地排序以及根据上限和下限进行筛选。  \n-   不一定需要重复实体的所有属性。例如，如果使用 **RowKey** 中的电子邮件地址查找实体的查询永远不会需要员工的年龄，则这些实体可以具有以下结构：\n\n    ![][11]\n\n-   通常，最好存储重复数据并确保可以使用单个查询检索所有所需数据，而不是使用一个查询通过辅助索引找到实体，使用另一个查询通过主索引查找所需数据。\n\n#### 何时使用此模式  \n在以下情况下使用此模式：客户端应用程序需要使用各种不同的键检索实体；你的客户端需要以不同排序顺序检索实体；你可以使用各种唯一值确定每个实体。如果你想要在使用不同的 **RowKey** 值执行实体查找时避免超过分区可伸缩性限制，请使用此模式。\n\n#### 相关模式和指南\n实现此模式时，以下模式和指南也可能相关：\n\n-   [最终一致的事务模式](#eventually-consistent-transactions-pattern)  \n-   [分区内辅助索引模式](#intra-partition-secondary-index-pattern)  \n-   [复合键模式](#compound-key-pattern)  \n-   [实体组事务](#entity-group-transactions)  \n-   [处理异类实体类型](#working-with-heterogeneous-entity-types)  \n\n###<a id=\"eventually-consistent-transactions-pattern\"></a> 最终一致的事务模式  \n\n通过使用 Azure 队列跨分区边界或存储系统边界启用最终一致的行为。\n\n#### 上下文和问题  \n\nEGT 在多个共享同一分区键的实体之间启用原子事务。由于性能和可伸缩性原因，你可能会决定在不同分区或不同存储系统中存储具有一致性要求的实体：在这种情况下，你不能使用 EGT 来维护一致性。例如，你可能需要保持以下对象之间的最终一致性：\n\n-   存储在同一个表的两个不同分区中的实体、存储在不同表中的实体、存储在不同存储帐户中的实体。  \n-   存储在表服务中的实体和存储在 Blob 服务中的 blob。  \n-   表服务中存储的实体和文件系统中的文件。  \n-   实体存储在表服务中还使用 Azure Search 服务编制了索引。  \n\n#### 解决方案  \n\n通过使用 Azure 队列，可以实现一种解决方案，用于在两个或更多个分区或存储系统之间提供最终一致性。为了说明此方法，假定你需要能够将旧员工实体存档。旧员工实体很少进行查询，并应从处理当前员工的任何活动中排除。为了实现这一要求，你将活动员工存储在 **Current** 表中，并将旧员工存储在 **Archive** 表中。将一名员工存档需要将相应实体从 **Current** 表中删除，然后将该实体添加到 **Archive** 表中，但你不能使用 EGT 执行这两个操作。若要避免故障导致实体同时出现在这两个表中或未出现在任一表中的风险，存档操作必须确保最终一致性。下面的序列图概述了此操作中的步骤。在随后的文本中提供了有关异常路径的更多详细信息。\n\n![][12]\n\n客户端通过在 Azure 队列中放置一条消息来启动存档操作，在此示例中要将员工 #456 存档。辅助角色将在队列中轮询新消息；当它找到一个新消息时，将读取该消息，并在队列上保留一个隐藏的副本。接下来，辅助角色从 **Current** 表中获取实体的副本，将该副本插入 **Archive** 表中，然后从 **Current** 表中删除原始实体。最后，如果在前面的步骤中没有出现错误，辅助角色将从队列中删除隐藏的消息。\n\n在此示例中，步骤 4 将该员工插入到 **Archive** 表中。它可以将该员工添加到 Blob 服务中的 blob 或文件系统中的文件。\n\n#### 从故障中恢复  \n\n步骤 **4** 和 **5** 中的操作必须是*幂等*操作，这一点很重要，以防辅助角色需要重新启动存档操作。如果你使用的是表服务，对于步骤 **4** 应使用“插入或替换”操作；对于步骤 **5** 应使用所使用的客户端库中的“如果存在则删除”操作。如果你使用的是其他存储系统，则必须使用相应的幂等操作。\n\n如果辅助角色永远不会完成步骤 **6**，则在超时后该消息将重新出现在队列中，以供辅助角色尝试重新处理它。辅助角色可以检查已读取队列中的某条消息多少次，如有必要，可通过将该消息发送到单独的队列来将其标记“坏”消息以供调查。有关读取队列消息以及检查取消排队计数的详细信息，请参阅[获取消息](https://msdn.microsoft.com/zh-cn/library/azure/dd179474.aspx)。\n\n表和队列服务发生的一些错误是暂时性错误，客户端应用程序应包括适当的重试逻辑以处理这些错误。\n\n#### 问题和注意事项\n在决定如何实现此模式时，请考虑以下几点：\n\n-   此解决方案不提供事务隔离。例如，当辅助角色执行步骤 **4** 和步骤 **5** 之间的操作时，客户端可以读取 **Current** 和 **Archive** 表，并查看数据的不一致视图。请注意，数据将最终保持一致。  \n-   你必须确保步骤 4 和步骤 5 是幂等的，才能确保最终是一致的。  \n-   可以通过使用多个队列和辅助角色实例来扩展此解决方案。  \n\n#### 何时使用此模式  \n当你需要保证不同分区或表中存在的实体之间的最终一致性时，请使用此模式。你可以扩展此模式，以便确保表服务和 Blob 服务及其他非 Azure 存储数据源（如数据库或文件系统）中的操作的最终一致性。\n\n#### 相关模式和指南  \n实现此模式时，以下模式和指南也可能相关：  \n-   [实体组事务](#entity-group-transactions)\n-   [合并或替换](#merge-or-replace)\n\n>[AZURE.NOTE]如果事务隔离对你的解决方案很重要，应考虑重新设计你的表，以便能够使用 EGT。\n\n###<a id=\"index-entities-pattern\"></a> 索引实体模式\n维护索引实体以启用返回实体列表的高效搜索。\n\n#### 上下文和问题  \n\n表服务自动使用 **PartitionKey** 和 **RowKey** 值为实体编制索引。这使客户端应用程序可以使用点查询高效地检索实体。例如，使用下面所示的表结构时，客户端应用程序可以通过使用部门名称和员工 ID（**PartitionKey** 和 **RowKey**）来高效地检索单个员工实体。\n\n![][13]\n\n如果你还要能够根据另一个非唯一的属性（如姓氏）的值检索员工实体的列表，则必须使用效率较低的分区扫描来查找匹配项，而不是使用索引来直接查找。这是因为表服务不提供辅助索引。\n\n#### 解决方案  \n\n若要实现使用上面所示的实体结构按姓氏查找，你必须维护员工 ID 的列表。如果要检索具有特定姓氏（例如 Jones）的员工实体，必须首先找到姓氏为“Jones”的员工的员工 ID 列表，然后再检索这些员工实体。有三个主要选项，用于存储员工 ID 列表：\n\n-   使用 blob 存储。  \n-   在员工实体所在的同一分区中创建索引实体。  \n-   在不同分区或表中创建索引实体。  \n\n<u>选项 #1：使用 Blob 存储</u>\n\n使用第一个选项时，你为每个唯一的姓氏创建一个 Blob，并在每个 Blob 中存储具有该姓氏的员工的 **PartitionKey**（部门）和 **RowKey**（员工 ID）值的列表。在添加或删除员工时，应确保相关 blob 的内容与员工实体是最终一致的。\n\n<u>选项 #2：</u>在同一个分区中创建索引实体\n\n对于第二个选项，请使用存储以下数据的索引实体：\n\n![][14]\n\n**EmployeeIDs** 属性包含姓氏存储在 **RowKey** 中的员工的员工 ID 列表。\n\n以下步骤概述了在添加新员工时，如果使用第二个选项应遵循的过程。在此示例中，我们要在销售部门 1 中添加 ID 为 000152、姓氏为 Jones 的员工。  \n1.  使用 **PartitionKey** 值“Sales”和 **RowKey** 值“Jones”检索索引实体。 保存此实体的 ETag 以便在步骤 2 中使用。  \n2.  创建一个实体组事务（即批量操作），该项通过将新的员工 ID 添加到 EmployeeIDs 字段的列表中，插入新的员工实体（**PartitionKey** 值“Sales”和 **RowKey** 值“000152”），并更新索引实体（**PartitionKey** 值“Sales”和 **RowKey**值“Jones”）。有关实体组事务的详细信息，请参阅[实体组事务](#entity-group-transactions)。 \n3.  如果实体组事务由于开放式并发错误（其他人刚修改了索引实体）而失败，则需要从步骤 1 重新开始。\n\n如果你使用的是第二个选项，则可以使用类似的方法删除员工。更改员工的姓氏会稍微复杂一些，因为你将需要执行更新三个实体的实体组事务：员工实体、旧姓氏的索引实体和新姓氏的索引实体。你必须在进行任何更改之前检索每个实体以便检索 ETag 值，然后你可以使用该值利用开放式并发执行更新。\n\n如果你使用的是第二个选项，以下步骤概述了在需要查找部门中具有给定姓氏的所有员工时应遵循的过程。在此示例中，我们要在 Sales 部门中查找姓氏为 Jones 的所有员工：\n\n1.  使用 **PartitionKey** 值“Sales”和 **RowKey** 值“Jones”检索索引实体。  \n2.  分析 EmployeeIDs 字段中的员工 ID 列表。  \n3.  如果你需要有关其中每个员工的其他信息（例如其电子邮件地址），请使用 **PartitionKey** 值“Sales”和 **RowKey** 值从你在步骤 2 中获得的员工列表中检索每个员工实体。  \n\n<u>选项 #3：</u> 在不同分区或表中创建索引实体\n\n对于第三个选项，请使用存储以下数据的索引实体：\n\n![][15]\n\n**EmployeeIDs** 属性包含姓氏存储在 **RowKey** 中的员工的员工 ID 列表。\n\n使用第三个选项时，不能使用 EGT 来保持一致性，因为索引实体位于与员工实体不同的分区中。你应确保索引实体与员工实体是最终一致的。\n\n#### 问题和注意事项  \n\n当决定如何实现此模式时，考虑以下几点：\n-   此解决方案要求至少两个查询来检索匹配实体：一个用于查询索引实体以获取 **RowKey** 值的列表，然后查询以检索列表中的各个实体。  \n-   鉴于单个实体最大为 1 MB，解决方案中的选项 #2 和选项 #3 假定任何给定姓氏的员工 ID 列表从不会大于 1 MB。如果员工 ID 列表有可能大于 1 MB，请使用选项 #1 并将索引数据存储在 blob 存储中。  \n-   如果使用选项 #2 （使用 EGT 处理员工添加和删除，以及员工姓氏的更改），则必须评估事务量是否将接近给定分区的可伸缩性限制。如果出现这种情况，应考虑最终一致的解决方案（#1 选项或选项 #3），即使用队列来处理更新请求并使你能够从员工实体将索引实体存储在单独的分区中。  \n-   选项 #2 该解决方案中假定你想要通过姓氏查找某个部门内的员工：例如，你想要检索销售部门姓氏为 Jones 的员工列表。如果想要能够查找整个单位内姓氏为 Jones 的所有员工，请使用选项 #1 或选项 #3。\n-   可以实现基于队列的解决方案，其提供最终一致性（有关详细信息，请参阅[最终一致的事务模式](#eventually-consistent-transactions-pattern)）。\n\n#### 何时使用此模式  \n\n当你要查找所有共享一个公用属性值的实体集（如姓氏为 Jones 的所有员工）时，请使用此模式。\n\n#### 相关模式和指南  \n\n实现此模式时，也可能涉及以下模式和指南：  \n-   [复合键模式](#compound-key-pattern)\n-   [最终一致的事务模式](#eventually-consistent-transactions-pattern)\n-   [实体组事务](#entity-group-transactions)\n-   [与异类实体类型协作](#working-with-heterogeneous-entity-types)\n\n###<a id=\"denormalization-pattern\"></a> 非规范化模式  \n\n将相关数据组合在一起放置在单个实体中，使你能够使用单个点查询检索所有所需的数据。\n\n#### 上下文和问题  \n\n在关系数据库中，你通常会规范化数据以消除从多个表中检索数据的查询产生的重复项。如果你规范化 Azure 表中的数据，则必须从客户端到服务器进行多次往返才能检索相关数据。例如，使用下面所示的表结构需要两次往返，才能检索某个部门的详细信息：一次用于提取包括经理 ID 的部门实体，然后另一次请求提取员工实体中的经理详细信息。\n\n![][16]\n\n#### 解决方案  \n\n不是将数据存储在两个不同的实体中，而是对数据进行反规范化，并在部门实体中保留经理详细信息的副本。例如：\n\n![][17]\n\n通过使用这些属性存储部门实体，你现在可以使用点查询检索有关某个部门的所有所需详细信息。\n\n#### 问题和注意事项  \n\n在决定如何实现此模式时，请考虑以下几点：\n\n-   将一些数据存储两次会有一些相关的成本开销。性能优势（由于向存储服务发生的请求数减少而产生）的重要性通常高于存储成本的轻微增长（并且通过减少提取某个部门的详细信息时所需的事务数可以部分抵消这一开销）。  \n-   你必须维护存储经理相关信息的两个实体的一致性。你可以通过使用 EGT 在单个原子事务中更新多个实体来处理一致性问题：在这种情况下，部门经理所在的部门实体和员工实体存储在同一个分区中。  \n\n#### 何时使用此模式\n当你经常需要查找相关信息时，请使用此模式。此模式减少了客户端要检索它所需的数据必须执行的查询数。\n\n#### 相关模式和指南\n实现此模式时，也可能涉及以下模式和指南：\n-   [复合键模式](#compound-key-pattern)\n-   [实体组事务](#entity-group-transactions)\n-   [与异类实体类型协作](#working-with-heterogeneous-entity-types)\n\n###<a id=\"compound-key-pattern\"></a> 复合键模式  \n\n使用复合 **RowKey** 值可让客户端使用单个点查询查找相关数据。\n\n#### 上下文和问题  \n\n在关系数据库中，很自然会在查询中使用联接以便在单个查询中向客户端返回相关的数据片段。例如，你可能会使用员工 ID 来查找包含该员工的绩效和评价数据的相关实体的列表。\n\n假定你使用以下结构在表服务中存储员工实体：\n\n![][18]\n\n你还需要存储有关员工为你组织工作的每年的评价和绩效的历史数据，并且你需要能够按年份访问此信息。一种选择是创建另一个表，该表存储具有以下结构的实体：\n\n![][19]\n\n请注意，使用此方法时，你可能会决定在新实体中重复一些信息（如名字和姓氏），以便可以使用单个请求检索你的数据。但是，你无法保持强一致性，因为你不能使用 EGT 以原子方式更新这两个实体。\n\n#### 解决方案\n在原始表中使用具有以下结构的实体存储新的实体类型：\n\n![][20]\n\n请注意，**RowKey** 现在作为复合键的方式（由员工 ID 和评价数据的年份组成），使用它只需针对单个实体发出单个请求，即可检索员工的绩效和评价数据。\n\n下面的示例概述了如何检索特定员工的所有评价数据（如 Sales 部门中的员工 000123）：\n\n$filter=(PartitionKey eq 'Sales') and (RowKey ge 'empid\\_000123') and (RowKey lt 'empid\\_000124')&$select=RowKey,Manager Rating,Peer Rating,Comments\n\n#### 问题和注意事项\n在决定如何实现此模式时，请考虑以下几点：\n\n-   应使用适当的分隔符，以便可轻松地分析 **RowKey** 值：例如 **000123_2012**。  \n-   你也将此实体存储在与包含同一员工的相关数据的其他实体在同一分区中，这意味着你可以使用 EGT 来维护强一致性。\n-   你应考虑将查询数据的频率，以确定此模式是否合适。例如，如果你不经常访问评价数据但经常访问主要员工数据，则应将它们保存为不同的实体。  \n\n#### 何时使用此模式  \n\n当你需要存储一个或多个经常查询的相关实体时，请使用此模式。\n\n#### 相关模式和指南  \n\n实现此模式时，以下模式和指南也可能相关：\n\n-   [实体组事务](#entity-group-transactions)  \n-   [处理异类实体类型](#working-with-heterogeneous-entity-types)  \n-   [最终一致的事务模式](#eventually-consistent-transactions-pattern)  \n\n###<a id=\"log-tail-pattern\"></a> 记录结尾模式  \n\n通过使用以日期时间倒序排序的 **RowKey** 值检索最近添加到分区中的 *n* 个实体。\n\n#### 上下文和问题  \n\n一个常见的需求是能够检索最近创建的实体，例如某个员工提交的最近 10 个费用报销单。表查询支持 **$top** 查询操作以返回一个集中的前 n 个实体：没有等效的查询操作可返回一个集中的最后 *n* 个实体。\n\n#### 解决方案  \n\n使用自然地以日期/时间倒序排序的 **RowKey** 存储实体，通过使用这种方法，最新的条目将始终为表中的第一个条目。\n\n例如，若要能够检索某个员工提交的最近十个费用报销单，可以使用从当前日期/时间派生的反向时点值。下面的 C# 代码示例显示了一种为 RowKey 创建合适的“反向时点”值的方法，使 **RowKey** 按从最新到最旧排序：\n\n`string invertedTicks = string.Format(\"{0:D19}\", DateTime.MaxValue.Ticks - DateTime.UtcNow.Ticks);`\n\n你可以使用以下代码恢复日期时间值：\n\n`DateTime dt = new DateTime(DateTime.MaxValue.Ticks - Int64.Parse(invertedTicks));`\n\n表查询如下所示：\n\n`https://myaccount.table.core.chinacloudapi.cn/EmployeeExpense(PartitionKey='empid')?$top=10`\n\n#### 问题和注意事项  \n\n在决定如何实现此模式时，请考虑以下几点：\n\n-   必须使用前导零填充反向时点值，以确保字符串值按预期方式排序。  \n-   必须要注意分区级别的可伸缩性目标。请注意不要创建热点分区。  \n\n#### 何时使用此模式  \n\n当你需要按反向日期/时间顺序访问实体或需要访问最近一次添加的实体时，请使用此模式。\n\n#### 相关模式和指南  \n\n实现此模式时，以下模式和指南也可能相关：\n\n-   [前置/后置反模式](#prepend-append-anti-pattern)  \n-   [检索实体](#retrieving-entities)  \n\n###<a id=\"high-volume-delete-pattern\"></a> 大量删除模式  \n\n通过将要同时删除的所有实体都存储在它们自己的单独表中来实现删除大量实体；通过删除表来删除这些实体。\n\n#### 上下文和问题  \n\n许多应用程序会删除不再需要向客户端应用程序提供或已归档到其他存储介质的旧数据。通常按日期标识此类数据：例如，你需要删除 60 天以前的所有登录请求的记录。\n\n一个可能的设计是使用 **RowKey** 中登录请求的日期和时间：\n\n![][21]\n\n此方法可避免产生分区热点，因为应用程序可以在一个单独的分区中插入和删除每个用户的登录实体。但是，如果你有大量实体，此方法可能成本高昂且非常耗时，因为你首先需要执行表扫描以便确定所有要删除的实体，然后必须删除每个旧实体。请注意，你可以通过在 EGT 中成批处理多个删除请求来减少到服务器的往返次数。\n\n#### 解决方案  \n\n对每天的登录尝试使用一个单独的表。在插入实体时可以使用上面的实体设计避免产生热点，而删除旧实体现在只是每天删除一个表的问题（单个存储操作），而不用每天查找并删除成百上千个单个登录实体。\n\n#### 问题和注意事项  \n\n在决定如何实现此模式时，请考虑以下几点：\n\n-   你的设计支持应用程序将使用数据的其他方式（如查找特定实体、与其他数据链接或生成聚合信息）吗？  \n-   插入新实体时，你的设计会避免产生热点吗？  \n-   如果要在删除某个表后重用同一表名，应会出现延迟。最好始终使用唯一表名。  \n-   当你首次使用一个新表时，应会有某种限制，因为在此期间表服务将了解访问模式，并在节点上分配分区。你应考虑需要创建新表的频率。  \n\n#### 何时使用此模式  \n\n当你有大量必须同时删除的实体时，请使用此模式。\n\n#### 相关模式和指南  \n\n实现此模式时，以下模式和指南也可能相关：\n\n-   [实体组事务](#entity-group-transactions)\n-   [修改实体](#working-with-heterogeneous-entity-types)  \n\n###<a id=\"data-series-pattern\"></a> 数据系列模式  \n\n将完整的数据系列存储在单个实体中，以最大限度地减少发出请求的次数。\n\n#### 上下文和问题  \n\n一个常见方案用于要存储一系列数据的应用程序，该应用程序通常需要一次检索所有这些数据。例如，你的应用程序可能会记录每个员工每小时发送的 IM 消息数，然后使用此信息来绘制每个用户在过去 24 小时内发送的消息数。一个设计可以是为每个员工存储 24 个实体：\n\n![][22]\n\n利用此设计，在应用程序需要更新消息计数值时，你可以方便地找到并更新要为每个员工更新的实体。但是，为了检索信息以绘制过去 24 小时的活动图，你必须检索 24 个实体。\n\n#### 解决方案  \n\n使用以下设计，其中使用单独的属性来存储每小时的消息计数：\n\n![][23]\n\n利用此设计，你可以使用合并操作来更新某个员工在特定小时内的消息计数。现在，你可以使用对单个实体的请求检索绘制图表所需的所有信息。\n\n#### 问题和注意事项  \n\n当决定如何实现此模式时要考虑以下几点：  \n-   如果你的完成数据系列不适合单个实体（实体可具有最多 252 属性），请使用 Blob 等一个备用数据存储区。  \n-   如果你有多个客户端同时更新实体，你需要使用 **ETag** 来实现开放式并发。如果你有许多客户端，则可能会遇到大量争用。  \n\n#### 何时使用此模式  \n\n当你需要更新和检索与单个实体关联的数据序列时，请使用此模式。\n\n#### 相关模式和指南  \n\n实现此模式时，以下模式和指南也可能相关：\n\n-   [大实体模式](#large-entity-pattern)  \n-   [合并或替换](#working-with-heterogeneous-entity-types)  \n-   [最终一致的事务模式](#eventually-consistent-transactions-pattern)（如果将数据序列存储在 Blob）  \n\n###<a id=\"wide-entities-pattern\"></a> 宽实体模式  \n\n使用多个物理实体来存储具有多于 252 个属性的逻辑实体。\n\n#### 上下文和问题  \n\n单个实体不能具有超过 252 个的属性（不包括必需的系统属性），并且总共不能存储超过 1 MB 的数据。在关系数据库中，在遇到行大小限制时，通常可通过添加一个新表并在二者之间强制实施 1 对 1 关系来避开行大小的任何限制。\n\n#### 解决方案  \n\n使用表服务，你可以存储多个实体来表示具有多于 252 个属性的单个大型业务对象。例如，如果要存储每个员工在过去 365 天内发送的的 IM 消息计数，你可以使用以下设计（该设计使用两个具有不同架构的实体）：\n\n![][24]\n\n如果你需要进行的更改需要更新这两个实体以使它们保持彼此同步，则可以使用 EGT。否则，可以使用单个合并操作来更新特定天的消息计数。若要检索单个员工的所有数据，必须检索这两个实体，这可以通过同时使用 **PartitionKey** 和 **RowKey** 值的两个有效请求来实现。\n\n#### 问题和注意事项  \n\n在决定如何实现此模式时，请考虑以下几点：\n\n-   检索完整的逻辑实体至少涉及两个存储事务：其中一个用于检索每个物理实体。  \n\n#### 何时使用此模式  \n\n当需要存储的实体的大小或属性数超出表服务中单个实体的限制时，请使用此模式。\n\n#### 相关模式和指南  \n\n实现此模式时，以下模式和指南也可能相关：\n\n-   [实体组事务](#entity-group-transactions)\n-   [合并或替换](#working-with-heterogeneous-entity-types)\n\n###<a id=\"large-entities-pattern\"></a> 大实体模式  \n\n使用 blob 存储来存储大属性值。\n\n#### 上下文和问题  \n\n单个实体不能存储总共超过 1 MB 的数据。如果一个或多个属性存储的值导致实体的总大小超出此值，则无法在表服务中存储整个实体。\n\n#### 解决方案  \n\n如果由于一个或多个属性包含大量数据而导致实体的大小超过 1 MB，可以将数据存储在 Blob 服务中，然后在实体的属性中存储 blob 的地址。例如，你可以在 Blob 存储中存储员工的照片，然后在员工实体的 **Photo** 属性中存储指向照片的链接：\n\n![][25]\n\n#### 问题和注意事项  \n\n在决定如何实现此模式时，请考虑以下几点：\n\n-   若要维护表服务中的实体与 Blob 服务中的数据之间的最终一致性，请使用[最终一致事务模式](#eventually-consistent-transactions-pattern)。\n-   检索完整实体至少涉及两个存储事务：一个用于检索实体，另一个用于检索 blob 数据。  \n\n#### 何时使用此模式  \n\n当需要存储的实体大小超出表服务中单个实体的限制时，请使用此模式。\n\n#### 相关模式和指南  \n\n实现此模式时，以下模式和指南也可能相关：\n\n-   [最终一致的事务模式](#eventually-consistent-transactions-pattern)  \n-   [宽实体模式](#large-entity-pattern)\n\n###<a id=\"prepend-append-anti-pattern\"></a> 前置/后置反模式  \n\n当你需要进行大量插入操作时，可通过将插入操作分散到多个分区，来提高可伸缩性。\n\n#### 上下文和问题  \n\n将实体前置或后置于存储实体通常会导致应用程序将新实体添加到分区序列中的第一个分区或最后一个分区。在这种情况下，在任何给定时间所有插入都发生在同一个分区中，从而产生了热点，使表服务无法将插入负载平衡到多个节点，可能会导致应用程序命中分区的可伸缩性目标。例如，如果你有一个应用程序记录员工对网络和资源的访问，则在事务量达到单个分区的可伸缩性目标时，如下所示的实体结构可能会导致当前小时的分区成为热点：\n\n![][26]\n\n#### 解决方案  \n\n以下替代实体结构在应用程序记录事件时可避免在任何特定分区上产生热点：\n\n![][27]\n\n通过此示例，请注意 **PartitionKey** 和 **RowKey** 如何作为复合键。**PartitionKey** 使用部门和员工 ID 将日志记录分布到多个分区。\n\n#### 问题和注意事项  \n\n在决定如何实现此模式时，请考虑以下几点：\n\n-   可避免在高效插入时产生热分区的替代键结构是否支持客户端应用程序进行的查询？  \n-   预期的事务量是否意味着可能会达到单个分区的可伸缩性目标而受存储服务限制？  \n\n#### 何时使用此模式  \n\n当你访问热分区时，如果事务量可能会导致受存储服务限制，请避免使用前置/后置反模式。\n\n#### 相关模式和指南  \n\n实现此模式时，以下模式和指南也可能相关：\n\n-   [复合键模式](#compound-key-pattern)  \n-   [记录结尾模式](#log-tail-pattern)  \n-   [修改实体](#working-with-heterogeneous-entity-types)  \n\n### 日志数据反模式  \n\n通常，应使用 Blob 服务（而不是表服务）来存储日志数据。\n\n#### 上下文和问题  \n\n日志数据的一个常见用例是检索针对特定日期/时间范围选择的日志条目：例如，你想要查找应用程序在特定日期的 15:04 和 15:06 之间记录的所有错误和关键消息。你不希望使用日志消息的日期和时间来确定将日志实体保存到的分区：该操作会导致热分区，因为在任何给定时间，所有日志实体都共享同一 **PartitionKey** 值（请参阅[前置/后置反模式](#prepend-append-anti-pattern)部分）例如，日志消息的以下实体架构会导致热分区，因为应用程序会将当前日期小时的所有日志消息都写入到该分区：\n\n![][28]\n\n在此示例中，**RowKey** 包括日志消息的日期和时间，以确保存储按日期/时间顺序排序的日志消息，并包括消息 ID 以防多条日志消息共享同一日期和时间。\n\n另一种方法是使用 **PartitionKey**，它可确保应用程序在一组分区中写入消息。例如，如果日志消息的源提供了一种方法可将消息分布到多个分区，则可以使用以下实体架构：\n\n![][29]\n\n但是，此架构的问题是若要检索特定时间跨度的所有日志消息，必须搜索表中的每个分区。\n\n#### 解决方案  \n\n前一部分重点介绍了尝试使用表服务来存储日志条目的问题，并建议了两个并不令人满意的设计。一种解决方案会导致热分区并具有在写入日志消息时性能不佳的风险；另一种解决方案由于需要扫描表中的每个分区才能检索特定时间跨度的日志消息而导致查询性能不佳。对于此类方案，Blob 存储提供了更好的解决方案，这就是 Azure Storage Analytics 存储它收集的日志数据的方式。\n\n本部分通过概述 Storage Analytics 如何在 blob 存储中存储日志数据说明了此方法如何存储通常按范围查询的数据。\n\nStorage Analytics 以带分隔符格式将日志消息存储在多个 blob 中。使用带分隔符的格式，客户端应用程序可以轻松地分析日志消息中的数据。\n\nStorage Analytics 使用 blob 的命名约定，使你可以找到包含要搜索的日志消息的一个或多个 blob。例如，名为“queue/2014/07/31/1800/000001.log”的 blob 包含与从 2014 年 7 月 31 日 18:00 开始的 1 小时的队列服务相关的日志消息。“000001”指示这是此期间的第一个日志文件。Storage Analytics 还会记录该文件中存储的第一条和最后一条日志消息的时间戳作为 blob 的元数据的一部分。使用 blob 存储的 API 可以根据名称前缀在容器中查找 blob：若要查找包含从 18:00 开始的 1 小时的队列日志数据的所有 blob，可以使用前缀“queue/2014/07/31/1800”。\n\nStorage Analytics 在内部缓存日志消息，然后定期更新相应的 blob 或使用最新一批日志条目创建新的 blob。这将减少它必须执行的写入 blob 服务的次数。\n\n如果你要在自己的应用程序中实现类似的解决方案，则必须考虑如何管理可靠性（在事件发生时向 blob 存储写入每个日志条目）与成本和可伸缩性（在应用程序中缓冲更新，然后批量将其写入到 blob 存储）之间的权衡。\n\n#### 问题和注意事项  \n\n在决定如何存储日志数据时，请考虑以下几点：\n\n-   如果你创建了可避免潜在热分区的表设计，则可能会发现无法高效地访问日志数据。  \n-   若要处理日志数据，客户端通常需要加载多个记录。  \n-   虽然日志数据通常结构化，但 blob 存储可能会是更好的解决方案。  \n\n### 实现注意事项  \n\n本部分讨论在实现前面的部分中所述的模式时，需要牢记的一些注意事项。本部分的大部分内容使用以 C# 编写的示例，其中使用了存储客户端库（在撰写本文时为版本 4.3.0）。\n\n###<a id=\"retrieving-entities\"></a> 检索实体  \n\n如[针对查询的设计](#design-for-querying)这部分所述，最高效的查询是点查询。但是，在某些情况下，你可能需要检索多个实体。本部分介绍使用存储客户端库检索实体的一些常用方法。\n\n####<a id=\"retrieving-a-single-entity-using-the-storage-client-library\"></a> 使用存储客户端库执行点查询  \n\n执行点查询的最简单方法是使用 **Retrieve** 表操作，如以下 C# 代码段中所示，该代码段检索 **PartitionKey** 值为“Sales”并且 **RowKey** 值为“212”的实体：\n\n    TableOperation retrieveOperation =\n        TableOperation.Retrieve<EmployeeEntity>(\"Sales\", \"212\");\n    var retrieveResult = employeeTable.Execute(retrieveOperation);\n    if (retrieveResult.Result != null)\n    {\n    EmployeeEntity employee = (EmployeeEntity)retrieveResult.Result;\n    ...\n    }  \n\n请注意此示例如何将它检索的实体要求为 **EmployeeEntity** 类型。\n\n####<a id=\"retrieving-multiple-entities-using-linq\"></a> 使用 LINQ 检索多个实体  \n\n可以通过将 LINQ 与存储客户端库配合使用，并为查询指定 **where** 子句来检索多个实体。若要避免表扫描，应始终在 where 子句中包括 **PartitionKey** 值，如有可能也包括 **RowKey** 值以避免表和分区扫描。表服务支持一组有限的比较运算符（大于、大于等于、小于、小于等于、等于和不等于）可用于 where 子句。下面的 C# 代码段在销售部门（假定 **RowKey** 存储部门名称）中查找姓氏以“B”开头（假定 **PartitionKey** 存储姓氏）的所有员工：\n\n    TableQuery<EmployeeEntity> employeeQuery =\n            employeeTable.CreateQuery<EmployeeEntity>();\n    var query = (from employee in employeeQuery\n                where employee.PartitionKey == \"Sales\" &&\n                employee.RowKey.CompareTo(\"B\") >= 0 &&\n                employee.RowKey.CompareTo(\"C\") < 0\n                select employee).AsTableQuery();\n    var employees = query.Execute();  \n\n请注意该查询如何同时指定 **RowKey** 和 **PartitionKey** 以确保更佳性能。\n\n以下代码示例演示使用 Fluent API 的等效功能（有关 Fluent API 各个方面的详细信息，请参阅[设计 Fluent API 的最佳实践](http://visualstudiomagazine.com/articles/2013/12/01/best-practices-for-designing-a-fluent-api.aspx)）：\n\n    TableQuery<EmployeeEntity> employeeQuery = new TableQuery<EmployeeEntity>().Where(\n     TableQuery.CombineFilters(\n        TableQuery.CombineFilters(\n        TableQuery.GenerateFilterCondition(\n        \"PartitionKey\", QueryComparisons.Equal, \"Sales\"),\n      TableOperators.And,\n      TableQuery.GenerateFilterCondition(\n        \"RowKey\", QueryComparisons.GreaterThanOrEqual, \"B\")\n    ),\n    TableOperators.And,\n    TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.LessThan, \"C\")\n     )\n    );\n    var employees = employeeTable.ExecuteQuery(employeeQuery);  \n\n\n>[AZURE.NOTE]该示例嵌套了多个 **CombineFilters** 方法以包含三个筛选条件。\n\n#### 通过查询检索大量实体  \n\n最佳查询根据 **PartitionKey** 值和 **RowKey** 值返回单个实体。但是，在某些情况下，你可能需要从同一个分区或者甚至从多个分区返回多个实体。\n\n在这种情况下，应始终充分地测试应用程序的性能。\n\n针对表服务的查询一次最多可以返回 1,000 个实体，并且可以执行时间最长为五秒。如果结果集包含超过 1,000 个的实体，则当查询未在 5 秒内完成或者查询跨越分区边界时，表服务将返回一个继续标记，客户端应用程序使用该标记可以请求下一组实体。有关继续标记如何工作的详细信息，请参阅 MSDN 上的[查询超时和分页](http://msdn.microsoft.com/zh-cn/library/azure/dd135718.aspx)。\n\n如果你使用的是存储客户端库，当它从表服务返回实体时，可以自动为你处理继续标记。以下 C# 代码示例使用存储客户端库自动处理继续标记（如果表服务在响应中返回继续标记）：\n\n    string filter = TableQuery.GenerateFilterCondition(\n        \"PartitionKey\", QueryComparisons.Equal, \"Sales\");\n    TableQuery<EmployeeEntity> employeeQuery =\n        new TableQuery<EmployeeEntity>().Where(filter);\n\n    var employees = employeeTable.ExecuteQuery(employeeQuery);\n    foreach (var emp in employees)\n    {\n        ...\n    }  \n\n以下 C# 代码显式处理继续标记：\n\n    string filter = TableQuery.GenerateFilterCondition(\n        \"PartitionKey\", QueryComparisons.Equal, \"Sales\");\n    TableQuery<EmployeeEntity> employeeQuery =\n        new TableQuery<EmployeeEntity>().Where(filter);\n\n    TableContinuationToken continuationToken = null;\n\n    do\n    {\n        var employees = employeeTable.ExecuteQuerySegmented(\n            employeeQuery, continuationToken);\n    foreach (var emp in employees)\n    {\n     ...\n    }\n    continuationToken = employees.ContinuationToken;\n    } while (continuationToken != null);  \n\n通过显式使用继续标记，可以控制应用程序何时检索下一个数据段。例如，如果客户端应用程序允许用户翻阅表中存储的实体，用户可能会决定不翻阅查询检索的所有实体，因此应用程序仅当用户翻阅完当前段中的所有实体后才会使用继续标记检索下一段。此方法具有以下几个优点：\n\n-   它使你能够限制要从表服务中检索的数据量以及通过网络移动的数据量。  \n-   它使你可以在 .NET 中执行异步 IO。  \n-   它使你可以将继续标记序列化到持久存储，以便可以在应用程序崩溃时继续。  \n\n>[AZURE.NOTE]继续标记通常返回包含 1,000 个实体的段，尽管它可能会更少。这也适用于你通过使用 **Take** 返回与查找条件匹配的前 n 个实体来限制查询返回的条目数的情况：表服务可能会返回包含少于 n 个实体的段和一个继续标记，你使用该标记可以检索剩余实体。\n\n以下 C# 代码演示如何修改段内返回的实体数：\n\n    employeeQuery.TakeCount = 50;  \n\n####<a id=\"server-side-projection\"></a> 服务器端投影  \n\n单个实体最多可以具有 255 个属性，并且大小最多可以为 1 MB。当你查询表并检索实体时，你可能不需要所有属性，并可以避免不必要地传输数据（以帮助减少延迟和降低成本）。你可以使用服务器端投影来只传输你需要的属性。以下示例只检索查询选择的实体的 **Email** 属性（与 **PartitionKey**、**RowKey**、**Timestamp** 和 **ETag** 一起）。\n\n    string filter = TableQuery.GenerateFilterCondition(\n        \"PartitionKey\", QueryComparisons.Equal, \"Sales\");\n    List<string> columns = new List<string>() { \"Email\" };\n    TableQuery<EmployeeEntity> employeeQuery =\n        new TableQuery<EmployeeEntity>().Where(filter).Select(columns);\n\n    var entities = employeeTable.ExecuteQuery(employeeQuery);\n    foreach (var e in entities)\n    {\n        Console.WriteLine(\"RowKey: {0}, EmployeeEmail: {1}\", e.RowKey, e.Email);\n    }  \n\n请注意如何获得 **RowKey** 值（即使它未包含在要检索的属性列表中）。\n\n### 修改实体  \n\n使用存储客户端库可以通过插入、删除和更新实体修改存储在表服务中的实体。可以使用 EGT 将多个插入、更新和删除操作一起批量处理以减少所需的往返次数并提高解决方案的性能。\n\n请注意，存储客户端库执行 EGT 时引发的异常通常包含导致批处理失败的实体的索引。如果你正在调试使用 EGT 的代码，这非常有用。\n\n你还应考虑你的设计如何影响客户端应用程序处理并发和更新操作的方式。\n\n#### 管理并发  \n\n默认情况下，表服务在单个实体级别实现针对 **Insert**、**Merge** 和 **Delete** 操作的开放式并发检查，尽管客户端可以强制表服务跳过这些检查。有关表服务如何管理并发的详细信息，请参阅 Azure Web 应用上的[在 Azure 存储空间中管理并发](/documentation/articles/storage-concurrency) 。  \n\n####<a id=\"merge-or-replace\"></a> 合并或替换  \n\n**TableOperation** 类的 **Replace** 方法始终替换表服务中的完整实体。如果在存储实体中存在某个属性时请求中未包含该属性，则请求将从存储实体中删除该属性。除非你想要从存储实体中显式删除某一属性，否则必须在请求中包含每个属性。\n\n要更新实体时，你可以使用 **TableOperation** 类的 **Merge** 方法来减少你发送到表服务的数据量。**Merge** 方法会将存储实体的任何属性替换为请求中包含的实体的属性值，但会将请求中未包含的存储实体的任何属性保持不变。如果你使用大型实体并且只需在请求中更新少量属性，则此方法很有用。\n\n>[AZURE.NOTE]如果该实体不存在，**Replace** 和 **Merge** 方法将失败。作为替代方法，你可以使用 **InsertOrReplace** 和 **InsertOrMerge** 方法，这两个方法在实体不存在时会创建一个新实体。\n\n###<a id=\"working-with-heterogeneous-entity-types\"></a> 处理异类实体类型  \n\n表服务是*架构灵活*的表存储，意味着单个表可以存储多种类型的实体，从而在设计中提供了极大的灵活性。以下示例说明了同时存储员工实体和部门实体的表：\n\n<table>\n<tr>\n<th>PartitionKey</th>\n<th>RowKey</th>\n<th>Timestamp</th>\n<th></th>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>\n<table>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>\n<table>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>\n<table>\n<tr>\n<th>DepartmentName</th>\n<th>EmployeeCount</th>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>\n<table>\n<tr>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n</td>\n</tr>\n</table>\n\n请注意，每个实体仍然必须具有 **PartitionKey**、**RowKey** 和 **Timestamp** 值，但可以具有任何一组属性。此外，没有任何信息指示实体的类型，除非你选择在某处存储该信息。有两个用于标识实体类型的选项：\n\n-   在 **RowKey**（或可能 **PartitionKey**）前面添加实体类型。例如，将 **EMPLOYEE_000123** 或 **DEPARTMENT_SALES** 作为 **RowKey** 值。  \n-   使用一个单独的属性来记录实体类型，如下表中所示。  \n\n<table>\n<tr>\n<th>PartitionKey</th>\n<th>RowKey</th>\n<th>Timestamp</th>\n<th></th>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>\n<table>\n<tr>\n<th>EntityType</th>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td>Employee</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>\n<table>\n<tr>\n<th>EntityType</th>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td>Employee</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>\n<table>\n<tr>\n<th>EntityType</th>\n<th>DepartmentName</th>\n<th>EmployeeCount</th>\n</tr>\n<tr>\n<td>Department</td>\n<td></td>\n<td></td>\n</tr>\n</table>\n</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td>\n<table>\n<tr>\n<th>EntityType</th>\n<th>FirstName</th>\n<th>LastName</th>\n<th>Age</th>\n<th>Email</th>\n</tr>\n<tr>\n<td>Employee</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</table>\n</td>\n</tr>\n</table>\n\n如果存在两个不同类型的实体可能具有相同键值的情况，则第一个选项（在 **RowKey** 前面添加实体类型）会很有用。它还会在分区中将同一类型的实体分组在一起。\n\n此部分中讨论的技术与本指南中前面部分[模型关系](#modelling-relationships)讨论的[继承关系](#inheritance-relationships)有关。\n\n>[AZURE.NOTE]你应考虑在实体类型值中包含版本号以允许客户端应用程序演变 POCO 对象并处理不同版本。\n\n本部分的剩余部分将介绍存储客户端库中便于处理同一表中的多个实体类型的一些功能。\n\n#### 检索异类实体类型  \n\n如果你使用存储客户端库，则有三个选项可处理多个实体类型。\n\n如果你知道使用特定 **RowKey** 和 **PartitionKey** 值存储的实体的类型，则在检索实体时可以指定该实体类型（如前面两个检索 **EmployeeEntity** 类型的实体的示例所示）：[使用存储客户端库检索单个实体](#retrieving-a-single-entity-using-the-storage-client-library)和[使用 LINQ 检索多个实体](#retrieving-multiple-entities-using-linq)。\n\n第二个选项是使用 **DynamicTableEntity** 类型（属性包）而不是具体的 POCO 实体类型（此选项还可以提高性能，因为无需序列化实体和将实体反序列化为 .NET 类型）。以下 C# 代码可能会从表中检索多个不同类型的实体，但会将所有实体作 **DynamicTableEntity** 实例返回。然后，它使用 **EntityType** 属性来确定每个实体的类型：\n\n    string filter =     TableQuery.CombineFilters(\n        TableQuery.GenerateFilterCondition(\"PartitionKey\",\n      QueryComparisons.Equal, \"Sales\"),\n        TableOperators.And,\n        TableQuery.CombineFilters(\n        TableQuery.GenerateFilterCondition(\"RowKey\",\n                    QueryComparisons.GreaterThanOrEqual, \"B\"),\n            TableOperators.And,\n            TableQuery.GenerateFilterCondition(\"RowKey\",\n          QueryComparisons.LessThan, \"F\")\n        )\n    );\n    TableQuery<DynamicTableEntity> entityQuery =\n    new TableQuery<DynamicTableEntity>().Where(filter);\n    var employees = employeeTable.ExecuteQuery(entityQuery);\n\n    IEnumerable<DynamicTableEntity> entities = employeeTable.ExecuteQuery(entityQuery);\n    foreach (var e in entities)\n    {\n    EntityProperty entityTypeProperty;\n    if (e.Properties.TryGetValue(\"EntityType\", out entityTypeProperty))\n    {\n        if (entityTypeProperty.StringValue == \"Employee\")\n        {\n            // Use entityTypeProperty, RowKey, PartitionKey, Etag, and Timestamp\n          }\n     }\n    }  \n\n请注意，若要检索其他属性，必须对 **DynamicTableEntity** 类的 **Properties** 属性使用 **TryGetValue** 方法。\n\n第三个选项是组合使用 **DynamicTableEntity** 类型和 **EntityResolver** 实例。使用此选项可以在同一查询中解析为多种 POCO 类型。在此示例中，**EntityResolver** 委托使用 **EntityType** 属性来区分查询返回的两种实体类型。 **Resolve** 方法使用 **resolver** 委托将 **DynamicTableEntity** 实例解析为 **TableEntity** 实例。\n\n    EntityResolver<TableEntity> resolver = (pk, rk, ts, props, etag) =>\n    {\n\n        TableEntity resolvedEntity = null;\n        if (props[\"EntityType\"].StringValue == \"Department\")\n        {\n            resolvedEntity = new DepartmentEntity();\n        }\n        else if (props[\"EntityType\"].StringValue == \"Employee\")\n        {\n            resolvedEntity = new EmployeeEntity();\n        }\n        else throw new ArgumentException(\"Unrecognized entity\", \"props\");\n\n        resolvedEntity.PartitionKey = pk;\n        resolvedEntity.RowKey = rk;\n        resolvedEntity.Timestamp = ts;\n        resolvedEntity.ETag = etag;\n        resolvedEntity.ReadEntity(props, null);\n        return resolvedEntity;\n    };\n\n    string filter = TableQuery.GenerateFilterCondition(\n        \"PartitionKey\", QueryComparisons.Equal, \"Sales\");\n    TableQuery<DynamicTableEntity> entityQuery =\n        new TableQuery<DynamicTableEntity>().Where(filter);\n\n    var entities = employeeTable.ExecuteQuery(entityQuery, resolver);\n    foreach (var e in entities)\n    {\n        if (e is DepartmentEntity)\n        {\n        ...\n        }\n        if (e is EmployeeEntity)\n        {\n        ...\n        }\n    }  \n\n#### 修改异类实体类型  \n\n无需知道实体的类型就可删除该实体，在插入实体时你始终知道该实体的类型。但是，你可以使用 **DynamicTableEntity** 类型来更新实体，而不必知道其类型，也无需使用 POCO 实体类。以下代码示例检索单个实体，并在更新该实体前检查 **EmployeeCount** 属性是否存在。\n\n    TableResult result =\n        employeeTable.Execute(TableOperation.Retrieve(partitionKey, rowKey));\n    DynamicTableEntity department = (DynamicTableEntity)result.Result;\n\n    EntityProperty countProperty;\n\n    if (!department.Properties.TryGetValue(\"EmployeeCount\", out countProperty))\n    {\n        throw new\n            InvalidOperationException(\"Invalid entity, EmployeeCount property not found.\");\n    }\n    countProperty.Int32Value += 1;\n    employeeTable.Execute(TableOperation.Merge(department));  \n\n###<a id=\"controlling-access-with-shared-access-signatures\"></a> 使用共享访问签名控制访问权限  \n\n可以使用共享访问签名 (SAS) 令牌允许客户端应用程序直接修改（和查询）表实体，而无需直接使用表服务进行身份验证。通常情况下，在应用程序中使用 SAS 主要有以下三大优点：\n\n-   无需将存储帐户密钥分发到不安全的平台（如移动设备），即可允许该设备访问和修改表服务中的实体。  \n-   可以卸下 Web 角色和辅助角色在管理传递到客户端设备（如最终用户计算机和移动设备）的实体时执行的一些工作负荷。  \n-   可以向客户端分配一组受约束且有时间限制的权限（如允许对特定资源进行只读访问）。  \n\n有关在表服务中使用 SAS 令牌的详细信息，请参阅[共享访问签名，第 1 部分：了解 SAS 模型](/documentation/articles/storage-dotnet-shared-access-signature-part-1)。\n\n但是，仍必须生成授权客户端应用程序访问表服务中的实体的 SAS 令牌：应在可安全地访问存储帐户密钥的环境中执行此操作。通常，使用 Web 角色或辅助角色生成 SAS 令牌并将其传递给需要访问你的实体的客户端应用程序。由于生成 SAS 令牌并将其传递到客户端仍有开销，你应考虑如何最有效地减少此开销，尤其是在大容量方案中。\n\n可以生成授权访问表中实体子集的 SAS 令牌。默认情况下，将为整个表创建 SAS 令牌，但也可以指定授权访问一组 **PartitionKey** 值或一组 **PartitionKey** 和 **RowKey** 值的 SAS 令牌。可以选择为单个系统用户生成 SAS 令牌，使每个用户的 SAS 令牌仅允许他访问表服务中他自己的实体。\n\n### 异步和并行操作  \n\n假设你将请求分布到多个分区，你可以通过使用异步或并行查询来提高吞吐量和客户端响应能力。例如，你可以使用两个或更多个辅助角色实例并行访问表。你可以让单个辅助角色负责特定分区集，也可以直接使用多个辅助角色实例，每个辅助角色实例都能访问某个表中的所有分区。\n\n在客户端实例中，可以通过以异步方式执行存储操作来提高吞吐量。使用存储客户端库，可以轻松地编写异步查询和修改。例如，你可以从用于检索某个分区中的所有实体的同步方法开始，如以下 C# 代码中所示：\n\n    private static void ManyEntitiesQuery(CloudTable employeeTable, string department)\n    {\n        string filter = TableQuery.GenerateFilterCondition(\n            \"PartitionKey\", QueryComparisons.Equal, department);\n        TableQuery<EmployeeEntity> employeeQuery =\n            new TableQuery<EmployeeEntity>().Where(filter);\n\n        TableContinuationToken continuationToken = null;\n\n        do\n        {\n            var employees = employeeTable.ExecuteQuerySegmented(\n                employeeQuery, continuationToken);\n            foreach (var emp in employees)\n        {\n        ...\n        }\n            continuationToken = employees.ContinuationToken;\n        } while (continuationToken != null);\n    }  \n\n可以轻松地修改此代码，使查询以异步方式运行，如下所示：\n\n    private static async Task ManyEntitiesQueryAsync(CloudTable employeeTable, string department)\n    {\n        string filter = TableQuery.GenerateFilterCondition(\n            \"PartitionKey\", QueryComparisons.Equal, department);\n        TableQuery<EmployeeEntity> employeeQuery =\n            new TableQuery<EmployeeEntity>().Where(filter);\n        TableContinuationToken continuationToken = null;\n\n        do\n        {\n            var employees = await employeeTable.ExecuteQuerySegmentedAsync(\n                employeeQuery, continuationToken);\n            foreach (var emp in employees)\n            {\n             ...\n            }\n            continuationToken = employees.ContinuationToken;\n            } while (continuationToken != null);\n    }  \n\n在此异步示例中，你可以看到对同步版本进行了以下更改：\n\n-   方法签名现在包括 **async** 修饰符，并返回 **Task** 实例。  \n-   不是调用 **ExecuteSegmented** 方法来检索结果，该方法现在调用 **ExecuteSegmentedAsync** 方法，并使用 **await** 修饰符来以异步方式检索结果。  \n\n客户端应用程序可以多次调用此方法（对 **department** 参数使用不同值），并且每个查询都将在一个单独的线程中运行。\n\n请注意，**TableQuery** 类中的 **Execute** 方法没有异步版本，因为 **IEnumerable** 接口不支持异步枚举。\n\n此外，还可以用异步方式插入、更新和删除实体。以下 C# 示例说明了一个简单的同步方法，该方法用于插入或替换员工实体：\n\n    private static void SimpleEmployeeUpsert(CloudTable employeeTable,\n        EmployeeEntity employee)\n    {\n        TableResult result = employeeTable\n            .Execute(TableOperation.InsertOrReplace(employee));\n        Console.WriteLine(\"HTTP Status: {0}\", result.HttpStatusCode);\n    }  \n\n可以轻松地修改此代码，使更新以异步方式运行，如下所示：\n\n    private static async Task SimpleEmployeeUpsertAsync(CloudTable employeeTable,\n        EmployeeEntity employee)\n    {\n        TableResult result = await employeeTable\n            .ExecuteAsync(TableOperation.InsertOrReplace(employee));\n        Console.WriteLine(\"HTTP Status: {0}\", result.HttpStatusCode);\n    }  \n\n在此异步示例中，你可以看到对同步版本进行了以下更改：\n\n-   方法签名现在包括 **async** 修饰符，并返回 **Task** 实例。  \n-   不是调用 **Execute** 方法来更新实体，该方法现在调用 **ExecuteAsync** 方法，并使用 **await** 修饰符来以异步方式检索结果。  \n\n客户端应用程序可以调用多个类似这样的异步方法，每个方法调用都将在一个单独的线程中运行。\n\n\n### 致谢\n我们要特别感谢 Azure 团队以下成员所做出的贡献：Dominic Betts、Jason Hogg、Jean Ghanem、Jai Haridas、Jeff Irwin、Vamshidhar Kommineni、Vinay Shah 和 Serdar Ozler 以及来自 Microsoft DX 的 Tom Hollander。\n\n我们还要感谢以下 Microsoft MVP 在审核期间提供的有价值的反馈：Igor Papirov 和 Edward Bakker。\n\n\n\n[1]: ./media/storage-table-design-guide/storage-table-design-IMAGE01.png\n[2]: ./media/storage-table-design-guide/storage-table-design-IMAGE02.png\n[3]: ./media/storage-table-design-guide/storage-table-design-IMAGE03.png\n[4]: ./media/storage-table-design-guide/storage-table-design-IMAGE04.png\n[5]: ./media/storage-table-design-guide/storage-table-design-IMAGE05.png\n[6]: ./media/storage-table-design-guide/storage-table-design-IMAGE06.png\n[7]: ./media/storage-table-design-guide/storage-table-design-IMAGE07.png\n[8]: ./media/storage-table-design-guide/storage-table-design-IMAGE08.png\n[9]: ./media/storage-table-design-guide/storage-table-design-IMAGE09.png\n[10]: ./media/storage-table-design-guide/storage-table-design-IMAGE10.png\n[11]: ./media/storage-table-design-guide/storage-table-design-IMAGE11.png\n[12]: ./media/storage-table-design-guide/storage-table-design-IMAGE12.png\n[13]: ./media/storage-table-design-guide/storage-table-design-IMAGE13.png\n[14]: ./media/storage-table-design-guide/storage-table-design-IMAGE14.png\n[15]: ./media/storage-table-design-guide/storage-table-design-IMAGE15.png\n[16]: ./media/storage-table-design-guide/storage-table-design-IMAGE16.png\n[17]: ./media/storage-table-design-guide/storage-table-design-IMAGE17.png\n[18]: ./media/storage-table-design-guide/storage-table-design-IMAGE18.png\n[19]: ./media/storage-table-design-guide/storage-table-design-IMAGE19.png\n[20]: ./media/storage-table-design-guide/storage-table-design-IMAGE20.png\n[21]: ./media/storage-table-design-guide/storage-table-design-IMAGE21.png\n[22]: ./media/storage-table-design-guide/storage-table-design-IMAGE22.png\n[23]: ./media/storage-table-design-guide/storage-table-design-IMAGE23.png\n[24]: ./media/storage-table-design-guide/storage-table-design-IMAGE24.png\n[25]: ./media/storage-table-design-guide/storage-table-design-IMAGE25.png\n[26]: ./media/storage-table-design-guide/storage-table-design-IMAGE26.png\n[27]: ./media/storage-table-design-guide/storage-table-design-IMAGE27.png\n[28]: ./media/storage-table-design-guide/storage-table-design-IMAGE28.png\n[29]: ./media/storage-table-design-guide/storage-table-design-IMAGE29.png\n \n\n<!---HONumber=Mooncake_0104_2016-->"
}