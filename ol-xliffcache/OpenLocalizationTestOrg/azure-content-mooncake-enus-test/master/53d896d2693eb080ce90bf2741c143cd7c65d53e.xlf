<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53d896d2693eb080ce90bf2741c143cd7c65d53e</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure 存储性能和可伸缩性清单</source>
          <target state="new">Azure 存储性能和可伸缩性清单</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在开发使用 Azure 存储的高性能应用程序时，一个经过验证的检查表。</source>
          <target state="new">在开发使用 Azure 存储的高性能应用程序时，一个经过验证的检查表。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure 存储性能和可伸缩性清单</source>
          <target state="new">Azure 存储性能和可伸缩性清单</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>自从 Azure 存储服务发布以来，Microsoft 已经形成了大量的经过验证的做法，目的是提高这些服务的使用效率。本文将其中最重要的一些做法进行了总结，并以“清单”形式列出。本文的目的是确保应用程序开发人员在使用 Azure 存储空间时，采用的是经过验证的做法，并帮助他们确认其他经过验证的、可以考虑采用的做法。本文不会全盘介绍所有可能的性能与伸缩性优化内容，那些影响不大或适用范围不广的内容不在本文讲解之列。必须在设计过程中确保应用程序的行为是可预测到的，因此应早些了解这些经过验证的做法，避免进行那些会引发性能问题的设计。</source>
          <target state="new">自从 Azure 存储服务发布以来，Microsoft 已经形成了大量的经过验证的做法，目的是提高这些服务的使用效率。本文将其中最重要的一些做法进行了总结，并以“清单”形式列出。本文的目的是确保应用程序开发人员在使用 Azure 存储空间时，采用的是经过验证的做法，并帮助他们确认其他经过验证的、可以考虑采用的做法。本文不会全盘介绍所有可能的性能与伸缩性优化内容，那些影响不大或适用范围不广的内容不在本文讲解之列。必须在设计过程中确保应用程序的行为是可预测到的，因此应早些了解这些经过验证的做法，避免进行那些会引发性能问题的设计。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>每一位使用 Azure 存储空间的应用程序开发人员都应抽时间阅读本文，确保其应用程序的设计遵循下面列出的每一项经过验证的做法。</source>
          <target state="new">每一位使用 Azure 存储空间的应用程序开发人员都应抽时间阅读本文，确保其应用程序的设计遵循下面列出的每一项经过验证的做法。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>清单</source>
          <target state="new">清单</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>本文将这些经过验证的做法整理成以下类别。适用于以下类别的经过验证的做法：</source>
          <target state="new">本文将这些经过验证的做法整理成以下类别。适用于以下类别的经过验证的做法：</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>所有 Azure 存储服务（Blob、表、队列和文件）</source>
          <target state="new">所有 Azure 存储服务（Blob、表、队列和文件）</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>完成</source>
          <target state="new">完成</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>区域</source>
          <target state="new">区域</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>类别</source>
          <target state="new">类别</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>问题</source>
          <target state="new">问题</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>可伸缩性目标</source>
          <target state="new">可伸缩性目标</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>你的应用程序是否设计为避免接近可伸缩性目标？</source>
          <target state="new">你的应用程序是否设计为避免接近可伸缩性目标？</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>网络</source>
          <target state="new">网络</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>客户端设备是否具有足够高的带宽和足够低的延迟，可以实现所需的性能？</source>
          <target state="new">客户端设备是否具有足够高的带宽和足够低的延迟，可以实现所需的性能？</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>网络</source>
          <target state="new">网络</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>客户端设备是否具有足够高的高质量链接？</source>
          <target state="new">客户端设备是否具有足够高的高质量链接？</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>网络</source>
          <target state="new">网络</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>客户端应用程序的位置是否“靠近”存储帐户？</source>
          <target state="new">客户端应用程序的位置是否“靠近”存储帐户？</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>内容分发</source>
          <target state="new">内容分发</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>是否要使用 CDN 进行内容分发？</source>
          <target state="new">是否要使用 CDN 进行内容分发？</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>客户端直接访问</source>
          <target state="new">客户端直接访问</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>是否要使用 SAS 和 CORS 来允许直接访问存储而非代理？</source>
          <target state="new">是否要使用 SAS 和 CORS 来允许直接访问存储而非代理？</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>缓存</source>
          <target state="new">缓存</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>你的应用程序是否会缓存反复使用且很少更改的数据？</source>
          <target state="new">你的应用程序是否会缓存反复使用且很少更改的数据？</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>缓存</source>
          <target state="new">缓存</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>你的应用程序是否会对更新进行批处理（将更新缓存在客户端，等到数量较多时再成批上载）？</source>
          <target state="new">你的应用程序是否会对更新进行批处理（将更新缓存在客户端，等到数量较多时再成批上载）？</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>.NET 配置</source>
          <target state="new">.NET 配置</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>你是否已将客户端配置为使用足够数量的并发连接？</source>
          <target state="new">你是否已将客户端配置为使用足够数量的并发连接？</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>.NET 配置</source>
          <target state="new">.NET 配置</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>你是否已将 .NET 配置为使用足够数量的线程？</source>
          <target state="new">你是否已将 .NET 配置为使用足够数量的线程？</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>.NET 配置</source>
          <target state="new">.NET 配置</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>你是否会使用 .NET 4.5 或更高版本，以便改进垃圾收集？</source>
          <target state="new">你是否会使用 .NET 4.5 或更高版本，以便改进垃圾收集？</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>并行</source>
          <target state="new">并行</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>你是否能够确保对并行度进行了恰当的界定，使客户端功能或可伸缩性目标不会出现过载现象？</source>
          <target state="new">你是否能够确保对并行度进行了恰当的界定，使客户端功能或可伸缩性目标不会出现过载现象？</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>工具</source>
          <target state="new">工具</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>你是否会使用 Microsoft 提供的最新版客户端库和工具？</source>
          <target state="new">你是否会使用 Microsoft 提供的最新版客户端库和工具？</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>重试</source>
          <target state="new">重试</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>你是否会对限制错误和超时使用指数性的回退重试策略？</source>
          <target state="new">你是否会对限制错误和超时使用指数性的回退重试策略？</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>所有服务</source>
          <target state="new">所有服务</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>重试</source>
          <target state="new">重试</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>对于不可重试的错误，你的应用程序是否会避免重试？</source>
          <target state="new">对于不可重试的错误，你的应用程序是否会避免重试？</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>可伸缩性目标</source>
          <target state="new">可伸缩性目标</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>你的应用程序是否会保持在针对单个 Blob 的带宽或操作可伸缩性目标范围之内？</source>
          <target state="new">你的应用程序是否会保持在针对单个 Blob 的带宽或操作可伸缩性目标范围之内？</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>复制 Blob</source>
          <target state="new">复制 Blob</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>你的 Blob 复制操作方式是否高效？</source>
          <target state="new">你的 Blob 复制操作方式是否高效？</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>复制 Blob</source>
          <target state="new">复制 Blob</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>你是否会使用 AzCopy 对 Blob 进行批量复制？</source>
          <target state="new">你是否会使用 AzCopy 对 Blob 进行批量复制？</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>复制 Blob</source>
          <target state="new">复制 Blob</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>你是否会使用 Azure 导入/导出来传输非常大量的数据？</source>
          <target state="new">你是否会使用 Azure 导入/导出来传输非常大量的数据？</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>使用元数据</source>
          <target state="new">使用元数据</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>你是否会将频繁使用的有关 Blob 的元数据存储在其元数据中？</source>
          <target state="new">你是否会将频繁使用的有关 Blob 的元数据存储在其元数据中？</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>快速上载</source>
          <target state="new">快速上载</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>尝试快速上载一个 Blob 时，你是否会以并行方式上载块？</source>
          <target state="new">尝试快速上载一个 Blob 时，你是否会以并行方式上载块？</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>快速上载</source>
          <target state="new">快速上载</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>尝试快速上载许多 Blob 时，你是否会以并行方式上载 Blob？</source>
          <target state="new">尝试快速上载许多 Blob 时，你是否会以并行方式上载 Blob？</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>正确 Blob 类型</source>
          <target state="new">正确 Blob 类型</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>你是否会根据需要使用页面 Blob 或块 Blob？</source>
          <target state="new">你是否会根据需要使用页面 Blob 或块 Blob？</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>可伸缩性目标</source>
          <target state="new">可伸缩性目标</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>你是否在接近实体数/秒的可伸缩性目标？</source>
          <target state="new">你是否在接近实体数/秒的可伸缩性目标？</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>配置</source>
          <target state="new">配置</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>你是否使用 JSON 进行表请求？</source>
          <target state="new">你是否使用 JSON 进行表请求？</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>配置</source>
          <target state="new">配置</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>你是否已关闭 Nagle 以改进小型请求的性能？</source>
          <target state="new">你是否已关闭 Nagle 以改进小型请求的性能？</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>表和分区</source>
          <target state="new">表和分区</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>你是否已对数据进行了适当的分区？</source>
          <target state="new">你是否已对数据进行了适当的分区？</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>热分区</source>
          <target state="new">热分区</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>你是否会避免仅限追加和仅限预置模式？</source>
          <target state="new">你是否会避免仅限追加和仅限预置模式？</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>热分区</source>
          <target state="new">热分区</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>你的插入/更新内容是否会分布在多个分区中？</source>
          <target state="new">你的插入/更新内容是否会分布在多个分区中？</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>查询范围</source>
          <target state="new">查询范围</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>你是否已将架构设计为允许在大多数情况下使用点查询，尽量少用表查询？</source>
          <target state="new">你是否已将架构设计为允许在大多数情况下使用点查询，尽量少用表查询？</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>查询密度</source>
          <target state="new">查询密度</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>你的查询是否通常只扫描和返回应用程序会使用的行？</source>
          <target state="new">你的查询是否通常只扫描和返回应用程序会使用的行？</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>限制返回的数据</source>
          <target state="new">限制返回的数据</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>你是否使用筛选来避免返回不需要的实体？</source>
          <target state="new">你是否使用筛选来避免返回不需要的实体？</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>限制返回的数据</source>
          <target state="new">限制返回的数据</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>你是否使用投影来避免返回不需要的属性？</source>
          <target state="new">你是否使用投影来避免返回不需要的属性？</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>非规范化</source>
          <target state="new">非规范化</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>你是否已对数据实施非规范化，这样，当你尝试获取数据时，就可以避免无效的查询或多次读取请求？</source>
          <target state="new">你是否已对数据实施非规范化，这样，当你尝试获取数据时，就可以避免无效的查询或多次读取请求？</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>插入/更新/删除</source>
          <target state="new">插入/更新/删除</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>你是否会对需要进行事务处理或可以同时完成的请求进行批处理，以便减少不必要的重复操作？</source>
          <target state="new">你是否会对需要进行事务处理或可以同时完成的请求进行批处理，以便减少不必要的重复操作？</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>插入/更新/删除</source>
          <target state="new">插入/更新/删除</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>你是否会避免仅仅为了确定是否需要调用插入或更新而检索某个实体？</source>
          <target state="new">你是否会避免仅仅为了确定是否需要调用插入或更新而检索某个实体？</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>插入/更新/删除</source>
          <target state="new">插入/更新/删除</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>你是否考虑过将各种需要频繁检索的数据作为属性一起存储在单个实体中而非多个实体中？</source>
          <target state="new">你是否考虑过将各种需要频繁检索的数据作为属性一起存储在单个实体中而非多个实体中？</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>插入/更新/删除</source>
          <target state="new">插入/更新/删除</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>对于那些始终需要一起检索并可成批写入的实体（例如，时间系列数据），你是否考虑过使用 Blob 而非表？</source>
          <target state="new">对于那些始终需要一起检索并可成批写入的实体（例如，时间系列数据），你是否考虑过使用 Blob 而非表？</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>可伸缩性目标</source>
          <target state="new">可伸缩性目标</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>是否已接近每秒消息的可伸缩性目标？</source>
          <target state="new">是否已接近每秒消息的可伸缩性目标？</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>配置</source>
          <target state="new">配置</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>你是否已关闭 Nagle 以改进小型请求的性能？</source>
          <target state="new">你是否已关闭 Nagle 以改进小型请求的性能？</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>消息大小</source>
          <target state="new">消息大小</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>你的消息是否经过压缩，因此可以改进队列的性能？</source>
          <target state="new">你的消息是否经过压缩，因此可以改进队列的性能？</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>批量检索</source>
          <target state="new">批量检索</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>你是否会使用单个“Get”操作检索多个消息？</source>
          <target state="new">你是否会使用单个“Get”操作检索多个消息？</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>轮询频率</source>
          <target state="new">轮询频率</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>你是否会进行足够频繁的轮询，以便减少感知到的应用程序的延迟？</source>
          <target state="new">你是否会进行足够频繁的轮询，以便减少感知到的应用程序的延迟？</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>更新消息</source>
          <target state="new">更新消息</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>你是否会使用 UpdateMessage 来存储消息处理进度，这样，在发生错误时就不必重新处理整个消息？</source>
          <target state="new">你是否会使用 UpdateMessage 来存储消息处理进度，这样，在发生错误时就不必重新处理整个消息？</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>体系结构</source>
          <target state="new">体系结构</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>你是否会将长时间运行的工作负载置于关键路径之外，以便使用队列来提高整个应用程序的可伸缩性，然后再进行独立的伸缩？</source>
          <target state="new">你是否会将长时间运行的工作负载置于关键路径之外，以便使用队列来提高整个应用程序的可伸缩性，然后再进行独立的伸缩？</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="allservices"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>所有服务</source>
          <target state="new"><ph id="ph1">&lt;a name="allservices"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>所有服务</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>本部分列出的经过验证的做法适用于任何 Azure 存储服务（Blob、表、队列或文件）。</source>
          <target state="new">本部分列出的经过验证的做法适用于任何 Azure 存储服务（Blob、表、队列或文件）。</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading1"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>可伸缩性目标</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading1"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>可伸缩性目标</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>每项 Azure 存储服务都有针对容量 (GB)、事务处理速率和带宽的可伸缩性目标。如果你的应用程序接近或超过任何可伸缩性目标，则可能会出现事务处理延迟或限制越来越严重的现象。当某个存储服务对你的应用程序进行限制时，该服务在进行部分存储事务处理时就会开始返回“503 服务器忙”或“500 操作超时”错误代码。本部分讨论处理可伸缩性目标的通用方法以及具体的带宽可伸缩性目标。后面的部分讲述各个存储服务，将讨论使用该特定服务时的可伸缩性目标：</source>
          <target state="new">每项 Azure 存储服务都有针对容量 (GB)、事务处理速率和带宽的可伸缩性目标。如果你的应用程序接近或超过任何可伸缩性目标，则可能会出现事务处理延迟或限制越来越严重的现象。当某个存储服务对你的应用程序进行限制时，该服务在进行部分存储事务处理时就会开始返回“503 服务器忙”或“500 操作超时”错误代码。本部分讨论处理可伸缩性目标的通用方法以及具体的带宽可伸缩性目标。后面的部分讲述各个存储服务，将讨论使用该特定服务时的可伸缩性目标：</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Blob 带宽和请求数/秒</source>
          <target state="new">Blob 带宽和请求数/秒</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>表实体数/秒</source>
          <target state="new">表实体数/秒</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>队列消息数/秒</source>
          <target state="new">队列消息数/秒</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="sub1bandwidth"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>所有服务的带宽可伸缩性目标</source>
          <target state="new"><ph id="ph1">&lt;a name="sub1bandwidth"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>所有服务的带宽可伸缩性目标</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>国际带宽限制可能会较低，详情请参阅我们的<bpt id="p1">[</bpt>可伸缩性目标页<ept id="p1">](/documentation/articles/storage-scalability-targets)</ept>。</source>
          <target state="new">国际带宽限制可能会较低，详情请参阅我们的<bpt id="p1">[</bpt>可伸缩性目标页<ept id="p1">](/documentation/articles/storage-scalability-targets)</ept>。</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>有关存储冗余选项的详细信息，请参阅下面<bpt id="p1">[</bpt>有用的资源<ept id="p1">](#sub1useful)</ept>中的链接。</source>
          <target state="new">有关存储冗余选项的详细信息，请参阅下面<bpt id="p1">[</bpt>有用的资源<ept id="p1">](#sub1useful)</ept>中的链接。</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>接近可伸缩性目标时应怎么办</source>
          <target state="new">接近可伸缩性目标时应怎么办</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>如果你的应用程序正接近单个存储帐户的可伸缩性目标，可考虑采用下述方法之一：</source>
          <target state="new">如果你的应用程序正接近单个存储帐户的可伸缩性目标，可考虑采用下述方法之一：</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>重新考虑导致你的应用程序接近或超过可伸缩性目标的工作负载。你能否对其进行另外的设计，以便使用较少的带宽、容量或处理事务？</source>
          <target state="new">重新考虑导致你的应用程序接近或超过可伸缩性目标的工作负载。你能否对其进行另外的设计，以便使用较少的带宽、容量或处理事务？</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>如果某个应用程序肯定会超出可伸缩性目标之一，则应创建多个存储帐户并将应用程序数据跨多个这样的存储帐户进行分区。如果你使用这种模式，则在设计你的应用程序时，必须确保能够在以后添加更多的存储帐户，以便进行负载平衡。在撰写本文之际，每个 Azure 订阅最多可以有 100 个存储帐户。存储帐户除了用于数据存储、事务处理或数据传输，并无其他开销。</source>
          <target state="new">如果某个应用程序肯定会超出可伸缩性目标之一，则应创建多个存储帐户并将应用程序数据跨多个这样的存储帐户进行分区。如果你使用这种模式，则在设计你的应用程序时，必须确保能够在以后添加更多的存储帐户，以便进行负载平衡。在撰写本文之际，每个 Azure 订阅最多可以有 100 个存储帐户。存储帐户除了用于数据存储、事务处理或数据传输，并无其他开销。</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>如果你的应用程序达到了带宽目标，可考虑压缩客户端的数据，以便减少将数据发送到存储服务所需的带宽。请注意，这虽然会节省带宽并改进网络性能，但也会带来某些负面影响。你可以评估一下这样操作对性能的影响，因为在客户端压缩和解压缩数据会有其他处理要求。此外，存储压缩数据会使问题解决起来更加困难，因为使用标准工具查看存储的数据可能会更困难。</source>
          <target state="new">如果你的应用程序达到了带宽目标，可考虑压缩客户端的数据，以便减少将数据发送到存储服务所需的带宽。请注意，这虽然会节省带宽并改进网络性能，但也会带来某些负面影响。你可以评估一下这样操作对性能的影响，因为在客户端压缩和解压缩数据会有其他处理要求。此外，存储压缩数据会使问题解决起来更加困难，因为使用标准工具查看存储的数据可能会更困难。</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>如果您的应用程序达到了可伸缩性目标，则请确保对重试使用指数性的回退（请参阅<bpt id="p1">[</bpt>重试<ept id="p1">](#subheading14)</ept>）。这会确保你的应用程序不会一直进行快速重试，以免加重限制，不过，最好还是使用上述方法之一来确保你永远不会达到可伸缩性目标。</source>
          <target state="new">如果您的应用程序达到了可伸缩性目标，则请确保对重试使用指数性的回退（请参阅<bpt id="p1">[</bpt>重试<ept id="p1">](#subheading14)</ept>）。这会确保你的应用程序不会一直进行快速重试，以免加重限制，不过，最好还是使用上述方法之一来确保你永远不会达到可伸缩性目标。</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>有用的资源</source>
          <target state="new">有用的资源</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>下面的链接提供有关可伸缩性目标的其他详细信息：</source>
          <target state="new">下面的链接提供有关可伸缩性目标的其他详细信息：</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>有关可伸缩性目标的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id="p1">](/documentation/articles/storage-scalability-targets)</ept>。</source>
          <target state="new">有关可伸缩性目标的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id="p1">](/documentation/articles/storage-scalability-targets)</ept>。</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>有关存储冗余选项的信息，请参阅 <bpt id="p1">[</bpt>Azure 存储空间复制<ept id="p1">](/documentation/articles/storage-redundancy)</ept>和博客文章 <bpt id="p2">[</bpt>Azure 存储冗余选项和读取访问地域冗余存储<ept id="p2">](http://blogs.msdn.com/b/windowsazurestorage/archive/2013/12/11/introducing-read-access-geo-replicated-storage-ra-grs-for-windows-azure-storage.aspx)</ept>。</source>
          <target state="new">有关存储冗余选项的信息，请参阅 <bpt id="p1">[</bpt>Azure 存储空间复制<ept id="p1">](/documentation/articles/storage-redundancy)</ept>和博客文章 <bpt id="p2">[</bpt>Azure 存储冗余选项和读取访问地域冗余存储<ept id="p2">](http://blogs.msdn.com/b/windowsazurestorage/archive/2013/12/11/introducing-read-access-geo-replicated-storage-ra-grs-for-windows-azure-storage.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>有关 Azure 服务价格的最新信息，请参阅 <bpt id="p1">[</bpt>Azure 定价<ept id="p1">](/pricing/overview/)</ept>。</source>
          <target state="new">有关 Azure 服务价格的最新信息，请参阅 <bpt id="p1">[</bpt>Azure 定价<ept id="p1">](/pricing/overview/)</ept>。</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>联网</source>
          <target state="new">联网</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>虽然 API 调用有一定的影响，但通常情况下物理网络对应用程序的约束具有更大的性能影响。下面说明用户可能会遇到的某些限制。</source>
          <target state="new">虽然 API 调用有一定的影响，但通常情况下物理网络对应用程序的约束具有更大的性能影响。下面说明用户可能会遇到的某些限制。</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>客户端网络性能</source>
          <target state="new">客户端网络性能</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading2"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>吞吐量</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading2"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>吞吐量</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>通常情况下，对带宽来说，问题在于客户端的功能。例如，虽然单个存储帐户可以处理 10 Gbps 或以上的入口吞吐量（参见<bpt id="p1">[</bpt>带宽可伸缩性目标<ept id="p1">](#sub1bandwidth)</ept>），但在“小型”Azure 辅助角色实例中，网络速度只能达到大约 100 Mbps。较大的 Azure 实例的 NIC 具有较大的容量，因此如果你需要提高单个计算机的网络限制，则应考虑使用较大的实例或更多 VM。如果你是从本地应用程序访问存储服务，则可应用相同的规则：了解客户端设备的网络性能以及与 Azure 存储位置的网络连接情况，然后根据需要对其进行改进，或者将应用程序设计为可在这种网络性能下工作。</source>
          <target state="new">通常情况下，对带宽来说，问题在于客户端的功能。例如，虽然单个存储帐户可以处理 10 Gbps 或以上的入口吞吐量（参见<bpt id="p1">[</bpt>带宽可伸缩性目标<ept id="p1">](#sub1bandwidth)</ept>），但在“小型”Azure 辅助角色实例中，网络速度只能达到大约 100 Mbps。较大的 Azure 实例的 NIC 具有较大的容量，因此如果你需要提高单个计算机的网络限制，则应考虑使用较大的实例或更多 VM。如果你是从本地应用程序访问存储服务，则可应用相同的规则：了解客户端设备的网络性能以及与 Azure 存储位置的网络连接情况，然后根据需要对其进行改进，或者将应用程序设计为可在这种网络性能下工作。</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading3"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>链接质量</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading3"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>链接质量</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>请注意，因错误和数据包丢失而导致的网络状况会降低有效吞吐量，任何网络的使用都是这样。WireShark 或 NetMon 可用于诊断此问题。</source>
          <target state="new">请注意，因错误和数据包丢失而导致的网络状况会降低有效吞吐量，任何网络的使用都是这样。WireShark 或 NetMon 可用于诊断此问题。</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>有用的资源</source>
          <target state="new">有用的资源</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>有关虚拟机大小和分配带宽的详细信息，请参阅<bpt id="p1">[</bpt>虚拟机大小<ept id="p1">](/documentation/articles/virtual-machines-size-specs)</ept>。</source>
          <target state="new">有关虚拟机大小和分配带宽的详细信息，请参阅<bpt id="p1">[</bpt>虚拟机大小<ept id="p1">](/documentation/articles/virtual-machines-size-specs)</ept>。</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading4"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>位置</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading4"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>位置</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>在任何分布式环境中，将客户端放置在服务器附近可提供最佳性能。若要以最低的延迟访问 Azure 存储空间，则最好是将客户端放置在同一 Azure 区域内。例如，如果您的 Azure Web 应用使用 Azure 存储空间，则应将二者都放置在同一个区域（例如美国西部或亚洲东南部）。这会降低延迟和成本 — 在本文撰写之际，同一个区域的带宽使用是免费的。</source>
          <target state="new">在任何分布式环境中，将客户端放置在服务器附近可提供最佳性能。若要以最低的延迟访问 Azure 存储空间，则最好是将客户端放置在同一 Azure 区域内。例如，如果您的 Azure Web 应用使用 Azure 存储空间，则应将二者都放置在同一个区域（例如美国西部或亚洲东南部）。这会降低延迟和成本 — 在本文撰写之际，同一个区域的带宽使用是免费的。</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>如果你的客户端应用程序不是托管在 Azure 中（例如你使用的是移动设备应用程序或本地企业服务），则同样的道理，将存储帐户放置在靠近需要访问该帐户的设备的区域通常会降低延迟。如果你的客户端分布广泛（例如，某些客户端在北美，某些客户端在欧洲），则应考虑使用多个存储帐户：一个位于北美区域，一个位于欧洲区域。这将有助于降低这两个区域的用户的延迟。如果应用程序存储的数据是特定于各个用户的，不需要在存储帐户之间复制数据，则此方法通常更容易实施。如果内容分发范围很广泛，则建议使用 CDN – 详见下一部分。</source>
          <target state="new">如果你的客户端应用程序不是托管在 Azure 中（例如你使用的是移动设备应用程序或本地企业服务），则同样的道理，将存储帐户放置在靠近需要访问该帐户的设备的区域通常会降低延迟。如果你的客户端分布广泛（例如，某些客户端在北美，某些客户端在欧洲），则应考虑使用多个存储帐户：一个位于北美区域，一个位于欧洲区域。这将有助于降低这两个区域的用户的延迟。如果应用程序存储的数据是特定于各个用户的，不需要在存储帐户之间复制数据，则此方法通常更容易实施。如果内容分发范围很广泛，则建议使用 CDN – 详见下一部分。</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading5"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>内容分发</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading5"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>内容分发</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>有时候，应用程序需要向位于同一区域或多个区域的许多用户提供相同的内容（例如 Web 应用主页中使用的产品演示视频）。在这种情况下，你应该使用内容交付网络 (CDN)，例如 Azure CDN，该 CDN 会使用 Azure 存储空间作为数据的源。与存在于一个区域且无法以低延迟向其他区域交付内容的 Azure 存储帐户不同，Azure CDN 使用位于全世界多个数据中心的服务器。此外，与单个存储帐户相比，CDN 通常可以支持更高的出口限制。</source>
          <target state="new">有时候，应用程序需要向位于同一区域或多个区域的许多用户提供相同的内容（例如 Web 应用主页中使用的产品演示视频）。在这种情况下，你应该使用内容交付网络 (CDN)，例如 Azure CDN，该 CDN 会使用 Azure 存储空间作为数据的源。与存在于一个区域且无法以低延迟向其他区域交付内容的 Azure 存储帐户不同，Azure CDN 使用位于全世界多个数据中心的服务器。此外，与单个存储帐户相比，CDN 通常可以支持更高的出口限制。</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>关于 Azure CDN 的详细信息，请参阅 <bpt id="p1">[</bpt>Azure CDN<ept id="p1">](/home/features/cdn/)</ept>。</source>
          <target state="new">关于 Azure CDN 的详细信息，请参阅 <bpt id="p1">[</bpt>Azure CDN<ept id="p1">](/home/features/cdn/)</ept>。</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading6"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用 SAS 和 CORS</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading6"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用 SAS 和 CORS</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>当你需要在用户的 Web 浏览器或移动电话应用程序中对 JavaScript 之类的代码授权以访问 Azure 存储空间中的数据时，一种方法是使用代理形式的 Web 角色应用程序：用户的设备通过 Web 角色进行身份验证，而 Web 角色则通过存储服务进行身份验证。这样，你就可以避免在不安全的设备上公开存储帐户密钥。但是，这会大大增加 Web 角色的开销，因为在用户设备和存储服务之间传输的所有数据都必须通过 Web 角色。你可以避免使用 Web 角色作为存储服务的代理，只需使用共享访问签名 (SAS) 即可，有时候还需结合使用跨域资源共享标头 (CORS)。使用 SAS，你可以让用户的设备通过受限访问令牌直接向存储服务提出请求。例如，如果某个用户想要将照片上载到你的应用程序，你的 Web 角色就会生成一个 SAS 令牌并将其发送到用户的设备，这样用户就可以获得在随后的 30 分钟内（此时间过后 SAS 令牌会失效）向特定 Blob 或容器执行写入操作的权限。</source>
          <target state="new">当你需要在用户的 Web 浏览器或移动电话应用程序中对 JavaScript 之类的代码授权以访问 Azure 存储空间中的数据时，一种方法是使用代理形式的 Web 角色应用程序：用户的设备通过 Web 角色进行身份验证，而 Web 角色则通过存储服务进行身份验证。这样，你就可以避免在不安全的设备上公开存储帐户密钥。但是，这会大大增加 Web 角色的开销，因为在用户设备和存储服务之间传输的所有数据都必须通过 Web 角色。你可以避免使用 Web 角色作为存储服务的代理，只需使用共享访问签名 (SAS) 即可，有时候还需结合使用跨域资源共享标头 (CORS)。使用 SAS，你可以让用户的设备通过受限访问令牌直接向存储服务提出请求。例如，如果某个用户想要将照片上载到你的应用程序，你的 Web 角色就会生成一个 SAS 令牌并将其发送到用户的设备，这样用户就可以获得在随后的 30 分钟内（此时间过后 SAS 令牌会失效）向特定 Blob 或容器执行写入操作的权限。</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>通常情况下，浏览器不会允许某个域上的 Web 应用所托管的页面中的 JavaScript 执行特定的操作，例如针对其他域的"PUT"操作。例如，如果你在"contosomarketing.chinacloudapp.cn"上托管了一个 Web 角色，同时想要使用客户端 JavaScript 将一个 Blob 上载到"contosoproducts.blob.core.chinacloudapi.cn"上的存储帐户，则浏览器的"同源策略"会禁止该操作。CORS 是一种浏览器功能，该功能允许目标域（在本示例中为存储帐户）向所信任的浏览器进行针对源域（在本示例中为 Web 角色）发出的请求的通信。</source>
          <target state="new">通常情况下，浏览器不会允许某个域上的 Web 应用所托管的页面中的 JavaScript 执行特定的操作，例如针对其他域的"PUT"操作。例如，如果你在"contosomarketing.chinacloudapp.cn"上托管了一个 Web 角色，同时想要使用客户端 JavaScript 将一个 Blob 上载到"contosoproducts.blob.core.chinacloudapi.cn"上的存储帐户，则浏览器的"同源策略"会禁止该操作。CORS 是一种浏览器功能，该功能允许目标域（在本示例中为存储帐户）向所信任的浏览器进行针对源域（在本示例中为 Web 角色）发出的请求的通信。</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>这两种技术都可以帮助你避免在 Web 应用上出现不必要的负载（和瓶颈）。</source>
          <target state="new">这两种技术都可以帮助你避免在 Web 应用上出现不必要的负载（和瓶颈）。</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>有用的资源</source>
          <target state="new">有用的资源</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>有关 SAS 的详细信息，请参阅<bpt id="p1">[</bpt>共享访问签名第 1 部分：了解 SAS 模型<ept id="p1">](/zh-cn/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>。</source>
          <target state="new">有关 SAS 的详细信息，请参阅<bpt id="p1">[</bpt>共享访问签名第 1 部分：了解 SAS 模型<ept id="p1">](/zh-cn/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>。</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>有关 CORS 的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 存储服务的跨域资源共享 (CORS) 支持<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dn535601.aspx)</ept>。</source>
          <target state="new">有关 CORS 的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 存储服务的跨域资源共享 (CORS) 支持<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dn535601.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>缓存</source>
          <target state="new">缓存</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading7"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>获取数据</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading7"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>获取数据</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>通常情况下，从服务获取一次数据比两次要好。请考虑一下这样一个示例：一个 MVC Web 应用以某个 Web 角色运行，该角色已从存储服务检索了 50MB 的 Blob 并将其作为内容提供给了某个用户。然后，该应用程序就可以在每次有用户请求该 Blob 时检索同一 Blob，也可以将其缓存在本地磁盘上，将缓存的版本重复用于后续用户请求。此外，每当有用户请求该数据时，应用程序还可以发出一个带修改时间条件性标头的 GET 调用，避免在没有对 Blob 进行修改的情况下获取整个 Blob。使用表实体时，你可以应用这同一个模式。</source>
          <target state="new">通常情况下，从服务获取一次数据比两次要好。请考虑一下这样一个示例：一个 MVC Web 应用以某个 Web 角色运行，该角色已从存储服务检索了 50MB 的 Blob 并将其作为内容提供给了某个用户。然后，该应用程序就可以在每次有用户请求该 Blob 时检索同一 Blob，也可以将其缓存在本地磁盘上，将缓存的版本重复用于后续用户请求。此外，每当有用户请求该数据时，应用程序还可以发出一个带修改时间条件性标头的 GET 调用，避免在没有对 Blob 进行修改的情况下获取整个 Blob。使用表实体时，你可以应用这同一个模式。</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>在某些情况下，你可以选择让应用程序假定 Blob 在检索后短时间内保持有效，在这段时间内应用程序不需要查看是否对该 Blob 进行了修改。</source>
          <target state="new">在某些情况下，你可以选择让应用程序假定 Blob 在检索后短时间内保持有效，在这段时间内应用程序不需要查看是否对该 Blob 进行了修改。</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>配置、查看以及始终被应用程序使用的其他数据都适合进行缓存。</source>
          <target state="new">配置、查看以及始终被应用程序使用的其他数据都适合进行缓存。</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>有关如何通过使用 .NET 获取 Blob 的属性来发现上次修改日期的示例，请参阅<bpt id="p1">[</bpt>设置或检索属性和元数据<ept id="p1">](/documentation/articles/storage-properties-metadata)</ept>。有关条件性下载的详细信息，请参阅<bpt id="p2">[</bpt>有条件地刷新 Blob 的本地副本<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/azure/dd179371.aspx)</ept>。</source>
          <target state="new">有关如何通过使用 .NET 获取 Blob 的属性来发现上次修改日期的示例，请参阅<bpt id="p1">[</bpt>设置或检索属性和元数据<ept id="p1">](/documentation/articles/storage-properties-metadata)</ept>。有关条件性下载的详细信息，请参阅<bpt id="p2">[</bpt>有条件地刷新 Blob 的本地副本<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/azure/dd179371.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading8"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>批量上载数据</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading8"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>批量上载数据</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>在某些应用程序方案中，你可以将数据聚合在本地，然后将其定期批量上载，而不必立即上载每个数据片段。例如， Web 应用可以保留一个有关活动的日志文件：应用程序可以在活动发生时以表实体的形式上载每项活动的详细信息（这需要许多存储操作），也可以将活动详细信息保存到本地日志文件中，然后定期将所有活动详细信息以带分隔符的文件的方式上载到某个 Blob。如果每个日志条目的大小为 1KB，你可以在单个“放置 Blob”事务处理中上载数千个这样的条目（你可以在单个事务处理中上载一个最大大小为 64MB 的 Blob）。当然，如果本地计算机在上载之前崩溃，你可能会丢失某些日志数据：应用程序开发人员必须针对可能发生的客户端设备故障或上载失败情况进行相应的设计。如果活动数据需要在不同的时间范围进行下载（不仅仅是单个活动），则建议使用 Blob 而非表。</source>
          <target state="new">在某些应用程序方案中，你可以将数据聚合在本地，然后将其定期批量上载，而不必立即上载每个数据片段。例如， Web 应用可以保留一个有关活动的日志文件：应用程序可以在活动发生时以表实体的形式上载每项活动的详细信息（这需要许多存储操作），也可以将活动详细信息保存到本地日志文件中，然后定期将所有活动详细信息以带分隔符的文件的方式上载到某个 Blob。如果每个日志条目的大小为 1KB，你可以在单个“放置 Blob”事务处理中上载数千个这样的条目（你可以在单个事务处理中上载一个最大大小为 64MB 的 Blob）。当然，如果本地计算机在上载之前崩溃，你可能会丢失某些日志数据：应用程序开发人员必须针对可能发生的客户端设备故障或上载失败情况进行相应的设计。如果活动数据需要在不同的时间范围进行下载（不仅仅是单个活动），则建议使用 Blob 而非表。</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>.NET 配置</source>
          <target state="new">.NET 配置</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>如果使用的是 .NET Framework，则本部分列出的数种快速配置设置可以用于显著提高性能。如果使用其他语言，则需查看类似的概念是否适用于你所选择的语言。</source>
          <target state="new">如果使用的是 .NET Framework，则本部分列出的数种快速配置设置可以用于显著提高性能。如果使用其他语言，则需查看类似的概念是否适用于你所选择的语言。</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading9"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>提高默认连接限制</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading9"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>提高默认连接限制</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>在 .NET 中，以下代码可将默认的连接限制（通常情况下，在客户端环境中为 2，在服务器环境中为 10）提高到 100。通常情况下，你应将值大致设置为应用程序使用的线程数。</source>
          <target state="new">在 .NET 中，以下代码可将默认的连接限制（通常情况下，在客户端环境中为 2，在服务器环境中为 10）提高到 100。通常情况下，你应将值大致设置为应用程序使用的线程数。</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>你必须在打开任何连接前设置连接限制。</source>
          <target state="new">你必须在打开任何连接前设置连接限制。</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>对于其他编程语言，请参阅该语言的文档以确定如何设置连接限制。</source>
          <target state="new">对于其他编程语言，请参阅该语言的文档以确定如何设置连接限制。</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>有关其他信息，请参阅博客文章 <bpt id="p1">[</bpt>Web 服务：并发连接<ept id="p1">](http://blogs.msdn.com/b/darrenj/archive/2005/03/07/386655.aspx)</ept>。</source>
          <target state="new">有关其他信息，请参阅博客文章 <bpt id="p1">[</bpt>Web 服务：并发连接<ept id="p1">](http://blogs.msdn.com/b/darrenj/archive/2005/03/07/386655.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading10"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如果对异步任务使用同步代码，则请增加线程池最小线程数</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading10"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>如果对异步任务使用同步代码，则请增加线程池最小线程数</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>此代码会增加线程池最小线程数：</source>
          <target state="new">此代码会增加线程池最小线程数：</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅 <bpt id="p1">[</bpt>ThreadPool.SetMinThreads 方法<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/system.threading.threadpool.setminthreads(v=vs.110).aspx)</ept>。</source>
          <target state="new">有关详细信息，请参阅 <bpt id="p1">[</bpt>ThreadPool.SetMinThreads 方法<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/system.threading.threadpool.setminthreads(v=vs.110).aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading11"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>充分利用 .NET 4.5 的垃圾收集功能</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading11"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>充分利用 .NET 4.5 的垃圾收集功能</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>将 .NET 4.5 或更高版本用于客户端应用程序，以便充分利用在服务器垃圾收集方面的性能改进。</source>
          <target state="new">将 .NET 4.5 或更高版本用于客户端应用程序，以便充分利用在服务器垃圾收集方面的性能改进。</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅以下文章：<bpt id="p1">[</bpt>.NET 4.5 中的性能改进概述<ept id="p1">](http://msdn.microsoft.com/zh-cn/magazine/hh882452.aspx)</ept>。</source>
          <target state="new">有关详细信息，请参阅以下文章：<bpt id="p1">[</bpt>.NET 4.5 中的性能改进概述<ept id="p1">](http://msdn.microsoft.com/zh-cn/magazine/hh882452.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading12"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>不受限制的并行度</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading12"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>不受限制的并行度</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>虽然提高并行度可以大幅提高性能，但在使用不受限制的并行度（对线程数和/或并行请求没有限制）来上载或下载数据，以及使用多个辅助角色来访问同一存储帐户中的多个分区（容器、队列或表分区）或访问同一分区中的多个项目时，应小心谨慎。如果并行度不受限制，你的应用程序可能会超出客户端设备的承受程度或超出存储帐户的可伸缩性目标，导致延迟和限制时间增长。</source>
          <target state="new">虽然提高并行度可以大幅提高性能，但在使用不受限制的并行度（对线程数和/或并行请求没有限制）来上载或下载数据，以及使用多个辅助角色来访问同一存储帐户中的多个分区（容器、队列或表分区）或访问同一分区中的多个项目时，应小心谨慎。如果并行度不受限制，你的应用程序可能会超出客户端设备的承受程度或超出存储帐户的可伸缩性目标，导致延迟和限制时间增长。</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading13"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>存储客户端库和工具</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading13"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>存储客户端库和工具</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>始终使用 Microsoft 提供的最新客户端库和工具。在本文撰写之际，已发布针对 .NET、Windows Phone、Windows 运行时、Java 和 C++ 的客户端库，以及针对其他语言的预览库。此外，Microsoft 还发布了适用于 Azure 存储空间的 PowerShell cmdlet 和 Azure CLI 命令。Microsoft 积极开发这些以性能为主要考量的工具，并使用最新服务版本对其进行更新，确保这些工具可以在内部协调好许多经过验证的做法。</source>
          <target state="new">始终使用 Microsoft 提供的最新客户端库和工具。在本文撰写之际，已发布针对 .NET、Windows Phone、Windows 运行时、Java 和 C++ 的客户端库，以及针对其他语言的预览库。此外，Microsoft 还发布了适用于 Azure 存储空间的 PowerShell cmdlet 和 Azure CLI 命令。Microsoft 积极开发这些以性能为主要考量的工具，并使用最新服务版本对其进行更新，确保这些工具可以在内部协调好许多经过验证的做法。</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>重试</source>
          <target state="new">重试</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading14"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>限制/服务器忙</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading14"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>限制/服务器忙</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>在某些情况下，存储服务可能会限制你的应用程序，或者因某些暂时性的状态而无法处理请求，因而会返回“503 服务器忙”消息或“500 超时”。如果你的应用程序正接近某个可伸缩性目标，或者系统正在对你的分区数据进行重新平衡以提高吞吐量，则可能会发生这种情况。通常情况下，客户端应用程序应重试引发此类错误的操作：稍后尝试同一请求可能会成功。不过，如果是存储服务因为你的应用程序超出可伸缩性目标而限制你的应用程序，或者是其他某种原因导致服务无法处理请求，则过于频繁的重试通常会使问题更糟。因此，你应该使用指数性回退（客户端库默认采取此种行为）。例如，你的应用程序的重试时间可以是在 2 秒后、4 秒后、10 秒后，最后彻底放弃重试。此行为会使你的应用程序显著降低对服务的负载，而不会使问题更糟。</source>
          <target state="new">在某些情况下，存储服务可能会限制你的应用程序，或者因某些暂时性的状态而无法处理请求，因而会返回“503 服务器忙”消息或“500 超时”。如果你的应用程序正接近某个可伸缩性目标，或者系统正在对你的分区数据进行重新平衡以提高吞吐量，则可能会发生这种情况。通常情况下，客户端应用程序应重试引发此类错误的操作：稍后尝试同一请求可能会成功。不过，如果是存储服务因为你的应用程序超出可伸缩性目标而限制你的应用程序，或者是其他某种原因导致服务无法处理请求，则过于频繁的重试通常会使问题更糟。因此，你应该使用指数性回退（客户端库默认采取此种行为）。例如，你的应用程序的重试时间可以是在 2 秒后、4 秒后、10 秒后，最后彻底放弃重试。此行为会使你的应用程序显著降低对服务的负载，而不会使问题更糟。</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>请注意，连接错误可以立即重试，因为它不是限制造成的，而且应该是暂时性的。</source>
          <target state="new">请注意，连接错误可以立即重试，因为它不是限制造成的，而且应该是暂时性的。</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading15"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>不可重试的错误</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading15"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>不可重试的错误</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>客户端库了解哪些错误可以重试，哪些不能。不过，如果你是针对存储 REST API 编写的自己的代码，则应记住某些错误不应重试：例如，400（请求错误）响应表示客户端应用程序发送的请求因格式不正常而无法处理。重新发送此请求每次都会导致相同的响应，因此没必要重试。如果你是针对存储 REST API 编写自己的代码，则需了解错误代码的意义，以及每个错误代码的合适重试方式（或者不进行重试）。</source>
          <target state="new">客户端库了解哪些错误可以重试，哪些不能。不过，如果你是针对存储 REST API 编写的自己的代码，则应记住某些错误不应重试：例如，400（请求错误）响应表示客户端应用程序发送的请求因格式不正常而无法处理。重新发送此请求每次都会导致相同的响应，因此没必要重试。如果你是针对存储 REST API 编写自己的代码，则需了解错误代码的意义，以及每个错误代码的合适重试方式（或者不进行重试）。</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>有用的资源</source>
          <target state="new">有用的资源</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>有关存储错误代码的详细信息，请参阅 Azure Web 应用上的<bpt id="p1">[</bpt>状态和错误代码<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd179382.aspx)</ept>。</source>
          <target state="new">有关存储错误代码的详细信息，请参阅 Azure Web 应用上的<bpt id="p1">[</bpt>状态和错误代码<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/dd179382.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Blob</source>
          <target state="new">Blob</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>除了前面所述的适用于<bpt id="p1">[</bpt>所有服务<ept id="p1">](#allservices)</ept>的经过验证的做法，此外还有以下经过验证的做法，这些做法尤其适用于 Blob 服务。</source>
          <target state="new">除了前面所述的适用于<bpt id="p1">[</bpt>所有服务<ept id="p1">](#allservices)</ept>的经过验证的做法，此外还有以下经过验证的做法，这些做法尤其适用于 Blob 服务。</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>特定于 Blob 的可伸缩性目标</source>
          <target state="new">特定于 Blob 的可伸缩性目标</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading16"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>每个 Blob 的带宽和操作</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading16"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>每个 Blob 的带宽和操作</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>你可以读取或写入单个 Blob，最大读/写速度为 60 MB/秒。这大约相当于 480 Mbps，超过许多客户端网络（包括客户端设备上的物理 NIC）的承受能力。此外，单个 Blob 每秒最多可支持 500 个请求。如果你的多个客户端需要读取同一 Blob，而且你可能会超过这些限制，则应考虑使用 CDN 来分发该 Blob。</source>
          <target state="new">你可以读取或写入单个 Blob，最大读/写速度为 60 MB/秒。这大约相当于 480 Mbps，超过许多客户端网络（包括客户端设备上的物理 NIC）的承受能力。此外，单个 Blob 每秒最多可支持 500 个请求。如果你的多个客户端需要读取同一 Blob，而且你可能会超过这些限制，则应考虑使用 CDN 来分发该 Blob。</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>有关 Blob 的目标吞吐量的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id="p1">](/documentation/articles/storage-scalability-targets)</ept>。</source>
          <target state="new">有关 Blob 的目标吞吐量的详细信息，请参阅 <bpt id="p1">[</bpt>Azure 存储空间可伸缩性和性能目标<ept id="p1">](/documentation/articles/storage-scalability-targets)</ept>。</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>复制和移动 Blob</source>
          <target state="new">复制和移动 Blob</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading17"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>复制 Blob</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading17"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>复制 Blob</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>存储 REST API 2012-02-12 版引入了跨帐户复制 Blob 这一有用功能：客户端应用程序可以指示存储服务从其他源复制 Blob（可能属于不同的存储帐户），然后让服务异步执行复制。当你从其他存储帐户迁移数据时，这可以显著减少应用程序所需的带宽，因为不需要下载和上载数据。</source>
          <target state="new">存储 REST API 2012-02-12 版引入了跨帐户复制 Blob 这一有用功能：客户端应用程序可以指示存储服务从其他源复制 Blob（可能属于不同的存储帐户），然后让服务异步执行复制。当你从其他存储帐户迁移数据时，这可以显著减少应用程序所需的带宽，因为不需要下载和上载数据。</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>不过，需要考虑的一个问题是，在存储帐户之间进行复制时，无法确保复制的完成时间。如果你的应用程序需要在你的控制之下快速完成 Blob 复制，则在复制该 Blob 时，最好是先将其下载到某个 VM，然后再将其上载到目标位置。在这种情况下，若要实现完全可预测性，请确保复制是通过同一 Azure 区域中运行的 VM 执行的，否则网络状况可能会（极可能会）影响复制性能。此外，你还可以通过编程方式监视异步复制的进程。</source>
          <target state="new">不过，需要考虑的一个问题是，在存储帐户之间进行复制时，无法确保复制的完成时间。如果你的应用程序需要在你的控制之下快速完成 Blob 复制，则在复制该 Blob 时，最好是先将其下载到某个 VM，然后再将其上载到目标位置。在这种情况下，若要实现完全可预测性，请确保复制是通过同一 Azure 区域中运行的 VM 执行的，否则网络状况可能会（极可能会）影响复制性能。此外，你还可以通过编程方式监视异步复制的进程。</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>请注意，在同一存储帐户内的复制通常会快速完成。</source>
          <target state="new">请注意，在同一存储帐户内的复制通常会快速完成。</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅<bpt id="p1">[</bpt>复制 Blob<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/dd894037.aspx)</ept>。</source>
          <target state="new">有关详细信息，请参阅<bpt id="p1">[</bpt>复制 Blob<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/dd894037.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading18"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用 AzCopy</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading18"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用 AzCopy</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Azure 存储团队发布了命令行工具"AzCopy"，该工具用于通过存储帐户来回批量传输多个 Blob，以及跨多个存储帐户进行批量传输。该工具已针对这种情况进行了优化，可以实现较高的传输速率。建议将其用于需要批量上载、批量下载和批量复制的情况。你可以在<bpt id="p1">[</bpt>此处<ept id="p1">](/zh-cn/documentation/articles/storage-use-azcopy)</ept>了解它的详情并下载它。</source>
          <target state="new">Azure 存储团队发布了命令行工具"AzCopy"，该工具用于通过存储帐户来回批量传输多个 Blob，以及跨多个存储帐户进行批量传输。该工具已针对这种情况进行了优化，可以实现较高的传输速率。建议将其用于需要批量上载、批量下载和批量复制的情况。你可以在<bpt id="p1">[</bpt>此处<ept id="p1">](/zh-cn/documentation/articles/storage-use-azcopy)</ept>了解它的详情并下载它。</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading19"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Azure 导入/导出服务</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading19"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Azure 导入/导出服务</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>对于超大量的数据（大于 1TB），Azure 存储空间提供了导入/导出服务，允许用户通过寄送硬盘驱动器的方式从 Blob 存储上载和下载数据。你可以将数据置于硬盘驱动器上，然后将其寄送到 Microsoft 进行上载，也可以将空的硬盘驱动器寄给 Microsoft 来下载数据。你可以在<bpt id="p1">[</bpt>此处<ept id="p1">](/zh-cn/documentation/articles/storage-import-export-service)</ept>阅读详细内容。对于这种大小的数据，此方式可能比通过网络上载/下载要高效得多。</source>
          <target state="new">对于超大量的数据（大于 1TB），Azure 存储空间提供了导入/导出服务，允许用户通过寄送硬盘驱动器的方式从 Blob 存储上载和下载数据。你可以将数据置于硬盘驱动器上，然后将其寄送到 Microsoft 进行上载，也可以将空的硬盘驱动器寄给 Microsoft 来下载数据。你可以在<bpt id="p1">[</bpt>此处<ept id="p1">](/zh-cn/documentation/articles/storage-import-export-service)</ept>阅读详细内容。对于这种大小的数据，此方式可能比通过网络上载/下载要高效得多。</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading20"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用元数据</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading20"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用元数据</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>该 Blob 服务支持 head 请求，这其中可能包含有关 Blob 的元数据。例如，如果你的应用程序需要某张照片中的 EXIF 数据，则可以检索该照片，然后从中提取数据。为了节省带宽并改进性能，你的应用程序可能会在上载照片时将 EXIF 数据存储在 Blob 的元数据中：你可以随后检索元数据中的 EXIF 数据，只需使用 HEAD 请求即可，这样就可以在每次读取 Blob 时，显著节省带宽和提取 EXIF 数据所需的处理时间。在只需元数据而不需要 Blob 的完整内容时，这种方法很有用。请注意，每个 Blob 只能存储 8 KB 的元数据（该服务不会接受数据大小超过此要求的存储请求），因此如果数据大小不符合该要求，则可能无法使用这种方法。</source>
          <target state="new">该 Blob 服务支持 head 请求，这其中可能包含有关 Blob 的元数据。例如，如果你的应用程序需要某张照片中的 EXIF 数据，则可以检索该照片，然后从中提取数据。为了节省带宽并改进性能，你的应用程序可能会在上载照片时将 EXIF 数据存储在 Blob 的元数据中：你可以随后检索元数据中的 EXIF 数据，只需使用 HEAD 请求即可，这样就可以在每次读取 Blob 时，显著节省带宽和提取 EXIF 数据所需的处理时间。在只需元数据而不需要 Blob 的完整内容时，这种方法很有用。请注意，每个 Blob 只能存储 8 KB 的元数据（该服务不会接受数据大小超过此要求的存储请求），因此如果数据大小不符合该要求，则可能无法使用这种方法。</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>有关如何使用 .NET 获取 Blob 的元数据的示例，请参阅<bpt id="p1">[</bpt>设置和检索属性和元数据<ept id="p1">](/documentation/articles/storage-properties-metadata)</ept>。</source>
          <target state="new">有关如何使用 .NET 获取 Blob 的元数据的示例，请参阅<bpt id="p1">[</bpt>设置和检索属性和元数据<ept id="p1">](/documentation/articles/storage-properties-metadata)</ept>。</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>快速上载</source>
          <target state="new">快速上载</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>若要快速上载 Blob，需要回答的第一个问题是：你是要上载一个还是多个 Blob？ 请使用以下指南来确定要使用的正确方法，具体取决于你的情况。</source>
          <target state="new">若要快速上载 Blob，需要回答的第一个问题是：你是要上载一个还是多个 Blob？ 请使用以下指南来确定要使用的正确方法，具体取决于你的情况。</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading21"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>快速上载一个大型 Blob</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading21"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>快速上载一个大型 Blob</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>若要快速上载单个大型 Blob，你的客户端应用程序应并行上载其块或页（需考虑各个 Blob 的可伸缩性目标并综合考虑存储帐户的情况）。请注意，Microsoft 提供的正式的 RTM 存储客户端库（.NET、Java）具有此方面的功能。每个库均应使用下面指定的对象/属性来设置并发级别：</source>
          <target state="new">若要快速上载单个大型 Blob，你的客户端应用程序应并行上载其块或页（需考虑各个 Blob 的可伸缩性目标并综合考虑存储帐户的情况）。请注意，Microsoft 提供的正式的 RTM 存储客户端库（.NET、Java）具有此方面的功能。每个库均应使用下面指定的对象/属性来设置并发级别：</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>.NET：将 BlobRequestOptions 对象上的 ParallelOperationThreadCount 设置为“used”。</source>
          <target state="new">.NET：将 BlobRequestOptions 对象上的 ParallelOperationThreadCount 设置为“used”。</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Java/Android：使用 BlobRequestOptions.setConcurrentRequestCount()</source>
          <target state="new">Java/Android：使用 BlobRequestOptions.setConcurrentRequestCount()</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Node.js：将 parallelOperationThreadCount 用于请求选项或 Blob 服务。</source>
          <target state="new">Node.js：将 parallelOperationThreadCount 用于请求选项或 Blob 服务。</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>C++：使用 blob_request_options::set_parallelism_factor 方法。</source>
          <target state="new">C++：使用 blob_request_options::set_parallelism_factor 方法。</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading22"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>快速上载多个 Blob</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading22"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>快速上载多个 Blob</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>若要快速上载多个 Blob，请以并行方式上载。这要快于通过并行块上载方式一次上载一个 Blob，因为这种情况下上载会分布到存储服务的多个分区中。单个 Blob 仅支持 60 MB/秒（大约 480 Mbps）的吞吐量。在本文撰写之际，一个 GRS 帐户最多可支持 20 Gbps 的入口吞吐量，远远大于单个 Blob 支持的吞吐量。默认情况下 <bpt id="p1">[</bpt>AzCopy<ept id="p1">](#subheading18)</ept> 以并行方式执行上载操作，建议用于这种情形。</source>
          <target state="new">若要快速上载多个 Blob，请以并行方式上载。这要快于通过并行块上载方式一次上载一个 Blob，因为这种情况下上载会分布到存储服务的多个分区中。单个 Blob 仅支持 60 MB/秒（大约 480 Mbps）的吞吐量。在本文撰写之际，一个 GRS 帐户最多可支持 20 Gbps 的入口吞吐量，远远大于单个 Blob 支持的吞吐量。默认情况下 <bpt id="p1">[</bpt>AzCopy<ept id="p1">](#subheading18)</ept> 以并行方式执行上载操作，建议用于这种情形。</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading23"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>选择正确的 Blob 类型</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading23"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>选择正确的 Blob 类型</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Azure 存储空间支持两种类型的 Blob：<bpt id="p1">*</bpt>页<ept id="p1">*</ept> Blob 和<bpt id="p2">*</bpt>块<ept id="p2">*</ept> Blob。在使用情形已确定的情况下，选择何种 Blob 类型会影响到解决方案的执行情况和可伸缩性。需要以高效方式上载大量数据时，适合选择块 Blob：例如，客户端应用程序可能需要将照片或视频上载到 Blob 存储中。如果应用程序需要对数据执行随机写入，则应选择页 Blob：例如，Azure VHD 以页 Blob 方式存储。</source>
          <target state="new">Azure 存储空间支持两种类型的 Blob：<bpt id="p1">*</bpt>页<ept id="p1">*</ept> Blob 和<bpt id="p2">*</bpt>块<ept id="p2">*</ept> Blob。在使用情形已确定的情况下，选择何种 Blob 类型会影响到解决方案的执行情况和可伸缩性。需要以高效方式上载大量数据时，适合选择块 Blob：例如，客户端应用程序可能需要将照片或视频上载到 Blob 存储中。如果应用程序需要对数据执行随机写入，则应选择页 Blob：例如，Azure VHD 以页 Blob 方式存储。</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅<bpt id="p1">[</bpt>了解块 Blob 和页 Blob<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/ee691964.aspx)</ept>。</source>
          <target state="new">有关详细信息，请参阅<bpt id="p1">[</bpt>了解块 Blob 和页 Blob<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/ee691964.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>表</source>
          <target state="new">表</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>除了前面所述的适用于<bpt id="p1">[</bpt>所有服务<ept id="p1">](#allservices)</ept>的经过验证的做法，此外还有以下经过验证的做法，这些做法尤其适用于表服务。</source>
          <target state="new">除了前面所述的适用于<bpt id="p1">[</bpt>所有服务<ept id="p1">](#allservices)</ept>的经过验证的做法，此外还有以下经过验证的做法，这些做法尤其适用于表服务。</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading24"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>特定于表的可伸缩性目标</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading24"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>特定于表的可伸缩性目标</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>除了针对整个存储帐户的带宽限制，表还有以下特定的可伸缩性限制。请注意，系统会在你的流量增加时进行负载平衡，但如果你的流量激增，则你的吞吐量可能不会相应地突增。如果你的使用模式包含流量激增情况，则会在激增期间出现限制和/或超时现象，因为存储服务会自动将你的表负载平衡掉。让流量缓慢增加通常会有更好的效果，因为这给系统提供了进行适当负载平衡的时间。</source>
          <target state="new">除了针对整个存储帐户的带宽限制，表还有以下特定的可伸缩性限制。请注意，系统会在你的流量增加时进行负载平衡，但如果你的流量激增，则你的吞吐量可能不会相应地突增。如果你的使用模式包含流量激增情况，则会在激增期间出现限制和/或超时现象，因为存储服务会自动将你的表负载平衡掉。让流量缓慢增加通常会有更好的效果，因为这给系统提供了进行适当负载平衡的时间。</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>实体数/秒（帐户）</source>
          <target state="new">实体数/秒（帐户）</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>对于单个帐户来说，访问表时的可伸缩性限制高达每秒 20,000 个实体（每个实体 1KB）。一般情况下，每个被插入、更新、删除或扫描的实体都会计入此目标的计数。因此，包含 100 个实体的批量插入计为 100 个实体。一个查询扫描了 1000 个实体但只返回 5 个，则会将其计为 1000 个实体。</source>
          <target state="new">对于单个帐户来说，访问表时的可伸缩性限制高达每秒 20,000 个实体（每个实体 1KB）。一般情况下，每个被插入、更新、删除或扫描的实体都会计入此目标的计数。因此，包含 100 个实体的批量插入计为 100 个实体。一个查询扫描了 1000 个实体但只返回 5 个，则会将其计为 1000 个实体。</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>实体数/秒（分区）</source>
          <target state="new">实体数/秒（分区）</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>在单个分区中，访问表时的可伸缩性目标为每秒 2,000 个实体（每个实体 1KB），使用前面部分所述的相同计数方法。</source>
          <target state="new">在单个分区中，访问表时的可伸缩性目标为每秒 2,000 个实体（每个实体 1KB），使用前面部分所述的相同计数方法。</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>配置</source>
          <target state="new">配置</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>本部分列出了多个快速配置设置，你可以使用这些设置显著提高表服务的性能：</source>
          <target state="new">本部分列出了多个快速配置设置，你可以使用这些设置显著提高表服务的性能：</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading25"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用 JSON</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading25"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用 JSON</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>从存储服务 2013-08-15 版开始，表服务就支持使用 JSON 而非基于 XML 的 AtomPub 格式来传输表数据。这最多可以减少 75% 的负载大小，显著改进应用程序的性能。</source>
          <target state="new">从存储服务 2013-08-15 版开始，表服务就支持使用 JSON 而非基于 XML 的 AtomPub 格式来传输表数据。这最多可以减少 75% 的负载大小，显著改进应用程序的性能。</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅文章 <bpt id="p1">[</bpt>Azure 表：JSON 简介<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2013/12/05/windows-azure-tables-introducing-json.aspx)</ept>和<bpt id="p2">[</bpt>表服务操作的负载格式<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/azure/dn535600.aspx)</ept>。</source>
          <target state="new">有关详细信息，请参阅文章 <bpt id="p1">[</bpt>Azure 表：JSON 简介<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2013/12/05/windows-azure-tables-introducing-json.aspx)</ept>和<bpt id="p2">[</bpt>表服务操作的负载格式<ept id="p2">](http://msdn.microsoft.com/zh-cn/library/azure/dn535600.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading26"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>关闭 Nagle</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading26"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>关闭 Nagle</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Nagle 的算法已跨 TCP/IP 网络进行了广泛的实施，是一种改进网络性能的方法。不过，该方法并非适用于所有情况（例如交互性很强的环境）。就 Azure 存储空间来说，Nagle 的算法会对表请求和队列服务请求的执行造成负面影响，应尽可能禁用。</source>
          <target state="new">Nagle 的算法已跨 TCP/IP 网络进行了广泛的实施，是一种改进网络性能的方法。不过，该方法并非适用于所有情况（例如交互性很强的环境）。就 Azure 存储空间来说，Nagle 的算法会对表请求和队列服务请求的执行造成负面影响，应尽可能禁用。</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅我们的博客文章：<bpt id="p1">[</bpt>Nagle 的算法不适用于小型请求<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2010/06/25/nagle-s-algorithm-is-not-friendly-towards-small-requests.aspx)</ept>，其中解释了为什么 Nagle 的算法不能很好地与表及队列请求交互，并说明了如何在您的客户端应用程序中禁用该算法。</source>
          <target state="new">有关详细信息，请参阅我们的博客文章：<bpt id="p1">[</bpt>Nagle 的算法不适用于小型请求<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2010/06/25/nagle-s-algorithm-is-not-friendly-towards-small-requests.aspx)</ept>，其中解释了为什么 Nagle 的算法不能很好地与表及队列请求交互，并说明了如何在您的客户端应用程序中禁用该算法。</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>架构</source>
          <target state="new">架构</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>数据的呈现和查询方式是影响表服务性能的单个最大因素。虽然每个应用程序都不相同，但本部分仍概要列出了一些通用的经过验证的做法，这些做法针对以下方面：</source>
          <target state="new">数据的呈现和查询方式是影响表服务性能的单个最大因素。虽然每个应用程序都不相同，但本部分仍概要列出了一些通用的经过验证的做法，这些做法针对以下方面：</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>表设计</source>
          <target state="new">表设计</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>高效的查询</source>
          <target state="new">高效的查询</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>高效的数据更新</source>
          <target state="new">高效的数据更新</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading27"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>表和分区</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading27"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>表和分区</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>表划分为分区。存储在分区中的每个实体共享相同的分区键，并具有唯一的行键，用于在该分区中标识自己。分区具有好处，但也带来了可伸缩性限制。</source>
          <target state="new">表划分为分区。存储在分区中的每个实体共享相同的分区键，并具有唯一的行键，用于在该分区中标识自己。分区具有好处，但也带来了可伸缩性限制。</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>优点：您可以在同一个分区中更新单个事务、原子事务和批处理事务的实体，每种事务最多包含 100 个单独的存储操作（总大小限制为 4MB）。此外，假定需要检索相同数量的实体，则在单个分区中查询数据要比跨多个分区查询数据更高效（不过，如果需要查询表数据，则请阅读相关文章以获取更进一步的建议）。</source>
          <target state="new">优点：您可以在同一个分区中更新单个事务、原子事务和批处理事务的实体，每种事务最多包含 100 个单独的存储操作（总大小限制为 4MB）。此外，假定需要检索相同数量的实体，则在单个分区中查询数据要比跨多个分区查询数据更高效（不过，如果需要查询表数据，则请阅读相关文章以获取更进一步的建议）。</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>可伸缩性限制：存储在单个分区中的实体的访问不能进行负载平衡，因为分区支持原子批处理事务。因此，总体说来单个表分区的可伸缩性目标低于表服务的相应目标。</source>
          <target state="new">可伸缩性限制：存储在单个分区中的实体的访问不能进行负载平衡，因为分区支持原子批处理事务。因此，总体说来单个表分区的可伸缩性目标低于表服务的相应目标。</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>考虑到表和分区的这些特点，你应该采用以下设计源：</source>
          <target state="new">考虑到表和分区的这些特点，你应该采用以下设计源：</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>你的客户端应用程序在同一逻辑工作单元中频繁更新或查询的数据应位于同一分区。这可能是因为你的应用程序需要聚合写入，或者是因为你需要充分利用原子批处理操作。此外，与跨分区的数据相比，单个分区中的数据可以在单个查询中更高效地进行查询。</source>
          <target state="new">你的客户端应用程序在同一逻辑工作单元中频繁更新或查询的数据应位于同一分区。这可能是因为你的应用程序需要聚合写入，或者是因为你需要充分利用原子批处理操作。此外，与跨分区的数据相比，单个分区中的数据可以在单个查询中更高效地进行查询。</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>你的客户端应用程序不在同一逻辑工作单元中插入/更新或查询（单个查询或批量更新）的数据应位于不同的分区中。必须指出的是，单个表中的分区键没有数量限制，因此即使设置数百万个分区键，那也不是问题，也不会影响性能。例如，如果您的应用程序是一个需要用户登录的热门 Web 应用，不妨使用用户 ID 作为分区键。</source>
          <target state="new">你的客户端应用程序不在同一逻辑工作单元中插入/更新或查询（单个查询或批量更新）的数据应位于不同的分区中。必须指出的是，单个表中的分区键没有数量限制，因此即使设置数百万个分区键，那也不是问题，也不会影响性能。例如，如果您的应用程序是一个需要用户登录的热门 Web 应用，不妨使用用户 ID 作为分区键。</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>热分区</source>
          <target state="new">热分区</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>热分区是指这样一种分区，即收到了某个帐户的过多流量，但又无法对其进行负载平衡，因为该分区为单个分区。一般情况下，热分区的创建有以下两种模式：</source>
          <target state="new">热分区是指这样一种分区，即收到了某个帐户的过多流量，但又无法对其进行负载平衡，因为该分区为单个分区。一般情况下，热分区的创建有以下两种模式：</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading28"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>仅追加和仅预置模式</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading28"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>仅追加和仅预置模式</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>“仅追加”模式是指流向某个给定 PK 的所有（或几乎所有）流量都会按当前时间升降。一个示例就是，如果你的应用程序使用了当前日期作为日志数据的分区键，则会发生这种情况。其结果就是，所有的插入都会进到表中的最后一个分区，而系统无法进行负载平衡，因为所有的写入都会追加到表的末尾。如果进入该分区的流量超出分区级的可伸缩性目标，则会导致限制。最好是确保将流量发送到多个分区，以便对跨表请求进行负载平衡。</source>
          <target state="new">“仅追加”模式是指流向某个给定 PK 的所有（或几乎所有）流量都会按当前时间升降。一个示例就是，如果你的应用程序使用了当前日期作为日志数据的分区键，则会发生这种情况。其结果就是，所有的插入都会进到表中的最后一个分区，而系统无法进行负载平衡，因为所有的写入都会追加到表的末尾。如果进入该分区的流量超出分区级的可伸缩性目标，则会导致限制。最好是确保将流量发送到多个分区，以便对跨表请求进行负载平衡。</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading29"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>高流量数据</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading29"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>高流量数据</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>如果你的分区方案导致单个分区的数据较其他分区的数据使用更为频繁，则也可能会看到限制现象，因为该分区达到了单个分区的可伸缩性目标。最好是确保你的分区方案不会导致单个分区接近可伸缩性目标。</source>
          <target state="new">如果你的分区方案导致单个分区的数据较其他分区的数据使用更为频繁，则也可能会看到限制现象，因为该分区达到了单个分区的可伸缩性目标。最好是确保你的分区方案不会导致单个分区接近可伸缩性目标。</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>查询</source>
          <target state="new">查询</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>本部分介绍用于查询表服务的经过验证的做法。</source>
          <target state="new">本部分介绍用于查询表服务的经过验证的做法。</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading30"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>查询范围</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading30"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>查询范围</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>有多种方式可指定需要查询的实体的范围。下面讨论如何使用每种方式。</source>
          <target state="new">有多种方式可指定需要查询的实体的范围。下面讨论如何使用每种方式。</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>通常情况下，应避免扫描（大于单个实体的查询），但如果必须扫描，则应尝试对数据进行组织，使得扫描时仅检索所需数据，避免扫描或返回大量不需要的实体。</source>
          <target state="new">通常情况下，应避免扫描（大于单个实体的查询），但如果必须扫描，则应尝试对数据进行组织，使得扫描时仅检索所需数据，避免扫描或返回大量不需要的实体。</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>点查询</source>
          <target state="new">点查询</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>点查询检索恰好一个实体。点查询在进行查询时会指定要检索的实体的分区键和行键。此类查询非常高效，应尽可能使用。</source>
          <target state="new">点查询检索恰好一个实体。点查询在进行查询时会指定要检索的实体的分区键和行键。此类查询非常高效，应尽可能使用。</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>分区查询</source>
          <target state="new">分区查询</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>分区查询用于检索一组具有共同分区键的数据。通常情况下，该查询会指定一系列行键值或者一系列用于某些实体属性和分区键的值。此类查询效率不如点查询，应谨慎使用。</source>
          <target state="new">分区查询用于检索一组具有共同分区键的数据。通常情况下，该查询会指定一系列行键值或者一系列用于某些实体属性和分区键的值。此类查询效率不如点查询，应谨慎使用。</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>表查询</source>
          <target state="new">表查询</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>表查询用于检索一组没有共同分区键的实体。此类查询效率不高，应尽可能避免使用。</source>
          <target state="new">表查询用于检索一组没有共同分区键的实体。此类查询效率不高，应尽可能避免使用。</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading31"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>查询密度</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading31"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>查询密度</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>影响查询效率的另一关键因素是返回的实体数与查找返回的集合时扫描过的实体数的比率。如果你的应用程序在执行表查询时使用了某个属性值的筛选器，而该属性值仅供 1% 的数据共享，则该查询需要扫描 100 个实体才会返回 1 个实体。前面讨论的表可伸缩性目标均与所扫描的实体数相关，与返回的实体数无关：查询密度低很容易导致表服务限制你的应用程序，因为表服务在检索你要查找的实体时需要扫描的实体过多。请参阅下面有关<bpt id="p1">[</bpt>非规范化<ept id="p1">](#subheading34)</ept>的部分，以了解有关如何避免这种情况的详细信息。</source>
          <target state="new">影响查询效率的另一关键因素是返回的实体数与查找返回的集合时扫描过的实体数的比率。如果你的应用程序在执行表查询时使用了某个属性值的筛选器，而该属性值仅供 1% 的数据共享，则该查询需要扫描 100 个实体才会返回 1 个实体。前面讨论的表可伸缩性目标均与所扫描的实体数相关，与返回的实体数无关：查询密度低很容易导致表服务限制你的应用程序，因为表服务在检索你要查找的实体时需要扫描的实体过多。请参阅下面有关<bpt id="p1">[</bpt>非规范化<ept id="p1">](#subheading34)</ept>的部分，以了解有关如何避免这种情况的详细信息。</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>限制返回的数据量</source>
          <target state="new">限制返回的数据量</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading32"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>筛选</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading32"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>筛选</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>如果你知道某个查询将要返回的实体并不是你的客户端应用程序所需要的，则应考虑使用筛选器来减少返回的集合的大小。虽然没有返回到客户端的实体仍会计入可伸缩性限制，但你的应用程序的性能会提高，因为网络负载大小会下降，同时客户端应用程序必须处理的实体数会下降。请参见上面有关<bpt id="p1">[</bpt>查询密度<ept id="p1">](#subheading31)</ept>的说明，然而，由于可伸缩性目标与扫描的实体数相关，因此查询在筛选掉许多实体后仍可能导致限制，即使返回很少的实体。</source>
          <target state="new">如果你知道某个查询将要返回的实体并不是你的客户端应用程序所需要的，则应考虑使用筛选器来减少返回的集合的大小。虽然没有返回到客户端的实体仍会计入可伸缩性限制，但你的应用程序的性能会提高，因为网络负载大小会下降，同时客户端应用程序必须处理的实体数会下降。请参见上面有关<bpt id="p1">[</bpt>查询密度<ept id="p1">](#subheading31)</ept>的说明，然而，由于可伸缩性目标与扫描的实体数相关，因此查询在筛选掉许多实体后仍可能导致限制，即使返回很少的实体。</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading33"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>投影</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading33"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>投影</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>如果你的客户端应用程序只需表中实体提供的一组有限的属性，你可以使用投影来限制所返回数据集的大小。就像使用筛选一样，这有助于减少网络负载和客户端处理。</source>
          <target state="new">如果你的客户端应用程序只需表中实体提供的一组有限的属性，你可以使用投影来限制所返回数据集的大小。就像使用筛选一样，这有助于减少网络负载和客户端处理。</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading34"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>非规范化</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading34"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>非规范化</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>根据经过验证的做法，与使用关系数据库不同，若要提高表数据的查询效率，需对数据进行非规范化。也就是说，需要将相同的数据复制到多个实体中（一个实体对应一个用于查找数据的键）以便尽量降低查询在查找客户端所需数据时必须扫描的实体数，这样就不必扫描大量实体来查找应用程序需要的数据。例如，在电子商务 Web 应用中，可能会想要通过两种方式查找订单：按客户 ID（为我提供此客户的订单）和按日期（为我提供某个日期的订单）。在表存储中，最好是将实体（或者对实体的引用）存储两次 – 一次使用表名称、PK 和 RK 进行存储，以便按客户 ID 快速查找，另一次则通过日期来加快查找速度。</source>
          <target state="new">根据经过验证的做法，与使用关系数据库不同，若要提高表数据的查询效率，需对数据进行非规范化。也就是说，需要将相同的数据复制到多个实体中（一个实体对应一个用于查找数据的键）以便尽量降低查询在查找客户端所需数据时必须扫描的实体数，这样就不必扫描大量实体来查找应用程序需要的数据。例如，在电子商务 Web 应用中，可能会想要通过两种方式查找订单：按客户 ID（为我提供此客户的订单）和按日期（为我提供某个日期的订单）。在表存储中，最好是将实体（或者对实体的引用）存储两次 – 一次使用表名称、PK 和 RK 进行存储，以便按客户 ID 快速查找，另一次则通过日期来加快查找速度。</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>插入/更新/删除</source>
          <target state="new">插入/更新/删除</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>本部分介绍的经过验证的做法用于修改存储在表服务中的实体。</source>
          <target state="new">本部分介绍的经过验证的做法用于修改存储在表服务中的实体。</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading35"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>批处理</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading35"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>批处理</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>批处理事务在 Azure 存储空间中也称为实体组事务 (ETG)；ETG 中的所有操作都必须位于单个表的单个分区中。在可能的情况下，请使用 ETG 来批量执行插入、更新和删除操作。这会减少客户端应用程序与服务器之间的往返操作次数、减少需要收费的事务数（一个 ETG 计为一个收费事务，最多可能包含 100 个存储操作），以及启用原子更新（ETG 中的所有操作都成功或都失败）。高延迟性的环境（例如移动设备）可以充分利用 ETG。</source>
          <target state="new">批处理事务在 Azure 存储空间中也称为实体组事务 (ETG)；ETG 中的所有操作都必须位于单个表的单个分区中。在可能的情况下，请使用 ETG 来批量执行插入、更新和删除操作。这会减少客户端应用程序与服务器之间的往返操作次数、减少需要收费的事务数（一个 ETG 计为一个收费事务，最多可能包含 100 个存储操作），以及启用原子更新（ETG 中的所有操作都成功或都失败）。高延迟性的环境（例如移动设备）可以充分利用 ETG。</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading36"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Upsert</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading36"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Upsert</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>尽可能使用表的“Upsert”操作。有两种类型的“Upsert”，两种都可能比传统的“插入”和“更新”操作更高效：</source>
          <target state="new">尽可能使用表的“Upsert”操作。有两种类型的“Upsert”，两种都可能比传统的“插入”和“更新”操作更高效：</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>InsertOrMerge<ept id="p1">**</ept>：当您需要上载一部分实体属性，但不确定该实体是否已存在时，可使用此操作。如果实体存在，则该调用会更新包含在“Upsert”操作中的属性，保留所有现有的属性不变，而如果实体不存在，则会插入新的实体。这类似于在查询中使用投影，因为你只需上载在变化的属性。</source>
          <target state="new"><bpt id="p1">**</bpt>InsertOrMerge<ept id="p1">**</ept>：当您需要上载一部分实体属性，但不确定该实体是否已存在时，可使用此操作。如果实体存在，则该调用会更新包含在“Upsert”操作中的属性，保留所有现有的属性不变，而如果实体不存在，则会插入新的实体。这类似于在查询中使用投影，因为你只需上载在变化的属性。</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>InsertOrReplace<ept id="p1">**</ept>：当您需要上载某个全新的实体，却又不确定该实体是否已存在时，可使用此操作。仅当你知道这个刚上载的实体完全正确时，才应使用此操作，因为该实体会完全覆盖旧实体。例如，你需要更新用于存储用户当前位置的实体，而不管应用程序以前是否存储过该用户的位置数据；新位置实体是完整的，你不需要任何旧实体提供的任何信息。</source>
          <target state="new"><bpt id="p1">**</bpt>InsertOrReplace<ept id="p1">**</ept>：当您需要上载某个全新的实体，却又不确定该实体是否已存在时，可使用此操作。仅当你知道这个刚上载的实体完全正确时，才应使用此操作，因为该实体会完全覆盖旧实体。例如，你需要更新用于存储用户当前位置的实体，而不管应用程序以前是否存储过该用户的位置数据；新位置实体是完整的，你不需要任何旧实体提供的任何信息。</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading37"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>将数据系列存储在单个实体中</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading37"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>将数据系列存储在单个实体中</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>有时候，应用程序会存储一系列需要频繁进行一次性检索的数据：例如，应用程序可能会跟踪一段时间内的 CPU 使用情况，以便绘制过去 24 小时内数据的滚动图表。一种方法是每小时构建一个表实体，每个实体代表一个具体的小时，并存储该小时的 CPU 使用情况。为了针对该数据绘图，应用程序需要检索保留过去 24 小时内数据的实体。</source>
          <target state="new">有时候，应用程序会存储一系列需要频繁进行一次性检索的数据：例如，应用程序可能会跟踪一段时间内的 CPU 使用情况，以便绘制过去 24 小时内数据的滚动图表。一种方法是每小时构建一个表实体，每个实体代表一个具体的小时，并存储该小时的 CPU 使用情况。为了针对该数据绘图，应用程序需要检索保留过去 24 小时内数据的实体。</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>此外，也可以让您的应用程序将每小时的 CPU 使用情况存储为单个实体的独立属性：更新每个小时的时候，您的应用程序可以使用单个“InsertOrMerge Upsert”调用来更新最近的一个小时的值。针对数据进行绘图时，应用程序只需检索 1 个实体而非 24 个，这样的查询非常高效（请参阅上面有关<bpt id="p1">[</bpt>查询范围<ept id="p1">](#subheading30)</ept>的讨论）。</source>
          <target state="new">此外，也可以让您的应用程序将每小时的 CPU 使用情况存储为单个实体的独立属性：更新每个小时的时候，您的应用程序可以使用单个“InsertOrMerge Upsert”调用来更新最近的一个小时的值。针对数据进行绘图时，应用程序只需检索 1 个实体而非 24 个，这样的查询非常高效（请参阅上面有关<bpt id="p1">[</bpt>查询范围<ept id="p1">](#subheading30)</ept>的讨论）。</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="subheading38"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在 Blob 中存储结构化的数据</source>
          <target state="new"><ph id="ph1">&lt;a name="subheading38"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在 Blob 中存储结构化的数据</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>有时候，本应将结构化数据置于表中，但由于各种实体始终是一起检索，因此可以将其批量插入。这方面的一个很好的示例是日志文件。在这个示例中，你可以批处理数分钟的日志，将其插入，然后你又始终一次性检索数分钟的日志。在这个示例中，就性能来说，使用 Blob 要比使用表好，因为你可以显著降低写入/返回的对象数，并且通常情况下还可以显著降低需要发出的请求数。</source>
          <target state="new">有时候，本应将结构化数据置于表中，但由于各种实体始终是一起检索，因此可以将其批量插入。这方面的一个很好的示例是日志文件。在这个示例中，你可以批处理数分钟的日志，将其插入，然后你又始终一次性检索数分钟的日志。在这个示例中，就性能来说，使用 Blob 要比使用表好，因为你可以显著降低写入/返回的对象数，并且通常情况下还可以显著降低需要发出的请求数。</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>队列</source>
          <target state="new">队列</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>&lt;a name=subheading39"&gt;<ph id="ph1">&lt;/a&gt;</ph>可伸缩性限制</source>
          <target state="new">&lt;a name=subheading39"&gt;<ph id="ph1">&lt;/a&gt;</ph>可伸缩性限制</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>单个队列可以处理大约 2,000 条消息（每条 1KB）/秒（在这里，每个 AddMessage、GetMessage 和 DeleteMessage 均计为一条消息）。如果这对你的应用程序来说还不够用，则应使用多个队列并将这些消息分散到队列中去。</source>
          <target state="new">单个队列可以处理大约 2,000 条消息（每条 1KB）/秒（在这里，每个 AddMessage、GetMessage 和 DeleteMessage 均计为一条消息）。如果这对你的应用程序来说还不够用，则应使用多个队列并将这些消息分散到队列中去。</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">[</bpt>Azure 存储可伸缩性和性能目标<ept id="p1">](/documentation/articles/storage-scalability-targets)</ept>中查看最新的可伸缩性目标。</source>
          <target state="new">在 <bpt id="p1">[</bpt>Azure 存储可伸缩性和性能目标<ept id="p1">](/documentation/articles/storage-scalability-targets)</ept>中查看最新的可伸缩性目标。</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>&lt;a name=subheading40"&gt;<ph id="ph1">&lt;/a&gt;</ph>关闭 Nagle</source>
          <target state="new">&lt;a name=subheading40"&gt;<ph id="ph1">&lt;/a&gt;</ph>关闭 Nagle</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>请参阅有关表配置的部分，其中讨论了 Nagle 算法 — Nagle 算法通常不适合执行队列请求，应禁用。</source>
          <target state="new">请参阅有关表配置的部分，其中讨论了 Nagle 算法 — Nagle 算法通常不适合执行队列请求，应禁用。</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>&lt;a name=subheading41"&gt;<ph id="ph1">&lt;/a&gt;</ph>消息大小</source>
          <target state="new">&lt;a name=subheading41"&gt;<ph id="ph1">&lt;/a&gt;</ph>消息大小</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>队列性能和可伸缩性随消息增大而下降。只应将接收方需要的信息置于消息中。</source>
          <target state="new">队列性能和可伸缩性随消息增大而下降。只应将接收方需要的信息置于消息中。</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>&lt;a name=subheading42"&gt;<ph id="ph1">&lt;/a&gt;</ph>批量检索</source>
          <target state="new">&lt;a name=subheading42"&gt;<ph id="ph1">&lt;/a&gt;</ph>批量检索</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>你可以在单个操作中从队列检索多达 32 条消息。这可以降低客户端应用程序的往返操作数，尤其适合延迟性严重的环境，例如移动设备。</source>
          <target state="new">你可以在单个操作中从队列检索多达 32 条消息。这可以降低客户端应用程序的往返操作数，尤其适合延迟性严重的环境，例如移动设备。</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>&lt;a name=subheading43"&gt;<ph id="ph1">&lt;/a&gt;</ph>队列轮询间隔</source>
          <target state="new">&lt;a name=subheading43"&gt;<ph id="ph1">&lt;/a&gt;</ph>队列轮询间隔</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>大多数应用程序会轮询获取队列中的消息，队列可能是适合该应用程序的事务的最大源之一。理智选择轮询间隔：轮询过于频繁可能导致你的应用程序接近队列的可伸缩性目标。不过，200,000 次事务仅收费 0.01 美元（在撰写本文时），一个处理器每秒轮询一次且持续一个月的成本不到 15 美分，因此成本通常不是影响你选择轮询间隔的一项因素。</source>
          <target state="new">大多数应用程序会轮询获取队列中的消息，队列可能是适合该应用程序的事务的最大源之一。理智选择轮询间隔：轮询过于频繁可能导致你的应用程序接近队列的可伸缩性目标。不过，200,000 次事务仅收费 0.01 美元（在撰写本文时），一个处理器每秒轮询一次且持续一个月的成本不到 15 美分，因此成本通常不是影响你选择轮询间隔的一项因素。</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>如需最新成本信息，请参阅<bpt id="p1">[</bpt>存储定价详细信息<ept id="p1">](/home/features/storage#price)</ept>。</source>
          <target state="new">如需最新成本信息，请参阅<bpt id="p1">[</bpt>存储定价详细信息<ept id="p1">](/home/features/storage#price)</ept>。</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>&lt;a name=subheading44"&gt;<ph id="ph1">&lt;/a&gt;</ph>UpdateMessage</source>
          <target state="new">&lt;a name=subheading44"&gt;<ph id="ph1">&lt;/a&gt;</ph>UpdateMessage</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>您可以使用“UpdateMessage”来增加不可见性超时或更新消息的状态信息。虽然此功能很强大，但请记住，每项“UpdateMessage”操作都会计入可伸缩性目标。不过，与作业每完成一步就将其从一个队列传到下一个队列的工作流相比，此方法可能要高效得多。使用“UpdateMessage”操作可以让您的应用程序将作业状态保存到消息，然后又可以继续工作，而不必在作业的每一步完成的时候，为了执行作业的下一步而将消息重新排队。</source>
          <target state="new">您可以使用“UpdateMessage”来增加不可见性超时或更新消息的状态信息。虽然此功能很强大，但请记住，每项“UpdateMessage”操作都会计入可伸缩性目标。不过，与作业每完成一步就将其从一个队列传到下一个队列的工作流相比，此方法可能要高效得多。使用“UpdateMessage”操作可以让您的应用程序将作业状态保存到消息，然后又可以继续工作，而不必在作业的每一步完成的时候，为了执行作业的下一步而将消息重新排队。</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅文章<bpt id="p1">[</bpt>如何：更改已排队消息的内容<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-queues#change-contents)</ept>。</source>
          <target state="new">有关详细信息，请参阅文章<bpt id="p1">[</bpt>如何：更改已排队消息的内容<ept id="p1">](/documentation/articles/storage-dotnet-how-to-use-queues#change-contents)</ept>。</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>&lt;a name=subheading45"&gt;<ph id="ph1">&lt;/a&gt;</ph>应用程序体系结构</source>
          <target state="new">&lt;a name=subheading45"&gt;<ph id="ph1">&lt;/a&gt;</ph>应用程序体系结构</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>你应该使用队列，让你的应用程序体系结构具有可伸缩性。下面列出了一些方法，你可以通过这些方法，使用队列来提高应用程序的可伸缩性：</source>
          <target state="new">你应该使用队列，让你的应用程序体系结构具有可伸缩性。下面列出了一些方法，你可以通过这些方法，使用队列来提高应用程序的可伸缩性：</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>你可以使用队列来创建需要处理的积压工作，并消除应用程序中的工作负载。例如，你可以将用户发出的执行处理器密集型工作（例如，调整已上载图像的大小）的请求排队。</source>
          <target state="new">你可以使用队列来创建需要处理的积压工作，并消除应用程序中的工作负载。例如，你可以将用户发出的执行处理器密集型工作（例如，调整已上载图像的大小）的请求排队。</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>你可以使用队列来分离应用程序的某些部分，以便对其进行独立的缩放操作。例如，Web 前端可以将用户提交的调查结果置于某个队列中，留待以后分析和存储。你可以添加更多的辅助角色实例，使之按要求处理队列数据。</source>
          <target state="new">你可以使用队列来分离应用程序的某些部分，以便对其进行独立的缩放操作。例如，Web 前端可以将用户提交的调查结果置于某个队列中，留待以后分析和存储。你可以添加更多的辅助角色实例，使之按要求处理队列数据。</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>结束语</source>
          <target state="new">结束语</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>本文讨论了部分最常用的、经过验证的做法，目的是优化使用 Azure 存储空间时的性能。我们建议每一位应用程序开发人员对照以上每条做法，对自己的应用程序进行评估，并考虑按照建议要求进行操作，以便优化使用 Azure 存储空间的应用程序的性能。</source>
          <target state="new">本文讨论了部分最常用的、经过验证的做法，目的是优化使用 Azure 存储空间时的性能。我们建议每一位应用程序开发人员对照以上每条做法，对自己的应用程序进行评估，并考虑按照建议要求进行操作，以便优化使用 Azure 存储空间的应用程序的性能。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>