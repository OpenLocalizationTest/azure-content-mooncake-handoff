{
  "nodes": [
    {
      "content": "分片映射管理 | Azure",
      "pos": [
        28,
        42
      ]
    },
    {
      "content": "如何使用弹性数据库客户端库 ShardMapManager",
      "pos": [
        62,
        91
      ]
    },
    {
      "content": "分片映射管理",
      "pos": [
        308,
        314
      ]
    },
    {
      "pos": [
        316,
        549
      ],
      "content": "使用<bpt id=\"p1\">[</bpt>弹性数据库客户端库<ept id=\"p1\">](/documentation/articles/sql-database-elastic-database-client-library)</ept>管理分片应用程序。在分片数据库环境中，<bpt id=\"p2\">[</bpt><bpt id=\"p3\">**</bpt>分片映射<ept id=\"p3\">**</ept><ept id=\"p2\">](/documentation/articles/sql-database-elastic-scale-glossary)</ept>将维护相关信息，以便应用程序可以根据<bpt id=\"p4\">**</bpt>分片键<ept id=\"p4\">**</ept>的值连接到相应的数据库。了解如何构建这些映射对于分片映射管理至关重要。"
    },
    {
      "content": "分片映射",
      "pos": [
        554,
        558
      ]
    },
    {
      "content": "支持的分片键的 .Net 类型",
      "pos": [
        565,
        580
      ]
    },
    {
      "content": "灵活扩展支持将以下 .Net Framework 类型用作分片键：",
      "pos": [
        582,
        615
      ]
    },
    {
      "content": "integer",
      "pos": [
        619,
        626
      ]
    },
    {
      "content": "long",
      "pos": [
        629,
        633
      ]
    },
    {
      "content": "guid",
      "pos": [
        636,
        640
      ]
    },
    {
      "content": "字节",
      "pos": [
        643,
        645
      ]
    },
    {
      "content": "datetime",
      "pos": [
        650,
        658
      ]
    },
    {
      "content": "timespan",
      "pos": [
        661,
        669
      ]
    },
    {
      "content": "datetimeoffset",
      "pos": [
        672,
        686
      ]
    },
    {
      "content": "列表和范围分片映射",
      "pos": [
        692,
        701
      ]
    },
    {
      "pos": [
        702,
        737
      ],
      "content": "使用<bpt id=\"p1\">**</bpt>各个分片键值的列表<ept id=\"p1\">**</ept>或<bpt id=\"p2\">**</bpt>分片键值的范围<ept id=\"p2\">**</ept>可构造分片映射。"
    },
    {
      "content": "列表分片映射",
      "pos": [
        742,
        748
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>分片<ept id=\"p1\">**</ept>包含 <bpt id=\"p2\">**</bpt>shardlet<ept id=\"p2\">**</ept>，shardlet 到分片的映射由分片映射维护。<bpt id=\"p3\">**</bpt>列表分片映射<ept id=\"p3\">**</ept>是可标识 shardlet 的单独键值和可用作分片的数据库之间的关联项。<bpt id=\"p4\">**</bpt>列表映射<ept id=\"p4\">**</ept>是显式的（例如，键 1 映射到数据库 A），不同的键值可以映射到同一数据库（键值 3 和 6 可同时引用数据库 B）。",
      "pos": [
        749,
        907
      ]
    },
    {
      "content": "键",
      "pos": [
        911,
        912
      ]
    },
    {
      "content": "分片位置",
      "pos": [
        915,
        919
      ]
    },
    {
      "content": "1",
      "pos": [
        949,
        950
      ]
    },
    {
      "content": "Database\\_A",
      "pos": [
        953,
        964
      ]
    },
    {
      "content": "3",
      "pos": [
        969,
        970
      ]
    },
    {
      "content": "Database\\_B",
      "pos": [
        973,
        984
      ]
    },
    {
      "content": "4",
      "pos": [
        989,
        990
      ]
    },
    {
      "content": "Database\\_C",
      "pos": [
        993,
        1004
      ]
    },
    {
      "content": "6",
      "pos": [
        1009,
        1010
      ]
    },
    {
      "content": "Database\\_B",
      "pos": [
        1013,
        1024
      ]
    },
    {
      "content": "...",
      "pos": [
        1029,
        1032
      ]
    },
    {
      "content": "...",
      "pos": [
        1035,
        1038
      ]
    },
    {
      "content": "范围分片映射",
      "pos": [
        1048,
        1054
      ]
    },
    {
      "pos": [
        1056,
        1156
      ],
      "content": "在<bpt id=\"p1\">**</bpt>范围分片映射<ept id=\"p1\">**</ept>中，键范围由 <bpt id=\"p2\">**</bpt>[Low Value, High Value)<ept id=\"p2\">**</ept> 对描述，其中 <bpt id=\"p3\">*</bpt>Low Value<ept id=\"p3\">*</ept> 是范围中的最小键，而 <bpt id=\"p4\">*</bpt>High Value<ept id=\"p4\">*</ept> 是第一个大于范围的值。"
    },
    {
      "pos": [
        1158,
        1273
      ],
      "content": "例如，<bpt id=\"p1\">**</bpt>[0, 100)<ept id=\"p1\">**</ept> 包括所有大于或等于 0 且小于 100 的整数。请注意，多个范围可指向同一数据库，并且支持多个不连续的范围（例如，在下面的示例中，[100,200) 和 [400,600) 可同时指向数据库 C。）"
    },
    {
      "content": "键",
      "pos": [
        1277,
        1278
      ]
    },
    {
      "content": "分片位置",
      "pos": [
        1281,
        1285
      ]
    },
    {
      "content": "[1,50)",
      "pos": [
        1321,
        1327
      ]
    },
    {
      "content": "Database\\_A",
      "pos": [
        1330,
        1341
      ]
    },
    {
      "content": "[50,100)",
      "pos": [
        1346,
        1354
      ]
    },
    {
      "content": "Database\\_B",
      "pos": [
        1357,
        1368
      ]
    },
    {
      "content": "[100,200)",
      "pos": [
        1373,
        1382
      ]
    },
    {
      "content": "Database\\_C",
      "pos": [
        1385,
        1396
      ]
    },
    {
      "content": "[400,600)",
      "pos": [
        1401,
        1410
      ]
    },
    {
      "content": "Database\\_C",
      "pos": [
        1413,
        1424
      ]
    },
    {
      "content": "...",
      "pos": [
        1429,
        1432
      ]
    },
    {
      "content": "...",
      "pos": [
        1435,
        1438
      ]
    },
    {
      "pos": [
        1452,
        1559
      ],
      "content": "上面所示的每个表都是 <bpt id=\"p1\">**</bpt>ShardMap<ept id=\"p1\">**</ept> 对象的概念性示例。每一行都是单个 <bpt id=\"p2\">**</bpt>PointMapping<ept id=\"p2\">**</ept>（适用于列表分片映射）对象或 <bpt id=\"p3\">**</bpt>RangeMapping<ept id=\"p3\">**</ept>（适用于范围分片映射）对象的简化示例。"
    },
    {
      "content": "分片映射管理器",
      "pos": [
        1564,
        1571
      ]
    },
    {
      "pos": [
        1574,
        1642
      ],
      "content": "在客户端库中，分片映射管理器是分片映射的集合。由 <bpt id=\"p1\">**</bpt>ShardMapManager<ept id=\"p1\">**</ept> .Net 对象管理的数据保存在以下三个位置中："
    },
    {
      "pos": [
        1647,
        1809
      ],
      "content": "<bpt id=\"p1\">**</bpt>全局分片映射 (GSM)<ept id=\"p1\">**</ept>：当你创建 <bpt id=\"p2\">**</bpt>ShardMapManager<ept id=\"p2\">**</ept> 时，可为其所有的分片映射指定某个数据库以用作存储库。将自动创建特殊的表和存储过程以管理信息。这通常是小型数据库且可轻松进行访问，但不应用于满足应用程序的其他需求。这些表位于名为 <bpt id=\"p3\">**</bpt>\\_\\_ShardManagement<ept id=\"p3\">**</ept> 的特殊架构中。"
    },
    {
      "pos": [
        1814,
        2029
      ],
      "content": "<bpt id=\"p1\">**</bpt>局部分片映射 (LSM)<ept id=\"p1\">**</ept>：将修改你在分片映射内指定为分片的每个数据库，以包含多个小表和特殊存储过程，其中包括特定于该分片的分片映射信息并对其进行管理。对于 GSM 中的信息而言，该信息是冗余的，但应用程序通过该信息可验证缓存的分片映射信息，而无需将所有负载置于 GSM 上；应用程序可使用 LSM 确定缓存的映射是否仍然有效。与每个分片上的 LSM 对应的表都位于架构 <bpt id=\"p2\">**</bpt>\\_\\_ShardManagement<ept id=\"p2\">**</ept> 中。"
    },
    {
      "pos": [
        2034,
        2111
      ],
      "content": "<bpt id=\"p1\">**</bpt>应用程序缓存<ept id=\"p1\">**</ept>：每个用于访问 <bpt id=\"p2\">**</bpt>ShardMapManager<ept id=\"p2\">**</ept> 对象的应用程序实例都可维护其映射的本地内存中缓存。它存储最近检索到的路由信息。"
    },
    {
      "content": "构造 ShardMapManager",
      "pos": [
        2116,
        2134
      ]
    },
    {
      "pos": [
        2135,
        2314
      ],
      "content": "使用工厂模式实例化应用程序中的 <bpt id=\"p1\">**</bpt>ShardMapManager<ept id=\"p1\">**</ept> 对象。通过 <bpt id=\"p2\">**</bpt>ShardMapManagerFactory.GetSqlShardMapManager<ept id=\"p2\">**</ept> 方法可获取具有 <bpt id=\"p3\">**</bpt>ConnectionString<ept id=\"p3\">**</ept> 形式的凭据（包括用于保存 GSM 的服务器名称和数据库名称），并返回 <bpt id=\"p4\">**</bpt>ShardMapManager<ept id=\"p4\">**</ept> 的实例。"
    },
    {
      "pos": [
        2316,
        2467
      ],
      "content": "在应用程序的初始化代码内，每个应用域只应实例化 <bpt id=\"p1\">**</bpt>ShardMapManager<ept id=\"p1\">**</ept> 一次。<bpt id=\"p2\">**</bpt>ShardMapManager<ept id=\"p2\">**</ept> 可包含任意数量的分片映射。尽管对于许多应用程序而言，单个分片映射可能是足够的，但有时针对不同的架构或出于特定目的，需使用不同的数据库集，在这些情况下多个分片可能更合适。"
    },
    {
      "pos": [
        2469,
        2569
      ],
      "content": "在此代码中，应用程序尝试打开现有的 <bpt id=\"p1\">**</bpt>ShardMapManager<ept id=\"p1\">**</ept>。如果表示全局 <bpt id=\"p2\">**</bpt>ShardMapManager<ept id=\"p2\">**</ept> (GSM) 的对象尚未存在于数据库内，则客户端库将在此处创建这些对象。"
    },
    {
      "pos": [
        3653,
        3783
      ],
      "content": "你可以使用 Powershell 作为替代方法来创建新的分片映射管理器。<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](https://gallery.technet.microsoft.com/scriptcenter/Azure-SQL-DB-Elastic-731883db)</ept>提供了一个示例。"
    },
    {
      "content": "分片映射管理凭据",
      "pos": [
        3789,
        3797
      ]
    },
    {
      "content": "通常，用于管理和操作分片映射的应用程序不同于那些使用分片映射路由连接的应用程序。",
      "pos": [
        3799,
        3839
      ]
    },
    {
      "pos": [
        3841,
        3988
      ],
      "content": "对于管理分片映射（添加或更改分片、分片映射等）的应用程序，你必须使用“在 GSM 数据库和用作分片的每个数据库上都具有读/写权限的凭据”实例化 <bpt id=\"p1\">**</bpt>ShardMapManager<ept id=\"p1\">**</ept>。在输入或更改分片映射信息时，这些凭据必须允许编写 GSM 和 LSM 中的表，以及在新分片上创建 LSM 表。"
    },
    {
      "content": "仅元数据受影响",
      "pos": [
        3994,
        4001
      ]
    },
    {
      "pos": [
        4004,
        4262
      ],
      "content": "用于填充或更改 <bpt id=\"p1\">**</bpt>ShardMapManager<ept id=\"p1\">**</ept> 数据的方法不会更改存储在分片本身中的用户数据。例如，类似于 <bpt id=\"p2\">**</bpt>CreateShard<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>DeleteShard<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>UpdateMapping<ept id=\"p4\">**</ept> 等的方法仅影响分片映射元数据，而不会删除、添加或更改分片中所包含的用户数据。但是，这些方法旨在与您执行的单独操作结合使用，以创建或删除实际数据库，或者将行从一个分片移动到另一个分片，以使分片环境恢复均衡。（弹性数据库工具附带的<bpt id=\"p5\">**</bpt>拆分-合并<ept id=\"p5\">**</ept>工具将使用这些 API 并安排在分片之间移动实际数据。）"
    },
    {
      "content": "填充分片映射：示例",
      "pos": [
        4267,
        4276
      ]
    },
    {
      "content": "下面显示了用于填充特定分片映射的操作的示例序列。此代码将执行下列步骤：",
      "pos": [
        4279,
        4314
      ]
    },
    {
      "content": "将在分片映射管理器中创建新的分片映射。",
      "pos": [
        4319,
        4338
      ]
    },
    {
      "content": "将两个不同分片的元数据添加到分片映射。",
      "pos": [
        4343,
        4362
      ]
    },
    {
      "content": "将添加各种键范围映射，并且将显示分片映射的整体内容。",
      "pos": [
        4367,
        4393
      ]
    },
    {
      "pos": [
        4396,
        4569
      ],
      "content": "在遇到意外的错误时，可采用一种让整个方法重新安全运行的方式来编写代码 - 每个请求都在尝试创建分片或映射前测试其是否已存在。以下代码假定已在由字符串 <bpt id=\"p1\">**</bpt>shardServer<ept id=\"p1\">**</ept> 引用的服务器中创建名为 <bpt id=\"p2\">**</bpt>sample\\_shard\\_0<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>sample\\_shard\\_1<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>sample\\_shard\\_2<ept id=\"p4\">**</ept> 的数据库。"
    },
    {
      "pos": [
        7491,
        7623
      ],
      "content": "使用 PowerShell 脚本也可达到相同的结果。<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](https://gallery.technet.microsoft.com/scriptcenter/Azure-SQL-DB-Elastic-731883db)</ept>提供了某些 PowerShell 示例。"
    },
    {
      "pos": [
        7625,
        7687
      ],
      "content": "填充完分片映射后，即可创建或改编数据访问应用程序，以便使用这些映射。在需要更改<bpt id=\"p1\">**</bpt>映射布局<ept id=\"p1\">**</ept>之前，无需重新填充或操作映射。"
    },
    {
      "content": "依赖于数据的路由",
      "pos": [
        7692,
        7700
      ]
    },
    {
      "pos": [
        7703,
        7870
      ],
      "content": "需要数据库连接的应用程序需要充分使用分片映射管理器，以执行特定于应用的数据操作。在分片应用程序中，这些连接现在必须与相应的目标数据库相关联。这称为<bpt id=\"p1\">**</bpt>数据相关的路由<ept id=\"p1\">**</ept>。对于这些应用程序，通过使用在 GSM 数据库上具有只读访问权限的凭据，实例化来自工厂的分片映射管理器对象。以后，单独的连接请求将提供连接相应分片数据库时所需的凭据。"
    },
    {
      "pos": [
        7872,
        7984
      ],
      "content": "请注意，这些应用程序（使用通过具有只读权限的凭据打开的 <bpt id=\"p1\">**</bpt>ShardMapManager<ept id=\"p1\">**</ept>）将无法更改映射。为了满足这些需求，请创建特定于管理的应用程序或 PowerShell 脚本，以提供如前所述的更高级别权限的凭据。"
    },
    {
      "pos": [
        7986,
        8081
      ],
      "content": "有关详细信息，请参阅<bpt id=\"p1\">[</bpt>数据相关的路由<ept id=\"p1\">](/documentation/articles/sql-database-elastic-scale-data-dependent-routing)</ept>。"
    },
    {
      "content": "修改分片映射",
      "pos": [
        8086,
        8092
      ]
    },
    {
      "content": "可采用不同方式更改分片映射。以下所有方法都可修改用于描述分片及其映射的元数据，但这些方法不以物理方式修改分片内的数据，也不创建或删除实际数据库。下面所述的分片映射上的某些操作可能需要与以物理方式移动数据或添加和删除用作分片的数据库的管理操作进行协调。",
      "pos": [
        8095,
        8220
      ]
    },
    {
      "content": "这些方法作为构建基块一同工作，以便在分片的数据库环境中修改数据的总体分发情况。",
      "pos": [
        8222,
        8261
      ]
    },
    {
      "pos": [
        8265,
        8313
      ],
      "content": "若要添加或删除分片：请使用 <bpt id=\"p1\">**</bpt>CreateShard<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>DeleteShard<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "若要执行这些操作，表示目标分片的服务器和数据库必须已经存在。这些方法不会对数据库本身产生任何影响，仅对分片映射上的元数据产生影响。",
      "pos": [
        8324,
        8389
      ]
    },
    {
      "pos": [
        8393,
        8479
      ],
      "content": "若要创建或删除映射到分片的点或范围：请使用 <bpt id=\"p1\">**</bpt>CreateRangeMapping<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>DeleteMapping<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>CreatePointMapping<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        8489,
        8606
      ],
      "content": "许多不同的点或范围可映射到相同的分片。这些方法仅影响元数据，而不会影响已显示在分片中的任何数据。如果为了与 <bpt id=\"p1\">**</bpt>DeleteMapping<ept id=\"p1\">**</ept> 操作保持一致而需要将数据从数据库中删除，你将需要单独执行这些操作，但需要结合使用这些方法。"
    },
    {
      "pos": [
        8610,
        8676
      ],
      "content": "将现有的范围拆分为两个，或将相邻的范围合并为一个：请使用 <bpt id=\"p1\">**</bpt>SplitMapping<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>MergeMappings<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        8682,
        8901
      ],
      "content": "请注意，拆分和合并操作<bpt id=\"p1\">**</bpt>不更改键值要映射到的分片<ept id=\"p1\">**</ept>。拆分操作可将现有的范围拆分为两个部分，但在映射到相同分片时同时保留这两个部分。对在已映射到相同分片的两个相邻的范围进行合并操作，从而可将其合并到单个范围中。若要在分片之间移动点或范围本身，需要将 <bpt id=\"p2\">**</bpt>UpdateMapping<ept id=\"p2\">**</ept> 与移动的实际数据结合使用，才能进行协调。当需要移动数据时，你可以使用弹性数据库工具中随附的<bpt id=\"p3\">**</bpt>拆分/合并<ept id=\"p3\">**</ept>服务，以将分片映射的更改与数据移动相协调。"
    },
    {
      "pos": [
        8905,
        8951
      ],
      "content": "将单独的点或范围重新映射（或移动）到不同的分片：请使用 <bpt id=\"p1\">**</bpt>UpdateMapping<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        8957,
        9035
      ],
      "content": "由于可能需要将数据从一个分片移动到另一个分片，以便与 <bpt id=\"p1\">**</bpt>UpdateMapping<ept id=\"p1\">**</ept> 操作保持一致，因此你将需要单独执行此移动，但需要结合使用这些方法。"
    },
    {
      "pos": [
        9039,
        9117
      ],
      "content": "若要在联机和脱机状态下执行映射：请使用 <bpt id=\"p1\">**</bpt>MarkMappingOffline<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>MarkMappingOnline<ept id=\"p2\">**</ept> 来控制映射的联机状态。"
    },
    {
      "pos": [
        9123,
        9294
      ],
      "content": "仅当映射处于“脱机”状态时才允许在分片映射上进行某些操作，其中包括 <bpt id=\"p1\">**</bpt>UpdateMapping<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>DeleteMapping<ept id=\"p2\">**</ept>。当映射处于脱机状态时，基于该映射中所包含的键的数据依赖请求将返回一个错误。此外，当范围首次处于脱机状态时，所有到受影响的分片的连接都将自动终止，以防止因范围的更改而导致查询出现不一致或不完整的结果。"
    },
    {
      "content": "映射是 .Net 中的不可变对象。以上会更改映射的所有方法也会使代码中任何对映射的引用失效。为了更轻松地执行操作序列来更改映射的状态，所有会更改映射的方法都将返回新的映射引用，以便能够链接操作。例如，若要在 shardmap sm 中删除包含索引键 25 的现有映射，可以执行以下命令：",
      "pos": [
        9296,
        9439
      ]
    },
    {
      "content": "添加分片",
      "pos": [
        9519,
        9523
      ]
    },
    {
      "content": "对于已经存在的分片映射，应用程序通常仅需要添加新分片，以处理预期的新键或键范围数据。例如，由租户 ID 分片的应用程序可能需要为新的租户设置新分片，或者在每个新的月份开始之前，每月分片的数据可能需要设置新分片。",
      "pos": [
        9526,
        9631
      ]
    },
    {
      "pos": [
        9633,
        9775
      ],
      "content": "如果新的键值范围还不是现有映射的组成部分且无需移动数据，则添加新分片以及将新的键或范围关联到该分片非常简单。有关添加新分片的详细信息，请参阅<bpt id=\"p1\">[</bpt>添加新分片<ept id=\"p1\">](/documentation/articles/sql-database-elastic-scale-add-a-shard)</ept>。"
    },
    {
      "pos": [
        9777,
        9936
      ],
      "content": "但是，在需要移动数据的情况下，需要拆分/合并工具并结合使用必要的分片映射更新，才能安排在分片之间移动数据。有关使用拆分/合并工具的详细信息，请参阅<bpt id=\"p1\">[</bpt>拆分/合并概述<ept id=\"p1\">](/documentation/articles/sql-database-elastic-scale-overview-split-and-merge)</ept>"
    }
  ],
  "content": "<properties \n    pageTitle=\"分片映射管理 | Azure\" \n    description=\"如何使用弹性数据库客户端库 ShardMapManager\" \n    services=\"sql-database\" \n    documentationCenter=\"\" \n    manager=\"jeffreyg\" \n    authors=\"ddove\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"sql-database\"\n    ms.date=\"11/04/2015\" \n    wacn.date=\"01/05/2016\"/>\n\n# 分片映射管理\n\n使用[弹性数据库客户端库](/documentation/articles/sql-database-elastic-database-client-library)管理分片应用程序。在分片数据库环境中，[**分片映射**](/documentation/articles/sql-database-elastic-scale-glossary)将维护相关信息，以便应用程序可以根据**分片键**的值连接到相应的数据库。了解如何构建这些映射对于分片映射管理至关重要。\n\n## 分片映射\n \n### 支持的分片键的 .Net 类型\n\n灵活扩展支持将以下 .Net Framework 类型用作分片键：\n\n* integer\n* long\n* guid\n* 字节  \n* datetime\n* timespan\n* datetimeoffset\n\n### 列表和范围分片映射\n使用**各个分片键值的列表**或**分片键值的范围**可构造分片映射。\n\n###列表分片映射\n**分片**包含 **shardlet**，shardlet 到分片的映射由分片映射维护。**列表分片映射**是可标识 shardlet 的单独键值和可用作分片的数据库之间的关联项。**列表映射**是显式的（例如，键 1 映射到数据库 A），不同的键值可以映射到同一数据库（键值 3 和 6 可同时引用数据库 B）。\n\n| 键 | 分片位置 |\n|-----|----------------|\n| 1 | Database\\_A |\n| 3 | Database\\_B |\n| 4 | Database\\_C |\n| 6 | Database\\_B |\n| ... | ... |\n \n\n### 范围分片映射 \n在**范围分片映射**中，键范围由 **[Low Value, High Value)** 对描述，其中 *Low Value* 是范围中的最小键，而 *High Value* 是第一个大于范围的值。\n\n例如，**[0, 100)** 包括所有大于或等于 0 且小于 100 的整数。请注意，多个范围可指向同一数据库，并且支持多个不连续的范围（例如，在下面的示例中，[100,200) 和 [400,600) 可同时指向数据库 C。）\n\n| 键 | 分片位置 |\n|-----------|----------------|\n| [1,50) | Database\\_A |\n| [50,100) | Database\\_B |\n| [100,200) | Database\\_C |\n| [400,600) | Database\\_C |\n| ... | ...            \n\n上面所示的每个表都是 **ShardMap** 对象的概念性示例。每一行都是单个 **PointMapping**（适用于列表分片映射）对象或 **RangeMapping**（适用于范围分片映射）对象的简化示例。\n\n## 分片映射管理器 \n\n在客户端库中，分片映射管理器是分片映射的集合。由 **ShardMapManager** .Net 对象管理的数据保存在以下三个位置中：\n\n1. **全局分片映射 (GSM)**：当你创建 **ShardMapManager** 时，可为其所有的分片映射指定某个数据库以用作存储库。将自动创建特殊的表和存储过程以管理信息。这通常是小型数据库且可轻松进行访问，但不应用于满足应用程序的其他需求。这些表位于名为 **\\_\\_ShardManagement** 的特殊架构中。\n\n2. **局部分片映射 (LSM)**：将修改你在分片映射内指定为分片的每个数据库，以包含多个小表和特殊存储过程，其中包括特定于该分片的分片映射信息并对其进行管理。对于 GSM 中的信息而言，该信息是冗余的，但应用程序通过该信息可验证缓存的分片映射信息，而无需将所有负载置于 GSM 上；应用程序可使用 LSM 确定缓存的映射是否仍然有效。与每个分片上的 LSM 对应的表都位于架构 **\\_\\_ShardManagement** 中。\n\n3. **应用程序缓存**：每个用于访问 **ShardMapManager** 对象的应用程序实例都可维护其映射的本地内存中缓存。它存储最近检索到的路由信息。\n\n## 构造 ShardMapManager\n使用工厂模式实例化应用程序中的 **ShardMapManager** 对象。通过 **ShardMapManagerFactory.GetSqlShardMapManager** 方法可获取具有 **ConnectionString** 形式的凭据（包括用于保存 GSM 的服务器名称和数据库名称），并返回 **ShardMapManager** 的实例。\n\n在应用程序的初始化代码内，每个应用域只应实例化 **ShardMapManager** 一次。**ShardMapManager** 可包含任意数量的分片映射。尽管对于许多应用程序而言，单个分片映射可能是足够的，但有时针对不同的架构或出于特定目的，需使用不同的数据库集，在这些情况下多个分片可能更合适。\n\n在此代码中，应用程序尝试打开现有的 **ShardMapManager**。如果表示全局 **ShardMapManager** (GSM) 的对象尚未存在于数据库内，则客户端库将在此处创建这些对象。\n\n    // Try to get a reference to the Shard Map Manager via the Shard Map Manager database.  \n    // If it doesn't already exist, then create it. \n    ShardMapManager shardMapManager; \n    bool shardMapManagerExists = ShardMapManagerFactory.TryGetSqlShardMapManager(\n                                        connectionString, \n                                        ShardMapManagerLoadPolicy.Lazy, \n                                        out shardMapManager); \n\n    if (shardMapManagerExists) \n     { \n        Console.WriteLine(\"Shard Map Manager already exists\");\n    } \n    else\n    {\n        // Create the Shard Map Manager. \n        ShardMapManagerFactory.CreateSqlShardMapManager(connectionString);\n        Console.WriteLine(\"Created SqlShardMapManager\"); \n\n        shardMapManager = ShardMapManagerFactory.GetSqlShardMapManager(\n            connectionString, \n            ShardMapManagerLoadPolicy.Lazy);\n\n        // The connectionString contains server name, database name, and admin credentials \n        // for privileges on both the GSM and the shards themselves.\n    } \n \n你可以使用 Powershell 作为替代方法来创建新的分片映射管理器。[此处](https://gallery.technet.microsoft.com/scriptcenter/Azure-SQL-DB-Elastic-731883db)提供了一个示例。\n\n### 分片映射管理凭据\n\n通常，用于管理和操作分片映射的应用程序不同于那些使用分片映射路由连接的应用程序。\n\n对于管理分片映射（添加或更改分片、分片映射等）的应用程序，你必须使用“在 GSM 数据库和用作分片的每个数据库上都具有读/写权限的凭据”实例化 **ShardMapManager**。在输入或更改分片映射信息时，这些凭据必须允许编写 GSM 和 LSM 中的表，以及在新分片上创建 LSM 表。\n\n### 仅元数据受影响 \n\n用于填充或更改 **ShardMapManager** 数据的方法不会更改存储在分片本身中的用户数据。例如，类似于 **CreateShard**、**DeleteShard**、**UpdateMapping** 等的方法仅影响分片映射元数据，而不会删除、添加或更改分片中所包含的用户数据。但是，这些方法旨在与您执行的单独操作结合使用，以创建或删除实际数据库，或者将行从一个分片移动到另一个分片，以使分片环境恢复均衡。（弹性数据库工具附带的**拆分-合并**工具将使用这些 API 并安排在分片之间移动实际数据。）\n\n## 填充分片映射：示例\n \n下面显示了用于填充特定分片映射的操作的示例序列。此代码将执行下列步骤：\n\n1. 将在分片映射管理器中创建新的分片映射。 \n2. 将两个不同分片的元数据添加到分片映射。 \n3. 将添加各种键范围映射，并且将显示分片映射的整体内容。 \n\n在遇到意外的错误时，可采用一种让整个方法重新安全运行的方式来编写代码 - 每个请求都在尝试创建分片或映射前测试其是否已存在。以下代码假定已在由字符串 **shardServer** 引用的服务器中创建名为 **sample\\_shard\\_0**、**sample\\_shard\\_1** 和 **sample\\_shard\\_2** 的数据库。\n\n    public void CreatePopulatedRangeMap(ShardMapManager smm, string mapName) \n        {            \n            RangeShardMap<long> sm = null; \n\n            // check if shardmap exists and if not, create it \n            if (!smm.TryGetRangeShardMap(mapName, out sm)) \n            { \n                sm = smm.CreateRangeShardMap<long>(mapName); \n            } \n\n            Shard shard0 = null, shard1=null; \n            // check if shard exists and if not, \n            // create it (Idempotent / tolerant of re-execute) \n            if (!sm.TryGetShard(new ShardLocation(shardServer, \"sample_shard_0\"), out shard0)) \n            { \n                Shard0 = sm.CreateShard(new ShardLocation(shardServer, \"sample_shard_0\")); \n            } \n\n            if (!sm.TryGetShard(new ShardLocation(shardServer, \"sample_shard_1\"), out shard1)) \n            { \n                Shard1 = sm.CreateShard(new ShardLocation(shardServer, \"sample_shard_1\"));  \n            } \n\n            RangeMapping<long> rmpg=null; \n\n            // Check if mapping exists and if not,\n            // create it (Idempotent / tolerant of re-execute) \n            if (!sm.TryGetMappingForKey(0, out rmpg)) \n            { \n                sm.CreateRangeMapping(new RangeMappingCreationInfo<long> \n                    (new Range<long>(0, 50), shard0, MappingStatus.Online)); \n            } \n\n            if (!sm.TryGetMappingForKey(50, out rmpg)) \n            { \n                sm.CreateRangeMapping(new RangeMappingCreationInfo<long> \n                    (new Range<long>(50, 100), shard1, MappingStatus.Online)); \n            } \n\n            if (!sm.TryGetMappingForKey(100, out rmpg)) \n            { \n                sm.CreateRangeMapping(new RangeMappingCreationInfo<long> \n                    (new Range<long>(100, 150), shard0, MappingStatus.Online)); \n            } \n\n            if (!sm.TryGetMappingForKey(150, out rmpg)) \n            { \n                sm.CreateRangeMapping(new RangeMappingCreationInfo<long> \n                    (new Range<long>(150, 200), shard1, MappingStatus.Online)); \n            } \n\n            if (!sm.TryGetMappingForKey(200, out rmpg)) \n            { \n               sm.CreateRangeMapping(new RangeMappingCreationInfo<long> \n                   (new Range<long>(200, 300), shard0, MappingStatus.Online)); \n            } \n\n            // List the shards and mappings \n            foreach (Shard s in sm.GetShards()\n                                    .OrderBy(s => s.Location.DataSource)\n                                    .ThenBy(s => s.Location.Database))\n            { \n               Console.WriteLine(\"shard: \"+ s.Location); \n            } \n\n            foreach (RangeMapping<long> rm in sm.GetMappings()) \n            { \n                Console.WriteLine(\"range: [\" + rm.Value.Low.ToString() + \":\" \n                        + rm.Value.High.ToString()+ \")  ==>\" +rm.Shard.Location); \n            } \n        } \n \n使用 PowerShell 脚本也可达到相同的结果。[此处](https://gallery.technet.microsoft.com/scriptcenter/Azure-SQL-DB-Elastic-731883db)提供了某些 PowerShell 示例。\n\n填充完分片映射后，即可创建或改编数据访问应用程序，以便使用这些映射。在需要更改**映射布局**之前，无需重新填充或操作映射。\n\n## 依赖于数据的路由 \n\n需要数据库连接的应用程序需要充分使用分片映射管理器，以执行特定于应用的数据操作。在分片应用程序中，这些连接现在必须与相应的目标数据库相关联。这称为**数据相关的路由**。对于这些应用程序，通过使用在 GSM 数据库上具有只读访问权限的凭据，实例化来自工厂的分片映射管理器对象。以后，单独的连接请求将提供连接相应分片数据库时所需的凭据。\n\n请注意，这些应用程序（使用通过具有只读权限的凭据打开的 **ShardMapManager**）将无法更改映射。为了满足这些需求，请创建特定于管理的应用程序或 PowerShell 脚本，以提供如前所述的更高级别权限的凭据。\n\n有关详细信息，请参阅[数据相关的路由](/documentation/articles/sql-database-elastic-scale-data-dependent-routing)。\n\n## 修改分片映射 \n\n可采用不同方式更改分片映射。以下所有方法都可修改用于描述分片及其映射的元数据，但这些方法不以物理方式修改分片内的数据，也不创建或删除实际数据库。下面所述的分片映射上的某些操作可能需要与以物理方式移动数据或添加和删除用作分片的数据库的管理操作进行协调。\n\n这些方法作为构建基块一同工作，以便在分片的数据库环境中修改数据的总体分发情况。\n\n* 若要添加或删除分片：请使用 **CreateShard** 和 **DeleteShard**。 \n    \n    若要执行这些操作，表示目标分片的服务器和数据库必须已经存在。这些方法不会对数据库本身产生任何影响，仅对分片映射上的元数据产生影响。\n\n* 若要创建或删除映射到分片的点或范围：请使用 **CreateRangeMapping**、**DeleteMapping**、**CreatePointMapping**。\n    \n    许多不同的点或范围可映射到相同的分片。这些方法仅影响元数据，而不会影响已显示在分片中的任何数据。如果为了与 **DeleteMapping** 操作保持一致而需要将数据从数据库中删除，你将需要单独执行这些操作，但需要结合使用这些方法。\n\n* 将现有的范围拆分为两个，或将相邻的范围合并为一个：请使用 **SplitMapping** 和 **MergeMappings**。\n\n    请注意，拆分和合并操作**不更改键值要映射到的分片**。拆分操作可将现有的范围拆分为两个部分，但在映射到相同分片时同时保留这两个部分。对在已映射到相同分片的两个相邻的范围进行合并操作，从而可将其合并到单个范围中。若要在分片之间移动点或范围本身，需要将 **UpdateMapping** 与移动的实际数据结合使用，才能进行协调。当需要移动数据时，你可以使用弹性数据库工具中随附的**拆分/合并**服务，以将分片映射的更改与数据移动相协调。\n\n* 将单独的点或范围重新映射（或移动）到不同的分片：请使用 **UpdateMapping**。\n\n    由于可能需要将数据从一个分片移动到另一个分片，以便与 **UpdateMapping** 操作保持一致，因此你将需要单独执行此移动，但需要结合使用这些方法。\n\n* 若要在联机和脱机状态下执行映射：请使用 **MarkMappingOffline** 和 **MarkMappingOnline** 来控制映射的联机状态。\n\n    仅当映射处于“脱机”状态时才允许在分片映射上进行某些操作，其中包括 **UpdateMapping** 和 **DeleteMapping**。当映射处于脱机状态时，基于该映射中所包含的键的数据依赖请求将返回一个错误。此外，当范围首次处于脱机状态时，所有到受影响的分片的连接都将自动终止，以防止因范围的更改而导致查询出现不一致或不完整的结果。\n\n映射是 .Net 中的不可变对象。以上会更改映射的所有方法也会使代码中任何对映射的引用失效。为了更轻松地执行操作序列来更改映射的状态，所有会更改映射的方法都将返回新的映射引用，以便能够链接操作。例如，若要在 shardmap sm 中删除包含索引键 25 的现有映射，可以执行以下命令：\n\n        sm.DeleteMapping(sm.MarkMappingOffline(sm.GetMappingForKey(25)));\n\n## 添加分片 \n\n对于已经存在的分片映射，应用程序通常仅需要添加新分片，以处理预期的新键或键范围数据。例如，由租户 ID 分片的应用程序可能需要为新的租户设置新分片，或者在每个新的月份开始之前，每月分片的数据可能需要设置新分片。\n\n如果新的键值范围还不是现有映射的组成部分且无需移动数据，则添加新分片以及将新的键或范围关联到该分片非常简单。有关添加新分片的详细信息，请参阅[添加新分片](/documentation/articles/sql-database-elastic-scale-add-a-shard)。\n\n但是，在需要移动数据的情况下，需要拆分/合并工具并结合使用必要的分片映射更新，才能安排在分片之间移动数据。有关使用拆分/合并工具的详细信息，请参阅[拆分/合并概述](/documentation/articles/sql-database-elastic-scale-overview-split-and-merge)\n\n[AZURE.INCLUDE [elastic-scale-include](../includes/elastic-scale-include.md)]\n \n\n<!---HONumber=Mooncake_1221_2015-->\n"
}