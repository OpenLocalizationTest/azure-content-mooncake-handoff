<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a5c8293d0ec5280ec96ab25dfe04c52317bf5416</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 CoreOS 上开始使用 Fleet | Azure</source>
          <target state="new">在 CoreOS 上开始使用 Fleet | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>提供使用经典部署模型在 Azure 上创建的 CoreOS Linux 虚拟机上使用 Fleet 和 Docker 的基本示例。</source>
          <target state="new">提供使用经典部署模型在 Azure 上创建的 CoreOS Linux 虚拟机上使用 Fleet 和 Docker 的基本示例。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 Azure 上的 CoreOS VM 群集上使用 Fleet 入门</source>
          <target state="new">在 Azure 上的 CoreOS VM 群集上使用 Fleet 入门</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-classic-include.md)</ept>]</source>
          <target state="new">[AZURE.INCLUDE <bpt id="p1">[</bpt>了解部署模型<ept id="p1">](../includes/learn-about-deployment-models-classic-include.md)</ept>]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本文提供两个在 <bpt id="p1">[</bpt><ept id="p1">CoreOS]</ept> 虚拟机的群集上使用 <bpt id="p2">[</bpt>fleet<ept id="p2">](https://github.com/coreos/fleet)</ept> 和 <bpt id="p3">[</bpt>Docker<ept id="p3">](https://www.docker.com/)</ept> 运行应用程序的快速示例。</source>
          <target state="new">本文提供两个在 <bpt id="p1">[</bpt><ept id="p1">CoreOS]</ept> 虚拟机的群集上使用 <bpt id="p2">[</bpt>fleet<ept id="p2">](https://github.com/coreos/fleet)</ept> 和 <bpt id="p3">[</bpt>Docker<ept id="p3">](https://www.docker.com/)</ept> 运行应用程序的快速示例。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>若要使用这些示例，需要先设置三节点 CoreOS 群集，如<bpt id="p1">[</bpt><ept id="p1">如何在 Azure 上使用 CoreOS]</ept> 中所述。完成该操作后，你将了解非常基本的 CoreOS 部署元素，并拥有可以工作的群集和客户端计算机。在这些示例中，我们将使用完全相同的群集名称。此外，这些示例还假定你使用本地 Linux 主机运行 <bpt id="p2">**</bpt>fleetctl<ept id="p2">**</ept> 命令。请参阅<bpt id="p3">[</bpt>使用客户端<ept id="p3">](https://coreos.com/fleet/docs/latest/using-the-client.html)</ept>，了解有关 <bpt id="p4">**</bpt>fleetctl<ept id="p4">**</ept> 客户端的详细信息。</source>
          <target state="new">若要使用这些示例，需要先设置三节点 CoreOS 群集，如<bpt id="p1">[</bpt><ept id="p1">如何在 Azure 上使用 CoreOS]</ept> 中所述。完成该操作后，你将了解非常基本的 CoreOS 部署元素，并拥有可以工作的群集和客户端计算机。在这些示例中，我们将使用完全相同的群集名称。此外，这些示例还假定你使用本地 Linux 主机运行 <bpt id="p2">**</bpt>fleetctl<ept id="p2">**</ept> 命令。请参阅<bpt id="p3">[</bpt>使用客户端<ept id="p3">](https://coreos.com/fleet/docs/latest/using-the-client.html)</ept>，了解有关 <bpt id="p4">**</bpt>fleetctl<ept id="p4">**</ept> 客户端的详细信息。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id='simple'&gt;</ph>示例 1：使用 Docker 的 Hello World<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a id='simple'&gt;</ph>示例 1：使用 Docker 的 Hello World<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>下面是一个在单个 Docker 容器中运行的简单“Hello World”应用程序。此应用程序使用 <bpt id="p1">[</bpt><ept id="p1">busybox Docker Hub 映像]</ept>。</source>
          <target state="new">下面是一个在单个 Docker 容器中运行的简单“Hello World”应用程序。此应用程序使用 <bpt id="p1">[</bpt><ept id="p1">busybox Docker Hub 映像]</ept>。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在 Linux 客户端计算机上，使用你最喜欢的文本编辑器创建以下 <bpt id="p1">**</bpt>systemd<ept id="p1">**</ept> 单元文件并将其命名为 <ph id="ph1">`helloworld.service`</ph>。（有关语法的详细信息，请参阅<bpt id="p2">[</bpt><ept id="p2">单元文件]</ept>。）</source>
          <target state="new">在 Linux 客户端计算机上，使用你最喜欢的文本编辑器创建以下 <bpt id="p1">**</bpt>systemd<ept id="p1">**</ept> 单元文件并将其命名为 <ph id="ph1">`helloworld.service`</ph>。（有关语法的详细信息，请参阅<bpt id="p2">[</bpt><ept id="p2">单元文件]</ept>。）</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>现在连接到 CoreOS 群集，并通过运行以下 <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> 命令启动单元。输出将显示单元已启动以及它所在的位置。</source>
          <target state="new">现在连接到 CoreOS 群集，并通过运行以下 <bpt id="p1">**</bpt>fleetctl<ept id="p1">**</ept> 命令启动单元。输出将显示单元已启动以及它所在的位置。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>若要运行不带 <bpt id="p1">**</bpt>--tunnel<ept id="p1">**</ept> 参数的远程 <bpt id="p2">**</bpt>fleetctl<ept id="p2">**</ept> 命令，可以选择设置 FLEETCTL\_TUNNEL 环境变量以通过隧道传送请求。例如：<ph id="ph2">`export FLEETCTL_TUNNEL=coreos-cluster.chinacloudapp.cn:22`</ph>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>若要运行不带 <bpt id="p1">**</bpt>--tunnel<ept id="p1">**</ept> 参数的远程 <bpt id="p2">**</bpt>fleetctl<ept id="p2">**</ept> 命令，可以选择设置 FLEETCTL\_TUNNEL 环境变量以通过隧道传送请求。例如：<ph id="ph2">`export FLEETCTL_TUNNEL=coreos-cluster.chinacloudapp.cn:22`</ph>。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>你可以连接到容器，以查看服务的输出：</source>
          <target state="new">你可以连接到容器，以查看服务的输出：</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>若要清理，请停止并卸载单元。</source>
          <target state="new">若要清理，请停止并卸载单元。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id='highavail'&gt;</ph>示例 2：高度可用的 nginx 服务器<ph id="ph2">&lt;/a&gt;</ph></source>
          <target state="new"><ph id="ph1">&lt;a id='highavail'&gt;</ph>示例 2：高度可用的 nginx 服务器<ph id="ph2">&lt;/a&gt;</ph></target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>使用 CoreOS、Docker 和 <bpt id="p1">**</bpt>fleet<ept id="p1">**</ept> 的一个优点是很容易以高度可用的方式运行服务。在此示例中，你将部署一个由三个运行 nginx Web 服务器的相同容器组成的服务。这些容器将在群集中的三个虚拟机上运行。此示例类似于<bpt id="p2">[</bpt><ept id="p2">使用 fleet 启动容器]</ept>中的示例，并使用 <bpt id="p3">[</bpt><ept id="p3">nginx Docker Hub 映像]</ept>。</source>
          <target state="new">使用 CoreOS、Docker 和 <bpt id="p1">**</bpt>fleet<ept id="p1">**</ept> 的一个优点是很容易以高度可用的方式运行服务。在此示例中，你将部署一个由三个运行 nginx Web 服务器的相同容器组成的服务。这些容器将在群集中的三个虚拟机上运行。此示例类似于<bpt id="p2">[</bpt><ept id="p2">使用 fleet 启动容器]</ept>中的示例，并使用 <bpt id="p3">[</bpt><ept id="p3">nginx Docker Hub 映像]</ept>。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph>若要运行高度可用的 Web 服务器，需要在虚拟机（公共端口 80、专用端口 80）上配置负载平衡 HTTP 终结点。你可以在创建 CoreOS 群集后，使用 Azure 门户或 <bpt id="p1">**</bpt>azure vm endpoint<ept id="p1">**</ept> 命令执行此操作。有关详细信息，请参阅<bpt id="p2">[</bpt><ept id="p2">配置负载平衡集]</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph>若要运行高度可用的 Web 服务器，需要在虚拟机（公共端口 80、专用端口 80）上配置负载平衡 HTTP 终结点。你可以在创建 CoreOS 群集后，使用 Azure 门户或 <bpt id="p1">**</bpt>azure vm endpoint<ept id="p1">**</ept> 命令执行此操作。有关详细信息，请参阅<bpt id="p2">[</bpt><ept id="p2">配置负载平衡集]</ept>。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>在客户端计算机上，使用你最喜欢的文本编辑器创建名为 nginx@.service 的 <bpt id="p1">**</bpt>systemd<ept id="p1">**</ept> 模板单元文件。你将使用这个简单的模板来启动名为 nginx@1.service、nginx@2.service 和 nginx@3.service 的三个单独实例：</source>
          <target state="new">在客户端计算机上，使用你最喜欢的文本编辑器创建名为 nginx@.service 的 <bpt id="p1">**</bpt>systemd<ept id="p1">**</ept> 模板单元文件。你将使用这个简单的模板来启动名为 nginx@1.service、nginx@2.service 和 nginx@3.service 的三个单独实例：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph><ph id="ph2">`X-Conflicts`</ph> 属性告知 CoreOS 只有此容器的一个实例可以在给定的 CoreOS 主机上运行。有关详细信息，请参阅<bpt id="p1">[</bpt><ept id="p1">单元文件]</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph><ph id="ph2">`X-Conflicts`</ph> 属性告知 CoreOS 只有此容器的一个实例可以在给定的 CoreOS 主机上运行。有关详细信息，请参阅<bpt id="p1">[</bpt><ept id="p1">单元文件]</ept>。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>现在启动 CoreOS 群集中的单元实例。你应看到这三个实例在三个不同的计算机上运行：</source>
          <target state="new">现在启动 CoreOS 群集中的单元实例。你应看到这三个实例在三个不同的计算机上运行：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>若要访问运行其中一个单元的 Web 服务器，请向托管 CoreOS 群集的云服务发送一个简单请求。</source>
          <target state="new">若要访问运行其中一个单元的 Web 服务器，请向托管 CoreOS 群集的云服务发送一个简单请求。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>你将看到从 nginx 服务器返回的默认文本类似于：</source>
          <target state="new">你将看到从 nginx 服务器返回的默认文本类似于：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>你可以尝试关闭群集中的一个或多个虚拟机，以验证 Web 服务是否继续运行。</source>
          <target state="new">你可以尝试关闭群集中的一个或多个虚拟机，以验证 Web 服务是否继续运行。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>完成后，请停止并卸载单元。</source>
          <target state="new">完成后，请停止并卸载单元。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>你可以尝试使用 Azure 上的三节点 CoreOS 群集执行更多操作。通过阅读 <bpt id="p1">[</bpt><ept id="p1">Tim Park 的 CoreOS 教程]</ept>、<bpt id="p2">[</bpt><ept id="p2">Patrick Chanezon 的 CoreOS 教程]</ept>、<bpt id="p3">[</bpt><ept id="p3">Docker]</ept> 文档和 <bpt id="p4">[</bpt><ept id="p4">CoreOS 概述]</ept>，探索如何创建更复杂的群集、使用 Docker 和创建更有趣的应用程序。</source>
          <target state="new">你可以尝试使用 Azure 上的三节点 CoreOS 群集执行更多操作。通过阅读 <bpt id="p1">[</bpt><ept id="p1">Tim Park 的 CoreOS 教程]</ept>、<bpt id="p2">[</bpt><ept id="p2">Patrick Chanezon 的 CoreOS 教程]</ept>、<bpt id="p3">[</bpt><ept id="p3">Docker]</ept> 文档和 <bpt id="p4">[</bpt><ept id="p4">CoreOS 概述]</ept>，探索如何创建更复杂的群集、使用 Docker 和创建更有趣的应用程序。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>请参阅 <bpt id="p1">[</bpt><ept id="p1">Azure 上的 Linux 和开源计算]</ept>，了解有关在 Azure 中的 Linux VM 上使用开源环境的详细信息。</source>
          <target state="new">请参阅 <bpt id="p1">[</bpt><ept id="p1">Azure 上的 Linux 和开源计算]</ept>，了解有关在 Azure 中的 Linux VM 上使用开源环境的详细信息。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>