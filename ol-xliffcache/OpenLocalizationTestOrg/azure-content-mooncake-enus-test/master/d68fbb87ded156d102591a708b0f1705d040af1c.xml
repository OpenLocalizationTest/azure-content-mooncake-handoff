{
  "nodes": [
    {
      "content": "使用通知中心发送突发新闻 (Windows Phone)",
      "pos": [
        27,
        55
      ]
    },
    {
      "content": "通过 Azure 通知中心使用注册中的标记将突发新闻发送到 Windows Phone 应用。",
      "pos": [
        74,
        121
      ]
    },
    {
      "content": "使用通知中心发送突发新闻",
      "pos": [
        352,
        364
      ]
    },
    {
      "content": "概述",
      "pos": [
        486,
        488
      ]
    },
    {
      "pos": [
        490,
        813
      ],
      "content": "本主题演示如何使用 Azure 通知中心将突发新闻通知广播到 Windows Phone 8.0/8.1 Silverlight 应用。如果你要以 Windows 应用商店或 Phone 8.1 应用为目标，请参阅 <bpt id=\"p1\">[</bpt>Windows Universal<ept id=\"p1\">](/documentation/articles/notification-hubs-windows-store-dotnet-send-breaking-news)</ept> 版本。完成时，你可以注册感兴趣的突发新闻类别并仅接收这些类别的推送通知。此方案对于很多应用程序来说是常见模式，在其中必须将通知发送到以前声明过对它们感兴趣的一组用户，这样的应用程序有 RSS 阅读器、针对音乐迷的应用程序等。"
    },
    {
      "pos": [
        815,
        918
      ],
      "content": "在创建通知中心的注册时，通过加入一个或多个<bpt id=\"p1\">_</bpt>标记<ept id=\"p1\">_</ept>来启用广播方案。将通知发送到标签时，已注册该标签的所有设备将接收通知。因为标签是简单的字符串，它们不必提前设置。有关标记的详细信息，请参阅<bpt id=\"p2\">[</bpt><ept id=\"p2\">通知中心指南]</ept>。"
    },
    {
      "content": "先决条件",
      "pos": [
        922,
        926
      ]
    },
    {
      "pos": [
        928,
        977
      ],
      "content": "本主题以你在<bpt id=\"p1\">[</bpt><ept id=\"p1\">通知中心入门]</ept>中创建的应用程序为基础。在开始本教程之前，必须先阅读<bpt id=\"p2\">[</bpt><ept id=\"p2\">通知中心入门]</ept>。"
    },
    {
      "pos": [
        981,
        1025
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"adding-categories\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>向应用程序中添加类别选择"
    },
    {
      "content": "第一步是向现有主页添加 UI 元素，这些元素允许用户选择要注册的类别。用户选择的类别存储在设备上。应用程序启动时，使用所选类别作为标签在你的通知中心创建设备注册。",
      "pos": [
        1027,
        1108
      ]
    },
    {
      "pos": [
        1113,
        1192
      ],
      "content": "打开 MainPage.xaml 项目文件，然后使用以下代码替换名为 <ph id=\"ph1\">`TitlePanel`</ph> 和 <ph id=\"ph2\">`ContentPanel`</ph> 的 <bpt id=\"p1\">**</bpt>Grid<ept id=\"p1\">**</ept> 元素："
    },
    {
      "pos": [
        2748,
        2831
      ],
      "content": "在该项目中，创建名为 <bpt id=\"p1\">**</bpt>Notifications<ept id=\"p1\">**</ept> 的新类，向类定义添加 <bpt id=\"p2\">**</bpt>public<ept id=\"p2\">**</ept> 修饰符，然后将以下 <bpt id=\"p3\">**</bpt>using<ept id=\"p3\">**</ept> 语句添加到新的代码文件："
    },
    {
      "pos": [
        3000,
        3031
      ],
      "content": "将以下代码添加到新的 <bpt id=\"p1\">**</bpt>Notifications<ept id=\"p1\">**</ept> 类："
    },
    {
      "pos": [
        7741,
        7823
      ],
      "content": "此类使用隔离存储区存储此设备要接收的新闻类别。它还包含用于通过<bpt id=\"p1\">[</bpt>模板<ept id=\"p1\">](notification-hubs-templates.md)</ept>通知注册来注册这些类别的方法。"
    },
    {
      "pos": [
        7829,
        7989
      ],
      "content": "在 App.xaml.cs 项目文件中，将以下属性添加到 <bpt id=\"p1\">**</bpt>App<ept id=\"p1\">**</ept> 类：将 <ph id=\"ph1\">`&lt;hub name&gt;`</ph> 和 <ph id=\"ph2\">`&lt;connection string with listen access&gt;`</ph> 占位符替换为通知中心名称和前面获取的 <bpt id=\"p2\">*</bpt>DefaultListenSharedAccessSignature<ept id=\"p2\">*</ept> 的连接字符串。"
    },
    {
      "pos": [
        8118,
        8251
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>由于使用客户端应用程序分发的凭据通常是不安全的，你只应使用客户端应用程序分发具有侦听访问权限的密钥。侦听访问权限允许应用程序注册通知，但是无法修改现有注册，也无法发送通知。在受保护的后端服务中使用完全访问权限密钥，以便发送通知和更改现有注册。"
    },
    {
      "content": "在 MainPage.xaml.cs 中，添加以下行：",
      "pos": [
        8256,
        8283
      ]
    },
    {
      "content": "在 MainPage.xaml.cs 项目文件中，添加以下方法：",
      "pos": [
        8322,
        8354
      ]
    },
    {
      "pos": [
        9236,
        9318
      ],
      "content": "此方法创建一个类别列表并使用 <bpt id=\"p1\">**</bpt>Notifications<ept id=\"p1\">**</ept> 类将该列表存储在本地存储区中，将相应的标签注册到你的通知中心。更改类别时，使用新类别重新创建注册。"
    },
    {
      "content": "你的应用程序现在可以将一组类别存储在设备的本地存储区中了，每当用户更改所选类别时，会将这些类别注册到通知中心。",
      "pos": [
        9320,
        9375
      ]
    },
    {
      "pos": [
        9379,
        9406
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"register\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>注册通知"
    },
    {
      "content": "这些步骤用于在启动时将在本地存储区中存储的类别注册到通知中心。",
      "pos": [
        9408,
        9439
      ]
    },
    {
      "pos": [
        9443,
        9584
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>由于 Microsoft 推送通知服务 (MPNS) 分配的通道 URI 随时可能更改，因此你应该经常注册通知以避免通知失败。此示例在每次应用程序启动时注册通知。对于经常运行（一天一次以上）的应用程序，如果每次注册间隔时间不到一天，你可以跳过注册来节省带宽。"
    },
    {
      "pos": [
        9590,
        9689
      ],
      "content": "打开 App.xaml.cs 文件，将 <bpt id=\"p1\">**</bpt>async<ept id=\"p1\">**</ept> 修饰符添加到 <bpt id=\"p2\">**</bpt>Application\\_Launching<ept id=\"p2\">**</ept> 方法，并将你在<bpt id=\"p3\">[</bpt><ept id=\"p3\">通知中心入门]</ept>中添加的通知中心注册代码替换为以下代码："
    },
    {
      "content": "这确保每次应用程序启动时，它从本地存储区检索类别并请求注册这些类别。",
      "pos": [
        10139,
        10173
      ]
    },
    {
      "pos": [
        10178,
        10234
      ],
      "content": "在 MainPage.xaml.cs 项目文件中，添加实现 <bpt id=\"p1\">**</bpt>OnNavigatedTo<ept id=\"p1\">**</ept> 方法的以下代码："
    },
    {
      "content": "这基于以前保存的类别状态更新主页。",
      "pos": [
        10927,
        10944
      ]
    },
    {
      "content": "应用程序现在已完成，可以在设备的本地存储区中存储一组类别了，每当用户更改所选类别时将使用这些类别注册到通知中心。接下来，我们将定义一个后端，它可将类别通知发送到此应用程序。",
      "pos": [
        10946,
        11032
      ]
    },
    {
      "content": "发送带标记的通知",
      "pos": [
        11036,
        11044
      ]
    },
    {
      "pos": [
        11169,
        11201
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"test-app\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>运行应用并生成通知"
    },
    {
      "content": "在 Visual Studio 中，按 F5 编译并启动应用程序。",
      "pos": [
        11206,
        11239
      ]
    },
    {
      "content": "请注意，应用程序 UI 提供了一组开关，你可以使用它们选择要订阅的类别。",
      "pos": [
        11257,
        11293
      ]
    },
    {
      "content": "启用一个或多个类别开关，然后单击“订阅”。",
      "pos": [
        11298,
        11319
      ]
    },
    {
      "content": "应用程序将所选类别转换为标签并针对所选标签从通知中心请求注册新设备。返回注册的类别并显示在对话框中。",
      "pos": [
        11325,
        11375
      ]
    },
    {
      "content": "收到类别订阅已完成的确认消息后，运行控制台应用以发送每个类别的通知。确认你只会收到订阅的类别的通知。",
      "pos": [
        11392,
        11442
      ]
    },
    {
      "content": "你已完成本主题。",
      "pos": [
        11456,
        11464
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"使用通知中心发送突发新闻 (Windows Phone)\"\n    description=\"通过 Azure 通知中心使用注册中的标记将突发新闻发送到 Windows Phone 应用。\"\n    services=\"notification-hubs\"\n    documentationCenter=\"windows\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"12/15/2015\" \n    wacn.date=\"01/14/2016\" />\n\n# 使用通知中心发送突发新闻\n\n[AZURE.INCLUDE [notification-hubs-selector-breaking-news](../includes/notification-hubs-selector-breaking-news.md)]\n\n\n##概述\n\n本主题演示如何使用 Azure 通知中心将突发新闻通知广播到 Windows Phone 8.0/8.1 Silverlight 应用。如果你要以 Windows 应用商店或 Phone 8.1 应用为目标，请参阅 [Windows Universal](/documentation/articles/notification-hubs-windows-store-dotnet-send-breaking-news) 版本。完成时，你可以注册感兴趣的突发新闻类别并仅接收这些类别的推送通知。此方案对于很多应用程序来说是常见模式，在其中必须将通知发送到以前声明过对它们感兴趣的一组用户，这样的应用程序有 RSS 阅读器、针对音乐迷的应用程序等。\n\n在创建通知中心的注册时，通过加入一个或多个_标记_来启用广播方案。将通知发送到标签时，已注册该标签的所有设备将接收通知。因为标签是简单的字符串，它们不必提前设置。有关标记的详细信息，请参阅[通知中心指南]。\n\n##先决条件\n\n本主题以你在[通知中心入门]中创建的应用程序为基础。在开始本教程之前，必须先阅读[通知中心入门]。\n\n##<a name=\"adding-categories\"></a>向应用程序中添加类别选择\n\n第一步是向现有主页添加 UI 元素，这些元素允许用户选择要注册的类别。用户选择的类别存储在设备上。应用程序启动时，使用所选类别作为标签在你的通知中心创建设备注册。\n\n1. 打开 MainPage.xaml 项目文件，然后使用以下代码替换名为 `TitlePanel` 和 `ContentPanel` 的 **Grid** 元素：\n            \n        <StackPanel x:Name=\"TitlePanel\" Grid.Row=\"0\" Margin=\"12,17,0,28\">\n            <TextBlock Text=\"Breaking News\" Style=\"{StaticResource PhoneTextNormalStyle}\" Margin=\"12,0\"/>\n            <TextBlock Text=\"Categories\" Margin=\"9,-7,0,0\" Style=\"{StaticResource PhoneTextTitle1Style}\"/>\n        </StackPanel>\n\n        <Grid Name=\"ContentPanel\" Grid.Row=\"1\" Margin=\"12,0,12,0\">\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"auto\"/>\n                <RowDefinition Height=\"auto\" />\n                <RowDefinition Height=\"auto\" />\n                <RowDefinition Height=\"auto\" />\n            </Grid.RowDefinitions>\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition />\n                <ColumnDefinition />\n            </Grid.ColumnDefinitions>\n            <CheckBox Name=\"WorldCheckBox\" Grid.Row=\"0\" Grid.Column=\"0\">World</CheckBox>\n            <CheckBox Name=\"PoliticsCheckBox\" Grid.Row=\"1\" Grid.Column=\"0\">Politics</CheckBox>\n            <CheckBox Name=\"BusinessCheckBox\" Grid.Row=\"2\" Grid.Column=\"0\">Business</CheckBox>\n            <CheckBox Name=\"TechnologyCheckBox\" Grid.Row=\"0\" Grid.Column=\"1\">Technology</CheckBox>\n            <CheckBox Name=\"ScienceCheckBox\" Grid.Row=\"1\" Grid.Column=\"1\">Science</CheckBox>\n            <CheckBox Name=\"SportsCheckBox\" Grid.Row=\"2\" Grid.Column=\"1\">Sports</CheckBox>\n            <Button Name=\"SubscribeButton\" Content=\"Subscribe\" HorizontalAlignment=\"Center\" Grid.Row=\"3\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\" Click=\"SubscribeButton_Click\" />\n        </Grid>\n\n2. 在该项目中，创建名为 **Notifications** 的新类，向类定义添加 **public** 修饰符，然后将以下 **using** 语句添加到新的代码文件：\n\n        using Microsoft.Phone.Notification;\n        using Microsoft.WindowsAzure.Messaging;\n        using System.IO.IsolatedStorage;\n        using System.Windows;\n\n3. 将以下代码添加到新的 **Notifications** 类：\n\n        private NotificationHub hub;\n\n        // Registration task to complete registration in the ChannelUriUpdated event handler\n        private TaskCompletionSource<Registration> registrationTask;\n\n        public Notifications(string hubName, string listenConnectionString)\n        {\n            hub = new NotificationHub(hubName, listenConnectionString);\n        }\n\n        public IEnumerable<string> RetrieveCategories()\n        {\n            var categories = (string)IsolatedStorageSettings.ApplicationSettings[\"categories\"];\n            return categories != null ? categories.Split(',') : new string[0];\n        }\n\n        public async Task<Registration> StoreCategoriesAndSubscribe(IEnumerable<string> categories)\n        {\n            var categoriesAsString = string.Join(\",\", categories);\n            var settings = IsolatedStorageSettings.ApplicationSettings;\n            if (!settings.Contains(\"categories\"))\n            {\n                settings.Add(\"categories\", categoriesAsString);\n            }\n            else\n            {\n                settings[\"categories\"] = categoriesAsString;\n            }\n            settings.Save();\n\n            return await SubscribeToCategories();\n        }\n\n        public async Task<Registration> SubscribeToCategories()\n        {\n            registrationTask = new TaskCompletionSource<Registration>();\n\n            var channel = HttpNotificationChannel.Find(\"MyPushChannel\");\n\n            if (channel == null)\n            {\n                channel = new HttpNotificationChannel(\"MyPushChannel\");\n                channel.Open();\n                channel.BindToShellToast();\n                channel.ChannelUriUpdated += channel_ChannelUriUpdated;\n\n                // This is optional, used to receive notifications while the app is running.\n                channel.ShellToastNotificationReceived += channel_ShellToastNotificationReceived;\n            }\n\n            // If channel.ChannelUri is not null, we will complete the registrationTask here.  \n            // If it is null, the registrationTask will be completed in the ChannelUriUpdated event handler.\n            if (channel.ChannelUri != null)\n            {\n                await RegisterTemplate(channel.ChannelUri);\n            }\n            \n            return await registrationTask.Task;\n        }\n\n        async void channel_ChannelUriUpdated(object sender, NotificationChannelUriEventArgs e)\n        {\n            await RegisterTemplate(e.ChannelUri);\n        }\n\n        async Task<Registration> RegisterTemplate(Uri channelUri)\n        {\n            // Using a template registration to support notifications across platforms.\n            // Any template notifications that contain messageParam and a corresponding tag expression\n            // will be delivered for this registration.\n\n            const string templateBodyMPNS = \"<wp:Notification xmlns:wp=\"WPNotification\">\" +\n                                                \"<wp:Toast>\" +\n                                                    \"<wp:Text1>$(messageParam)</wp:Text1>\" +\n                                                \"</wp:Toast>\" +\n                                            \"</wp:Notification>\";\n\n            // The stored categories tags are passed with the template registration.\n\n            registrationTask.SetResult(await hub.RegisterTemplateAsync(channelUri.ToString(), \n                templateBodyMPNS, \"simpleMPNSTemplateExample\", this.RetrieveCategories()));\n\n            return await registrationTask.Task;\n        }\n\n        // This is optional. It is used to receive notifications while the app is running.\n        void channel_ShellToastNotificationReceived(object sender, NotificationEventArgs e)\n        {\n            StringBuilder message = new StringBuilder();\n            string relativeUri = string.Empty;\n\n            message.AppendFormat(\"Received Toast {0}:\\n\", DateTime.Now.ToShortTimeString());\n\n            // Parse out the information that was part of the message.\n            foreach (string key in e.Collection.Keys)\n            {\n                message.AppendFormat(\"{0}: {1}\\n\", key, e.Collection[key]);\n\n                if (string.Compare(\n                    key,\n                    \"wp:Param\",\n                    System.Globalization.CultureInfo.InvariantCulture,\n                    System.Globalization.CompareOptions.IgnoreCase) == 0)\n                {\n                    relativeUri = e.Collection[key];\n                }\n            }\n\n            // Display a dialog of all the fields in the toast.\n            System.Windows.Deployment.Current.Dispatcher.BeginInvoke(() => \n            { \n                MessageBox.Show(message.ToString()); \n            });\n        }\n\n\n    此类使用隔离存储区存储此设备要接收的新闻类别。它还包含用于通过[模板](notification-hubs-templates.md)通知注册来注册这些类别的方法。\n\n\n4. 在 App.xaml.cs 项目文件中，将以下属性添加到 **App** 类：将 `<hub name>` 和 `<connection string with listen access>` 占位符替换为通知中心名称和前面获取的 *DefaultListenSharedAccessSignature* 的连接字符串。\n\n        public Notifications notifications = new Notifications(\"<hub name>\", \"<connection string with listen access>\");\n\n    > [AZURE.NOTE]由于使用客户端应用程序分发的凭据通常是不安全的，你只应使用客户端应用程序分发具有侦听访问权限的密钥。侦听访问权限允许应用程序注册通知，但是无法修改现有注册，也无法发送通知。在受保护的后端服务中使用完全访问权限密钥，以便发送通知和更改现有注册。\n\n5. 在 MainPage.xaml.cs 中，添加以下行：\n\n        using Windows.UI.Popups;\n\n6. 在 MainPage.xaml.cs 项目文件中，添加以下方法：\n\n        private async void SubscribeButton_Click(object sender, RoutedEventArgs e)\n        {\n          var categories = new HashSet<string>();\n          if (WorldCheckBox.IsChecked == true) categories.Add(\"World\");\n          if (PoliticsCheckBox.IsChecked == true) categories.Add(\"Politics\");\n          if (BusinessCheckBox.IsChecked == true) categories.Add(\"Business\");\n          if (TechnologyCheckBox.IsChecked == true) categories.Add(\"Technology\");\n          if (ScienceCheckBox.IsChecked == true) categories.Add(\"Science\");\n          if (SportsCheckBox.IsChecked == true) categories.Add(\"Sports\");\n    \n          var result = await ((App)Application.Current).notifications.StoreCategoriesAndSubscribe(categories);\n    \n          MessageBox.Show(\"Subscribed to: \" + string.Join(\",\", categories) + \" on registration id : \" +\n             result.RegistrationId);\n        }\n\n    此方法创建一个类别列表并使用 **Notifications** 类将该列表存储在本地存储区中，将相应的标签注册到你的通知中心。更改类别时，使用新类别重新创建注册。\n\n你的应用程序现在可以将一组类别存储在设备的本地存储区中了，每当用户更改所选类别时，会将这些类别注册到通知中心。\n\n##<a name=\"register\"></a>注册通知\n\n这些步骤用于在启动时将在本地存储区中存储的类别注册到通知中心。\n\n> [AZURE.NOTE]由于 Microsoft 推送通知服务 (MPNS) 分配的通道 URI 随时可能更改，因此你应该经常注册通知以避免通知失败。此示例在每次应用程序启动时注册通知。对于经常运行（一天一次以上）的应用程序，如果每次注册间隔时间不到一天，你可以跳过注册来节省带宽。\n\n\n1. 打开 App.xaml.cs 文件，将 **async** 修饰符添加到 **Application\\_Launching** 方法，并将你在[通知中心入门]中添加的通知中心注册代码替换为以下代码：\n\n        private async void Application_Launching(object sender, LaunchingEventArgs e)\n        {\n            var result = await notifications.SubscribeToCategories();\n\n            if (result != null)\n                System.Windows.Deployment.Current.Dispatcher.BeginInvoke(() =>\n                {\n                    MessageBox.Show(\"Registration Id :\" + result.RegistrationId, \"Registered\", MessageBoxButton.OK);\n                });\n        }\n\n    这确保每次应用程序启动时，它从本地存储区检索类别并请求注册这些类别。\n\n2. 在 MainPage.xaml.cs 项目文件中，添加实现 **OnNavigatedTo** 方法的以下代码：\n\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            var categories = ((App)Application.Current).notifications.RetrieveCategories();\n        \n            if (categories.Contains(\"World\")) WorldCheckBox.IsChecked = true;\n            if (categories.Contains(\"Politics\")) PoliticsCheckBox.IsChecked = true;\n            if (categories.Contains(\"Business\")) BusinessCheckBox.IsChecked = true;\n            if (categories.Contains(\"Technology\")) TechnologyCheckBox.IsChecked = true;\n            if (categories.Contains(\"Science\")) ScienceCheckBox.IsChecked = true;\n            if (categories.Contains(\"Sports\")) SportsCheckBox.IsChecked = true;\n        }\n\n    这基于以前保存的类别状态更新主页。\n\n应用程序现在已完成，可以在设备的本地存储区中存储一组类别了，每当用户更改所选类别时将使用这些类别注册到通知中心。接下来，我们将定义一个后端，它可将类别通知发送到此应用程序。\n\n##发送带标记的通知\n\n[AZURE.INCLUDE [notification-hubs-send-categories-template](../includes/notification-hubs-send-categories-template.md)]\n\n##<a name=\"test-app\"></a>运行应用并生成通知\n\n1. 在 Visual Studio 中，按 F5 编译并启动应用程序。\n\n    ![][1]\n\n    请注意，应用程序 UI 提供了一组开关，你可以使用它们选择要订阅的类别。\n\n2. 启用一个或多个类别开关，然后单击“订阅”。\n\n    应用程序将所选类别转换为标签并针对所选标签从通知中心请求注册新设备。返回注册的类别并显示在对话框中。\n\n    ![][2]\n\n3. 收到类别订阅已完成的确认消息后，运行控制台应用以发送每个类别的通知。确认你只会收到订阅的类别的通知。\n\n    ![][3]\n\n你已完成本主题。\n\n\n<!-- Anchors. -->\n[向应用程序中添加类别选择]: #adding-categories\n[注册通知]: #register\n[从后端发送通知]: #send\n[运行应用并生成通知]: #test-app\n[Next Steps]: #next-steps\n\n<!-- Images. -->\n[1]: ./media/notification-hubs-windows-phone-send-breaking-news/notification-hub-breakingnews.png\n[2]: ./media/notification-hubs-windows-phone-send-breaking-news/notification-hub-registration.png\n[3]: ./media/notification-hubs-windows-phone-send-breaking-news/notification-hub-toast.png\n\n\n\n<!-- URLs.-->\n[通知中心入门]: /documentation/articles/notification-hubs-windows-phone-get-started\n[Use Notification Hubs to broadcast localized breaking news]: ./breakingnews-localized-wp8.md\n[Notify users with Notification Hubs]: /documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-push-notifications-app-users/\n[Mobile Service]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started/\n[通知中心指南]: http://msdn.microsoft.com/zh-cn/library/jj927170.aspx\n\n[Azure Management Portal]: https://manage.windowsazure.cn/\n\n<!---HONumber=Mooncake_0104_2016-->"
}