{
  "nodes": [
    {
      "content": "在 Azure 上运行 MariaDB (MySQL) 群集",
      "pos": [
        23,
        53
      ]
    },
    {
      "content": "在 Azure 虚拟机上创建 MariaDB + Galera MySQL 群集",
      "pos": [
        68,
        108
      ]
    },
    {
      "content": "MariaDB (MySQL) 群集 - Azure 教程",
      "pos": [
        321,
        350
      ]
    },
    {
      "content": "我们正在创建的是 <bpt id=\"p1\">[</bpt><ept id=\"p1\">MariaDB](https://mariadb.org/en/about/)</ept> 的多主机 <bpt id=\"p2\">[</bpt><ept id=\"p2\">Galera](http://galeracluster.com/products/)</ept> 群集，这是 MySQL 的嵌入式替代版本，具有稳健性、可扩展性和可靠性，可在 Azure 虚拟机上的高度可用环境中使用。",
      "pos": [
        355,
        515
      ]
    },
    {
      "content": "体系结构概述",
      "pos": [
        524,
        530
      ]
    },
    {
      "content": "本主题中将执行下列步骤：",
      "pos": [
        532,
        544
      ]
    },
    {
      "content": "创建包含 3 个节点的群集",
      "pos": [
        549,
        562
      ]
    },
    {
      "content": "将数据磁盘与操作系统磁盘隔离开来",
      "pos": [
        566,
        582
      ]
    },
    {
      "content": "在 RAID-0/条带化设置下创建数据磁盘，以提高 IOPS",
      "pos": [
        586,
        616
      ]
    },
    {
      "content": "使用 Azure 负载平衡器，以使 3 个节点的负载保持平衡",
      "pos": [
        620,
        650
      ]
    },
    {
      "content": "为了最大程度地减少重复工作，可创建一个包含 MariaDB+Galera 的 VM 映像，并将其用于创建其他群集 VM。",
      "pos": [
        654,
        714
      ]
    },
    {
      "content": "体系结构",
      "pos": [
        718,
        722
      ]
    },
    {
      "pos": [
        779,
        943
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本主题将使用 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure CLI]</ept> 工具，所以请确保下载这些工具，并根据说明将其连接到你的 Azure 订阅。如果你需要对 Azure CLI 中可用命令的参考，可单击此链接以查看 <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure CLI 命令参考]</ept>。你还将需要<bpt id=\"p3\">[</bpt><ept id=\"p3\">创建用于身份验证的 SSH 密钥]</ept>，并记下 <bpt id=\"p4\">**</bpt>.pem 文件的位置<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "创建模板",
      "pos": [
        949,
        953
      ]
    },
    {
      "content": "基础结构",
      "pos": [
        959,
        963
      ]
    },
    {
      "content": "创建地缘组，以将资源保存在一起",
      "pos": [
        968,
        983
      ]
    },
    {
      "content": "创建虚拟网络",
      "pos": [
        1108,
        1114
      ]
    },
    {
      "content": "创建存储帐户，以保存所有磁盘。请注意，不要将超过 40 个常用磁盘放置在同一存储帐户上，以免达到存储帐户的 20,000 IOPS 上限。在本例中，我们的磁盘数量远低于这个数字，所以为了简单起见，我们将所有磁盘都存储在同一帐户上。",
      "pos": [
        1298,
        1413
      ]
    },
    {
      "content": "查找 CentOS 7 虚拟机映像的名称",
      "pos": [
        1526,
        1546
      ]
    },
    {
      "pos": [
        1601,
        1687
      ],
      "content": "该输出将如 <ph id=\"ph1\">`5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-70-20140926`</ph> 所示。在以下步骤中使用该名称。"
    },
    {
      "pos": [
        1692,
        1750
      ],
      "content": "创建 VM 模板，将 <bpt id=\"p1\">**</bpt>/path/to/key.pem<ept id=\"p1\">**</ept> 替换为已生成的 .pem SSH 密钥的存储位置路径"
    },
    {
      "content": "将 4 个 500GB 的数据磁盘附加到 VM，以便在 RAID 配置中使用",
      "pos": [
        2102,
        2140
      ]
    },
    {
      "pos": [
        2317,
        2391
      ],
      "content": "通过 SSH 登录到你在 <bpt id=\"p1\">**</bpt>mariadbhatemplate.chinacloudapp.cn:22<ept id=\"p1\">**</ept> 创建的模板 VM，并使用私钥进行连接。"
    },
    {
      "content": "软件",
      "pos": [
        2397,
        2399
      ]
    },
    {
      "content": "获取根",
      "pos": [
        2404,
        2407
      ]
    },
    {
      "content": "安装 RAID 支持：",
      "pos": [
        2437,
        2448
      ]
    },
    {
      "content": "安装 mdadm",
      "pos": [
        2457,
        2465
      ]
    },
    {
      "content": "创建具有 EXT4 文件系统的 RAID0/条带化配置",
      "pos": [
        2533,
        2560
      ]
    },
    {
      "content": "创建装入点目录",
      "pos": [
        2800,
        2807
      ]
    },
    {
      "content": "检索新创建的 RAID 设备的 UUID",
      "pos": [
        2874,
        2894
      ]
    },
    {
      "content": "编辑 /etc/fstab",
      "pos": [
        2954,
        2967
      ]
    },
    {
      "pos": [
        3023,
        3078
      ],
      "content": "将设备添加到此位置，以便在重新启动时自动安装，并将 UUID 替换为之前从 <bpt id=\"p1\">**</bpt>blkid<ept id=\"p1\">**</ept> 命令中获取的值"
    },
    {
      "content": "装载新分区",
      "pos": [
        3192,
        3197
      ]
    },
    {
      "content": "安装 MariaDB：",
      "pos": [
        3255,
        3266
      ]
    },
    {
      "content": "创建 MariaDB.repo 文件：",
      "pos": [
        3283,
        3302
      ]
    },
    {
      "content": "在其中填充以下内容",
      "pos": [
        3378,
        3387
      ]
    },
    {
      "content": "删除现有后缀和 mariadb-libs，以免产生冲突",
      "pos": [
        3628,
        3655
      ]
    },
    {
      "content": "安装包含 Galera 的 MariaDB",
      "pos": [
        3727,
        3748
      ]
    },
    {
      "content": "将 MySQL 数据目录移动到 RAID 块设备",
      "pos": [
        3829,
        3853
      ]
    },
    {
      "content": "将当前 MySQL 目录复制到其新位置，然后删除旧目录",
      "pos": [
        3862,
        3889
      ]
    },
    {
      "content": "相应地设置新目录上的权限",
      "pos": [
        3990,
        4002
      ]
    },
    {
      "content": "创建一个符号链接，将旧目录指向 RAID 分区上的新位置",
      "pos": [
        4104,
        4132
      ]
    },
    {
      "pos": [
        4194,
        4350
      ],
      "content": "<bpt id=\"p1\">[</bpt>SELinux 会干扰群集操作<ept id=\"p1\">](http://galeracluster.com/documentation-webpages/configuration.html#selinux)</ept>，所以在当前会话中有必要将其禁用（直到兼容版本出现）。编辑 <ph id=\"ph1\">`/etc/selinux/config`</ph> 以禁止其后续重新启动："
    },
    {
      "content": "验证 MySQL 是否运行",
      "pos": [
        4460,
        4473
      ]
    },
    {
      "content": "启动 MySQL",
      "pos": [
        4481,
        4489
      ]
    },
    {
      "content": "保护 MySQL 安装、设置根密码、删除匿名用户，禁用远程根登录并删除测试数据库",
      "pos": [
        4546,
        4586
      ]
    },
    {
      "content": "在数据库上创建一个用户，以便在群集操作中使用，也可以选择在应用程序中使用",
      "pos": [
        4657,
        4693
      ]
    },
    {
      "content": "停止 MySQL",
      "pos": [
        4872,
        4880
      ]
    },
    {
      "content": "创建配置占位符",
      "pos": [
        4932,
        4939
      ]
    },
    {
      "pos": [
        4947,
        5029
      ],
      "content": "编辑 MySQL 配置，以便为群集设置创建一个占位符。现在不要替换 <bpt id=\"p1\">**</bpt><ph id=\"ph1\">`&lt;Vairables&gt;`</ph><ept id=\"p1\">**</ept> 或取消注释。当我们通过此模板创建 VM 后，才需执行此操作。"
    },
    {
      "pos": [
        5094,
        5118
      ],
      "content": "编辑 <bpt id=\"p1\">**</bpt><bpt id=\"p2\">[</bpt><ept id=\"p2\">galera]</ept><ept id=\"p1\">**</ept> 部分，并将其清空"
    },
    {
      "pos": [
        5130,
        5149
      ],
      "content": "编辑 <bpt id=\"p1\">**</bpt>[mariadb]<ept id=\"p1\">**</ept> 部分"
    },
    {
      "content": "打开防火墙上的所需端口（在 CentOS 7 上使用 FirewallD）",
      "pos": [
        6015,
        6052
      ]
    },
    {
      "pos": [
        6064,
        6130
      ],
      "content": "MySQL：<ph id=\"ph1\">`firewall-cmd --zone=public --add-port=3306/tcp --permanent`</ph>"
    },
    {
      "pos": [
        6137,
        6204
      ],
      "content": "GALERA：<ph id=\"ph1\">`firewall-cmd --zone=public --add-port=4567/tcp --permanent`</ph>"
    },
    {
      "pos": [
        6211,
        6282
      ],
      "content": "GALERA IST：<ph id=\"ph1\">`firewall-cmd --zone=public --add-port=4568/tcp --permanent`</ph>"
    },
    {
      "pos": [
        6289,
        6355
      ],
      "content": "RSYNC：<ph id=\"ph1\">`firewall-cmd --zone=public --add-port=4444/tcp --permanent`</ph>"
    },
    {
      "pos": [
        6362,
        6393
      ],
      "content": "重新加载防火墙：<ph id=\"ph1\">`firewall-cmd --reload`</ph>"
    },
    {
      "pos": [
        6403,
        6435
      ],
      "content": "优化系统性能。有关更多详细信息，请参阅本文中的<bpt id=\"p1\">[</bpt><ept id=\"p1\">性能优化策略]</ept>。"
    },
    {
      "content": "再次编辑 MySQL 配置文件",
      "pos": [
        6443,
        6458
      ]
    },
    {
      "pos": [
        6519,
        6545
      ],
      "content": "编辑 <bpt id=\"p1\">**</bpt>[mariadb]<ept id=\"p1\">**</ept> 部分，后接以下内容"
    },
    {
      "pos": [
        6557,
        6665
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>建议 <bpt id=\"p1\">**</bpt>innodb\\_buffer\\_pool\\_size<ept id=\"p1\">**</ept> 占用 VM 的 70% 内存。对于 RAM 为 3.5GB 的 Medium Azure VM，这里已设置为 2.45GB。"
    },
    {
      "content": "停止 MySQL 并禁用 MySQL 服务在启动时运行，以免在添加新节点时导致群集混乱，然后取消设置机器。",
      "pos": [
        7536,
        7589
      ]
    },
    {
      "pos": [
        7692,
        7771
      ],
      "content": "通过门户捕获 VM。（目前，<bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure CLI 工具中的问题 #1268]</ept> 描述的事实是，Azure CLI 工具所捕获的映像并没有捕获所附加的数据磁盘。）"
    },
    {
      "content": "通过门户关闭机器",
      "pos": [
        7779,
        7787
      ]
    },
    {
      "pos": [
        7794,
        7984
      ],
      "content": "单击“捕获”并将映像名称指定为 <bpt id=\"p1\">**</bpt>mariadb-galera-image<ept id=\"p1\">**</ept>，然后提供描述并选中“我已运行 waagent”。<ph id=\"ph1\">![</ph>捕获虚拟机<ph id=\"ph2\">](./media/virtual-machines-mariadb-cluster/Capture.png)![</ph>捕获虚拟机<ph id=\"ph3\">](./media/virtual-machines-mariadb-cluster/Capture2.PNG)</ph>"
    },
    {
      "content": "创建群集",
      "pos": [
        7993,
        7997
      ]
    },
    {
      "content": "使用刚才创建的模板创建 3 个 VM，然后配置并启动群集。",
      "pos": [
        8000,
        8029
      ]
    },
    {
      "pos": [
        8034,
        8331
      ],
      "content": "从之前创建的 <bpt id=\"p1\">**</bpt>mariadb-galera-image<ept id=\"p1\">**</ept> 映像创建第一个 CentOS 7 VM，设置虚拟网络名称为 <bpt id=\"p2\">**</bpt>mariadbvnet<ept id=\"p2\">**</ept>、子网为 <bpt id=\"p3\">**</bpt>mariadb<ept id=\"p3\">**</ept>、虚拟机大小为“中等”，传入云服务名称为 <bpt id=\"p4\">**</bpt>mariadbha<ept id=\"p4\">**</ept>（或者你希望通过 mariadbha.chinacloudapp.cn 访问的任何名称），将此虚拟机的名称设置为 <bpt id=\"p5\">**</bpt>mariadb1<ept id=\"p5\">**</ept>、用户名设置为 <bpt id=\"p6\">**</bpt>azureuser<ept id=\"p6\">**</ept>，启用 SSH 访问并传送 SSH 证书 .pem 文件，并将 <bpt id=\"p7\">**</bpt>/path/to/key.pem<ept id=\"p7\">**</ept> 替换为已生成的 .pem SSH 密钥的存储位置路径。"
    },
    {
      "content": "[WACOM.NOTE]为清楚起见，以下命令拆开显示在多行内，但每个都应作为一整行进行输入。",
      "pos": [
        8339,
        8385
      ]
    },
    {
      "pos": [
        8719,
        8817
      ],
      "content": "通过<bpt id=\"p1\">_</bpt>连接<ept id=\"p1\">_</ept>到当前创建的 <bpt id=\"p2\">**</bpt>mariadbha<ept id=\"p2\">**</ept> 云服务、更改 <bpt id=\"p3\">**</bpt>VM 名称<ept id=\"p3\">**</ept>，并将 <bpt id=\"p4\">**</bpt>SSH 端口<ept id=\"p4\">**</ept>更改为不会与同一云服务中的其他 VM 产生冲突的独特端口，创建另外 2 个虚拟机。"
    },
    {
      "content": "以及对于 MariaDB3",
      "pos": [
        9155,
        9168
      ]
    },
    {
      "content": "你需获取 3 个 VM 各自的内部 IP 地址，才能执行后续步骤：",
      "pos": [
        9513,
        9546
      ]
    },
    {
      "content": "获取 IP 地址",
      "pos": [
        9554,
        9562
      ]
    },
    {
      "content": "通过 SSH 登录到 3 个 VM，并编辑每个虚拟机的配置文件",
      "pos": [
        9617,
        9648
      ]
    },
    {
      "pos": [
        9704,
        9919
      ],
      "content": "删除开始处的 <bpt id=\"p1\">**</bpt>#<ept id=\"p1\">**</ept>，取消对 <bpt id=\"p2\">**</bpt><ph id=\"ph1\">`wsrep_cluster_name`</ph><ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt><ph id=\"ph2\">`wsrep_cluster_address`</ph><ept id=\"p3\">**</ept> 的注释，并验证其是否为所需内容。此外，将 <bpt id=\"p4\">**</bpt><ph id=\"ph3\">`wsrep_node_address`</ph><ept id=\"p4\">**</ept> 中的 <bpt id=\"p5\">**</bpt><ph id=\"ph4\">`&lt;ServerIP&gt;`</ph><ept id=\"p5\">**</ept> 和 <bpt id=\"p6\">**</bpt><ph id=\"ph5\">`wsrep_node_name`</ph><ept id=\"p6\">**</ept> 中的 <bpt id=\"p7\">**</bpt><ph id=\"ph6\">`&lt;NodeName&gt;`</ph><ept id=\"p7\">**</ept> 分别替换为 VM 的 IP 地址和名称，然后同样取消这些行的注释。"
    },
    {
      "content": "启动 MariaDB1 上的群集，并允许其在启动时运行",
      "pos": [
        9928,
        9955
      ]
    },
    {
      "content": "在 MariaDB2 和 MariaDB3 上启动 MySQL，并允许其在启动时运行",
      "pos": [
        10029,
        10071
      ]
    },
    {
      "content": "对群集进行负载平衡",
      "pos": [
        10145,
        10154
      ]
    },
    {
      "pos": [
        10155,
        10275
      ],
      "content": "在创建聚集 VM 时，你将其添加到了名为 <bpt id=\"p1\">**</bpt>clusteravset<ept id=\"p1\">**</ept> 的可用性集中，以确保其放置在不同的容错和更新域上，且 Azure 不会同时在所有虚拟机上执行维护。此配置符合该 Azure 服务级别协议 (SLA) 将支持的要求。"
    },
    {
      "content": "现在，使用 Azure 负载平衡器，以平衡 3 个节点之间的请求。",
      "pos": [
        10277,
        10310
      ]
    },
    {
      "pos": [
        10312,
        10507
      ],
      "content": "在使用 Azure CLI 的机器上运行以下命令。命令参数结构是：<ph id=\"ph1\">`azure vm endpoint create-multiple &lt;MachineName&gt; &lt;PublicPort&gt;:&lt;VMPort&gt;:&lt;Protocol&gt;:&lt;EnableDirectServerReturn&gt;:&lt;Load Balanced Set Name&gt;:&lt;ProbeProtocol&gt;:&lt;ProbePort&gt;`</ph>"
    },
    {
      "content": "最后，由于 CLI 将负载平衡器的探测时间间隔设置为 15 秒（可能有点太长了），可以在门户中的“终结点”下更改任一 VM 的该时间间隔",
      "pos": [
        10760,
        10828
      ]
    },
    {
      "content": "编辑终结点",
      "pos": [
        10832,
        10837
      ]
    },
    {
      "content": "然后单击“重新配置负载平衡集”，并转到下一步",
      "pos": [
        10895,
        10917
      ]
    },
    {
      "content": "重新配置负载平衡集",
      "pos": [
        10921,
        10930
      ]
    },
    {
      "content": "然后将“探测时间间隔”设置为 5 秒，并保存",
      "pos": [
        10989,
        11011
      ]
    },
    {
      "content": "更改探测时间间隔",
      "pos": [
        11015,
        11023
      ]
    },
    {
      "content": "验证群集",
      "pos": [
        11085,
        11089
      ]
    },
    {
      "pos": [
        11091,
        11180
      ],
      "content": "繁琐的工作已经完成。现在应该可以在 <ph id=\"ph1\">`mariadbha.chinacloudapp.cn:3306`</ph> 访问群集，这将触发负载平衡器并在 3 个 VM 之间顺利、高效地路由请求。"
    },
    {
      "content": "使用偏好的 MySQL 客户端进行连接，或直接从任一 VM 进行连接，以验证此群集是否正常运行。",
      "pos": [
        11182,
        11230
      ]
    },
    {
      "content": "然后，创建新的数据库并在其中填充一些数据",
      "pos": [
        11293,
        11313
      ]
    },
    {
      "content": "将导致以下表格",
      "pos": [
        11594,
        11601
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        11880,
        11884
      ]
    },
    {
      "content": "在本文中，你在运行 CentOS 7 的 Azure 虚拟机上创建了包含 3 个节点的 MariaDB + Galera 高度可用群集。VM 已通过 Azure 负载平衡器实现了负载平衡。",
      "pos": [
        11886,
        11980
      ]
    },
    {
      "pos": [
        11982,
        12058
      ],
      "content": "你可能希望找到<bpt id=\"p1\">[</bpt><ept id=\"p1\">另一种方式在 Linux 上对 MySQL 进行集群]</ept>以及探究如何<bpt id=\"p2\">[</bpt><ept id=\"p2\">优化和测试 Azure Linux VM 上的 MySQL 性能]</ept>。"
    }
  ],
  "content": "<properties pageTitle=\"在 Azure 上运行 MariaDB (MySQL) 群集\" description=\"在 Azure 虚拟机上创建 MariaDB + Galera MySQL 群集\" services=\"virtual-machines\" documentationCenter=\"infrastructure\" authors=\"sabbour, rasquill\" manager=\"timlt\" />\n<tags  \n    ms.service=\"virtual-machines\"\n    ms.date=\"04/15/2015\"\n    wacn.date=\"08/29/2015\"/>\n\n# MariaDB (MySQL) 群集 - Azure 教程\n\n<p>我们正在创建的是 [MariaDB](https://mariadb.org/en/about/) 的多主机 [Galera](http://galeracluster.com/products/) 群集，这是 MySQL 的嵌入式替代版本，具有稳健性、可扩展性和可靠性，可在 Azure 虚拟机上的高度可用环境中使用。</p>\n\n## 体系结构概述\n\n本主题中将执行下列步骤：\n\n1. 创建包含 3 个节点的群集\n2. 将数据磁盘与操作系统磁盘隔离开来\n3. 在 RAID-0/条带化设置下创建数据磁盘，以提高 IOPS\n4. 使用 Azure 负载平衡器，以使 3 个节点的负载保持平衡\n5. 为了最大程度地减少重复工作，可创建一个包含 MariaDB+Galera 的 VM 映像，并将其用于创建其他群集 VM。\n\n![体系结构](./media/virtual-machines-mariadb-cluster/Setup.png)\n\n> [AZURE.NOTE]本主题将使用 [Azure CLI] 工具，所以请确保下载这些工具，并根据说明将其连接到你的 Azure 订阅。如果你需要对 Azure CLI 中可用命令的参考，可单击此链接以查看 [Azure CLI 命令参考]。你还将需要[创建用于身份验证的 SSH 密钥]，并记下 **.pem 文件的位置**。\n\n\n## 创建模板\n\n### 基础结构\n\n1. 创建地缘组，以将资源保存在一起\n\n        azure account affinity-group create mariadbcluster --location \"North Europe\" --label \"MariaDB Cluster\"\n        \n2. 创建虚拟网络\n\n        azure network vnet create --address-space 10.0.0.0 --cidr 8 --subnet-name mariadb --subnet-start-ip 10.0.0.0 --subnet-cidr 24 --affinity-group mariadbcluster mariadbvnet\n\n3. 创建存储帐户，以保存所有磁盘。请注意，不要将超过 40 个常用磁盘放置在同一存储帐户上，以免达到存储帐户的 20,000 IOPS 上限。在本例中，我们的磁盘数量远低于这个数字，所以为了简单起见，我们将所有磁盘都存储在同一帐户上。\n\n        azure storage account create mariadbstorage --label mariadbstorage --affinity-group mariadbcluster\n\n3. 查找 CentOS 7 虚拟机映像的名称\n\n        azure vm image list | findstr CentOS        \n该输出将如 `5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-70-20140926` 所示。在以下步骤中使用该名称。\n\n4. 创建 VM 模板，将 **/path/to/key.pem** 替换为已生成的 .pem SSH 密钥的存储位置路径\n\n        azure vm create --virtual-network-name mariadbvnet --subnet-names mariadb --blob-url \"http://mariadbstorage.blob.core.chinacloudapi.cn/vhds/mariadbhatemplate-os.vhd\"  --vm-size Medium --ssh 22 --ssh-cert \"/path/to/key.pem\" --no-ssh-password mariadbtemplate 5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-70-20140926 azureuser\n        \n5. 将 4 个 500GB 的数据磁盘附加到 VM，以便在 RAID 配置中使用\n\n        FOR /L %d IN (1,1,4) DO azure vm disk attach-new mariadbhatemplate 512 http://mariadbstorage.blob.core.chinacloudapi.cn/vhds/mariadbhatemplate-data-%d.vhd        \n\n6. 通过 SSH 登录到你在 **mariadbhatemplate.chinacloudapp.cn:22** 创建的模板 VM，并使用私钥进行连接。\n\n### 软件\n\n1. 获取根\n\n        sudo su\n        \n2. 安装 RAID 支持：\n\n     - 安装 mdadm\n        \n                yum install mdadm\n                \n     - 创建具有 EXT4 文件系统的 RAID0/条带化配置\n        \n                mdadm --create --verbose /dev/md0 --level=stripe --raid-devices=4 /dev/sdc /dev/sdd /dev/sde /dev/sdf\n                mdadm --detail --scan >> /etc/mdadm.conf\n                mkfs -t ext4 /dev/md0\n         \n     - 创建装入点目录\n         \n                mkdir /mnt/data\n                \n     - 检索新创建的 RAID 设备的 UUID\n        \n                blkid | grep /dev/md0\n    \n     - 编辑 /etc/fstab\n        \n                vi /etc/fstab\n        \n     - 将设备添加到此位置，以便在重新启动时自动安装，并将 UUID 替换为之前从 **blkid** 命令中获取的值\n        \n                UUID=<UUID FROM PREVIOUS>   /mnt/data ext4   defaults,noatime   1 2\n            \n     - 装载新分区\n        \n                mount /mnt/data\n            \n3. 安装 MariaDB：\n        \n     - 创建 MariaDB.repo 文件： \n        \n                vi /etc/yum.repos.d/MariaDB.repo\n        \n     - 在其中填充以下内容\n        \n                [mariadb]\n                name = MariaDB\n                baseurl = http://yum.mariadb.org/10.0/centos7-amd64\n                gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB\n                gpgcheck=1\n    \n     - 删除现有后缀和 mariadb-libs，以免产生冲突\n    \n            yum remove postfix mariadb-libs-*\n            \n     - 安装包含 Galera 的 MariaDB\n    \n            yum install MariaDB-Galera-server MariaDB-client galera\n   \n4. 将 MySQL 数据目录移动到 RAID 块设备\n\n     - 将当前 MySQL 目录复制到其新位置，然后删除旧目录\n    \n            cp -avr /var/lib/mysql /mnt/data  \n            rm -rf /var/lib/mysql\n      \n     - 相应地设置新目录上的权限\n        \n            chown -R mysql:mysql /mnt/data && chmod -R 755 /mnt/data/  \n            \n     - 创建一个符号链接，将旧目录指向 RAID 分区上的新位置\n    \n            ln -s /mnt/data/mysql /var/lib/mysql   \n\n5. [SELinux 会干扰群集操作](http://galeracluster.com/documentation-webpages/configuration.html#selinux)，所以在当前会话中有必要将其禁用（直到兼容版本出现）。编辑 `/etc/selinux/config` 以禁止其后续重新启动：\n        \n            setenforce 0\n    \n       然后编辑 `/etc/selinux/config` 以设置 `SELINUX=permissive`\n       \n6. 验证 MySQL 是否运行\n\n    - 启动 MySQL\n    \n            service mysql start\n            \n    - 保护 MySQL 安装、设置根密码、删除匿名用户，禁用远程根登录并删除测试数据库\n            \n            mysql_secure_installation\n            \n    - 在数据库上创建一个用户，以便在群集操作中使用，也可以选择在应用程序中使用\n   \n            mysql -u root -p\n            GRANT ALL PRIVILEGES ON *.* TO 'cluster'@'%' IDENTIFIED BY 'p@ssw0rd' WITH GRANT OPTION; FLUSH PRIVILEGES;\n            exit\n   \n   - 停止 MySQL\n   \n            service mysql stop\n            \n7. 创建配置占位符\n\n    - 编辑 MySQL 配置，以便为群集设置创建一个占位符。现在不要替换 **`<Vairables>`** 或取消注释。当我们通过此模板创建 VM 后，才需执行此操作。\n    \n            vi /etc/my.cnf.d/server.cnf\n            \n    - 编辑 **[galera]** 部分，并将其清空\n    \n    - 编辑 **[mariadb]** 部分\n    \n            wsrep_provider=/usr/lib64/galera/libgalera_smm.so \n            binlog_format=ROW\n            wsrep_sst_method=rsync\n            bind-address=0.0.0.0 # When set to 0.0.0.0, the server listens to remote connections\n            default_storage_engine=InnoDB\n            innodb_autoinc_lock_mode=2\n            \n            wsrep_sst_auth=cluster:p@ssw0rd # CHANGE: Username and password you created for the SST cluster MySQL user\n            #wsrep_cluster_name='mariadbcluster' # CHANGE: Uncomment and set your desired cluster name\n            #wsrep_cluster_address=\"gcomm://mariadb1,mariadb2,mariadb3\" # CHANGE: Uncomment and Add all your servers\n            #wsrep_node_address='<ServerIP>' # CHANGE: Uncomment and set IP address of this server\n            #wsrep_node_name='<NodeName>' # CHANGE: Uncomment and set the node name of this server\n\n8. 打开防火墙上的所需端口（在 CentOS 7 上使用 FirewallD）\n    \n    - MySQL：`firewall-cmd --zone=public --add-port=3306/tcp --permanent`\n    - GALERA：`firewall-cmd --zone=public --add-port=4567/tcp --permanent`\n    - GALERA IST：`firewall-cmd --zone=public --add-port=4568/tcp --permanent`\n    - RSYNC：`firewall-cmd --zone=public --add-port=4444/tcp --permanent`\n    - 重新加载防火墙：`firewall-cmd --reload`\n    \n9.  优化系统性能。有关更多详细信息，请参阅本文中的[性能优化策略]。\n\n    - 再次编辑 MySQL 配置文件\n    \n            vi /etc/my.cnf.d/server.cnf\n        \n    - 编辑 **[mariadb]** 部分，后接以下内容\n    \n    > [AZURE.NOTE]建议 **innodb\\_buffer\\_pool\\_size** 占用 VM 的 70% 内存。对于 RAM 为 3.5GB 的 Medium Azure VM，这里已设置为 2.45GB。\n    \n            innodb_buffer_pool_size = 2508M # The buffer pool contains buffered data and the index. This is usually set to 70% of physical memory.\n            innodb_log_file_size = 512M #  Redo logs ensure that write operations are fast, reliable, and recoverable after a crash\n            max_connections = 5000 # A larger value will give the server more time to recycle idled connections\n            innodb_file_per_table = 1 # Speed up the table space transmission and optimize the debris management performance\n            innodb_log_buffer_size = 128M # The log buffer allows transactions to run without having to flush the log to disk before the transactions commit\n            innodb_flush_log_at_trx_commit = 2 # The setting of 2 enables the most data integrity and is suitable for Master in MySQL cluster\n            query_cache_size = 0\n            \n10. 停止 MySQL 并禁用 MySQL 服务在启动时运行，以免在添加新节点时导致群集混乱，然后取消设置机器。\n\n        service mysql stop\n        chkconfig mysql off\n        waagent -deprovision    \n        \n11. 通过门户捕获 VM。（目前，[Azure CLI 工具中的问题 #1268] 描述的事实是，Azure CLI 工具所捕获的映像并没有捕获所附加的数据磁盘。）\n\n    - 通过门户关闭机器\n    - 单击“捕获”并将映像名称指定为 **mariadb-galera-image**，然后提供描述并选中“我已运行 waagent”。![捕获虚拟机](./media/virtual-machines-mariadb-cluster/Capture.png)![捕获虚拟机](./media/virtual-machines-mariadb-cluster/Capture2.PNG)\n    \n## 创建群集\n \n使用刚才创建的模板创建 3 个 VM，然后配置并启动群集。\n\n1. 从之前创建的 **mariadb-galera-image** 映像创建第一个 CentOS 7 VM，设置虚拟网络名称为 **mariadbvnet**、子网为 **mariadb**、虚拟机大小为“中等”，传入云服务名称为 **mariadbha**（或者你希望通过 mariadbha.chinacloudapp.cn 访问的任何名称），将此虚拟机的名称设置为 **mariadb1**、用户名设置为 **azureuser**，启用 SSH 访问并传送 SSH 证书 .pem 文件，并将 **/path/to/key.pem** 替换为已生成的 .pem SSH 密钥的存储位置路径。\n\n    > [WACOM.NOTE]为清楚起见，以下命令拆开显示在多行内，但每个都应作为一整行进行输入。\n\n        azure vm create \n        --virtual-network-name mariadbvnet\n        --subnet-names mariadb \n        --availability-set clusteravset\n        --vm-size Medium \n        --ssh-cert \"/path/to/key.pem\" \n        --no-ssh-password \n        --ssh 22 \n        --vm-name mariadb1 \n        mariadbha mariadb-galera-image azureuser \n\n2. 通过_连接_到当前创建的 **mariadbha** 云服务、更改 **VM 名称**，并将 **SSH 端口**更改为不会与同一云服务中的其他 VM 产生冲突的独特端口，创建另外 2 个虚拟机。\n\n        azure vm create     \n        --virtual-network-name mariadbvnet\n        --subnet-names mariadb \n        --availability-set clusteravset\n        --vm-size Medium\n        --ssh-cert \"/path/to/key.pem\"\n        --no-ssh-password\n        --ssh 23\n        --vm-name mariadb2\n        --connect mariadbha mariadb-galera-image azureuser\n以及对于 MariaDB3\n\n        azure vm create\n        --virtual-network-name mariadbvnet\n        --subnet-names mariadb \n        --availability-set clusteravset\n        --vm-size Medium\n        --ssh-cert \"/path/to/key.pem\"\n        --no-ssh-password\n        --ssh 24\n        --vm-name mariadb3\n        --connect mariadbha mariadb-galera-image azureuser\n        \n3. 你需获取 3 个 VM 各自的内部 IP 地址，才能执行后续步骤：\n\n    ![获取 IP 地址](./media/virtual-machines-mariadb-cluster/IP.png)\n\n4. 通过 SSH 登录到 3 个 VM，并编辑每个虚拟机的配置文件\n\n        sudo vi /etc/my.cnf.d/server.cnf\n        \n    删除开始处的 **#**，取消对 **`wsrep_cluster_name`** 和 **`wsrep_cluster_address`** 的注释，并验证其是否为所需内容。此外，将 **`wsrep_node_address`** 中的 **`<ServerIP>`** 和 **`wsrep_node_name`** 中的 **`<NodeName>`** 分别替换为 VM 的 IP 地址和名称，然后同样取消这些行的注释。\n    \n5. 启动 MariaDB1 上的群集，并允许其在启动时运行\n\n        sudo service mysql bootstrap\n        chkconfig mysql on\n    \n6. 在 MariaDB2 和 MariaDB3 上启动 MySQL，并允许其在启动时运行\n\n        sudo service mysql start\n        chkconfig mysql on\n        \n## 对群集进行负载平衡\n在创建聚集 VM 时，你将其添加到了名为 **clusteravset** 的可用性集中，以确保其放置在不同的容错和更新域上，且 Azure 不会同时在所有虚拟机上执行维护。此配置符合该 Azure 服务级别协议 (SLA) 将支持的要求。\n\n现在，使用 Azure 负载平衡器，以平衡 3 个节点之间的请求。\n\n在使用 Azure CLI 的机器上运行以下命令。命令参数结构是：`azure vm endpoint create-multiple <MachineName> <PublicPort>:<VMPort>:<Protocol>:<EnableDirectServerReturn>:<Load Balanced Set Name>:<ProbeProtocol>:<ProbePort>`\n\n    azure vm endpoint create-multiple mariadb1 3306:3306:tcp:false:MySQL:tcp:3306\n    azure vm endpoint create-multiple mariadb2 3306:3306:tcp:false:MySQL:tcp:3306\n    azure vm endpoint create-multiple mariadb3 3306:3306:tcp:false:MySQL:tcp:3306\n    \n最后，由于 CLI 将负载平衡器的探测时间间隔设置为 15 秒（可能有点太长了），可以在门户中的“终结点”下更改任一 VM 的该时间间隔\n\n![编辑终结点](./media/virtual-machines-mariadb-cluster/Endpoint.PNG)\n\n然后单击“重新配置负载平衡集”，并转到下一步\n\n![重新配置负载平衡集](./media/virtual-machines-mariadb-cluster/Endpoint2.PNG)\n\n然后将“探测时间间隔”设置为 5 秒，并保存\n\n![更改探测时间间隔](./media/virtual-machines-mariadb-cluster/Endpoint3.PNG)\n\n## 验证群集\n\n繁琐的工作已经完成。现在应该可以在 `mariadbha.chinacloudapp.cn:3306` 访问群集，这将触发负载平衡器并在 3 个 VM 之间顺利、高效地路由请求。\n\n使用偏好的 MySQL 客户端进行连接，或直接从任一 VM 进行连接，以验证此群集是否正常运行。\n\n     mysql -u cluster -h mariadbha.chinacloudapp.cn -p\n     \n然后，创建新的数据库并在其中填充一些数据\n\n    CREATE DATABASE TestDB;\n    USE TestDB;\n    CREATE TABLE TestTable (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, value VARCHAR(255));\n    INSERT INTO TestTable (value)  VALUES ('Value1');\n    INSERT INTO TestTable (value)  VALUES ('Value2');\n    SELECT * FROM TestTable;\n    \n将导致以下表格\n\n    +----+--------+\n    | id | value  |\n    +----+--------+\n    |  1 | Value1 |\n    |  4 | Value2 |\n    +----+--------+\n    2 rows in set (0.00 sec)    \n    \n<!--Every topic should have next steps and links to the next logical set of content to keep the customer engaged-->\n## 后续步骤\n\n在本文中，你在运行 CentOS 7 的 Azure 虚拟机上创建了包含 3 个节点的 MariaDB + Galera 高度可用群集。VM 已通过 Azure 负载平衡器实现了负载平衡。\n\n你可能希望找到[另一种方式在 Linux 上对 MySQL 进行集群]以及探究如何[优化和测试 Azure Linux VM 上的 MySQL 性能]。\n\n<!--Anchors-->\n[Architecture overview]: #architecture-overview\n[Creating the template]: #creating-the-template\n[Creating the cluster]: #creating-the-cluster\n[Load balancing the cluster]: #load-balancing-the-cluster\n[Validating the cluster]: #validating-the-cluster\n[Next steps]: #next-steps\n\n<!--Image references-->\n\n<!--Link references-->\n[Galera]: http://galeracluster.com/products/\n[MariaDBs]: https://mariadb.org/en/about/\n[Azure CLI]: /zh-cn/documentation/articles/xplat-cli/\n[Azure CLI 命令参考]: /zh-cn/documentation/articles/command-line-tools/\n[创建用于身份验证的 SSH 密钥]: http://www.jeff.wilcox.name/2013/06/secure-linux-vms-with-ssh-certificates/\n[性能优化策略]: /zh-cn/documentation/articles/virtual-machines-linux-optimize-mysql-perf/\n[优化和测试 Azure Linux VM 上的 MySQL 性能]: /zh-cn/documentation/articles/virtual-machines-linux-optimize-mysql-perf/\n[Azure CLI 工具中的问题 #1268]: https://github.com/Azure/azure-xplat-cli/issues/1268\n[另一种方式在 Linux 上对 MySQL 进行集群]: /zh-cn/documentation/articles/virtual-machines-linux-mysql-cluster/\n\n<!---HONumber=67-->"
}