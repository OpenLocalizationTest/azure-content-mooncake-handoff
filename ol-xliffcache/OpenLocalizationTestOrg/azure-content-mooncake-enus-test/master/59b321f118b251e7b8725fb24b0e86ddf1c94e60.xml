{
  "nodes": [
    {
      "content": "使用 .NET 连接到媒体服务帐户",
      "pos": [
        28,
        45
      ]
    },
    {
      "content": "本主题演示如何使用 .NET 连接到媒体服务。",
      "pos": [
        65,
        88
      ]
    },
    {
      "content": "使用适用于 .NET 的媒体服务 SDK 连接到媒体服务帐户",
      "pos": [
        308,
        338
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        342,
        358
      ]
    },
    {
      "content": "REST",
      "pos": [
        362,
        366
      ]
    },
    {
      "content": ".NET",
      "pos": [
        441,
        445
      ]
    },
    {
      "content": "本主题介绍如何在使用适用于 .NET 的媒体服务 SDK 编程时获取与 Azure 媒体服务的编程连接。",
      "pos": [
        521,
        573
      ]
    },
    {
      "content": "连接到媒体服务",
      "pos": [
        579,
        586
      ]
    },
    {
      "content": "若要以编程方式连接到媒体服务，你必须在以前设置了一个 Azure 帐户，并在该帐户上配置了媒体服务，然后设置一个 Visual Studio 项目，以便通过适用于 .NET 的媒体服务 SDK 进行开发。有关详细信息，请参阅“设置以使用适用于 .NET 的媒体服务 SDK 进行开发”。",
      "pos": [
        588,
        731
      ]
    },
    {
      "content": "在媒体服务帐户设置过程结束时，你获得以下必需的连接值。请使用这些值以编程方式连接到媒体服务。",
      "pos": [
        733,
        779
      ]
    },
    {
      "content": "你的媒体服务帐户名。",
      "pos": [
        783,
        793
      ]
    },
    {
      "content": "你的媒体服务帐户密钥。",
      "pos": [
        797,
        808
      ]
    },
    {
      "content": "若要查找这些值，请转到 Azure 管理门户，选择你的媒体服务帐户，然后单击门户窗口底部的“管理密钥”图标。单击每个文本框旁边的图标将值复制到系统剪贴板中。",
      "pos": [
        810,
        888
      ]
    },
    {
      "content": "创建 CloudMediaContext 实例",
      "pos": [
        894,
        917
      ]
    },
    {
      "pos": [
        919,
        1033
      ],
      "content": "若要开始针对媒体服务编程，你需要创建一个代表服务器上下文的 <bpt id=\"p1\">**</bpt>CloudMediaContext<ept id=\"p1\">**</ept> 实例。<bpt id=\"p2\">**</bpt>CloudMediaContext<ept id=\"p2\">**</ept> 包括对各种重要集合的引用，这些集合包括作业、资产、文件、访问策略和定位符。"
    },
    {
      "pos": [
        1036,
        1115
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> <bpt id=\"p1\">**</bpt>CloudMediaContext<ept id=\"p1\">**</ept> 类不是线程安全的。每个线程或每组操作均应创建一个新 CloudMediaContext。"
    },
    {
      "pos": [
        1118,
        1221
      ],
      "content": "CloudMediaContext 具有五个构造函数重载。建议使用以 <bpt id=\"p1\">**</bpt>MediaServicesCredentials<ept id=\"p1\">**</ept> 为参数的构造函数。有关详细信息，请参阅下面的<bpt id=\"p2\">**</bpt>重复使用访问控制服务令牌<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "以下示例使用 public CloudMediaContext(MediaServicesCredentials credentials) 构造函数：",
      "pos": [
        1223,
        1298
      ]
    },
    {
      "content": "重复使用访问控制服务令牌",
      "pos": [
        1585,
        1597
      ]
    },
    {
      "content": "本部分说明如何通过使用以 MediaServicesCredentials 为参数的 CloudMediaContext 构造函数重复使用访问控制服务令牌。",
      "pos": [
        1599,
        1677
      ]
    },
    {
      "pos": [
        1680,
        1889
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure Active Directory 访问控制<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/hh147631.aspx)</ept>（也称为访问控制服务或 ACS）是一个基于云的服务，可轻松对用户进行身份验证和授权以使用户获得访问其 Web 应用程序的权限。Azure 媒体服务通过需要 ACS 令牌的 OAuth 协议控制对其服务的访问。媒体服务从授权服务器接收 ACS 令牌。"
    },
    {
      "pos": [
        1891,
        2110
      ],
      "content": "使用媒体服务 SDK 进行开发时，可选择不处理令牌，而是由 SDK 代码为你进行管理。不过，将 ACS 令牌完全交由 SDK 管理会导致不必要的令牌请求。请求令牌将耗用一定的时间并消耗客户端和服务器资源。此外，如果速度过快，ACS 服务器还会限制请求。上限为每秒钟 30 条请求，请参阅 <bpt id=\"p1\">[</bpt>ACS 服务限制<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/gg185909.aspx)</ept>了解更多详细信息。"
    },
    {
      "pos": [
        2112,
        2419
      ],
      "content": "自媒体服务 SDK 版本 3.0.0.0 起，可以重复使用 ACS 令牌。以 <bpt id=\"p1\">**</bpt>MediaServicesCredentials<ept id=\"p1\">**</ept> 作为参数的 <bpt id=\"p2\">**</bpt>CloudMediaContext<ept id=\"p2\">**</ept> 构造函数可实现在多个上下文之间共享 ACS 令牌。MediaServicesCredentials 类中封装有媒体服务凭据。如果 ACS 令牌可用且其过期时间已知，则可以使用该令牌创建一个新的 MediaServicesCredentials 实例并将其传递给 CloudMediaContext 的构造函数。请注意，媒体服务 SDK 将在每次令牌过期时自动刷新令牌。有两种方法可重复使用 ACS 令牌，如以下示例中所示。"
    },
    {
      "pos": [
        2423,
        2634
      ],
      "content": "你可以在内存中（例如，在静态类变量中）缓存 <bpt id=\"p1\">**</bpt>MediaServicesCredentials<ept id=\"p1\">**</ept> 对象。然后，将缓存的对象传递给 CloudMediaContext 构造函数。MediaServicesCredentials 对象包含一个 ACS 令牌，如果该令牌仍然有效，则可重复使用。如果该令牌无效，则会使用提供给 MediaServicesCredentials 构造函数的凭据通过媒体服务 SDK 刷新该令牌。"
    },
    {
      "pos": [
        2640,
        2840
      ],
      "content": "请注意，在调用 RefreshToken 后，<bpt id=\"p1\">**</bpt>MediaServicesCredentials<ept id=\"p1\">**</ept> 对象将获得有效的令牌。<bpt id=\"p2\">**</bpt>CloudMediaContext<ept id=\"p2\">**</ept> 将调用构造函数中的 <bpt id=\"p3\">**</bpt>RefreshToken<ept id=\"p3\">**</ept> 方法。如果你计划将令牌值保存到外部存储中，请确保在保存令牌数据之前检查 TokenExpiration 值是否有效。如果该值无效，请在进行缓存前调用 RefreshToken。"
    },
    {
      "content": "你也可以缓存 AccessToken 字符串和 TokenExpiration 值。这些值以后可以与缓存的令牌数据一起用于创建一个新的 MediaServicesCredentials 对象。这对于令牌可以在多个进程或多台计算机之间安全共享的方案尤其有用。",
      "pos": [
        3397,
        3525
      ]
    },
    {
      "content": "以下代码段调用了未在此示例中定义的 SaveTokenDataToExternalStorage、GetTokenDataFromExternalStorage 和 UpdateTokenDataInExternalStorageIfNeeded 方法。你可以定义这些方法以在外部存储中存储、检索和更新令牌数据。",
      "pos": [
        3531,
        3687
      ]
    },
    {
      "content": "使用保存的令牌值可创建 MediaServicesCredentials。",
      "pos": [
        4366,
        4403
      ]
    },
    {
      "content": "如果你具有多个媒体服务帐户（例如，用于负载共享目的或地域分布，则可以使用 System.Collections.Concurrent.ConcurrentDictionary 集合（ConcurrentDictionary 集合表示可由多个线程同时访问的密钥/值对的线程安全集合）缓存 MediaServicesCredentials 对象。然后可以使用 GetOrAdd 方法获得缓存凭据。",
      "pos": [
        5263,
        5459
      ]
    },
    {
      "content": "连接到中国北部地区的媒体服务帐户",
      "pos": [
        6524,
        6540
      ]
    },
    {
      "content": "如果你的帐户位于中国北部地区，请使用以下构造函数：",
      "pos": [
        6542,
        6567
      ]
    },
    {
      "content": "例如：",
      "pos": [
        6690,
        6693
      ]
    },
    {
      "content": "将连接值存储到配置中",
      "pos": [
        6993,
        7003
      ]
    },
    {
      "pos": [
        7005,
        7256
      ],
      "content": "强烈建议你将连接值（特别是敏感值，如你的帐户名和密码）存储到配置中。此外，建议你对敏感的配置数据加密。你可以使用 Windows 加密文件系统 (EFS) 加密整个配置文件。要对某个文件启用 EFS，请右键单击该文件，选择“属性”，然后在“高级”设置选项卡中启用加密。此外，你也可以使用受保护的配置来创建自定义解决方案，以便加密配置文件的所选部分。请参阅<bpt id=\"p1\">[</bpt>使用受保护的配置来加密配置信息<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/53tyfkaw.aspx)</ept>。"
    },
    {
      "content": "以下 App.config 文件包含了必需的连接值。",
      "pos": [
        7258,
        7284
      ]
    },
    {
      "content": "元素中的值是你从媒体服务帐户设置过程中获取的必需值。",
      "pos": [
        7298,
        7324
      ]
    },
    {
      "pos": [
        7574,
        7635
      ],
      "content": "若要从配置中检索连接值，你可以使用 <bpt id=\"p1\">**</bpt>ConfigurationManager<ept id=\"p1\">**</ept> 类，然后将相关值分配给代码中的字段："
    }
  ],
  "content": "<properties \n    pageTitle=\"使用 .NET 连接到媒体服务帐户\" \n    description=\"本主题演示如何使用 .NET 连接到媒体服务。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n\n# 使用适用于 .NET 的媒体服务 SDK 连接到媒体服务帐户\n\n> [AZURE.SELECTOR]\n- [REST](/documentation/articles/media-services-rest-connect_programmatically)\n- [.NET](/documentation/articles/media-services-dotnet-connect_programmatically)\n\n\n本主题介绍如何在使用适用于 .NET 的媒体服务 SDK 编程时获取与 Azure 媒体服务的编程连接。\n\n\n## 连接到媒体服务\n\n若要以编程方式连接到媒体服务，你必须在以前设置了一个 Azure 帐户，并在该帐户上配置了媒体服务，然后设置一个 Visual Studio 项目，以便通过适用于 .NET 的媒体服务 SDK 进行开发。有关详细信息，请参阅“设置以使用适用于 .NET 的媒体服务 SDK 进行开发”。\n\n在媒体服务帐户设置过程结束时，你获得以下必需的连接值。请使用这些值以编程方式连接到媒体服务。\n\n- 你的媒体服务帐户名。\n\n- 你的媒体服务帐户密钥。\n\n若要查找这些值，请转到 Azure 管理门户，选择你的媒体服务帐户，然后单击门户窗口底部的“管理密钥”图标。单击每个文本框旁边的图标将值复制到系统剪贴板中。\n\n\n## 创建 CloudMediaContext 实例\n\n若要开始针对媒体服务编程，你需要创建一个代表服务器上下文的 **CloudMediaContext** 实例。**CloudMediaContext** 包括对各种重要集合的引用，这些集合包括作业、资产、文件、访问策略和定位符。\n\n>[AZURE.NOTE] **CloudMediaContext** 类不是线程安全的。每个线程或每组操作均应创建一个新 CloudMediaContext。\n\n\nCloudMediaContext 具有五个构造函数重载。建议使用以 **MediaServicesCredentials** 为参数的构造函数。有关详细信息，请参阅下面的**重复使用访问控制服务令牌**。\n\n以下示例使用 public CloudMediaContext(MediaServicesCredentials credentials) 构造函数：\n\n    // _cachedCredentials and _context are class member variables. \n    _cachedCredentials = new MediaServicesCredentials(\n                    _mediaServicesAccountName,\n                    _mediaServicesAccountKey);\n    \n    _context = new CloudMediaContext(_cachedCredentials);\n\n\n## 重复使用访问控制服务令牌\n\n本部分说明如何通过使用以 MediaServicesCredentials 为参数的 CloudMediaContext 构造函数重复使用访问控制服务令牌。\n\n\n[Azure Active Directory 访问控制](https://msdn.microsoft.com/zh-cn/library/hh147631.aspx)（也称为访问控制服务或 ACS）是一个基于云的服务，可轻松对用户进行身份验证和授权以使用户获得访问其 Web 应用程序的权限。Azure 媒体服务通过需要 ACS 令牌的 OAuth 协议控制对其服务的访问。媒体服务从授权服务器接收 ACS 令牌。\n\n使用媒体服务 SDK 进行开发时，可选择不处理令牌，而是由 SDK 代码为你进行管理。不过，将 ACS 令牌完全交由 SDK 管理会导致不必要的令牌请求。请求令牌将耗用一定的时间并消耗客户端和服务器资源。此外，如果速度过快，ACS 服务器还会限制请求。上限为每秒钟 30 条请求，请参阅 [ACS 服务限制](https://msdn.microsoft.com/zh-cn/library/gg185909.aspx)了解更多详细信息。\n\n自媒体服务 SDK 版本 3.0.0.0 起，可以重复使用 ACS 令牌。以 **MediaServicesCredentials** 作为参数的 **CloudMediaContext** 构造函数可实现在多个上下文之间共享 ACS 令牌。MediaServicesCredentials 类中封装有媒体服务凭据。如果 ACS 令牌可用且其过期时间已知，则可以使用该令牌创建一个新的 MediaServicesCredentials 实例并将其传递给 CloudMediaContext 的构造函数。请注意，媒体服务 SDK 将在每次令牌过期时自动刷新令牌。有两种方法可重复使用 ACS 令牌，如以下示例中所示。\n\n- 你可以在内存中（例如，在静态类变量中）缓存 **MediaServicesCredentials** 对象。然后，将缓存的对象传递给 CloudMediaContext 构造函数。MediaServicesCredentials 对象包含一个 ACS 令牌，如果该令牌仍然有效，则可重复使用。如果该令牌无效，则会使用提供给 MediaServicesCredentials 构造函数的凭据通过媒体服务 SDK 刷新该令牌。\n\n    请注意，在调用 RefreshToken 后，**MediaServicesCredentials** 对象将获得有效的令牌。**CloudMediaContext** 将调用构造函数中的 **RefreshToken** 方法。如果你计划将令牌值保存到外部存储中，请确保在保存令牌数据之前检查 TokenExpiration 值是否有效。如果该值无效，请在进行缓存前调用 RefreshToken。\n\n        // Create and cache the Media Services credentials in a static class variable.\n        _cachedCredentials = new MediaServicesCredentials(_mediaServicesAccountName, _mediaServicesAccountKey);\n\n        \n        // Use the cached credentials to create a new CloudMediaContext object.\n        if(_cachedCredentials == null)\n        {\n            _cachedCredentials = new MediaServicesCredentials(_mediaServicesAccountName, _mediaServicesAccountKey);\n        }\n        \n        CloudMediaContext context = new CloudMediaContext(_cachedCredentials);\n\n- 你也可以缓存 AccessToken 字符串和 TokenExpiration 值。这些值以后可以与缓存的令牌数据一起用于创建一个新的 MediaServicesCredentials 对象。这对于令牌可以在多个进程或多台计算机之间安全共享的方案尤其有用。\n\n    以下代码段调用了未在此示例中定义的 SaveTokenDataToExternalStorage、GetTokenDataFromExternalStorage 和 UpdateTokenDataInExternalStorageIfNeeded 方法。你可以定义这些方法以在外部存储中存储、检索和更新令牌数据。\n\n        CloudMediaContext context1 = new CloudMediaContext(_mediaServicesAccountName, _mediaServicesAccountKey);\n        \n        // Get token values from the context.\n        var accessToken = context1.Credentials.AccessToken;\n        var tokenExpiration = context1.Credentials.TokenExpiration;\n        \n        // Save token values for later use. \n        // The SaveTokenDataToExternalStorage method should check \n        // whether the TokenExpiration value is valid before saving the token data. \n        // If it is not valid, call MediaServicesCredentials's RefreshToken before caching.\n        SaveTokenDataToExternalStorage(accessToken, tokenExpiration);\n        \n    使用保存的令牌值可创建 MediaServicesCredentials。\n\n\n        var accessToken = \"\";\n        var tokenExpiration = DateTime.UtcNow;\n        \n        // Retrieve saved token values.\n        GetTokenDataFromExternalStorage(out accessToken, out tokenExpiration);\n        \n        // Create a new MediaServicesCredentials object using saved token values.\n        MediaServicesCredentials credentials = new MediaServicesCredentials(_mediaServicesAccountName, _mediaServicesAccountKey)\n        {\n            AccessToken = accessToken,\n            TokenExpiration = tokenExpiration\n        };\n        \n        CloudMediaContext context2 = new CloudMediaContext(credentials);\n\n    在令牌已由媒体服务 SDK 更新的情况下，更新令牌副本。\n    \n        if(tokenExpiration != context2.Credentials.TokenExpiration)\n        {\n            UpdateTokenDataInExternalStorageIfNeeded(accessToken, context2.Credentials.TokenExpiration);\n        }\n        \n\n- 如果你具有多个媒体服务帐户（例如，用于负载共享目的或地域分布，则可以使用 System.Collections.Concurrent.ConcurrentDictionary 集合（ConcurrentDictionary 集合表示可由多个线程同时访问的密钥/值对的线程安全集合）缓存 MediaServicesCredentials 对象。然后可以使用 GetOrAdd 方法获得缓存凭据。\n\n        // Declare a static class variable of the ConcurrentDictionary type in which the Media Services credentials will be cached.  \n        private static readonly ConcurrentDictionary<string, MediaServicesCredentials> mediaServicesCredentialsCache = \n            new ConcurrentDictionary<string, MediaServicesCredentials>();\n        \n\n        // Cache (or get already cached) Media Services credentials. Use these credentials to create a new CloudMediaContext object.\n        static public CloudMediaContext CreateMediaServicesContext(string accountName, string accountKey)\n        {\n            CloudMediaContext cloudMediaContext;\n            MediaServicesCredentials mediaServicesCredentials;\n        \n            mediaServicesCredentials = mediaServicesCredentialsCache.GetOrAdd(\n                accountName,\n                valueFactory => new MediaServicesCredentials(accountName, accountKey));\n        \n            cloudMediaContext = new CloudMediaContext(mediaServicesCredentials);\n        \n            return cloudMediaContext;\n        }\n        \n## 连接到中国北部地区的媒体服务帐户\n\n如果你的帐户位于中国北部地区，请使用以下构造函数：\n\n    public CloudMediaContext(Uri apiServer, string accountName, string accountKey, string scope, string acsBaseAddress)\n\n例如：\n\n\n    _context = new CloudMediaContext(\n        new Uri(\"https://wamsbjbclus001rest-hs.chinacloudapp.cn/API/\"),\n        _mediaServicesAccountName,\n        _mediaServicesAccountKey,\n        \"urn:WindowsAzureMediaServices\",\n        \"https://wamsprodglobal001acs.accesscontrol.chinacloudapi.cn\");\n\n\n## 将连接值存储到配置中\n\n强烈建议你将连接值（特别是敏感值，如你的帐户名和密码）存储到配置中。此外，建议你对敏感的配置数据加密。你可以使用 Windows 加密文件系统 (EFS) 加密整个配置文件。要对某个文件启用 EFS，请右键单击该文件，选择“属性”，然后在“高级”设置选项卡中启用加密。此外，你也可以使用受保护的配置来创建自定义解决方案，以便加密配置文件的所选部分。请参阅[使用受保护的配置来加密配置信息](https://msdn.microsoft.com/zh-cn/library/53tyfkaw.aspx)。\n\n以下 App.config 文件包含了必需的连接值。<appSettings> 元素中的值是你从媒体服务帐户设置过程中获取的必需值。\n\n    <configuration>\n      <appSettings>\n        <add key=\"MediaServicesAccountName\" value=\"Media-Services-Account-Name\" />\n        <add key=\"MediaServicesAccountKey\" value=\"Media-Services-Account-Key\" />\n      </appSettings>\n    </configuration>\n\n\n若要从配置中检索连接值，你可以使用 **ConfigurationManager** 类，然后将相关值分配给代码中的字段：\n    \n    private static readonly string _accountName = ConfigurationManager.AppSettings[\"MediaServicesAccountName\"];\n    private static readonly string _accountKey = ConfigurationManager.AppSettings[\"MediaServicesAccountKey\"];\n\n<!---HONumber=Mooncake_0307_2016-->"
}