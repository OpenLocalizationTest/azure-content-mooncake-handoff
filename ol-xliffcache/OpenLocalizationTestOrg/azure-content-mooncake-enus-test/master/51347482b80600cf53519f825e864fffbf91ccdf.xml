{
  "nodes": [
    {
      "content": "Azure 通知中心安全推送",
      "pos": [
        28,
        42
      ]
    },
    {
      "content": "了解如何从 Azure 将安全推送通知发送到 iOS 应用。代码示例是使用 .Objective-C 和 C# 编写的。",
      "pos": [
        62,
        122
      ]
    },
    {
      "content": "Azure 通知中心安全推送",
      "pos": [
        353,
        367
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        371,
        387
      ]
    },
    {
      "content": "Windows Universal",
      "pos": [
        391,
        408
      ]
    },
    {
      "content": "iOS",
      "pos": [
        498,
        501
      ]
    },
    {
      "content": "概述",
      "pos": [
        583,
        585
      ]
    },
    {
      "content": "利用 Azure 中的推送通知支持，您可以访问易于使用且向外扩展的多平台推送基础结构，这大大简化了为移动平台的使用者应用程序和企业应用程序实现推送通知的过程。",
      "pos": [
        587,
        666
      ]
    },
    {
      "content": "由于法规或安全约束，有时应用程序可能想要在通知中包含某些无法通过标准推送通知基础结构传输的内容。本教程介绍如何通过客户端设备和应用后端之间安全且经过验证的连接发送敏感信息，以便获得相同的体验。",
      "pos": [
        668,
        764
      ]
    },
    {
      "content": "在高级别中，此流程如下所示：",
      "pos": [
        766,
        780
      ]
    },
    {
      "content": "应用后端：",
      "pos": [
        785,
        790
      ]
    },
    {
      "content": "在后端数据库中存储安全有效负载。",
      "pos": [
        797,
        813
      ]
    },
    {
      "content": "将此通知的 ID 发送到此设备（不发送任何安全信息）。",
      "pos": [
        820,
        847
      ]
    },
    {
      "content": "此设备上的应用在接收通知时：",
      "pos": [
        851,
        865
      ]
    },
    {
      "content": "此设备将联系请求安全有效负载的后端。",
      "pos": [
        872,
        890
      ]
    },
    {
      "content": "此应用可以将有效负载显示为设备上的通知。",
      "pos": [
        897,
        917
      ]
    },
    {
      "content": "请务必注意，在之前的流程（以及本教程中）中，我们假设此设备会在用户登录后在本地存储中存储身份验证令牌。这可以保证完全无缝的体验，因为该设备可以使用此令牌检索通知的安全有效负载。如果您的应用程序未在设备上存储身份验证令牌，或者如果这些令牌可能已过期，此设备应用在收到通知时应显示提示用户启动应用的通用通知。然后，应用对用户进行身份验证并显示通知有效负载。",
      "pos": [
        919,
        1095
      ]
    },
    {
      "pos": [
        1097,
        1152
      ],
      "content": "本安全推送教程演示如何安全地发送推送通知。本教程以<bpt id=\"p1\">**</bpt>通知用户<ept id=\"p1\">**</ept>教程为基础，因此您应该先完成该教程中的步骤。"
    },
    {
      "pos": [
        1156,
        1265
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本教程假设您已根据<bpt id=\"p1\">[</bpt>通知中心入门 (iOS)<ept id=\"p1\">](/documentation/articles/notification-hubs-ios-get-started)</ept> 中所述创建并配置了通知中心。"
    },
    {
      "content": "修改 iOS 项目",
      "pos": [
        1393,
        1402
      ]
    },
    {
      "pos": [
        1404,
        1466
      ],
      "content": "现在，将您的应用后端修改为只发送通知的 <bpt id=\"p1\">*</bpt>ID<ept id=\"p1\">*</ept>，您必须更改您的 iOS 应用来处理该通知并回调后端来检索要显示的安全消息。"
    },
    {
      "content": "若要实现此目标，我们必须编写逻辑来从应用后端检索安全内容。",
      "pos": [
        1468,
        1497
      ]
    },
    {
      "pos": [
        1502,
        1654
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> 中，请确保该应用将注册无提示通知，以便它可以处理从后端发送的通知 ID。添加 didFinishLaunchingWithOptions 中的 <bpt id=\"p2\">**</bpt>UIRemoteNotificationTypeNewsstandContentAvailability<ept id=\"p2\">**</ept> 选项："
    },
    {
      "pos": [
        1890,
        1928
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> 中，通过以下声明在顶部添加实现部分："
    },
    {
      "pos": [
        2096,
        2152
      ],
      "content": "然后将以下代码添加到实现部分，将占位符 <ph id=\"ph1\">`{back-end endpoint}`</ph> 替换为先前获取的后端终结点："
    },
    {
      "content": "此方法使用存储在共享首选项中的凭据调用应用后端来检索通知内容。",
      "pos": [
        4535,
        4566
      ]
    },
    {
      "pos": [
        4571,
        4685
      ],
      "content": "现在我们必须处理传入通知，并使用上面的方法来检索要显示的内容。首先，我们必须使您的 iOS 应用能在接收推送通知时在后台运行。在 <bpt id=\"p1\">**</bpt>XCode<ept id=\"p1\">**</ept> 中，在左侧面板上选择您的应用项目，然后单击中央窗格“目标”部分中的主应用目标。"
    },
    {
      "content": "然后，单击中央窗格顶部的“功能”选项卡，然后选中“远程通知”复选框。",
      "pos": [
        4690,
        4724
      ]
    },
    {
      "pos": [
        4745,
        4781
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>AppDelegate.m<ept id=\"p1\">**</ept> 中，添加以下方法来处理推送通知："
    },
    {
      "content": "请注意，最好由后端处理缺失身份验证标头属性或拒绝的情况。这些情况下的特定处理主要取决于您的目标用户体验。一种选择是显示包含用户用来进行身份验证的通用提示的通知，从而检索实际通知。",
      "pos": [
        5880,
        5969
      ]
    },
    {
      "content": "运行应用程序",
      "pos": [
        5974,
        5980
      ]
    },
    {
      "content": "若要运行应用程序，请执行以下操作：",
      "pos": [
        5982,
        5999
      ]
    },
    {
      "content": "在 XCode 中，在物理 iOS 设备上运行此应用（推送通知将无法在模拟器中正常工作）。",
      "pos": [
        6004,
        6049
      ]
    },
    {
      "content": "在 iOS 应用 UI 中，输入用户名和密码。这些信息可以是任意字符串，但必须是相同的值。",
      "pos": [
        6054,
        6099
      ]
    },
    {
      "content": "在 iOS 应用 UI 中，单击“登录”。然后单击“发送推送”。您应该能看到通知中心中所显示的安全通知。",
      "pos": [
        6104,
        6156
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"Azure 通知中心安全推送\" \n    description=\"了解如何从 Azure 将安全推送通知发送到 iOS 应用。代码示例是使用 .Objective-C 和 C# 编写的。\" \n    documentationCenter=\"ios\" \n    authors=\"wesmc7777\" \n    manager=\"dwrede\" \n    editor=\"\" \n    services=\"notification-hubs\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"10/05/2015\"\n    wacn.date=\"01/14/2016\" />\n\n# Azure 通知中心安全推送\n\n> [AZURE.SELECTOR]\n- [Windows Universal](/documentation/articles/notification-hubs-aspnet-backend-windows-dotnet-secure-push)\n- [iOS](/documentation/articles/notification-hubs-aspnet-backend-ios-secure-push)\n\n\n\n## 概述\n\n利用 Azure 中的推送通知支持，您可以访问易于使用且向外扩展的多平台推送基础结构，这大大简化了为移动平台的使用者应用程序和企业应用程序实现推送通知的过程。\n\n由于法规或安全约束，有时应用程序可能想要在通知中包含某些无法通过标准推送通知基础结构传输的内容。本教程介绍如何通过客户端设备和应用后端之间安全且经过验证的连接发送敏感信息，以便获得相同的体验。\n\n在高级别中，此流程如下所示：\n\n1. 应用后端：\n    - 在后端数据库中存储安全有效负载。\n    - 将此通知的 ID 发送到此设备（不发送任何安全信息）。\n2. 此设备上的应用在接收通知时：\n    - 此设备将联系请求安全有效负载的后端。\n    - 此应用可以将有效负载显示为设备上的通知。\n\n请务必注意，在之前的流程（以及本教程中）中，我们假设此设备会在用户登录后在本地存储中存储身份验证令牌。这可以保证完全无缝的体验，因为该设备可以使用此令牌检索通知的安全有效负载。如果您的应用程序未在设备上存储身份验证令牌，或者如果这些令牌可能已过期，此设备应用在收到通知时应显示提示用户启动应用的通用通知。然后，应用对用户进行身份验证并显示通知有效负载。\n\n本安全推送教程演示如何安全地发送推送通知。本教程以**通知用户**教程为基础，因此您应该先完成该教程中的步骤。\n\n> [AZURE.NOTE]本教程假设您已根据[通知中心入门 (iOS)](/documentation/articles/notification-hubs-ios-get-started) 中所述创建并配置了通知中心。\n\n[AZURE.INCLUDE [notification-hubs-aspnet-backend-securepush](../includes/notification-hubs-aspnet-backend-securepush.md)]\n\n## 修改 iOS 项目\n\n现在，将您的应用后端修改为只发送通知的 *ID*，您必须更改您的 iOS 应用来处理该通知并回调后端来检索要显示的安全消息。\n\n若要实现此目标，我们必须编写逻辑来从应用后端检索安全内容。\n\n1. 在 **AppDelegate.m** 中，请确保该应用将注册无提示通知，以便它可以处理从后端发送的通知 ID。添加 didFinishLaunchingWithOptions 中的 **UIRemoteNotificationTypeNewsstandContentAvailability** 选项：\n\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeNewsstandContentAvailability];\n\n2. 在 **AppDelegate.m** 中，通过以下声明在顶部添加实现部分：\n\n        @interface AppDelegate ()\n        - (void) retrieveSecurePayloadWithId:(int)payloadId completion: (void(^)(NSString*, NSError*)) completion;\n        @end\n\n3. 然后将以下代码添加到实现部分，将占位符 `{back-end endpoint}` 替换为先前获取的后端终结点：\n\n        NSString *const GetNotificationEndpoint = @\"{back-end endpoint}/api/notifications\";\n\n        - (void) retrieveSecurePayloadWithId:(int)payloadId completion: (void(^)(NSString*, NSError*)) completion;\n        {\n            // check if authenticated\n            ANHViewController* rvc = (ANHViewController*) self.window.rootViewController;\n            NSString* authenticationHeader = rvc.registerClient.authenticationHeader;\n            if (!authenticationHeader) return;\n\n\n            NSURLSession* session = [NSURLSession\n                                     sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]\n                                     delegate:nil\n                                     delegateQueue:nil];\n\n\n            NSURL* requestURL = [NSURL URLWithString:[NSString stringWithFormat:@\"%@/%d\", GetNotificationEndpoint, payloadId]];\n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:requestURL];\n            [request setHTTPMethod:@\"GET\"];\n            NSString* authorizationHeaderValue = [NSString stringWithFormat:@\"Basic %@\", authenticationHeader];\n            [request setValue:authorizationHeaderValue forHTTPHeaderField:@\"Authorization\"];\n\n            NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (!error && httpResponse.statusCode == 200)\n                {\n                    NSLog(@\"Received secure payload: %@\", [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);\n\n                    NSMutableDictionary *json = [NSJSONSerialization JSONObjectWithData:data options: NSJSONReadingMutableContainers error: &error];\n\n                    completion([json objectForKey:@\"Payload\"], nil);\n                }\n                else\n                {\n                    NSLog(@\"Error status: %ld, request: %@\", (long)httpResponse.statusCode, error);\n                    if (error)\n                        completion(nil, error);\n                    else {\n                        completion(nil, [NSError errorWithDomain:@\"APICall\" code:httpResponse.statusCode userInfo:nil]);\n                    }\n                }\n            }];\n            [dataTask resume];\n        }\n\n    此方法使用存储在共享首选项中的凭据调用应用后端来检索通知内容。\n\n4. 现在我们必须处理传入通知，并使用上面的方法来检索要显示的内容。首先，我们必须使您的 iOS 应用能在接收推送通知时在后台运行。在 **XCode** 中，在左侧面板上选择您的应用项目，然后单击中央窗格“目标”部分中的主应用目标。\n\n5. 然后，单击中央窗格顶部的“功能”选项卡，然后选中“远程通知”复选框。\n\n    ![][IOS1]\n\n\n6. 在 **AppDelegate.m** 中，添加以下方法来处理推送通知：\n\n        -(void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n        {\n            NSLog(@\"%@\", userInfo);\n\n            [self retrieveSecurePayloadWithId:[[userInfo objectForKey:@\"secureId\"] intValue] completion:^(NSString * payload, NSError *error) {\n                if (!error) {\n                    // show local notification\n                    UILocalNotification* localNotification = [[UILocalNotification alloc] init];\n                    localNotification.fireDate = [NSDate dateWithTimeIntervalSinceNow:0];\n                    localNotification.alertBody = payload;\n                    localNotification.timeZone = [NSTimeZone defaultTimeZone];\n                    [[UIApplication sharedApplication] scheduleLocalNotification:localNotification];\n\n                    completionHandler(UIBackgroundFetchResultNewData);\n                } else {\n                    completionHandler(UIBackgroundFetchResultFailed);\n                }\n            }];\n\n        }\n\n    请注意，最好由后端处理缺失身份验证标头属性或拒绝的情况。这些情况下的特定处理主要取决于您的目标用户体验。一种选择是显示包含用户用来进行身份验证的通用提示的通知，从而检索实际通知。\n\n## 运行应用程序\n\n若要运行应用程序，请执行以下操作：\n\n1. 在 XCode 中，在物理 iOS 设备上运行此应用（推送通知将无法在模拟器中正常工作）。\n\n2. 在 iOS 应用 UI 中，输入用户名和密码。这些信息可以是任意字符串，但必须是相同的值。\n\n3. 在 iOS 应用 UI 中，单击“登录”。然后单击“发送推送”。您应该能看到通知中心中所显示的安全通知。\n\n[IOS1]: ./media/notification-hubs-aspnet-backend-ios-secure-push/secure-push-ios-1.png\n\n<!---HONumber=82-->"
}