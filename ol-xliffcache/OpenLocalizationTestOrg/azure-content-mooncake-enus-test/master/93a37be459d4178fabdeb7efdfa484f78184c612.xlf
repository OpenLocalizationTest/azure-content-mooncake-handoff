<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">93a37be459d4178fabdeb7efdfa484f78184c612</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>SQL 数据仓库中的表分区 | Azure</source>
          <target state="new">SQL 数据仓库中的表分区 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>有关在开发解决方案时使用 Azure SQL 数据仓库中的表分区的技巧。</source>
          <target state="new">有关在开发解决方案时使用 Azure SQL 数据仓库中的表分区的技巧。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>SQL 数据仓库中的表分区</source>
          <target state="new">SQL 数据仓库中的表分区</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>若要将 SQL Server 分区定义迁移到 SQL 数据仓库，请执行以下操作：</source>
          <target state="new">若要将 SQL Server 分区定义迁移到 SQL 数据仓库，请执行以下操作：</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>删除 SQL Server 分区函数和方案，因为当你创建表时系统会帮你管理。</source>
          <target state="new">删除 SQL Server 分区函数和方案，因为当你创建表时系统会帮你管理。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>在创建表时定义分区。只需指定分区边界点，以及希望边界点是有效的 <ph id="ph1">`RANGE RIGHT`</ph> 还是 <ph id="ph2">`RANGE LEFT`</ph>。</source>
          <target state="new">在创建表时定义分区。只需指定分区边界点，以及希望边界点是有效的 <ph id="ph1">`RANGE RIGHT`</ph> 还是 <ph id="ph2">`RANGE LEFT`</ph>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>分区大小</source>
          <target state="new">分区大小</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SQL DW 为 DBA 提供数个表类型选项：堆、群集索引 (CI) 和群集列存储索引 (CCI)。DBA 还可以针对每个表类型分区表，还就是将其分区成多个部分，以提升性能。但是，创建具有太多分区的表实际上有可能会导致性能降低，或导致查询在某些情况下失败。对于 CCI 表，尤其要考虑到这一点。若要使数据分区有所帮助，DBA 务必要了解使用数据分区的时机，以及要创建的分区数目。这些指导旨在帮助 DBA 在遇到状况时做出最佳选择。</source>
          <target state="new">SQL DW 为 DBA 提供数个表类型选项：堆、群集索引 (CI) 和群集列存储索引 (CCI)。DBA 还可以针对每个表类型分区表，还就是将其分区成多个部分，以提升性能。但是，创建具有太多分区的表实际上有可能会导致性能降低，或导致查询在某些情况下失败。对于 CCI 表，尤其要考虑到这一点。若要使数据分区有所帮助，DBA 务必要了解使用数据分区的时机，以及要创建的分区数目。这些指导旨在帮助 DBA 在遇到状况时做出最佳选择。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>表分区通常在两种主要方式下很有用：</source>
          <target state="new">表分区通常在两种主要方式下很有用：</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>切换分区以快速截断表的某个部分。常用的设计是针对包含只供某段预先决定期限内使用的行的事实表。例如，销售事实表可能仅包含过去 36 个月的数据。在每个月月底，便从表删除最旧月份的销售数据。只要删除最旧月份的所有行即可完成此操作，但逐列删除批量数据可能花费很多时间。为了优化此方案，SQL DW 支持分区交换，使你只需执行一项操作，就能快速删除分区中的整个行集。</source>
          <target state="new">切换分区以快速截断表的某个部分。常用的设计是针对包含只供某段预先决定期限内使用的行的事实表。例如，销售事实表可能仅包含过去 36 个月的数据。在每个月月底，便从表删除最旧月份的销售数据。只要删除最旧月份的所有行即可完成此操作，但逐列删除批量数据可能花费很多时间。为了优化此方案，SQL DW 支持分区交换，使你只需执行一项操作，就能快速删除分区中的整个行集。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>如果查询在分区列上放置谓词，数据分区便可让查询轻松排除处理大量的行集（即分区）。例如，如果使用销售日期字段将销售事实表分区成 36 个月，以销售日期进行筛选的查询便可以跳过处理不符合筛选条件的分区。实际上，以这种方式使用的数据分区是粗糙的索引。</source>
          <target state="new">如果查询在分区列上放置谓词，数据分区便可让查询轻松排除处理大量的行集（即分区）。例如，如果使用销售日期字段将销售事实表分区成 36 个月，以销售日期进行筛选的查询便可以跳过处理不符合筛选条件的分区。实际上，以这种方式使用的数据分区是粗糙的索引。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>在 SQL DW 中创建群集列存储索引时，DBA 需注意事项另一个因素：行数。CCI 表可以实现高度压缩，并帮助 SQL DW 加速查询性能。由于压缩在 SQL DW 内部运行，因此 CCI 表中的每个分区在压缩数据前都必须拥有相当多的行。此外，SQL DW 在批量的分布之间分布数据，而且分区进一步分割每个分布区。为了实现最佳压缩和性能，每个分布区与分区都需要至少 100,000 个行。根据上述示例，如果销售事实表包含 36 个月的分区，并假设 SQL DW 有 60 个分布区，则销售事实表每个月应包含 600 万行，或者在填充所有月份时包含 2.16 亿行。如果表包含的行数远少于建议的最小值，DBA 应该考虑创建具有较少分区的表，以增加每个分布区的行数。</source>
          <target state="new">在 SQL DW 中创建群集列存储索引时，DBA 需注意事项另一个因素：行数。CCI 表可以实现高度压缩，并帮助 SQL DW 加速查询性能。由于压缩在 SQL DW 内部运行，因此 CCI 表中的每个分区在压缩数据前都必须拥有相当多的行。此外，SQL DW 在批量的分布之间分布数据，而且分区进一步分割每个分布区。为了实现最佳压缩和性能，每个分布区与分区都需要至少 100,000 个行。根据上述示例，如果销售事实表包含 36 个月的分区，并假设 SQL DW 有 60 个分布区，则销售事实表每个月应包含 600 万行，或者在填充所有月份时包含 2.16 亿行。如果表包含的行数远少于建议的最小值，DBA 应该考虑创建具有较少分区的表，以增加每个分布区的行数。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>若要在分区级别调整当前数据库的大小，请使用类似于下面的查询：</source>
          <target state="new">若要在分区级别调整当前数据库的大小，请使用类似于下面的查询：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>分布区总数等于我们创建表时使用的存储位置数。也就是说，每个表根据每一个分布区创建一次。</source>
          <target state="new">分布区总数等于我们创建表时使用的存储位置数。也就是说，每个表根据每一个分布区创建一次。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>你也可以大致预测有多少个行，因而预测每个分区有多大。源数据仓库中的分区再细分为每个分布区。</source>
          <target state="new">你也可以大致预测有多少个行，因而预测每个分区有多大。源数据仓库中的分区再细分为每个分布区。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>确定分区大小时，请参考以下计算公式：</source>
          <target state="new">确定分区大小时，请参考以下计算公式：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>MPP 分区大小 = SMP 分区大小 / 分布区数</source>
          <target state="new">MPP 分区大小 = SMP 分区大小 / 分布区数</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>你可以使用以下查询，找出 SQL 数据仓库数据库有多少个分布区：</source>
          <target state="new">你可以使用以下查询，找出 SQL 数据仓库数据库有多少个分布区：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>既然知道了源系统中的每个分区有多大，以及预期的 SQLDW 大小为何，就可以确定分区边界。</source>
          <target state="new">既然知道了源系统中的每个分区有多大，以及预期的 SQLDW 大小为何，就可以确定分区边界。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>工作负荷管理</source>
          <target state="new">工作负荷管理</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>需要纳入表分区决策的最后一项信息是工作负荷管理。在 SQL 数据仓库中，此功能控制在查询运行期间分配给每个分布的最大内存。有关<bpt id="p1">[</bpt><ept id="p1">工作负荷管理]</ept>的详细信息，请参阅下面的文章。理想情况下，调整分区大小时，将考虑 inmemory 操作（如列存储索引重建）。索引重建是内存密集型操作。因此，你需要确保重建分区索引不会耗尽内存。从默认角色切换到其他可用角色之一，即可增加查询可用的内存量。</source>
          <target state="new">需要纳入表分区决策的最后一项信息是工作负荷管理。在 SQL 数据仓库中，此功能控制在查询运行期间分配给每个分布的最大内存。有关<bpt id="p1">[</bpt><ept id="p1">工作负荷管理]</ept>的详细信息，请参阅下面的文章。理想情况下，调整分区大小时，将考虑 inmemory 操作（如列存储索引重建）。索引重建是内存密集型操作。因此，你需要确保重建分区索引不会耗尽内存。从默认角色切换到其他可用角色之一，即可增加查询可用的内存量。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>查询资源调控器动态管理视图即可获取每个分布的内存分配信息。事实上，内存授予小于以下数据。但是，这可以提供指导，以便你在针对数据管理操作调整分区大小时使用。</source>
          <target state="new">查询资源调控器动态管理视图即可获取每个分布的内存分配信息。事实上，内存授予小于以下数据。但是，这可以提供指导，以便你在针对数据管理操作调整分区大小时使用。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>尽量避免将分区大小调整超过超大型资源类所提供的内存授予。如果分区成长超过此数据，就冒着内存压力的风险，进而导致比较不理想的压缩。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>尽量避免将分区大小调整超过超大型资源类所提供的内存授予。如果分区成长超过此数据，就冒着内存压力的风险，进而导致比较不理想的压缩。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>分区切换</source>
          <target state="new">分区切换</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>若要切换两个表间的分区，必须确定分区对齐其各自的边界，而且表定义匹配。检查约束不适用于强制表中的值范围，源表必须包含与目标表相同的分区边界。如果情况不是如此，则分区切换将失败，因为分区元数据不会同步。</source>
          <target state="new">若要切换两个表间的分区，必须确定分区对齐其各自的边界，而且表定义匹配。检查约束不适用于强制表中的值范围，源表必须包含与目标表相同的分区边界。如果情况不是如此，则分区切换将失败，因为分区元数据不会同步。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>如何拆分包含数据的分区</source>
          <target state="new">如何拆分包含数据的分区</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>使用 <ph id="ph1">`CTAS`</ph> 语句是拆分包含数据的分区的最有效方法。如果分区表是群集列存储，则表分区必须为空才能拆分。</source>
          <target state="new">使用 <ph id="ph1">`CTAS`</ph> 语句是拆分包含数据的分区的最有效方法。如果分区表是群集列存储，则表分区必须为空才能拆分。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>以下示例显示了每个分区包含一个行的分区列存储表：</source>
          <target state="new">以下示例显示了每个分区包含一个行的分区列存储表：</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>通过创建统计信息对象，我们可以确保表元数据更加准确。如果我们省略了创建统计信息，SQL 数据仓库将使用默认值。有关统计信息的详细信息，请参阅<bpt id="p1">[</bpt>统计信息<ept id="p1">][]</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>通过创建统计信息对象，我们可以确保表元数据更加准确。如果我们省略了创建统计信息，SQL 数据仓库将使用默认值。有关统计信息的详细信息，请参阅<bpt id="p1">[</bpt>统计信息<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>然后，我们可以利用 <ph id="ph1">`sys.partitions`</ph> 目录视图查询行计数：</source>
          <target state="new">然后，我们可以利用 <ph id="ph1">`sys.partitions`</ph> 目录视图查询行计数：</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>如果尝试拆分此表，将会收到错误：</source>
          <target state="new">如果尝试拆分此表，将会收到错误：</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>消息 35346，级别 15，状态 1，行 44: ALTER PARTITION 语句的 SPLIT 子句失败，因为分区不为空。仅当表上存在列存储索引时，才可以拆分空分区。请考虑在发出 ALTER PARTITION 语句前禁用列存储索引，然后在 ALTER PARTITION 完成后重建列存储索引。</source>
          <target state="new">消息 35346，级别 15，状态 1，行 44: ALTER PARTITION 语句的 SPLIT 子句失败，因为分区不为空。仅当表上存在列存储索引时，才可以拆分空分区。请考虑在发出 ALTER PARTITION 语句前禁用列存储索引，然后在 ALTER PARTITION 完成后重建列存储索引。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>但是，我们可以使用 <ph id="ph1">`CTAS`</ph> 创建新表以保存数据。</source>
          <target state="new">但是，我们可以使用 <ph id="ph1">`CTAS`</ph> 创建新表以保存数据。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>分区边界已对齐，因此允许切换。这使源表有空白分区可供我们完成后续拆分。</source>
          <target state="new">分区边界已对齐，因此允许切换。这使源表有空白分区可供我们完成后续拆分。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>接下来只需使用 <ph id="ph1">`CTAS`</ph> 将数据对齐新的分区边界，并将数据切换回到主表</source>
          <target state="new">接下来只需使用 <ph id="ph1">`CTAS`</ph> 将数据对齐新的分区边界，并将数据切换回到主表</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>完成数据移动后，最好是刷新目标表上的统计信息，确保统计信息可在其各自的分区中准确反映数据的新分布：</source>
          <target state="new">完成数据移动后，最好是刷新目标表上的统计信息，确保统计信息可在其各自的分区中准确反映数据的新分布：</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>表分区源代码管理</source>
          <target state="new">表分区源代码管理</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>若要避免表定义在源代码管理系统中<bpt id="p1">**</bpt>失效<ept id="p1">**</ept>，可以考虑以下方法：</source>
          <target state="new">若要避免表定义在源代码管理系统中<bpt id="p1">**</bpt>失效<ept id="p1">**</ept>，可以考虑以下方法：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>将表创建为分区表，但不包含分区值</source>
          <target state="new">将表创建为分区表，但不包含分区值</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>在部署过程中 <ph id="ph1">`SPLIT`</ph> 表：</source>
          <target state="new">在部署过程中 <ph id="ph1">`SPLIT`</ph> 表：</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>使用这种方法时，源代码管理中的代码将保持静态，允许动态的分区边界值，并不断地与仓库一起演进。</source>
          <target state="new">使用这种方法时，源代码管理中的代码将保持静态，允许动态的分区边界值，并不断地与仓库一起演进。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>相比于 SQL Server，分区切换有一些差异。请务必阅读<bpt id="p1">[</bpt>迁移代码<ept id="p1">][]</ept>，以深入了解此主题。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>相比于 SQL Server，分区切换有一些差异。请务必阅读<bpt id="p1">[</bpt>迁移代码<ept id="p1">][]</ept>，以深入了解此主题。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>成功将数据库架构迁移到 SQL 数据仓库后，可以继续阅读下列文章之一：</source>
          <target state="new">成功将数据库架构迁移到 SQL 数据仓库后，可以继续阅读下列文章之一：</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>迁移数据</source>
          <target state="new">迁移数据</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>迁移代码</source>
          <target state="new">迁移代码</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>