<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">afde9e4783d82f5feafbf3e0d7334f40f29fb0c5</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>轮询长时运行的操作</source>
          <target state="new">轮询长时运行的操作</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>本主题展示了如何轮询长时运行的操作。</source>
          <target state="new">本主题展示了如何轮询长时运行的操作。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用 Azure 媒体服务传送实时流</source>
          <target state="new">使用 Azure 媒体服务传送实时流</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Azure 媒体服务提供了相应的 API 用来请求媒体服务启动操作（例如创建、启动、停止或删除频道）。这些操作是长时运行的。</source>
          <target state="new">Azure 媒体服务提供了相应的 API 用来请求媒体服务启动操作（例如创建、启动、停止或删除频道）。这些操作是长时运行的。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>媒体服务 .NET SDK 提供了用来发送请求并等待操作完成的 API（在内部，这些 API 以特定的时间间隔轮询操作进度）。例如，当调用 channel.Start() 时，该方法将在频道启动后返回。你还可以使用异步版本：await channel.StartAsync()（有关基于任务的异步模式的信息，请参阅 <bpt id="p1">[</bpt>TAP<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/hh873175(v=vs.110).aspx)</ept>)。发送操作请求并且在操作完成之前一直轮询操作状态的 API 称作“轮询方法”。建议为富客户端应用程序和/或有状态服务使用这些方法（特别是异步版本）。</source>
          <target state="new">媒体服务 .NET SDK 提供了用来发送请求并等待操作完成的 API（在内部，这些 API 以特定的时间间隔轮询操作进度）。例如，当调用 channel.Start() 时，该方法将在频道启动后返回。你还可以使用异步版本：await channel.StartAsync()（有关基于任务的异步模式的信息，请参阅 <bpt id="p1">[</bpt>TAP<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/hh873175(v=vs.110).aspx)</ept>)。发送操作请求并且在操作完成之前一直轮询操作状态的 API 称作“轮询方法”。建议为富客户端应用程序和/或有状态服务使用这些方法（特别是异步版本）。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>某些情况下，应用程序不能等待长时运行的 http 请求并且希望手动轮询操作进度。一个典型的示例是与无状态 web 服务进行交互的浏览器：当浏览器请求创建频道时，web 服务会启动一个长时运行的操作并将操作 ID 返回到浏览器。然后，浏览器可以根据该 ID 询问 web 服务来获取操作状态。媒体服务 .NET SDK 提供了非常适用于此情况的 API。这些 API 称为“非轮询方法”。</source>
          <target state="new">某些情况下，应用程序不能等待长时运行的 http 请求并且希望手动轮询操作进度。一个典型的示例是与无状态 web 服务进行交互的浏览器：当浏览器请求创建频道时，web 服务会启动一个长时运行的操作并将操作 ID 返回到浏览器。然后，浏览器可以根据该 ID 询问 web 服务来获取操作状态。媒体服务 .NET SDK 提供了非常适用于此情况的 API。这些 API 称为“非轮询方法”。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>"非轮询方法"具有以下命名模式：Send<bpt id="p1">*</bpt>OperationName<ept id="p1">*</ept>Operation（例如，SendCreateOperation）。Send<bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept>Operation 方法返回 <bpt id="p3">**</bpt>IOperation<ept id="p3">**</ept> 对象；返回的对象包含可以用来跟踪操作的信息。Send<bpt id="p4">*</bpt>OperationName<ept id="p4">*</ept>OperationAsync 方法将返回 <bpt id="p5">**</bpt>Task<ph id="ph1">&lt;IOperation&gt;</ph><ept id="p5">**</ept>。</source>
          <target state="new">"非轮询方法"具有以下命名模式：Send<bpt id="p1">*</bpt>OperationName<ept id="p1">*</ept>Operation（例如，SendCreateOperation）。Send<bpt id="p2">*</bpt>OperationName<ept id="p2">*</ept>Operation 方法返回 <bpt id="p3">**</bpt>IOperation<ept id="p3">**</ept> 对象；返回的对象包含可以用来跟踪操作的信息。Send<bpt id="p4">*</bpt>OperationName<ept id="p4">*</ept>OperationAsync 方法将返回 <bpt id="p5">**</bpt>Task<ph id="ph1">&lt;IOperation&gt;</ph><ept id="p5">**</ept>。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>当前，以下类支持非轮询方法：<bpt id="p1">**</bpt>Channel<ept id="p1">**</ept>、<bpt id="p2">**</bpt>StreamingEndpoint<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Program<ept id="p3">**</ept>。</source>
          <target state="new">当前，以下类支持非轮询方法：<bpt id="p1">**</bpt>Channel<ept id="p1">**</ept>、<bpt id="p2">**</bpt>StreamingEndpoint<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Program<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>若要轮询操作状态，请对 <bpt id="p1">**</bpt>OperationBaseCollection<ept id="p1">**</ept> 类使用 <bpt id="p2">**</bpt>GetOperation<ept id="p2">**</ept> 方法。使用以下时间间隔来检查操作状态：对于 <bpt id="p3">**</bpt>Channel<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>StreamingEndpoint<ept id="p4">**</ept> 操作，使用 30 秒；对于 <bpt id="p5">**</bpt>Program<ept id="p5">**</ept> 操作，使用 10 秒。</source>
          <target state="new">若要轮询操作状态，请对 <bpt id="p1">**</bpt>OperationBaseCollection<ept id="p1">**</ept> 类使用 <bpt id="p2">**</bpt>GetOperation<ept id="p2">**</ept> 方法。使用以下时间间隔来检查操作状态：对于 <bpt id="p3">**</bpt>Channel<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>StreamingEndpoint<ept id="p4">**</ept> 操作，使用 30 秒；对于 <bpt id="p5">**</bpt>Program<ept id="p5">**</ept> 操作，使用 10 秒。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>示例</source>
          <target state="new">示例</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>以下示例定义了一个名为 <bpt id="p1">**</bpt>ChannelOperations<ept id="p1">**</ept> 的类。可以将该类定义用作你的 web 服务类定义的起点。为简单起见，以下示例使用了方法的非异步版本。</source>
          <target state="new">以下示例定义了一个名为 <bpt id="p1">**</bpt>ChannelOperations<ept id="p1">**</ept> 的类。可以将该类定义用作你的 web 服务类定义的起点。为简单起见，以下示例使用了方法的非异步版本。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>示例还展示了客户端可以如何使用该类。</source>
          <target state="new">示例还展示了客户端可以如何使用该类。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>ChannelOperations 类定义</source>
          <target state="new">ChannelOperations 类定义</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>客户端代码</source>
          <target state="new">客户端代码</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>