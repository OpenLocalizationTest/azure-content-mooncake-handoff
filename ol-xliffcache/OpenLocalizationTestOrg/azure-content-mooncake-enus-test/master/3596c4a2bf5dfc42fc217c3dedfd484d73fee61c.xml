{
  "nodes": [
    {
      "content": "在 HDInsight 中运行 Hadoop 示例 | Azure",
      "pos": [
        27,
        60
      ]
    },
    {
      "content": "使用所提供的示例开始使用 Azure HDInsight 服务。在数据群集中使用运行 MapReduce 程序的 PowerShell 脚本。",
      "pos": [
        79,
        150
      ]
    },
    {
      "content": "在基于 Windows 的 HDInsight 中运行 Hadoop MapReduce 示例",
      "pos": [
        386,
        433
      ]
    },
    {
      "content": "为帮助你开始使用 Azure HDInsight 在 Hadoop 群集上运行 MapReduce 作业，我们提供了一组示例。在你创建的每一个 HDInsight 托管群集上都可以使用这些示例。运行这些示例会让你熟悉使用 Azure PowerShell cmdlet 在 Hadoop 群集上运行作业。",
      "pos": [
        518,
        670
      ]
    },
    {
      "pos": [
        674,
        730
      ],
      "content": "<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>字数统计<ept id=\"p2\">**</ept><ept id=\"p1\">](#hdinsight-sample-wordcount)</ept>：计算单词在文本文件中出现的次数。"
    },
    {
      "pos": [
        733,
        819
      ],
      "content": "<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>C# 流式处理字数统计<ept id=\"p2\">**</ept><ept id=\"p1\">](#hdinsight-sample-csharp-streaming)</ept>：使用 Hadoop 流式处理接口计算单词在文本文件中出现的次数。"
    },
    {
      "pos": [
        822,
        891
      ],
      "content": "<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>Pi 估计器<ept id=\"p2\">**</ept><ept id=\"p1\">](#hdinsight-sample-pi-estimator)</ept>：使用统计学方法（拟蒙特卡罗法）来估算 pi 值。"
    },
    {
      "pos": [
        894,
        1050
      ],
      "content": "<bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>10-GB Graysort<ept id=\"p2\">**</ept><ept id=\"p1\">](#hdinsight-sample-10gb-graysort)</ept>：使用 HDInsight 对 10 GB 文件运行常规用途的 GraySort。有三个作业要运行：Teragen 生成数据，Terasort 对数据排序，而 Teravalidate 确认数据已正确排序。"
    },
    {
      "pos": [
        1053,
        1077
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>可以在附录中找到源代码。"
    },
    {
      "content": "Web 上有许多介绍 Hadoop 相关技术（例如基于 Java 的 MapReduce 编程和流式处理）的其他文档，以及有关 Windows PowerShell 脚本中使用的 cmdlet 的文档。有关这些资源的详细信息，请参阅：",
      "pos": [
        1079,
        1196
      ]
    },
    {
      "content": "为 HDInsight 中的 Hadoop 开发 Java MapReduce 程序",
      "pos": [
        1201,
        1243
      ]
    },
    {
      "content": "为 HDInsight 开发 C# Hadoop 流式处理程序",
      "pos": [
        1313,
        1344
      ]
    },
    {
      "content": "在 HDInsight 中提交 Hadoop 作业",
      "pos": [
        1421,
        1446
      ]
    },
    {
      "content": "Azure HDInsight 简介",
      "pos": [
        1522,
        1540
      ]
    },
    {
      "content": "现今，许多人选择 Hive 和 Pig，而不是 MapReduce。有关详细信息，请参阅：",
      "pos": [
        1567,
        1612
      ]
    },
    {
      "content": "在 HDInsight 中使用 Hive",
      "pos": [
        1617,
        1637
      ]
    },
    {
      "content": "在 HDInsight 中使用 Pig",
      "pos": [
        1686,
        1705
      ]
    },
    {
      "pos": [
        1752,
        1761
      ],
      "content": "<bpt id=\"p1\">**</bpt>先决条件<ept id=\"p1\">**</ept>："
    },
    {
      "pos": [
        1765,
        1821
      ],
      "content": "<bpt id=\"p1\">**</bpt>一个 Azure 订阅<ept id=\"p1\">**</ept>。请参阅<bpt id=\"p2\">[</bpt>获取 Azure 试用版<ept id=\"p2\">](/pricing/1rmb-trial/)</ept>。"
    },
    {
      "pos": [
        1824,
        1952
      ],
      "content": "<bpt id=\"p1\">**</bpt>一个 HDInsight 群集<ept id=\"p1\">**</ept>。有关可用于创建这类群集的不同方法的说明，请参阅<bpt id=\"p2\">[</bpt>在 HDInsight 中创建 Hadoop 群集<ept id=\"p2\">](/documentation/articles/hdinsight-provision-clusters-v1)</ept>。"
    },
    {
      "pos": [
        1955,
        2066
      ],
      "content": "<bpt id=\"p1\">**</bpt>配备 Azure PowerShell 的工作站<ept id=\"p1\">**</ept>。请参阅<bpt id=\"p2\">[</bpt>安装和使用 Azure PowerShell<ept id=\"p2\">](/documentation/articles/powershell-install-configure)</ept>。"
    },
    {
      "pos": [
        2070,
        2123
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"hdinsight-sample-wordcount\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 字数统计 - Java"
    },
    {
      "pos": [
        2126,
        2318
      ],
      "content": "若要提交 MapReduce 项目，请先创建 MapReduce 作业定义。在作业定义中，指定 MapReduce 程序 jar 文件和 jar 文件的位置（即，* *<bpt id=\"p1\">**</bpt>wasb:///example/jars/hadoop-mapreduce-examples.jar<ept id=\"p1\">**</ept>）、类名和参数。Wordcount MapReduce 程序采用两个参数：用于计算单词数的源文件和输出位置。"
    },
    {
      "pos": [
        2320,
        2392
      ],
      "content": "可以在<bpt id=\"p1\">[</bpt>附录 A<ept id=\"p1\">](#apendix-a---the-word-count-MapReduce-program-in-java)</ept> 中找到源代码。"
    },
    {
      "pos": [
        2394,
        2535
      ],
      "content": "有关开发 Java MapReduce 程序的过程，请参阅<bpt id=\"p1\">[</bpt>开发适用于 HDInsight 中的 Hadoop 的 Java MapReduce 程序<ept id=\"p1\">](/documentation/articles/hdinsight-develop-deploy-java-mapreduce)</ept>"
    },
    {
      "content": "提交字数统计 MapReduce 作业",
      "pos": [
        2540,
        2559
      ]
    },
    {
      "pos": [
        2566,
        2659
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>Windows PowerShell ISE<ept id=\"p1\">**</ept>。有关说明，请参阅<bpt id=\"p2\">[</bpt>安装和配置 Azure PowerShell<ept id=\"p2\">][powershell-install-configure]</ept>。"
    },
    {
      "content": "粘贴以下 PowerShell 脚本：",
      "pos": [
        2663,
        2682
      ]
    },
    {
      "pos": [
        4831,
        4918
      ],
      "content": "MapReduce 作业将生成一个名为 <bpt id=\"p1\">*</bpt>part-r-00000<ept id=\"p1\">*</ept> 的文件，其中包含单词和计数。该脚本使用 <bpt id=\"p2\">**</bpt>findstr<ept id=\"p2\">**</ept> 命令来列出包含“there”的所有单词。"
    },
    {
      "content": "设置前 3 个变量，然后运行脚本。",
      "pos": [
        4923,
        4940
      ]
    },
    {
      "pos": [
        4945,
        5008
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"hdinsight-sample-csharp-streaming\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 字数统计 - C# 流式处理"
    },
    {
      "content": "Hadoop 向 MapReduce 提供了一个流式处理 API，利用它，你可以采用 Java 之外的其他语言来编写映射函数和化简函数。",
      "pos": [
        5010,
        5078
      ]
    },
    {
      "content": "在示例中，映射器和化简器都是可执行程序，它们从 [stdin][stdin-stdout-stderr] 读取输入（逐行）并将输出结果发送到 [stdout][stdin-stdout-stderr]。程序计算文本中所有单词的数量。",
      "pos": [
        5080,
        5196
      ]
    },
    {
      "pos": [
        5198,
        5314
      ],
      "content": "如果为<bpt id=\"p1\">**</bpt>映射器<ept id=\"p1\">**</ept>指定可执行文件，则当初始化映射器时，每个映射器任务都将启动此可执行文件作为一个单独的进程。当映射器任务运行时，它将其输入转换为行，并将这些行馈送到进程的 [stdin][stdin-stdout-stderr]。"
    },
    {
      "content": "同时，映射器从进程的 stdout 中收集面向行的输出。然后将每行转换为一个键/值对（作为映射器的输出收集）。默认情况下，一行的前缀直至第一个制表符是键，而该行的剩余部分（不包括制表符）是值。如果行中没有制表符，则整行被视为键，而值为 Null。",
      "pos": [
        5316,
        5439
      ]
    },
    {
      "pos": [
        5441,
        5561
      ],
      "content": "如果为<bpt id=\"p1\">**</bpt>化简器<ept id=\"p1\">**</ept>指定可执行文件，则当初始化化简器时，每个化简器任务都将启动此可执行文件作为一个单独的进程。当化简器任务运行时，它将其输入键/值对转换为行，并将这些行馈送到进程的 [stdin][stdin-stdout-stderr]。"
    },
    {
      "content": "同时，化简器从进程的 [stdout][stdin-stdout-stderr] 中收集面向行的输出。然后将每行转换为一个键/值对（作为化简器的输出收集）。默认情况下，一行的前缀直至第一个制表符是键，而该行的剩余部分（不包括制表符）是值。",
      "pos": [
        5563,
        5682
      ]
    },
    {
      "content": "有关 Hadoop 流式处理接口的详细信息，请参阅 [Hadoop 流式处理][hadoop-streaming]。",
      "pos": [
        5684,
        5742
      ]
    },
    {
      "content": "提交 C# 流式处理字数统计作业",
      "pos": [
        5746,
        5762
      ]
    },
    {
      "pos": [
        5768,
        5823
      ],
      "content": "按照<bpt id=\"p1\">[</bpt>字数统计 - Java<ept id=\"p1\">](#word-count-java)</ept> 中的过程操作，并将作业定义替换为以下内容："
    },
    {
      "content": "输出文件应该是：",
      "pos": [
        6265,
        6273
      ]
    },
    {
      "pos": [
        6376,
        6427
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"hdinsight-sample-pi-estimator\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> PI 估计器"
    },
    {
      "content": "pi 估计器使用统计学方法（拟蒙特卡罗法）来估算 pi 值。单位平方形内部随机放置的点也落入该平方形内嵌的圆圈内，其概率等于圆圈面积 pi/4。可以从 4R 的值来估算 pi 的值，其中 R 是落入圆圈内的点数与平方形内总点数的比率。所使用的取样点越多，估算值越准确。",
      "pos": [
        6429,
        6563
      ]
    },
    {
      "content": "为此示例提供的脚本提交了一个 Hadoop jar 作业，设置为使用特定的值（16 个映射）运行，其中每个映射都必须通过参数值计算 1 千万个取样点。可以更改这些参数值以改进 pi 的估算值。例如，pi 采用前 10 位小数时为 3.1415926535。",
      "pos": [
        6565,
        6693
      ]
    },
    {
      "content": "提交 pi 估计器作业",
      "pos": [
        6697,
        6708
      ]
    },
    {
      "pos": [
        6714,
        6769
      ],
      "content": "按照<bpt id=\"p1\">[</bpt>字数统计 - Java<ept id=\"p1\">](#word-count-java)</ept> 中的过程操作，并将作业定义替换为以下内容："
    },
    {
      "pos": [
        7066,
        7126
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"hdinsight-sample-10gb-graysort\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 10-GB Graysort"
    },
    {
      "pos": [
        7128,
        7356
      ],
      "content": "此示例使用适中的 10GB 数据，这样它运行时能相对快一点。它使用由 Owen O'Malley 和 Arun Murthy 开发的 MapReduce 应用程序，此应用程序以 0.578TB/分钟（100TB 用时 173 分钟）的速率赢得了 2009 年年度常用（“daytona”）TB 级排序基准。有关这一排序基准和其他排序基准的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Sortbenchmark<ept id=\"p1\">](http://sortbenchmark.org/)</ept> Web 应用。"
    },
    {
      "content": "本示例使用三组 MapReduce 程序：",
      "pos": [
        7358,
        7379
      ]
    },
    {
      "pos": [
        7384,
        7428
      ],
      "content": "<bpt id=\"p1\">**</bpt>TeraGen<ept id=\"p1\">**</ept> 是一个 MapReduce 程序，你可用它来生成要排序的数据行。"
    },
    {
      "pos": [
        7432,
        7641
      ],
      "content": "<bpt id=\"p1\">**</bpt>TeraSort<ept id=\"p1\">**</ept> 以输入数据为例，使用 MapReduce 将数据排序到总序中。TeraSort 是 MapReduce 函数的一种标准排序，但自定义的分区程序除外，此分区程序使用 N-1 个抽样键（用于定义每次简化的键范围）的已排序列表。具体说来，sample[i-1] &lt;= key &lt; sample[i] 的所有键都将会发送到化简变量 i。这样可确保化简变量 i 的输出全都小于化简变量 i+1 的输出。"
    },
    {
      "pos": [
        7645,
        7817
      ],
      "content": "<bpt id=\"p1\">**</bpt>TeraValidate<ept id=\"p1\">**</ept> 是一个 MapReduce 程序，用于验证输出是否已全局排序。它在输出目录中对于每个文件创建一个映射，每个映射都确保每个键均小于或等于前一个键。映射函数也会生成每个文件的第一个和最后一个键的记录，而化简函数会确保文件 i 的第一个键大于文件 i-1 的最后一个键。任何问题都会报告为包含故障键的化简的输出结果。"
    },
    {
      "content": "所有三个应用程序所使用的输入和输出格式都以正确格式读写文本文件。化简的输出结果的复制设置为 1，而不是默认值 3，因为基准比赛不要求输出结果数据复制到多个节点上。",
      "pos": [
        7819,
        7900
      ]
    },
    {
      "content": "此示例要求三个任务，每个任务对应于简介部分介绍的一个 MapReduce 程序：",
      "pos": [
        7902,
        7942
      ]
    },
    {
      "pos": [
        7947,
        7985
      ],
      "content": "通过运行 <bpt id=\"p1\">**</bpt>TeraGen<ept id=\"p1\">**</ept> MapReduce 作业生成要排序的数据。"
    },
    {
      "pos": [
        7989,
        8027
      ],
      "content": "通过运行 <bpt id=\"p1\">**</bpt>TeraSort<ept id=\"p1\">**</ept> MapReduce 作业对数据进行排序。"
    },
    {
      "pos": [
        8031,
        8075
      ],
      "content": "通过运行 <bpt id=\"p1\">**</bpt>TeraValidate<ept id=\"p1\">**</ept> MapReduce 作业确认数据已正确排序。"
    },
    {
      "content": "提交作业",
      "pos": [
        8079,
        8083
      ]
    },
    {
      "pos": [
        8089,
        8140
      ],
      "content": "按照<bpt id=\"p1\">[</bpt>字数统计 - Java<ept id=\"p1\">](#word-count-java)</ept> 中的过程操作，并使用以下作业定义："
    },
    {
      "pos": [
        8146,
        8456
      ],
      "content": "$teragen = New-AzureHDInsightMapReduceJobDefinition `\n                              -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `\n                              -ClassName \"teragen\" `\n                              -Arguments \"-Dmapred.map.tasks=50\", \"100000000\", \"/example/data/10GB-sort-input\"",
      "leadings": [
        "",
        "  ",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "$teragen = New-AzureHDInsightMapReduceJobDefinition <ph id=\"ph1\">`\n                              -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `</ph>",
          "pos": [
            0,
            140
          ]
        },
        {
          "content": "-ClassName \"teragen\" `",
          "pos": [
            171,
            193
          ]
        },
        {
          "content": "-Arguments \"-Dmapred.map.tasks=50\", \"100000000\", \"/example/data/10GB-sort-input\"",
          "pos": [
            224,
            304
          ]
        }
      ]
    },
    {
      "pos": [
        8466,
        8827
      ],
      "content": "$terasort = New-AzureHDInsightMapReduceJobDefinition `\n                              -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `\n                              -ClassName \"terasort\" `\n                              -Arguments \"-Dmapred.map.tasks=50\", \"-Dmapred.reduce.tasks=25\", \"/example/data/10GB-sort-input\", \"/example/data/10GB-sort-output\"",
      "leadings": [
        "",
        "  ",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "$terasort = New-AzureHDInsightMapReduceJobDefinition <ph id=\"ph1\">`\n                              -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `</ph>",
          "pos": [
            0,
            141
          ]
        },
        {
          "content": "-ClassName \"terasort\" `",
          "pos": [
            172,
            195
          ]
        },
        {
          "content": "-Arguments \"-Dmapred.map.tasks=50\", \"-Dmapred.reduce.tasks=25\", \"/example/data/10GB-sort-input\", \"/example/data/10GB-sort-output\"",
          "pos": [
            226,
            355
          ]
        }
      ]
    },
    {
      "pos": [
        8837,
        9209
      ],
      "content": "$teravalidate = New-AzureHDInsightMapReduceJobDefinition `\n                              -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `\n                              -ClassName \"teravalidate\" `\n                              -Arguments \"-Dmapred.map.tasks=50\", \"-Dmapred.reduce.tasks=25\", \"/example/data/10GB-sort-output\", \"/example/data/10GB-sort-validate\"",
      "leadings": [
        "",
        "  ",
        "  ",
        "  "
      ],
      "nodes": [
        {
          "content": "$teravalidate = New-AzureHDInsightMapReduceJobDefinition <ph id=\"ph1\">`\n                              -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `</ph>",
          "pos": [
            0,
            145
          ]
        },
        {
          "content": "-ClassName \"teravalidate\" `",
          "pos": [
            176,
            203
          ]
        },
        {
          "content": "-Arguments \"-Dmapred.map.tasks=50\", \"-Dmapred.reduce.tasks=25\", \"/example/data/10GB-sort-output\", \"/example/data/10GB-sort-validate\"",
          "pos": [
            234,
            366
          ]
        }
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        9214,
        9218
      ]
    },
    {
      "content": "从本文和每个示例的相关文章中，你了解到如何使用 Azure PowerShell 运行 HDInsight 群集附带的示例。有关 Pig、Hive 和 MapReduce 如何与 HDInsight 配合使用的教程，请参阅以下主题：",
      "pos": [
        9221,
        9337
      ]
    },
    {
      "content": "将 Hadoop 与 HDInsight 中的 Hive 配合使用以分析手机使用情况",
      "pos": [
        9342,
        9384
      ]
    },
    {
      "content": "将 Pig 与 HDInsight 上的 Hadoop 配合使用",
      "pos": [
        9412,
        9444
      ]
    },
    {
      "content": "将 Hive 与 HDInsight 上的 Hadoop 配合使用",
      "pos": [
        9468,
        9501
      ]
    },
    {
      "content": "在 HDInsight 中提交 Hadoop 作业",
      "pos": [
        9526,
        9551
      ]
    },
    {
      "content": "Azure HDInsight SDK 文档",
      "pos": [
        9579,
        9601
      ]
    },
    {
      "content": "在 HDInsight 中调试 Hadoop：错误消息",
      "pos": [
        9635,
        9662
      ]
    },
    {
      "pos": [
        9686,
        9789
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"word-count-java\" id=\"apendix-a---the-word-count-MapReduce-program-in-java\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 附录 A - 字数统计源代码"
    },
    {
      "content": "附录 B - 字数统计流式处理源代码",
      "pos": [
        12256,
        12274
      ]
    },
    {
      "content": "MapReduce 程序使用 cat.exe 应用程序作为映射接口将文本流式传输到控制台，并使用 wc.exe 应用程序作为化简接口来统计从文档中流式传输的字数。映射器和化简器都从标准输入流 (stdin) 逐行读取字符，并写入到标准输出流 (stdout)。",
      "pos": [
        12276,
        12406
      ]
    },
    {
      "pos": [
        12947,
        13072
      ],
      "content": "cat.cs 文件中的映射器代码使用 <bpt id=\"p1\">[</bpt>StreamReader<ept id=\"p1\">][streamreader]</ept> 对象将传入流的字符读入到控制台，然后控制台使用静态 <bpt id=\"p2\">[</bpt>Console.Writeline<ept id=\"p2\">][console-writeline]</ept> 方法将流写入标准输出流。"
    },
    {
      "pos": [
        13703,
        13920
      ],
      "content": "wc.cs 文件中的化简器代码使用 <bpt id=\"p1\">[</bpt>StreamReader<ept id=\"p1\">][streamreader]</ept> 对象从 cat.exe 映射器输出的标准输入流读取字符。当它使用 <bpt id=\"p2\">[</bpt>Console.Writeline<ept id=\"p2\">][console-writeline]</ept> 方法读取字符时，它将通过统计每个单词末尾的空格和行结束字符的数目来计算单词数量。然后使用 <bpt id=\"p3\">[</bpt>Console.Writeline<ept id=\"p3\">][console-writeline]</ept> 方法将总数写入标准输出流中。"
    },
    {
      "content": "附录 C - PI 估计器源代码",
      "pos": [
        13929,
        13945
      ]
    },
    {
      "content": "在下面可以检查包含映射器函数和化简器函数的 pi estimator Java 代码。映射器程序生成在单位平方形内部随机放置的指定点数，然后计算位于圆圈内部的这些点的数目。化简器程序累计由映射器统计的点数，然后根据公式 4R 估算 pi 的值，其中 R 是圆圈内统计的点数与方形内总点数的比率。",
      "pos": [
        13947,
        14094
      ]
    },
    {
      "content": "附录 D - 10gb graysort 源代码",
      "pos": [
        25600,
        25624
      ]
    },
    {
      "content": "这一部分提供了 TeraSort MapReduce 程序的代码以供检查。",
      "pos": [
        25626,
        25663
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"在 HDInsight 中运行 Hadoop 示例 | Azure\"\n    description=\"使用所提供的示例开始使用 Azure HDInsight 服务。在数据群集中使用运行 MapReduce 程序的 PowerShell 脚本。\"\n    services=\"hdinsight\"\n    documentationCenter=\"\"\n    tags=\"azure-portal\"\n    authors=\"mumian\"\n    manager=\"paulettm\"\n    editor=\"cgronlun\"/>\n\n<tags\n    ms.service=\"hdinsight\"\n    ms.date=\"10/29/2015\"\n    wacn.date=\"01/21/2016\"/>\n\n#在基于 Windows 的 HDInsight 中运行 Hadoop MapReduce 示例\n\n[AZURE.INCLUDE [samples-selector](../includes/hdinsight-run-samples-selector.md)]\n\n为帮助你开始使用 Azure HDInsight 在 Hadoop 群集上运行 MapReduce 作业，我们提供了一组示例。在你创建的每一个 HDInsight 托管群集上都可以使用这些示例。运行这些示例会让你熟悉使用 Azure PowerShell cmdlet 在 Hadoop 群集上运行作业。\n\n- [**字数统计**](#hdinsight-sample-wordcount)：计算单词在文本文件中出现的次数。\n- [**C# 流式处理字数统计**](#hdinsight-sample-csharp-streaming)：使用 Hadoop 流式处理接口计算单词在文本文件中出现的次数。\n- [**Pi 估计器**](#hdinsight-sample-pi-estimator)：使用统计学方法（拟蒙特卡罗法）来估算 pi 值。\n- [**10-GB Graysort**](#hdinsight-sample-10gb-graysort)：使用 HDInsight 对 10 GB 文件运行常规用途的 GraySort。有三个作业要运行：Teragen 生成数据，Terasort 对数据排序，而 Teravalidate 确认数据已正确排序。\n\n>[AZURE.NOTE]可以在附录中找到源代码。\n\nWeb 上有许多介绍 Hadoop 相关技术（例如基于 Java 的 MapReduce 编程和流式处理）的其他文档，以及有关 Windows PowerShell 脚本中使用的 cmdlet 的文档。有关这些资源的详细信息，请参阅：\n\n- [为 HDInsight 中的 Hadoop 开发 Java MapReduce 程序](/documentation/articles/hdinsight-develop-deploy-java-mapreduce)\n- [为 HDInsight 开发 C# Hadoop 流式处理程序](/documentation/articles/hdinsight-hadoop-develop-deploy-streaming-jobs)\n- [在 HDInsight 中提交 Hadoop 作业](/documentation/articles/hdinsight-submit-hadoop-jobs-programmatically)\n- [Azure HDInsight 简介][hdinsight-introduction]\n\n现今，许多人选择 Hive 和 Pig，而不是 MapReduce。有关详细信息，请参阅：\n\n- [在 HDInsight 中使用 Hive](/documentation/articles/hdinsight-use-hive)\n- [在 HDInsight 中使用 Pig](/documentation/articles/hdinsight-use-pig)\n \n**先决条件**：\n\n- **一个 Azure 订阅**。请参阅[获取 Azure 试用版](/pricing/1rmb-trial/)。\n- **一个 HDInsight 群集**。有关可用于创建这类群集的不同方法的说明，请参阅[在 HDInsight 中创建 Hadoop 群集](/documentation/articles/hdinsight-provision-clusters-v1)。\n- **配备 Azure PowerShell 的工作站**。请参阅[安装和使用 Azure PowerShell](/documentation/articles/powershell-install-configure)。\n\n##<a name=\"hdinsight-sample-wordcount\"></a> 字数统计 - Java \n\n若要提交 MapReduce 项目，请先创建 MapReduce 作业定义。在作业定义中，指定 MapReduce 程序 jar 文件和 jar 文件的位置（即，* ***wasb:///example/jars/hadoop-mapreduce-examples.jar**）、类名和参数。Wordcount MapReduce 程序采用两个参数：用于计算单词数的源文件和输出位置。\n\n可以在[附录 A](#apendix-a---the-word-count-MapReduce-program-in-java) 中找到源代码。\n\n有关开发 Java MapReduce 程序的过程，请参阅[开发适用于 HDInsight 中的 Hadoop 的 Java MapReduce 程序](/documentation/articles/hdinsight-develop-deploy-java-mapreduce)\n \n**提交字数统计 MapReduce 作业**\n\n1. 打开 **Windows PowerShell ISE**。有关说明，请参阅[安装和配置 Azure PowerShell][powershell-install-configure]。\n2. 粘贴以下 PowerShell 脚本：\n\n        $subscriptionName = \"<Azure Subscription Name>\"\n        $clusterName = \"<HDInsight cluster name>\"             # HDInsight cluster name\n        \n        Select-AzureSubscription $subscriptionName\n        \n        # Define the MapReduce job\n        $mrJobDefinition = New-AzureHDInsightMapReduceJobDefinition `\n                                    -JarFile \"wasb:///example/jars/hadoop-mapreduce-examples.jar\" `\n                                    -ClassName \"wordcount\" `\n                                    -Arguments \"wasb:///example/data/gutenberg/davinci.txt\", \"wasb:///example/data/WordCountOutput1\"\n        \n        # Submit the job and wait for job completion\n        $cred = Get-Credential -Message \"Enter the HDInsight cluster HTTP user credential:\" \n        $mrJob = Start-AzureHDInsightJob `\n                            -Cluster $clusterName `\n                            -Credential $cred `\n                            -JobDefinition $mrJobDefinition \n        \n        Wait-AzureHDInsightJob `\n            -Cluster $clusterName `\n            -Credential $cred `\n            -JobId $mrJob.JobId \n        \n        # Get the job output\n        $cluster = Get-AzureHDInsightCluster -Name $clusterName\n        $defaultStorageAccount = $cluster.DefaultStorageAccount -replace '.blob.core.chinacloudapi.cn'\n        $defaultStorageAccountKey = Get-AzureStorageKey -StorageAccountName $defaultStorageAccount |  %{ $_.Primary }\n        $defaultStorageContainer = $cluster.DefaultStorageContainer\n        \n        Get-AzureHDInsightJobOutput `\n            -Cluster $clusterName `\n            -Credential $cred `\n            -JobId $mrJob.JobId `\n            -StandardError\n\n        # Download the job output to the workstation\n        $storageContext = New-AzureStorageContext -StorageAccountName $defaultStorageAccount -StorageAccountKey $defaultStorageAccountKey \n        Get-AzureStorageBlobContent -Container $defaultStorageContainer -Blob example/data/WordCountOutput/part-r-00000 -Context $storageContext -Force\n        \n        # Display the output file\n        cat ./example/data/WordCountOutput/part-r-00000 | findstr \"there\"\n\n    MapReduce 作业将生成一个名为 *part-r-00000* 的文件，其中包含单词和计数。该脚本使用 **findstr** 命令来列出包含“there”的所有单词。\n\n3. 设置前 3 个变量，然后运行脚本。\n\n## <a name=\"hdinsight-sample-csharp-streaming\"></a> 字数统计 - C# 流式处理\n\nHadoop 向 MapReduce 提供了一个流式处理 API，利用它，你可以采用 Java 之外的其他语言来编写映射函数和化简函数。\n\n在示例中，映射器和化简器都是可执行程序，它们从 [stdin][stdin-stdout-stderr] 读取输入（逐行）并将输出结果发送到 [stdout][stdin-stdout-stderr]。程序计算文本中所有单词的数量。\n\n如果为**映射器**指定可执行文件，则当初始化映射器时，每个映射器任务都将启动此可执行文件作为一个单独的进程。当映射器任务运行时，它将其输入转换为行，并将这些行馈送到进程的 [stdin][stdin-stdout-stderr]。\n\n同时，映射器从进程的 stdout 中收集面向行的输出。然后将每行转换为一个键/值对（作为映射器的输出收集）。默认情况下，一行的前缀直至第一个制表符是键，而该行的剩余部分（不包括制表符）是值。如果行中没有制表符，则整行被视为键，而值为 Null。\n\n如果为**化简器**指定可执行文件，则当初始化化简器时，每个化简器任务都将启动此可执行文件作为一个单独的进程。当化简器任务运行时，它将其输入键/值对转换为行，并将这些行馈送到进程的 [stdin][stdin-stdout-stderr]。\n\n同时，化简器从进程的 [stdout][stdin-stdout-stderr] 中收集面向行的输出。然后将每行转换为一个键/值对（作为化简器的输出收集）。默认情况下，一行的前缀直至第一个制表符是键，而该行的剩余部分（不包括制表符）是值。\n\n有关 Hadoop 流式处理接口的详细信息，请参阅 [Hadoop 流式处理][hadoop-streaming]。\n\n**提交 C# 流式处理字数统计作业**\n\n- 按照[字数统计 - Java](#word-count-java) 中的过程操作，并将作业定义替换为以下内容：\n\n        $mrJobDefinition = New-AzureHDInsightStreamingMapReduceJobDefinition `\n                                    -Files <a collection of files> `\n                                    -Mapper \"cat.exe\" `\n                                    -Reducer \"wc.exe\" `\n                                    -InputPath \"/example/data/gutenberg/davinci.txt\" `\n                                    -OutputPath \"/example/data/StreamingOutput/wc.txt\"\n\n\n    输出文件应该是：\n    \n        example/data/StreamingOutput/wc.txt/part-00000      \n                                \n## <a name=\"hdinsight-sample-pi-estimator\"></a> PI 估计器\n\npi 估计器使用统计学方法（拟蒙特卡罗法）来估算 pi 值。单位平方形内部随机放置的点也落入该平方形内嵌的圆圈内，其概率等于圆圈面积 pi/4。可以从 4R 的值来估算 pi 的值，其中 R 是落入圆圈内的点数与平方形内总点数的比率。所使用的取样点越多，估算值越准确。\n\n为此示例提供的脚本提交了一个 Hadoop jar 作业，设置为使用特定的值（16 个映射）运行，其中每个映射都必须通过参数值计算 1 千万个取样点。可以更改这些参数值以改进 pi 的估算值。例如，pi 采用前 10 位小数时为 3.1415926535。\n\n**提交 pi 估计器作业**\n\n- 按照[字数统计 - Java](#word-count-java) 中的过程操作，并将作业定义替换为以下内容：\n\n        $mrJobJobDefinition = New-AzureHDInsightMapReduceJobDefinition `\n                                    -JarFile \"wasb:///example/jars/hadoop-mapreduce-examples.jar\" `\n                                    -ClassName \"pi\" `\n                                    -Arguments \"16\", \"10000000\"\n\n## <a name=\"hdinsight-sample-10gb-graysort\"></a> 10-GB Graysort\n\n此示例使用适中的 10GB 数据，这样它运行时能相对快一点。它使用由 Owen O'Malley 和 Arun Murthy 开发的 MapReduce 应用程序，此应用程序以 0.578TB/分钟（100TB 用时 173 分钟）的速率赢得了 2009 年年度常用（“daytona”）TB 级排序基准。有关这一排序基准和其他排序基准的详细信息，请参阅 [Sortbenchmark](http://sortbenchmark.org/) Web 应用。\n\n本示例使用三组 MapReduce 程序：\n\n1. **TeraGen** 是一个 MapReduce 程序，你可用它来生成要排序的数据行。\n2. **TeraSort** 以输入数据为例，使用 MapReduce 将数据排序到总序中。TeraSort 是 MapReduce 函数的一种标准排序，但自定义的分区程序除外，此分区程序使用 N-1 个抽样键（用于定义每次简化的键范围）的已排序列表。具体说来，sample[i-1] <= key < sample[i] 的所有键都将会发送到化简变量 i。这样可确保化简变量 i 的输出全都小于化简变量 i+1 的输出。\n3. **TeraValidate** 是一个 MapReduce 程序，用于验证输出是否已全局排序。它在输出目录中对于每个文件创建一个映射，每个映射都确保每个键均小于或等于前一个键。映射函数也会生成每个文件的第一个和最后一个键的记录，而化简函数会确保文件 i 的第一个键大于文件 i-1 的最后一个键。任何问题都会报告为包含故障键的化简的输出结果。\n\n所有三个应用程序所使用的输入和输出格式都以正确格式读写文本文件。化简的输出结果的复制设置为 1，而不是默认值 3，因为基准比赛不要求输出结果数据复制到多个节点上。\n\n此示例要求三个任务，每个任务对应于简介部分介绍的一个 MapReduce 程序：\n\n1. 通过运行 **TeraGen** MapReduce 作业生成要排序的数据。\n2. 通过运行 **TeraSort** MapReduce 作业对数据进行排序。\n3. 通过运行 **TeraValidate** MapReduce 作业确认数据已正确排序。\n\n**提交作业**\n\n- 按照[字数统计 - Java](#word-count-java) 中的过程操作，并使用以下作业定义：\n\n    $teragen = New-AzureHDInsightMapReduceJobDefinition `\n                                -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `\n                                -ClassName \"teragen\" `\n                                -Arguments \"-Dmapred.map.tasks=50\", \"100000000\", \"/example/data/10GB-sort-input\"\n    \n    $terasort = New-AzureHDInsightMapReduceJobDefinition `\n                                -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `\n                                -ClassName \"terasort\" `\n                                -Arguments \"-Dmapred.map.tasks=50\", \"-Dmapred.reduce.tasks=25\", \"/example/data/10GB-sort-input\", \"/example/data/10GB-sort-output\"\n    \n    $teravalidate = New-AzureHDInsightMapReduceJobDefinition `\n                                -JarFile \"/example/jars/hadoop-mapreduce-examples.jar\" `\n                                -ClassName \"teravalidate\" `\n                                -Arguments \"-Dmapred.map.tasks=50\", \"-Dmapred.reduce.tasks=25\", \"/example/data/10GB-sort-output\", \"/example/data/10GB-sort-validate\"\n\n\n##后续步骤 \n\n从本文和每个示例的相关文章中，你了解到如何使用 Azure PowerShell 运行 HDInsight 群集附带的示例。有关 Pig、Hive 和 MapReduce 如何与 HDInsight 配合使用的教程，请参阅以下主题：\n\n* [将 Hadoop 与 HDInsight 中的 Hive 配合使用以分析手机使用情况][hdinsight-get-started]\n* [将 Pig 与 HDInsight 上的 Hadoop 配合使用][hdinsight-use-pig]\n* [将 Hive 与 HDInsight 上的 Hadoop 配合使用][hdinsight-use-hive]\n* [在 HDInsight 中提交 Hadoop 作业][hdinsight-submit-jobs]\n* [Azure HDInsight SDK 文档][hdinsight-sdk-documentation]\n* [在 HDInsight 中调试 Hadoop：错误消息][hdinsight-errors]\n\n\n##<a name=\"word-count-java\" id=\"apendix-a---the-word-count-MapReduce-program-in-java\"></a> 附录 A - 字数统计源代码\n\n    package org.apache.hadoop.examples;\n    import java.io.IOException;\n    import java.util.StringTokenizer;\n    import org.apache.hadoop.conf.Configuration;\n    import org.apache.hadoop.fs.Path;\n    import org.apache.hadoop.io.IntWritable;\n    import org.apache.hadoop.io.Text;\n    import org.apache.hadoop.mapreduce.Job;\n    import org.apache.hadoop.mapreduce.Mapper;\n    import org.apache.hadoop.mapreduce.Reducer;\n    import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\n    import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n    import org.apache.hadoop.util.GenericOptionsParser;\n\n    public class WordCount {\n\n    public static class TokenizerMapper\n       extends Mapper<Object, Text, Text, IntWritable>{\n\n    private final static IntWritable one = new IntWritable(1);\n    private Text word = new Text();\n\n    public void map(Object key, Text value, Context context\n                    ) throws IOException, InterruptedException {\n      StringTokenizer itr = new StringTokenizer(value.toString());\n      while (itr.hasMoreTokens()) {\n        word.set(itr.nextToken());\n        context.write(word, one);\n        }\n      }\n    }\n\n    public static class IntSumReducer\n       extends Reducer<Text,IntWritable,Text,IntWritable> {\n    private IntWritable result = new IntWritable();\n\n    public void reduce(Text key, Iterable<IntWritable> values,\n                       Context context\n                       ) throws IOException, InterruptedException {\n      int sum = 0;\n      for (IntWritable val : values) {\n        sum += val.get();\n      }\n      result.set(sum);\n      context.write(key, result);\n      }\n    }\n\n    public static void main(String[] args) throws Exception {\n    Configuration conf = new Configuration();\n    String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();\n    if (otherArgs.length != 2) {\n      System.err.println(\"Usage: wordcount <in> <out>\");\n      System.exit(2);\n        }\n    Job job = new Job(conf, \"word count\");\n    job.setJarByClass(WordCount.class);\n    job.setMapperClass(TokenizerMapper.class);\n    job.setCombinerClass(IntSumReducer.class);\n    job.setReducerClass(IntSumReducer.class);\n    job.setOutputKeyClass(Text.class);\n    job.setOutputValueClass(IntWritable.class);\n    FileInputFormat.addInputPath(job, new Path(otherArgs[0]));\n    FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));\n    System.exit(job.waitForCompletion(true) ? 0 : 1);\n    }\n    }\n\n\n## 附录 B - 字数统计流式处理源代码\n\nMapReduce 程序使用 cat.exe 应用程序作为映射接口将文本流式传输到控制台，并使用 wc.exe 应用程序作为化简接口来统计从文档中流式传输的字数。映射器和化简器都从标准输入流 (stdin) 逐行读取字符，并写入到标准输出流 (stdout)。\n\n    // The source code for the cat.exe (Mapper).\n\n    using System;\n    using System.IO;\n\n    namespace cat\n    {\n        class cat\n        {\n            static void Main(string[] args)\n            {\n                if (args.Length > 0)\n                {\n                    Console.SetIn(new StreamReader(args[0]));\n                }\n\n                string line;\n                while ((line = Console.ReadLine()) != null)\n                {\n                    Console.WriteLine(line);\n                }\n            }\n        }\n    }\n\n\n\ncat.cs 文件中的映射器代码使用 [StreamReader][streamreader] 对象将传入流的字符读入到控制台，然后控制台使用静态 [Console.Writeline][console-writeline] 方法将流写入标准输出流。\n\n\n    // The source code for wc.exe (Reducer) is:\n\n    using System;\n    using System.IO;\n    using System.Linq;\n\n    namespace wc\n    {\n        class wc\n        {\n            static void Main(string[] args)\n            {\n                string line;\n                var count = 0;\n\n                if (args.Length > 0){\n                    Console.SetIn(new StreamReader(args[0]));\n                }\n\n                while ((line = Console.ReadLine()) != null) {\n                    count += line.Count(cr => (cr == ' ' || cr == '\\n'));\n                }\n                Console.WriteLine(count);\n            }\n        }\n    }\n\n\nwc.cs 文件中的化简器代码使用 [StreamReader][streamreader] 对象从 cat.exe 映射器输出的标准输入流读取字符。当它使用 [Console.Writeline][console-writeline] 方法读取字符时，它将通过统计每个单词末尾的空格和行结束字符的数目来计算单词数量。然后使用 [Console.Writeline][console-writeline] 方法将总数写入标准输出流中。\n\n\n\n\n\n## 附录 C - PI 估计器源代码\n\n在下面可以检查包含映射器函数和化简器函数的 pi estimator Java 代码。映射器程序生成在单位平方形内部随机放置的指定点数，然后计算位于圆圈内部的这些点的数目。化简器程序累计由映射器统计的点数，然后根据公式 4R 估算 pi 的值，其中 R 是圆圈内统计的点数与方形内总点数的比率。\n\n    /**\n    * Licensed to the Apache Software Foundation (ASF) under one\n    * or more contributor license agreements. See the NOTICE file\n    * distributed with this work for additional information\n    * regarding copyright ownership. The ASF licenses this file\n    * to you under the Apache License, Version 2.0 (the\n    * \"License\"); you may not use this file except in compliance\n    * with the License. You may obtain a copy of the License at\n    *\n    * http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software\n    * distributed under the License is distributed on an \"AS IS\" BASIS,\n    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or   implied.\n    * See the License for the specific language governing permissions and\n    * limitations under the License.\n    */\n\n    package org.apache.hadoop.examples;\n\n    import java.io.IOException;\n    import java.math.BigDecimal;\n    import java.util.Iterator;\n\n    import org.apache.hadoop.conf.Configured;\n    import org.apache.hadoop.fs.FileSystem;\n    import org.apache.hadoop.fs.Path;\n    import org.apache.hadoop.io.BooleanWritable;\n    import org.apache.hadoop.io.LongWritable;\n    import org.apache.hadoop.io.SequenceFile;\n    import org.apache.hadoop.io.Writable;\n    import org.apache.hadoop.io.WritableComparable;\n    import org.apache.hadoop.io.SequenceFile.CompressionType;\n    import org.apache.hadoop.mapred.FileInputFormat;\n    import org.apache.hadoop.mapred.FileOutputFormat;\n    import org.apache.hadoop.mapred.JobClient;\n    import org.apache.hadoop.mapred.JobConf;\n    import org.apache.hadoop.mapred.MapReduceBase;\n    import org.apache.hadoop.mapred.Mapper;\n    import org.apache.hadoop.mapred.OutputCollector;\n    import org.apache.hadoop.mapred.Reducer;\n    import org.apache.hadoop.mapred.Reporter;\n    import org.apache.hadoop.mapred.SequenceFileInputFormat;\n    import org.apache.hadoop.mapred.SequenceFileOutputFormat;\n    import org.apache.hadoop.util.Tool;\n    import org.apache.hadoop.util.ToolRunner;\n\n\n    //A Map-reduce program to estimate the value of Pi\n    //using quasi-Monte Carlo method.\n    //\n    //Mapper:\n    //Generate points in a unit square\n    //and then count points inside/outside of the inscribed circle of the square.\n    //\n    //Reducer:\n    //Accumulate points inside/outside results from the mappers.\n    //Let numTotal = numInside + numOutside.\n    //The fraction numInside/numTotal is a rational approximation of\n    //the value (Area of the circle)/(Area of the square),\n    //where the area of the inscribed circle is Pi/4\n    //and the area of unit square is 1.\n    //Then, Pi is estimated value to be 4(numInside/numTotal).\n    //\n\n    public class PiEstimator extends Configured implements Tool {\n    //tmp directory for input/output\n    static private final Path TMP_DIR = new Path(\n    PiEstimator.class.getSimpleName() + \"_TMP_3_141592654\");\n\n    //2-dimensional Halton sequence {H(i)},\n    //where H(i) is a 2-dimensional point and i >= 1 is the index.\n    //Halton sequence is used to generate sample points for Pi estimation.\n    private static class HaltonSequence {\n    // Bases\n    static final int[] P = {2, 3};\n    //Maximum number of digits allowed\n    static final int[] K = {63, 40};\n\n    private long index;\n    private double[] x;\n    private double[][] q;\n    private int[][] d;\n\n    //Initialize to H(startindex),\n    //so the sequence begins with H(startindex+1).\n    HaltonSequence(long startindex) {\n    index = startindex;\n    x = new double[K.length];\n    q = new double[K.length][];\n    d = new int[K.length][];\n    for(int i = 0; i < K.length; i++) {\n    q[i] = new double[K[i]];\n    d[i] = new int[K[i]];\n    }\n\n    for(int i = 0; i < K.length; i++) {\n    long k = index;\n    x[i] = 0;\n\n    for(int j = 0; j < K[i]; j++) {\n    q[i][j] = (j == 0? 1.0: q[i][j-1])/P[i];\n    d[i][j] = (int)(k % P[i]);\n    k = (k - d[i][j])/P[i];\n    x[i] += d[i][j] * q[i][j];\n    }\n    }\n    }\n\n    //Compute next point.\n    //Assume the current point is H(index).\n    //Compute H(index+1).\n    //@return a 2-dimensional point with coordinates in [0,1)^2\n    double[] nextPoint() {\n    index++;\n    for(int i = 0; i < K.length; i++) {\n    for(int j = 0; j < K[i]; j++) {\n    d[i][j]++;\n    x[i] += q[i][j];\n    if (d[i][j] < P[i]) {\n    break;\n    }\n    d[i][j] = 0;\n    x[i] -= (j == 0? 1.0: q[i][j-1]);\n    }\n    }\n    return x;\n    }\n    }\n\n    //Mapper class for Pi estimation.\n    //Generate points in a unit square and then\n    //count points inside/outside of the inscribed circle of the square.\n    public static class PiMapper extends MapReduceBase\n    implements Mapper<LongWritable, LongWritable, BooleanWritable, LongWritable> {\n\n    //Map method.\n    //@param offset samples starting from the (offset+1)th sample.\n    //@param size the number of samples for this map\n    //@param out output {ture->numInside, false->numOutside}\n    //@param reporter\n    public void map(LongWritable offset,\n    LongWritable size,\n    OutputCollector<BooleanWritable, LongWritable> out,\n    Reporter reporter) throws IOException {\n\n    final HaltonSequence haltonsequence = new HaltonSequence(offset.get());\n    long numInside = 0L;\n    long numOutside = 0L;\n\n    for(long i = 0; i < size.get(); ) {\n    //generate points in a unit square\n    final double[] point = haltonsequence.nextPoint();\n\n    //count points inside/outside of the inscribed circle of the square\n    final double x = point[0] - 0.5;\n    final double y = point[1] - 0.5;\n    if (x*x + y*y > 0.25) {\n    numOutside++;\n    } else {\n    numInside++;\n    }\n\n    //report status\n    i++;\n    if (i % 1000 == 0) {\n    reporter.setStatus(\"Generated \" + i + \" samples.\");\n    }\n    }\n\n    //output map results\n    out.collect(new BooleanWritable(true), new LongWritable(numInside));\n    out.collect(new BooleanWritable(false), new LongWritable(numOutside));\n    }\n    }\n\n\n    //Reducer class for Pi estimation.\n    //Accumulate points inside/outside results from the mappers.\n    public static class PiReducer extends MapReduceBase\n    implements Reducer<BooleanWritable, LongWritable, WritableComparable<?>, Writable> {\n\n    private long numInside = 0;\n    private long numOutside = 0;\n    private JobConf conf; //configuration for accessing the file system\n\n    //Store job configuration.\n    @Override\n    public void configure(JobConf job) {\n    conf = job;\n    }\n\n\n    // Accumulate number of points inside/outside results from the mappers.\n    // @param isInside Is the points inside?\n    // @param values An iterator to a list of point counts\n    // @param output dummy, not used here.\n    // @param reporter\n\n    public void reduce(BooleanWritable isInside,\n    Iterator<LongWritable> values,\n    OutputCollector<WritableComparable<?>, Writable> output,\n    Reporter reporter) throws IOException {\n    if (isInside.get()) {\n    for(; values.hasNext(); numInside += values.next().get());\n    } else {\n    for(; values.hasNext(); numOutside += values.next().get());\n    }\n    }\n\n    //Reduce task done, write output to a file.\n    @Override\n    public void close() throws IOException {\n    //write output to a file\n    Path outDir = new Path(TMP_DIR, \"out\");\n    Path outFile = new Path(outDir, \"reduce-out\");\n    FileSystem fileSys = FileSystem.get(conf);\n    SequenceFile.Writer writer = SequenceFile.createWriter(fileSys, conf,\n    outFile, LongWritable.class, LongWritable.class,\n    CompressionType.NONE);\n    writer.append(new LongWritable(numInside), new LongWritable(numOutside));\n    writer.close();\n    }\n    }\n\n    //Run a map/reduce job for estimating Pi.\n    //@return the estimated value of Pi.\n    public static BigDecimal estimate(int numMaps, long numPoints, JobConf jobConf\n    )\n    throws IOException {\n    //setup job conf\n    jobConf.setJobName(PiEstimator.class.getSimpleName());\n\n    jobConf.setInputFormat(SequenceFileInputFormat.class);\n\n    jobConf.setOutputKeyClass(BooleanWritable.class);\n    jobConf.setOutputValueClass(LongWritable.class);\n    jobConf.setOutputFormat(SequenceFileOutputFormat.class);\n\n    jobConf.setMapperClass(PiMapper.class);\n    jobConf.setNumMapTasks(numMaps);\n\n    jobConf.setReducerClass(PiReducer.class);\n    jobConf.setNumReduceTasks(1);\n\n    // turn off speculative execution, because DFS doesn't handle\n    // multiple writers to the same file.\n    jobConf.setSpeculativeExecution(false);\n\n    //setup input/output directories\n    final Path inDir = new Path(TMP_DIR, \"in\");\n    final Path outDir = new Path(TMP_DIR, \"out\");\n    FileInputFormat.setInputPaths(jobConf, inDir);\n    FileOutputFormat.setOutputPath(jobConf, outDir);\n\n    final FileSystem fs = FileSystem.get(jobConf);\n    if (fs.exists(TMP_DIR)) {\n     throw new IOException(\"Tmp directory \" + fs.makeQualified(TMP_DIR)\n     + \" already exists. Please remove it first.\");\n     }\n     if (!fs.mkdirs(inDir)) {\n     throw new IOException(\"Cannot create input directory \" + inDir);\n     }\n\n     //generate an input file for each map task\n     try {\n     for(int i=0; i < numMaps; ++i) {\n     final Path file = new Path(inDir, \"part\"+i);\n     final LongWritable offset = new LongWritable(i * numPoints);\n     final LongWritable size = new LongWritable(numPoints);\n     final SequenceFile.Writer writer = SequenceFile.createWriter(\n     fs, jobConf, file,\n     LongWritable.class, LongWritable.class, CompressionType.NONE);\n     try {\n     writer.append(offset, size);\n     } finally {\n     writer.close();\n     }\n     System.out.println(\"Wrote input for Map #\"+i);\n     }\n\n     //start a map/reduce job\n     System.out.println(\"Starting Job\");\n     final long startTime = System.currentTimeMillis();\n     JobClient.runJob(jobConf);\n     final double duration = (System.currentTimeMillis() - startTime)/1000.0;\n     System.out.println(\"Job Finished in \" + duration + \" seconds\");\n\n     //read outputs\n     Path inFile = new Path(outDir, \"reduce-out\");\n     LongWritable numInside = new LongWritable();\n     LongWritable numOutside = new LongWritable();\n     SequenceFile.Reader reader = new SequenceFile.Reader(fs, inFile, jobConf);\n     try {\n     reader.next(numInside, numOutside);\n     } finally {\n     reader.close();\n     }\n\n     //compute estimated value\n     return BigDecimal.valueOf(4).setScale(20)\n     .multiply(BigDecimal.valueOf(numInside.get()))\n     .divide(BigDecimal.valueOf(numMaps))\n     .divide(BigDecimal.valueOf(numPoints));\n     } finally {\n     fs.delete(TMP_DIR, true);\n     }\n     }\n\n    //Parse arguments and then runs a map/reduce job.\n    //Print output in standard out.\n    //@return a non-zero if there is an error. Otherwise, return 0.\n     public int run(String[] args) throws Exception {\n     if (args.length != 2) {\n     System.err.println(\"Usage: \"+getClass().getName()+\" <nMaps> <nSamples>\");\n     ToolRunner.printGenericCommandUsage(System.err);\n     return -1;\n     }\n\n     final int nMaps = Integer.parseInt(args[0]);\n     final long nSamples = Long.parseLong(args[1]);\n\n     System.out.println(\"Number of Maps = \" + nMaps);\n     System.out.println(\"Samples per Map = \" + nSamples);\n\n     final JobConf jobConf = new JobConf(getConf(), getClass());\n     System.out.println(\"Estimated value of Pi is \"\n     + estimate(nMaps, nSamples, jobConf));\n     return 0;\n     }\n\n     //main method for running it as a stand alone command.\n     public static void main(String[] argv) throws Exception {\n     System.exit(ToolRunner.run(null, new PiEstimator(), argv));\n     }\n     }\n     \n## 附录 D - 10gb graysort 源代码\n\n这一部分提供了 TeraSort MapReduce 程序的代码以供检查。\n\n\n    /**\n     * Licensed to the Apache Software Foundation (ASF) under one\n     * or more contributor license agreements.  See the NOTICE file\n     * distributed with this work for additional information\n     * regarding copyright ownership.  The ASF licenses this file\n     * to you under the Apache License, Version 2.0 (the\n     * \"License\"); you may not use this file except in compliance\n     * with the License.  You may obtain a copy of the License at\n     *\n     *     http://www.apache.org/licenses/LICENSE-2.0\n     *\n     * Unless required by applicable law or agreed to in writing, software\n     * distributed under the License is distributed on an \"AS IS\" BASIS,\n     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n     * See the License for the specific language governing permissions and\n     * limitations under the License.\n     */\n\n    package org.apache.hadoop.examples.terasort;\n\n    import java.io.IOException;\n    import java.io.PrintStream;\n    import java.net.URI;\n    import java.util.ArrayList;\n    import java.util.List;\n\n    import org.apache.commons.logging.Log;\n    import org.apache.commons.logging.LogFactory;\n    import org.apache.hadoop.conf.Configured;\n    import org.apache.hadoop.filecache.DistributedCache;\n    import org.apache.hadoop.fs.FileSystem;\n    import org.apache.hadoop.fs.Path;\n    import org.apache.hadoop.io.NullWritable;\n    import org.apache.hadoop.io.SequenceFile;\n    import org.apache.hadoop.io.Text;\n    import org.apache.hadoop.mapred.FileOutputFormat;\n    import org.apache.hadoop.mapred.JobClient;\n    import org.apache.hadoop.mapred.JobConf;\n    import org.apache.hadoop.mapred.Partitioner;\n    import org.apache.hadoop.util.Tool;\n    import org.apache.hadoop.util.ToolRunner;\n\n    /**\n     * Generates the sampled split points, launches the job,\n     * and waits for it to finish.\n     * <p>\n     * To run the program:\n     * <b>bin/hadoop jar hadoop-examples-*.jar terasort in-dir out-dir</b>\n     */\n\n    public class TeraSort extends Configured implements Tool {\n      private static final Log LOG = LogFactory.getLog(TeraSort.class);\n\n      /**\n       * A partitioner that splits text keys into roughly equal\n       * partitions in a global sorted order.\n       */\n\n      static class TotalOrderPartitioner implements Partitioner<Text,Text>{\n        private TrieNode trie;\n        private Text[] splitPoints;\n\n        /**\n         * A generic trie node\n         */\n        static abstract class TrieNode {\n          private int level;\n          TrieNode(int level) {\n            this.level = level;\n          }\n          abstract int findPartition(Text key);\n          abstract void print(PrintStream strm) throws IOException;\n          int getLevel() {\n            return level;\n          }\n        }\n\n        /**\n         * An inner trie node that contains 256 children based on the next\n         * character.\n         */\n        static class InnerTrieNode extends TrieNode {\n          private TrieNode[] child = new TrieNode[256];\n\n          InnerTrieNode(int level) {\n            super(level);\n          }\n          int findPartition(Text key) {\n            int level = getLevel();\n            if (key.getLength() <= level) {\n              return child[0].findPartition(key);\n            }\n            return child[key.getBytes()[level]].findPartition(key);\n          }\n          void setChild(int idx, TrieNode child) {\n            this.child[idx] = child;\n          }\n          void print(PrintStream strm) throws IOException {\n            for(int ch=0; ch < 255; ++ch) {\n              for(int i = 0; i < 2*getLevel(); ++i) {\n                strm.print(' ');\n              }\n              strm.print(ch);\n              strm.println(\" ->\");\n              if (child[ch] != null) {\n                child[ch].print(strm);\n              }\n            }\n          }\n        }\n\n        /**\n         * A leaf trie node that does string compares to figure out where the given\n         * key belongs between lower..upper.\n         */\n        static class LeafTrieNode extends TrieNode {\n          int lower;\n          int upper;\n          Text[] splitPoints;\n          LeafTrieNode(int level, Text[] splitPoints, int lower, int upper) {\n            super(level);\n            this.splitPoints = splitPoints;\n            this.lower = lower;\n            this.upper = upper;\n          }\n          int findPartition(Text key) {\n            for(int i=lower; i<upper; ++i) {\n              if (splitPoints[i].compareTo(key) >= 0) {\n                return i;\n              }\n            }\n            return upper;\n          }\n          void print(PrintStream strm) throws IOException {\n            for(int i = 0; i < 2*getLevel(); ++i) {\n              strm.print(' ');\n            }\n            strm.print(lower);\n            strm.print(\", \");\n            strm.println(upper);\n          }\n        }\n\n\n        /**\n         * Read the cut points from the given sequence file.\n         * @param fs the file system\n         * @param p the path to read\n         * @param job the job config\n         * @return the strings to split the partitions on\n         * @throws IOException\n         */\n        private static Text[] readPartitions(FileSystem fs, Path p,\n                                             JobConf job) throws IOException {\n          SequenceFile.Reader reader = new SequenceFile.Reader(fs, p, job);\n          List<Text> parts = new ArrayList<Text>();\n          Text key = new Text();\n          NullWritable value = NullWritable.get();\n          while (reader.next(key, value)) {\n            parts.add(key);\n            key = new Text();\n          }\n          reader.close();\n          return parts.toArray(new Text[parts.size()]);  \n        }\n\n        /**\n         * Given a sorted set of cut points, build a trie that will find the correct\n         * partition quickly.\n         * @param splits the list of cut points\n         * @param lower the lower bound of partitions 0..numPartitions-1\n         * @param upper the upper bound of partitions 0..numPartitions-1\n         * @param prefix the prefix that we have already checked against\n         * @param maxDepth the maximum depth we will build a trie for\n         * @return the trie node that will divide the splits correctly\n         */\n        private static TrieNode buildTrie(Text[] splits, int lower, int upper,\n                                          Text prefix, int maxDepth) {\n          int depth = prefix.getLength();\n          if (depth >= maxDepth || lower == upper) {\n            return new LeafTrieNode(depth, splits, lower, upper);\n          }\n          InnerTrieNode result = new InnerTrieNode(depth);\n          Text trial = new Text(prefix);\n          // append an extra byte on to the prefix\n          trial.append(new byte[1], 0, 1);\n          int currentBound = lower;\n          for(int ch = 0; ch < 255; ++ch) {\n            trial.getBytes()[depth] = (byte) (ch + 1);\n            lower = currentBound;\n            while (currentBound < upper) {\n              if (splits[currentBound].compareTo(trial) >= 0) {\n                break;\n              }\n              currentBound += 1;\n            }\n            trial.getBytes()[depth] = (byte) ch;\n            result.child[ch] = buildTrie(splits, lower, currentBound, trial,\n                                         maxDepth);\n          }\n          // pick up the rest\n          trial.getBytes()[depth] = 127;\n          result.child[255] = buildTrie(splits, currentBound, upper, trial,\n                                        maxDepth);\n          return result;\n        }\n\n        public void configure(JobConf job) {\n          try {\n            FileSystem fs = FileSystem.getLocal(job);\n            Path partFile = new Path(TeraInputFormat.PARTITION_FILENAME);\n            splitPoints = readPartitions(fs, partFile, job);\n            trie = buildTrie(splitPoints, 0, splitPoints.length, new Text(), 2);\n          } catch (IOException ie) {\n            throw new IllegalArgumentException(\"can't read paritions file\", ie);\n          }\n        }\n\n        public TotalOrderPartitioner() {\n        }\n\n        public int getPartition(Text key, Text value, int numPartitions) {\n          return trie.findPartition(key);\n        }\n\n      }\n\n      public int run(String[] args) throws Exception {\n        LOG.info(\"starting\");\n        JobConf job = (JobConf) getConf();\n        Path inputDir = new Path(args[0]);\n        inputDir = inputDir.makeQualified(inputDir.getFileSystem(job));\n        Path partitionFile = new Path(inputDir, TeraInputFormat.PARTITION_FILENAME);\n        URI partitionUri = new URI(partitionFile.toString() +\n                                   \"#\" + TeraInputFormat.PARTITION_FILENAME);\n        TeraInputFormat.setInputPaths(job, new Path(args[0]));\n        FileOutputFormat.setOutputPath(job, new Path(args[1]));\n        job.setJobName(\"TeraSort\");\n        job.setJarByClass(TeraSort.class);\n        job.setOutputKeyClass(Text.class);\n        job.setOutputValueClass(Text.class);\n        job.setInputFormat(TeraInputFormat.class);\n        job.setOutputFormat(TeraOutputFormat.class);\n        job.setPartitionerClass(TotalOrderPartitioner.class);\n        TeraInputFormat.writePartitionFile(job, partitionFile);\n        DistributedCache.addCacheFile(partitionUri, job);\n        DistributedCache.createSymlink(job);\n        job.setInt(\"dfs.replication\", 1);\n        TeraOutputFormat.setFinalSync(job, true);\n        JobClient.runJob(job);\n        LOG.info(\"done\");\n        return 0;\n      }\n\n      /**\n       * @param args\n       */\n\n      public static void main(String[] args) throws Exception {\n        int res = ToolRunner.run(new JobConf(), new TeraSort(), args);\n        System.exit(res);\n      }\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n[hdinsight-errors]: /documentation/articles/hdinsight-debug-jobs\n\n[hdinsight-sdk-documentation]: https://msdn.microsoft.com/zh-cn/library/azure/dn479185.aspx\n\n[hdinsight-submit-jobs]: /documentation/articles/hdinsight-submit-hadoop-jobs-programmatically\n[hdinsight-introduction]: /documentation/articles/hdinsight-hadoop-introduction\n\n\n[powershell-install-configure]: /documentation/articles/powershell-install-configure\n\n[hdinsight-get-started]: /documentation/articles/hdinsight-hadoop-tutorial-get-started-windows-v1\n\n[hdinsight-samples]: /documentation/articles/hdinsight-run-samples\n[hdinsight-sample-10gb-graysort]: /documentation/articles/hdinsight-sample-10gb-graysort\n[hdinsight-sample-csharp-streaming]: /documentation/articles/hdinsight-sample-csharp-streaming\n[hdinsight-sample-pi-estimator]: /documentation/articles/hdinsight-sample-pi-estimator\n[hdinsight-sample-wordcount]: /documentation/articles/hdinsight-sample-wordcount\n\n[hdinsight-use-hive]: /documentation/articles/hdinsight-use-hive\n[hdinsight-use-pig]: /documentation/articles/hdinsight-use-pig\n\n[streamreader]: http://msdn.microsoft.com/zh-cn/library/system.io.streamreader.aspx\n[console-writeline]: http://msdn.microsoft.com/zh-cn/library/system.console.writeline\n\n<!---HONumber=Mooncake_1207_2015-->"
}