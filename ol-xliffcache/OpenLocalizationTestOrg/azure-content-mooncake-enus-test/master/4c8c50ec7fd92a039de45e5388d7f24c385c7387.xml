{
  "nodes": [
    {
      "content": "如何通过 PHP 使用队列存储 | Azure",
      "pos": [
        27,
        50
      ]
    },
    {
      "content": "了解如何使用 Azure 队列存储服务创建和删除队列，以及插入、获取和删除消息。示例用 PHP 编写。",
      "pos": [
        69,
        120
      ]
    },
    {
      "content": "如何通过 PHP 使用队列存储",
      "pos": [
        324,
        339
      ]
    },
    {
      "content": "概述",
      "pos": [
        441,
        443
      ]
    },
    {
      "content": "本指南将演示如何使用 Azure 队列存储服务执行常见方案。这些示例使用来自 Windows SDK for PHP 中的类编写。介绍的方案包括插入、扫视、获取和删除队列消息以及创建和删除队列。",
      "pos": [
        445,
        542
      ]
    },
    {
      "content": "创建 PHP 应用程序",
      "pos": [
        741,
        752
      ]
    },
    {
      "content": "创建访问 Azure 队列存储的 PHP 应用程序的唯一要求是从代码中引用 Azure SDK for PHP 中的类。你可以使用任何开发工具（包括“记事本”）创建应用程序。",
      "pos": [
        754,
        841
      ]
    },
    {
      "content": "在本指南中，你将使用队列存储功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或 Web 应用中运行的代码调用。",
      "pos": [
        843,
        922
      ]
    },
    {
      "content": "获取 Azure 客户端库",
      "pos": [
        927,
        940
      ]
    },
    {
      "content": "配置应用程序以访问队列存储",
      "pos": [
        1022,
        1035
      ]
    },
    {
      "content": "若要使用 Azure 队列存储 API，你需要：",
      "pos": [
        1037,
        1061
      ]
    },
    {
      "pos": [
        1066,
        1119
      ],
      "content": "通过使用 <bpt id=\"p1\">[</bpt>require_once<ept id=\"p1\">][require_once]</ept> 语句引用 autoloader 文件。"
    },
    {
      "content": "引用可使用的所有类。",
      "pos": [
        1123,
        1133
      ]
    },
    {
      "pos": [
        1135,
        1187
      ],
      "content": "下面的示例演示了如何包括 autoloader 文件并引用 <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> 类。"
    },
    {
      "pos": [
        1191,
        1322
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 本示例（以及本文中的其他示例）假定你已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果你已手动安装这些库或将其作为 PEAR 包安装，则需要引用 <ph id=\"ph2\">`WindowsAzure.php`</ph> autoloader 文件。"
    },
    {
      "pos": [
        1411,
        1457
      ],
      "content": "在下面的示例中，<ph id=\"ph1\">`require_once`</ph> 语句将始终显示，但只会引用执行该示例所需的类。"
    },
    {
      "content": "设置 Azure 存储连接",
      "pos": [
        1462,
        1475
      ]
    },
    {
      "content": "若要实例化 Azure 队列存储客户端，你必须首先具有有效的连接字符串。队列服务连接字符串的格式如下。",
      "pos": [
        1477,
        1528
      ]
    },
    {
      "content": "对于访问实时服务：",
      "pos": [
        1530,
        1539
      ]
    },
    {
      "content": "对于访问模拟器存储：",
      "pos": [
        1631,
        1641
      ]
    },
    {
      "pos": [
        1676,
        1736
      ],
      "content": "若要创建任何 Azure 服务客户端，你将需要使用 <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> 类。你可以使用以下方法之一："
    },
    {
      "content": "将连接字符串直接传递给它。",
      "pos": [
        1740,
        1753
      ]
    },
    {
      "pos": [
        1756,
        1811
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>CloudConfigurationManager (CCM)<ept id=\"p1\">**</ept> 检查多个外部源以获取连接字符串："
    },
    {
      "content": "默认情况下，它附带了对一个外部源的支持 - 环境变量",
      "pos": [
        1818,
        1844
      ]
    },
    {
      "pos": [
        1851,
        1892
      ],
      "content": "您可通过扩展 <bpt id=\"p1\">**</bpt>ConnectionStringSource<ept id=\"p1\">**</ept> 类来添加新源。"
    },
    {
      "content": "在此处列出的示例中，将直接传递连接字符串。",
      "pos": [
        1894,
        1915
      ]
    },
    {
      "content": "创建队列",
      "pos": [
        2102,
        2106
      ]
    },
    {
      "pos": [
        2108,
        2215
      ],
      "content": "一个 <bpt id=\"p1\">**</bpt>QueueRestProxy<ept id=\"p1\">**</ept> 对象，让你可以通过使用 <bpt id=\"p2\">**</bpt>createQueue<ept id=\"p2\">**</ept> 方法创建队列。创建队列时，可以在该队列上设置选项，但此操作不是必需的。（下面的示例演示了如何在队列上设置元数据。）"
    },
    {
      "pos": [
        3187,
        3236
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>您不应依赖元数据密钥的区分大小写。所有密钥都是采用小写形式从服务中读取的。"
    },
    {
      "content": "向队列添加消息",
      "pos": [
        3242,
        3249
      ]
    },
    {
      "pos": [
        3251,
        3329
      ],
      "content": "若要将消息添加到队列，请使用 <bpt id=\"p1\">**</bpt>QueueRestProxy-&gt;createMessage<ept id=\"p1\">**</ept>。此方法接受队列名称、消息文本和消息选项（这些都是可选的）。"
    },
    {
      "content": "扫视下一条消息",
      "pos": [
        4143,
        4150
      ]
    },
    {
      "pos": [
        4152,
        4305
      ],
      "content": "通过调用 <bpt id=\"p1\">**</bpt>QueueRestProxy-&gt;peekMessages<ept id=\"p1\">**</ept>，可以扫视队列前面的消息，而不会从队列中将其删除。默认情况下，<bpt id=\"p2\">**</bpt>peekMessage<ept id=\"p2\">**</ept> 方法将返回单个消息，但你可以使用 <bpt id=\"p3\">**</bpt>PeekMessagesOptions-&gt;setNumberOfMessages<ept id=\"p3\">**</ept> 方法更改该值。"
    },
    {
      "content": "取消对下一条消息的排队",
      "pos": [
        5774,
        5785
      ]
    },
    {
      "pos": [
        5787,
        6057
      ],
      "content": "你的代码分两步从队列中删除消息。首先，调用 <bpt id=\"p1\">**</bpt>queuerestproxy-&gt;listmessages<ept id=\"p1\">**</ept>，这将使消息对从队列中读取的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。（如果在此时段内未删除该消息，则它将变得在队列上再次可见）。 若要从队列中删除消息，你必须调用 <bpt id=\"p2\">**</bpt>QueueRestProxy-&gt;deleteMessage<ept id=\"p2\">**</ept>。此删除消息的两步过程可确保当您的代码因硬件或软件故障而无法处理消息时，您的其他代码实例可以获取同一消息并重试。你的代码在处理消息后会立即调用 <bpt id=\"p3\">**</bpt>deleteMessage<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "更改已排队消息的内容",
      "pos": [
        7172,
        7182
      ]
    },
    {
      "pos": [
        7184,
        7458
      ],
      "content": "可以通过调用 <bpt id=\"p1\">**</bpt>QueueRestProxy-&gt;updateMessage<ept id=\"p1\">**</ept> 来更改队列中已就位消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 <bpt id=\"p2\">*</bpt>n<ept id=\"p2\">*</ept>，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。"
    },
    {
      "content": "用于取消对消息进行排队的其他选项",
      "pos": [
        8815,
        8831
      ]
    },
    {
      "pos": [
        8833,
        9015
      ],
      "content": "你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的可见超时，从而允许你的代码使用更多或更少的时间来彻底处理每条消息。以下代码示例使用 <bpt id=\"p1\">**</bpt>getMessages<ept id=\"p1\">**</ept> 方法在一次调用中获取 16 条消息。然后，它会使用 <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。"
    },
    {
      "content": "获取队列长度",
      "pos": [
        10532,
        10538
      ]
    },
    {
      "pos": [
        10540,
        10698
      ],
      "content": "你可以获取队列中消息的估计数。<bpt id=\"p1\">**</bpt>QueueRestProxy-&gt;getQueueMetadata<ept id=\"p1\">**</ept> 方法要求队列服务返回有关队列的元数据。对返回的对象调用 <bpt id=\"p2\">**</bpt>getApproximateMessageCount<ept id=\"p2\">**</ept> 方法将提供队列中消息的计数。此计数仅为近似值，因为只能在队列服务响应您的请求后添加或删除消息。"
    },
    {
      "content": "删除队列",
      "pos": [
        11527,
        11531
      ]
    },
    {
      "pos": [
        11533,
        11588
      ],
      "content": "若要删除队列及其包含的所有消息，请调用 <bpt id=\"p1\">**</bpt>QueueRestProxy-&gt;deleteQueue<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "content": "后续步骤",
      "pos": [
        12285,
        12289
      ]
    },
    {
      "content": "现在，你已了解有关 Azure 队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。",
      "pos": [
        12291,
        12337
      ]
    },
    {
      "pos": [
        12341,
        12407
      ],
      "content": "访问 <bpt id=\"p1\">[</bpt>Azure 存储空间团队博客<ept id=\"p1\">](http://blogs.msdn.com/b/windowsazurestorage/)</ept>。"
    },
    {
      "pos": [
        12409,
        12449
      ],
      "content": "有关详细信息，另请参阅 <bpt id=\"p1\">[</bpt>PHP 开发人员中心<ept id=\"p1\">](/develop/php/)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何通过 PHP 使用队列存储 | Azure\"\n    description=\"了解如何使用 Azure 队列存储服务创建和删除队列，以及插入、获取和删除消息。示例用 PHP 编写。\"\n    documentationCenter=\"php\"\n    services=\"storage\"\n    authors=\"tfitzmac\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/21/2016\"/>\n\n# 如何通过 PHP 使用队列存储\n\n[AZURE.INCLUDE [storage-selector-queue-include](../includes/storage-selector-queue-include.md)]\n\n## 概述\n\n本指南将演示如何使用 Azure 队列存储服务执行常见方案。这些示例使用来自 Windows SDK for PHP 中的类编写。介绍的方案包括插入、扫视、获取和删除队列消息以及创建和删除队列。\n\n[AZURE.INCLUDE [storage-queue-concepts-include](../includes/storage-queue-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 PHP 应用程序\n\n创建访问 Azure 队列存储的 PHP 应用程序的唯一要求是从代码中引用 Azure SDK for PHP 中的类。你可以使用任何开发工具（包括“记事本”）创建应用程序。\n\n在本指南中，你将使用队列存储功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或 Web 应用中运行的代码调用。\n\n## 获取 Azure 客户端库\n\n[AZURE.INCLUDE [get-client-libraries](../includes/get-client-libraries.md)]\n\n## 配置应用程序以访问队列存储\n\n若要使用 Azure 队列存储 API，你需要：\n\n1. 通过使用 [require_once][require_once] 语句引用 autoloader 文件。\n2. 引用可使用的所有类。\n\n下面的示例演示了如何包括 autoloader 文件并引用 **ServicesBuilder** 类。\n\n> [AZURE.NOTE] 本示例（以及本文中的其他示例）假定你已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果你已手动安装这些库或将其作为 PEAR 包安装，则需要引用 `WindowsAzure.php` autoloader 文件。\n\n    require_once 'vendor\\autoload.php';\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n\n在下面的示例中，`require_once` 语句将始终显示，但只会引用执行该示例所需的类。\n\n## 设置 Azure 存储连接\n\n若要实例化 Azure 队列存储客户端，你必须首先具有有效的连接字符串。队列服务连接字符串的格式如下。\n\n对于访问实时服务：\n\n    DefaultEndpointsProtocol=[http|https];AccountName=[yourAccount];AccountKey=[yourKey]\n\n对于访问模拟器存储：\n\n    UseDevelopmentStorage=true\n\n\n若要创建任何 Azure 服务客户端，你将需要使用 **ServicesBuilder** 类。你可以使用以下方法之一：\n\n* 将连接字符串直接传递给它。\n* 使用 **CloudConfigurationManager (CCM)** 检查多个外部源以获取连接字符串：\n    * 默认情况下，它附带了对一个外部源的支持 - 环境变量\n    * 您可通过扩展 **ConnectionStringSource** 类来添加新源。\n\n在此处列出的示例中，将直接传递连接字符串。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n\n## 创建队列\n\n一个 **QueueRestProxy** 对象，让你可以通过使用 **createQueue** 方法创建队列。创建队列时，可以在该队列上设置选项，但此操作不是必需的。（下面的示例演示了如何在队列上设置元数据。）\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Queue\\Models\\CreateQueueOptions;\n\n    // Create queue REST proxy.\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n    // OPTIONAL: Set queue metadata.\n    $createQueueOptions = new CreateQueueOptions();\n    $createQueueOptions->addMetaData(\"key1\", \"value1\");\n    $createQueueOptions->addMetaData(\"key2\", \"value2\");\n\n    try {\n        // Create queue.\n        $queueRestProxy->createQueue(\"myqueue\", $createQueueOptions);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179446.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n> [AZURE.NOTE]您不应依赖元数据密钥的区分大小写。所有密钥都是采用小写形式从服务中读取的。\n\n\n## 向队列添加消息\n\n若要将消息添加到队列，请使用 **QueueRestProxy->createMessage**。此方法接受队列名称、消息文本和消息选项（这些都是可选的）。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Queue\\Models\\CreateMessageOptions;\n\n    // Create queue REST proxy.\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n    try {\n        // Create message.\n        $builder = new ServicesBuilder();\n        $queueRestProxy->createMessage(\"myqueue\", \"Hello World!\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179446.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## 扫视下一条消息\n\n通过调用 **QueueRestProxy->peekMessages**，可以扫视队列前面的消息，而不会从队列中将其删除。默认情况下，**peekMessage** 方法将返回单个消息，但你可以使用 **PeekMessagesOptions->setNumberOfMessages** 方法更改该值。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Queue\\Models\\PeekMessagesOptions;\n\n    // Create queue REST proxy.\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n    // OPTIONAL: Set peek message options.\n    $message_options = new PeekMessagesOptions();\n    $message_options->setNumberOfMessages(1); // Default value is 1.\n\n    try {\n        $peekMessagesResult = $queueRestProxy->peekMessages(\"myqueue\", $message_options);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179446.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    $messages = $peekMessagesResult->getQueueMessages();\n\n    // View messages.\n    $messageCount = count($messages);\n    if($messageCount <= 0){\n        echo \"There are no messages.<br />\";\n    }\n    else{\n        foreach($messages as $message)  {\n            echo \"Peeked message:<br />\";\n            echo \"Message Id: \".$message->getMessageId().\"<br />\";\n            echo \"Date: \".date_format($message->getInsertionDate(), 'Y-m-d').\"<br />\";\n            echo \"Message text: \".$message->getMessageText().\"<br /><br />\";\n        }\n    }\n\n## 取消对下一条消息的排队\n\n你的代码分两步从队列中删除消息。首先，调用 **queuerestproxy->listmessages**，这将使消息对从队列中读取的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。（如果在此时段内未删除该消息，则它将变得在队列上再次可见）。 若要从队列中删除消息，你必须调用 **QueueRestProxy->deleteMessage**。此删除消息的两步过程可确保当您的代码因硬件或软件故障而无法处理消息时，您的其他代码实例可以获取同一消息并重试。你的代码在处理消息后会立即调用 **deleteMessage**。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create queue REST proxy.\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n    // Get message.\n    $listMessagesResult = $queueRestProxy->listMessages(\"myqueue\");\n    $messages = $listMessagesResult->getQueueMessages();\n    $message = $messages[0];\n\n    /* ---------------------\n        Process message.\n       --------------------- */\n\n    // Get message ID and pop receipt.\n    $messageId = $message->getMessageId();\n    $popReceipt = $message->getPopReceipt();\n\n    try {\n        // Delete message.\n        $queueRestProxy->deleteMessage(\"myqueue\", $messageId, $popReceipt);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179446.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## 更改已排队消息的内容\n\n可以通过调用 **QueueRestProxy->updateMessage** 来更改队列中已就位消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 *n*，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create queue REST proxy.\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n    // Get message.\n    $listMessagesResult = $queueRestProxy->listMessages(\"myqueue\");\n    $messages = $listMessagesResult->getQueueMessages();\n    $message = $messages[0];\n\n    // Define new message properties.\n    $new_message_text = \"New message text.\";\n    $new_visibility_timeout = 5; // Measured in seconds.\n\n    // Get message ID and pop receipt.\n    $messageId = $message->getMessageId();\n    $popReceipt = $message->getPopReceipt();\n\n    try {\n        // Update message.\n        $queueRestProxy->updateMessage(\"myqueue\",\n                                    $messageId,\n                                    $popReceipt,\n                                    $new_message_text,\n                                    $new_visibility_timeout);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179446.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## 用于取消对消息进行排队的其他选项\n\n你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的可见超时，从而允许你的代码使用更多或更少的时间来彻底处理每条消息。以下代码示例使用 **getMessages** 方法在一次调用中获取 16 条消息。然后，它会使用 **for** 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\Queue\\Models\\ListMessagesOptions;\n\n    // Create queue REST proxy.\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n    // Set list message options.\n    $message_options = new ListMessagesOptions();\n    $message_options->setVisibilityTimeoutInSeconds(300);\n    $message_options->setNumberOfMessages(16);\n\n    // Get messages.\n    try{\n        $listMessagesResult = $queueRestProxy->listMessages(\"myqueue\",\n                                                         $message_options);\n        $messages = $listMessagesResult->getQueueMessages();\n\n        foreach($messages as $message){\n\n            /* ---------------------\n                Process message.\n            --------------------- */\n\n            // Get message Id and pop receipt.\n            $messageId = $message->getMessageId();\n            $popReceipt = $message->getPopReceipt();\n\n            // Delete message.\n            $queueRestProxy->deleteMessage(\"myqueue\", $messageId, $popReceipt);\n        }\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179446.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## 获取队列长度\n\n你可以获取队列中消息的估计数。**QueueRestProxy->getQueueMetadata** 方法要求队列服务返回有关队列的元数据。对返回的对象调用 **getApproximateMessageCount** 方法将提供队列中消息的计数。此计数仅为近似值，因为只能在队列服务响应您的请求后添加或删除消息。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create queue REST proxy.\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n    try {\n        // Get queue metadata.\n        $queue_metadata = $queueRestProxy->getQueueMetadata(\"myqueue\");\n        $approx_msg_count = $queue_metadata->getApproximateMessageCount();\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179446.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n    echo $approx_msg_count;\n\n## 删除队列\n\n若要删除队列及其包含的所有消息，请调用 **QueueRestProxy->deleteQueue** 方法。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n\n    // Create queue REST proxy.\n    $queueRestProxy = ServicesBuilder::getInstance()->createQueueService($connectionString);\n\n    try {\n        // Delete queue.\n        $queueRestProxy->deleteQueue(\"myqueue\");\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/azure/dd179446.aspx\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n\n## 后续步骤\n\n现在，你已了解有关 Azure 队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。\n\n- 访问 [Azure 存储空间团队博客](http://blogs.msdn.com/b/windowsazurestorage/)。\n\n有关详细信息，另请参阅 [PHP 开发人员中心](/develop/php/)。\n\n[下载]: /documentation/articles/php-download-sdk\n[require_once]: http://www.php.net/manual/en/function.require-once.php\n[Azure 管理门户]: http://manage.windowsazure.cn/\n\n<!---HONumber=Mooncake_0104_2016-->"
}