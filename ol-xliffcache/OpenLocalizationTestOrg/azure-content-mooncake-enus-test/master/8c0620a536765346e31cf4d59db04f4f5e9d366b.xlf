<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c0620a536765346e31cf4d59db04f4f5e9d366b</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>SQL 数据仓库中的 Create Table As Select (CTAS) | Azure</source>
          <target state="new">SQL 数据仓库中的 Create Table As Select (CTAS) | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>有关在开发解决方案时使用 Azure SQL 数据仓库中的 create table as select (CTAS) 语句编写代码的技巧。</source>
          <target state="new">有关在开发解决方案时使用 Azure SQL 数据仓库中的 create table as select (CTAS) 语句编写代码的技巧。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>SQL 数据仓库中的 Create Table As Select (CTAS)</source>
          <target state="new">SQL 数据仓库中的 Create Table As Select (CTAS)</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Create Table As Select (CTAS) 是最重要的 T-SQL 功能之一。它是根据 SELECT 语句的输出创建新表的完全并行化操作。CTAS 是创建表副本的最简单快速方法。你不妨将它视为 SELECT..INTO 的增强版本。本文档提供 CTAS 的示例和最佳实践。</source>
          <target state="new">Create Table As Select (CTAS) 是最重要的 T-SQL 功能之一。它是根据 SELECT 语句的输出创建新表的完全并行化操作。CTAS 是创建表副本的最简单快速方法。你不妨将它视为 SELECT..INTO 的增强版本。本文档提供 CTAS 的示例和最佳实践。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>使用 CTAS 复制表</source>
          <target state="new">使用 CTAS 复制表</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>CTAS 最常见的用途之一就是创建表副本，使你可以更改 DDL。例如，最初你将表创建为 ROUND\_ROBIN，现在想要改为在列上分布的表，则可以使用 CTAS 来更改分布列。CTAS 还可用于更改数据分区、索引或列类型。</source>
          <target state="new">CTAS 最常见的用途之一就是创建表副本，使你可以更改 DDL。例如，最初你将表创建为 ROUND\_ROBIN，现在想要改为在列上分布的表，则可以使用 CTAS 来更改分布列。CTAS 还可用于更改数据分区、索引或列类型。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>假设你在 CREATE TABLE 中没有指定分布列，因而使用 ROUND\_ROBIN 分布的默认分布类型创建表。</source>
          <target state="new">假设你在 CREATE TABLE 中没有指定分布列，因而使用 ROUND\_ROBIN 分布的默认分布类型创建表。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>现在你想要创建此表的新副本并包含群集列存储索引，以便可以使用群集列存储表的性能。你还想要在 ProductKey 上分布此表（因为你预期此列会发生联接）并在联接 ProductKey 期间避免数据移动。最后，你还想要在 OrderDateKey 上添加分区，以便通过删除旧分区来快速删除旧数据。以下是用于将旧表复制到新表的 CTAS 语句。</source>
          <target state="new">现在你想要创建此表的新副本并包含群集列存储索引，以便可以使用群集列存储表的性能。你还想要在 ProductKey 上分布此表（因为你预期此列会发生联接）并在联接 ProductKey 期间避免数据移动。最后，你还想要在 OrderDateKey 上添加分区，以便通过删除旧分区来快速删除旧数据。以下是用于将旧表复制到新表的 CTAS 语句。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>最后，你可以重命名表以切换到新表，然后删除旧表。</source>
          <target state="new">最后，你可以重命名表以切换到新表，然后删除旧表。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>Azure SQL 数据仓库尚不支持自动创建或自动更新统计信息。为了获得查询的最佳性能，在首次加载数据或者在数据发生重大更改之后，创建所有表的所有列统计信息非常重要。有关统计信息的详细说明，请参阅开发主题组中的<bpt id="p1">[</bpt>统计信息<ept id="p1">][]</ept>主题。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>Azure SQL 数据仓库尚不支持自动创建或自动更新统计信息。为了获得查询的最佳性能，在首次加载数据或者在数据发生重大更改之后，创建所有表的所有列统计信息非常重要。有关统计信息的详细说明，请参阅开发主题组中的<bpt id="p1">[</bpt>统计信息<ept id="p1">][]</ept>主题。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>使用 CTAS 解决不支持的功能</source>
          <target state="new">使用 CTAS 解决不支持的功能</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CTAS 还可用于解决以下多种不支持的功能。这往往是一种经过证实的双赢局面，因为代码不但能够兼容，而且通常可以在 SQL 数据仓库中更快速执行。这是完全并行化设计的结果。可以使用 CTAS 解决的方案包括：</source>
          <target state="new">CTAS 还可用于解决以下多种不支持的功能。这往往是一种经过证实的双赢局面，因为代码不但能够兼容，而且通常可以在 SQL 数据仓库中更快速执行。这是完全并行化设计的结果。可以使用 CTAS 解决的方案包括：</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>SELECT..INTO</source>
          <target state="new">SELECT..INTO</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>UPDATE 中的 ANSI JOIN</source>
          <target state="new">UPDATE 中的 ANSI JOIN</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>DELETE 中的 ANSI JOIN</source>
          <target state="new">DELETE 中的 ANSI JOIN</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>MERGE 语句</source>
          <target state="new">MERGE 语句</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>尽量考虑“CTAS 优先”。如果你认为可以使用 CTAS 解决问题，则它往往就是最佳的解决方法，即使你要因此写入更多的数据。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>尽量考虑“CTAS 优先”。如果你认为可以使用 CTAS 解决问题，则它往往就是最佳的解决方法，即使你要因此写入更多的数据。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>SELECT..INTO</source>
          <target state="new">SELECT..INTO</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>你可能会发现 SELECT...INTO 出现在解决方案中的多个位置。</source>
          <target state="new">你可能会发现 SELECT...INTO 出现在解决方案中的多个位置。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>以下是 SELECT..INTO 语句的示例：</source>
          <target state="new">以下是 SELECT..INTO 语句的示例：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>将上述代码转换为 CTAS 相当直接：</source>
          <target state="new">将上述代码转换为 CTAS 相当直接：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>CTAS 当前需要指定分布列。如果你不想要尝试更改分布列，并选择与基础表相同的分布列作为避免数据移动的策略，则 CTAS 将以最快的速度执行。如果你正在创建小型表（其性能并非考虑因素），则可以指定 ROUND\_ROBIN 来避免对分布列做出决策。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>CTAS 当前需要指定分布列。如果你不想要尝试更改分布列，并选择与基础表相同的分布列作为避免数据移动的策略，则 CTAS 将以最快的速度执行。如果你正在创建小型表（其性能并非考虑因素），则可以指定 ROUND\_ROBIN 来避免对分布列做出决策。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>替换 Update 语句的 ANSI Join</source>
          <target state="new">替换 Update 语句的 ANSI Join</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>你可能有一个复杂的更新使用 ANSI 联接语法来执行 UPDATE 或 DELETE，以将两个以上的表联接在一起。</source>
          <target state="new">你可能有一个复杂的更新使用 ANSI 联接语法来执行 UPDATE 或 DELETE，以将两个以上的表联接在一起。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>假设你必须更新此表：</source>
          <target state="new">假设你必须更新此表：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>原始查询看起来可能类似于：</source>
          <target state="new">原始查询看起来可能类似于：</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>由于 SQL 数据仓库不支持在 UPDATE 语句的 FROM 子句中使用 ANSI Join，因此无法在不稍微更改此代码的情况下将它复制过去。</source>
          <target state="new">由于 SQL 数据仓库不支持在 UPDATE 语句的 FROM 子句中使用 ANSI Join，因此无法在不稍微更改此代码的情况下将它复制过去。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>你可以使用 CTAS 和隐式联接的组合来替换此代码：</source>
          <target state="new">你可以使用 CTAS 和隐式联接的组合来替换此代码：</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>替换 Delete 语句的 ANSI Join</source>
          <target state="new">替换 Delete 语句的 ANSI Join</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>有时，删除数据的最佳方法是使用 CTAS。除了删除数据以外，可以只选择想要保留的数据。这对于使用 ANSI 联接语法的 DELETE 语句尤其适用，因为 SQL 数据仓库不支持在 DELETE 语句的 FROM 子句中使用 ANSI Join。</source>
          <target state="new">有时，删除数据的最佳方法是使用 CTAS。除了删除数据以外，可以只选择想要保留的数据。这对于使用 ANSI 联接语法的 DELETE 语句尤其适用，因为 SQL 数据仓库不支持在 DELETE 语句的 FROM 子句中使用 ANSI Join。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>转换后的 DELETE 语句示例如下所示：</source>
          <target state="new">转换后的 DELETE 语句示例如下所示：</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>替换 Merge 语句</source>
          <target state="new">替换 Merge 语句</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>使用 CTAS 至少可以部分替换 Merge 语句。可以将 <ph id="ph1">`INSERT`</ph> 和 <ph id="ph2">`UPDATE`</ph> 合并成单个语句。任何已删除的记录都需要在第二个语句中隔离。</source>
          <target state="new">使用 CTAS 至少可以部分替换 Merge 语句。可以将 <ph id="ph1">`INSERT`</ph> 和 <ph id="ph2">`UPDATE`</ph> 合并成单个语句。任何已删除的记录都需要在第二个语句中隔离。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`UPSERT`</ph> 的示例如下：</source>
          <target state="new"><ph id="ph1">`UPSERT`</ph> 的示例如下：</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CTAS 建议：显式声明数据类型和输出是否可为 null</source>
          <target state="new">CTAS 建议：显式声明数据类型和输出是否可为 null</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>迁移代码时，你可能会遇到这种类型的编码模式：</source>
          <target state="new">迁移代码时，你可能会遇到这种类型的编码模式：</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>你可能自然而然地认为应该将此代码迁移到 CTAS。这是对的。但是，这里有一个隐含的问题。</source>
          <target state="new">你可能自然而然地认为应该将此代码迁移到 CTAS。这是对的。但是，这里有一个隐含的问题。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>以下代码不会生成相同的结果：</source>
          <target state="new">以下代码不会生成相同的结果：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>请注意，列“result”沿用表达式的数据类型和可为 null 的值。如果你不小心处理，可能会导致值存在细微的差异。</source>
          <target state="new">请注意，列“result”沿用表达式的数据类型和可为 null 的值。如果你不小心处理，可能会导致值存在细微的差异。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>尝试使用以下内容作为示例：</source>
          <target state="new">尝试使用以下内容作为示例：</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>为结果存储的值不相同。因为结果列中保留的值用于其他表达式，错误变得更加严重。</source>
          <target state="new">为结果存储的值不相同。因为结果列中保留的值用于其他表达式，错误变得更加严重。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>这对于数据迁移特别重要。尽管第二个查询看起来更准确，但仍有一个问题。相比于源系统，此数据有所不同，这会在迁移中造成完整性问题。这是“错误”答案其实是正确答案的极少见情况之一！</source>
          <target state="new">这对于数据迁移特别重要。尽管第二个查询看起来更准确，但仍有一个问题。相比于源系统，此数据有所不同，这会在迁移中造成完整性问题。这是“错误”答案其实是正确答案的极少见情况之一！</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>我们看到这两个结果之间有差异，追根究底的原因是隐式类型转型。在第一个示例中，表定义了列定义。插入行后，将发生隐式类型转换。在第二个示例中，没有隐式类型转换，因为表达式定义了列的数据类型。请注意，第二个示例中的列已定义为可为 Null 的列，而在第一个示例中还没有定义。在第一个示例中创建表时，尚未显式定义列可为 null。在第二个示例中，它只留给了表达式，默认情况下，这会导致 NULL 定义。</source>
          <target state="new">我们看到这两个结果之间有差异，追根究底的原因是隐式类型转型。在第一个示例中，表定义了列定义。插入行后，将发生隐式类型转换。在第二个示例中，没有隐式类型转换，因为表达式定义了列的数据类型。请注意，第二个示例中的列已定义为可为 Null 的列，而在第一个示例中还没有定义。在第一个示例中创建表时，尚未显式定义列可为 null。在第二个示例中，它只留给了表达式，默认情况下，这会导致 NULL 定义。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>若要解决这些问题，必须在 CTAS 语句的 SELECT 部分中明确设置类型转换和可为 null 属性。无法在创建表的部分中设置这些属性。</source>
          <target state="new">若要解决这些问题，必须在 CTAS 语句的 SELECT 部分中明确设置类型转换和可为 null 属性。无法在创建表的部分中设置这些属性。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>以下示例演示如何修复代码：</source>
          <target state="new">以下示例演示如何修复代码：</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>请注意以下事项：</source>
          <target state="new">请注意以下事项：</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CAST 或 CONVERT 可能已被使用</source>
          <target state="new">CAST 或 CONVERT 可能已被使用</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>ISNULL 用于强制可为 Null 而不是 COALESCE</source>
          <target state="new">ISNULL 用于强制可为 Null 而不是 COALESCE</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>ISNULL 是最外层的函数</source>
          <target state="new">ISNULL 是最外层的函数</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>ISNULL 的第二个部分是常量，即 0</source>
          <target state="new">ISNULL 的第二个部分是常量，即 0</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>若要正确设置可为 null 属性，必须使用 ISNULL 而不是 COALESCE。COALESCE 不是确定性的函数，因此表达式的结果始终可为 Null。ISNULL 则不同。它是确定性的。因此当 ISNULL 函数的第二个部分是常量或文本时，结果值将是 NOT NULL。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>若要正确设置可为 null 属性，必须使用 ISNULL 而不是 COALESCE。COALESCE 不是确定性的函数，因此表达式的结果始终可为 Null。ISNULL 则不同。它是确定性的。因此当 ISNULL 函数的第二个部分是常量或文本时，结果值将是 NOT NULL。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>此技巧不仅可用于确保计算的完整性，它对表分区切换也很重要。假设你根据事实定义了此表：</source>
          <target state="new">此技巧不仅可用于确保计算的完整性，它对表分区切换也很重要。假设你根据事实定义了此表：</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>但是，值字段是计算的表达式，且不是源数据的一部分。</source>
          <target state="new">但是，值字段是计算的表达式，且不是源数据的一部分。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>若要创建分区数据集，你可能需要执行：</source>
          <target state="new">若要创建分区数据集，你可能需要执行：</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>该查询将会顺利运行。但是，当你尝试执行分区切换时，将会出现问题。表定义不匹配。若要使表定义匹配，需要修改 CTAS。</source>
          <target state="new">该查询将会顺利运行。但是，当你尝试执行分区切换时，将会出现问题。表定义不匹配。若要使表定义匹配，需要修改 CTAS。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>因此，可以看出，保持类型一致性并维护 CTAS 上的可为 null 属性是良好的工程最佳实践。这有助于维护计算的完整性，而且还可确保分区切换能够实现。</source>
          <target state="new">因此，可以看出，保持类型一致性并维护 CTAS 上的可为 null 属性是良好的工程最佳实践。这有助于维护计算的完整性，而且还可确保分区切换能够实现。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>有关使用 <bpt id="p1">[</bpt>CTAS<ept id="p1">][]</ept> 的详细信息，请参阅 MSDN。CTAS 是 Azure SQL 数据仓库中最重要的语句之一。请确保全面了解该语句。</source>
          <target state="new">有关使用 <bpt id="p1">[</bpt>CTAS<ept id="p1">][]</ept> 的详细信息，请参阅 MSDN。CTAS 是 Azure SQL 数据仓库中最重要的语句之一。请确保全面了解该语句。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>有关更多开发技巧，请参阅<bpt id="p1">[</bpt>开发概述<ept id="p1">][]</ept>。</source>
          <target state="new">有关更多开发技巧，请参阅<bpt id="p1">[</bpt>开发概述<ept id="p1">][]</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>