<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9da87f472d628c409295287508fd4ddcbe61dd52</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何通过 Java 使用服务总线队列 | Microsoft Azure</source>
          <target state="new">如何通过 Java 使用服务总线队列 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何在 Azure 中使用 Service Bus 队列。用 Java 编写的代码示例。</source>
          <target state="new">了解如何在 Azure 中使用 Service Bus 队列。用 Java 编写的代码示例。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何使用 Service Bus 队列</source>
          <target state="new">如何使用 Service Bus 队列</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本文介绍了如何使用服务总线队列。这些示例用 Java 编写并使用 <bpt id="p1">[</bpt>Azure SDK for Java<ept id="p1">][]</ept>。涉及的任务包括<bpt id="p2">**</bpt>创建队列<ept id="p2">**</ept>、<bpt id="p3">**</bpt>发送和接收消息<ept id="p3">**</ept>以及<bpt id="p4">**</bpt>删除队列<ept id="p4">**</ept>。</source>
          <target state="new">本文介绍了如何使用服务总线队列。这些示例用 Java 编写并使用 <bpt id="p1">[</bpt>Azure SDK for Java<ept id="p1">][]</ept>。涉及的任务包括<bpt id="p2">**</bpt>创建队列<ept id="p2">**</ept>、<bpt id="p3">**</bpt>发送和接收消息<ept id="p3">**</ept>以及<bpt id="p4">**</bpt>删除队列<ept id="p4">**</ept>。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>配置应用程序以使用 Service Bus</source>
          <target state="new">配置应用程序以使用 Service Bus</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>在生成本示例之前，请确保已安装 <bpt id="p1">[</bpt>Azure SDK for Java<ept id="p1">][]</ept>。如果你使用 Eclipse，则可以安装包含 Azure SDK for Java 的 <bpt id="p2">[</bpt>Azure Toolkit for Eclipse<ept id="p2">][]</ept>。然后，你可以将 <bpt id="p3">**</bpt>Microsoft Azure Libraries for Java<ept id="p3">**</ept> 添加到你的项目：</source>
          <target state="new">在生成本示例之前，请确保已安装 <bpt id="p1">[</bpt>Azure SDK for Java<ept id="p1">][]</ept>。如果你使用 Eclipse，则可以安装包含 Azure SDK for Java 的 <bpt id="p2">[</bpt>Azure Toolkit for Eclipse<ept id="p2">][]</ept>。然后，你可以将 <bpt id="p3">**</bpt>Microsoft Azure Libraries for Java<ept id="p3">**</ept> 添加到你的项目：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>将以下 <ph id="ph1">`import`</ph> 语句添加到 Java 文件顶部：</source>
          <target state="new">将以下 <ph id="ph1">`import`</ph> 语句添加到 Java 文件顶部：</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>创建队列</source>
          <target state="new">创建队列</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>服务总线队列的管理操作可通过 <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> 类执行。<bpt id="p2">**</bpt>ServiceBusContract<ept id="p2">**</ept> 对象是使用封装了 SAS 令牌及用于管理它的权限的适当配置构造的，而 <bpt id="p3">**</bpt>ServiceBusContract<ept id="p3">**</ept> 类是与 Azure 进行通信的单一点。</source>
          <target state="new">服务总线队列的管理操作可通过 <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> 类执行。<bpt id="p2">**</bpt>ServiceBusContract<ept id="p2">**</ept> 对象是使用封装了 SAS 令牌及用于管理它的权限的适当配置构造的，而 <bpt id="p3">**</bpt>ServiceBusContract<ept id="p3">**</ept> 类是与 Azure 进行通信的单一点。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 类提供了创建、枚举和删除队列的方法。以下示例演示了如何通过名为“HowToSample”的命名空间，使用 <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> 对象创建名为“TestQueue”的队列：</source>
          <target state="new"><bpt id="p1">**</bpt>ServiceBusService<ept id="p1">**</ept> 类提供了创建、枚举和删除队列的方法。以下示例演示了如何通过名为“HowToSample”的命名空间，使用 <bpt id="p2">**</bpt>ServiceBusService<ept id="p2">**</ept> 对象创建名为“TestQueue”的队列：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>可对 <bpt id="p1">**</bpt>QueueInfo<ept id="p1">**</ept> 执行某些方法，以调整队列的属性（例如，将默认的生存时间 (TTL) 值设置为应用于发送到队列的消息）。以下示例演示了如何创建最大大小为 5GB 且名为 <ph id="ph1">`TestQueue`</ph> 的队列：</source>
          <target state="new">可对 <bpt id="p1">**</bpt>QueueInfo<ept id="p1">**</ept> 执行某些方法，以调整队列的属性（例如，将默认的生存时间 (TTL) 值设置为应用于发送到队列的消息）。以下示例演示了如何创建最大大小为 5GB 且名为 <ph id="ph1">`TestQueue`</ph> 的队列：</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>注意：你可以对 <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> 对象使用 <bpt id="p2">**</bpt>listQueues<ept id="p2">**</ept> 方法来检查具有指定名称的队列在某个服务命名空间中是否已存在。</source>
          <target state="new">注意：你可以对 <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> 对象使用 <bpt id="p2">**</bpt>listQueues<ept id="p2">**</ept> 方法来检查具有指定名称的队列在某个服务命名空间中是否已存在。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>向队列发送消息</source>
          <target state="new">向队列发送消息</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>若要将消息发送到服务总线队列，你的应用程序将获得 <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> 对象。以下代码演示了如何将消息发送到先前在 <ph id="ph1">`HowToSample`</ph> 命名空间中创建的 <ph id="ph2">`TestQueue`</ph> 队列。</source>
          <target state="new">若要将消息发送到服务总线队列，你的应用程序将获得 <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> 对象。以下代码演示了如何将消息发送到先前在 <ph id="ph1">`HowToSample`</ph> 命名空间中创建的 <ph id="ph2">`TestQueue`</ph> 队列。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>在服务总线队列中发送和接收的消息是 <bpt id="p1">[</bpt>BrokeredMessage<ept id="p1">][]</ept> 类的实例。<bpt id="p2">[</bpt>BrokeredMessage<ept id="p2">][]</ept> 对象包含一组标准属性（如 <bpt id="p3">[</bpt>Label<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> 和 <bpt id="p4">[</bpt>TimeToLive<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>）、一个用来保存自定义应用程序特定属性的词典以及大量随机应用程序数据。应用程序可通过将任何可序列化对象传入到 <bpt id="p5">[</bpt>BrokeredMessage<ept id="p5">][]</ept> 的构造函数中来设置消息的正文，然后将使用适当的序列化程序来序列化对象。或者，你可以提供 <bpt id="p6">**</bpt>java.IO.InputStream<ept id="p6">**</ept> 对象。</source>
          <target state="new">在服务总线队列中发送和接收的消息是 <bpt id="p1">[</bpt>BrokeredMessage<ept id="p1">][]</ept> 类的实例。<bpt id="p2">[</bpt>BrokeredMessage<ept id="p2">][]</ept> 对象包含一组标准属性（如 <bpt id="p3">[</bpt>Label<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> 和 <bpt id="p4">[</bpt>TimeToLive<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>）、一个用来保存自定义应用程序特定属性的词典以及大量随机应用程序数据。应用程序可通过将任何可序列化对象传入到 <bpt id="p5">[</bpt>BrokeredMessage<ept id="p5">][]</ept> 的构造函数中来设置消息的正文，然后将使用适当的序列化程序来序列化对象。或者，你可以提供 <bpt id="p6">**</bpt>java.IO.InputStream<ept id="p6">**</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>以下示例演示了如何将五条测试消息发送到在前面的代码段中获取的 <ph id="ph1">`TestQueue`</ph> <bpt id="p1">**</bpt>MessageSender<ept id="p1">**</ept>：</source>
          <target state="new">以下示例演示了如何将五条测试消息发送到在前面的代码段中获取的 <ph id="ph1">`TestQueue`</ph> <bpt id="p1">**</bpt>MessageSender<ept id="p1">**</ept>：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。</source>
          <target state="new">Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>从队列接收消息</source>
          <target state="new">从队列接收消息</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>从队列接收消息的主要方法是使用 <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> 对象。收到的消息可在两种不同模式下工作：<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>PeekLock<ept id="p3">**</ept>。</source>
          <target state="new">从队列接收消息的主要方法是使用 <bpt id="p1">**</bpt>ServiceBusContract<ept id="p1">**</ept> 对象。收到的消息可在两种不同模式下工作：<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>PeekLock<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>当使用 <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> 模式时，接收是一项单次操作，即，当服务总线接收到队列中某条消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept> 模式（默认模式）是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。</source>
          <target state="new">当使用 <bpt id="p1">**</bpt>ReceiveAndDelete<ept id="p1">**</ept> 模式时，接收是一项单次操作，即，当服务总线接收到队列中某条消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id="p2">**</bpt>ReceiveAndDelete<ept id="p2">**</ept> 模式（默认模式）是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式下，接收变成了一个两阶段操作，从而有可能支持无法允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept> 完成接收过程的第二个阶段。当服务总线发现 <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept> 调用时，它会将消息标记为“已使用”并将其从队列中删除。</source>
          <target state="new">在 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式下，接收变成了一个两阶段操作，从而有可能支持无法允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept> 完成接收过程的第二个阶段。当服务总线发现 <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept> 调用时，它会将消息标记为“已使用”并将其从队列中删除。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>以下示例演示如何使用 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式（非默认模式）接收和处理消息。下面的示例将执行无限循环并在消息达到我们的“TestQueue”后进行处理：</source>
          <target state="new">以下示例演示如何使用 <bpt id="p1">**</bpt>PeekLock<ept id="p1">**</ept> 模式（非默认模式）接收和处理消息。下面的示例将执行无限循环并在消息达到我们的“TestQueue”后进行处理：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>如何处理应用程序崩溃和不可读消息</source>
          <target state="new">如何处理应用程序崩溃和不可读消息</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id="p1">**</bpt>unlockMessage<ept id="p1">**</ept> 方法（而不是 <bpt id="p2">**</bpt>deleteMessage<ept id="p2">**</ept> 方法）。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。</source>
          <target state="new">Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id="p1">**</bpt>unlockMessage<ept id="p1">**</ept> 方法（而不是 <bpt id="p2">**</bpt>deleteMessage<ept id="p2">**</ept> 方法）。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使它可再次被接收。</source>
          <target state="new">还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），Service Bus 将自动解锁该消息并使它可再次被接收。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>如果在处理消息之后，发出 <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> 请求之前应用程序发生崩溃，该消息将在应用程序重新启动时重新传送给它。此情况通常称作<bpt id="p2">**</bpt>至少处理一次<ept id="p2">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。通常可使用消息的 <bpt id="p3">**</bpt>getMessageId<ept id="p3">**</ept> 方法实现此操作，这在多个传送尝试中保持不变。</source>
          <target state="new">如果在处理消息之后，发出 <bpt id="p1">**</bpt>deleteMessage<ept id="p1">**</ept> 请求之前应用程序发生崩溃，该消息将在应用程序重新启动时重新传送给它。此情况通常称作<bpt id="p2">**</bpt>至少处理一次<ept id="p2">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。通常可使用消息的 <bpt id="p3">**</bpt>getMessageId<ept id="p3">**</ept> 方法实现此操作，这在多个传送尝试中保持不变。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>现在，你已了解服务总线队列的基础知识，请参阅<bpt id="p1">[</bpt>队列、主题和订阅<ept id="p1">][]</ept>以获取更多信息。</source>
          <target state="new">现在，你已了解服务总线队列的基础知识，请参阅<bpt id="p1">[</bpt>队列、主题和订阅<ept id="p1">][]</ept>以获取更多信息。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅 <bpt id="p1">[</bpt>Java 开发人员中心<ept id="p1">](/develop/java/)</ept>。</source>
          <target state="new">有关详细信息，请参阅 <bpt id="p1">[</bpt>Java 开发人员中心<ept id="p1">](/develop/java/)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>