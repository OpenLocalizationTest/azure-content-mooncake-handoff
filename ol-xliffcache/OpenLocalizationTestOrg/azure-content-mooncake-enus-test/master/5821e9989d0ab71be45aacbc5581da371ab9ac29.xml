{
  "nodes": [
    {
      "content": "使用移动服务 Android 客户端库",
      "pos": [
        28,
        47
      ]
    },
    {
      "content": "了解如何使用适用于 Azure 移动服务的 Android 客户端。",
      "pos": [
        67,
        101
      ]
    },
    {
      "content": "如何使用适用于移动服务的 Android 客户端库",
      "pos": [
        336,
        361
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        463,
        469
      ]
    },
    {
      "content": "本指南说明如何使用适用于 Azure 移动服务的 Android 客户端执行常见任务。所述的任务包括：查询数据；插入、更新和删除数据；对用户进行身份验证；处理错误；自定义客户端。",
      "pos": [
        585,
        674
      ]
    },
    {
      "pos": [
        676,
        818
      ],
      "content": "如果你移动服务的新手，应该先完成<bpt id=\"p1\">[</bpt><ept id=\"p1\">移动服务入门]</ept>教程。成功完成该教程可确保你会安装 Android Studio；该软件可帮助你配置帐户并创建第一个移动服务，安装支持 Android 2.2 或更高版本的移动服务 SDK，但我们建议你针对 Android 4.2 或更高版本进行生成。"
    },
    {
      "pos": [
        1008,
        1035
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"setup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>安装与先决条件"
    },
    {
      "pos": [
        1037,
        1172
      ],
      "content": "假设你已创建一个移动服务和一个表。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>创建表<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/jj193162.aspx)</ept>。在本主题使用的代码中，我们假设表的名称为 <bpt id=\"p2\">*</bpt>ToDoItem<ept id=\"p2\">*</ept>，其中包含以下列："
    },
    {
      "content": "ID",
      "pos": [
        1176,
        1178
      ]
    },
    {
      "content": "text",
      "pos": [
        1181,
        1185
      ]
    },
    {
      "content": "complete",
      "pos": [
        1188,
        1196
      ]
    },
    {
      "content": "相应的类型化客户端对象如下：",
      "pos": [
        1198,
        1212
      ]
    },
    {
      "pos": [
        1343,
        1473
      ],
      "content": "启用动态架构后，Azure 移动服务将基于 insert 或 update 请求中的对象自动生成新列。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>动态架构<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/jj193175.aspx)</ept>。"
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何创建移动服务客户端",
      "pos": [
        1477,
        1516
      ]
    },
    {
      "content": "以下代码将创建用于访问移动服务的 <bpt id=\"p1\">[</bpt>MobileServiceClient<ept id=\"p1\">](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html)</ept> 对象。代码会进入在 <bpt id=\"p2\">*</bpt>AndroidManifest.xml<ept id=\"p2\">*</ept> 中指定为 <bpt id=\"p3\">**</bpt>MAIN<ept id=\"p3\">**</ept> 操作和 <bpt id=\"p4\">**</bpt>LAUNCHER<ept id=\"p4\">**</ept> 类别的 Activity 类的 <ph id=\"ph1\">`onCreate`</ph> 方法。",
      "pos": [
        1517,
        1756
      ]
    },
    {
      "pos": [
        1988,
        2091
      ],
      "content": "在上面的代码中，请将 <ph id=\"ph1\">`MobileServiceUrl`</ph> 和 <ph id=\"ph2\">`AppKey`</ph> 依次替换为移动服务 URL 和应用程序密钥。在 Azure 经典门户中选择你的移动服务，然后单击“仪表板”即可获取这两个值。"
    },
    {
      "pos": [
        2096,
        2131
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"instantiating\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何创建表引用"
    },
    {
      "pos": [
        2133,
        2323
      ],
      "content": "在移动服务中查询或修改数据的最简单方法就是使用<bpt id=\"p1\">*</bpt>类型化编程模型<ept id=\"p1\">*</ept>，因为 Java 是强类型化语言（稍后我们将会介绍<bpt id=\"p2\">*</bpt>非类型化<ept id=\"p2\">*</ept>模型）。在客户端和移动服务之间发送数据时，此模型使用 <bpt id=\"p3\">[</bpt>gson<ept id=\"p3\">](http://go.microsoft.com/fwlink/p/?LinkId=290801)</ept> 库提供对 JSON 的无缝序列化和反序列化：开发人员无需执行任何操作，该框架将处理一切。"
    },
    {
      "pos": [
        2325,
        2434
      ],
      "content": "查询或修改数据所要执行的第一项操作就是通过对 <bpt id=\"p1\">**</bpt>MobileServiceClient<ept id=\"p1\">**</ept> 调用 <bpt id=\"p2\">**</bpt>getTable<ept id=\"p2\">**</ept> 方法来创建一个 <bpt id=\"p3\">**</bpt>MobileServiceTable<ept id=\"p3\">**</ept> 对象。下面是此方法的两个重载："
    },
    {
      "pos": [
        2629,
        2659
      ],
      "content": "在以下代码中，<bpt id=\"p1\">*</bpt>mClient<ept id=\"p1\">*</ept> 是对移动服务客户端的引用。"
    },
    {
      "pos": [
        2661,
        2686
      ],
      "content": "如果类名称与表名称相同，则使用<bpt id=\"p1\">**</bpt>第一个重载<ept id=\"p1\">**</ept>："
    },
    {
      "pos": [
        2774,
        2800
      ],
      "content": "如果表名称与类型名称不同，则使用<bpt id=\"p1\">**</bpt>第二个重载<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        2908,
        2932
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"api\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>API 结构"
    },
    {
      "pos": [
        2935,
        3194
      ],
      "content": "从 2.0 版客户端库开始，移动服务表操作将在所有异步作业（例如涉及查询的方法）和操作（例如插入、更新和删除）中使用 <bpt id=\"p1\">[</bpt>Future<ept id=\"p1\">](http://developer.android.com/reference/java/util/concurrent/Future.html)</ept> 和 <bpt id=\"p2\">[</bpt>AsyncTask<ept id=\"p2\">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> 对象。这就可以更方便地（在后台线程上）执行多个操作，而无需处理多个嵌套回调。"
    },
    {
      "pos": [
        3200,
        3234
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"querying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何从移动服务查询数据"
    },
    {
      "content": "本部分介绍如何向移动服务发出查询。其中的小节介绍了排序、筛选和分页等不同操作。最后，我们将介绍如何将这些操作连接起来。",
      "pos": [
        3236,
        3295
      ]
    },
    {
      "pos": [
        3301,
        3333
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"showAll\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何返回表中的所有项"
    },
    {
      "pos": [
        3335,
        3408
      ],
      "content": "以下代码将返回 <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> 表中的所有项。它会通过将项添加到适配器在 UI 中显示这些项。此代码类似于<bpt id=\"p2\">[</bpt><ept id=\"p2\">移动服务快速入门]</ept>教程中的内容。"
    },
    {
      "pos": [
        4182,
        4273
      ],
      "content": "与此类似的查询使用 <bpt id=\"p1\">[</bpt>AsyncTask<ept id=\"p1\">](http://developer.android.com/reference/android/os/AsyncTask.html)</ept> 对象。"
    },
    {
      "pos": [
        4275,
        4340
      ],
      "content": "<bpt id=\"p1\">*</bpt>result<ept id=\"p1\">*</ept> 变量返回查询的结果，<ph id=\"ph1\">`mToDoTable.execute().get()`</ph> 语句后面的代码演示如何显示单个行。"
    },
    {
      "pos": [
        4347,
        4380
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"filtering\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何筛选返回的数据"
    },
    {
      "pos": [
        4382,
        4463
      ],
      "content": "以下代码将返回 <bpt id=\"p1\">*</bpt>complete<ept id=\"p1\">*</ept> 字段等于 <bpt id=\"p2\">*</bpt>false<ept id=\"p2\">*</ept> 的 <bpt id=\"p3\">*</bpt>ToDoItem<ept id=\"p3\">*</ept> 表中的所有项。<bpt id=\"p4\">*</bpt>mToDoTable<ept id=\"p4\">*</ept> 是对前面创建的移动服务表的引用。"
    },
    {
      "pos": [
        5105,
        5226
      ],
      "content": "通过对表引用执行 <bpt id=\"p1\">**</bpt>where<ept id=\"p1\">**</ept> 方法调用来启动筛选器。然后，依次执行 <bpt id=\"p2\">**</bpt>field<ept id=\"p2\">**</ept> 方法调用和用于指定逻辑谓词的方法调用。可能的谓词方法包括 <bpt id=\"p3\">**</bpt>eq<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>ne<ept id=\"p4\">**</ept>、<bpt id=\"p5\">**</bpt>gt<ept id=\"p5\">**</ept>、<bpt id=\"p6\">**</bpt>ge<ept id=\"p6\">**</ept>、<bpt id=\"p7\">**</bpt>lt<ept id=\"p7\">**</ept>、<bpt id=\"p8\">**</bpt>le<ept id=\"p8\">**</ept> 等。"
    },
    {
      "content": "执行这些操作便足以将数字和字符串字段与特定值进行比较。不过，你还可以执行其他许多操作。",
      "pos": [
        5228,
        5271
      ]
    },
    {
      "pos": [
        5273,
        5405
      ],
      "content": "例如，你可以按日期筛选。你可以比较整个日期字段，或者使用 <bpt id=\"p1\">**</bpt>year<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>month<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>day<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>hour<ept id=\"p4\">**</ept>、<bpt id=\"p5\">**</bpt>minute<ept id=\"p5\">**</ept>和<bpt id=\"p6\">**</bpt>second<ept id=\"p6\">**</ept>等方法比较日期的一部分。以下代码片段将会针对“截止日期”等于 2013 的项添加一个筛选器。"
    },
    {
      "pos": [
        5473,
        5650
      ],
      "content": "你可以使用 <bpt id=\"p1\">**</bpt>startsWith<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>endsWith<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>concat<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>subString<ept id=\"p4\">**</ept>、<bpt id=\"p5\">**</bpt>indexOf<ept id=\"p5\">**</ept>、<bpt id=\"p6\">**</bpt>replace<ept id=\"p6\">**</ept>、<bpt id=\"p7\">**</bpt>toLower<ept id=\"p7\">**</ept>、<bpt id=\"p8\">**</bpt>toUpper<ept id=\"p8\">**</ept>、<bpt id=\"p9\">**</bpt>trim<ept id=\"p9\">**</ept>和<bpt id=\"p10\">**</bpt>length<ept id=\"p10\">**</ept>等方法对字符串字段运行各种复杂筛选器。以下代码片段将会筛选 <bpt id=\"p11\">*</bpt>text<ept id=\"p11\">*</ept> 列以“PRI0”开头的表行。"
    },
    {
      "pos": [
        5724,
        5855
      ],
      "content": "还允许使用  <bpt id=\"p1\">**</bpt>add<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>sub<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>mul<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>div<ept id=\"p4\">**</ept>、<bpt id=\"p5\">**</bpt>mod<ept id=\"p5\">**</ept>、<bpt id=\"p6\">**</bpt>floor<ept id=\"p6\">**</ept>、<bpt id=\"p7\">**</bpt>ceiling<ept id=\"p7\">**</ept>和<bpt id=\"p8\">**</bpt>round<ept id=\"p8\">**</ept> 等方法对数字字段运行各种更复杂的筛选器。以下代码片段将会筛选其中的 <bpt id=\"p9\">*</bpt>duration<ept id=\"p9\">*</ept> 为偶数的表行。"
    },
    {
      "pos": [
        5934,
        5989
      ],
      "content": "你可以使用 <bpt id=\"p1\">**</bpt>and<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>or<ept id=\"p2\">**</ept>和<bpt id=\"p3\">**</bpt>not<ept id=\"p3\">**</ept> 等方法来组合谓词。以下代码片段将组合上面的两个示例。"
    },
    {
      "content": "你可以按照以下代码片段所示来组合与嵌套逻辑运算符：",
      "pos": [
        6111,
        6136
      ]
    },
    {
      "pos": [
        6354,
        6477
      ],
      "content": "有关筛选操作的更详细介绍和示例，请参阅<bpt id=\"p1\">[</bpt>了解移动服务 Android 客户端查询模型的丰富功能<ept id=\"p1\">](http://hashtagfail.com/post/46493261719/mobile-services-android-querying)</ept>。"
    },
    {
      "pos": [
        6483,
        6515
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"sorting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何为返回的数据排序"
    },
    {
      "pos": [
        6517,
        6596
      ],
      "content": "以下代码将返回 <bpt id=\"p1\">*</bpt>ToDoItems<ept id=\"p1\">*</ept> 表中的所有项，返回的结果已按 <bpt id=\"p2\">*</bpt>text<ept id=\"p2\">*</ept> 字段的升序排序。<bpt id=\"p3\">*</bpt>mToDoTable<ept id=\"p3\">*</ept> 是对前面创建的移动服务表的引用。"
    },
    {
      "pos": [
        6673,
        6710
      ],
      "content": "<bpt id=\"p1\">**</bpt>orderBy<ept id=\"p1\">**</ept> 方法的第一个参数是与要排序的字段名称相同的字符串。"
    },
    {
      "pos": [
        6712,
        6752
      ],
      "content": "第二个参数使用 <bpt id=\"p1\">**</bpt>QueryOrder<ept id=\"p1\">**</ept> 枚举来指定是按升序还是按降序排序。"
    },
    {
      "pos": [
        6754,
        6824
      ],
      "content": "请注意，如果你使用 <bpt id=\"p1\">***</bpt>where<ept id=\"p1\">***</ept> 方法筛选，则必须在调用 <bpt id=\"p2\">***</bpt>orderBy<ept id=\"p2\">***</ept> 方法之前调用 <bpt id=\"p3\">***</bpt>where<ept id=\"p3\">***</ept> 方法。"
    },
    {
      "pos": [
        6830,
        6860
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"paging\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在页中返回数据"
    },
    {
      "pos": [
        6862,
        6937
      ],
      "content": "第一个示例演示了如何选择表中的前 5 个项。该查询将返回 <bpt id=\"p1\">*</bpt>ToDoItems<ept id=\"p1\">*</ept> 表中的项。<bpt id=\"p2\">*</bpt>mToDoTable<ept id=\"p2\">*</ept> 是对前面创建的移动服务表的引用。"
    },
    {
      "content": "接下来，我们定义一个查询，以跳过前 5 个项，返回后 5 个项。",
      "pos": [
        7026,
        7058
      ]
    },
    {
      "pos": [
        7117,
        7149
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"selecting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何选择特定的列"
    },
    {
      "pos": [
        7151,
        7238
      ],
      "content": "以下代码演示如何返回 <bpt id=\"p1\">*</bpt>ToDoItems<ept id=\"p1\">*</ept> 表中的所有项，但只显示 <bpt id=\"p2\">*</bpt>complete<ept id=\"p2\">*</ept> 和 <bpt id=\"p3\">*</bpt>text<ept id=\"p3\">*</ept> 字段。<bpt id=\"p4\">*</bpt>mToDoTable<ept id=\"p4\">*</ept> 是对前面创建的移动服务表的引用。"
    },
    {
      "content": "在这里，select 函数的参数是要返回的表列的字符串名称。",
      "pos": [
        7309,
        7339
      ]
    },
    {
      "pos": [
        7341,
        7413
      ],
      "content": "<bpt id=\"p1\">**</bpt>select<ept id=\"p1\">**</ept> 方法需接在 <bpt id=\"p2\">**</bpt>where<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>orderBy<ept id=\"p3\">**</ept> 等方法（如果存在）的后面。它可以后接 <bpt id=\"p4\">**</bpt>top<ept id=\"p4\">**</ept> 等方法。"
    },
    {
      "pos": [
        7419,
        7450
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"chaining\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何连接查询方法"
    },
    {
      "content": "可以连接用于查询移动服务表的方法。这样，你便可以执行多种操作，例如，选择已排序并分页的筛选行的特定列。你可以创建相当复杂的逻辑筛选器。",
      "pos": [
        7453,
        7520
      ]
    },
    {
      "pos": [
        7522,
        7632
      ],
      "content": "这种操作的工作原理是通过使用的查询方法返回 <bpt id=\"p1\">**</bpt>MobileServiceQuery&amp;lt;T&amp;gt;<ept id=\"p1\">**</ept> 对象，随之又对这些对象调用更多的方法。若要结束方法序列并真正运行查询，你可以调用 <bpt id=\"p2\">**</bpt>execute<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "pos": [
        7634,
        7679
      ],
      "content": "在以下代码示例中，<bpt id=\"p1\">*</bpt>mToDoTable<ept id=\"p1\">*</ept> 是对移动服务 <bpt id=\"p2\">*</bpt>ToDoItem<ept id=\"p2\">*</ept> 表的引用。"
    },
    {
      "pos": [
        8032,
        8098
      ],
      "content": "将方法链接在一起时，最重要的是 <bpt id=\"p1\">*</bpt>where<ept id=\"p1\">*</ept> 方法和谓词必须出现在最前面。然后，你就可以按照最符合应用程序需求的顺序调用后续方法。"
    },
    {
      "pos": [
        8104,
        8140
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"inserting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在移动服务中插入数据"
    },
    {
      "content": "以下代码演示了如何在表中插入新行。",
      "pos": [
        8142,
        8159
      ]
    },
    {
      "pos": [
        8161,
        8193
      ],
      "content": "首先，实例化 <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> 类的实例并设置该实例的属性。"
    },
    {
      "content": "接着执行以下代码：",
      "pos": [
        8327,
        8336
      ]
    },
    {
      "content": "此代码将插入新项，并将其添加到适配器以便在 UI 中显示。",
      "pos": [
        9015,
        9044
      ]
    },
    {
      "content": "移动服务支持为表 ID 使用唯一的自定义字符串值。这样，应用程序便可为移动服务表的 ID 列使用自定义值（如电子邮件地址或用户名）。例如，如果你想要根据电子邮件地址识别每条记录，可以使用以下 JSON 对象。",
      "pos": [
        9046,
        9150
      ]
    },
    {
      "content": "如果将新记录插入到表时未提供字符串 ID 值，移动服务将为 ID 生成唯一值。",
      "pos": [
        9322,
        9361
      ]
    },
    {
      "content": "支持字符串 ID 为开发人员带来了以下优势",
      "pos": [
        9363,
        9384
      ]
    },
    {
      "content": "无需往返访问数据库即可生成 ID。",
      "pos": [
        9388,
        9405
      ]
    },
    {
      "content": "更方便地合并不同表或数据库中的记录。",
      "pos": [
        9408,
        9426
      ]
    },
    {
      "content": "ID 值能够更好地与应用程序的逻辑相集成。",
      "pos": [
        9429,
        9450
      ]
    },
    {
      "content": "你也可以使用服务器脚本来设置 ID 值。下面的脚本示例将生成一个自定义 GUID 并将其分配给新记录的 ID。此 ID 类似于你未传入记录的 ID 值时，移动服务生成的 ID 值。",
      "pos": [
        9452,
        9542
      ]
    },
    {
      "content": "如果应用程序提供了某个 ID 的值，移动服务将按原样存储该值，包括前导和尾随空格。不会从值中裁剪掉空格。",
      "pos": [
        10071,
        10123
      ]
    },
    {
      "pos": [
        10125,
        10151
      ],
      "content": "<ph id=\"ph1\">`id`</ph> 的值必须唯一，并且不能包含以下集中的字符："
    },
    {
      "pos": [
        10155,
        10226
      ],
      "content": "控制字符：[0x0000-0x001F] 和 [0x007F-0x009F]。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt><ept id=\"p1\">ASCII 控制代码 C0 和 C1]</ept>。"
    },
    {
      "content": "可打印字符：<bpt id=\"p1\">**</bpt>\"<ept id=\"p1\">**</ept>(0x0022), <bpt id=\"p2\">**</bpt>+<ept id=\"p2\">**</ept> (0x002B), <bpt id=\"p3\">**</bpt>/<ept id=\"p3\">**</ept> (0x002F), <bpt id=\"p4\">**</bpt>?<ept id=\"p4\">**</ept>",
      "pos": [
        10230,
        10288
      ]
    },
    {
      "content": "(0x003F), *<bpt id=\"p1\">*</bpt>\\*<ept id=\"p1\">*</ept> (0x005C), <bpt id=\"p2\">**</bpt>`<ept id=\"p2\">**</ept> (0x0060)",
      "pos": [
        10289,
        10329
      ]
    },
    {
      "content": "ID“.”和“..”",
      "pos": [
        10333,
        10343
      ]
    },
    {
      "pos": [
        10345,
        10489
      ],
      "content": "也可以为表使用整数 ID。若要使用整数 ID，必须使用 <ph id=\"ph1\">`mobile table create`</ph> 命令并结合 <ph id=\"ph2\">`--integerId`</ph> 选项创建表。应在适用于 Azure 的命令行界面 (CLI) 中使用此命令。有关使用 CLI 的详细信息，请参阅 [用于管理移动服务表的 CLI]。"
    },
    {
      "pos": [
        10494,
        10529
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"updating\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在移动服务中更新数据"
    },
    {
      "pos": [
        10531,
        10610
      ],
      "content": "以下代码演示了如何更新表中的数据。在此示例中，<bpt id=\"p1\">*</bpt>item<ept id=\"p1\">*</ept> 是对 <bpt id=\"p2\">*</bpt>ToDoItem<ept id=\"p2\">*</ept> 表中某个行的引用，该表包含一些更改。以下方法会更新表和 UI 适配器。"
    },
    {
      "pos": [
        11455,
        11490
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"deleting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在移动服务中删除数据"
    },
    {
      "content": "以下代码演示了如何删除表中的数据。该代码会从 ToDoItem 表中将 UI 上已选中“已完成”复选框的现有项删除。",
      "pos": [
        11492,
        11550
      ]
    },
    {
      "content": "以下代码演示了执行删除操作的另一种方法。该代码通过指定要删除的行的 ID 字段值（假设等于 \"2FA404AB-E458-44CD-BC1B-3BC847EF0902\"）来删除 ToDoItem 表中的现有项。在实际的应用程序中，你会以某种方式获取 ID，并将它作为变量传入。此处为了简化测试，你可以在 Azure 经典门户中转到你的服务，单击“数据”并复制你要测试的 ID。",
      "pos": [
        12453,
        12641
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a name=\"lookup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何查找特定的项",
      "pos": [
        13316,
        13345
      ]
    },
    {
      "content": "有时，你需要按 <bpt id=\"p1\">*</bpt>id<ept id=\"p1\">*</ept> 查找特定的项，这一点不像查询，因为查询通常会返回满足某些条件的项集合。以下代码演示了如何执行此作业，此处假设 <bpt id=\"p2\">*</bpt>id<ept id=\"p2\">*</ept> 值为 <ph id=\"ph1\">`0380BAFB-BCFF-443C-B7D5-30199F730335`</ph>。在实际的应用程序中，你会以某种方式获取 ID，并将它作为变量传入。此处为了简化测试，你可以在 Azure 经典门户中转到你的服务，单击“数据”选项卡并复制你要测试的 ID。",
      "pos": [
        13346,
        13547
      ]
    },
    {
      "pos": [
        14354,
        14386
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"untyped\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何处理非类型化数据"
    },
    {
      "content": "使用非类型化编程模型可以全面控制 JSON 序列化，在某些情况下，你可能想要使用该模型。例如，你的移动服务表包含大量的列，而你只需要引用其中的某些列。使用类型化模型需要在数据类中定义移动服务表的所有列。但如果使用非类型化模型，只需定义你要使用的列。",
      "pos": [
        14388,
        14512
      ]
    },
    {
      "pos": [
        14514,
        14626
      ],
      "content": "用于访问数据的大多数 API 调用都与类型化编程调用类似。主要差别在于，在非类型化模型中，你要对 <bpt id=\"p1\">**</bpt>MobileServiceJsonTable<ept id=\"p1\">**</ept> 对象而不是 <bpt id=\"p2\">**</bpt>MobileServiceTable<ept id=\"p2\">**</ept> 对象调用方法。"
    },
    {
      "pos": [
        14633,
        14673
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"json_instance\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何创建非类型化表的实例"
    },
    {
      "pos": [
        14675,
        14778
      ],
      "content": "与使用类型化模型相似，首先需要获取表引用，不过，此时该引用的是一个 <bpt id=\"p1\">**</bpt>MobileServicesJsonTable<ept id=\"p1\">**</ept> 对象。对移动服务客户端的实例调用 <bpt id=\"p2\">**</bpt>getTable()<ept id=\"p2\">**</ept> 方法可获取该引用。"
    },
    {
      "content": "首先定义变量：",
      "pos": [
        14780,
        14787
      ]
    },
    {
      "pos": [
        14920,
        15015
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>onCreate<ept id=\"p1\">**</ept> 方法中创建移动服务客户端的实例（在此处为 <bpt id=\"p2\">*</bpt>mClient<ept id=\"p2\">*</ept> 变量）后，接下来请使用以下代码创建 <bpt id=\"p3\">**</bpt>MobileServiceJsonTable<ept id=\"p3\">**</ept> 的实例。"
    },
    {
      "pos": [
        15118,
        15214
      ],
      "content": "创建 <bpt id=\"p1\">**</bpt>MobileServiceJsonTable<ept id=\"p1\">**</ept> 的实例后，便可以对该实例调用使用类型化编程模型所能调用的几乎所有方法。但是，在某些情况下，这些方法采用非类型化参数，如以下示例所示。"
    },
    {
      "pos": [
        15220,
        15257
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"json_insert\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何插入到非类型化表中"
    },
    {
      "pos": [
        15259,
        15486
      ],
      "content": "以下代码演示了如何执行插入。第一步是创建属于 <ph id=\"ph1\">&lt;a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph2\">&lt;/a&gt;</ph> 库的一部分的 <bpt id=\"p1\">[</bpt><bpt id=\"p2\">**</bpt>JsonObject<ept id=\"p2\">**</ept><ept id=\"p1\">](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)</ept>。"
    },
    {
      "pos": [
        15623,
        15725
      ],
      "content": "下一步是插入对象。传递给 <bpt id=\"p1\">**</bpt>insert<ept id=\"p1\">**</ept> 方法的回调函数是 <bpt id=\"p2\">**</bpt>TableJsonOperationCallback<ept id=\"p2\">**</ept> 类的实例。注意，<bpt id=\"p3\">*</bpt>insert<ept id=\"p3\">*</ept> 方法的参数如何成为 JsonObject。"
    },
    {
      "content": "如果需要获取所插入对象的ID，请使用此方法调用：",
      "pos": [
        16209,
        16233
      ]
    },
    {
      "pos": [
        16294,
        16333
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"json_delete\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何从非类型化表中删除数据"
    },
    {
      "pos": [
        16335,
        16451
      ],
      "content": "以下代码演示了如何删除一个实例，在本例中，该实例就是我们在前一个 <bpt id=\"p1\">*</bpt>insert<ept id=\"p1\">*</ept> 示例中创建的 <bpt id=\"p2\">**</bpt>JsonObject<ept id=\"p2\">**</ept> 的实例。请注意该代码与类型化案例相同，但方法具有不同的签名，因为它引用了 <bpt id=\"p3\">**</bpt>JsonObject<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "还可以使用某个实例的 ID 来直接删除该实例：",
      "pos": [
        16485,
        16508
      ]
    },
    {
      "pos": [
        16552,
        16589
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"json_get\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何返回非类型化表中的所有行"
    },
    {
      "content": "以下代码演示了如何检索整个表。由于使用的是 Json 数据表，你可以选择性地只检索某些表的列。",
      "pos": [
        16591,
        16638
      ]
    },
    {
      "content": "你可以通过连接与类型化编程模型中所用方法同名的方法来执行筛选、排序和分页。",
      "pos": [
        18097,
        18134
      ]
    },
    {
      "pos": [
        18140,
        18174
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"binding\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何将数据绑定到用户界面"
    },
    {
      "content": "数据绑定涉及到三个组件：",
      "pos": [
        18176,
        18188
      ]
    },
    {
      "content": "数据源",
      "pos": [
        18192,
        18195
      ]
    },
    {
      "content": "屏幕布局",
      "pos": [
        18198,
        18202
      ]
    },
    {
      "content": "将两者绑定起来的适配器",
      "pos": [
        18205,
        18216
      ]
    },
    {
      "pos": [
        18218,
        18325
      ],
      "content": "在以下示例代码中，我们会将移动服务表 <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> 中的数据返回到一个数组中。这是数据应用程序经常使用的一种模式：数据库查询通常会返回行的集合，客户将在列表或数组中获取该集合。在此示例中，该数组就是数据源。"
    },
    {
      "content": "代码将指定屏幕布局，用于定义设备中显示的数据视图。",
      "pos": [
        18327,
        18352
      ]
    },
    {
      "pos": [
        18354,
        18421
      ],
      "content": "数据源和屏幕布局通过适配器绑定在一起，在此代码中，该适配器是 <bpt id=\"p1\">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id=\"p1\">*</ept> 类的扩展。"
    },
    {
      "pos": [
        18427,
        18454
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"layout\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何定义布局"
    },
    {
      "pos": [
        18457,
        18520
      ],
      "content": "布局由多个 XML 代码段定义。以某个现有布局为例，我们假设以下代码表示了要在其中填充服务器数据的 <bpt id=\"p1\">**</bpt>ListView<ept id=\"p1\">**</ept>。"
    },
    {
      "pos": [
        18760,
        18896
      ],
      "content": "在上面的代码中，<bpt id=\"p1\">*</bpt>listitem<ept id=\"p1\">*</ept> 属性指定列表中单个行的布局 ID。以下代码指定了一个复选框及其关联的文本。这些元素将会针对列表中的每个项实例化一次。如果使用更复杂的布局，则会在屏幕中指定更多的字段。以下代码摘自 <bpt id=\"p2\">*</bpt>row\\_list\\_to\\_do.xml<ept id=\"p2\">*</ept> 文件。"
    },
    {
      "pos": [
        19449,
        19478
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"adapter\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何定义适配器"
    },
    {
      "pos": [
        19484,
        19608
      ],
      "content": "由于此处视图的数据源是一个 <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> 数组，因此我们需要基于 <bpt id=\"p2\">*</bpt>ArrayAdapter&amp;lt;ToDoItem&amp;gt;<ept id=\"p2\">*</ept> 类子类化适配器。此子类将使用 <bpt id=\"p3\">*</bpt>row_list_to_do<ept id=\"p3\">*</ept> 布局为每个 <bpt id=\"p4\">*</bpt>ToDoItem<ept id=\"p4\">*</ept> 生成一个视图。"
    },
    {
      "pos": [
        19610,
        19656
      ],
      "content": "在代码中，我们可以定义以下类作为 <bpt id=\"p1\">*</bpt>ArrayAdapter&amp;lt;E&amp;gt;<ept id=\"p1\">*</ept> 类的扩展："
    },
    {
      "pos": [
        19730,
        19783
      ],
      "content": "必须重写适配器的 <bpt id=\"p1\">*</bpt>getView<ept id=\"p1\">*</ept> 方法。以下示例代码演示了如何执行此操作：具体的代码根据应用程序而定。"
    },
    {
      "content": "在活动中创建此类的实例，如下所示：",
      "pos": [
        20411,
        20428
      ]
    },
    {
      "pos": [
        20536,
        20654
      ],
      "content": "请注意，ToDoItemAdapter 构造函数的第二个参数是对布局的引用。在该构造函数的调用后面添加以下代码，以便先获取对 <bpt id=\"p1\">**</bpt>ListView<ept id=\"p1\">**</ept> 的引用，然后调用 <bpt id=\"p2\">*</bpt>setAdapter<ept id=\"p2\">*</ept>，使该视图将自身配置为使用刚创建的适配器："
    },
    {
      "pos": [
        20781,
        20814
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"use-adapter\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何使用适配器"
    },
    {
      "pos": [
        20816,
        20884
      ],
      "content": "现在，你可以使用数据绑定了。以下代码演示了如何获取移动服务表中的项，清除适配器，然后调用适配器的 <bpt id=\"p1\">*</bpt>add<ept id=\"p1\">*</ept> 方法以在表中填充返回的项。"
    },
    {
      "pos": [
        21676,
        21799
      ],
      "content": "每次修改 <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> 表后，也必须调用该适配器（如果你想要显示执行修改操作后的结果）。由于修改是按记录完成的，因此要处理的是单个行而不是一个集合。插入项时，需要对适配器调用 <bpt id=\"p2\">*</bpt>add<ept id=\"p2\">*</ept> 方法；删除项时，需要调用 <bpt id=\"p3\">*</bpt>remove<ept id=\"p3\">*</ept> 方法。"
    },
    {
      "pos": [
        21803,
        21840
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"custom-api\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：调用自定义 API"
    },
    {
      "pos": [
        21842,
        22079
      ],
      "content": "自定义 API 可让你定义自定义终结点，这些终结点将会公开不映射到插入、更新、删除或读取操作的服务器功能。使用自定义 API 能够以更大的力度控制消息传送，包括读取和设置 HTTP 消息标头，以及定义除 JSON 以外的消息正文格式。有关如何在移动服务中创建自定义 API 的示例，请参阅<bpt id=\"p1\">[</bpt>如何：定义自定义 API 终结点<ept id=\"p1\">](/documentation/articles/mobile-services-dotnet-backend-define-custom-api)</ept>。"
    },
    {
      "pos": [
        22199,
        22239
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"authentication\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何对用户进行身份验证"
    },
    {
      "pos": [
        22241,
        22475
      ],
      "content": "移动服务支持使用各种外部标识提供者对应用程序用户进行身份验证和授权，这些提供者包括：Microsoft 帐户和 Azure Active Directory。你可以在表中设置权限，以便将特定操作的访问权限限制给已经过身份验证的用户。你还可以在后端中使用已经过身份验证的用户的标识来实施授权规则。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>身份验证入门<ept id=\"p1\">](/documentation/articles/mobile-services-android-get-started-users/)</ept>。"
    },
    {
      "pos": [
        22477,
        22591
      ],
      "content": "支持两种身份验证流: <bpt id=\"p1\">*</bpt>服务器<ept id=\"p1\">*</ept>流和<bpt id=\"p2\">*</bpt>客户端<ept id=\"p2\">*</ept>流。服务器流依赖于提供者的 Web 身份验证界面，因此可提供最简便的身份验证体验。客户端流依赖于提供者和设备特定的 SDK，因此允许与设备特定的功能（例如单一登录）进行更深入的集成。"
    },
    {
      "content": "在应用程序中启用身份验证需要执行以下三个步骤：",
      "pos": [
        22593,
        22616
      ]
    },
    {
      "content": "注册你的应用程序以使用提供者进行身份验证，然后配置移动服务",
      "pos": [
        22620,
        22649
      ]
    },
    {
      "content": "将表权限限制给已经过身份验证的用户",
      "pos": [
        22652,
        22669
      ]
    },
    {
      "content": "向应用程序添加身份验证代码",
      "pos": [
        22672,
        22685
      ]
    },
    {
      "content": "移动服务支持使用以下现有标识提供者对用户进行身份验证：",
      "pos": [
        22688,
        22715
      ]
    },
    {
      "content": "Microsoft 帐户",
      "pos": [
        22719,
        22731
      ]
    },
    {
      "content": "Azure Active Directory",
      "pos": [
        22734,
        22756
      ]
    },
    {
      "content": "你可以在表中设置权限，以便将特定操作的访问权限限制给已经过身份验证的用户。还可以使用已经过身份验证的用户的 ID 来修改请求。",
      "pos": [
        22758,
        22821
      ]
    },
    {
      "pos": [
        22823,
        22968
      ],
      "content": "前两个任务可使用 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">](https://manage.windowsazure.cn/)</ept>来完成。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>身份验证入门<ept id=\"p2\">](/documentation/articles/mobile-services-android-get-started-users/)</ept>。"
    },
    {
      "pos": [
        22974,
        23011
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"caching\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何向应用程序添加身份验证代码"
    },
    {
      "content": "将以下 import 语句添加到应用程序的活动文件。",
      "pos": [
        23017,
        23043
      ]
    },
    {
      "pos": [
        23512,
        23621
      ],
      "content": "在活动类的 <bpt id=\"p1\">**</bpt>onCreate<ept id=\"p1\">**</ept> 方法中，在创建 <ph id=\"ph1\">`MobileServiceClient`</ph> 对象的代码后面添加以下代码行：我们假设对 <ph id=\"ph2\">`MobileServiceClient`</ph> 对象的引用为 <bpt id=\"p2\">*</bpt>mClient<ept id=\"p2\">*</ept>。"
    },
    {
      "content": "此代码将使用 Google 登录对用户进行身份验证。此时将出现一个对话框，其中显示了已经过身份验证的用户的 ID。如果未正常完成身份验证，你将无法继续操作。",
      "pos": [
        24386,
        24464
      ]
    },
    {
      "pos": [
        24472,
        24587
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果使用的标识提供程序不是 Google，请将传递给上述 <bpt id=\"p1\">**</bpt>login<ept id=\"p1\">**</ept> 方法的值更改为下列其中一项：<bpt id=\"p2\">_</bpt>MicrosoftAccount<ept id=\"p2\">_</ept>或 <bpt id=\"p3\">_</bpt>WindowsAzureActiveDirectory<ept id=\"p3\">_</ept>。"
    },
    {
      "content": "运行应用程序时，请使用选择的标识提供者登录。",
      "pos": [
        24593,
        24615
      ]
    },
    {
      "pos": [
        24622,
        24654
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"caching\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何缓存身份验证令牌"
    },
    {
      "content": "本部分说明如何缓存身份验证令牌。执行此操作的目的是避免令牌仍然有效且应用程序处于“休眠”状态时用户必须再次完成身份验证。",
      "pos": [
        24656,
        24716
      ]
    },
    {
      "content": "缓存身份验证令牌需要将用户 ID 和身份验证令牌存储在设备本地。下一次启动应用程序时，你只需检查缓存，如果这些值存在，则你可以跳过登录过程，并使用这些数据重新进入客户端。但是，这些数据是敏感的，为安全起见，应该以加密形式存储，以防手机失窃。",
      "pos": [
        24718,
        24838
      ]
    },
    {
      "content": "以下代码段演示了如何获取 Microsoft 帐户登录的令牌。该令牌已缓存，以后如果找到了缓存，将重新加载该令牌。",
      "pos": [
        24840,
        24897
      ]
    },
    {
      "content": "如果令牌过期会发生什么情况呢？ 在这种情况下，如果你尝试使用它来建立连接，将会收到“401 未授权”响应。此时，用户必须登录以获取新令牌。使用筛选器可以截获对移动服务的调用以及来自移动服务的响应，因此不需要在应用程序中调用移动服务的每个位置编写代码来处理这种情况。此时，筛选器代码将测试 401 响应，根据需要触发登录进程，然后恢复生成 401 响应的请求。",
      "pos": [
        26849,
        27028
      ]
    },
    {
      "pos": [
        27034,
        27068
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"customizing\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何自定义客户端"
    },
    {
      "content": "你可以通过多种方法自定义移动服务客户端的默认行为。",
      "pos": [
        27070,
        27095
      ]
    },
    {
      "pos": [
        27101,
        27132
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"headers\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何自定义请求标头"
    },
    {
      "pos": [
        27134,
        27191
      ],
      "content": "你可能需要将一个自定义标头附加到每个传出请求。按如下所示配置 <bpt id=\"p1\">**</bpt>ServiceFilter<ept id=\"p1\">**</ept> 可以实现此目的："
    },
    {
      "pos": [
        27983,
        28019
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"serialization\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何自定义序列化"
    },
    {
      "content": "默认情况下，移动服务假设服务器上与客户端上的表名称、列名称和数据类型都完全匹配。但是，在许多情况下，服务器上和客户端上的名称并不匹配。现举一例：你要更改某个现有的客户端，使其使用移动服务而不是竞争者的产品。",
      "pos": [
        28021,
        28124
      ]
    },
    {
      "content": "此时，你可能需要执行类似于下面的自定义操作：",
      "pos": [
        28126,
        28148
      ]
    },
    {
      "content": "使移动服务表中使用的列名称与你在客户端中使用的名称不匹配",
      "pos": [
        28152,
        28180
      ]
    },
    {
      "content": "使用一个移动服务表，其名称不同于该表在客户端中映射到的类",
      "pos": [
        28183,
        28211
      ]
    },
    {
      "content": "启用属性自动大写",
      "pos": [
        28214,
        28222
      ]
    },
    {
      "content": "向对象添加复杂属性",
      "pos": [
        28225,
        28234
      ]
    },
    {
      "pos": [
        28240,
        28280
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"columns\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何映射不同的客户端名称和服务器名称"
    },
    {
      "pos": [
        28282,
        28336
      ],
      "content": "假设你的 Java 客户端代码为 <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> 对象属性使用了类似于下面的标准 Java 样式名称。"
    },
    {
      "content": "mId",
      "pos": [
        28340,
        28343
      ]
    },
    {
      "content": "mText",
      "pos": [
        28346,
        28351
      ]
    },
    {
      "content": "mComplete",
      "pos": [
        28354,
        28363
      ]
    },
    {
      "content": "mDuration",
      "pos": [
        28366,
        28375
      ]
    },
    {
      "pos": [
        28378,
        28524
      ],
      "content": "则你必须将客户端名称序列化为与服务器上 <bpt id=\"p1\">*</bpt>ToDoItem<ept id=\"p1\">*</ept> 表的列名称匹配的 JSON 名称。以下代码利用 <ph id=\"ph1\">&lt;a href=\"http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph2\">&lt;/a&gt;</ph> 库来执行此操作。"
    },
    {
      "pos": [
        28873,
        28914
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"table\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在客户端与移动服务之间映射不同的表名称"
    },
    {
      "content": "如以下代码所示，只需使用",
      "pos": [
        28916,
        28928
      ]
    },
    {
      "content": "<bpt id=\"p1\">**</bpt>getTable()<ept id=\"p1\">**</ept> 函数的重写之一，就能轻松地将客户端表名称映射为不同的移动服务表名称。",
      "pos": [
        28930,
        28979
      ]
    },
    {
      "pos": [
        29060,
        29097
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"conversions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何自动执行列名称映射"
    },
    {
      "pos": [
        29099,
        29282
      ],
      "content": "如前一部分中所示，映射只包含几个列的简短表的列名称并不复杂。但是，如果表包含大量的列（例如 20 或 30 个列），则我们可以调用 <ph id=\"ph1\">&lt;a href=\"http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph2\">&lt;/a&gt;</ph> API 并指定要应用到每个列的转换策略，这样就无需批注每一个列名称。"
    },
    {
      "pos": [
        29284,
        29436
      ],
      "content": "为此，我们需要使用 <ph id=\"ph1\">&lt;a href=\"http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph2\">&lt;/a&gt;</ph> 库，Android 客户端库在幕后使用该库将 Java 对象序列化为要发送到 Azure 移动服务的 JSON 数据。"
    },
    {
      "pos": [
        29438,
        29567
      ],
      "content": "以下代码使用 <bpt id=\"p1\">*</bpt>setFieldNamingStrategy()<ept id=\"p1\">*</ept> 方法，我们在其中定义了 <bpt id=\"p2\">*</bpt>FieldNamingStrategy()<ept id=\"p2\">*</ept> 方法。此方法指定删除初始字符（“m”），然后将每个字段名称的下一个字符小写。此代码还启用了输出 JSON 的整齐打印。"
    },
    {
      "content": "必须在对移动服务客户端对象执行任何方法调用之前执行此代码。",
      "pos": [
        30005,
        30034
      ]
    },
    {
      "pos": [
        30040,
        30077
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"complex\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何将对象或数组属性存储到表中"
    },
    {
      "content": "到目前为止，我们的所有序列化示例都使用了可轻松序列化成 JSON 和移动服务表的基元类型（例如整数和字符串）。假设我们要将一个不能自动序列化成 JSON 和表的复杂对象添加到客户端类型。例如，我们要将一个字符串数组添加到客户端对象。此时，我们需要指定如何执行序列化，以及如何将数组存储到移动服务表中。",
      "pos": [
        30080,
        30230
      ]
    },
    {
      "pos": [
        30232,
        30481
      ],
      "content": "若要查看有关如何执行此操作的示例，请阅读博客文章<ph id=\"ph1\">&lt;a href=\"http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson\" target=\"_blank\"&gt;</ph>在移动服务 Android 客户端中使用 <ph id=\"ph2\">&lt;a href=\"http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\"&gt;</ph>gson<ph id=\"ph3\">&lt;/a&gt;</ph> 库自定义序列化<ph id=\"ph4\">&lt;/a&gt;</ph>。"
    },
    {
      "content": "每当我们要使用一个不能自动序列化成 JSON 和移动服务表的复杂对象时，就可以使用此常规方法。",
      "pos": [
        30483,
        30530
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"使用移动服务 Android 客户端库\" \n    description=\"了解如何使用适用于 Azure 移动服务的 Android 客户端。\" \n    services=\"mobile-services\" \n    documentationCenter=\"android\" \n    authors=\"RickSaling\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.date=\"10/05/2015\" \n    wacn.date=\"01/29/2016\"/>\n\n\n# 如何使用适用于移动服务的 Android 客户端库\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n[AZURE.INCLUDE [mobile-services-selector-client-library](../includes/mobile-services-selector-client-library.md)]\n\n本指南说明如何使用适用于 Azure 移动服务的 Android 客户端执行常见任务。所述的任务包括：查询数据；插入、更新和删除数据；对用户进行身份验证；处理错误；自定义客户端。\n\n如果你移动服务的新手，应该先完成[移动服务入门]教程。成功完成该教程可确保你会安装 Android Studio；该软件可帮助你配置帐户并创建第一个移动服务，安装支持 Android 2.2 或更高版本的移动服务 SDK，但我们建议你针对 Android 4.2 或更高版本进行生成。\n\n<!-- 可以在[此处](http://go.microsoft.com/fwlink/p/?LinkId=298735)找到有关 Android 客户端库的 Javadocs API 参考。-->\n\n[AZURE.INCLUDE [mobile-services-concepts](../includes/mobile-services-concepts.md)]\n\n##<a name=\"setup\"></a>安装与先决条件\n\n假设你已创建一个移动服务和一个表。有关详细信息，请参阅[创建表](https://msdn.microsoft.com/zh-cn/library/azure/jj193162.aspx)。在本主题使用的代码中，我们假设表的名称为 *ToDoItem*，其中包含以下列：\n\n- ID\n- text\n- complete\n\n相应的类型化客户端对象如下：\n\n    public class ToDoItem {\n        private String id;\n        private String text;\n        private Boolean complete;\n    }\n    \n启用动态架构后，Azure 移动服务将基于 insert 或 update 请求中的对象自动生成新列。有关详细信息，请参阅[动态架构](https://msdn.microsoft.com/zh-cn/library/azure/jj193175.aspx)。\n\n##<a name=\"create-client\"></a>如何创建移动服务客户端\n以下代码将创建用于访问移动服务的 [MobileServiceClient](http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure/mobileservices/MobileServiceClient.html) 对象。代码会进入在 *AndroidManifest.xml* 中指定为 **MAIN** 操作和 **LAUNCHER** 类别的 Activity 类的 `onCreate` 方法。\n\n        MobileServiceClient mClient = new MobileServiceClient(\n                \"MobileServiceUrl\", // Replace with the above Site URL\n                \"AppKey\",           // replace with the Application Key \n                this)\n\n在上面的代码中，请将 `MobileServiceUrl` 和 `AppKey` 依次替换为移动服务 URL 和应用程序密钥。在 Azure 经典门户中选择你的移动服务，然后单击“仪表板”即可获取这两个值。\n\n## <a name=\"instantiating\"></a>如何创建表引用\n\n在移动服务中查询或修改数据的最简单方法就是使用*类型化编程模型*，因为 Java 是强类型化语言（稍后我们将会介绍*非类型化*模型）。在客户端和移动服务之间发送数据时，此模型使用 [gson](http://go.microsoft.com/fwlink/p/?LinkId=290801) 库提供对 JSON 的无缝序列化和反序列化：开发人员无需执行任何操作，该框架将处理一切。\n\n查询或修改数据所要执行的第一项操作就是通过对 **MobileServiceClient** 调用 **getTable** 方法来创建一个 **MobileServiceTable** 对象。下面是此方法的两个重载：\n\n    public class MobileServiceClient {\n        public <E> MobileServiceTable<E> getTable(Class<E> clazz);\n        public <E> MobileServiceTable<E> getTable(String name, Class<E> clazz);\n    }\n\n在以下代码中，*mClient* 是对移动服务客户端的引用。\n\n如果类名称与表名称相同，则使用**第一个重载**：\n\n        MobileServiceTable<ToDoItem> mToDoTable = mClient.getTable(ToDoItem.class);\n\n\n如果表名称与类型名称不同，则使用**第二个重载**。\n\n        MobileServiceTable<ToDoItem> mToDoTable = mClient.getTable(\"ToDoItemBackup\", ToDoItem.class);\n\n## <a name=\"api\"></a>API 结构\n \n从 2.0 版客户端库开始，移动服务表操作将在所有异步作业（例如涉及查询的方法）和操作（例如插入、更新和删除）中使用 [Future](http://developer.android.com/reference/java/util/concurrent/Future.html) 和 [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) 对象。这就可以更方便地（在后台线程上）执行多个操作，而无需处理多个嵌套回调。\n\n\n## <a name=\"querying\"></a>如何从移动服务查询数据\n\n本部分介绍如何向移动服务发出查询。其中的小节介绍了排序、筛选和分页等不同操作。最后，我们将介绍如何将这些操作连接起来。\n\n### <a name=\"showAll\"></a>如何返回表中的所有项\n\n以下代码将返回 *ToDoItem* 表中的所有项。它会通过将项添加到适配器在 UI 中显示这些项。此代码类似于[移动服务快速入门]教程中的内容。\n\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n\n                    final MobileServiceList<ToDoItem> result = mToDoTable.execute().get();\n                    runOnUiThread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            mAdapter.clear();\n                        for (ToDoItem item : result) {\n                                mAdapter.add(item);\n                    }\n                }\n            });\n               } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n               }\n               return result;\n            }\n        }.execute();\n\n\n与此类似的查询使用 [AsyncTask](http://developer.android.com/reference/android/os/AsyncTask.html) 对象。\n\n*result* 变量返回查询的结果，`mToDoTable.execute().get()` 语句后面的代码演示如何显示单个行。\n\n\n### <a name=\"filtering\"></a>如何筛选返回的数据\n\n以下代码将返回 *complete* 字段等于 *false* 的 *ToDoItem* 表中的所有项。*mToDoTable* 是对前面创建的移动服务表的引用。\n\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final MobileServiceList<ToDoItem> result = \n                        mToDoTable.where().field(\"complete\").eq(false).execute().get();\n                    for (ToDoItem item : result) {\n                        Log.i(TAG, \"Read object with ID \" + item.id);  \n                    }\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                } \n                return null;\n            }\n        }.execute();\n\n\n\n通过对表引用执行 **where** 方法调用来启动筛选器。然后，依次执行 **field** 方法调用和用于指定逻辑谓词的方法调用。可能的谓词方法包括 **eq**、**ne**、**gt**、**ge**、**lt**、**le** 等。\n\n执行这些操作便足以将数字和字符串字段与特定值进行比较。不过，你还可以执行其他许多操作。\n\n例如，你可以按日期筛选。你可以比较整个日期字段，或者使用 **year**、**month**、**day**、**hour**、**minute**和**second**等方法比较日期的一部分。以下代码片段将会针对“截止日期”等于 2013 的项添加一个筛选器。\n\n        mToDoTable.where().year(\"due\").eq(2013).execute().get();\n\n你可以使用 **startsWith**、**endsWith**、**concat**、**subString**、**indexOf**、**replace**、**toLower**、**toUpper**、**trim**和**length**等方法对字符串字段运行各种复杂筛选器。以下代码片段将会筛选 *text* 列以“PRI0”开头的表行。\n\n        mToDoTable.where().startsWith(\"text\", \"PRI0\").execute().get();\n\n还允许使用  **add**、**sub**、**mul**、**div**、**mod**、**floor**、**ceiling**和**round** 等方法对数字字段运行各种更复杂的筛选器。以下代码片段将会筛选其中的 *duration* 为偶数的表行。\n\n        mToDoTable.where().field(\"duration\").mod(2).eq(0).execute().get();\n\n\n你可以使用 **and**、**or**和**not** 等方法来组合谓词。以下代码片段将组合上面的两个示例。\n\n        mToDoTable.where().year(\"due\").eq(2013).and().startsWith(\"text\", \"PRI0\")\n                    .execute().get();\n\n你可以按照以下代码片段所示来组合与嵌套逻辑运算符：\n\n        mToDoTable.where()\n                    .year(\"due\").eq(2013)\n                        .and\n                    (startsWith(\"text\", \"PRI0\").or().field(\"duration\").gt(10))\n                    .execute().get();\n\n有关筛选操作的更详细介绍和示例，请参阅[了解移动服务 Android 客户端查询模型的丰富功能](http://hashtagfail.com/post/46493261719/mobile-services-android-querying)。\n\n### <a name=\"sorting\"></a>如何为返回的数据排序\n\n以下代码将返回 *ToDoItems* 表中的所有项，返回的结果已按 *text* 字段的升序排序。*mToDoTable* 是对前面创建的移动服务表的引用。\n\n        mToDoTable.orderBy(\"text\", QueryOrder.Ascending).execute().get();\n\n**orderBy** 方法的第一个参数是与要排序的字段名称相同的字符串。\n\n第二个参数使用 **QueryOrder** 枚举来指定是按升序还是按降序排序。\n\n请注意，如果你使用 ***where*** 方法筛选，则必须在调用 ***orderBy*** 方法之前调用 ***where*** 方法。\n\n### <a name=\"paging\"></a>如何在页中返回数据\n\n第一个示例演示了如何选择表中的前 5 个项。该查询将返回 *ToDoItems* 表中的项。*mToDoTable* 是对前面创建的移动服务表的引用。\n\n       final MobileServiceList<ToDoItem> result = mToDoTable.top(5).execute().get();\n\n\n接下来，我们定义一个查询，以跳过前 5 个项，返回后 5 个项。\n\n        mToDoTable.skip(5).top(5).execute().get();\n\n\n### <a name=\"selecting\"></a>如何选择特定的列\n\n以下代码演示如何返回 *ToDoItems* 表中的所有项，但只显示 *complete* 和 *text* 字段。*mToDoTable* 是对前面创建的移动服务表的引用。\n\n        mToDoTable.select(\"complete\", \"text\").execute().get();\n\n    \n在这里，select 函数的参数是要返回的表列的字符串名称。\n\n**select** 方法需接在 **where** 和 **orderBy** 等方法（如果存在）的后面。它可以后接 **top** 等方法。\n\n### <a name=\"chaining\"></a>如何连接查询方法 \n\n可以连接用于查询移动服务表的方法。这样，你便可以执行多种操作，例如，选择已排序并分页的筛选行的特定列。你可以创建相当复杂的逻辑筛选器。\n\n这种操作的工作原理是通过使用的查询方法返回 **MobileServiceQuery&lt;T&gt;** 对象，随之又对这些对象调用更多的方法。若要结束方法序列并真正运行查询，你可以调用 **execute** 方法。\n\n在以下代码示例中，*mToDoTable* 是对移动服务 *ToDoItem* 表的引用。\n\n        mToDoTable.where().year(\"due\").eq(2013)\n                        .and().startsWith(\"text\", \"PRI0\")\n                        .or().field(\"duration\").gt(10)\n                    .select(\"id\", \"complete\", \"text\", \"duration\")\n                    .orderBy(duration, QueryOrder.Ascending).top(20)                \n                    .execute().get();\n\n将方法链接在一起时，最重要的是 *where* 方法和谓词必须出现在最前面。然后，你就可以按照最符合应用程序需求的顺序调用后续方法。\n\n\n## <a name=\"inserting\"></a>如何在移动服务中插入数据\n\n以下代码演示了如何在表中插入新行。\n\n首先，实例化 *ToDoItem* 类的实例并设置该实例的属性。\n\n        ToDoItem mToDoItem = new ToDoItem();\n        mToDoItem.text = \"Test Program\";\n        mToDoItem.complete = false;\n        \n 接着执行以下代码：\n\n        // Insert the new item\n        new AsyncTask<Void, Void, Void>() {\n    \n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.insert(item).get();\n                    if (!item.isComplete()) {\n                        runOnUiThread(new Runnable() {\n                            public void run() {\n                                mAdapter.add(item);\n            }\n        });\n                    }\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n\n\n此代码将插入新项，并将其添加到适配器以便在 UI 中显示。\n\n移动服务支持为表 ID 使用唯一的自定义字符串值。这样，应用程序便可为移动服务表的 ID 列使用自定义值（如电子邮件地址或用户名）。例如，如果你想要根据电子邮件地址识别每条记录，可以使用以下 JSON 对象。\n\n        ToDoItem mToDoItem = new ToDoItem();\n        mToDoItem.id = \"myemail@mydomain.com\";\n        mToDoItem.text = \"Test Program\";\n        mToDoItem.complete = false;\n\n如果将新记录插入到表时未提供字符串 ID 值，移动服务将为 ID 生成唯一值。\n\n支持字符串 ID 为开发人员带来了以下优势\n\n+ 无需往返访问数据库即可生成 ID。\n+ 更方便地合并不同表或数据库中的记录。\n+ ID 值能够更好地与应用程序的逻辑相集成。\n\n你也可以使用服务器脚本来设置 ID 值。下面的脚本示例将生成一个自定义 GUID 并将其分配给新记录的 ID。此 ID 类似于你未传入记录的 ID 值时，移动服务生成的 ID 值。\n\n    //Example of generating an id. This is not required since Mobile Services\n    //will generate an id if one is not passed in.\n    item.id = item.id || newGuid();\n    request.execute();\n\n    function newGuid() {\n        var pad4 = function(str) { return \"0000\".substring(str.length) + str; };\n        var hex4 = function () { return pad4(Math.floor(Math.random() * 0x10000 /* 65536 */ ).toString(16)); };\n        return (hex4() + hex4() + \"-\" + hex4() + \"-\" + hex4() + \"-\" + hex4() + \"-\" + hex4() + hex4() + hex4());\n    }\n\n\n如果应用程序提供了某个 ID 的值，移动服务将按原样存储该值，包括前导和尾随空格。不会从值中裁剪掉空格。\n\n`id` 的值必须唯一，并且不能包含以下集中的字符：\n\n+ 控制字符：[0x0000-0x001F] 和 [0x007F-0x009F]。有关详细信息，请参阅 [ASCII 控制代码 C0 和 C1]。\n+  可打印字符：**\"**(0x0022), **+** (0x002B), **/** (0x002F), **?** (0x003F), **\\** (0x005C), **`** (0x0060)\n+  ID“.”和“..”\n\n也可以为表使用整数 ID。若要使用整数 ID，必须使用 `mobile table create` 命令并结合 `--integerId` 选项创建表。应在适用于 Azure 的命令行界面 (CLI) 中使用此命令。有关使用 CLI 的详细信息，请参阅 [用于管理移动服务表的 CLI]。\n\n\n##<a name=\"updating\"></a>如何在移动服务中更新数据\n\n以下代码演示了如何更新表中的数据。在此示例中，*item* 是对 *ToDoItem* 表中某个行的引用，该表包含一些更改。以下方法会更新表和 UI 适配器。\n\n    private void updateItem(final ToDoItem item) {\n        if (mClient == null) {\n            return;\n                } \n    \n        new AsyncTask<Void, Void, Void>() {\n    \n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.update(item).get();\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            if (item.isComplete()) {\n                                mAdapter.remove(item);\n                            }\n                            refreshItemsFromTable();\n            }\n        });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n## <a name=\"deleting\"></a>如何在移动服务中删除数据\n\n以下代码演示了如何删除表中的数据。该代码会从 ToDoItem 表中将 UI 上已选中“已完成”复选框的现有项删除。\n\n    public void checkItem(final ToDoItem item) {\n        if (mClient == null) {\n            return;\n        }\n\n        // Set the item as completed and update it in the table\n        item.setComplete(true);\n\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.delete(item);\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            if (item.isComplete()) {\n                                mAdapter.remove(item);\n                }\n                            refreshItemsFromTable();\n            }\n        });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n\n以下代码演示了执行删除操作的另一种方法。该代码通过指定要删除的行的 ID 字段值（假设等于 \"2FA404AB-E458-44CD-BC1B-3BC847EF0902\"）来删除 ToDoItem 表中的现有项。在实际的应用程序中，你会以某种方式获取 ID，并将它作为变量传入。此处为了简化测试，你可以在 Azure 经典门户中转到你的服务，单击“数据”并复制你要测试的 ID。\n\n    public void deleteItem(View view) {\n\n        final String ID = \"2FA404AB-E458-44CD-BC1B-3BC847EF0902\";\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mToDoTable.delete(ID);\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            refreshItemsFromTable();\n            }\n        });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n##<a name=\"lookup\"></a>如何查找特定的项\n有时，你需要按 *id* 查找特定的项，这一点不像查询，因为查询通常会返回满足某些条件的项集合。以下代码演示了如何执行此作业，此处假设 *id* 值为 `0380BAFB-BCFF-443C-B7D5-30199F730335`。在实际的应用程序中，你会以某种方式获取 ID，并将它作为变量传入。此处为了简化测试，你可以在 Azure 经典门户中转到你的服务，单击“数据”选项卡并复制你要测试的 ID。\n\n    /**\n     * Lookup specific item from table and UI\n     */\n    public void lookup(View view) {\n\n        final String ID = \"0380BAFB-BCFF-443C-B7D5-30199F730335\";\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final ToDoItem result = mToDoTable.lookUp(ID).get();\n                    runOnUiThread(new Runnable() {\n                        public void run() {\n                            mAdapter.clear();\n                            mAdapter.add(result);\n            }\n        });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n## <a name=\"untyped\"></a>如何处理非类型化数据\n\n使用非类型化编程模型可以全面控制 JSON 序列化，在某些情况下，你可能想要使用该模型。例如，你的移动服务表包含大量的列，而你只需要引用其中的某些列。使用类型化模型需要在数据类中定义移动服务表的所有列。但如果使用非类型化模型，只需定义你要使用的列。\n\n用于访问数据的大多数 API 调用都与类型化编程调用类似。主要差别在于，在非类型化模型中，你要对 **MobileServiceJsonTable** 对象而不是 **MobileServiceTable** 对象调用方法。\n\n\n### <a name=\"json_instance\"></a>如何创建非类型化表的实例\n\n与使用类型化模型相似，首先需要获取表引用，不过，此时该引用的是一个 **MobileServicesJsonTable** 对象。对移动服务客户端的实例调用 **getTable()** 方法可获取该引用。\n\n首先定义变量：\n\n    /**\n     * Mobile Service Json Table used to access untyped data\n     */\n    private MobileServiceJsonTable mJsonToDoTable;\n\n\n\n在 **onCreate** 方法中创建移动服务客户端的实例（在此处为 *mClient* 变量）后，接下来请使用以下代码创建 **MobileServiceJsonTable** 的实例。\n\n\n    // Get the Mobile Service Json Table to use\n    mJsonToDoTable = mClient.getTable(\"ToDoItem\");\n\n创建 **MobileServiceJsonTable** 的实例后，便可以对该实例调用使用类型化编程模型所能调用的几乎所有方法。但是，在某些情况下，这些方法采用非类型化参数，如以下示例所示。\n\n### <a name=\"json_insert\"></a>如何插入到非类型化表中\n\n以下代码演示了如何执行插入。第一步是创建属于 <a href=\" http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> 库的一部分的 [**JsonObject**](http://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/JsonObject.html)。\n\n        JsonObject item = new JsonObject();\n        item.addProperty(\"text\", \"Wake up\");\n        item.addProperty(\"complete\", false);\n\n下一步是插入对象。传递给 **insert** 方法的回调函数是 **TableJsonOperationCallback** 类的实例。注意，*insert* 方法的参数如何成为 JsonObject。\n         \n        // Insert the new item\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    mJsonToDoTable.insert(item).get();\n                    refreshItemsFromTable();\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n\n\n如果需要获取所插入对象的ID，请使用此方法调用：\n\n    jsonObject.getAsJsonPrimitive(\"id\").getAsInt());\n\n\n### <a name=\"json_delete\"></a>如何从非类型化表中删除数据\n\n以下代码演示了如何删除一个实例，在本例中，该实例就是我们在前一个 *insert* 示例中创建的 **JsonObject** 的实例。请注意该代码与类型化案例相同，但方法具有不同的签名，因为它引用了 **JsonObject**。\n\n\n    mToDoTable.delete(item);\n\n\n还可以使用某个实例的 ID 来直接删除该实例：\n        \n    mToDoTable.delete(ID);\n\n\n\n### <a name=\"json_get\"></a>如何返回非类型化表中的所有行\n\n以下代码演示了如何检索整个表。由于使用的是 Json 数据表，你可以选择性地只检索某些表的列。\n\n    public void showAllUntyped(View view) {\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final JsonElement result = mJsonToDoTable.execute().get();\n                    final JsonArray results = result.getAsJsonArray();\n                    runOnUiThread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                            mAdapter.clear();\n                    for(JsonElement item : results){\n                                String ID = item.getAsJsonObject().getAsJsonPrimitive(\"id\").getAsString();\n                                String mText = item.getAsJsonObject().getAsJsonPrimitive(\"text\").getAsString();\n                                Boolean mComplete = item.getAsJsonObject().getAsJsonPrimitive(\"complete\").getAsBoolean();\n                                ToDoItem mToDoItem = new ToDoItem();\n                                mToDoItem.setId(ID);\n                                mToDoItem.setText(mText);\n                                mToDoItem.setComplete(mComplete);\n                                mAdapter.add(mToDoItem);\n                }\n            }\n        });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n你可以通过连接与类型化编程模型中所用方法同名的方法来执行筛选、排序和分页。\n\n\n## <a name=\"binding\"></a>如何将数据绑定到用户界面\n\n数据绑定涉及到三个组件：\n\n- 数据源\n- 屏幕布局\n- 将两者绑定起来的适配器\n\n在以下示例代码中，我们会将移动服务表 *ToDoItem* 中的数据返回到一个数组中。这是数据应用程序经常使用的一种模式：数据库查询通常会返回行的集合，客户将在列表或数组中获取该集合。在此示例中，该数组就是数据源。\n\n代码将指定屏幕布局，用于定义设备中显示的数据视图。\n\n数据源和屏幕布局通过适配器绑定在一起，在此代码中，该适配器是 *ArrayAdapter&lt;ToDoItem&gt;* 类的扩展。\n\n### <a name=\"layout\"></a>如何定义布局\n \n布局由多个 XML 代码段定义。以某个现有布局为例，我们假设以下代码表示了要在其中填充服务器数据的 **ListView**。\n\n        <ListView\n            android:id=\"@+id/listViewToDo\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            tools:listitem=\"@layout/row_list_to_do\" >\n        </ListView>\n    \n\n在上面的代码中，*listitem* 属性指定列表中单个行的布局 ID。以下代码指定了一个复选框及其关联的文本。这些元素将会针对列表中的每个项实例化一次。如果使用更复杂的布局，则会在屏幕中指定更多的字段。以下代码摘自 *row\\_list\\_to\\_do.xml* 文件。\n\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:orientation=\"horizontal\">           \n            <CheckBox\n                android:id=\"@+id/checkToDoItem\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:text=\"@string/checkbox_text\" />\n        </LinearLayout>\n        \n\n### <a name=\"adapter\"></a>如何定义适配器\n    \n由于此处视图的数据源是一个 *ToDoItem* 数组，因此我们需要基于 *ArrayAdapter&lt;ToDoItem&gt;* 类子类化适配器。此子类将使用 *row_list_to_do* 布局为每个 *ToDoItem* 生成一个视图。\n\n在代码中，我们可以定义以下类作为 *ArrayAdapter&lt;E&gt;* 类的扩展：\n\n        public class ToDoItemAdapter extends ArrayAdapter<ToDoItem> {\n\n\n必须重写适配器的 *getView* 方法。以下示例代码演示了如何执行此操作：具体的代码根据应用程序而定。\n\n    public View getView(int position, View convertView, ViewGroup parent) {\n        View row = convertView;\n\n        final ToDoItem currentItem = getItem(position);\n\n        if (row == null) {\n            LayoutInflater inflater = ((Activity) mContext).getLayoutInflater();\n            row = inflater.inflate(R.layout.row_list_to_do, parent, false);\n        }\n\n        row.setTag(currentItem);\n\n        final CheckBox checkBox = (CheckBox) row.findViewById(R.id.checkToDoItem);\n        checkBox.setText(currentItem.getText());\n        checkBox.setChecked(false);\n        checkBox.setEnabled(true);\n\n        return row;\n    }\n\n在活动中创建此类的实例，如下所示：\n\n        ToDoItemAdapter mAdapter;\n        mAdapter = new ToDoItemAdapter(this, R.layout.row_list_to_do);\n\n请注意，ToDoItemAdapter 构造函数的第二个参数是对布局的引用。在该构造函数的调用后面添加以下代码，以便先获取对 **ListView** 的引用，然后调用 *setAdapter*，使该视图将自身配置为使用刚创建的适配器：\n\n        ListView listViewToDo = (ListView) findViewById(R.id.listViewToDo);\n        listViewToDo.setAdapter(mAdapter);\n\n\n### <a name=\"use-adapter\"></a>如何使用适配器\n\n现在，你可以使用数据绑定了。以下代码演示了如何获取移动服务表中的项，清除适配器，然后调用适配器的 *add* 方法以在表中填充返回的项。\n\n    public void showAll(View view) {\n        new AsyncTask<Void, Void, Void>() {\n            @Override\n            protected Void doInBackground(Void... params) {\n                try {\n                    final MobileServiceList<ToDoItem> result = mToDoTable.execute().get();\n                    runOnUiThread(new Runnable() {\n\n                        @Override\n                        public void run() {\n                    mAdapter.clear();\n                    for (ToDoItem item : result) {\n                        mAdapter.add(item);\n                    }\n                } \n        });\n                } catch (Exception exception) {\n                    createAndShowDialog(exception, \"Error\");\n                }\n                return null;\n            }\n        }.execute();\n    }\n\n每次修改 *ToDoItem* 表后，也必须调用该适配器（如果你想要显示执行修改操作后的结果）。由于修改是按记录完成的，因此要处理的是单个行而不是一个集合。插入项时，需要对适配器调用 *add* 方法；删除项时，需要调用 *remove* 方法。\n\n##<a name=\"custom-api\"></a>如何：调用自定义 API\n\n自定义 API 可让你定义自定义终结点，这些终结点将会公开不映射到插入、更新、删除或读取操作的服务器功能。使用自定义 API 能够以更大的力度控制消息传送，包括读取和设置 HTTP 消息标头，以及定义除 JSON 以外的消息正文格式。有关如何在移动服务中创建自定义 API 的示例，请参阅[如何：定义自定义 API 终结点](/documentation/articles/mobile-services-dotnet-backend-define-custom-api)。\n\n[AZURE.INCLUDE [mobile-services-android-call-custom-api](../includes/mobile-services-android-call-custom-api.md)]\n\n\n##<a name=\"authentication\"></a>如何对用户进行身份验证\n\n移动服务支持使用各种外部标识提供者对应用程序用户进行身份验证和授权，这些提供者包括：Microsoft 帐户和 Azure Active Directory。你可以在表中设置权限，以便将特定操作的访问权限限制给已经过身份验证的用户。你还可以在后端中使用已经过身份验证的用户的标识来实施授权规则。有关详细信息，请参阅[身份验证入门](/documentation/articles/mobile-services-android-get-started-users/)。\n\n支持两种身份验证流: *服务器*流和*客户端*流。服务器流依赖于提供者的 Web 身份验证界面，因此可提供最简便的身份验证体验。客户端流依赖于提供者和设备特定的 SDK，因此允许与设备特定的功能（例如单一登录）进行更深入的集成。\n\n在应用程序中启用身份验证需要执行以下三个步骤：\n\n- 注册你的应用程序以使用提供者进行身份验证，然后配置移动服务\n- 将表权限限制给已经过身份验证的用户\n- 向应用程序添加身份验证代码\n\n\n移动服务支持使用以下现有标识提供者对用户进行身份验证：\n\n- Microsoft 帐户\n- Azure Active Directory\n\n你可以在表中设置权限，以便将特定操作的访问权限限制给已经过身份验证的用户。还可以使用已经过身份验证的用户的 ID 来修改请求。\n\n前两个任务可使用 [Azure 经典门户](https://manage.windowsazure.cn/)来完成。有关详细信息，请参阅[身份验证入门](/documentation/articles/mobile-services-android-get-started-users/)。\n\n### <a name=\"caching\"></a>如何向应用程序添加身份验证代码\n\n1.  将以下 import 语句添加到应用程序的活动文件。\n\n        import java.util.concurrent.ExecutionException;\n        import java.util.concurrent.atomic.AtomicBoolean;\n\n        import android.content.Context;\n        import android.content.SharedPreferences;\n        import android.content.SharedPreferences.Editor;\n\n        import com.microsoft.windowsazure.mobileservices.authentication.MobileServiceAuthenticationProvider;\n        import com.microsoft.windowsazure.mobileservices.authentication.MobileServiceUser;\n\n2. 在活动类的 **onCreate** 方法中，在创建 `MobileServiceClient` 对象的代码后面添加以下代码行：我们假设对 `MobileServiceClient` 对象的引用为 *mClient*。\n    \n            // Login using the Google provider.\n        \n        ListenableFuture<MobileServiceUser> mLogin = mClient.login(MobileServiceAuthenticationProvider.Google);\n\n        Futures.addCallback(mLogin, new FutureCallback<MobileServiceUser>() {\n                        @Override\n            public void onFailure(Throwable exc) {\n                createAndShowDialog((Exception) exc, \"Error\");\n                            }\n            @Override\n            public void onSuccess(MobileServiceUser user) {\n                createAndShowDialog(String.format(\n                        \"You are now logged in - %1$2s\",\n                        user.getUserId()), \"Success\");\n                createTable();  \n                        }\n                    });\n\n    此代码将使用 Google 登录对用户进行身份验证。此时将出现一个对话框，其中显示了已经过身份验证的用户的 ID。如果未正常完成身份验证，你将无法继续操作。\n\n    > [AZURE.NOTE]如果使用的标识提供程序不是 Google，请将传递给上述 **login** 方法的值更改为下列其中一项：_MicrosoftAccount_或 _WindowsAzureActiveDirectory_。\n\n\n3. 运行应用程序时，请使用选择的标识提供者登录。\n\n\n### <a name=\"caching\"></a>如何缓存身份验证令牌\n\n本部分说明如何缓存身份验证令牌。执行此操作的目的是避免令牌仍然有效且应用程序处于“休眠”状态时用户必须再次完成身份验证。\n\n缓存身份验证令牌需要将用户 ID 和身份验证令牌存储在设备本地。下一次启动应用程序时，你只需检查缓存，如果这些值存在，则你可以跳过登录过程，并使用这些数据重新进入客户端。但是，这些数据是敏感的，为安全起见，应该以加密形式存储，以防手机失窃。\n\n以下代码段演示了如何获取 Microsoft 帐户登录的令牌。该令牌已缓存，以后如果找到了缓存，将重新加载该令牌。\n\n    private void authenticate() {\n        if (LoadCache())\n        {\n            createTable();\n        }\n        else\n        {\n                // Login using the Google provider.    \n                ListenableFuture<MobileServiceUser> mLogin = mClient.login(MobileServiceAuthenticationProvider.Google);\n        \n                Futures.addCallback(mLogin, new FutureCallback<MobileServiceUser>() {\n                        @Override\n                    public void onFailure(Throwable exc) {\n                                createAndShowDialog(\"You must log in. Login Required\", \"Error\");\n                            }\n                    @Override\n                    public void onSuccess(MobileServiceUser user) {\n                        createAndShowDialog(String.format(\n                                \"You are now logged in - %1$2s\",\n                                user.getUserId()), \"Success\");\n                        cacheUserToken(mClient.getCurrentUser());\n                        createTable();  \n                        }\n                });     }\n        }\n\n\n    private boolean LoadCache()\n    {\n        SharedPreferences prefs = getSharedPreferences(\"temp\", Context.MODE_PRIVATE);\n        String tmp1 = prefs.getString(\"tmp1\", \"undefined\"); \n        if (tmp1 == \"undefined\")\n            return false;\n        String tmp2 = prefs.getString(\"tmp2\", \"undefined\"); \n        if (tmp2 == \"undefined\")\n            return false;\n        MobileServiceUser user = new MobileServiceUser(tmp1);\n        user.setAuthenticationToken(tmp2);\n        mClient.setCurrentUser(user);       \n        return true;\n    }\n\n\n    private void cacheUser(MobileServiceUser user)\n    {\n        SharedPreferences prefs = getSharedPreferences(\"temp\", Context.MODE_PRIVATE);\n        Editor editor = prefs.edit();\n        editor.putString(\"tmp1\", user.getUserId());\n        editor.putString(\"tmp2\", user.getAuthenticationToken());\n        editor.commit();\n    }\n\n\n如果令牌过期会发生什么情况呢？ 在这种情况下，如果你尝试使用它来建立连接，将会收到“401 未授权”响应。此时，用户必须登录以获取新令牌。使用筛选器可以截获对移动服务的调用以及来自移动服务的响应，因此不需要在应用程序中调用移动服务的每个位置编写代码来处理这种情况。此时，筛选器代码将测试 401 响应，根据需要触发登录进程，然后恢复生成 401 响应的请求。\n\n\n## <a name=\"customizing\"></a>如何自定义客户端\n\n你可以通过多种方法自定义移动服务客户端的默认行为。\n\n### <a name=\"headers\"></a>如何自定义请求标头\n\n你可能需要将一个自定义标头附加到每个传出请求。按如下所示配置 **ServiceFilter** 可以实现此目的：\n\n    private class CustomHeaderFilter implements ServiceFilter {\n\n        @Override\n        public ListenableFuture<ServiceFilterResponse> handleRequest(\n                    ServiceFilterRequest request, \n                    NextServiceFilterCallback next) {\n\n            runOnUiThread(new Runnable() {\n        \n            @Override\n                public void run() {\n                    request.addHeader(\"My-Header\", \"Value\");                    }\n        });\n\n            SettableFuture<ServiceFilterResponse> result = SettableFuture.create();\n            try {\n                ServiceFilterResponse response = next.onNext(request).get();\n                result.set(response);\n            } catch (Exception exc) {\n                result.setException(exc);\n            }\n        }\n\n### <a name=\"serialization\"></a>如何自定义序列化\n\n默认情况下，移动服务假设服务器上与客户端上的表名称、列名称和数据类型都完全匹配。但是，在许多情况下，服务器上和客户端上的名称并不匹配。现举一例：你要更改某个现有的客户端，使其使用移动服务而不是竞争者的产品。\n\n此时，你可能需要执行类似于下面的自定义操作：\n\n- 使移动服务表中使用的列名称与你在客户端中使用的名称不匹配\n- 使用一个移动服务表，其名称不同于该表在客户端中映射到的类\n- 启用属性自动大写\n- 向对象添加复杂属性\n\n### <a name=\"columns\"></a>如何映射不同的客户端名称和服务器名称\n\n假设你的 Java 客户端代码为 *ToDoItem* 对象属性使用了类似于下面的标准 Java 样式名称。\n\n- mId\n- mText\n- mComplete\n- mDuration\n\n\n则你必须将客户端名称序列化为与服务器上 *ToDoItem* 表的列名称匹配的 JSON 名称。以下代码利用 <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> 库来执行此操作。\n\n    @com.google.gson.annotations.SerializedName(\"text\")\n    private String mText;\n\n    @com.google.gson.annotations.SerializedName(\"id\")\n    private int mId;\n\n    @com.google.gson.annotations.SerializedName(\"complete\")\n    private boolean mComplete;\n \n    @com.google.gson.annotations.SerializedName(\"duration\")\n    private String mDuration;\n\n### <a name=\"table\"></a>如何在客户端与移动服务之间映射不同的表名称\n\n如以下代码所示，只需使用 \n**getTable()** 函数的重写之一，就能轻松地将客户端表名称映射为不同的移动服务表名称。\n\n        mToDoTable = mClient.getTable(\"ToDoItemBackup\", ToDoItem.class);\n\n\n### <a name=\"conversions\"></a>如何自动执行列名称映射\n\n如前一部分中所示，映射只包含几个列的简短表的列名称并不复杂。但是，如果表包含大量的列（例如 20 或 30 个列），则我们可以调用 <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> API 并指定要应用到每个列的转换策略，这样就无需批注每一个列名称。\n\n为此，我们需要使用 <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> 库，Android 客户端库在幕后使用该库将 Java 对象序列化为要发送到 Azure 移动服务的 JSON 数据。\n\n以下代码使用 *setFieldNamingStrategy()* 方法，我们在其中定义了 *FieldNamingStrategy()* 方法。此方法指定删除初始字符（“m”），然后将每个字段名称的下一个字符小写。此代码还启用了输出 JSON 的整齐打印。\n\n    client.setGsonBuilder(\n        MobileServiceClient\n        .createMobileServiceGsonBuilder()\n        .setFieldNamingStrategy(new FieldNamingStrategy() {\n            public String translateName(Field field) {\n                String name = field.getName();\n                return Character.toLowerCase(name.charAt(1))\n                    + name.substring(2);\n                }\n            })\n            .setPrettyPrinting());\n    \n\n\n必须在对移动服务客户端对象执行任何方法调用之前执行此代码。\n\n### <a name=\"complex\"></a>如何将对象或数组属性存储到表中 \n\n到目前为止，我们的所有序列化示例都使用了可轻松序列化成 JSON 和移动服务表的基元类型（例如整数和字符串）。假设我们要将一个不能自动序列化成 JSON 和表的复杂对象添加到客户端类型。例如，我们要将一个字符串数组添加到客户端对象。此时，我们需要指定如何执行序列化，以及如何将数组存储到移动服务表中。\n\n若要查看有关如何执行此操作的示例，请阅读博客文章<a href=\"http://hashtagfail.com/post/44606137082/mobile-services-android-serialization-gson\" target=\"_blank\">在移动服务 Android 客户端中使用 <a href=\"http://go.microsoft.com/fwlink/p/?LinkId=290801\" target=\"_blank\">gson</a> 库自定义序列化</a>。\n\n每当我们要使用一个不能自动序列化成 JSON 和移动服务表的复杂对象时，就可以使用此常规方法。\n\n<!-- Anchors. -->\n\n[What is Mobile Services]: #what-is\n[Concepts]: #concepts\n[How to: Create the Mobile Services client]: #create-client\n[How to: Create a table reference]: #instantiating\n[The API structure]: #api\n[How to: Query data from a mobile service]: #querying\n[Return all Items]: #showAll\n[Filter returned data]: #filtering\n[Sort returned data]: #sorting\n[Return data in pages]: #paging\n[Select specific columns]: #selecting\n[How to: Concatenate query methods]: #chaining\n[How to: Bind data to the user interface]: #binding\n[How to: Define the layout]: #layout\n[How to: Define the adapter]: #adapter\n[How to: Use the adapter]: #use-adapter\n[How to: Insert data into a mobile service]: #inserting\n[How to: update data in a mobile service]: #updating\n[How to: Delete data in a mobile service]: #deleting\n[How to: Look up a specific item]: #lookup\n[How to: Work with untyped data]: #untyped\n[How to: Authenticate users]: #authentication\n[Cache authentication tokens]: #caching\n[How to: Handle errors]: #errors\n[How to: Design unit tests]: #tests\n[How to: Customize the client]: #customizing\n[Customize request headers]: #headers\n[Customize serialization]: #serialization\n[Next Steps]: #next-steps\n[Setup and Prerequisites]: #setup\n\n<!-- Images. -->\n\n\n\n<!-- URLs. -->\n[移动服务入门]: /documentation/articles/mobile-services-android-get-started\n[移动服务快速入门]: /documentation/articles/mobile-services-android-get-started\n[ASCII 控制代码 C0 和 C1]: http://zh.wikipedia.org/wiki/Data_link_escape_character#C1_set\n\n<!---HONumber=Mooncake_0118_2016-->"
}