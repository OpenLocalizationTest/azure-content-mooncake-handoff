{
  "nodes": [
    {
      "content": "使用 Apache Storm 和 HBase 分析传感器数据 | Azure",
      "pos": [
        26,
        65
      ]
    },
    {
      "content": "了解如何使用虚拟网络连接到 Apache Storm。了解如何使用 Storm 和 HBase 处理来自 Azure 事件中心的传感器数据，然后使用 D3.js 来可视化这些数据。",
      "pos": [
        83,
        173
      ]
    },
    {
      "content": "使用 Apache Storm、事件中心和 HDInsight 中的 HBase (Hadoop) 分析传感器数据",
      "pos": [
        384,
        441
      ]
    },
    {
      "content": "了解如何使用 Apache Storm on HDInsight 处理来自 Azure 事件中心的传感器数据，然后使用 D3.js 来可视化这些数据。本文档还将介绍如何使用 Azure 虚拟网络来连接 Storm on HDInsight 和 HBase on HDInsight，然后将拓扑中的数据存储到 HBase。",
      "pos": [
        443,
        603
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        608,
        612
      ]
    },
    {
      "pos": [
        616,
        665
      ],
      "content": "Azure 订阅。请参阅<bpt id=\"p1\">[</bpt>获取 Azure 试用版<ept id=\"p1\">](/pricing/1rmb-trial/)</ept>。"
    },
    {
      "pos": [
        669,
        771
      ],
      "content": "一个 <bpt id=\"p1\">[</bpt>Apache Storm on HDInsight 群集<ept id=\"p1\">](/documentation/articles/hdinsight-apache-storm-tutorial-get-started)</ept>"
    },
    {
      "pos": [
        775,
        832
      ],
      "content": "<bpt id=\"p1\">[</bpt>Node.js<ept id=\"p1\">](http://nodejs.org/)</ept>：用于 Web 仪表板，以及将传感器数据发送到事件中心。"
    },
    {
      "content": "Java 和 JDK 1.7",
      "pos": [
        837,
        851
      ]
    },
    {
      "content": "Maven",
      "pos": [
        925,
        930
      ]
    },
    {
      "content": "Git",
      "pos": [
        980,
        983
      ]
    },
    {
      "pos": [
        1009,
        1097
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>Java、JDK、Maven 和 Git 也可通过 <bpt id=\"p1\">[</bpt>Chocolatey NuGet<ept id=\"p1\">](http://chocolatey.org/)</ept> 包管理器获得。"
    },
    {
      "content": "体系结构",
      "pos": [
        1102,
        1106
      ]
    },
    {
      "content": "体系结构示意图",
      "pos": [
        1110,
        1117
      ]
    },
    {
      "content": "本示例包括以下组成部分：",
      "pos": [
        1190,
        1202
      ]
    },
    {
      "pos": [
        1206,
        1256
      ],
      "content": "<bpt id=\"p1\">**</bpt>Azure 事件中心<ept id=\"p1\">**</ept>：提供从传感器收集的数据。对于本示例，将提供用于生成虚构数据的应用程序。"
    },
    {
      "pos": [
        1260,
        1299
      ],
      "content": "<bpt id=\"p1\">**</bpt>Storm on HDInsight<ept id=\"p1\">**</ept>：用于实时处理来自事件中心的数据。"
    },
    {
      "pos": [
        1303,
        1347
      ],
      "content": "<bpt id=\"p1\">**</bpt>HBase on HDInsight<ept id=\"p1\">**</ept>（可选）：提供持久性 NoSQL 数据存储。"
    },
    {
      "pos": [
        1351,
        1438
      ],
      "content": "<bpt id=\"p1\">**</bpt>Azure 虚拟网络服务<ept id=\"p1\">**</ept>（可选，使用 HBase 时必需）：在 Storm on HDInsight 和 HBase on HDInsight 群集之间启用安全通信。"
    },
    {
      "pos": [
        1442,
        1472
      ],
      "content": "<bpt id=\"p1\">**</bpt>仪表板 Web 应用<ept id=\"p1\">**</ept>：实时绘制数据图表的示例仪表板。"
    },
    {
      "content": "该 Web 应用在 Node.js 中实现，因此它可以在用于测试的任何客户端操作系统上运行，或者可以部署到 Azure Web 应用。",
      "pos": [
        1480,
        1547
      ]
    },
    {
      "pos": [
        1555,
        1613
      ],
      "content": "<bpt id=\"p1\">[</bpt>Socket.io<ept id=\"p1\">](http://socket.io/)</ept> 用于 Storm 拓扑和 Web 应用之间的实时通信。"
    },
    {
      "pos": [
        1625,
        1684
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>这是实现详细信息。你可以使用任何通信框架，例如原始 WebSockets 或 SignalR。"
    },
    {
      "pos": [
        1692,
        1739
      ],
      "content": "<bpt id=\"p1\">[</bpt>D3.js<ept id=\"p1\">](http://d3js.org/)</ept> 用于绘制发送到 Web 应用的数据的图表。"
    },
    {
      "pos": [
        1741,
        1929
      ],
      "content": "拓扑中使用从事件中心读取数据 <bpt id=\"p1\">**</bpt>com.microsoft.eventhubs.spout.EventHubSpout<ept id=\"p1\">**</ept> 类，该类在 Storm on HDInsight 群集中提供。与 Web 应用的通信可通过使用 <bpt id=\"p2\">[</bpt>socket.io client.java<ept id=\"p2\">](https://github.com/nkzawa/socket.io-client.java)</ept> 来实现。"
    },
    {
      "pos": [
        1931,
        2099
      ],
      "content": "或者，可以使用 Storm 随附的 <bpt id=\"p1\">[</bpt>org.apache.storm.hbase.bolt.HBaseBolt<ept id=\"p1\">](https://storm.apache.org/javadoc/apidocs/org/apache/storm/hbase/bolt/class-use/HBaseBolt.html)</ept> 来实现与 HBase 的通信。"
    },
    {
      "content": "下面是拓扑图。",
      "pos": [
        2101,
        2108
      ]
    },
    {
      "content": "拓扑图示意图",
      "pos": [
        2112,
        2118
      ]
    },
    {
      "pos": [
        2188,
        2270
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>这是一个非常简单的拓扑视图。在运行时，每个组件的实例为每个分区创建事件中心所读取。这些实例分布在群集中，节点和数据在它们之间路由，如下所示："
    },
    {
      "content": "从 spout 到分析器的数据已经过负载平衡。",
      "pos": [
        2277,
        2300
      ]
    },
    {
      "content": "从分析器到仪表板和 HBase（如果已使用）已按设备 ID 分组，因此来自同一设备的消息始终流向同一组件。",
      "pos": [
        2305,
        2358
      ]
    },
    {
      "content": "组件",
      "pos": [
        2364,
        2366
      ]
    },
    {
      "pos": [
        2370,
        2480
      ],
      "content": "<bpt id=\"p1\">**</bpt>事件中心 Spout<ept id=\"p1\">**</ept>：GitHub 上的 <bpt id=\"p2\">[</bpt>HDInsight Storm 示例<ept id=\"p2\">](https://github.com/hdinsight/hdinsight-storm-examples)</ept>随附了 spout。"
    },
    {
      "pos": [
        2484,
        2585
      ],
      "content": "<bpt id=\"p1\">**</bpt>ParserBolt.java<ept id=\"p1\">**</ept>：spout 发出的数据是原始的 JSON，有时每次会发出多个事件。此 bolt 演示如何读取 spout 发出的数据，并将它作为包含多个字段的元组形式发送到新流。"
    },
    {
      "pos": [
        2589,
        2657
      ],
      "content": "<bpt id=\"p1\">**</bpt>DashboardBolt.java<ept id=\"p1\">**</ept>：演示如何使用 Java 的 Socket.io 客户端库将数据实时发送到 Web 仪表板。"
    },
    {
      "content": "准备环境",
      "pos": [
        2662,
        2666
      ]
    },
    {
      "content": "在使用本示例之前，必须创建要由 Storm 读取的 Azure 事件中心。你还必须创建 Storm on HDInsight 拓扑，从事件中心读取数据的组件只在群集中可用。",
      "pos": [
        2668,
        2754
      ]
    },
    {
      "pos": [
        2758,
        2796
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>最终，事件中心 spout 将从 Maven 提供。"
    },
    {
      "content": "配置事件中心",
      "pos": [
        2802,
        2808
      ]
    },
    {
      "content": "事件中心是此示例的数据源。按照下列步骤创建一个新的事件中心。",
      "pos": [
        2810,
        2840
      ]
    },
    {
      "pos": [
        2845,
        2922
      ],
      "content": "在 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中，选择“新建”|“服务总线”|“事件中心”|“自定义创建”。"
    },
    {
      "content": "在“添加新事件中心”对话框中，输入“事件中心名称”，选择要在其中创建中心的“区域”，然后创建新的命名空间或选择现有的命名空间。最后，单击箭头以继续。",
      "pos": [
        2927,
        3001
      ]
    },
    {
      "content": "在“配置事件中心”对话框中，输入“分区计数”和“消息保留期”值。对于本示例，请使用分区计数 10，消息保留期 1。",
      "pos": [
        3006,
        3063
      ]
    },
    {
      "content": "创建事件中心后，选择命名空间，然后选择“事件中心”。最后，选择前面创建的事件中心。",
      "pos": [
        3068,
        3109
      ]
    },
    {
      "content": "选择“配置”，然后使用以下信息创建两个新的访问策略。",
      "pos": [
        3114,
        3140
      ]
    },
    {
      "pos": [
        3146,
        3279
      ],
      "content": "<table>\n <tr><th>Name</th><th>权限</th></tr>\n <tr><td>设备</td><td>发送</td></tr>\n <tr><td>Storm</td><td>侦听</td></tr>\n </table>",
      "leadings": [
        "",
        "   ",
        "   ",
        "   ",
        "   "
      ],
      "nodes": [
        {
          "content": "Name",
          "pos": [
            17,
            21
          ]
        },
        {
          "content": "权限",
          "pos": [
            30,
            32
          ]
        },
        {
          "content": "设备",
          "pos": [
            52,
            54
          ]
        },
        {
          "content": "发送",
          "pos": [
            63,
            65
          ]
        },
        {
          "content": "Storm",
          "pos": [
            85,
            90
          ]
        },
        {
          "content": "侦听",
          "pos": [
            99,
            101
          ]
        }
      ]
    },
    {
      "content": "创建权限后，在页面底部选择“保存”图标。这将创建共享的访问策略，该策略将用于向此中心发送消息以及从中读取消息。",
      "pos": [
        3285,
        3340
      ]
    },
    {
      "content": "保存策略后，使用页面底部的“共享访问密钥生成器”检索设备和 storm 策略的密钥。保存这些密钥，因为稍后将要用到。",
      "pos": [
        3345,
        3403
      ]
    },
    {
      "content": "创建 Storm on HDInsight 群集",
      "pos": [
        3409,
        3433
      ]
    },
    {
      "pos": [
        3438,
        3488
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn/)</ept>。"
    },
    {
      "content": "在左窗格中单击“HDInsight”，然后单击页面左下角的“+新建”。",
      "pos": [
        3493,
        3528
      ]
    },
    {
      "content": "单击第二列中的 HDInsight 图标，然后选择“自定义”。",
      "pos": [
        3533,
        3564
      ]
    },
    {
      "content": "在“群集详细信息”页上，输入新群集的名称，然后选择“Storm”作为“群集类型”。单击箭头继续。",
      "pos": [
        3569,
        3617
      ]
    },
    {
      "content": "输入 1 作为用于此群集的“数据节点”数量。",
      "pos": [
        3622,
        3644
      ]
    },
    {
      "pos": [
        3652,
        3708
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>为了最大程度减少本文所用群集的成本，请将“群集大小”减至 1，并在群集使用完后删除群集。"
    },
    {
      "content": "输入管理员“用户名”和“密码”，然后单击箭头继续。",
      "pos": [
        3713,
        3738
      ]
    },
    {
      "content": "对于“存储帐户”，请选择“创建新存储”或选择已有的存储帐户。选择或输入要使用的“帐户名称”和“默认容器”。选择左下角复选标记图标以创建 Storm 群集。",
      "pos": [
        3743,
        3820
      ]
    },
    {
      "content": "下载并安装 EventHubSpout",
      "pos": [
        3825,
        3844
      ]
    },
    {
      "pos": [
        3849,
        4011
      ],
      "content": "下载 <bpt id=\"p1\">[</bpt>HDInsight Storm 示例项目<ept id=\"p1\">](https://github.com/hdinsight/hdinsight-storm-examples/)</ept>。下载后，找到 <bpt id=\"p2\">**</bpt>lib/eventhubs/eventhubs-storm-spout-0.9-jar-with-dependencies.jar<ept id=\"p2\">**</ept> 文件。"
    },
    {
      "pos": [
        4016,
        4144
      ],
      "content": "在命令提示符下，使用以下命令将 <bpt id=\"p1\">**</bpt>eventhubs-storm-spout-0.9-jar-with-dependencies.jar<ept id=\"p1\">**</ept> 文件安装到本地 Maven 存储。这样，你便可以在稍后的步骤中轻松地将其作为一个引用添加到 Storm 项目中。"
    },
    {
      "content": "下载并配置项目",
      "pos": [
        4348,
        4355
      ]
    },
    {
      "content": "使用以下命令从 GitHub 中下载项目。",
      "pos": [
        4357,
        4378
      ]
    },
    {
      "content": "命令执行完毕后，你将得到以下目录结构：",
      "pos": [
        4451,
        4470
      ]
    },
    {
      "pos": [
        4801,
        4845
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本文档不会深入介绍本示例中包含的代码；但是，代码带有全面的注释。"
    },
    {
      "pos": [
        4847,
        4907
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>Config.properties<ept id=\"p1\">**</ept> 文件并添加先前创建事件中心时使用的信息。在添加此信息后，请保存该文件。"
    },
    {
      "content": "编译并在本地测试",
      "pos": [
        5395,
        5403
      ]
    },
    {
      "content": "测试之前，必须启动仪表板以查看拓扑的输出，并生成要在事件中心中存储的数据。",
      "pos": [
        5405,
        5442
      ]
    },
    {
      "content": "启动 Web 应用",
      "pos": [
        5448,
        5457
      ]
    },
    {
      "pos": [
        5462,
        5554
      ],
      "content": "打开新的命令提示符或终端，并将目录更改为 将目录更改为 <bpt id=\"p1\">**</bpt>hdinsight-eventhub-example/dashboard<ept id=\"p1\">**</ept>，并使用以下命令安装 Web 应用所需的依赖项："
    },
    {
      "content": "使用以下命令启动 Web 应用：",
      "pos": [
        5580,
        5596
      ]
    },
    {
      "content": "你应看到类似于下面的消息：",
      "pos": [
        5626,
        5639
      ]
    },
    {
      "pos": [
        5683,
        5743
      ],
      "content": "打开 Web 浏览器，并输入 <bpt id=\"p1\">**</bpt>http://localhost:3000/<ept id=\"p1\">**</ept> 作为地址。你应看到类似于下面的页面："
    },
    {
      "content": "Web 仪表板",
      "pos": [
        5751,
        5758
      ]
    },
    {
      "content": "将此命令提示符或终端保持打开状态。测试完成后，使用 Ctrl-C 停止 Web 服务器。",
      "pos": [
        5830,
        5874
      ]
    },
    {
      "content": "开始生成数据",
      "pos": [
        5880,
        5886
      ]
    },
    {
      "pos": [
        5890,
        5966
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本部分中的步骤使用 Node.js，以便它们可以在任何平台上运行。对于其他语言示例，请参阅 <bpt id=\"p1\">**</bpt>SendEvents<ept id=\"p1\">**</ept> 目录。"
    },
    {
      "pos": [
        5972,
        6062
      ],
      "content": "打开新的命令提示符或终端，将目录切换为 <bpt id=\"p1\">**</bpt>hdinsight-eventhub-example/SendEvents/nodejs<ept id=\"p1\">**</ept>，然后使用以下命令安装应用程序所需的依赖项："
    },
    {
      "pos": [
        6088,
        6128
      ],
      "content": "在文本编辑器中打开 <bpt id=\"p1\">**</bpt>app.js<ept id=\"p1\">**</ept> 文件，并添加你之前获取的事件中心信息："
    },
    {
      "content": "使用以下命令在事件中心插入新条目：",
      "pos": [
        6417,
        6434
      ]
    },
    {
      "content": "你应会看到包含发送到事件中心的数据的多个输出行。这些信息如下所示：",
      "pos": [
        6461,
        6494
      ]
    },
    {
      "content": "启动拓扑",
      "pos": [
        7309,
        7313
      ]
    },
    {
      "content": "使用下列命令从本地启动拓扑",
      "pos": [
        7318,
        7331
      ]
    },
    {
      "content": "mvn compile exec:java -Dstorm.topology=com.microsoft.examples.Temperature",
      "pos": [
        7337,
        7410
      ]
    },
    {
      "content": "此操作将启动拓扑、从事件中心中读取文件并将其发送到 Azure 中运行的仪表板中。你应看到各行显示在 Web 仪表板中，如下所示：",
      "pos": [
        7416,
        7481
      ]
    },
    {
      "content": "包含数据的仪表板",
      "pos": [
        7489,
        7497
      ]
    },
    {
      "pos": [
        7567,
        7639
      ],
      "content": "当仪表板正在运行时，使用前面步骤中的 <ph id=\"ph1\">`node app.js`</ph> 命令将新数据发送到仪表板。由于温度值是随机生成的，因此图表应会更新以显示新值。"
    },
    {
      "content": "验证其运行情况后，按 Ctrl+C 停止拓扑。若要停止 SendEvent 应用，请选中窗口并按下任何键。也可以使用 Ctrl+C 来停止 Web 服务器。",
      "pos": [
        7644,
        7722
      ]
    },
    {
      "content": "打包拓扑并将其部署到 HDInsight 中",
      "pos": [
        7727,
        7749
      ]
    },
    {
      "content": "在你的开发环境中，按照以下步骤在你的 HDInsight Storm 群集中执行“Temperature”拓扑。",
      "pos": [
        7751,
        7807
      ]
    },
    {
      "content": "发布 Web 应用仪表板",
      "pos": [
        7813,
        7825
      ]
    },
    {
      "pos": [
        7830,
        8007
      ],
      "content": "若要将仪表板部署到 Azure Web 应用，请遵循<bpt id=\"p1\">[</bpt>构建 Node.js Web 应用并将其部署到 Azure<ept id=\"p1\">](/documentation/articles/web-sites-nodejs-develop-deploy-mac)</ept> 中的步骤。记下 Web 应用的 URL，它类似于 <bpt id=\"p2\">**</bpt>mywebsite.chinacloudsites.cn<ept id=\"p2\">**</ept>。"
    },
    {
      "content": "创建 Web 应用后，转到 Azure 管理门户中的站点，然后选择“配置”选项卡。启用“Web 套接字”，然后在页面底部单击“保存”。",
      "pos": [
        8012,
        8079
      ]
    },
    {
      "pos": [
        8084,
        8230
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>hdinsight-eventhub-example\\\\TemperatureMonitor\\\\src\\\\main\\\\java\\\\com\\\\microsoft\\\\examples\\\\bolts\\\\DashboardBolt.java<ept id=\"p1\">**</ept> 并将以下行更改为指向已发布仪表板的 URL："
    },
    {
      "pos": [
        8303,
        8332
      ],
      "content": "保存 <bpt id=\"p1\">**</bpt>DashboardBolt.java<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "content": "打包并部署拓扑",
      "pos": [
        8338,
        8345
      ]
    },
    {
      "content": "使用以下命令从你的项目中创建一个 JAR 程序包：",
      "pos": [
        8350,
        8375
      ]
    },
    {
      "pos": [
        8402,
        8476
      ],
      "content": "此操作将在项目的 <bpt id=\"p1\">**</bpt>target<ept id=\"p1\">**</ept> 目录中创建一个名为 <bpt id=\"p2\">**</bpt>TemperatureMonitor-1.0-SNAPSHOT.jar<ept id=\"p2\">**</ept> 的文件。"
    },
    {
      "pos": [
        8481,
        8617
      ],
      "content": "根据<bpt id=\"p1\">[</bpt>部署和管理 Storm 拓扑<ept id=\"p1\">](/documentation/articles/hdinsight-storm-deploy-monitor-topology)</ept>中的步骤，在 Storm on HDInsight 群集上使用 <bpt id=\"p2\">**</bpt>Storm 仪表板<ept id=\"p2\">**</ept>上载和启动拓扑。"
    },
    {
      "pos": [
        8622,
        8705
      ],
      "content": "启动拓扑后，打开浏览器到 Azure 发布的 Web 应用，然后使用 <ph id=\"ph1\">`node app.js`</ph> 命令将数据发送到事件中心。你应该看到 Web 仪表板更新以显示信息。"
    },
    {
      "content": "仪表板",
      "pos": [
        8713,
        8716
      ]
    },
    {
      "content": "可选：使用 HBase",
      "pos": [
        8786,
        8797
      ]
    },
    {
      "content": "若要将 Storm 和 HBase 一起使用，必须创建 Azure 虚拟网络，并在该网络中创建 Storm 和 HBase 群集。",
      "pos": [
        8799,
        8864
      ]
    },
    {
      "content": "创建 Azure 虚拟网络（可选）",
      "pos": [
        8870,
        8887
      ]
    },
    {
      "content": "如果你打算对本示例使用 HBase，必须创建 Azure 虚拟网络并在其中包含 Storm on HDInsight 群集和 HBase on HDInsight 群集。",
      "pos": [
        8889,
        8974
      ]
    },
    {
      "pos": [
        8979,
        9028
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>。"
    },
    {
      "content": "在页面底部，单击“+新建”&gt;“网络服务”&gt;“虚拟网络”&gt;“快速创建”。",
      "pos": [
        9033,
        9068
      ]
    },
    {
      "content": "键入或选择以下值：",
      "pos": [
        9073,
        9082
      ]
    },
    {
      "pos": [
        9090,
        9105
      ],
      "content": "<bpt id=\"p1\">**</bpt>名称<ept id=\"p1\">**</ept>：虚拟网络的名称。"
    },
    {
      "pos": [
        9113,
        9161
      ],
      "content": "<bpt id=\"p1\">**</bpt>地址空间<ept id=\"p1\">**</ept>：为虚拟网络提供大到足以为群集中的所有节点提供地址的地址空间。否则，设置将失败。"
    },
    {
      "pos": [
        9169,
        9194
      ],
      "content": "<bpt id=\"p1\">**</bpt>最大 VM 计数<ept id=\"p1\">**</ept>：选择最大虚拟机计数之一。"
    },
    {
      "pos": [
        9202,
        9231
      ],
      "content": "<bpt id=\"p1\">**</bpt>位置<ept id=\"p1\">**</ept>：该位置必须与要创建的 HBase 群集相同。"
    },
    {
      "pos": [
        9239,
        9423
      ],
      "content": "<bpt id=\"p1\">**</bpt>DNS 服务器<ept id=\"p1\">**</ept>：本文使用 Azure 提供的内部 DNS 服务器，因此，你可以选择“无”。此外，也支持使用自定义 DNS 服务器的高级网络配置。有关详细指导，请参阅<bpt id=\"p2\">[</bpt>名称解析 (DNS)<ept id=\"p2\">](/documentation/articles/virtual-networks-name-resolution-for-vms-and-role-instances)</ept>。"
    },
    {
      "content": "单击“创建虚拟网络”。新虚拟网络名称将显示在列表中。等到“状态”列显示“已创建”。",
      "pos": [
        9428,
        9469
      ]
    },
    {
      "content": "在主窗格中，单击刚创建的虚拟网络。",
      "pos": [
        9474,
        9491
      ]
    },
    {
      "content": "在页面顶部，单击“仪表板”。",
      "pos": [
        9496,
        9510
      ]
    },
    {
      "content": "在“速览”下，记住“虚拟网络 ID”。在设置 Storm 和 HBase 群集时将要用到它。",
      "pos": [
        9515,
        9561
      ]
    },
    {
      "content": "在页面顶部，单击“配置”。",
      "pos": [
        9566,
        9579
      ]
    },
    {
      "pos": [
        9584,
        9662
      ],
      "content": "在页面底部，默认子网名称为 <bpt id=\"p1\">**</bpt>Subnet-1<ept id=\"p1\">**</ept>。使用“添加子网”按钮添加 <bpt id=\"p2\">**</bpt>Subnet-2<ept id=\"p2\">**</ept>。Storm 和 HBase 群集将位于这些子网中。"
    },
    {
      "pos": [
        9670,
        9839
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在本文中，我们将使用只有一个节点的群集。如果你创建的是多节点群集，你必须为用于群集的子网验证其 <bpt id=\"p1\">**</bpt>CIDR（地址数）<ept id=\"p1\">**</ept>。地址数必须大于辅助节点数加上七（网关：2，头节点：2，ZooKeeper：3）。例如，如果需要一个 10 节点 HBase 群集，子网的地址数必须大于 17 (10+7)。否则，部署将失败。"
    },
    {
      "content": "强烈建议为一个群集指定一个子网。",
      "pos": [
        9849,
        9865
      ]
    },
    {
      "content": "单击页面底部的“保存”。",
      "pos": [
        9871,
        9883
      ]
    },
    {
      "content": "在虚拟网络中创建 Storm 和 HBase 群集",
      "pos": [
        9889,
        9914
      ]
    },
    {
      "pos": [
        9919,
        9969
      ],
      "content": "登录到 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn/)</ept>。"
    },
    {
      "content": "在左窗格中单击“HDInsight”，然后单击页面左下角的“+新建”。",
      "pos": [
        9974,
        10009
      ]
    },
    {
      "content": "单击第二列中的 HDInsight 图标，然后选择“自定义”。",
      "pos": [
        10014,
        10045
      ]
    },
    {
      "content": "在“群集详细信息”页上，输入新群集的名称，然后选择“Storm”作为“群集类型”。单击箭头继续。",
      "pos": [
        10050,
        10098
      ]
    },
    {
      "content": "输入 1 作为用于此群集的“数据节点”数量。对于“区域/虚拟网络”，请选择先前创建的 Azure 虚拟网络。对于“虚拟网络子网”，请选择“Subnet-1”。",
      "pos": [
        10103,
        10182
      ]
    },
    {
      "pos": [
        10190,
        10246
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>为了最大程度减少本文所用群集的成本，请将“群集大小”减至 1，并在群集使用完后删除群集。"
    },
    {
      "content": "输入管理员“用户名”和“密码”，然后单击箭头继续。",
      "pos": [
        10251,
        10276
      ]
    },
    {
      "content": "对于“存储帐户”，请选择“创建新存储”或选择已有的存储帐户。选择或输入要使用的“帐户名称”和“默认容器”。选择左下角复选标记图标以创建 Storm 群集。",
      "pos": [
        10281,
        10358
      ]
    },
    {
      "pos": [
        10363,
        10396
      ],
      "content": "重复上述步骤以创建新的 <bpt id=\"p1\">**</bpt>HBase<ept id=\"p1\">**</ept> 群集。下面是主要区别："
    },
    {
      "pos": [
        10404,
        10422
      ],
      "content": "<bpt id=\"p1\">**</bpt>群集类型<ept id=\"p1\">**</ept>：选择“HBase”"
    },
    {
      "pos": [
        10430,
        10453
      ],
      "content": "<bpt id=\"p1\">**</bpt>虚拟网络子网<ept id=\"p1\">**</ept>：选择“Subnet-2”"
    },
    {
      "pos": [
        10461,
        10494
      ],
      "content": "<bpt id=\"p1\">**</bpt>存储帐户<ept id=\"p1\">**</ept>：你应使用一个不同于 Storm 群集所用的容器。"
    },
    {
      "content": "发现 HBase DNS 后缀",
      "pos": [
        10500,
        10515
      ]
    },
    {
      "content": "为了从 Storm 群集写入 HBase，你必须为 HBase 群集使用完全限定域名 (FQDN)。使用以下命令发现此信息：",
      "pos": [
        10517,
        10579
      ]
    },
    {
      "pos": [
        10747,
        10804
      ],
      "content": "在返回的 JSON 数据中, 找到 <bpt id=\"p1\">**</bpt>\"host\\_name\"<ept id=\"p1\">**</ept> 条目。其中包含群集中节点的 FQDN，例如："
    },
    {
      "pos": [
        10888,
        10947
      ],
      "content": "群集名称开头的域名称的部分是 DNS 后缀，例如 <bpt id=\"p1\">**</bpt>mycluster.b1.chinacloudapp.cn<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "启用 HBase bolt",
      "pos": [
        10953,
        10966
      ]
    },
    {
      "pos": [
        10971,
        11106
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>hdinsight-eventhub-example\\\\TemperatureMonitor\\\\conf\\\\hbase-site.xml<ept id=\"p1\">**</ept> 并将以下行中的 <ph id=\"ph1\">`suffix`</ph> 条目替换前面为 HBase 群集获取的 DNS 后缀。进行这些更改之后，保存该文件。"
    },
    {
      "content": "这将用于通过 HBase bolt 与 HBase 群集通信。",
      "pos": [
        11190,
        11221
      ]
    },
    {
      "pos": [
        11226,
        11372
      ],
      "content": "在文本编辑器中打开 <bpt id=\"p1\">**</bpt>hdinsight-eventhub-example\\\\TemperatureMonitor\\\\src\\\\main\\\\java\\\\com\\\\microsoft\\\\examples\\\\bolts<ept id=\"p1\">**</ept>，通过删除开头的 <ph id=\"ph1\">`//`</ph> 取消注释以下行。进行此更改之后，保存该文件。"
    },
    {
      "content": "这将启用 HBase Bolt。",
      "pos": [
        11639,
        11655
      ]
    },
    {
      "pos": [
        11663,
        11717
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>仅当你要部署到 Storm 群集而不是在本地测试时，才应启用 HBase bolt。"
    },
    {
      "content": "HBase 和 Storm 数据",
      "pos": [
        11723,
        11739
      ]
    },
    {
      "content": "在运行拓扑之前，必须准备 HBase 接受数据。",
      "pos": [
        11741,
        11765
      ]
    },
    {
      "content": "使用远程桌面连接到 HBase 群集。",
      "pos": [
        11770,
        11789
      ]
    },
    {
      "content": "从桌面中启动 HDInsight 命令行并输入以下命令。",
      "pos": [
        11794,
        11822
      ]
    },
    {
      "pos": [
        11828,
        11865
      ],
      "content": "cd %HBASE\\_HOME%\n bin\\\\hbase shell",
      "leadings": [
        "",
        "   "
      ],
      "nodes": [
        {
          "content": "cd %HBASE\\_HOME%",
          "pos": [
            0,
            16
          ]
        },
        {
          "content": "bin\\\\hbase shell",
          "pos": [
            18,
            34
          ]
        }
      ]
    },
    {
      "content": "从 HBase Shell 中，输入以下命令以创建存储传感器数据的表。",
      "pos": [
        11870,
        11905
      ]
    },
    {
      "content": "create 'SensorData', 'cf'",
      "pos": [
        11911,
        11936
      ]
    },
    {
      "content": "通过输入以下命令验证表中不包含数据：",
      "pos": [
        11941,
        11959
      ]
    },
    {
      "content": "scan 'SensorData'",
      "pos": [
        11965,
        11982
      ]
    },
    {
      "pos": [
        11984,
        12056
      ],
      "content": "在 Storm 群集上启动拓扑并已开始处理数据后，你可以再次使用 <ph id=\"ph1\">`scan 'SensorData'`</ph> 命令来验证数据是否已插入 HBase。"
    },
    {
      "content": "后续步骤",
      "pos": [
        12062,
        12066
      ]
    },
    {
      "content": "现在，你已了解如何使用 Storm 从事件中心读取数据，以及使用 SignalR 和 D3.js 将 Storm 中的信息显示在 的外部仪表板上。如果你使用了可选步骤，则还已了解如何在虚拟网络中配置 HDInsight，以及如何使用 HBase bolt 在 Storm 拓扑与 HBase 之间进行通信。",
      "pos": [
        12068,
        12221
      ]
    },
    {
      "content": "有关 HDinsight Storm 拓扑的更多示例，请参阅：",
      "pos": [
        12225,
        12256
      ]
    },
    {
      "content": "Storm on HDInsight 的示例拓扑",
      "pos": [
        12265,
        12289
      ]
    },
    {
      "pos": [
        12352,
        12433
      ],
      "content": "有关 Apache Storm 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Apache Storm<ept id=\"p1\">](https://storm.incubator.apache.org/)</ept> 站点。"
    },
    {
      "pos": [
        12437,
        12543
      ],
      "content": "有关 HBase on HDInsight 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>HDInsight 上的 HBase 概述<ept id=\"p1\">](/documentation/articles/hdinsight-hbase-overview)</ept>。"
    },
    {
      "pos": [
        12547,
        12604
      ],
      "content": "有关 Socket.io 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>socket.io<ept id=\"p1\">](http://socket.io/)</ept> 站点。"
    },
    {
      "pos": [
        12608,
        12663
      ],
      "content": "有关 D3.js 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>D3.js - 数据驱动的文档<ept id=\"p1\">](http://d3js.org/)</ept>。"
    },
    {
      "pos": [
        12667,
        12791
      ],
      "content": "有关以 Java 创建拓扑的信息，请参阅<bpt id=\"p1\">[</bpt>为 Apache Storm on HDInsight 开发 Java 拓扑<ept id=\"p1\">](/documentation/articles/hdinsight-storm-develop-java-topology)</ept>。"
    },
    {
      "pos": [
        12795,
        12950
      ],
      "content": "有关以 .NET 创建拓扑的信息，请参阅<bpt id=\"p1\">[</bpt>使用 Visual Studio 为 Apache Storm on HDInsight 开发 C# 拓扑<ept id=\"p1\">](/documentation/articles/hdinsight-storm-develop-csharp-visual-studio-topology)</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"使用 Apache Storm 和 HBase 分析传感器数据 | Azure\"\n   description=\"了解如何使用虚拟网络连接到 Apache Storm。了解如何使用 Storm 和 HBase 处理来自 Azure 事件中心的传感器数据，然后使用 D3.js 来可视化这些数据。\"\n   services=\"hdinsight\"\n   documentationCenter=\"\"\n   authors=\"Blackmist\"\n   manager=\"paulettm\"\n   editor=\"cgronlun\"/>\n\n<tags\n    ms.service=\"hdinsight\"\n    ms.date=\"12/04/2015\"\n    wacn.date=\"01/21/2016\"/>\n\n# 使用 Apache Storm、事件中心和 HDInsight 中的 HBase (Hadoop) 分析传感器数据\n\n了解如何使用 Apache Storm on HDInsight 处理来自 Azure 事件中心的传感器数据，然后使用 D3.js 来可视化这些数据。本文档还将介绍如何使用 Azure 虚拟网络来连接 Storm on HDInsight 和 HBase on HDInsight，然后将拓扑中的数据存储到 HBase。\n\n## 先决条件\n\n* Azure 订阅。请参阅[获取 Azure 试用版](/pricing/1rmb-trial/)。\n\n* 一个 [Apache Storm on HDInsight 群集](/documentation/articles/hdinsight-apache-storm-tutorial-get-started)\n\n* [Node.js](http://nodejs.org/)：用于 Web 仪表板，以及将传感器数据发送到事件中心。\n\n* [Java 和 JDK 1.7](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\n\n* [Maven](http://maven.apache.org/what-is-maven.html)\n\n* [Git](http://git-scm.com/)\n\n> [AZURE.NOTE]Java、JDK、Maven 和 Git 也可通过 [Chocolatey NuGet](http://chocolatey.org/) 包管理器获得。\n\n## 体系结构\n\n![体系结构示意图](./media/hdinsight-storm-sensor-data-analysis/devicesarchitecture.png)\n\n本示例包括以下组成部分：\n\n* **Azure 事件中心**：提供从传感器收集的数据。对于本示例，将提供用于生成虚构数据的应用程序。\n\n* **Storm on HDInsight**：用于实时处理来自事件中心的数据。\n\n* **HBase on HDInsight**（可选）：提供持久性 NoSQL 数据存储。\n\n* **Azure 虚拟网络服务**（可选，使用 HBase 时必需）：在 Storm on HDInsight 和 HBase on HDInsight 群集之间启用安全通信。\n\n* **仪表板 Web 应用**：实时绘制数据图表的示例仪表板。\n\n    * 该 Web 应用在 Node.js 中实现，因此它可以在用于测试的任何客户端操作系统上运行，或者可以部署到 Azure Web 应用。\n\n    * [Socket.io](http://socket.io/) 用于 Storm 拓扑和 Web 应用之间的实时通信。\n\n        > [AZURE.NOTE]这是实现详细信息。你可以使用任何通信框架，例如原始 WebSockets 或 SignalR。\n\n    * [D3.js](http://d3js.org/) 用于绘制发送到 Web 应用的数据的图表。\n\n拓扑中使用从事件中心读取数据 **com.microsoft.eventhubs.spout.EventHubSpout** 类，该类在 Storm on HDInsight 群集中提供。与 Web 应用的通信可通过使用 [socket.io client.java](https://github.com/nkzawa/socket.io-client.java) 来实现。\n\n或者，可以使用 Storm 随附的 [org.apache.storm.hbase.bolt.HBaseBolt](https://storm.apache.org/javadoc/apidocs/org/apache/storm/hbase/bolt/class-use/HBaseBolt.html) 来实现与 HBase 的通信。\n\n下面是拓扑图。\n\n![拓扑图示意图](./media/hdinsight-storm-sensor-data-analysis/sensoranalysis.png)\n\n> [AZURE.NOTE]这是一个非常简单的拓扑视图。在运行时，每个组件的实例为每个分区创建事件中心所读取。这些实例分布在群集中，节点和数据在它们之间路由，如下所示：\n>\n> * 从 spout 到分析器的数据已经过负载平衡。\n> * 从分析器到仪表板和 HBase（如果已使用）已按设备 ID 分组，因此来自同一设备的消息始终流向同一组件。\n\n### 组件\n\n* **事件中心 Spout**：GitHub 上的 [HDInsight Storm 示例](https://github.com/hdinsight/hdinsight-storm-examples)随附了 spout。\n\n* **ParserBolt.java**：spout 发出的数据是原始的 JSON，有时每次会发出多个事件。此 bolt 演示如何读取 spout 发出的数据，并将它作为包含多个字段的元组形式发送到新流。\n\n* **DashboardBolt.java**：演示如何使用 Java 的 Socket.io 客户端库将数据实时发送到 Web 仪表板。\n\n## 准备环境\n\n在使用本示例之前，必须创建要由 Storm 读取的 Azure 事件中心。你还必须创建 Storm on HDInsight 拓扑，从事件中心读取数据的组件只在群集中可用。\n\n> [AZURE.NOTE]最终，事件中心 spout 将从 Maven 提供。\n\n### 配置事件中心\n\n事件中心是此示例的数据源。按照下列步骤创建一个新的事件中心。\n\n1. 在 [Azure 管理门户](https://manage.windowsazure.cn)中，选择“新建”|“服务总线”|“事件中心”|“自定义创建”。\n\n2. 在“添加新事件中心”对话框中，输入“事件中心名称”，选择要在其中创建中心的“区域”，然后创建新的命名空间或选择现有的命名空间。最后，单击箭头以继续。\n\n2. 在“配置事件中心”对话框中，输入“分区计数”和“消息保留期”值。对于本示例，请使用分区计数 10，消息保留期 1。\n\n3. 创建事件中心后，选择命名空间，然后选择“事件中心”。最后，选择前面创建的事件中心。\n\n4. 选择“配置”，然后使用以下信息创建两个新的访问策略。\n\n    <table>\n    <tr><th>Name</th><th>权限</th></tr>\n    <tr><td>设备</td><td>发送</td></tr>\n    <tr><td>Storm</td><td>侦听</td></tr>\n    </table>\n\n    创建权限后，在页面底部选择“保存”图标。这将创建共享的访问策略，该策略将用于向此中心发送消息以及从中读取消息。\n\n5. 保存策略后，使用页面底部的“共享访问密钥生成器”检索设备和 storm 策略的密钥。保存这些密钥，因为稍后将要用到。\n\n### 创建 Storm on HDInsight 群集\n\n1. 登录到 [Azure 管理门户](https://manage.windowsazure.cn/)。\n\n2. 在左窗格中单击“HDInsight”，然后单击页面左下角的“+新建”。\n\n3. 单击第二列中的 HDInsight 图标，然后选择“自定义”。\n\n4. 在“群集详细信息”页上，输入新群集的名称，然后选择“Storm”作为“群集类型”。单击箭头继续。\n\n5. 输入 1 作为用于此群集的“数据节点”数量。\n\n    > [AZURE.NOTE]为了最大程度减少本文所用群集的成本，请将“群集大小”减至 1，并在群集使用完后删除群集。\n\n6. 输入管理员“用户名”和“密码”，然后单击箭头继续。\n\n4. 对于“存储帐户”，请选择“创建新存储”或选择已有的存储帐户。选择或输入要使用的“帐户名称”和“默认容器”。选择左下角复选标记图标以创建 Storm 群集。\n\n## 下载并安装 EventHubSpout\n\n1. 下载 [HDInsight Storm 示例项目](https://github.com/hdinsight/hdinsight-storm-examples/)。下载后，找到 **lib/eventhubs/eventhubs-storm-spout-0.9-jar-with-dependencies.jar** 文件。\n\n2. 在命令提示符下，使用以下命令将 **eventhubs-storm-spout-0.9-jar-with-dependencies.jar** 文件安装到本地 Maven 存储。这样，你便可以在稍后的步骤中轻松地将其作为一个引用添加到 Storm 项目中。\n\n        mvn install:install-file -Dfile=target/eventhubs-storm-spout-0.9-jar-with-dependencies.jar -DgroupId=com.microsoft.eventhubs -DartifactId=eventhubs-storm-spout -Dversion=0.9 -Dpackaging=jar\n\n## 下载并配置项目\n\n使用以下命令从 GitHub 中下载项目。\n\n    git clone https://github.com/Blackmist/hdinsight-eventhub-example\n\n命令执行完毕后，你将得到以下目录结构：\n\n    hdinsight-eventhub-example/\n        TemperatureMonitor/ - this is the Java topology\n            conf/\n                Config.properties\n                hbase-site.xml\n            src/\n            test/\n            dashboard/ - this is the node.js web dashboard\n            SendEvents/ - utilities to send fake sensor data\n\n> [AZURE.NOTE]本文档不会深入介绍本示例中包含的代码；但是，代码带有全面的注释。\n\n打开 **Config.properties** 文件并添加先前创建事件中心时使用的信息。在添加此信息后，请保存该文件。\n\n    eventhubspout.username = storm\n\n    eventhubspout.password = <the key of the 'storm' policy>\n\n    eventhubspout.namespace = <the event hub namespace>\n\n    eventhubspout.entitypath = <the event hub name>\n\n    eventhubspout.partitions.count = <the number of partitions for the event hub>\n\n    ## if not provided, will use storm's zookeeper settings\n    ## zookeeper.connectionstring=localhost:2181\n\n    eventhubspout.checkpoint.interval = 10\n\n    eventhub.receiver.credits = 1024\n\n## 编译并在本地测试\n\n测试之前，必须启动仪表板以查看拓扑的输出，并生成要在事件中心中存储的数据。\n\n### 启动 Web 应用\n\n1. 打开新的命令提示符或终端，并将目录更改为 将目录更改为 **hdinsight-eventhub-example/dashboard**，并使用以下命令安装 Web 应用所需的依赖项：\n\n        npm install\n\n2. 使用以下命令启动 Web 应用：\n\n        node server.js\n\n    你应看到类似于下面的消息：\n\n        Server listening at port 3000\n\n2. 打开 Web 浏览器，并输入 **http://localhost:3000/** 作为地址。你应看到类似于下面的页面：\n\n    ![Web 仪表板](./media/hdinsight-storm-sensor-data-analysis/emptydashboard.png)\n\n    将此命令提示符或终端保持打开状态。测试完成后，使用 Ctrl-C 停止 Web 服务器。\n\n### 开始生成数据\n\n> [AZURE.NOTE]本部分中的步骤使用 Node.js，以便它们可以在任何平台上运行。对于其他语言示例，请参阅 **SendEvents** 目录。\n\n\n1. 打开新的命令提示符或终端，将目录切换为 **hdinsight-eventhub-example/SendEvents/nodejs**，然后使用以下命令安装应用程序所需的依赖项：\n\n        npm install\n\n2. 在文本编辑器中打开 **app.js** 文件，并添加你之前获取的事件中心信息：\n\n        // ServiceBus Namespace\n        var namespace = 'servicebusnamespace';\n        // Event Hub Name\n        var hubname ='eventhubname';\n        // Shared access Policy name and key (from Event Hub configuration)\n        var my_key_name = 'devices';\n        var my_key = 'key';\n\n2. 使用以下命令在事件中心插入新条目：\n\n        node app.js\n\n    你应会看到包含发送到事件中心的数据的多个输出行。这些信息如下所示：\n\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":0,\"Temperature\":7}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":1,\"Temperature\":39}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":2,\"Temperature\":86}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":3,\"Temperature\":29}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":4,\"Temperature\":30}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":5,\"Temperature\":5}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":6,\"Temperature\":24}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":7,\"Temperature\":40}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":8,\"Temperature\":43}\n        {\"TimeStamp\":\"2015-02-10T14:43.05.00320Z\",\"DeviceId\":9,\"Temperature\":84}\n\n### 启动拓扑\n\n2. 使用下列命令从本地启动拓扑\n\n    mvn compile exec:java -Dstorm.topology=com.microsoft.examples.Temperature\n\n    此操作将启动拓扑、从事件中心中读取文件并将其发送到 Azure 中运行的仪表板中。你应看到各行显示在 Web 仪表板中，如下所示：\n\n    ![包含数据的仪表板](./media/hdinsight-storm-sensor-data-analysis/datadashboard.png)\n\n3. 当仪表板正在运行时，使用前面步骤中的 `node app.js` 命令将新数据发送到仪表板。由于温度值是随机生成的，因此图表应会更新以显示新值。\n\n3. 验证其运行情况后，按 Ctrl+C 停止拓扑。若要停止 SendEvent 应用，请选中窗口并按下任何键。也可以使用 Ctrl+C 来停止 Web 服务器。\n\n## 打包拓扑并将其部署到 HDInsight 中\n\n在你的开发环境中，按照以下步骤在你的 HDInsight Storm 群集中执行“Temperature”拓扑。\n\n### 发布 Web 应用仪表板\n\n1. 若要将仪表板部署到 Azure Web 应用，请遵循[构建 Node.js Web 应用并将其部署到 Azure](/documentation/articles/web-sites-nodejs-develop-deploy-mac) 中的步骤。记下 Web 应用的 URL，它类似于 **mywebsite.chinacloudsites.cn**。\n\n2. 创建 Web 应用后，转到 Azure 管理门户中的站点，然后选择“配置”选项卡。启用“Web 套接字”，然后在页面底部单击“保存”。\n\n2. 打开 **hdinsight-eventhub-example\\\\TemperatureMonitor\\\\src\\\\main\\\\java\\\\com\\\\microsoft\\\\examples\\\\bolts\\\\DashboardBolt.java** 并将以下行更改为指向已发布仪表板的 URL：\n\n        socket = IO.socket(\"http://mywebsite.chinacloudsites.cn\");\n\n3. 保存 **DashboardBolt.java** 文件。\n\n### 打包并部署拓扑\n\n1. 使用以下命令从你的项目中创建一个 JAR 程序包：\n\n        mvn package\n\n    此操作将在项目的 **target** 目录中创建一个名为 **TemperatureMonitor-1.0-SNAPSHOT.jar** 的文件。\n\n2. 根据[部署和管理 Storm 拓扑](/documentation/articles/hdinsight-storm-deploy-monitor-topology)中的步骤，在 Storm on HDInsight 群集上使用 **Storm 仪表板**上载和启动拓扑。\n\n3. 启动拓扑后，打开浏览器到 Azure 发布的 Web 应用，然后使用 `node app.js` 命令将数据发送到事件中心。你应该看到 Web 仪表板更新以显示信息。\n\n    ![仪表板](./media/hdinsight-storm-sensor-data-analysis/datadashboard.png)\n\n## 可选：使用 HBase\n\n若要将 Storm 和 HBase 一起使用，必须创建 Azure 虚拟网络，并在该网络中创建 Storm 和 HBase 群集。\n\n### 创建 Azure 虚拟网络（可选）\n\n如果你打算对本示例使用 HBase，必须创建 Azure 虚拟网络并在其中包含 Storm on HDInsight 群集和 HBase on HDInsight 群集。\n\n1. 登录到 [Azure 管理门户](https://manage.windowsazure.cn)。\n\n2. 在页面底部，单击“+新建”>“网络服务”>“虚拟网络”>“快速创建”。\n\n3. 键入或选择以下值：\n\n    - **名称**：虚拟网络的名称。\n\n    - **地址空间**：为虚拟网络提供大到足以为群集中的所有节点提供地址的地址空间。否则，设置将失败。\n\n    - **最大 VM 计数**：选择最大虚拟机计数之一。\n\n    - **位置**：该位置必须与要创建的 HBase 群集相同。\n\n    - **DNS 服务器**：本文使用 Azure 提供的内部 DNS 服务器，因此，你可以选择“无”。此外，也支持使用自定义 DNS 服务器的高级网络配置。有关详细指导，请参阅[名称解析 (DNS)](/documentation/articles/virtual-networks-name-resolution-for-vms-and-role-instances)。\n\n4. 单击“创建虚拟网络”。新虚拟网络名称将显示在列表中。等到“状态”列显示“已创建”。\n\n5. 在主窗格中，单击刚创建的虚拟网络。\n\n6. 在页面顶部，单击“仪表板”。\n\n7. 在“速览”下，记住“虚拟网络 ID”。在设置 Storm 和 HBase 群集时将要用到它。\n\n8. 在页面顶部，单击“配置”。\n\n9. 在页面底部，默认子网名称为 **Subnet-1**。使用“添加子网”按钮添加 **Subnet-2**。Storm 和 HBase 群集将位于这些子网中。\n\n    > [AZURE.NOTE]在本文中，我们将使用只有一个节点的群集。如果你创建的是多节点群集，你必须为用于群集的子网验证其 **CIDR（地址数）**。地址数必须大于辅助节点数加上七（网关：2，头节点：2，ZooKeeper：3）。例如，如果需要一个 10 节点 HBase 群集，子网的地址数必须大于 17 (10+7)。否则，部署将失败。\n    > <p>强烈建议为一个群集指定一个子网。\n\n11. 单击页面底部的“保存”。\n\n### 在虚拟网络中创建 Storm 和 HBase 群集\n\n1. 登录到 [Azure 管理门户](https://manage.windowsazure.cn/)。\n\n2. 在左窗格中单击“HDInsight”，然后单击页面左下角的“+新建”。\n\n3. 单击第二列中的 HDInsight 图标，然后选择“自定义”。\n\n4. 在“群集详细信息”页上，输入新群集的名称，然后选择“Storm”作为“群集类型”。单击箭头继续。\n\n5. 输入 1 作为用于此群集的“数据节点”数量。对于“区域/虚拟网络”，请选择先前创建的 Azure 虚拟网络。对于“虚拟网络子网”，请选择“Subnet-1”。\n\n    > [AZURE.NOTE]为了最大程度减少本文所用群集的成本，请将“群集大小”减至 1，并在群集使用完后删除群集。\n\n6. 输入管理员“用户名”和“密码”，然后单击箭头继续。\n\n4. 对于“存储帐户”，请选择“创建新存储”或选择已有的存储帐户。选择或输入要使用的“帐户名称”和“默认容器”。选择左下角复选标记图标以创建 Storm 群集。\n\n5. 重复上述步骤以创建新的 **HBase** 群集。下面是主要区别：\n\n    * **群集类型**：选择“HBase”\n\n    * **虚拟网络子网**：选择“Subnet-2”\n\n    * **存储帐户**：你应使用一个不同于 Storm 群集所用的容器。\n\n### 发现 HBase DNS 后缀\n\n为了从 Storm 群集写入 HBase，你必须为 HBase 群集使用完全限定域名 (FQDN)。使用以下命令发现此信息：\n\n    curl -u <username>:<password> -k https://<clustername>.azurehdinsight.cn/ambari/api/v1/clusters/<clustername>.azurehdinsight.cn/services/hbase/components/hbrest\n\n在返回的 JSON 数据中, 找到 **\"host\\_name\"** 条目。其中包含群集中节点的 FQDN，例如：\n\n    ...\n    \"host_name\": \"wordkernode0.<clustername>.b1.chinacloudapp.cn\n    ...\n\n群集名称开头的域名称的部分是 DNS 后缀，例如 **mycluster.b1.chinacloudapp.cn**。\n\n### 启用 HBase bolt\n\n1. 打开 **hdinsight-eventhub-example\\\\TemperatureMonitor\\\\conf\\\\hbase-site.xml** 并将以下行中的 `suffix` 条目替换前面为 HBase 群集获取的 DNS 后缀。进行这些更改之后，保存该文件。\n\n        <value>zookeeper0.suffix,zookeeper1.suffix,zookeeper2.suffix</value>\n\n    这将用于通过 HBase bolt 与 HBase 群集通信。\n\n1. 在文本编辑器中打开 **hdinsight-eventhub-example\\\\TemperatureMonitor\\\\src\\\\main\\\\java\\\\com\\\\microsoft\\\\examples\\\\bolts**，通过删除开头的 `//` 取消注释以下行。进行此更改之后，保存该文件。\n\n        topologyBuilder.setBolt(\"HBase\", new HBaseBolt(\"SensorData\", mapper).withConfigKey(\"hbase.conf\"), spoutConfig.getPartitionCount())\n          .fieldsGrouping(\"Parser\", \"hbasestream\", new Fields(\"deviceid\")).setNumTasks(spoutConfig.getPartitionCount());\n\n    这将启用 HBase Bolt。\n\n    > [AZURE.NOTE]仅当你要部署到 Storm 群集而不是在本地测试时，才应启用 HBase bolt。\n\n### HBase 和 Storm 数据\n\n在运行拓扑之前，必须准备 HBase 接受数据。\n\n1. 使用远程桌面连接到 HBase 群集。\n\n2. 从桌面中启动 HDInsight 命令行并输入以下命令。\n\n    cd %HBASE\\_HOME%\n    bin\\\\hbase shell\n\n3. 从 HBase Shell 中，输入以下命令以创建存储传感器数据的表。\n\n    create 'SensorData', 'cf'\n\n4. 通过输入以下命令验证表中不包含数据：\n\n    scan 'SensorData'\n\n在 Storm 群集上启动拓扑并已开始处理数据后，你可以再次使用 `scan 'SensorData'` 命令来验证数据是否已插入 HBase。\n\n\n## 后续步骤\n\n现在，你已了解如何使用 Storm 从事件中心读取数据，以及使用 SignalR 和 D3.js 将 Storm 中的信息显示在 的外部仪表板上。如果你使用了可选步骤，则还已了解如何在虚拟网络中配置 HDInsight，以及如何使用 HBase bolt 在 Storm 拓扑与 HBase 之间进行通信。\n\n* 有关 HDinsight Storm 拓扑的更多示例，请参阅：\n\n    * [Storm on HDInsight 的示例拓扑](/documentation/articles/hdinsight-storm-example-topology)\n\n* 有关 Apache Storm 的详细信息，请参阅 [Apache Storm](https://storm.incubator.apache.org/) 站点。\n\n* 有关 HBase on HDInsight 的详细信息，请参阅 [HDInsight 上的 HBase 概述](/documentation/articles/hdinsight-hbase-overview)。\n\n* 有关 Socket.io 的详细信息，请参阅 [socket.io](http://socket.io/) 站点。\n\n* 有关 D3.js 的详细信息，请参阅 [D3.js - 数据驱动的文档](http://d3js.org/)。\n\n* 有关以 Java 创建拓扑的信息，请参阅[为 Apache Storm on HDInsight 开发 Java 拓扑](/documentation/articles/hdinsight-storm-develop-java-topology)。\n\n* 有关以 .NET 创建拓扑的信息，请参阅[使用 Visual Studio 为 Apache Storm on HDInsight 开发 C# 拓扑](/documentation/articles/hdinsight-storm-develop-csharp-visual-studio-topology)。\n\n[azure-portal]: https://manage.windowsazure.cn/\n\n<!---HONumber=82-->"
}