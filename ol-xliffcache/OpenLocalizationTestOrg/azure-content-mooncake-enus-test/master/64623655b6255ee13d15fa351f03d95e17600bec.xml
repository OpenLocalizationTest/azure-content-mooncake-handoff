{
  "nodes": [
    {
      "content": "使用移动服务注册推送通知的当前用户 | Azure",
      "pos": [
        28,
        53
      ]
    },
    {
      "content": "了解在 Azure 移动服务执行注册时如何在 iOS 应用程序中请求向 Azure 通知中心注册推送通知。",
      "pos": [
        73,
        126
      ]
    },
    {
      "content": "通过使用移动服务注册推送通知的当前用户",
      "pos": [
        352,
        371
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        375,
        391
      ]
    },
    {
      "content": "Windows Store C",
      "pos": [
        393,
        408
      ]
    },
    {
      "content": "iOS",
      "pos": [
        508,
        511
      ]
    },
    {
      "pos": [
        601,
        751
      ],
      "content": "本主题说明在 Azure 移动服务执行注册时如何请求向 Azure 通知中心注册推送通知。它是对教程<bpt id=\"p1\">[</bpt>使用通知中心通知用户<ept id=\"p1\">][使用通知中心通知用户]</ept>的扩展。你必须在该教程中已完成创建经过身份验证的移动服务所需的步骤。有关通知用户方案的详细信息，请参阅<bpt id=\"p2\">[</bpt>使用通知中心通知用户<ept id=\"p2\">][使用通知中心通知用户]</ept>。"
    },
    {
      "pos": [
        757,
        849
      ],
      "content": "在 Xcode 的项目中打开 QSTodoService.h 文件（该项目是你在完成基础教程<bpt id=\"p1\">[</bpt>身份验证入门<ept id=\"p1\">][身份验证入门]</ept>时创建的）并添加以下 <bpt id=\"p2\">**</bpt>deviceToken<ept id=\"p2\">**</ept> 属性："
    },
    {
      "content": "此属性存储设备标记。",
      "pos": [
        907,
        917
      ]
    },
    {
      "pos": [
        922,
        976
      ],
      "content": "在 QSTodoService.m 文件中，添加以下 <bpt id=\"p1\">**</bpt>getDeviceTokenInHex<ept id=\"p1\">**</ept> 方法："
    },
    {
      "content": "此方法将设备标记转换为十六进制字符串值。",
      "pos": [
        1542,
        1562
      ]
    },
    {
      "pos": [
        1567,
        1636
      ],
      "content": "在 QSAppDelegate.m 文件中，将以下代码行添加到 <bpt id=\"p1\">**</bpt>didFinishLaunchingWithOptions<ept id=\"p1\">**</ept> 方法："
    },
    {
      "content": "这在你的应用程序中启用推送通知。",
      "pos": [
        1822,
        1838
      ]
    },
    {
      "content": "在 QSAppDelegate.m 文件中，添加以下方法：",
      "pos": [
        1844,
        1873
      ]
    },
    {
      "pos": [
        2102,
        2126
      ],
      "content": "这会更新 <bpt id=\"p1\">**</bpt>deviceToken<ept id=\"p1\">**</ept> 属性。"
    },
    {
      "pos": [
        2134,
        2298
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此时，此方法中不应有任何其他代码。如果你已调用在完成<bpt id=\"p1\">[</bpt>通知中心入门<ept id=\"p1\">](/documentation/articles/notification-hubs-ios-get-started)</ept>教程的学习时添加的 <bpt id=\"p2\">**</bpt>registerNativeWithDeviceToken<ept id=\"p2\">**</ept> 方法，必须注释掉或删除该调用。"
    },
    {
      "content": "（可选）在 QSAppDelegate.m 文件中，添加以下处理程序方法：",
      "pos": [
        2304,
        2341
      ]
    },
    {
      "content": "当你的应用程序接收到它正在运行的通知时，此方法将在 UI 中显示一个警报。",
      "pos": [
        2843,
        2880
      ]
    },
    {
      "pos": [
        2886,
        2965
      ],
      "content": "在 QSTodoListViewController.m 文件中，添加 <bpt id=\"p1\">**</bpt>registerForNotificationsWithBackEnd<ept id=\"p1\">**</ept> 方法："
    },
    {
      "pos": [
        3943,
        4080
      ],
      "content": "此方法构造包含设备标记的 json 负载。它然后在你的移动服务中调用自定义 API 以注册通知。此方法为推送通知创建一个设备标记并将它与设备类型一起发送到在通知中心创建注册的自定义 API 方法。此自定义 API 已在<bpt id=\"p1\">[</bpt>使用通知中心通知用户<ept id=\"p1\">][使用通知中心通知用户]</ept>中定义。"
    },
    {
      "pos": [
        4086,
        4185
      ],
      "content": "最后，在 <bpt id=\"p1\">**</bpt>viewDidAppear<ept id=\"p1\">**</ept> 方法中，在用户成功进行身份验证后添加对这个新 <bpt id=\"p2\">**</bpt>registerForNotificationsWithBackEnd<ept id=\"p2\">**</ept> 方法的调用，如下例中所示："
    },
    {
      "pos": [
        4716,
        4776
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>这可以确保每次加载页时都会请求注册。在应用程序中，你可能只需要定期执行此注册以确保注册是最新的。"
    },
    {
      "pos": [
        4782,
        4830
      ],
      "content": "现在客户端应用程序已更新，请返回到<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心通知用户]</ept>并更新移动服务以使用通知中心发送通知。"
    }
  ],
  "content": "<properties \n    pageTitle=\"使用移动服务注册推送通知的当前用户 | Azure\" \n    description=\"了解在 Azure 移动服务执行注册时如何在 iOS 应用程序中请求向 Azure 通知中心注册推送通知。\" \n    services=\"notification-hubs\" \n    documentationCenter=\"ios\" \n    authors=\"ysxu\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"mobile-services\" \n    ms.date=\"11/01/2016\" \n    wacn.date=\"01/14/2016\"/>\n\n# 通过使用移动服务注册推送通知的当前用户\n\n> [AZURE.SELECTOR]\n[Windows Store C#](/documentation/articles/notification-hubs-ios-mobile-services-register-user-push-notifications)\n[iOS](/documentation/articles/notification-hubs-ios-aspnet-register-user-push-notifications)\n\n本主题说明在 Azure 移动服务执行注册时如何请求向 Azure 通知中心注册推送通知。它是对教程[使用通知中心通知用户][使用通知中心通知用户]的扩展。你必须在该教程中已完成创建经过身份验证的移动服务所需的步骤。有关通知用户方案的详细信息，请参阅[使用通知中心通知用户][使用通知中心通知用户]。\n\n1.  在 Xcode 的项目中打开 QSTodoService.h 文件（该项目是你在完成基础教程[身份验证入门][身份验证入门]时创建的）并添加以下 **deviceToken** 属性：\n\n        @property (nonatomic) NSData* deviceToken;\n\n    此属性存储设备标记。\n\n2. 在 QSTodoService.m 文件中，添加以下 **getDeviceTokenInHex** 方法：\n\n            - (NSString*)getDeviceTokenInHex {\n                const unsigned *tokenBytes = [[self deviceToken] bytes];\n                NSString *hexToken = [NSString stringWithFormat:@\"%08X%08X%08X%08X%08X%08X%08X%08X\",\n                                      ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),\n                                      ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),\n                                      ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];\n                return hexToken;\n            }\n\n    此方法将设备标记转换为十六进制字符串值。\n\n3. 在 QSAppDelegate.m 文件中，将以下代码行添加到 **didFinishLaunchingWithOptions** 方法：\n\n            [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound];\n\n    这在你的应用程序中启用推送通知。\n\n4.  在 QSAppDelegate.m 文件中，添加以下方法：\n\n            - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n                [QSTodoService defaultService].deviceToken = deviceToken;\n            }\n\n    这会更新 **deviceToken** 属性。\n\n    > [AZURE.NOTE]此时，此方法中不应有任何其他代码。如果你已调用在完成[通知中心入门](/documentation/articles/notification-hubs-ios-get-started)教程的学习时添加的 **registerNativeWithDeviceToken** 方法，必须注释掉或删除该调用。\n\n5.  （可选）在 QSAppDelegate.m 文件中，添加以下处理程序方法：\n\n            - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {\n                NSLog(@\"%@\", userInfo);\n                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Notification\" message:\n                                      [[userInfo objectForKey:@\"aps\"] valueForKey:@\"alert\"] delegate:nil cancelButtonTitle:\n                                      @\"OK\" otherButtonTitles:nil, nil];\n                [alert show];\n            }\n\n    当你的应用程序接收到它正在运行的通知时，此方法将在 UI 中显示一个警报。\n\n6.  在 QSTodoListViewController.m 文件中，添加 **registerForNotificationsWithBackEnd** 方法：\n\n            - (void)registerForNotificationsWithBackEnd {    \n                NSString* json = [NSString  stringWithFormat:@\"{\"platform\":\"ios\", \"deviceToken\":\"%@\"}\", [self.todoService getDeviceTokenInHex] ];\n                \n                [self.todoService.client invokeAPI:@\"register_notifications\" data:[json dataUsingEncoding:NSUTF8StringEncoding] HTTPMethod:@\"POST\" parameters:nil headers:nil completion:^(id result, NSHTTPURLResponse *response, NSError *error) {\n                    if (error != nil) {\n                        NSLog(@\"Registration failed: %@\", error);\n                    } else {\n                        // display UIAlert with successful login\n                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Back-end registration\" message:@\"Registration successful\" delegate:nil cancelButtonTitle: @\"OK\" otherButtonTitles:nil, nil];\n                        [alert show];\n                    }\n                }];\n            }\n\n    此方法构造包含设备标记的 json 负载。它然后在你的移动服务中调用自定义 API 以注册通知。此方法为推送通知创建一个设备标记并将它与设备类型一起发送到在通知中心创建注册的自定义 API 方法。此自定义 API 已在[使用通知中心通知用户][使用通知中心通知用户]中定义。\n\n7.  最后，在 **viewDidAppear** 方法中，在用户成功进行身份验证后添加对这个新 **registerForNotificationsWithBackEnd** 方法的调用，如下例中所示：\n    \n            - (void)viewDidAppear:(BOOL)animated\n            {\n                MSClient *client = self.todoService.client;\n            \n                if (client.currentUser != nil) {\n                    return;\n                }\n                \n                [client loginWithProvider:@\"microsoftaccount\" controller:self animated:YES completion:^(MSUser *user, NSError *error) {\n                    [self refresh];\n                    [self registerForNotificationsWithBackEnd];\n                }];\n            }\n\n    > [AZURE.NOTE]这可以确保每次加载页时都会请求注册。在应用程序中，你可能只需要定期执行此注册以确保注册是最新的。\n    \n现在客户端应用程序已更新，请返回到[使用通知中心通知用户]并更新移动服务以使用通知中心发送通知。\n\n<!-- Anchors. --> \n\n<!-- Images. --> \n\n<!-- URLs. -->\n[使用通知中心通知用户]: /documentation/articles/notification-hubs-aspnet-backend-ios-notify-users\n[身份验证入门]:/documentation/articles/mobile-services-dotnet-backend-ios-get-started-users\n\n[Azure Management Portal]: https://manage.windowsazure.cn/\n[Get Started with Notification Hubs]: /documentation/articles/notification-hubs-ios-get-started/\n\n<!---HONumber=Mooncake_1207_2015-->"
}