<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b67fd037340b9ec3abe3bde887fe9cb998e97840</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何使用 Azure Redis Cache</source>
          <target state="new">如何使用 Azure Redis Cache</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用 Azure Redis 缓存提高 Azure 应用程序的性能</source>
          <target state="new">了解如何使用 Azure Redis 缓存提高 Azure 应用程序的性能</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何使用 Azure Redis Cache</source>
          <target state="new">如何使用 Azure Redis Cache</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.Net</source>
          <target state="new">.Net</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Node.js</source>
          <target state="new">Node.js</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Java</source>
          <target state="new">Java</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Python</source>
          <target state="new">Python</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>本指南说明如何开始使用 <bpt id="p1">**</bpt>Azure Redis 缓存<ept id="p1">**</ept>。Azure Redis 缓存基于流行的开放源代码 Redis 缓存。它让您访问 WindowsAzure.cn 管理的安全专用的 Redis 缓存。使用 Azure Redis 缓存创建的缓存可从 Azure 内的任何应用程序进行访问。</source>
          <target state="new">本指南说明如何开始使用 <bpt id="p1">**</bpt>Azure Redis 缓存<ept id="p1">**</ept>。Azure Redis 缓存基于流行的开放源代码 Redis 缓存。它让您访问 WindowsAzure.cn 管理的安全专用的 Redis 缓存。使用 Azure Redis 缓存创建的缓存可从 Azure 内的任何应用程序进行访问。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Azure Redis 缓存提供以下层：</source>
          <target state="new">Azure Redis 缓存提供以下层：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>基本<ept id="p1">**</ept> - 单个节点。多种大小，最大 53 GB。</source>
          <target state="new"><bpt id="p1">**</bpt>基本<ept id="p1">**</ept> - 单个节点。多种大小，最大 53 GB。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>标准<ept id="p1">**</ept> - 双节点主/副本配置。多种大小，最大 53 GB。99.9% SLA。</source>
          <target state="new"><bpt id="p1">**</bpt>标准<ept id="p1">**</ept> - 双节点主/副本配置。多种大小，最大 53 GB。99.9% SLA。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>高级<ept id="p1">**</ept> - 双节点主/副本配置，最多有 10 个分片。从 6 GB 到 530 GB 的多种大小（有关详细信息，请与我们联系）。标准层的所有功能加上其他功能，支持 <bpt id="p2">[</bpt>Redis 群集<ept id="p2">](/documentation/articles/cache-how-to-premium-clustering)</ept>。99.9% SLA。</source>
          <target state="new"><bpt id="p1">**</bpt>高级<ept id="p1">**</ept> - 双节点主/副本配置，最多有 10 个分片。从 6 GB 到 530 GB 的多种大小（有关详细信息，请与我们联系）。标准层的所有功能加上其他功能，支持 <bpt id="p2">[</bpt>Redis 群集<ept id="p2">](/documentation/articles/cache-how-to-premium-clustering)</ept>。99.9% SLA。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>每个级别在功能和定价方面存在差异。有关定价信息，请参阅<bpt id="p1">[</bpt>缓存定价详细信息<ept id="p1">][]</ept>。</source>
          <target state="new">每个级别在功能和定价方面存在差异。有关定价信息，请参阅<bpt id="p1">[</bpt>缓存定价详细信息<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>本指南说明如何使用以 C# 代码编写的 <bpt id="p1">[</bpt>StackExchange.Redis<ept id="p1">][]</ept> 客户端。涉及的任务包括<bpt id="p2">**</bpt>创建和配置缓存<ept id="p2">**</ept>、<bpt id="p3">**</bpt>配置缓存客户端<ept id="p3">**</ept>，以及<bpt id="p4">**</bpt>在缓存中添加和删除对象<ept id="p4">**</ept>。有关使用 Azure Redis 缓存的详细信息，请参阅<bpt id="p5">[</bpt>后续步骤<ept id="p5">][]</ept>部分。</source>
          <target state="new">本指南说明如何使用以 C# 代码编写的 <bpt id="p1">[</bpt>StackExchange.Redis<ept id="p1">][]</ept> 客户端。涉及的任务包括<bpt id="p2">**</bpt>创建和配置缓存<ept id="p2">**</ept>、<bpt id="p3">**</bpt>配置缓存客户端<ept id="p3">**</ept>，以及<bpt id="p4">**</bpt>在缓存中添加和删除对象<ept id="p4">**</ept>。有关使用 Azure Redis 缓存的详细信息，请参阅<bpt id="p5">[</bpt>后续步骤<ept id="p5">][]</ept>部分。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="getting-started-cache-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Azure Redis 缓存入门</source>
          <target state="new"><ph id="ph1">&lt;a name="getting-started-cache-service"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>Azure Redis 缓存入门</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Azure Redis Cache 非常容易上手。若要开始使用，需要首先设置和配置缓存。接下来，配置缓存客户端，以便它们可以访问缓存。在配置了缓存客户端后，就可以开始使用它们。</source>
          <target state="new">Azure Redis Cache 非常容易上手。若要开始使用，需要首先设置和配置缓存。接下来，配置缓存客户端，以便它们可以访问缓存。在配置了缓存客户端后，就可以开始使用它们。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>创建缓存</source>
          <target state="new">创建缓存</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>配置缓存客户端</source>
          <target state="new">配置缓存客户端</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="create-cache" id="create-a-cache"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>创建缓存</source>
          <target state="new"><ph id="ph1">&lt;a name="create-cache" id="create-a-cache"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>创建缓存</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>在 Azure 中国区，只能通过 Azure PowerShell 或 Azure CLI 管理 Redis 缓存</source>
          <target state="new">在 Azure 中国区，只能通过 Azure PowerShell 或 Azure CLI 管理 Redis 缓存</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>使用以下 PowerShell 脚本创建缓存：</source>
          <target state="new">使用以下 PowerShell 脚本创建缓存：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="NuGet" id="configure-the-cache-clients"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置缓存客户端</source>
          <target state="new"><ph id="ph1">&lt;a name="NuGet" id="configure-the-cache-clients"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>配置缓存客户端</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>使用 Azure Redis 缓存创建的缓存可从任何应用程序访问。在 Visual Studio 中开发的 .NET 应用程序可以使用 <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> 缓存客户端，可使用 NuGet 包进行配置，以简化缓存客户端应用程序的配置。</source>
          <target state="new">使用 Azure Redis 缓存创建的缓存可从任何应用程序访问。在 Visual Studio 中开发的 .NET 应用程序可以使用 <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> 缓存客户端，可使用 NuGet 包进行配置，以简化缓存客户端应用程序的配置。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>有关详细信息，请参阅 <bpt id="p1">[</bpt>StackExchange.Redis<ept id="p1">][]</ept> github 页面和 <bpt id="p2">[</bpt>StackExchange.Redis 缓存客户端文档<ept id="p2">][]</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>有关详细信息，请参阅 <bpt id="p1">[</bpt>StackExchange.Redis<ept id="p1">][]</ept> github 页面和 <bpt id="p2">[</bpt>StackExchange.Redis 缓存客户端文档<ept id="p2">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>若要使用 StackExchange.Redis NuGet 包配置客户端应用程序，请在“解决方案资源管理器”中右键单击项目，然后选择“管理 NuGet 包”。</source>
          <target state="new">若要使用 StackExchange.Redis NuGet 包配置客户端应用程序，请在“解决方案资源管理器”中右键单击项目，然后选择“管理 NuGet 包”。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>管理 NuGet 包</source>
          <target state="new">管理 NuGet 包</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>在“联机搜索”文本框中键入 <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>StackExchange.Redis.StrongName<ept id="p2">**</ept>，从结果选择它，然后单击“安装”。</source>
          <target state="new">在“联机搜索”文本框中键入 <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>StackExchange.Redis.StrongName<ept id="p2">**</ept>，从结果选择它，然后单击“安装”。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>如果你希望使用 <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> 客户端库强名称版本，请选择 <bpt id="p2">**</bpt>StackExchange.Redis.StrongName<ept id="p2">**</ept>；否则选择 <bpt id="p3">**</bpt>StackExchange.Redis<ept id="p3">**</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>如果你希望使用 <bpt id="p1">**</bpt>StackExchange.Redis<ept id="p1">**</ept> 客户端库强名称版本，请选择 <bpt id="p2">**</bpt>StackExchange.Redis.StrongName<ept id="p2">**</ept>；否则选择 <bpt id="p3">**</bpt>StackExchange.Redis<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>StackExchange.Redis NuGet 程序包</source>
          <target state="new">StackExchange.Redis NuGet 程序包</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>NuGet 程序包会给客户端应用程序下载并添加所需的程序集引用，以访问带 StackExchange.Redis 缓存客户端的 Azure Redis Cache。</source>
          <target state="new">NuGet 程序包会给客户端应用程序下载并添加所需的程序集引用，以访问带 StackExchange.Redis 缓存客户端的 Azure Redis Cache。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>在配置了你的客户端项目的缓存后，你可以使用以下各节中介绍的方法来使用你的缓存。</source>
          <target state="new">在配置了你的客户端项目的缓存后，你可以使用以下各节中介绍的方法来使用你的缓存。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="working-with-caches"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用缓存</source>
          <target state="new"><ph id="ph1">&lt;a name="working-with-caches"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>使用缓存</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>本节中的步骤介绍如何使用缓存执行常见任务。</source>
          <target state="new">本节中的步骤介绍如何使用缓存执行常见任务。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>连接到缓存</source>
          <target state="new">连接到缓存</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>添加和从缓存检索对象</source>
          <target state="new">添加和从缓存检索对象</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>处理缓存中的 .NET 对象</source>
          <target state="new">处理缓存中的 .NET 对象</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="connect-to-cache"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>连接到缓存</source>
          <target state="new"><ph id="ph1">&lt;a name="connect-to-cache"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>连接到缓存</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>若要以编程方式使用缓存，你需要引用该缓存。以下代码添加到你想使用 StackExchange.Redis 客户端的任何文件的顶部，以访问 Azure Redis 缓存。</source>
          <target state="new">若要以编程方式使用缓存，你需要引用该缓存。以下代码添加到你想使用 StackExchange.Redis 客户端的任何文件的顶部，以访问 Azure Redis 缓存。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>StackExchange.Redis 客户端需要.NET Framework 4 或更高版本。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>StackExchange.Redis 客户端需要.NET Framework 4 或更高版本。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>到 Azure Redis 缓存的连接由 <ph id="ph1">`ConnectionMultiplexer`</ph> 类管理。此类旨在共享并在客户端应用程序中重复使用，不需要在每次执行操作的基础上创建。</source>
          <target state="new">到 Azure Redis 缓存的连接由 <ph id="ph1">`ConnectionMultiplexer`</ph> 类管理。此类旨在共享并在客户端应用程序中重复使用，不需要在每次执行操作的基础上创建。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>要连接到 Azure Redis 缓存并返回连接的 <ph id="ph1">`ConnectionMultiplexer`</ph> 的实例，请调用静态 <ph id="ph2">`Connect`</ph> 方法并传递到缓存端点和密钥中，如下例所示。使用可以通过 <ph id="ph3">`Get-AzureRmRedisCacheKey`</ph> PowerShell 命令获取的密钥作为 password 参数。</source>
          <target state="new">要连接到 Azure Redis 缓存并返回连接的 <ph id="ph1">`ConnectionMultiplexer`</ph> 的实例，请调用静态 <ph id="ph2">`Connect`</ph> 方法并传递到缓存端点和密钥中，如下例所示。使用可以通过 <ph id="ph3">`Get-AzureRmRedisCacheKey`</ph> PowerShell 命令获取的密钥作为 password 参数。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.IMPORTANT]</ph>警告：切勿将凭据存储在源代码中。为了使本示例简单明了，我将以源代码来呈现凭据内容。有关如何存储凭据的详细信息，请参阅<bpt id="p1">[</bpt>应用程序字符串和连接字符串的工作原理<ept id="p1">][]</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.IMPORTANT]</ph>警告：切勿将凭据存储在源代码中。为了使本示例简单明了，我将以源代码来呈现凭据内容。有关如何存储凭据的详细信息，请参阅<bpt id="p1">[</bpt>应用程序字符串和连接字符串的工作原理<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>如果你不想使用 SSL，请设置 <ph id="ph1">`ssl=false`</ph> 或者省略 <ph id="ph2">`ssl`</ph> 参数。</source>
          <target state="new">如果你不想使用 SSL，请设置 <ph id="ph1">`ssl=false`</ph> 或者省略 <ph id="ph2">`ssl`</ph> 参数。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>默认情况下，将为新缓存禁用非 SSL 端口。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>默认情况下，将为新缓存禁用非 SSL 端口。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>共享应用程序中的 <ph id="ph1">`ConnectionMultiplexer`</ph> 实例的一个方法是，拥有返回连接示例的静态属性（与下列示例类似）。这种线程安全方法，可仅初始化单一连接的 <ph id="ph2">`ConnectionMultiplexer`</ph> 实例。在这些示例中，<ph id="ph3">`abortConnect`</ph> 设置为 false，这表示即使未建立 Azure Redis 缓存连接，也可成功调用。<ph id="ph4">`ConnectionMultiplexer`</ph> 的一个关键功能是，一旦还原网络问题和其他原因，它将自动还原缓存连接。</source>
          <target state="new">共享应用程序中的 <ph id="ph1">`ConnectionMultiplexer`</ph> 实例的一个方法是，拥有返回连接示例的静态属性（与下列示例类似）。这种线程安全方法，可仅初始化单一连接的 <ph id="ph2">`ConnectionMultiplexer`</ph> 实例。在这些示例中，<ph id="ph3">`abortConnect`</ph> 设置为 false，这表示即使未建立 Azure Redis 缓存连接，也可成功调用。<ph id="ph4">`ConnectionMultiplexer`</ph> 的一个关键功能是，一旦还原网络问题和其他原因，它将自动还原缓存连接。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>有关高级连接配置选项的详细信息，请参阅 <bpt id="p1">[</bpt>StackExchange.Redis 配置模型<ept id="p1">][]</ept>。</source>
          <target state="new">有关高级连接配置选项的详细信息，请参阅 <bpt id="p1">[</bpt>StackExchange.Redis 配置模型<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>可以使用以下 PowerShell 命令获取缓存终结点和密钥：</source>
          <target state="new">可以使用以下 PowerShell 命令获取缓存终结点和密钥：</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>建立连接后，通过调用 <ph id="ph1">`ConnectionMultiplexer.GetDatabase`</ph> 方法返回对 Redis 缓存数据库的引用。从 <ph id="ph2">`GetDatabase`</ph> 方法返回的对象是一个轻型直通对象，不需要存储。</source>
          <target state="new">建立连接后，通过调用 <ph id="ph1">`ConnectionMultiplexer.GetDatabase`</ph> 方法返回对 Redis 缓存数据库的引用。从 <ph id="ph2">`GetDatabase`</ph> 方法返回的对象是一个轻型直通对象，不需要存储。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>现在您知道如何连接到 Azure Redis Cache 实例并将引用返回缓存数据库，让我们看看如何使用缓存。</source>
          <target state="new">现在您知道如何连接到 Azure Redis Cache 实例并将引用返回缓存数据库，让我们看看如何使用缓存。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="add-object"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>添加和从缓存检索对象</source>
          <target state="new"><ph id="ph1">&lt;a name="add-object"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>添加和从缓存检索对象</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>可以使用 <ph id="ph1">`StringSet`</ph> 和 <ph id="ph2">`StringGet`</ph> 方法在缓存中存储和检索项。</source>
          <target state="new">可以使用 <ph id="ph1">`StringSet`</ph> 和 <ph id="ph2">`StringGet`</ph> 方法在缓存中存储和检索项。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Redis 将大多数数据存储为 Redis 字符串，但这些字符串可能包含许多类型的数据，包括序列化的二进制数据，可在缓存中存储 .NET 对象时使用。</source>
          <target state="new">Redis 将大多数数据存储为 Redis 字符串，但这些字符串可能包含许多类型的数据，包括序列化的二进制数据，可在缓存中存储 .NET 对象时使用。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>调用 <ph id="ph1">`StringGet`</ph> 时，如果该对象存在，则返回它，如果该对象不存在，则返回 <ph id="ph2">`null`</ph>。在这种情况可以从所需的数据源检索值，并将其存储在缓存中供后续使用。这称为缓存端模式。</source>
          <target state="new">调用 <ph id="ph1">`StringGet`</ph> 时，如果该对象存在，则返回它，如果该对象不存在，则返回 <ph id="ph2">`null`</ph>。在这种情况可以从所需的数据源检索值，并将其存储在缓存中供后续使用。这称为缓存端模式。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>要在缓存中指定项的过期时间，请使用 <ph id="ph1">`StringSet`</ph> 的 <ph id="ph2">`TimeSpan`</ph> 参数。</source>
          <target state="new">要在缓存中指定项的过期时间，请使用 <ph id="ph1">`StringSet`</ph> 的 <ph id="ph2">`TimeSpan`</ph> 参数。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="store-session" id="work-with-net-objects-in-the-cache"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>处理缓存中的 .NET 对象</source>
          <target state="new"><ph id="ph1">&lt;a name="store-session" id="work-with-net-objects-in-the-cache"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>处理缓存中的 .NET 对象</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Azure Redis 缓存可以缓存 .NET 对象以及基元数据类型，但在缓存 .NET 对象之前，必须对其进行序列化。这是应用程序开发人员的责任，同时赋与开发人员选择序列化程序的弹性。</source>
          <target state="new">Azure Redis 缓存可以缓存 .NET 对象以及基元数据类型，但在缓存 .NET 对象之前，必须对其进行序列化。这是应用程序开发人员的责任，同时赋与开发人员选择序列化程序的弹性。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>序列化对象的一种简单方式是使用 <bpt id="p1">[</bpt>Newtonsoft.Json.NET<ept id="p1">](https://www.nuget.org/packages/Newtonsoft.Json/8.0.1-beta1)</ept> 中的 <ph id="ph1">`JsonConvert`</ph> 序列化方法，并与 JSON 相互序列化。以下示例演示了使用 <ph id="ph2">`Employee`</ph> 对象实例执行 GET 和 SET。</source>
          <target state="new">序列化对象的一种简单方式是使用 <bpt id="p1">[</bpt>Newtonsoft.Json.NET<ept id="p1">](https://www.nuget.org/packages/Newtonsoft.Json/8.0.1-beta1)</ept> 中的 <ph id="ph1">`JsonConvert`</ph> 序列化方法，并与 JSON 相互序列化。以下示例演示了使用 <ph id="ph2">`Employee`</ph> 对象实例执行 GET 和 SET。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="next-steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</source>
          <target state="new"><ph id="ph1">&lt;a name="next-steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>现在，你已学习了基础知识，接下来请打开以下链接了解有关 Azure Redis 缓存的详细信息。</source>
          <target state="new">现在，你已学习了基础知识，接下来请打开以下链接了解有关 Azure Redis 缓存的详细信息。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>了解 Azure Redis 缓存的 ASP.NET 提供程序。</source>
          <target state="new">了解 Azure Redis 缓存的 ASP.NET 提供程序。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Azure Redis 会话状态提供程序</source>
          <target state="new">Azure Redis 会话状态提供程序</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Azure Redis 缓存 ASP.NET 输出缓存提供程序</source>
          <target state="new">Azure Redis 缓存 ASP.NET 输出缓存提供程序</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>查看 <bpt id="p1">[</bpt>StackExchange.Redis 缓存客户端文档<ept id="p1">][]</ept>。</source>
          <target state="new">查看 <bpt id="p1">[</bpt>StackExchange.Redis 缓存客户端文档<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>可以从许多 Redis 客户端和开发语言访问 azure Redis 缓存。有关详细信息，请参阅 <bpt id="p1">[</bpt>http://redis.io/clients<ept id="p1">][]</ept> 和<bpt id="p2">[</bpt>以其他语言开发 Azure Redis 缓存<ept id="p2">][]</ept>。</source>
          <target state="new">可以从许多 Redis 客户端和开发语言访问 azure Redis 缓存。有关详细信息，请参阅 <bpt id="p1">[</bpt>http://redis.io/clients<ept id="p1">][]</ept> 和<bpt id="p2">[</bpt>以其他语言开发 Azure Redis 缓存<ept id="p2">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>请参阅 <bpt id="p1">[</bpt>redis<ept id="p1">][]</ept> 文档并阅读 <bpt id="p2">[</bpt>redis 数据类型<ept id="p2">][]</ept>和 <bpt id="p3">[</bpt>Redis 数据类型的十五分钟介绍<ept id="p3">][]</ept>。</source>
          <target state="new">请参阅 <bpt id="p1">[</bpt>redis<ept id="p1">][]</ept> 文档并阅读 <bpt id="p2">[</bpt>redis 数据类型<ept id="p2">][]</ept>和 <bpt id="p3">[</bpt>Redis 数据类型的十五分钟介绍<ept id="p3">][]</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>