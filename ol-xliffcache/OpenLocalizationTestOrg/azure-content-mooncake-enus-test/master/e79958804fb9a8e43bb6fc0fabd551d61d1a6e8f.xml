{
  "nodes": [
    {
      "content": "Azure 通知中心入门（iOS 应用）| Azure",
      "pos": [
        27,
        54
      ]
    },
    {
      "content": "在本教程中，你将了解如何使用 Azure 通知中心将通知推送到 iOS 应用程序。",
      "pos": [
        73,
        114
      ]
    },
    {
      "content": "通知中心入门（iOS 应用）",
      "pos": [
        339,
        353
      ]
    },
    {
      "content": "概述",
      "pos": [
        470,
        472
      ]
    },
    {
      "content": "本教程演示如何使用 Azure 通知中心将推送通知发送到 iOS 应用程序。你将创建一个空白 iOS 应用，它使用 Apple 推送通知服务 (APNS) 接收推送通知。完成后，你将能够使用通知中心将推送通知广播到运行你的应用的所有设备。",
      "pos": [
        474,
        593
      ]
    },
    {
      "content": "本教程演示使用通知中心的简单广播方案。",
      "pos": [
        595,
        614
      ]
    },
    {
      "content": "开始之前",
      "pos": [
        620,
        624
      ]
    },
    {
      "pos": [
        717,
        843
      ],
      "content": "可以在 GitHub 上的<bpt id=\"p1\">[</bpt>此处<ept id=\"p1\">](https://github.com/Azure/azure-notificationhubs-samples/tree/master/iOS/GetStartedNH/GetStarted)</ept>找到本教程的已完成代码。"
    },
    {
      "content": "先决条件",
      "pos": [
        847,
        851
      ]
    },
    {
      "content": "本教程需要的内容如下：",
      "pos": [
        853,
        864
      ]
    },
    {
      "content": "移动服务 iOS SDK",
      "pos": [
        869,
        881
      ]
    },
    {
      "content": "XCode 6",
      "pos": [
        886,
        893
      ]
    },
    {
      "content": "支持 iOS 8（或更高版本）的设备",
      "pos": [
        912,
        930
      ]
    },
    {
      "content": "iOS 开发人员计划成员身份",
      "pos": [
        933,
        947
      ]
    },
    {
      "pos": [
        953,
        1023
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>由于推送通知配置要求，你必须在支持 iOS 的设备（iPhone 或 iPad）而不是在模拟器上部署和测试推送通知。"
    },
    {
      "content": "完成本教程是学习有关 iOS 应用的所有其他通知中心教程的先决条件。",
      "pos": [
        1025,
        1059
      ]
    },
    {
      "pos": [
        1063,
        1175
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>若要完成本教程，你必须有一个有效的 Azure 帐户。如果你没有帐户，只需花费几分钟就能创建一个免费试用帐户。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure 免费试用<ept id=\"p1\">](/pricing/free-trial)</ept>。"
    },
    {
      "pos": [
        1177,
        1261
      ],
      "content": "[AZURE.INCLUDE <bpt id=\"p1\">[</bpt>通知中心：启用 Apple 推送通知<ept id=\"p1\">](../includes/enable-apple-push-notifications.md)</ept>]"
    },
    {
      "pos": [
        1265,
        1299
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"configure-hub\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>配置通知中心"
    },
    {
      "pos": [
        1301,
        1374
      ],
      "content": "本部分将引导你使用创建的 <bpt id=\"p1\">**</bpt>.p12<ept id=\"p1\">**</ept> 推送证书创建新的通知中心并配置 APNS 身份验证。如果你想要使用已创建的通知中心，可以跳到步骤 5。"
    },
    {
      "content": "单击顶部的“配置”选项卡，然后单击 Apple 通知设置中的“上载”按钮，以上载证书指纹。<ph id=\"ph1\">&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</ph>然后选择前面导出的 <ph id=\"ph2\">&lt;b&gt;</ph>.p12<ph id=\"ph3\">&lt;/b&gt;</ph> 证书以及证书的密码。",
      "pos": [
        1514,
        1605
      ]
    },
    {
      "content": "由于此项目用于开发，因此请务必选择“沙箱”模式。<ph id=\"ph1\">&lt;b&gt;&lt;/b&gt;</ph>仅当你想要将推送通知发送给从应用商店购买你应用的用户时，才使用“生产”模式。",
      "pos": [
        1613,
        1682
      ]
    },
    {
      "content": "&amp;emsp;&amp;emsp;<ph id=\"ph1\">![](./media/notification-hubs-ios-get-started/notification-hubs-upload-cert.png)</ph>",
      "pos": [
        1706,
        1798
      ]
    },
    {
      "pos": [
        1800,
        1894
      ],
      "content": "&amp;emsp;&amp;emsp;<ph id=\"ph1\">![](./media/notification-hubs-ios-get-started/notification-hubs-configure-ios.png)</ph>"
    },
    {
      "content": "你的通知中心现在已配置为使用 APNS，并且你有连接字符串用于注册你的应用程序和发送推送通知。",
      "pos": [
        1898,
        1945
      ]
    },
    {
      "content": "将你的应用程序连接到通知中心",
      "pos": [
        1949,
        1963
      ]
    },
    {
      "content": "在 XCode 中，创建新的 iOS 项目，然后选择“单视图应用程序”模板。",
      "pos": [
        1968,
        2006
      ]
    },
    {
      "pos": [
        2023,
        2088
      ],
      "content": "设置新项目的选项时，请务必使用前面在 Apple 开发人员门户上设置捆绑 ID 时使用的相同<bpt id=\"p1\">**</bpt>产品名称<ept id=\"p1\">**</ept>和<bpt id=\"p2\">**</bpt>组织标识符<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        2106,
        2211
      ],
      "content": "在“目标”下，单击你的项目名称，单击“生成设置”选项卡，展开“代码签名标识”，然后在“调试”下设置你的<bpt id=\"p1\">**</bpt>代码签名标识<ept id=\"p1\">**</ept>。将“级别”从“基本”切换为“全部”，然后将“预配配置文件”设为前面创建的预配配置文件。"
    },
    {
      "content": "如果屏幕未显示在 Xcode 中创建的新预配配置文件，请尝试刷新签名标识的配置文件，方法是单击菜单栏上的“Xcode”，再依次单击“首选项”、“帐户”选项卡、“查看详细信息”按钮、你的签名标识，然后单击右下角的刷新按钮。",
      "pos": [
        2217,
        2327
      ]
    },
    {
      "pos": [
        2344,
        2487
      ],
      "content": "下载<bpt id=\"p1\">[</bpt><ept id=\"p1\">移动服务 iOS SDK 版本 1.2.4]</ept>，然后将文件解压缩。在 Xcode 中，右键单击你的项目，然后单击“将文件添加到”选项，将 <bpt id=\"p2\">**</bpt>WindowsAzureMessaging.framework<ept id=\"p2\">**</ept> 文件夹添加到 Xcode 项目。选择“需要时复制项”，然后单击“添加”。"
    },
    {
      "pos": [
        2494,
        2574
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>通知中心 SDK 目前不支持 Xcode 7 上的 Bitcode。你必须在项目的“构建选项”中将“启用 Bitcode”设置为“否”。"
    },
    {
      "pos": [
        2592,
        2711
      ],
      "content": "将新的标头文件添加到名为 <bpt id=\"p1\">**</bpt>HubInfo.h<ept id=\"p1\">**</ept> 的项目。此文件将保存通知中心的常量。添加以下定义，然后将字符串文本占位符替换为你的<bpt id=\"p2\">*</bpt>中心名称<ept id=\"p2\">*</ept>以及前面记下的 <bpt id=\"p3\">*</bpt>DefaultListenSharedAccessSignature<ept id=\"p3\">*</ept>。"
    },
    {
      "content": "打开 AppDelegate.h 文件并添加以下导入指令：",
      "pos": [
        2973,
        3002
      ]
    },
    {
      "pos": [
        3111,
        3203
      ],
      "content": "根据你的 iOS 版本，在 AppDelegate.m 文件的 <ph id=\"ph1\">`didFinishLaunchingWithOptions`</ph> 方法中添加以下代码。此代码将向 APNs 注册设备句柄："
    },
    {
      "content": "对于 iOS 8：",
      "pos": [
        3209,
        3218
      ]
    },
    {
      "content": "对于 iOS 8 之前的版本：",
      "pos": [
        3634,
        3649
      ]
    },
    {
      "content": "在同一文件中，添加以下方法。此代码将使用你在 HubInfo.h 中指定的连接信息连接到通知中心。然后，它向通知中心提供设备令牌，使通知中心能够发送通知：",
      "pos": [
        3832,
        3909
      ]
    },
    {
      "pos": [
        4901,
        4949
      ],
      "content": "在同一文件中，添加以下方法以便在应用处于活动状态时收到通知的情况下显示 <bpt id=\"p1\">**</bpt>UIAlert<ept id=\"p1\">**</ept>："
    },
    {
      "content": "在设备上生成并运行应用，以验证是否不会失败。",
      "pos": [
        5226,
        5248
      ]
    },
    {
      "content": "发送通知",
      "pos": [
        5253,
        5257
      ]
    },
    {
      "pos": [
        5260,
        5320
      ],
      "content": "在 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 管理门户]</ept>中通过通知中心上的调试选项卡（如以下屏幕中所示）来发送通知，可以在应用中测试通知的接收情况。"
    },
    {
      "content": "（可选）从应用发送通知",
      "pos": [
        5490,
        5501
      ]
    },
    {
      "content": "假设你要在应用内发送通知。本部分提供一个示例来演示如何使用 REST 接口执行此操作。",
      "pos": [
        5503,
        5546
      ]
    },
    {
      "content": "在 Xcode 中，打开 Main.storyboard 并从对象库添加以下 UI 组件，以允许用户在应用中发送推送通知。",
      "pos": [
        5551,
        5612
      ]
    },
    {
      "pos": [
        5620,
        5695
      ],
      "content": "没有标签文本的标签。该标签用于报告发送通知时发生的错误。<bpt id=\"p1\">**</bpt>Lines<ept id=\"p1\">**</ept> 属性应该设为 <bpt id=\"p2\">**</bpt>0<ept id=\"p2\">**</ept>，以便自动根据左右边距和视图顶部的限制来调整大小。"
    },
    {
      "pos": [
        5702,
        5760
      ],
      "content": "具有<bpt id=\"p1\">**</bpt>占位符<ept id=\"p1\">**</ept>文本的文本字段设为“输入通知消息”。将字段限制在标签的正下方，如下所示。将视图控制器设为容器委派。"
    },
    {
      "content": "标题为“发送通知”的按钮限制在文本字段的正下方，并在水平居中的位置。",
      "pos": [
        5767,
        5801
      ]
    },
    {
      "content": "该视图应如下所示：",
      "pos": [
        5807,
        5816
      ]
    },
    {
      "pos": [
        5835,
        6064
      ],
      "content": "为与视图连接的标签和文本字段<bpt id=\"p1\">[</bpt>添加容器<ept id=\"p1\">](https://developer.apple.com/library/ios/recipes/xcode_help-IB_connections/chapters/CreatingOutlet.html)</ept>，并更新 <ph id=\"ph1\">`interface`</ph> 定义，以支持 <ph id=\"ph2\">`UITextFieldDelegate`</ph> 和 <ph id=\"ph3\">`NSXMLParserDelegate`</ph>。添加如下所示的三个属性声明，以帮助调用 REST API 和分析响应。"
    },
    {
      "content": "ViewController.h 文件应如下所示：",
      "pos": [
        6070,
        6095
      ]
    },
    {
      "pos": [
        6647,
        6735
      ],
      "content": "打开 HubInfo.h 并添加以下常量，用于向中心发送通知。将占位符字符串文本替换为实际的 <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">*</ept> 连接字符串。"
    },
    {
      "pos": [
        6881,
        6921
      ],
      "content": "将以下 <ph id=\"ph1\">`#import`</ph> 语句添加到 ViewController.h 文件。"
    },
    {
      "pos": [
        6999,
        7203
      ],
      "content": "在 ViewController.m 中，将以下代码添加到接口实现。此代码将会分析你的 <bpt id=\"p1\">*</bpt>DefaultFullSharedAccessSignature<ept id=\"p1\">*</ept> 连接字符串。如 <bpt id=\"p2\">[</bpt>REST API 参考<ept id=\"p2\">](http://msdn.microsoft.com/library/azure/dn495627.aspx)</ept>中所述，此类已分析的信息将用于生成 <bpt id=\"p3\">**</bpt>Authorization<ept id=\"p3\">**</ept> 请求标头的 SaS 令牌。"
    },
    {
      "pos": [
        8361,
        8440
      ],
      "content": "在 ViewController.m 中更新 <ph id=\"ph1\">`viewDidLoad`</ph> 方法，以便在加载视图时分析连接字符串。此外，将如下所示的实用程序方法添加到接口实现。"
    },
    {
      "pos": [
        9203,
        9351
      ],
      "content": "如 <bpt id=\"p1\">[</bpt>REST API 参考<ept id=\"p1\">](http://msdn.microsoft.com/library/azure/dn495627.aspx)</ept>中所述，在 ViewController.m 中，将以下代码添加到接口实现，以生成将在 <bpt id=\"p2\">**</bpt>Authorization<ept id=\"p2\">**</ept> 标头中提供的 SaS 授权令牌。"
    },
    {
      "pos": [
        11472,
        11593
      ],
      "content": "按住 Ctrl 并从“发送通知”按钮拖到 ViewController.m，为 <bpt id=\"p1\">**</bpt>Touch Down<ept id=\"p1\">**</ept> 添加名为 <bpt id=\"p2\">**</bpt>SendNotificationMessage<ept id=\"p2\">**</ept> 的操作。使用以下代码更新方法，以使用 REST API 发送通知。"
    },
    {
      "content": "在 ViewController.m 中，添加以下委派方法，以支持关闭文本字段的键盘。按住 Ctrl 并从文本字段拖到接口设计器中的视图控制器图标，以将视图控制器设为容器委派。",
      "pos": [
        14225,
        14313
      ]
    },
    {
      "pos": [
        14532,
        14586
      ],
      "content": "在 ViewController.m 中添加以下委派方法，以支持使用 <ph id=\"ph1\">`NSXMLParser`</ph> 分析响应。"
    },
    {
      "content": "生成项目并确认没有错误。",
      "pos": [
        15864,
        15876
      ]
    },
    {
      "pos": [
        15881,
        16006
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果在 Xcode7 中遇到有关 Bitcode 支持的生成错误，应该在 Xcode 中将“生成设置”-&gt;“启用 Bitcode”(ENABLE\\_BITCODE) 更改为“否”。通知中心 SDK 目前不支持 Bitcode。"
    },
    {
      "pos": [
        16008,
        16044
      ],
      "content": "可以在 Apple <bpt id=\"p1\">[</bpt><ept id=\"p1\">本地和推送通知编程指南]</ept>中查看所有可能的通知负载。"
    },
    {
      "content": "测试应用程序",
      "pos": [
        16050,
        16056
      ]
    },
    {
      "content": "若要在 iOS 上测试推送通知，必须将应用部署到设备。不能使用 iOS 模拟器发送 Apple 推送通知。",
      "pos": [
        16058,
        16111
      ]
    },
    {
      "content": "运行应用并确认注册成功，然后按“确定”。",
      "pos": [
        16116,
        16136
      ]
    },
    {
      "pos": [
        16154,
        16247
      ],
      "content": "你可以从 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Azure 管理门户]</ept>发送测试通知。如果你在应用中添加了发送通知的代码，请触摸文本字段以输入通知消息。然后，按键盘上的“发送”按钮或视图中的“发送通知”按钮，以发送通知消息。"
    },
    {
      "content": "该通知将发送到已注册接收通知的所有设备。",
      "pos": [
        16265,
        16285
      ]
    },
    {
      "content": "如果你有任何疑问或者想要提出建议以便为所有读者改进本教程，请在下面的 Disqus 部分为我们留言。",
      "pos": [
        16300,
        16350
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        16355,
        16359
      ]
    },
    {
      "pos": [
        16361,
        16442
      ],
      "content": "在这个简单的示例中，你已将通知广播到所有 iOS 设备。我们建议你继续学习<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心向用户推送通知]</ept>教程。该教程将逐步引导你创建一个后端，以使用标记发送通知。"
    },
    {
      "pos": [
        16444,
        16478
      ],
      "content": "如果要按兴趣组划分用户，可以进一步阅读<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心发送突发新闻]</ept>。"
    },
    {
      "pos": [
        16480,
        16506
      ],
      "content": "有关通知中心的更多常规信息，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">通知中心指南]</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"Azure 通知中心入门（iOS 应用）| Azure\"\n    description=\"在本教程中，你将了解如何使用 Azure 通知中心将通知推送到 iOS 应用程序。\"\n    services=\"notification-hubs\"\n    documentationCenter=\"ios\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"12/15/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 通知中心入门（iOS 应用）\n\n[AZURE.INCLUDE [notification-hubs-selector-get-started](../includes/notification-hubs-selector-get-started.md)]\n\n##概述\n\n本教程演示如何使用 Azure 通知中心将推送通知发送到 iOS 应用程序。你将创建一个空白 iOS 应用，它使用 Apple 推送通知服务 (APNS) 接收推送通知。完成后，你将能够使用通知中心将推送通知广播到运行你的应用的所有设备。\n\n本教程演示使用通知中心的简单广播方案。\n\n\n## 开始之前\n\n[AZURE.INCLUDE [notification-hubs-hero-slug](../includes/notification-hubs-hero-slug.md)]\n\n可以在 GitHub 上的[此处](https://github.com/Azure/azure-notificationhubs-samples/tree/master/iOS/GetStartedNH/GetStarted)找到本教程的已完成代码。\n\n##先决条件\n\n本教程需要的内容如下：\n\n+ [移动服务 iOS SDK]\n+ [XCode 6][Install Xcode]\n+ 支持 iOS 8（或更高版本）的设备\n+ iOS 开发人员计划成员身份\n\n   >[AZURE.NOTE]由于推送通知配置要求，你必须在支持 iOS 的设备（iPhone 或 iPad）而不是在模拟器上部署和测试推送通知。\n\n完成本教程是学习有关 iOS 应用的所有其他通知中心教程的先决条件。\n\n> [AZURE.NOTE]若要完成本教程，你必须有一个有效的 Azure 帐户。如果你没有帐户，只需花费几分钟就能创建一个免费试用帐户。有关详细信息，请参阅 [Azure 免费试用](/pricing/free-trial)。\n\n[AZURE.INCLUDE [通知中心：启用 Apple 推送通知](../includes/enable-apple-push-notifications.md)]\n\n##<a name=\"configure-hub\"></a>配置通知中心\n\n本部分将引导你使用创建的 **.p12** 推送证书创建新的通知中心并配置 APNS 身份验证。如果你想要使用已创建的通知中心，可以跳到步骤 5。\n\n[AZURE.INCLUDE [notification-hubs-portal-create-new-hub](../includes/notification-hubs-portal-create-new-hub.md)]\n\n<ol start=\"7\">\n<li>\n<p>单击顶部的“配置”选项卡，然后单击 Apple 通知设置中的“上载”按钮，以上载证书指纹。<b></b><b></b>然后选择前面导出的 <b>.p12</b> 证书以及证书的密码。</p>\n<p>由于此项目用于开发，因此请务必选择“沙箱”模式。<b></b>仅当你想要将推送通知发送给从应用商店购买你应用的用户时，才使用“生产”模式。<b></b></p>\n</li>\n</ol>\n&emsp;&emsp;![](./media/notification-hubs-ios-get-started/notification-hubs-upload-cert.png)\n\n&emsp;&emsp;![](./media/notification-hubs-ios-get-started/notification-hubs-configure-ios.png)\n\n\n\n你的通知中心现在已配置为使用 APNS，并且你有连接字符串用于注册你的应用程序和发送推送通知。\n\n##将你的应用程序连接到通知中心\n\n1. 在 XCode 中，创建新的 iOS 项目，然后选择“单视图应用程序”模板。\n\n    ![][8]\n\n2. 设置新项目的选项时，请务必使用前面在 Apple 开发人员门户上设置捆绑 ID 时使用的相同**产品名称**和**组织标识符**。\n\n    ![][11]\n\n3. 在“目标”下，单击你的项目名称，单击“生成设置”选项卡，展开“代码签名标识”，然后在“调试”下设置你的**代码签名标识**。将“级别”从“基本”切换为“全部”，然后将“预配配置文件”设为前面创建的预配配置文件。\n\n    如果屏幕未显示在 Xcode 中创建的新预配配置文件，请尝试刷新签名标识的配置文件，方法是单击菜单栏上的“Xcode”，再依次单击“首选项”、“帐户”选项卡、“查看详细信息”按钮、你的签名标识，然后单击右下角的刷新按钮。\n\n    ![][9]\n\n4. 下载[移动服务 iOS SDK 版本 1.2.4]，然后将文件解压缩。在 Xcode 中，右键单击你的项目，然后单击“将文件添加到”选项，将 **WindowsAzureMessaging.framework** 文件夹添加到 Xcode 项目。选择“需要时复制项”，然后单击“添加”。\n\n    >[AZURE.NOTE]通知中心 SDK 目前不支持 Xcode 7 上的 Bitcode。你必须在项目的“构建选项”中将“启用 Bitcode”设置为“否”。\n\n    ![][10]\n\n5. 将新的标头文件添加到名为 **HubInfo.h** 的项目。此文件将保存通知中心的常量。添加以下定义，然后将字符串文本占位符替换为你的*中心名称*以及前面记下的 *DefaultListenSharedAccessSignature*。\n\n        #ifndef HubInfo_h\n        #define HubInfo_h\n        \n            #define HUBNAME @\"<Enter the name of your hub>\"\n            #define HUBLISTENACCESS @\"<Enter your DefaultListenSharedAccess connection string\"\n        \n        #endif /* HubInfo_h */\n\n6. 打开 AppDelegate.h 文件并添加以下导入指令：\n\n         #import <WindowsAzureMessaging/WindowsAzureMessaging.h> \n         #import \"HubInfo.h\"\n        \n7. 根据你的 iOS 版本，在 AppDelegate.m 文件的 `didFinishLaunchingWithOptions` 方法中添加以下代码。此代码将向 APNs 注册设备句柄：\n\n    对于 iOS 8：\n\n        UIUserNotificationSettings *settings = [UIUserNotificationSettings settingsForTypes:UIUserNotificationTypeSound |\n                                                UIUserNotificationTypeAlert | UIUserNotificationTypeBadge categories:nil];\n\n        [[UIApplication sharedApplication] registerUserNotificationSettings:settings];\n        [[UIApplication sharedApplication] registerForRemoteNotifications];\n\n    对于 iOS 8 之前的版本：\n\n         [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound];\n\n\n8. 在同一文件中，添加以下方法。此代码将使用你在 HubInfo.h 中指定的连接信息连接到通知中心。然后，它向通知中心提供设备令牌，使通知中心能够发送通知：\n\n        - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *) deviceToken {\n            SBNotificationHub* hub = [[SBNotificationHub alloc] initWithConnectionString:HUBLISTENACCESS\n                                        notificationHubPath:HUBNAME];\n\n            [hub registerNativeWithDeviceToken:deviceToken tags:nil completion:^(NSError* error) {\n                if (error != nil) {\n                    NSLog(@\"Error registering for notifications: %@\", error);\n                }\n                else {\n                    [self MessageBox:@\"Registration Status\" message:@\"Registered\"];\n                }\n            }];\n        }\n\n        -(void)MessageBox:(NSString *)title message:(NSString *)messageText\n        {\n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title message:messageText delegate:self\n                cancelButtonTitle:@\"OK\" otherButtonTitles: nil];\n            [alert show];\n        }\n\n\n9. 在同一文件中，添加以下方法以便在应用处于活动状态时收到通知的情况下显示 **UIAlert**：\n\n\n        - (void)application:(UIApplication *)application didReceiveRemoteNotification: (NSDictionary *)userInfo {\n            NSLog(@\"%@\", userInfo);\n            [self MessageBox:@\"Notification\" message:[[userInfo objectForKey:@\"aps\"] valueForKey:@\"alert\"]];\n        }\n\n10. 在设备上生成并运行应用，以验证是否不会失败。\n\n## 发送通知\n\n\n在 [Azure 管理门户]中通过通知中心上的调试选项卡（如以下屏幕中所示）来发送通知，可以在应用中测试通知的接收情况。\n\n![][30]\n\n[AZURE.INCLUDE [notification-hubs-sending-notifications-from-the-portal](../includes/notification-hubs-sending-notifications-from-the-portal.md)]\n\n![][31]\n\n## （可选）从应用发送通知\n\n假设你要在应用内发送通知。本部分提供一个示例来演示如何使用 REST 接口执行此操作。\n\n1. 在 Xcode 中，打开 Main.storyboard 并从对象库添加以下 UI 组件，以允许用户在应用中发送推送通知。\n\n    - 没有标签文本的标签。该标签用于报告发送通知时发生的错误。**Lines** 属性应该设为 **0**，以便自动根据左右边距和视图顶部的限制来调整大小。\n    - 具有**占位符**文本的文本字段设为“输入通知消息”。将字段限制在标签的正下方，如下所示。将视图控制器设为容器委派。\n    - 标题为“发送通知”的按钮限制在文本字段的正下方，并在水平居中的位置。\n\n    该视图应如下所示：\n\n    ![][32]\n\n\n2. 为与视图连接的标签和文本字段[添加容器](https://developer.apple.com/library/ios/recipes/xcode_help-IB_connections/chapters/CreatingOutlet.html)，并更新 `interface` 定义，以支持 `UITextFieldDelegate` 和 `NSXMLParserDelegate`。添加如下所示的三个属性声明，以帮助调用 REST API 和分析响应。\n\n    ViewController.h 文件应如下所示：\n\n        #import <UIKit/UIKit.h>\n\n        @interface ViewController : UIViewController <UITextFieldDelegate, NSXMLParserDelegate>\n        {\n            NSXMLParser *xmlParser;\n        }\n\n        // Make sure these outlets are connected to your UI by ctrl+dragging\n        @property (weak, nonatomic) IBOutlet UITextField *notificationMessage;\n        @property (weak, nonatomic) IBOutlet UILabel *sendResults;\n\n        @property (copy, nonatomic) NSString *statusResult;\n        @property (copy, nonatomic) NSString *currentElement;\n\n        @end\n\n3. 打开 HubInfo.h 并添加以下常量，用于向中心发送通知。将占位符字符串文本替换为实际的 *DefaultFullSharedAccessSignature* 连接字符串。\n\n        #define API_VERSION @\"?api-version=2015-01\"\n        #define HUBFULLACCESS @\"<Enter Your DefaultFullSharedAccess Connection string>\"\n\n4. 将以下 `#import` 语句添加到 ViewController.h 文件。\n\n        #import <CommonCrypto/CommonHMAC.h>\n        #import \"HubInfo.h\"\n\n5. 在 ViewController.m 中，将以下代码添加到接口实现。此代码将会分析你的 *DefaultFullSharedAccessSignature* 连接字符串。如 [REST API 参考](http://msdn.microsoft.com/library/azure/dn495627.aspx)中所述，此类已分析的信息将用于生成 **Authorization** 请求标头的 SaS 令牌。\n\n        NSString *HubEndpoint;\n        NSString *HubSasKeyName;\n        NSString *HubSasKeyValue;\n\n        -(void)ParseConnectionString\n        {\n            NSArray *parts = [HUBFULLACCESS componentsSeparatedByString:@\";\"];\n            NSString *part;\n\n            if ([parts count] != 3)\n            {\n                NSException* parseException = [NSException exceptionWithName:@\"ConnectionStringParseException\"\n                    reason:@\"Invalid full shared access connection string\" userInfo:nil];\n\n                @throw parseException;\n            }\n\n            for (part in parts)\n            {\n                if ([part hasPrefix:@\"Endpoint\"])\n                {\n                    HubEndpoint = [NSString stringWithFormat:@\"https%@\",[part substringFromIndex:11]];\n                }\n                else if ([part hasPrefix:@\"SharedAccessKeyName\"])\n                {\n                    HubSasKeyName = [part substringFromIndex:20];\n                }\n                else if ([part hasPrefix:@\"SharedAccessKey\"])\n                {\n                    HubSasKeyValue = [part substringFromIndex:16];\n                }\n            }\n        }\n\n6. 在 ViewController.m 中更新 `viewDidLoad` 方法，以便在加载视图时分析连接字符串。此外，将如下所示的实用程序方法添加到接口实现。\n\n\n        - (void)viewDidLoad\n        {\n            [super viewDidLoad];\n            [self ParseConnectionString];\n            [_notificationMessage setDelegate:self];\n        }\n\n        -(NSString *)CF_URLEncodedString:(NSString *)inputString\n        {\n           return (__bridge NSString *)CFURLCreateStringByAddingPercentEscapes(NULL, (CFStringRef)inputString,\n                NULL, (CFStringRef)@\"!*'();:@&=+$,/?%#[]\", kCFStringEncodingUTF8);\n        }\n\n        -(void)MessageBox:(NSString *)title message:(NSString *)messageText\n        {\n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title message:messageText delegate:self\n                cancelButtonTitle:@\"OK\" otherButtonTitles: nil];\n            [alert show];\n        }\n\n\n\n\n\n7. 如 [REST API 参考](http://msdn.microsoft.com/library/azure/dn495627.aspx)中所述，在 ViewController.m 中，将以下代码添加到接口实现，以生成将在 **Authorization** 标头中提供的 SaS 授权令牌。\n\n        -(NSString*) generateSasToken:(NSString*)uri\n        {\n            NSString *targetUri;\n            NSString* utf8LowercasedUri = NULL;\n            NSString *signature = NULL;\n            NSString *token = NULL;\n\n            @try\n            {\n                // Add expiration\n                uri = [uri lowercaseString];\n                utf8LowercasedUri = [self CF_URLEncodedString:uri];\n                targetUri = [utf8LowercasedUri lowercaseString];\n                NSTimeInterval expiresOnDate = [[NSDate date] timeIntervalSince1970];\n                int expiresInMins = 60; // 1 hour\n                expiresOnDate += expiresInMins * 60;\n                UInt64 expires = trunc(expiresOnDate);\n                NSString* toSign = [NSString stringWithFormat:@\"%@\\n%qu\", targetUri, expires];\n\n                // Get an hmac_sha1 Mac instance and initialize with the signing key\n                const char *cKey  = [HubSasKeyValue cStringUsingEncoding:NSUTF8StringEncoding];\n                const char *cData = [toSign cStringUsingEncoding:NSUTF8StringEncoding];\n                unsigned char cHMAC[CC_SHA256_DIGEST_LENGTH];\n                CCHmac(kCCHmacAlgSHA256, cKey, strlen(cKey), cData, strlen(cData), cHMAC);\n                NSData *rawHmac = [[NSData alloc] initWithBytes:cHMAC length:sizeof(cHMAC)];\n                signature = [self CF_URLEncodedString:[rawHmac base64EncodedStringWithOptions:0]];\n\n                // Construct authorization token string\n                token = [NSString stringWithFormat:@\"SharedAccessSignature sig=%@&se=%qu&skn=%@&sr=%@\",\n                    signature, expires, HubSasKeyName, targetUri];\n            }\n            @catch (NSException *exception)\n            {\n                [self MessageBox:@\"Exception Generating SaS Token\" message:[exception reason]];\n            }\n            @finally\n            {\n                if (utf8LowercasedUri != NULL)\n                    CFRelease((CFStringRef)utf8LowercasedUri);\n                if (signature != NULL)\n                CFRelease((CFStringRef)signature);\n            }\n\n            return token;\n        }\n\n\n8. 按住 Ctrl 并从“发送通知”按钮拖到 ViewController.m，为 **Touch Down** 添加名为 **SendNotificationMessage** 的操作。使用以下代码更新方法，以使用 REST API 发送通知。\n\n        - (IBAction)SendNotificationMessage:(id)sender\n        {\n            self.sendResults.text = @\"\";\n            [self SendNotificationRESTAPI];\n        }\n\n        - (void)SendNotificationRESTAPI\n        {\n            NSURLSession* session = [NSURLSession\n                             sessionWithConfiguration:[NSURLSessionConfiguration defaultSessionConfiguration]\n                             delegate:nil delegateQueue:nil];\n\n            // Apple Notification format of the notification message\n            NSString *json = [NSString stringWithFormat:@\"{\"aps\":{\"alert\":\"%@\"}}\",\n                                self.notificationMessage.text];\n\n            // Construct the message's REST endpoint\n            NSURL* url = [NSURL URLWithString:[NSString stringWithFormat:@\"%@%@/messages/%@\", HubEndpoint,\n                                                HUBNAME, API_VERSION]];\n\n            // Generate the token to be used in the authorization header\n            NSString* authorizationToken = [self generateSasToken:[url absoluteString]];\n\n            //Create the request to add the APNS notification message to the hub\n            NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n            [request setHTTPMethod:@\"POST\"];\n            [request setValue:@\"application/json;charset=utf-8\" forHTTPHeaderField:@\"Content-Type\"];\n\n            // Signify apple notification format\n            [request setValue:@\"apple\" forHTTPHeaderField:@\"ServiceBusNotification-Format\"];\n\n            //Authenticate the notification message POST request with the SaS token\n            [request setValue:authorizationToken forHTTPHeaderField:@\"Authorization\"];\n\n            //Add the notification message body\n            [request setHTTPBody:[json dataUsingEncoding:NSUTF8StringEncoding]];\n\n            // Send the REST request\n            NSURLSessionDataTask* dataTask = [session dataTaskWithRequest:request\n                completionHandler:^(NSData *data, NSURLResponse *response, NSError *error)\n            {\n                NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*) response;\n                if (error || (httpResponse.statusCode != 200 && httpResponse.statusCode != 201))\n                {\n                    NSLog(@\"\\nError status: %d\\nError: %@\", httpResponse.statusCode, error);\n                }\n                if (data != NULL)\n                {\n                    xmlParser = [[NSXMLParser alloc] initWithData:data];\n                    [xmlParser setDelegate:self];\n                    [xmlParser parse];\n                }\n            }];\n            [dataTask resume];\n        }\n\n\n9. 在 ViewController.m 中，添加以下委派方法，以支持关闭文本字段的键盘。按住 Ctrl 并从文本字段拖到接口设计器中的视图控制器图标，以将视图控制器设为容器委派。\n\n        //===[ Implement UITextFieldDelegate methods ]===\n\n        -(BOOL)textFieldShouldReturn:(UITextField *)textField\n        {\n            [textField resignFirstResponder];\n            return YES;\n        }\n\n\n10. 在 ViewController.m 中添加以下委派方法，以支持使用 `NSXMLParser` 分析响应。\n\n        //===[ Implement NSXMLParserDelegate methods ]===\n\n        -(void)parserDidStartDocument:(NSXMLParser *)parser\n        {\n            self.statusResult = @\"\";\n        }\n\n        -(void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName\n            namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName\n            attributes:(NSDictionary *)attributeDict\n        {\n            NSString * element = [elementName lowercaseString];\n            NSLog(@\"*** New element parsed : %@ ***\",element);\n\n            if ([element isEqualToString:@\"code\"] | [element isEqualToString:@\"detail\"])\n            {\n                self.currentElement = element;\n            }\n        }\n\n        -(void) parser:(NSXMLParser *)parser foundCharacters:(NSString *)parsedString\n        {\n            self.statusResult = [self.statusResult stringByAppendingString:\n                [NSString stringWithFormat:@\"%@ : %@\\n\", self.currentElement, parsedString]];\n        }\n\n        -(void)parserDidEndDocument:(NSXMLParser *)parser\n        {\n            // Set the status label text on the UI thread\n            dispatch_async(dispatch_get_main_queue(),\n            ^{\n                [self.sendResults setText:self.statusResult];\n            });\n        }\n\n\n\n11. 生成项目并确认没有错误。\n\n\n> [AZURE.NOTE]如果在 Xcode7 中遇到有关 Bitcode 支持的生成错误，应该在 Xcode 中将“生成设置”->“启用 Bitcode”(ENABLE\\_BITCODE) 更改为“否”。通知中心 SDK 目前不支持 Bitcode。\n\n可以在 Apple [本地和推送通知编程指南]中查看所有可能的通知负载。\n\n\n\n##测试应用程序\n\n若要在 iOS 上测试推送通知，必须将应用部署到设备。不能使用 iOS 模拟器发送 Apple 推送通知。\n\n1. 运行应用并确认注册成功，然后按“确定”。\n\n    ![][33]\n\n2. 你可以从 [Azure 管理门户]发送测试通知。如果你在应用中添加了发送通知的代码，请触摸文本字段以输入通知消息。然后，按键盘上的“发送”按钮或视图中的“发送通知”按钮，以发送通知消息。\n\n    ![][34]\n\n3. 该通知将发送到已注册接收通知的所有设备。\n\n    ![][35]\n\n如果你有任何疑问或者想要提出建议以便为所有读者改进本教程，请在下面的 Disqus 部分为我们留言。\n\n\n##后续步骤\n\n在这个简单的示例中，你已将通知广播到所有 iOS 设备。我们建议你继续学习[使用通知中心向用户推送通知]教程。该教程将逐步引导你创建一个后端，以使用标记发送通知。\n\n如果要按兴趣组划分用户，可以进一步阅读[使用通知中心发送突发新闻]。\n\n有关通知中心的更多常规信息，请参阅[通知中心指南]。\n\n\n\n<!-- Images. -->\n\n[6]: ./media/notification-hubs-ios-get-started/notification-hubs-configure-ios.png\n[8]: ./media/notification-hubs-ios-get-started/notification-hubs-create-ios-app.png\n[9]: ./media/notification-hubs-ios-get-started/notification-hubs-create-ios-app2.png\n[10]: ./media/notification-hubs-ios-get-started/notification-hubs-create-ios-app3.png\n[11]: ./media/notification-hubs-ios-get-started/notification-hubs-xcode-product-name.png\n\n[30]: ./media/notification-hubs-ios-get-started/notification-hubs-debug-hub-ios.png\n\n[31]: ./media/notification-hubs-ios-get-started/notification-hubs-ios-ui.png\n[32]: ./media/notification-hubs-ios-get-started/notification-hubs-storyboard-view.png\n[33]: ./media/notification-hubs-ios-get-started/notification-hubs-test1.png\n[34]: ./media/notification-hubs-ios-get-started/notification-hubs-test2.png\n[35]: ./media/notification-hubs-ios-get-started/notification-hubs-test3.png\n\n\n<!-- URLs. -->\n[移动服务 iOS SDK 版本 1.2.4]: http://aka.ms/kymw2g\n[移动服务 iOS SDK]: http://go.microsoft.com/fwLink/?LinkID=266533\n[Submit an app page]: http://go.microsoft.com/fwlink/p/?LinkID=266582\n[My Applications]: http://go.microsoft.com/fwlink/p/?LinkId=262039\n[Live SDK for Windows]: https://msdn.microsoft.com/zh-cn/onedrive/dn632140\n\n[Get started with Mobile Services]: /develop/mobile/tutorials/get-started-ios\n[Azure 管理门户]: https://manage.windowsazure.cn/\n[通知中心指南]: http://msdn.microsoft.com/zh-cn/library/jj927170.aspx\n[Install Xcode]: https://go.microsoft.com/fwLink/p/?LinkID=266532\n[iOS Provisioning Portal]: http://go.microsoft.com/fwlink/p/?LinkId=272456\n\n[Get started with push notifications in Mobile Services]: /documentation/articles/mobile-services-javascript-backend-ios-get-started-push\n[使用通知中心向用户推送通知]: /documentation/articles/notification-hubs-aspnet-backend-ios-notify-users\n[使用通知中心发送突发新闻]: /documentation/articles/notification-hubs-ios-send-breaking-news\n[本地和推送通知编程指南]: http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/Chapters/ApplePushService.html#//apple_ref/doc/uid/TP40008194-CH100-SW1\n\n<!---HONumber=Mooncake_0104_2016-->"
}