{
  "nodes": [
    {
      "content": "使用 Socket.io 构建 Node.js 应用程序 | Azure",
      "pos": [
        28,
        64
      ]
    },
    {
      "content": "了解如何在 Azure 上托管的 node.js 应用程序中使用 socket.io。",
      "pos": [
        84,
        127
      ]
    },
    {
      "content": "在 Azure 云服务中使用 Socket.IO 生成 Node.js 聊天应用程序",
      "pos": [
        359,
        401
      ]
    },
    {
      "pos": [
        403,
        524
      ],
      "content": "Socket.IO 在 node.js 服务器和客户端之间提供实时通信。本教程指导你如何在 Azure 上托管一个基于 socket.IO 的聊天应用程序。有关 Socket.IO 的详细信息，请参阅 <bpt id=\"p1\">&lt;</bpt><ept id=\"p1\">http://socket.io/&gt;</ept>。"
    },
    {
      "content": "以下是已完成应用程序的屏幕快照：",
      "pos": [
        526,
        542
      ]
    },
    {
      "content": "显示托管在 Azure 上的服务的浏览器窗口",
      "pos": [
        546,
        568
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        589,
        593
      ]
    },
    {
      "content": "确保以下产品和版本已安装才能成功完成本文中的示例：",
      "pos": [
        595,
        620
      ]
    },
    {
      "pos": [
        624,
        724
      ],
      "content": "安装 <bpt id=\"p1\">[</bpt>Visual Studio 2013<ept id=\"p1\">](https://www.visualstudio.com/zh-cn/downloads/download-visual-studio-vs.aspx)</ept>"
    },
    {
      "pos": [
        727,
        768
      ],
      "content": "安装 <bpt id=\"p1\">[</bpt>Node.js<ept id=\"p1\">](https://nodejs.org/download)</ept>"
    },
    {
      "pos": [
        771,
        815
      ],
      "content": "安装 <bpt id=\"p1\">[</bpt>Python 2.7.10 版<ept id=\"p1\">](https://www.python.org)</ept>"
    },
    {
      "content": "创建云服务项目",
      "pos": [
        820,
        827
      ]
    },
    {
      "content": "以下步骤创建将托管 Socket.IO 应用程序的云服务项目。",
      "pos": [
        829,
        860
      ]
    },
    {
      "pos": [
        865,
        944
      ],
      "content": "在“开始”菜单或“开始”屏幕中，搜索 <bpt id=\"p1\">**</bpt>Azure PowerShell<ept id=\"p1\">**</ept>。最后，右键单击“Azure PowerShell”并选择“以管理员身份运行”。"
    },
    {
      "content": "Azure PowerShell 图标",
      "pos": [
        952,
        971
      ]
    },
    {
      "pos": [
        994,
        1018
      ],
      "content": "创建一个名为 <bpt id=\"p1\">**</bpt>c:\\\\node<ept id=\"p1\">**</ept> 的目录。"
    },
    {
      "pos": [
        1049,
        1071
      ],
      "content": "将目录更改为 <bpt id=\"p1\">**</bpt>c:\\\\node<ept id=\"p1\">**</ept> 目录"
    },
    {
      "pos": [
        1102,
        1162
      ],
      "content": "输入以下命令以创建一个名为 <bpt id=\"p1\">**</bpt>chatapp<ept id=\"p1\">**</ept> 的新解决方案和一个名为 <bpt id=\"p2\">**</bpt>WorkerRole1<ept id=\"p2\">**</ept> 的辅助角色："
    },
    {
      "content": "你将看到以下响应：",
      "pos": [
        1265,
        1274
      ]
    },
    {
      "content": "new-azureservice 和 add-azurenodeworkerrole cmdlet 的输出",
      "pos": [
        1282,
        1335
      ]
    },
    {
      "content": "下载聊天示例",
      "pos": [
        1405,
        1411
      ]
    },
    {
      "pos": [
        1413,
        1481
      ],
      "content": "对于此项目，我们将使用 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Socket.IO GitHub 存储库]</ept>中的聊天示例。执行以下步骤下载该示例并将其添加到您先前创建的项目中。"
    },
    {
      "content": "使用“克隆”按钮创建存储库的本地副本。你还可以使用“ZIP”按钮下载项目。",
      "pos": [
        1487,
        1524
      ]
    },
    {
      "content": "显示 https://github.com/LearnBoost/socket.io/tree/master/examples/chat 的浏览器窗口，其中 ZIP 下载图标突出显示",
      "pos": [
        1532,
        1623
      ]
    },
    {
      "pos": [
        1649,
        1741
      ],
      "content": "浏览本地存储库的目录结构，找到 <bpt id=\"p1\">**</bpt>examples\\\\chat<ept id=\"p1\">**</ept> 目录。将该目录的内容复制到早先创建的 <bpt id=\"p2\">**</bpt>C:\\\\node\\\\chatapp\\\\WorkerRole1<ept id=\"p2\">**</ept> 目录。"
    },
    {
      "content": "资源管理器，显示从存档中解压缩的 examples\\\\chat 目录的内容",
      "pos": [
        1749,
        1786
      ]
    },
    {
      "pos": [
        1808,
        1852
      ],
      "content": "上面的屏幕截图中突出显示的项目是从 <bpt id=\"p1\">**</bpt>examples\\\\chat<ept id=\"p1\">**</ept> 目录复制的文件"
    },
    {
      "pos": [
        1858,
        2037
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>C:\\\\node\\\\chatapp\\\\WorkerRole1<ept id=\"p1\">**</ept> 目录中，删除 <bpt id=\"p2\">**</bpt>server.js<ept id=\"p2\">**</ept> 文件，然后将 <bpt id=\"p3\">**</bpt>app.js<ept id=\"p3\">**</ept> 文件重命名为 <bpt id=\"p4\">**</bpt>server.js<ept id=\"p4\">**</ept>。这将删除前面由 <bpt id=\"p5\">**</bpt>Add-AzureNodeWorkerRole<ept id=\"p5\">**</ept> cmdlet 创建的默认 <bpt id=\"p6\">**</bpt>server.js<ept id=\"p6\">**</ept> 文件并用聊天示例中的应用程序文件取代。"
    },
    {
      "content": "修改 Server.js 并安装模块",
      "pos": [
        2043,
        2061
      ]
    },
    {
      "content": "在 Azure 模拟器中测试应用程序之前，必须进行一些小改动。对 server.js 文件执行以下步骤：",
      "pos": [
        2063,
        2115
      ]
    },
    {
      "pos": [
        2121,
        2166
      ],
      "content": "在 Visual Studio 或任何文本编辑器中打开 <bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "pos": [
        2172,
        2306
      ],
      "content": "在 server.js 的开头处查找 <bpt id=\"p1\">**</bpt>Module dependencies<ept id=\"p1\">**</ept> 节，将包含 <bpt id=\"p2\">**</bpt>sio = require('..//..//lib//socket.io')<ept id=\"p2\">**</ept> 的行改为 <bpt id=\"p3\">**</bpt>sio = require('socket.io')<ept id=\"p3\">**</ept>，如下所示："
    },
    {
      "pos": [
        2549,
        2643
      ],
      "content": "为了确保应用程序侦听正确端口，请在记事本或你喜爱的编辑器中打开 server.js，然后通过将 <bpt id=\"p1\">**</bpt>3000<ept id=\"p1\">**</ept> 替换为 <bpt id=\"p2\">**</bpt>process.env.port<ept id=\"p2\">**</ept> 来更改以下行，如下所示："
    },
    {
      "pos": [
        2906,
        2965
      ],
      "content": "保存对 <bpt id=\"p1\">**</bpt>server.js<ept id=\"p1\">**</ept> 所做更改后，使用以下步骤安装所需的模块，然后在 Azure 模拟器中测试应用程序："
    },
    {
      "pos": [
        2971,
        3061
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>Azure PowerShell<ept id=\"p1\">**</ept>，将目录切换到 <bpt id=\"p2\">**</bpt>C:\\\\node\\\\chatapp\\\\WorkerRole1<ept id=\"p2\">**</ept> 目录，然后使用以下命令安装此应用程序所需的模块："
    },
    {
      "content": "这将安装 package.json 文件中所列的模块。命令完成后，您应该看到类似下面的输出：",
      "pos": [
        3120,
        3166
      ]
    },
    {
      "content": "npm install 命令的输出",
      "pos": [
        3174,
        3191
      ]
    },
    {
      "content": "因为此示例最初是 Socket.IO GitHub 存储库的一部分，并通过相对路径直接引用了 Socket.IO 库，而 package.json 文件中未引用 Socket.IO，所以我们必须通过发出以下命令来安装它：",
      "pos": [
        3237,
        3347
      ]
    },
    {
      "content": "测试和部署",
      "pos": [
        3423,
        3428
      ]
    },
    {
      "content": "通过发出以下命令启动模拟器：",
      "pos": [
        3434,
        3448
      ]
    },
    {
      "content": "打开浏览器并导航到 ****http://127.0.0.1**。",
      "pos": [
        3523,
        3556
      ]
    },
    {
      "content": "当浏览器窗口打开时，输入一个昵称，然后按 Enter。这样，您就可以以特定昵称发布消息。要测试多用户功能，请使用同一 URL 打开另外的浏览器窗口但输入不同的昵称。",
      "pos": [
        3562,
        3644
      ]
    },
    {
      "content": "显示来自用户 1 和用户 2 的聊天消息的两个浏览器窗口",
      "pos": [
        3652,
        3680
      ]
    },
    {
      "content": "测试应用程序之后，发出以下命令停止仿真程序：",
      "pos": [
        3751,
        3773
      ]
    },
    {
      "pos": [
        3839,
        3902
      ],
      "content": "若要将应用程序部署到 Azure，请使用 <bpt id=\"p1\">**</bpt>Publish-AzureServiceProject<ept id=\"p1\">**</ept> cmdlet。例如："
    },
    {
      "pos": [
        4033,
        4093
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph> 确保使用唯一名称，否则发布过程会失败。部署完成后，浏览器将打开并导航到已部署的服务。"
    },
    {
      "pos": [
        4105,
        4297
      ],
      "content": "如果你收到一条错误，指出导入的发布配置文件中不存在提供的订阅名称，则你必须先为你的订阅下载和导入发布配置文件，然后再部署到 Azure。请参阅<bpt id=\"p1\">[</bpt>生成 Node.js 应用程序并将其部署到 Azure 云服务<ept id=\"p1\">](/documentation/articles/cloud-services-nodejs-develop-deploy-app)</ept>中的<bpt id=\"p2\">**</bpt>将应用程序部署到 Azure<ept id=\"p2\">**</ept>部分"
    },
    {
      "content": "显示托管在 Azure 上的服务的浏览器窗口",
      "pos": [
        4305,
        4327
      ]
    },
    {
      "pos": [
        4351,
        4556
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 如果你收到一条错误，指出导入的发布配置文件中不存在提供的订阅名称，则你必须先为你的订阅下载和导入发布配置文件，然后再部署到 Azure。请参阅<bpt id=\"p1\">[</bpt>生成 Node.js 应用程序并将其部署到 Azure 云服务<ept id=\"p1\">](/documentation/articles/cloud-services-nodejs-develop-deploy-app)</ept>中的<bpt id=\"p2\">**</bpt>将应用程序部署到 Azure<ept id=\"p2\">**</ept>部分"
    },
    {
      "content": "你的应用程序现在即可在 Azure 上运行，并可使用 Socket.IO 在不同客户端之间中继聊天消息。",
      "pos": [
        4558,
        4610
      ]
    },
    {
      "pos": [
        4614,
        4877
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 为简单起见，此示例仅限于连接到同一实例的用户之间的聊天。这意味着如果云服务创建两个辅助角色实例，用户将只能够与连接到同一辅助角色实例的其他用户聊天。要缩放应用程序以使用多个角色实例，你可以使用像 Service Bus 这样的技术在实例之间共享 Socket.IO 存储状态。有关示例，请参阅 <bpt id=\"p1\">[</bpt>Azure SDK for Node.js GitHub 存储库的<ept id=\"p1\">](https://github.com/WindowsAzure/azure-sdk-for-node)</ept>中的服务总线队列和主题使用示例。"
    },
    {
      "content": "后续步骤",
      "pos": [
        4881,
        4885
      ]
    },
    {
      "pos": [
        4887,
        5010
      ],
      "content": "在本教程中，你已了解如何创建在 Azure 云服务中托管的基本聊天应用程序。若要了解如何在 Azure 网站中托管此应用程序，请参阅<bpt id=\"p1\">[</bpt>在 Azure 网站中使用 Socket.IO 生成 Node.js 聊天应用程序<ept id=\"p1\">][chatwebsite]</ept>。"
    },
    {
      "pos": [
        5012,
        5058
      ],
      "content": "有关详细信息，另请参阅 <bpt id=\"p1\">[</bpt>Node.js 开发人员中心<ept id=\"p1\">](/develop/nodejs)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"使用 Socket.io 构建 Node.js 应用程序 | Azure\" \n    description=\"了解如何在 Azure 上托管的 node.js 应用程序中使用 socket.io。\" \n    services=\"cloud-services\" \n    documentationCenter=\"nodejs\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"cloud-services\" \n    ms.date=\"01/09/2016\" \n    wacn.date=\"02/26/2016\"/>\n\n# 在 Azure 云服务中使用 Socket.IO 生成 Node.js 聊天应用程序\n\nSocket.IO 在 node.js 服务器和客户端之间提供实时通信。本教程指导你如何在 Azure 上托管一个基于 socket.IO 的聊天应用程序。有关 Socket.IO 的详细信息，请参阅 <http://socket.io/>。\n\n以下是已完成应用程序的屏幕快照：\n\n![显示托管在 Azure 上的服务的浏览器窗口][completed-app]\n\n## 先决条件\n\n确保以下产品和版本已安装才能成功完成本文中的示例：\n\n* 安装 [Visual Studio 2013](https://www.visualstudio.com/zh-cn/downloads/download-visual-studio-vs.aspx)\n* 安装 [Node.js](https://nodejs.org/download)\n* 安装 [Python 2.7.10 版](https://www.python.org)\n\n## 创建云服务项目\n\n以下步骤创建将托管 Socket.IO 应用程序的云服务项目。\n\n1. 在“开始”菜单或“开始”屏幕中，搜索 **Azure PowerShell**。最后，右键单击“Azure PowerShell”并选择“以管理员身份运行”。\n\n    ![Azure PowerShell 图标][powershell-menu]\n\n2. 创建一个名为 **c:\\\\node** 的目录。\n \n        PS C:\\> md node\n\n3. 将目录更改为 **c:\\\\node** 目录\n \n        PS C:\\> cd node\n\n4. 输入以下命令以创建一个名为 **chatapp** 的新解决方案和一个名为 **WorkerRole1** 的辅助角色：\n\n        PS C:\\node> New-AzureServiceProject chatapp\n        PS C:\\Node> Add-AzureNodeWorkerRole\n\n    你将看到以下响应：\n\n    ![new-azureservice 和 add-azurenodeworkerrole cmdlet 的输出](./media/cloud-services-nodejs-chat-app-socketio/socketio-1.png)\n\n## 下载聊天示例\n\n对于此项目，我们将使用 [Socket.IO GitHub 存储库]中的聊天示例。执行以下步骤下载该示例并将其添加到您先前创建的项目中。\n\n1.  使用“克隆”按钮创建存储库的本地副本。你还可以使用“ZIP”按钮下载项目。\n\n    ![显示 https://github.com/LearnBoost/socket.io/tree/master/examples/chat 的浏览器窗口，其中 ZIP 下载图标突出显示][chat-example-view]\n\n3.  浏览本地存储库的目录结构，找到 **examples\\\\chat** 目录。将该目录的内容复制到早先创建的 **C:\\\\node\\\\chatapp\\\\WorkerRole1** 目录。\n\n    ![资源管理器，显示从存档中解压缩的 examples\\\\chat 目录的内容][chat-contents]\n\n    上面的屏幕截图中突出显示的项目是从 **examples\\\\chat** 目录复制的文件\n\n4.  在 **C:\\\\node\\\\chatapp\\\\WorkerRole1** 目录中，删除 **server.js** 文件，然后将 **app.js** 文件重命名为 **server.js**。这将删除前面由 **Add-AzureNodeWorkerRole** cmdlet 创建的默认 **server.js** 文件并用聊天示例中的应用程序文件取代。\n\n### 修改 Server.js 并安装模块\n\n在 Azure 模拟器中测试应用程序之前，必须进行一些小改动。对 server.js 文件执行以下步骤：\n\n1.  在 Visual Studio 或任何文本编辑器中打开 **server.js** 文件。\n\n2.  在 server.js 的开头处查找 **Module dependencies** 节，将包含 **sio = require('..//..//lib//socket.io')** 的行改为 **sio = require('socket.io')**，如下所示：\n\n        var express = require('express')\n        , stylus = require('stylus')\n        , nib = require('nib')\n        //, sio = require('..//..//lib//socket.io'); //Original\n        , sio = require('socket.io');                //Updated\n\n3.  为了确保应用程序侦听正确端口，请在记事本或你喜爱的编辑器中打开 server.js，然后通过将 **3000** 替换为 **process.env.port** 来更改以下行，如下所示：\n\n        //app.listen(3000, function () {            //Original\n        app.listen(process.env.port, function () {  //Updated\n          var addr = app.address();\n          console.log('   app listening on http://' + addr.address + ':' + addr.port);\n        });\n\n保存对 **server.js** 所做更改后，使用以下步骤安装所需的模块，然后在 Azure 模拟器中测试应用程序：\n\n1.  使用 **Azure PowerShell**，将目录切换到 **C:\\\\node\\\\chatapp\\\\WorkerRole1** 目录，然后使用以下命令安装此应用程序所需的模块：\n\n        PS C:\\node\\chatapp\\WorkerRole1> npm install\n\n    这将安装 package.json 文件中所列的模块。命令完成后，您应该看到类似下面的输出：\n\n    ![npm install 命令的输出][The-output-of-the-npm-install-command]\n\n4.  因为此示例最初是 Socket.IO GitHub 存储库的一部分，并通过相对路径直接引用了 Socket.IO 库，而 package.json 文件中未引用 Socket.IO，所以我们必须通过发出以下命令来安装它：\n\n        PS C:\\node\\chatapp\\WorkerRole1> npm install socket.io --save\n\n### 测试和部署\n\n1.  通过发出以下命令启动模拟器：\n\n        PS C:\\node\\chatapp\\WorkerRole1> Start-AzureEmulator -Launch\n\n2.  打开浏览器并导航到 ****http://127.0.0.1**。\n\n3.  当浏览器窗口打开时，输入一个昵称，然后按 Enter。这样，您就可以以特定昵称发布消息。要测试多用户功能，请使用同一 URL 打开另外的浏览器窗口但输入不同的昵称。\n\n    ![显示来自用户 1 和用户 2 的聊天消息的两个浏览器窗口](./media/cloud-services-nodejs-chat-app-socketio/socketio-8.png)\n\n3.  测试应用程序之后，发出以下命令停止仿真程序：\n\n        PS C:\\node\\chatapp\\WorkerRole1> Stop-AzureEmulator\n\n4.  若要将应用程序部署到 Azure，请使用 **Publish-AzureServiceProject** cmdlet。例如：\n\n        PS C:\\node\\chatapp\\WorkerRole1> Publish-AzureServiceProject -ServiceName mychatapp -Location \"China East\" -Launch\n\n    > [AZURE.IMPORTANT] 确保使用唯一名称，否则发布过程会失败。部署完成后，浏览器将打开并导航到已部署的服务。  \n    \n    如果你收到一条错误，指出导入的发布配置文件中不存在提供的订阅名称，则你必须先为你的订阅下载和导入发布配置文件，然后再部署到 Azure。请参阅[生成 Node.js 应用程序并将其部署到 Azure 云服务](/documentation/articles/cloud-services-nodejs-develop-deploy-app)中的**将应用程序部署到 Azure**部分\n\n    ![显示托管在 Azure 上的服务的浏览器窗口][completed-app]\n\n    > [AZURE.NOTE] 如果你收到一条错误，指出导入的发布配置文件中不存在提供的订阅名称，则你必须先为你的订阅下载和导入发布配置文件，然后再部署到 Azure。请参阅[生成 Node.js 应用程序并将其部署到 Azure 云服务](/documentation/articles/cloud-services-nodejs-develop-deploy-app)中的**将应用程序部署到 Azure**部分\n\n你的应用程序现在即可在 Azure 上运行，并可使用 Socket.IO 在不同客户端之间中继聊天消息。\n\n> [AZURE.NOTE] 为简单起见，此示例仅限于连接到同一实例的用户之间的聊天。这意味着如果云服务创建两个辅助角色实例，用户将只能够与连接到同一辅助角色实例的其他用户聊天。要缩放应用程序以使用多个角色实例，你可以使用像 Service Bus 这样的技术在实例之间共享 Socket.IO 存储状态。有关示例，请参阅 [Azure SDK for Node.js GitHub 存储库的](https://github.com/WindowsAzure/azure-sdk-for-node)中的服务总线队列和主题使用示例。\n\n##后续步骤\n\n在本教程中，你已了解如何创建在 Azure 云服务中托管的基本聊天应用程序。若要了解如何在 Azure 网站中托管此应用程序，请参阅[在 Azure 网站中使用 Socket.IO 生成 Node.js 聊天应用程序][chatwebsite]。\n\n有关详细信息，另请参阅 [Node.js 开发人员中心](/develop/nodejs)。\n\n  [chatwebsite]: /documentation/articles/web-sites-nodejs-chat-app-socketio/\n\n  [Azure SLA]: /support/legal/sla/\n  [Azure SDK for Node.js GitHub repository]: https://github.com/WindowsAzure/azure-sdk-for-node\n  [completed-app]: ./media/cloud-services-nodejs-chat-app-socketio/socketio-10.png\n  [Azure SDK for Node.js]: /develop/nodejs/\n  [Node.js Web Application]: /documentation/articles/cloud-services-nodejs-develop-deploy-app/\n  [Socket.IO GitHub 存储库]: https://github.com/LearnBoost/socket.io/tree/0.9.14\n  [Azure Considerations]: #windowsazureconsiderations\n  [Hosting the Chat Example in a Worker Role]: #hostingthechatexampleinawebrole\n  [Summary and Next Steps]: #summary\n  [powershell-menu]: ./media/cloud-services-nodejs-chat-app-socketio/azure-powershell-start.png\n\n  [chat example]: https://github.com/LearnBoost/socket.io/tree/master/examples/chat\n  [chat-example-view]: ./media/cloud-services-nodejs-chat-app-socketio/socketio-22.png\n  \n  \n  [chat-contents]: ./media/cloud-services-nodejs-chat-app-socketio/socketio-5.png\n  [The-output-of-the-npm-install-command]: ./media/cloud-services-nodejs-chat-app-socketio/socketio-7.png\n  [The output of the Publish-AzureService command]: ./media/cloud-services-nodejs-chat-app-socketio/socketio-9.png\n  \n\n<!---HONumber=Mooncake_0215_2016-->\n"
}