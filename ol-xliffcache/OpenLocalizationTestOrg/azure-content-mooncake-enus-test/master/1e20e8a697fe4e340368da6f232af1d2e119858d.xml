{
  "nodes": [
    {
      "content": "将架构迁移到 SQL 数据仓库 | Azure",
      "pos": [
        26,
        49
      ]
    },
    {
      "content": "有关在开发解决方案时将架构迁移到 Azure SQL 数据仓库的技巧。",
      "pos": [
        67,
        102
      ]
    },
    {
      "content": "将架构迁移到 SQL 数据仓库",
      "pos": [
        326,
        341
      ]
    },
    {
      "content": "以下摘要将帮助你理解 SQL Server 与 SQL 数据仓库之间的差异，以便你迁移数据库。",
      "pos": [
        344,
        391
      ]
    },
    {
      "content": "表功能",
      "pos": [
        397,
        400
      ]
    },
    {
      "content": "SQL 数据仓库不使用或不支持以下功能：",
      "pos": [
        401,
        421
      ]
    },
    {
      "content": "主键",
      "pos": [
        425,
        427
      ]
    },
    {
      "content": "外键",
      "pos": [
        430,
        432
      ]
    },
    {
      "content": "检查约束",
      "pos": [
        435,
        439
      ]
    },
    {
      "content": "唯一约束",
      "pos": [
        442,
        446
      ]
    },
    {
      "content": "唯一索引",
      "pos": [
        449,
        453
      ]
    },
    {
      "content": "计算列",
      "pos": [
        456,
        459
      ]
    },
    {
      "content": "稀疏列",
      "pos": [
        462,
        465
      ]
    },
    {
      "content": "用户定义的类型",
      "pos": [
        468,
        475
      ]
    },
    {
      "content": "索引视图",
      "pos": [
        478,
        482
      ]
    },
    {
      "content": "标识",
      "pos": [
        485,
        487
      ]
    },
    {
      "content": "序列",
      "pos": [
        490,
        492
      ]
    },
    {
      "content": "触发器",
      "pos": [
        495,
        498
      ]
    },
    {
      "content": "同义词",
      "pos": [
        501,
        504
      ]
    },
    {
      "content": "数据类型差异",
      "pos": [
        510,
        516
      ]
    },
    {
      "content": "SQL 数据仓库支持常见的业务数据类型：",
      "pos": [
        517,
        537
      ]
    },
    {
      "content": "bigint",
      "pos": [
        541,
        547
      ]
    },
    {
      "content": "binary",
      "pos": [
        550,
        556
      ]
    },
    {
      "content": "bit",
      "pos": [
        559,
        562
      ]
    },
    {
      "content": "char",
      "pos": [
        565,
        569
      ]
    },
    {
      "content": "日期",
      "pos": [
        572,
        574
      ]
    },
    {
      "content": "datetime",
      "pos": [
        577,
        585
      ]
    },
    {
      "content": "datetime2",
      "pos": [
        588,
        597
      ]
    },
    {
      "content": "datetimeoffset",
      "pos": [
        600,
        614
      ]
    },
    {
      "content": "decimal",
      "pos": [
        617,
        624
      ]
    },
    {
      "content": "float",
      "pos": [
        627,
        632
      ]
    },
    {
      "content": "int",
      "pos": [
        635,
        638
      ]
    },
    {
      "content": "money",
      "pos": [
        641,
        646
      ]
    },
    {
      "content": "nchar",
      "pos": [
        649,
        654
      ]
    },
    {
      "content": "nvarchar",
      "pos": [
        657,
        665
      ]
    },
    {
      "content": "real",
      "pos": [
        668,
        672
      ]
    },
    {
      "content": "smalldatetime",
      "pos": [
        675,
        688
      ]
    },
    {
      "content": "smallint",
      "pos": [
        691,
        699
      ]
    },
    {
      "content": "smallmoney",
      "pos": [
        702,
        712
      ]
    },
    {
      "content": "time",
      "pos": [
        715,
        719
      ]
    },
    {
      "content": "tinyint",
      "pos": [
        722,
        729
      ]
    },
    {
      "content": "varbinary",
      "pos": [
        732,
        741
      ]
    },
    {
      "content": "varchar",
      "pos": [
        744,
        751
      ]
    },
    {
      "content": "你可以使用此查询来识别数据仓库中包含不兼容类型的列：",
      "pos": [
        753,
        779
      ]
    },
    {
      "content": "该查询包含同样不受支持的任何用户定义数据类型。",
      "pos": [
        1693,
        1716
      ]
    },
    {
      "content": "如果你的数据库包含不受支持的类型，请不要担心。下面推荐了一些可以使用的替代方案。",
      "pos": [
        1718,
        1758
      ]
    },
    {
      "content": "不要使用：",
      "pos": [
        1760,
        1765
      ]
    },
    {
      "pos": [
        1769,
        1799
      ],
      "content": "<bpt id=\"p1\">**</bpt>geometry<ept id=\"p1\">**</ept>，而要使用 varbinary 类型"
    },
    {
      "pos": [
        1802,
        1833
      ],
      "content": "<bpt id=\"p1\">**</bpt>geography<ept id=\"p1\">**</ept>，而要使用 varbinary 类型"
    },
    {
      "pos": [
        1836,
        1864
      ],
      "content": "<bpt id=\"p1\">**</bpt>hierarchyid<ept id=\"p1\">**</ept>，此 CLR 类型不受支持"
    },
    {
      "pos": [
        1867,
        1923
      ],
      "content": "<bpt id=\"p1\">**</bpt>image<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>text<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>ntext<ept id=\"p3\">**</ept>，而要使用 varchar/nvarchar（越小越好）"
    },
    {
      "pos": [
        1926,
        1973
      ],
      "content": "<bpt id=\"p1\">**</bpt>nvarchar(max)<ept id=\"p1\">**</ept>，而要使用 nvarchar(4000) 或更小，以改善性能"
    },
    {
      "pos": [
        1976,
        2000
      ],
      "content": "<bpt id=\"p1\">**</bpt>numeric<ept id=\"p1\">**</ept>，而要使用 decimal"
    },
    {
      "pos": [
        2003,
        2032
      ],
      "content": "<bpt id=\"p1\">**</bpt>sql\\_variant<ept id=\"p1\">**</ept>，将列拆分成多个强类型化列"
    },
    {
      "pos": [
        2035,
        2065
      ],
      "content": "<bpt id=\"p1\">**</bpt>sysname<ept id=\"p1\">**</ept>，而要使用 nvarchar(128)"
    },
    {
      "pos": [
        2068,
        2084
      ],
      "content": "<bpt id=\"p1\">**</bpt>table<ept id=\"p1\">**</ept>，转换成暂时表"
    },
    {
      "pos": [
        2087,
        2276
      ],
      "content": "<bpt id=\"p1\">**</bpt>timestamp<ept id=\"p1\">**</ept>，修改代码以使用 datetime2 和 <ph id=\"ph1\">`CURRENT_TIMESTAMP`</ph> 函数。请注意，不能使用 current\\_timestamp 作为默认约束，因为值不会自动更新。如果需要从 timestamp 类型化列迁移 rowversion 值，请对 NOT NULL 或 NULL 行版本值使用 binary(8) 或 varbinary(8)。"
    },
    {
      "pos": [
        2279,
        2324
      ],
      "content": "<bpt id=\"p1\">**</bpt>varchar(max)<ept id=\"p1\">**</ept>，而要使用 varchar(8000) 或更小，以改善性能"
    },
    {
      "pos": [
        2327,
        2365
      ],
      "content": "<bpt id=\"p1\">**</bpt>uniqueidentifier<ept id=\"p1\">**</ept>，而要使用 varbinary(8)"
    },
    {
      "pos": [
        2368,
        2390
      ],
      "content": "<bpt id=\"p1\">**</bpt>用户定义的类型<ept id=\"p1\">**</ept>，尽可能转换回本机类型"
    },
    {
      "pos": [
        2393,
        2440
      ],
      "content": "<bpt id=\"p1\">**</bpt>xml<ept id=\"p1\">**</ept>，而要使用 varchar(8000) 或更小，以改善性能。根据需要在列之间拆分"
    },
    {
      "content": "部分支持：",
      "pos": [
        2442,
        2447
      ]
    },
    {
      "pos": [
        2451,
        2515
      ],
      "content": "默认约束仅支持文本和常量。不支持非确定性表达式或函数，例如 <ph id=\"ph1\">`GETDATE()`</ph> 或 <ph id=\"ph2\">`CURRENT_TIMESTAMP`</ph>。"
    },
    {
      "pos": [
        2519,
        2637
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>定义表，使最大可能的行大小（包括可变长度列的完整长度）不超过 32,767 个字节。虽然定义的行可以包含超过此数据的可变长度数据，但数据将无法插入表。此外，还请限制可变长度列的大小，以便运行查询时有更大的吞吐量。"
    },
    {
      "content": "后续步骤",
      "pos": [
        2642,
        2646
      ]
    },
    {
      "content": "成功将数据库架构迁移到 SQL 数据仓库后，可以继续阅读下列文章之一：",
      "pos": [
        2647,
        2682
      ]
    },
    {
      "content": "迁移数据",
      "pos": [
        2687,
        2691
      ]
    },
    {
      "content": "迁移代码",
      "pos": [
        2698,
        2702
      ]
    },
    {
      "pos": [
        2707,
        2728
      ],
      "content": "有关更多开发技巧，请参阅<bpt id=\"p1\">[</bpt>开发概述<ept id=\"p1\">][]</ept>。"
    }
  ],
  "content": "<properties\n   pageTitle=\"将架构迁移到 SQL 数据仓库 | Azure\"\n   description=\"有关在开发解决方案时将架构迁移到 Azure SQL 数据仓库的技巧。\"\n   services=\"sql-data-warehouse\"\n   documentationCenter=\"NA\"\n   authors=\"jrowlandjones\"\n   manager=\"barbkess\"\n   editor=\"\"/>\n\n<tags\n   ms.service=\"sql-data-warehouse\"\n   ms.date=\"09/22/2015\"\n   wacn.date=\"01/20/2016\"/>\n\n# 将架构迁移到 SQL 数据仓库#\n\n以下摘要将帮助你理解 SQL Server 与 SQL 数据仓库之间的差异，以便你迁移数据库。\n\n### 表功能\nSQL 数据仓库不使用或不支持以下功能：\n\n- 主键\n- 外键\n- 检查约束\n- 唯一约束\n- 唯一索引\n- 计算列\n- 稀疏列\n- 用户定义的类型\n- 索引视图\n- 标识\n- 序列\n- 触发器\n- 同义词\n\n### 数据类型差异\nSQL 数据仓库支持常见的业务数据类型：\n\n- bigint\n- binary\n- bit\n- char\n- 日期\n- datetime\n- datetime2\n- datetimeoffset\n- decimal\n- float\n- int\n- money\n- nchar\n- nvarchar\n- real\n- smalldatetime\n- smallint\n- smallmoney\n- time\n- tinyint\n- varbinary\n- varchar\n\n你可以使用此查询来识别数据仓库中包含不兼容类型的列：\n\n\n    SELECT  t.[name]\n    ,       c.[name]\n    ,       c.[system_type_id]\n    ,       c.[user_type_id]\n    ,       y.[is_user_defined]\n    ,       y.[name]\n    FROM sys.tables  t\n    JOIN sys.columns c on t.[object_id]    = c.[object_id]\n    JOIN sys.types   y on c.[user_type_id] = y.[user_type_id]\n    WHERE y.[name] IN\n                    (   'geography'\n                    ,   'geometry'\n                    ,   'hierarchyid'\n                    ,   'image'\n                    ,   'ntext'\n                    ,   'numeric'\n                    ,   'sql_variant'\n                    ,   'sysname'\n                    ,   'text'\n                    ,   'timestamp'\n                    ,   'uniqueidentifier'\n                    ,   'xml'\n                    )\n    \n    OR  (   y.[name] IN (  'nvarchar','varchar','varbinary')\n        AND c.[max_length] = -1\n        )\n    OR  y.[is_user_defined] = 1\n    ;\n\n\n\n该查询包含同样不受支持的任何用户定义数据类型。\n\n如果你的数据库包含不受支持的类型，请不要担心。下面推荐了一些可以使用的替代方案。\n\n不要使用：\n\n- **geometry**，而要使用 varbinary 类型\n- **geography**，而要使用 varbinary 类型\n- **hierarchyid**，此 CLR 类型不受支持\n- **image**、**text**、**ntext**，而要使用 varchar/nvarchar（越小越好）\n- **nvarchar(max)**，而要使用 nvarchar(4000) 或更小，以改善性能\n- **numeric**，而要使用 decimal\n- **sql\\_variant**，将列拆分成多个强类型化列\n- **sysname**，而要使用 nvarchar(128)\n- **table**，转换成暂时表\n- **timestamp**，修改代码以使用 datetime2 和 `CURRENT_TIMESTAMP` 函数。请注意，不能使用 current\\_timestamp 作为默认约束，因为值不会自动更新。如果需要从 timestamp 类型化列迁移 rowversion 值，请对 NOT NULL 或 NULL 行版本值使用 binary(8) 或 varbinary(8)。\n- **varchar(max)**，而要使用 varchar(8000) 或更小，以改善性能\n- **uniqueidentifier**，而要使用 varbinary(8)\n- **用户定义的类型**，尽可能转换回本机类型\n- **xml**，而要使用 varchar(8000) 或更小，以改善性能。根据需要在列之间拆分\n\n部分支持：\n\n- 默认约束仅支持文本和常量。不支持非确定性表达式或函数，例如 `GETDATE()` 或 `CURRENT_TIMESTAMP`。\n\n> [AZURE.NOTE]定义表，使最大可能的行大小（包括可变长度列的完整长度）不超过 32,767 个字节。虽然定义的行可以包含超过此数据的可变长度数据，但数据将无法插入表。此外，还请限制可变长度列的大小，以便运行查询时有更大的吞吐量。\n\n## 后续步骤\n成功将数据库架构迁移到 SQL 数据仓库后，可以继续阅读下列文章之一：\n\n- [迁移数据][]\n- [迁移代码][]\n\n有关更多开发技巧，请参阅[开发概述][]。\n\n<!--Image references-->\n\n<!--Article references-->\n[迁移代码]: /documentation/articles/sql-data-warehouse-migrate-code\n[迁移数据]: /documentation/articles/sql-data-warehouse-migrate-data\n[开发概述]: /documentation/articles/sql-data-warehouse-overview-develop\n\n<!--MSDN references-->\n\n\n<!--Other Web references-->\n\n<!---HONumber=Mooncake_1207_2015-->\n"
}