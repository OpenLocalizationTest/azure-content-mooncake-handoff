{
  "nodes": [
    {
      "content": "使用 Visual Studio 和 C# 创建 Apache Storm 拓扑 | Azure",
      "pos": [
        26,
        74
      ]
    },
    {
      "content": "了解如何通过使用 HDInsight Tools for Visual Studio 创建一个简单的单词计数拓扑，来以 C# 语言创建一个 Storm 拓扑。",
      "pos": [
        92,
        171
      ]
    },
    {
      "content": "使用 Hadoop Tools for Visual Studio 开发 Apache Storm on HDInsight 的 C# 拓扑",
      "pos": [
        406,
        476
      ]
    },
    {
      "content": "了解如何使用 HDInsight Tools for Visual Studio 创建 C# Storm 拓扑。本教程逐步说明在 Visual Studio 中创建新的 Storm 项目、在本地测试该项目，然后将它部署到 Apache Storm on HDInsight 群集的过程。",
      "pos": [
        478,
        621
      ]
    },
    {
      "content": "你还将学习如何创建使用 C# 和 Java 组件的混合拓扑。",
      "pos": [
        623,
        653
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        657,
        661
      ]
    },
    {
      "content": "下列其中一个版本的 Visual Studio",
      "pos": [
        667,
        690
      ]
    },
    {
      "pos": [
        700,
        786
      ],
      "content": "Visual Studio 2012 <bpt id=\"p1\">[</bpt>Update 4<ept id=\"p1\">](http://www.microsoft.com/download/details.aspx?id=39305)</ept>"
    },
    {
      "pos": [
        796,
        1015
      ],
      "content": "Visual Studio 2013 <bpt id=\"p1\">[</bpt>Update 4<ept id=\"p1\">](http://www.microsoft.com/download/details.aspx?id=44921)</ept> 或 <bpt id=\"p2\">[</bpt>Visual Studio 2013 Community<ept id=\"p2\">](http://download.microsoft.com/download/7/1/B/71BA74D8-B9A0-4E6C-9159-A8335D54437E/vs_community.exe)</ept>"
    },
    {
      "pos": [
        1025,
        1176
      ],
      "content": "Visual Studio 2015 或 <bpt id=\"p1\">[</bpt>Visual Studio 2015 Community<ept id=\"p1\">](http://download.microsoft.com/download/0/B/C/0BC321A4-013F-479C-84E6-4A2F90B11269/vs_community.exe)</ept>"
    },
    {
      "content": "Azure SDK 2.5.1 或更高版本",
      "pos": [
        1182,
        1203
      ]
    },
    {
      "pos": [
        1209,
        1402
      ],
      "content": "HDInsight Tools for Visual Studio - 参阅<bpt id=\"p1\">[</bpt>开始使用 HDInsight Tools for Visual Studio<ept id=\"p1\">](/documentation/articles/hdinsight-hadoop-visual-studio-tools-get-started)</ept> 安装并配置 HDInsight Tools for Visual Studio。"
    },
    {
      "pos": [
        1410,
        1481
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>Visual Studio Express 不支持 HDInsight Tools for Visual Studio"
    },
    {
      "pos": [
        1487,
        1628
      ],
      "content": "Apache Storm on HDInsight 群集：参阅 <bpt id=\"p1\">[</bpt>Apache Storm on HDInsight 入门<ept id=\"p1\">](/documentation/articles/hdinsight-apache-storm-tutorial-get-started)</ept>了解创建群集的步骤。"
    },
    {
      "pos": [
        1636,
        1717
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>HDInsight Tools for Visual Studio 目前只支持 Storm on HDInsight 版本 3.2 群集。"
    },
    {
      "content": "模板",
      "pos": [
        1721,
        1723
      ]
    },
    {
      "content": "HDInsight Tools for Visual Studio 提供以下模板：",
      "pos": [
        1725,
        1766
      ]
    },
    {
      "content": "项目类型",
      "pos": [
        1770,
        1774
      ]
    },
    {
      "content": "演示",
      "pos": [
        1777,
        1779
      ]
    },
    {
      "content": "Storm 应用程序",
      "pos": [
        1817,
        1827
      ]
    },
    {
      "content": "一个空的 Storm 拓扑项目",
      "pos": [
        1830,
        1845
      ]
    },
    {
      "content": "Storm Azure SQL 写入器示例",
      "pos": [
        1850,
        1871
      ]
    },
    {
      "content": "如何写入 Azure SQL 数据库",
      "pos": [
        1874,
        1892
      ]
    },
    {
      "content": "Storm DocumentDB 读取器示例",
      "pos": [
        1897,
        1919
      ]
    },
    {
      "content": "如何从 Azure DocumentDB 读取",
      "pos": [
        1922,
        1945
      ]
    },
    {
      "content": "Storm DocumentDB 写入器示例",
      "pos": [
        1950,
        1972
      ]
    },
    {
      "content": "如何写入 Azure DocumentDB",
      "pos": [
        1975,
        1996
      ]
    },
    {
      "content": "Storm EventHub 读取器示例",
      "pos": [
        2001,
        2021
      ]
    },
    {
      "content": "如何从 Azure 事件中心读取",
      "pos": [
        2024,
        2040
      ]
    },
    {
      "content": "Storm EventHub 写入器示例",
      "pos": [
        2045,
        2065
      ]
    },
    {
      "content": "如何写入 Azure 事件中心",
      "pos": [
        2068,
        2083
      ]
    },
    {
      "content": "Storm HBase 读取器示例",
      "pos": [
        2088,
        2105
      ]
    },
    {
      "content": "如何从 HDInsight 群集上的 HBase 读取",
      "pos": [
        2108,
        2135
      ]
    },
    {
      "content": "Storm HBase 写入器示例",
      "pos": [
        2140,
        2157
      ]
    },
    {
      "content": "如何写入 HDInsight 群集上的 HBase",
      "pos": [
        2160,
        2185
      ]
    },
    {
      "content": "Storm 混合示例",
      "pos": [
        2190,
        2200
      ]
    },
    {
      "content": "如何使用 Java 组件",
      "pos": [
        2203,
        2215
      ]
    },
    {
      "content": "Storm 示例",
      "pos": [
        2220,
        2228
      ]
    },
    {
      "content": "一个基本的单词计数拓扑",
      "pos": [
        2231,
        2242
      ]
    },
    {
      "pos": [
        2248,
        2338
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>HBase 读取器和写入器示例使用 HBase REST API 与 HDInsight 群集上的 HBase 通信，而不是 HBase Java API。"
    },
    {
      "content": "在本文档的步骤中，你将使用基本 Storm 应用程序项目类型来创建新拓扑。",
      "pos": [
        2340,
        2377
      ]
    },
    {
      "content": "创建 C# 拓扑",
      "pos": [
        2381,
        2389
      ]
    },
    {
      "pos": [
        2395,
        2560
      ],
      "content": "如果你尚未安装最新版本的 HDInsight Tools for Visual Studio，请参阅<bpt id=\"p1\">[</bpt>开始使用 HDInsight Tools for Visual Studio<ept id=\"p1\">](/documentation/articles/hdinsight-hadoop-visual-studio-tools-get-started)</ept>。"
    },
    {
      "content": "打开 Visual Studio，选择“文件”&gt;“新建”&gt;“项目”。",
      "pos": [
        2566,
        2600
      ]
    },
    {
      "pos": [
        2606,
        2700
      ],
      "content": "在“新建项目”屏幕中，展开“已安装”&gt;“模板”，然后选择“HDInsight”。从模板列表中，选择“Storm 应用程序”。在屏幕底部，输入 <bpt id=\"p1\">**</bpt>WordCount<ept id=\"p1\">**</ept> 作为应用程序名称。"
    },
    {
      "content": "图像",
      "pos": [
        2708,
        2710
      ]
    },
    {
      "content": "创建项目后，你应该会获得以下文件：",
      "pos": [
        2796,
        2813
      ]
    },
    {
      "pos": [
        2823,
        2884
      ],
      "content": "<bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>：定义项目的拓扑。请注意，默认情况下会创建包含一个 Spout 和一个 Bolt 的默认拓扑。"
    },
    {
      "pos": [
        2894,
        2922
      ],
      "content": "<bpt id=\"p1\">**</bpt>Spout.cs<ept id=\"p1\">**</ept>：发出随机数的示例 Spout。"
    },
    {
      "pos": [
        2932,
        2969
      ],
      "content": "<bpt id=\"p1\">**</bpt>Bolt.cs<ept id=\"p1\">**</ept>：保留 Spout 所发出数字计数的示例 Bolt。"
    },
    {
      "pos": [
        2975,
        3067
      ],
      "content": "在创建项目过程中，将会从 NuGet 下载最新的 <bpt id=\"p1\">[</bpt>SCP.NET 包<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.SCP.Net.SDK/)</ept>。"
    },
    {
      "content": "在以下部分中，你要将此项目修改成基本 WordCount 应用程序。",
      "pos": [
        3069,
        3103
      ]
    },
    {
      "content": "实现 Spout",
      "pos": [
        3108,
        3116
      ]
    },
    {
      "pos": [
        3122,
        3173
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>Spout.cs<ept id=\"p1\">**</ept>。Spout 用于将外部源中的数据读入拓扑。Spout 的主要组件如下："
    },
    {
      "pos": [
        3183,
        3229
      ],
      "content": "<bpt id=\"p1\">**</bpt>NextTuple<ept id=\"p1\">**</ept>：允许 Spout 发出新的 Tuple 时由 Storm 调用。"
    },
    {
      "pos": [
        3239,
        3328
      ],
      "content": "<bpt id=\"p1\">**</bpt>Ack<ept id=\"p1\">**</ept>（仅限事务拓扑）：针对从此 Spout 发送的 Tuple，处理拓扑中其他组件所发起的确认。确认 Tuple 可让 Spout 知道下游组件已成功处理 Tuple。"
    },
    {
      "pos": [
        3338,
        3405
      ],
      "content": "<bpt id=\"p1\">**</bpt>Fail<ept id=\"p1\">**</ept>（仅限事务拓扑）：处理无法处理拓扑中其他组件的 Tuple。这提供机会来重新发出 Tuple，以重新处理 Tuple。"
    },
    {
      "pos": [
        3411,
        3458
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>Spout<ept id=\"p1\">**</ept> 类的内容替换为以下内容。这会创建将句子随机发出到拓扑中的 Spout。"
    },
    {
      "content": "请花片时间阅读注释，以了解此代码的作用。",
      "pos": [
        5565,
        5585
      ]
    },
    {
      "content": "实现 Bolt",
      "pos": [
        5590,
        5597
      ]
    },
    {
      "pos": [
        5603,
        5627
      ],
      "content": "删除项目中的现有 <bpt id=\"p1\">**</bpt>Bolt.cs<ept id=\"p1\">**</ept> 文件。"
    },
    {
      "pos": [
        5633,
        5752
      ],
      "content": "在“解决方案资源管理器”中，右键单击项目，然后依次选择“添加”和“新建项”。从列表中选择“Storm Bolt”，并输入 <bpt id=\"p1\">**</bpt>Splitter.cs<ept id=\"p1\">**</ept> 作为名称。重复此操作，以创建名为 <bpt id=\"p2\">**</bpt>Counter.cs<ept id=\"p2\">**</ept> 的另一个 Bolt。"
    },
    {
      "pos": [
        5762,
        5807
      ],
      "content": "<bpt id=\"p1\">**</bpt>Splitter.cs<ept id=\"p1\">**</ept>：实现 Bolt，以将句子分割成不同的单词并发出一串新单词。"
    },
    {
      "pos": [
        5817,
        5868
      ],
      "content": "<bpt id=\"p1\">**</bpt>Counter.cs<ept id=\"p1\">**</ept>：实现 Bolt，以统计每个单词的数目，并发出一串新单词和每个单词的计数。"
    },
    {
      "pos": [
        5876,
        5934
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>这些 Bolt 只会读取和写入流，但是你也可以使用 Bolt 来与数据库或服务等源进行通信。"
    },
    {
      "pos": [
        5940,
        6050
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>Splitter.cs<ept id=\"p1\">**</ept>。请注意，默认情况下它只包含一个方法 <bpt id=\"p2\">**</bpt>Execute<ept id=\"p2\">**</ept>。在 Bolt 收到要处理的 Tuple 时将调用此方法。此时，你可以读取和处理传入 Tuple，以及发出传出 Tuple。"
    },
    {
      "pos": [
        6056,
        6083
      ],
      "content": "将 <bpt id=\"p1\">**</bpt>Splitter<ept id=\"p1\">**</ept> 类的内容替换为以下代码："
    },
    {
      "content": "请花片时间阅读注释，以了解此代码的作用。",
      "pos": [
        7815,
        7835
      ]
    },
    {
      "pos": [
        7841,
        7872
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>Counter.cs<ept id=\"p1\">**</ept> 并将类内容替换为以下内容。"
    },
    {
      "content": "请花片时间阅读注释，以了解此代码的作用。",
      "pos": [
        10140,
        10160
      ]
    },
    {
      "content": "定义拓扑",
      "pos": [
        10165,
        10169
      ]
    },
    {
      "content": "Spout 和 Bolt 以图形方式排列，用于定义数据在组件之间的流动方式。此拓扑的图形如下：",
      "pos": [
        10171,
        10218
      ]
    },
    {
      "content": "组件的排列方式图像",
      "pos": [
        10222,
        10231
      ]
    },
    {
      "content": "句子从 Spout 发出，并分布到 Splitter Bolt 的实例。Splitter Bolt 将句子分割成多个单词，并将这些单词分布到 Counter Bolt。",
      "pos": [
        10320,
        10404
      ]
    },
    {
      "content": "因为字数会本地保留在 Counter 实例中，所以我们想要确保特定单词流向相同的 Counter Bolt 实例，因此只能有一个实例跟踪特定单词。但是，针对 Splitter Bolt，哪个 Bolt 收到哪个句子并不重要，因此，我们只想要将句子负载平衡到那些实例。",
      "pos": [
        10406,
        10539
      ]
    },
    {
      "pos": [
        10541,
        10651
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>。重要的方法是 <bpt id=\"p2\">**</bpt>ITopologyBuilder<ept id=\"p2\">**</ept>，它用于定义提交到 Storm 的拓扑。将 <bpt id=\"p3\">**</bpt>ITopologyBuilder<ept id=\"p3\">**</ept> 的内容替换为以下代码，以实现上面所述的拓扑。"
    },
    {
      "content": "请花片时间阅读注释，以了解此代码的作用。",
      "pos": [
        12558,
        12578
      ]
    },
    {
      "content": "提交拓扑",
      "pos": [
        12582,
        12586
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击项目，然后选择“提交到 Storm on HDInsight”。",
      "pos": [
        12592,
        12642
      ]
    },
    {
      "pos": [
        12650,
        12728
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果出现提示，请输入你 Azure 订阅的登录凭据。如果你有多个订阅，请登录包含 Storm on HDInsight 群集的订阅。"
    },
    {
      "content": "从“Storm 群集”下拉列表中选择你的 Storm on HDInsight 群集，然后选择“提交”。你可以使用“输出”窗口监视提交是否成功。",
      "pos": [
        12734,
        12806
      ]
    },
    {
      "content": "成功提交拓扑之后，应该会出现群集的“Storm 拓扑”。从列表中选择“WordCount”拓扑，以查看有关正在运行的拓扑的信息。",
      "pos": [
        12812,
        12876
      ]
    },
    {
      "pos": [
        12884,
        12992
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你也可以展开“Azure”&gt;“HDInsight”，右键单击 Storm on HDInsight 群集，然后选择“查看 Storm 拓扑”，来从“服务器资源管理器”查看“Storm 拓扑”。"
    },
    {
      "content": "使用 Spout 或 Bolt 的链接查看有关这些组件的信息。将会针对每个选择的项打开一个新窗口。",
      "pos": [
        12998,
        13047
      ]
    },
    {
      "content": "从“拓扑摘要”视图中，单击“终止”以停止拓扑。",
      "pos": [
        13053,
        13076
      ]
    },
    {
      "pos": [
        13084,
        13125
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>Storm 拓扑会一直运行，直到它被停用，或者群集被删除。"
    },
    {
      "content": "事务拓扑",
      "pos": [
        13129,
        13133
      ]
    },
    {
      "content": "前面的拓扑是非事务性的如果拓扑中某个组件的处理失败，则拓扑内的组件不会实现任何功能来重放消息。针对示例事务拓扑，请创建新项目，然后选择“Storm 示例”作为项目类型。",
      "pos": [
        13135,
        13219
      ]
    },
    {
      "content": "事务拓扑会实现以下项来支持重放数据：",
      "pos": [
        13221,
        13239
      ]
    },
    {
      "pos": [
        13245,
        13336
      ],
      "content": "<bpt id=\"p1\">**</bpt>元数据缓存<ept id=\"p1\">**</ept>：Spout 必须存储所发出数据的元数据，这样，在失败时，就可以检索和发出数据。此示例所发出的数据太少，因此为了重放，每个 Tuple 的原始数据都会存储在字典中。"
    },
    {
      "pos": [
        13342,
        13481
      ],
      "content": "<bpt id=\"p1\">**</bpt>确认<ept id=\"p1\">**</ept>：拓扑中的每个 Bolt 都可以调用 <ph id=\"ph1\">`this.ctx.Ack(tuple)`</ph> 来确认它已成功处理 Tuple。所有 Bolt 都已确认 Tuple 之后，即会调用 Spout 的 <ph id=\"ph2\">`Ack`</ph> 方法。这可让 Spout 删除用于重放的缓存数据，因为已完全处理数据。"
    },
    {
      "pos": [
        13487,
        13597
      ],
      "content": "<bpt id=\"p1\">**</bpt>失败<ept id=\"p1\">**</ept>：每个 Bolt 都可以调用 <ph id=\"ph1\">`this.ctx.Fail(tuple)`</ph>，指出 Tuple 的处理失败。这项失败会传播到 Spout 的 <ph id=\"ph2\">`Fail`</ph> 方法，在其中，可以使用缓存的元数据来重放 Tuple。"
    },
    {
      "pos": [
        13603,
        13703
      ],
      "content": "<bpt id=\"p1\">**</bpt>序列 ID<ept id=\"p1\">**</ept>：发出 Tuple 时，可以指定序列 ID。这应该是标识用于重放（确认和失败）处理的 Tuple 的值。例如，发出数据时，<bpt id=\"p2\">**</bpt>Storm 示例<ept id=\"p2\">**</ept>项目中的 Spout 会使用以下项："
    },
    {
      "pos": [
        13795,
        13885
      ],
      "content": "这会发出包含默认数据流的句子的新 Tuple，以及 <bpt id=\"p1\">**</bpt>lastSeqId<ept id=\"p1\">**</ept> 中所含的序列 ID 值。在此示例中，只会递增每个发出的 Tuple 的 <bpt id=\"p2\">**</bpt>lastSeqId<ept id=\"p2\">**</ept>。"
    },
    {
      "pos": [
        13887,
        13930
      ],
      "content": "如 <bpt id=\"p1\">**</bpt>Storm 示例<ept id=\"p1\">**</ept>项目中所示，在运行时，可以根据配置来设置组件是否为事务性。"
    },
    {
      "content": "混合拓扑",
      "pos": [
        13934,
        13938
      ]
    },
    {
      "content": "HDInsight Tools for Visual Studio 还可用于创建混合拓扑，其中，有些组件是 C#，有些是 Java。",
      "pos": [
        13940,
        14006
      ]
    },
    {
      "content": "针对示例混合拓扑，请创建一个新项目，然后选择“Storm 混合示例”。这会创建完全注释的示例，此示例包含演示以下项的多个拓扑：",
      "pos": [
        14008,
        14071
      ]
    },
    {
      "pos": [
        14077,
        14153
      ],
      "content": "<bpt id=\"p1\">**</bpt>Java Spout<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>C# Bolt<ept id=\"p2\">**</ept>：在 <bpt id=\"p3\">**</bpt>HybridTopology\\_javaSpout\\_csharpBolt<ept id=\"p3\">**</ept> 中定义"
    },
    {
      "pos": [
        14163,
        14216
      ],
      "content": "事务版本在 <bpt id=\"p1\">**</bpt>HybridTopologyTx\\_javaSpout\\_csharpBolt<ept id=\"p1\">**</ept> 中定义"
    },
    {
      "pos": [
        14222,
        14298
      ],
      "content": "<bpt id=\"p1\">**</bpt>C# Spout<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>Java Bolt<ept id=\"p2\">**</ept>：在 <bpt id=\"p3\">**</bpt>HybridTopology\\_csharpSpout\\_javaBolt<ept id=\"p3\">**</ept> 中定义"
    },
    {
      "pos": [
        14308,
        14361
      ],
      "content": "事务版本在 <bpt id=\"p1\">**</bpt>HybridTopologyTx\\_csharpSpout\\_javaBolt<ept id=\"p1\">**</ept> 中定义"
    },
    {
      "pos": [
        14373,
        14424
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此版本还演示了如何使用文本文件中的 clojure 代码作为 Java 组件。"
    },
    {
      "pos": [
        14426,
        14484
      ],
      "content": "若要切换在提交项目时使用的拓扑，只需将 <ph id=\"ph1\">`[Active(true)]`</ph> 语句式移到你要在提交给群集之前使用的拓扑。"
    },
    {
      "pos": [
        14488,
        14552
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在 <bpt id=\"p1\">**</bpt>JavaDependency<ept id=\"p1\">**</ept> 文件夹中，所需的所有 Java 文件都会提供为此项目的一部分。"
    },
    {
      "content": "创建和提交混合拓扑时，需注意以下事项：",
      "pos": [
        14554,
        14573
      ]
    },
    {
      "pos": [
        14579,
        14641
      ],
      "content": "必须使用 <bpt id=\"p1\">**</bpt>JavaComponentConstructor<ept id=\"p1\">**</ept> 创建 Spout 或 Bolt 的 Java 类的新实例"
    },
    {
      "pos": [
        14647,
        14754
      ],
      "content": "应该使用 <bpt id=\"p1\">**</bpt>microsoft.scp.storm.multilang.CustomizedInteropJSONSerializer<ept id=\"p1\">**</ept> 将传入或传出 Java 组件的数据从 Java 对象序列化为 JSON。"
    },
    {
      "content": "将拓扑提交到服务器时，必须使用“其他配置”选项指定“Java 文件路径”。指定的路径应该是包含 JAR 文件的目录，而 JAR 文件包含你的 Java 类",
      "pos": [
        14760,
        14837
      ]
    },
    {
      "content": "Azure 事件中心",
      "pos": [
        14842,
        14852
      ]
    },
    {
      "content": "SCP.Net 版本 0.9.4.203 引入了专用于事件中心 Spout（从事件中心读取的 Java Spout）的新类和方法。 创建采用此 Spout 的拓扑时，请使用以下方法：",
      "pos": [
        14854,
        14945
      ]
    },
    {
      "pos": [
        14951,
        15000
      ],
      "content": "<bpt id=\"p1\">**</bpt>EventHubSpoutConfig<ept id=\"p1\">**</ept> 类：创建一个对象，其中包含 Spout 组件的配置"
    },
    {
      "pos": [
        15006,
        15065
      ],
      "content": "<bpt id=\"p1\">**</bpt>TopologyBuilder.SetEventHubSpout<ept id=\"p1\">**</ept> 方法：将事件中心 Spout 组件添加到拓扑"
    },
    {
      "pos": [
        15069,
        15179
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>相比于其他 Java 组件，尽管这些方法可让你更轻松地使用事件中心 Spout，但你仍然必须使用 CustomizedInteropJSONSerializer 来序列化 Spout 生成的数据。"
    },
    {
      "content": "如何更新 SCP.NET",
      "pos": [
        15183,
        15195
      ]
    },
    {
      "content": "最新版 SCP.NET 支持通过 NuGet 进行包升级。当有新的更新可用时，你会收到升级通知。若要手动检查升级，请执行以下步骤：",
      "pos": [
        15197,
        15262
      ]
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击项目，然后选择“管理 NuGet 包”。",
      "pos": [
        15267,
        15305
      ]
    },
    {
      "content": "从包管理器中选择“更新”。如果有可用的更新，将会列出更新。单击“更新”按钮可让包安装更新。",
      "pos": [
        15310,
        15355
      ]
    },
    {
      "pos": [
        15359,
        15435
      ],
      "content": "<ph id=\"ph1\">[AZURE.IMPORTANT]</ph>如果你的项目是通过一个未使用 NuGet 进行包更新的旧版 SCP.NET 创建的，则你必须执行以下步骤更新到新版本："
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击项目，然后选择“管理 NuGet 包”。",
      "pos": [
        15443,
        15481
      ]
    },
    {
      "pos": [
        15487,
        15535
      ],
      "content": "使用“搜索”字段搜索 <bpt id=\"p1\">**</bpt>Microsoft.SCP.Net.SDK<ept id=\"p1\">**</ept>，然后将其添加到项目中。"
    },
    {
      "content": "故障排除",
      "pos": [
        15539,
        15543
      ]
    },
    {
      "content": "在本地测试拓扑",
      "pos": [
        15548,
        15555
      ]
    },
    {
      "content": "虽然很容易就可以将拓扑部署到群集，但是，在某些情况下，你可能需要在本地测试拓扑。使用以下步骤，在开发环境上本地执行和测试本教程中的示例拓扑。",
      "pos": [
        15557,
        15627
      ]
    },
    {
      "pos": [
        15631,
        15700
      ],
      "content": "<ph id=\"ph1\">[AZURE.WARNING]</ph>本地测试只适用于仅限 C# 的基本拓扑。不应将本地测试用于混合拓扑或用于使用多个流的拓扑，否则你会收到错误。"
    },
    {
      "content": "在“解决方案资源管理器”中，右键单击项目，然后选择“属性”。在项目属性中，将“输出类型”更改为“控制台应用程序”。",
      "pos": [
        15706,
        15763
      ]
    },
    {
      "content": "输出类型",
      "pos": [
        15771,
        15775
      ]
    },
    {
      "pos": [
        15862,
        15903
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>将拓扑部署到群集之前，请记得将“输出类型”更改回“类库”。"
    },
    {
      "pos": [
        15909,
        15990
      ],
      "content": "在“解决方案资源管理器”中，右键单击项目，然后依次选择“添加”&gt;“新建项”。选择“类”，并输入 <bpt id=\"p1\">**</bpt>LocalTest.cs<ept id=\"p1\">**</ept> 作为类名称。最后，单击“添加”。"
    },
    {
      "pos": [
        15996,
        16038
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>LocalTest.cs<ept id=\"p1\">**</ept>，并在顶部添加以下 <bpt id=\"p2\">**</bpt>using<ept id=\"p2\">**</ept> 语句："
    },
    {
      "pos": [
        16074,
        16102
      ],
      "content": "使用以下内容作为 <bpt id=\"p1\">**</bpt>LocalTest<ept id=\"p1\">**</ept> 类的内容："
    },
    {
      "pos": [
        19680,
        19755
      ],
      "content": "花费片刻时间通读代码注释。此代码使用 <bpt id=\"p1\">**</bpt>LocalContext<ept id=\"p1\">**</ept> 在开发环境中运行组件，并将组件之间的数据流保存到本地磁盘驱动器上的文本文件中。"
    },
    {
      "pos": [
        19761,
        19801
      ],
      "content": "打开 <bpt id=\"p1\">**</bpt>Program.cs<ept id=\"p1\">**</ept>，将以下代码添加到 <bpt id=\"p2\">**</bpt>Main<ept id=\"p2\">**</ept> 方法中："
    },
    {
      "pos": [
        20489,
        20573
      ],
      "content": "保存更改，然后单击 <bpt id=\"p1\">**</bpt>F5<ept id=\"p1\">**</ept>，或者选择“调试”&gt;“开始调试”以启动项目。随后应会出现一个控制台窗口，并记录测试进行的状态。出现“测试已完成”后，请按任意键关闭窗口。"
    },
    {
      "pos": [
        20579,
        20787
      ],
      "content": "使用“Windows 资源管理器”找到包含项目的目录，例如，<bpt id=\"p1\">**</bpt>C:\\\\Users&lt;你的用户名&gt;\\\\Documents\\\\Visual Studio 2013\\\\Projects\\\\WordCount\\\\WordCount<ept id=\"p1\">**</ept>。在此目录中打开 Bin，然后单击“调试”。你应会看到运行测试时生成的文本文件：sentences.txt、counter.txt 和 splitter.txt。打开每个文本文件并检查数据。"
    },
    {
      "pos": [
        20795,
        20878
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>字符串数据会保存为这些文件中的十进制值数组。例如，<bpt id=\"p1\">**</bpt>splitter.txt<ept id=\"p1\">**</ept> 文件中的 [[97,103,111]] 是单词“and”。"
    },
    {
      "content": "虽然在本地测试基本字数应用程序相当简单，但是真正的价值在于与外部数据来源进行通信或执行复杂数据分析的复杂拓扑。处理此类项目时，你可能需要在组件中设置断点并逐步运行代码，以找出问题。",
      "pos": [
        20880,
        20970
      ]
    },
    {
      "pos": [
        20974,
        21033
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在部署到 Storm on HDInsight 群集之前，请记得将“项目类型”设置回“类库”。"
    },
    {
      "content": "记录信息",
      "pos": [
        21038,
        21042
      ]
    },
    {
      "pos": [
        21044,
        21099
      ],
      "content": "你可以使用 <ph id=\"ph1\">`Context.Logger`</ph> 轻松记录拓扑组件中的信息。例如，以下代码会创建一个信息日志条目："
    },
    {
      "content": "你可以从“服务器资源管理器”中的“Hadoop 服务日志”查看记录的信息。展开 Storm on HDInsight 群集的条目，然后展开“Hadoop 服务日志”。最后，选择要查看的日志文件。",
      "pos": [
        21150,
        21247
      ]
    },
    {
      "pos": [
        21251,
        21339
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>日志存储在群集使用的 Azure 存储帐户中。如果此订阅与用来登录 Visual Studio 的订阅不同，则必须登录包含存储帐户的订阅才能查看此信息。"
    },
    {
      "content": "查看错误信息",
      "pos": [
        21344,
        21350
      ]
    },
    {
      "content": "若要查看运行中拓扑中所发生的错误，请使用以下步骤：",
      "pos": [
        21352,
        21377
      ]
    },
    {
      "content": "在“服务器资源管理器”中，右键单击 Storm on HDInsight 群集，然后选择“查看 Storm 拓扑”。",
      "pos": [
        21383,
        21441
      ]
    },
    {
      "pos": [
        21447,
        21494
      ],
      "content": "对于 <bpt id=\"p1\">**</bpt>Spout<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>Bolt<ept id=\"p2\">**</ept>，“上一错误”列将包含有关上次发生的错误的信息。"
    },
    {
      "content": "选择发生错误的组件的“Spout ID”或“Bolt ID”。在显示的详细信息页面上，其他错误信息将列在页面底部的“错误”部分中。",
      "pos": [
        21500,
        21565
      ]
    },
    {
      "content": "若要获取详细信息，请从页面的“执行器”部分中选择“端口”，以查看最后几分钟的 Storm 工作进程日志。",
      "pos": [
        21571,
        21623
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        21627,
        21631
      ]
    },
    {
      "pos": [
        21633,
        21812
      ],
      "content": "在了解如何使用 HDInsight Tools for Visual Studio 开发和部署 Storm 拓扑后，请了解如何<bpt id=\"p1\">[</bpt>使用 Storm on HDInsight 从 Azure 事件中心处理事件<ept id=\"p1\">](/documentation/articles/hdinsight-storm-develop-csharp-event-hub-topology)</ept>。"
    },
    {
      "pos": [
        21814,
        21905
      ],
      "content": "有关将流数据拆分为多个流的 C# 拓扑示例，请参阅 <bpt id=\"p1\">[</bpt>C# Storm 示例<ept id=\"p1\">](https://github.com/Blackmist/csharp-storm-example)</ept>。"
    },
    {
      "pos": [
        21907,
        22051
      ],
      "content": "若要了解有关创建 C# 拓扑的详细信息，请访问 <bpt id=\"p1\">[</bpt>SCP.NET GettingStarted.md<ept id=\"p1\">](https://github.com/hdinsight/hdinsight-storm-examples/blob/master/SCPNet-GettingStarted.md)</ept>。"
    },
    {
      "content": "有关 HDInsight 的其他用法和其他 Storm on HDinsight 示例，请参阅以下主题：",
      "pos": [
        22053,
        22105
      ]
    },
    {
      "content": "Apache Storm on HDInsight",
      "pos": [
        22109,
        22134
      ]
    },
    {
      "content": "使用 Apache Storm on HDInsight 部署和监视拓扑",
      "pos": [
        22143,
        22179
      ]
    },
    {
      "content": "Storm on HDInsight 的示例拓扑",
      "pos": [
        22252,
        22276
      ]
    },
    {
      "content": "Apache HDInsight 上的 Hadoop",
      "pos": [
        22339,
        22365
      ]
    },
    {
      "content": "将 Hive 与 HDInsight 上的 Hadoop 配合使用",
      "pos": [
        22374,
        22407
      ]
    },
    {
      "content": "将 Pig 与 HDInsight 上的 Hadoop 配合使用",
      "pos": [
        22459,
        22491
      ]
    },
    {
      "content": "将 MapReduce 与 HDInsight 上的 Hadoop 配合使用",
      "pos": [
        22542,
        22580
      ]
    },
    {
      "content": "Apache HBase on HDInsight",
      "pos": [
        22634,
        22659
      ]
    },
    {
      "content": "HBase on HDInsight 入门",
      "pos": [
        22668,
        22689
      ]
    }
  ],
  "content": "<properties\n   pageTitle=\"使用 Visual Studio 和 C# 创建 Apache Storm 拓扑 | Azure\"\n   description=\"了解如何通过使用 HDInsight Tools for Visual Studio 创建一个简单的单词计数拓扑，来以 C# 语言创建一个 Storm 拓扑。\"\n   services=\"hdinsight\"\n   documentationCenter=\"\"\n   authors=\"Blackmist\"\n   manager=\"paulettm\"\n   editor=\"cgronlun\"\n    tags=\"azure-portal\"/>\n\n<tags\n    ms.service=\"hdinsight\"\n    ms.date=\"12/04/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 使用 Hadoop Tools for Visual Studio 开发 Apache Storm on HDInsight 的 C# 拓扑\n\n了解如何使用 HDInsight Tools for Visual Studio 创建 C# Storm 拓扑。本教程逐步说明在 Visual Studio 中创建新的 Storm 项目、在本地测试该项目，然后将它部署到 Apache Storm on HDInsight 群集的过程。\n\n你还将学习如何创建使用 C# 和 Java 组件的混合拓扑。\n\n##先决条件\n\n-   下列其中一个版本的 Visual Studio\n\n    -   Visual Studio 2012 [Update 4](http://www.microsoft.com/download/details.aspx?id=39305)\n\n    -   Visual Studio 2013 [Update 4](http://www.microsoft.com/download/details.aspx?id=44921) 或 [Visual Studio 2013 Community](http://download.microsoft.com/download/7/1/B/71BA74D8-B9A0-4E6C-9159-A8335D54437E/vs_community.exe)\n\n    -   Visual Studio 2015 或 [Visual Studio 2015 Community](http://download.microsoft.com/download/0/B/C/0BC321A4-013F-479C-84E6-4A2F90B11269/vs_community.exe)\n\n-   Azure SDK 2.5.1 或更高版本\n\n-   HDInsight Tools for Visual Studio - 参阅[开始使用 HDInsight Tools for Visual Studio](/documentation/articles/hdinsight-hadoop-visual-studio-tools-get-started) 安装并配置 HDInsight Tools for Visual Studio。\n\n    > [AZURE.NOTE]Visual Studio Express 不支持 HDInsight Tools for Visual Studio\n\n-   Apache Storm on HDInsight 群集：参阅 [Apache Storm on HDInsight 入门](/documentation/articles/hdinsight-apache-storm-tutorial-get-started)了解创建群集的步骤。\n\n    > [AZURE.NOTE]HDInsight Tools for Visual Studio 目前只支持 Storm on HDInsight 版本 3.2 群集。\n\n##模板\n\nHDInsight Tools for Visual Studio 提供以下模板：\n\n| 项目类型 | 演示 |\n| ------------ | ------------- |\n| Storm 应用程序 | 一个空的 Storm 拓扑项目 |\n| Storm Azure SQL 写入器示例 | 如何写入 Azure SQL 数据库 |\n| Storm DocumentDB 读取器示例 | 如何从 Azure DocumentDB 读取 |\n| Storm DocumentDB 写入器示例 | 如何写入 Azure DocumentDB |\n| Storm EventHub 读取器示例 | 如何从 Azure 事件中心读取 |\n| Storm EventHub 写入器示例 | 如何写入 Azure 事件中心 |\n| Storm HBase 读取器示例 | 如何从 HDInsight 群集上的 HBase 读取 |\n| Storm HBase 写入器示例 | 如何写入 HDInsight 群集上的 HBase |\n| Storm 混合示例 | 如何使用 Java 组件 |\n| Storm 示例 | 一个基本的单词计数拓扑 |\n\n> [AZURE.NOTE]HBase 读取器和写入器示例使用 HBase REST API 与 HDInsight 群集上的 HBase 通信，而不是 HBase Java API。\n\n在本文档的步骤中，你将使用基本 Storm 应用程序项目类型来创建新拓扑。\n\n##创建 C# 拓扑\n\n1.  如果你尚未安装最新版本的 HDInsight Tools for Visual Studio，请参阅[开始使用 HDInsight Tools for Visual Studio](/documentation/articles/hdinsight-hadoop-visual-studio-tools-get-started)。\n\n2.  打开 Visual Studio，选择“文件”>“新建”>“项目”。\n\n3.  在“新建项目”屏幕中，展开“已安装”>“模板”，然后选择“HDInsight”。从模板列表中，选择“Storm 应用程序”。在屏幕底部，输入 **WordCount** 作为应用程序名称。\n\n    ![图像](./media/hdinsight-storm-develop-csharp-visual-studio-topology/new-project.png)\n\n4.  创建项目后，你应该会获得以下文件：\n\n    -   **Program.cs**：定义项目的拓扑。请注意，默认情况下会创建包含一个 Spout 和一个 Bolt 的默认拓扑。\n\n    -   **Spout.cs**：发出随机数的示例 Spout。\n\n    -   **Bolt.cs**：保留 Spout 所发出数字计数的示例 Bolt。\n\n    在创建项目过程中，将会从 NuGet 下载最新的 [SCP.NET 包](https://www.nuget.org/packages/Microsoft.SCP.Net.SDK/)。\n\n在以下部分中，你要将此项目修改成基本 WordCount 应用程序。\n\n###实现 Spout\n\n1.  打开 **Spout.cs**。Spout 用于将外部源中的数据读入拓扑。Spout 的主要组件如下：\n\n    -   **NextTuple**：允许 Spout 发出新的 Tuple 时由 Storm 调用。\n\n    -   **Ack**（仅限事务拓扑）：针对从此 Spout 发送的 Tuple，处理拓扑中其他组件所发起的确认。确认 Tuple 可让 Spout 知道下游组件已成功处理 Tuple。\n\n    -   **Fail**（仅限事务拓扑）：处理无法处理拓扑中其他组件的 Tuple。这提供机会来重新发出 Tuple，以重新处理 Tuple。\n\n2.  将 **Spout** 类的内容替换为以下内容。这会创建将句子随机发出到拓扑中的 Spout。\n\n        private Context ctx;\n        private Random r = new Random();\n        string[] sentences = new string[] {\n            \"the cow jumped over the moon\",\n            \"an apple a day keeps the doctor away\",\n            \"four score and seven years ago\",\n            \"snow white and the seven dwarfs\",\n            \"i am at two with nature\"\n        };\n        \n        \n        public Spout(Context ctx)\n        {\n            // Set the instance context\n            this.ctx = ctx;\n            \n            \n            Context.Logger.Info(\"Generator constructor called\");\n            \n            \n            // Declare Output schema\n            Dictionary<string, List<Type>> outputSchema = new Dictionary<string, List<Type>>();\n            // The schema for the default output stream is\n            // a tuple that contains a string field\n            outputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n            this.ctx.DeclareComponentSchema(new ComponentStreamSchema(null, outputSchema));\n        }\n        \n        \n        // Get an instance of the spout\n        public static Spout Get(Context ctx, Dictionary<string, Object> parms)\n        {\n            return new Spout(ctx);\n        }\n        \n        \n        public void NextTuple(Dictionary<string, Object> parms)\n        {\n            Context.Logger.Info(\"NextTuple enter\");\n            // The sentence to be emitted\n            string sentence;\n            \n            \n            // Get a random sentence\n            sentence = sentences[r.Next(0, sentences.Length - 1)];\n            Context.Logger.Info(\"Emit: {0}\", sentence);\n            // Emit it\n            this.ctx.Emit(new Values(sentence));\n            \n            \n            Context.Logger.Info(\"NextTuple exit\");\n        }\n        \n        \n        public void Ack(long seqId, Dictionary<string, Object> parms)\n        {\n            // Only used for transactional topologies\n        }\n        \n        \n        public void Fail(long seqId, Dictionary<string, Object> parms)\n        {\n            // Only used for transactional topologies\n        }\n\n    请花片时间阅读注释，以了解此代码的作用。\n\n###实现 Bolt\n\n1.  删除项目中的现有 **Bolt.cs** 文件。\n\n2.  在“解决方案资源管理器”中，右键单击项目，然后依次选择“添加”和“新建项”。从列表中选择“Storm Bolt”，并输入 **Splitter.cs** 作为名称。重复此操作，以创建名为 **Counter.cs** 的另一个 Bolt。\n\n    -   **Splitter.cs**：实现 Bolt，以将句子分割成不同的单词并发出一串新单词。\n\n    -   **Counter.cs**：实现 Bolt，以统计每个单词的数目，并发出一串新单词和每个单词的计数。\n\n    > [AZURE.NOTE]这些 Bolt 只会读取和写入流，但是你也可以使用 Bolt 来与数据库或服务等源进行通信。\n\n3.  打开 **Splitter.cs**。请注意，默认情况下它只包含一个方法 **Execute**。在 Bolt 收到要处理的 Tuple 时将调用此方法。此时，你可以读取和处理传入 Tuple，以及发出传出 Tuple。\n\n4.  将 **Splitter** 类的内容替换为以下代码：\n\n        private Context ctx;\n        \n        \n        // Constructor\n        public Splitter(Context ctx)\n        {\n            Context.Logger.Info(\"Splitter constructor called\");\n            this.ctx = ctx;\n            \n            \n            // Declare Input and Output schemas\n            Dictionary<string, List<Type>> inputSchema = new Dictionary<string, List<Type>>();\n            // Input contains a tuple with a string field (the sentence)\n            inputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n            Dictionary<string, List<Type>> outputSchema = new Dictionary<string, List<Type>>();\n            // Outbound contains a tuple with a string field (the word)\n            outputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n            this.ctx.DeclareComponentSchema(new ComponentStreamSchema(inputSchema, outputSchema));\n        }\n        \n        \n        // Get a new instance of the bolt\n        public static Splitter Get(Context ctx, Dictionary<string, Object> parms)\n        {\n            return new Splitter(ctx);\n        }\n        \n        \n        // Called when a new tuple is available\n        public void Execute(SCPTuple tuple)\n        {\n            Context.Logger.Info(\"Execute enter\");\n            \n            \n            // Get the sentence from the tuple\n            string sentence = tuple.GetString(0);\n            // Split at space characters\n            foreach (string word in sentence.Split(' '))\n            {\n                Context.Logger.Info(\"Emit: {0}\", word);\n                //Emit each word\n                this.ctx.Emit(new Values(word));\n            }\n            \n            \n            Context.Logger.Info(\"Execute exit\");\n        }\n\n    请花片时间阅读注释，以了解此代码的作用。\n\n5.  打开 **Counter.cs** 并将类内容替换为以下内容。\n\n        private Context ctx;\n        \n        \n        // Dictionary for holding words and counts\n        private Dictionary<string, int> counts = new Dictionary<string, int>();\n        \n        \n        // Constructor\n        public Counter(Context ctx)\n        {\n            Context.Logger.Info(\"Counter constructor called\");\n            // Set instance context\n            this.ctx = ctx;\n            \n            \n            // Declare Input and Output schemas\n            Dictionary<string, List<Type>> inputSchema = new Dictionary<string, List<Type>>();\n            // A tuple containing a string field - the word\n            inputSchema.Add(\"default\", new List<Type>() { typeof(string) });\n            \n            \n            Dictionary<string, List<Type>> outputSchema = new Dictionary<string, List<Type>>();\n            // A tuple containing a string and integer field - the word and the word count\n            outputSchema.Add(\"default\", new List<Type>() { typeof(string), typeof(int) });\n            this.ctx.DeclareComponentSchema(new ComponentStreamSchema(inputSchema, outputSchema));\n        }\n        \n        \n        // Get a new instance\n        public static Counter Get(Context ctx, Dictionary<string, Object> parms)\n        {\n            return new Counter(ctx);\n        }\n        \n        \n        // Called when a new tuple is available\n        public void Execute(SCPTuple tuple)\n        {\n            Context.Logger.Info(\"Execute enter\");\n            \n            \n            // Get the word from the tuple\n            string word = tuple.GetString(0);\n            // Do we already have an entry for the word in the dictionary?\n            // If no, create one with a count of 0\n            int count = counts.ContainsKey(word) ? counts[word] : 0;\n            // Increment the count\n            count++;\n            // Update the count in the dictionary\n            counts[word] = count;\n            \n            \n            Context.Logger.Info(\"Emit: {0}, count: {1}\", word, count);\n            // Emit the word and count information\n            this.ctx.Emit(Constants.DEFAULT_STREAM_ID, new List<SCPTuple> { tuple }, new Values(word, count));\n            \n            \n            Context.Logger.Info(\"Execute exit\");\n        }\n\n    请花片时间阅读注释，以了解此代码的作用。\n\n###定义拓扑\n\nSpout 和 Bolt 以图形方式排列，用于定义数据在组件之间的流动方式。此拓扑的图形如下：\n\n![组件的排列方式图像](./media/hdinsight-storm-develop-csharp-visual-studio-topology/wordcount-topology.png)\n\n句子从 Spout 发出，并分布到 Splitter Bolt 的实例。Splitter Bolt 将句子分割成多个单词，并将这些单词分布到 Counter Bolt。\n\n因为字数会本地保留在 Counter 实例中，所以我们想要确保特定单词流向相同的 Counter Bolt 实例，因此只能有一个实例跟踪特定单词。但是，针对 Splitter Bolt，哪个 Bolt 收到哪个句子并不重要，因此，我们只想要将句子负载平衡到那些实例。\n\n打开 **Program.cs**。重要的方法是 **ITopologyBuilder**，它用于定义提交到 Storm 的拓扑。将 **ITopologyBuilder** 的内容替换为以下代码，以实现上面所述的拓扑。\n\n    // Create a new topology named 'WordCount'\n    TopologyBuilder topologyBuilder = new TopologyBuilder(\"WordCount\");\n\n    // Add the spout to the topology.\n    // Name the component 'sentences'\n    // Name the field that is emitted as 'sentence'\n    topologyBuilder.SetSpout(\n        \"sentences\",\n        Spout.Get,\n        new Dictionary<string, List<string>>()\n        {\n            {Constants.DEFAULT_STREAM_ID, new List<string>(){\"sentence\"}}\n        },\n        1);\n    // Add the splitter bolt to the topology.\n    // Name the component 'splitter'\n    // Name the field that is emitted 'word'\n    // Use suffleGrouping to distribute incoming tuples\n    //   from the 'sentences' spout across instances\n    //   of the splitter\n    topologyBuilder.SetBolt(\n        \"splitter\",\n        Splitter.Get,\n        new Dictionary<string, List<string>>()\n        {\n            {Constants.DEFAULT_STREAM_ID, new List<string>(){\"word\"}}\n        },\n        1).shuffleGrouping(\"sentences\");\n\n    // Add the counter bolt to the topology.\n    // Name the component 'counter'\n    // Name the fields that are emitted 'word' and 'count'\n    // Use fieldsGrouping to ensure that tuples are routed\n    //   to counter instances based on the contents of field\n    //   position 0 (the word). This could also have been\n    //   List<string>(){\"word\"}.\n    //   This ensures that the word 'jumped', for example, will always\n    //   go to the same instance\n    topologyBuilder.SetBolt(\n        \"counter\",\n        Counter.Get,\n        new Dictionary<string, List<string>>()\n        {\n            {Constants.DEFAULT_STREAM_ID, new List<string>(){\"word\", \"count\"}}\n        },\n        1).fieldsGrouping(\"splitter\", new List<int>() { 0 });\n\n    // Add topology config\n    topologyBuilder.SetTopologyConfig(new Dictionary<string, string>()\n    {\n        {\"topology.kryo.register\",\"[\"[B\"]\"}\n    });\n\n    return topologyBuilder;\n\n请花片时间阅读注释，以了解此代码的作用。\n\n##提交拓扑\n\n1.  在“解决方案资源管理器”中，右键单击项目，然后选择“提交到 Storm on HDInsight”。\n\n    > [AZURE.NOTE]如果出现提示，请输入你 Azure 订阅的登录凭据。如果你有多个订阅，请登录包含 Storm on HDInsight 群集的订阅。\n\n2.  从“Storm 群集”下拉列表中选择你的 Storm on HDInsight 群集，然后选择“提交”。你可以使用“输出”窗口监视提交是否成功。\n\n3.  成功提交拓扑之后，应该会出现群集的“Storm 拓扑”。从列表中选择“WordCount”拓扑，以查看有关正在运行的拓扑的信息。\n\n    > [AZURE.NOTE]你也可以展开“Azure”>“HDInsight”，右键单击 Storm on HDInsight 群集，然后选择“查看 Storm 拓扑”，来从“服务器资源管理器”查看“Storm 拓扑”。\n\n    使用 Spout 或 Bolt 的链接查看有关这些组件的信息。将会针对每个选择的项打开一个新窗口。\n\n4.  从“拓扑摘要”视图中，单击“终止”以停止拓扑。\n\n    > [AZURE.NOTE]Storm 拓扑会一直运行，直到它被停用，或者群集被删除。\n\n##事务拓扑\n\n前面的拓扑是非事务性的如果拓扑中某个组件的处理失败，则拓扑内的组件不会实现任何功能来重放消息。针对示例事务拓扑，请创建新项目，然后选择“Storm 示例”作为项目类型。\n\n事务拓扑会实现以下项来支持重放数据：\n\n-   **元数据缓存**：Spout 必须存储所发出数据的元数据，这样，在失败时，就可以检索和发出数据。此示例所发出的数据太少，因此为了重放，每个 Tuple 的原始数据都会存储在字典中。\n\n-   **确认**：拓扑中的每个 Bolt 都可以调用 `this.ctx.Ack(tuple)` 来确认它已成功处理 Tuple。所有 Bolt 都已确认 Tuple 之后，即会调用 Spout 的 `Ack` 方法。这可让 Spout 删除用于重放的缓存数据，因为已完全处理数据。\n\n-   **失败**：每个 Bolt 都可以调用 `this.ctx.Fail(tuple)`，指出 Tuple 的处理失败。这项失败会传播到 Spout 的 `Fail` 方法，在其中，可以使用缓存的元数据来重放 Tuple。\n\n-   **序列 ID**：发出 Tuple 时，可以指定序列 ID。这应该是标识用于重放（确认和失败）处理的 Tuple 的值。例如，发出数据时，**Storm 示例**项目中的 Spout 会使用以下项：\n\n        this.ctx.Emit(Constants.DEFAULT_STREAM_ID, new Values(sentence), lastSeqId);\n\n    这会发出包含默认数据流的句子的新 Tuple，以及 **lastSeqId** 中所含的序列 ID 值。在此示例中，只会递增每个发出的 Tuple 的 **lastSeqId**。\n\n如 **Storm 示例**项目中所示，在运行时，可以根据配置来设置组件是否为事务性。\n\n##混合拓扑\n\nHDInsight Tools for Visual Studio 还可用于创建混合拓扑，其中，有些组件是 C#，有些是 Java。\n\n针对示例混合拓扑，请创建一个新项目，然后选择“Storm 混合示例”。这会创建完全注释的示例，此示例包含演示以下项的多个拓扑：\n\n-   **Java Spout** 和 **C# Bolt**：在 **HybridTopology\\_javaSpout\\_csharpBolt** 中定义\n\n    -   事务版本在 **HybridTopologyTx\\_javaSpout\\_csharpBolt** 中定义\n\n-   **C# Spout** 和 **Java Bolt**：在 **HybridTopology\\_csharpSpout\\_javaBolt** 中定义\n\n    -   事务版本在 **HybridTopologyTx\\_csharpSpout\\_javaBolt** 中定义\n\n        > [AZURE.NOTE]此版本还演示了如何使用文本文件中的 clojure 代码作为 Java 组件。\n\n若要切换在提交项目时使用的拓扑，只需将 `[Active(true)]` 语句式移到你要在提交给群集之前使用的拓扑。\n\n> [AZURE.NOTE]在 **JavaDependency** 文件夹中，所需的所有 Java 文件都会提供为此项目的一部分。\n\n创建和提交混合拓扑时，需注意以下事项：\n\n-   必须使用 **JavaComponentConstructor** 创建 Spout 或 Bolt 的 Java 类的新实例\n\n-   应该使用 **microsoft.scp.storm.multilang.CustomizedInteropJSONSerializer** 将传入或传出 Java 组件的数据从 Java 对象序列化为 JSON。\n\n-   将拓扑提交到服务器时，必须使用“其他配置”选项指定“Java 文件路径”。指定的路径应该是包含 JAR 文件的目录，而 JAR 文件包含你的 Java 类\n\n###Azure 事件中心\n\nSCP.Net 版本 0.9.4.203 引入了专用于事件中心 Spout（从事件中心读取的 Java Spout）的新类和方法。 创建采用此 Spout 的拓扑时，请使用以下方法：\n\n-   **EventHubSpoutConfig** 类：创建一个对象，其中包含 Spout 组件的配置\n\n-   **TopologyBuilder.SetEventHubSpout** 方法：将事件中心 Spout 组件添加到拓扑\n\n> [AZURE.NOTE]相比于其他 Java 组件，尽管这些方法可让你更轻松地使用事件中心 Spout，但你仍然必须使用 CustomizedInteropJSONSerializer 来序列化 Spout 生成的数据。\n\n##如何更新 SCP.NET\n\n最新版 SCP.NET 支持通过 NuGet 进行包升级。当有新的更新可用时，你会收到升级通知。若要手动检查升级，请执行以下步骤：\n\n1. 在“解决方案资源管理器”中，右键单击项目，然后选择“管理 NuGet 包”。\n\n2. 从包管理器中选择“更新”。如果有可用的更新，将会列出更新。单击“更新”按钮可让包安装更新。\n\n> [AZURE.IMPORTANT]如果你的项目是通过一个未使用 NuGet 进行包更新的旧版 SCP.NET 创建的，则你必须执行以下步骤更新到新版本：\n>\n> 1. 在“解决方案资源管理器”中，右键单击项目，然后选择“管理 NuGet 包”。\n> 2. 使用“搜索”字段搜索 **Microsoft.SCP.Net.SDK**，然后将其添加到项目中。\n\n##故障排除\n\n###在本地测试拓扑\n\n虽然很容易就可以将拓扑部署到群集，但是，在某些情况下，你可能需要在本地测试拓扑。使用以下步骤，在开发环境上本地执行和测试本教程中的示例拓扑。\n\n> [AZURE.WARNING]本地测试只适用于仅限 C# 的基本拓扑。不应将本地测试用于混合拓扑或用于使用多个流的拓扑，否则你会收到错误。\n\n1.  在“解决方案资源管理器”中，右键单击项目，然后选择“属性”。在项目属性中，将“输出类型”更改为“控制台应用程序”。\n\n    ![输出类型](./media/hdinsight-storm-develop-csharp-visual-studio-topology/outputtype.png)\n\n    > [AZURE.NOTE]将拓扑部署到群集之前，请记得将“输出类型”更改回“类库”。\n\n2.  在“解决方案资源管理器”中，右键单击项目，然后依次选择“添加”>“新建项”。选择“类”，并输入 **LocalTest.cs** 作为类名称。最后，单击“添加”。\n\n3.  打开 **LocalTest.cs**，并在顶部添加以下 **using** 语句：\n\n        using Microsoft.SCP;\n\n4.  使用以下内容作为 **LocalTest** 类的内容：\n\n        // Drives the topology components\n        public void RunTestCase()\n        {\n            // An empty dictionary for use when creating components\n            Dictionary<string, Object> emptyDictionary = new Dictionary<string, object>();\n            \n            \n            #region Test the spout\n            {\n                Console.WriteLine(\"Starting spout\");\n                // LocalContext is a local-mode context that can be used to initialize\n                // components in the development environment.\n                LocalContext spoutCtx = LocalContext.Get();\n                // Get a new instance of the spout, using the local context\n                Spout sentences = Spout.Get(spoutCtx, emptyDictionary);\n                \n                \n                // Emit 10 tuples\n                for (int i = 0; i < 10; i++)\n                {\n                    sentences.NextTuple(emptyDictionary);\n                }\n                // Use LocalContext to persist the data stream to file\n                spoutCtx.WriteMsgQueueToFile(\"sentences.txt\");\n                Console.WriteLine(\"Spout finished\");\n            }\n            #endregion\n            \n            \n            #region Test the splitter bolt\n            {\n                Console.WriteLine(\"Starting splitter bolt\");\n                // LocalContext is a local-mode context that can be used to initialize\n                // components in the development environment.\n                LocalContext splitterCtx = LocalContext.Get();\n                // Get a new instance of the bolt\n                Splitter splitter = Splitter.Get(splitterCtx, emptyDictionary);\n                \n                \n                // Set the data stream to the data created by the spout\n                splitterCtx.ReadFromFileToMsgQueue(\"sentences.txt\");\n                // Get a batch of tuples from the stream\n                List<SCPTuple> batch = splitterCtx.RecvFromMsgQueue();\n                // Process each tuple in the batch\n                foreach (SCPTuple tuple in batch)\n                {\n                    splitter.Execute(tuple);\n                }\n                // Use LocalContext to persist the data stream to file\n                splitterCtx.WriteMsgQueueToFile(\"splitter.txt\");\n                Console.WriteLine(\"Splitter bolt finished\");\n            }\n            #endregion\n            \n            \n            #region Test the counter bolt\n            {\n                Console.WriteLine(\"Starting counter bolt\");\n                // LocalContext is a local-mode context that can be used to initialize\n                // components in the development environment.\n                LocalContext counterCtx = LocalContext.Get();\n                // Get a new instance of the bolt\n                Counter counter = Counter.Get(counterCtx, emptyDictionary);\n                \n                \n                // Set the data stream to the data created by splitter bolt\n                counterCtx.ReadFromFileToMsgQueue(\"splitter.txt\");\n                // Get a batch of tuples from the stream\n                List<SCPTuple> batch = counterCtx.RecvFromMsgQueue();\n                // Process each tuple in the batch\n                foreach (SCPTuple tuple in batch)\n                {\n                    counter.Execute(tuple);\n                }\n                // Use LocalContext to persist the data stream to file\n                counterCtx.WriteMsgQueueToFile(\"counter.txt\");\n                Console.WriteLine(\"Counter bolt finished\");\n            }\n            #endregion\n        }\n\n    花费片刻时间通读代码注释。此代码使用 **LocalContext** 在开发环境中运行组件，并将组件之间的数据流保存到本地磁盘驱动器上的文本文件中。\n\n5.  打开 **Program.cs**，将以下代码添加到 **Main** 方法中：\n\n        Console.WriteLine(\"Starting tests\");\n        System.Environment.SetEnvironmentVariable(\"microsoft.scp.logPrefix\", \"WordCount-LocalTest\");\n        // Initialize the runtime\n        SCPRuntime.Initialize();\n        \n        \n        //If we are not running under the local context, throw an error\n        if (Context.pluginType != SCPPluginType.SCP_NET_LOCAL)\n        {\n            throw new Exception(string.Format(\"unexpected pluginType: {0}\", Context.pluginType));\n        }\n        // Create test instance\n        LocalTest tests = new LocalTest();\n        // Run tests\n        tests.RunTestCase();\n        Console.WriteLine(\"Tests finished\");\n        Console.ReadKey();\n\n6.  保存更改，然后单击 **F5**，或者选择“调试”>“开始调试”以启动项目。随后应会出现一个控制台窗口，并记录测试进行的状态。出现“测试已完成”后，请按任意键关闭窗口。\n\n7.  使用“Windows 资源管理器”找到包含项目的目录，例如，**C:\\\\Users<你的用户名>\\\\Documents\\\\Visual Studio 2013\\\\Projects\\\\WordCount\\\\WordCount**。在此目录中打开 Bin，然后单击“调试”。你应会看到运行测试时生成的文本文件：sentences.txt、counter.txt 和 splitter.txt。打开每个文本文件并检查数据。\n\n    > [AZURE.NOTE]字符串数据会保存为这些文件中的十进制值数组。例如，**splitter.txt** 文件中的 [[97,103,111]] 是单词“and”。\n\n虽然在本地测试基本字数应用程序相当简单，但是真正的价值在于与外部数据来源进行通信或执行复杂数据分析的复杂拓扑。处理此类项目时，你可能需要在组件中设置断点并逐步运行代码，以找出问题。\n\n> [AZURE.NOTE]在部署到 Storm on HDInsight 群集之前，请记得将“项目类型”设置回“类库”。\n\n###记录信息\n\n你可以使用 `Context.Logger` 轻松记录拓扑组件中的信息。例如，以下代码会创建一个信息日志条目：\n\n\n    Context.Logger.Info(\"Component started\");\n\n\n你可以从“服务器资源管理器”中的“Hadoop 服务日志”查看记录的信息。展开 Storm on HDInsight 群集的条目，然后展开“Hadoop 服务日志”。最后，选择要查看的日志文件。\n\n> [AZURE.NOTE]日志存储在群集使用的 Azure 存储帐户中。如果此订阅与用来登录 Visual Studio 的订阅不同，则必须登录包含存储帐户的订阅才能查看此信息。\n\n###查看错误信息\n\n若要查看运行中拓扑中所发生的错误，请使用以下步骤：\n\n1.  在“服务器资源管理器”中，右键单击 Storm on HDInsight 群集，然后选择“查看 Storm 拓扑”。\n\n2.  对于 **Spout** 和 **Bolt**，“上一错误”列将包含有关上次发生的错误的信息。\n\n3.  选择发生错误的组件的“Spout ID”或“Bolt ID”。在显示的详细信息页面上，其他错误信息将列在页面底部的“错误”部分中。\n\n4.  若要获取详细信息，请从页面的“执行器”部分中选择“端口”，以查看最后几分钟的 Storm 工作进程日志。\n\n##后续步骤\n\n在了解如何使用 HDInsight Tools for Visual Studio 开发和部署 Storm 拓扑后，请了解如何[使用 Storm on HDInsight 从 Azure 事件中心处理事件](/documentation/articles/hdinsight-storm-develop-csharp-event-hub-topology)。\n\n有关将流数据拆分为多个流的 C# 拓扑示例，请参阅 [C# Storm 示例](https://github.com/Blackmist/csharp-storm-example)。\n\n若要了解有关创建 C# 拓扑的详细信息，请访问 [SCP.NET GettingStarted.md](https://github.com/hdinsight/hdinsight-storm-examples/blob/master/SCPNet-GettingStarted.md)。\n\n有关 HDInsight 的其他用法和其他 Storm on HDinsight 示例，请参阅以下主题：\n\n**Apache Storm on HDInsight**\n\n-   [使用 Apache Storm on HDInsight 部署和监视拓扑](/documentation/articles/hdinsight-storm-deploy-monitor-topology)\n\n-   [Storm on HDInsight 的示例拓扑](/documentation/articles/hdinsight-storm-example-topology)\n\n**Apache HDInsight 上的 Hadoop**\n\n-   [将 Hive 与 HDInsight 上的 Hadoop 配合使用](/documentation/articles/hdinsight-use-hive)\n\n-   [将 Pig 与 HDInsight 上的 Hadoop 配合使用](/documentation/articles/hdinsight-use-pig)\n\n-   [将 MapReduce 与 HDInsight 上的 Hadoop 配合使用](/documentation/articles/hdinsight-use-mapreduce)\n\n**Apache HBase on HDInsight**\n\n-   [HBase on HDInsight 入门](/documentation/articles/hdinsight-hbase-tutorial-get-started-v1)\n\n<!---HONumber=82-->"
}