{
  "nodes": [
    {
      "content": "使用 Azure Web Apps 配置 Python",
      "pos": [
        28,
        55
      ]
    },
    {
      "content": "本教程介绍用于在 Azure Web Apps 上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。",
      "pos": [
        75,
        146
      ]
    },
    {
      "content": "使用 Azure Web Apps 配置 Python",
      "pos": [
        388,
        415
      ]
    },
    {
      "pos": [
        417,
        526
      ],
      "content": "本教程介绍用于在 <bpt id=\"p1\">[</bpt>Azure Web Apps<ept id=\"p1\">](/documentation/services/web-sites/)</ept> 上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。"
    },
    {
      "content": "其中描述了 Git 部署的其他功能，如使用 requirements.txt 安装虚拟环境和包。",
      "pos": [
        528,
        576
      ]
    },
    {
      "pos": [
        580,
        638
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"bottle-django-flask\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Bottle、Django 还是 Flask？"
    },
    {
      "content": "Azure 应用商店包含用于 Bottle、Django 和 Flask 框架的模板。如果你正在 Azure 中开发第一个 Web 应用，或者你不熟悉 Git，我们建议你遵循以下教程之一，其中包括用于从 Windows 或 Mac 使用 Git 部署从库构建工作应用程序的分步说明：",
      "pos": [
        640,
        781
      ]
    },
    {
      "content": "使用 Bottle 创建 Web 应用",
      "pos": [
        786,
        805
      ]
    },
    {
      "content": "使用 Django 创建 Web 应用",
      "pos": [
        877,
        896
      ]
    },
    {
      "content": "使用 Flask 创建 Web 应用",
      "pos": [
        968,
        986
      ]
    },
    {
      "pos": [
        1058,
        1122
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"website-creation-on-portal\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 在 Azure 管理门户中创建 Web 应用"
    },
    {
      "content": "本教程使用现有 Azure 订阅以及对 Azure 管理门户的访问权限。",
      "pos": [
        1124,
        1160
      ]
    },
    {
      "pos": [
        1162,
        1277
      ],
      "content": "如果你没有现成的 Web 应用，则可从 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>创建一个。单击左下角的“新建”按钮。将出现一个窗口。依次单击“计算”、“Web 应用”和“快速创建”。"
    },
    {
      "pos": [
        1358,
        1394
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"git-publishing\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> Git 发布"
    },
    {
      "pos": [
        1396,
        1563
      ],
      "content": "按照<bpt id=\"p1\">[</bpt>在 Azure Web 应用中使用 GIT 进行连续部署<ept id=\"p1\">](/documentation/articles/web-sites-publish-source-control)</ept>中的说明为新创建的 Web 应用配置 Git 发布。本教程使用 Git 来创建、管理 Python Web 应用以及将其发布到 Azure Web 应用。"
    },
    {
      "content": "在设置 Git 发布之后，将创建 Git 存储库并使其与你的 Web 应用相关联。将显示该存储库的 URL，并且之后可将其用于将数据从本地开发环境推送到云。若要通过 Git 发布应用程序，请确保还安装了 Git 客户端，并使用提供的说明将你的 Web 应用内容推送到 Azure Web 应用。",
      "pos": [
        1565,
        1712
      ]
    },
    {
      "pos": [
        1717,
        1759
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"application-overview\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> 应用程序概述"
    },
    {
      "content": "在接下来的各节中，将创建以下文件。这些文件应放在 Git 存储库的根目录中。",
      "pos": [
        1761,
        1799
      ]
    },
    {
      "pos": [
        1897,
        1934
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"wsgi-handler\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph> WSGI 处理程序"
    },
    {
      "pos": [
        1936,
        2171
      ],
      "content": "WSGI 是 <bpt id=\"p1\">[</bpt>PEP 3333<ept id=\"p1\">](http://www.python.org/dev/peps/pep-3333/)</ept> 描述的 Python 标准，用于定义 Web 服务器和 Python 之间的接口。它提供了用于使用 Python 编写各种 Web 应用程序和框架的标准化接口。当今常用的 Python Web 框架都使用 WSGI。Azure Web Apps 支持任何此类框架；此外，高级用户甚至可以创作自己的框架，只要自定义处理程序遵循 WSGI 规范准则即可。"
    },
    {
      "pos": [
        2173,
        2202
      ],
      "content": "下面是定义自定义处理程序的 <ph id=\"ph1\">`app.py`</ph> 的一个示例："
    },
    {
      "pos": [
        2632,
        2704
      ],
      "content": "可以使用 <ph id=\"ph1\">`python app.py`</ph> 在本地运行此应用程序，然后在 Web 浏览器中浏览到 <ph id=\"ph2\">`http://localhost:5555`</ph>。"
    },
    {
      "content": "虚拟环境",
      "pos": [
        2710,
        2714
      ]
    },
    {
      "content": "尽管上面的示例应用程序不需要任何外部包，则您的应用程序很可能需要一些外部包。",
      "pos": [
        2716,
        2754
      ]
    },
    {
      "content": "为了帮助管理外部包依赖项，Azure Git 部署支持创建虚拟环境。",
      "pos": [
        2756,
        2790
      ]
    },
    {
      "pos": [
        2792,
        2906
      ],
      "content": "当 Azure 在存储库的根目录中检测到 requirements.txt 文件时，将自动创建名为 <ph id=\"ph1\">`env`</ph> 的虚拟环境。仅在第一次部署进执行此操作，或者在所选的 Python 运行时发生更改后进行任何部署的过程中执行此操作。"
    },
    {
      "content": "您可能需要创建虚拟环境用于开发，但不将其包括在 Git 存储库中。",
      "pos": [
        2908,
        2941
      ]
    },
    {
      "content": "包管理",
      "pos": [
        2947,
        2950
      ]
    },
    {
      "content": "Requirements.txt 中列出的包将使用 pip 自动安装在虚拟环境中。在每次部署时都会发生这种情况，但如果已安装包，则 pip 将跳过安装。",
      "pos": [
        2952,
        3028
      ]
    },
    {
      "pos": [
        3030,
        3052
      ],
      "content": "示例 <ph id=\"ph1\">`requirements.txt`</ph>："
    },
    {
      "content": "Python 版本",
      "pos": [
        3076,
        3085
      ]
    },
    {
      "pos": [
        3196,
        3213
      ],
      "content": "示例 <ph id=\"ph1\">`runtime.txt`</ph>："
    },
    {
      "content": "Web.config",
      "pos": [
        3235,
        3245
      ]
    },
    {
      "content": "需要创建一个 web.config 文件以指定服务器应如何处理请求。",
      "pos": [
        3247,
        3281
      ]
    },
    {
      "content": "请注意，如果在存储库中有一个 Web.x.y 文件，其中 x.y 与所选的 Python 运行时匹配，则 Azure 会自动将相应的文件复制为 web.config。",
      "pos": [
        3283,
        3366
      ]
    },
    {
      "pos": [
        3368,
        3444
      ],
      "content": "以下 web.config 示例依赖于某个虚拟环境代理脚本下（下一节中介绍）。它们与上面的示例 <ph id=\"ph1\">`app.py`</ph> 中所用的 WSGI 处理程序配合使用。"
    },
    {
      "pos": [
        3446,
        3474
      ],
      "content": "Python 2.7 的示例 <ph id=\"ph1\">`web.config`</ph>："
    },
    {
      "pos": [
        5294,
        5322
      ],
      "content": "Python 3.4 的示例 <ph id=\"ph1\">`web.config`</ph>："
    },
    {
      "content": "静态文件将由 Web 服务器直接处理，无需通过 Python 代码，从而可提高性能。",
      "pos": [
        7086,
        7128
      ]
    },
    {
      "pos": [
        7130,
        7259
      ],
      "content": "在上面的示例中，磁盘上的静态文件的位置应与 URL 中的位置匹配。也就是说，对 <ph id=\"ph1\">`http://pythonapp.chinacloudsites.cn/static/site.css`</ph> 的请求将为磁盘上 <ph id=\"ph2\">`\\static\\site.css`</ph> 处的文件服务。"
    },
    {
      "pos": [
        7261,
        7380
      ],
      "content": "<ph id=\"ph1\">`WSGI_ALT_VIRTUALENV_HANDLER`</ph> 是指定 WSGI 处理程序的位置。在上面的示例中，该位置为 <ph id=\"ph2\">`app.wsgi_app`</ph>，因为处理程序是根文件夹中的 <ph id=\"ph3\">`app.py`</ph> 中一个名为 <ph id=\"ph4\">`wsgi_app`</ph> 的函数。"
    },
    {
      "pos": [
        7382,
        7456
      ],
      "content": "可以自定义 <ph id=\"ph1\">`PYTHONPATH`</ph>，但是，如果通过在 requirements.txt 中指定所有依赖项将全部安装在虚拟环境中，则不需要对其更改。"
    },
    {
      "content": "虚拟环境代理",
      "pos": [
        7462,
        7468
      ]
    },
    {
      "content": "使用以下脚本可检索 WSGI 处理程序、激活虚拟环境以及记录错误。该脚本用于一般目的，无需修改即可使用。",
      "pos": [
        7470,
        7522
      ]
    },
    {
      "pos": [
        7524,
        7555
      ],
      "content": "<ph id=\"ph1\">`ptvs_virtualenv_proxy.py`</ph> 的内容："
    },
    {
      "content": "自定义 Git 部署",
      "pos": [
        12179,
        12189
      ]
    },
    {
      "content": "故障排除 - 软件包安装",
      "pos": [
        12307,
        12319
      ]
    },
    {
      "content": "故障排除 - 虚拟环境",
      "pos": [
        12468,
        12479
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        12625,
        12629
      ]
    },
    {
      "pos": [
        12631,
        12676
      ],
      "content": "有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Python 开发人员中心<ept id=\"p1\">](/develop/python/)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"使用 Azure Web Apps 配置 Python\" \n    description=\"本教程介绍用于在 Azure Web Apps 上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。\" \n    services=\"app-service\" \n    documentationCenter=\"python\" \n    tags=\"python\"\n    authors=\"huguesv\" \n    manager=\"wpickett\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"app-service\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"02/26/2016\"/>\n\n\n\n\n# 使用 Azure Web Apps 配置 Python\n\n本教程介绍用于在 [Azure Web Apps](/documentation/services/web-sites/) 上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。\n\n其中描述了 Git 部署的其他功能，如使用 requirements.txt 安装虚拟环境和包。\n\n##<a name=\"bottle-django-flask\"></a> Bottle、Django 还是 Flask？\n\nAzure 应用商店包含用于 Bottle、Django 和 Flask 框架的模板。如果你正在 Azure 中开发第一个 Web 应用，或者你不熟悉 Git，我们建议你遵循以下教程之一，其中包括用于从 Windows 或 Mac 使用 Git 部署从库构建工作应用程序的分步说明：\n\n- [使用 Bottle 创建 Web 应用](/documentation/articles/web-sites-python-create-deploy-bottle-app)\n- [使用 Django 创建 Web 应用](/documentation/articles/web-sites-python-create-deploy-django-app)\n- [使用 Flask 创建 Web 应用](/documentation/articles/web-sites-python-create-deploy-flask-app)\n\n\n##<a name=\"website-creation-on-portal\"></a> 在 Azure 管理门户中创建 Web 应用\n\n本教程使用现有 Azure 订阅以及对 Azure 管理门户的访问权限。\n\n如果你没有现成的 Web 应用，则可从 [Azure 管理门户](https://manage.windowsazure.cn)创建一个。单击左下角的“新建”按钮。将出现一个窗口。依次单击“计算”、“Web 应用”和“快速创建”。\n\n![](./media/web-sites-python-configure/configure-python-create-website.png)\n\n##<a name=\"git-publishing\"></a> Git 发布\n\n按照[在 Azure Web 应用中使用 GIT 进行连续部署](/documentation/articles/web-sites-publish-source-control)中的说明为新创建的 Web 应用配置 Git 发布。本教程使用 Git 来创建、管理 Python Web 应用以及将其发布到 Azure Web 应用。\n\n在设置 Git 发布之后，将创建 Git 存储库并使其与你的 Web 应用相关联。将显示该存储库的 URL，并且之后可将其用于将数据从本地开发环境推送到云。若要通过 Git 发布应用程序，请确保还安装了 Git 客户端，并使用提供的说明将你的 Web 应用内容推送到 Azure Web 应用。\n\n\n##<a name=\"application-overview\"></a> 应用程序概述\n\n在接下来的各节中，将创建以下文件。这些文件应放在 Git 存储库的根目录中。\n\n    app.py\n    requirements.txt\n    runtime.txt\n    web.config\n    ptvs_virtualenv_proxy.py\n\n\n##<a name=\"wsgi-handler\"></a> WSGI 处理程序\n\nWSGI 是 [PEP 3333](http://www.python.org/dev/peps/pep-3333/) 描述的 Python 标准，用于定义 Web 服务器和 Python 之间的接口。它提供了用于使用 Python 编写各种 Web 应用程序和框架的标准化接口。当今常用的 Python Web 框架都使用 WSGI。Azure Web Apps 支持任何此类框架；此外，高级用户甚至可以创作自己的框架，只要自定义处理程序遵循 WSGI 规范准则即可。\n\n下面是定义自定义处理程序的 `app.py` 的一个示例：\n\n    def wsgi_app(environ, start_response):\n        status = '200 OK'\n        response_headers = [('Content-type', 'text/plain')]\n        start_response(status, response_headers)\n        response_body = 'Hello World'\n        yield response_body.encode()\n\n    if __name__ == '__main__':\n        from wsgiref.simple_server import make_server\n\n        httpd = make_server('localhost', 5555, wsgi_app)\n        httpd.serve_forever()\n\n可以使用 `python app.py` 在本地运行此应用程序，然后在 Web 浏览器中浏览到 `http://localhost:5555`。\n\n\n## 虚拟环境\n\n尽管上面的示例应用程序不需要任何外部包，则您的应用程序很可能需要一些外部包。\n\n为了帮助管理外部包依赖项，Azure Git 部署支持创建虚拟环境。\n\n当 Azure 在存储库的根目录中检测到 requirements.txt 文件时，将自动创建名为 `env` 的虚拟环境。仅在第一次部署进执行此操作，或者在所选的 Python 运行时发生更改后进行任何部署的过程中执行此操作。\n\n您可能需要创建虚拟环境用于开发，但不将其包括在 Git 存储库中。\n\n\n## 包管理\n\nRequirements.txt 中列出的包将使用 pip 自动安装在虚拟环境中。在每次部署时都会发生这种情况，但如果已安装包，则 pip 将跳过安装。\n\n示例 `requirements.txt`：\n\n    azure==0.8.4\n\n\n## Python 版本\n\n[AZURE.INCLUDE [web-sites-python-customizing-runtime](../includes/web-sites-python-customizing-runtime.md)]\n\n示例 `runtime.txt`：\n\n    python-2.7\n\n\n## Web.config\n\n需要创建一个 web.config 文件以指定服务器应如何处理请求。\n\n请注意，如果在存储库中有一个 Web.x.y 文件，其中 x.y 与所选的 Python 运行时匹配，则 Azure 会自动将相应的文件复制为 web.config。\n\n以下 web.config 示例依赖于某个虚拟环境代理脚本下（下一节中介绍）。它们与上面的示例 `app.py` 中所用的 WSGI 处理程序配合使用。\n\nPython 2.7 的示例 `web.config`：\n\n    <?xml version=\"1.0\"?>\n    <configuration>\n      <appSettings>\n        <add key=\"WSGI_ALT_VIRTUALENV_HANDLER\" value=\"app.wsgi_app\" />\n        <add key=\"WSGI_ALT_VIRTUALENV_ACTIVATE_THIS\"\n             value=\"D:\\home\\site\\wwwroot\\env\\Scripts\\activate_this.py\" />\n        <add key=\"WSGI_HANDLER\"\n             value=\"ptvs_virtualenv_proxy.get_virtualenv_handler()\" />\n        <add key=\"PYTHONPATH\" value=\"D:\\home\\site\\wwwroot\" />\n      </appSettings>\n      <system.web>\n        <compilation debug=\"true\" targetFramework=\"4.0\" />\n      </system.web>\n      <system.webServer>\n        <modules runAllManagedModulesForAllRequests=\"true\" />\n        <handlers>\n          <remove name=\"Python27_via_FastCGI\" />\n          <remove name=\"Python34_via_FastCGI\" />\n          <add name=\"Python FastCGI\"\n               path=\"handler.fcgi\"\n               verb=\"*\"\n               modules=\"FastCgiModule\"\n               scriptProcessor=\"D:\\Python27\\python.exe|D:\\Python27\\Scripts\\wfastcgi.py\"\n               resourceType=\"Unspecified\"\n               requireAccess=\"Script\" />\n        </handlers>\n        <rewrite>\n          <rules>\n            <rule name=\"Static Files\" stopProcessing=\"true\">\n              <conditions>\n                <add input=\"true\" pattern=\"false\" />\n              </conditions>\n            </rule>\n            <rule name=\"Configure Python\" stopProcessing=\"true\">\n              <match url=\"(.*)\" ignoreCase=\"false\" />\n              <conditions>\n                <add input=\"{REQUEST_URI}\" pattern=\"^/static/.*\" ignoreCase=\"true\" negate=\"true\" />\n              </conditions>\n              <action type=\"Rewrite\"\n                      url=\"handler.fcgi/{R:1}\"\n                      appendQueryString=\"true\" />\n            </rule>\n          </rules>\n        </rewrite>\n      </system.webServer>\n    </configuration>\n\n\nPython 3.4 的示例 `web.config`：\n\n    <?xml version=\"1.0\"?>\n    <configuration>\n      <appSettings>\n        <add key=\"WSGI_ALT_VIRTUALENV_HANDLER\" value=\"app.wsgi_app\" />\n        <add key=\"WSGI_ALT_VIRTUALENV_ACTIVATE_THIS\"\n             value=\"D:\\home\\site\\wwwroot\\env\\Scripts\\python.exe\" />\n        <add key=\"WSGI_HANDLER\"\n             value=\"ptvs_virtualenv_proxy.get_venv_handler()\" />\n        <add key=\"PYTHONPATH\" value=\"D:\\home\\site\\wwwroot\" />\n      </appSettings>\n      <system.web>\n        <compilation debug=\"true\" targetFramework=\"4.0\" />\n      </system.web>\n      <system.webServer>\n        <modules runAllManagedModulesForAllRequests=\"true\" />\n        <handlers>\n          <remove name=\"Python27_via_FastCGI\" />\n          <remove name=\"Python34_via_FastCGI\" />\n          <add name=\"Python FastCGI\"\n               path=\"handler.fcgi\"\n               verb=\"*\"\n               modules=\"FastCgiModule\"\n               scriptProcessor=\"D:\\Python34\\python.exe|D:\\Python34\\Scripts\\wfastcgi.py\"\n               resourceType=\"Unspecified\"\n               requireAccess=\"Script\" />\n        </handlers>\n        <rewrite>\n          <rules>\n            <rule name=\"Static Files\" stopProcessing=\"true\">\n              <conditions>\n                <add input=\"true\" pattern=\"false\" />\n              </conditions>\n            </rule>\n            <rule name=\"Configure Python\" stopProcessing=\"true\">\n              <match url=\"(.*)\" ignoreCase=\"false\" />\n              <conditions>\n                <add input=\"{REQUEST_URI}\" pattern=\"^/static/.*\" ignoreCase=\"true\" negate=\"true\" />\n              </conditions>\n              <action type=\"Rewrite\" url=\"handler.fcgi/{R:1}\" appendQueryString=\"true\" />\n            </rule>\n          </rules>\n        </rewrite>\n      </system.webServer>\n    </configuration>\n\n\n静态文件将由 Web 服务器直接处理，无需通过 Python 代码，从而可提高性能。\n\n在上面的示例中，磁盘上的静态文件的位置应与 URL 中的位置匹配。也就是说，对 `http://pythonapp.chinacloudsites.cn/static/site.css` 的请求将为磁盘上 `\\static\\site.css` 处的文件服务。\n\n`WSGI_ALT_VIRTUALENV_HANDLER` 是指定 WSGI 处理程序的位置。在上面的示例中，该位置为 `app.wsgi_app`，因为处理程序是根文件夹中的 `app.py` 中一个名为 `wsgi_app` 的函数。\n\n可以自定义 `PYTHONPATH`，但是，如果通过在 requirements.txt 中指定所有依赖项将全部安装在虚拟环境中，则不需要对其更改。\n\n\n## 虚拟环境代理\n\n使用以下脚本可检索 WSGI 处理程序、激活虚拟环境以及记录错误。该脚本用于一般目的，无需修改即可使用。\n\n`ptvs_virtualenv_proxy.py` 的内容：\n\n     # ############################################################################\n     #\n     # Copyright (c) Microsoft Corporation. \n     #\n     # This source code is subject to terms and conditions of the Apache License, Version 2.0. A \n     # copy of the license can be found in the License.html file at the root of this distribution. If \n     # you cannot locate the Apache License, Version 2.0, please send an email to \n     # vspython@microsoft.com. By using this source code in any fashion, you are agreeing to be bound \n     # by the terms of the Apache License, Version 2.0.\n     #\n     # You must not remove this notice, or any other, from this software.\n     #\n     # ###########################################################################\n\n    import datetime\n    import os\n    import sys\n    import traceback\n\n    if sys.version_info[0] == 3:\n        def to_str(value):\n            return value.decode(sys.getfilesystemencoding())\n\n        def execfile(path, global_dict):\n            \"\"\"Execute a file\"\"\"\n            with open(path, 'r') as f:\n                code = f.read()\n            code = code.replace('\\r\\n', '\\n') + '\\n'\n            exec(code, global_dict)\n    else:\n        def to_str(value):\n            return value.encode(sys.getfilesystemencoding())\n\n    def log(txt):\n        \"\"\"Logs fatal errors to a log file if WSGI_LOG env var is defined\"\"\"\n        log_file = os.environ.get('WSGI_LOG')\n        if log_file:\n            f = open(log_file, 'a+')\n            try:\n                f.write('%s: %s' % (datetime.datetime.now(), txt))\n            finally:\n                f.close()\n\n    ptvsd_secret = os.getenv('WSGI_PTVSD_SECRET')\n    if ptvsd_secret:\n        log('Enabling ptvsd ...\\n')\n        try:\n            import ptvsd\n            try:\n                ptvsd.enable_attach(ptvsd_secret)\n                log('ptvsd enabled.\\n')\n            except: \n                log('ptvsd.enable_attach failed\\n')\n        except ImportError:\n            log('error importing ptvsd.\\n');\n\n    def get_wsgi_handler(handler_name):\n        if not handler_name:\n            raise Exception('WSGI_ALT_VIRTUALENV_HANDLER env var must be set')\n    \n        if not isinstance(handler_name, str):\n            handler_name = to_str(handler_name)\n    \n        module_name, _, callable_name = handler_name.rpartition('.')\n        should_call = callable_name.endswith('()')\n        callable_name = callable_name[:-2] if should_call else callable_name\n        name_list = [(callable_name, should_call)]\n        handler = None\n        last_tb = ''\n\n        while module_name:\n            try:\n                handler = __import__(module_name, fromlist=[name_list[0][0]])\n                last_tb = ''\n                for name, should_call in name_list:\n                    handler = getattr(handler, name)\n                    if should_call:\n                        handler = handler()\n                break\n            except ImportError:\n                module_name, _, callable_name = module_name.rpartition('.')\n                should_call = callable_name.endswith('()')\n                callable_name = callable_name[:-2] if should_call else callable_name\n                name_list.insert(0, (callable_name, should_call))\n                handler = None\n                last_tb = ': ' + traceback.format_exc()\n    \n        if handler is None:\n            raise ValueError('\"%s\" could not be imported%s' % (handler_name, last_tb))\n    \n        return handler\n\n    activate_this = os.getenv('WSGI_ALT_VIRTUALENV_ACTIVATE_THIS')\n    if not activate_this:\n        raise Exception('WSGI_ALT_VIRTUALENV_ACTIVATE_THIS is not set')\n\n    def get_virtualenv_handler():\n        log('Activating virtualenv with %s\\n' % activate_this)\n        execfile(activate_this, dict(__file__=activate_this))\n\n        log('Getting handler %s\\n' % os.getenv('WSGI_ALT_VIRTUALENV_HANDLER'))\n        handler = get_wsgi_handler(os.getenv('WSGI_ALT_VIRTUALENV_HANDLER'))\n        log('Got handler: %r\\n' % handler)\n        return handler\n\n    def get_venv_handler():\n        log('Activating venv with executable at %s\\n' % activate_this)\n        import site\n        sys.executable = activate_this\n        old_sys_path, sys.path = sys.path, []\n    \n        site.main()\n    \n        sys.path.insert(0, '')\n        for item in old_sys_path:\n            if item not in sys.path:\n                sys.path.append(item)\n\n        log('Getting handler %s\\n' % os.getenv('WSGI_ALT_VIRTUALENV_HANDLER'))\n        handler = get_wsgi_handler(os.getenv('WSGI_ALT_VIRTUALENV_HANDLER'))\n        log('Got handler: %r\\n' % handler)\n        return handler\n\n\n## 自定义 Git 部署\n\n[AZURE.INCLUDE [web-sites-python-customizing-runtime](../includes/web-sites-python-customizing-deployment.md)]\n\n\n## 故障排除 - 软件包安装\n\n[AZURE.INCLUDE [web-sites-python-troubleshooting-package-installation](../includes/web-sites-python-troubleshooting-package-installation.md)]\n\n\n## 故障排除 - 虚拟环境\n\n[AZURE.INCLUDE [web-sites-python-troubleshooting-virtual-environment](../includes/web-sites-python-troubleshooting-virtual-environment.md)]\n\n## 后续步骤\n\n有关详细信息，请参阅 [Python 开发人员中心](/develop/python/)。\n\n<!---HONumber=Mooncake_0215_2016-->"
}