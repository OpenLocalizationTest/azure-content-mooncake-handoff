{
  "nodes": [
    {
      "content": "使用媒体服务 .NET SDK 管理资产和相关的实体",
      "pos": [
        29,
        55
      ]
    },
    {
      "content": "了解如何使用适用于 .NET 的媒体服务 SDK 管理资产和相关的实体。",
      "pos": [
        75,
        111
      ]
    },
    {
      "content": "使用媒体服务 .NET SDK 管理资产和相关的实体",
      "pos": [
        332,
        358
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        363,
        379
      ]
    },
    {
      "content": ".NET",
      "pos": [
        383,
        387
      ]
    },
    {
      "content": "REST",
      "pos": [
        455,
        459
      ]
    },
    {
      "content": "本主题演示了如何完成以下媒体服务管理任务：",
      "pos": [
        524,
        545
      ]
    },
    {
      "content": "获取资产引用",
      "pos": [
        550,
        556
      ]
    },
    {
      "content": "获取作业引用",
      "pos": [
        587,
        593
      ]
    },
    {
      "content": "列出所有资产",
      "pos": [
        621,
        627
      ]
    },
    {
      "content": "列出作业和资产",
      "pos": [
        651,
        658
      ]
    },
    {
      "content": "列出所有访问策略",
      "pos": [
        687,
        695
      ]
    },
    {
      "content": "列出所有定位符",
      "pos": [
        728,
        735
      ]
    },
    {
      "content": "枚举大型实体集合",
      "pos": [
        760,
        768
      ]
    },
    {
      "content": "删除资产",
      "pos": [
        772,
        776
      ]
    },
    {
      "content": "删除作业",
      "pos": [
        800,
        804
      ]
    },
    {
      "content": "删除访问策略",
      "pos": [
        825,
        831
      ]
    },
    {
      "content": "先决条件",
      "pos": [
        863,
        867
      ]
    },
    {
      "pos": [
        870,
        937
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>设置你的环境<ept id=\"p1\">](/documentation/articles/media-services-set-up-computer)</ept>"
    },
    {
      "pos": [
        941,
        982
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Get-an-asset-reference\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>获取资产引用"
    },
    {
      "content": "一个常见的任务是获取对媒体服务中某个现有资产的引用。以下代码示例演示了如何根据资产 ID，从服务器上下文对象上的资产集合中获取资产引用。",
      "pos": [
        984,
        1052
      ]
    },
    {
      "content": "以下代码示例使用 Linq 查询来获取对现有 IAsset 对象的引用。",
      "pos": [
        1053,
        1089
      ]
    },
    {
      "pos": [
        1450,
        1488
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Get-a-job-reference\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>获取作业引用"
    },
    {
      "content": "处理媒体服务代码中的任务时，通常需要根据 ID 获取对现有作业的引用。以下代码示例演示了如何获取对作业集合中某个 IJob 对象的引用。警告：开始长时运行的编码作业时，你可能需要获取作业引用，并且需要检查线程上的作业状态。在这种情况下，当方法从某个线程返回时，你需要检索对作业的刷新引用。",
      "pos": [
        1490,
        1634
      ]
    },
    {
      "pos": [
        2010,
        2044
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"List-all-assets\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>列出所有资产"
    },
    {
      "content": "随着存储空间中的资产数量的增长，这对列出你的资产很有用。以下代码示例演示了如何循环访问服务器上下文对象上的资产集合。对于每个资产，该代码示例还会将其一些属性值写入控制台。例如，每个资产可以包含多个媒体文件。代码示例会写出与每个资产关联的所有文件。",
      "pos": [
        2046,
        2169
      ]
    },
    {
      "pos": [
        3535,
        3575
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"List-jobs-and-assets\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>列出作业和资产"
    },
    {
      "content": "在媒体服务中列出资产及其关联作业是一项重要的相关任务。以下代码示例演示了如何列出每个 IJob 对象，然后，针对每个作业，它会显示作业的相关属性、所有相关的任务、所有输入资产和所有输出资产。本示例中的代码对各种其他任务也有所帮助。例如，如果想要列出你先前运行的一个或多个编码作业的输出资产，本代码将演示如何访问输出资产。如果拥有对某个输出资产的引用，你可以通过下载或提供 URL 的方式，将内容传递给其他用户或应用程序。",
      "pos": [
        3577,
        3787
      ]
    },
    {
      "pos": [
        3789,
        3900
      ],
      "content": "有关传递资产选项的详细信息，请参阅<bpt id=\"p1\">[</bpt>使用适用于 .NET 的媒体服务 SDK 传递资产<ept id=\"p1\">](/documentation/articles/media-services-deliver-streaming-content)</ept>。"
    },
    {
      "pos": [
        6847,
        6892
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"List-all-access-policies\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>列出所有访问策略"
    },
    {
      "content": "在媒体服务中，可以对资产或其文件定义访问策略。访问策略定义文件或资产的权限（访问类型以及持续时间）。在媒体服务代码中，通常通过创建 IAccessPolicy 对象来定义访问策略对象，然后将其与现有资产相关联。然后创建一个 ILocator 对象，它允许你提供对媒体服务中的资产的直接访问。本文档系列随附的 Visual Studio 项目包含几个代码示例，这些代码示例演示如何创建和分配访问策略和定位符到资产。",
      "pos": [
        6894,
        7100
      ]
    },
    {
      "content": "以下代码示例演示如何列出服务器上所有的访问策略，并显示与每个策略关联的权限类型。查看访问策略的另一个有用方法是列出服务器上的所有 ILocator 对象，然后针对每个定位符，可以使用其 AccessPolicy 属性列出其关联的访问策略。",
      "pos": [
        7102,
        7221
      ]
    },
    {
      "pos": [
        7624,
        7661
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"List-All-Locators\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>列出所有定位符"
    },
    {
      "content": "定位符是一个 URL，提供访问资产的直接路径，以及定位符的关联访问策略所定义的对该资产的权限。每个资产都有一个在其定位符属性上与其关联的 ILocator 对象集合。服务器上下文还具有一个包含所有定位符的定位符集合。",
      "pos": [
        7663,
        7771
      ]
    },
    {
      "content": "以下代码示例列出了服务器上的所有定位符。对于每个定位符，它将显示相关资产和访问策略的 ID。它也显示权限的类型、到期日期和访问资产的完整路径。",
      "pos": [
        7773,
        7844
      ]
    },
    {
      "pos": [
        7846,
        8037
      ],
      "content": "请注意，访问资产的定位符路径仅仅是访问资产的基本 URL。若要创建用户或应用程序可以浏览到的单个文件的直接路径，你的代码必须将特定文件路径添加到定位符路径。有关如何进行操作的详细信息，请参阅主题<bpt id=\"p1\">[</bpt>使用适用于 .NET 的媒体服务 SDK 传递资产<ept id=\"p1\">](/documentation/articles/media-services-deliver-streaming-content)</ept>。"
    },
    {
      "content": "枚举大型实体集合",
      "pos": [
        8993,
        9001
      ]
    },
    {
      "content": "查询实体时，一次返回的实体数限制为 1000 个，因为公共 REST v2 将查询结果数限制为 1000 个。枚举大型实体集合时，需要使用 Skip 和 Take。",
      "pos": [
        9003,
        9085
      ]
    },
    {
      "content": "以下函数将循环访问所提供的媒体服务帐户中的所有作业。媒体服务将在作业集合中返回 1000 个作业。该函数使用 Skip 和 Take 来确保枚举所有作业（如果你帐户中的作业超过 1000 个）。",
      "pos": [
        9091,
        9188
      ]
    },
    {
      "pos": [
        10161,
        10193
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Delete-an-asset\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>删除资产"
    },
    {
      "content": "以下示例删除了一个资产。",
      "pos": [
        10195,
        10207
      ]
    },
    {
      "pos": [
        10454,
        10483
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Delete-a-job\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>删除作业"
    },
    {
      "content": "若要删除某一作业，必须检查该作业的状态是否如“状态”属性中所示。可以删除已完成或已取消的作业，但是必须先取消处于其他状态（如已排队、已计划、或处理中）的作业，然后才可以删除这些作业。以下代码示例演示了一种删除作业的方法，通过检查作业状态，然后当作业状态为已完成或取消时，删除作业。此代码取决于本主题中的上一节，用于获取对作业的引用：获取作业引用。",
      "pos": [
        10485,
        10658
      ]
    },
    {
      "pos": [
        12432,
        12474
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"Delete-an-access-policy\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>删除访问策略"
    },
    {
      "content": "以下代码示例演示如何基于策略 ID，获取对访问策略的引用，然后删除该策略。",
      "pos": [
        12476,
        12513
      ]
    }
  ],
  "content": "\n<properties \n    pageTitle=\"使用媒体服务 .NET SDK 管理资产和相关的实体\" \n    description=\"了解如何使用适用于 .NET 的媒体服务 SDK 管理资产和相关的实体。\" \n    authors=\"juliako\" \n    manager=\"dwrede\" \n    editor=\"\" \n    services=\"media-services\" \n    documentationCenter=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/11/2016\"  \n    wacn.date=\"03/17/2016\"/>\n\n\n#使用媒体服务 .NET SDK 管理资产和相关的实体\n\n\n> [AZURE.SELECTOR]\n- [.NET](/documentation/articles/media-services-dotnet-manage-entities)\n- [REST](/documentation/articles/media-services-rest-manage-entities)\n\n\n本主题演示了如何完成以下媒体服务管理任务：\n\n- [获取资产引用](#Get-an-asset-reference) \n- [获取作业引用](#Get-a-job-reference) \n- [列出所有资产](#List-all-assets) \n- [列出作业和资产](#List-jobs-and-assets) \n- [列出所有访问策略](#List-all-access-policies) \n- [列出所有定位符](#List-All-Locators) \n- 枚举大型实体集合\n- [删除资产](#Delete-an-asset) \n- [删除作业](#Delete-a-job) \n- [删除访问策略](#Delete-an-access-policy) \n\n##先决条件 \n\n请参阅[设置你的环境](/documentation/articles/media-services-set-up-computer)\n\n##<a id=\"Get-an-asset-reference\"></a>获取资产引用\n\n一个常见的任务是获取对媒体服务中某个现有资产的引用。以下代码示例演示了如何根据资产 ID，从服务器上下文对象上的资产集合中获取资产引用。\n以下代码示例使用 Linq 查询来获取对现有 IAsset 对象的引用。\n\n    static IAsset GetAsset(string assetId)\n    {\n        // Use a LINQ Select query to get an asset.\n        var assetInstance =\n            from a in _context.Assets\n            where a.Id == assetId\n            select a;\n        // Reference the asset as an IAsset.\n        IAsset asset = assetInstance.FirstOrDefault();\n    \n        return asset;\n    }\n\n##<a id=\"Get-a-job-reference\"></a>获取作业引用\n\n处理媒体服务代码中的任务时，通常需要根据 ID 获取对现有作业的引用。以下代码示例演示了如何获取对作业集合中某个 IJob 对象的引用。警告：开始长时运行的编码作业时，你可能需要获取作业引用，并且需要检查线程上的作业状态。在这种情况下，当方法从某个线程返回时，你需要检索对作业的刷新引用。\n\n    static IJob GetJob(string jobId)\n    {\n        // Use a Linq select query to get an updated \n        // reference by Id. \n        var jobInstance =\n            from j in _context.Jobs\n            where j.Id == jobId\n            select j;\n        // Return the job reference as an Ijob. \n        IJob job = jobInstance.FirstOrDefault();\n    \n        return job;\n    }\n\n##<a id=\"List-all-assets\"></a>列出所有资产\n\n随着存储空间中的资产数量的增长，这对列出你的资产很有用。以下代码示例演示了如何循环访问服务器上下文对象上的资产集合。对于每个资产，该代码示例还会将其一些属性值写入控制台。例如，每个资产可以包含多个媒体文件。代码示例会写出与每个资产关联的所有文件。\n\n\n\n    static void ListAssets()\n    {\n        string waitMessage = \"Building the list. This may take a few \"\n            + \"seconds to a few minutes depending on how many assets \"\n            + \"you have.\"\n            + Environment.NewLine + Environment.NewLine\n            + \"Please wait...\"\n            + Environment.NewLine;\n        Console.Write(waitMessage);\n    \n        // Create a Stringbuilder to store the list that we build. \n        StringBuilder builder = new StringBuilder();\n    \n        foreach (IAsset asset in _context.Assets)\n        {\n            // Display the collection of assets.\n            builder.AppendLine(\"\");\n            builder.AppendLine(\"******ASSET******\");\n            builder.AppendLine(\"Asset ID: \" + asset.Id);\n            builder.AppendLine(\"Name: \" + asset.Name);\n            builder.AppendLine(\"==============\");\n            builder.AppendLine(\"******ASSET FILES******\");\n    \n            // Display the files associated with each asset. \n            foreach (IAssetFile fileItem in asset.AssetFiles)\n            {\n                builder.AppendLine(\"Name: \" + fileItem.Name);\n                builder.AppendLine(\"Size: \" + fileItem.ContentFileSize);\n                builder.AppendLine(\"==============\");\n            }\n        }\n    \n        // Display output in console.\n        Console.Write(builder.ToString());\n    }\n\n##<a id=\"List-jobs-and-assets\"></a>列出作业和资产\n\n在媒体服务中列出资产及其关联作业是一项重要的相关任务。以下代码示例演示了如何列出每个 IJob 对象，然后，针对每个作业，它会显示作业的相关属性、所有相关的任务、所有输入资产和所有输出资产。本示例中的代码对各种其他任务也有所帮助。例如，如果想要列出你先前运行的一个或多个编码作业的输出资产，本代码将演示如何访问输出资产。如果拥有对某个输出资产的引用，你可以通过下载或提供 URL 的方式，将内容传递给其他用户或应用程序。\n\n有关传递资产选项的详细信息，请参阅[使用适用于 .NET 的媒体服务 SDK 传递资产](/documentation/articles/media-services-deliver-streaming-content)。\n\n    // List all jobs on the server, and for each job, also list \n    // all tasks, all input assets, all output assets.\n\n    static void ListJobsAndAssets()\n    {\n        string waitMessage = \"Building the list. This may take a few \"\n            + \"seconds to a few minutes depending on how many assets \"\n            + \"you have.\"\n            + Environment.NewLine + Environment.NewLine\n            + \"Please wait...\"\n            + Environment.NewLine;\n        Console.Write(waitMessage);\n    \n        // Create a Stringbuilder to store the list that we build. \n        StringBuilder builder = new StringBuilder();\n    \n        foreach (IJob job in _context.Jobs)\n        {\n            // Display the collection of jobs on the server.\n            builder.AppendLine(\"\");\n            builder.AppendLine(\"******JOB*******\");\n            builder.AppendLine(\"Job ID: \" + job.Id);\n            builder.AppendLine(\"Name: \" + job.Name);\n            builder.AppendLine(\"State: \" + job.State);\n            builder.AppendLine(\"Order: \" + job.Priority);\n            builder.AppendLine(\"==============\");\n    \n    \n            // For each job, display the associated tasks (a job  \n            // has one or more tasks). \n            builder.AppendLine(\"******TASKS*******\");\n            foreach (ITask task in job.Tasks)\n            {\n                builder.AppendLine(\"Task Id: \" + task.Id);\n                builder.AppendLine(\"Name: \" + task.Name);\n                builder.AppendLine(\"Progress: \" + task.Progress);\n                builder.AppendLine(\"Configuration: \" + task.Configuration);\n                if (task.ErrorDetails != null)\n                {\n                    builder.AppendLine(\"Error: \" + task.ErrorDetails);\n                }\n                builder.AppendLine(\"==============\");\n            }\n    \n            // For each job, display the list of input media assets.\n            builder.AppendLine(\"******JOB INPUT MEDIA ASSETS*******\");\n            foreach (IAsset inputAsset in job.InputMediaAssets)\n            {\n    \n                if (inputAsset != null)\n                {\n                    builder.AppendLine(\"Input Asset Id: \" + inputAsset.Id);\n                    builder.AppendLine(\"Name: \" + inputAsset.Name);\n                    builder.AppendLine(\"==============\");\n                }\n            }\n    \n            // For each job, display the list of output media assets.\n            builder.AppendLine(\"******JOB OUTPUT MEDIA ASSETS*******\");\n            foreach (IAsset theAsset in job.OutputMediaAssets)\n            {\n                if (theAsset != null)\n                {\n                    builder.AppendLine(\"Output Asset Id: \" + theAsset.Id);\n                    builder.AppendLine(\"Name: \" + theAsset.Name);\n                    builder.AppendLine(\"==============\");\n                }\n            }\n    \n        }\n    \n        // Display output in console.\n        Console.Write(builder.ToString());\n    }\n\n##<a id=\"List-all-access-policies\"></a>列出所有访问策略\n\n在媒体服务中，可以对资产或其文件定义访问策略。访问策略定义文件或资产的权限（访问类型以及持续时间）。在媒体服务代码中，通常通过创建 IAccessPolicy 对象来定义访问策略对象，然后将其与现有资产相关联。然后创建一个 ILocator 对象，它允许你提供对媒体服务中的资产的直接访问。本文档系列随附的 Visual Studio 项目包含几个代码示例，这些代码示例演示如何创建和分配访问策略和定位符到资产。\n\n以下代码示例演示如何列出服务器上所有的访问策略，并显示与每个策略关联的权限类型。查看访问策略的另一个有用方法是列出服务器上的所有 ILocator 对象，然后针对每个定位符，可以使用其 AccessPolicy 属性列出其关联的访问策略。\n\n    static void ListAllPolicies()\n    {\n        foreach (IAccessPolicy policy in _context.AccessPolicies)\n        {\n            Console.WriteLine(\"\");\n            Console.WriteLine(\"Name:  \" + policy.Name);\n            Console.WriteLine(\"ID:  \" + policy.Id);\n            Console.WriteLine(\"Permissions: \" + policy.Permissions);\n            Console.WriteLine(\"==============\");\n    \n        }\n    }\n\n##<a id=\"List-All-Locators\"></a>列出所有定位符\n\n定位符是一个 URL，提供访问资产的直接路径，以及定位符的关联访问策略所定义的对该资产的权限。每个资产都有一个在其定位符属性上与其关联的 ILocator 对象集合。服务器上下文还具有一个包含所有定位符的定位符集合。\n\n以下代码示例列出了服务器上的所有定位符。对于每个定位符，它将显示相关资产和访问策略的 ID。它也显示权限的类型、到期日期和访问资产的完整路径。\n\n请注意，访问资产的定位符路径仅仅是访问资产的基本 URL。若要创建用户或应用程序可以浏览到的单个文件的直接路径，你的代码必须将特定文件路径添加到定位符路径。有关如何进行操作的详细信息，请参阅主题[使用适用于 .NET 的媒体服务 SDK 传递资产](/documentation/articles/media-services-deliver-streaming-content)。\n\n    static void ListAllLocators()\n    {\n        foreach (ILocator locator in _context.Locators)\n        {\n            Console.WriteLine(\"***********\");\n            Console.WriteLine(\"Locator Id: \" + locator.Id);\n            Console.WriteLine(\"Locator asset Id: \" + locator.AssetId);\n            Console.WriteLine(\"Locator access policy Id: \" + locator.AccessPolicyId);\n            Console.WriteLine(\"Access policy permissions: \" + locator.AccessPolicy.Permissions);\n            Console.WriteLine(\"Locator expiration: \" + locator.ExpirationDateTime);\n            // The locator path is the base or parent path (with included permissions) to access  \n            // the media content of an asset. To create a full URL to a specific media file, take \n            // the locator path and then append a file name and info as needed.  \n            Console.WriteLine(\"Locator base path: \" + locator.Path);\n            Console.WriteLine(\"\");\n        }\n    }\n\n## 枚举大型实体集合\n\n查询实体时，一次返回的实体数限制为 1000 个，因为公共 REST v2 将查询结果数限制为 1000 个。枚举大型实体集合时，需要使用 Skip 和 Take。\n    \n以下函数将循环访问所提供的媒体服务帐户中的所有作业。媒体服务将在作业集合中返回 1000 个作业。该函数使用 Skip 和 Take 来确保枚举所有作业（如果你帐户中的作业超过 1000 个）。\n    \n    static void ProcessJobs()\n    {\n        try\n        {\n    \n            int skipSize = 0;\n            int batchSize = 1000;\n            int currentBatch = 0;\n    \n            while (true)\n            {\n                // Loop through all Jobs (1000 at a time) in the Media Services account\n                IQueryable _jobsCollectionQuery = _context.Jobs.Skip(skipSize).Take(batchSize);\n                foreach (IJob job in _jobsCollectionQuery)\n                {\n                    currentBatch++;\n                    Console.WriteLine(\"Processing Job Id:\" + job.Id);\n                }\n    \n                if (currentBatch == batchSize)\n                {\n                    skipSize += batchSize;\n                    currentBatch = 0;\n                }\n                else\n                {\n                    break;\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n##<a id=\"Delete-an-asset\"></a>删除资产\n\n以下示例删除了一个资产。\n\n    static void DeleteAsset( IAsset asset)\n    {\n        // delete the asset\n        asset.Delete();\n    \n        // Verify asset deletion\n        if (GetAsset(asset.Id) == null)\n            Console.WriteLine(\"Deleted the Asset\");\n    \n    }\n\n##<a id=\"Delete-a-job\"></a>删除作业\n\n若要删除某一作业，必须检查该作业的状态是否如“状态”属性中所示。可以删除已完成或已取消的作业，但是必须先取消处于其他状态（如已排队、已计划、或处理中）的作业，然后才可以删除这些作业。以下代码示例演示了一种删除作业的方法，通过检查作业状态，然后当作业状态为已完成或取消时，删除作业。此代码取决于本主题中的上一节，用于获取对作业的引用：获取作业引用。\n\n    static void DeleteJob(string jobId)\n    {\n        bool jobDeleted = false;\n    \n        while (!jobDeleted)\n        {\n            // Get an updated job reference.  \n            IJob job = GetJob(jobId);\n    \n            // Check and handle various possible job states. You can \n            // only delete a job whose state is Finished, Error, or Canceled.   \n            // You can cancel jobs that are Queued, Scheduled, or Processing,  \n            // and then delete after they are canceled.\n            switch (job.State)\n            {\n                case JobState.Finished:\n                case JobState.Canceled:\n                case JobState.Error:\n                    // Job errors should already be logged by polling or event \n                    // handling methods such as CheckJobProgress or StateChanged.\n                    // You can also call job.DeleteAsync to do async deletes.\n                    job.Delete();\n                    Console.WriteLine(\"Job has been deleted.\");\n                    jobDeleted = true;\n                    break;\n                case JobState.Canceling:\n                    Console.WriteLine(\"Job is cancelling and will be deleted \"\n                        + \"when finished.\");\n                    Console.WriteLine(\"Wait while job finishes canceling...\");\n                    Thread.Sleep(5000);\n                    break;\n                case JobState.Queued:\n                case JobState.Scheduled:\n                case JobState.Processing:\n                    job.Cancel();\n                    Console.WriteLine(\"Job is scheduled or processing and will \"\n                        + \"be deleted.\");\n                    break;\n                default:\n                    break;\n            }\n    \n        }\n    }\n\n\n##<a id=\"Delete-an-access-policy\"></a>删除访问策略\n\n以下代码示例演示如何基于策略 ID，获取对访问策略的引用，然后删除该策略。\n\n    static void DeleteAccessPolicy(string existingPolicyId)\n    {\n        // To delete a specific access policy, get a reference to the policy.  \n        // based on the policy Id passed to the method.\n        var policyInstance =\n                from p in _context.AccessPolicies\n                where p.Id == existingPolicyId\n                select p;\n        IAccessPolicy policy = policyInstance.FirstOrDefault();\n    \n        policy.Delete();\n    \n    }\n    \n\n<!---HONumber=Mooncake_0307_2016-->"
}