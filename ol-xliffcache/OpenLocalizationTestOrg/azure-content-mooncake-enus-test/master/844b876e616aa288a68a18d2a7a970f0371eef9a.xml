{
  "nodes": [
    {
      "content": "在 Azure 上通过 Linux 运行 Cassandra | Azure",
      "pos": [
        28,
        66
      ]
    },
    {
      "content": "如何使用 Node.js 应用在 Azure 虚拟机上通过 Linux 运行 Cassandra 群集",
      "pos": [
        86,
        137
      ]
    },
    {
      "content": "在 Azure 上将 Cassandra 与 Linux 一起运行以及通过 Node.js 对其进行访问",
      "pos": [
        406,
        458
      ]
    },
    {
      "pos": [
        461,
        547
      ],
      "content": "[AZURE.INCLUDE <bpt id=\"p1\">[</bpt>了解部署模型<ept id=\"p1\">](../includes/learn-about-deployment-models-classic-include.md)</ept>]"
    },
    {
      "content": "概述",
      "pos": [
        552,
        554
      ]
    },
    {
      "content": "Azure 是一种开放式的云平台，该平台运行 Microsoft 软件和非 Microsoft 软件，其中包括：操作系统、应用程序服务器、消息传递中间件，以及 SQL 数据库和 NoSQL 数据库，采用商业模型和开源模型。在包括 Azure 在内的公共云上构建可复原的服务需要针对应用程序服务器和存储层进行仔细的规划和周到的体系结构设计。Cassandra 具有分布式的存储体系结构，这自然有助于构建可用性高的系统，此类系统在发生群集故障时容错性很强。Cassandra 是云级别的 NoSQL 数据库，由 Apache Software Foundation 在 cassandra.apache.org 上进行维护；Cassandra 是以 Java 编写的，因此可以运行在 Windows 和 Linux 平台上。",
      "pos": [
        555,
        915
      ]
    },
    {
      "content": "本文将重点介绍如何在 Ubuntu 上利用 Azure 虚拟机和虚拟网络将 Cassandra 部署为单个和多个数据中心群集。对群集进行部署以实现生产优化型工作负荷不在本文讨论范围之内，因为这要求进行多磁盘节点配置、恰当的环形拓扑设计和数据建模，以便支持所需的复制、数据一致性、吞吐量并满足高可用性要求。",
      "pos": [
        917,
        1069
      ]
    },
    {
      "content": "本文采用基本的方法说明构建 Cassandra 群集过程中涉及的因素，并对 Docker、Chef 或 Puppet 进行了比较，这样一来，基础结构的部署就要简单得多。",
      "pos": [
        1071,
        1155
      ]
    },
    {
      "content": "部署模型",
      "pos": [
        1160,
        1164
      ]
    },
    {
      "content": "Azure 网络允许部署独立的专用群集，并可对这些群集的访问进行限制，从而实现能够进行细化管理的网络安全性。由于本文是介绍 Cassandra 部署基础知识的，因此我们不会重点讲解一致性级别以及如何针对吞吐量来优化存储设计的问题。下面是有关网络要求的列表，针对的是我们的假设性群集：",
      "pos": [
        1166,
        1307
      ]
    },
    {
      "content": "外部系统无法访问 Cassandra 数据库，不管是从 Azure 内部还是外部",
      "pos": [
        1311,
        1351
      ]
    },
    {
      "content": "Cassandra 群集必须位于负载平衡器之后，以便进行 Thrift 通信",
      "pos": [
        1354,
        1392
      ]
    },
    {
      "content": "可以将 Cassandra 节点部署在每个数据中心的两个组中，以便增强群集可用性",
      "pos": [
        1395,
        1435
      ]
    },
    {
      "content": "锁定该群集，使得只有应用程序服务器场可以直接访问数据库",
      "pos": [
        1439,
        1466
      ]
    },
    {
      "content": "除 SSH 之外，没有其他的公共网络终结点",
      "pos": [
        1469,
        1490
      ]
    },
    {
      "content": "每个 Cassandra 节点需要一个固定的内部 IP 地址",
      "pos": [
        1493,
        1523
      ]
    },
    {
      "content": "Cassandra 可以部署到单个或多个 Azure 区域，具体取决于工作负荷的分布式性质。可以使用多区域部署模型通过相同的 Cassandra 基础结构为靠近特定地理位置的最终用户提供服务。Cassandra 的内置节点复制针对源自多个数据中心的多主机写入同步问题，可以为应用程序提供一致性的数据视图。在出现较大范围的 Azure 服务中断的情况下，多区域部署还有助于降低风险。可以调整 Cassandra 的一致性和复制拓扑，这在满足应用程序的不同 RPO 需求方面很有用。",
      "pos": [
        1525,
        1764
      ]
    },
    {
      "content": "单区域部署",
      "pos": [
        1770,
        1775
      ]
    },
    {
      "content": "我们一开始将学习单区域部署，然后再利用所学的知识来创建多区域模型。将使用 Azure 虚拟网络来创建独立的子网，以便满足上述网络安全要求。所描述的单区域部署创建过程使用 Ubuntu 14.04 LTS 和 Cassandra 2.08；不过，可以很容易地对该过程进行调整，使之适用于其他 Linux 变体。以下是单区域部署的部分系统特征。",
      "pos": [
        1776,
        1946
      ]
    },
    {
      "pos": [
        1948,
        2223
      ],
      "content": "<bpt id=\"p1\">**</bpt>高可用性：<ept id=\"p1\">**</ept>图 1 中所示的 Cassandra 节点已部署到两个可用性集，因此这些节点是分布到多个容错域的，可用性很高。VM 被标注了每个可用性集，并已映射到 2 个容错域。Azure 使用容错域这个概念来管理计划外停机（例如，硬件或软件故障），使用升级域（例如，主机或来宾 OS 修补/升级、应用程序升级）这个概念来管理计划内停机。请参阅 <bpt id=\"p2\">[</bpt>Azure 应用程序的灾难恢复和高可用性<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/dn251004.aspx)</ept>，了解容错域和升级域在实现高可用性方面的作用。"
    },
    {
      "content": "单区域部署",
      "pos": [
        2227,
        2232
      ]
    },
    {
      "content": "图 1：单区域部署",
      "pos": [
        2313,
        2322
      ]
    },
    {
      "content": "请注意，在撰写本文的时候，Azure 并不允许将一组 VM 显式映射到特定的容错域；因此，即使采用图 1 所示的部署模型，也极有可能会将所有虚拟机映射到两个容错域，而不是四个容错域。",
      "pos": [
        2324,
        2415
      ]
    },
    {
      "pos": [
        2417,
        2598
      ],
      "content": "<bpt id=\"p1\">**</bpt>对 Thrift 通信进行负载平衡：<ept id=\"p1\">**</ept>Web 服务器中的 Thrift 客户端库通过内部负载平衡器连接到群集。在使用云服务托管 Cassandra 群集的情况下，这需要执行相关过程，以便将内部负载平衡器添加到“数据”子网（参见图 1）。定义好内部负载平衡器以后，每个节点都需要添加进行过负载平衡的终结点，并使用以前定义的负载平衡器名称对负载平衡集进行标注。"
    },
    {
      "pos": [
        2600,
        2685
      ],
      "content": "<bpt id=\"p1\">**</bpt>群集种子：<ept id=\"p1\">**</ept>必须选择可用性最高的节点作为种子，因为新节点需要与种子节点进行通信才能发现群集的拓扑。将会从每个可用性集中选择一个节点作为种子节点，以免出现单节点故障。"
    },
    {
      "pos": [
        2687,
        2994
      ],
      "content": "<bpt id=\"p1\">**</bpt>复制因子和一致性级别：<ept id=\"p1\">**</ept>Cassandra 固有的高可用性和数据耐用性通过复制因子（RF - 存储在群集中的每一行的副本数目）和一致性级别（在将结果返回到调用方之前需要读取/写入的副本数）来表示。复制因子是在创建 KEYSPACE（类似于关系数据库）过程中指定的，而一致性级别则是在发出 CRUD 查询时指定的。有关一致性的详细信息以及进行仲裁计算的公式，请参阅 Cassandra 文档：<bpt id=\"p2\">[</bpt>针对一致性进行配置<ept id=\"p2\">](http://www.datastax.com/documentation/cassandra/2.0/cassandra/dml/dml_config_consistency_c.html)</ept>。"
    },
    {
      "content": "Cassandra 支持两种类型的数据完整性模型 - 一致性和最终一致性；复制因子和一致性级别共同决定了数据是在写操作完成后就表现出一致性，还是最终才表现出一致性。例如，如果指定 QUORUM 作为一致性级别，则只要一致性级别低于需要写入的副本数，就会根据需要写入相应的副本数以满足 QUORUM（例如 1）结果，使得数据最终保持一致。",
      "pos": [
        2996,
        3164
      ]
    },
    {
      "content": "上面显示的 8 节点群集的复制因子为 3，读/写一致性级别为 QUORUM（读取或写入 2 个节点以确保一致性），因此理论上可以承受每个复制组最多丢失 1 个节点的故障，超出此数目应用程序才会注意到故障的存在。这里假定所有密钥空间的读/写请求均已实现良好的平衡。以下是将要用于已部署群集的参数：",
      "pos": [
        3166,
        3313
      ]
    },
    {
      "content": "单区域 Cassandra 群集配置：",
      "pos": [
        3315,
        3334
      ]
    },
    {
      "content": "群集参数",
      "pos": [
        3338,
        3342
      ]
    },
    {
      "content": "值",
      "pos": [
        3345,
        3346
      ]
    },
    {
      "content": "备注",
      "pos": [
        3349,
        3351
      ]
    },
    {
      "content": "节点数 (N)",
      "pos": [
        3396,
        3403
      ]
    },
    {
      "content": "8",
      "pos": [
        3406,
        3407
      ]
    },
    {
      "content": "群集中节点总数",
      "pos": [
        3410,
        3417
      ]
    },
    {
      "content": "复制因子 (RF)",
      "pos": [
        3422,
        3431
      ]
    },
    {
      "content": "3",
      "pos": [
        3434,
        3435
      ]
    },
    {
      "content": "给定行副本数",
      "pos": [
        3440,
        3446
      ]
    },
    {
      "content": "一致性级别（写入）",
      "pos": [
        3451,
        3460
      ]
    },
    {
      "content": "QUORUM [(RF/2) +1) = 2] 公式的结果向下舍入",
      "pos": [
        3463,
        3496
      ]
    },
    {
      "content": "在将响应发送到调用方之前，最多写入 2 个副本；第 3 个副本将采取最终一致性方式写入。",
      "pos": [
        3499,
        3543
      ]
    },
    {
      "content": "一致性级别（读取）",
      "pos": [
        3548,
        3557
      ]
    },
    {
      "content": "QUORUM [(RF/2) +1= 2] 公式结果向下舍入",
      "pos": [
        3560,
        3590
      ]
    },
    {
      "content": "在将响应发送到调用方之前读取 2 个副本。",
      "pos": [
        3593,
        3614
      ]
    },
    {
      "content": "复制策略",
      "pos": [
        3619,
        3623
      ]
    },
    {
      "pos": [
        3626,
        3802
      ],
      "content": "NetworkTopologyStrategy 请参阅 Cassandra 文档中的<bpt id=\"p1\">[</bpt>数据复制<ept id=\"p1\">](http://www.datastax.com/documentation/cassandra/2.0/cassandra/architecture/architectureDataDistributeReplication_c.html)</ept>以了解更多信息"
    },
    {
      "content": "了解部署拓扑，并将副本置于节点上，以便确保最终不会让所有副本位于同一机架上",
      "pos": [
        3805,
        3842
      ]
    },
    {
      "content": "Snitch",
      "pos": [
        3847,
        3853
      ]
    },
    {
      "pos": [
        3856,
        4028
      ],
      "content": "GossipingPropertyFileSnitch 请参阅 Cassandra 文档中的 <bpt id=\"p1\">[</bpt>Snitch<ept id=\"p1\">](http://www.datastax.com/documentation/cassandra/2.0/cassandra/architecture/architectureSnitchesAbout_c.html)</ept> 以获取更多信息"
    },
    {
      "content": "NetworkTopologyStrategy 使用 snitch 这个概念来了解拓扑。在将每个节点映射到数据中心和机架时，使用 GossipingPropertyFileSnitch 可以更好地进行控制。然后，该群集使用 gossip 来传播此信息。相对于 PropertyFileSnitch，此方法在进行动态 IP 设置时要简单得多",
      "pos": [
        4031,
        4200
      ]
    },
    {
      "pos": [
        4205,
        4656
      ],
      "content": "<bpt id=\"p1\">**</bpt>针对 Cassandra 群集的 Azure 注意事项：<ept id=\"p1\">**</ept>Azure 虚拟机功能使用 Azure Blob 存储以确保磁盘持久性；Azure 存储空间为每个磁盘保留 3 个副本以确保高耐用性。这意味着插入 Cassandra 表中的每行数据已存储在 3 个副本中，因此即使复制因子 (RF) 为 1，系统也已考虑到了数据一致性。复制因子为 1 的主要问题是，即使单个 Cassandra 节点发生故障，应用程序也会体验到停机。不过，如果某个节点因 Azure 结构控制器检测到问题（例如，硬件故障、系统软件故障）而关闭，则会使用相同的存储驱动器预配一个新节点来代替旧节点。预配一个新节点来代替旧节点可能需要数分钟的时间。类似地，如果要进行规划好的维护活动（例如来宾 OS 更改、Cassandra 升级和应用程序更改），Azure 结构控制器会在群集中对节点进行滚动升级。滚动升级也会一次关闭数个节点，因此该群集会出现数个分区短暂停机的现象。不过，由于固有的 Azure 存储冗余，数据不会丢失。"
    },
    {
      "pos": [
        4658,
        4912
      ],
      "content": "对于部署到 Azure 但不需要高可用性（例如，约 99.9 的高可用性相当于 8.76 小时/年；有关详细信息，请参阅<bpt id=\"p1\">[</bpt>高可用性<ept id=\"p1\">](http://en.wikipedia.org/wiki/High_availability)</ept>）的系统，你可以在 RF=1 且一致性级别=1 的情况下运行。对于需要高可用性的应用程序，RF=3 且一致性级别=QUORUM 意味着系统可以承受一个节点的一个副本出现停机的情况。RF=1 在传统部署（例如本地部署）中不能使用，因为如果出现磁盘故障之类的问题，就可能导致数据丢失。"
    },
    {
      "content": "多区域部署",
      "pos": [
        4917,
        4922
      ]
    },
    {
      "content": "Cassandra 的上述数据中心感知型复制和一致性模型可以很方便地进行多区域部署，不需任何外部工具。这与传统的关系数据库大不相同，后者在针对多主机写入进行数据库监视设置时可能需要完成相当复杂的操作。在进行多区域设置时使用 Cassandra 适合多种情况，其中包括：",
      "pos": [
        4923,
        5057
      ]
    },
    {
      "pos": [
        5059,
        5277
      ],
      "content": "<bpt id=\"p1\">**</bpt>基于位置远近的部署：<ept id=\"p1\">**</ept>多租户应用程序如果进行了清楚的从租户用户到区域的映射，则适合采用多区域群集，因为后者的延迟较低。例如，适合教育机构使用的学习管理系统可以在中国东部地区和中国北部地区部署分布式群集，为这两个地区的校园提供事务处理和分析服务。数据在读取和写入时可以在本地保持一致，最终会在这两个地区保持一致。此外还有其他示例，例如媒体分发、电子商务等。不管什么示例，只要其服务对象是集中在某个地理区域的用户群，都适合此部署模型。"
    },
    {
      "pos": [
        5279,
        5537
      ],
      "content": "<bpt id=\"p1\">**</bpt>高可用性：<ept id=\"p1\">**</ept>若要实现软硬件的高可用性，冗余很重要；有关详细信息，请参阅“在 Azure 中构建可靠的云系统”。在 Azure 中，若要实现真正的冗余，唯一可靠的方式是部署多区域群集。应用程序可以采用主动-主动或主动-被动模式进行部署。如果某个区域停机，Azure 流量管理器可以将流量重定向到活动区域。对于单区域部署来说，如果可用性为 99.9，则双区域部署可以获得 99.9999 的可用性，通过以下公式进行计算：(1-(1-0.999) * (1-0.999))*100)；有关详细信息，请参阅上面的说明。"
    },
    {
      "pos": [
        5539,
        5799
      ],
      "content": "<bpt id=\"p1\">**</bpt>灾难恢复：<ept id=\"p1\">**</ept>多区域 Cassandra 群集如果设计得当，可以承受灾难性的数据中心中断情况。如果某个区域停机，可以通过部署到其他区域的应用程序为最终用户提供服务。与任何其他业务连续性实施一样，该应用程序必须承受某种程度的数据丢失，因为数据位于异步管道中。不过，与传统数据恢复过程相比，Cassandra 提供的恢复过程要快得多。图 2 显示了典型的多区域部署模型，每个区域有 8 个节点。两个区域互为镜像以确保对称性；实际设计取决于工作负荷类型（例如，是事务性还是分析性）、RPO、RTO、数据一致性和可用性要求。"
    },
    {
      "content": "多区域部署",
      "pos": [
        5803,
        5808
      ]
    },
    {
      "content": "图 2：多区域 Cassandra 部署",
      "pos": [
        5889,
        5909
      ]
    },
    {
      "content": "网络集成",
      "pos": [
        5915,
        5919
      ]
    },
    {
      "content": "部署到专用网络（位于两个区域）的虚拟机组使用 VPN 隧道互相通信。VPN 隧道连接两个在网络部署过程中预配的软件网关。就“Web”和“数据”子网来说，这两个区域有类似的网络体系结构；Azure 网络允许你根据需要创建多个子网，并根据网络安全需要应用 ACL。在设计群集拓扑时，需要考虑数据数据中心之间的通信延迟，以及网络通信的经济影响。",
      "pos": [
        5920,
        6089
      ]
    },
    {
      "content": "进行多数据中心部署时需要考虑的数据一致性",
      "pos": [
        6095,
        6115
      ]
    },
    {
      "content": "进行分布式部署时，需要了解群集拓扑对吞吐量和高可用性的影响。在选择 RF 和一致性级别时，需要确保仲裁不依赖于所有数据中心的可用性。对于需要高一致性的系统来说，如果一致性级别（针对读取和写入）为 LOCAL\\_QUORUM，则可以确保本地读取和写入能够从本地节点得到满足，而数据则会通过异步方式复制到远程数据中心。表 2 汇总了将在后面讲述的多区域群集的配置详细信息。",
      "pos": [
        6116,
        6300
      ]
    },
    {
      "content": "双区域 Cassandra 群集配置",
      "pos": [
        6304,
        6322
      ]
    },
    {
      "content": "群集参数",
      "pos": [
        6329,
        6333
      ]
    },
    {
      "content": "值",
      "pos": [
        6336,
        6337
      ]
    },
    {
      "content": "备注",
      "pos": [
        6340,
        6342
      ]
    },
    {
      "content": "节点数 (N)",
      "pos": [
        6387,
        6394
      ]
    },
    {
      "content": "8 + 8",
      "pos": [
        6397,
        6402
      ]
    },
    {
      "content": "群集中节点总数",
      "pos": [
        6405,
        6412
      ]
    },
    {
      "content": "复制因子 (RF)",
      "pos": [
        6417,
        6426
      ]
    },
    {
      "content": "3",
      "pos": [
        6429,
        6430
      ]
    },
    {
      "content": "给定行副本数",
      "pos": [
        6433,
        6439
      ]
    },
    {
      "content": "一致性级别（写入）",
      "pos": [
        6444,
        6453
      ]
    },
    {
      "content": "LOCAL\\_QUORUM [(sum(RF)/2) +1) = 4] 公式结果向下舍入",
      "pos": [
        6456,
        6500
      ]
    },
    {
      "content": "2 个节点将同步写入第一个数据中心；满足仲裁所需的其余 2 个节点将通过异步方式写入第二个数据中心。",
      "pos": [
        6503,
        6553
      ]
    },
    {
      "content": "一致性级别（读取）",
      "pos": [
        6558,
        6567
      ]
    },
    {
      "content": "LOCAL\\_QUORUM ((RF/2) +1) = 2 公式结果向下舍入",
      "pos": [
        6570,
        6608
      ]
    },
    {
      "content": "读取请求仅从一个区域满足；在将响应发送回客户端之前，读取 2 个节点。",
      "pos": [
        6611,
        6646
      ]
    },
    {
      "content": "复制策略",
      "pos": [
        6651,
        6655
      ]
    },
    {
      "pos": [
        6658,
        6834
      ],
      "content": "NetworkTopologyStrategy 请参阅 Cassandra 文档中的<bpt id=\"p1\">[</bpt>数据复制<ept id=\"p1\">](http://www.datastax.com/documentation/cassandra/2.0/cassandra/architecture/architectureDataDistributeReplication_c.html)</ept>以了解更多信息"
    },
    {
      "content": "了解部署拓扑，并将副本置于节点上，以便确保最终不会让所有副本位于同一机架上",
      "pos": [
        6837,
        6874
      ]
    },
    {
      "content": "Snitch",
      "pos": [
        6879,
        6885
      ]
    },
    {
      "pos": [
        6888,
        7060
      ],
      "content": "GossipingPropertyFileSnitch 请参阅 Cassandra 文档中的 <bpt id=\"p1\">[</bpt>Snitch<ept id=\"p1\">](http://www.datastax.com/documentation/cassandra/2.0/cassandra/architecture/architectureSnitchesAbout_c.html)</ept> 以获取更多信息"
    },
    {
      "content": "NetworkTopologyStrategy 使用 snitch 这个概念来了解拓扑。在将每个节点映射到数据中心和机架时，使用 GossipingPropertyFileSnitch 可以更好地进行控制。然后，该群集使用 gossip 来传播此信息。相对于 PropertyFileSnitch，此方法在进行动态 IP 设置时要简单得多",
      "pos": [
        7063,
        7232
      ]
    },
    {
      "content": "软件配置",
      "pos": [
        7241,
        7245
      ]
    },
    {
      "content": "在部署过程中使用以下软件版本：",
      "pos": [
        7246,
        7261
      ]
    },
    {
      "content": "软件",
      "pos": [
        7279,
        7281
      ]
    },
    {
      "content": "源",
      "pos": [
        7290,
        7291
      ]
    },
    {
      "content": "版本",
      "pos": [
        7300,
        7302
      ]
    },
    {
      "content": "JRE",
      "pos": [
        7321,
        7324
      ]
    },
    {
      "content": "8U5",
      "pos": [
        7443,
        7446
      ]
    },
    {
      "content": "JNA",
      "pos": [
        7465,
        7468
      ]
    },
    {
      "content": "3.2.7",
      "pos": [
        7524,
        7529
      ]
    },
    {
      "content": "Cassandra",
      "pos": [
        7548,
        7557
      ]
    },
    {
      "content": "2.0.8",
      "pos": [
        7678,
        7683
      ]
    },
    {
      "content": "Ubuntu",
      "pos": [
        7702,
        7708
      ]
    },
    {
      "content": "14.04 LTS",
      "pos": [
        7769,
        7778
      ]
    },
    {
      "content": "由于下载 JRE 需要手动接受 Oracle 许可证，为了简化部署，可先将所有必需软件下载到桌面，然后再将其上载到进行群集部署之前需要创建的 Ubuntu 模板映像中。",
      "pos": [
        7799,
        7883
      ]
    },
    {
      "content": "将以上软件下载到本地计算机上某个已知 的下载目录（例如，Windows 上的 %TEMP%/downloads 或者大多数 Linux 分发或 Mac 上的 ~/Downloads）。",
      "pos": [
        7885,
        7977
      ]
    },
    {
      "content": "创建 Ubuntu VM",
      "pos": [
        7983,
        7995
      ]
    },
    {
      "content": "在过程的这个步骤中，我们将使用必备软件创建 Ubuntu 映像，以便重复使用该映像进行多个 Cassandra 节点的预配。",
      "pos": [
        7996,
        8058
      ]
    },
    {
      "content": "步骤 1：生成 SSH 密钥对",
      "pos": [
        8063,
        8078
      ]
    },
    {
      "content": "Azure 在进行配置时需要用 PEM 或 DER 编码的 X509 公钥。按照如何在 Azure 上通过 Linux 使用 SSH（可能为英文页面）上的说明进行操作来生成公/私钥对。如果你打算在 Windows 或 Linux 上将 putty.exe 用作 SSH 客户端，则必须使用 puttygen.exe 将 PEM 编码的 RSA 私钥转换为 PPK 格式。可在以上网页中找到有关此操作的说明。",
      "pos": [
        8079,
        8282
      ]
    },
    {
      "content": "步骤 2：创建 Ubuntu 模板 VM",
      "pos": [
        8288,
        8308
      ]
    },
    {
      "content": "若要创建模板 VM，请登录到 Azure 管理门户并按以下顺序操作：依次单击“新建”、“计算”、“虚拟机”、“从库中”、“Ubuntu”、“Ubuntu Server 14.04 LTS”，然后单击右键头。有关介绍如何创建 Linux VM 的教程，请参阅创建运行 Linux 的虚拟机（可能为英文页面）。",
      "pos": [
        8309,
        8462
      ]
    },
    {
      "content": "在“虚拟机配置”屏幕 #1 中输入以下信息：",
      "pos": [
        8464,
        8486
      ]
    },
    {
      "content": "字段名称",
      "pos": [
        8504,
        8508
      ]
    },
    {
      "content": "版本发布日期",
      "pos": [
        8610,
        8616
      ]
    },
    {
      "content": "从下拉列表中选择日期",
      "pos": [
        8630,
        8640
      ]
    },
    {
      "content": "虚拟机名称",
      "pos": [
        8667,
        8672
      ]
    },
    {
      "content": "cass-template",
      "pos": [
        8686,
        8699
      ]
    },
    {
      "content": "这是 VM 的主机名",
      "pos": [
        8728,
        8738
      ]
    },
    {
      "content": "层",
      "pos": [
        8757,
        8758
      ]
    },
    {
      "content": "标准",
      "pos": [
        8788,
        8790
      ]
    },
    {
      "content": "保留默认值",
      "pos": [
        8826,
        8831
      ]
    },
    {
      "content": "大小",
      "pos": [
        8863,
        8865
      ]
    },
    {
      "content": "A1",
      "pos": [
        8894,
        8896
      ]
    },
    {
      "content": "根据 IO 需求选择 VM；为此，请保留默认值",
      "pos": [
        8935,
        8958
      ]
    },
    {
      "content": "新用户名",
      "pos": [
        8978,
        8982
      ]
    },
    {
      "content": "localadmin",
      "pos": [
        9004,
        9014
      ]
    },
    {
      "content": "“admin”是 Ubuntu 12.xx 及更高版本中保留的用户名",
      "pos": [
        9046,
        9080
      ]
    },
    {
      "content": "身份验证",
      "pos": [
        9099,
        9103
      ]
    },
    {
      "content": "单击复选框",
      "pos": [
        9121,
        9126
      ]
    },
    {
      "content": "检查是否要使用 SSH 密钥进行保护",
      "pos": [
        9152,
        9170
      ]
    },
    {
      "content": "证书",
      "pos": [
        9190,
        9192
      ]
    },
    {
      "content": "公钥证书的文件名",
      "pos": [
        9212,
        9220
      ]
    },
    {
      "content": "使用以前生成的公钥",
      "pos": [
        9231,
        9240
      ]
    },
    {
      "content": "新密码",
      "pos": [
        9259,
        9262
      ]
    },
    {
      "content": "强密码",
      "pos": [
        9276,
        9279
      ]
    },
    {
      "content": "确认密码",
      "pos": [
        9309,
        9313
      ]
    },
    {
      "content": "强密码",
      "pos": [
        9326,
        9329
      ]
    },
    {
      "content": "在“虚拟机配置”屏幕 #2 中输入以下信息：",
      "pos": [
        9359,
        9381
      ]
    },
    {
      "content": "字段名称",
      "pos": [
        9399,
        9403
      ]
    },
    {
      "content": "字段值",
      "pos": [
        9426,
        9429
      ]
    },
    {
      "content": "备注",
      "pos": [
        9460,
        9462
      ]
    },
    {
      "content": "云服务",
      "pos": [
        9515,
        9518
      ]
    },
    {
      "content": "创建新的云服务",
      "pos": [
        9532,
        9539
      ]
    },
    {
      "content": "云服务是类似虚拟机的容器计算资源",
      "pos": [
        9551,
        9567
      ]
    },
    {
      "content": "云服务 DNS 名称",
      "pos": [
        9587,
        9597
      ]
    },
    {
      "content": "ubuntu-template.chinacloudapp.cn",
      "pos": [
        9607,
        9639
      ]
    },
    {
      "content": "为计算机提供不可知的负载平衡器名称",
      "pos": [
        9651,
        9668
      ]
    },
    {
      "content": "区域/地缘组/虚拟网络",
      "pos": [
        9688,
        9699
      ]
    },
    {
      "content": "中国北部",
      "pos": [
        9711,
        9715
      ]
    },
    {
      "content": "选择你的 Web 应用程序从中访问 Cassandra 群集的区域",
      "pos": [
        9729,
        9762
      ]
    },
    {
      "content": "存储帐户",
      "pos": [
        9781,
        9785
      ]
    },
    {
      "content": "使用默认值",
      "pos": [
        9797,
        9802
      ]
    },
    {
      "content": "使用特定区域的默认存储帐户或预先创建的存储帐户",
      "pos": [
        9814,
        9837
      ]
    },
    {
      "content": "可用性集",
      "pos": [
        9856,
        9860
      ]
    },
    {
      "content": "无",
      "pos": [
        9872,
        9873
      ]
    },
    {
      "content": "将此字段留空",
      "pos": [
        9884,
        9890
      ]
    },
    {
      "content": "终结点",
      "pos": [
        9909,
        9912
      ]
    },
    {
      "content": "使用默认值",
      "pos": [
        9922,
        9927
      ]
    },
    {
      "content": "单击右箭头，保留屏幕 #3 中的默认设置，然后单击“检查”按钮完成 VM 预配过程。几分钟后，名为“ubuntu-template”的 VM 将处于“正在运行”状态。",
      "pos": [
        9974,
        10057
      ]
    },
    {
      "content": "安装必要的软件",
      "pos": [
        10062,
        10069
      ]
    },
    {
      "content": "步骤 1：上载 tarball",
      "pos": [
        10074,
        10089
      ]
    },
    {
      "content": "使用 scp 或 pscp，通过以下命令格式将以前下载的软件复制到 ~/downloads 目录：",
      "pos": [
        10091,
        10140
      ]
    },
    {
      "content": "pscp server-jre-8u5-linux-x64.tar.gz localadmin@hk-cas-template.chinacloudapp.cn:/home/localadmin/downloads/server-jre-8u5-linux-x64.tar.gz",
      "pos": [
        10147,
        10286
      ]
    },
    {
      "content": "对 JRE 和 Cassandra 组件重复以上命令。",
      "pos": [
        10288,
        10315
      ]
    },
    {
      "content": "步骤 2：准备目录结构并提取存档",
      "pos": [
        10321,
        10337
      ]
    },
    {
      "content": "使用以下 bash 脚本以超级用户身份登录到 VM，然后创建目录结构并提取软件：",
      "pos": [
        10338,
        10378
      ]
    },
    {
      "content": "如果将此脚本粘贴到 vim 窗口中，请确保使用以下命令删除回车符 ('\\\\r')：",
      "pos": [
        12136,
        12177
      ]
    },
    {
      "content": "步骤 3：编辑 etc/profile",
      "pos": [
        12222,
        12241
      ]
    },
    {
      "content": "将以下内容附加到结尾：",
      "pos": [
        12242,
        12253
      ]
    },
    {
      "content": "第 4 步：为生产系统安装 JNA",
      "pos": [
        12463,
        12480
      ]
    },
    {
      "content": "使用以下命令顺序：以下命令会将 jna-3.2.7.jar 和 jna-platform-3.2.7.jar 安装到 /usr/share.java 目录 sudo apt-get install libjna-java",
      "pos": [
        12481,
        12591
      ]
    },
    {
      "content": "在 $CASS\\_HOME/lib 目录中创建符号链接，以便 Cassandra 启动脚本能够找到这些 jar：",
      "pos": [
        12593,
        12649
      ]
    },
    {
      "content": "步骤 5：配置 cassandra.yaml",
      "pos": [
        12801,
        12823
      ]
    },
    {
      "content": "编辑每个 VM 上的 cassandra.yaml，使之能够反映所有虚拟机所需的配置 [在实际预配过程中，我们会对此进行调整]：",
      "pos": [
        12824,
        12888
      ]
    },
    {
      "content": "字段名称",
      "pos": [
        12906,
        12910
      ]
    },
    {
      "content": "值",
      "pos": [
        12923,
        12924
      ]
    },
    {
      "content": "备注",
      "pos": [
        12938,
        12940
      ]
    },
    {
      "content": "cluster_name",
      "pos": [
        12960,
        12972
      ]
    },
    {
      "content": "“CustomerService”",
      "pos": [
        12984,
        13001
      ]
    },
    {
      "content": "使用能够反映你的部署的名称",
      "pos": [
        13014,
        13027
      ]
    },
    {
      "content": "listen_address",
      "pos": [
        13047,
        13061
      ]
    },
    {
      "content": "[将此字段留空]",
      "pos": [
        13072,
        13080
      ]
    },
    {
      "content": "删除“localhost”",
      "pos": [
        13093,
        13106
      ]
    },
    {
      "content": "rpc_addres",
      "pos": [
        13126,
        13136
      ]
    },
    {
      "content": "[将此字段留空]",
      "pos": [
        13148,
        13156
      ]
    },
    {
      "content": "删除“localhost”",
      "pos": [
        13168,
        13181
      ]
    },
    {
      "content": "种子",
      "pos": [
        13201,
        13203
      ]
    },
    {
      "content": "“10.1.2.4、10.1.2.6、10.1.2.8”",
      "pos": [
        13214,
        13242
      ]
    },
    {
      "content": "所有已指定为种子的 IP 地址的列表。",
      "pos": [
        13254,
        13273
      ]
    },
    {
      "content": "endpoint_snitch",
      "pos": [
        13292,
        13307
      ]
    },
    {
      "content": "org.apache.cassandra.locator.GossipingPropertyFileSnitch",
      "pos": [
        13318,
        13374
      ]
    },
    {
      "content": "此字段由 NetworkTopologyStrateg 用来推断数据中心以及 VM 的机架",
      "pos": [
        13385,
        13430
      ]
    },
    {
      "content": "步骤 6：捕获 VM 映像",
      "pos": [
        13455,
        13468
      ]
    },
    {
      "content": "使用以前创建的主机名 (hk-cas-template.chinacloudapp.cn) 和 SSH 私钥登录到虚拟机。请参阅“如何在 Azure 上通过 Linux 使用 SSH”，以详细了解如何使用命令 ssh 或 putty.exe 登录。",
      "pos": [
        13469,
        13593
      ]
    },
    {
      "content": "执行以下顺序的操作以捕获映像：",
      "pos": [
        13595,
        13610
      ]
    },
    {
      "content": "1\\.预配",
      "pos": [
        13616,
        13621
      ]
    },
    {
      "content": "使用命令“sudo waagent -deprovision+user”删除特定于虚拟机实例的信息。请参阅<bpt id=\"p1\">[</bpt>如何捕获将用作模板的 Linux 虚拟机<ept id=\"p1\">](/documentation/articles/virtual-machines-linux-capture-image)</ept>，了解映像捕获过程的详细信息。",
      "pos": [
        13622,
        13774
      ]
    },
    {
      "content": "2：关闭 VM",
      "pos": [
        13781,
        13788
      ]
    },
    {
      "content": "确保突出显示该虚拟机，然后单击底部命令栏中的“关闭”链接。",
      "pos": [
        13789,
        13818
      ]
    },
    {
      "content": "3：捕获映像",
      "pos": [
        13825,
        13831
      ]
    },
    {
      "content": "确保突出显示该虚拟机，然后单击底部命令栏中的“捕获”链接。在下一屏幕中，请提供映像名称（例如 hk-cas-2-08-ub-14-04-2014071）、适当的映像描述，然后单击“检查”标记完成捕获过程。",
      "pos": [
        13832,
        13934
      ]
    },
    {
      "content": "这将需要数秒钟的时间，然后映像就会出现在映像库中的“我的映像”部分。成功捕获映像后，将会自动删除源 VM。",
      "pos": [
        13936,
        13989
      ]
    },
    {
      "content": "单区域部署过程",
      "pos": [
        13993,
        14000
      ]
    },
    {
      "content": "步骤 1：创建虚拟网络",
      "pos": [
        14003,
        14014
      ]
    },
    {
      "content": "登录到 Azure 管理门户，然后使用下表中的属性创建虚拟网络。请参阅<bpt id=\"p1\">[</bpt>在 Azure 管理门户中配置只使用云的虚拟网络<ept id=\"p1\">](/documentation/articles/virtual-networks-create-vnet-classic-portal)</ept>，以了解此过程的详细步骤。",
      "pos": [
        14017,
        14160
      ]
    },
    {
      "content": "VM 属性名称",
      "pos": [
        14178,
        14185
      ]
    },
    {
      "content": "值",
      "pos": [
        14194,
        14195
      ]
    },
    {
      "content": "备注",
      "pos": [
        14204,
        14206
      ]
    },
    {
      "content": "Name",
      "pos": [
        14225,
        14229
      ]
    },
    {
      "content": "vnet-cass-west-us",
      "pos": [
        14238,
        14255
      ]
    },
    {
      "content": "区域",
      "pos": [
        14286,
        14288
      ]
    },
    {
      "content": "中国北部",
      "pos": [
        14297,
        14301
      ]
    },
    {
      "content": "DNS 服务器",
      "pos": [
        14331,
        14338
      ]
    },
    {
      "content": "无",
      "pos": [
        14348,
        14349
      ]
    },
    {
      "content": "将其忽略，因为我们不使用 DNS 服务器",
      "pos": [
        14358,
        14378
      ]
    },
    {
      "content": "配置点到站点 VPN",
      "pos": [
        14397,
        14407
      ]
    },
    {
      "content": "无",
      "pos": [
        14416,
        14417
      ]
    },
    {
      "content": "将其忽略",
      "pos": [
        14427,
        14431
      ]
    },
    {
      "content": "配置站点到站点 VPN",
      "pos": [
        14450,
        14461
      ]
    },
    {
      "content": "无",
      "pos": [
        14470,
        14471
      ]
    },
    {
      "content": "将其忽略",
      "pos": [
        14481,
        14485
      ]
    },
    {
      "content": "地址空间",
      "pos": [
        14504,
        14508
      ]
    },
    {
      "content": "10.1.0.0/16",
      "pos": [
        14517,
        14528
      ]
    },
    {
      "content": "起始 IP",
      "pos": [
        14557,
        14562
      ]
    },
    {
      "content": "10.1.0.0",
      "pos": [
        14571,
        14579
      ]
    },
    {
      "content": "CIDR",
      "pos": [
        14610,
        14614
      ]
    },
    {
      "content": "/16 (65531)",
      "pos": [
        14624,
        14635
      ]
    },
    {
      "content": "添加以下子网：",
      "pos": [
        14665,
        14672
      ]
    },
    {
      "content": "Name",
      "pos": [
        14690,
        14694
      ]
    },
    {
      "content": "起始 IP",
      "pos": [
        14703,
        14708
      ]
    },
    {
      "content": "CIDR",
      "pos": [
        14717,
        14721
      ]
    },
    {
      "content": "备注",
      "pos": [
        14730,
        14732
      ]
    },
    {
      "content": "Web",
      "pos": [
        14751,
        14754
      ]
    },
    {
      "content": "10.1.1.0",
      "pos": [
        14763,
        14771
      ]
    },
    {
      "content": "/24 (251)",
      "pos": [
        14780,
        14789
      ]
    },
    {
      "content": "Web 场的子网",
      "pos": [
        14798,
        14806
      ]
    },
    {
      "content": "数据",
      "pos": [
        14825,
        14827
      ]
    },
    {
      "content": "10.1.2.0",
      "pos": [
        14836,
        14844
      ]
    },
    {
      "content": "/24 (251)",
      "pos": [
        14853,
        14862
      ]
    },
    {
      "content": "数据库节点的子网",
      "pos": [
        14871,
        14879
      ]
    },
    {
      "content": "数据和 Web 子网可以通过网络安全组进行保护，此方面的内容不在本文讲述范围之内。",
      "pos": [
        14900,
        14941
      ]
    },
    {
      "content": "步骤 2：预配虚拟机",
      "pos": [
        14945,
        14955
      ]
    },
    {
      "content": "使用前面创建的映像，我们可以在云服务器“hk-c-svc-west”中创建以下虚拟机并将其绑定到相应的子网，如下所示：",
      "pos": [
        14958,
        15017
      ]
    },
    {
      "content": "计算机名称",
      "pos": [
        15035,
        15040
      ]
    },
    {
      "content": "子网",
      "pos": [
        15053,
        15055
      ]
    },
    {
      "content": "IP 地址",
      "pos": [
        15068,
        15073
      ]
    },
    {
      "content": "可用性集",
      "pos": [
        15084,
        15088
      ]
    },
    {
      "content": "DC/机架",
      "pos": [
        15097,
        15102
      ]
    },
    {
      "content": "种子？",
      "pos": [
        15111,
        15114
      ]
    },
    {
      "content": "hk-c1-west-us",
      "pos": [
        15133,
        15146
      ]
    },
    {
      "content": "数据",
      "pos": [
        15158,
        15160
      ]
    },
    {
      "content": "10.1.2.4",
      "pos": [
        15170,
        15178
      ]
    },
    {
      "content": "hk-c-aset-1",
      "pos": [
        15190,
        15201
      ]
    },
    {
      "content": "dc =WESTUS 机架 =rack1",
      "pos": [
        15214,
        15234
      ]
    },
    {
      "content": "是",
      "pos": [
        15244,
        15245
      ]
    },
    {
      "content": "hk-c2-west-us",
      "pos": [
        15264,
        15277
      ]
    },
    {
      "content": "数据",
      "pos": [
        15289,
        15291
      ]
    },
    {
      "content": "10.1.2.5",
      "pos": [
        15301,
        15309
      ]
    },
    {
      "content": "hk-c-aset-1",
      "pos": [
        15321,
        15332
      ]
    },
    {
      "content": "dc =WESTUS 机架 =rack1",
      "pos": [
        15345,
        15365
      ]
    },
    {
      "content": "否",
      "pos": [
        15377,
        15378
      ]
    },
    {
      "content": "hk-c3-west-us",
      "pos": [
        15398,
        15411
      ]
    },
    {
      "content": "数据",
      "pos": [
        15423,
        15425
      ]
    },
    {
      "content": "10.1.2.6",
      "pos": [
        15435,
        15443
      ]
    },
    {
      "content": "hk-c-aset-1",
      "pos": [
        15455,
        15466
      ]
    },
    {
      "content": "dc =WESTUS 机架 =rack2",
      "pos": [
        15479,
        15499
      ]
    },
    {
      "content": "是",
      "pos": [
        15511,
        15512
      ]
    },
    {
      "content": "hk-c4-west-us",
      "pos": [
        15531,
        15544
      ]
    },
    {
      "content": "数据",
      "pos": [
        15556,
        15558
      ]
    },
    {
      "content": "10.1.2.7",
      "pos": [
        15568,
        15576
      ]
    },
    {
      "content": "hk-c-aset-1",
      "pos": [
        15588,
        15599
      ]
    },
    {
      "content": "dc =WESTUS 机架 =rack2",
      "pos": [
        15612,
        15632
      ]
    },
    {
      "content": "否",
      "pos": [
        15644,
        15645
      ]
    },
    {
      "content": "hk-c5-west-us",
      "pos": [
        15665,
        15678
      ]
    },
    {
      "content": "数据",
      "pos": [
        15690,
        15692
      ]
    },
    {
      "content": "10.1.2.8",
      "pos": [
        15702,
        15710
      ]
    },
    {
      "content": "hk-c-aset-2",
      "pos": [
        15722,
        15733
      ]
    },
    {
      "content": "dc =WESTUS 机架 =rack3",
      "pos": [
        15746,
        15766
      ]
    },
    {
      "content": "是",
      "pos": [
        15778,
        15779
      ]
    },
    {
      "content": "hk-c6-west-us",
      "pos": [
        15798,
        15811
      ]
    },
    {
      "content": "数据",
      "pos": [
        15823,
        15825
      ]
    },
    {
      "content": "10.1.2.9",
      "pos": [
        15835,
        15843
      ]
    },
    {
      "content": "hk-c-aset-2",
      "pos": [
        15855,
        15866
      ]
    },
    {
      "content": "dc =WESTUS 机架 =rack3",
      "pos": [
        15879,
        15899
      ]
    },
    {
      "content": "否",
      "pos": [
        15911,
        15912
      ]
    },
    {
      "content": "hk-c7-west-us",
      "pos": [
        15932,
        15945
      ]
    },
    {
      "content": "数据",
      "pos": [
        15957,
        15959
      ]
    },
    {
      "content": "10.1.2.10",
      "pos": [
        15969,
        15978
      ]
    },
    {
      "content": "hk-c-aset-2",
      "pos": [
        15989,
        16000
      ]
    },
    {
      "content": "dc =WESTUS 机架 =rack4",
      "pos": [
        16013,
        16033
      ]
    },
    {
      "content": "是",
      "pos": [
        16045,
        16046
      ]
    },
    {
      "content": "hk-c8-west-us",
      "pos": [
        16065,
        16078
      ]
    },
    {
      "content": "数据",
      "pos": [
        16090,
        16092
      ]
    },
    {
      "content": "10.1.2.11",
      "pos": [
        16102,
        16111
      ]
    },
    {
      "content": "hk-c-aset-2",
      "pos": [
        16122,
        16133
      ]
    },
    {
      "content": "dc =WESTUS 机架 =rack4",
      "pos": [
        16146,
        16166
      ]
    },
    {
      "content": "否",
      "pos": [
        16178,
        16179
      ]
    },
    {
      "content": "hk-w1-west-us",
      "pos": [
        16199,
        16212
      ]
    },
    {
      "content": "Web",
      "pos": [
        16224,
        16227
      ]
    },
    {
      "content": "10.1.1.4",
      "pos": [
        16240,
        16248
      ]
    },
    {
      "content": "hk-w-aset-1",
      "pos": [
        16260,
        16271
      ]
    },
    {
      "content": "不适用",
      "pos": [
        16316,
        16319
      ]
    },
    {
      "content": "hk-w2-west-us",
      "pos": [
        16338,
        16351
      ]
    },
    {
      "content": "Web",
      "pos": [
        16363,
        16366
      ]
    },
    {
      "content": "10.1.1.5",
      "pos": [
        16379,
        16387
      ]
    },
    {
      "content": "hk-w-aset-1",
      "pos": [
        16399,
        16410
      ]
    },
    {
      "content": "不适用",
      "pos": [
        16455,
        16458
      ]
    },
    {
      "content": "创建以上 VM 列表需要完成以下过程：",
      "pos": [
        16479,
        16498
      ]
    },
    {
      "content": "在特定区域创建空的云服务",
      "pos": [
        16504,
        16516
      ]
    },
    {
      "content": "从以前捕获的映像创建 VM，然后将其附加到以前创建的虚拟网络；对所有 VM 重复此过程",
      "pos": [
        16521,
        16564
      ]
    },
    {
      "content": "将内部负载平衡器添加到云服务，然后将其附加到“数据”子网",
      "pos": [
        16569,
        16597
      ]
    },
    {
      "content": "对于以前创建的每个 VM，可以通过一个已连接到以前创建的内部负载平衡器的负载平衡集添加进行 Thrift 通信的负载平衡终结点",
      "pos": [
        16602,
        16665
      ]
    },
    {
      "content": "以上过程可以通过 Azure 管理门户来执行；使用 Windows 计算机（如果无法访问 Windows 计算机，则可使用 Azure 上的 VM）；使用以下 PowerShell 脚本自动预配所有 8 个 VM。",
      "pos": [
        16667,
        16774
      ]
    },
    {
      "content": "列表 1：适用于预配虚拟机的 PowerShell 脚本",
      "pos": [
        16778,
        16806
      ]
    },
    {
      "content": "步骤 3：在每个 VM 上配置 Cassandra",
      "pos": [
        19689,
        19714
      ]
    },
    {
      "content": "登录到 VM 并执行以下操作：",
      "pos": [
        19718,
        19733
      ]
    },
    {
      "content": "编辑 $CASS\\_HOME/conf/cassandra-rackdc.properties 以指定数据中心和机架属性：",
      "pos": [
        19737,
        19798
      ]
    },
    {
      "content": "编辑 cassandra.yaml，将种子节点配置如下：",
      "pos": [
        19837,
        19865
      ]
    },
    {
      "content": "步骤 4：启动 VM 并测试群集",
      "pos": [
        19924,
        19940
      ]
    },
    {
      "content": "登录到其中一个节点（例如 hk-c1-west-us），然后运行以下命令以查看群集的状态：",
      "pos": [
        19944,
        19989
      ]
    },
    {
      "content": "对于 8 节点群集，你所看到的显示内容将如下所示：",
      "pos": [
        20043,
        20068
      ]
    },
    {
      "content": "状态",
      "pos": [
        20086,
        20088
      ]
    },
    {
      "content": "地址",
      "pos": [
        20098,
        20100
      ]
    },
    {
      "content": "加载",
      "pos": [
        20111,
        20113
      ]
    },
    {
      "content": "令牌",
      "pos": [
        20123,
        20125
      ]
    },
    {
      "content": "所有",
      "pos": [
        20135,
        20137
      ]
    },
    {
      "content": "主机 ID",
      "pos": [
        20147,
        20152
      ]
    },
    {
      "content": "机架",
      "pos": [
        20163,
        20165
      ]
    },
    {
      "content": "UN",
      "pos": [
        20184,
        20186
      ]
    },
    {
      "content": "10.1.2.4",
      "pos": [
        20197,
        20205
      ]
    },
    {
      "content": "87.81 KB",
      "pos": [
        20217,
        20225
      ]
    },
    {
      "content": "256",
      "pos": [
        20237,
        20240
      ]
    },
    {
      "content": "38.0%",
      "pos": [
        20253,
        20258
      ]
    },
    {
      "content": "Guid（已删除）",
      "pos": [
        20269,
        20278
      ]
    },
    {
      "content": "rack1",
      "pos": [
        20287,
        20292
      ]
    },
    {
      "content": "UN",
      "pos": [
        20311,
        20313
      ]
    },
    {
      "content": "10.1.2.5",
      "pos": [
        20324,
        20332
      ]
    },
    {
      "content": "41.08 KB",
      "pos": [
        20344,
        20352
      ]
    },
    {
      "content": "256",
      "pos": [
        20364,
        20367
      ]
    },
    {
      "content": "68.9%",
      "pos": [
        20380,
        20385
      ]
    },
    {
      "content": "Guid（已删除）",
      "pos": [
        20396,
        20405
      ]
    },
    {
      "content": "rack1",
      "pos": [
        20414,
        20419
      ]
    },
    {
      "content": "UN",
      "pos": [
        20438,
        20440
      ]
    },
    {
      "content": "10.1.2.6",
      "pos": [
        20451,
        20459
      ]
    },
    {
      "content": "55.29 KB",
      "pos": [
        20471,
        20479
      ]
    },
    {
      "content": "256",
      "pos": [
        20491,
        20494
      ]
    },
    {
      "content": "68.8%",
      "pos": [
        20507,
        20512
      ]
    },
    {
      "content": "Guid（已删除）",
      "pos": [
        20523,
        20532
      ]
    },
    {
      "content": "rack2",
      "pos": [
        20541,
        20546
      ]
    },
    {
      "content": "UN",
      "pos": [
        20565,
        20567
      ]
    },
    {
      "content": "10.1.2.7",
      "pos": [
        20578,
        20586
      ]
    },
    {
      "content": "55.29 KB",
      "pos": [
        20598,
        20606
      ]
    },
    {
      "content": "256",
      "pos": [
        20618,
        20621
      ]
    },
    {
      "content": "68.8%",
      "pos": [
        20634,
        20639
      ]
    },
    {
      "content": "Guid（已删除）",
      "pos": [
        20650,
        20659
      ]
    },
    {
      "content": "rack2",
      "pos": [
        20668,
        20673
      ]
    },
    {
      "content": "UN",
      "pos": [
        20692,
        20694
      ]
    },
    {
      "content": "10.1.2.8",
      "pos": [
        20705,
        20713
      ]
    },
    {
      "content": "55.29 KB",
      "pos": [
        20725,
        20733
      ]
    },
    {
      "content": "256",
      "pos": [
        20745,
        20748
      ]
    },
    {
      "content": "68.8%",
      "pos": [
        20761,
        20766
      ]
    },
    {
      "content": "Guid（已删除）",
      "pos": [
        20777,
        20786
      ]
    },
    {
      "content": "rack3",
      "pos": [
        20795,
        20800
      ]
    },
    {
      "content": "UN",
      "pos": [
        20819,
        20821
      ]
    },
    {
      "content": "10.1.2.9",
      "pos": [
        20832,
        20840
      ]
    },
    {
      "content": "55.29 KB",
      "pos": [
        20852,
        20860
      ]
    },
    {
      "content": "256",
      "pos": [
        20872,
        20875
      ]
    },
    {
      "content": "68.8%",
      "pos": [
        20888,
        20893
      ]
    },
    {
      "content": "Guid（已删除）",
      "pos": [
        20904,
        20913
      ]
    },
    {
      "content": "rack3",
      "pos": [
        20922,
        20927
      ]
    },
    {
      "content": "UN",
      "pos": [
        20946,
        20948
      ]
    },
    {
      "content": "10.1.2.10",
      "pos": [
        20959,
        20968
      ]
    },
    {
      "content": "55.29 KB",
      "pos": [
        20979,
        20987
      ]
    },
    {
      "content": "256",
      "pos": [
        20999,
        21002
      ]
    },
    {
      "content": "68.8%",
      "pos": [
        21015,
        21020
      ]
    },
    {
      "content": "Guid（已删除）",
      "pos": [
        21031,
        21040
      ]
    },
    {
      "content": "rack4",
      "pos": [
        21049,
        21054
      ]
    },
    {
      "content": "UN",
      "pos": [
        21073,
        21075
      ]
    },
    {
      "content": "10.1.2.11",
      "pos": [
        21086,
        21095
      ]
    },
    {
      "content": "55.29 KB",
      "pos": [
        21106,
        21114
      ]
    },
    {
      "content": "256",
      "pos": [
        21126,
        21129
      ]
    },
    {
      "content": "68.8%",
      "pos": [
        21142,
        21147
      ]
    },
    {
      "content": "Guid（已删除）",
      "pos": [
        21158,
        21167
      ]
    },
    {
      "content": "rack4",
      "pos": [
        21176,
        21181
      ]
    },
    {
      "content": "测试单区域群集",
      "pos": [
        21205,
        21212
      ]
    },
    {
      "content": "使用以下步骤测试群集：",
      "pos": [
        21213,
        21224
      ]
    },
    {
      "content": "使用 Powershell 命令 Get-AzureInternalLoadbalancer cmdlet 获取内部负载平衡器的 IP 地址（例如 10.1.2.101）。该命令的语法如下所示：Get-AzureLoadbalancer -ServiceName \"hk-c-svc-west-us\" [显示内部负载平衡器及其 IP 地址的详细信息]",
      "pos": [
        21232,
        21407
      ]
    },
    {
      "content": "使用 Putty 或 ssh 登录到 Web 场 VM（例如 hk-w1-west-us）",
      "pos": [
        21412,
        21457
      ]
    },
    {
      "content": "执行 $CASS\\_HOME/bin/cqlsh 10.1.2.101 9160",
      "pos": [
        21462,
        21502
      ]
    },
    {
      "content": "使用以下 CQL 命令验证群集是否正常工作：",
      "pos": [
        21508,
        21530
      ]
    },
    {
      "content": "你应该看到如下所示的显示内容：",
      "pos": [
        21991,
        22006
      ]
    },
    {
      "content": "customer_id",
      "pos": [
        22027,
        22038
      ]
    },
    {
      "content": "名",
      "pos": [
        22049,
        22050
      ]
    },
    {
      "content": "姓",
      "pos": [
        22061,
        22062
      ]
    },
    {
      "content": "1",
      "pos": [
        22085,
        22086
      ]
    },
    {
      "content": "John",
      "pos": [
        22097,
        22101
      ]
    },
    {
      "content": "Doe",
      "pos": [
        22112,
        22115
      ]
    },
    {
      "content": "2",
      "pos": [
        22138,
        22139
      ]
    },
    {
      "content": "Jane",
      "pos": [
        22150,
        22154
      ]
    },
    {
      "content": "Doe",
      "pos": [
        22165,
        22168
      ]
    },
    {
      "content": "请注意，在步骤 4 中创建的密钥空间使用 SimpleStrategy 并已将 a replication\\_factor 设置为 3。建议使用 SimpleStrategy 进行单数据中心部署，使用 NetworkTopologyStrategy 进行多数据中心部署。将 replication\\_factor 设置为 3 即可承受节点故障。",
      "pos": [
        22190,
        22362
      ]
    },
    {
      "content": "<ph id=\"ph1\">&lt;a id=\"tworegion\"&gt;</ph> <ph id=\"ph2\">&lt;/a&gt;</ph>多区域部署过程",
      "pos": [
        22366,
        22396
      ]
    },
    {
      "content": "将利用已完成的单区域部署，并在安装第二个区域时重复相同的过程。单区域部署和多区域部署的主要区别是 VPN 隧道，设置该隧道是为了进行区域间通信；我们一开始将进行网络安装，并完成 VM 预配和 Cassandra 配置。",
      "pos": [
        22397,
        22506
      ]
    },
    {
      "content": "步骤 1：在第二个区域创建虚拟网络",
      "pos": [
        22511,
        22528
      ]
    },
    {
      "content": "登录到 Azure 管理门户，然后使用下表中的属性创建虚拟网络。请参阅<bpt id=\"p1\">[</bpt>在 Azure 管理门户中配置只使用云的虚拟网络<ept id=\"p1\">](/documentation/articles/virtual-networks-create-vnet-classic-portal)</ept>，以了解此过程的详细步骤。",
      "pos": [
        22529,
        22672
      ]
    },
    {
      "content": "属性名称",
      "pos": [
        22690,
        22694
      ]
    },
    {
      "content": "值",
      "pos": [
        22707,
        22708
      ]
    },
    {
      "content": "备注",
      "pos": [
        22719,
        22721
      ]
    },
    {
      "content": "Name",
      "pos": [
        22740,
        22744
      ]
    },
    {
      "content": "vnet-cass-east-us",
      "pos": [
        22757,
        22774
      ]
    },
    {
      "content": "区域",
      "pos": [
        22805,
        22807
      ]
    },
    {
      "content": "中国东部",
      "pos": [
        22818,
        22822
      ]
    },
    {
      "content": "DNS 服务器",
      "pos": [
        22854,
        22861
      ]
    },
    {
      "content": "将其忽略，因为我们不使用 DNS 服务器",
      "pos": [
        22884,
        22904
      ]
    },
    {
      "content": "配置点到站点 VPN",
      "pos": [
        22923,
        22933
      ]
    },
    {
      "content": "配置站点到站点 VPN",
      "pos": [
        22982,
        22993
      ]
    },
    {
      "content": "地址空间",
      "pos": [
        23041,
        23045
      ]
    },
    {
      "content": "10.2.0.0/16",
      "pos": [
        23058,
        23069
      ]
    },
    {
      "content": "起始 IP",
      "pos": [
        23098,
        23103
      ]
    },
    {
      "content": "10.2.0.0",
      "pos": [
        23115,
        23123
      ]
    },
    {
      "content": "CIDR",
      "pos": [
        23154,
        23158
      ]
    },
    {
      "content": "/16 (65531)",
      "pos": [
        23171,
        23182
      ]
    },
    {
      "content": "添加以下子网：",
      "pos": [
        23212,
        23219
      ]
    },
    {
      "content": "名称",
      "pos": [
        23235,
        23237
      ]
    },
    {
      "content": "起始 IP",
      "pos": [
        23247,
        23252
      ]
    },
    {
      "content": "CIDR",
      "pos": [
        23262,
        23266
      ]
    },
    {
      "content": "备注",
      "pos": [
        23276,
        23278
      ]
    },
    {
      "content": "Web",
      "pos": [
        23297,
        23300
      ]
    },
    {
      "content": "10.2.1.0",
      "pos": [
        23310,
        23318
      ]
    },
    {
      "content": "/24 (251)",
      "pos": [
        23328,
        23337
      ]
    },
    {
      "content": "Web 场的子网",
      "pos": [
        23347,
        23355
      ]
    },
    {
      "content": "数据",
      "pos": [
        23374,
        23376
      ]
    },
    {
      "content": "10.2.2.0",
      "pos": [
        23386,
        23394
      ]
    },
    {
      "content": "/24 (251)",
      "pos": [
        23404,
        23413
      ]
    },
    {
      "content": "数据库节点的子网",
      "pos": [
        23423,
        23431
      ]
    },
    {
      "content": "步骤 2：创建本地网络",
      "pos": [
        23456,
        23467
      ]
    },
    {
      "content": "Azure 虚拟网络中的本地网络是一个代理地址空间，该空间映射到包括私有云或其他 Azure 区域在内的远程站点。此代理地址空间绑定到远程网关，可以将网络路由到正确的网络目标。请参阅<bpt id=\"p1\">[</bpt>配置 VNet 到 VNet 连接<ept id=\"p1\">](/documentation/articles/virtual-networks-configure-vnet-to-vnet-connection)</ept>，以获取建立 VNET 到 VNET 连接的说明。",
      "pos": [
        23468,
        23679
      ]
    },
    {
      "content": "按照以下详细信息创建两个本地网络：",
      "pos": [
        23681,
        23698
      ]
    },
    {
      "content": "网络名称",
      "pos": [
        23702,
        23706
      ]
    },
    {
      "content": "VPN 网关地址",
      "pos": [
        23709,
        23717
      ]
    },
    {
      "content": "地址空间",
      "pos": [
        23720,
        23724
      ]
    },
    {
      "content": "备注",
      "pos": [
        23727,
        23729
      ]
    },
    {
      "content": "hk-lnet-map-to-east-us",
      "pos": [
        23799,
        23821
      ]
    },
    {
      "content": "23\\.1.1.1",
      "pos": [
        23824,
        23833
      ]
    },
    {
      "content": "10\\.2.0.0/16",
      "pos": [
        23836,
        23848
      ]
    },
    {
      "content": "在创建本地网络时，请提供一个占位符网关地址。创建网关后需填充实际的网关地址。请确保地址空间与相应的远程 VNET 完全匹配；在本示例中，该 VNET 是在中国东部地区创建的。",
      "pos": [
        23851,
        23938
      ]
    },
    {
      "content": "hk-lnet-map-to-west-us",
      "pos": [
        23943,
        23965
      ]
    },
    {
      "content": "23\\.2.2.2",
      "pos": [
        23968,
        23977
      ]
    },
    {
      "content": "10\\.1.0.0/16",
      "pos": [
        23980,
        23992
      ]
    },
    {
      "content": "在创建本地网络时，请提供一个占位符网关地址。创建网关后需填充实际的网关地址。请确保地址空间与相应的远程 VNET 完全匹配；在本示例中，该 VNET 是在中国北部地区创建的。",
      "pos": [
        23995,
        24082
      ]
    },
    {
      "content": "步骤 3：将“本地”网络映射到相应的 VNET",
      "pos": [
        24090,
        24113
      ]
    },
    {
      "content": "在 Azure 管理门户中，选择每个 VNET，单击“配置”，选中“连接到本地网络”，然后按照以下详细信息选择本地网络：",
      "pos": [
        24114,
        24174
      ]
    },
    {
      "content": "虚拟网络",
      "pos": [
        24179,
        24183
      ]
    },
    {
      "content": "本地网络",
      "pos": [
        24186,
        24190
      ]
    },
    {
      "content": "hk-vnet-west-us",
      "pos": [
        24231,
        24246
      ]
    },
    {
      "content": "hk-lnet-map-to-east-us",
      "pos": [
        24249,
        24271
      ]
    },
    {
      "content": "hk-vnet-east-us",
      "pos": [
        24276,
        24291
      ]
    },
    {
      "content": "hk-lnet-map-to-west-us",
      "pos": [
        24294,
        24316
      ]
    },
    {
      "content": "步骤 4：在 VNET1 和 VNET2 上创建网关",
      "pos": [
        24324,
        24350
      ]
    },
    {
      "content": "在这两个虚拟网络的仪表板中，单击“创建网关”，然后就会触发 VPN 网关预配过程。几分钟后，每个虚拟网络的仪表板就会显示实际网关地址。",
      "pos": [
        24351,
        24418
      ]
    },
    {
      "content": "步骤 5：使用相应的“网关”地址更新“本地”网络",
      "pos": [
        24423,
        24447
      ]
    },
    {
      "content": "编辑这两个本地网络，将占位符网关 IP 地址替换为刚预配的网关的实际 IP 地址。使用以下映射：",
      "pos": [
        24451,
        24499
      ]
    },
    {
      "content": "本地网络",
      "pos": [
        24517,
        24521
      ]
    },
    {
      "content": "虚拟网络网关",
      "pos": [
        24534,
        24540
      ]
    },
    {
      "content": "hk-lnet-map-to-east-us",
      "pos": [
        24559,
        24581
      ]
    },
    {
      "content": "hk-vnet-west-us 的网关",
      "pos": [
        24591,
        24610
      ]
    },
    {
      "content": "hk-lnet-map-to-west-us",
      "pos": [
        24629,
        24651
      ]
    },
    {
      "content": "hk-vnet-east-us 的网关",
      "pos": [
        24661,
        24680
      ]
    },
    {
      "content": "步骤 6：更新共享密钥",
      "pos": [
        24704,
        24715
      ]
    },
    {
      "content": "使用以下 Powershell 脚本更新每个 VPN 网关的 IPSec 密钥 [使用这两个网关的 sake 密钥]：Set-AzureVNetGatewayKey -VNetName hk-vnet-east-us -LocalNetworkSiteName hk-lnet-map-to-west-us -SharedKey D9E76BKK Set-AzureVNetGatewayKey -VNetName hk-vnet-west-us -LocalNetworkSiteName hk-lnet-map-to-east-us -SharedKey D9E76BKK",
      "pos": [
        24716,
        25004
      ]
    },
    {
      "content": "步骤 7：建立 VNET 到 VNET 连接",
      "pos": [
        25009,
        25031
      ]
    },
    {
      "content": "在 Azure 管理门户中，使用这两个虚拟网络的“仪表板”菜单建立网关到网关连接。使用底部工具栏中的“连接”菜单项。几分钟后，仪表板会以图形方式显示连接详细信息。",
      "pos": [
        25032,
        25113
      ]
    },
    {
      "content": "步骤 8：在区域 #2 中创建虚拟机",
      "pos": [
        25118,
        25136
      ]
    },
    {
      "content": "按照相同步骤创建区域 #1 部署中描述的 Ubuntu 映像，或者将映像 VHD 文件复制到区域 #2 中的 Azure 存储帐户，然后创建该映像。使用该映像，将下列虚拟机创建到新的云服务 hk-c-svc-east-us 中：",
      "pos": [
        25138,
        25252
      ]
    },
    {
      "content": "计算机名称",
      "pos": [
        25257,
        25262
      ]
    },
    {
      "content": "子网",
      "pos": [
        25265,
        25267
      ]
    },
    {
      "content": "IP 地址",
      "pos": [
        25270,
        25275
      ]
    },
    {
      "content": "可用性集",
      "pos": [
        25278,
        25282
      ]
    },
    {
      "content": "DC/机架",
      "pos": [
        25285,
        25290
      ]
    },
    {
      "content": "种子？",
      "pos": [
        25293,
        25296
      ]
    },
    {
      "content": "hk-c1-east-us",
      "pos": [
        25377,
        25390
      ]
    },
    {
      "content": "数据",
      "pos": [
        25393,
        25395
      ]
    },
    {
      "content": "10\\.2.2.4",
      "pos": [
        25398,
        25407
      ]
    },
    {
      "content": "hk-c-aset-1",
      "pos": [
        25410,
        25421
      ]
    },
    {
      "content": "dc =EASTUS 机架 =rack1",
      "pos": [
        25424,
        25444
      ]
    },
    {
      "content": "是",
      "pos": [
        25447,
        25448
      ]
    },
    {
      "content": "hk-c2-east-us",
      "pos": [
        25453,
        25466
      ]
    },
    {
      "content": "数据",
      "pos": [
        25469,
        25471
      ]
    },
    {
      "content": "10\\.2.2.5",
      "pos": [
        25474,
        25483
      ]
    },
    {
      "content": "hk-c-aset-1",
      "pos": [
        25486,
        25497
      ]
    },
    {
      "content": "dc =EASTUS 机架 =rack1",
      "pos": [
        25500,
        25520
      ]
    },
    {
      "content": "否",
      "pos": [
        25523,
        25524
      ]
    },
    {
      "content": "hk-c3-east-us",
      "pos": [
        25529,
        25542
      ]
    },
    {
      "content": "数据",
      "pos": [
        25545,
        25547
      ]
    },
    {
      "content": "10\\.2.2.6",
      "pos": [
        25550,
        25559
      ]
    },
    {
      "content": "hk-c-aset-1",
      "pos": [
        25562,
        25573
      ]
    },
    {
      "content": "dc =EASTUS 机架 =rack2",
      "pos": [
        25576,
        25596
      ]
    },
    {
      "content": "是",
      "pos": [
        25599,
        25600
      ]
    },
    {
      "content": "hk-c5-east-us",
      "pos": [
        25605,
        25618
      ]
    },
    {
      "content": "数据",
      "pos": [
        25621,
        25623
      ]
    },
    {
      "content": "10\\.2.2.8",
      "pos": [
        25626,
        25635
      ]
    },
    {
      "content": "hk-c-aset-2",
      "pos": [
        25638,
        25649
      ]
    },
    {
      "content": "dc =EASTUS 机架 =rack3",
      "pos": [
        25652,
        25672
      ]
    },
    {
      "content": "是",
      "pos": [
        25675,
        25676
      ]
    },
    {
      "content": "hk-c6-east-us",
      "pos": [
        25681,
        25694
      ]
    },
    {
      "content": "数据",
      "pos": [
        25697,
        25699
      ]
    },
    {
      "content": "10\\.2.2.9",
      "pos": [
        25702,
        25711
      ]
    },
    {
      "content": "hk-c-aset-2",
      "pos": [
        25714,
        25725
      ]
    },
    {
      "content": "dc =EASTUS 机架 =rack3",
      "pos": [
        25728,
        25748
      ]
    },
    {
      "content": "否",
      "pos": [
        25751,
        25752
      ]
    },
    {
      "content": "hk-c7-east-us",
      "pos": [
        25757,
        25770
      ]
    },
    {
      "content": "数据",
      "pos": [
        25773,
        25775
      ]
    },
    {
      "content": "10\\.2.2.10",
      "pos": [
        25778,
        25788
      ]
    },
    {
      "content": "hk-c-aset-2",
      "pos": [
        25791,
        25802
      ]
    },
    {
      "content": "dc =EASTUS 机架 =rack4",
      "pos": [
        25805,
        25825
      ]
    },
    {
      "content": "是",
      "pos": [
        25828,
        25829
      ]
    },
    {
      "content": "hk-c8-east-us",
      "pos": [
        25834,
        25847
      ]
    },
    {
      "content": "数据",
      "pos": [
        25850,
        25852
      ]
    },
    {
      "content": "10\\.2.2.11",
      "pos": [
        25855,
        25865
      ]
    },
    {
      "content": "hk-c-aset-2",
      "pos": [
        25868,
        25879
      ]
    },
    {
      "content": "dc =EASTUS 机架 =rack4",
      "pos": [
        25882,
        25902
      ]
    },
    {
      "content": "否",
      "pos": [
        25905,
        25906
      ]
    },
    {
      "content": "hk-w1-east-us",
      "pos": [
        25911,
        25924
      ]
    },
    {
      "content": "Web",
      "pos": [
        25927,
        25930
      ]
    },
    {
      "content": "10\\.2.1.4",
      "pos": [
        25933,
        25942
      ]
    },
    {
      "content": "hk-w-aset-1",
      "pos": [
        25945,
        25956
      ]
    },
    {
      "content": "不适用",
      "pos": [
        25959,
        25962
      ]
    },
    {
      "content": "不适用",
      "pos": [
        25965,
        25968
      ]
    },
    {
      "content": "hk-w2-east-us",
      "pos": [
        25973,
        25986
      ]
    },
    {
      "content": "Web",
      "pos": [
        25989,
        25992
      ]
    },
    {
      "content": "10\\.2.1.5",
      "pos": [
        25995,
        26004
      ]
    },
    {
      "content": "hk-w-aset-1",
      "pos": [
        26007,
        26018
      ]
    },
    {
      "content": "不适用",
      "pos": [
        26021,
        26024
      ]
    },
    {
      "content": "不适用",
      "pos": [
        26027,
        26030
      ]
    },
    {
      "content": "遵循与区域 #1 相同的说明，但使用 10.2.xxx.xxx 地址空间。",
      "pos": [
        26035,
        26072
      ]
    },
    {
      "content": "步骤 9：在每个 VM 上配置 Cassandra",
      "pos": [
        26077,
        26102
      ]
    },
    {
      "content": "登录到 VM 并执行以下操作：",
      "pos": [
        26103,
        26118
      ]
    },
    {
      "content": "编辑 $CASS\\_HOME/conf/cassandra-rackdc.properties 以指定下述格式的数据中心和机架属性：",
      "pos": [
        26123,
        26189
      ]
    },
    {
      "content": "编辑 cassandra.yaml 以配置种子节点：",
      "pos": [
        26234,
        26260
      ]
    },
    {
      "content": "步骤 10：启动 Cassandra",
      "pos": [
        26357,
        26375
      ]
    },
    {
      "content": "登录到每个 VM，然后通过运行以下命令在后台启动 Cassandra：",
      "pos": [
        26376,
        26411
      ]
    },
    {
      "content": "测试多区域群集",
      "pos": [
        26447,
        26454
      ]
    },
    {
      "content": "到目前为止，Cassandra 已部署到 16 个节点，每个 Azure 区域 8 个节点。这些节点具有通用的群集名称和种子节点配置，因此属于同一群集。使用以下过程测试群集：",
      "pos": [
        26455,
        26542
      ]
    },
    {
      "content": "步骤 1：使用 PowerShell 获取这两个区域的内部负载平衡器 IP",
      "pos": [
        26547,
        26584
      ]
    },
    {
      "content": "Get-AzureInternalLoadbalancer -ServiceName \"hk-c-svc-west-us\"",
      "pos": [
        26587,
        26648
      ]
    },
    {
      "content": "Get-AzureInternalLoadbalancer -ServiceName \"hk-c-svc-east-us\"",
      "pos": [
        26651,
        26712
      ]
    },
    {
      "content": "请注意显示的 IP 地址（例如西部 - 10.1.2.101，东部 - 10.2.2.101）。",
      "pos": [
        26720,
        26768
      ]
    },
    {
      "content": "步骤 2：登录到 hk-w1-west-us 以后，在西部地区执行以下命令",
      "pos": [
        26773,
        26810
      ]
    },
    {
      "content": "执行 $CASS\\_HOME/bin/cqlsh 10.1.2.101 9160",
      "pos": [
        26817,
        26857
      ]
    },
    {
      "content": "执行以下 CQL 命令：",
      "pos": [
        26863,
        26875
      ]
    },
    {
      "content": "你应该看到如下所示的显示内容：",
      "pos": [
        27341,
        27356
      ]
    },
    {
      "content": "customer\\_id",
      "pos": [
        27360,
        27372
      ]
    },
    {
      "content": "名",
      "pos": [
        27375,
        27376
      ]
    },
    {
      "content": "姓",
      "pos": [
        27379,
        27380
      ]
    },
    {
      "content": "1",
      "pos": [
        27424,
        27425
      ]
    },
    {
      "content": "John",
      "pos": [
        27428,
        27432
      ]
    },
    {
      "content": "Doe",
      "pos": [
        27435,
        27438
      ]
    },
    {
      "content": "2",
      "pos": [
        27443,
        27444
      ]
    },
    {
      "content": "Jane",
      "pos": [
        27447,
        27451
      ]
    },
    {
      "content": "Doe",
      "pos": [
        27454,
        27457
      ]
    },
    {
      "content": "步骤 3：登录到 hk-w1-east-us 以后，在东部地区执行以下命令：",
      "pos": [
        27465,
        27503
      ]
    },
    {
      "content": "执行 $CASS\\_HOME/bin/cqlsh 10.2.2.101 9160",
      "pos": [
        27510,
        27550
      ]
    },
    {
      "content": "执行以下 CQL 命令：",
      "pos": [
        27556,
        27568
      ]
    },
    {
      "content": "你所看到的显示内容与西部地区的显示内容应该是相同的：",
      "pos": [
        27903,
        27929
      ]
    },
    {
      "content": "customer\\_id",
      "pos": [
        27934,
        27946
      ]
    },
    {
      "content": "名",
      "pos": [
        27949,
        27950
      ]
    },
    {
      "content": "姓",
      "pos": [
        27953,
        27954
      ]
    },
    {
      "content": "1",
      "pos": [
        28000,
        28001
      ]
    },
    {
      "content": "John",
      "pos": [
        28004,
        28008
      ]
    },
    {
      "content": "Doe",
      "pos": [
        28011,
        28014
      ]
    },
    {
      "content": "2",
      "pos": [
        28019,
        28020
      ]
    },
    {
      "content": "Jane",
      "pos": [
        28023,
        28027
      ]
    },
    {
      "content": "Doe",
      "pos": [
        28030,
        28033
      ]
    },
    {
      "content": "再执行一些插入操作，你会看到这些插入内容复制到群集的 west-us 部分。",
      "pos": [
        28038,
        28076
      ]
    },
    {
      "content": "从 Node.js 测试 Cassandra 群集",
      "pos": [
        28081,
        28106
      ]
    },
    {
      "content": "使用以前在“Web”层创建的某个 Linux VM，我们可以执行一个简单的 Node.js 脚本，以便读取以前插入的数据",
      "pos": [
        28107,
        28167
      ]
    },
    {
      "content": "步骤 1：安装 Node.js 和 Cassandra 客户端",
      "pos": [
        28171,
        28202
      ]
    },
    {
      "content": "安装 Node.js 和 npm",
      "pos": [
        28209,
        28225
      ]
    },
    {
      "content": "使用 npm 安装节点包“cassandra-client”",
      "pos": [
        28229,
        28259
      ]
    },
    {
      "content": "在显示已检索数据的 json 字符串的 shell 提示符下执行以下脚本：",
      "pos": [
        28263,
        28300
      ]
    },
    {
      "content": "结束语",
      "pos": [
        31471,
        31474
      ]
    },
    {
      "content": "Azure 是一个灵活的平台，你可以在其中运行本练习所演示的 Microsoft 软件和开源软件。将群集节点分散到多个容错域即可在单个数据中心部署高度可用的 Cassandra 群集。也可以将 Cassandra 群集部署到多个地理距离遥远的 Azure 区域，以便建立防灾系统。使用 Azure 和 Cassandra 能够建立高度可伸缩、高度可用且灾难恢复性强的云服务，满足当今 Internet 缩放服务的需求。",
      "pos": [
        31476,
        31685
      ]
    },
    {
      "content": "参考",
      "pos": [
        31689,
        31691
      ]
    },
    {
      "content": "http://cassandra.apache.org",
      "pos": [
        31697,
        31724
      ]
    },
    {
      "content": "http://www.datastax.com",
      "pos": [
        31758,
        31781
      ]
    },
    {
      "content": "http://www.nodejs.org",
      "pos": [
        31812,
        31833
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"在 Azure 上通过 Linux 运行 Cassandra | Azure\" \n    description=\"如何使用 Node.js 应用在 Azure 虚拟机上通过 Linux 运行 Cassandra 群集\" \n    services=\"virtual-machines\" \n    documentationCenter=\"nodejs\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"\"\n    tags=\"azure-service-management\"/>\n\n<tags\n    ms.service=\"virtual-machines\"\n    ms.date=\"01/09/2016\"\n    wacn.date=\"02/26/2016\"/>\n\n# 在 Azure 上将 Cassandra 与 Linux 一起运行以及通过 Node.js 对其进行访问 \n\n[AZURE.INCLUDE [了解部署模型](../includes/learn-about-deployment-models-classic-include.md)]\n\n## 概述\nAzure 是一种开放式的云平台，该平台运行 Microsoft 软件和非 Microsoft 软件，其中包括：操作系统、应用程序服务器、消息传递中间件，以及 SQL 数据库和 NoSQL 数据库，采用商业模型和开源模型。在包括 Azure 在内的公共云上构建可复原的服务需要针对应用程序服务器和存储层进行仔细的规划和周到的体系结构设计。Cassandra 具有分布式的存储体系结构，这自然有助于构建可用性高的系统，此类系统在发生群集故障时容错性很强。Cassandra 是云级别的 NoSQL 数据库，由 Apache Software Foundation 在 cassandra.apache.org 上进行维护；Cassandra 是以 Java 编写的，因此可以运行在 Windows 和 Linux 平台上。\n\n本文将重点介绍如何在 Ubuntu 上利用 Azure 虚拟机和虚拟网络将 Cassandra 部署为单个和多个数据中心群集。对群集进行部署以实现生产优化型工作负荷不在本文讨论范围之内，因为这要求进行多磁盘节点配置、恰当的环形拓扑设计和数据建模，以便支持所需的复制、数据一致性、吞吐量并满足高可用性要求。\n\n本文采用基本的方法说明构建 Cassandra 群集过程中涉及的因素，并对 Docker、Chef 或 Puppet 进行了比较，这样一来，基础结构的部署就要简单得多。\n\n## 部署模型 \nAzure 网络允许部署独立的专用群集，并可对这些群集的访问进行限制，从而实现能够进行细化管理的网络安全性。由于本文是介绍 Cassandra 部署基础知识的，因此我们不会重点讲解一致性级别以及如何针对吞吐量来优化存储设计的问题。下面是有关网络要求的列表，针对的是我们的假设性群集：\n\n- 外部系统无法访问 Cassandra 数据库，不管是从 Azure 内部还是外部\n- Cassandra 群集必须位于负载平衡器之后，以便进行 Thrift 通信\n- 可以将 Cassandra 节点部署在每个数据中心的两个组中，以便增强群集可用性 \n- 锁定该群集，使得只有应用程序服务器场可以直接访问数据库\n- 除 SSH 之外，没有其他的公共网络终结点\n- 每个 Cassandra 节点需要一个固定的内部 IP 地址\n\nCassandra 可以部署到单个或多个 Azure 区域，具体取决于工作负荷的分布式性质。可以使用多区域部署模型通过相同的 Cassandra 基础结构为靠近特定地理位置的最终用户提供服务。Cassandra 的内置节点复制针对源自多个数据中心的多主机写入同步问题，可以为应用程序提供一致性的数据视图。在出现较大范围的 Azure 服务中断的情况下，多区域部署还有助于降低风险。可以调整 Cassandra 的一致性和复制拓扑，这在满足应用程序的不同 RPO 需求方面很有用。\n\n### 单区域部署\n我们一开始将学习单区域部署，然后再利用所学的知识来创建多区域模型。将使用 Azure 虚拟网络来创建独立的子网，以便满足上述网络安全要求。所描述的单区域部署创建过程使用 Ubuntu 14.04 LTS 和 Cassandra 2.08；不过，可以很容易地对该过程进行调整，使之适用于其他 Linux 变体。以下是单区域部署的部分系统特征。\n\n**高可用性：**图 1 中所示的 Cassandra 节点已部署到两个可用性集，因此这些节点是分布到多个容错域的，可用性很高。VM 被标注了每个可用性集，并已映射到 2 个容错域。Azure 使用容错域这个概念来管理计划外停机（例如，硬件或软件故障），使用升级域（例如，主机或来宾 OS 修补/升级、应用程序升级）这个概念来管理计划内停机。请参阅 [Azure 应用程序的灾难恢复和高可用性](http://msdn.microsoft.com/zh-cn/library/dn251004.aspx)，了解容错域和升级域在实现高可用性方面的作用。\n\n![单区域部署](./media/virtual-machines-linux-nodejs-running-cassandra/cassandra-linux1.png)\n\n图 1：单区域部署\n\n请注意，在撰写本文的时候，Azure 并不允许将一组 VM 显式映射到特定的容错域；因此，即使采用图 1 所示的部署模型，也极有可能会将所有虚拟机映射到两个容错域，而不是四个容错域。\n\n**对 Thrift 通信进行负载平衡：**Web 服务器中的 Thrift 客户端库通过内部负载平衡器连接到群集。在使用云服务托管 Cassandra 群集的情况下，这需要执行相关过程，以便将内部负载平衡器添加到“数据”子网（参见图 1）。定义好内部负载平衡器以后，每个节点都需要添加进行过负载平衡的终结点，并使用以前定义的负载平衡器名称对负载平衡集进行标注。\n\n**群集种子：**必须选择可用性最高的节点作为种子，因为新节点需要与种子节点进行通信才能发现群集的拓扑。将会从每个可用性集中选择一个节点作为种子节点，以免出现单节点故障。\n\n**复制因子和一致性级别：**Cassandra 固有的高可用性和数据耐用性通过复制因子（RF - 存储在群集中的每一行的副本数目）和一致性级别（在将结果返回到调用方之前需要读取/写入的副本数）来表示。复制因子是在创建 KEYSPACE（类似于关系数据库）过程中指定的，而一致性级别则是在发出 CRUD 查询时指定的。有关一致性的详细信息以及进行仲裁计算的公式，请参阅 Cassandra 文档：[针对一致性进行配置](http://www.datastax.com/documentation/cassandra/2.0/cassandra/dml/dml_config_consistency_c.html)。\n\nCassandra 支持两种类型的数据完整性模型 - 一致性和最终一致性；复制因子和一致性级别共同决定了数据是在写操作完成后就表现出一致性，还是最终才表现出一致性。例如，如果指定 QUORUM 作为一致性级别，则只要一致性级别低于需要写入的副本数，就会根据需要写入相应的副本数以满足 QUORUM（例如 1）结果，使得数据最终保持一致。\n\n上面显示的 8 节点群集的复制因子为 3，读/写一致性级别为 QUORUM（读取或写入 2 个节点以确保一致性），因此理论上可以承受每个复制组最多丢失 1 个节点的故障，超出此数目应用程序才会注意到故障的存在。这里假定所有密钥空间的读/写请求均已实现良好的平衡。以下是将要用于已部署群集的参数：\n\n单区域 Cassandra 群集配置：\n\n| 群集参数 | 值 | 备注 |\n| ----------------- | ----- | ------- |\n| 节点数 (N) | 8 | 群集中节点总数 |\n| 复制因子 (RF) | 3 |   给定行副本数 |\n| 一致性级别（写入） | QUORUM [(RF/2) +1) = 2] 公式的结果向下舍入 | 在将响应发送到调用方之前，最多写入 2 个副本；第 3 个副本将采取最终一致性方式写入。 |\n| 一致性级别（读取） | QUORUM [(RF/2) +1= 2] 公式结果向下舍入 | 在将响应发送到调用方之前读取 2 个副本。 |\n| 复制策略 | NetworkTopologyStrategy 请参阅 Cassandra 文档中的[数据复制](http://www.datastax.com/documentation/cassandra/2.0/cassandra/architecture/architectureDataDistributeReplication_c.html)以了解更多信息 | 了解部署拓扑，并将副本置于节点上，以便确保最终不会让所有副本位于同一机架上 |\n| Snitch | GossipingPropertyFileSnitch 请参阅 Cassandra 文档中的 [Snitch](http://www.datastax.com/documentation/cassandra/2.0/cassandra/architecture/architectureSnitchesAbout_c.html) 以获取更多信息 | NetworkTopologyStrategy 使用 snitch 这个概念来了解拓扑。在将每个节点映射到数据中心和机架时，使用 GossipingPropertyFileSnitch 可以更好地进行控制。然后，该群集使用 gossip 来传播此信息。相对于 PropertyFileSnitch，此方法在进行动态 IP 设置时要简单得多 |\n\n\n**针对 Cassandra 群集的 Azure 注意事项：**Azure 虚拟机功能使用 Azure Blob 存储以确保磁盘持久性；Azure 存储空间为每个磁盘保留 3 个副本以确保高耐用性。这意味着插入 Cassandra 表中的每行数据已存储在 3 个副本中，因此即使复制因子 (RF) 为 1，系统也已考虑到了数据一致性。复制因子为 1 的主要问题是，即使单个 Cassandra 节点发生故障，应用程序也会体验到停机。不过，如果某个节点因 Azure 结构控制器检测到问题（例如，硬件故障、系统软件故障）而关闭，则会使用相同的存储驱动器预配一个新节点来代替旧节点。预配一个新节点来代替旧节点可能需要数分钟的时间。类似地，如果要进行规划好的维护活动（例如来宾 OS 更改、Cassandra 升级和应用程序更改），Azure 结构控制器会在群集中对节点进行滚动升级。滚动升级也会一次关闭数个节点，因此该群集会出现数个分区短暂停机的现象。不过，由于固有的 Azure 存储冗余，数据不会丢失。\n\n对于部署到 Azure 但不需要高可用性（例如，约 99.9 的高可用性相当于 8.76 小时/年；有关详细信息，请参阅[高可用性](http://en.wikipedia.org/wiki/High_availability)）的系统，你可以在 RF=1 且一致性级别=1 的情况下运行。对于需要高可用性的应用程序，RF=3 且一致性级别=QUORUM 意味着系统可以承受一个节点的一个副本出现停机的情况。RF=1 在传统部署（例如本地部署）中不能使用，因为如果出现磁盘故障之类的问题，就可能导致数据丢失。\n\n## 多区域部署\nCassandra 的上述数据中心感知型复制和一致性模型可以很方便地进行多区域部署，不需任何外部工具。这与传统的关系数据库大不相同，后者在针对多主机写入进行数据库监视设置时可能需要完成相当复杂的操作。在进行多区域设置时使用 Cassandra 适合多种情况，其中包括：\n\n**基于位置远近的部署：**多租户应用程序如果进行了清楚的从租户用户到区域的映射，则适合采用多区域群集，因为后者的延迟较低。例如，适合教育机构使用的学习管理系统可以在中国东部地区和中国北部地区部署分布式群集，为这两个地区的校园提供事务处理和分析服务。数据在读取和写入时可以在本地保持一致，最终会在这两个地区保持一致。此外还有其他示例，例如媒体分发、电子商务等。不管什么示例，只要其服务对象是集中在某个地理区域的用户群，都适合此部署模型。\n\n**高可用性：**若要实现软硬件的高可用性，冗余很重要；有关详细信息，请参阅“在 Azure 中构建可靠的云系统”。在 Azure 中，若要实现真正的冗余，唯一可靠的方式是部署多区域群集。应用程序可以采用主动-主动或主动-被动模式进行部署。如果某个区域停机，Azure 流量管理器可以将流量重定向到活动区域。对于单区域部署来说，如果可用性为 99.9，则双区域部署可以获得 99.9999 的可用性，通过以下公式进行计算：(1-(1-0.999) * (1-0.999))*100)；有关详细信息，请参阅上面的说明。\n\n**灾难恢复：**多区域 Cassandra 群集如果设计得当，可以承受灾难性的数据中心中断情况。如果某个区域停机，可以通过部署到其他区域的应用程序为最终用户提供服务。与任何其他业务连续性实施一样，该应用程序必须承受某种程度的数据丢失，因为数据位于异步管道中。不过，与传统数据恢复过程相比，Cassandra 提供的恢复过程要快得多。图 2 显示了典型的多区域部署模型，每个区域有 8 个节点。两个区域互为镜像以确保对称性；实际设计取决于工作负荷类型（例如，是事务性还是分析性）、RPO、RTO、数据一致性和可用性要求。\n\n![多区域部署](./media/virtual-machines-linux-nodejs-running-cassandra/cassandra-linux2.png)\n\n图 2：多区域 Cassandra 部署\n\n### 网络集成\n部署到专用网络（位于两个区域）的虚拟机组使用 VPN 隧道互相通信。VPN 隧道连接两个在网络部署过程中预配的软件网关。就“Web”和“数据”子网来说，这两个区域有类似的网络体系结构；Azure 网络允许你根据需要创建多个子网，并根据网络安全需要应用 ACL。在设计群集拓扑时，需要考虑数据数据中心之间的通信延迟，以及网络通信的经济影响。\n\n### 进行多数据中心部署时需要考虑的数据一致性\n进行分布式部署时，需要了解群集拓扑对吞吐量和高可用性的影响。在选择 RF 和一致性级别时，需要确保仲裁不依赖于所有数据中心的可用性。对于需要高一致性的系统来说，如果一致性级别（针对读取和写入）为 LOCAL\\_QUORUM，则可以确保本地读取和写入能够从本地节点得到满足，而数据则会通过异步方式复制到远程数据中心。表 2 汇总了将在后面讲述的多区域群集的配置详细信息。\n\n**双区域 Cassandra 群集配置**\n\n\n| 群集参数 | 值 | 备注 |\n| ----------------- | ----- | ------- |\n| 节点数 (N) | 8 + 8 | 群集中节点总数 |\n| 复制因子 (RF) | 3 | 给定行副本数 |\n| 一致性级别（写入） | LOCAL\\_QUORUM [(sum(RF)/2) +1) = 4] 公式结果向下舍入 | 2 个节点将同步写入第一个数据中心；满足仲裁所需的其余 2 个节点将通过异步方式写入第二个数据中心。 |\n| 一致性级别（读取） | LOCAL\\_QUORUM ((RF/2) +1) = 2 公式结果向下舍入 | 读取请求仅从一个区域满足；在将响应发送回客户端之前，读取 2 个节点。 |\n| 复制策略 | NetworkTopologyStrategy 请参阅 Cassandra 文档中的[数据复制](http://www.datastax.com/documentation/cassandra/2.0/cassandra/architecture/architectureDataDistributeReplication_c.html)以了解更多信息 | 了解部署拓扑，并将副本置于节点上，以便确保最终不会让所有副本位于同一机架上 |\n| Snitch | GossipingPropertyFileSnitch 请参阅 Cassandra 文档中的 [Snitch](http://www.datastax.com/documentation/cassandra/2.0/cassandra/architecture/architectureSnitchesAbout_c.html) 以获取更多信息 | NetworkTopologyStrategy 使用 snitch 这个概念来了解拓扑。在将每个节点映射到数据中心和机架时，使用 GossipingPropertyFileSnitch 可以更好地进行控制。然后，该群集使用 gossip 来传播此信息。相对于 PropertyFileSnitch，此方法在进行动态 IP 设置时要简单得多 | \n \n\n##软件配置\n在部署过程中使用以下软件版本：\n\n<table>\n<tr><th>软件</th><th>源</th><th>版本</th></tr>\n<tr><td>JRE </td><td>[JRE 8](http://www.oracle.com/technetwork/java/javase/downloads/server-jre8-downloads-2133154.html) </td><td>8U5</td></tr>\n<tr><td>JNA </td><td>[JNA](https://github.com/twall/jna) </td><td> 3.2.7</td></tr>\n<tr><td>Cassandra</td><td>[Apache Cassandra 2.0.8](http://www.apache.org/dist/cassandra/2.0.8/apache-cassandra-2.0.8-bin.tar.gz)</td><td> 2.0.8</td></tr>\n<tr><td>Ubuntu  </td><td>[Azure 管理门户](http://www.windowsazure.cn) </td><td>14.04 LTS</td></tr>\n</table>\n\n由于下载 JRE 需要手动接受 Oracle 许可证，为了简化部署，可先将所有必需软件下载到桌面，然后再将其上载到进行群集部署之前需要创建的 Ubuntu 模板映像中。\n\n将以上软件下载到本地计算机上某个已知 的下载目录（例如，Windows 上的 %TEMP%/downloads 或者大多数 Linux 分发或 Mac 上的 ~/Downloads）。\n\n### 创建 Ubuntu VM\n在过程的这个步骤中，我们将使用必备软件创建 Ubuntu 映像，以便重复使用该映像进行多个 Cassandra 节点的预配。\n####步骤 1：生成 SSH 密钥对\nAzure 在进行配置时需要用 PEM 或 DER 编码的 X509 公钥。按照如何在 Azure 上通过 Linux 使用 SSH（可能为英文页面）上的说明进行操作来生成公/私钥对。如果你打算在 Windows 或 Linux 上将 putty.exe 用作 SSH 客户端，则必须使用 puttygen.exe 将 PEM 编码的 RSA 私钥转换为 PPK 格式。可在以上网页中找到有关此操作的说明。\n\n####步骤 2：创建 Ubuntu 模板 VM\n若要创建模板 VM，请登录到 Azure 管理门户并按以下顺序操作：依次单击“新建”、“计算”、“虚拟机”、“从库中”、“Ubuntu”、“Ubuntu Server 14.04 LTS”，然后单击右键头。有关介绍如何创建 Linux VM 的教程，请参阅创建运行 Linux 的虚拟机（可能为英文页面）。\n\n在“虚拟机配置”屏幕 #1 中输入以下信息：\n\n<table>\n<tr><th>字段名称              </td><td>       字段值               </td><td>         备注                </td><tr>\n<tr><td>版本发布日期    </td><td> 从下拉列表中选择日期</td><td></td><tr>\n<tr><td>虚拟机名称    </td><td> cass-template                   </td><td> 这是 VM 的主机名 </td><tr>\n<tr><td>层                    </td><td> 标准                          </td><td> 保留默认值              </td><tr>\n<tr><td>大小                   </td><td> A1                              </td><td>根据 IO 需求选择 VM；为此，请保留默认值 </td><tr>\n<tr><td> 新用户名            </td><td> localadmin                      </td><td> “admin”是 Ubuntu 12.xx 及更高版本中保留的用户名</td><tr>\n<tr><td> 身份验证        </td><td> 单击复选框                 </td><td>检查是否要使用 SSH 密钥进行保护 </td><tr>\n<tr><td> 证书          </td><td> 公钥证书的文件名 </td><td> 使用以前生成的公钥</td><tr>\n<tr><td> 新密码    </td><td> 强密码 </td><td> </td><tr>\n<tr><td> 确认密码   </td><td> 强密码 </td><td></td><tr>\n</table>\n\n在“虚拟机配置”屏幕 #2 中输入以下信息：\n\n<table>\n<tr><th>字段名称             </th><th> 字段值                     </th><th> 备注                                 </th></tr>\n<tr><td> 云服务    </td><td> 创建新的云服务   </td><td>云服务是类似虚拟机的容器计算资源</td></tr>\n<tr><td> 云服务 DNS 名称 </td><td>ubuntu-template.chinacloudapp.cn   </td><td>为计算机提供不可知的负载平衡器名称</td></tr>\n<tr><td> 区域/地缘组/虚拟网络 </td><td>  中国北部    </td><td> 选择你的 Web 应用程序从中访问 Cassandra 群集的区域</td></tr>\n<tr><td>存储帐户 </td><td>  使用默认值   </td><td>使用特定区域的默认存储帐户或预先创建的存储帐户</td></tr>\n<tr><td>可用性集 </td><td>  无 </td><td> 将此字段留空</td></tr>\n<tr><td>终结点 </td><td>使用默认值 </td><td>    使用默认 SSH 配置 </td></tr>\n</table>\n\n单击右箭头，保留屏幕 #3 中的默认设置，然后单击“检查”按钮完成 VM 预配过程。几分钟后，名为“ubuntu-template”的 VM 将处于“正在运行”状态。\n\n###安装必要的软件\n####步骤 1：上载 tarball \n使用 scp 或 pscp，通过以下命令格式将以前下载的软件复制到 ~/downloads 目录：\n\n#####pscp server-jre-8u5-linux-x64.tar.gz localadmin@hk-cas-template.chinacloudapp.cn:/home/localadmin/downloads/server-jre-8u5-linux-x64.tar.gz\n\n对 JRE 和 Cassandra 组件重复以上命令。\n\n####步骤 2：准备目录结构并提取存档\n使用以下 bash 脚本以超级用户身份登录到 VM，然后创建目录结构并提取软件：\n\n    #!/bin/bash\n    CASS_INSTALL_DIR=\"/opt/cassandra\"\n    JRE_INSTALL_DIR=\"/opt/java\"\n    CASS_DATA_DIR=\"/var/lib/cassandra\"\n    CASS_LOG_DIR=\"/var/log/cassandra\"\n    DOWNLOADS_DIR=\"~/downloads\"\n    JRE_TARBALL=\"server-jre-8u5-linux-x64.tar.gz\"\n    CASS_TARBALL=\"apache-cassandra-2.0.8-bin.tar.gz\"\n    SVC_USER=\"localadmin\"\n    \n    RESET_ERROR=1\n    MKDIR_ERROR=2\n    \n    reset_installation ()\n    {\n       rm -rf $CASS_INSTALL_DIR 2> /dev/null\n       rm -rf $JRE_INSTALL_DIR 2> /dev/null\n       rm -rf $CASS_DATA_DIR 2> /dev/null\n       rm -rf $CASS_LOG_DIR 2> /dev/null\n    }\n    make_dir ()\n    {\n       if [ -z \"$1\" ]\n       then\n          echo \"make_dir: invalid directory name\"\n          exit $MKDIR_ERROR\n       fi\n       \n       if [ -d \"$1\" ]\n       then\n          echo \"make_dir: directory already exists\"\n          exit $MKDIR_ERROR\n       fi\n    \n       mkdir $1 2>/dev/null\n       if [ $? != 0 ]\n       then\n          echo \"directory creation failed\"\n          exit $MKDIR_ERROR\n       fi\n    }\n    \n    unzip()\n    {\n       if [ $# == 2 ]\n       then\n          tar xzf $1 -C $2\n       else\n          echo \"archive error\"\n       fi\n       \n    }\n    \n    if [ -n \"$1\" ]\n    then\n       SVC_USER=$1\n    fi\n    \n    reset_installation \n    make_dir $CASS_INSTALL_DIR\n    make_dir $JRE_INSTALL_DIR\n    make_dir $CASS_DATA_DIR\n    make_dir $CASS_LOG_DIR\n    \n    #unzip JRE and Cassandra \n    unzip $HOME/downloads/$JRE_TARBALL $JRE_INSTALL_DIR\n    unzip $HOME/downloads/$CASS_TARBALL $CASS_INSTALL_DIR\n    \n    #Change the ownership to the service credentials\n    \n    chown -R $SVC_USER:$GROUP $CASS_DATA_DIR\n    chown -R $SVC_USER:$GROUP $CASS_LOG_DIR\n    echo \"edit /etc/profile to add JRE to the PATH\"\n    echo \"installation is complete\"\n\n\n如果将此脚本粘贴到 vim 窗口中，请确保使用以下命令删除回车符 ('\\\\r')：\n\n    tr -d '\\r' <infile.sh >outfile.sh\n\n####步骤 3：编辑 etc/profile\n将以下内容附加到结尾：\n\n    JAVA_HOME=/opt/java/jdk1.8.0_05 \n    CASS_HOME= /opt/cassandra/apache-cassandra-2.0.8\n    PATH=$PATH:$HOME/bin:$JAVA_HOME/bin:$CASS_HOME/bin\n    export JAVA_HOME\n    export CASS_HOME\n    export PATH\n\n####第 4 步：为生产系统安装 JNA\n使用以下命令顺序：以下命令会将 jna-3.2.7.jar 和 jna-platform-3.2.7.jar 安装到 /usr/share.java 目录 sudo apt-get install libjna-java\n\n在 $CASS\\_HOME/lib 目录中创建符号链接，以便 Cassandra 启动脚本能够找到这些 jar：\n\n    ln -s /usr/share/java/jna-3.2.7.jar $CASS_HOME/lib/jna.jar\n\n    ln -s /usr/share/java/jna-platform-3.2.7.jar $CASS_HOME/lib/jna-platform.jar\n\n####步骤 5：配置 cassandra.yaml\n编辑每个 VM 上的 cassandra.yaml，使之能够反映所有虚拟机所需的配置 [在实际预配过程中，我们会对此进行调整]：\n\n<table>\n<tr><th>字段名称   </th><th> 值  </th><th>   备注 </th></tr>\n<tr><td>cluster_name </td><td>  “CustomerService”   </td><td> 使用能够反映你的部署的名称</td></tr> \n<tr><td>listen_address  </td><td>[将此字段留空]   </td><td> 删除“localhost” </td></tr>\n<tr><td>rpc_addres   </td><td>[将此字段留空]  </td><td> 删除“localhost” </td></tr>\n<tr><td>种子  </td><td>“10.1.2.4、10.1.2.6、10.1.2.8”   </td><td>所有已指定为种子的 IP 地址的列表。</td></tr>\n<tr><td>endpoint_snitch </td><td> org.apache.cassandra.locator.GossipingPropertyFileSnitch </td><td> 此字段由 NetworkTopologyStrateg 用来推断数据中心以及 VM 的机架</td></tr>\n</table>\n\n####步骤 6：捕获 VM 映像\n使用以前创建的主机名 (hk-cas-template.chinacloudapp.cn) 和 SSH 私钥登录到虚拟机。请参阅“如何在 Azure 上通过 Linux 使用 SSH”，以详细了解如何使用命令 ssh 或 putty.exe 登录。\n\n执行以下顺序的操作以捕获映像：\n#####1\\.预配\n使用命令“sudo waagent -deprovision+user”删除特定于虚拟机实例的信息。请参阅[如何捕获将用作模板的 Linux 虚拟机](/documentation/articles/virtual-machines-linux-capture-image)，了解映像捕获过程的详细信息。\n\n#####2：关闭 VM\n确保突出显示该虚拟机，然后单击底部命令栏中的“关闭”链接。\n\n#####3：捕获映像\n确保突出显示该虚拟机，然后单击底部命令栏中的“捕获”链接。在下一屏幕中，请提供映像名称（例如 hk-cas-2-08-ub-14-04-2014071）、适当的映像描述，然后单击“检查”标记完成捕获过程。\n\n这将需要数秒钟的时间，然后映像就会出现在映像库中的“我的映像”部分。成功捕获映像后，将会自动删除源 VM。\n\n##单区域部署过程\n**步骤 1：创建虚拟网络**\n登录到 Azure 管理门户，然后使用下表中的属性创建虚拟网络。请参阅[在 Azure 管理门户中配置只使用云的虚拟网络](/documentation/articles/virtual-networks-create-vnet-classic-portal)，以了解此过程的详细步骤。\n\n<table>\n<tr><th>VM 属性名称</th><th>值</th><th>备注</th></tr>\n<tr><td>Name</td><td>vnet-cass-west-us</td><td></td></tr>   \n<tr><td>区域</td><td>中国北部</td><td></td></tr>  \n<tr><td>DNS 服务器 </td><td>无</td><td>将其忽略，因为我们不使用 DNS 服务器</td></tr>\n<tr><td>配置点到站点 VPN</td><td>无</td><td> 将其忽略</td></tr>\n<tr><td>配置站点到站点 VPN</td><td>无</td><td> 将其忽略</td></tr>\n<tr><td>地址空间</td><td>10.1.0.0/16</td><td></td></tr> \n<tr><td>起始 IP</td><td>10.1.0.0</td><td></td></tr>   \n<tr><td>CIDR </td><td>/16 (65531)</td><td></td></tr>\n</table>\n\n添加以下子网：\n\n<table>\n<tr><th>Name</th><th>起始 IP</th><th>CIDR</th><th>备注</th></tr>\n<tr><td>Web</td><td>10.1.1.0</td><td>/24 (251)</td><td>Web 场的子网</td></tr>\n<tr><td>数据</td><td>10.1.2.0</td><td>/24 (251)</td><td>数据库节点的子网</td></tr>\n</table>\n\n数据和 Web 子网可以通过网络安全组进行保护，此方面的内容不在本文讲述范围之内。\n\n**步骤 2：预配虚拟机**\n使用前面创建的映像，我们可以在云服务器“hk-c-svc-west”中创建以下虚拟机并将其绑定到相应的子网，如下所示：\n\n<table>\n<tr><th>计算机名称    </th><th>子网    </th><th>IP 地址  </th><th>可用性集</th><th>DC/机架</th><th>种子？</th></tr>\n<tr><td>hk-c1-west-us   </td><td>数据 </td><td>10.1.2.4   </td><td>hk-c-aset-1    </td><td>dc =WESTUS 机架 =rack1 </td><td>是</td></tr>\n<tr><td>hk-c2-west-us   </td><td>数据 </td><td>10.1.2.5   </td><td>hk-c-aset-1    </td><td>dc =WESTUS 机架 =rack1   </td><td>否 </td></tr>\n<tr><td>hk-c3-west-us   </td><td>数据 </td><td>10.1.2.6   </td><td>hk-c-aset-1    </td><td>dc =WESTUS 机架 =rack2   </td><td>是</td></tr>\n<tr><td>hk-c4-west-us   </td><td>数据 </td><td>10.1.2.7   </td><td>hk-c-aset-1    </td><td>dc =WESTUS 机架 =rack2   </td><td>否 </td></tr>\n<tr><td>hk-c5-west-us   </td><td>数据 </td><td>10.1.2.8   </td><td>hk-c-aset-2    </td><td>dc =WESTUS 机架 =rack3   </td><td>是</td></tr>\n<tr><td>hk-c6-west-us   </td><td>数据 </td><td>10.1.2.9   </td><td>hk-c-aset-2    </td><td>dc =WESTUS 机架 =rack3   </td><td>否 </td></tr>\n<tr><td>hk-c7-west-us   </td><td>数据 </td><td>10.1.2.10  </td><td>hk-c-aset-2    </td><td>dc =WESTUS 机架 =rack4   </td><td>是</td></tr>\n<tr><td>hk-c8-west-us   </td><td>数据 </td><td>10.1.2.11  </td><td>hk-c-aset-2    </td><td>dc =WESTUS 机架 =rack4   </td><td>否 </td></tr>\n<tr><td>hk-w1-west-us   </td><td>Web    </td><td>10.1.1.4   </td><td>hk-w-aset-1    </td><td>                       </td><td>不适用</td></tr>\n<tr><td>hk-w2-west-us   </td><td>Web    </td><td>10.1.1.5   </td><td>hk-w-aset-1    </td><td>                       </td><td>不适用</td></tr>\n</table>\n\n创建以上 VM 列表需要完成以下过程：\n\n1.  在特定区域创建空的云服务\n2.  从以前捕获的映像创建 VM，然后将其附加到以前创建的虚拟网络；对所有 VM 重复此过程\n3.  将内部负载平衡器添加到云服务，然后将其附加到“数据”子网\n4.  对于以前创建的每个 VM，可以通过一个已连接到以前创建的内部负载平衡器的负载平衡集添加进行 Thrift 通信的负载平衡终结点\n\n以上过程可以通过 Azure 管理门户来执行；使用 Windows 计算机（如果无法访问 Windows 计算机，则可使用 Azure 上的 VM）；使用以下 PowerShell 脚本自动预配所有 8 个 VM。\n\n**列表 1：适用于预配虚拟机的 PowerShell 脚本**\n        \n        #Tested with Azure Powershell - November 2014   \n        #This powershell script deployes a number of VMs from an existing image inside an Azure region\n        #Import your Azure subscription into the current Powershell session before proceeding\n        #The process: 1. create Azure Storage account, 2. create virtual network, 3.create the VM template, 2. crate a list of VMs from the template\n        \n        #fundamental variables - change these to reflect your subscription\n        $country=\"us\"; $region=\"west\"; $vnetName = \"your_vnet_name\";$storageAccount=\"your_storage_account\"\n        $numVMs=8;$prefix = \"hk-cass\";$ilbIP=\"your_ilb_ip\"\n        $subscriptionName = \"Azure_subscription_name\"; \n        $vmSize=\"ExtraSmall\"; $imageName=\"your_linux_image_name\"\n        $ilbName=\"ThriftInternalLB\"; $thriftEndPoint=\"ThriftEndPoint\"\n        \n        #generated variables\n        $serviceName = \"$prefix-svc-$region-$country\"; $azureRegion = \"$region $country\"\n        \n        $vmNames = @()\n        for ($i=0; $i -lt $numVMs; $i++)\n        {\n           $vmNames+=(\"$prefix-vm\"+($i+1) + \"-$region-$country\" );\n        }\n        \n        #select an Azure subscription already imported into Powershell session\n        Select-AzureSubscription -SubscriptionName $subscriptionName -Current\n        Set-AzureSubscription -Environment AzureChinaCloud -SubscriptionName $subscriptionName -CurrentStorageAccountName $storageAccount\n        \n        #create an empty cloud service\n        New-AzureService -ServiceName $serviceName -Label \"hkcass$region\" -Location $azureRegion\n        Write-Host \"Created $serviceName\"\n        \n        $VMList= @()   # stores the list of azure vm configuration objects\n        #create the list of VMs\n        foreach($vmName in $vmNames)\n        {\n           $VMList += New-AzureVMConfig -Name $vmName -InstanceSize ExtraSmall -ImageName $imageName |\n           Add-AzureProvisioningConfig -Linux -LinuxUser \"localadmin\" -Password \"Local123\" |\n           Set-AzureSubnet \"data\"\n        }\n        \n        New-AzureVM -ServiceName $serviceName -VNetName $vnetName -VMs $VMList\n        \n        #Create internal load balancer\n        Add-AzureInternalLoadBalancer -ServiceName $serviceName -InternalLoadBalancerName $ilbName -SubnetName \"data\" -StaticVNetIPAddress \"$ilbIP\"\n        Write-Host \"Created $ilbName\"\n        #Add add the thrift endpoint to the internal load balancer for all the VMs\n        foreach($vmName in $vmNames)\n        {\n            Get-AzureVM -ServiceName $serviceName -Name $vmName |\n                Add-AzureEndpoint -Name $thriftEndPoint -LBSetName \"ThriftLBSet\" -Protocol tcp -LocalPort 9160 -PublicPort 9160 -ProbePort 9160 -ProbeProtocol tcp -ProbeIntervalInSeconds 10 -InternalLoadBalancerName $ilbName | \n                Update-AzureVM \n        \n            Write-Host \"created $vmName\"     \n        }\n\n**步骤 3：在每个 VM 上配置 Cassandra**\n\n登录到 VM 并执行以下操作：\n\n* 编辑 $CASS\\_HOME/conf/cassandra-rackdc.properties 以指定数据中心和机架属性：\n      \n       dc =EASTUS，机架 =rack1\n\n* 编辑 cassandra.yaml，将种子节点配置如下：\n     \n       种子：“10.1.2.4,10.1.2.6,10.1.2.8,10.1.2.10”\n\n**步骤 4：启动 VM 并测试群集**\n\n登录到其中一个节点（例如 hk-c1-west-us），然后运行以下命令以查看群集的状态：\n       \n       nodetool -h 10.1.2.4 -p 7199 status \n\n对于 8 节点群集，你所看到的显示内容将如下所示：\n\n<table>\n<tr><th>状态</th></th>地址  </th><th>加载 </th><th>令牌 </th><th>所有 </th><th>主机 ID  </th><th>机架</th></tr>\n<tr><th>UN  </td><td>10.1.2.4   </td><td>87.81 KB   </td><td>256    </td><td>38.0%  </td><td>Guid（已删除）</td><td>rack1</td></tr>\n<tr><th>UN  </td><td>10.1.2.5   </td><td>41.08 KB   </td><td>256    </td><td>68.9%  </td><td>Guid（已删除）</td><td>rack1</td></tr>\n<tr><th>UN  </td><td>10.1.2.6   </td><td>55.29 KB   </td><td>256    </td><td>68.8%  </td><td>Guid（已删除）</td><td>rack2</td></tr>\n<tr><th>UN  </td><td>10.1.2.7   </td><td>55.29 KB   </td><td>256    </td><td>68.8%  </td><td>Guid（已删除）</td><td>rack2</td></tr>\n<tr><th>UN  </td><td>10.1.2.8   </td><td>55.29 KB   </td><td>256    </td><td>68.8%  </td><td>Guid（已删除）</td><td>rack3</td></tr>\n<tr><th>UN  </td><td>10.1.2.9   </td><td>55.29 KB   </td><td>256    </td><td>68.8%  </td><td>Guid（已删除）</td><td>rack3</td></tr>\n<tr><th>UN  </td><td>10.1.2.10  </td><td>55.29 KB   </td><td>256    </td><td>68.8%  </td><td>Guid（已删除）</td><td>rack4</td></tr>\n<tr><th>UN  </td><td>10.1.2.11  </td><td>55.29 KB   </td><td>256    </td><td>68.8%  </td><td>Guid（已删除）</td><td>rack4</td></tr>\n</table>\n\n## 测试单区域群集\n使用以下步骤测试群集：\n\n1.    使用 Powershell 命令 Get-AzureInternalLoadbalancer cmdlet 获取内部负载平衡器的 IP 地址（例如 10.1.2.101）。该命令的语法如下所示：Get-AzureLoadbalancer -ServiceName \"hk-c-svc-west-us\" [显示内部负载平衡器及其 IP 地址的详细信息]\n2.  使用 Putty 或 ssh 登录到 Web 场 VM（例如 hk-w1-west-us）\n3.  执行 $CASS\\_HOME/bin/cqlsh 10.1.2.101 9160 \n4.  使用以下 CQL 命令验证群集是否正常工作：\n\n        CREATE KEYSPACE customers_ks WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 3 };   \n        USE customers_ks;\n        CREATE TABLE Customers(customer_id int PRIMARY KEY, firstname text, lastname text);\n        INSERT INTO Customers(customer_id, firstname, lastname) VALUES(1, 'John', 'Doe');\n        INSERT INTO Customers(customer_id, firstname, lastname) VALUES (2, 'Jane', 'Doe');\n        \n        SELECT * FROM Customers;\n\n你应该看到如下所示的显示内容：\n\n<table>\n  <tr><th> customer_id </th><th> 名 </th><th> 姓 </th></tr>\n  <tr><td> 1 </td><td> John </td><td> Doe </td></tr>\n  <tr><td> 2 </td><td> Jane </td><td> Doe </td></tr>\n</table>\n\n请注意，在步骤 4 中创建的密钥空间使用 SimpleStrategy 并已将 a replication\\_factor 设置为 3。建议使用 SimpleStrategy 进行单数据中心部署，使用 NetworkTopologyStrategy 进行多数据中心部署。将 replication\\_factor 设置为 3 即可承受节点故障。\n\n##<a id=\"tworegion\"> </a>多区域部署过程\n将利用已完成的单区域部署，并在安装第二个区域时重复相同的过程。单区域部署和多区域部署的主要区别是 VPN 隧道，设置该隧道是为了进行区域间通信；我们一开始将进行网络安装，并完成 VM 预配和 Cassandra 配置。\n\n###步骤 1：在第二个区域创建虚拟网络\n登录到 Azure 管理门户，然后使用下表中的属性创建虚拟网络。请参阅[在 Azure 管理门户中配置只使用云的虚拟网络](/documentation/articles/virtual-networks-create-vnet-classic-portal)，以了解此过程的详细步骤。\n\n<table>\n<tr><th>属性名称    </th><th>值  </th><th>备注</th></tr>\n<tr><td>Name    </td><td>vnet-cass-east-us</td><td></td></tr>   \n<tr><td>区域  </td><td>中国东部</td><td></td></tr>    \n<tr><td>DNS 服务器     </td><td></td><td>将其忽略，因为我们不使用 DNS 服务器</td></tr>\n<tr><td>配置点到站点 VPN</td><td></td><td>        将其忽略</td></tr>\n<tr><td>配置站点到站点 VPN</td><td></td><td>       将其忽略</td></tr>\n<tr><td>地址空间    </td><td>10.2.0.0/16</td><td></td></tr> \n<tr><td>起始 IP   </td><td>10.2.0.0   </td><td></td></tr>\n<tr><td>CIDR    </td><td>/16 (65531)</td><td></td></tr>\n</table>\n\n添加以下子网：<table> <tr><th>名称 </th><th>起始 IP </th><th>CIDR </th><th>备注</th></tr> <tr><td>Web </td><td>10.2.1.0 </td><td>/24 (251) </td><td>Web 场的子网</td></tr> <tr><td>数据 </td><td>10.2.2.0 </td><td>/24 (251) </td><td>数据库节点的子网</td></tr> </table>\n\n\n###步骤 2：创建本地网络\nAzure 虚拟网络中的本地网络是一个代理地址空间，该空间映射到包括私有云或其他 Azure 区域在内的远程站点。此代理地址空间绑定到远程网关，可以将网络路由到正确的网络目标。请参阅[配置 VNet 到 VNet 连接](/documentation/articles/virtual-networks-configure-vnet-to-vnet-connection)，以获取建立 VNET 到 VNET 连接的说明。\n\n按照以下详细信息创建两个本地网络：\n\n| 网络名称 | VPN 网关地址 | 地址空间 | 备注 |\n| ------------ | ------------------- | ------------- | ------- |\n| hk-lnet-map-to-east-us | 23\\.1.1.1 | 10\\.2.0.0/16 | 在创建本地网络时，请提供一个占位符网关地址。创建网关后需填充实际的网关地址。请确保地址空间与相应的远程 VNET 完全匹配；在本示例中，该 VNET 是在中国东部地区创建的。 |\n| hk-lnet-map-to-west-us | 23\\.2.2.2 | 10\\.1.0.0/16 | 在创建本地网络时，请提供一个占位符网关地址。创建网关后需填充实际的网关地址。请确保地址空间与相应的远程 VNET 完全匹配；在本示例中，该 VNET 是在中国北部地区创建的。 |\n\n\n###步骤 3：将“本地”网络映射到相应的 VNET\n在 Azure 管理门户中，选择每个 VNET，单击“配置”，选中“连接到本地网络”，然后按照以下详细信息选择本地网络：\n\n\n| 虚拟网络 | 本地网络 |\n| --------------- | ------------- |\n| hk-vnet-west-us | hk-lnet-map-to-east-us |\n| hk-vnet-east-us | hk-lnet-map-to-west-us |\n\n\n###步骤 4：在 VNET1 和 VNET2 上创建网关\n在这两个虚拟网络的仪表板中，单击“创建网关”，然后就会触发 VPN 网关预配过程。几分钟后，每个虚拟网络的仪表板就会显示实际网关地址。\n\n###步骤 5：使用相应的“网关”地址更新“本地”网络###\n编辑这两个本地网络，将占位符网关 IP 地址替换为刚预配的网关的实际 IP 地址。使用以下映射：\n\n<table>\n<tr><th>本地网络    </th><th>虚拟网络网关</th></tr>\n<tr><td>hk-lnet-map-to-east-us </td><td>hk-vnet-west-us 的网关</td></tr>\n<tr><td>hk-lnet-map-to-west-us </td><td>hk-vnet-east-us 的网关</td></tr>\n</table>\n\n###步骤 6：更新共享密钥\n使用以下 Powershell 脚本更新每个 VPN 网关的 IPSec 密钥 [使用这两个网关的 sake 密钥]：Set-AzureVNetGatewayKey -VNetName hk-vnet-east-us -LocalNetworkSiteName hk-lnet-map-to-west-us -SharedKey D9E76BKK Set-AzureVNetGatewayKey -VNetName hk-vnet-west-us -LocalNetworkSiteName hk-lnet-map-to-east-us -SharedKey D9E76BKK\n\n###步骤 7：建立 VNET 到 VNET 连接\n在 Azure 管理门户中，使用这两个虚拟网络的“仪表板”菜单建立网关到网关连接。使用底部工具栏中的“连接”菜单项。几分钟后，仪表板会以图形方式显示连接详细信息。\n\n###步骤 8：在区域 #2 中创建虚拟机 \n按照相同步骤创建区域 #1 部署中描述的 Ubuntu 映像，或者将映像 VHD 文件复制到区域 #2 中的 Azure 存储帐户，然后创建该映像。使用该映像，将下列虚拟机创建到新的云服务 hk-c-svc-east-us 中：\n\n\n| 计算机名称 | 子网 | IP 地址 | 可用性集 | DC/机架 | 种子？ |\n| ------------ | ------ | ---------- | ---------------- | ------- | ----- |\n| hk-c1-east-us | 数据 | 10\\.2.2.4 | hk-c-aset-1 | dc =EASTUS 机架 =rack1 | 是 |\n| hk-c2-east-us | 数据 | 10\\.2.2.5 | hk-c-aset-1 | dc =EASTUS 机架 =rack1 | 否 |\n| hk-c3-east-us | 数据 | 10\\.2.2.6 | hk-c-aset-1 | dc =EASTUS 机架 =rack2 | 是 |\n| hk-c5-east-us | 数据 | 10\\.2.2.8 | hk-c-aset-2 | dc =EASTUS 机架 =rack3 | 是 |\n| hk-c6-east-us | 数据 | 10\\.2.2.9 | hk-c-aset-2 | dc =EASTUS 机架 =rack3 | 否 |\n| hk-c7-east-us | 数据 | 10\\.2.2.10 | hk-c-aset-2 | dc =EASTUS 机架 =rack4 | 是 |\n| hk-c8-east-us | 数据 | 10\\.2.2.11 | hk-c-aset-2 | dc =EASTUS 机架 =rack4 | 否 |\n| hk-w1-east-us | Web | 10\\.2.1.4 | hk-w-aset-1 | 不适用 | 不适用 |\n| hk-w2-east-us | Web | 10\\.2.1.5 | hk-w-aset-1 | 不适用 | 不适用 |\n\n\n遵循与区域 #1 相同的说明，但使用 10.2.xxx.xxx 地址空间。\n\n###步骤 9：在每个 VM 上配置 Cassandra\n登录到 VM 并执行以下操作：\n\n1. 编辑 $CASS\\_HOME/conf/cassandra-rackdc.properties 以指定下述格式的数据中心和机架属性：\n\n        dc =EASTUS\n        rack =rack1\n\n2. 编辑 cassandra.yaml 以配置种子节点：\n\n        Seeds: \"10.1.2.4,10.1.2.6,10.1.2.8,10.1.2.10,10.2.2.4,10.2.2.6,10.2.2.8,10.2.2.10\"\n\n###步骤 10：启动 Cassandra\n登录到每个 VM，然后通过运行以下命令在后台启动 Cassandra：\n\n    $CASS\\_HOME/bin/cassandra\n\n## 测试多区域群集\n到目前为止，Cassandra 已部署到 16 个节点，每个 Azure 区域 8 个节点。这些节点具有通用的群集名称和种子节点配置，因此属于同一群集。使用以下过程测试群集：\n\n###步骤 1：使用 PowerShell 获取这两个区域的内部负载平衡器 IP\n- Get-AzureInternalLoadbalancer -ServiceName \"hk-c-svc-west-us\"\n- Get-AzureInternalLoadbalancer -ServiceName \"hk-c-svc-east-us\"  \n\n    请注意显示的 IP 地址（例如西部 - 10.1.2.101，东部 - 10.2.2.101）。\n\n###步骤 2：登录到 hk-w1-west-us 以后，在西部地区执行以下命令\n1.    执行 $CASS\\_HOME/bin/cqlsh 10.1.2.101 9160 \n2.  执行以下 CQL 命令：\n\n        CREATE KEYSPACE customers_ks\n        WITH REPLICATION = { 'class' : 'NetworkToplogyStrategy', 'WESTUS' : 3, 'EASTUS' : 3};\n        USE customers_ks;\n        CREATE TABLE Customers(customer_id int PRIMARY KEY, firstname text, lastname text);\n        INSERT INTO Customers(customer_id, firstname, lastname) VALUES(1, 'John', 'Doe');\n        INSERT INTO Customers(customer_id, firstname, lastname) VALUES (2, 'Jane', 'Doe');\n        SELECT * FROM Customers;\n\n你应该看到如下所示的显示内容：\n\n| customer\\_id | 名 | 姓 |\n| ----------- | --------- | -------- |\n| 1 | John | Doe |\n| 2 | Jane | Doe |\n\n\n###步骤 3：登录到 hk-w1-east-us 以后，在东部地区执行以下命令：\n1.    执行 $CASS\\_HOME/bin/cqlsh 10.2.2.101 9160 \n2.  执行以下 CQL 命令：\n\n        USE customers_ks;\n        CREATE TABLE Customers(customer_id int PRIMARY KEY, firstname text, lastname text);\n        INSERT INTO Customers(customer_id, firstname, lastname) VALUES(1, 'John', 'Doe');\n        INSERT INTO Customers(customer_id, firstname, lastname) VALUES (2, 'Jane', 'Doe');\n        SELECT * FROM Customers;\n\n你所看到的显示内容与西部地区的显示内容应该是相同的：\n\n\n| customer\\_id | 名 | 姓 |\n|------------ | --------- | ---------- |\n| 1 | John | Doe |\n| 2 | Jane | Doe |\n\n\n再执行一些插入操作，你会看到这些插入内容复制到群集的 west-us 部分。\n\n## 从 Node.js 测试 Cassandra 群集\n使用以前在“Web”层创建的某个 Linux VM，我们可以执行一个简单的 Node.js 脚本，以便读取以前插入的数据\n\n**步骤 1：安装 Node.js 和 Cassandra 客户端**\n\n1. 安装 Node.js 和 npm\n2. 使用 npm 安装节点包“cassandra-client”\n3. 在显示已检索数据的 json 字符串的 shell 提示符下执行以下脚本： \n\n        var pooledCon = require('cassandra-client').PooledConnection;\n        var ksName = \"custsupport_ks\";\n        var cfName = \"customers_cf\";\n        var hostList = ['internal_loadbalancer_ip:9160'];\n        var ksConOptions = { hosts: hostList,\n                             keyspace: ksName, use_bigints: false };\n        \n        function createKeyspace(callback){\n           var cql = 'CREATE KEYSPACE ' + ksName + ' WITH strategy_class=SimpleStrategy AND strategy_options:replication_factor=1';\n           var sysConOptions = { hosts: hostList,  \n                                 keyspace: 'system', use_bigints: false };\n           var con = new pooledCon(sysConOptions);\n           con.execute(cql,[],function(err) {\n           if (err) {\n             console.log(\"Failed to create Keyspace: \" + ksName);\n             console.log(err);\n           }\n           else {\n             console.log(\"Created Keyspace: \" + ksName);\n             callback(ksConOptions, populateCustomerData);\n           }\n           });\n           con.shutdown();\n        } \n        \n        function createColumnFamily(ksConOptions, callback){\n          var params = ['customers_cf','custid','varint','custname',\n                        'text','custaddress','text'];\n          var cql = 'CREATE COLUMNFAMILY ? (? ? PRIMARY KEY,? ?, ? ?)';\n        var con =  new pooledCon(ksConOptions);\n          con.execute(cql,params,function(err) {\n              if (err) {\n                 console.log(\"Failed to create column family: \" + params[0]);\n                 console.log(err);\n              }\n              else {\n                 console.log(\"Created column family: \" + params[0]);\n                 callback();\n              }\n          });\n          con.shutdown();\n        } \n        \n        //populate Data\n        function populateCustomerData() {\n           var params = ['John','Infinity Dr, TX', 1];\n           updateCustomer(ksConOptions,params);\n        \n           params = ['Tom','Fermat Ln, WA', 2];\n           updateCustomer(ksConOptions,params);\n        }\n        \n        //update will also insert the record if none exists\n        function updateCustomer(ksConOptions,params)\n        {\n          var cql = 'UPDATE customers_cf SET custname=?,custaddress=? where custid=?';\n          var con = new pooledCon(ksConOptions);\n          con.execute(cql,params,function(err) {\n              if (err) console.log(err);\n              else console.log(\"Inserted customer : \" + params[0]);\n          });\n          con.shutdown();\n        }\n        \n        //read the two rows inserted above\n        function readCustomer(ksConOptions)\n        {\n          var cql = 'SELECT * FROM customers_cf WHERE custid IN (1,2)';\n          var con = new pooledCon(ksConOptions);\n          con.execute(cql,[],function(err,rows) {\n              if (err) \n                 console.log(err);\n              else \n                 for (var i=0; i<rows.length; i++)\n                    console.log(JSON.stringify(rows[i]));\n            });\n           con.shutdown();\n        }\n        \n        //exectue the code\n        createKeyspace(createColumnFamily);\n        readCustomer(ksConOptions)\n\n\n## 结束语 \nAzure 是一个灵活的平台，你可以在其中运行本练习所演示的 Microsoft 软件和开源软件。将群集节点分散到多个容错域即可在单个数据中心部署高度可用的 Cassandra 群集。也可以将 Cassandra 群集部署到多个地理距离遥远的 Azure 区域，以便建立防灾系统。使用 Azure 和 Cassandra 能够建立高度可伸缩、高度可用且灾难恢复性强的云服务，满足当今 Internet 缩放服务的需求。\n\n##参考##\n- [http://cassandra.apache.org](http://cassandra.apache.org)\n- [http://www.datastax.com](http://www.datastax.com) \n- [http://www.nodejs.org](http://www.nodejs.org) \n\n<!---HONumber=Mooncake_0215_2016-->"
}