<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">739d175ab67a7d305da2df63b8d211e326b6778b</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>开始使用 Azure 存储空间和 Visual Studio 连接服务（WebJob 项目）</source>
          <target state="new">开始使用 Azure 存储空间和 Visual Studio 连接服务（WebJob 项目）</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的 Azure WebJobs 项目中使用 Azure 表存储</source>
          <target state="new">在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的 Azure WebJobs 项目中使用 Azure 表存储</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure 存储入门（Azure WebJob 项目）</source>
          <target state="new">Azure 存储入门（Azure WebJob 项目）</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本文章提供了 C# 代码示例，用于演示如何在 Azure 表存储服务中使用 Azure WebJobs SDK 版本 1.x。这些代码示例使用 <bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 版本 1.x。</source>
          <target state="new">本文章提供了 C# 代码示例，用于演示如何在 Azure 表存储服务中使用 Azure WebJobs SDK 版本 1.x。这些代码示例使用 <bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 版本 1.x。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。有关详细信息，请参阅<bpt id="p1">[</bpt>如何通过.NET 使用表存储<ept id="p1">]</ept><bpt id="p2">(/documentation/articles/storage-dotnet-how-to-use-tables#create-a-table "</bpt>如何通过 .NET 使用表存储<ept id="p2">")</ept>。</source>
          <target state="new">Azure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。有关详细信息，请参阅<bpt id="p1">[</bpt>如何通过.NET 使用表存储<ept id="p1">]</ept><bpt id="p2">(/documentation/articles/storage-dotnet-how-to-use-tables#create-a-table "</bpt>如何通过 .NET 使用表存储<ept id="p2">")</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>一些代码段显示了<bpt id="p1">[</bpt>手动调用<ept id="p1">](/documentation/articles/vs-storage-webjobs-getting-started-blobs#manual)</ept>（即：不是使用触发器属性之一调用）的函数中使用的 <bpt id="p2">**</bpt>Table<ept id="p2">**</ept> 属性。</source>
          <target state="new">一些代码段显示了<bpt id="p1">[</bpt>手动调用<ept id="p1">](/documentation/articles/vs-storage-webjobs-getting-started-blobs#manual)</ept>（即：不是使用触发器属性之一调用）的函数中使用的 <bpt id="p2">**</bpt>Table<ept id="p2">**</ept> 属性。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>如何向表中添加实体</source>
          <target state="new">如何向表中添加实体</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>若要将实体添加到表中，请使用具有 <bpt id="p1">**</bpt>ICollector<ph id="ph1">&lt;T&gt;</ph><ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>IAsyncCollector<ph id="ph2">&lt;T&gt;</ph><ept id="p2">**</ept> 参数的 <bpt id="p3">**</bpt>Table<ept id="p3">**</ept> 属性，其中 <bpt id="p4">**</bpt>T<ept id="p4">**</ept> 指定你想要添加的实体的架构。属性构造函数使用指定表名称的字符串参数。</source>
          <target state="new">若要将实体添加到表中，请使用具有 <bpt id="p1">**</bpt>ICollector<ph id="ph1">&lt;T&gt;</ph><ept id="p1">**</ept> 或 <bpt id="p2">**</bpt>IAsyncCollector<ph id="ph2">&lt;T&gt;</ph><ept id="p2">**</ept> 参数的 <bpt id="p3">**</bpt>Table<ept id="p3">**</ept> 属性，其中 <bpt id="p4">**</bpt>T<ept id="p4">**</ept> 指定你想要添加的实体的架构。属性构造函数使用指定表名称的字符串参数。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>下面的代码示例将 <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> 实体添加到名为 <bpt id="p2">*</bpt>Ingress<ept id="p2">*</ept> 的表。</source>
          <target state="new">下面的代码示例将 <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> 实体添加到名为 <bpt id="p2">*</bpt>Ingress<ept id="p2">*</ept> 的表。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>通常情况下，用于 <bpt id="p1">**</bpt>ICollector<ept id="p1">**</ept> 的类型派生自 <bpt id="p2">**</bpt>TableEntity<ept id="p2">**</ept> 或者通过实现 <bpt id="p3">**</bpt>ITableEntity<ept id="p3">**</ept> 获得，但这不是必需的。以下 <bpt id="p4">**</bpt>Person<ept id="p4">**</ept> 类之一适用于前面 <bpt id="p5">**</bpt>Ingress<ept id="p5">**</ept> 方法中所示的代码。</source>
          <target state="new">通常情况下，用于 <bpt id="p1">**</bpt>ICollector<ept id="p1">**</ept> 的类型派生自 <bpt id="p2">**</bpt>TableEntity<ept id="p2">**</ept> 或者通过实现 <bpt id="p3">**</bpt>ITableEntity<ept id="p3">**</ept> 获得，但这不是必需的。以下 <bpt id="p4">**</bpt>Person<ept id="p4">**</ept> 类之一适用于前面 <bpt id="p5">**</bpt>Ingress<ept id="p5">**</ept> 方法中所示的代码。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>如果你想要直接使用 Azure 存储 API，则可以向方法签名添加 <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> 参数。</source>
          <target state="new">如果你想要直接使用 Azure 存储 API，则可以向方法签名添加 <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> 参数。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>实时监视</source>
          <target state="new">实时监视</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>因为数据入口函数通常处理大量数据，WebJobs SDK 仪表板提供了实时监视的数据。“调用日志”部分告诉你函数是否仍在运行。</source>
          <target state="new">因为数据入口函数通常处理大量数据，WebJobs SDK 仪表板提供了实时监视的数据。“调用日志”部分告诉你函数是否仍在运行。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Ingress 函数正在运行</source>
          <target state="new">Ingress 函数正在运行</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>“调用详细信息”页在运行时报告函数的进度（写入的实体数），并且为你提供中止的机会。</source>
          <target state="new">“调用详细信息”页在运行时报告函数的进度（写入的实体数），并且为你提供中止的机会。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Ingress 函数正在运行</source>
          <target state="new">Ingress 函数正在运行</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>该函数完成时，<bpt id="p1">**</bpt>调用详细信息<ept id="p1">**</ept>页会报告写入的行数。</source>
          <target state="new">该函数完成时，<bpt id="p1">**</bpt>调用详细信息<ept id="p1">**</ept>页会报告写入的行数。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Ingress 函数已完成</source>
          <target state="new">Ingress 函数已完成</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>如何从表中读取多个实体</source>
          <target state="new">如何从表中读取多个实体</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>若要读取表，可将 <bpt id="p1">**</bpt>Table<ept id="p1">**</ept> 属性用于 <bpt id="p2">**</bpt>IQueryable<ph id="ph1">&lt;T&gt;</ph><ept id="p2">**</ept> 参数，其中类型 <bpt id="p3">**</bpt>T<ept id="p3">**</ept> 派生自 <bpt id="p4">**</bpt>TableEntity<ept id="p4">**</ept> 或者通过实现 <bpt id="p5">**</bpt>ITableEntity<ept id="p5">**</ept> 来获得。</source>
          <target state="new">若要读取表，可将 <bpt id="p1">**</bpt>Table<ept id="p1">**</ept> 属性用于 <bpt id="p2">**</bpt>IQueryable<ph id="ph1">&lt;T&gt;</ph><ept id="p2">**</ept> 参数，其中类型 <bpt id="p3">**</bpt>T<ept id="p3">**</ept> 派生自 <bpt id="p4">**</bpt>TableEntity<ept id="p4">**</ept> 或者通过实现 <bpt id="p5">**</bpt>ITableEntity<ept id="p5">**</ept> 来获得。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>下面的代码示例读取并记录 <bpt id="p1">**</bpt>Ingress<ept id="p1">**</ept> 表中所有行：</source>
          <target state="new">下面的代码示例读取并记录 <bpt id="p1">**</bpt>Ingress<ept id="p1">**</ept> 表中所有行：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>如何从表中读取单个实体</source>
          <target state="new">如何从表中读取单个实体</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>有一个 <bpt id="p1">**</bpt>Table<ept id="p1">**</ept> 属性构造函数具有两个附加参数，当你想要绑定到单个表实体时，该参数可以用于指定分区键和行键的。</source>
          <target state="new">有一个 <bpt id="p1">**</bpt>Table<ept id="p1">**</ept> 属性构造函数具有两个附加参数，当你想要绑定到单个表实体时，该参数可以用于指定分区键和行键的。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>下面的代码示例基于队列消息中接收到的分区键和行键读取 <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> 实体的表行：</source>
          <target state="new">下面的代码示例基于队列消息中接收到的分区键和行键读取 <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> 实体的表行：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>此示例中的 <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> 类不必实现 <bpt id="p2">**</bpt>ITableEntity<ept id="p2">**</ept>。</source>
          <target state="new">此示例中的 <bpt id="p1">**</bpt>Person<ept id="p1">**</ept> 类不必实现 <bpt id="p2">**</bpt>ITableEntity<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>如何直接使用 .NET 存储 API 处理表</source>
          <target state="new">如何直接使用 .NET 存储 API 处理表</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>你还可以将 <bpt id="p1">**</bpt>Table<ept id="p1">**</ept> 属性和 <bpt id="p2">**</bpt>CloudTable<ept id="p2">**</ept> 对象一起使用，以便更灵活地处理表。</source>
          <target state="new">你还可以将 <bpt id="p1">**</bpt>Table<ept id="p1">**</ept> 属性和 <bpt id="p2">**</bpt>CloudTable<ept id="p2">**</ept> 对象一起使用，以便更灵活地处理表。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>下面的代码示例使用 <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> 对象将单个实体添加到 <bpt id="p2">*</bpt>Ingress<ept id="p2">*</ept> 表中。</source>
          <target state="new">下面的代码示例使用 <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> 对象将单个实体添加到 <bpt id="p2">*</bpt>Ingress<ept id="p2">*</ept> 表中。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>有关如何使用 <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> 对象的详细信息，请参阅<bpt id="p2">[</bpt>如何通过 .NET 使用表存储<ept id="p2">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。</source>
          <target state="new">有关如何使用 <bpt id="p1">**</bpt>CloudTable<ept id="p1">**</ept> 对象的详细信息，请参阅<bpt id="p2">[</bpt>如何通过 .NET 使用表存储<ept id="p2">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>队列操作指南文章涵盖的相关主题</source>
          <target state="new">队列操作指南文章涵盖的相关主题</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>有关如何处理队列消息触发的表处理，或者不特定于表处理的 WebJobs SDK 方案的信息，请参阅<bpt id="p1">[</bpt>如何通过 WebJobs SDK 使用 Azure 队列存储<ept id="p1">](/documentation/articles/vs-storage-webjobs-getting-started-queues)</ept>。</source>
          <target state="new">有关如何处理队列消息触发的表处理，或者不特定于表处理的 WebJobs SDK 方案的信息，请参阅<bpt id="p1">[</bpt>如何通过 WebJobs SDK 使用 Azure 队列存储<ept id="p1">](/documentation/articles/vs-storage-webjobs-getting-started-queues)</ept>。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>本文章提供了代码示例，演示如何处理用于操作 Azure 表的常见方案。有关如何使用 Azure WebJobs 和 WebJobs SDK 的详细信息，请参阅 <bpt id="p1">[</bpt>Azure WebJobs 推荐资源<ept id="p1">](/documentation/articles/websites-webjobs-resources)</ept>。</source>
          <target state="new">本文章提供了代码示例，演示如何处理用于操作 Azure 表的常见方案。有关如何使用 Azure WebJobs 和 WebJobs SDK 的详细信息，请参阅 <bpt id="p1">[</bpt>Azure WebJobs 推荐资源<ept id="p1">](/documentation/articles/websites-webjobs-resources)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>