{
  "nodes": [
    {
      "content": "如何通过 Java 使用 Azure Blob 存储 | Azure",
      "pos": [
        27,
        61
      ]
    },
    {
      "content": "了解如何使用 Azure Blob 存储上载、下载、列出和删除 Blob 内容。用 Java 编写的示例。",
      "pos": [
        80,
        133
      ]
    },
    {
      "content": "如何通过 Java 使用 Blob 存储",
      "pos": [
        347,
        367
      ]
    },
    {
      "content": "概述",
      "pos": [
        467,
        469
      ]
    },
    {
      "pos": [
        471,
        627
      ],
      "content": "本文将演示如何使用 Azure Blob 存储执行常见任务。这些示例用 Java 编写并使用 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Java<ept id=\"p1\">][]</ept>。涉及的任务包括<bpt id=\"p2\">**</bpt>上传<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>列出<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>下载<ept id=\"p4\">**</ept>和<bpt id=\"p5\">**</bpt>删除<ept id=\"p5\">**</ept> Blob。有关 Blob 的详细信息，请参阅<bpt id=\"p6\">[</bpt>后续步骤<ept id=\"p6\">](#NextSteps)</ept>部分。"
    },
    {
      "pos": [
        631,
        728
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> SDK 提供给在 Android 设备上使用 Azure 存储空间的开发人员。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Android<ept id=\"p1\">][]</ept>。"
    },
    {
      "pos": [
        925,
        970
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"CreateApplication\"&gt;</ph> <ph id=\"ph2\">&lt;/a&gt;</ph>创建 Java 应用程序"
    },
    {
      "content": "在本文中，你将使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。",
      "pos": [
        972,
        1042
      ]
    },
    {
      "pos": [
        1044,
        1283
      ],
      "content": "为此，你将需要安装 Java 开发工具包 (JDK)，并在你的 Azure 订阅中创建一个 Azure 存储帐户。完成此操作后，你将需要验证开发系统满足最低要求和 GitHub 上的 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Java<ept id=\"p1\">][]</ept> 存储库中列出的依赖项。如果你的系统满足这些要求，你可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。完成这些任务后，您将能够创建一个 Java 应用程序，以便使用本文中的示例。"
    },
    {
      "content": "配置你的应用程序以访问 Blob 存储",
      "pos": [
        1288,
        1307
      ]
    },
    {
      "content": "将下列导入语句添加到要在其中使用 Azure 存储 API 以访问 Blob 的 Java 文件的顶部：",
      "pos": [
        1309,
        1361
      ]
    },
    {
      "content": "设置 Azure 存储连接字符串",
      "pos": [
        1511,
        1527
      ]
    },
    {
      "pos": [
        1529,
        1722
      ],
      "content": "Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 <bpt id=\"p1\">*</bpt>AccountName<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>AccountKey<ept id=\"p2\">*</ept> 值使用<bpt id=\"p3\">[</bpt>管理门户<ept id=\"p3\">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的名称和存储帐户的主访问密钥。下面的示例演示如何声明一个静态字段以保存连接字符串。"
    },
    {
      "pos": [
        2017,
        2210
      ],
      "content": "在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件  <bpt id=\"p1\">*</bpt>ServiceConfiguration.cscfg<ept id=\"p1\">*</ept> 中，并可通过调用 <bpt id=\"p2\">**</bpt>RoleEnvironment.getConfigurationSettings<ept id=\"p2\">**</ept> 方法进行访问。下面的示例从服务配置文件中名为  <bpt id=\"p3\">*</bpt>StorageConnectionString<ept id=\"p3\">*</ept> 的 <bpt id=\"p4\">**</bpt>Setting<ept id=\"p4\">**</ept> 元素获取连接字符串"
    },
    {
      "content": "下面的示例假定你使用了这两个方法之一来获取存储连接字符串。",
      "pos": [
        2389,
        2418
      ]
    },
    {
      "content": "创建容器",
      "pos": [
        2423,
        2427
      ]
    },
    {
      "pos": [
        2429,
        2505
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept> 对象，可以获得容器和 Blob 的引用对象。以下代码将创建 <bpt id=\"p2\">**</bpt>CloudBlobClient<ept id=\"p2\">**</ept> 对象。"
    },
    {
      "pos": [
        2509,
        2619
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 还有其他方式来创建 <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> 对象；有关详细信息，请参阅 <bpt id=\"p2\">[</bpt><ept id=\"p2\">Azure 存储空间客户端 SDK 参考]</ept>中的 <bpt id=\"p3\">**</bpt>CloudStorageAccount<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        2734,
        2875
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept> 对象获取对你要使用的容器的引用。可使用 <bpt id=\"p2\">**</bpt>createIfNotExists<ept id=\"p2\">**</ept> 方法创建容器（如果不存在），否则将返回现有容器。默认情况下，新容器是专用容器，因此您必须指定存储访问密钥（如之前所做的那样）才能从该容器下载 Blob。"
    },
    {
      "content": "可选：配置进行公共访问的容器",
      "pos": [
        3542,
        3556
      ]
    },
    {
      "content": "默认情况下，容器的权限已配置为允许进行私有访问，但你也可以轻松地将容器的权限配置为允许 Internet 上的用户进行公开的、只读的访问：",
      "pos": [
        3558,
        3627
      ]
    },
    {
      "content": "将 Blob 上传到容器中",
      "pos": [
        3994,
        4007
      ]
    },
    {
      "content": "若要将文件上传到 Blob，请获取容器引用，并使用它获取 Blob 引用。获取 Blob 引用后，可以通过对该 Blob 引用调用 upload 来上传任何数据流。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的代码示例演示了这一点，并假定已创建容器。",
      "pos": [
        4009,
        4159
      ]
    },
    {
      "content": "列出容器中的 Blob",
      "pos": [
        5089,
        5100
      ]
    },
    {
      "pos": [
        5102,
        5209
      ],
      "content": "若要列出容器中的 Blob，请先获取容器引用，就像上传 Blob 时执行的操作一样。可将容器的 <bpt id=\"p1\">**</bpt>listBlobs<ept id=\"p1\">**</ept> 方法用于 <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> 循环。以下代码将容器中每个 Blob 的 URI 输出到控制台。"
    },
    {
      "pos": [
        5962,
        6130
      ],
      "content": "请注意，你可以命名 Blob，并在其名称中包含路径信息。这将创建一个虚拟目录结构，你可以像传统文件系统一样组织和遍历。注意，该目录结构仅仅是虚拟的 - Blob 存储中唯一可用的资源是容器和 Blob。但是，客户端库提供 <bpt id=\"p1\">**</bpt>CloudBlobDirectory<ept id=\"p1\">**</ept> 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。"
    },
    {
      "pos": [
        6132,
        6432
      ],
      "content": "例如，你可以创建一个名为“photos”的容器，你可以在其中上传名为“rootphoto1”、“2010/photo1”、“2010/photo2”和“2011/photo1”的 Blob。这将在“photos”容器中创建虚拟目录“2010”和“2011”。当你对“photos”容器调用 <bpt id=\"p1\">**</bpt>listBlobs<ept id=\"p1\">**</ept> 时，返回的集合将包含表示最高层中所含目录和 Blob 的 <bpt id=\"p2\">**</bpt>CloudBlobDirectory<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>CloudBlob<ept id=\"p3\">**</ept> 对象。在本例中，将返回目录“2010”和“2011”以及照片“rootphoto1”。可使用 <bpt id=\"p4\">**</bpt>instanceof<ept id=\"p4\">**</ept> 运算符来区分这些对象。"
    },
    {
      "pos": [
        6434,
        6588
      ],
      "content": "还可以向 <bpt id=\"p1\">**</bpt>listBlobs<ept id=\"p1\">**</ept> 方法传入参数，并将 <bpt id=\"p2\">**</bpt>useFlatBlobListing<ept id=\"p2\">**</ept> 参数设置为 true。这将导致返回每个 Blob，而无论目录如何。有关详细信息，请参阅 <bpt id=\"p3\">[</bpt><ept id=\"p3\">Azure 存储空间客户端 SDK 参考]</ept>中的 <bpt id=\"p4\">**</bpt>CloudBlobContainer.listBlobs<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "下载 Blob",
      "pos": [
        6593,
        6600
      ]
    },
    {
      "pos": [
        6602,
        6751
      ],
      "content": "若要下载 Blob，请执行之前用于上传 Blob 的相同步骤以获取 Blob 引用。在上传示例中，您对 Blob 对象调用了 upload。在下面的示例中，调用 download 以将 Blob 内容传输到可用于将 Blob 保存到本地文件的流对象（如 <bpt id=\"p1\">**</bpt>FileOutputStream<ept id=\"p1\">**</ept>）。"
    },
    {
      "content": "删除 Blob",
      "pos": [
        7772,
        7779
      ]
    },
    {
      "pos": [
        7781,
        7827
      ],
      "content": "若要删除 Blob，请获取 Blob 引用，然后调用 <bpt id=\"p1\">**</bpt>deleteIfExists<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "删除 Blob 容器",
      "pos": [
        8567,
        8577
      ]
    },
    {
      "pos": [
        8579,
        8633
      ],
      "content": "最后，若要删除 Blob 容器，请获取 Blob 容器引用，然后调用 <bpt id=\"p1\">**</bpt>deleteIfExists<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "后续步骤",
      "pos": [
        9250,
        9254
      ]
    },
    {
      "content": "现在，你已了解有关 Blob 存储的基础知识，可单击下面的链接来了解更复杂的存储任务。",
      "pos": [
        9256,
        9299
      ]
    },
    {
      "content": "Azure Storage SDK for Java",
      "pos": [
        9304,
        9330
      ]
    },
    {
      "content": "Azure 存储客户端 SDK 参考",
      "pos": [
        9337,
        9355
      ]
    },
    {
      "content": "Azure 存储 REST API",
      "pos": [
        9362,
        9379
      ]
    },
    {
      "content": "Azure 存储团队博客",
      "pos": [
        9386,
        9398
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"如何通过 Java 使用 Azure Blob 存储 | Azure\"\n    description=\"了解如何使用 Azure Blob 存储上载、下载、列出和删除 Blob 内容。用 Java 编写的示例。\"\n    services=\"storage\"\n    documentationCenter=\"java\"\n    authors=\"rmcmurray\"\n    manager=\"wpickett\"\n    editor=\"jimbe\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"12/01/2015\" \n    wacn.date=\"01/29/2016\"/>\n\n# 如何通过 Java 使用 Blob 存储\n\n[AZURE.INCLUDE [storage-selector-blob-include](../includes/storage-selector-blob-include.md)]\n\n## 概述\n\n本文将演示如何使用 Azure Blob 存储执行常见任务。这些示例用 Java 编写并使用 [Azure Storage SDK for Java][]。涉及的任务包括**上传**、**列出**、**下载**和**删除** Blob。有关 Blob 的详细信息，请参阅[后续步骤](#NextSteps)部分。\n\n> [AZURE.NOTE] SDK 提供给在 Android 设备上使用 Azure 存储空间的开发人员。有关详细信息，请参阅 [Azure Storage SDK for Android][]。\n\n[AZURE.INCLUDE [storage-blob-concepts-include](../includes/storage-blob-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## <a name=\"CreateApplication\"> </a>创建 Java 应用程序\n\n在本文中，你将使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。\n\n为此，你将需要安装 Java 开发工具包 (JDK)，并在你的 Azure 订阅中创建一个 Azure 存储帐户。完成此操作后，你将需要验证开发系统满足最低要求和 GitHub 上的 [Azure Storage SDK for Java][] 存储库中列出的依赖项。如果你的系统满足这些要求，你可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。完成这些任务后，您将能够创建一个 Java 应用程序，以便使用本文中的示例。\n\n## 配置你的应用程序以访问 Blob 存储\n\n将下列导入语句添加到要在其中使用 Azure 存储 API 以访问 Blob 的 Java 文件的顶部：\n\n    // Include the following imports to use blob APIs.\n    import com.microsoft.azure.storage.*;\n    import com.microsoft.azure.storage.blob.*;\n\n## 设置 Azure 存储连接字符串\n\nAzure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 *AccountName* 和 *AccountKey* 值使用[管理门户](https://manage.windowsazure.cn)中列出的存储帐户的名称和存储帐户的主访问密钥。下面的示例演示如何声明一个静态字段以保存连接字符串。\n\n    // Define the connection-string with your values\n    public static final String storageConnectionString =\n        \"DefaultEndpointsProtocol=http;\" +\n        \"AccountName=your_storage_account;\" +\n        \"AccountKey=your_storage_account_key;\" +\n    \"EndpointSuffix=core.chinacloudapi.cn\";\n\n在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件  *ServiceConfiguration.cscfg* 中，并可通过调用 **RoleEnvironment.getConfigurationSettings** 方法进行访问。下面的示例从服务配置文件中名为  *StorageConnectionString* 的 **Setting** 元素获取连接字符串\n\n    // Retrieve storage account from connection-string.\n    String storageConnectionString =\n        RoleEnvironment.getConfigurationSettings().get(\"StorageConnectionString\");\n\n下面的示例假定你使用了这两个方法之一来获取存储连接字符串。\n\n## 创建容器\n\n利用 **CloudBlobClient** 对象，可以获得容器和 Blob 的引用对象。以下代码将创建 **CloudBlobClient** 对象。\n\n> [AZURE.NOTE] 还有其他方式来创建 **CloudStorageAccount** 对象；有关详细信息，请参阅 [Azure 存储空间客户端 SDK 参考]中的 **CloudStorageAccount**。\n\n[AZURE.INCLUDE [storage-container-naming-rules-include](../includes/storage-container-naming-rules-include.md)]\n\n使用 **CloudBlobClient** 对象获取对你要使用的容器的引用。可使用 **createIfNotExists** 方法创建容器（如果不存在），否则将返回现有容器。默认情况下，新容器是专用容器，因此您必须指定存储访问密钥（如之前所做的那样）才能从该容器下载 Blob。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the blob client.\n       CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\n\n       // Get a reference to a container.\n       // The container name must be lower case\n       CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\n\n       // Create the container if it does not exist.\n        container.createIfNotExists();\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n### 可选：配置进行公共访问的容器\n\n默认情况下，容器的权限已配置为允许进行私有访问，但你也可以轻松地将容器的权限配置为允许 Internet 上的用户进行公开的、只读的访问：\n\n    // Create a permissions object.\n    BlobContainerPermissions containerPermissions = new BlobContainerPermissions();\n\n    // Include public access in the permissions object.\n    containerPermissions.setPublicAccess(BlobContainerPublicAccessType.CONTAINER);\n\n    // Set the permissions on the container.\n    container.uploadPermissions(containerPermissions);\n\n## 将 Blob 上传到容器中\n\n若要将文件上传到 Blob，请获取容器引用，并使用它获取 Blob 引用。获取 Blob 引用后，可以通过对该 Blob 引用调用 upload 来上传任何数据流。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的代码示例演示了这一点，并假定已创建容器。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the blob client.\n        CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\n\n       // Retrieve reference to a previously created container.\n        CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\n\n        // Define the path to a local file.\n        final String filePath = \"C:\\\\myimages\\\\myimage.jpg\";\n\n        // Create or overwrite the \"myimage.jpg\" blob with contents from a local file.\n        CloudBlockBlob blob = container.getBlockBlobReference(\"myimage.jpg\");\n        File source = new File(filePath);\n        blob.upload(new FileInputStream(source), source.length());\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 列出容器中的 Blob\n\n若要列出容器中的 Blob，请先获取容器引用，就像上传 Blob 时执行的操作一样。可将容器的 **listBlobs** 方法用于 **for** 循环。以下代码将容器中每个 Blob 的 URI 输出到控制台。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the blob client.\n        CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\n\n        // Retrieve reference to a previously created container.\n        CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\n\n        // Loop over blobs within the container and output the URI to each of them.\n        for (ListBlobItem blobItem : container.listBlobs()) {\n           System.out.println(blobItem.getUri());\n       }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n请注意，你可以命名 Blob，并在其名称中包含路径信息。这将创建一个虚拟目录结构，你可以像传统文件系统一样组织和遍历。注意，该目录结构仅仅是虚拟的 - Blob 存储中唯一可用的资源是容器和 Blob。但是，客户端库提供 **CloudBlobDirectory** 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。\n\n例如，你可以创建一个名为“photos”的容器，你可以在其中上传名为“rootphoto1”、“2010/photo1”、“2010/photo2”和“2011/photo1”的 Blob。这将在“photos”容器中创建虚拟目录“2010”和“2011”。当你对“photos”容器调用 **listBlobs** 时，返回的集合将包含表示最高层中所含目录和 Blob 的 **CloudBlobDirectory** 和 **CloudBlob** 对象。在本例中，将返回目录“2010”和“2011”以及照片“rootphoto1”。可使用 **instanceof** 运算符来区分这些对象。\n\n还可以向 **listBlobs** 方法传入参数，并将 **useFlatBlobListing** 参数设置为 true。这将导致返回每个 Blob，而无论目录如何。有关详细信息，请参阅 [Azure 存储空间客户端 SDK 参考]中的 **CloudBlobContainer.listBlobs**。\n\n## 下载 Blob\n\n若要下载 Blob，请执行之前用于上传 Blob 的相同步骤以获取 Blob 引用。在上传示例中，您对 Blob 对象调用了 upload。在下面的示例中，调用 download 以将 Blob 内容传输到可用于将 Blob 保存到本地文件的流对象（如 **FileOutputStream**）。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n       CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n\n       // Create the blob client.\n       CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\n\n       // Retrieve reference to a previously created container.\n       CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\n\n       // Loop through each blob item in the container.\n       for (ListBlobItem blobItem : container.listBlobs()) {\n           // If the item is a blob, not a virtual directory.\n           if (blobItem instanceof CloudBlob) {\n               // Download the item and save it to a file with the same name.\n                CloudBlob blob = (CloudBlob) blobItem;\n                blob.download(new FileOutputStream(\"C:\\\\mydownloads\\\\\" + blob.getName()));\n            }\n        }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 删除 Blob\n\n若要删除 Blob，请获取 Blob 引用，然后调用 **deleteIfExists**。\n\n    try\n    {\n       // Retrieve storage account from connection-string.\n       CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n\n       // Create the blob client.\n       CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\n\n       // Retrieve reference to a previously created container.\n       CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\n\n       // Retrieve reference to a blob named \"myimage.jpg\".\n       CloudBlockBlob blob = container.getBlockBlobReference(\"myimage.jpg\");\n\n       // Delete the blob.\n       blob.deleteIfExists();\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 删除 Blob 容器\n\n最后，若要删除 Blob 容器，请获取 Blob 容器引用，然后调用 **deleteIfExists**。\n\n    try\n    {\n       // Retrieve storage account from connection-string.\n       CloudStorageAccount storageAccount = CloudStorageAccount.parse(storageConnectionString);\n\n       // Create the blob client.\n       CloudBlobClient blobClient = storageAccount.createCloudBlobClient();\n\n       // Retrieve reference to a previously created container.\n       CloudBlobContainer container = blobClient.getContainerReference(\"mycontainer\");\n\n       // Delete the blob container.\n       container.deleteIfExists();\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 后续步骤\n\n现在，你已了解有关 Blob 存储的基础知识，可单击下面的链接来了解更复杂的存储任务。\n\n- [Azure Storage SDK for Java][]\n- [Azure 存储客户端 SDK 参考][]\n- [Azure 存储 REST API][]\n- [Azure 存储团队博客][]\n\n[Azure SDK for Java]: /develop/java/\n[Azure Storage SDK for Java]: https://github.com/azure/azure-storage-java\n[Azure Storage SDK for Android]: https://github.com/azure/azure-storage-android\n[Azure 存储客户端 SDK 参考]: http://dl.windowsazure.com/storage/javadoc/\n[Azure 存储空间客户端 SDK 参考]: http://dl.windowsazure.com/storage/javadoc/\n[Azure 存储 REST API]: https://msdn.microsoft.com/library/azure/dd179355.aspx\n[Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n\n<!---HONumber=Mooncake_0118_2016-->"
}