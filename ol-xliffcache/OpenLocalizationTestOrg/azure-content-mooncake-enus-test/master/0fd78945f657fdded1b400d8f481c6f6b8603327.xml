{
  "nodes": [
    {
      "content": "如何通过 Java 使用队列存储 | Azure",
      "pos": [
        28,
        52
      ]
    },
    {
      "content": "了解如何使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。用 Java 编写的示例。",
      "pos": [
        72,
        123
      ]
    },
    {
      "content": "如何通过 Java 使用队列存储",
      "pos": [
        344,
        360
      ]
    },
    {
      "content": "概述",
      "pos": [
        462,
        464
      ]
    },
    {
      "pos": [
        466,
        622
      ],
      "content": "本指南将演示如何使用 Azure 队列存储服务执行常见方案。这些示例用 Java 编写并使用 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Java<ept id=\"p1\">][]</ept>。涉及的方案包括“插入”、“扫视”、“获取”和“删除”队列消息以及“创建”和“删除”队列。有关队列的详细信息，请参阅<bpt id=\"p2\">[</bpt>后续步骤<ept id=\"p2\">](#NextSteps)</ept>部分。"
    },
    {
      "pos": [
        624,
        710
      ],
      "content": "注意：为在 Android 设备上使用 Azure 存储的开发人员提供了 SDK。有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Android<ept id=\"p1\">][]</ept>。"
    },
    {
      "content": "创建 Java 应用程序",
      "pos": [
        909,
        921
      ]
    },
    {
      "content": "在本指南中，你将使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。",
      "pos": [
        923,
        994
      ]
    },
    {
      "pos": [
        996,
        1235
      ],
      "content": "为此，你将需要安装 Java 开发工具包 (JDK)，并在你的 Azure 订阅中创建一个 Azure 存储帐户。完成此操作后，你将需要验证开发系统满足最低要求和 GitHub 上的 <bpt id=\"p1\">[</bpt>Azure Storage SDK for Java<ept id=\"p1\">][]</ept> 存储库中列出的依赖项。如果你的系统满足这些要求，你可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。完成这些任务后，您将能够创建一个 Java 应用程序，以便使用本文中的示例。"
    },
    {
      "content": "配置应用程序以访问队列存储",
      "pos": [
        1240,
        1253
      ]
    },
    {
      "content": "将下列 import 语句添加到需要在其中使用 Azure 存储 API 来访问队列的 Java 文件的顶部：",
      "pos": [
        1255,
        1310
      ]
    },
    {
      "content": "设置 Azure 存储连接字符串",
      "pos": [
        1462,
        1478
      ]
    },
    {
      "pos": [
        1480,
        1671
      ],
      "content": "Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 <bpt id=\"p1\">*</bpt>AccountName<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>AccountKey<ept id=\"p2\">*</ept> 值使用<bpt id=\"p3\">[</bpt>管理门户<ept id=\"p3\">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的名称和存储帐户的主访问密钥。此示例演示如何声明一个静态字段以保存连接字符串："
    },
    {
      "pos": [
        1970,
        2164
      ],
      "content": "在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件 <bpt id=\"p1\">*</bpt>ServiceConfiguration.cscfg<ept id=\"p1\">*</ept> 中，并可通过调用 <bpt id=\"p2\">**</bpt>RoleEnvironment.getConfigurationSettings<ept id=\"p2\">**</ept> 方法进行访问。下面是从服务配置文件中名为 <bpt id=\"p3\">*</bpt>StorageConnectionString<ept id=\"p3\">*</ept> 的 <bpt id=\"p4\">**</bpt>Setting<ept id=\"p4\">**</ept> 元素中获取连接字符串的示例："
    },
    {
      "content": "下面的示例假定你使用了这两个方法之一来获取存储连接字符串。",
      "pos": [
        2344,
        2373
      ]
    },
    {
      "content": "如何：创建队列",
      "pos": [
        2378,
        2385
      ]
    },
    {
      "pos": [
        2387,
        2558
      ],
      "content": "利用 <bpt id=\"p1\">**</bpt>CloudQueueClient<ept id=\"p1\">**</ept> 对象，可以获取队列的引用对象。以下代码将创建 <bpt id=\"p2\">**</bpt>CloudQueueClient<ept id=\"p2\">**</ept> 对象。（注意：还有其他方式来创建 <bpt id=\"p3\">**</bpt>CloudStorageAccount<ept id=\"p3\">**</ept> 对象；有关详细信息，请参阅 <bpt id=\"p4\">[</bpt><ept id=\"p4\">Azure 存储客户端 SDK 参考]</ept>中的 <bpt id=\"p5\">**</bpt>CloudStorageAccount<ept id=\"p5\">**</ept>。）"
    },
    {
      "pos": [
        2560,
        2615
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>CloudQueueClient<ept id=\"p1\">**</ept> 对象获取对你要使用的队列的引用。如果队列不存在，你可以创建它。"
    },
    {
      "content": "如何：向队列添加消息",
      "pos": [
        3228,
        3238
      ]
    },
    {
      "pos": [
        3240,
        3391
      ],
      "content": "若要将消息插入现有队列，请先创建一个新的 <bpt id=\"p1\">**</bpt>CloudQueueMessage<ept id=\"p1\">**</ept>。接下来，调用 <bpt id=\"p2\">**</bpt>addMessage<ept id=\"p2\">**</ept> 方法。可从字符串（UTF-8 格式）或字节数组创建 <bpt id=\"p3\">**</bpt>CloudQueueMessage<ept id=\"p3\">**</ept>。以下代码将创建队列（如果队列不存在）并插入消息“Hello, World”。"
    },
    {
      "content": "如何：扫视下一条消息",
      "pos": [
        4174,
        4184
      ]
    },
    {
      "pos": [
        4186,
        4231
      ],
      "content": "通过调用 <bpt id=\"p1\">**</bpt>peekMessage<ept id=\"p1\">**</ept>，你可以扫视队列前面的消息，而不会从队列中删除它。"
    },
    {
      "content": "如何：更改已排队消息的内容",
      "pos": [
        5047,
        5060
      ]
    },
    {
      "pos": [
        5062,
        5296
      ],
      "content": "你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 <bpt id=\"p1\">*</bpt>n<ept id=\"p1\">*</ept>，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。"
    },
    {
      "content": "下面的代码示例将搜索队列中的消息，查找内容中第一个与“Hello, World”匹配的消息，然后对消息内容进行修改并退出。",
      "pos": [
        5298,
        5359
      ]
    },
    {
      "content": "或者，以下代码示例只更新了队列中第一个可见消息",
      "pos": [
        6840,
        6863
      ]
    },
    {
      "content": "如何：获取队列长度",
      "pos": [
        7996,
        8005
      ]
    },
    {
      "pos": [
        8007,
        8187
      ],
      "content": "你可以获取队列中消息的估计数。<bpt id=\"p1\">**</bpt>downloadAttributes<ept id=\"p1\">**</ept> 方法会询问队列服务一些当前值，包括队列中消息的计数。此计数仅为近似值，因为只能在队列服务响应您的请求后添加或删除消息。<bpt id=\"p2\">**</bpt>getApproximateMessageCount<ept id=\"p2\">**</ept> 方法返回通过调用 <bpt id=\"p3\">**</bpt>downloadAttributes<ept id=\"p3\">**</ept> 检索到的最后一个值，而不会调用队列服务。"
    },
    {
      "content": "如何：取消对下一条消息的排队",
      "pos": [
        9084,
        9098
      ]
    },
    {
      "pos": [
        9100,
        9363
      ],
      "content": "你的代码通过两个步骤来取消对队列中某条消息的排队。在调用 <bpt id=\"p1\">**</bpt>retrieveMessage<ept id=\"p1\">**</ept> 时，你将获得队列中的下一条消息。从 <bpt id=\"p2\">**</bpt>retrieveMessage<ept id=\"p2\">**</ept> 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要从队列中删除消息，你还必须调用 <bpt id=\"p3\">**</bpt>deleteMessage<ept id=\"p3\">**</ept>。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 <bpt id=\"p4\">**</bpt>deleteMessage<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "用于取消对消息进行排队的其他选项",
      "pos": [
        10233,
        10249
      ]
    },
    {
      "content": "你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。",
      "pos": [
        10251,
        10343
      ]
    },
    {
      "pos": [
        10345,
        10521
      ],
      "content": "下面的代码示例使用 <bpt id=\"p1\">**</bpt>retrieveMessages<ept id=\"p1\">**</ept> 方法以在一次调用中获取 20 条消息。然后，它会使用 <bpt id=\"p2\">**</bpt>for<ept id=\"p2\">**</ept> 循环处理每条消息。它还将每条消息的不可见超时设置为五分钟（300 秒）。请注意，这五分钟超时对于所有消息都是同时开始的，因此在调用 <bpt id=\"p3\">**</bpt>retrieveMessages<ept id=\"p3\">**</ept> 五分钟后，尚未删除的任何消息都将再次变得可见。"
    },
    {
      "content": "如何：列出队列",
      "pos": [
        11404,
        11411
      ]
    },
    {
      "pos": [
        11413,
        11492
      ],
      "content": "若要获取当前队列的列表，请调用 <bpt id=\"p1\">**</bpt>CloudQueueClient.listQueues()<ept id=\"p1\">**</ept> 方法，它将返回 <bpt id=\"p2\">**</bpt>CloudQueue<ept id=\"p2\">**</ept> 对象的集合。"
    },
    {
      "content": "如何：删除队列",
      "pos": [
        12133,
        12140
      ]
    },
    {
      "pos": [
        12142,
        12203
      ],
      "content": "若要删除队列及其包含的所有消息，请对 <bpt id=\"p1\">**</bpt>CloudQueue<ept id=\"p1\">**</ept> 对象调用 <bpt id=\"p2\">**</bpt>deleteIfExists<ept id=\"p2\">**</ept> 方法。"
    },
    {
      "content": "后续步骤",
      "pos": [
        12805,
        12809
      ]
    },
    {
      "content": "现在，您已了解有关队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。",
      "pos": [
        12811,
        12850
      ]
    },
    {
      "content": "Azure Storage SDK for Java",
      "pos": [
        12855,
        12881
      ]
    },
    {
      "content": "Azure 存储客户端 SDK 参考",
      "pos": [
        12888,
        12906
      ]
    },
    {
      "content": "Azure 存储 REST API",
      "pos": [
        12913,
        12930
      ]
    },
    {
      "content": "Azure 存储团队博客",
      "pos": [
        12937,
        12949
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 Java 使用队列存储 | Azure\" \n    description=\"了解如何使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。用 Java 编写的示例。\" \n    services=\"storage\" \n    documentationCenter=\"java\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"12/01/2015\" \n    wacn.date=\"01/29/2016\"/>\n\n# 如何通过 Java 使用队列存储\n\n[AZURE.INCLUDE [storage-selector-queue-include](../includes/storage-selector-queue-include.md)]\n\n## 概述\n\n本指南将演示如何使用 Azure 队列存储服务执行常见方案。这些示例用 Java 编写并使用 [Azure Storage SDK for Java][]。涉及的方案包括“插入”、“扫视”、“获取”和“删除”队列消息以及“创建”和“删除”队列。有关队列的详细信息，请参阅[后续步骤](#NextSteps)部分。\n\n注意：为在 Android 设备上使用 Azure 存储的开发人员提供了 SDK。有关详细信息，请参阅 [Azure Storage SDK for Android][]。\n\n[AZURE.INCLUDE [storage-queue-concepts-include](../includes/storage-queue-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n## 创建 Java 应用程序\n\n在本指南中，你将使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。\n\n为此，你将需要安装 Java 开发工具包 (JDK)，并在你的 Azure 订阅中创建一个 Azure 存储帐户。完成此操作后，你将需要验证开发系统满足最低要求和 GitHub 上的 [Azure Storage SDK for Java][] 存储库中列出的依赖项。如果你的系统满足这些要求，你可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。完成这些任务后，您将能够创建一个 Java 应用程序，以便使用本文中的示例。\n\n## 配置应用程序以访问队列存储\n\n将下列 import 语句添加到需要在其中使用 Azure 存储 API 来访问队列的 Java 文件的顶部：\n\n    // Include the following imports to use queue APIs.\n    import com.microsoft.azure.storage.*;\n    import com.microsoft.azure.storage.queue.*;\n\n## 设置 Azure 存储连接字符串\n\nAzure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 *AccountName* 和 *AccountKey* 值使用[管理门户](https://manage.windowsazure.cn)中列出的存储帐户的名称和存储帐户的主访问密钥。此示例演示如何声明一个静态字段以保存连接字符串：\n\n    // Define the connection-string with your values.\n    public static final String storageConnectionString = \n        \"DefaultEndpointsProtocol=http;\" + \n        \"AccountName=your_storage_account;\" + \n        \"AccountKey=your_storage_account_key;\" +\n    \"EndpointSuffix=core.chinacloudapi.cn\";\n\n在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件 *ServiceConfiguration.cscfg* 中，并可通过调用 **RoleEnvironment.getConfigurationSettings** 方法进行访问。下面是从服务配置文件中名为 *StorageConnectionString* 的 **Setting** 元素中获取连接字符串的示例：\n\n    // Retrieve storage account from connection-string.\n    String storageConnectionString = \n        RoleEnvironment.getConfigurationSettings().get(\"StorageConnectionString\");\n\n下面的示例假定你使用了这两个方法之一来获取存储连接字符串。\n\n## 如何：创建队列\n\n利用 **CloudQueueClient** 对象，可以获取队列的引用对象。以下代码将创建 **CloudQueueClient** 对象。（注意：还有其他方式来创建 **CloudStorageAccount** 对象；有关详细信息，请参阅 [Azure 存储客户端 SDK 参考]中的 **CloudStorageAccount**。）\n\n使用 **CloudQueueClient** 对象获取对你要使用的队列的引用。如果队列不存在，你可以创建它。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n           CloudStorageAccount.parse(storageConnectionString);\n\n       // Create the queue client.\n       CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n       // Retrieve a reference to a queue.\n       CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n\n       // Create the queue if it doesn't already exist.\n       queue.createIfNotExists();\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：向队列添加消息\n\n若要将消息插入现有队列，请先创建一个新的 **CloudQueueMessage**。接下来，调用 **addMessage** 方法。可从字符串（UTF-8 格式）或字节数组创建 **CloudQueueMessage**。以下代码将创建队列（如果队列不存在）并插入消息“Hello, World”。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n        // Retrieve a reference to a queue.\n        CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n\n        // Create the queue if it doesn't already exist.\n        queue.createIfNotExists();\n\n        // Create a message and add it to the queue.\n        CloudQueueMessage message = new CloudQueueMessage(\"Hello, World\");\n        queue.addMessage(message);\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：扫视下一条消息\n\n通过调用 **peekMessage**，你可以扫视队列前面的消息，而不会从队列中删除它。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n        // Retrieve a reference to a queue.\n        CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n            \n        // Peek at the next message.\n        CloudQueueMessage peekedMessage = queue.peekMessage();\n            \n        // Output the message value.\n        if (peekedMessage != null)\n        {\n          System.out.println(peekedMessage.getMessageContentAsString());\n       }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：更改已排队消息的内容\n\n你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用新内容更新队列消息，并将可见性超时设置为再延长 60 秒。这将保存与消息关联的工作的状态，并额外为客户端提供一分钟的时间来继续处理消息。可使用此方法跟踪队列消息上的多步骤工作流，即使处理步骤因硬件或软件故障而失败，也无需从头开始操作。通常，你还可以保留重试计数，如果某条消息的重试次数超过 *n*，你将删除此消息。这可避免每次处理某条消息时都触发应用程序错误。\n\n下面的代码示例将搜索队列中的消息，查找内容中第一个与“Hello, World”匹配的消息，然后对消息内容进行修改并退出。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n        // Retrieve a reference to a queue.\n        CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n\n        // The maximum number of messages that can be retrieved is 32. \n        final int MAX_NUMBER_OF_MESSAGES_TO_PEEK = 32;\n\n        // Loop through the messages in the queue.\n        for (CloudQueueMessage message : queue.retrieveMessages(MAX_NUMBER_OF_MESSAGES_TO_PEEK,1,null,null))\n        {\n            // Check for a specific string.\n            if (message.getMessageContentAsString().equals(\"Hello, World\"))\n            {\n                // Modify the content of the first matching message.\n                message.setMessageContent(\"Updated contents.\");\n                // Set it to be visible in 30 seconds.\n                EnumSet<MessageUpdateFields> updateFields = \n                    EnumSet.of(MessageUpdateFields.CONTENT,\n                    MessageUpdateFields.VISIBILITY);\n                // Update the message.\n                queue.updateMessage(message, 30, updateFields, null, null);\n                break;\n            }\n        }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n或者，以下代码示例只更新了队列中第一个可见消息\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n        // Retrieve a reference to a queue.\n        CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n\n        // Retrieve the first visible message in the queue.\n        CloudQueueMessage message = queue.retrieveMessage();\n            \n        if (message != null)\n        {\n            // Modify the message content.\n            message.setMessageContent(\"Updated contents.\");\n            // Set it to be visible in 60 seconds.\n            EnumSet<MessageUpdateFields> updateFields = \n                EnumSet.of(MessageUpdateFields.CONTENT,\n                MessageUpdateFields.VISIBILITY);\n            // Update the message.\n            queue.updateMessage(message, 60, updateFields, null, null);\n        }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：获取队列长度\n\n你可以获取队列中消息的估计数。**downloadAttributes** 方法会询问队列服务一些当前值，包括队列中消息的计数。此计数仅为近似值，因为只能在队列服务响应您的请求后添加或删除消息。**getApproximateMessageCount** 方法返回通过调用 **downloadAttributes** 检索到的最后一个值，而不会调用队列服务。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n           CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n        // Retrieve a reference to a queue.\n        CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n\n       // Download the approximate message count from the server.\n        queue.downloadAttributes();\n\n        // Retrieve the newly cached approximate message count.\n        long cachedMessageCount = queue.getApproximateMessageCount();\n            \n        // Display the queue length.\n        System.out.println(String.format(\"Queue length: %d\", cachedMessageCount));\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：取消对下一条消息的排队\n\n你的代码通过两个步骤来取消对队列中某条消息的排队。在调用 **retrieveMessage** 时，你将获得队列中的下一条消息。从 **retrieveMessage** 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要从队列中删除消息，你还必须调用 **deleteMessage**。此删除消息的两步过程可确保，如果你的代码因硬件或软件故障而无法处理消息，则你的代码的其他实例可以获取相同消息并重试。你的代码在处理消息后会立即调用 **deleteMessage**。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n        // Retrieve a reference to a queue.\n        CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n\n        // Retrieve the first visible message in the queue.\n        CloudQueueMessage retrievedMessage = queue.retrieveMessage();\n            \n        if (retrievedMessage != null)\n        {\n            // Process the message in less than 30 seconds, and then delete the message.\n            queue.deleteMessage(retrievedMessage);\n        }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n\n## 用于取消对消息进行排队的其他选项\n\n你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，你可以设置更长或更短的不可见超时时间，从而允许你的代码使用更多或更少时间来完全处理每个消息。\n\n下面的代码示例使用 **retrieveMessages** 方法以在一次调用中获取 20 条消息。然后，它会使用 **for** 循环处理每条消息。它还将每条消息的不可见超时设置为五分钟（300 秒）。请注意，这五分钟超时对于所有消息都是同时开始的，因此在调用 **retrieveMessages** 五分钟后，尚未删除的任何消息都将再次变得可见。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n        // Retrieve a reference to a queue.\n        CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n\n        // Retrieve 20 messages from the queue with a visibility timeout of 300 seconds.\n        for (CloudQueueMessage message : queue.retrieveMessages(20, 300, null, null)) {\n            // Do processing for all messages in less than 5 minutes, \n            // deleting each message after processing.\n            queue.deleteMessage(message);\n        }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：列出队列\n\n若要获取当前队列的列表，请调用 **CloudQueueClient.listQueues()** 方法，它将返回 **CloudQueue** 对象的集合。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount =\n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient =\n            storageAccount.createCloudQueueClient();\n\n        // Loop through the collection of queues.\n        for (CloudQueue queue : queueClient.listQueues())\n        {\n            // Output each queue name.\n            System.out.println(queue.getName());\n        }\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 如何：删除队列\n\n若要删除队列及其包含的所有消息，请对 **CloudQueue** 对象调用 **deleteIfExists** 方法。\n\n    try\n    {\n        // Retrieve storage account from connection-string.\n        CloudStorageAccount storageAccount = \n            CloudStorageAccount.parse(storageConnectionString);\n\n        // Create the queue client.\n        CloudQueueClient queueClient = storageAccount.createCloudQueueClient();\n\n        // Retrieve a reference to a queue.\n        CloudQueue queue = queueClient.getQueueReference(\"myqueue\");\n\n        // Delete the queue if it exists.\n        queue.deleteIfExists();\n    }\n    catch (Exception e)\n    {\n        // Output the stack trace.\n        e.printStackTrace();\n    }\n\n## 后续步骤\n\n现在，您已了解有关队列存储的基础知识，可单击下面的链接来了解更复杂的存储任务。\n\n- [Azure Storage SDK for Java][]\n- [Azure 存储客户端 SDK 参考][]\n- [Azure 存储 REST API][]\n- [Azure 存储团队博客][]\n\n[Azure SDK for Java]: /develop/java/\n[Azure Storage SDK for Java]: https://github.com/azure/azure-storage-java\n[Azure Storage SDK for Android]: https://github.com/azure/azure-storage-android\n[Azure 存储客户端 SDK 参考]: http://dl.windowsazure.com/storage/javadoc/\n[CloudStorageAccount]: http://dl.windowsazure.com/storage/javadoc/\n[Azure 存储 REST API]: https://msdn.microsoft.com/library/azure/dd179355.aspx\n[Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n\n<!---HONumber=Mooncake_0118_2016-->"
}