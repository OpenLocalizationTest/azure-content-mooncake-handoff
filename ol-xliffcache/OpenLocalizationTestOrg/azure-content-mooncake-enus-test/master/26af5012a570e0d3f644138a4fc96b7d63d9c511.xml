{
  "nodes": [
    {
      "content": "创建 SAS 并将 SAS 用于 Blob 存储 | Azure",
      "pos": [
        27,
        59
      ]
    },
    {
      "content": "本教程演示如何创建共享访问签名以用于 Blob 存储，以及如何从客户端应用程序使用这些签名。",
      "pos": [
        79,
        125
      ]
    },
    {
      "content": "共享访问签名，第 2 部分：创建 SAS 并将 SAS 用于 Blob 存储",
      "pos": [
        340,
        378
      ]
    },
    {
      "content": "概述",
      "pos": [
        383,
        385
      ]
    },
    {
      "pos": [
        387,
        609
      ],
      "content": "本教程的<bpt id=\"p1\">[</bpt>第 1 部分<ept id=\"p1\">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>介绍了共享访问签名 (SAS) 并且说明了有关使用共享访问签名的最佳实践。第 2 部分将演示如何生成共享访问签名以及如何将共享访问签名用于 Azure Blob 服务。示例是用 C# 编写的并使用了 Azure .NET 存储客户端库。涉及的任务包括使用共享访问签名的以下方面："
    },
    {
      "content": "在容器上生成共享访问签名",
      "pos": [
        613,
        625
      ]
    },
    {
      "content": "在 Blob 上生成共享访问签名",
      "pos": [
        628,
        644
      ]
    },
    {
      "content": "创建用于管理容器资源上的签名的存储访问策略",
      "pos": [
        647,
        668
      ]
    },
    {
      "content": "从客户端应用程序测试共享访问签名",
      "pos": [
        671,
        687
      ]
    },
    {
      "content": "关于本教程",
      "pos": [
        692,
        697
      ]
    },
    {
      "content": "在本教程中，我们将通过创建两个控制台应用程序重点说明如何为容器和 Blob 创建共享访问签名。第一个控制台应用程序将在一个容器和 Blob 上生成共享访问签名。该应用程序知道存储帐户密钥。第二个控制台应用程序（将充当客户端应用程序）使用第一个应用程序创建的共享访问签名访问容器和 Blob 资源。该应用程序仅使用共享访问签名验证其对容器和 Blob 资源的访问 – 它不知道帐户密钥。",
      "pos": [
        699,
        891
      ]
    },
    {
      "content": "第 1 部分：创建控制台应用程序以便生成共享访问签名",
      "pos": [
        896,
        922
      ]
    },
    {
      "pos": [
        924,
        1126
      ],
      "content": "首先，确保你安装了 Azure .NET 存储客户端库。你可以安装包含该客户端库的最新程序集的 <bpt id=\"p1\">[</bpt>NuGet 程序包<ept id=\"p1\">]</ept><bpt id=\"p2\">(http://nuget.org/packages/WindowsAzure.Storage/ \"</bpt>NuGet 包<ept id=\"p2\">\")</ept>；这是确保你具有最新修补程序的建议方法。你还可以通过下载包含该客户端库的最新 <bpt id=\"p3\">[</bpt>Azure SDK for .NET<ept id=\"p3\">](/downloads/)</ept> 版本来下载该客户端库。"
    },
    {
      "pos": [
        1128,
        1312
      ],
      "content": "在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 <bpt id=\"p1\">**</bpt>GenerateSharedAccessSignatures<ept id=\"p1\">**</ept>。使用以下方法之一添加对 <bpt id=\"p2\">**</bpt>Microsoft.WindowsAzure.Configuration.dll<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>Microsoft.WindowsAzure.Storage.dll<ept id=\"p3\">**</ept> 的引用："
    },
    {
      "pos": [
        1318,
        1544
      ],
      "content": "如果你想要安装 NuGet 程序包，请首先安装 <bpt id=\"p1\">[</bpt>NuGet Package Manager Extension for Visual Studio<ept id=\"p1\">](http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c)</ept>。在 Visual Studio 中，选择“项目”|“管理 NuGet 包”，在线搜索“Azure 存储空间”，然后按照说明进行安装。"
    },
    {
      "content": "另外，还可以在你安装的 Azure SDK 中找到这些程序集，然后添加对它们的引用。",
      "pos": [
        1549,
        1591
      ]
    },
    {
      "pos": [
        1593,
        1630
      ],
      "content": "在 Program.cs 文件的顶部，添加以下 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句："
    },
    {
      "content": "编辑 app.config 文件，使其所含配置设置中的连接字符串指向你的存储帐户。你的 app.config 文件应如下所示：",
      "pos": [
        1781,
        1844
      ]
    },
    {
      "content": "为容器生成共享访问签名 URI",
      "pos": [
        2203,
        2218
      ]
    },
    {
      "content": "开始时，我们将添加一个方法以便在新容器上生成共享访问签名。在这个例子中，该签名不与某一存储访问策略相关联，因此，它在 URI 上携带信息，指示其到期时间以及将授予的权限。",
      "pos": [
        2220,
        2305
      ]
    },
    {
      "pos": [
        2307,
        2355
      ],
      "content": "首先，向 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法中添加代码，以便验证对你的存储帐户的访问并且创建一个新容器："
    },
    {
      "content": "接下来，添加一个新方法，该方法为容器生成共享访问签名并且返回签名 URI：",
      "pos": [
        3135,
        3172
      ]
    },
    {
      "pos": [
        4022,
        4124
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法的底部，在调用 <bpt id=\"p2\">**</bpt>Console.ReadLine()<ept id=\"p2\">**</ept> 之前，添加以下代码行以调用 <bpt id=\"p3\">**</bpt>GetContainerSasUri()<ept id=\"p3\">**</ept> 并将签名 URI 写入控制台窗口："
    },
    {
      "content": "编译并且运行以输出新容器的共享访问签名 URI。该 URI 将类似以下 URI：",
      "pos": [
        4306,
        4346
      ]
    },
    {
      "content": "在你运行代码后，你在容器上创建的共享访问签名将在接下来的 24 个小时内有效。该签名向客户端授予列出容器中的 Blob 以及将新 Blob 写入容器的权限。",
      "pos": [
        4526,
        4604
      ]
    },
    {
      "content": "为 Blob 生成共享访问签名 URI",
      "pos": [
        4610,
        4629
      ]
    },
    {
      "content": "接下来，我们将编写类似的代码，以便在容器内创建新 Blob 并且为其生成共享访问签名。该共享访问签名不与某一存储访问策略相关联，因此，它包含有关 URI 的开始时间、到期时间和权限。",
      "pos": [
        4631,
        4722
      ]
    },
    {
      "content": "添加一个新方法，该方法创建一个新 Blob 并且向其写入某些文本，然后生成共享访问签名并且返回签名 URI：",
      "pos": [
        4724,
        4778
      ]
    },
    {
      "pos": [
        6321,
        6422
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法的底部，在调用 <bpt id=\"p2\">**</bpt>Console.ReadLine()<ept id=\"p2\">**</ept> 之前，添加以下代码行以调用 <bpt id=\"p3\">**</bpt>GetBlobSasUri()<ept id=\"p3\">**</ept>，并将共享访问签名 URI 写入控制台窗口："
    },
    {
      "content": "编译并且运行以输出新 Blob 的共享访问签名 URI。该 URI 将类似以下 URI：",
      "pos": [
        6609,
        6653
      ]
    },
    {
      "content": "在容器上创建存储访问策略",
      "pos": [
        6871,
        6883
      ]
    },
    {
      "content": "现在来在容器上创建一个存储访问策略，该策略定义与其相关联的任何共享访问签名的约束。",
      "pos": [
        6885,
        6926
      ]
    },
    {
      "content": "在前面的示例中，我们指定了开始时间（隐式或显式的）、到期时间以及共享访问签名 URI 本身的权限。在接下来的示例中，我们将在存储访问策略上指定它们，而不是在共享访问签名上指定它们。这样做将使我们不必重新发布共享访问签名即可更改这些约束。",
      "pos": [
        6928,
        7046
      ]
    },
    {
      "content": "可以使一个或多个约束作用于共享访问签名上，使其余的约束作用于存储访问策略上。但是，你只能在这两者之一中指定开始时间、到期时间和权限；例如，不能对共享访问签名指定权限，同时也对存储访问策略指定权限。",
      "pos": [
        7048,
        7146
      ]
    },
    {
      "content": "注意，当你向容器添加一个访问策略时，你必须获取容器的现有权限，添加新的访问策略，然后设置容器的权限。",
      "pos": [
        7148,
        7198
      ]
    },
    {
      "content": "添加一个新方法，该方法在窗口上创建一个新的存储访问策略并返回该策略的名称：",
      "pos": [
        7200,
        7237
      ]
    },
    {
      "pos": [
        8089,
        8198
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法的底部，在调用 <bpt id=\"p2\">**</bpt>Console.ReadLine()<ept id=\"p2\">**</ept> 之前，添加以下代码行以首先清除任何现有访问策略，然后调用 <bpt id=\"p3\">**</bpt>CreateSharedAccessPolicy()<ept id=\"p3\">**</ept> 方法："
    },
    {
      "content": "注意，当清除容器上的访问策略时，你必须首先获取容器的现有权限，接着清除权限，然后再次设置权限。",
      "pos": [
        8699,
        8746
      ]
    },
    {
      "content": "在使用访问策略的容器上生成共享访问签名 URI",
      "pos": [
        8752,
        8775
      ]
    },
    {
      "content": "接下来，我们将在之前创建的容器上创建另一个共享访问签名，但这次，我们要将该签名与我们在之前示例中创建的访问策略相关联。",
      "pos": [
        8777,
        8836
      ]
    },
    {
      "content": "添加一个新方法以便在容器上生成另一个共享访问签名：",
      "pos": [
        8838,
        8863
      ]
    },
    {
      "pos": [
        9377,
        9473
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法的底部，在调用 <bpt id=\"p2\">**</bpt>Console.ReadLine()<ept id=\"p2\">**</ept> 之前，添加以下代码行以调用 <bpt id=\"p3\">**</bpt>GetContainerSasUriWithPolicy<ept id=\"p3\">**</ept> 方法："
    },
    {
      "content": "在使用访问策略的 Blob 上生成共享访问签名 URI",
      "pos": [
        9748,
        9775
      ]
    },
    {
      "content": "最后，我们将添加一个类似方法，以便创建另一个 Blob 并且生成与某一访问策略相关联的共享访问签名。",
      "pos": [
        9777,
        9827
      ]
    },
    {
      "content": "添加一个新方法以便创建 Blob 并且生成共享访问签名：",
      "pos": [
        9829,
        9857
      ]
    },
    {
      "pos": [
        10892,
        10983
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法的底部，在调用 <bpt id=\"p2\">**</bpt>Console.ReadLine()<ept id=\"p2\">**</ept> 之前，添加以下代码行以调用 <bpt id=\"p3\">**</bpt>GetBlobSasUriWithPolicy<ept id=\"p3\">**</ept> 方法："
    },
    {
      "pos": [
        11258,
        11343
      ],
      "content": "现在，完整的 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法看起来应如下所示。运行它以将共享访问签名 URI 写入控制台窗口，然后将它们复制并粘贴到一个文本文件中以在本教程的第二部分中使用。"
    },
    {
      "content": "运行 GenerateSharedAccessSignatures 控制台应用程序时，你将会在控制台窗口中看到如下输出。它们是你在本教程的第 2 部分中将使用的共享访问签名。",
      "pos": [
        13483,
        13570
      ]
    },
    {
      "content": "sas-console-output-1",
      "pos": [
        13574,
        13594
      ]
    },
    {
      "content": "第 2 部分：创建控制台应用程序来测试共享访问签名",
      "pos": [
        13622,
        13647
      ]
    },
    {
      "content": "为了测试在之前的示例中创建的共享访问签名，我们将创建第二个控制台应用程序，该应用程序将使用这些签名在容器和 Blob 上执行操作。",
      "pos": [
        13649,
        13714
      ]
    },
    {
      "pos": [
        13718,
        13820
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 如果自你完成本教程的第一部分后超过 24 小时，则你生成的签名将不再有效。在这种情况下，你应该在第一个控制台应用程序中运行代码，生成全新的共享访问签名以供在本教程的第二部分使用。"
    },
    {
      "pos": [
        13822,
        14005
      ],
      "content": "在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 <bpt id=\"p1\">**</bpt>ConsumeSharedAccessSignatures<ept id=\"p1\">**</ept>。像之前所做的一样添加对 <bpt id=\"p2\">**</bpt>Microsoft.WindowsAzure.Configuration.dll<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>Microsoft.WindowsAzure.Storage.dll<ept id=\"p3\">**</ept> 的引用："
    },
    {
      "pos": [
        14007,
        14044
      ],
      "content": "在 Program.cs 文件的顶部，添加以下 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句："
    },
    {
      "pos": [
        14157,
        14215
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法的主体中，添加以下约束，并且将其值更新为你在本教程的第 1 部分中生成的共享访问签名。"
    },
    {
      "content": "添加方法以便尝试使用共享访问签名执行容器操作",
      "pos": [
        14536,
        14558
      ]
    },
    {
      "content": "接下来，我们将添加一个方法，该方法将在容器上使用共享访问签名测试一些有代表性的容器操作。请注意，使用共享访问签名返回对容器的引用，并且单独基于该签名验证对容器的访问。",
      "pos": [
        14560,
        14643
      ]
    },
    {
      "content": "将以下方法添加到 Program.cs：",
      "pos": [
        14645,
        14665
      ]
    },
    {
      "pos": [
        17929,
        17989
      ],
      "content": "更新 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法以使用你在容器上创建的两个共享访问签名调用 <bpt id=\"p2\">**</bpt>UseContainerSAS()<ept id=\"p2\">**</ept>："
    },
    {
      "content": "添加方法以便尝试使用共享访问签名执行 Blob 操作",
      "pos": [
        18563,
        18589
      ]
    },
    {
      "pos": [
        18591,
        18726
      ],
      "content": "最后，我们将添加一个方法，该方法将在 Blob 上使用共享访问签名测试一些有代表性的 Blob 操作。在这个例子中，我们使用在共享访问签名中传入的构造函数 <bpt id=\"p1\">**</bpt>CloudBlockBlob(String)<ept id=\"p1\">**</ept> 返回对该 Blob 的引用。无需其他身份验证；它仅基于签名。"
    },
    {
      "content": "将以下方法添加到 Program.cs：",
      "pos": [
        18728,
        18748
      ]
    },
    {
      "pos": [
        21179,
        21238
      ],
      "content": "更新 <bpt id=\"p1\">**</bpt>Main()<ept id=\"p1\">**</ept> 方法以使用你在 Blob 上创建的两个共享访问签名调用 <bpt id=\"p2\">**</bpt>UseBlobSAS()<ept id=\"p2\">**</ept>："
    },
    {
      "content": "运行该控制台应用程序并观察输出，查看对各个签名允许的操作。控制台窗口中的输出将与下面的输出类似：",
      "pos": [
        22005,
        22053
      ]
    },
    {
      "content": "sas-console-output-2",
      "pos": [
        22057,
        22077
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        22105,
        22109
      ]
    },
    {
      "content": "共享访问签名，第 1 部分：了解 SAS 模型",
      "pos": [
        22112,
        22135
      ]
    },
    {
      "content": "管理对 Azure 存储资源的访问",
      "pos": [
        22210,
        22227
      ]
    },
    {
      "content": "使用共享访问签名委托访问 (REST API)",
      "pos": [
        22292,
        22315
      ]
    },
    {
      "content": "介绍表和队列 SAS",
      "pos": [
        22380,
        22390
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"创建 SAS 并将 SAS 用于 Blob 存储 | Azure\" \n    description=\"本教程演示如何创建共享访问签名以用于 Blob 存储，以及如何从客户端应用程序使用这些签名。\"\n    services=\"storage\" \n    documentationCenter=\"\" \n    authors=\"tamram\" \n    manager=\"adinah\" \n    editor=\"cgronlun\"/>\n\n<tags \n    ms.service=\"storage\" \n    ms.date=\"01/07/2016\"\n    wacn.date=\"02/25/2016\"/>\n\n\n\n# 共享访问签名，第 2 部分：创建 SAS 并将 SAS 用于 Blob 存储\n\n## 概述\n\n本教程的[第 1 部分](/documentation/articles/storage-dotnet-shared-access-signature-part-1)介绍了共享访问签名 (SAS) 并且说明了有关使用共享访问签名的最佳实践。第 2 部分将演示如何生成共享访问签名以及如何将共享访问签名用于 Azure Blob 服务。示例是用 C# 编写的并使用了 Azure .NET 存储客户端库。涉及的任务包括使用共享访问签名的以下方面：\n\n- 在容器上生成共享访问签名\n- 在 Blob 上生成共享访问签名\n- 创建用于管理容器资源上的签名的存储访问策略\n- 从客户端应用程序测试共享访问签名\n\n## 关于本教程\n\n在本教程中，我们将通过创建两个控制台应用程序重点说明如何为容器和 Blob 创建共享访问签名。第一个控制台应用程序将在一个容器和 Blob 上生成共享访问签名。该应用程序知道存储帐户密钥。第二个控制台应用程序（将充当客户端应用程序）使用第一个应用程序创建的共享访问签名访问容器和 Blob 资源。该应用程序仅使用共享访问签名验证其对容器和 Blob 资源的访问 – 它不知道帐户密钥。\n\n## 第 1 部分：创建控制台应用程序以便生成共享访问签名\n\n首先，确保你安装了 Azure .NET 存储客户端库。你可以安装包含该客户端库的最新程序集的 [NuGet 程序包](http://nuget.org/packages/WindowsAzure.Storage/ \"NuGet 包\")；这是确保你具有最新修补程序的建议方法。你还可以通过下载包含该客户端库的最新 [Azure SDK for .NET](/downloads/) 版本来下载该客户端库。\n\n在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 **GenerateSharedAccessSignatures**。使用以下方法之一添加对 **Microsoft.WindowsAzure.Configuration.dll** 和 **Microsoft.WindowsAzure.Storage.dll** 的引用：\n\n-   如果你想要安装 NuGet 程序包，请首先安装 [NuGet Package Manager Extension for Visual Studio](http://visualstudiogallery.msdn.microsoft.com/27077b70-9dad-4c64-adcf-c7cf6bc9970c)。在 Visual Studio 中，选择“项目”|“管理 NuGet 包”，在线搜索“Azure 存储空间”，然后按照说明进行安装。\n-   另外，还可以在你安装的 Azure SDK 中找到这些程序集，然后添加对它们的引用。\n\n在 Program.cs 文件的顶部，添加以下 **using** 语句：\n\n    using System.IO;    \n    using Microsoft.WindowsAzure;\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Blob;\n\n编辑 app.config 文件，使其所含配置设置中的连接字符串指向你的存储帐户。你的 app.config 文件应如下所示：\n\n    <configuration>\n      <startup>\n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" />\n      </startup>\n      <appSettings>\n        <add key=\"StorageConnectionString\" value=\"DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=mykey;EndpointSuffix=core.chinacloudapi.cn\"/>\n      </appSettings>\n    </configuration>\n\n### 为容器生成共享访问签名 URI\n\n开始时，我们将添加一个方法以便在新容器上生成共享访问签名。在这个例子中，该签名不与某一存储访问策略相关联，因此，它在 URI 上携带信息，指示其到期时间以及将授予的权限。\n\n首先，向 **Main()** 方法中添加代码，以便验证对你的存储帐户的访问并且创建一个新容器：\n\n    static void Main(string[] args)\n    {\n        //Parse the connection string and return a reference to the storage account.\n        CloudStorageAccount storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n        //Create the blob client object.\n        CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n        //Get a reference to a container to use for the sample code, and create it if it does not exist.\n        CloudBlobContainer container = blobClient.GetContainerReference(\"sascontainer\");\n        container.CreateIfNotExists();\n\n        //Insert calls to the methods created below here...\n\n        //Require user input before closing the console window.\n        Console.ReadLine();\n    }\n\n接下来，添加一个新方法，该方法为容器生成共享访问签名并且返回签名 URI：\n\n    static string GetContainerSasUri(CloudBlobContainer container)\n    {\n        //Set the expiry time and permissions for the container.\n        //In this case no start time is specified, so the shared access signature becomes valid immediately.\n        SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy();\n        sasConstraints.SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24);\n        sasConstraints.Permissions = SharedAccessBlobPermissions.Write | SharedAccessBlobPermissions.List;\n\n        //Generate the shared access signature on the container, setting the constraints directly on the signature.\n        string sasContainerToken = container.GetSharedAccessSignature(sasConstraints);\n\n        //Return the URI string for the container, including the SAS token.\n        return container.Uri + sasContainerToken;\n    }\n\n在 **Main()** 方法的底部，在调用 **Console.ReadLine()** 之前，添加以下代码行以调用 **GetContainerSasUri()** 并将签名 URI 写入控制台窗口：\n\n    //Generate a SAS URI for the container, without a stored access policy.\n    Console.WriteLine(\"Container SAS URI: \" + GetContainerSasUri(container));\n    Console.WriteLine();\n\n编译并且运行以输出新容器的共享访问签名 URI。该 URI 将类似以下 URI：\n\n    https://storageaccount.blob.core.chinacloudapi.cn/sascontainer?sv=2012-02-12&se=2013-04-13T00%3A12%3A08Z&sr=c&sp=wl&sig=t%2BbzU9%2B7ry4okULN9S0wst%2F8MCUhTjrHyV9rDNLSe8g%3D\n\n在你运行代码后，你在容器上创建的共享访问签名将在接下来的 24 个小时内有效。该签名向客户端授予列出容器中的 Blob 以及将新 Blob 写入容器的权限。\n\n### 为 Blob 生成共享访问签名 URI\n\n接下来，我们将编写类似的代码，以便在容器内创建新 Blob 并且为其生成共享访问签名。该共享访问签名不与某一存储访问策略相关联，因此，它包含有关 URI 的开始时间、到期时间和权限。\n\n添加一个新方法，该方法创建一个新 Blob 并且向其写入某些文本，然后生成共享访问签名并且返回签名 URI：\n\n    static string GetBlobSasUri(CloudBlobContainer container)\n    {\n        //Get a reference to a blob within the container.\n        CloudBlockBlob blob = container.GetBlockBlobReference(\"sasblob.txt\");\n\n        //Upload text to the blob. If the blob does not yet exist, it will be created.\n        //If the blob does exist, its existing content will be overwritten.\n        string blobContent = \"This blob will be accessible to clients via a Shared Access Signature.\";\n        MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(blobContent));\n        ms.Position = 0;\n        using (ms)\n        {\n            blob.UploadFromStream(ms);\n        }\n\n        //Set the expiry time and permissions for the blob.\n        //In this case the start time is specified as a few minutes in the past, to mitigate clock skew.\n        //The shared access signature will be valid immediately.\n        SharedAccessBlobPolicy sasConstraints = new SharedAccessBlobPolicy();\n        sasConstraints.SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-5);\n        sasConstraints.SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24);\n        sasConstraints.Permissions = SharedAccessBlobPermissions.Read | SharedAccessBlobPermissions.Write;\n\n        //Generate the shared access signature on the blob, setting the constraints directly on the signature.\n        string sasBlobToken = blob.GetSharedAccessSignature(sasConstraints);\n\n        //Return the URI string for the container, including the SAS token.\n        return blob.Uri + sasBlobToken;\n    }\n\n在 **Main()** 方法的底部，在调用 **Console.ReadLine()** 之前，添加以下代码行以调用 **GetBlobSasUri()**，并将共享访问签名 URI 写入控制台窗口：\n\n    //Generate a SAS URI for a blob within the container, without a stored access policy.\n    Console.WriteLine(\"Blob SAS URI: \" + GetBlobSasUri(container));\n    Console.WriteLine();\n\n\n编译并且运行以输出新 Blob 的共享访问签名 URI。该 URI 将类似以下 URI：\n\n    https://storageaccount.blob.core.chinacloudapi.cn/sascontainer/sasblob.txt?sv=2012-02-12&st=2013-04-12T23%3A37%3A08Z&se=2013-04-13T00%3A12%3A08Z&sr=b&sp=rw&sig=dF2064yHtc8RusQLvkQFPItYdeOz3zR8zHsDMBi4S30%3D\n\n### 在容器上创建存储访问策略\n\n现在来在容器上创建一个存储访问策略，该策略定义与其相关联的任何共享访问签名的约束。\n\n在前面的示例中，我们指定了开始时间（隐式或显式的）、到期时间以及共享访问签名 URI 本身的权限。在接下来的示例中，我们将在存储访问策略上指定它们，而不是在共享访问签名上指定它们。这样做将使我们不必重新发布共享访问签名即可更改这些约束。\n\n可以使一个或多个约束作用于共享访问签名上，使其余的约束作用于存储访问策略上。但是，你只能在这两者之一中指定开始时间、到期时间和权限；例如，不能对共享访问签名指定权限，同时也对存储访问策略指定权限。\n\n注意，当你向容器添加一个访问策略时，你必须获取容器的现有权限，添加新的访问策略，然后设置容器的权限。\n\n添加一个新方法，该方法在窗口上创建一个新的存储访问策略并返回该策略的名称：\n\n    static void CreateSharedAccessPolicy(CloudBlobClient blobClient, CloudBlobContainer container,\n        string policyName)\n    {\n        //Create a new shared access policy and define its constraints.\n        SharedAccessBlobPolicy sharedPolicy = new SharedAccessBlobPolicy()\n        {\n            SharedAccessExpiryTime = DateTime.UtcNow.AddHours(24),\n            Permissions = SharedAccessBlobPermissions.Write | SharedAccessBlobPermissions.List | SharedAccessBlobPermissions.Read\n        };\n\n        //Get the container's existing permissions.\n        BlobContainerPermissions permissions = container.GetPermissions();\n\n        //Add the new policy to the container's permissions, and set the container's permissions.\n        permissions.SharedAccessPolicies.Add(policyName, sharedPolicy);\n        container.SetPermissions(permissions);\n    }\n\n在 **Main()** 方法的底部，在调用 **Console.ReadLine()** 之前，添加以下代码行以首先清除任何现有访问策略，然后调用 **CreateSharedAccessPolicy()** 方法：\n\n    //Clear any existing access policies on container.\n    BlobContainerPermissions perms = container.GetPermissions();\n    perms.SharedAccessPolicies.Clear();\n    container.SetPermissions(perms);\n\n    //Create a new access policy on the container, which may be optionally used to provide constraints for\n    //shared access signatures on the container and the blob.\n    string sharedAccessPolicyName = \"tutorialpolicy\";\n    CreateSharedAccessPolicy(blobClient, container, sharedAccessPolicyName);\n\n注意，当清除容器上的访问策略时，你必须首先获取容器的现有权限，接着清除权限，然后再次设置权限。\n\n### 在使用访问策略的容器上生成共享访问签名 URI\n\n接下来，我们将在之前创建的容器上创建另一个共享访问签名，但这次，我们要将该签名与我们在之前示例中创建的访问策略相关联。\n\n添加一个新方法以便在容器上生成另一个共享访问签名：\n\n    static string GetContainerSasUriWithPolicy(CloudBlobContainer container, string policyName)\n    {\n        //Generate the shared access signature on the container. In this case, all of the constraints for the\n        //shared access signature are specified on the stored access policy.\n        string sasContainerToken = container.GetSharedAccessSignature(null, policyName);\n\n        //Return the URI string for the container, including the SAS token.\n        return container.Uri + sasContainerToken;\n    }\n\n在 **Main()** 方法的底部，在调用 **Console.ReadLine()** 之前，添加以下代码行以调用 **GetContainerSasUriWithPolicy** 方法：\n\n    //Generate a SAS URI for the container, using a stored access policy to set constraints on the SAS.\n    Console.WriteLine(\"Container SAS URI using stored access policy: \" + GetContainerSasUriWithPolicy(container, sharedAccessPolicyName));\n    Console.WriteLine();\n\n### 在使用访问策略的 Blob 上生成共享访问签名 URI\n\n最后，我们将添加一个类似方法，以便创建另一个 Blob 并且生成与某一访问策略相关联的共享访问签名。\n\n添加一个新方法以便创建 Blob 并且生成共享访问签名：\n\n    static string GetBlobSasUriWithPolicy(CloudBlobContainer container, string policyName)\n    {\n        //Get a reference to a blob within the container.\n        CloudBlockBlob blob = container.GetBlockBlobReference(\"sasblobpolicy.txt\");\n\n        //Upload text to the blob. If the blob does not yet exist, it will be created.\n        //If the blob does exist, its existing content will be overwritten.\n        string blobContent = \"This blob will be accessible to clients via a shared access signature. \" +\n        \"A stored access policy defines the constraints for the signature.\";\n        MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(blobContent));\n        ms.Position = 0;\n        using (ms)\n        {\n            blob.UploadFromStream(ms);\n        }\n\n        //Generate the shared access signature on the blob.\n        string sasBlobToken = blob.GetSharedAccessSignature(null, policyName);\n\n        //Return the URI string for the container, including the SAS token.\n        return blob.Uri + sasBlobToken;\n    }\n\n在 **Main()** 方法的底部，在调用 **Console.ReadLine()** 之前，添加以下代码行以调用 **GetBlobSasUriWithPolicy** 方法：\n\n    //Generate a SAS URI for a blob within the container, using a stored access policy to set constraints on the SAS.\n    Console.WriteLine(\"Blob SAS URI using stored access policy: \" + GetBlobSasUriWithPolicy(container, sharedAccessPolicyName));\n    Console.WriteLine();\n\n现在，完整的 **Main()** 方法看起来应如下所示。运行它以将共享访问签名 URI 写入控制台窗口，然后将它们复制并粘贴到一个文本文件中以在本教程的第二部分中使用。\n\n    static void Main(string[] args)\n    {\n        //Parse the connection string and return a reference to the storage account.\n        CloudStorageAccount storageAccount = CloudStorageAccount.Parse(CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n        //Create the blob client object.\n        CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n        //Get a reference to a container to use for the sample code, and create it if it does not exist.\n        CloudBlobContainer container = blobClient.GetContainerReference(\"sascontainer\");\n        container.CreateIfNotExists();\n\n        //Generate a SAS URI for the container, without a stored access policy.\n        Console.WriteLine(\"Container SAS URI: \" + GetContainerSasUri(container));\n        Console.WriteLine();\n\n        //Generate a SAS URI for a blob within the container, without a stored access policy.\n        Console.WriteLine(\"Blob SAS URI: \" + GetBlobSasUri(container));\n        Console.WriteLine();\n\n        //Clear any existing access policies on container.\n        BlobContainerPermissions perms = container.GetPermissions();\n        perms.SharedAccessPolicies.Clear();\n        container.SetPermissions(perms);\n\n        //Create a new access policy on the container, which may be optionally used to provide constraints for\n        //shared access signatures on the container and the blob.\n        string sharedAccessPolicyName = \"tutorialpolicy\";\n        CreateSharedAccessPolicy(blobClient, container, sharedAccessPolicyName);\n\n        //Generate a SAS URI for the container, using a stored access policy to set constraints on the SAS.\n        Console.WriteLine(\"Container SAS URI using stored access policy: \" + GetContainerSasUriWithPolicy(container, sharedAccessPolicyName));\n        Console.WriteLine();\n\n        //Generate a SAS URI for a blob within the container, using a stored access policy to set constraints on the SAS.\n        Console.WriteLine(\"Blob SAS URI using stored access policy: \" + GetBlobSasUriWithPolicy(container, sharedAccessPolicyName));\n        Console.WriteLine();\n\n        Console.ReadLine();\n    }\n\n运行 GenerateSharedAccessSignatures 控制台应用程序时，你将会在控制台窗口中看到如下输出。它们是你在本教程的第 2 部分中将使用的共享访问签名。\n\n![sas-console-output-1][sas-console-output-1]\n\n## 第 2 部分：创建控制台应用程序来测试共享访问签名\n\n为了测试在之前的示例中创建的共享访问签名，我们将创建第二个控制台应用程序，该应用程序将使用这些签名在容器和 Blob 上执行操作。\n\n> [AZURE.NOTE] 如果自你完成本教程的第一部分后超过 24 小时，则你生成的签名将不再有效。在这种情况下，你应该在第一个控制台应用程序中运行代码，生成全新的共享访问签名以供在本教程的第二部分使用。\n\n在 Visual Studio 中，创建一个新的 Windows 控制台应用程序并将其命名为 **ConsumeSharedAccessSignatures**。像之前所做的一样添加对 **Microsoft.WindowsAzure.Configuration.dll** 和 **Microsoft.WindowsAzure.Storage.dll** 的引用：\n\n在 Program.cs 文件的顶部，添加以下 **using** 语句：\n\n    using System.IO;\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Blob;\n\n在 **Main()** 方法的主体中，添加以下约束，并且将其值更新为你在本教程的第 1 部分中生成的共享访问签名。\n\n    static void Main(string[] args)\n    {\n        string containerSAS = \"<your container SAS>\";\n        string blobSAS = \"<your blob SAS>\";\n        string containerSASWithAccessPolicy = \"<your container SAS with access policy>\";\n        string blobSASWithAccessPolicy = \"<your blob SAS with access policy>\";\n    }\n\n### 添加方法以便尝试使用共享访问签名执行容器操作\n\n接下来，我们将添加一个方法，该方法将在容器上使用共享访问签名测试一些有代表性的容器操作。请注意，使用共享访问签名返回对容器的引用，并且单独基于该签名验证对容器的访问。\n\n将以下方法添加到 Program.cs：\n\n    static void UseContainerSAS(string sas)\n    {\n        //Try performing container operations with the SAS provided.\n\n        //Return a reference to the container using the SAS URI.\n        CloudBlobContainer container = new CloudBlobContainer(new Uri(sas));\n\n        //Create a list to store blob URIs returned by a listing operation on the container.\n        List<ICloudBlob> blobList = new List<ICloudBlob>();\n\n        //Write operation: write a new blob to the container.\n        try\n        {\n            CloudBlockBlob blob = container.GetBlockBlobReference(\"blobCreatedViaSAS.txt\");\n            string blobContent = \"This blob was created with a shared access signature granting write permissions to the container. \";\n            MemoryStream msWrite = new MemoryStream(Encoding.UTF8.GetBytes(blobContent));\n            msWrite.Position = 0;\n            using (msWrite)\n            {\n                blob.UploadFromStream(msWrite);\n            }\n            Console.WriteLine(\"Write operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (StorageException e)\n        {\n            Console.WriteLine(\"Write operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }\n\n        //List operation: List the blobs in the container.\n        try\n        {\n            foreach (ICloudBlob blob in container.ListBlobs())\n            {\n                blobList.Add(blob);\n            }\n            Console.WriteLine(\"List operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (StorageException e)\n        {\n            Console.WriteLine(\"List operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }\n\n        //Read operation: Get a reference to one of the blobs in the container and read it.\n        try\n        {\n            CloudBlockBlob blob = container.GetBlockBlobReference(blobList[0].Name);\n            MemoryStream msRead = new MemoryStream();\n            msRead.Position = 0;\n            using (msRead)\n            {\n                blob.DownloadToStream(msRead);\n                Console.WriteLine(msRead.Length);\n            }\n            Console.WriteLine(\"Read operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (StorageException e)\n        {\n            Console.WriteLine(\"Read operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }\n        Console.WriteLine();\n\n        //Delete operation: Delete a blob in the container.\n        try\n        {\n            CloudBlockBlob blob = container.GetBlockBlobReference(blobList[0].Name);\n            blob.Delete();\n            Console.WriteLine(\"Delete operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (StorageException e)\n        {\n            Console.WriteLine(\"Delete operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }        \n    }\n\n\n更新 **Main()** 方法以使用你在容器上创建的两个共享访问签名调用 **UseContainerSAS()**：\n\n    static void Main(string[] args)\n    {\n        string containerSAS = \"<your container SAS>\";\n        string blobSAS = \"<your blob SAS>\";\n        string containerSASWithAccessPolicy = \"<your container SAS with access policy>\";\n        string blobSASWithAccessPolicy = \"<your blob SAS with access policy>\";\n\n        //Call the test methods with the shared access signatures created on the container, with and without the access policy.\n        UseContainerSAS(containerSAS);\n        UseContainerSAS(containerSASWithAccessPolicy);\n\n        Console.ReadLine();\n    }\n\n\n### 添加方法以便尝试使用共享访问签名执行 Blob 操作\n\n最后，我们将添加一个方法，该方法将在 Blob 上使用共享访问签名测试一些有代表性的 Blob 操作。在这个例子中，我们使用在共享访问签名中传入的构造函数 **CloudBlockBlob(String)** 返回对该 Blob 的引用。无需其他身份验证；它仅基于签名。\n\n将以下方法添加到 Program.cs：\n\n    static void UseBlobSAS(string sas)\n    {\n        //Try performing blob operations using the SAS provided.\n\n        //Return a reference to the blob using the SAS URI.\n        CloudBlockBlob blob = new CloudBlockBlob(new Uri(sas));\n\n        //Write operation: Write a new blob to the container.\n        try\n        {\n            string blobContent = \"This blob was created with a shared access signature granting write permissions to the blob. \";\n            MemoryStream msWrite = new MemoryStream(Encoding.UTF8.GetBytes(blobContent));\n            msWrite.Position = 0;\n            using (msWrite)\n            {\n                blob.UploadFromStream(msWrite);\n            }\n            Console.WriteLine(\"Write operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (StorageException e)\n        {\n            Console.WriteLine(\"Write operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }\n\n        //Read operation: Read the contents of the blob.\n        try\n        {\n            MemoryStream msRead = new MemoryStream();\n            using (msRead)\n            {\n                blob.DownloadToStream(msRead);\n                msRead.Position = 0;\n                using (StreamReader reader = new StreamReader(msRead, true))\n                {\n                    string line;\n                    while ((line = reader.ReadLine()) != null)\n                    {\n                        Console.WriteLine(line);\n                    }\n                }\n            }\n            Console.WriteLine(\"Read operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (StorageException e)\n        {\n            Console.WriteLine(\"Read operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }\n\n        //Delete operation: Delete the blob.\n        try\n        {\n            blob.Delete();\n            Console.WriteLine(\"Delete operation succeeded for SAS \" + sas);\n            Console.WriteLine();\n        }\n        catch (StorageException e)\n        {\n            Console.WriteLine(\"Delete operation failed for SAS \" + sas);\n            Console.WriteLine(\"Additional error information: \" + e.Message);\n            Console.WriteLine();\n        }        \n    }\n\n\n更新 **Main()** 方法以使用你在 Blob 上创建的两个共享访问签名调用 **UseBlobSAS()**：\n\n    static void Main(string[] args)\n    {\n        string containerSAS = \"<your container SAS>\";\n        string blobSAS = \"<your blob SAS>\";\n        string containerSASWithAccessPolicy = \"<your container SAS with access policy>\";\n        string blobSASWithAccessPolicy = \"<your blob SAS with access policy>\";\n\n        //Call the test methods with the shared access signatures created on the container, with and without the access policy.\n        UseContainerSAS(containerSAS);\n        UseContainerSAS(containerSASWithAccessPolicy);\n\n        //Call the test methods with the shared access signatures created on the blob, with and without the access policy.\n        UseBlobSAS(blobSAS);\n        UseBlobSAS(blobSASWithAccessPolicy);\n\n        Console.ReadLine();\n    }\n\n运行该控制台应用程序并观察输出，查看对各个签名允许的操作。控制台窗口中的输出将与下面的输出类似：\n\n![sas-console-output-2][sas-console-output-2]\n\n## 后续步骤\n\n[共享访问签名，第 1 部分：了解 SAS 模型](/documentation/articles/storage-dotnet-shared-access-signature-part-1)\n\n[管理对 Azure 存储资源的访问](http://msdn.microsoft.com/zh-cn/library/azure/ee393343.aspx)\n\n[使用共享访问签名委托访问 (REST API)](http://msdn.microsoft.com/zh-cn/library/azure/ee395415.aspx)\n\n[介绍表和队列 SAS](http://blogs.msdn.com/b/windowsazurestorage/archive/2012/06/12/introducing-table-sas-shared-access-signature-queue-sas-and-update-to-blob-sas.aspx)\n\n[sas-console-output-1]: ./media/storage-dotnet-shared-access-signature-part-2/sas-console-output-1.PNG\n[sas-console-output-2]: ./media/storage-dotnet-shared-access-signature-part-2/sas-console-output-2.PNG\n\n<!---HONumber=Mooncake_0215_2016-->"
}