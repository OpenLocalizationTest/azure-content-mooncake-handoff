{
  "nodes": [
    {
      "content": "如何使用服务总线队列 (.NET) | Azure",
      "pos": [
        27,
        52
      ]
    },
    {
      "content": "了解如何在 Azure 中使用 Service Bus 队列。代码示例是使用 .NET API 通过 C# 编写的。",
      "pos": [
        71,
        129
      ]
    },
    {
      "content": "如何使用 Service Bus 队列",
      "pos": [
        344,
        363
      ]
    },
    {
      "pos": [
        456,
        553
      ],
      "content": "本文介绍了如何使用服务总线队列。相关示例采用 C# 编写且使用 .NET API。涉及的方案包括创建队列以及发送和接收消息。有关队列的详细信息，请参阅<bpt id=\"p1\">[</bpt>后续步骤<ept id=\"p1\">](#next-steps)</ept>部分。"
    },
    {
      "content": "配置应用程序以使用 Service Bus",
      "pos": [
        718,
        739
      ]
    },
    {
      "content": "在您创建使用 Service Bus 的应用程序时，必须添加对 Service Bus 程序集的引用并包括相应的命名空间。",
      "pos": [
        741,
        802
      ]
    },
    {
      "content": "添加服务总线 NuGet 包",
      "pos": [
        807,
        821
      ]
    },
    {
      "pos": [
        823,
        1007
      ],
      "content": "服务总线 <bpt id=\"p1\">**</bpt>NuGet<ept id=\"p1\">**</ept> 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。利用 NuGet Visual Studio 扩展，可以轻松地在 Visual Studio 和 Visual Studio Express 中安装和更新库和工具。服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。"
    },
    {
      "content": "要在你的应用程序中安装 NuGet 包，请执行以下操作：",
      "pos": [
        1009,
        1037
      ]
    },
    {
      "content": "在解决方案资源管理器中，右键单击“引用”，然后单击“管理 NuGet 包”。",
      "pos": [
        1043,
        1081
      ]
    },
    {
      "content": "搜索“服务总线”并选择“Azure 服务总线”项。单击“安装”以完成安装，然后关闭此对话框。",
      "pos": [
        1086,
        1132
      ]
    },
    {
      "content": "你现在可以为服务总线编写代码。",
      "pos": [
        1146,
        1161
      ]
    },
    {
      "content": "设置服务总线连接字符串",
      "pos": [
        1166,
        1177
      ]
    },
    {
      "content": "服务总线使用连接字符串来存储终结点和凭据。你可以将连接字符串置于配置文件中，而不是对其进行硬编码：",
      "pos": [
        1179,
        1228
      ]
    },
    {
      "content": "当使用 Azure 云服务时，建议你使用 Azure 服务配置系统（.csdef 和 .cscfg 文件）来存储连接字符串。",
      "pos": [
        1232,
        1294
      ]
    },
    {
      "content": "在使用 Azure Web 应用或 Azure 虚拟机时，建议使用 .NET 配置系统（如 Web.config 文件）来存储连接字符串。",
      "pos": [
        1297,
        1366
      ]
    },
    {
      "pos": [
        1368,
        1459
      ],
      "content": "在上述两种情况下，你都可以使用 <bpt id=\"p1\">[</bpt>CloudConfigurationManager.GetSetting<ept id=\"p1\">][GetSetting]</ept> 方法检索连接字符串，本文稍后部分将对此进行介绍。"
    },
    {
      "content": "使用云服务时配置连接字符串",
      "pos": [
        1465,
        1478
      ]
    },
    {
      "pos": [
        1480,
        1593
      ],
      "content": "该服务配置机制是 Azure 云服务项目特有的，它使你能够从 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">][]</ept>动态更改配置设置，而无需重新部署你的应用程序。例如，向服务定义 (.csdef) 文件中添加 <ph id=\"ph1\">`Setting`</ph> 标签，如以下示例所示。"
    },
    {
      "content": "然后在服务配置 (.cscfg) 文件中指定值，如以下示例所示。",
      "pos": [
        1858,
        1890
      ]
    },
    {
      "content": "使用从 Azure 经典门户检索到的共享访问签名 (SAS) 密钥名称和密钥值，如上一部分中所述。",
      "pos": [
        2311,
        2360
      ]
    },
    {
      "content": "在使用 Web 应用或 Azure 虚拟机时配置连接字符串",
      "pos": [
        2366,
        2395
      ]
    },
    {
      "pos": [
        2397,
        2479
      ],
      "content": "在使用 Web 应用或虚拟机时，建议你使用 .NET 配置系统（如 <bpt id=\"p1\">**</bpt>Web.config<ept id=\"p1\">**</ept>）。你可以使用 <ph id=\"ph1\">`&lt;appSettings&gt;`</ph> 元素存储连接字符串："
    },
    {
      "content": "使用从 Azure 经典门户检索到的 SAS 名称和密钥值，如上一部分中所述。",
      "pos": [
        2775,
        2814
      ]
    },
    {
      "content": "创建队列",
      "pos": [
        2819,
        2823
      ]
    },
    {
      "pos": [
        2825,
        2886
      ],
      "content": "你可以使用 <bpt id=\"p1\">[</bpt>NamespaceManager<ept id=\"p1\">][]</ept> 类对服务总线队列执行管理操作。此类提供了创建、枚举和删除队列的方法。"
    },
    {
      "pos": [
        2888,
        3024
      ],
      "content": "此示例使用带连接字符串的 Azure <bpt id=\"p1\">[</bpt>CloudConfigurationManager<ept id=\"p1\">][]</ept> 类构造 <bpt id=\"p2\">[</bpt>NamespaceManager<ept id=\"p2\">][]</ept> 对象，此连接字符串包含服务总线服务命名空间的基址和有权管理该命名空间的相应 SAS 凭据。此连接字符串的格式如以下示例所示。"
    },
    {
      "content": "使用以下示例，考虑上一节中的配置设置。",
      "pos": [
        3173,
        3192
      ]
    },
    {
      "pos": [
        3553,
        3916
      ],
      "content": "这里使用了 <bpt id=\"p1\">[</bpt>CreateQueue<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.createqueue.aspx)</ept> 方法的重载，以允许你调整队列属性（例如，为了将默认的生存时间 (TTL) 值设置为应用于发送到队列的消息）。使用 <bpt id=\"p2\">[</bpt>QueueDescription<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queuedescription.aspx)</ept> 类应用这些设置。以下示例演示如何创建名为 <ph id=\"ph1\">`TestQueue`</ph>、最大大小为 5 GB、默认消息 TTL 为 1 分钟的队列。"
    },
    {
      "pos": [
        4434,
        4625
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你可以对 <bpt id=\"p1\">[</bpt>NamespaceManager<ept id=\"p1\">][]</ept> 对象使用 <bpt id=\"p2\">[</bpt>QueueExists<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.queueexists.aspx)</ept> 方法，以检查具有指定名称的队列是否已存在于某个服务命名空间中。"
    },
    {
      "content": "向队列发送消息",
      "pos": [
        4630,
        4637
      ]
    },
    {
      "pos": [
        4639,
        4689
      ],
      "content": "若要向服务总线队列发送消息，你的应用程序需使用连接字符串创建 <bpt id=\"p1\">[</bpt>QueueClient<ept id=\"p1\">][]</ept> 对象。"
    },
    {
      "pos": [
        4691,
        4902
      ],
      "content": "以下代码演示如何使用 <bpt id=\"p1\">[</bpt>CreateFromConnectionString<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.createfromconnectionstring.aspx)</ept> API 调用为刚创建的 <ph id=\"ph1\">`TestQueue`</ph> 队列创建 <bpt id=\"p2\">[</bpt>QueueClient<ept id=\"p2\">][]</ept> 对象。"
    },
    {
      "pos": [
        5156,
        5638
      ],
      "content": "在服务总线队列中发送和接收的消息是 <bpt id=\"p1\">[</bpt>BrokeredMessage<ept id=\"p1\">][]</ept> 类的实例。<bpt id=\"p2\">[</bpt>BrokeredMessage<ept id=\"p2\">][]</ept> 对象包含一组标准属性（如 <bpt id=\"p3\">[</bpt>Label<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx)</ept> 和 <bpt id=\"p4\">[</bpt>TimeToLive<ept id=\"p4\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)</ept>）、一个用来保存自定义应用程序特定属性的词典以及大量随机应用程序数据。应用程序可通过将任何可序列化对象传入到 <bpt id=\"p5\">[</bpt>BrokeredMessage<ept id=\"p5\">][]</ept> 对象的构造函数中来设置消息的正文，然后将使用适当的 <bpt id=\"p6\">**</bpt>DataContractSerializer<ept id=\"p6\">**</ept> 序列化对象。或者，你可以提供 <bpt id=\"p7\">**</bpt>System.IO.Stream<ept id=\"p7\">**</ept> 对象。"
    },
    {
      "pos": [
        5640,
        5703
      ],
      "content": "以下示例演示了如何将五条测试消息发送到在前面的代码示例中获取的 <ph id=\"ph1\">`TestQueue`</ph> <bpt id=\"p1\">[</bpt>QueueClient<ept id=\"p1\">][]</ept> 对象。"
    },
    {
      "pos": [
        6082,
        6313
      ],
      "content": "服务总线队列支持<bpt id=\"p1\">[</bpt>最大为 256 Kb 的消息<ept id=\"p1\">](/documentation/articles/service-bus-quotas)</ept>（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。如果启用了分区，则上限更高。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>分区消息实体<ept id=\"p2\">](/documentation/articles/service-bus-partitioning)</ept>。"
    },
    {
      "content": "如何从队列接收消息",
      "pos": [
        6318,
        6327
      ]
    },
    {
      "pos": [
        6329,
        6520
      ],
      "content": "从队列接收消息的建议方法是使用 <bpt id=\"p1\">[</bpt>QueueClient<ept id=\"p1\">][]</ept> 对象。<bpt id=\"p2\">[</bpt>QueueClient<ept id=\"p2\">][]</ept> 对象可在两种不同模式下工作：<bpt id=\"p3\">[</bpt>ReceiveAndDelete 和 PeekLock<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept>。"
    },
    {
      "pos": [
        6522,
        6761
      ],
      "content": "当使用 <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> 模式时，接收是一项单步操作。即，当服务总线收到对队列中某消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id=\"p2\">**</bpt>ReceiveAndDelete<ept id=\"p2\">**</ept> 是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于服务总线会将消息标记为“已使用”，因此当应用程序重新启动并重新开始使用消息时，它会漏掉在发生崩溃前使用的消息。"
    },
    {
      "pos": [
        6763,
        7001
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> 模式（这是默认模式）下，接收变成了一个两阶段操作，从而有可能支持不允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 <bpt id=\"p2\">[</bpt>Complete<ept id=\"p2\">][]</ept> 完成接收过程的第二个阶段。当服务总线发现 <bpt id=\"p3\">[</bpt>Complete<ept id=\"p3\">][]</ept> 调用时，它会将消息标记为“已使用”并将其从队列中删除。"
    },
    {
      "pos": [
        7003,
        7472
      ],
      "content": "以下示例演示如何使用默认的 <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> 模式接收和处理消息。若要指定不同的 <bpt id=\"p2\">[</bpt>ReceiveMode<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)</ept> 值，可以使用 <bpt id=\"p3\">[</bpt>CreateFromConnectionString<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.createfromconnectionstring.aspx)</ept> 的另一个重载。此示例使用 <bpt id=\"p4\">[</bpt>OnMessage<ept id=\"p4\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.onmessage.aspx)</ept> 回调来处理传入 <ph id=\"ph1\">`TestQueue`</ph> 的消息。"
    },
    {
      "pos": [
        8402,
        9051
      ],
      "content": "此示例使用 <bpt id=\"p1\">[</bpt>OnMessageOptions<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx)</ept> 对象配置 <bpt id=\"p2\">[</bpt>OnMessage<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.onmessage.aspx)</ept> 回调。将 <bpt id=\"p3\">[</bpt>AutoComplete<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx)</ept> 设置为 <bpt id=\"p4\">**</bpt>false<ept id=\"p4\">**</ept> 以允许手动控制何时对收到的消息调用 <bpt id=\"p5\">[</bpt>Complete<ept id=\"p5\">][]</ept>。将 <bpt id=\"p6\">[</bpt>AutoRenewTimeout<ept id=\"p6\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx)</ept> 设置为 1 分钟，这会导致客户端最多等待消息一分钟，然后调用会超时并且客户端将发出新的调用以检查是否有消息。此属性值会减少客户端无法检索消息时产生的应计费调用次数。"
    },
    {
      "content": "如何处理应用程序崩溃和不可读消息",
      "pos": [
        9056,
        9072
      ]
    },
    {
      "pos": [
        9074,
        9337
      ],
      "content": "服务总线提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id=\"p1\">[</bpt>Abandon<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx)</ept> 方法（而不是 <bpt id=\"p2\">[</bpt>Complete<ept id=\"p2\">][]</ept> 方法）。这将导致服务总线解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。"
    },
    {
      "content": "还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线将自动解锁该消息并使它可再次被接收。",
      "pos": [
        9339,
        9416
      ]
    },
    {
      "pos": [
        9418,
        9737
      ],
      "content": "如果应用程序在处理消息之后，但在发出 <bpt id=\"p1\">[</bpt>Complete<ept id=\"p1\">][]</ept> 请求之前发生崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作<bpt id=\"p2\">**</bpt>至少处理一次<ept id=\"p2\">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 <bpt id=\"p3\">[</bpt>MessageId<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx)</ept> 属性来实现，该属性在多次传送尝试中保持不变。"
    },
    {
      "content": "后续步骤",
      "pos": [
        9742,
        9746
      ]
    },
    {
      "content": "现在，你已了解有关 Service Bus 队列的基础知识，单击下面的链接可了解更多信息。",
      "pos": [
        9748,
        9793
      ]
    },
    {
      "pos": [
        9799,
        9829
      ],
      "content": "阅读有关<bpt id=\"p1\">[</bpt>队列、主题和订阅<ept id=\"p1\">][]</ept>中的服务总线消息实体的信息。"
    },
    {
      "pos": [
        9834,
        9887
      ],
      "content": "使用<bpt id=\"p1\">[</bpt>服务总线中转消息传送 .NET 教程<ept id=\"p1\">][]</ept>构建向服务总线队列发送消息以及从中接收消息的工作应用程序。"
    },
    {
      "pos": [
        9892,
        9931
      ],
      "content": "从 <bpt id=\"p1\">[</bpt>Azure 示例<ept id=\"p1\">][]</ept>下载服务总线示例，或参阅<bpt id=\"p2\">[</bpt>服务总线示例概述<ept id=\"p2\">][]</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何使用服务总线队列 (.NET) | Azure\"\n    description=\"了解如何在 Azure 中使用 Service Bus 队列。代码示例是使用 .NET API 通过 C# 编写的。\"\n    services=\"service-bus\"\n    documentationCenter=\".net\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.date=\"10/07/2015\"\n    wacn.date=\"01/21/2016\"/>\n\n# 如何使用 Service Bus 队列\n\n[AZURE.INCLUDE [service-bus-selector-queues](../includes/service-bus-selector-queues.md)]\n\n本文介绍了如何使用服务总线队列。相关示例采用 C# 编写且使用 .NET API。涉及的方案包括创建队列以及发送和接收消息。有关队列的详细信息，请参阅[后续步骤](#next-steps)部分。\n\n[AZURE.INCLUDE [create-account-note](../includes/create-account-note.md)]\n\n[AZURE.INCLUDE [howto-service-bus-queues](../includes/howto-service-bus-queues.md)]\n\n## 配置应用程序以使用 Service Bus\n\n在您创建使用 Service Bus 的应用程序时，必须添加对 Service Bus 程序集的引用并包括相应的命名空间。\n\n## 添加服务总线 NuGet 包\n\n服务总线 **NuGet** 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。利用 NuGet Visual Studio 扩展，可以轻松地在 Visual Studio 和 Visual Studio Express 中安装和更新库和工具。服务总线 NuGet 包是获取服务总线 API 并为应用程序配置所有服务总线依赖项的最简单的方法。\n\n要在你的应用程序中安装 NuGet 包，请执行以下操作：\n\n1.  在解决方案资源管理器中，右键单击“引用”，然后单击“管理 NuGet 包”。\n2.  搜索“服务总线”并选择“Azure 服务总线”项。单击“安装”以完成安装，然后关闭此对话框。\n\n    ![][7]\n\n你现在可以为服务总线编写代码。\n\n## 设置服务总线连接字符串\n\n服务总线使用连接字符串来存储终结点和凭据。你可以将连接字符串置于配置文件中，而不是对其进行硬编码：\n\n- 当使用 Azure 云服务时，建议你使用 Azure 服务配置系统（.csdef 和 .cscfg 文件）来存储连接字符串。\n- 在使用 Azure Web 应用或 Azure 虚拟机时，建议使用 .NET 配置系统（如 Web.config 文件）来存储连接字符串。\n\n在上述两种情况下，你都可以使用 [CloudConfigurationManager.GetSetting][GetSetting] 方法检索连接字符串，本文稍后部分将对此进行介绍。\n\n### 使用云服务时配置连接字符串\n\n该服务配置机制是 Azure 云服务项目特有的，它使你能够从 [Azure 经典门户][]动态更改配置设置，而无需重新部署你的应用程序。例如，向服务定义 (.csdef) 文件中添加 `Setting` 标签，如以下示例所示。\n\n```\n<ServiceDefinition name=\"Azure1\">\n...\n    <WebRole name=\"MyRole\" vmsize=\"Small\">\n        <ConfigurationSettings>\n            <Setting name=\"Microsoft.ServiceBus.ConnectionString\" />\n        </ConfigurationSettings>\n    </WebRole>\n...\n</ServiceDefinition>\n```\n然后在服务配置 (.cscfg) 文件中指定值，如以下示例所示。\n\n```\n<ServiceConfiguration serviceName=\"Azure1\">\n...\n    <Role name=\"MyRole\">\n        <ConfigurationSettings>\n            <Setting name=\"Microsoft.ServiceBus.ConnectionString\"\n                     value=\"Endpoint=sb://yourServiceNamespace.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\" />\n        </ConfigurationSettings>\n    </Role>\n...\n</ServiceConfiguration>\n```\n\n使用从 Azure 经典门户检索到的共享访问签名 (SAS) 密钥名称和密钥值，如上一部分中所述。\n\n### 在使用 Web 应用或 Azure 虚拟机时配置连接字符串\n\n在使用 Web 应用或虚拟机时，建议你使用 .NET 配置系统（如 **Web.config**）。你可以使用 `<appSettings>` 元素存储连接字符串：\n\n```\n<configuration>\n    <appSettings>\n        <add key=\"Microsoft.ServiceBus.ConnectionString\"\n             value=\"Endpoint=sb://yourServiceNamespace.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yourKey\" />\n    </appSettings>\n</configuration>\n```\n\n使用从 Azure 经典门户检索到的 SAS 名称和密钥值，如上一部分中所述。\n\n## 创建队列\n\n你可以使用 [NamespaceManager][] 类对服务总线队列执行管理操作。此类提供了创建、枚举和删除队列的方法。\n\n此示例使用带连接字符串的 Azure [CloudConfigurationManager][] 类构造 [NamespaceManager][] 对象，此连接字符串包含服务总线服务命名空间的基址和有权管理该命名空间的相应 SAS 凭据。此连接字符串的格式如以下示例所示。\n\n````\nEndpoint=sb://yourServiceNamespace.servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedSecretValue=yourKey\n````\n\n使用以下示例，考虑上一节中的配置设置。\n\n```\n// Create the queue if it does not exist already.\nstring connectionString =\n    CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\nvar namespaceManager =\n    NamespaceManager.CreateFromConnectionString(connectionString);\n\nif (!namespaceManager.QueueExists(\"TestQueue\"))\n{\n    namespaceManager.CreateQueue(\"TestQueue\");\n}\n```\n\n这里使用了 [CreateQueue](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.createqueue.aspx) 方法的重载，以允许你调整队列属性（例如，为了将默认的生存时间 (TTL) 值设置为应用于发送到队列的消息）。使用 [QueueDescription](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queuedescription.aspx) 类应用这些设置。以下示例演示如何创建名为 `TestQueue`、最大大小为 5 GB、默认消息 TTL 为 1 分钟的队列。\n\n```\n// Configure queue settings.\nQueueDescription qd = new QueueDescription(\"TestQueue\");\nqd.MaxSizeInMegabytes = 5120;\nqd.DefaultMessageTimeToLive = new TimeSpan(0, 1, 0);\n\n// Create a new queue with custom settings.\nstring connectionString =\n    CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\nvar namespaceManager =\n    NamespaceManager.CreateFromConnectionString(connectionString);\n\nif (!namespaceManager.QueueExists(\"TestQueue\"))\n{\n    namespaceManager.CreateQueue(qd);\n}\n```\n\n> [AZURE.NOTE]你可以对 [NamespaceManager][] 对象使用 [QueueExists](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.queueexists.aspx) 方法，以检查具有指定名称的队列是否已存在于某个服务命名空间中。\n\n## 向队列发送消息\n\n若要向服务总线队列发送消息，你的应用程序需使用连接字符串创建 [QueueClient][] 对象。\n\n以下代码演示如何使用 [CreateFromConnectionString](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.createfromconnectionstring.aspx) API 调用为刚创建的 `TestQueue` 队列创建 [QueueClient][] 对象。\n\n```\nstring connectionString =\n    CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\n\nQueueClient Client =\n    QueueClient.CreateFromConnectionString(connectionString, \"TestQueue\");\n\nClient.Send(new BrokeredMessage());\n```\n\n在服务总线队列中发送和接收的消息是 [BrokeredMessage][] 类的实例。[BrokeredMessage][] 对象包含一组标准属性（如 [Label](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.label.aspx) 和 [TimeToLive](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.timetolive.aspx)）、一个用来保存自定义应用程序特定属性的词典以及大量随机应用程序数据。应用程序可通过将任何可序列化对象传入到 [BrokeredMessage][] 对象的构造函数中来设置消息的正文，然后将使用适当的 **DataContractSerializer** 序列化对象。或者，你可以提供 **System.IO.Stream** 对象。\n\n以下示例演示了如何将五条测试消息发送到在前面的代码示例中获取的 `TestQueue` [QueueClient][] 对象。\n\n```\nfor (int i=0; i<5; i++)\n{\n  // Create message, passing a string message for the body.\n  BrokeredMessage message = new BrokeredMessage(\"Test message \" + i);\n\n  // Set some addtional custom app-specific properties.\n  message.Properties[\"TestProperty\"] = \"TestValue\";\n  message.Properties[\"Message number\"] = i;\n\n  // Send message to the queue.\n  Client.Send(message);\n}\n```\n\n服务总线队列支持[最大为 256 Kb 的消息](/documentation/articles/service-bus-quotas)（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。此队列大小是在创建时定义的，上限为 5 GB。如果启用了分区，则上限更高。有关详细信息，请参阅[分区消息实体](/documentation/articles/service-bus-partitioning)。\n\n## 如何从队列接收消息\n\n从队列接收消息的建议方法是使用 [QueueClient][] 对象。[QueueClient][] 对象可在两种不同模式下工作：[ReceiveAndDelete 和 PeekLock](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx)。\n\n当使用 **ReceiveAndDelete** 模式时，接收是一项单步操作。即，当服务总线收到对队列中某消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。**ReceiveAndDelete** 是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于服务总线会将消息标记为“已使用”，因此当应用程序重新启动并重新开始使用消息时，它会漏掉在发生崩溃前使用的消息。\n\n在 **PeekLock** 模式（这是默认模式）下，接收变成了一个两阶段操作，从而有可能支持不允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序完成消息处理（或可靠地存储消息以供将来处理）后，它将通过对收到的消息调用 [Complete][] 完成接收过程的第二个阶段。当服务总线发现 [Complete][] 调用时，它会将消息标记为“已使用”并将其从队列中删除。\n\n以下示例演示如何使用默认的 **PeekLock** 模式接收和处理消息。若要指定不同的 [ReceiveMode](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.receivemode.aspx) 值，可以使用 [CreateFromConnectionString](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.createfromconnectionstring.aspx) 的另一个重载。此示例使用 [OnMessage](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.onmessage.aspx) 回调来处理传入 `TestQueue` 的消息。\n\n```\nstring connectionString =\n  CloudConfigurationManager.GetSetting(\"Microsoft.ServiceBus.ConnectionString\");\nQueueClient Client =\n  QueueClient.CreateFromConnectionString(connectionString, \"TestQueue\");\n\n// Configure the callback options.\nOnMessageOptions options = new OnMessageOptions();\noptions.AutoComplete = false;\noptions.AutoRenewTimeout = TimeSpan.FromMinutes(1);\n\n// Callback to handle received messages.\nClient.OnMessage((message) =>\n{\n    try\n    {\n        // Process message from queue.\n        Console.WriteLine(\"Body: \" + message.GetBody<string>());\n        Console.WriteLine(\"MessageID: \" + message.MessageId);\n        Console.WriteLine(\"Test Property: \" +\n        message.Properties[\"TestProperty\"]);\n\n        // Remove message from queue.\n        message.Complete();\n    }\n    catch (Exception)\n    {\n        // Indicates a problem, unlock message in queue.\n        message.Abandon();\n    }\n}, options);\n```\n\n此示例使用 [OnMessageOptions](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.aspx) 对象配置 [OnMessage](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.onmessage.aspx) 回调。将 [AutoComplete](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.autocomplete.aspx) 设置为 **false** 以允许手动控制何时对收到的消息调用 [Complete][]。将 [AutoRenewTimeout](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.onmessageoptions.autorenewtimeout.aspx) 设置为 1 分钟，这会导致客户端最多等待消息一分钟，然后调用会超时并且客户端将发出新的调用以检查是否有消息。此属性值会减少客户端无法检索消息时产生的应计费调用次数。\n\n## 如何处理应用程序崩溃和不可读消息\n\n服务总线提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 [Abandon](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.abandon.aspx) 方法（而不是 [Complete][] 方法）。这将导致服务总线解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。\n\n还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线将自动解锁该消息并使它可再次被接收。\n\n如果应用程序在处理消息之后，但在发出 [Complete][] 请求之前发生崩溃，则在应用程序重新启动时会将该消息重新传送给它。此情况通常称作**至少处理一次**，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。这通常可以通过使用消息的 [MessageId](https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.messageid.aspx) 属性来实现，该属性在多次传送尝试中保持不变。\n\n## 后续步骤\n\n现在，你已了解有关 Service Bus 队列的基础知识，单击下面的链接可了解更多信息。\n\n-   阅读有关[队列、主题和订阅][]中的服务总线消息实体的信息。\n-   使用[服务总线中转消息传送 .NET 教程][]构建向服务总线队列发送消息以及从中接收消息的工作应用程序。\n-   从 [Azure 示例][]下载服务总线示例，或参阅[服务总线示例概述][]。\n\n  [Azure 经典门户]: http://manage.windowsazure.cn\n  [7]: ./media/service-bus-dotnet-how-to-use-queues/getting-started-multi-tier-13.png\n  [队列、主题和订阅]: /documentation/articles/service-bus-queues-topics-subscriptions\n  [服务总线中转消息传送 .NET 教程]: /documentation/articles/service-bus-brokered-tutorial-dotnet\n  [Azure 示例]: https://code.msdn.microsoft.com/site/search?query=service%20bus&f%5B0%5D.Value=service%20bus&f%5B0%5D.Type=SearchText&ac=2\n  [服务总线示例概述]: /documentation/articles/service-bus-samples\n  [GetSetting]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.cloudconfigurationmanager.getsetting.aspx\n  [CloudConfigurationManager]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.windowsazure.cloudconfigurationmanager\n  [NamespaceManager]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.namespacemanager.aspx\n  [BrokeredMessage]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.aspx\n  [QueueClient]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.queueclient.aspx\n  [Complete]: https://msdn.microsoft.com/zh-cn/library/azure/microsoft.servicebus.messaging.brokeredmessage.complete.aspx\n\n<!---HONumber=Mooncake_0104_2016-->"
}