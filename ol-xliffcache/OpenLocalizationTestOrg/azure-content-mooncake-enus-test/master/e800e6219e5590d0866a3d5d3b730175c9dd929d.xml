{
  "nodes": [
    {
      "content": "使用 SQL 数据库异地复制设计云解决方案以实现灾难恢复",
      "pos": [
        27,
        55
      ]
    },
    {
      "content": "了解如何通过选择合适的故障转移模式来设计可实现灾难恢复的云解决方案。",
      "pos": [
        73,
        107
      ]
    },
    {
      "content": "使用异地复制设计云应用程序实现业务连续性",
      "pos": [
        324,
        344
      ]
    },
    {
      "content": "设计实现业务连续性的应用程序时，可以通过多种方式在 SQL 数据库中利用异地复制。指导你的设计的因素包括应用程序部署拓扑、针对的服务级别协议、流量延迟和成本。在本文中我们将探讨常见的应用程序模式并讨论每个选项的优点和不足。",
      "pos": [
        346,
        457
      ]
    },
    {
      "content": "设计模式 1：使用并置数据库进行灾难恢复的主动-被动部署",
      "pos": [
        462,
        490
      ]
    },
    {
      "content": "此选项最适合具有以下特征的应用程序：",
      "pos": [
        492,
        510
      ]
    },
    {
      "content": "单个 Azure 区域中的活动实例",
      "pos": [
        514,
        531
      ]
    },
    {
      "content": "对数据进行读写 (RW) 访问的强依赖项",
      "pos": [
        534,
        554
      ]
    },
    {
      "content": "由于延迟和流量成本，应用程序逻辑和数据库之间的跨区域连接是不可接受的",
      "pos": [
        558,
        592
      ]
    },
    {
      "pos": [
        598,
        834
      ],
      "content": "在这种情况下，当所有应用程序组件均受到影响并且需要作为一个单元进行故障转移时，将针对处理区域灾难对应用程序部署拓扑进行优化。对于地理冗余，应用程序逻辑和数据库将复制到另一个区域但在正常情况下不用于应用程序工作负荷。次要区域中的应用程序应配置为使用辅助数据库的 SQL 连接字符串。流量管理器设置为使用<bpt id=\"p1\">[</bpt>故障转移路由方法<ept id=\"p1\">](/documentation/articles/traffic-manager-configure-failover-load-balancing)</ept>。"
    },
    {
      "pos": [
        838,
        965
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> <bpt id=\"p1\">[</bpt>Azure traffic manager<ept id=\"p1\">](/documentation/articles/traffic-manager-overview)</ept> 在整篇文章中仅供说明之用。你可以使用任何支持故障转移路由方法的负载平衡解决方案。"
    },
    {
      "pos": [
        968,
        1198
      ],
      "content": "除了主应用程序实例外，你还应考虑部署一个较小的<bpt id=\"p1\">[</bpt>辅助角色应用程序<ept id=\"p1\">](/documentation/articles/cloud-services-choose-me#tellmecs)</ept>，以通过定期发出 T-SQL 只读 (RO) 命令来监视主数据库。可使用它自动触发故障转移和/或在应用程序的管理控制台上生成警报。若要确保监视不受区域范围的停机影响，应将监视应用程序实例部署到每个区域，并将它们连接到其他区域中的数据库，但只有次要区域中的实例需要处于活动状态。"
    },
    {
      "pos": [
        1202,
        1356
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>如果你使用的是<bpt id=\"p1\">[</bpt>活动异地复制<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn741339.aspx)</ept>，可以使两个监视应用程序处于活动状态，并同时探测主数据库和辅助数据库。后者可用于在次要区域中检测故障，并在应用程序未受保护时通知。"
    },
    {
      "content": "下图显示了在发生服务中断之前的此配置。",
      "pos": [
        1358,
        1377
      ]
    },
    {
      "content": "图 1",
      "pos": [
        1381,
        1384
      ]
    },
    {
      "content": "在主区域中发生服务中断后，监视应用程序检测到主数据库不可访问，并注册了一个警报。根据你的应用程序 SLA，你可以决定在声明数据库服务中断之前，连续的监视探测应失败多少次。若要实现应用程序终结点和数据库的协调故障转移，应让监视应用程序执行以下步骤：",
      "pos": [
        1472,
        1595
      ]
    },
    {
      "pos": [
        1600,
        1678
      ],
      "content": "<bpt id=\"p1\">[</bpt>更新主终结点的状态<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/hh758250.aspx)</ept>以触发终结点故障转移。"
    },
    {
      "pos": [
        1682,
        1763
      ],
      "content": "调用辅助数据库以<bpt id=\"p1\">[</bpt>启动数据库故障转移<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn509573.aspx)</ept>"
    },
    {
      "content": "在故障转移后，应用程序将处理次要区域中的用户请求，但将保持与数据库共存，因为主数据库现在位于次要区域中。这一点由下一个关系图说明。在所有关系图中，实线指示活动连接，虚线指示暂停的连接，停止符号指示操作触发。",
      "pos": [
        1766,
        1869
      ]
    },
    {
      "content": "图 2",
      "pos": [
        1874,
        1877
      ]
    },
    {
      "content": "如果服务中断发生在次要区域中，主数据库和辅助数据库之间的复制链接将暂停，并且监视应用程序将注册公开主数据库的警报。这不会影响应用程序的性能，但它将公开运行，因此在这两个区域同时连续失败的情况下会具有较高风险。",
      "pos": [
        1965,
        2069
      ]
    },
    {
      "pos": [
        2073,
        2286
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>我们仅建议使用单个 DR 区域进行部署配置。这是因为大多数 Azure 地理位置都有两个区域。这些配置不会保护你的应用程序免受这两个区域的灾难性故障的影响。在此类失败的不可能事件中，你可以使用<bpt id=\"p1\">[</bpt>地域还原操作<ept id=\"p1\">](/documentation/articles/sql-database-disaster-recovery/#recovery-using-geo-restore)</ept>在第三个区域中恢复数据库。"
    },
    {
      "content": "缓解服务中断后，辅助数据库将自动与主数据库进行同步。在同步过程中，主数据库的性能可能会略微受影响，具体取决于需要进行同步的数据量。下图说明了次要区域中的服务中断。",
      "pos": [
        2289,
        2370
      ]
    },
    {
      "content": "图 3",
      "pos": [
        2374,
        2377
      ]
    },
    {
      "pos": [
        2466,
        2482
      ],
      "content": "此设计模式的主要<bpt id=\"p1\">**</bpt>优点<ept id=\"p1\">**</ept>是："
    },
    {
      "content": "在应用程序部署期间在每个区域中设置 SQL 连接字符串，并且此连接字符串在故障转移后不会更改",
      "pos": [
        2486,
        2532
      ]
    },
    {
      "content": "应用程序的性能不受故障转移影响，因为应用程序和数据库始终共存",
      "pos": [
        2535,
        2565
      ]
    },
    {
      "pos": [
        2568,
        2599
      ],
      "content": "主要<bpt id=\"p1\">**</bpt>不足<ept id=\"p1\">**</ept>是次要区域中的冗余应用程序实例仅用于灾难恢复。"
    },
    {
      "content": "设计模式 2：实现应用程序负载平衡的主动-主动部署",
      "pos": [
        2604,
        2629
      ]
    },
    {
      "content": "此选项最适合具有以下特征的应用程序：",
      "pos": [
        2630,
        2648
      ]
    },
    {
      "content": "数据库读取与写入的比率较高",
      "pos": [
        2652,
        2665
      ]
    },
    {
      "content": "数据库写入延迟不会影响最终用户体验",
      "pos": [
        2668,
        2685
      ]
    },
    {
      "content": "可使用不同的连接字符串将只读逻辑与读写逻辑分开",
      "pos": [
        2690,
        2713
      ]
    },
    {
      "content": "只读逻辑不依赖于正在与最新更新完全同步的数据",
      "pos": [
        2717,
        2739
      ]
    },
    {
      "pos": [
        2743,
        3144
      ],
      "content": "如果你的应用程序具有这些特征，则将最终用户连接负载平衡到不同区域中的多个应用程序实例上，可以提高性能和改善最终用户体验。若要实现这一点，每个区域应具有应用程序的活动实例，并将读写 (RW) 逻辑连接到主要区域中的主数据库。应将只读 (RO) 逻辑连接到与应用程序实例在同一区域中的辅助数据库。流量管理器应设置为使用<bpt id=\"p1\">[</bpt>轮循机制路由<ept id=\"p1\">](/documentation/articles/traffic-manager-configure-round-robin-load-balancing)</ept>或<bpt id=\"p2\">[</bpt>性能路由<ept id=\"p2\">](/documentation/articles/traffic-manager-configure-performance-load-balancing)</ept>，并为每个应用程序实例启用<bpt id=\"p3\">[</bpt>终结点监视<ept id=\"p3\">](/documentation/articles/traffic-manager-monitoring)</ept>。"
    },
    {
      "content": "如模式 #1 中所示，你应考虑部署类似的监视应用程序。但与模式 #1 不同的是，它不负责触发终结点故障转移。",
      "pos": [
        3146,
        3200
      ]
    },
    {
      "pos": [
        3204,
        3355
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>由于前面所述的原因，虽然此模式使用多个辅助数据库，但只有其中一个辅助数据库将用于故障转移。由于此模式需要对辅助数据库进行只读访问，它需要<bpt id=\"p1\">[</bpt>活动异地复制<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn741339.aspx)</ept>。"
    },
    {
      "content": "应针对性能路由配置流量管理器以引导应用程序实例的用户连接最接近用户的地理位置。下图说明了在发生服务中断之前的此配置。",
      "pos": [
        3357,
        3415
      ]
    },
    {
      "content": "图 4",
      "pos": [
        3418,
        3421
      ]
    },
    {
      "content": "如果在主要区域中检测到数据库服务中断，你将启动主数据库到某个次要区域的故障转移，这将会更改主数据库的位置。流量管理器将自动从路由表中排除脱机终结点，但会继续将最终用户流量路由到剩余的联机实例。由于主数据库现在位于不同的区域，所有联机实例都必须更改其读写 SQL 连接字符串以连接到新的主数据库。请务必在启动数据库故障转移之前进行此更改。只读 SQL 连接字符串应保持不变，因为它们始终指向同一区域中的数据库。故障转移步骤如下：",
      "pos": [
        3509,
        3722
      ]
    },
    {
      "content": "更改读写 SQL 连接字符串以指向新的主数据库",
      "pos": [
        3727,
        3750
      ]
    },
    {
      "pos": [
        3754,
        3838
      ],
      "content": "调用指定的辅助数据库以<bpt id=\"p1\">[</bpt>启动数据库故障转移<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn509573.aspx)</ept>"
    },
    {
      "content": "下图说明了在故障转移后的新配置。",
      "pos": [
        3841,
        3857
      ]
    },
    {
      "content": "图 5",
      "pos": [
        3860,
        3863
      ]
    },
    {
      "content": "在其中一个次要区域中发生服务中断时，流量管理器将自动从路由表中删除该区域中的脱机终结点。将暂停到该区域中辅助数据库的复制通道。在服务中断期间，由于剩余的区域将获得更多用户流量，应用程序的性能可能会受到影响。缓解服务中断后，受影响区域中的辅助数据库将立即与主数据库进行同步。在同步过程中，主数据库的性能可能会略微受影响，具体取决于需要进行同步的数据量。下图说明了某个次要区域中的服务中断。",
      "pos": [
        3951,
        4144
      ]
    },
    {
      "content": "图 6",
      "pos": [
        4148,
        4151
      ]
    },
    {
      "pos": [
        4239,
        4300
      ],
      "content": "此设计模式的主要<bpt id=\"p1\">**</bpt>优点<ept id=\"p1\">**</ept>是你可以缩放多个辅助数据库上的应用程序工作负荷以获得最佳最终用户性能。此选项的<bpt id=\"p2\">**</bpt>不足<ept id=\"p2\">**</ept>是："
    },
    {
      "content": "应用程序实例与数据库之间的读写连接具有不同的延迟和成本",
      "pos": [
        4304,
        4331
      ]
    },
    {
      "content": "在服务中断期间，应用程序性能会受到影响",
      "pos": [
        4334,
        4353
      ]
    },
    {
      "content": "应用程序实例在数据库故障转移后需要动态更改 SQL 连接字符串。",
      "pos": [
        4356,
        4388
      ]
    },
    {
      "pos": [
        4394,
        4497
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>可以使用类似的方法来卸载专用工作负荷，例如报告作业、商业智能工具或备份。通常这些工作负荷占用大量数据库资源，因此建议你为它们指定其中一个辅助数据库，并使性能级别与预期的工作负荷匹配。"
    },
    {
      "content": "设计模式 3：实现保留数据的主动-被动部署",
      "pos": [
        4502,
        4523
      ]
    },
    {
      "content": "此选项最适合具有以下特征的应用程序：",
      "pos": [
        4526,
        4544
      ]
    },
    {
      "content": "任何数据丢失都具有高业务风险，数据库故障转移在服务中断是永久性时只能用作最后的解决措施",
      "pos": [
        4548,
        4591
      ]
    },
    {
      "content": "在一段时间内，应用程序可以在“只读模式”下运行",
      "pos": [
        4594,
        4617
      ]
    },
    {
      "pos": [
        4620,
        4889
      ],
      "content": "在此模式下，应用程序在连接到辅助数据库时将切换到只读模式。主要区域中的应用程序逻辑与主数据库共存并在读写模式 (RW) 下运行，次要区域中的应用程序逻辑与辅助数据库共存并可以在只读模式 (RO) 下运行。流量管理器应设置为使用<bpt id=\"p1\">[</bpt>故障转移路由<ept id=\"p1\">](/documentation/articles/traffic-manager-configure-failover-load-balancing)</ept>，并为两个应用程序实例启用<bpt id=\"p2\">[</bpt>终结点监视<ept id=\"p2\">](/documentation/articles/traffic-manager-monitoring)</ept>。"
    },
    {
      "content": "下图说明了在发生服务中断之前的此配置。",
      "pos": [
        4891,
        4910
      ]
    },
    {
      "content": "图 7",
      "pos": [
        4913,
        4916
      ]
    },
    {
      "pos": [
        5004,
        5126
      ],
      "content": "当流量管理器检测到连接主要区域失败时，它会自动将用户流量切换到次要区域中的应用程序实例。使用此模式时，你务必要注意在检测到服务中断后<bpt id=\"p1\">**</bpt>不要<ept id=\"p1\">**</ept>启动数据库故障转移。次要区域中的应用程序将激活，并使用辅助数据库以只读模式运行。下图对此进行了说明。"
    },
    {
      "content": "图 8",
      "pos": [
        5130,
        5133
      ]
    },
    {
      "content": "缓解主要区域中的服务中断后，流量管理器将在主要区域中检测到连接还原，并会将用户流量切换回主要区域中的应用程序实例。该应用程序实例恢复并使用主数据库以读写模式运行。",
      "pos": [
        5221,
        5302
      ]
    },
    {
      "pos": [
        5306,
        5412
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>由于此模式需要对辅助数据库进行只读访问，它需要<bpt id=\"p1\">[</bpt>活动异地复制<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn741339.aspx)</ept>。"
    },
    {
      "content": "在次要区域中发生服务中断时，流量管理器会将主要区域中的应用程序终结点标记为降级并将暂停复制通道。但是，在服务中断期间，它不会影响应用程序的性能。缓解服务中断后，辅助数据库将立即与主数据库进行同步。在同步过程中，主数据库的性能可能会略微受影响，具体取决于需要进行同步的数据量。",
      "pos": [
        5414,
        5551
      ]
    },
    {
      "content": "图 8",
      "pos": [
        5555,
        5558
      ]
    },
    {
      "pos": [
        5646,
        5662
      ],
      "content": "此设计模式具有多个<bpt id=\"p1\">**</bpt>优点<ept id=\"p1\">**</ept>："
    },
    {
      "content": "它在临时服务中断期间可避免数据丢失",
      "pos": [
        5666,
        5683
      ]
    },
    {
      "content": "当流量管理器触发恢复时，它不需要你部署监视应用程序",
      "pos": [
        5686,
        5711
      ]
    },
    {
      "content": "停机时间仅取决于流量管理器有多快检测到连接故障，这是可配置的。",
      "pos": [
        5715,
        5746
      ]
    },
    {
      "pos": [
        5748,
        5756
      ],
      "content": "<bpt id=\"p1\">**</bpt>不足<ept id=\"p1\">**</ept>是："
    },
    {
      "content": "应用程序必须能够以只读模式运行",
      "pos": [
        5760,
        5775
      ]
    },
    {
      "content": "在连接到只读数据库时，它需要动态切换到该数据库",
      "pos": [
        5778,
        5801
      ]
    },
    {
      "content": "恢复读写操作需要恢复主要区域，这意味着可能会几小时甚至若干天禁止完全数据访问。",
      "pos": [
        5804,
        5843
      ]
    },
    {
      "pos": [
        5848,
        5929
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>在区域中发生永久服务中断的情况下，将需要手动激活数据库故障转移并接受数据丢失。应用程序将在次要区域中正常工作，并对数据库具有读写访问权限。"
    },
    {
      "content": "摘要",
      "pos": [
        5934,
        5936
      ]
    },
    {
      "content": "特定的 DR 策略可组合或扩展这些模式以最好地满足你的应用程序需求。如前所述，所选的策略将基于你要提供给客户的 SLA 和应用程序部署拓扑。为了帮助你进行决策，下表基于估计的数据丢失或恢复点目标 (RPO) 和估计的恢复时间 (ERT) 比较了相关选项。",
      "pos": [
        5938,
        6065
      ]
    },
    {
      "content": "模式",
      "pos": [
        6069,
        6071
      ]
    },
    {
      "content": "RPO",
      "pos": [
        6074,
        6077
      ]
    },
    {
      "content": "ERT",
      "pos": [
        6080,
        6083
      ]
    },
    {
      "content": "使用并置数据库访问权限进行灾难恢复的主动-被动部署",
      "pos": [
        6108,
        6133
      ]
    },
    {
      "content": "读写访问 &lt; 5 秒",
      "pos": [
        6136,
        6146
      ]
    },
    {
      "content": "故障检测时间 + 故障转移 API 调用 + 应用程序验证测试",
      "pos": [
        6149,
        6180
      ]
    },
    {
      "content": "实现应用程序负载平衡的主动-主动部署",
      "pos": [
        6184,
        6202
      ]
    },
    {
      "content": "读写访问 &lt; 5 秒",
      "pos": [
        6205,
        6215
      ]
    },
    {
      "content": "故障检测时间 + 故障转移 API 调用 + SQL 连接字符串更改 + 应用程序验证测试",
      "pos": [
        6218,
        6263
      ]
    },
    {
      "content": "实现保留数据的主动-被动部署",
      "pos": [
        6266,
        6280
      ]
    },
    {
      "content": "只读访问 &lt; 5 秒，读写访问 = 0",
      "pos": [
        6283,
        6302
      ]
    },
    {
      "content": "只读访问 = 连接故障检测时间 + 应用程序验证测试",
      "pos": [
        6305,
        6331
      ]
    },
    {
      "content": "读写访问 = 缓解服务中断所用时间",
      "pos": [
        6336,
        6353
      ]
    }
  ],
  "content": "<properties \n   pageTitle=\"使用 SQL 数据库异地复制设计云解决方案以实现灾难恢复\"\n   description=\"了解如何通过选择合适的故障转移模式来设计可实现灾难恢复的云解决方案。\"\n   services=\"sql-database\"\n   documentationCenter=\"\" \n   authors=\"anosov1960\" \n   manager=\"jeffreyg\" \n   editor=\"monicar\"/>\n\n<tags\n   ms.service=\"sql-database\"\n   ms.date=\"10/07/2015\"\n   wacn.date=\"12/22/2015\"/>\n\n# 使用异地复制设计云应用程序实现业务连续性\n\n设计实现业务连续性的应用程序时，可以通过多种方式在 SQL 数据库中利用异地复制。指导你的设计的因素包括应用程序部署拓扑、针对的服务级别协议、流量延迟和成本。在本文中我们将探讨常见的应用程序模式并讨论每个选项的优点和不足。\n\n## 设计模式 1：使用并置数据库进行灾难恢复的主动-被动部署\n\n此选项最适合具有以下特征的应用程序：\n\n+ 单个 Azure 区域中的活动实例\n+ 对数据进行读写 (RW) 访问的强依赖项 \n+ 由于延迟和流量成本，应用程序逻辑和数据库之间的跨区域连接是不可接受的    \n\n在这种情况下，当所有应用程序组件均受到影响并且需要作为一个单元进行故障转移时，将针对处理区域灾难对应用程序部署拓扑进行优化。对于地理冗余，应用程序逻辑和数据库将复制到另一个区域但在正常情况下不用于应用程序工作负荷。次要区域中的应用程序应配置为使用辅助数据库的 SQL 连接字符串。流量管理器设置为使用[故障转移路由方法](/documentation/articles/traffic-manager-configure-failover-load-balancing)。\n\n> [AZURE.NOTE] [Azure traffic manager](/documentation/articles/traffic-manager-overview) 在整篇文章中仅供说明之用。你可以使用任何支持故障转移路由方法的负载平衡解决方案。\n \n除了主应用程序实例外，你还应考虑部署一个较小的[辅助角色应用程序](/documentation/articles/cloud-services-choose-me#tellmecs)，以通过定期发出 T-SQL 只读 (RO) 命令来监视主数据库。可使用它自动触发故障转移和/或在应用程序的管理控制台上生成警报。若要确保监视不受区域范围的停机影响，应将监视应用程序实例部署到每个区域，并将它们连接到其他区域中的数据库，但只有次要区域中的实例需要处于活动状态。\n\n> [AZURE.NOTE]如果你使用的是[活动异地复制](https://msdn.microsoft.com/zh-cn/library/azure/dn741339.aspx)，可以使两个监视应用程序处于活动状态，并同时探测主数据库和辅助数据库。后者可用于在次要区域中检测故障，并在应用程序未受保护时通知。\n\n下图显示了在发生服务中断之前的此配置。\n\n![图 1](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern1-1.png)\n\n在主区域中发生服务中断后，监视应用程序检测到主数据库不可访问，并注册了一个警报。根据你的应用程序 SLA，你可以决定在声明数据库服务中断之前，连续的监视探测应失败多少次。若要实现应用程序终结点和数据库的协调故障转移，应让监视应用程序执行以下步骤：\n\n1. [更新主终结点的状态](https://msdn.microsoft.com/zh-cn/library/hh758250.aspx)以触发终结点故障转移。\n2. 调用辅助数据库以[启动数据库故障转移](https://msdn.microsoft.com/zh-cn/library/azure/dn509573.aspx) \n\n在故障转移后，应用程序将处理次要区域中的用户请求，但将保持与数据库共存，因为主数据库现在位于次要区域中。这一点由下一个关系图说明。在所有关系图中，实线指示活动连接，虚线指示暂停的连接，停止符号指示操作触发。\n\n\n![图 2](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern1-2.png)\n\n如果服务中断发生在次要区域中，主数据库和辅助数据库之间的复制链接将暂停，并且监视应用程序将注册公开主数据库的警报。这不会影响应用程序的性能，但它将公开运行，因此在这两个区域同时连续失败的情况下会具有较高风险。\n\n> [AZURE.NOTE]我们仅建议使用单个 DR 区域进行部署配置。这是因为大多数 Azure 地理位置都有两个区域。这些配置不会保护你的应用程序免受这两个区域的灾难性故障的影响。在此类失败的不可能事件中，你可以使用[地域还原操作](/documentation/articles/sql-database-disaster-recovery/#recovery-using-geo-restore)在第三个区域中恢复数据库。\n \n缓解服务中断后，辅助数据库将自动与主数据库进行同步。在同步过程中，主数据库的性能可能会略微受影响，具体取决于需要进行同步的数据量。下图说明了次要区域中的服务中断。\n\n![图 3](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern1-3.png)\n\n\n此设计模式的主要**优点**是：\n\n+ 在应用程序部署期间在每个区域中设置 SQL 连接字符串，并且此连接字符串在故障转移后不会更改\n+ 应用程序的性能不受故障转移影响，因为应用程序和数据库始终共存 \n\n主要**不足**是次要区域中的冗余应用程序实例仅用于灾难恢复。\n\n## 设计模式 2：实现应用程序负载平衡的主动-主动部署\n此选项最适合具有以下特征的应用程序：\n\n+ 数据库读取与写入的比率较高\n+ 数据库写入延迟不会影响最终用户体验  \n+ 可使用不同的连接字符串将只读逻辑与读写逻辑分开 \n+ 只读逻辑不依赖于正在与最新更新完全同步的数据  \n\n如果你的应用程序具有这些特征，则将最终用户连接负载平衡到不同区域中的多个应用程序实例上，可以提高性能和改善最终用户体验。若要实现这一点，每个区域应具有应用程序的活动实例，并将读写 (RW) 逻辑连接到主要区域中的主数据库。应将只读 (RO) 逻辑连接到与应用程序实例在同一区域中的辅助数据库。流量管理器应设置为使用[轮循机制路由](/documentation/articles/traffic-manager-configure-round-robin-load-balancing)或[性能路由](/documentation/articles/traffic-manager-configure-performance-load-balancing)，并为每个应用程序实例启用[终结点监视](/documentation/articles/traffic-manager-monitoring)。\n\n如模式 #1 中所示，你应考虑部署类似的监视应用程序。但与模式 #1 不同的是，它不负责触发终结点故障转移。\n\n> [AZURE.NOTE]由于前面所述的原因，虽然此模式使用多个辅助数据库，但只有其中一个辅助数据库将用于故障转移。由于此模式需要对辅助数据库进行只读访问，它需要[活动异地复制](https://msdn.microsoft.com/zh-cn/library/azure/dn741339.aspx)。\n\n应针对性能路由配置流量管理器以引导应用程序实例的用户连接最接近用户的地理位置。下图说明了在发生服务中断之前的此配置。\n![图 4](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern2-1.png)\n\n如果在主要区域中检测到数据库服务中断，你将启动主数据库到某个次要区域的故障转移，这将会更改主数据库的位置。流量管理器将自动从路由表中排除脱机终结点，但会继续将最终用户流量路由到剩余的联机实例。由于主数据库现在位于不同的区域，所有联机实例都必须更改其读写 SQL 连接字符串以连接到新的主数据库。请务必在启动数据库故障转移之前进行此更改。只读 SQL 连接字符串应保持不变，因为它们始终指向同一区域中的数据库。故障转移步骤如下：\n\n1. 更改读写 SQL 连接字符串以指向新的主数据库\n2. 调用指定的辅助数据库以[启动数据库故障转移](https://msdn.microsoft.com/zh-cn/library/azure/dn509573.aspx) \n\n下图说明了在故障转移后的新配置。\n![图 5](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern2-2.png)\n\n在其中一个次要区域中发生服务中断时，流量管理器将自动从路由表中删除该区域中的脱机终结点。将暂停到该区域中辅助数据库的复制通道。在服务中断期间，由于剩余的区域将获得更多用户流量，应用程序的性能可能会受到影响。缓解服务中断后，受影响区域中的辅助数据库将立即与主数据库进行同步。在同步过程中，主数据库的性能可能会略微受影响，具体取决于需要进行同步的数据量。下图说明了某个次要区域中的服务中断。\n\n![图 6](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern2-3.png)\n\n此设计模式的主要**优点**是你可以缩放多个辅助数据库上的应用程序工作负荷以获得最佳最终用户性能。此选项的**不足**是：\n\n+ 应用程序实例与数据库之间的读写连接具有不同的延迟和成本\n+ 在服务中断期间，应用程序性能会受到影响\n+ 应用程序实例在数据库故障转移后需要动态更改 SQL 连接字符串。  \n\n> [AZURE.NOTE]可以使用类似的方法来卸载专用工作负荷，例如报告作业、商业智能工具或备份。通常这些工作负荷占用大量数据库资源，因此建议你为它们指定其中一个辅助数据库，并使性能级别与预期的工作负荷匹配。\n\n## 设计模式 3：实现保留数据的主动-被动部署  \n此选项最适合具有以下特征的应用程序：\n\n+ 任何数据丢失都具有高业务风险，数据库故障转移在服务中断是永久性时只能用作最后的解决措施\n+ 在一段时间内，应用程序可以在“只读模式”下运行 \n\n在此模式下，应用程序在连接到辅助数据库时将切换到只读模式。主要区域中的应用程序逻辑与主数据库共存并在读写模式 (RW) 下运行，次要区域中的应用程序逻辑与辅助数据库共存并可以在只读模式 (RO) 下运行。流量管理器应设置为使用[故障转移路由](/documentation/articles/traffic-manager-configure-failover-load-balancing)，并为两个应用程序实例启用[终结点监视](/documentation/articles/traffic-manager-monitoring)。\n\n下图说明了在发生服务中断之前的此配置。\n![图 7](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern3-1.png)\n\n当流量管理器检测到连接主要区域失败时，它会自动将用户流量切换到次要区域中的应用程序实例。使用此模式时，你务必要注意在检测到服务中断后**不要**启动数据库故障转移。次要区域中的应用程序将激活，并使用辅助数据库以只读模式运行。下图对此进行了说明。\n\n![图 8](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern3-2.png)\n\n缓解主要区域中的服务中断后，流量管理器将在主要区域中检测到连接还原，并会将用户流量切换回主要区域中的应用程序实例。该应用程序实例恢复并使用主数据库以读写模式运行。\n\n> [AZURE.NOTE]由于此模式需要对辅助数据库进行只读访问，它需要[活动异地复制](https://msdn.microsoft.com/zh-cn/library/azure/dn741339.aspx)。\n\n在次要区域中发生服务中断时，流量管理器会将主要区域中的应用程序终结点标记为降级并将暂停复制通道。但是，在服务中断期间，它不会影响应用程序的性能。缓解服务中断后，辅助数据库将立即与主数据库进行同步。在同步过程中，主数据库的性能可能会略微受影响，具体取决于需要进行同步的数据量。\n\n![图 8](./media/sql-database-designing-cloud-solutions-for-disaster-recovery/pattern3-3.png)\n\n此设计模式具有多个**优点**：\n\n+ 它在临时服务中断期间可避免数据丢失\n+ 当流量管理器触发恢复时，它不需要你部署监视应用程序 \n+ 停机时间仅取决于流量管理器有多快检测到连接故障，这是可配置的。\n\n**不足**是：\n\n+ 应用程序必须能够以只读模式运行\n+ 在连接到只读数据库时，它需要动态切换到该数据库\n+ 恢复读写操作需要恢复主要区域，这意味着可能会几小时甚至若干天禁止完全数据访问。 \n\n> [AZURE.NOTE]在区域中发生永久服务中断的情况下，将需要手动激活数据库故障转移并接受数据丢失。应用程序将在次要区域中正常工作，并对数据库具有读写访问权限。\n\n## 摘要\n\n特定的 DR 策略可组合或扩展这些模式以最好地满足你的应用程序需求。如前所述，所选的策略将基于你要提供给客户的 SLA 和应用程序部署拓扑。为了帮助你进行决策，下表基于估计的数据丢失或恢复点目标 (RPO) 和估计的恢复时间 (ERT) 比较了相关选项。\n\n| 模式 | RPO | ERT \n| :--- |:--- | :--- \n| 使用并置数据库访问权限进行灾难恢复的主动-被动部署 | 读写访问 < 5 秒 | 故障检测时间 + 故障转移 API 调用 + 应用程序验证测试 \n| 实现应用程序负载平衡的主动-主动部署 | 读写访问 < 5 秒 | 故障检测时间 + 故障转移 API 调用 + SQL 连接字符串更改 + 应用程序验证测试\n| 实现保留数据的主动-被动部署 | 只读访问 < 5 秒，读写访问 = 0 | 只读访问 = 连接故障检测时间 + 应用程序验证测试 <br>读写访问 = 缓解服务中断所用时间 \n\n<!---HONumber=Mooncake_1207_2015-->"
}