{
  "nodes": [
    {
      "content": "通过 .NET 开始使用 Azure Blob 存储 | Azure",
      "pos": [
        27,
        61
      ]
    },
    {
      "content": "使用 Azure Blob（对象）存储在云中存储文件数据。立即开始简单的 Blob 存储操作，包括创建容器并上载、下载、列出和删除 blob 内容。",
      "pos": [
        80,
        154
      ]
    },
    {
      "content": "通过 .NET 开始使用 Azure Blob 存储",
      "pos": [
        358,
        384
      ]
    },
    {
      "content": "概述",
      "pos": [
        484,
        486
      ]
    },
    {
      "content": "Azure Blob 存储是在云中存储文件数据的服务。Blob 存储可以存储任何类型的文本或二进制数据，例如文档、媒体文件或应用程序安装程序。Blob 存储有时称为对象存储。",
      "pos": [
        488,
        575
      ]
    },
    {
      "content": "本教程演示如何针对使用 Azure Blob 存储一些常见情形编写 .NET 代码。涉及的任务包括上载、列出、下载和删除 Blob。完成本教程中仅仅只需一小时。",
      "pos": [
        577,
        657
      ]
    },
    {
      "content": "以编程方式访问 Blob 存储",
      "pos": [
        1104,
        1119
      ]
    },
    {
      "content": "命名空间声明",
      "pos": [
        1222,
        1228
      ]
    },
    {
      "content": "在您希望在其中以编程方式访问 Azure 存储空间的任何 C# 文件中，将以下命名空间声明添加到文件的顶部：",
      "pos": [
        1230,
        1284
      ]
    },
    {
      "pos": [
        1457,
        1504
      ],
      "content": "确保你引用 <ph id=\"ph1\">`Microsoft.WindowsAzure.Storage.dll`</ph> 程序集。"
    },
    {
      "pos": [
        1613,
        1721
      ],
      "content": "您可以使用 <bpt id=\"p1\">**</bpt>CloudBlobClient<ept id=\"p1\">**</ept> 类型来检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。以下代码使用我们在上面检索到的存储帐户对象创建 <bpt id=\"p2\">**</bpt>CloudBlobClient<ept id=\"p2\">**</ept> 对象："
    },
    {
      "content": "创建容器",
      "pos": [
        1800,
        1804
      ]
    },
    {
      "content": "此示例演示如何创建一个容器（如果该容器不存在）：",
      "pos": [
        1919,
        1943
      ]
    },
    {
      "content": "默认情况下，新容器是专用容器，因此您必须指定存储访问密钥才能从该容器下载 Blob。如果您要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器：",
      "pos": [
        2471,
        2552
      ]
    },
    {
      "content": "Internet 中的所有人都可以查看公共容器中的 Blob，但是，仅在您具有相应的访问密钥时，才能修改或删除它们。",
      "pos": [
        2686,
        2744
      ]
    },
    {
      "content": "将 Blob 上载到容器中",
      "pos": [
        2749,
        2762
      ]
    },
    {
      "content": "Azure Blob 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。",
      "pos": [
        2764,
        2812
      ]
    },
    {
      "pos": [
        2814,
        2952
      ],
      "content": "若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。获取 Blob 引用后，可以通过调用 <bpt id=\"p1\">**</bpt>UploadFromStream<ept id=\"p1\">**</ept> 方法，将任何数据流上载到该 Blob。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。"
    },
    {
      "content": "下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。",
      "pos": [
        2954,
        2987
      ]
    },
    {
      "content": "列出容器中的 Blob",
      "pos": [
        3777,
        3788
      ]
    },
    {
      "pos": [
        3790,
        4036
      ],
      "content": "若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept> 方法来检索其中的 Blob 和/或目录。若要访问返回的 <bpt id=\"p2\">**</bpt>IListBlobItem<ept id=\"p2\">**</ept> 的丰富属性和方法，您必须将它转换到 <bpt id=\"p3\">**</bpt>CloudBlockBlob<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>CloudPageBlob<ept id=\"p4\">**</ept> 或 <bpt id=\"p5\">**</bpt>CloudBlobDirectory<ept id=\"p5\">**</ept> 对象。如果类型未知，您可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出 <ph id=\"ph1\">`photos`</ph> 容器中每一项的 URI："
    },
    {
      "pos": [
        5330,
        5503
      ],
      "content": "如上所示，您可以命名 Blob，在其名称中包含路径信息。这将创建一个虚拟目录结构，你可以像传统文件系统一样组织和遍历。注意，该目录结构仅仅是虚拟的 -  Blob 存储中唯一可用的资源是容器和 Blob。但是，存储空间客户端库提供 <bpt id=\"p1\">**</bpt>CloudBlobDirectory<ept id=\"p1\">**</ept> 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。"
    },
    {
      "pos": [
        5505,
        5540
      ],
      "content": "例如，考虑名为 <ph id=\"ph1\">`photos`</ph> 的容器中包含的下面一组块 Blob："
    },
    {
      "pos": [
        5786,
        5916
      ],
      "content": "当您在“photos”容器上调用 <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept>（如上面的示例中）时，返回一个层次结构列表。它包含 <bpt id=\"p2\">**</bpt>CloudBlobDirectory<ept id=\"p2\">**</ept> 和 <bpt id=\"p3\">**</bpt>CloudBlockBlob<ept id=\"p3\">**</ept> 对象，分别表示容器中的目录和 Blob。生成的输出如下所示："
    },
    {
      "pos": [
        6174,
        6317
      ],
      "content": "另外，也可以将 <bpt id=\"p1\">**</bpt>ListBlobs<ept id=\"p1\">**</ept> 方法的 <bpt id=\"p2\">**</bpt>UseFlatBlobListing<ept id=\"p2\">**</ept> 参数设置为 <bpt id=\"p3\">**</bpt>true<ept id=\"p3\">**</ept>。在这种情况下，作为 <bpt id=\"p4\">**</bpt>CloudBlockBlob<ept id=\"p4\">**</ept> 对象返回容器中的每一个 Blob。对 <bpt id=\"p5\">**</bpt>ListBlobs<ept id=\"p5\">**</ept> 的调用返回一个平面列表，如下所示："
    },
    {
      "content": "结果如下所示：",
      "pos": [
        6486,
        6493
      ]
    },
    {
      "content": "下载 Blob",
      "pos": [
        7413,
        7420
      ]
    },
    {
      "pos": [
        7422,
        7540
      ],
      "content": "若要下载 Blob，请首先检索 Blob 引用，然后调用 <bpt id=\"p1\">**</bpt>DownloadToStream<ept id=\"p1\">**</ept> 方法。以下示例使用 <bpt id=\"p2\">**</bpt>DownloadToStream<ept id=\"p2\">**</ept> 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。"
    },
    {
      "pos": [
        8295,
        8344
      ],
      "content": "也可以使用 <bpt id=\"p1\">**</bpt>DownloadToStream<ept id=\"p1\">**</ept> 方法以文本字符串形式下载 Blob 的内容。"
    },
    {
      "content": "删除 Blob",
      "pos": [
        9141,
        9148
      ]
    },
    {
      "pos": [
        9150,
        9195
      ],
      "content": "若要删除 Blob，首先要获取 Blob 引用，然后对其调用 <bpt id=\"p1\">**</bpt>Delete<ept id=\"p1\">**</ept> 方法。"
    },
    {
      "content": "以异步方式列出页中的 Blob",
      "pos": [
        9835,
        9850
      ]
    },
    {
      "content": "如果要列出大量 Blob，或需要控制一个列操作中返回的结果数，则可以结果页的方式列出 Blob。此示例显示如何以页面形式异步返回结果，这样就不会在等待返回大型结果集时阻止操作的执行。",
      "pos": [
        9852,
        9943
      ]
    },
    {
      "pos": [
        9945,
        10047
      ],
      "content": "此示例演示平面 Blob 列表，但您也可以执行分层列表，只需将 <bpt id=\"p1\">**</bpt>ListBlobsSegmentedAsync<ept id=\"p1\">**</ept> 方法的 <ph id=\"ph1\">`useFlatBlobListing`</ph> 参数设置为 <ph id=\"ph2\">`false`</ph> 即可。"
    },
    {
      "pos": [
        10049,
        10166
      ],
      "content": "由于示例方法调用异步方法，因此必须以 <ph id=\"ph1\">`async`</ph> 关键字开头，且必须返回 <bpt id=\"p1\">**</bpt>Task<ept id=\"p1\">**</ept> 对象。为 <bpt id=\"p2\">**</bpt>ListBlobsSegmentedAsync<ept id=\"p2\">**</ept> 方法指定的 await 关键字将挂起示例方法的执行，直至列操作任务完成。"
    },
    {
      "content": "写入追加 Blob",
      "pos": [
        11562,
        11571
      ]
    },
    {
      "content": "追加 Blob 是一个新类型的 Blob，由用于 .NET 的 Azure 存储服务客户端库 5.x 版引入。追加 Blob 针对追加操作（例如日志记录）进行了优化。类似于块 Blob，追加 Blob 由块组成，但是当您将新的块添加到追加 Blob 时，始终追加到该 Blob 的末尾。您不能更新或删除追加 Blob 中现有的块。追加 Blob 的块 ID 不公开，因为它们是用于一个块存储(block blob)。",
      "pos": [
        11573,
        11781
      ]
    },
    {
      "content": "追加 Blob 中的每个块可以有不同的大小，最大为 4 MB，并且追加 Blob 最多可包含 50000 个块。因此，追加 Blob 的最大容量稍微大于 195 GB（4 MB X 50000 块）。",
      "pos": [
        11784,
        11884
      ]
    },
    {
      "content": "下面的示例创建一个新的追加 Blob 并向其追加某些数据，模拟一个简单的日志记录操作。",
      "pos": [
        11886,
        11929
      ]
    },
    {
      "pos": [
        13463,
        13578
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>了解块 Blob、页 Blob 和追加 Blob<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/ee691964.aspx)</ept>，就有关三种 Blob 之间的差异了解详细信息。"
    },
    {
      "content": "后续步骤",
      "pos": [
        13583,
        13587
      ]
    },
    {
      "content": "现在，你已了解 Blob 存储的基础知识，可单击下面的链接了解详细信息。",
      "pos": [
        13589,
        13625
      ]
    },
    {
      "content": "Blob 存储参考文档",
      "pos": [
        13631,
        13642
      ]
    },
    {
      "content": ".NET 存储客户端库参考",
      "pos": [
        13647,
        13660
      ]
    },
    {
      "content": "REST API 参考",
      "pos": [
        13721,
        13732
      ]
    },
    {
      "content": "其他功能指南",
      "pos": [
        13795,
        13801
      ]
    },
    {
      "content": "开始使用适用于 .NET 的表存储",
      "pos": [
        13806,
        13823
      ]
    },
    {
      "content": "开始使用适用于 .NET 的队列存储",
      "pos": [
        13886,
        13904
      ]
    },
    {
      "content": "开始使用适用于 .NET 的文件存储",
      "pos": [
        13967,
        13985
      ]
    },
    {
      "content": "使用 AzCopy 命令行实用程序传输数据",
      "pos": [
        14047,
        14068
      ]
    },
    {
      "content": "使用 SQL 数据库存储关系数据",
      "pos": [
        14117,
        14133
      ]
    },
    {
      "content": "如何通过 WebJobs SDK 使用 Azure Blob 存储",
      "pos": [
        14216,
        14249
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"通过 .NET 开始使用 Azure Blob 存储 | Azure\"\n    description=\"使用 Azure Blob（对象）存储在云中存储文件数据。立即开始简单的 Blob 存储操作，包括创建容器并上载、下载、列出和删除 blob 内容。\"\n    services=\"storage\"\n    documentationCenter=\".net\"\n    authors=\"tamram\"\n    manager=\"adinah\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"storage\"\n    ms.date=\"01/22/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n\n# 通过 .NET 开始使用 Azure Blob 存储\n\n[AZURE.INCLUDE [storage-selector-blob-include](../includes/storage-selector-blob-include.md)]\n\n## 概述\n\nAzure Blob 存储是在云中存储文件数据的服务。Blob 存储可以存储任何类型的文本或二进制数据，例如文档、媒体文件或应用程序安装程序。Blob 存储有时称为对象存储。\n\n本教程演示如何针对使用 Azure Blob 存储一些常见情形编写 .NET 代码。涉及的任务包括上载、列出、下载和删除 Blob。完成本教程中仅仅只需一小时。\n\n[AZURE.INCLUDE [storage-dotnet-client-library-version-include](../includes/storage-dotnet-client-library-version-include.md)]\n\n[AZURE.INCLUDE [storage-blob-concepts-include](../includes/storage-blob-concepts-include.md)]\n\n[AZURE.INCLUDE [storage-create-account-include](../includes/storage-create-account-include.md)]\n\n[AZURE.INCLUDE [storage-configure-connection-string-include](../includes/storage-configure-connection-string-include.md)]\n\n## 以编程方式访问 Blob 存储\n\n[AZURE.INCLUDE [storage-dotnet-obtain-assembly](../includes/storage-dotnet-obtain-assembly.md)]\n\n### 命名空间声明\n\n在您希望在其中以编程方式访问 Azure 存储空间的任何 C# 文件中，将以下命名空间声明添加到文件的顶部：\n\n    using Microsoft.WindowsAzure;\n    using Microsoft.WindowsAzure.Storage;\n    using Microsoft.WindowsAzure.Storage.Auth;\n    using Microsoft.WindowsAzure.Storage.Blob;\n\n确保你引用 `Microsoft.WindowsAzure.Storage.dll` 程序集。\n\n[AZURE.INCLUDE [storage-dotnet-retrieve-conn-string](../includes/storage-dotnet-retrieve-conn-string.md)]\n\n您可以使用 **CloudBlobClient** 类型来检索表示存储在 Blob 存储服务中的容器和 Blob 的对象。以下代码使用我们在上面检索到的存储帐户对象创建 **CloudBlobClient** 对象：\n\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n## 创建容器\n\n[AZURE.INCLUDE [storage-container-naming-rules-include](../includes/storage-container-naming-rules-include.md)]\n\n此示例演示如何创建一个容器（如果该容器不存在）：\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve a reference to a container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Create the container if it doesn't already exist.\n    container.CreateIfNotExists();\n\n默认情况下，新容器是专用容器，因此您必须指定存储访问密钥才能从该容器下载 Blob。如果您要让容器中的文件可供所有人使用，则可以使用以下代码将容器设置为公共容器：\n\n    container.SetPermissions(\n        new BlobContainerPermissions { PublicAccess =\n        BlobContainerPublicAccessType.Blob });\n\nInternet 中的所有人都可以查看公共容器中的 Blob，但是，仅在您具有相应的访问密钥时，才能修改或删除它们。\n\n## 将 Blob 上载到容器中\n\nAzure Blob 存储支持块 Blob 和页 Blob。大多数情况下，推荐使用块 Blob。\n\n若要将文件上载到块 Blob，请获取容器引用，并使用它获取块 Blob 引用。获取 Blob 引用后，可以通过调用 **UploadFromStream** 方法，将任何数据流上载到该 Blob。如果之前不存在 Blob，此操作将创建一个；如果存在 Blob，此操作将覆盖它。\n\n下面的示例演示了如何将 Blob 上载到容器中，并假定已创建容器。\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Retrieve reference to a blob named \"myblob\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob\");\n\n    // Create or overwrite the \"myblob\" blob with contents from a local file.\n    using (var fileStream = System.IO.File.OpenRead(@\"path\\myfile\"))\n    {\n        blockBlob.UploadFromStream(fileStream);\n    }\n\n## 列出容器中的 Blob\n\n若要列出容器中的 Blob，首先需要获取容器引用。然后，您可以使用容器的 **ListBlobs** 方法来检索其中的 Blob 和/或目录。若要访问返回的 **IListBlobItem** 的丰富属性和方法，您必须将它转换到 **CloudBlockBlob**、**CloudPageBlob** 或 **CloudBlobDirectory** 对象。如果类型未知，您可以使用类型检查来确定要将其转换为哪种类型。以下代码演示了如何检索和输出 `photos` 容器中每一项的 URI：\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"photos\");\n\n    // Loop over items within the container and output the length and URI.\n    foreach (IListBlobItem item in container.ListBlobs(null, false))\n    {\n        if (item.GetType() == typeof(CloudBlockBlob))\n        {\n            CloudBlockBlob blob = (CloudBlockBlob)item;\n\n            Console.WriteLine(\"Block blob of length {0}: {1}\", blob.Properties.Length, blob.Uri);\n\n        }\n        else if (item.GetType() == typeof(CloudPageBlob))\n        {\n            CloudPageBlob pageBlob = (CloudPageBlob)item;\n\n            Console.WriteLine(\"Page blob of length {0}: {1}\", pageBlob.Properties.Length, pageBlob.Uri);\n\n        }\n        else if (item.GetType() == typeof(CloudBlobDirectory))\n        {\n            CloudBlobDirectory directory = (CloudBlobDirectory)item;\n\n            Console.WriteLine(\"Directory: {0}\", directory.Uri);\n        }\n    }\n\n如上所示，您可以命名 Blob，在其名称中包含路径信息。这将创建一个虚拟目录结构，你可以像传统文件系统一样组织和遍历。注意，该目录结构仅仅是虚拟的 -  Blob 存储中唯一可用的资源是容器和 Blob。但是，存储空间客户端库提供 **CloudBlobDirectory** 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。\n\n例如，考虑名为 `photos` 的容器中包含的下面一组块 Blob：\n\n    photo1.jpg\n    2010/architecture/description.txt\n    2010/architecture/photo3.jpg\n    2010/architecture/photo4.jpg\n    2011/architecture/photo5.jpg\n    2011/architecture/photo6.jpg\n    2011/architecture/description.txt\n    2011/photo7.jpg\n\n当您在“photos”容器上调用 **ListBlobs**（如上面的示例中）时，返回一个层次结构列表。它包含 **CloudBlobDirectory** 和 **CloudBlockBlob** 对象，分别表示容器中的目录和 Blob。生成的输出如下所示：\n\n    Directory: https://<accountname>.blob.core.chinacloudapi.cn/photos/2010/\n    Directory: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/\n    Block blob of length 505623: https://<accountname>.blob.core.chinacloudapi.cn/photos/photo1.jpg\n\n\n另外，也可以将 **ListBlobs** 方法的 **UseFlatBlobListing** 参数设置为 **true**。在这种情况下，作为 **CloudBlockBlob** 对象返回容器中的每一个 Blob。对 **ListBlobs** 的调用返回一个平面列表，如下所示：\n\n    // Loop over items within the container and output the length and URI.\n    foreach (IListBlobItem item in container.ListBlobs(null, true))\n    {\n       ...\n    }\n\n结果如下所示：\n\n    Block blob of length 4: https://<accountname>.blob.core.chinacloudapi.cn/photos/2010/architecture/description.txt\n    Block blob of length 314618: https://<accountname>.blob.core.chinacloudapi.cn/photos/2010/architecture/photo3.jpg\n    Block blob of length 522713: https://<accountname>.blob.core.chinacloudapi.cn/photos/2010/architecture/photo4.jpg\n    Block blob of length 4: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/architecture/description.txt\n    Block blob of length 419048: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/architecture/photo5.jpg\n    Block blob of length 506388: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/architecture/photo6.jpg\n    Block blob of length 399751: https://<accountname>.blob.core.chinacloudapi.cn/photos/2011/photo7.jpg\n    Block blob of length 505623: https://<accountname>.blob.core.chinacloudapi.cn/photos/photo1.jpg\n\n\n## 下载 Blob\n\n若要下载 Blob，请首先检索 Blob 引用，然后调用 **DownloadToStream** 方法。以下示例使用 **DownloadToStream** 方法将 Blob 内容传输到一个流对象，然后您可以将该对象保存到本地文件。\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Retrieve reference to a blob named \"photo1.jpg\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"photo1.jpg\");\n\n    // Save blob contents to a file.\n    using (var fileStream = System.IO.File.OpenWrite(@\"path\\myfile\"))\n    {\n        blockBlob.DownloadToStream(fileStream);\n    }\n\n也可以使用 **DownloadToStream** 方法以文本字符串形式下载 Blob 的内容。\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Retrieve reference to a blob named \"myblob.txt\"\n    CloudBlockBlob blockBlob2 = container.GetBlockBlobReference(\"myblob.txt\");\n\n    string text;\n    using (var memoryStream = new MemoryStream())\n    {\n        blockBlob2.DownloadToStream(memoryStream);\n        text = System.Text.Encoding.UTF8.GetString(memoryStream.ToArray());\n    }\n\n## 删除 Blob\n\n若要删除 Blob，首先要获取 Blob 引用，然后对其调用 **Delete** 方法。\n\n    // Retrieve storage account from connection string.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    // Create the blob client.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    // Retrieve reference to a previously created container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"mycontainer\");\n\n    // Retrieve reference to a blob named \"myblob.txt\".\n    CloudBlockBlob blockBlob = container.GetBlockBlobReference(\"myblob.txt\");\n\n    // Delete the blob.\n    blockBlob.Delete();\n\n\n## 以异步方式列出页中的 Blob\n\n如果要列出大量 Blob，或需要控制一个列操作中返回的结果数，则可以结果页的方式列出 Blob。此示例显示如何以页面形式异步返回结果，这样就不会在等待返回大型结果集时阻止操作的执行。\n\n此示例演示平面 Blob 列表，但您也可以执行分层列表，只需将 **ListBlobsSegmentedAsync** 方法的 `useFlatBlobListing` 参数设置为 `false` 即可。\n\n由于示例方法调用异步方法，因此必须以 `async` 关键字开头，且必须返回 **Task** 对象。为 **ListBlobsSegmentedAsync** 方法指定的 await 关键字将挂起示例方法的执行，直至列操作任务完成。\n\n    async public static Task ListBlobsSegmentedInFlatListing(CloudBlobContainer container)\n    {\n        //List blobs to the console window, with paging.\n        Console.WriteLine(\"List blobs in pages:\");\n\n        int i = 0;\n        BlobContinuationToken continuationToken = null;\n        BlobResultSegment resultSegment = null;\n\n        //Call ListBlobsSegmentedAsync and enumerate the result segment returned, while the continuation token is non-null.\n        //When the continuation token is null, the last page has been returned and execution can exit the loop.\n        do\n        {\n            //This overload allows control of the page size. You can return all remaining results by passing null for the maxResults parameter,\n            //or by calling a different overload.\n            resultSegment = await container.ListBlobsSegmentedAsync(\"\", true, BlobListingDetails.All, 10, continuationToken, null, null);\n            if (resultSegment.Results.Count<IListBlobItem>() > 0) { Console.WriteLine(\"Page {0}:\", ++i); }\n            foreach (var blobItem in resultSegment.Results)\n            {\n                Console.WriteLine(\"\\t{0}\", blobItem.StorageUri.PrimaryUri);\n            }\n            Console.WriteLine();\n\n            //Get the continuation token.\n            continuationToken = resultSegment.ContinuationToken;\n        }\n        while (continuationToken != null);\n    }\n\n## 写入追加 Blob\n\n追加 Blob 是一个新类型的 Blob，由用于 .NET 的 Azure 存储服务客户端库 5.x 版引入。追加 Blob 针对追加操作（例如日志记录）进行了优化。类似于块 Blob，追加 Blob 由块组成，但是当您将新的块添加到追加 Blob 时，始终追加到该 Blob 的末尾。您不能更新或删除追加 Blob 中现有的块。追加 Blob 的块 ID 不公开，因为它们是用于一个块存储(block blob)。\n \n追加 Blob 中的每个块可以有不同的大小，最大为 4 MB，并且追加 Blob 最多可包含 50000 个块。因此，追加 Blob 的最大容量稍微大于 195 GB（4 MB X 50000 块）。\n\n下面的示例创建一个新的追加 Blob 并向其追加某些数据，模拟一个简单的日志记录操作。\n\n    //Parse the connection string for the storage account.\n    CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n        Microsoft.Azure.CloudConfigurationManager.GetSetting(\"StorageConnectionString\"));\n\n    //Create service client for credentialed access to the Blob service.\n    CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();\n\n    //Get a reference to a container.\n    CloudBlobContainer container = blobClient.GetContainerReference(\"my-append-blobs\");\n\n    //Create the container if it does not already exist.\n    container.CreateIfNotExists();\n\n    //Get a reference to an append blob.\n    CloudAppendBlob appendBlob = container.GetAppendBlobReference(\"append-blob.log\");\n\n    //Create the append blob. Note that if the blob already exists, the CreateOrReplace() method will overwrite it.\n    //You can check whether the blob exists to avoid overwriting it by using CloudAppendBlob.Exists().\n    appendBlob.CreateOrReplace();\n\n    int numBlocks = 10;\n\n    //Generate an array of random bytes.\n    Random rnd = new Random();\n    byte[] bytes = new byte[numBlocks];\n    rnd.NextBytes(bytes);\n\n    //Simulate a logging operation by writing text data and byte data to the end of the append blob.\n    for (int i = 0; i < numBlocks; i++)\n    {\n        appendBlob.AppendText(String.Format(\"Timestamp: {0:u} \\tLog Entry: {1}{2}\",\n            DateTime.UtcNow, bytes[i], Environment.NewLine));\n    }\n\n    //Read the append blob to the console window.\n    Console.WriteLine(appendBlob.DownloadText());\n\n请参阅[了解块 Blob、页 Blob 和追加 Blob](https://msdn.microsoft.com/zh-cn/library/azure/ee691964.aspx)，就有关三种 Blob 之间的差异了解详细信息。\n\n## 后续步骤\n\n现在，你已了解 Blob 存储的基础知识，可单击下面的链接了解详细信息。\n\n### Blob 存储参考文档\n\n- [.NET 存储客户端库参考](https://msdn.microsoft.com/zh-cn/library/mt347887.aspx)\n- [REST API 参考](http://msdn.microsoft.com/zh-cn/library/azure/dd179355)\n\n### 其他功能指南\n\n- [开始使用适用于 .NET 的表存储](/documentation/articles/storage-dotnet-how-to-use-tables)\n- [开始使用适用于 .NET 的队列存储](/documentation/articles/storage-dotnet-how-to-use-queues)\n- [开始使用适用于 .NET 的文件存储](/documentation/articles/storage-dotnet-how-to-use-files)\n- [使用 AzCopy 命令行实用程序传输数据](/documentation/articles/storage-use-azcopy)\n- [使用 SQL 数据库存储关系数据](/documentation/articles/sql-database/articles/sql-database-dotnet-how-to-use)\n- [如何通过 WebJobs SDK 使用 Azure Blob 存储](/documentation/articles/app-service-web/websites-dotnet-webjobs-sdk-storage-blobs-how-to)\n\n  [Blob5]: ./media/storage-dotnet-how-to-use-blobs/blob5.png\n  [Blob6]: ./media/storage-dotnet-how-to-use-blobs/blob6.png\n  [Blob7]: ./media/storage-dotnet-how-to-use-blobs/blob7.png\n  [Blob8]: ./media/storage-dotnet-how-to-use-blobs/blob8.png\n  [Blob9]: ./media/storage-dotnet-how-to-use-blobs/blob9.png\n\n  [Azure 存储团队博客]: http://blogs.msdn.com/b/windowsazurestorage/\n  [配置连接字符串]: http://msdn.microsoft.com/zh-cn/library/azure/ee758697.aspx\n  [.NET 客户端库引用]: http://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx\n  [REST API 参考]: http://msdn.microsoft.com/zh-cn/library/azure/dd179355\n \n\n<!---HONumber=Mooncake_0307_2016-->"
}