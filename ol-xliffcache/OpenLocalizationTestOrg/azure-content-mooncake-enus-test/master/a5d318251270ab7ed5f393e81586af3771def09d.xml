{
  "nodes": [
    {
      "content": "如何使用适用于 Azure 移动服务的 iOS 客户端库",
      "pos": [
        27,
        55
      ]
    },
    {
      "content": "如何使用适用于移动服务的 iOS 客户端库",
      "pos": [
        74,
        95
      ]
    },
    {
      "content": "如何使用适用于 Azure 移动服务的 iOS 客户端库",
      "pos": [
        316,
        344
      ]
    },
    {
      "content": "&amp;nbsp;",
      "pos": [
        446,
        452
      ]
    },
    {
      "pos": [
        568,
        652
      ],
      "content": "本指南介绍如何使用 Azure 移动服务 <bpt id=\"p1\">[</bpt><ept id=\"p1\">iOS SDK]</ept> 执行常见任务。如果你不熟悉移动服务，请先完成<bpt id=\"p2\">[</bpt><ept id=\"p2\">移动服务快速入门]</ept>，以配置你的帐户、创建表，并创建移动服务。"
    },
    {
      "pos": [
        656,
        783
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本指南使用最新的 <bpt id=\"p1\">[</bpt>iOS 移动服务 SDK<ept id=\"p1\">](https://go.microsoft.com/fwLink/?LinkID=266533&amp;clcid=0x409)</ept>。如果你的项目使用旧版 SDK，请先升级 Xcode 中的框架。"
    },
    {
      "pos": [
        873,
        900
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"Setup\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>安装与先决条件"
    },
    {
      "pos": [
        902,
        1112
      ],
      "content": "本指南假设你已创建一个移动服务和一个表。有关详细信息，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">创建表]</ept>，或再次使用<bpt id=\"p2\">[</bpt><ept id=\"p2\">移动服务快速入门]</ept>中创建的 <ph id=\"ph1\">`TodoItem`</ph> 表。本指南假设该表的架构与这些教程中的表相同。本指南还假设你的 Xcode 将引用 <ph id=\"ph2\">`WindowsAzureMobileServices.framework`</ph> 并导入 <ph id=\"ph3\">`WindowsAzureMobileServices/WindowsAzureMobileServices.h`</ph>。"
    },
    {
      "pos": [
        1117,
        1157
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"create-client\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：创建移动服务客户端"
    },
    {
      "pos": [
        1159,
        1252
      ],
      "content": "若要在项目中访问 Azure 移动服务，请创建 <ph id=\"ph1\">`MSClient`</ph> 客户端对象。将 <ph id=\"ph2\">`AppUrl`</ph> 和 <ph id=\"ph3\">`AppKey`</ph> 分别替换为“仪表板”中的移动服务 URL 和应用程序密钥值。"
    },
    {
      "pos": [
        1363,
        1401
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"table-reference\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：创建表引用"
    },
    {
      "pos": [
        1403,
        1456
      ],
      "content": "若要访问或更新 Azure 移动服务的数据，请创建对表的引用。将 <ph id=\"ph1\">`TodoItem`</ph> 替换为你的表名称。"
    },
    {
      "pos": [
        1527,
        1557
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"querying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：查询数据"
    },
    {
      "pos": [
        1559,
        1621
      ],
      "content": "若要创建数据库查询，请查询 <ph id=\"ph1\">`MSTable`</ph> 对象。以下查询将获取 <ph id=\"ph2\">`TodoItem`</ph> 中的所有项，并记录每个项的文本。"
    },
    {
      "pos": [
        2024,
        2059
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"filtering\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：筛选器返回的数据"
    },
    {
      "content": "可以使用许多可用选项来筛选结果。",
      "pos": [
        2061,
        2077
      ]
    },
    {
      "pos": [
        2079,
        2154
      ],
      "content": "若要使用谓词进行筛选，请使用 <ph id=\"ph1\">`NSPredicate`</ph> 和 <ph id=\"ph2\">`readWithPredicate`</ph>。以下筛选器返回的数据只用于查找未完成的待办事项。"
    },
    {
      "pos": [
        2730,
        2770
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"query-object\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：使用 MSQuery"
    },
    {
      "pos": [
        2772,
        2813
      ],
      "content": "若要执行复杂查询（包括排序和分页），请使用谓词直接创建 <ph id=\"ph1\">`MSQuery`</ph> 对象："
    },
    {
      "pos": [
        2962,
        3037
      ],
      "content": "<ph id=\"ph1\">`MSQuery`</ph> 可让你控制以下几种查询行为。通过调用 <ph id=\"ph2\">`readWithCompletion`</ph> 执行 <ph id=\"ph3\">`MSQuery`</ph> 查询，如下一示例中所示。"
    },
    {
      "content": "指定结果的顺序",
      "pos": [
        3040,
        3047
      ]
    },
    {
      "content": "限制要返回的字段",
      "pos": [
        3051,
        3059
      ]
    },
    {
      "content": "限制要返回的记录数",
      "pos": [
        3063,
        3072
      ]
    },
    {
      "content": "指定响应中的总计数",
      "pos": [
        3076,
        3085
      ]
    },
    {
      "content": "指定请求中的自定义查询字符串参数",
      "pos": [
        3089,
        3105
      ]
    },
    {
      "content": "应用其他函数",
      "pos": [
        3109,
        3115
      ]
    },
    {
      "pos": [
        3122,
        3163
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"sorting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：使用 MSQuery 对数据排序"
    },
    {
      "pos": [
        3165,
        3248
      ],
      "content": "让我们先看一个示例，来了解如何对结果排序。若要先按 <ph id=\"ph1\">`text`</ph> 字段升序排序，然后按 <ph id=\"ph2\">`completion`</ph> 字段降序排序，请按如下所示调用 <ph id=\"ph3\">`MSQuery`</ph>："
    },
    {
      "pos": [
        3657,
        3699
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"paging\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：使用 MSQuery 在页中返回数据"
    },
    {
      "pos": [
        3701,
        3780
      ],
      "content": "移动服务可以限制单个响应中返回的记录量。若要控制显示给用户的记录数，你必须实施一个分页系统。你可以使用 <bpt id=\"p1\">**</bpt>MSQuery<ept id=\"p1\">**</ept> 对象的以下三个属性来执行分页："
    },
    {
      "content": "在以下示例中，一个简单函数会向服务器请求 5 条记录，然后将这些记录附加到先前加载记录的本地集合：",
      "pos": [
        3875,
        3924
      ]
    },
    {
      "pos": [
        4752,
        4829
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"selecting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph><ph id=\"ph3\">&lt;a name=\"parameters\"&gt;</ph><ph id=\"ph4\">&lt;/a&gt;</ph>如何：使用 MSQuery 限制字段和展开查询字符串参数"
    },
    {
      "pos": [
        4831,
        4894
      ],
      "content": "若要限制在查询中返回的字段，请在 <bpt id=\"p1\">**</bpt>selectFields<ept id=\"p1\">**</ept> 属性中指定字段的名称。这样，便只会返回文本和已完成的字段："
    },
    {
      "pos": [
        4956,
        5028
      ],
      "content": "若要在服务器请求中包含其他查询字符串参数（例如，某个自定义服务器端脚本要使用这些参数），请按如下所示填充 <ph id=\"ph1\">`query.parameters`</ph>："
    },
    {
      "pos": [
        5137,
        5168
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"inserting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：插入数据"
    },
    {
      "pos": [
        5170,
        5263
      ],
      "content": "若要插入新的表行，请创建新的 <ph id=\"ph1\">`NSDictionary`</ph> 并调用 <ph id=\"ph2\">`table insert`</ph>。移动服务将会根据 <ph id=\"ph3\">`NSDictionary`</ph> 自动生成新列（如果未启用<bpt id=\"p1\">[</bpt><ept id=\"p1\">动态架构]</ept>）。"
    },
    {
      "pos": [
        5265,
        5362
      ],
      "content": "如果未提供 <ph id=\"ph1\">`id`</ph>，后端会自动生成新的唯一 ID。提供你自己的 <ph id=\"ph2\">`id`</ph>，以使用电子邮件地址、用户名或你自己的自定义值作为 ID。提供自己的 ID 可以让联接和业务导向型数据库逻辑变得更容易。"
    },
    {
      "pos": [
        5932,
        5963
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"modifying\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：修改数据"
    },
    {
      "pos": [
        5965,
        5991
      ],
      "content": "若要更新现有的行，请修改项并调用 <ph id=\"ph1\">`update`</ph>："
    },
    {
      "content": "或者，提供行 ID 和更新的字段：",
      "pos": [
        6294,
        6311
      ]
    },
    {
      "pos": [
        6533,
        6554
      ],
      "content": "进行更新时，至少必须设置 <ph id=\"ph1\">`id`</ph> 属性。"
    },
    {
      "pos": [
        6559,
        6589
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"deleting\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：删除数据"
    },
    {
      "pos": [
        6591,
        6615
      ],
      "content": "若要删除某个项，请对该项调用 <ph id=\"ph1\">`delete`</ph>："
    },
    {
      "content": "或者，提供行 ID 来进行删除：",
      "pos": [
        6766,
        6782
      ]
    },
    {
      "pos": [
        6974,
        6995
      ],
      "content": "进行删除时，至少必须设置 <ph id=\"ph1\">`id`</ph> 属性。"
    },
    {
      "pos": [
        6999,
        7037
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"#custom-api\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：调用自定义 API"
    },
    {
      "pos": [
        7039,
        7276
      ],
      "content": "自定义 API 可让你定义自定义终结点，这些终结点将会公开不映射到插入、更新、删除或读取操作的服务器功能。使用自定义 API 能够以更大的力度控制消息传送，包括读取和设置 HTTP 消息标头，以及定义除 JSON 以外的消息正文格式。有关如何在移动服务中创建自定义 API 的示例，请参阅<bpt id=\"p1\">[</bpt>如何：定义自定义 API 终结点<ept id=\"p1\">](/documentation/articles/mobile-services-dotnet-backend-define-custom-api)</ept>。"
    },
    {
      "pos": [
        7389,
        7430
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"authentication\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：对用户进行身份验证"
    },
    {
      "pos": [
        7432,
        7470
      ],
      "content": "Azure 移动服务支持各种标识提供者。有关基本教程，请参阅 <bpt id=\"p1\">[</bpt><ept id=\"p1\">身份验证]</ept>。"
    },
    {
      "content": "Azure 移动服务支持两种身份验证工作流：",
      "pos": [
        7472,
        7494
      ]
    },
    {
      "pos": [
        7498,
        7564
      ],
      "content": "<bpt id=\"p1\">**</bpt>服务器托管登录<ept id=\"p1\">**</ept>：Azure 移动服务将代表应用程序管理登录过程。它会显示提供者特定的登录页，并使用选择的提供者进行身份验证。"
    },
    {
      "pos": [
        7568,
        7627
      ],
      "content": "<bpt id=\"p1\">**</bpt>客户端托管登录<ept id=\"p1\">**</ept>：<bpt id=\"p2\">_</bpt>应用程序<ept id=\"p2\">_</ept>必须从标识提供者请求令牌，然后将此令牌提供给 Azure 移动服务以进行身份验证。"
    },
    {
      "pos": [
        7637,
        7731
      ],
      "content": "当身份验证成功时，你将获得具有用户 ID 值和身份验证令牌的用户对象。若要使用此用户 ID 来授权用户，请参阅<bpt id=\"p1\">[</bpt><ept id=\"p1\">服务器端授权]</ept>。若要将表访问权限限制给已经过身份验证的用户，请参阅<bpt id=\"p2\">[</bpt><ept id=\"p2\">权限]</ept>。"
    },
    {
      "content": "服务器托管登录",
      "pos": [
        7738,
        7745
      ]
    },
    {
      "pos": [
        7747,
        7829
      ],
      "content": "以下是可以将服务器托管登录添加到<bpt id=\"p1\">[</bpt><ept id=\"p1\">移动服务快速入门]</ept>项目的方式；你可以为其他项目使用类似的代码。有关详细信息，以及要查看端到端示例的运作方式，请参阅 <bpt id=\"p2\">[</bpt><ept id=\"p2\">身份验证]</ept>。"
    },
    {
      "content": "客户端托管登录（单一登录）",
      "pos": [
        7945,
        7958
      ]
    },
    {
      "content": "你可以在移动服务客户端外部执行登录过程来启用单一登录，或者使应用程序能够直接联系标识提供者。在这种情况下，你可以通过提供单独从受支持标识提供者获取的令牌来登录到移动服务。",
      "pos": [
        7960,
        8045
      ]
    },
    {
      "pos": [
        8047,
        8157
      ],
      "content": "以下示例使用 <bpt id=\"p1\">[</bpt><ept id=\"p1\">Live Connect SDK]</ept> 为 iOS 应用程序启用单一登录。该示例假设你前面在控制器中创建了名为 <ph id=\"ph1\">`liveClient`</ph> 的 <bpt id=\"p2\">**</bpt>LiveConnectClient<ept id=\"p2\">**</ept> 实例，并且用户已登录。"
    },
    {
      "pos": [
        8418,
        8458
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"caching-tokens\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：缓存身份验证令牌"
    },
    {
      "pos": [
        8460,
        8628
      ],
      "content": "了解如何在<bpt id=\"p1\">[</bpt><ept id=\"p1\">移动服务快速入门]</ept>项目中缓存令牌；你可以对任何项目应用类似的步骤。<ph id=\"ph1\">[AZURE.INCLUDE [mobile-services-ios-authenticate-app-with-token](../includes/mobile-services-ios-authenticate-app-with-token.md)]</ph>"
    },
    {
      "pos": [
        8633,
        8661
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"errors\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何：处理错误"
    },
    {
      "pos": [
        8663,
        8738
      ],
      "content": "调用移动服务时，完成块将包含 <ph id=\"ph1\">`NSError *error`</ph> 参数。如果出错，此参数为非 nil 值。你应该在代码中检查此参数，并根据需要处理错误。"
    },
    {
      "pos": [
        8740,
        9057
      ],
      "content": "<bpt id=\"p1\">[</bpt><ph id=\"ph1\">`&lt;WindowsAzureMobileServices/MSError.h&gt;`</ph><ept id=\"p1\">](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h)</ept> 文件定义 <ph id=\"ph2\">`MSErrorResponseKey`</ph>、<ph id=\"ph3\">`MSErrorRequestKey`</ph> 和 <ph id=\"ph4\">`MSErrorServerItemKey`</ph> 常量以获取有关错误的更多数据。此外，该文件还定义每个错误代码的常量。有关如何使用这些常量的示例，请参阅<bpt id=\"p2\">[</bpt><ept id=\"p2\">冲突处理程序]</ept>，以了解 <ph id=\"ph5\">`MSErrorServerItemKey`</ph> 和 <ph id=\"ph6\">`MSErrorPreconditionFailed`</ph> 的用法。"
    }
  ],
  "content": "<properties\n    pageTitle=\"如何使用适用于 Azure 移动服务的 iOS 客户端库\"\n    description=\"如何使用适用于移动服务的 iOS 客户端库\"\n    services=\"mobile-services\"\n    documentationCenter=\"ios\"\n    authors=\"krisragh\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"mobile-services\"\n    ms.date=\"01/12/2016\"\n    wacn.date=\"02/26/2016\"/>\n\n#  如何使用适用于 Azure 移动服务的 iOS 客户端库\n\n[AZURE.INCLUDE [mobile-service-note-mobile-apps](../includes/mobile-services-note-mobile-apps.md)]\n\n&nbsp;\n[AZURE.INCLUDE [mobile-services-selector-client-library](../includes/mobile-services-selector-client-library.md)]\n\n本指南介绍如何使用 Azure 移动服务 [iOS SDK] 执行常见任务。如果你不熟悉移动服务，请先完成[移动服务快速入门]，以配置你的帐户、创建表，并创建移动服务。\n\n> [AZURE.NOTE]本指南使用最新的 [iOS 移动服务 SDK](https://go.microsoft.com/fwLink/?LinkID=266533&clcid=0x409)。如果你的项目使用旧版 SDK，请先升级 Xcode 中的框架。\n\n[AZURE.INCLUDE [mobile-services-concepts](../includes/mobile-services-concepts.md)]\n\n## <a name=\"Setup\"></a>安装与先决条件\n\n本指南假设你已创建一个移动服务和一个表。有关详细信息，请参阅[创建表]，或再次使用[移动服务快速入门]中创建的 `TodoItem` 表。本指南假设该表的架构与这些教程中的表相同。本指南还假设你的 Xcode 将引用 `WindowsAzureMobileServices.framework` 并导入 `WindowsAzureMobileServices/WindowsAzureMobileServices.h`。\n\n## <a name=\"create-client\"></a>如何：创建移动服务客户端\n\n若要在项目中访问 Azure 移动服务，请创建 `MSClient` 客户端对象。将 `AppUrl` 和 `AppKey` 分别替换为“仪表板”中的移动服务 URL 和应用程序密钥值。\n\n```\nMSClient *client = [MSClient clientWithApplicationURLString:@\"AppUrl\" applicationKey:@\"AppKey\"];\n```\n\n## <a name=\"table-reference\"></a>如何：创建表引用\n\n若要访问或更新 Azure 移动服务的数据，请创建对表的引用。将 `TodoItem` 替换为你的表名称。\n\n```\n    MSTable *table = [client tableWithName:@\"TodoItem\"];\n```\n\n## <a name=\"querying\"></a>如何：查询数据\n\n若要创建数据库查询，请查询 `MSTable` 对象。以下查询将获取 `TodoItem` 中的所有项，并记录每个项的文本。\n\n```\n[table readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(error) { // error is nil if no error occured\n            NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) { // items is NSArray of records that match query\n                NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n            }\n        }\n    }];\n```\n\n## <a name=\"filtering\"></a>如何：筛选器返回的数据\n\n可以使用许多可用选项来筛选结果。\n\n若要使用谓词进行筛选，请使用 `NSPredicate` 和 `readWithPredicate`。以下筛选器返回的数据只用于查找未完成的待办事项。\n\n```\n// Create a predicate that finds items where complete is false\n    NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"complete == NO\"];\n// Query the TodoItem table and update the items property with the results from the service\n[table readWithPredicate:predicate completion:^(MSQueryResult *result, NSError *error) {\n        if(error) {\n            NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) {\n                NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n            }\n        }\n    }];\n```\n\n## <a name=\"query-object\"></a>如何：使用 MSQuery\n\n若要执行复杂查询（包括排序和分页），请使用谓词直接创建 `MSQuery` 对象：\n\n```\n    MSQuery *query = [table query];\n    MSQuery *query = [table queryWithPredicate: [NSPredicate predicateWithFormat:@\"complete == NO\"]];\n```\n\n`MSQuery` 可让你控制以下几种查询行为。通过调用 `readWithCompletion` 执行 `MSQuery` 查询，如下一示例中所示。\n* 指定结果的顺序 \n* 限制要返回的字段 \n* 限制要返回的记录数 \n* 指定响应中的总计数 \n* 指定请求中的自定义查询字符串参数 \n* 应用其他函数\n\n\n##  <a name=\"sorting\"></a>如何：使用 MSQuery 对数据排序\n\n让我们先看一个示例，来了解如何对结果排序。若要先按 `text` 字段升序排序，然后按 `completion` 字段降序排序，请按如下所示调用 `MSQuery`：\n\n```\n[query orderByAscending:@\"text\"];\n[query orderByDescending:@\"complete\"];\n[query readWithCompletion:^(MSQueryResult *result, NSError *error) {\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                for(NSDictionary *item in result.items) {\n                        NSLog(@\"Todo Item: %@\", [item objectForKey:@\"text\"]);\n                }\n        }\n    }];\n```\n\n##  <a name=\"paging\"></a>如何：使用 MSQuery 在页中返回数据\n\n移动服务可以限制单个响应中返回的记录量。若要控制显示给用户的记录数，你必须实施一个分页系统。你可以使用 **MSQuery** 对象的以下三个属性来执行分页：\n\n```\n+   `BOOL includeTotalCount`\n+   `NSInteger fetchLimit`\n+   `NSInteger fetchOffset`\n```\n\n在以下示例中，一个简单函数会向服务器请求 5 条记录，然后将这些记录附加到先前加载记录的本地集合：\n\n```\n// Create and initialize these properties\n@property (nonatomic, strong)   NSMutableArray *loadedItems; // Init via [[NSMutableArray alloc] init]\n@property (nonatomic)                   BOOL moreResults;\n```\n\n```\n-(void)loadResults\n{\n    MSQuery *query = [self.table query];\n\n        query.includeTotalCount = YES;\n    query.fetchLimit = 5;\n        query.fetchOffset = self.loadedItems.count;\n\n\n    [query readWithCompletion:^(MSQueryResult *result, NSError *error) {\n            if(!error) {\n                // Add the items to our local copy\n            [self.loadedItems addObjectsFromArray:result.items];\n\n            // Set a flag to keep track if there are any additional records we need to load\n            self.moreResults = (self.loadedItems.count <= result.totalCount);\n            }\n        }];\n    }\n\n```\n \n##  <a name=\"selecting\"></a><a name=\"parameters\"></a>如何：使用 MSQuery 限制字段和展开查询字符串参数\n\n若要限制在查询中返回的字段，请在 **selectFields** 属性中指定字段的名称。这样，便只会返回文本和已完成的字段：\n\n```\n    query.selectFields = @[@\"text\", @\"completed\"];\n```\n\n若要在服务器请求中包含其他查询字符串参数（例如，某个自定义服务器端脚本要使用这些参数），请按如下所示填充 `query.parameters`：\n\n```\n    query.parameters = @{\n        @\"myKey1\" : @\"value1\",\n        @\"myKey2\" : @\"value2\",\n    };\n```\n\n## <a name=\"inserting\"></a>如何：插入数据\n\n若要插入新的表行，请创建新的 `NSDictionary` 并调用 `table insert`。移动服务将会根据 `NSDictionary` 自动生成新列（如果未启用[动态架构]）。\n\n如果未提供 `id`，后端会自动生成新的唯一 ID。提供你自己的 `id`，以使用电子邮件地址、用户名或你自己的自定义值作为 ID。提供自己的 ID 可以让联接和业务导向型数据库逻辑变得更容易。\n\n```\n    NSDictionary *newItem = @{@\"id\": @\"custom-id\", @\"text\": @\"my new item\", @\"complete\" : @NO};\n    [self.table insert:newItem completion:^(NSDictionary *result, NSError *error) {\n        // The result contains the new item that was inserted,\n        // depending on your server scripts it may have additional or modified \n        // data compared to what was passed to the server.\n        if(error) {\n                NSLog(@\"ERROR %@\", error);\n        } else {\n                        NSLog(@\"Todo Item: %@\", [result objectForKey:@\"text\"]);\n    }\n    }];\n```\n\n## <a name=\"modifying\"></a>如何：修改数据\n\n若要更新现有的行，请修改项并调用 `update`：\n\n```\n    NSMutableDictionary *newItem = [oldItem mutableCopy]; // oldItem is NSDictionary\n    [newItem setValue:@\"Updated text\" forKey:@\"text\"];\n    [self.table update:newItem completion:^(NSDictionary *item, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\n或者，提供行 ID 和更新的字段：\n\n```\n    [self.table update:@{@\"id\":@\"37BBF396-11F0-4B39-85C8-B319C729AF6D\", @\"Complete\":@YES} completion:^(NSDictionary *item, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\n进行更新时，至少必须设置 `id` 属性。\n\n## <a name=\"deleting\"></a>如何：删除数据\n\n若要删除某个项，请对该项调用 `delete`：\n\n```\n    [self.table delete:item completion:^(id itemId, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\n或者，提供行 ID 来进行删除：\n\n```\n    [self.table deleteWithId:@\"37BBF396-11F0-4B39-85C8-B319C729AF6D\" completion:^(id itemId, NSError *error) {\n        // Handle error or perform additional logic as needed\n    }];\n```\n\n进行删除时，至少必须设置 `id` 属性。\n\n##<a name=\"#custom-api\"></a>如何：调用自定义 API\n\n自定义 API 可让你定义自定义终结点，这些终结点将会公开不映射到插入、更新、删除或读取操作的服务器功能。使用自定义 API 能够以更大的力度控制消息传送，包括读取和设置 HTTP 消息标头，以及定义除 JSON 以外的消息正文格式。有关如何在移动服务中创建自定义 API 的示例，请参阅[如何：定义自定义 API 终结点](/documentation/articles/mobile-services-dotnet-backend-define-custom-api)。\n\n[AZURE.INCLUDE [mobile-services-ios-call-custom-api](../includes/mobile-services-ios-call-custom-api.md)]\n\n\n## <a name=\"authentication\"></a>如何：对用户进行身份验证\n\nAzure 移动服务支持各种标识提供者。有关基本教程，请参阅 [身份验证]。\n\nAzure 移动服务支持两种身份验证工作流：\n\n- **服务器托管登录**：Azure 移动服务将代表应用程序管理登录过程。它会显示提供者特定的登录页，并使用选择的提供者进行身份验证。\n\n- **客户端托管登录**：_应用程序_必须从标识提供者请求令牌，然后将此令牌提供给 Azure 移动服务以进行身份验证。\n        \n当身份验证成功时，你将获得具有用户 ID 值和身份验证令牌的用户对象。若要使用此用户 ID 来授权用户，请参阅[服务器端授权]。若要将表访问权限限制给已经过身份验证的用户，请参阅[权限]。\n\n###  服务器托管登录\n\n以下是可以将服务器托管登录添加到[移动服务快速入门]项目的方式；你可以为其他项目使用类似的代码。有关详细信息，以及要查看端到端示例的运作方式，请参阅 [身份验证]。\n\n[AZURE.INCLUDE [mobile-services-ios-authenticate-app](../includes/mobile-services-ios-authenticate-app.md)]\n\n###  客户端托管登录（单一登录）\n\n你可以在移动服务客户端外部执行登录过程来启用单一登录，或者使应用程序能够直接联系标识提供者。在这种情况下，你可以通过提供单独从受支持标识提供者获取的令牌来登录到移动服务。\n\n以下示例使用 [Live Connect SDK] 为 iOS 应用程序启用单一登录。该示例假设你前面在控制器中创建了名为 `liveClient` 的 **LiveConnectClient** 实例，并且用户已登录。\n    \n```\n    [client loginWithProvider:@\"microsoftaccount\" \n        token:@{@\"authenticationToken\" : self.liveClient.session.authenticationToken}\n        completion:^(MSUser *user, NSError *error) {\n                // Handle success and errors\n    }];\n```\n\n## <a name=\"caching-tokens\"></a>如何：缓存身份验证令牌\n\n了解如何在[移动服务快速入门]项目中缓存令牌；你可以对任何项目应用类似的步骤。[AZURE.INCLUDE [mobile-services-ios-authenticate-app-with-token](../includes/mobile-services-ios-authenticate-app-with-token.md)]\n\n## <a name=\"errors\"></a>如何：处理错误\n\n调用移动服务时，完成块将包含 `NSError *error` 参数。如果出错，此参数为非 nil 值。你应该在代码中检查此参数，并根据需要处理错误。\n\n[`<WindowsAzureMobileServices/MSError.h>`](https://github.com/Azure/azure-mobile-services/blob/master/sdk/iOS/src/MSError.h) 文件定义 `MSErrorResponseKey`、`MSErrorRequestKey` 和 `MSErrorServerItemKey` 常量以获取有关错误的更多数据。此外，该文件还定义每个错误代码的常量。有关如何使用这些常量的示例，请参阅[冲突处理程序]，以了解 `MSErrorServerItemKey` 和 `MSErrorPreconditionFailed` 的用法。\n\n<!-- Anchors. -->\n\n[What is Mobile Services]: #what-is\n[Concepts]: #concepts\n[Setup and Prerequisites]: #Setup\n[How to: Create the Mobile Services client]: #create-client\n[How to: Create a table reference]: #table-reference\n[How to: Query data from a mobile service]: #querying\n[Filter returned data]: #filtering\n[Sort returned data]: #sorting\n[Return data in pages]: #paging\n[Select specific columns]: #selecting\n[How to: Bind data to the user interface]: #binding\n[How to: Insert data into a mobile service]: #inserting\n[How to: Modify data in a mobile service]: #modifying\n[How to: Authenticate users]: #authentication\n[Cache authentication tokens]: #caching-tokens\n[How to: Upload images and large files]: #blobs\n[How to: Handle errors]: #errors\n[How to: Design unit tests]: #unit-testing\n[How to: Customize the client]: #customizing\n[Customize request headers]: #custom-headers\n[Customize data type serialization]: #custom-serialization\n[Next Steps]: #next-steps\n[How to: Use MSQuery]: #query-object\n\n<!-- Images. -->\n\n<!-- URLs. -->\n[移动服务快速入门]: /documentation/articles/mobile-services-ios-get-started\n[Get started with Mobile Services]: /documentation/articles/mobile-services-ios-get-started\n[Mobile Services SDK]: https://go.microsoft.com/fwLink/p/?LinkID=266533\n[身份验证]: /zh-cn/documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started-with-users-ios\n[iOS SDK]: https://developer.apple.com/xcode\n\n[Handling Expired Tokens]: http://go.microsoft.com/fwlink/p/?LinkId=301955\n[Live Connect SDK]: http://go.microsoft.com/fwlink/p/?LinkId=301960\n[权限]: http://msdn.microsoft.com/zh-cn/library/windowsazure/jj193161.aspx\n[服务器端授权]: /documentation/articles/mobile-services-javascript-backend-service-side-authorization\n[动态架构]: http://go.microsoft.com/fwlink/p/?LinkId=296271\n[创建表]: http://msdn.microsoft.com/zh-cn/library/windowsazure/jj193162.aspx\n[NSDictionary object]: http://go.microsoft.com/fwlink/p/?LinkId=301965\n[ASCII control codes C0 and C1]: http://en.wikipedia.org/wiki/Data_link_escape_character#C1_set\n[CLI to manage Mobile Services tables]: /documentation/articles/virtual-machines-command-line-tools/#Mobile_Tables\n[冲突处理程序]: /documentation/articles/mobile-services-ios-handling-conflicts-offline-data/#add-conflict-handling\n \n\n<!---HONumber=Mooncake_0215_2016-->"
}