{
  "nodes": [
    {
      "content": "如何通过 WebJobs SDK 使用 Azure 服务总线",
      "pos": [
        28,
        58
      ]
    },
    {
      "content": "了解如何通过 WebJobs SDK 使用 Azure 服务总线 队列和主题。",
      "pos": [
        78,
        117
      ]
    },
    {
      "content": "如何通过 WebJobs SDK 使用 Azure 服务总线",
      "pos": [
        363,
        393
      ]
    },
    {
      "content": "概述",
      "pos": [
        398,
        400
      ]
    },
    {
      "pos": [
        402,
        529
      ],
      "content": "本指南提供 C# 代码示例，用于演示如何在创建或更新 Azure Blob 后触发进程。这些代码示例使用 <bpt id=\"p1\">[</bpt>WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 版本 1.x。"
    },
    {
      "pos": [
        531,
        652
      ],
      "content": "本指南假设您了解<bpt id=\"p1\">[</bpt>如何使用指向存储帐户的连接字符串在 Visual Studio 中创建 WebJob 项目<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)</ept>。"
    },
    {
      "pos": [
        654,
        694
      ],
      "content": "代码段只显示函数，不同于创建 <ph id=\"ph1\">`JobHost`</ph> 对象的代码（如以下示例所示）："
    },
    {
      "pos": [
        990,
        1150
      ],
      "content": "在 GitHub.com 上的 azure-webjobs-sdk-samples 存储库中有<bpt id=\"p1\">[</bpt>完整的服务总线代码示例<ept id=\"p1\">](https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/ServiceBus/Program.cs)</ept>。"
    },
    {
      "pos": [
        1155,
        1185
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"prerequisites\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>先决条件"
    },
    {
      "pos": [
        1187,
        1335
      ],
      "content": "你必须先安装 <bpt id=\"p1\">[</bpt>Microsoft.Azure.WebJobs.ServiceBus<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.WebJobs.ServiceBus/)</ept> NuGet 包和其他 WebJobs SDK 包，然后才能使用服务总线。"
    },
    {
      "pos": [
        1337,
        1440
      ],
      "content": "你还必须设置 AzureWebJobsServiceBus 连接字符串，以及存储连接字符串。你可以在 App.config 文件的 <ph id=\"ph1\">`connectionStrings`</ph> 部分中执行此操作，如以下示例所示："
    },
    {
      "pos": [
        1998,
        2135
      ],
      "content": "有关在 App.config 文件中包含服务总线连接字符串设置的示例项目，请参阅<bpt id=\"p1\">[</bpt>服务总线示例<ept id=\"p1\">](https://github.com/Azure/azure-webjobs-sdk-samples/tree/master/BasicSamples/ServiceBus)</ept>。"
    },
    {
      "pos": [
        2137,
        2371
      ],
      "content": "也可以在 Azure 运行时环境中设置连接字符串，当 Web 作业在 Azure 中运行时，这些设置将覆盖 App.config 设置；有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>WebJobs SDK 入门<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-get-started#configure-the-web-app-to-use-your-azure-sql-database-and-storage-account)</ept>。"
    },
    {
      "pos": [
        2376,
        2414
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"trigger\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何在接收服务总线队列消息时触发函数"
    },
    {
      "pos": [
        2416,
        2498
      ],
      "content": "若要编写接收队列消息时 WebJobs SDK 调用的函数，请使用 <ph id=\"ph1\">`ServiceBusTrigger`</ph> 属性。该属性构造函数使用一个参数来指定要轮询的队列名称。"
    },
    {
      "content": "ServicebusTrigger 工作原理",
      "pos": [
        2504,
        2526
      ]
    },
    {
      "pos": [
        2528,
        2638
      ],
      "content": "SDK 接收 <ph id=\"ph1\">`PeekLock`</ph> 模式的消息。如果函数成功完成，则对此消息调用 <ph id=\"ph2\">`Complete`</ph>；如果函数失败，则调用 <ph id=\"ph3\">`Abandon`</ph>。如果函数的运行时间长于 <ph id=\"ph4\">`PeekLock`</ph> 超时时间，则会自动续订锁定。"
    },
    {
      "content": "服务总线会自行执行有害队列处理，因此不需要由 WebJobs SDK 控制或在其中配置。",
      "pos": [
        2640,
        2684
      ]
    },
    {
      "content": "字符串队列消息",
      "pos": [
        2690,
        2697
      ]
    },
    {
      "content": "以下代码示例读取包含字符串的队列消息，并将字符串写入 WebJobs SDK 仪表板。",
      "pos": [
        2699,
        2742
      ]
    },
    {
      "pos": [
        2933,
        3130
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>如果你在未使用 WebJobs SDK 的应用程序中创建队列消息，请务必将 <bpt id=\"p2\">[</bpt>BrokeredMessage.ContentType<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.messaging.brokeredmessage.contenttype.aspx)</ept> 设置为 “text/plain”。"
    },
    {
      "content": "POCO 队列消息",
      "pos": [
        3136,
        3145
      ]
    },
    {
      "pos": [
        3147,
        3299
      ],
      "content": "SDK 会自动反序列化包含 POCO（<bpt id=\"p1\">[</bpt>普通旧 CLR 对象<ept id=\"p1\">](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)</ept>）类型 JSON 的队列消息。以下代码示例读取包含 <ph id=\"ph1\">`BlobInformation`</ph> 对象（具有 <ph id=\"ph2\">`BlobName`</ph> 属性）的队列消息："
    },
    {
      "pos": [
        3537,
        3677
      ],
      "content": "有关展示如何使用 POCO 属性在同一函数中处理 blob 和表的代码示例，请参阅<bpt id=\"p1\">[</bpt>这篇文章的存储队列版本<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#pocoblobs)</ept>。"
    },
    {
      "content": "如果创建队列消息的代码不使用 WebJobs SDK，请使用类似于以下示例的代码：",
      "pos": [
        3679,
        3720
      ]
    },
    {
      "content": "ServiceBusTrigger 适用的类型",
      "pos": [
        4041,
        4064
      ]
    },
    {
      "pos": [
        4066,
        4149
      ],
      "content": "除了 <ph id=\"ph1\">`string`</ph> 和 POCO 类型以外，你还可以使用具有字节数组或 <ph id=\"ph2\">`BrokeredMessage`</ph> 对象的 <ph id=\"ph3\">`ServiceBusTrigger`</ph> 属性。"
    },
    {
      "pos": [
        4154,
        4185
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"create\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何创建服务总线队列消息"
    },
    {
      "pos": [
        4187,
        4239
      ],
      "content": "若要编写用于新建队列消息的函数，请使用 <ph id=\"ph1\">`ServiceBus`</ph> 属性，并将队列名称传递给属性构造函数。"
    },
    {
      "content": "在非异步函数中创建单个队列消息",
      "pos": [
        4246,
        4261
      ]
    },
    {
      "content": "以下代码示例使用输出参数在名为“outputqueue”的队列中创建新的消息，该消息的内容与名为“inputqueue”的队列中收到的队列消息相同。",
      "pos": [
        4263,
        4337
      ]
    },
    {
      "content": "用于创建单个队列消息的输出参数可以是以下任何类型：",
      "pos": [
        4592,
        4617
      ]
    },
    {
      "content": "你定义的可序列化 POCO 类型。自动序列化为 JSON。",
      "pos": [
        4663,
        4692
      ]
    },
    {
      "content": "对于 POCO 类型参数，当函数结束时始终创建队列消息；如果参数为 null，则 SDK 将创建在接收和反序列化消息时返回 null 的队列消息。对于其他类型，如果该参数为 null，则不创建队列消息。",
      "pos": [
        4694,
        4795
      ]
    },
    {
      "content": "在异步函数中创建多个队列消息",
      "pos": [
        4801,
        4815
      ]
    },
    {
      "pos": [
        4817,
        4899
      ],
      "content": "若要创建多个消息，请使用包含 <ph id=\"ph1\">`ICollector&lt;T&gt;`</ph> 或 <ph id=\"ph2\">`IAsyncCollector&lt;T&gt;`</ph> 的 <ph id=\"ph3\">`ServiceBus`</ph> 属性，如以下代码示例所示："
    },
    {
      "pos": [
        5327,
        5352
      ],
      "content": "调用 <ph id=\"ph1\">`Add`</ph> 方法时，将立即创建每个队列消息。"
    },
    {
      "pos": [
        5357,
        5386
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"topics\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>如何处理服务总线主题"
    },
    {
      "pos": [
        5388,
        5470
      ],
      "content": "若要编写 SDK 在收到服务总线主题消息时调用的函数，请使用 <ph id=\"ph1\">`ServiceBusTrigger`</ph> 属性以及捕获主题名称和订阅名称的构造函数，如以下代码示例所示："
    },
    {
      "pos": [
        5686,
        5738
      ],
      "content": "若要创建某主题的消息，请使用 <ph id=\"ph1\">`ServiceBus`</ph> 属性和主题名称，过程与使用此属性和队列名称一样。"
    },
    {
      "content": "1\\.1 版中的新增功能",
      "pos": [
        5743,
        5755
      ]
    },
    {
      "content": "在 1.1 版中添加了以下功能：",
      "pos": [
        5757,
        5773
      ]
    },
    {
      "pos": [
        5777,
        5839
      ],
      "content": "允许通过 <ph id=\"ph1\">`ServiceBusConfiguration.MessagingProvider`</ph> 对消息处理进行深层自定义。"
    },
    {
      "pos": [
        5842,
        5914
      ],
      "content": "<ph id=\"ph1\">`MessagingProvider`</ph> 支持服务总线 <ph id=\"ph2\">`MessagingFactory`</ph> 和 <ph id=\"ph3\">`NamespaceManager`</ph> 的自定义。"
    },
    {
      "pos": [
        5917,
        5957
      ],
      "content": "<ph id=\"ph1\">`MessageProcessor`</ph> 策略模式允许你为每个队列/主题指定处理器。"
    },
    {
      "content": "默认情况下支持消息处理并发。",
      "pos": [
        5960,
        5974
      ]
    },
    {
      "pos": [
        5978,
        6053
      ],
      "content": "可以轻松通过 <ph id=\"ph1\">`ServiceBusConfiguration.MessageOptions`</ph> 对 <ph id=\"ph2\">`OnMessageOptions`</ph> 进行自定义。"
    },
    {
      "pos": [
        6056,
        6253
      ],
      "content": "允许在 <ph id=\"ph1\">`ServiceBusTriggerAttribute`</ph>/<ph id=\"ph2\">`ServiceBusAttribute`</ph> 上指定 <bpt id=\"p1\">[</bpt>AccessRights<ept id=\"p1\">](https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/ServiceBus/Functions.cs#L71)</ept>（适用于你可能不具有管理权限的方案）。"
    },
    {
      "pos": [
        6259,
        6295
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"queues\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>存储队列操作说明文章涉及的相关主题"
    },
    {
      "pos": [
        6297,
        6435
      ],
      "content": "若要了解非服务总线专用 WebJobs SDK 方案，请参阅<bpt id=\"p1\">[</bpt>如何结合使用 Azure 队列存储和 WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to)</ept>。"
    },
    {
      "content": "该文章涵盖的主题包括：",
      "pos": [
        6437,
        6448
      ]
    },
    {
      "content": "异步函数",
      "pos": [
        6452,
        6456
      ]
    },
    {
      "content": "多个实例",
      "pos": [
        6459,
        6463
      ]
    },
    {
      "content": "正常关闭",
      "pos": [
        6466,
        6470
      ]
    },
    {
      "content": "在函数正文中使用 WebJobs SDK 属性",
      "pos": [
        6473,
        6496
      ]
    },
    {
      "content": "在代码中设置 SDK 连接字符串。",
      "pos": [
        6499,
        6516
      ]
    },
    {
      "content": "在代码中设置 WebJobs SDK 构造函数参数的值",
      "pos": [
        6519,
        6546
      ]
    },
    {
      "content": "手动触发函数",
      "pos": [
        6549,
        6555
      ]
    },
    {
      "content": "写入日志",
      "pos": [
        6558,
        6562
      ]
    },
    {
      "pos": [
        6567,
        6593
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"nextsteps\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>后续步骤"
    },
    {
      "pos": [
        6595,
        6753
      ],
      "content": "本指南中包含的代码示例展示了如何处理常见方案来结合使用 Azure 服务总线。有关如何使用 Azure WebJobs 和 WebJobs SDK 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>Azure WebJobs 推荐资源<ept id=\"p1\">](/documentation/articles/websites-webjobs-resources/)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 WebJobs SDK 使用 Azure 服务总线\" \n    description=\"了解如何通过 WebJobs SDK 使用 Azure 服务总线 队列和主题。\" \n    services=\"app-service\\web, service-bus\" \n    documentationCenter=\".net\" \n    authors=\"tdykstra\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags\n    ms.service=\"app-service-web\"\n    ms.date=\"12/14/2015\"\n    wacn.date=\"02/26/2016\"/>\n\n# 如何通过 WebJobs SDK 使用 Azure 服务总线\n\n## 概述\n\n本指南提供 C# 代码示例，用于演示如何在创建或更新 Azure Blob 后触发进程。这些代码示例使用 [WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk) 版本 1.x。\n\n本指南假设您了解[如何使用指向存储帐户的连接字符串在 Visual Studio 中创建 WebJob 项目](/documentation/articles/websites-dotnet-webjobs-sdk-get-started)。\n\n代码段只显示函数，不同于创建 `JobHost` 对象的代码（如以下示例所示）：\n\n    public class Program\n    {\n        public static void Main()\n        {\n                JobHostConfiguration config = new JobHostConfiguration();\n                config.UseServiceBus();\n                JobHost host = new JobHost(config);\n                host.RunAndBlock();\n        }\n    }\n\n在 GitHub.com 上的 azure-webjobs-sdk-samples 存储库中有[完整的服务总线代码示例](https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/ServiceBus/Program.cs)。\n\n## <a id=\"prerequisites\"></a>先决条件\n\n你必须先安装 [Microsoft.Azure.WebJobs.ServiceBus](https://www.nuget.org/packages/Microsoft.Azure.WebJobs.ServiceBus/) NuGet 包和其他 WebJobs SDK 包，然后才能使用服务总线。\n\n你还必须设置 AzureWebJobsServiceBus 连接字符串，以及存储连接字符串。你可以在 App.config 文件的 `connectionStrings` 部分中执行此操作，如以下示例所示：\n\n        <connectionStrings>\n            <add name=\"AzureWebJobsDashboard\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=[accountname];AccountKey=[accesskey]\"/>\n            <add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=[accountname];AccountKey=[accesskey]\"/>\n            <add name=\"AzureWebJobsServiceBus\" connectionString=\"Endpoint=sb://[yourServiceNamespace].servicebus.chinacloudapi.cn/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=[yourKey]\"/>\n        </connectionStrings>\n\n有关在 App.config 文件中包含服务总线连接字符串设置的示例项目，请参阅[服务总线示例](https://github.com/Azure/azure-webjobs-sdk-samples/tree/master/BasicSamples/ServiceBus)。\n\n也可以在 Azure 运行时环境中设置连接字符串，当 Web 作业在 Azure 中运行时，这些设置将覆盖 App.config 设置；有关详细信息，请参阅 [WebJobs SDK 入门](/documentation/articles/websites-dotnet-webjobs-sdk-get-started#configure-the-web-app-to-use-your-azure-sql-database-and-storage-account)。\n\n## <a id=\"trigger\"></a>如何在接收服务总线队列消息时触发函数\n\n若要编写接收队列消息时 WebJobs SDK 调用的函数，请使用 `ServiceBusTrigger` 属性。该属性构造函数使用一个参数来指定要轮询的队列名称。\n\n### ServicebusTrigger 工作原理\n\nSDK 接收 `PeekLock` 模式的消息。如果函数成功完成，则对此消息调用 `Complete`；如果函数失败，则调用 `Abandon`。如果函数的运行时间长于 `PeekLock` 超时时间，则会自动续订锁定。\n\n服务总线会自行执行有害队列处理，因此不需要由 WebJobs SDK 控制或在其中配置。\n\n### 字符串队列消息\n\n以下代码示例读取包含字符串的队列消息，并将字符串写入 WebJobs SDK 仪表板。\n\n        public static void ProcessQueueMessage([ServiceBusTrigger(\"inputqueue\")] string message, \n            TextWriter logger)\n        {\n            logger.WriteLine(message);\n        }\n\n**注意：**如果你在未使用 WebJobs SDK 的应用程序中创建队列消息，请务必将 [BrokeredMessage.ContentType](http://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.messaging.brokeredmessage.contenttype.aspx) 设置为 “text/plain”。\n\n### POCO 队列消息\n\nSDK 会自动反序列化包含 POCO（[普通旧 CLR 对象](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)）类型 JSON 的队列消息。以下代码示例读取包含 `BlobInformation` 对象（具有 `BlobName` 属性）的队列消息：\n\n        public static void WriteLogPOCO([ServiceBusTrigger(\"inputqueue\")] BlobInformation blobInfo,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"Queue message refers to blob: \" + blobInfo.BlobName);\n        }\n\n有关展示如何使用 POCO 属性在同一函数中处理 blob 和表的代码示例，请参阅[这篇文章的存储队列版本](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#pocoblobs)。\n\n如果创建队列消息的代码不使用 WebJobs SDK，请使用类似于以下示例的代码：\n\n        var client = QueueClient.CreateFromConnectionString(ConfigurationManager.ConnectionStrings[\"AzureWebJobsServiceBus\"].ConnectionString, \"blobadded\");\n        BlobInformation blobInformation = new BlobInformation () ;\n        var message = new BrokeredMessage(blobInformation);\n        client.Send(message);\n\n### ServiceBusTrigger 适用的类型\n\n除了 `string` 和 POCO 类型以外，你还可以使用具有字节数组或 `BrokeredMessage` 对象的 `ServiceBusTrigger` 属性。\n\n## <a id=\"create\"></a>如何创建服务总线队列消息\n\n若要编写用于新建队列消息的函数，请使用 `ServiceBus` 属性，并将队列名称传递给属性构造函数。\n\n\n### 在非异步函数中创建单个队列消息\n\n以下代码示例使用输出参数在名为“outputqueue”的队列中创建新的消息，该消息的内容与名为“inputqueue”的队列中收到的队列消息相同。\n\n        public static void CreateQueueMessage(\n            [ServiceBusTrigger(\"inputqueue\")] string queueMessage,\n            [ServiceBus(\"outputqueue\")] out string outputQueueMessage)\n        {\n            outputQueueMessage = queueMessage;\n        }\n\n用于创建单个队列消息的输出参数可以是以下任何类型：\n\n* `string`\n* `byte[]`\n* `BrokeredMessage`\n* 你定义的可序列化 POCO 类型。自动序列化为 JSON。\n\n对于 POCO 类型参数，当函数结束时始终创建队列消息；如果参数为 null，则 SDK 将创建在接收和反序列化消息时返回 null 的队列消息。对于其他类型，如果该参数为 null，则不创建队列消息。\n\n### 在异步函数中创建多个队列消息\n\n若要创建多个消息，请使用包含 `ICollector<T>` 或 `IAsyncCollector<T>` 的 `ServiceBus` 属性，如以下代码示例所示：\n\n        public static void CreateQueueMessages(\n            [ServiceBusTrigger(\"inputqueue\")] string queueMessage,\n            [ServiceBus(\"outputqueue\")] ICollector<string> outputQueueMessage,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"Creating 2 messages in outputqueue\");\n            outputQueueMessage.Add(queueMessage + \"1\");\n            outputQueueMessage.Add(queueMessage + \"2\");\n        }\n\n调用 `Add` 方法时，将立即创建每个队列消息。\n\n## <a id=\"topics\"></a>如何处理服务总线主题\n\n若要编写 SDK 在收到服务总线主题消息时调用的函数，请使用 `ServiceBusTrigger` 属性以及捕获主题名称和订阅名称的构造函数，如以下代码示例所示：\n\n        public static void WriteLog([ServiceBusTrigger(\"outputtopic\",\"subscription1\")] string message,\n            TextWriter logger)\n        {\n            logger.WriteLine(\"Topic message: \" + message);\n        }\n\n若要创建某主题的消息，请使用 `ServiceBus` 属性和主题名称，过程与使用此属性和队列名称一样。\n\n## 1\\.1 版中的新增功能\n\n在 1.1 版中添加了以下功能：\n\n* 允许通过 `ServiceBusConfiguration.MessagingProvider` 对消息处理进行深层自定义。\n* `MessagingProvider` 支持服务总线 `MessagingFactory` 和 `NamespaceManager` 的自定义。\n* `MessageProcessor` 策略模式允许你为每个队列/主题指定处理器。\n* 默认情况下支持消息处理并发。 \n* 可以轻松通过 `ServiceBusConfiguration.MessageOptions` 对 `OnMessageOptions` 进行自定义。\n* 允许在 `ServiceBusTriggerAttribute`/`ServiceBusAttribute` 上指定 [AccessRights](https://github.com/Azure/azure-webjobs-sdk-samples/blob/master/BasicSamples/ServiceBus/Functions.cs#L71)（适用于你可能不具有管理权限的方案）。 \n\n## <a id=\"queues\"></a>存储队列操作说明文章涉及的相关主题\n\n若要了解非服务总线专用 WebJobs SDK 方案，请参阅[如何结合使用 Azure 队列存储和 WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to)。\n\n该文章涵盖的主题包括：\n\n* 异步函数\n* 多个实例\n* 正常关闭\n* 在函数正文中使用 WebJobs SDK 属性\n* 在代码中设置 SDK 连接字符串。\n* 在代码中设置 WebJobs SDK 构造函数参数的值\n* 手动触发函数\n* 写入日志\n\n## <a id=\"nextsteps\"></a>后续步骤\n\n本指南中包含的代码示例展示了如何处理常见方案来结合使用 Azure 服务总线。有关如何使用 Azure WebJobs 和 WebJobs SDK 的详细信息，请参阅 [Azure WebJobs 推荐资源](/documentation/articles/websites-webjobs-resources/)。\n \n\n<!---HONumber=Mooncake_0215_2016-->"
}