<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48bd80c0df23347570d46e7c2cf4839711763e8a</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在每次启动该应用程序时，前面的示例既联系标识提供程序又联系移动服务。相反，你可以缓存授权令牌并首先尝试使用它。</source>
          <target state="new">在每次启动该应用程序时，前面的示例既联系标识提供程序又联系移动服务。相反，你可以缓存授权令牌并首先尝试使用它。</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>加密并将身份验证令牌存储在 iOS 客户端上的推荐方式是使用 iOS 密钥链。我们将使用 <bpt id="p1">[</bpt>SSKeychain<ept id="p1">](https://github.com/soffes/sskeychain)</ept>，这是一种围绕 iOS 密钥链的简单包装器。按照 SSKeychain 页上的说明操作并将其添加到你的项目。验证在项目的<bpt id="p2">**</bpt>生成设置<ept id="p2">**</ept>中已启用<bpt id="p3">**</bpt>启用模块<ept id="p3">**</ept>设置（<bpt id="p4">**</bpt>Apple LLVM - 语言 - 模块<ept id="p4">**</ept>部分。）</source>
          <target state="new">加密并将身份验证令牌存储在 iOS 客户端上的推荐方式是使用 iOS 密钥链。我们将使用 <bpt id="p1">[</bpt>SSKeychain<ept id="p1">](https://github.com/soffes/sskeychain)</ept>，这是一种围绕 iOS 密钥链的简单包装器。按照 SSKeychain 页上的说明操作并将其添加到你的项目。验证在项目的<bpt id="p2">**</bpt>生成设置<ept id="p2">**</ept>中已启用<bpt id="p3">**</bpt>启用模块<ept id="p3">**</ept>设置（<bpt id="p4">**</bpt>Apple LLVM - 语言 - 模块<ept id="p4">**</ept>部分。）</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>打开 <bpt id="p1">**</bpt>QSTodoListViewController.m<ept id="p1">**</ept> 并添加以下代码：</source>
          <target state="new">打开 <bpt id="p1">**</bpt>QSTodoListViewController.m<ept id="p1">**</ept> 并添加以下代码：</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`loginAndGetData`</ph> 中，修改 <ph id="ph2">`loginWithProvider:controller:animated:completion:`</ph> 的 completion 块。就在 <ph id="ph3">`[self refresh]`</ph> 的前面添加以下行来存储用户 ID 和标记属性：</source>
          <target state="new">在 <ph id="ph1">`loginAndGetData`</ph> 中，修改 <ph id="ph2">`loginWithProvider:controller:animated:completion:`</ph> 的 completion 块。就在 <ph id="ph3">`[self refresh]`</ph> 的前面添加以下行来存储用户 ID 和标记属性：</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>在该应用程序启动时加载用户 ID 和令牌。在 <bpt id="p1">**</bpt>QSTodoListViewController.m<ept id="p1">**</ept> 中的 <ph id="ph1">`viewDidLoad`</ph> 中，就在 <ph id="ph2">`self.todoService`</ph> 初始化后添加此项。</source>
          <target state="new">在该应用程序启动时加载用户 ID 和令牌。在 <bpt id="p1">**</bpt>QSTodoListViewController.m<ept id="p1">**</ept> 中的 <ph id="ph1">`viewDidLoad`</ph> 中，就在 <ph id="ph2">`self.todoService`</ph> 初始化后添加此项。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>