{
  "nodes": [
    {
      "content": "如何使用服务总线主题 (Ruby) | Azure",
      "pos": [
        27,
        52
      ]
    },
    {
      "content": "了解如何在 Azure 中使用 Service Bus 主题和订阅。相关代码示例是针对 Ruby 应用程序编写的。",
      "pos": [
        71,
        128
      ]
    },
    {
      "content": "如何使用 Service Bus 主题/订阅",
      "pos": [
        347,
        369
      ]
    },
    {
      "pos": [
        462,
        591
      ],
      "content": "本指南介绍如何从 Ruby 应用程序使用服务总线主题和订阅。涉及的任务包括<bpt id=\"p1\">**</bpt>创建主题和订阅、创建订阅筛选器、将消息发送到主题<ept id=\"p1\">**</ept>、<bpt id=\"p2\">**</bpt>从订阅接收消息<ept id=\"p2\">**</ept>以<bpt id=\"p3\">**</bpt>及删除主题和订阅<ept id=\"p3\">**</ept>。有关主题和订阅的详细信息，请参阅<bpt id=\"p4\">[</bpt>后续步骤<ept id=\"p4\">](#next-steps)</ept>部分。"
    },
    {
      "content": "服务总线主题和订阅",
      "pos": [
        596,
        605
      ]
    },
    {
      "pos": [
        607,
        679
      ],
      "content": "服务总线主题和订阅支持<bpt id=\"p1\">**</bpt>发布/订阅<ept id=\"p1\">**</ept>消息通信模型。在使用主题和订阅时，分布式应用程序的组件不会直接相互通信，而是通过充当中介的主题交换消息。"
    },
    {
      "content": "TopicConcepts",
      "pos": [
        683,
        696
      ]
    },
    {
      "pos": [
        774,
        864
      ],
      "content": "与每条消息由单个使用方处理的服务总线队列相比，主题和订阅通过发布/订阅模式提供<bpt id=\"p1\">**</bpt>一对多<ept id=\"p1\">**</ept>通信方式。可向一个主题注册多个订阅。当消息发送到主题时，每个订阅会分别对该消息进行处理。"
    },
    {
      "content": "主题订阅类似于接收发送至该主题的消息副本的虚拟队列。您可以选择基于每个订阅注册主题的筛选规则，这样就可以筛选/限制哪些主题订阅接收发送至某个主题的哪些消息。",
      "pos": [
        866,
        944
      ]
    },
    {
      "content": "利用 Service Bus 主题和订阅，您可以进行扩展以处理跨大量用户和应用程序的许多消息。",
      "pos": [
        946,
        993
      ]
    },
    {
      "content": "创建服务命名空间",
      "pos": [
        998,
        1006
      ]
    },
    {
      "content": "若要开始在 Azure 中使用服务总线队列，必须先创建一个服务命名空间。命名空间提供了用于对应用程序中的 Service Bus 资源进行寻址的范围容器。必须通过命令行界面创建命名空间，因为 [Azure 经典门户][] 不会使用 ACS 连接创建命名空间。",
      "pos": [
        1008,
        1137
      ]
    },
    {
      "content": "创建命名空间：",
      "pos": [
        1139,
        1146
      ]
    },
    {
      "content": "打开 Azure PowerShell 控制台。",
      "pos": [
        1151,
        1175
      ]
    },
    {
      "content": "键入用于创建命名空间的命令，如下所示。提供你自己的命名空间值，并指定与应用程序相同的区域。",
      "pos": [
        1180,
        1225
      ]
    },
    {
      "content": "New-AzureSBNamespace -Name 'yourexamplenamespace' -Location 'China East' -NamespaceType 'Messaging' -CreateACSNamespace $true",
      "pos": [
        1233,
        1358
      ]
    },
    {
      "content": "创建命名空间",
      "pos": [
        1368,
        1374
      ]
    },
    {
      "content": "获取命名空间的默认管理凭据",
      "pos": [
        1456,
        1469
      ]
    },
    {
      "content": "若要在新命名空间上执行管理操作（如创建队列），则必须获取该命名空间的管理凭据。",
      "pos": [
        1471,
        1510
      ]
    },
    {
      "pos": [
        1512,
        1600
      ],
      "content": "你运行的用于创建服务总线命名空间的 PowerShell cmdlet 将显示可用于管理命名空间的密钥。复制 <bpt id=\"p1\">**</bpt>DefaultKey<ept id=\"p1\">**</ept> 值。你将本教程稍后的代码中使用此值。"
    },
    {
      "pos": [
        1697,
        1755
      ],
      "content": "[AZURE.NOTE]\n登录到 [Azure 经典门户][] 并导航到命名空间的连接信息后，也可以看到此密钥。",
      "leadings": [
        "",
        "> "
      ],
      "nodes": [
        {
          "content": "登录到 [Azure 经典门户][] 并导航到命名空间的连接信息后，也可以看到此密钥。",
          "pos": [
            13,
            56
          ]
        }
      ]
    },
    {
      "content": "创建 Ruby 应用程序",
      "pos": [
        1760,
        1772
      ]
    },
    {
      "pos": [
        1774,
        1822
      ],
      "content": "有关说明，请参阅<bpt id=\"p1\">[</bpt>在 Azure 上创建 Ruby 应用程序<ept id=\"p1\">](/develop/ruby/)</ept>。"
    },
    {
      "content": "配置应用程序以使用 Service Bus",
      "pos": [
        1827,
        1848
      ]
    },
    {
      "content": "要使用 Azure 服务总线，你需要使用 Ruby Azure 包，其中包括一组便于与存储 REST 服务进行通信的库。",
      "pos": [
        1850,
        1910
      ]
    },
    {
      "content": "使用 RubyGems 获取该程序包",
      "pos": [
        1916,
        1934
      ]
    },
    {
      "pos": [
        1939,
        2012
      ],
      "content": "使用命令行接口，例如 <bpt id=\"p1\">**</bpt>PowerShell<ept id=\"p1\">**</ept> (Windows)、<bpt id=\"p2\">**</bpt>Terminal<ept id=\"p2\">**</ept> (Mac) 或 <bpt id=\"p3\">**</bpt>Bash<ept id=\"p3\">**</ept> (Unix)。"
    },
    {
      "content": "在命令窗口中键入“gem install azure”以安装 gem 和依赖项。",
      "pos": [
        2017,
        2057
      ]
    },
    {
      "content": "导入包",
      "pos": [
        2063,
        2066
      ]
    },
    {
      "content": "使用常用的文本编辑器将以下内容添加到你要在其中使用存储的 Ruby 文件的顶部：",
      "pos": [
        2068,
        2108
      ]
    },
    {
      "content": "设置服务总线连接",
      "pos": [
        2134,
        2142
      ]
    },
    {
      "pos": [
        2144,
        2311
      ],
      "content": "Azure 模块将读取环境变量 <bpt id=\"p1\">**</bpt>AZURE\\_SERVICEBUS\\_NAMESPACE<ept id=\"p1\">**</ept> 和 <bpt id=\"p2\">**</bpt>AZURE\\_SERVICEBUS\\_ACCESS\\_KEY<ept id=\"p2\">**</ept> 以获取连接到命名空间所需的信息。如果未设置这些环境变量，则在使用 <bpt id=\"p3\">**</bpt>Azure::ServiceBusService<ept id=\"p3\">**</ept> 之前必须通过以下代码指定命名空间信息："
    },
    {
      "pos": [
        2454,
        2570
      ],
      "content": "将命名空间值设置为你创建的值，而不是整个 URL 的值。例如，使用 <bpt id=\"p1\">**</bpt>\"yourexamplenamespace\"<ept id=\"p1\">**</ept>，而不是 \"yourexamplenamespace.servicebus.chinacloudapi.cn\"。"
    },
    {
      "content": "创建主题",
      "pos": [
        2575,
        2579
      ]
    },
    {
      "pos": [
        2581,
        2718
      ],
      "content": "可以通过 <bpt id=\"p1\">**</bpt>Azure::ServiceBusService<ept id=\"p1\">**</ept> 对象处理主题。以下代码将创建 <bpt id=\"p2\">**</bpt>Azure::ServiceBusService<ept id=\"p2\">**</ept> 对象。若要创建主题，请使用 <bpt id=\"p3\">**</bpt>create\\_topic()<ept id=\"p3\">**</ept> 方法。以下示例将创建一个主题或输出错误（如果有）。"
    },
    {
      "pos": [
        2892,
        3006
      ],
      "content": "还可以通过其他选项传递 <bpt id=\"p1\">**</bpt>Azure::ServiceBus::Topic<ept id=\"p1\">**</ept> 对象，这些选项允许你重写默认主题设置，如消息保存时间或最大队列大小。下面的示例演示如何将最大队列大小设置为 5 GB，将保存时间设置为 1 分钟："
    },
    {
      "content": "创建订阅",
      "pos": [
        3213,
        3217
      ]
    },
    {
      "pos": [
        3219,
        3298
      ],
      "content": "主题订阅也是使用 <bpt id=\"p1\">**</bpt>Azure::ServiceBusService<ept id=\"p1\">**</ept> 对象创建的。订阅已命名，并且具有一个限制传递到订阅的虚拟队列的消息集的可选筛选器。"
    },
    {
      "content": "订阅是永久性的，并且除非删除它或删除与之相关的主题，否则订阅将一直存在。如果你的应用程序包含创建订阅的逻辑，则它应首先使用 getSubscription 方法检查该订阅是否已经存在。",
      "pos": [
        3300,
        3392
      ]
    },
    {
      "content": "创建具有默认 (MatchAll) 筛选器的订阅",
      "pos": [
        3398,
        3422
      ]
    },
    {
      "pos": [
        3424,
        3562
      ],
      "content": "<bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> 筛选器是默认筛选器，在创建新订阅时未指定筛选器的情况下使用。使用 <bpt id=\"p2\">**</bpt>MatchAll<ept id=\"p2\">**</ept> 筛选器时，发布到主题的所有消息都将置于订阅的虚拟队列中。以下示例创建了名为“all-messages”的订阅并使用了默认的 <bpt id=\"p3\">**</bpt>MatchAll<ept id=\"p3\">**</ept> 筛选器。"
    },
    {
      "pos": [
        3671,
        3721
      ],
      "content": "<ph id=\"ph1\">&lt;a id=\"how-to-create-subscriptions\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>创建具有筛选器的订阅"
    },
    {
      "content": "还可以定义筛选器，以指定发送到主题的哪些消息应该在特定订阅中显示。",
      "pos": [
        3723,
        3756
      ]
    },
    {
      "pos": [
        3758,
        4020
      ],
      "content": "订阅支持的最灵活的筛选器类型是 <bpt id=\"p1\">**</bpt>Azure::ServiceBus::SqlFilter<ept id=\"p1\">**</ept>，它实现了部分 SQL92 功能。SQL 筛选器将对发布到主题的消息的属性进行操作。有关可用于 SQL 筛选器的表达式的更多详细信息，请参阅 <bpt id=\"p2\">[</bpt>SqlFilter.SqlExpression<ept id=\"p2\">](http://msdn.microsoft.com/zh-cn/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx)</ept> 语法。"
    },
    {
      "pos": [
        4022,
        4110
      ],
      "content": "可以使用 <bpt id=\"p1\">**</bpt>Azure::ServiceBusService<ept id=\"p1\">**</ept> 对象的 <bpt id=\"p2\">**</bpt>create\\_rule()<ept id=\"p2\">**</ept> 方法向订阅中添加筛选器。此方法允许你向现有订阅中添加新筛选器。"
    },
    {
      "pos": [
        4112,
        4247
      ],
      "content": "由于默认筛选器会自动应用到所有新订阅，因此，你必须首先删除默认筛选器，否则 <bpt id=\"p1\">**</bpt>MatchAll<ept id=\"p1\">**</ept> 会替代你可能指定的任何其他筛选器。可以对 <bpt id=\"p2\">**</bpt>Azure::ServiceBusService<ept id=\"p2\">**</ept> 对象使用 <bpt id=\"p3\">**</bpt>delete\\_rule()<ept id=\"p3\">**</ept> 方法来删除默认规则。"
    },
    {
      "pos": [
        4249,
        4359
      ],
      "content": "以下示例将创建一个名为“high-messages”的订阅，该订阅包含一个 <bpt id=\"p1\">**</bpt>Azure::ServiceBus::SqlFilter<ept id=\"p1\">**</ept>，它仅选择自定义 <bpt id=\"p2\">**</bpt>message\\_number<ept id=\"p2\">**</ept> 属性大于 3 的消息："
    },
    {
      "pos": [
        4851,
        4961
      ],
      "content": "类似地，以下示例将创建一个名为“low-messages”的订阅，其中包含的 <bpt id=\"p1\">**</bpt>Azure::ServiceBus::SqlFilter<ept id=\"p1\">**</ept> 仅选择 <bpt id=\"p2\">**</bpt>message\\_number<ept id=\"p2\">**</ept> 属性小于或等于 3 的消息："
    },
    {
      "content": "现在，将消息发送到“test-topic”时，它总是会传送给订阅了“all-messages”主题订阅的接收者，并选择性地传送给订阅了“high-messages”和“low-messages”主题订阅的接收者（具体取决于消息内容）。",
      "pos": [
        5450,
        5567
      ]
    },
    {
      "content": "将消息发送到主题",
      "pos": [
        5572,
        5580
      ]
    },
    {
      "pos": [
        5582,
        5920
      ],
      "content": "若要将消息发送到服务总线主题，你的应用程序必须对 <bpt id=\"p1\">**</bpt>Azure::ServiceBusService<ept id=\"p1\">**</ept> 对象使用 <bpt id=\"p2\">**</bpt>send\\_topic\\_message()<ept id=\"p2\">**</ept> 方法。发送到服务总线主题的消息是 <bpt id=\"p3\">**</bpt>Azure::ServiceBus::BrokeredMessage<ept id=\"p3\">**</ept> 对象的实例。<bpt id=\"p4\">**</bpt>Azure::ServiceBus::BrokeredMessage<ept id=\"p4\">**</ept> 对象具有一组标准属性（如 <bpt id=\"p5\">**</bpt>label<ept id=\"p5\">**</ept> 和 <bpt id=\"p6\">**</bpt>time\\_to\\_live<ept id=\"p6\">**</ept>）、一个用于保存自定义应用程序特定属性的字典以及一段字符串数据正文。应用程序可以通过将字符串值传递给 <bpt id=\"p7\">**</bpt>send\\_topic\\_message()<ept id=\"p7\">**</ept> 方法来设置消息正文，并且任何必需的标准属性将用默认值来填充。"
    },
    {
      "pos": [
        5922,
        6010
      ],
      "content": "下面的示例演示如何向“test-topic”发送五条测试消息。请注意，每条消息的 <bpt id=\"p1\">**</bpt>message\\_number<ept id=\"p1\">**</ept> 自定义属性值因循环迭代而异（这将确定哪些订阅接收它）："
    },
    {
      "content": "Service Bus 主题支持最大为 256 MB 的消息（标头最大为 64 MB，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。",
      "pos": [
        6225,
        6337
      ]
    },
    {
      "content": "从订阅接收消息",
      "pos": [
        6342,
        6349
      ]
    },
    {
      "pos": [
        6351,
        6526
      ],
      "content": "对 <bpt id=\"p1\">**</bpt>Azure::ServiceBusService<ept id=\"p1\">**</ept> 对象使用 <bpt id=\"p2\">**</bpt>receive\\_subscription\\_message()<ept id=\"p2\">**</ept> 方法可从订阅接收消息。默认情况下，消息在被读取（查看）的同时会被锁定，从而无法从订阅中删除。但是，你可以通过将 <bpt id=\"p3\">**</bpt>peek\\_lock<ept id=\"p3\">**</ept> 选项设置为 <bpt id=\"p4\">**</bpt>false<ept id=\"p4\">**</ept>，在读取消息时将其从订阅中删除。"
    },
    {
      "pos": [
        6528,
        6792
      ],
      "content": "默认行为使读取和删除变成一个两阶段操作，从而也有可能支持不允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序处理完该消息（或将其可靠地存储起来留待将来处理）后，会通过调用 <bpt id=\"p1\">**</bpt>delete\\_subscription\\_message()<ept id=\"p1\">**</ept> 方法并提供要删除的消息作为参数来完成接收过程的第二阶段。<bpt id=\"p2\">**</bpt>delete\\_subscription\\_message()<ept id=\"p2\">**</ept> 方法将此消息标记为“已使用”并将其从订阅中删除。"
    },
    {
      "pos": [
        6794,
        6978
      ],
      "content": "如果 <bpt id=\"p1\">**</bpt>:peek\\_lock<ept id=\"p1\">**</ept> 参数设置为 <bpt id=\"p2\">**</bpt>false<ept id=\"p2\">**</ept>，读取并删除消息将是最简单的模式，并且最适合在发生故障时应用程序允许不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。"
    },
    {
      "pos": [
        6980,
        7175
      ],
      "content": "以下示例演示如何使用 <bpt id=\"p1\">**</bpt>receive\\_subscription\\_message()<ept id=\"p1\">**</ept> 接收和处理消息。该示例先通过将 <bpt id=\"p2\">**</bpt>:peek\\_lock<ept id=\"p2\">**</ept> 设置为 <bpt id=\"p3\">**</bpt>false<ept id=\"p3\">**</ept> 从“low-messages”订阅接收并删除一条消息，然后再从“high-messages”接收另一条消息，最后使用 <bpt id=\"p4\">**</bpt>delete\\_subscription\\_message()<ept id=\"p4\">**</ept> 删除该消息："
    },
    {
      "content": "处理应用程序崩溃和不可读消息",
      "pos": [
        7486,
        7500
      ]
    },
    {
      "pos": [
        7502,
        7697
      ],
      "content": "Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 <bpt id=\"p1\">**</bpt>Azure::ServiceBusService<ept id=\"p1\">**</ept> 对象调用 <bpt id=\"p2\">**</bpt>unlock\\_subscription\\_message()<ept id=\"p2\">**</ept> 方法。这会导致服务总线解锁订阅中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。"
    },
    {
      "content": "还存在与订阅中的锁定消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，应用程序崩溃），服务总线将自动解锁该消息并使之重新可供接收。",
      "pos": [
        7699,
        7771
      ]
    },
    {
      "pos": [
        7773,
        8012
      ],
      "content": "如果应用程序在处理消息之后，但在调用 <bpt id=\"p1\">**</bpt>delete\\_subscription\\_message()<ept id=\"p1\">**</ept> 方法之前崩溃，则在应用程序重新启动时，该消息将重新传送给应用程序。此情况通常称作<bpt id=\"p2\">**</bpt>至少处理一次<ept id=\"p2\">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。此逻辑通常可以通过使用消息的 <bpt id=\"p3\">**</bpt>message\\_id<ept id=\"p3\">**</ept> 属性来实现，该属性在多次传送尝试中保持不变。"
    },
    {
      "content": "删除主题和订阅",
      "pos": [
        8017,
        8024
      ]
    },
    {
      "pos": [
        8026,
        8126
      ],
      "content": "主题和订阅具有持久性，必须通过 <bpt id=\"p1\">[</bpt>Azure 经典门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>或以编程方式显式删除。下面的示例演示如何删除名为“test-topic”的主题："
    },
    {
      "content": "删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。下面的代码演示如何从“test-topic”主题中删除名为“high-messages”的订阅：",
      "pos": [
        8186,
        8266
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        8353,
        8357
      ]
    },
    {
      "content": "现在，你已了解有关 Service Bus 主题的基础知识，单击下面的链接可了解更多信息。",
      "pos": [
        8359,
        8404
      ]
    },
    {
      "pos": [
        8410,
        8489
      ],
      "content": "请参阅<bpt id=\"p1\">[</bpt>队列、主题和订阅<ept id=\"p1\">](/documentation/articles/service-bus-queues-topics-subscriptions)</ept>。"
    },
    {
      "pos": [
        8494,
        8615
      ],
      "content": "<bpt id=\"p1\">[</bpt>SqlFilter<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.aspx)</ept> 的 API 参考。"
    },
    {
      "content": "访问 GitHub 上的 <bpt id=\"p1\">[</bpt>Azure SDK for Ruby<ept id=\"p1\">](https://github.com/WindowsAzure/azure-sdk-for-ruby)</ept> 存储库",
      "pos": [
        8620,
        8709
      ]
    },
    {
      "content": "[Azure 经典门户]: http://manage.windowsazure.cn",
      "pos": [
        8710,
        8753
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"如何使用服务总线主题 (Ruby) | Azure\"\n    description=\"了解如何在 Azure 中使用 Service Bus 主题和订阅。相关代码示例是针对 Ruby 应用程序编写的。\"\n    services=\"service-bus\"\n    documentationCenter=\"ruby\"\n    authors=\"sethmanheim\"\n    manager=\"timlt\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"service-bus\"\n    ms.date=\"12/09/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n\n\n\n\n# 如何使用 Service Bus 主题/订阅\n\n[AZURE.INCLUDE [service-bus-selector-topics](../includes/service-bus-selector-topics.md)]\n\n本指南介绍如何从 Ruby 应用程序使用服务总线主题和订阅。涉及的任务包括**创建主题和订阅、创建订阅筛选器、将消息发送到主题**、**从订阅接收消息**以**及删除主题和订阅**。有关主题和订阅的详细信息，请参阅[后续步骤](#next-steps)部分。\n\n## 服务总线主题和订阅\n\n服务总线主题和订阅支持**发布/订阅**消息通信模型。在使用主题和订阅时，分布式应用程序的组件不会直接相互通信，而是通过充当中介的主题交换消息。\n\n![TopicConcepts](./media/service-bus-ruby-how-to-use-topics-subscriptions/sb-topics-01.png)\n\n与每条消息由单个使用方处理的服务总线队列相比，主题和订阅通过发布/订阅模式提供**一对多**通信方式。可向一个主题注册多个订阅。当消息发送到主题时，每个订阅会分别对该消息进行处理。\n\n主题订阅类似于接收发送至该主题的消息副本的虚拟队列。您可以选择基于每个订阅注册主题的筛选规则，这样就可以筛选/限制哪些主题订阅接收发送至某个主题的哪些消息。\n\n利用 Service Bus 主题和订阅，您可以进行扩展以处理跨大量用户和应用程序的许多消息。\n\n## 创建服务命名空间\n\n若要开始在 Azure 中使用服务总线队列，必须先创建一个服务命名空间。命名空间提供了用于对应用程序中的 Service Bus 资源进行寻址的范围容器。必须通过命令行界面创建命名空间，因为 [Azure 经典门户][] 不会使用 ACS 连接创建命名空间。\n\n创建命名空间：\n\n1. 打开 Azure PowerShell 控制台。\n\n2. 键入用于创建命名空间的命令，如下所示。提供你自己的命名空间值，并指定与应用程序相同的区域。\n\n      New-AzureSBNamespace -Name 'yourexamplenamespace' -Location 'China East' -NamespaceType 'Messaging' -CreateACSNamespace $true\n\n      ![创建命名空间](./media/service-bus-ruby-how-to-use-topics-subscriptions/showcmdcreate.png)\n\n## 获取命名空间的默认管理凭据\n\n若要在新命名空间上执行管理操作（如创建队列），则必须获取该命名空间的管理凭据。\n\n你运行的用于创建服务总线命名空间的 PowerShell cmdlet 将显示可用于管理命名空间的密钥。复制 **DefaultKey** 值。你将本教程稍后的代码中使用此值。\n\n       ![Copy key](./media/service-bus-ruby-how-to-use-topics-subscriptions/defaultkey.png)\n\n> [AZURE.NOTE]\n> 登录到 [Azure 经典门户][] 并导航到命名空间的连接信息后，也可以看到此密钥。\n\n## 创建 Ruby 应用程序\n\n有关说明，请参阅[在 Azure 上创建 Ruby 应用程序](/develop/ruby/)。\n\n## 配置应用程序以使用 Service Bus\n\n要使用 Azure 服务总线，你需要使用 Ruby Azure 包，其中包括一组便于与存储 REST 服务进行通信的库。\n\n### 使用 RubyGems 获取该程序包\n\n1. 使用命令行接口，例如 **PowerShell** (Windows)、**Terminal** (Mac) 或 **Bash** (Unix)。\n\n2. 在命令窗口中键入“gem install azure”以安装 gem 和依赖项。\n\n### 导入包\n\n使用常用的文本编辑器将以下内容添加到你要在其中使用存储的 Ruby 文件的顶部：\n\n    require \"azure\"\n\n## 设置服务总线连接\n\nAzure 模块将读取环境变量 **AZURE\\_SERVICEBUS\\_NAMESPACE** 和 **AZURE\\_SERVICEBUS\\_ACCESS\\_KEY** 以获取连接到命名空间所需的信息。如果未设置这些环境变量，则在使用 **Azure::ServiceBusService** 之前必须通过以下代码指定命名空间信息：\n\n    Azure.config.sb_namespace = \"<your azure service bus namespace>\"\n    Azure.config.sb_access_key = \"<your azure service bus access key>\"\n\n将命名空间值设置为你创建的值，而不是整个 URL 的值。例如，使用 **\"yourexamplenamespace\"**，而不是 \"yourexamplenamespace.servicebus.chinacloudapi.cn\"。\n\n## 创建主题\n\n可以通过 **Azure::ServiceBusService** 对象处理主题。以下代码将创建 **Azure::ServiceBusService** 对象。若要创建主题，请使用 **create\\_topic()** 方法。以下示例将创建一个主题或输出错误（如果有）。\n\n    azure_service_bus_service = Azure::ServiceBusService.new\n    begin\n      topic = azure_service_bus_service.create_queue(\"test-topic\")\n    rescue\n      puts $!\n    end\n\n还可以通过其他选项传递 **Azure::ServiceBus::Topic** 对象，这些选项允许你重写默认主题设置，如消息保存时间或最大队列大小。下面的示例演示如何将最大队列大小设置为 5 GB，将保存时间设置为 1 分钟：\n\n    topic = Azure::ServiceBus::Topic.new(\"test-topic\")\n    topic.max_size_in_megabytes = 5120\n    topic.default_message_time_to_live = \"PT1M\"\n\n    topic = azure_service_bus_service.create_topic(topic)\n\n## 创建订阅\n\n主题订阅也是使用 **Azure::ServiceBusService** 对象创建的。订阅已命名，并且具有一个限制传递到订阅的虚拟队列的消息集的可选筛选器。\n\n订阅是永久性的，并且除非删除它或删除与之相关的主题，否则订阅将一直存在。如果你的应用程序包含创建订阅的逻辑，则它应首先使用 getSubscription 方法检查该订阅是否已经存在。\n\n### 创建具有默认 (MatchAll) 筛选器的订阅\n\n**MatchAll** 筛选器是默认筛选器，在创建新订阅时未指定筛选器的情况下使用。使用 **MatchAll** 筛选器时，发布到主题的所有消息都将置于订阅的虚拟队列中。以下示例创建了名为“all-messages”的订阅并使用了默认的 **MatchAll** 筛选器。\n\n    subscription = azure_service_bus_service.create_subscription(\"test-topic\", \n      \"all-messages\")\n\n### <a id=\"how-to-create-subscriptions\"></a>创建具有筛选器的订阅\n\n还可以定义筛选器，以指定发送到主题的哪些消息应该在特定订阅中显示。\n\n订阅支持的最灵活的筛选器类型是 **Azure::ServiceBus::SqlFilter**，它实现了部分 SQL92 功能。SQL 筛选器将对发布到主题的消息的属性进行操作。有关可用于 SQL 筛选器的表达式的更多详细信息，请参阅 [SqlFilter.SqlExpression](http://msdn.microsoft.com/zh-cn/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.sqlexpression.aspx) 语法。\n\n可以使用 **Azure::ServiceBusService** 对象的 **create\\_rule()** 方法向订阅中添加筛选器。此方法允许你向现有订阅中添加新筛选器。\n\n由于默认筛选器会自动应用到所有新订阅，因此，你必须首先删除默认筛选器，否则 **MatchAll** 会替代你可能指定的任何其他筛选器。可以对 **Azure::ServiceBusService** 对象使用 **delete\\_rule()** 方法来删除默认规则。\n\n以下示例将创建一个名为“high-messages”的订阅，该订阅包含一个 **Azure::ServiceBus::SqlFilter**，它仅选择自定义 **message\\_number** 属性大于 3 的消息：\n\n    subscription = azure_service_bus_service.create_subscription(\"test-topic\", \n      \"high-messages\")\n    azure_service_bus_service.delete_rule(\"test-topic\", \"high-messages\", \n      \"$Default\")\n    \n    rule = Azure::ServiceBus::Rule.new(\"high-messages-rule\")\n    rule.topic = \"test-topic\"\n    rule.subscription = \"high-messages\"\n    rule.filter = Azure::ServiceBus::SqlFilter.new({ \n      :sql_expression => \"message_number > 3\" })\n    rule = azure_service_bus_service.create_rule(rule)\n\n类似地，以下示例将创建一个名为“low-messages”的订阅，其中包含的 **Azure::ServiceBus::SqlFilter** 仅选择 **message\\_number** 属性小于或等于 3 的消息：\n\n    subscription = azure_service_bus_service.create_subscription(\"test-topic\", \n      \"low-messages\")\n    azure_service_bus_service.delete_rule(\"test-topic\", \"low-messages\", \n      \"$Default\")\n    \n    rule = Azure::ServiceBus::Rule.new(\"low-messages-rule\")\n    rule.topic = \"test-topic\"\n    rule.subscription = \"low-messages\"\n    rule.filter = Azure::ServiceBus::SqlFilter.new({ \n      :sql_expression => \"message_number <= 3\" })\n    rule = azure_service_bus_service.create_rule(rule)\n\n现在，将消息发送到“test-topic”时，它总是会传送给订阅了“all-messages”主题订阅的接收者，并选择性地传送给订阅了“high-messages”和“low-messages”主题订阅的接收者（具体取决于消息内容）。\n\n## 将消息发送到主题\n\n若要将消息发送到服务总线主题，你的应用程序必须对 **Azure::ServiceBusService** 对象使用 **send\\_topic\\_message()** 方法。发送到服务总线主题的消息是 **Azure::ServiceBus::BrokeredMessage** 对象的实例。**Azure::ServiceBus::BrokeredMessage** 对象具有一组标准属性（如 **label** 和 **time\\_to\\_live**）、一个用于保存自定义应用程序特定属性的字典以及一段字符串数据正文。应用程序可以通过将字符串值传递给 **send\\_topic\\_message()** 方法来设置消息正文，并且任何必需的标准属性将用默认值来填充。\n\n下面的示例演示如何向“test-topic”发送五条测试消息。请注意，每条消息的 **message\\_number** 自定义属性值因循环迭代而异（这将确定哪些订阅接收它）：\n\n    5.times do |i|\n      message = Azure::ServiceBus::BrokeredMessage.new(\"test message \" + i, \n        { :message_number => i })\n      azure_service_bus_service.send_topic_message(\"test-topic\", message)\n    end\n\nService Bus 主题支持最大为 256 MB 的消息（标头最大为 64 MB，其中包括标准和自定义应用程序属性）。一个主题中包含的消息数量不受限制，但消息的总大小受限制。此主题大小是在创建时定义的，上限为 5 GB。\n\n## 从订阅接收消息\n\n对 **Azure::ServiceBusService** 对象使用 **receive\\_subscription\\_message()** 方法可从订阅接收消息。默认情况下，消息在被读取（查看）的同时会被锁定，从而无法从订阅中删除。但是，你可以通过将 **peek\\_lock** 选项设置为 **false**，在读取消息时将其从订阅中删除。\n\n默认行为使读取和删除变成一个两阶段操作，从而也有可能支持不允许遗漏消息的应用程序。当 Service Bus 收到请求时，它会查找下一条要使用的消息，锁定该消息以防其他使用者接收，然后将该消息返回到应用程序。应用程序处理完该消息（或将其可靠地存储起来留待将来处理）后，会通过调用 **delete\\_subscription\\_message()** 方法并提供要删除的消息作为参数来完成接收过程的第二阶段。**delete\\_subscription\\_message()** 方法将此消息标记为“已使用”并将其从订阅中删除。\n\n如果 **:peek\\_lock** 参数设置为 **false**，读取并删除消息将是最简单的模式，并且最适合在发生故障时应用程序允许不处理消息的情况。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。\n\n以下示例演示如何使用 **receive\\_subscription\\_message()** 接收和处理消息。该示例先通过将 **:peek\\_lock** 设置为 **false** 从“low-messages”订阅接收并删除一条消息，然后再从“high-messages”接收另一条消息，最后使用 **delete\\_subscription\\_message()** 删除该消息：\n\n    message = azure_service_bus_service.receive_subscription_message(\n      \"test-topic\", \"low-messages\", { :peek_lock => false })\n    message = azure_service_bus_service.receive_subscription_message(\n      \"test-topic\", \"high-messages\")\n    azure_service_bus_service.delete_subscription_message(message)\n\n## 处理应用程序崩溃和不可读消息\n\nService Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序因某种原因无法处理消息，则它可以对 **Azure::ServiceBusService** 对象调用 **unlock\\_subscription\\_message()** 方法。这会导致服务总线解锁订阅中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。\n\n还存在与订阅中的锁定消息关联的超时，如果应用程序未能在锁定超时过期前处理消息（例如，应用程序崩溃），服务总线将自动解锁该消息并使之重新可供接收。\n\n如果应用程序在处理消息之后，但在调用 **delete\\_subscription\\_message()** 方法之前崩溃，则在应用程序重新启动时，该消息将重新传送给应用程序。此情况通常称作**至少处理一次**，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案无法容忍重复处理，则应用程序开发人员应向其应用程序添加更多逻辑以处理重复消息传送。此逻辑通常可以通过使用消息的 **message\\_id** 属性来实现，该属性在多次传送尝试中保持不变。\n\n## 删除主题和订阅\n\n主题和订阅具有持久性，必须通过 [Azure 经典门户](https://manage.windowsazure.cn)或以编程方式显式删除。下面的示例演示如何删除名为“test-topic”的主题：\n\n    azure_service_bus_service.delete_topic(\"test-topic\")\n\n删除某个主题也会删除向该主题注册的所有订阅。也可以单独删除订阅。下面的代码演示如何从“test-topic”主题中删除名为“high-messages”的订阅：\n\n    azure_service_bus_service.delete_subscription(\"test-topic\", \"high-messages\")\n\n## 后续步骤\n\n现在，你已了解有关 Service Bus 主题的基础知识，单击下面的链接可了解更多信息。\n\n-   请参阅[队列、主题和订阅](/documentation/articles/service-bus-queues-topics-subscriptions)。\n-   [SqlFilter](http://msdn.microsoft.com/zh-cn/library/windowsazure/microsoft.servicebus.messaging.sqlfilter.aspx) 的 API 参考。\n-   访问 GitHub 上的 [Azure SDK for Ruby](https://github.com/WindowsAzure/azure-sdk-for-ruby) 存储库\n[Azure 经典门户]: http://manage.windowsazure.cn\n\n<!---HONumber=Mooncake_0104_2016-->"
}