<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0918ab7ee3823a56ec24c9594231a09c452d6179</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用 EventProcessorHost 接收消息</source>
          <target state="new">使用 EventProcessorHost 接收消息</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">][]</ept> 是一个 .NET 类，它通过从事件中心管理持久检查点和并行接收来简化从那些事件中心接收事件。使用 <bpt id="p2">[</bpt>EventProcessorHost<ept id="p2">][]</ept>，可跨多个接收方（即使承载于不同节点中）拆分事件。此示例演示如何为单一接收方使用 <bpt id="p3">[</bpt>EventProcessorHost<ept id="p3">][]</ept>。<bpt id="p4">[</bpt>经过扩展的事件处理<ept id="p4">][]</ept>示例显示如何将 <bpt id="p5">[</bpt>EventProcessorHost<ept id="p5">][]</ept> 用于多个接收方。</source>
          <target state="new"><bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">][]</ept> 是一个 .NET 类，它通过从事件中心管理持久检查点和并行接收来简化从那些事件中心接收事件。使用 <bpt id="p2">[</bpt>EventProcessorHost<ept id="p2">][]</ept>，可跨多个接收方（即使承载于不同节点中）拆分事件。此示例演示如何为单一接收方使用 <bpt id="p3">[</bpt>EventProcessorHost<ept id="p3">][]</ept>。<bpt id="p4">[</bpt>经过扩展的事件处理<ept id="p4">][]</ept>示例显示如何将 <bpt id="p5">[</bpt>EventProcessorHost<ept id="p5">][]</ept> 用于多个接收方。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>若要使用 <bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">][]</ept>，你必须有一个 <bpt id="p2">[</bpt>Azure 存储帐户<ept id="p2">][]</ept>：</source>
          <target state="new">若要使用 <bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">][]</ept>，你必须有一个 <bpt id="p2">[</bpt>Azure 存储帐户<ept id="p2">][]</ept>：</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>登录到 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>，然后单击屏幕底部的“新建”。</source>
          <target state="new">登录到 <bpt id="p1">[</bpt>Azure 经典门户<ept id="p1">][]</ept>，然后单击屏幕底部的“新建”。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>依次单击“数据服务”、“存储”、“快速创建”，然后为你的存储帐户键入一个名称。选择所需的区域，然后单击“创建存储帐户”。</source>
          <target state="new">依次单击“数据服务”、“存储”、“快速创建”，然后为你的存储帐户键入一个名称。选择所需的区域，然后单击“创建存储帐户”。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>单击新创建的存储帐户，然后单击“管理访问密钥”：</source>
          <target state="new">单击新创建的存储帐户，然后单击“管理访问密钥”：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>复制访问密钥，供本教程后面使用。</source>
          <target state="new">复制访问密钥，供本教程后面使用。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，使用<bpt id="p1">**</bpt>控制台应用程序<ept id="p1">**</ept>项目模板创建一个新的 Visual C# 桌面应用项目。将该项目命名为 <bpt id="p2">**</bpt>Receiver<ept id="p2">**</ept>。</source>
          <target state="new">在 Visual Studio 中，使用<bpt id="p1">**</bpt>控制台应用程序<ept id="p1">**</ept>项目模板创建一个新的 Visual C# 桌面应用项目。将该项目命名为 <bpt id="p2">**</bpt>Receiver<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击该解决方案，然后单击“管理 NuGet 包”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击该解决方案，然后单击“管理 NuGet 包”。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>此时将显示“管理 NuGet 包”对话框。</source>
          <target state="new">此时将显示“管理 NuGet 包”对话框。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>搜索 <ph id="ph1">`Azure Service Bus Event Hub - EventProcessorHost`</ph>、单击“安装”，并接受使用条款。</source>
          <target state="new">搜索 <ph id="ph1">`Azure Service Bus Event Hub - EventProcessorHost`</ph>、单击“安装”，并接受使用条款。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>这样，便会下载、安装 <bpt id="p1">[</bpt>Azure 服务总线事件中心 — EventProcessorHost NuGet 程序包<ept id="p1">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>并添加对该程序包的引用，包括其所有依赖项。</source>
          <target state="new">这样，便会下载、安装 <bpt id="p1">[</bpt>Azure 服务总线事件中心 — EventProcessorHost NuGet 程序包<ept id="p1">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>并添加对该程序包的引用，包括其所有依赖项。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>右键单击 <bpt id="p1">**</bpt>Receiver<ept id="p1">**</ept> 项目，单击“添加”，然后单击“类”。将新类命名为 <bpt id="p2">**</bpt>SimpleEventProcessor<ept id="p2">**</ept>，然后单击“确定”以创建该类。</source>
          <target state="new">右键单击 <bpt id="p1">**</bpt>Receiver<ept id="p1">**</ept> 项目，单击“添加”，然后单击“类”。将新类命名为 <bpt id="p2">**</bpt>SimpleEventProcessor<ept id="p2">**</ept>，然后单击“确定”以创建该类。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在 SimpleEventProcessor.cs 文件的顶部添加以下语句：</source>
          <target state="new">在 SimpleEventProcessor.cs 文件的顶部添加以下语句：</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>然后，用以下代码替换该类的正文：</source>
          <target state="new">然后，用以下代码替换该类的正文：</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Then, substitute the following code for the body of the class:</source>
          <target state="new">Then, substitute the following code for the body of the class:</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>此类将由 <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> 调用，以处理从事件中心接收的事件。请注意，<ph id="ph1">`SimpleEventProcessor`</ph> 类使用秒表以定期对 <bpt id="p2">**</bpt>EventProcessorHost<ept id="p2">**</ept> 上下文调用检查点方法。这将确保接收方重新启动时将会丢失的处理工作不会超过五分钟。</source>
          <target state="new">此类将由 <bpt id="p1">**</bpt>EventProcessorHost<ept id="p1">**</ept> 调用，以处理从事件中心接收的事件。请注意，<ph id="ph1">`SimpleEventProcessor`</ph> 类使用秒表以定期对 <bpt id="p2">**</bpt>EventProcessorHost<ept id="p2">**</ept> 上下文调用检查点方法。这将确保接收方重新启动时将会丢失的处理工作不会超过五分钟。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>在文件顶部的 <bpt id="p1">**</bpt>Program<ept id="p1">**</ept> 类中，添加以下 <ph id="ph1">`using`</ph> 语句：</source>
          <target state="new">在文件顶部的 <bpt id="p1">**</bpt>Program<ept id="p1">**</ept> 类中，添加以下 <ph id="ph1">`using`</ph> 语句：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>然后，按如下所示在 <ph id="ph1">`Program`</ph> 类中修改 <ph id="ph2">`Main`</ph> 方法，并替换事件中心名称和连接字符串，以及存储帐户和你在前面部分中复制的密钥：</source>
          <target state="new">然后，按如下所示在 <ph id="ph1">`Program`</ph> 类中修改 <ph id="ph2">`Main`</ph> 方法，并替换事件中心名称和连接字符串，以及存储帐户和你在前面部分中复制的密钥：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 本教程使用单个 <bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">][]</ept> 实例。若要增加吞吐量，建议运行多个 <bpt id="p2">[</bpt>EventProcessorHost<ept id="p2">][]</ept> 实例，如<bpt id="p3">[</bpt>扩大事件处理<ept id="p3">][]</ept>示例中所示。在那些情况下，为了对接收到的事件进行负载平衡，各个不同实例会自动相互协调。如果希望多个接收方都各自处理<bpt id="p4">*</bpt>全部<ept id="p4">*</ept>事件，则必须使用 <bpt id="p5">**</bpt>ConsumerGroup<ept id="p5">**</ept> 概念。在从不同计算机中接收事件时，根据部署 <bpt id="p6">[</bpt>EventProcessorHost<ept id="p6">][]</ept> 实例的计算机（或角色）来指定该实例的名称可能会很有用。有关这些主题的详细信息，请参阅<bpt id="p7">[</bpt>事件中心概述<ept id="p7">][]</ept>和<bpt id="p8">[</bpt>事件中心编程指南<ept id="p8">][]</ept>主题。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 本教程使用单个 <bpt id="p1">[</bpt>EventProcessorHost<ept id="p1">][]</ept> 实例。若要增加吞吐量，建议运行多个 <bpt id="p2">[</bpt>EventProcessorHost<ept id="p2">][]</ept> 实例，如<bpt id="p3">[</bpt>扩大事件处理<ept id="p3">][]</ept>示例中所示。在那些情况下，为了对接收到的事件进行负载平衡，各个不同实例会自动相互协调。如果希望多个接收方都各自处理<bpt id="p4">*</bpt>全部<ept id="p4">*</ept>事件，则必须使用 <bpt id="p5">**</bpt>ConsumerGroup<ept id="p5">**</ept> 概念。在从不同计算机中接收事件时，根据部署 <bpt id="p6">[</bpt>EventProcessorHost<ept id="p6">][]</ept> 实例的计算机（或角色）来指定该实例的名称可能会很有用。有关这些主题的详细信息，请参阅<bpt id="p7">[</bpt>事件中心概述<ept id="p7">][]</ept>和<bpt id="p8">[</bpt>事件中心编程指南<ept id="p8">][]</ept>主题。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>