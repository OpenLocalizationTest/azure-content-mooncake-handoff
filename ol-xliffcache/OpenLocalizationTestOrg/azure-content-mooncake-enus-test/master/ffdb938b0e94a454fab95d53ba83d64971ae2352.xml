{
  "nodes": [
    {
      "content": "如何通过 PHP 使用服务总线队列 | Microsoft Azure",
      "pos": [
        28,
        63
      ]
    },
    {
      "content": "了解如何在 Azure 中使用 Service Bus 队列。采用 PHP 编写的代码示例。",
      "pos": [
        83,
        129
      ]
    },
    {
      "content": "如何使用 Service Bus 队列",
      "pos": [
        351,
        370
      ]
    },
    {
      "pos": [
        463,
        596
      ],
      "content": "本指南说明如何使用服务总线队列。示例是用 PHP 编写的并使用了 <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">](/documentation/articles/php-download-sdk)</ept>。涉及的任务包括<bpt id=\"p2\">**</bpt>创建队列<ept id=\"p2\">**</ept>、<bpt id=\"p3\">**</bpt>发送和接收消息<ept id=\"p3\">**</ept>以及<bpt id=\"p4\">**</bpt>删除队列<ept id=\"p4\">**</ept>。"
    },
    {
      "content": "创建 PHP 应用程序",
      "pos": [
        686,
        697
      ]
    },
    {
      "pos": [
        699,
        828
      ],
      "content": "创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用 <bpt id=\"p1\">[</bpt>Azure SDK for PHP<ept id=\"p1\">](/documentation/articles/php-download-sdk)</ept> 中的类。你可以使用任何开发工具或记事本创建应用程序。"
    },
    {
      "pos": [
        832,
        900
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你的 PHP 安装还必须已安装并启用 <bpt id=\"p1\">[</bpt>OpenSSL 扩展<ept id=\"p1\">](http://php.net/openssl)</ept>。"
    },
    {
      "content": "在本指南中，你将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。",
      "pos": [
        902,
        974
      ]
    },
    {
      "content": "获取 Azure 客户端库",
      "pos": [
        979,
        992
      ]
    },
    {
      "content": "配置应用程序以使用 Service Bus",
      "pos": [
        1074,
        1095
      ]
    },
    {
      "content": "若要使用服务总线队列 API，请执行以下操作：",
      "pos": [
        1097,
        1120
      ]
    },
    {
      "pos": [
        1125,
        1176
      ],
      "content": "使用 <bpt id=\"p1\">[</bpt>require_once<ept id=\"p1\">][require_once]</ept> 语句引用 autoloader 文件。"
    },
    {
      "content": "引用可使用的所有类。",
      "pos": [
        1180,
        1190
      ]
    },
    {
      "pos": [
        1192,
        1244
      ],
      "content": "下面的示例演示了如何包括 autoloader 文件并引用 <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> 类。"
    },
    {
      "pos": [
        1248,
        1380
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>本示例（以及本文中的其他示例）假定你已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果你已手动安装这些库或将其作为 PEAR 包安装，则必须引用 <bpt id=\"p1\">**</bpt>WindowsAzure.php<ept id=\"p1\">**</ept> autoloader 文件。"
    },
    {
      "pos": [
        1468,
        1513
      ],
      "content": "在以下示例中，<ph id=\"ph1\">`require_once`</ph> 语句将始终显示，但只会引用执行该示例所需的类。"
    },
    {
      "content": "设置服务总线连接",
      "pos": [
        1518,
        1526
      ]
    },
    {
      "content": "若要实例化服务总线客户端，必须先设置采用以下格式的有效连接字符串：",
      "pos": [
        1528,
        1561
      ]
    },
    {
      "pos": [
        1660,
        1737
      ],
      "content": "其中，<bpt id=\"p1\">**</bpt>Endpoint<ept id=\"p1\">**</ept> 的格式通常为 <ph id=\"ph1\">`https://[yourNamespace].servicebus.chinacloudapi.cn`</ph>。"
    },
    {
      "pos": [
        1739,
        1789
      ],
      "content": "若要创建任何 Azure 服务客户端，必须使用 <bpt id=\"p1\">**</bpt>ServicesBuilder<ept id=\"p1\">**</ept> 类。你可以："
    },
    {
      "content": "将连接字符串直接传递给它。",
      "pos": [
        1793,
        1806
      ]
    },
    {
      "pos": [
        1809,
        1864
      ],
      "content": "使用 <bpt id=\"p1\">**</bpt>CloudConfigurationManager (CCM)<ept id=\"p1\">**</ept> 检查多个外部源以获取连接字符串："
    },
    {
      "content": "默认情况下，它附带了对一个外部源的支持 - 环境变量",
      "pos": [
        1871,
        1897
      ]
    },
    {
      "pos": [
        1904,
        1945
      ],
      "content": "你可以通过扩展 <bpt id=\"p1\">**</bpt>ConnectionStringSource<ept id=\"p1\">**</ept> 类添加新的源"
    },
    {
      "content": "在此处列出的示例中，将直接传递连接字符串。",
      "pos": [
        1947,
        1968
      ]
    },
    {
      "content": "如何：创建队列",
      "pos": [
        2285,
        2292
      ]
    },
    {
      "pos": [
        2294,
        2449
      ],
      "content": "可通过 <bpt id=\"p1\">**</bpt>ServiceBusRestProxy<ept id=\"p1\">**</ept> 类对服务总线队列执行管理操作。<bpt id=\"p2\">**</bpt>ServiceBusRestProxy<ept id=\"p2\">**</ept> 对象是通过 <bpt id=\"p3\">**</bpt>ServicesBuilder::createServiceBusService<ept id=\"p3\">**</ept> 工厂方法与一个适当的连接字符串（该字符串封装了令牌权限以进行管理）构造的。"
    },
    {
      "pos": [
        2451,
        2574
      ],
      "content": "下面的示例演示了如何实例化 <bpt id=\"p1\">**</bpt>ServiceBusRestProxy<ept id=\"p1\">**</ept> 并调用 <bpt id=\"p2\">**</bpt>servicebusrestproxy-&gt;createqueue<ept id=\"p2\">**</ept> 以创建 <ph id=\"ph1\">`MySBNamespace`</ph> 服务命名空间中名为 <ph id=\"ph2\">`myqueue`</ph> 的队列："
    },
    {
      "pos": [
        3408,
        3490
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>你可以使用 <ph id=\"ph2\">`ServiceBusRestProxy`</ph> 对象上的 <ph id=\"ph3\">`listQueues`</ph> 方法检查队列是否在服务命名空间中已存在指定名称。"
    },
    {
      "content": "如何：向队列发送消息",
      "pos": [
        3495,
        3505
      ]
    },
    {
      "pos": [
        3507,
        3634
      ],
      "content": "若要将消息发送到服务总线队列，应用程序应调用 <bpt id=\"p1\">**</bpt>servicebusrestproxy-&gt;sendqueuemessage<ept id=\"p1\">**</ept> 方法。下面的代码演示了如何将消息发送到在 <ph id=\"ph1\">`MySBNamespace`</ph> 服务命名空间先前创建的 <ph id=\"ph2\">`myqueue`</ph> 队列。"
    },
    {
      "pos": [
        4545,
        4727
      ],
      "content": "发送至服务总线队列（和接收自服务总线队列）的消息是 <bpt id=\"p1\">**</bpt>BrokeredMessage<ept id=\"p1\">**</ept> 类实例。<bpt id=\"p2\">**</bpt>BrokeredMessage<ept id=\"p2\">**</ept> 对象具有一组标准方法（例如 <bpt id=\"p3\">**</bpt>getLabel<ept id=\"p3\">**</ept>、<bpt id=\"p4\">**</bpt>getTimeToLive<ept id=\"p4\">**</ept>、<bpt id=\"p5\">**</bpt>setLabel<ept id=\"p5\">**</ept> 和 <bpt id=\"p6\">**</bpt>setTimeToLive<ept id=\"p6\">**</ept>）和用来保存自定义的特定于应用程序的属性和任意应用程序数据正文的属性。"
    },
    {
      "content": "Service Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。队列大小的上限为 5 GB。",
      "pos": [
        4729,
        4830
      ]
    },
    {
      "content": "如何从队列接收消息",
      "pos": [
        4835,
        4844
      ]
    },
    {
      "pos": [
        4846,
        4965
      ],
      "content": "从队列接收消息的最佳方法是使用 <bpt id=\"p1\">**</bpt>servicebusrestproxy-&gt;receivequeuemessage<ept id=\"p1\">**</ept> 方法。可以采用两种不同的模式接收消息：<bpt id=\"p2\">**</bpt>ReceiveAndDelete<ept id=\"p2\">**</ept>（默认）和 <bpt id=\"p3\">**</bpt>PeekLock<ept id=\"p3\">**</ept>。"
    },
    {
      "pos": [
        4967,
        5216
      ],
      "content": "当使用 <bpt id=\"p1\">**</bpt>ReceiveAndDelete<ept id=\"p1\">**</ept> 模式时，接收是一项单次操作，即，当服务总线接收到队列中某条消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。<bpt id=\"p2\">**</bpt>ReceiveAndDelete<ept id=\"p2\">**</ept> 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。"
    },
    {
      "pos": [
        5218,
        5485
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> 模式下，接收消息会变成一个两阶段操作，这将能够支持不能允许丢失消息的应用程序。当 Service Bus 收到请求时，它会找到要使用的下一个消息，将其锁定以防其他使用方接收它，然后将该消息返回给应用程序。在应用程序处理完消息（或以可靠方式存储消息以供将来处理）后，它通过将收到的消息传送到 <bpt id=\"p2\">**</bpt>ServiceBusRestProxy-&gt;deleteMessage<ept id=\"p2\">**</ept> 来完成接收过程的第二个阶段。当服务总线发现 <bpt id=\"p3\">**</bpt>deleteMessage<ept id=\"p3\">**</ept> 调用时，它会将消息标记为“正在使用”并将其从队列中删除。"
    },
    {
      "pos": [
        5487,
        5529
      ],
      "content": "以下示例演示了如何使用 <bpt id=\"p1\">**</bpt>PeekLock<ept id=\"p1\">**</ept> 模式（非默认模式）接收和处理消息。"
    },
    {
      "content": "如何：处理应用程序崩溃和不可读消息",
      "pos": [
        6918,
        6935
      ]
    },
    {
      "pos": [
        6937,
        7122
      ],
      "content": "Service Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 <bpt id=\"p1\">**</bpt>unlockMessage<ept id=\"p1\">**</ept> 方法（而不是 <bpt id=\"p2\">**</bpt>deleteMessage<ept id=\"p2\">**</ept> 方法）。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。"
    },
    {
      "content": "还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线将自动解锁该消息并使它可再次被接收。",
      "pos": [
        7124,
        7201
      ]
    },
    {
      "pos": [
        7203,
        7406
      ],
      "content": "如果在处理消息之后但在发出 <bpt id=\"p1\">**</bpt>deleteMessage<ept id=\"p1\">**</ept> 请求之前应用程序发生崩溃，该消息将在应用程序重新启动时重新传送给它。此情况通常称作<bpt id=\"p2\">**</bpt>至少处理一次<ept id=\"p2\">**</ept>，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案不允许重复处理，则建议向应用程序添加其他逻辑来处理重复消息传送。通常可使用消息的 <bpt id=\"p3\">**</bpt>getMessageId<ept id=\"p3\">**</ept> 方法实现此操作，这在多个传送尝试中保持不变。"
    },
    {
      "content": "后续步骤",
      "pos": [
        7411,
        7415
      ]
    },
    {
      "pos": [
        7417,
        7459
      ],
      "content": "现在，你已了解服务总线队列的基础知识，请参阅<bpt id=\"p1\">[</bpt>队列、主题和订阅<ept id=\"p1\">][]</ept>以获取更多信息。"
    },
    {
      "pos": [
        7461,
        7500
      ],
      "content": "有关详细信息，请参阅 <bpt id=\"p1\">[</bpt>PHP 开发人员中心<ept id=\"p1\">](/develop/php/)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"如何通过 PHP 使用服务总线队列 | Microsoft Azure\" \n    description=\"了解如何在 Azure 中使用 Service Bus 队列。采用 PHP 编写的代码示例。\" \n    services=\"service-bus\" \n    documentationCenter=\"php\" \n    authors=\"sethmanheim\" \n    manager=\"timlt\" \n    editor=\"\"/>\n\n<tags \n    ms.service=\"service-bus\" \n    ms.date=\"01/26/2016\" \n    wacn.date=\"03/17/2016\"/>\n\n# 如何使用 Service Bus 队列\n\n[AZURE.INCLUDE [service-bus-selector-queues](../includes/service-bus-selector-queues.md)]\n\n本指南说明如何使用服务总线队列。示例是用 PHP 编写的并使用了 [Azure SDK for PHP](/documentation/articles/php-download-sdk)。涉及的任务包括**创建队列**、**发送和接收消息**以及**删除队列**。\n\n[AZURE.INCLUDE [howto-service-bus-queues](../includes/howto-service-bus-queues.md)]\n\n## 创建 PHP 应用程序\n\n创建访问 Azure Blob 服务的 PHP 应用程序的唯一要求是从代码中引用 [Azure SDK for PHP](/documentation/articles/php-download-sdk) 中的类。你可以使用任何开发工具或记事本创建应用程序。\n\n> [AZURE.NOTE]你的 PHP 安装还必须已安装并启用 [OpenSSL 扩展](http://php.net/openssl)。\n\n在本指南中，你将使用服务功能，这些功能可在 PHP 应用程序中本地调用，或通过在 Azure 的 Web 角色、辅助角色或网站中运行的代码调用。\n\n## 获取 Azure 客户端库\n\n[AZURE.INCLUDE [get-client-libraries](../includes/get-client-libraries.md)]\n\n## 配置应用程序以使用 Service Bus\n\n若要使用服务总线队列 API，请执行以下操作：\n\n1. 使用 [require_once][require_once] 语句引用 autoloader 文件。\n2. 引用可使用的所有类。\n\n下面的示例演示了如何包括 autoloader 文件并引用 **ServicesBuilder** 类。\n\n> [AZURE.NOTE]本示例（以及本文中的其他示例）假定你已通过 Composer 安装用于 Azure 的 PHP 客户端库。如果你已手动安装这些库或将其作为 PEAR 包安装，则必须引用 **WindowsAzure.php** autoloader 文件。\n\n    require_once 'vendor\\autoload.php';\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n在以下示例中，`require_once` 语句将始终显示，但只会引用执行该示例所需的类。\n\n## 设置服务总线连接\n\n若要实例化服务总线客户端，必须先设置采用以下格式的有效连接字符串：\n\n    Endpoint=[yourEndpoint];SharedSecretIssuer=[Default Issuer];SharedSecretValue=[Default Key]\n\n其中，**Endpoint** 的格式通常为 `https://[yourNamespace].servicebus.chinacloudapi.cn`。\n\n若要创建任何 Azure 服务客户端，必须使用 **ServicesBuilder** 类。你可以：\n\n* 将连接字符串直接传递给它。\n* 使用 **CloudConfigurationManager (CCM)** 检查多个外部源以获取连接字符串：\n    * 默认情况下，它附带了对一个外部源的支持 - 环境变量\n    * 你可以通过扩展 **ConnectionStringSource** 类添加新的源\n\n在此处列出的示例中，将直接传递连接字符串。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n\n    $connectionString = \"Endpoint=[yourEndpoint];SharedSecretIssuer=[Default Issuer];SharedSecretValue=[Default Key]\";\n\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n\n\n## 如何：创建队列\n\n可通过 **ServiceBusRestProxy** 类对服务总线队列执行管理操作。**ServiceBusRestProxy** 对象是通过 **ServicesBuilder::createServiceBusService** 工厂方法与一个适当的连接字符串（该字符串封装了令牌权限以进行管理）构造的。\n\n下面的示例演示了如何实例化 **ServiceBusRestProxy** 并调用 **servicebusrestproxy->createqueue** 以创建 `MySBNamespace` 服务命名空间中名为 `myqueue` 的队列：\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\QueueInfo;\n\n    // Create Service Bus REST proxy.\n        $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n    \n    try {\n        $queueInfo = new QueueInfo(\"myqueue\");\n        \n        // Create queue.\n        $serviceBusRestProxy->createQueue($queueInfo);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here: \n        // http://msdn.microsoft.com/zh-cn/library/windowsazure/dd179357\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n> [AZURE.NOTE]你可以使用 `ServiceBusRestProxy` 对象上的 `listQueues` 方法检查队列是否在服务命名空间中已存在指定名称。\n\n## 如何：向队列发送消息\n\n若要将消息发送到服务总线队列，应用程序应调用 **servicebusrestproxy->sendqueuemessage** 方法。下面的代码演示了如何将消息发送到在 `MySBNamespace` 服务命名空间先前创建的 `myqueue` 队列。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\BrokeredMessage;\n\n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n        \n    try {\n        // Create message.\n        $message = new BrokeredMessage();\n        $message->setBody(\"my message\");\n    \n        // Send message.\n        $serviceBusRestProxy->sendQueueMessage(\"myqueue\", $message);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here: \n        // http://msdn.microsoft.com/zh-cn/library/windowsazure/hh780775\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n发送至服务总线队列（和接收自服务总线队列）的消息是 **BrokeredMessage** 类实例。**BrokeredMessage** 对象具有一组标准方法（例如 **getLabel**、**getTimeToLive**、**setLabel** 和 **setTimeToLive**）和用来保存自定义的特定于应用程序的属性和任意应用程序数据正文的属性。\n\nService Bus 队列支持最大为 256 KB 的消息（标头最大为 64 KB，其中包括标准和自定义应用程序属性）。一个队列可包含的消息数不受限制，但消息的总大小受限。队列大小的上限为 5 GB。\n\n## 如何从队列接收消息\n\n从队列接收消息的最佳方法是使用 **servicebusrestproxy->receivequeuemessage** 方法。可以采用两种不同的模式接收消息：**ReceiveAndDelete**（默认）和 **PeekLock**。\n\n当使用 **ReceiveAndDelete** 模式时，接收是一项单次操作，即，当服务总线接收到队列中某条消息的读取请求时，它会将该消息标记为“已使用”并将其返回给应用程序。**ReceiveAndDelete** 模式是最简单的模式，最适合应用程序允许出现故障时不处理消息的方案。为了理解这一点，可以考虑这样一种情形：使用方发出接收请求，但在处理该请求前发生了崩溃。由于 Service Bus 会将消息标记为“将使用”，因此当应用程序重启并重新开始使用消息时，它会丢失在发生崩溃前使用的消息。\n\n在 **PeekLock** 模式下，接收消息会变成一个两阶段操作，这将能够支持不能允许丢失消息的应用程序。当 Service Bus 收到请求时，它会找到要使用的下一个消息，将其锁定以防其他使用方接收它，然后将该消息返回给应用程序。在应用程序处理完消息（或以可靠方式存储消息以供将来处理）后，它通过将收到的消息传送到 **ServiceBusRestProxy->deleteMessage** 来完成接收过程的第二个阶段。当服务总线发现 **deleteMessage** 调用时，它会将消息标记为“正在使用”并将其从队列中删除。\n\n以下示例演示了如何使用 **PeekLock** 模式（非默认模式）接收和处理消息。\n\n    require_once 'vendor\\autoload.php';\n\n    use WindowsAzure\\Common\\ServicesBuilder;\n    use WindowsAzure\\Common\\ServiceException;\n    use WindowsAzure\\ServiceBus\\Models\\ReceiveMessageOptions;\n\n    // Create Service Bus REST proxy.\n    $serviceBusRestProxy = ServicesBuilder::getInstance()->createServiceBusService($connectionString);\n        \n    try {\n        // Set the receive mode to PeekLock (default is ReceiveAndDelete).\n        $options = new ReceiveMessageOptions();\n        $options->setPeekLock();\n        \n        // Receive message.\n        $message = $serviceBusRestProxy->receiveQueueMessage(\"myqueue\", $options);\n        echo \"Body: \".$message->getBody().\"<br />\";\n        echo \"MessageID: \".$message->getMessageId().\"<br />\";\n        \n        /*---------------------------\n            Process message here.\n        ----------------------------*/\n        \n        // Delete message. Not necessary if peek lock is not set.\n        echo \"Message deleted.<br />\";\n        $serviceBusRestProxy->deleteMessage($message);\n    }\n    catch(ServiceException $e){\n        // Handle exception based on error codes and messages.\n        // Error codes and messages are here:\n        // http://msdn.microsoft.com/zh-cn/library/windowsazure/hh780735\n        $code = $e->getCode();\n        $error_message = $e->getMessage();\n        echo $code.\": \".$error_message.\"<br />\";\n    }\n\n## 如何：处理应用程序崩溃和不可读消息\n\nService Bus 提供了相关功能来帮助你轻松地从应用程序错误或消息处理问题中恢复。如果接收方应用程序出于某种原因无法处理消息，它可以对收到的消息调用 **unlockMessage** 方法（而不是 **deleteMessage** 方法）。这将导致 Service Bus 解锁队列中的消息并使其能够重新被同一个正在使用的应用程序或其他正在使用的应用程序接收。\n\n还存在与队列中已锁定消息关联的超时，并且如果应用程序无法在锁定超时到期之前处理消息（例如，如果应用程序崩溃），服务总线将自动解锁该消息并使它可再次被接收。\n\n如果在处理消息之后但在发出 **deleteMessage** 请求之前应用程序发生崩溃，该消息将在应用程序重新启动时重新传送给它。此情况通常称作**至少处理一次**，即每条消息将至少被处理一次，但在某些情况下，同一消息可能会被重新传送。如果方案不允许重复处理，则建议向应用程序添加其他逻辑来处理重复消息传送。通常可使用消息的 **getMessageId** 方法实现此操作，这在多个传送尝试中保持不变。\n\n## 后续步骤\n\n现在，你已了解服务总线队列的基础知识，请参阅[队列、主题和订阅][]以获取更多信息。\n\n有关详细信息，请参阅 [PHP 开发人员中心](/develop/php/)。\n\n[队列、主题和订阅]: /documentation/articles/service-bus-queues-topics-subscriptions\n[require_once]: http://php.net/require_once\n\n<!---HONumber=82-->"
}