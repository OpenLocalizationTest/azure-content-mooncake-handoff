<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">465ace0029b3fa41cc99993b71fd4808215f7915</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>教程：使用多租户数据库和 Entity Framework 及行级别安全性的 Web 应用</source>
          <target state="new">教程：使用多租户数据库和 Entity Framework 及行级别安全性的 Web 应用</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何通过 Entity Framework 和行级安全性来开发使用多租户 SQL 数据库后端的 ASP.NET MVC 5 Web 应用。</source>
          <target state="new">了解如何通过 Entity Framework 和行级安全性来开发使用多租户 SQL 数据库后端的 ASP.NET MVC 5 Web 应用。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>教程：使用多租户数据库和 Entity Framework 及行级别安全性的 Web 应用</source>
          <target state="new">教程：使用多租户数据库和 Entity Framework 及行级别安全性的 Web 应用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本教程说明了如何构建多租户 Web 应用，该应用使用“<bpt id="p1">[</bpt>共享数据库，共享架构<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/aa479086.aspx)</ept>”租户模型，并使用 Entity Framework 和<bpt id="p2">[</bpt>行级别安全性<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/dn765131.aspx)</ept>。在此模型中，单个数据库包含多个租户的数据，每个表中的每一行都与“租户 ID”相关联。 行级别安全性 (RLS) 是 Azure SQL 数据库的新功能，用于防止租户访问彼此的数据。该功能只需对应用程序进行单个的小改动。通过将租户访问逻辑集中于数据库本身，RLS 简化了应用程序代码，降低了租户之间发生意外数据泄露的风险。</source>
          <target state="new">本教程说明了如何构建多租户 Web 应用，该应用使用“<bpt id="p1">[</bpt>共享数据库，共享架构<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/aa479086.aspx)</ept>”租户模型，并使用 Entity Framework 和<bpt id="p2">[</bpt>行级别安全性<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/dn765131.aspx)</ept>。在此模型中，单个数据库包含多个租户的数据，每个表中的每一行都与“租户 ID”相关联。 行级别安全性 (RLS) 是 Azure SQL 数据库的新功能，用于防止租户访问彼此的数据。该功能只需对应用程序进行单个的小改动。通过将租户访问逻辑集中于数据库本身，RLS 简化了应用程序代码，降低了租户之间发生意外数据泄露的风险。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>让我们先看看<bpt id="p1">[</bpt>通过身份验证和 SQL 数据库创建 ASP.NET MVP 应用并将其部署到 Azure Web 应用<ept id="p1">](/documentation/articles/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database)</ept>中一个简单的联系人管理器应用程序。该应用程序现在允许所有用户（租户）查看所有联系人：</source>
          <target state="new">让我们先看看<bpt id="p1">[</bpt>通过身份验证和 SQL 数据库创建 ASP.NET MVP 应用并将其部署到 Azure Web 应用<ept id="p1">](/documentation/articles/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database)</ept>中一个简单的联系人管理器应用程序。该应用程序现在允许所有用户（租户）查看所有联系人：</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>尚未启用 RLS 的联系人管理器应用程序</source>
          <target state="new">尚未启用 RLS 的联系人管理器应用程序</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>只需进行一些很小的改动，我们就可以增加对多租户的支持，让用户只能查看属于自己的联系人。</source>
          <target state="new">只需进行一些很小的改动，我们就可以增加对多租户的支持，让用户只能查看属于自己的联系人。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>步骤 1：在应用程序中添加一个侦听器类，以便设置 SESSION\_CONTEXT</source>
          <target state="new">步骤 1：在应用程序中添加一个侦听器类，以便设置 SESSION\_CONTEXT</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>需要进行一项应用程序更改。由于所有应用程序用户都使用相同的连接字符串（即相同的 SQL 登录名）来连接到数据库，因此目前的 RLS 策略并不知道应该针对哪个用户进行筛选。这种方法在 Web 应用程序中很常见，因为它可以确保连接池的高效率，但也意味着我们需要使用其他方法来标识当前正在数据库中的应用程序用户。解决方法是让应用程序在打开连接之后、执行任何查询之前，先在 <bpt id="p1">[</bpt>SESSION\_CONTEXT<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/mt590806)</ept> 中针对当前的 UserId 设置一个键-值对。SESSION\_CONTEXT 是一个会话范围的键/值存储空间，我们的 RLS 策略将使用存储在该空间的 UserId 来标识当前用户。</source>
          <target state="new">需要进行一项应用程序更改。由于所有应用程序用户都使用相同的连接字符串（即相同的 SQL 登录名）来连接到数据库，因此目前的 RLS 策略并不知道应该针对哪个用户进行筛选。这种方法在 Web 应用程序中很常见，因为它可以确保连接池的高效率，但也意味着我们需要使用其他方法来标识当前正在数据库中的应用程序用户。解决方法是让应用程序在打开连接之后、执行任何查询之前，先在 <bpt id="p1">[</bpt>SESSION\_CONTEXT<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/mt590806)</ept> 中针对当前的 UserId 设置一个键-值对。SESSION\_CONTEXT 是一个会话范围的键/值存储空间，我们的 RLS 策略将使用存储在该空间的 UserId 来标识当前用户。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>我们将添加一个<bpt id="p1">[</bpt>拦截器<ept id="p1">](https://msdn.microsoft.com/data/dn469464.aspx)</ept>（具体而言，为 <bpt id="p2">[</bpt>DbConnectionInterceptor<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/system.data.entity.infrastructure.interception.idbconnectioninterceptor)</ept>，这是 Entity Framework (EF) 6 中的新功能），以便每当 EF 打开连接时，通过执行一个 T-SQL 语句在 SESSION\_CONTEXT 中自动设置当前 UserId。</source>
          <target state="new">我们将添加一个<bpt id="p1">[</bpt>拦截器<ept id="p1">](https://msdn.microsoft.com/data/dn469464.aspx)</ept>（具体而言，为 <bpt id="p2">[</bpt>DbConnectionInterceptor<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/system.data.entity.infrastructure.interception.idbconnectioninterceptor)</ept>，这是 Entity Framework (EF) 6 中的新功能），以便每当 EF 打开连接时，通过执行一个 T-SQL 语句在 SESSION\_CONTEXT 中自动设置当前 UserId。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中打开 ContactManager 项目。</source>
          <target state="new">在 Visual Studio 中打开 ContactManager 项目。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>右键单击解决方案资源管理器中的 Models 文件夹，然后选择“添加”&gt;“类”。</source>
          <target state="new">右键单击解决方案资源管理器中的 Models 文件夹，然后选择“添加”&gt;“类”。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>将新类命名为“SessionContextInterceptor.cs”，然后单击“添加”。</source>
          <target state="new">将新类命名为“SessionContextInterceptor.cs”，然后单击“添加”。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>将 SessionContextInterceptor.cs 的内容替换为以下代码。</source>
          <target state="new">将 SessionContextInterceptor.cs 的内容替换为以下代码。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>只需对应用程序进行这样的更改。继续操作，构建并发布应用程序。</source>
          <target state="new">只需对应用程序进行这样的更改。继续操作，构建并发布应用程序。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>步骤 2：将 UserId 列添加到数据库架构</source>
          <target state="new">步骤 2：将 UserId 列添加到数据库架构</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>接下来，我们需要将 UserId 列添加到 Contacts 表，以便将每一行与用户（租户）相关联。我们会直接在数据库中更改架构，这样就不需要在 EF 数据模型中包括该字段。</source>
          <target state="new">接下来，我们需要将 UserId 列添加到 Contacts 表，以便将每一行与用户（租户）相关联。我们会直接在数据库中更改架构，这样就不需要在 EF 数据模型中包括该字段。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>使用 SQL Server Management Studio 或 Visual Studio 直接连接到数据库，然后执行以下 T-SQL：</source>
          <target state="new">使用 SQL Server Management Studio 或 Visual Studio 直接连接到数据库，然后执行以下 T-SQL：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>此时会将 UserId 列添加到 Contacts 表。我们使用与 AspNetUsers 表中存储的 UserId 相匹配的 nvarchar(128) 数据类型，同时创建一个 DEFAULT 约束条件，以便自动将新插入行的 UserId 设置为当前存储在 SESSION\_CONTEXT 中的 UserId。</source>
          <target state="new">此时会将 UserId 列添加到 Contacts 表。我们使用与 AspNetUsers 表中存储的 UserId 相匹配的 nvarchar(128) 数据类型，同时创建一个 DEFAULT 约束条件，以便自动将新插入行的 UserId 设置为当前存储在 SESSION\_CONTEXT 中的 UserId。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>现在，该表将如下所示：</source>
          <target state="new">现在，该表将如下所示：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>SSMS Contacts 表</source>
          <target state="new">SSMS Contacts 表</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>当创建新的联系人时，系统会自动向其分配正确的 UserId。不过，为了演示方便，我们可以将一部分现有的联系人分配给现有的用户。</source>
          <target state="new">当创建新的联系人时，系统会自动向其分配正确的 UserId。不过，为了演示方便，我们可以将一部分现有的联系人分配给现有的用户。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>如果你已在应用程序中创建了一些用户（例如，使用本地帐户进行创建），则会在 AspNetUsers 表中看到这些用户。在下面的屏幕快照中，目前只有一个用户。</source>
          <target state="new">如果你已在应用程序中创建了一些用户（例如，使用本地帐户进行创建），则会在 AspNetUsers 表中看到这些用户。在下面的屏幕快照中，目前只有一个用户。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>SSMS AspNetUsers 表</source>
          <target state="new">SSMS AspNetUsers 表</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>复制 user1@contoso.com 的 ID，将其粘贴到下面的 T-SQL 语句中。执行该语句，将 3 个联系人与此 UserId 相关联。</source>
          <target state="new">复制 user1@contoso.com 的 ID，将其粘贴到下面的 T-SQL 语句中。执行该语句，将 3 个联系人与此 UserId 相关联。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>步骤 3：在数据库中创建行级安全性策略</source>
          <target state="new">步骤 3：在数据库中创建行级安全性策略</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>最后一步是创建一个安全策略，以便使用 SESSION\_CONTEXT 中的 UserId 自动筛选查询返回的结果。</source>
          <target state="new">最后一步是创建一个安全策略，以便使用 SESSION\_CONTEXT 中的 UserId 自动筛选查询返回的结果。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>在仍然连接到数据库的情况下，执行以下 T-SQL：</source>
          <target state="new">在仍然连接到数据库的情况下，执行以下 T-SQL：</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>此代码执行三项操作。首先，它会根据最佳实践创建一个新的架构，以便对 RLS 对象的访问权限进行集中管理和限制。接下来，它会创建一个谓词函数，该函数会在行的 UserId 与 SESSION\_CONTEXT 中的 UserId 相匹配时返回“1”。最后，它会创建一项安全策略，以便将此函数添加为 Contacts 表的筛选谓词和阻塞谓词。筛选谓词迫使查询仅返回属于当前用户的行，阻塞谓词则充当保护角色，防止应用程序意外插入错误用户的行。</source>
          <target state="new">此代码执行三项操作。首先，它会根据最佳实践创建一个新的架构，以便对 RLS 对象的访问权限进行集中管理和限制。接下来，它会创建一个谓词函数，该函数会在行的 UserId 与 SESSION\_CONTEXT 中的 UserId 相匹配时返回“1”。最后，它会创建一项安全策略，以便将此函数添加为 Contacts 表的筛选谓词和阻塞谓词。筛选谓词迫使查询仅返回属于当前用户的行，阻塞谓词则充当保护角色，防止应用程序意外插入错误用户的行。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>现在请运行该应用程序，然后以 user1@contoso.com 身份登录。此用户现在只能看到我们此前分配给该 UserId 的联系人：</source>
          <target state="new">现在请运行该应用程序，然后以 user1@contoso.com 身份登录。此用户现在只能看到我们此前分配给该 UserId 的联系人：</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>尚未启用 RLS 的联系人管理器应用程序</source>
          <target state="new">尚未启用 RLS 的联系人管理器应用程序</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>若要进一步验证这一点，请尝试注册一个新用户。新用户将看不到任何联系人，因为尚未向新用户分配任何联系人。如果新用户创建了一个新的联系人，系统会将该联系人分配给新用户，并且只有此新用户才能看到该联系人。</source>
          <target state="new">若要进一步验证这一点，请尝试注册一个新用户。新用户将看不到任何联系人，因为尚未向新用户分配任何联系人。如果新用户创建了一个新的联系人，系统会将该联系人分配给新用户，并且只有此新用户才能看到该联系人。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>就这么简单！ 简单的联系人管理器 Web 应用已变成一个多租户应用，其中的每个用户都有自己的联系人列表。使用行级安全性以后，就不必在应用程序代码中强制实施租户访问逻辑，从而避免了各种复杂操作。这种透明性使得应用程序可以专注于处理现实中存在的业务问题，还可以降低随着应用程序的代码库增长而发生数据意外泄漏的风险。</source>
          <target state="new">就这么简单！ 简单的联系人管理器 Web 应用已变成一个多租户应用，其中的每个用户都有自己的联系人列表。使用行级安全性以后，就不必在应用程序代码中强制实施租户访问逻辑，从而避免了各种复杂操作。这种透明性使得应用程序可以专注于处理现实中存在的业务问题，还可以降低随着应用程序的代码库增长而发生数据意外泄漏的风险。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>本教程仅概要介绍了可以通过 RLS 执行的各种操作。例如，可以创建更完善或更细致的访问逻辑，还可以在 SESSION\_CONTEXT 中存储除当前 UserId 之外的其他内容。还可以<bpt id="p1">[</bpt>将 RLS 与弹性数据库工具客户端库相集成<ept id="p1">](/documentation/articles/sql-database-elastic-tools-multi-tenant-row-level-security)</ept>，以便在扩展型数据层中启用多租户分片。</source>
          <target state="new">本教程仅概要介绍了可以通过 RLS 执行的各种操作。例如，可以创建更完善或更细致的访问逻辑，还可以在 SESSION\_CONTEXT 中存储除当前 UserId 之外的其他内容。还可以<bpt id="p1">[</bpt>将 RLS 与弹性数据库工具客户端库相集成<ept id="p1">](/documentation/articles/sql-database-elastic-tools-multi-tenant-row-level-security)</ept>，以便在扩展型数据层中启用多租户分片。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>除了提供这些可能的操作，我们还致力于改进 RLS 的功能。如果你有任何问题、想法或者希望看到我们推出特定的功能，请在评论中指出。我们非常感谢你的反馈！</source>
          <target state="new">除了提供这些可能的操作，我们还致力于改进 RLS 的功能。如果你有任何问题、想法或者希望看到我们推出特定的功能，请在评论中指出。我们非常感谢你的反馈！</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>