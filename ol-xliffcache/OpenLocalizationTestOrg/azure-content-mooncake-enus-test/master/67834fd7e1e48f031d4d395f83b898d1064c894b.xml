{
  "nodes": [
    {
      "content": "将自定义 Java Web 应用上载到 Azure",
      "pos": [
        28,
        53
      ]
    },
    {
      "content": "本教程介绍了如何将自定义 Java Web 应用上载到 Azure Web 应用。",
      "pos": [
        73,
        114
      ]
    },
    {
      "content": "将自定义 Java Web 应用上载到 Azure",
      "pos": [
        345,
        370
      ]
    },
    {
      "content": "本主题介绍了如何将自定义 Java Web 应用上载到 Azure。包括适用于 Java Web 应用的信息以及特定应用程序的示例。",
      "pos": [
        372,
        438
      ]
    },
    {
      "pos": [
        440,
        598
      ],
      "content": "请注意，Azure 提供了一种使用 Azure 门户配置 UI 创建 Java Web 应用的方法，如 <bpt id=\"p1\">[</bpt>Azure Web 应用和 Java 入门<ept id=\"p1\">](/documentation/articles/web-sites-java-get-started)</ept>中所述。此教程适用于无需使用 Azure 配置 UI 的方案。"
    },
    {
      "content": "配置指南",
      "pos": [
        603,
        607
      ]
    },
    {
      "content": "下面描述了 Azure 上的自定义 Java Web 应用所需的设置。",
      "pos": [
        609,
        644
      ]
    },
    {
      "pos": [
        648,
        710
      ],
      "content": "Java 进程使用的 HTTP 端口是动态分配的。该进程必须使用环境变量 <ph id=\"ph1\">`HTTP_PLATFORM_PORT`</ph> 的端口。"
    },
    {
      "content": "除单个 HTTP 侦听程序以外的所有其他侦听端口都应禁用。在 Tomcat 中，这些端口包括 Shutdown、HTTPS 和 AJP 端口。",
      "pos": [
        713,
        784
      ]
    },
    {
      "content": "容器仅应针对 IPv4 流量进行配置。",
      "pos": [
        787,
        806
      ]
    },
    {
      "pos": [
        809,
        838
      ],
      "content": "需要在配置中设置应用程序的 <bpt id=\"p1\">**</bpt>startup<ept id=\"p1\">**</ept> 命令。"
    },
    {
      "pos": [
        841,
        918
      ],
      "content": "需要目录具有写入权限的应用程序应位于 Azure Web 应用的内容目录中，即 <bpt id=\"p1\">**</bpt>D:\\\\home<ept id=\"p1\">**</ept>。环境变量 <ph id=\"ph1\">`HOME`</ph> 引用 D:\\\\home。"
    },
    {
      "content": "您可以在 web.config 文件中根据需要设置环境变量。",
      "pos": [
        922,
        952
      ]
    },
    {
      "content": "web.config httpPlatform 配置",
      "pos": [
        957,
        983
      ]
    },
    {
      "pos": [
        985,
        1027
      ],
      "content": "以下信息介绍了 web.config 中 <bpt id=\"p1\">**</bpt>httpPlatform<ept id=\"p1\">**</ept> 的格式。"
    },
    {
      "pos": [
        1062,
        1118
      ],
      "content": "<bpt id=\"p1\">**</bpt>arguments<ept id=\"p1\">**</ept>（默认值=\"\"）。<bpt id=\"p2\">**</bpt>processPath<ept id=\"p2\">**</ept> 设置中指定的可执行文件或脚本的参数。"
    },
    {
      "pos": [
        1120,
        1147
      ],
      "content": "示例（所示示例包含 <bpt id=\"p1\">**</bpt>processPath<ept id=\"p1\">**</ept>）："
    },
    {
      "pos": [
        1523,
        1569
      ],
      "content": "<bpt id=\"p1\">**</bpt>processPath<ept id=\"p1\">**</ept> - 启动侦听 HTTP 请求的进程的可执行文件或脚本的路径。"
    },
    {
      "content": "示例:",
      "pos": [
        1571,
        1574
      ]
    },
    {
      "pos": [
        1841,
        1964
      ],
      "content": "<bpt id=\"p1\">**</bpt>rapidFailsPerMinute<ept id=\"p1\">**</ept>（默认值=10） 允许 <bpt id=\"p2\">**</bpt>processPath<ept id=\"p2\">**</ept> 中指定的进程每分钟崩溃的次数。如果超出了此限制，则每分钟达到此限制后的剩余时间 <bpt id=\"p3\">**</bpt>HttpPlatformHandler<ept id=\"p3\">**</ept> 将停止启动进程。"
    },
    {
      "pos": [
        2002,
        2100
      ],
      "content": "<bpt id=\"p1\">**</bpt>requestTimeout<ept id=\"p1\">**</ept>（默认值=\"00:02:00\"） <bpt id=\"p2\">**</bpt>HttpPlatformHandler<ept id=\"p2\">**</ept> 等待侦听 <ph id=\"ph1\">`%HTTP_PLATFORM_PORT%`</ph> 的进程响应的持续时间。"
    },
    {
      "pos": [
        2102,
        2219
      ],
      "content": "<bpt id=\"p1\">**</bpt>startupRetryCount<ept id=\"p1\">**</ept>（默认值=10） <bpt id=\"p2\">**</bpt>HttpPlatformHandler<ept id=\"p2\">**</ept> 尝试启动 <bpt id=\"p3\">**</bpt>processPath<ept id=\"p3\">**</ept> 中指定的进程的次数。有关详细信息，请参阅 <bpt id=\"p4\">**</bpt>startupTimeLimit<ept id=\"p4\">**</ept>。"
    },
    {
      "pos": [
        2221,
        2375
      ],
      "content": "<bpt id=\"p1\">**</bpt>startupTimeLimit<ept id=\"p1\">**</ept>（默认值=10 秒） <bpt id=\"p2\">**</bpt>HttpPlatformHandler<ept id=\"p2\">**</ept> 等待可执行文件/脚本启动侦听端口的进程的持续时间。如果超出了此时间限制，<bpt id=\"p3\">**</bpt>HttpPlatformHandler<ept id=\"p3\">**</ept> 将终止进程，然后尝试重新启动 <bpt id=\"p4\">**</bpt>startupRetryCount<ept id=\"p4\">**</ept> 次。"
    },
    {
      "pos": [
        2463,
        2612
      ],
      "content": "<bpt id=\"p1\">**</bpt>stdoutLogEnabled<ept id=\"p1\">**</ept>（默认值=\"true\"） 如果为 true，<bpt id=\"p2\">**</bpt>processPath<ept id=\"p2\">**</ept> 设置中指定地进程的 <bpt id=\"p3\">**</bpt>stdout<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>stderr<ept id=\"p4\">**</ept> 将重定向到 <bpt id=\"p5\">**</bpt>stdoutLogFile<ept id=\"p5\">**</ept> 中指定地文件（请参阅 <bpt id=\"p6\">**</bpt>stdoutLogFile<ept id=\"p6\">**</ept> 部分）。"
    },
    {
      "pos": [
        2650,
        2777
      ],
      "content": "<bpt id=\"p1\">**</bpt>stdoutLogFile<ept id=\"p1\">**</ept>（默认值=\"d:\\\\home\\\\LogFiles\\\\httpPlatformStdout.log\"） 记录 <bpt id=\"p2\">**</bpt>processPath<ept id=\"p2\">**</ept> 中指定的进程的 <bpt id=\"p3\">**</bpt>stdout<ept id=\"p3\">**</ept> 和 <bpt id=\"p4\">**</bpt>stderr<ept id=\"p4\">**</ept> 的绝对文件路径。"
    },
    {
      "pos": [
        2817,
        3009
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph><ph id=\"ph2\">`%HTTP_PLATFORM_PORT%`</ph> 是一个特殊的占位符，需要指定为 <bpt id=\"p1\">**</bpt>arguments<ept id=\"p1\">**</ept> 的一部分或 <bpt id=\"p2\">**</bpt>httpPlatform<ept id=\"p2\">**</ept> <bpt id=\"p3\">**</bpt>environmentVariables<ept id=\"p3\">**</ept> 列表的一部分。其将会被替换为 <bpt id=\"p4\">**</bpt>HttpPlatformHandler<ept id=\"p4\">**</ept> 内部生成的端口，以便 <bpt id=\"p5\">**</bpt>processPath<ept id=\"p5\">**</ept> 指定的进程可以侦听此端口。"
    },
    {
      "content": "部署",
      "pos": [
        3014,
        3016
      ]
    },
    {
      "content": "可以通过基于 Internet Information Services (IIS) 的 Web 应用所用的方法轻松地部署基于 Java 的 Web 应用。FTP 和 Git 都是支持的部署机制，和 Web 应用集成的 SCM 功能一样。WebDeploy 可充当协议，但由于 Java 不是在 Visual Studio 中开发的，因此 WebDeploy 不适用于 Java Web 应用部署使用案例。",
      "pos": [
        3018,
        3221
      ]
    },
    {
      "content": "应用程序配置示例",
      "pos": [
        3226,
        3234
      ]
    },
    {
      "content": "对于以下应用程序，提供了 web.config 文件和应用程序配置作为示例，用以说明如何在 Azure Web 应用上启用 Java 应用程序。",
      "pos": [
        3236,
        3308
      ]
    },
    {
      "content": "Tomcat",
      "pos": [
        3314,
        3320
      ]
    },
    {
      "content": "尽管 Azure Web 应用提供了两个 Tomcat 变体，但仍可以上载客户特定的实例。使用不同的 JVM 安装 Tomcat 的示例如下。",
      "pos": [
        3321,
        3392
      ]
    },
    {
      "content": "对于 Tomcat，需要更改少量配置。需要编辑 Server.xml 并进行如下设置：",
      "pos": [
        4344,
        4387
      ]
    },
    {
      "content": "Shutdown 端口 = -1",
      "pos": [
        4393,
        4409
      ]
    },
    {
      "content": "HTTP 连接器端口 = ${port.http}",
      "pos": [
        4414,
        4439
      ]
    },
    {
      "content": "HTTP 连接器地址 = \"127.0.0.1\"",
      "pos": [
        4444,
        4468
      ]
    },
    {
      "content": "注释掉 HTTPS 和 AJP 连接器",
      "pos": [
        4473,
        4492
      ]
    },
    {
      "pos": [
        4497,
        4575
      ],
      "content": "也可以在 catalina.properties 文件中设置 IPv4 设置，并在其中添加 <ph id=\"ph1\">`java.net.preferIPv4Stack=true`</ph>。"
    },
    {
      "pos": [
        4581,
        4669
      ],
      "content": "Azure Web 应用上不支持 Direct3d 调用。若要禁用这些调用，添加以下 Java 选项使你的应用程序进行以下调用：<ph id=\"ph1\">`-Dsun.java2d.d3d=false`</ph>"
    },
    {
      "content": "Jetty",
      "pos": [
        4675,
        4680
      ]
    },
    {
      "content": "和 Tomcat 一样，客户可以上载其自己的 Jetty 实例。对于运行 Jetty 完整安装，配置应如下所示：",
      "pos": [
        4682,
        4738
      ]
    },
    {
      "pos": [
        5469,
        5530
      ],
      "content": "应在 start.ini 中更改 Jetty 配置并设置 <ph id=\"ph1\">`java.net.preferIPv4Stack=true`</ph>。"
    },
    {
      "content": "Hudson",
      "pos": [
        5536,
        5542
      ]
    },
    {
      "pos": [
        5544,
        5667
      ],
      "content": "我们的测试使用 Hudson 3.1.2 war 和默认 Tomcat 7.0.50 实例，但没有使用 UI 来进行设置。由于 Hudson 为软件构建工具，因此建议将其安装在可在 Web 应用上设置 <bpt id=\"p1\">**</bpt>AlwaysOn<ept id=\"p1\">**</ept> 标志的专用实例上。"
    },
    {
      "pos": [
        5672,
        5800
      ],
      "content": "在 Web 应用的站点根目录（即 <bpt id=\"p1\">**</bpt>d:\\\\home\\\\site\\\\wwwroot<ept id=\"p1\">**</ept>）中创建 <bpt id=\"p2\">**</bpt>webapps<ept id=\"p2\">**</ept> 目录（如果尚不存在），并将 Hudson.war 放在 <bpt id=\"p3\">**</bpt>d:\\\\home\\\\site\\\\wwwroot\\\\webapps<ept id=\"p3\">**</ept> 中。"
    },
    {
      "pos": [
        5804,
        5875
      ],
      "content": "下载 Apache Maven 3.0.5（与 Hudson 兼容），并将其放在 <bpt id=\"p1\">**</bpt>d:\\\\home\\\\site\\\\wwwroot<ept id=\"p1\">**</ept> 中。"
    },
    {
      "pos": [
        5879,
        5935
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>d:\\\\home\\\\site\\\\wwwroot<ept id=\"p1\">**</ept> 中创建 web.config，并在其中粘贴以下内容："
    },
    {
      "content": "此时可以重新启动 Web 应用，使所做的更改生效。连接到 http://yourwebapp/hudson 以启动 Hudson。",
      "pos": [
        6804,
        6869
      ]
    },
    {
      "content": "Hudson 对自身进行配置后，您将看到以下屏幕：",
      "pos": [
        6874,
        6899
      ]
    },
    {
      "content": "Hudson",
      "pos": [
        6907,
        6913
      ]
    },
    {
      "content": "访问 Hudson 配置页：单击“管理 Hudson”，然后单击“配置系统”。",
      "pos": [
        6973,
        7012
      ]
    },
    {
      "content": "如下所示配置 JDK：",
      "pos": [
        7016,
        7027
      ]
    },
    {
      "content": "Hudson 配置",
      "pos": [
        7035,
        7044
      ]
    },
    {
      "content": "如下所示配置 Maven：",
      "pos": [
        7100,
        7113
      ]
    },
    {
      "content": "Maven 配置",
      "pos": [
        7121,
        7129
      ]
    },
    {
      "content": "保存设置。Hudson 现在即已配置好，并可供使用。",
      "pos": [
        7183,
        7209
      ]
    },
    {
      "pos": [
        7211,
        7276
      ],
      "content": "有关 Hudson 的更多信息，请参阅 <bpt id=\"p1\">[</bpt>http://hudson-ci.org<ept id=\"p1\">](http://hudson-ci.org)</ept>。"
    },
    {
      "content": "Liferay",
      "pos": [
        7282,
        7289
      ]
    },
    {
      "content": "Azure Web 应用支持 Liferay。由于 Liferay 可能需要大量内存，因此站点需要在可以提供足够内存的中型或大型专用工作机上运行。Liferay 也需要花数分钟才能启动。鉴于上述原因，建议你将站点设置为“始终打开”。",
      "pos": [
        7291,
        7407
      ]
    },
    {
      "content": "使用与 Tomcat 捆绑的 Liferay 6.1.2 Community Edition GA3 时，下载 Liferay 后将编辑以下文件：",
      "pos": [
        7409,
        7482
      ]
    },
    {
      "content": "Server.xml",
      "pos": [
        7486,
        7496
      ]
    },
    {
      "content": "将 Shutdown 端口更改为 -1。",
      "pos": [
        7502,
        7522
      ]
    },
    {
      "pos": [
        7525,
        7661
      ],
      "content": "将 HTTP 连接器更改为 <ph id=\"ph1\">`&lt;Connector port=\"${port.http}\" protocol=\"HTTP/1.1\" connectionTimeout=\"600000\" address=\"127.0.0.1\" URIEncoding=\"UTF-8\" /&gt;`</ph>"
    },
    {
      "content": "注释掉 AJP 连接器。",
      "pos": [
        7664,
        7676
      ]
    },
    {
      "pos": [
        7678,
        7792
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>liferay\\\\tomcat-7.0.40\\\\webapps\\\\ROOT\\\\WEB-INF\\\\classes<ept id=\"p1\">**</ept> 文件夹中，创建文件 <bpt id=\"p2\">**</bpt>portal-ext.properties<ept id=\"p2\">**</ept>。此文件应包含一行如下所示的内容："
    },
    {
      "pos": [
        7840,
        7895
      ],
      "content": "在 tomcat-7.0.40 文件夹所在的目录级别中，创建包含以下内容的文件 <bpt id=\"p1\">**</bpt>web.config<ept id=\"p1\">**</ept>："
    },
    {
      "pos": [
        8927,
        9074
      ],
      "content": "在 <bpt id=\"p1\">**</bpt>httpPlatform<ept id=\"p1\">**</ept> 块中，将 <bpt id=\"p2\">**</bpt>requestTimeout<ept id=\"p2\">**</ept> 设置为“00:10:00”。此时间可以减少，但随后在引导 Liferay 时您可能会看到超时错误。如果更改此值，也应该修改 tomcat server.xml 中的<bpt id=\"p3\">**</bpt>connectionTimeout<ept id=\"p3\">**</ept>。"
    },
    {
      "content": "值得注意的是，JRE\\_HOME 环境变量将在上述 web.config 中指定为指向 64 位 JDK。默认为 32 位，但由于 Liferay 可能需要大量内存，因此建议使用 64 位 JDK。",
      "pos": [
        9076,
        9175
      ]
    },
    {
      "content": "做完上述更改后，重新启动运行 Liferay 的 Web 应用，然后打开 http://yourwebapp。可从 Web 应用根目录访问 Liferay 门户。",
      "pos": [
        9177,
        9258
      ]
    },
    {
      "pos": [
        9260,
        9330
      ],
      "content": "有关 Liferay 的详细信息，请参阅 <bpt id=\"p1\">[</bpt>http://www.liferay.com<ept id=\"p1\">](http://www.liferay.com)</ept>。"
    }
  ],
  "content": "<properties \n    pageTitle=\"将自定义 Java Web 应用上载到 Azure\" \n    description=\"本教程介绍了如何将自定义 Java Web 应用上载到 Azure Web 应用。\" \n    services=\"app-service\\web\" \n    documentationCenter=\"java\" \n    authors=\"rmcmurray\" \n    manager=\"wpickett\" \n    editor=\"jimbe\"/>\n\n<tags \n    ms.service=\"web-sites\" \n    ms.date=\"01/09/2016\" \n    wacn.date=\"03/03/2016\"/>\n\n# 将自定义 Java Web 应用上载到 Azure\n\n本主题介绍了如何将自定义 Java Web 应用上载到 Azure。包括适用于 Java Web 应用的信息以及特定应用程序的示例。\n\n请注意，Azure 提供了一种使用 Azure 门户配置 UI 创建 Java Web 应用的方法，如 [Azure Web 应用和 Java 入门](/documentation/articles/web-sites-java-get-started)中所述。此教程适用于无需使用 Azure 配置 UI 的方案。\n\n## 配置指南\n\n下面描述了 Azure 上的自定义 Java Web 应用所需的设置。\n\n- Java 进程使用的 HTTP 端口是动态分配的。该进程必须使用环境变量 `HTTP_PLATFORM_PORT` 的端口。\n- 除单个 HTTP 侦听程序以外的所有其他侦听端口都应禁用。在 Tomcat 中，这些端口包括 Shutdown、HTTPS 和 AJP 端口。\n- 容器仅应针对 IPv4 流量进行配置。\n- 需要在配置中设置应用程序的 **startup** 命令。\n- 需要目录具有写入权限的应用程序应位于 Azure Web 应用的内容目录中，即 **D:\\\\home**。环境变量 `HOME` 引用 D:\\\\home。  \n\n您可以在 web.config 文件中根据需要设置环境变量。\n\n## web.config httpPlatform 配置\n\n以下信息介绍了 web.config 中 **httpPlatform** 的格式。\n                                 \n**arguments**（默认值=\"\"）。**processPath** 设置中指定的可执行文件或脚本的参数。\n\n示例（所示示例包含 **processPath**）：\n\n    processPath=\"%HOME%\\site\\wwwroot\\bin\\tomcat\\bin\\catalina.bat\"\n    arguments=\"start\"\n    \n    processPath=\"%JAVA_HOME\\bin\\java.exe\"\n    arguments=\"-Djava.net.preferIPv4Stack=true -Djetty.port=%HTTP\\_PLATFORM_PORT% -Djetty.base=\";%HOME%\\site\\wwwroot\\bin\\jetty-distribution-9.1.0.v20131115\"; -jar \";%HOME%\\site\\wwwroot\\bin\\jetty-distribution-9.1.0.v20131115\\start.jar\";\"\n\n\n**processPath** - 启动侦听 HTTP 请求的进程的可执行文件或脚本的路径。\n\n示例:\n\n\n    processPath=\"%JAVA_HOME%\\bin\\java.exe\"\n\n    processPath=\"%HOME%\\site\\wwwroot\\bin\\tomcat\\bin\\startup.bat\"\n\n    processPath=\"%HOME%\\site\\wwwroot\\bin\\tomcat\\bin\\catalina.bat\"\n                                                                                       \n**rapidFailsPerMinute**（默认值=10） 允许 **processPath** 中指定的进程每分钟崩溃的次数。如果超出了此限制，则每分钟达到此限制后的剩余时间 **HttpPlatformHandler** 将停止启动进程。\n                                    \n**requestTimeout**（默认值=\"00:02:00\"） **HttpPlatformHandler** 等待侦听 `%HTTP_PLATFORM_PORT%` 的进程响应的持续时间。\n\n**startupRetryCount**（默认值=10） **HttpPlatformHandler** 尝试启动 **processPath** 中指定的进程的次数。有关详细信息，请参阅 **startupTimeLimit**。\n\n**startupTimeLimit**（默认值=10 秒） **HttpPlatformHandler** 等待可执行文件/脚本启动侦听端口的进程的持续时间。如果超出了此时间限制，**HttpPlatformHandler** 将终止进程，然后尝试重新启动 **startupRetryCount** 次。\n                                                                                      \n**stdoutLogEnabled**（默认值=\"true\"） 如果为 true，**processPath** 设置中指定地进程的 **stdout** 和 **stderr** 将重定向到 **stdoutLogFile** 中指定地文件（请参阅 **stdoutLogFile** 部分）。\n                                    \n**stdoutLogFile**（默认值=\"d:\\\\home\\\\LogFiles\\\\httpPlatformStdout.log\"） 记录 **processPath** 中指定的进程的 **stdout** 和 **stderr** 的绝对文件路径。\n                                    \n> [AZURE.NOTE]`%HTTP_PLATFORM_PORT%` 是一个特殊的占位符，需要指定为 **arguments** 的一部分或 **httpPlatform** **environmentVariables** 列表的一部分。其将会被替换为 **HttpPlatformHandler** 内部生成的端口，以便 **processPath** 指定的进程可以侦听此端口。\n\n## 部署\n\n可以通过基于 Internet Information Services (IIS) 的 Web 应用所用的方法轻松地部署基于 Java 的 Web 应用。FTP 和 Git 都是支持的部署机制，和 Web 应用集成的 SCM 功能一样。WebDeploy 可充当协议，但由于 Java 不是在 Visual Studio 中开发的，因此 WebDeploy 不适用于 Java Web 应用部署使用案例。\n\n## 应用程序配置示例\n\n对于以下应用程序，提供了 web.config 文件和应用程序配置作为示例，用以说明如何在 Azure Web 应用上启用 Java 应用程序。\n\n### Tomcat\n尽管 Azure Web 应用提供了两个 Tomcat 变体，但仍可以上载客户特定的实例。使用不同的 JVM 安装 Tomcat 的示例如下。\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <configuration>\n      <system.webServer>\n        <handlers>\n          <add name=\"httpPlatformHandler\" path=\"*\" verb=\"*\" modules=\"httpPlatformHandler\" resourceType=\"Unspecified\" />\n        </handlers>\n        <httpPlatform processPath=\"%HOME%\\site\\wwwroot\\bin\\tomcat\\bin\\startup.bat\" \n            arguments=\"\">\n          <environmentVariables>\n            <environmentVariable name=\"CATALINA_OPTS\" value=\"-Dport.http=%HTTP_PLATFORM_PORT%\" />\n            <environmentVariable name=\"CATALINA_HOME\" value=\"%HOME%\\site\\wwwroot\\bin\\tomcat\" />\n            <environmentVariable name=\"JRE_HOME\" value=\"%HOME%\\site\\wwwroot\\bin\\java\" /> <!-- optional, if not specified, this will default to %programfiles%\\Java -->\n            <environmentVariable name=\"JAVA_OPTS\" value=\"-Djava.net.preferIPv4Stack=true\" />\n          </environmentVariables>\n        </httpPlatform>\n      </system.webServer>\n    </configuration>\n\n对于 Tomcat，需要更改少量配置。需要编辑 Server.xml 并进行如下设置：\n\n-   Shutdown 端口 = -1\n-   HTTP 连接器端口 = ${port.http}\n-   HTTP 连接器地址 = \"127.0.0.1\"\n-   注释掉 HTTPS 和 AJP 连接器\n-   也可以在 catalina.properties 文件中设置 IPv4 设置，并在其中添加 `java.net.preferIPv4Stack=true`。\n    \nAzure Web 应用上不支持 Direct3d 调用。若要禁用这些调用，添加以下 Java 选项使你的应用程序进行以下调用：`-Dsun.java2d.d3d=false`\n\n### Jetty\n\n和 Tomcat 一样，客户可以上载其自己的 Jetty 实例。对于运行 Jetty 完整安装，配置应如下所示：\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <configuration>\n      <system.webServer>\n        <handlers>\n          <add name=\"httppPlatformHandler\" path=\"*\" verb=\"*\" modules=\"httpPlatformHandler\" resourceType=\"Unspecified\" />\n        </handlers>\n        <httpPlatform processPath=\"%JAVA_HOME%\\bin\\java.exe\" \n             arguments=\"-Djava.net.preferIPv4Stack=true -Djetty.port=%HTTP_PLATFORM_PORT% -Djetty.base=\";%HOME%\\site\\wwwroot\\bin\\jetty-distribution-9.1.0.v20131115\"; -jar \";%HOME%\\site\\wwwroot\\bin\\jetty-distribution-9.1.0.v20131115\\start.jar\";\"\n            startupTimeLimit=\"20\"\n          startupRetryCount=\"10\"\n          stdoutLogEnabled=\"true\">\n        </httpPlatform>\n      </system.webServer>\n    </configuration>\n\n应在 start.ini 中更改 Jetty 配置并设置 `java.net.preferIPv4Stack=true`。\n\n### Hudson\n\n我们的测试使用 Hudson 3.1.2 war 和默认 Tomcat 7.0.50 实例，但没有使用 UI 来进行设置。由于 Hudson 为软件构建工具，因此建议将其安装在可在 Web 应用上设置 **AlwaysOn** 标志的专用实例上。\n\n1. 在 Web 应用的站点根目录（即 **d:\\\\home\\\\site\\\\wwwroot**）中创建 **webapps** 目录（如果尚不存在），并将 Hudson.war 放在 **d:\\\\home\\\\site\\\\wwwroot\\\\webapps** 中。\n2. 下载 Apache Maven 3.0.5（与 Hudson 兼容），并将其放在 **d:\\\\home\\\\site\\\\wwwroot** 中。\n3. 在 **d:\\\\home\\\\site\\\\wwwroot** 中创建 web.config，并在其中粘贴以下内容：\n    \n        <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n        <configuration>\n          <system.webServer>\n            <handlers>\n              <add name=\"httppPlatformHandler\" path=\"*\" verb=\"*\" \n        modules=\"httpPlatformHandler\" resourceType=\"Unspecified\" />\n            </handlers>\n            <httpPlatform processPath=\"%AZURE_TOMCAT7_HOME%\\bin\\startup.bat\"\n        startupTimeLimit=\"20\"\n        startupRetryCount=\"10\">\n        <environmentVariables>\n          <environmentVariable name=\"HUDSON_HOME\" \n        value=\"%HOME%\\site\\wwwroot\\hudson_home\" />\n          <environmentVariable name=\"JAVA_OPTS\" \n        value=\"-Djava.net.preferIPv4Stack=true -Duser.home=%HOME%/site/wwwroot/user_home -Dhudson.DNSMultiCast.disabled=true\" />\n        </environmentVariables>            \n            </httpPlatform>\n          </system.webServer>\n        </configuration>\n\n    此时可以重新启动 Web 应用，使所做的更改生效。连接到 http://yourwebapp/hudson 以启动 Hudson。\n\n4. Hudson 对自身进行配置后，您将看到以下屏幕：\n\n    ![Hudson](./media/web-sites-java-custom-upload/hudson1.png)\n    \n5. 访问 Hudson 配置页：单击“管理 Hudson”，然后单击“配置系统”。\n6. 如下所示配置 JDK：\n\n    ![Hudson 配置](./media/web-sites-java-custom-upload/hudson2.png)\n\n7. 如下所示配置 Maven：\n\n    ![Maven 配置](./media/web-sites-java-custom-upload/maven.png)\n\n8. 保存设置。Hudson 现在即已配置好，并可供使用。\n\n有关 Hudson 的更多信息，请参阅 [http://hudson-ci.org](http://hudson-ci.org)。\n\n### Liferay\n\nAzure Web 应用支持 Liferay。由于 Liferay 可能需要大量内存，因此站点需要在可以提供足够内存的中型或大型专用工作机上运行。Liferay 也需要花数分钟才能启动。鉴于上述原因，建议你将站点设置为“始终打开”。\n\n使用与 Tomcat 捆绑的 Liferay 6.1.2 Community Edition GA3 时，下载 Liferay 后将编辑以下文件：\n\n**Server.xml**\n\n- 将 Shutdown 端口更改为 -1。\n- 将 HTTP 连接器更改为 `<Connector port=\"${port.http}\" protocol=\"HTTP/1.1\" connectionTimeout=\"600000\" address=\"127.0.0.1\" URIEncoding=\"UTF-8\" />`\n- 注释掉 AJP 连接器。\n\n在 **liferay\\\\tomcat-7.0.40\\\\webapps\\\\ROOT\\\\WEB-INF\\\\classes** 文件夹中，创建文件 **portal-ext.properties**。此文件应包含一行如下所示的内容：\n\n    liferay.home=%HOME%/site/wwwroot/liferay\n\n在 tomcat-7.0.40 文件夹所在的目录级别中，创建包含以下内容的文件 **web.config**：\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <configuration>\n      <system.webServer>\n        <handlers>\n    <add name=\"httpPlatformHandler\" path=\"*\" verb=\"*\"\n         modules=\"httpPlatformHandler\" resourceType=\"Unspecified\" />\n        </handlers>\n        <httpPlatform processPath=\"%HOME%\\site\\wwwroot\\tomcat-7.0.40\\bin\\catalina.bat\" \n                      arguments=\"run\" \n                      startupTimeLimit=\"10\" \n                      requestTimeout=\"00:10:00\" \n                      stdoutLogEnabled=\"true\">\n          <environmentVariables>\n      <environmentVariable name=\"CATALINA_OPTS\" value=\"-Dport.http=%HTTP_PLATFORM_PORT%\" />\n      <environmentVariable name=\"CATALINA_HOME\" value=\"%HOME%\\site\\wwwroot\\tomcat-7.0.40\" />\n            <environmentVariable name=\"JRE_HOME\" value=\"D:\\Program Files\\Java\\jdk1.7.0_51\" /> \n            <environmentVariable name=\"JAVA_OPTS\" value=\"-Djava.net.preferIPv4Stack=true\" />\n          </environmentVariables>\n        </httpPlatform>\n      </system.webServer>\n    </configuration>\n\n在 **httpPlatform** 块中，将 **requestTimeout** 设置为“00:10:00”。此时间可以减少，但随后在引导 Liferay 时您可能会看到超时错误。如果更改此值，也应该修改 tomcat server.xml 中的**connectionTimeout**。\n\n值得注意的是，JRE\\_HOME 环境变量将在上述 web.config 中指定为指向 64 位 JDK。默认为 32 位，但由于 Liferay 可能需要大量内存，因此建议使用 64 位 JDK。\n\n做完上述更改后，重新启动运行 Liferay 的 Web 应用，然后打开 http://yourwebapp。可从 Web 应用根目录访问 Liferay 门户。\n\n有关 Liferay 的详细信息，请参阅 [http://www.liferay.com](http://www.liferay.com)。\n\n<!---HONumber=74-->"
}