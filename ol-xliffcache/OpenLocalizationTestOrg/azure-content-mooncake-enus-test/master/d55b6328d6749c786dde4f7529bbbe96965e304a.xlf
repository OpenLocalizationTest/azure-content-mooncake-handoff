<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d55b6328d6749c786dde4f7529bbbe96965e304a</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>共享访问签名概述 | Azure</source>
          <target state="new">共享访问签名概述 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>共享访问签名是什么，其工作原理是怎样的，以及如何在 Node、PHP 和 C# 编程中使用它们。</source>
          <target state="new">共享访问签名是什么，其工作原理是怎样的，以及如何在 Node、PHP 和 C# 编程中使用它们。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>共享访问签名</source>
          <target state="new">共享访问签名</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>共享访问签名<ept id="p1">*</ept> (SAS) 是服务总线的主要安全机制，包括事件中心、中转消息传送（队列和主题）和中继消息传送。本文介绍共享访问签名、其工作原理以及如何以平台无关的方式使用它们。</source>
          <target state="new"><bpt id="p1">*</bpt>共享访问签名<ept id="p1">*</ept> (SAS) 是服务总线的主要安全机制，包括事件中心、中转消息传送（队列和主题）和中继消息传送。本文介绍共享访问签名、其工作原理以及如何以平台无关的方式使用它们。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>SAS 概述</source>
          <target state="new">SAS 概述</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>共享访问签名是基于 SHA-256 安全哈希或 URI 的身份验证机制。SAS 是所有服务总线服务使用的非常强大的机制。在实际应用中，SAS 有两个组件：<bpt id="p1">*</bpt>共享访问策略<ept id="p1">*</ept>和<bpt id="p2">*</bpt>共享访问签名<ept id="p2">*</ept>（通常称为<bpt id="p3">*</bpt>令牌<ept id="p3">*</ept>）。</source>
          <target state="new">共享访问签名是基于 SHA-256 安全哈希或 URI 的身份验证机制。SAS 是所有服务总线服务使用的非常强大的机制。在实际应用中，SAS 有两个组件：<bpt id="p1">*</bpt>共享访问策略<ept id="p1">*</ept>和<bpt id="p2">*</bpt>共享访问签名<ept id="p2">*</ept>（通常称为<bpt id="p3">*</bpt>令牌<ept id="p3">*</ept>）。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>你可以在<bpt id="p1">[</bpt>对服务总线进行共享访问签名身份验证<ept id="p1">](/documentation/articles/service-bus-shared-access-signature-authentication)</ept>中找到有关共享访问签名与服务总线的更详细信息。</source>
          <target state="new">你可以在<bpt id="p1">[</bpt>对服务总线进行共享访问签名身份验证<ept id="p1">](/documentation/articles/service-bus-shared-access-signature-authentication)</ept>中找到有关共享访问签名与服务总线的更详细信息。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>共享访问策略</source>
          <target state="new">共享访问策略</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>对于 SAS，要了解的一个重点是，一切都从策略开始。对于每个策略，需要确定三个信息片段：<bpt id="p1">**</bpt>名称<ept id="p1">**</ept>、<bpt id="p2">**</bpt>范围<ept id="p2">**</ept>和<bpt id="p3">**</bpt>权限<ept id="p3">**</ept>。<bpt id="p4">**</bpt>名称<ept id="p4">**</ept>只是该范围内的唯一名称。范围也很简单：它是相关资源的 URI。对于服务总线命名空间，范围是完全限定的域名 (FQDN)，例如 <bpt id="p5">**</bpt><ph id="ph1">`https://&lt;yournamespace&gt;.servicebus.chinacloudapi.cn/`</ph><ept id="p5">**</ept>。</source>
          <target state="new">对于 SAS，要了解的一个重点是，一切都从策略开始。对于每个策略，需要确定三个信息片段：<bpt id="p1">**</bpt>名称<ept id="p1">**</ept>、<bpt id="p2">**</bpt>范围<ept id="p2">**</ept>和<bpt id="p3">**</bpt>权限<ept id="p3">**</ept>。<bpt id="p4">**</bpt>名称<ept id="p4">**</ept>只是该范围内的唯一名称。范围也很简单：它是相关资源的 URI。对于服务总线命名空间，范围是完全限定的域名 (FQDN)，例如 <bpt id="p5">**</bpt><ph id="ph1">`https://&lt;yournamespace&gt;.servicebus.chinacloudapi.cn/`</ph><ept id="p5">**</ept>。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>策略的可用权限大多数都易于理解：</source>
          <target state="new">策略的可用权限大多数都易于理解：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>发送</source>
          <target state="new">发送</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>侦听</source>
          <target state="new">侦听</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>管理</source>
          <target state="new">管理</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在你创建策略后，系统将为它分配<bpt id="p1">*</bpt>主密钥<ept id="p1">*</ept>和<bpt id="p2">*</bpt>辅助密钥<ept id="p2">*</ept>。它们是加密形式的强密钥。请不要遗失或透漏这些密钥 - 在 <bpt id="p3">[</bpt>Azure 经典门户<ept id="p3">][]</ept>中总要用到它们。你可以使用其中一个生成的密钥，并且随时可以重新生成密钥。不过，如果你重新生成或更改策略中的主密钥，基于该密钥创建的所有共享访问签名都将失效。</source>
          <target state="new">在你创建策略后，系统将为它分配<bpt id="p1">*</bpt>主密钥<ept id="p1">*</ept>和<bpt id="p2">*</bpt>辅助密钥<ept id="p2">*</ept>。它们是加密形式的强密钥。请不要遗失或透漏这些密钥 - 在 <bpt id="p3">[</bpt>Azure 经典门户<ept id="p3">][]</ept>中总要用到它们。你可以使用其中一个生成的密钥，并且随时可以重新生成密钥。不过，如果你重新生成或更改策略中的主密钥，基于该密钥创建的所有共享访问签名都将失效。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>当你创建服务总线命名空间时，系统将自动为整个命名空间创建名为 <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept> 的策略，此策略具有所有权限。你不会以 <bpt id="p2">**</bpt>root<ept id="p2">**</ept> 身份登录，因此除非有适合的理由，否则请勿使用此策略。可以在 Azure 管理门户上的命名空间“配置”选项卡中创建更多的策略。请务必注意，在服务总线中的单一树级别（命名空间、队列、事件中心等）中，最多只能附加 12 个策略。</source>
          <target state="new">当你创建服务总线命名空间时，系统将自动为整个命名空间创建名为 <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept> 的策略，此策略具有所有权限。你不会以 <bpt id="p2">**</bpt>root<ept id="p2">**</ept> 身份登录，因此除非有适合的理由，否则请勿使用此策略。可以在 Azure 管理门户上的命名空间“配置”选项卡中创建更多的策略。请务必注意，在服务总线中的单一树级别（命名空间、队列、事件中心等）中，最多只能附加 12 个策略。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>共享访问签名（令牌）</source>
          <target state="new">共享访问签名（令牌）</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>策略本身不是服务总线的访问令牌。它是使用主密钥或辅助密钥生成访问令牌时所依据的对象。令牌是通过采用以下格式妥善编写一个字符串而生成的：</source>
          <target state="new">策略本身不是服务总线的访问令牌。它是使用主密钥或辅助密钥生成访问令牌时所依据的对象。令牌是通过采用以下格式妥善编写一个字符串而生成的：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>其中，<ph id="ph1">`signature-string`</ph> 是令牌范围的 SHA-256 哈希（前一部分已介绍<bpt id="p1">**</bpt>范围<ept id="p1">**</ept>），后面附加了 CRLF 和过期时间（自纪元算起，以秒为单位：1970 年 1 月 1 日 <ph id="ph2">`00:00:00 UTC`</ph>）。</source>
          <target state="new">其中，<ph id="ph1">`signature-string`</ph> 是令牌范围的 SHA-256 哈希（前一部分已介绍<bpt id="p1">**</bpt>范围<ept id="p1">**</ept>），后面附加了 CRLF 和过期时间（自纪元算起，以秒为单位：1970 年 1 月 1 日 <ph id="ph2">`00:00:00 UTC`</ph>）。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>哈希类似于以下虚构代码，它返回 32 个字节。</source>
          <target state="new">哈希类似于以下虚构代码，它返回 32 个字节。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>非哈希值位于 <bpt id="p1">**</bpt>SharedAccessSignature<ept id="p1">**</ept> 字符串中，这样，接收方便可以使用相同的参数计算哈希，以确保它返回相同的结果。URI 指定范围，而密钥名称标识要用于计算哈希的策略。从安全性的立场来看，这非常重要。如果签名与接收方（服务总线）的计算结果不符，则拒绝访问。此时，我们可以确保发送方可访问密钥，并且应该被授予策略中指定的权限。</source>
          <target state="new">非哈希值位于 <bpt id="p1">**</bpt>SharedAccessSignature<ept id="p1">**</ept> 字符串中，这样，接收方便可以使用相同的参数计算哈希，以确保它返回相同的结果。URI 指定范围，而密钥名称标识要用于计算哈希的策略。从安全性的立场来看，这非常重要。如果签名与接收方（服务总线）的计算结果不符，则拒绝访问。此时，我们可以确保发送方可访问密钥，并且应该被授予策略中指定的权限。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>从策略生成签名</source>
          <target state="new">从策略生成签名</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>在代码中如何实际执行此操作？ 让我们探讨一下几个示例。</source>
          <target state="new">在代码中如何实际执行此操作？ 让我们探讨一下几个示例。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>NodeJS</source>
          <target state="new">NodeJS</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Java</source>
          <target state="new">Java</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>PHP</source>
          <target state="new">PHP</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>C&amp;#35;</source>
          <target state="new">C&amp;#35;</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>使用共享访问签名（在 HTTP 级别）</source>
          <target state="new">使用共享访问签名（在 HTTP 级别）</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>在了解如何为服务总线中的任何实体创建共享访问签名后，便可以执行 HTTP POST 了：</source>
          <target state="new">在了解如何为服务总线中的任何实体创建共享访问签名后，便可以执行 HTTP POST 了：</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>请记住，这适用于所有情况。你可以为队列、主题、订阅、事件中心或中继创建 SAS。如果对事件中心使用按发布者标识，只需附加 <ph id="ph1">`/publishers/&lt; publisherid&gt;`</ph>。</source>
          <target state="new">请记住，这适用于所有情况。你可以为队列、主题、订阅、事件中心或中继创建 SAS。如果对事件中心使用按发布者标识，只需附加 <ph id="ph1">`/publishers/&lt; publisherid&gt;`</ph>。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>如果你为发送方或客户端提供 SAS 令牌，它们不会直接获取密钥，并且他们无法逆向改编哈希来获取它。因此，你可以控制它们有权访问的项，以及可访问的时间长短。要记住的一个重点是，如果你更改策略中的主密钥，基于该密钥创建的所有共享访问签名都将失效。</source>
          <target state="new">如果你为发送方或客户端提供 SAS 令牌，它们不会直接获取密钥，并且他们无法逆向改编哈希来获取它。因此，你可以控制它们有权访问的项，以及可访问的时间长短。要记住的一个重点是，如果你更改策略中的主密钥，基于该密钥创建的所有共享访问签名都将失效。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>使用共享访问签名（在 AMQP 级别）</source>
          <target state="new">使用共享访问签名（在 AMQP 级别）</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>在前一部分中，你已了解如何使用 SAS 令牌配合 HTTP POST 请求将数据发送到服务总线。如你所了解，你可以使用 AMQP（高级消息队列协议）来访问服务总线。在许多方案中，都会出于性能考虑而将 AMQP 协议用作首选的主要协议。文章<bpt id="p1">[</bpt>基于 AMQP 声明的安全性版本 1.0<ept id="p1">](https://www.oasis-open.org/committees/download.php/50506/amqp-cbs-v1%200-wd02%202013-08-12.doc)</ept>（自 2013 年以来以有效草案版推出，不过 Azure 现在能够很好地支持它）中介绍了如何配合 AMQP 使用 SAS 令牌。</source>
          <target state="new">在前一部分中，你已了解如何使用 SAS 令牌配合 HTTP POST 请求将数据发送到服务总线。如你所了解，你可以使用 AMQP（高级消息队列协议）来访问服务总线。在许多方案中，都会出于性能考虑而将 AMQP 协议用作首选的主要协议。文章<bpt id="p1">[</bpt>基于 AMQP 声明的安全性版本 1.0<ept id="p1">](https://www.oasis-open.org/committees/download.php/50506/amqp-cbs-v1%200-wd02%202013-08-12.doc)</ept>（自 2013 年以来以有效草案版推出，不过 Azure 现在能够很好地支持它）中介绍了如何配合 AMQP 使用 SAS 令牌。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>开始将数据发送到服务总线之前，发布者需要在 AMQP 消息内部将 SAS 令牌发送到正确定义且名为 <bpt id="p1">**</bpt>"$cbs"<ept id="p1">**</ept> 的 AMQP 节点（可以将它视为一个由服务使用的“特殊”队列，用于获取和验证所有 SAS 令牌）。发布者需要指定 AMQP 消息内部的 <bpt id="p2">**</bpt>"ReplyTo"<ept id="p2">**</ept> 字段；这是服务向发布者回复令牌验证结果（发布者与服务之间的简单请求/回复模式）时所在的节点。根据 AMQP 1.0 规范中有关“动态创建远程节点”的论述，此回复节点是“即时”创建的。在检查 SAS 令牌有效之后，发布者可以继续将数据发送到服务。</source>
          <target state="new">开始将数据发送到服务总线之前，发布者需要在 AMQP 消息内部将 SAS 令牌发送到正确定义且名为 <bpt id="p1">**</bpt>"$cbs"<ept id="p1">**</ept> 的 AMQP 节点（可以将它视为一个由服务使用的“特殊”队列，用于获取和验证所有 SAS 令牌）。发布者需要指定 AMQP 消息内部的 <bpt id="p2">**</bpt>"ReplyTo"<ept id="p2">**</ept> 字段；这是服务向发布者回复令牌验证结果（发布者与服务之间的简单请求/回复模式）时所在的节点。根据 AMQP 1.0 规范中有关“动态创建远程节点”的论述，此回复节点是“即时”创建的。在检查 SAS 令牌有效之后，发布者可以继续将数据发送到服务。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>以下步骤将说明如果无法在 C&amp;#35; 中使用正式的服务总线 SDK（例如在 WinRT、.Net Compact Framework、.Net Micro Framework 和 Mono 中）进行开发，应如何有效地使用 <bpt id="p1">[</bpt>AMQP.Net Lite<ept id="p1">](http://amqpnetlite.codeplex.com)</ept> 库配合 AMQP 协议发送 SAS 令牌。当然，此库对于了解基于声明的安全性如何在 AMQP 级别运行而言非常有用，就如同你可以了解它如何在 HTTP 级别运行一样（使用 HTTP POST 请求并在 "Authorization" 标头内部发送 SAS 令牌）。但是，请不要担心！ 如果你不想要学习此类有关 AMQP 的深奥知识，可以使用正式服务总线 SDK 配合 .Net Framework 应用程序来为执行这些操作，或者针对其他所有平台使用 <bpt id="p2">[</bpt>Azure SB Lite<ept id="p2">](http://azuresblite.codeplex.com)</ept> 库（请参阅上述说明）。</source>
          <target state="new">以下步骤将说明如果无法在 C&amp;#35; 中使用正式的服务总线 SDK（例如在 WinRT、.Net Compact Framework、.Net Micro Framework 和 Mono 中）进行开发，应如何有效地使用 <bpt id="p1">[</bpt>AMQP.Net Lite<ept id="p1">](http://amqpnetlite.codeplex.com)</ept> 库配合 AMQP 协议发送 SAS 令牌。当然，此库对于了解基于声明的安全性如何在 AMQP 级别运行而言非常有用，就如同你可以了解它如何在 HTTP 级别运行一样（使用 HTTP POST 请求并在 "Authorization" 标头内部发送 SAS 令牌）。但是，请不要担心！ 如果你不想要学习此类有关 AMQP 的深奥知识，可以使用正式服务总线 SDK 配合 .Net Framework 应用程序来为执行这些操作，或者针对其他所有平台使用 <bpt id="p2">[</bpt>Azure SB Lite<ept id="p2">](http://azuresblite.codeplex.com)</ept> 库（请参阅上述说明）。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>C&amp;#35;</source>
          <target state="new">C&amp;#35;</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>上述的 <bpt id="p1">*</bpt>PutCbsToken()<ept id="p1">*</ept> 方法接收代表服务 TCP 连接的 <bpt id="p2">*</bpt>connection<ept id="p2">*</ept>（AMQP .Net Lite 库提供的 AMQP Connection 类实例），以及代表要发送的 SAS 令牌的 <bpt id="p3">*</bpt>sasToken<ept id="p3">*</ept> 参数。注意：必须在<bpt id="p4">**</bpt>将 SASL 身份验证机制设置为 EXTERNAL<ept id="p4">**</ept> 的情况下创建连接（而不是在不需要发送 SAS 令牌时使用的包含用户名与密码的默认 PLAIN）。</source>
          <target state="new">上述的 <bpt id="p1">*</bpt>PutCbsToken()<ept id="p1">*</ept> 方法接收代表服务 TCP 连接的 <bpt id="p2">*</bpt>connection<ept id="p2">*</ept>（AMQP .Net Lite 库提供的 AMQP Connection 类实例），以及代表要发送的 SAS 令牌的 <bpt id="p3">*</bpt>sasToken<ept id="p3">*</ept> 参数。注意：必须在<bpt id="p4">**</bpt>将 SASL 身份验证机制设置为 EXTERNAL<ept id="p4">**</ept> 的情况下创建连接（而不是在不需要发送 SAS 令牌时使用的包含用户名与密码的默认 PLAIN）。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>接下来，发布者创建两个 AMQP 链接来发送 SAS 令牌并接收来自服务的回复（令牌验证结果）。</source>
          <target state="new">接下来，发布者创建两个 AMQP 链接来发送 SAS 令牌并接收来自服务的回复（令牌验证结果）。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>AMQP 消息因为具有众多属性而有点复杂，且包含比简单消息更多的信息。SAS 令牌放在消息正文中（使用令牌构造函数）。<bpt id="p1">**</bpt>"ReplyTo"<ept id="p1">**</ept> 属性设置为节点名称，用于在接收者链接上接收验证结果（可以随意更改其名称，它是服务动态创建的）。服务使用最后三个 application/custom 属性来了解它必须执行哪种类型的操作。如 CBS 草案规范中所述，这些属性必须是<bpt id="p2">**</bpt>操作名称<ept id="p2">**</ept> ("put-token")、放入的<bpt id="p3">**</bpt>令牌类型<ept id="p3">**</ept> ("servicebus.chinacloudapi.cn:sastoken")，最后是要应用令牌的<bpt id="p4">**</bpt>受众“名称”<ept id="p4">**</ept>（整个实体）。</source>
          <target state="new">AMQP 消息因为具有众多属性而有点复杂，且包含比简单消息更多的信息。SAS 令牌放在消息正文中（使用令牌构造函数）。<bpt id="p1">**</bpt>"ReplyTo"<ept id="p1">**</ept> 属性设置为节点名称，用于在接收者链接上接收验证结果（可以随意更改其名称，它是服务动态创建的）。服务使用最后三个 application/custom 属性来了解它必须执行哪种类型的操作。如 CBS 草案规范中所述，这些属性必须是<bpt id="p2">**</bpt>操作名称<ept id="p2">**</ept> ("put-token")、放入的<bpt id="p3">**</bpt>令牌类型<ept id="p3">**</ept> ("servicebus.chinacloudapi.cn:sastoken")，最后是要应用令牌的<bpt id="p4">**</bpt>受众“名称”<ept id="p4">**</ept>（整个实体）。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>在发送方链接上发送 SAS 令牌后，发布者需要在接收者链接上读取回复。回复是一个简单的 AMQP 消息，其中包含名为 <bpt id="p1">**</bpt>"status-code"<ept id="p1">**</ept> 的应用程序属性，这些属性可以包含与 HTTP 状态代码相同的值。</source>
          <target state="new">在发送方链接上发送 SAS 令牌后，发布者需要在接收者链接上读取回复。回复是一个简单的 AMQP 消息，其中包含名为 <bpt id="p1">**</bpt>"status-code"<ept id="p1">**</ept> 的应用程序属性，这些属性可以包含与 HTTP 状态代码相同的值。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>有关如何使用这些 SAS 令牌的详细信息，请参阅<bpt id="p1">[</bpt>服务总线 REST API 参考<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh780717.aspx)</ept>。</source>
          <target state="new">有关如何使用这些 SAS 令牌的详细信息，请参阅<bpt id="p1">[</bpt>服务总线 REST API 参考<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/hh780717.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>有关服务总线身份验证的详细信息，请参阅<bpt id="p1">[</bpt>服务总线身份验证和授权<ept id="p1">](/documentation/articles/service-bus-authentication-and-authorization)</ept>。</source>
          <target state="new">有关服务总线身份验证的详细信息，请参阅<bpt id="p1">[</bpt>服务总线身份验证和授权<ept id="p1">](/documentation/articles/service-bus-authentication-and-authorization)</ept>。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>此<bpt id="p1">[</bpt>博客文章<ept id="p1">](http://developers.de/blogs/damir_dobric/archive/2013/10/17/how-to-create-shared-access-signature-for-service-bus.aspx)</ept>中介绍了更多关于 C# 和 Java 脚本中的 SAS 的示例。</source>
          <target state="new">此<bpt id="p1">[</bpt>博客文章<ept id="p1">](http://developers.de/blogs/damir_dobric/archive/2013/10/17/how-to-create-shared-access-signature-for-service-bus.aspx)</ept>中介绍了更多关于 C# 和 Java 脚本中的 SAS 的示例。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>