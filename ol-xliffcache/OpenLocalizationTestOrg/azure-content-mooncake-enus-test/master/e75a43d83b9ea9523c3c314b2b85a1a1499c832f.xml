{
  "nodes": [
    {
      "pos": [
        4,
        55
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"add-select-images\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>更新快速启动客户端应用以捕获和上载图像"
    },
    {
      "pos": [
        57,
        312
      ],
      "content": "在本部分中，你将更新来自<bpt id=\"p1\">[</bpt><ept id=\"p1\">移动服务入门]</ept>教程的项目，以便拍摄照片并将它们上载到 Azure Blob 存储。为了捕获图像，本教程使用来自 <ph id=\"ph1\">`Microsoft.Phone.Tasks`</ph> 命名空间的 <bpt id=\"p2\">[</bpt><ept id=\"p2\">CameraCaptureTask]</ept>。此类可在 Windows Phone 设备上启动相机 UI，以拍摄照片并自动将图像保存到 Windows Phone 设备上的“本机照片”。如果你不希望将图像保存到“本机照片”，请改用 <ph id=\"ph2\">`Microsoft.Devices`</ph> 命名空间中的 <bpt id=\"p3\">[</bpt><ept id=\"p3\">PhotoCamera]</ept> 类。"
    },
    {
      "content": "在 Visual Studio 的解决方案资源管理器中，在项目下展开“属性”。然后打开 WMAppManifest.xml 文件，并通过在“功能”选项卡上单击“ID\\_CAP\\_ISV\\_CAMERA”来启用相机。关闭文件以保存您的更改。",
      "pos": [
        317,
        436
      ]
    },
    {
      "content": "这样可以确保您的应用能够使用连接到计算机的相机。应用第一次运行时，将请求用户允许对相机进行访问。",
      "pos": [
        558,
        606
      ]
    },
    {
      "pos": [
        611,
        673
      ],
      "content": "打开 MainPage.xaml 文件，将名为 <bpt id=\"p1\">**</bpt>ContentPanel<ept id=\"p1\">**</ept> 的 <bpt id=\"p2\">**</bpt>Grid<ept id=\"p2\">**</ept> 元素替换为以下代码："
    },
    {
      "pos": [
        2955,
        3048
      ],
      "content": "这样可以添加一个新按钮，以启动 <bpt id=\"p1\">[</bpt><ept id=\"p1\">CameraCaptureTask]</ept> 并将图像添加到 <bpt id=\"p2\">**</bpt>ItemTemplate<ept id=\"p2\">**</ept>，同时将其绑定源设置为 Blob 存储服务中已上载图像的 URI。"
    },
    {
      "pos": [
        3053,
        3096
      ],
      "content": "打开 MainPage.xaml.cs 项目文件并添加以下 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句："
    },
    {
      "content": "在 MainPage.xaml.cs 项目文件中，通过添加以下属性来更新 TodoItem 类：",
      "pos": [
        3274,
        3322
      ]
    },
    {
      "pos": [
        3766,
        3851
      ],
      "content": "在 MainPage.xaml.cs 项目文件中，更新 MainPage 类。添加以下代码，以声明 <bpt id=\"p1\">[</bpt><ept id=\"p1\">CameraCaptureTask]</ept> 以及将引用已捕获图像的流对象："
    },
    {
      "content": "在 MainPage.xaml.cs 项目文件中，更新 MainPage 类。添加以下代码以更新构造函数，从而创建 CameraCaptureTask，并为已完成事件添加事件处理程序：",
      "pos": [
        4108,
        4200
      ]
    },
    {
      "content": "在 MainPage.xaml.cs 项目文件中，更新 MainPage 类。添加以下代码，它可显示相机 UI，让用户能够在单击“捕获图像”按钮时捕获图像：",
      "pos": [
        4593,
        4671
      ]
    },
    {
      "pos": [
        4816,
        4888
      ],
      "content": "在 MainPage.xaml.cs 项目文件中，更新 MainPage 类。将现有的  <ph id=\"ph1\">`InsertTodoItem`</ph> 方法替换为以下代码："
    },
    {
      "content": "这段代码可向移动服务发送插入新 TodoItem 的请求，包括图像文件名。响应包含 SAS，用于将图像插入 Blob 存储中，还包含用于数据绑定的图像的 URI。",
      "pos": [
        6972,
        7053
      ]
    },
    {
      "content": "最后一个步骤是测试应用并验证上载是否成功。",
      "pos": [
        7055,
        7076
      ]
    },
    {
      "pos": [
        7089,
        7120
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"test\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>测试在您的应用中上载图像"
    },
    {
      "content": "在 Visual Studio 中，您可以按 F5 键，在模拟器中测试应用，或使用实际目标设备进行测试。",
      "pos": [
        7125,
        7177
      ]
    },
    {
      "content": "在文本框中输入一些文本，然后单击“捕获图像”。",
      "pos": [
        7182,
        7205
      ]
    },
    {
      "content": "这样可以显示相机的拍照 UI。",
      "pos": [
        7318,
        7333
      ]
    },
    {
      "content": "单击手机上的图像或快照按钮可拍摄图片。",
      "pos": [
        7339,
        7358
      ]
    },
    {
      "content": "单击“接受”以接受图像并退出相机 UI。",
      "pos": [
        7479,
        7499
      ]
    },
    {
      "content": "单击“保存”以插入新项并上载图像。",
      "pos": [
        7625,
        7642
      ]
    },
    {
      "content": "新项和已上载图像都显示在列表视图中。",
      "pos": [
        7759,
        7777
      ]
    },
    {
      "pos": [
        7896,
        7981
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>新项的 <ph id=\"ph2\">&lt;code&gt;</ph><ph id=\"ph3\">imageUri</ph><ph id=\"ph4\">&lt;/code&gt;</ph> 属性绑定到<ph id=\"ph5\">&lt;strong&gt;</ph>图像<ph id=\"ph6\">&lt;/strong&gt;</ph>控件时，将从 Blob 存储服务自动下载图像。"
    }
  ],
  "content": "\n## <a name=\"add-select-images\"></a>更新快速启动客户端应用以捕获和上载图像\n\n在本部分中，你将更新来自[移动服务入门]教程的项目，以便拍摄照片并将它们上载到 Azure Blob 存储。为了捕获图像，本教程使用来自 `Microsoft.Phone.Tasks` 命名空间的 [CameraCaptureTask]。此类可在 Windows Phone 设备上启动相机 UI，以拍摄照片并自动将图像保存到 Windows Phone 设备上的“本机照片”。如果你不希望将图像保存到“本机照片”，请改用 `Microsoft.Devices` 命名空间中的 [PhotoCamera] 类。\n\n1. 在 Visual Studio 的解决方案资源管理器中，在项目下展开“属性”。然后打开 WMAppManifest.xml 文件，并通过在“功能”选项卡上单击“ID\\_CAP\\_ISV\\_CAMERA”来启用相机。关闭文件以保存您的更改。\n\n    ![](./media/mobile-services-windows-phone-upload-to-blob-storage/mobile-upload-blob-app-WMAppmanifest-wp8.png)\n\n    这样可以确保您的应用能够使用连接到计算机的相机。应用第一次运行时，将请求用户允许对相机进行访问。\n\n2. 打开 MainPage.xaml 文件，将名为 **ContentPanel** 的 **Grid** 元素替换为以下代码：\n\n        <!--ContentPanel - place additional content here-->\n        <Grid x:Name=\"ContentPanel\" Grid.Row=\"1\" Margin=\"12,0,12,0\">\n            <Grid.RowDefinitions>\n                <RowDefinition Height=\"Auto\" />\n                <RowDefinition Height=\"Auto\" />\n                <RowDefinition Height=\"Auto\" />\n                <RowDefinition Height=\"Auto\" />\n                <RowDefinition Height=\"Auto\" />\n                <RowDefinition Height=\"*\" />\n            </Grid.RowDefinitions>\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"2*\" />\n                <ColumnDefinition Width=\"2*\" />\n            </Grid.ColumnDefinitions>\n            <TextBlock Grid.Row=\"0\" Grid.ColumnSpan=\"2\" Text=\"Enter some text below, click Capture Image to add a captured image. Then click Save to insert a new TodoItem item into your database\" TextWrapping=\"Wrap\" Margin=\"12\"/>\n            <TextBox Grid.Row=\"1\" Grid.ColumnSpan=\"2\" Name=\"TextInput\" Text=\"\" />\n            <Button Name=\"ButtonCaptureImage\" Grid.Row=\"2\" Click=\"ButtonCaptureImage_Click\">Capture Image</Button>\n            <Button Grid.Row =\"2\" Grid.Column=\"1\" Name=\"ButtonSave\" Click=\"ButtonSave_Click\">Save</Button>\n            <TextBlock Grid.Row=\"3\" Grid.ColumnSpan=\"2\" Text=\"Click refresh below to load the unfinished TodoItems from your database. Use the checkbox to complete and update your TodoItems\" TextWrapping=\"Wrap\" Margin=\"12\" />\n            <Button Grid.Row=\"4\" Grid.ColumnSpan=\"2\" Name=\"ButtonRefresh\" Click=\"ButtonRefresh_Click\">Refresh</Button>\n            <phone:LongListSelector Grid.Row=\"5\" Grid.ColumnSpan=\"2\" Name=\"ListItems\">\n                <phone:LongListSelector.ItemTemplate>\n                    <DataTemplate>\n                        <StackPanel Orientation=\"Vertical\">\n                            <CheckBox Name=\"CheckBoxComplete\" IsChecked=\"{Binding Complete, Mode=TwoWay}\" Checked=\"CheckBoxComplete_Checked\" Content=\"{Binding Text}\" Margin=\"10,5\" VerticalAlignment=\"Center\"/>\n                            <Image Name=\"ImageUpload\" Source=\"{Binding ImageUri, Mode=OneWay}\" MaxHeight=\"150\"/>\n                        </StackPanel>\n                    </DataTemplate>\n                </phone:LongListSelector.ItemTemplate>\n            </phone:LongListSelector>\n        </Grid>\n\n\n    这样可以添加一个新按钮，以启动 [CameraCaptureTask] 并将图像添加到 **ItemTemplate**，同时将其绑定源设置为 Blob 存储服务中已上载图像的 URI。\n\n3. 打开 MainPage.xaml.cs 项目文件并添加以下 **using** 语句：\n    \n        using Microsoft.Phone.Tasks;\n        using System.IO;\n        using Microsoft.WindowsAzure.Storage.Auth;\n        using Microsoft.WindowsAzure.Storage.Blob;\n    \n4. 在 MainPage.xaml.cs 项目文件中，通过添加以下属性来更新 TodoItem 类：\n\n        [JsonProperty(PropertyName = \"containerName\")]\n        public string ContainerName { get; set; }\n        \n        [JsonProperty(PropertyName = \"resourceName\")]\n        public string ResourceName { get; set; }\n        \n        [JsonProperty(PropertyName = \"sasQueryString\")]\n        public string SasQueryString { get; set; }\n        \n        [JsonProperty(PropertyName = \"imageUri\")]\n        public string ImageUri { get; set; } \n\n5. 在 MainPage.xaml.cs 项目文件中，更新 MainPage 类。添加以下代码，以声明 [CameraCaptureTask] 以及将引用已捕获图像的流对象：\n\n        // Using the CameraCaptureTask to allow the user to capture a todo item image //\n        CameraCaptureTask cameraCaptureTask;\n        \n        // Using a stream reference to upload the image to blob storage.\n        Stream imageStream = null;\n\n6. 在 MainPage.xaml.cs 项目文件中，更新 MainPage 类。添加以下代码以更新构造函数，从而创建 CameraCaptureTask，并为已完成事件添加事件处理程序：\n\n        // Constructor\n        public MainPage()\n        {\n            InitializeComponent();\n            \n            cameraCaptureTask = new CameraCaptureTask();\n            cameraCaptureTask.Completed += cameraCaptureTask_Completed;\n        }\n        \n        void cameraCaptureTask_Completed(object sender, PhotoResult e)\n        {\n            imageStream = e.ChosenPhoto;\n        }\n\n7. 在 MainPage.xaml.cs 项目文件中，更新 MainPage 类。添加以下代码，它可显示相机 UI，让用户能够在单击“捕获图像”按钮时捕获图像：\n\n        private void ButtonCaptureImage_Click(object sender, RoutedEventArgs e)\n        {\n            cameraCaptureTask.Show();\n        }\n\n\n8. 在 MainPage.xaml.cs 项目文件中，更新 MainPage 类。将现有的  `InsertTodoItem` 方法替换为以下代码：\n \n        private async void InsertTodoItem(TodoItem todoItem)\n        {\n            string errorString = string.Empty;            \n            \n            if (imageStream != null)\n            {\n                // Set blob properties of TodoItem.\n                todoItem.ContainerName = \"todoitemimages\";\n                todoItem.ResourceName = Guid.NewGuid().ToString() + \".jpg\";\n            }                       \n            \n            // Send the item to be inserted. When blob properties are set this\n            // generates an SAS in the response.\n            await todoTable.InsertAsync(todoItem);  \n            \n            // If we have a returned SAS, then upload the blob.\n            if (!string.IsNullOrEmpty(todoItem.SasQueryString))\n            {\n                // Get the URI generated that contains the SAS \n                // and extract the storage credentials.\n                StorageCredentials cred = new StorageCredentials(todoItem.SasQueryString);\n                var imageUri = new Uri(todoItem.ImageUri);\n                \n                // Instantiate a Blob store container based on the info in the returned item.\n                CloudBlobContainer container = new CloudBlobContainer(\n                    new Uri(string.Format(\"https://{0}/{1}\",\n                        imageUri.Host, todoItem.ContainerName)), cred);                \n                \n                // Upload the new image as a BLOB from the stream.\n                CloudBlockBlob blobFromSASCredential =\n                    container.GetBlockBlobReference(todoItem.ResourceName);\n                await blobFromSASCredential.UploadFromStreamAsync(imageStream);\n                \n                // When you request an SAS at the container-level instead of the blob-level,\n                // you are able to upload multiple streams using the same container credentials.\n\n                imageStream = null;\n            }              \n            \n            // Add the new item to the collection.\n            items.Add(todoItem);\n            TextInput.Text = \"\";\n        }\n\n\n    这段代码可向移动服务发送插入新 TodoItem 的请求，包括图像文件名。响应包含 SAS，用于将图像插入 Blob 存储中，还包含用于数据绑定的图像的 URI。\n\n最后一个步骤是测试应用并验证上载是否成功。\n        \n## <a name=\"test\"></a>测试在您的应用中上载图像\n\n1. 在 Visual Studio 中，您可以按 F5 键，在模拟器中测试应用，或使用实际目标设备进行测试。\n\n2. 在文本框中输入一些文本，然后单击“捕获图像”。\n\n    ![](./media/mobile-services-windows-phone-upload-to-blob-storage/mobile-upload-blob-app-view-wp8.png)\n\n    这样可以显示相机的拍照 UI。 \n\n3. 单击手机上的图像或快照按钮可拍摄图片。\n  \n    ![](./media/mobile-services-windows-phone-upload-to-blob-storage/mobile-upload-blob-app-view-camera-wp8.png)\n\n4. 单击“接受”以接受图像并退出相机 UI。\n\n    ![](./media/mobile-services-windows-phone-upload-to-blob-storage/mobile-upload-blob-app-view-camera-accept-wp8.png)\n\n5. 单击“保存”以插入新项并上载图像。\n\n    ![](./media/mobile-services-windows-phone-upload-to-blob-storage/mobile-upload-blob-app-view-save-wp8.png)\n\n6. 新项和已上载图像都显示在列表视图中。\n\n    ![](./media/mobile-services-windows-phone-upload-to-blob-storage/mobile-upload-blob-app-view-final-wp8.png)\n\n   >[AZURE.NOTE]新项的 <code>imageUri</code> 属性绑定到<strong>图像</strong>控件时，将从 Blob 存储服务自动下载图像。\n\n\n[移动服务入门]: /zh-cn/documentation/articles/mobile-services-windows-phone-get-started\n[CameraCaptureTask]: http://msdn.microsoft.com/zh-cn/library/windowsphone/develop/microsoft.phone.tasks.cameracapturetask(v=vs.105).aspx\n[PhotoCamera]: http://msdn.microsoft.com/zh-cn/library/windowsphone/develop/microsoft.devices.photocamera(v=vs.105).aspx\n\n<!---HONumber=71-->"
}