{
  "nodes": [
    {
      "content": "通过使用 Web API 注册推送通知的当前用户 | Azure",
      "pos": [
        27,
        59
      ]
    },
    {
      "content": "了解在 ASP.NET Web API 执行注册时如何在 iOS 应用程序中请求向 Azure 通知中心注册推送通知。",
      "pos": [
        78,
        137
      ]
    },
    {
      "content": "通过使用 ASP.NET 注册推送通知的当前用户",
      "pos": [
        362,
        386
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        390,
        406
      ]
    },
    {
      "content": "Windows Store C",
      "pos": [
        410,
        425
      ]
    },
    {
      "content": "iOS",
      "pos": [
        527,
        530
      ]
    },
    {
      "content": "概述",
      "pos": [
        624,
        626
      ]
    },
    {
      "pos": [
        628,
        784
      ],
      "content": "本主题演示在 ASP.NET Web API 执行注册时如何请求向 Azure 通知中心注册推送通知。它是对教程<bpt id=\"p1\">[</bpt>使用通知中心通知用户<ept id=\"p1\">][使用通知中心通知用户]</ept>的扩展。你必须在该教程中已完成创建经过身份验证的移动服务所需的步骤。有关通知用户方案的详细信息，请参阅<bpt id=\"p2\">[</bpt>使用通知中心通知用户<ept id=\"p2\">][使用通知中心通知用户]</ept>。"
    },
    {
      "content": "更新应用程序",
      "pos": [
        788,
        794
      ]
    },
    {
      "content": "在 MainStoryboard\\_iPhone.storyboard 中，从对象库添加以下组件：",
      "pos": [
        801,
        850
      ]
    },
    {
      "pos": [
        858,
        878
      ],
      "content": "<bpt id=\"p1\">**</bpt>标签<ept id=\"p1\">**</ept>：“使用通知中心推送到用户”"
    },
    {
      "pos": [
        885,
        908
      ],
      "content": "<bpt id=\"p1\">**</bpt>标签<ept id=\"p1\">**</ept>：\"InstallationId\""
    },
    {
      "pos": [
        915,
        926
      ],
      "content": "<bpt id=\"p1\">**</bpt>标签<ept id=\"p1\">**</ept>：“用户”"
    },
    {
      "pos": [
        933,
        946
      ],
      "content": "<bpt id=\"p1\">**</bpt>文本字段<ept id=\"p1\">**</ept>：“用户”"
    },
    {
      "pos": [
        953,
        964
      ],
      "content": "<bpt id=\"p1\">**</bpt>标签<ept id=\"p1\">**</ept>：“密码”"
    },
    {
      "pos": [
        971,
        984
      ],
      "content": "<bpt id=\"p1\">**</bpt>文本字段<ept id=\"p1\">**</ept>：“密码”"
    },
    {
      "pos": [
        991,
        1002
      ],
      "content": "<bpt id=\"p1\">**</bpt>按钮<ept id=\"p1\">**</ept>：“登录”"
    },
    {
      "content": "此时，你的 Storyboard 应与下图类似：",
      "pos": [
        1008,
        1032
      ]
    },
    {
      "content": "在助手编辑器中，创建所有带开关的控件的容器并调用它们，连接文本字段与视图控制器（委派），并创建“登录”按钮的“操作”。",
      "pos": [
        1050,
        1109
      ]
    },
    {
      "content": "BreakingNewsViewController.h 文件现在应包含以下代码：",
      "pos": [
        1127,
        1168
      ]
    },
    {
      "pos": [
        1416,
        1469
      ],
      "content": "创建名为 <bpt id=\"p1\">**</bpt>DeviceInfo<ept id=\"p1\">**</ept> 的类，将以下代码复制到 DeviceInfo.h 文件的接口部分："
    },
    {
      "content": "在文件 DeviceInfo.m 的实现部分中复制以下代码：",
      "pos": [
        1593,
        1623
      ]
    },
    {
      "content": "在 PushToUserAppDelegate.h 中，添加以下单一属性：",
      "pos": [
        3076,
        3113
      ]
    },
    {
      "pos": [
        3182,
        3255
      ],
      "content": "在 PushToUserAppDelegate.m 的 <bpt id=\"p1\">**</bpt>didFinishLaunchingWithOptions<ept id=\"p1\">**</ept> 方法中，添加以下代码："
    },
    {
      "pos": [
        3491,
        3560
      ],
      "content": "第一行初始化 <bpt id=\"p1\">**</bpt>DeviceInfo<ept id=\"p1\">**</ept> 单一实例。第二行启动推送通知的注册，前提是你已完成<bpt id=\"p2\">[</bpt>通知中心入门<ept id=\"p2\">][通知中心入门]</ept>教程的学习。"
    },
    {
      "pos": [
        3566,
        3673
      ],
      "content": "在 PushToUserAppDelegate.m 的 AppDelegate 中实现 <bpt id=\"p1\">**</bpt>didRegisterForRemoteNotificationsWithDeviceToken<ept id=\"p1\">**</ept> 方法并添加以下代码："
    },
    {
      "content": "这为请求设置设备标记。",
      "pos": [
        3731,
        3742
      ]
    },
    {
      "pos": [
        3750,
        3863
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph>此时，此方法中不应有任何其他代码。如果你已调用在完成<bpt id=\"p1\">[</bpt>通知中心入门<ept id=\"p1\">][通知中心入门]</ept>教程的学习时添加的 <bpt id=\"p2\">**</bpt>registerNativeWithDeviceToken<ept id=\"p2\">**</ept> 方法，必须注释掉或删除该调用。"
    },
    {
      "content": "在 PushToUserAppDelegate.m 文件中，添加以下处理程序方法：",
      "pos": [
        3869,
        3910
      ]
    },
    {
      "content": "当你的应用程序接收到它正在运行的通知时，此方法将在 UI 中显示一个警报。",
      "pos": [
        4370,
        4407
      ]
    },
    {
      "content": "打开 PushToUserViewController.m 文件，并在以下实现中返回键盘：",
      "pos": [
        4413,
        4458
      ]
    },
    {
      "pos": [
        4712,
        4792
      ],
      "content": "在 PushToUserViewController.m 文件的 <bpt id=\"p1\">**</bpt>viewDidLoad<ept id=\"p1\">**</ept> 方法中，按以下方式初始化 installationId 标签："
    },
    {
      "content": "在 PushToUserViewController.m 的接口部分中添加以下属性：",
      "pos": [
        4976,
        5018
      ]
    },
    {
      "content": "然后，添加以下实现：",
      "pos": [
        5140,
        5150
      ]
    },
    {
      "pos": [
        6952,
        6989
      ],
      "content": "将以下代码复制到由 XCode 创建的 <bpt id=\"p1\">**</bpt>login<ept id=\"p1\">**</ept> 处理程序方法："
    },
    {
      "pos": [
        9111,
        9216
      ],
      "content": "此方法获取一个安装 ID 和用于推送通知的通道并将它与设备类型一起发送到在通知中心创建注册的已经身份验证的 Web API 方法。此 Web API 已在<bpt id=\"p1\">[</bpt>使用通知中心通知用户<ept id=\"p1\">][使用通知中心通知用户]</ept>中定义。"
    },
    {
      "pos": [
        9218,
        9278
      ],
      "content": "现在客户端应用程序已更新，请返回到<bpt id=\"p1\">[</bpt>使用通知中心通知用户<ept id=\"p1\">][使用通知中心通知用户]</ept>并更新移动服务以使用通知中心发送通知。"
    }
  ],
  "content": "<properties\n    pageTitle=\"通过使用 Web API 注册推送通知的当前用户 | Azure\"\n    description=\"了解在 ASP.NET Web API 执行注册时如何在 iOS 应用程序中请求向 Azure 通知中心注册推送通知。\"\n    services=\"notification-hubs\"\n    documentationCenter=\"ios\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 通过使用 ASP.NET 注册推送通知的当前用户\n\n> [AZURE.SELECTOR]\n- [Windows Store C#](/documentation/articles/notification-hubs-ios-mobile-services-register-user-push-notifications)\n- [iOS](/documentation/articles/notification-hubs-ios-aspnet-register-user-push-notifications)\n\n\n\n##概述\n\n本主题演示在 ASP.NET Web API 执行注册时如何请求向 Azure 通知中心注册推送通知。它是对教程[使用通知中心通知用户][使用通知中心通知用户]的扩展。你必须在该教程中已完成创建经过身份验证的移动服务所需的步骤。有关通知用户方案的详细信息，请参阅[使用通知中心通知用户][使用通知中心通知用户]。\n\n##更新应用程序  \n\n1. 在 MainStoryboard\\_iPhone.storyboard 中，从对象库添加以下组件：\n\n    + **标签**：“使用通知中心推送到用户”\n    + **标签**：\"InstallationId\"\n    + **标签**：“用户”\n    + **文本字段**：“用户”\n    + **标签**：“密码”\n    + **文本字段**：“密码”\n    + **按钮**：“登录”\n\n    此时，你的 Storyboard 应与下图类似：\n\n    ![][0]\n\n2.  在助手编辑器中，创建所有带开关的控件的容器并调用它们，连接文本字段与视图控制器（委派），并创建“登录”按钮的“操作”。\n\n    ![][1]\n\n    BreakingNewsViewController.h 文件现在应包含以下代码：\n\n        @property (weak, nonatomic) IBOutlet UILabel *installationId;\n        @property (weak, nonatomic) IBOutlet UITextField *User;\n        @property (weak, nonatomic) IBOutlet UITextField *Password;\n\n        - (IBAction)login:(id)sender;\n\n3.  创建名为 **DeviceInfo** 的类，将以下代码复制到 DeviceInfo.h 文件的接口部分：\n\n        @property (readonly, nonatomic) NSString* installationId;\n        @property (nonatomic) NSData* deviceToken;\n\n4.  在文件 DeviceInfo.m 的实现部分中复制以下代码：\n\n            @synthesize installationId = _installationId;\n\n            - (id)init {\n                if (!(self = [super init]))\n                    return nil;\n\n                NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];\n                _installationId = [defaults stringForKey:@\"PushToUserInstallationId\"];\n                if(!_installationId) {\n                    CFUUIDRef newUUID = CFUUIDCreate(kCFAllocatorDefault);\n                    _installationId = (__bridge_transfer NSString *)CFUUIDCreateString(kCFAllocatorDefault, newUUID);\n                    CFRelease(newUUID);\n\n                    //store the install ID so we don't generate a new one next time\n                    [defaults setObject:_installationId forKey:@\"PushToUserInstallationId\"];\n                    [defaults synchronize];\n                }\n\n                return self;\n            }\n\n            - (NSString*)getDeviceTokenInHex {\n                const unsigned *tokenBytes = [[self deviceToken] bytes];\n                NSString *hexToken = [NSString stringWithFormat:@\"%08X%08X%08X%08X%08X%08X%08X%08X\",\n                                      ntohl(tokenBytes[0]), ntohl(tokenBytes[1]), ntohl(tokenBytes[2]),\n                                      ntohl(tokenBytes[3]), ntohl(tokenBytes[4]), ntohl(tokenBytes[5]),\n                                      ntohl(tokenBytes[6]), ntohl(tokenBytes[7])];\n                return hexToken;\n            }\n\n5.  在 PushToUserAppDelegate.h 中，添加以下单一属性：\n\n        @property (strong, nonatomic) DeviceInfo* deviceInfo;\n\n6.  在 PushToUserAppDelegate.m 的 **didFinishLaunchingWithOptions** 方法中，添加以下代码：\n\n        self.deviceInfo = [[DeviceInfo alloc] init];\n\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes: UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound];\n\n    第一行初始化 **DeviceInfo** 单一实例。第二行启动推送通知的注册，前提是你已完成[通知中心入门][通知中心入门]教程的学习。\n\n7.  在 PushToUserAppDelegate.m 的 AppDelegate 中实现 **didRegisterForRemoteNotificationsWithDeviceToken** 方法并添加以下代码：\n\n        self.deviceInfo.deviceToken = deviceToken;\n\n    这为请求设置设备标记。\n\n    > [AZURE.NOTE]此时，此方法中不应有任何其他代码。如果你已调用在完成[通知中心入门][通知中心入门]教程的学习时添加的 **registerNativeWithDeviceToken** 方法，必须注释掉或删除该调用。\n\n8.  在 PushToUserAppDelegate.m 文件中，添加以下处理程序方法：\n\n        - (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo {\n            NSLog(@\"%@\", userInfo);\n            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Notification\" message:\n                                  [userInfo objectForKey:@\"inAppMessage\"] delegate:nil cancelButtonTitle:\n                                  @\"OK\" otherButtonTitles:nil, nil];\n            [alert show];\n        }\n\n    当你的应用程序接收到它正在运行的通知时，此方法将在 UI 中显示一个警报。\n\n9.  打开 PushToUserViewController.m 文件，并在以下实现中返回键盘：\n\n        - (BOOL)textFieldShouldReturn:(UITextField *)theTextField {\n            if (theTextField == self.User || theTextField == self.Password) {\n                [theTextField resignFirstResponder];\n            }\n            return YES;\n        }\n\n10. 在 PushToUserViewController.m 文件的 **viewDidLoad** 方法中，按以下方式初始化 installationId 标签：\n\n        DeviceInfo* deviceInfo = [(PushToUserAppDelegate*)[[UIApplication sharedApplication]delegate] deviceInfo];\n        Self.installationId.text = deviceInfo.installationId;\n\n11. 在 PushToUserViewController.m 的接口部分中添加以下属性：\n\n        @property (readonly) NSOperationQueue* downloadQueue;\n        - (NSString*)base64forData:(NSData*)theData;\n\n12. 然后，添加以下实现：\n\n            - (NSOperationQueue *)downloadQueue {\n                if (!_downloadQueue) {\n                    _downloadQueue = [[NSOperationQueue alloc] init];\n                    _downloadQueue.name = @\"Download Queue\";\n                    _downloadQueue.maxConcurrentOperationCount = 1;\n                }\n                return _downloadQueue;\n            }\n\n            // base64 encoding\n            - (NSString*)base64forData:(NSData*)theData\n            {\n                const uint8_t* input = (const uint8_t*)[theData bytes];\n                NSInteger length = [theData length];\n\n                static char table[] = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n                NSMutableData* data = [NSMutableData dataWithLength:((length + 2) / 3) * 4];\n                uint8_t* output = (uint8_t*)data.mutableBytes;\n\n                NSInteger i;\n                for (i=0; i < length; i += 3) {\n                    NSInteger value = 0;\n                    NSInteger j;\n                    for (j = i; j < (i + 3); j++) {\n                        value <<= 8;\n\n                        if (j < length) {\n                            value |= (0xFF & input[j]);\n                        }\n                    }\n\n                    NSInteger theIndex = (i / 3) * 4;\n                    output[theIndex + 0] =                    table[(value >> 18) & 0x3F];\n                    output[theIndex + 1] =                    table[(value >> 12) & 0x3F];\n                    output[theIndex + 2] = (i + 1) < length ? table[(value >> 6)  & 0x3F] : '=';\n                    output[theIndex + 3] = (i + 2) < length ? table[(value >> 0)  & 0x3F] : '=';\n                }\n\n                return [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding];\n            }\n\n13. 将以下代码复制到由 XCode 创建的 **login** 处理程序方法：\n\n            DeviceInfo* deviceInfo = [(PushToUserAppDelegate*)[[UIApplication sharedApplication]delegate] deviceInfo];\n    \n            // build JSON\n            NSString* json = [NSString stringWithFormat:@\"{\"platform\":\"ios\", \"instId\":\"%@\", \"deviceToken\":\"%@\"}\", deviceInfo.installationId, [deviceInfo getDeviceTokenInHex]];\n            \n            // build auth string\n            NSString* authString = [NSString stringWithFormat:@\"%@:%@\", self.User.text, self.Password.text];\n            \n            NSMutableURLRequest* request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"http://nhnotifyuser.azure Websites.net/api/register\"]];\n            [request setHTTPMethod:@\"POST\"];\n            [request setHTTPBody:[json dataUsingEncoding:NSUTF8StringEncoding]];\n            [request addValue:[@([json lengthOfBytesUsingEncoding:NSUTF8StringEncoding]) description] forHTTPHeaderField:@\"Content-Length\"];\n            [request addValue:@\"application/json\" forHTTPHeaderField:@\"Content-Type\"];\n            [request addValue:[NSString stringWithFormat:@\"Basic %@\",[self base64forData:[authString dataUsingEncoding:NSUTF8StringEncoding]]] forHTTPHeaderField:@\"Authorization\"];\n            \n            // connect with POST\n            [NSURLConnection sendAsynchronousRequest:request queue:[self downloadQueue] completionHandler:^(NSURLResponse* response, NSData* data, NSError* error) {\n                // add UIAlert depending on response.\n                if (error != nil) {\n                    NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*)response;\n                    if ([httpResponse statusCode] == 200) {\n                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"Back-end registration\" message:@\"Registration successful\" delegate:nil cancelButtonTitle: @\"OK\" otherButtonTitles:nil, nil];\n                        [alert show];\n                    } else {\n                        NSLog(@\"status: %ld\", (long)[httpResponse statusCode]);\n                    }\n                } else {\n                    NSLog(@\"error: %@\", error);\n                }\n            }];\n\n    此方法获取一个安装 ID 和用于推送通知的通道并将它与设备类型一起发送到在通知中心创建注册的已经身份验证的 Web API 方法。此 Web API 已在[使用通知中心通知用户][使用通知中心通知用户]中定义。\n\n现在客户端应用程序已更新，请返回到[使用通知中心通知用户][使用通知中心通知用户]并更新移动服务以使用通知中心发送通知。\n\n<!-- Anchors. -->  \n\n<!-- Images. -->\n[0]: ./media/notification-hubs-ios-aspnet-register-user-push-notifications/notification-hub-user-aspnet-ios1.png\n[1]: ./media/notification-hubs-ios-aspnet-register-user-push-notifications/notification-hub-user-aspnet-ios2.png\n\n<!-- URLs. -->\n[使用通知中心通知用户]: /documentation/articles/notification-hubs-aspnet-backend-windows-dotnet-notify-users\n[Azure Management Portal]: https://manage.windowsazure.cn/\n[通知中心入门]: /documentation/articles/notification-hubs-ios-get-started\n<!---HONumber=82-->"
}