{
  "nodes": [
    {
      "content": "通知中心本地化的突发新闻教程",
      "pos": [
        27,
        41
      ]
    },
    {
      "content": "了解如何使用 Azure 通知中心发送本地化的突发新闻通知。",
      "pos": [
        60,
        90
      ]
    },
    {
      "content": "使用通知中心发送本地化的突发新闻",
      "pos": [
        320,
        336
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        340,
        356
      ]
    },
    {
      "content": "Windows Store C",
      "pos": [
        360,
        375
      ]
    },
    {
      "content": "iOS",
      "pos": [
        474,
        477
      ]
    },
    {
      "content": "概述",
      "pos": [
        558,
        560
      ]
    },
    {
      "pos": [
        562,
        711
      ],
      "content": "本主题演示如何使用 Azure 通知中心的<bpt id=\"p1\">**</bpt>模板<ept id=\"p1\">**</ept>功能广播已按语言和设备本地化的突发新闻通知。在本教程中，你从在<bpt id=\"p2\">[</bpt><ept id=\"p2\">使用通知中心发送突发新闻]</ept>中创建的 Windows 应用商店应用程序开始操作。完成时，你将可以注册感兴趣的突发新闻类别，指定要接收通知的语言并仅接收采用该语言的这些类别的推送通知。"
    },
    {
      "content": "此方案包含两个部分：",
      "pos": [
        714,
        724
      ]
    },
    {
      "content": "Windows 应用商店应用程序允许客户端设备指定一种语言并订阅不同的突发新闻类别；",
      "pos": [
        728,
        770
      ]
    },
    {
      "pos": [
        774,
        810
      ],
      "content": "后端使用 Azure 通知中心的<bpt id=\"p1\">**</bpt>标记<ept id=\"p1\">**</ept>和<bpt id=\"p2\">**</bpt>模板<ept id=\"p2\">**</ept>功能广播通知。"
    },
    {
      "content": "先决条件",
      "pos": [
        816,
        820
      ]
    },
    {
      "pos": [
        822,
        886
      ],
      "content": "你必须已完成学习<bpt id=\"p1\">[</bpt>使用通知中心发送突发新闻<ept id=\"p1\">][使用通知中心发送突发新闻]</ept>教程并具有可用的代码，因为本教程直接围绕该代码展开论述。"
    },
    {
      "content": "你还需要 Visual Studio 2012 或更高版本。",
      "pos": [
        888,
        918
      ]
    },
    {
      "content": "模板概念",
      "pos": [
        923,
        927
      ]
    },
    {
      "pos": [
        929,
        1067
      ],
      "content": "在<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心发送突发新闻]</ept>中，你构建了一个使用<bpt id=\"p2\">**</bpt>标记<ept id=\"p2\">**</ept>订阅不同新闻类别通知的应用程序。但是，很多应用程序针对多个市场，需要本地化。这意味着通知内容本身必须本地化且传递到正确的设备组。在本主题中，我们将演示如何使用通知中心的<bpt id=\"p3\">**</bpt>模板<ept id=\"p3\">**</ept>功能轻松传递本地化的突发新闻通知。"
    },
    {
      "content": "注意：发送本地化的通知的一种方式是创建每个标签的多个版本。例如，要支持英语、法语和汉语，我们需要三种不同的标签用于世界新闻：“world\\_en”、“world\\_fr”和“world\\_ch”。我们然后必须将世界新闻的本地化版本分别发送到这些标签。在本主题中，我们使用模板来避免增生标签和发送多个消息的要求。",
      "pos": [
        1069,
        1224
      ]
    },
    {
      "content": "在较高级别上，模板是指定特定设备应如何接收通知的一种方法。模板通过引用作为你应用程序后端所发消息的一部分的属性，指定确切的负载格式。在我们的示例中，我们将发送包含所有支持的语言的区域设置未知的消息：",
      "pos": [
        1226,
        1325
      ]
    },
    {
      "content": "然后我们将确保设备注册到引用正确属性的模板。例如，要接收简单的 toast 消息的 Windows 应用商店应用将注册以下包含任何相应标记的模板：",
      "pos": [
        1432,
        1505
      ]
    },
    {
      "pos": [
        1676,
        1758
      ],
      "content": "模板是很强大的功能，你可以在<bpt id=\"p1\">[</bpt>模板<ept id=\"p1\">](/documentation/articles/notification-hubs-templates)</ept>一文中了解其更多信息。"
    },
    {
      "content": "应用程序用户界面",
      "pos": [
        1762,
        1770
      ]
    },
    {
      "pos": [
        1772,
        1826
      ],
      "content": "我们现在将修改你在<bpt id=\"p1\">[</bpt><ept id=\"p1\">使用通知中心发送突发新闻]</ept>主题中创建的“突发新闻”应用，以使用模板发送本地化的突发新闻。"
    },
    {
      "content": "在 Windows 应用商店应用程序中：",
      "pos": [
        1828,
        1848
      ]
    },
    {
      "content": "更改 MainPage.xaml 以包含区域设置组合框：",
      "pos": [
        1850,
        1878
      ]
    },
    {
      "pos": [
        3505,
        3557
      ],
      "content": "<ph id=\"ph1\">&lt;a name=\"building-client\"&gt;</ph><ph id=\"ph2\">&lt;/a&gt;</ph>构建 Windows 应用商店客户端应用程序"
    },
    {
      "pos": [
        3563,
        3653
      ],
      "content": "在 Notifications 类中，将一个区域设置参数添加到 <bpt id=\"p1\">*</bpt>StoreCategoriesAndSubscribe<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>SubscribeToCateories<ept id=\"p2\">*</ept> 方法。"
    },
    {
      "pos": [
        4883,
        5072
      ],
      "content": "请注意，不是调用 <bpt id=\"p1\">*</bpt>RegisterNativeAsync<ept id=\"p1\">*</ept> 方法，我们调用的是 <bpt id=\"p2\">*</bpt>RegisterTemplateAsync<ept id=\"p2\">*</ept>：我们将注册特定的通知格式，在其中模板依赖于区域设置。我们还提供模板的名称（“localizedWNSTemplateExample”），因为我们可能要注册多个模板（例如一个用于 toast 通知，一个用于磁贴），需要命名它们以便可以更新或删除它们。"
    },
    {
      "content": "请注意，如果一个设备使用同一标签注册多个模板，针对该标签的传入消息将导致多个通知发送到设备（每个通知对应一个模板）。当同一逻辑消息必须导致多个可视通知时，此行为很有用，例如在 Windows 应用商店应用程序显示徽章和 toast。",
      "pos": [
        5078,
        5194
      ]
    },
    {
      "content": "添加以下方法来检索存储的区域设置：",
      "pos": [
        5200,
        5217
      ]
    },
    {
      "content": "在你的 MainPage.xaml.cs 中，通过检索“区域设置”组合框的当前值并将它提供给对 Notifications 类的调用，更新按钮单击处理程序，如下所示：",
      "pos": [
        5428,
        5511
      ]
    },
    {
      "pos": [
        6505,
        6579
      ],
      "content": "最后，在 App.xaml.cs 文件中，确保更新 <ph id=\"ph1\">`InitNotificationsAsync`</ph> 方法以检索区域设置，并在订阅时使用该区域设置："
    },
    {
      "content": "从后端发送本地化的通知",
      "pos": [
        7107,
        7118
      ]
    }
  ],
  "content": "<properties\n    pageTitle=\"通知中心本地化的突发新闻教程\"\n    description=\"了解如何使用 Azure 通知中心发送本地化的突发新闻通知。\"\n    services=\"notification-hubs\"\n    documentationCenter=\"windows\"\n    authors=\"wesmc7777\"\n    manager=\"dwrede\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"notification-hubs\"\n    ms.date=\"12/15/2015\" \n    wacn.date=\"01/14/2016\"/>\n\n# 使用通知中心发送本地化的突发新闻\n\n> [AZURE.SELECTOR]\n- [Windows Store C#](/documentation/articles/notification-hubs-windows-store-dotnet-send-localized-breaking-news)\n- [iOS](/documentation/articles/notification-hubs-ios-send-localized-breaking-news)\n\n##概述\n\n本主题演示如何使用 Azure 通知中心的**模板**功能广播已按语言和设备本地化的突发新闻通知。在本教程中，你从在[使用通知中心发送突发新闻]中创建的 Windows 应用商店应用程序开始操作。完成时，你将可以注册感兴趣的突发新闻类别，指定要接收通知的语言并仅接收采用该语言的这些类别的推送通知。\n\n\n此方案包含两个部分：\n\n- Windows 应用商店应用程序允许客户端设备指定一种语言并订阅不同的突发新闻类别；\n\n- 后端使用 Azure 通知中心的**标记**和**模板**功能广播通知。\n\n\n\n##先决条件\n\n你必须已完成学习[使用通知中心发送突发新闻][使用通知中心发送突发新闻]教程并具有可用的代码，因为本教程直接围绕该代码展开论述。\n\n你还需要 Visual Studio 2012 或更高版本。\n\n\n##模板概念\n\n在[使用通知中心发送突发新闻]中，你构建了一个使用**标记**订阅不同新闻类别通知的应用程序。但是，很多应用程序针对多个市场，需要本地化。这意味着通知内容本身必须本地化且传递到正确的设备组。在本主题中，我们将演示如何使用通知中心的**模板**功能轻松传递本地化的突发新闻通知。\n\n注意：发送本地化的通知的一种方式是创建每个标签的多个版本。例如，要支持英语、法语和汉语，我们需要三种不同的标签用于世界新闻：“world\\_en”、“world\\_fr”和“world\\_ch”。我们然后必须将世界新闻的本地化版本分别发送到这些标签。在本主题中，我们使用模板来避免增生标签和发送多个消息的要求。\n\n在较高级别上，模板是指定特定设备应如何接收通知的一种方法。模板通过引用作为你应用程序后端所发消息的一部分的属性，指定确切的负载格式。在我们的示例中，我们将发送包含所有支持的语言的区域设置未知的消息：\n\n    {\n        \"News_English\": \"...\",\n        \"News_French\": \"...\",\n        \"News_Mandarin\": \"...\"\n    }\n\n然后我们将确保设备注册到引用正确属性的模板。例如，要接收简单的 toast 消息的 Windows 应用商店应用将注册以下包含任何相应标记的模板：\n\n    <toast>\n      <visual>\n        <binding template=\\\"ToastText01\\\">\n          <text id=\\\"1\\\">$(News_English)</text>\n        </binding>\n      </visual>\n    </toast>\n\n\n\n模板是很强大的功能，你可以在[模板](/documentation/articles/notification-hubs-templates)一文中了解其更多信息。\n\n##应用程序用户界面\n\n我们现在将修改你在[使用通知中心发送突发新闻]主题中创建的“突发新闻”应用，以使用模板发送本地化的突发新闻。\n\n在 Windows 应用商店应用程序中：\n\n更改 MainPage.xaml 以包含区域设置组合框：\n\n    <Grid Margin=\"120, 58, 120, 80\"  \n            Background=\"{StaticResource ApplicationPageBackgroundThemeBrush}\">\n        <Grid.RowDefinitions>\n            <RowDefinition />\n            <RowDefinition />\n            <RowDefinition />\n            <RowDefinition />\n            <RowDefinition />\n            <RowDefinition />\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition />\n            <ColumnDefinition />\n        </Grid.ColumnDefinitions>\n        <TextBlock Grid.Row=\"0\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\"  TextWrapping=\"Wrap\" Text=\"Breaking News\" FontSize=\"42\" VerticalAlignment=\"Top\"/>\n        <ComboBox Name=\"Locale\" HorizontalAlignment=\"Left\" VerticalAlignment=\"Center\" Width=\"200\" Grid.Row=\"1\" Grid.Column=\"0\">\n            <x:String>English</x:String>\n            <x:String>French</x:String>\n            <x:String>Mandarin</x:String>\n        </ComboBox>\n        <ToggleSwitch Header=\"World\" Name=\"WorldToggle\" Grid.Row=\"2\" Grid.Column=\"0\"/>\n        <ToggleSwitch Header=\"Politics\" Name=\"PoliticsToggle\" Grid.Row=\"3\" Grid.Column=\"0\"/>\n        <ToggleSwitch Header=\"Business\" Name=\"BusinessToggle\" Grid.Row=\"4\" Grid.Column=\"0\"/>\n        <ToggleSwitch Header=\"Technology\" Name=\"TechnologyToggle\" Grid.Row=\"2\" Grid.Column=\"1\"/>\n        <ToggleSwitch Header=\"Science\" Name=\"ScienceToggle\" Grid.Row=\"3\" Grid.Column=\"1\"/>\n        <ToggleSwitch Header=\"Sports\" Name=\"SportsToggle\" Grid.Row=\"4\" Grid.Column=\"1\"/>\n        <Button Content=\"Subscribe\" HorizontalAlignment=\"Center\" Grid.Row=\"5\" Grid.Column=\"0\" Grid.ColumnSpan=\"2\" Click=\"SubscribeButton_Click\" />\n    </Grid>\n\n## <a name=\"building-client\"></a>构建 Windows 应用商店客户端应用程序\n\n1.  在 Notifications 类中，将一个区域设置参数添加到 *StoreCategoriesAndSubscribe* 和 *SubscribeToCateories* 方法。\n\n        public async Task<Registration> StoreCategoriesAndSubscribe(string locale, IEnumerable<string> categories)\n        {\n            ApplicationData.Current.LocalSettings.Values[\"categories\"] = string.Join(\",\", categories);\n            ApplicationData.Current.LocalSettings.Values[\"locale\"] = locale;\n            return await SubscribeToCategories(categories);\n        }\n\n        public async Task<Registration> SubscribeToCategories(string locale, IEnumerable<string> categories = null)\n        {\n            var channel = await PushNotificationChannelManager.CreatePushNotificationChannelForApplicationAsync();\n\n            if (categories == null)\n            {\n                categories = RetrieveCategories();\n            }\n\n            // Using a template registration. This makes supporting notifications across other platforms much easier.\n            // Using the localized tags based on locale selected.\n            string templateBodyWNS = String.Format(\"<toast><visual><binding template=\"ToastText01\"><text id=\"1\">$(News_{0})</text></binding></visual></toast>\", locale);\n\n            return await hub.RegisterTemplateAsync(channel.Uri, templateBodyWNS, \"localizedWNSTemplateExample\", categories);\n        }\n\n    请注意，不是调用 *RegisterNativeAsync* 方法，我们调用的是 *RegisterTemplateAsync*：我们将注册特定的通知格式，在其中模板依赖于区域设置。我们还提供模板的名称（“localizedWNSTemplateExample”），因为我们可能要注册多个模板（例如一个用于 toast 通知，一个用于磁贴），需要命名它们以便可以更新或删除它们。\n\n    请注意，如果一个设备使用同一标签注册多个模板，针对该标签的传入消息将导致多个通知发送到设备（每个通知对应一个模板）。当同一逻辑消息必须导致多个可视通知时，此行为很有用，例如在 Windows 应用商店应用程序显示徽章和 toast。\n\n2.  添加以下方法来检索存储的区域设置：\n\n        public string RetrieveLocale()\n        {\n            var locale = (string) ApplicationData.Current.LocalSettings.Values[\"locale\"];\n            return locale != null ? locale : \"English\";\n        }\n\n3. 在你的 MainPage.xaml.cs 中，通过检索“区域设置”组合框的当前值并将它提供给对 Notifications 类的调用，更新按钮单击处理程序，如下所示：\n\n        private async void SubscribeButton_Click(object sender, RoutedEventArgs e)\n        {\n            var locale = (string)Locale.SelectedItem;\n\n         var categories = new HashSet<string>();\n         if (WorldToggle.IsOn) categories.Add(\"World\");\n         if (PoliticsToggle.IsOn) categories.Add(\"Politics\");\n         if (BusinessToggle.IsOn) categories.Add(\"Business\");\n         if (TechnologyToggle.IsOn) categories.Add(\"Technology\");\n         if (ScienceToggle.IsOn) categories.Add(\"Science\");\n         if (SportsToggle.IsOn) categories.Add(\"Sports\");\n\n            var result = await ((App)Application.Current).notifications.StoreCategoriesAndSubscribe(locale,\n                 categories);\n\n            var dialog = new MessageDialog(\"Locale: \" + locale + \" Subscribed to: \" + \n                string.Join(\",\", categories) + \" on registration Id: \" + result.RegistrationId);\n            dialog.Commands.Add(new UICommand(\"OK\"));\n            await dialog.ShowAsync();\n        }\n\n\n4. 最后，在 App.xaml.cs 文件中，确保更新 `InitNotificationsAsync` 方法以检索区域设置，并在订阅时使用该区域设置：\n\n        private async void InitNotificationsAsync()\n        {\n            var result = await notifications.SubscribeToCategories(notifications.RetrieveLocale());\n\n            // Displays the registration ID so you know it was successful\n            if (result.RegistrationId != null)\n            {\n                var dialog = new MessageDialog(\"Registration successful: \" + result.RegistrationId);\n                dialog.Commands.Add(new UICommand(\"OK\"));\n                await dialog.ShowAsync();\n            }\n        }\n\n##从后端发送本地化的通知\n\n[AZURE.INCLUDE [notification-hubs-localized-back-end](../includes/notification-hubs-localized-back-end.md)]\n\n\n\n\n\n\n<!-- Anchors. -->\n[Template concepts]: #concepts\n[The app user interface]: #ui\n[Building the Windows Store client app]: #building-client\n[Send notifications from your back-end]: #send\n[Next Steps]: #next-steps\n\n<!-- Images. -->\n\n<!-- URLs. -->\n[Mobile Service]: /documentation/articles/mobile-services-javascript-backend-windows-store-dotnet-get-started/\n[使用通知中心通知用户：ASP.NET]: /documentation/articles/notification-hubs-aspnet-backend-windows-dotnet-notify-users/\n[使用通知中心通知用户：移动服务]: /documentation/articles/mobile-services-dotnet-backend-windows-store-dotnet-push-notifications-app-users\n\n[使用通知中心发送突发新闻]: /documentation/articles/notification-hubs-windows-store-dotnet-send-breaking-news/\n\n[Azure Management Portal]: https://manage.windowsazure.com/\n\n[通知中心指南]: http://msdn.microsoft.com/library/jj927170.aspx\n<!---HONumber=Mooncake_0104_2016-->"
}