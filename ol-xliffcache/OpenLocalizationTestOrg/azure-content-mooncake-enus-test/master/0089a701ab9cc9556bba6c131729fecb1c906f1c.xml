{
  "nodes": [
    {
      "content": "如何使用 Azure Media Encoder 对资产进行编码",
      "pos": [
        28,
        60
      ]
    },
    {
      "content": "了解如何使用 Azure Media Encoder 为媒体服务上的媒体内容编码。代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。",
      "pos": [
        80,
        154
      ]
    },
    {
      "content": "如何使用 Azure Media Encoder 对资产进行编码",
      "pos": [
        373,
        405
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        410,
        426
      ]
    },
    {
      "content": "REST",
      "pos": [
        430,
        434
      ]
    },
    {
      "content": ".NET",
      "pos": [
        497,
        501
      ]
    },
    {
      "content": "门户",
      "pos": [
        566,
        568
      ]
    },
    {
      "content": "概述",
      "pos": [
        635,
        637
      ]
    },
    {
      "content": "要通过 Internet 传送数字视频，你必须对媒体进行压缩。数字视频文件相当大，可能因过大而无法通过 Internet 传送或者无法在你客户的设备上正常显示。编码是压缩视频和音频以便你的客户能够查看媒体的过程。",
      "pos": [
        639,
        745
      ]
    },
    {
      "pos": [
        747,
        1090
      ],
      "content": "编码作业是媒体服务中最常见的处理操作之一。可通过创建编码作业将媒体文件从一种编码转换为另一种编码。进行编码时，可以使用媒体服务内置的 Media Encoder。你也可以使用媒体服务合作伙伴提供的编码器；可通过 Azure 应用商店获取第三方编码器。可以使用为编码器定义的预设字符串或预设配置文件来指定编码任务的详细信息。若要查看可用预设的类型，请参阅 <bpt id=\"p1\">[</bpt>Azure 媒体服务的任务预设<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn619392.aspx)</ept>。如果你使用了第三方编码器，则应<bpt id=\"p2\">[</bpt>验证你的文件<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/dn750842.aspx)</ept>。"
    },
    {
      "pos": [
        1092,
        1351
      ],
      "content": "建议始终将夹层文件编码为自适应比特率 MP4 集，然后使用<bpt id=\"p1\">[</bpt>动态打包<ept id=\"p1\">](/documentation/articles/media-services-dynamic-packaging-overview)</ept>将该集转换为所需的格式。若要利用动态打包，首先必须获取你计划从中传送内容的流式处理终结点的至少一个点播流单元。有关详细信息，请参阅<bpt id=\"p2\">[</bpt>如何缩放媒体服务<ept id=\"p2\">](/documentation/articles/media-services-manage-origins#scale_streaming_endpoints)</ept>。"
    },
    {
      "pos": [
        1353,
        1481
      ],
      "content": "如果你的输出资产已经过存储加密，则必须配置资产传送策略。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>配置资产传送策略<ept id=\"p1\">](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)</ept>。"
    },
    {
      "content": "使用适用于 .NET 的媒体服务 SDK",
      "pos": [
        1487,
        1507
      ]
    },
    {
      "pos": [
        1511,
        1630
      ],
      "content": "以下 <bpt id=\"p1\">**</bpt>EncodeToAdaptiveBitrateMP4Set<ept id=\"p1\">**</ept> 方法将创建一个编码作业，然后将单个编码任务添加到该作业。该任务使用“Azure Media Encoder”编码成“H264 自适应比特率 MP4 集 720p”。"
    },
    {
      "content": "使用适用于 .NET 的媒体服务 SDK 扩展",
      "pos": [
        4132,
        4155
      ]
    },
    {
      "content": "创建包含连锁任务的作业",
      "pos": [
        5219,
        5230
      ]
    },
    {
      "pos": [
        5233,
        5408
      ],
      "content": "在许多应用程序方案中，开发人员希望创建一系列处理任务。在媒体服务中，可以创建一系列连锁任务。每个任务执行不同的处理步骤，并且可以使用不同的媒体处理器。连锁任务可以将资产从一个任务转给另一个任务，从而对资产执行线性序列的任务。但是，在作业中执行的任务不需要处于序列中。创建连锁任务时，连锁 <bpt id=\"p1\">**</bpt>ITask<ept id=\"p1\">**</ept> 对象在单个 <bpt id=\"p2\">**</bpt>IJob<ept id=\"p2\">**</ept> 对象中创建。"
    },
    {
      "pos": [
        5411,
        5472
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 每个作业当前有 30 个任务的限制。如果需要链接超过 30 个的任务，请创建多个作业以包含任务。"
    },
    {
      "pos": [
        5474,
        5548
      ],
      "content": "以下 <bpt id=\"p1\">**</bpt>CreateChainedTaskEncodingJob<ept id=\"p1\">**</ept> 方法将创建包含两个连锁任务的作业。该方法的结果是返回包含两个输出资产的作业。"
    },
    {
      "content": "另请参阅",
      "pos": [
        7779,
        7783
      ]
    },
    {
      "content": "媒体服务编码概述",
      "pos": [
        7787,
        7795
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"如何使用 Azure Media Encoder 对资产进行编码\" \n    description=\"了解如何使用 Azure Media Encoder 为媒体服务上的媒体内容编码。代码示例用 C# 编写且使用适用于 .NET 的媒体服务 SDK。\" \n    services=\"media-services\" \n    documentationCenter=\"\" \n    authors=\"Juliako\" \n    manager=\"dwrede\" \n    editor=\"\"/>\n\n<tags\n    ms.service=\"media-services\"\n    ms.date=\"02/03/2016\"\n    wacn.date=\"03/17/2016\"/>\n\n\n#如何使用 Azure Media Encoder 对资产进行编码\n\n\n> [AZURE.SELECTOR]\n- [REST](/documentation/articles/media-services-rest-encode-asset)\n- [.NET](/documentation/articles/media-services-dotnet-encode-asset)\n- [门户](/documentation/articles/media-services-manage-content#encode)\n\n##概述\n\n要通过 Internet 传送数字视频，你必须对媒体进行压缩。数字视频文件相当大，可能因过大而无法通过 Internet 传送或者无法在你客户的设备上正常显示。编码是压缩视频和音频以便你的客户能够查看媒体的过程。\n\n编码作业是媒体服务中最常见的处理操作之一。可通过创建编码作业将媒体文件从一种编码转换为另一种编码。进行编码时，可以使用媒体服务内置的 Media Encoder。你也可以使用媒体服务合作伙伴提供的编码器；可通过 Azure 应用商店获取第三方编码器。可以使用为编码器定义的预设字符串或预设配置文件来指定编码任务的详细信息。若要查看可用预设的类型，请参阅 [Azure 媒体服务的任务预设](https://msdn.microsoft.com/zh-cn/library/azure/dn619392.aspx)。如果你使用了第三方编码器，则应[验证你的文件](https://msdn.microsoft.com/zh-cn/library/azure/dn750842.aspx)。\n\n建议始终将夹层文件编码为自适应比特率 MP4 集，然后使用[动态打包](/documentation/articles/media-services-dynamic-packaging-overview)将该集转换为所需的格式。若要利用动态打包，首先必须获取你计划从中传送内容的流式处理终结点的至少一个点播流单元。有关详细信息，请参阅[如何缩放媒体服务](/documentation/articles/media-services-manage-origins#scale_streaming_endpoints)。\n\n如果你的输出资产已经过存储加密，则必须配置资产传送策略。有关详细信息，请参阅[配置资产传送策略](/documentation/articles/media-services-dotnet-configure-asset-delivery-policy)。\n\n\n###使用适用于 .NET 的媒体服务 SDK  \n\n以下 **EncodeToAdaptiveBitrateMP4Set** 方法将创建一个编码作业，然后将单个编码任务添加到该作业。该任务使用“Azure Media Encoder”编码成“H264 自适应比特率 MP4 集 720p”。\n\n    static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset inputAsset)\n    {\n        var encodingPreset = \"H264 Adaptive Bitrate MP4 Set 720p\";\n\n        IJob job = _context.Jobs.Create(String.Format(\"Encoding {0} into to {1}\",\n                                inputAsset.Name,\n                                encodingPreset));\n\n        var mediaProcessors = GetLatestMediaProcessorByName(\"Azure Media Encoder\");\n\n        ITask encodeTask = job.Tasks.AddNew(\"Encoding\", mediaProcessors, encodingPreset, TaskOptions.None);\n        \n        encodeTask.InputAssets.Add(inputAsset);\n\n        // Specify the storage-encrypted output asset.\n        encodeTask.OutputAssets.AddNew(String.Format(\"{0} as {1}\", inputAsset.Name, encodingPreset), \n            AssetCreationOptions.StorageEncrypted);\n\n\n        job.StateChanged += new EventHandler<JobStateChangedEventArgs>(JobStateChanged);\n        job.Submit();\n        job.GetExecutionProgressTask(CancellationToken.None).Wait();\n\n        return job.OutputMediaAssets[0];\n    }\n\n    private static void JobStateChanged(object sender, JobStateChangedEventArgs e)\n    {\n        Console.WriteLine(\"Job state changed event:\");\n        Console.WriteLine(\"  Previous state: \" + e.PreviousState);\n        Console.WriteLine(\"  Current state: \" + e.CurrentState);\n        switch (e.CurrentState)\n        {\n            case JobState.Finished:\n                Console.WriteLine();\n                Console.WriteLine(\"Job is finished. Please wait while local tasks or downloads complete...\");\n                break;\n            case JobState.Canceling:\n            case JobState.Queued:\n            case JobState.Scheduled:\n            case JobState.Processing:\n                Console.WriteLine(\"Please wait...\\n\");\n                break;\n            case JobState.Canceled:\n            case JobState.Error:\n\n                // Cast sender as a job.\n                IJob job = (IJob)sender;\n\n                // Display or log error details as needed.\n                break;\n            default:\n                break;\n        }\n    }\n\n    private static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\n    {\n        var processor = _context.MediaProcessors.Where(p => p.Name == mediaProcessorName).\n           ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\n\n        if (processor == null)\n            throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\n\n        return processor;\n    }\n\n###使用适用于 .NET 的媒体服务 SDK 扩展\n\n    static public IAsset EncodeToAdaptiveBitrateMP4Set(IAsset asset)\n    {\n        // 1. Prepare a job with a single task to transcode the specified mezzanine asset\n        //    into a multi-bitrate asset.\n        IJob job = _context.Jobs.CreateWithSingleTask(\n            MediaProcessorNames.AzureMediaEncoder,\n            MediaEncoderTaskPresetStrings.H264AdaptiveBitrateMP4Set720p,\n            asset,\n            \"Adaptive Bitrate MP4\",\n            AssetCreationOptions.None);\n\n        Console.WriteLine(\"Submitting transcoding job...\");\n\n        // 2. Submit the job and wait until it is completed.\n        job.Submit();\n        job = job.StartExecutionProgressTask(\n            j =>\n            {\n                Console.WriteLine(\"Job state: {0}\", j.State);\n                Console.WriteLine(\"Job progress: {0:0.##}%\", j.GetOverallProgress());\n            },\n            CancellationToken.None).Result;\n\n        Console.WriteLine(\"Transcoding job finished.\");\n\n        IAsset outputAsset = job.OutputMediaAssets[0];\n\n        return outputAsset;\n    } \n\n##创建包含连锁任务的作业 \n\n在许多应用程序方案中，开发人员希望创建一系列处理任务。在媒体服务中，可以创建一系列连锁任务。每个任务执行不同的处理步骤，并且可以使用不同的媒体处理器。连锁任务可以将资产从一个任务转给另一个任务，从而对资产执行线性序列的任务。但是，在作业中执行的任务不需要处于序列中。创建连锁任务时，连锁 **ITask** 对象在单个 **IJob** 对象中创建。\n\n>[AZURE.NOTE] 每个作业当前有 30 个任务的限制。如果需要链接超过 30 个的任务，请创建多个作业以包含任务。\n\n以下 **CreateChainedTaskEncodingJob** 方法将创建包含两个连锁任务的作业。该方法的结果是返回包含两个输出资产的作业。\n\n    \n    public static IJob CreateChainedTaskEncodingJob(IAsset asset)\n    {\n        // Declare a new job.\n        IJob job = _context.Jobs.Create(\"My task-chained encoding job\");\n\n        // Set up the first task to encode the input file.\n\n        // Get a media processor reference\n        IMediaProcessor processor = GetLatestMediaProcessorByName(\"Azure Media Encoder\");\n\n        // Create a task with the encoding details, using a string preset.\n        ITask task = job.Tasks.AddNew(\"My encoding task\",\n            processor,\n           \"H264 Adaptive Bitrate MP4 Set 720p\",\n            TaskOptions.ProtectedConfiguration);\n\n        // Specify the input asset to be encoded.\n        task.InputAssets.Add(asset);\n\n        // Specify the storage-encrypted output asset.\n        task.OutputAssets.AddNew(\"My storage-encrypted output asset\",\n            AssetCreationOptions.StorageEncrypted);\n\n        // Set up the second task to decrypt the encoded output file from \n        // the first task.\n\n        // Get another media processor instance\n        IMediaProcessor decryptProcessor = GetLatestMediaProcessorByName(\"Storage Decryption\");\n\n        // Declare the decryption task. \n        ITask decryptTask = job.Tasks.AddNew(\"My decryption task\",\n            decryptProcessor,\n            string.Empty,\n            TaskOptions.None);\n\n        // Specify the input asset to be decrypted. This is the output \n        // asset from the first task. \n        decryptTask.InputAssets.Add(task.OutputAssets[0]);\n\n        // Specify an output asset to contain the results of the job. \n        // This should have AssetCreationOptions.None. \n        decryptTask.OutputAssets.AddNew(\"My decrypted output asset\",\n            AssetCreationOptions.None);\n\n        // Use the following event handler to check job progress. \n        job.StateChanged += new\n            EventHandler<JobStateChangedEventArgs>(JobStateChanged);\n\n        // Launch the job.\n        job.Submit();\n\n        // Check job execution and wait for job to finish. \n        Task progressJobTask = job.GetExecutionProgressTask(CancellationToken.None);\n        progressJobTask.Wait();\n\n        //return job that contains two output assets.\n        return job;\n    }\n\n\n##另请参阅 \n\n[媒体服务编码概述](/documentation/articles/media-services-encode-asset)\n\n \n\n<!---HONumber=Mooncake_0307_2016-->"
}