{
  "nodes": [
    {
      "content": "C# 数据库开发：弹性数据库池 | Azure",
      "pos": [
        27,
        50
      ]
    },
    {
      "content": "使用 C# 数据库开发技术创建 Azure SQL 数据库弹性数据库池，以便可以在多个数据库之间共享资源。",
      "pos": [
        69,
        122
      ]
    },
    {
      "content": "C&amp;#x23; 数据库开发：为 SQL 数据库创建和配置弹性数据库池",
      "pos": [
        366,
        400
      ]
    },
    {
      "content": "[AZURE.SELECTOR]",
      "pos": [
        404,
        420
      ]
    },
    {
      "content": "Azure 门户",
      "pos": [
        424,
        432
      ]
    },
    {
      "content": "C",
      "pos": [
        495,
        496
      ]
    },
    {
      "content": "PowerShell",
      "pos": [
        560,
        570
      ]
    },
    {
      "pos": [
        636,
        733
      ],
      "content": "本文说明如何使用 C# 数据库开发技术，通过应用程序为 SQL 数据库创建<bpt id=\"p1\">[</bpt>弹性数据库池<ept id=\"p1\">](/documentation/articles/sql-database-elastic-pool)</ept>。"
    },
    {
      "pos": [
        737,
        897
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 弹性数据库池目前为预览版，仅适用于 SQL 数据库 V12 服务器。如果你有一个 SQL 数据库 V11 服务器，可以通过一个步骤<bpt id=\"p1\">[</bpt>使用 PowerShell 升级到 V12 并创建池<ept id=\"p1\">](/documentation/articles/sql-database-upgrade-server)</ept>。"
    },
    {
      "content": "这些示例使用了<bpt id=\"p1\">[</bpt>适用于 .NET 的 Azure SQL 数据库库<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.Management.Sql)</ept>。",
      "pos": [
        899,
        997
      ]
    },
    {
      "content": "为简明起见，我们已分开列出各个代码段，并在本文底部的某个部分中提供了一个示例控制台应用程序，其中结合了所有命令。",
      "pos": [
        998,
        1054
      ]
    },
    {
      "pos": [
        1056,
        1391
      ],
      "content": "适用于 .NET 的 Azure SQL 数据库库提供了基于 <bpt id=\"p1\">[</bpt>Azure 资源管理器<ept id=\"p1\">](/documentation/articles/resource-group-overview)</ept>的 API，用于包装<bpt id=\"p2\">[</bpt>基于资源管理器的 SQL 数据库 REST API<ept id=\"p2\">](https://msdn.microsoft.com/zh-cn/library/azure/mt163571.aspx)</ept>。此客户端库遵循基于资源管理器的客户端库的通用模式。资源管理器需要资源组，并要求使用 <bpt id=\"p3\">[</bpt>Azure Active Directory<ept id=\"p3\">](https://msdn.microsoft.com/zh-cn/library/azure/mt168838.aspx)</ept> (AAD) 进行身份验证。"
    },
    {
      "pos": [
        1401,
        1448
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 适用于 .NET 的 Azure SQL 数据库库目前以预览版提供。"
    },
    {
      "pos": [
        1456,
        1615
      ],
      "content": "如果你需要 Azure 订阅，只需单击本页顶部的“试用”，然后再回来完成本文的相关操作即可。如需 Visual Studio 的免费副本，请参阅 <bpt id=\"p1\">[</bpt>Visual Studio 下载<ept id=\"p1\">](https://www.visualstudio.com/downloads/download-visual-studio-vs)</ept>页。"
    },
    {
      "content": "安装所需的库",
      "pos": [
        1620,
        1626
      ]
    },
    {
      "pos": [
        1628,
        1724
      ],
      "content": "使用<bpt id=\"p1\">[</bpt>包管理器控制台<ept id=\"p1\">](http://docs.nuget.org/Consume/Package-Manager-Console)</ept>安装以下包，即可获取所需的管理库用于在 SQL 上进行开发："
    },
    {
      "content": "使用 Azure Active Directory 配置身份验证",
      "pos": [
        1912,
        1944
      ]
    },
    {
      "content": "在开始使用 C# 进行 SQL 开发之前，必须在 Azure 门户中完成一些任务。首先请通过设置所需的身份验证，使应用程序能够访问 REST API。",
      "pos": [
        1946,
        2021
      ]
    },
    {
      "pos": [
        2023,
        2173
      ],
      "content": "<bpt id=\"p1\">[</bpt>Azure 资源管理器 REST API<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn948464.aspx)</ept> 使用 Azure Active Directory 进行身份验证，而不是早期 Azure 服务管理 REST API 使用的证书。"
    },
    {
      "pos": [
        2175,
        2347
      ],
      "content": "若要基于当前的用户对客户端应用程序进行身份验证，你必须先将该应用程序注册到与创建了 Azure 资源的订阅关联的 AAD 域中。如果 Azure 订阅是以 Microsoft 帐户而不是工作或学校帐户创建的，则你已经有了默认的 AAD 域。可以在<bpt id=\"p1\">[</bpt>经典门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中完成应用程序的注册。"
    },
    {
      "content": "若要创建新应用程序并将其注册到正确的 Active Directory 中，请执行以下操作：",
      "pos": [
        2349,
        2395
      ]
    },
    {
      "pos": [
        2400,
        2440
      ],
      "content": "滚动左侧的菜单，找到 <bpt id=\"p1\">**</bpt>Active Directory<ept id=\"p1\">**</ept> 服务并将它打开。"
    },
    {
      "content": "C# SQL 数据库开发：Active Directory 设置",
      "pos": [
        2448,
        2480
      ]
    },
    {
      "pos": [
        2489,
        2523
      ],
      "content": "选择用于对应用程序进行身份验证的目录，然后单击该目录的<bpt id=\"p1\">**</bpt>名称<ept id=\"p1\">**</ept>。"
    },
    {
      "content": "选择目录。",
      "pos": [
        2531,
        2536
      ]
    },
    {
      "content": "在目录页上，单击“应用程序”。",
      "pos": [
        2545,
        2560
      ]
    },
    {
      "content": "单击“应用程序”。",
      "pos": [
        2568,
        2577
      ]
    },
    {
      "content": "单击“添加”以创建新的应用程序。",
      "pos": [
        2586,
        2602
      ]
    },
    {
      "content": "单击“添加”按钮：创建 C# 应用程序。",
      "pos": [
        2610,
        2630
      ]
    },
    {
      "content": "选择“添加我的组织正在开发的应用程序”。",
      "pos": [
        2639,
        2659
      ]
    },
    {
      "content": "提供应用的“名称”，然后选择“本机客户端应用程序”。",
      "pos": [
        2664,
        2690
      ]
    },
    {
      "content": "添加应用程序",
      "pos": [
        2698,
        2704
      ]
    },
    {
      "content": "提供“重定向 URI”。它不需要是实际的终结点，只要是有效的 URI 即可。",
      "pos": [
        2713,
        2751
      ]
    },
    {
      "content": "添加应用程序",
      "pos": [
        2759,
        2765
      ]
    },
    {
      "content": "完成创建应用，单击“配置”，然后复制“客户端 ID”（后面需要在代码中使用客户端 ID）。",
      "pos": [
        2774,
        2819
      ]
    },
    {
      "content": "获取客户端 ID",
      "pos": [
        2827,
        2835
      ]
    },
    {
      "content": "在页面底部单击“添加应用程序”。",
      "pos": [
        2845,
        2861
      ]
    },
    {
      "content": "选择“Microsoft 应用”。",
      "pos": [
        2865,
        2882
      ]
    },
    {
      "content": "选择“Azure 服务管理 API”，然后完成向导。",
      "pos": [
        2886,
        2912
      ]
    },
    {
      "content": "选择 API 之后，需要通过选择“访问 Azure 服务管理(预览)”，授予访问此 API 所需的特定权限。",
      "pos": [
        2916,
        2970
      ]
    },
    {
      "content": "设置权限",
      "pos": [
        2978,
        2982
      ]
    },
    {
      "content": "单击“保存”。",
      "pos": [
        2991,
        2998
      ]
    },
    {
      "content": "标识域名",
      "pos": [
        3006,
        3010
      ]
    },
    {
      "content": "代码中需要用到域名。轻松标识正确域名的一种方式是：",
      "pos": [
        3012,
        3037
      ]
    },
    {
      "pos": [
        3042,
        3088
      ],
      "content": "转到 <bpt id=\"p1\">[</bpt>Azure 门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>。"
    },
    {
      "pos": [
        3092,
        3169
      ],
      "content": "将鼠标悬停在右上角的名称上，并记下弹出窗口中显示的域。将以下代码段中的 <bpt id=\"p1\">**</bpt>domain.partner.onmschina.cn<ept id=\"p1\">**</ept> 替换为你帐户的值。"
    },
    {
      "content": "标识域名",
      "pos": [
        3177,
        3181
      ]
    },
    {
      "content": "其他 AAD 资源",
      "pos": [
        3191,
        3200
      ]
    },
    {
      "pos": [
        3204,
        3385
      ],
      "content": "在<bpt id=\"p1\">[</bpt>这篇有用的博客文章<ept id=\"p1\">](http://www.cloudidentity.com/blog/2013/09/12/active-directory-authentication-library-adal-v1-for-net-general-availability)</ept>中，可以找到有关使用 Azure Active Directory 进行身份验证的其他信息。"
    },
    {
      "content": "检索当前用户的访问令牌",
      "pos": [
        3392,
        3403
      ]
    },
    {
      "content": "客户端应用程序必须检索当前用户的应用程序访问令牌。当用户首次执行代码时，系统会提示用户输入其用户凭据，生成的令牌将在本地缓存。后续的执行将从缓存中检索令牌，并且仅在令牌已过期时才提示用户登录。",
      "pos": [
        3405,
        3501
      ]
    },
    {
      "pos": [
        4412,
        4483
      ],
      "content": "<ph id=\"ph1\">[AZURE.NOTE]</ph> 本文中的示例使用每个 API 请求的同步形式，并会一直阻塞，直到对基础服务的 REST 调用完成。有可用的异步方法。"
    },
    {
      "content": "创建资源组",
      "pos": [
        4490,
        4495
      ]
    },
    {
      "content": "使用资源管理器时，必须在资源组中创建所有资源。资源组是一个容器，包含应用程序的相关资源。若要创建弹性数据库池，现有资源组中需有一个 Azure SQL 数据库服务器。运行以下 C# 代码创建资源组：",
      "pos": [
        4497,
        4596
      ]
    },
    {
      "content": "创建服务器",
      "pos": [
        5128,
        5133
      ]
    },
    {
      "content": "弹性数据库池将包含在 Azure SQL 数据库服务器中，因此下一步就是创建服务器。服务器名称在所有 Azure SQL Server 中必须全局唯一，因此，如果该服务器名称已被使用，你将会收到错误。还必须指出的是，该命令可能需要数分钟才能运行完毕。为了使应用程序能够连接到服务器，你还必须在服务器上创建防火墙规则，以允许从客户端 IP 地址进行访问。",
      "pos": [
        5135,
        5311
      ]
    },
    {
      "content": "创建服务器防火墙规则，以允许对服务器进行访问",
      "pos": [
        6019,
        6041
      ]
    },
    {
      "pos": [
        6043,
        6183
      ],
      "content": "默认情况下，服务器没有防火墙规则，因此无法从任何位置连接到服务器。为了连接到服务器或者服务器上的任何数据库，必须定义<bpt id=\"p1\">[</bpt>防火墙规则<ept id=\"p1\">](/documentation/articles/sql-database-firewall-configure)</ept>以允许从客户端 IP 地址进行访问。"
    },
    {
      "pos": [
        6185,
        6365
      ],
      "content": "以下示例将创建一个服务器防火墙规则，用于实现从任何 IP 地址对服务器进行访问。建议你创建适当的 SQL 登录名和密码来保护数据库，并且不要依赖防火墙规则作为防范入侵的主要防御机制。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>管理 Azure SQL 数据库的数据库和登录名<ept id=\"p1\">](/documentation/articles/sql-database-manage-logins)</ept>。"
    },
    {
      "pos": [
        6867,
        6983
      ],
      "content": "若要允许其他 Azure 服务访问服务器，请添加一个防火墙规则并将 tartIpAddress 和 EndIpAddress 都设置为 0.0.0.0。请注意，这会允许来自<bpt id=\"p1\">*</bpt>任何<ept id=\"p1\">*</ept> Azure 订阅的 Azure 流量访问该服务器。"
    },
    {
      "content": "创建数据库",
      "pos": [
        6989,
        6994
      ]
    },
    {
      "content": "以下示例创建一个新的基本数据库；如果服务器上已有同名的数据库，将会更新现有的数据库。",
      "pos": [
        6996,
        7038
      ]
    },
    {
      "content": "创建弹性数据库池",
      "pos": [
        7931,
        7939
      ]
    },
    {
      "content": "以下示例将创建一个新的弹性数据库池：",
      "pos": [
        7941,
        7959
      ]
    },
    {
      "content": "更新弹性数据库池",
      "pos": [
        8693,
        8701
      ]
    },
    {
      "content": "以下示例将更新现有弹性数据库池的性能特征：",
      "pos": [
        8703,
        8724
      ]
    },
    {
      "content": "将现有数据库移入弹性数据库池",
      "pos": [
        9847,
        9861
      ]
    },
    {
      "pos": [
        9864,
        10017
      ],
      "content": "创建一个池后，你还可以使用 Transact-SQL 将现有数据库移入和移出一个池。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>弹性数据库池参考 - Transact-SQL<ept id=\"p1\">](/documentation/articles/sql-database-elastic-pool-reference/#Transact-SQL)</ept>。"
    },
    {
      "content": "以下示例将现有的 Azure SQL 数据库移到池中：",
      "pos": [
        10020,
        10047
      ]
    },
    {
      "content": "在弹性数据库池中创建新数据库",
      "pos": [
        11063,
        11077
      ]
    },
    {
      "pos": [
        11080,
        11231
      ],
      "content": "创建一个池后，你还可以使用 Transact-SQL 在池中创建新的弹性数据库。有关详细信息，请参阅<bpt id=\"p1\">[</bpt>弹性数据库池参考 - Transact-SQL<ept id=\"p1\">](/documentation/articles/sql-database-elastic-pool-reference/#Transact-SQL)</ept>。"
    },
    {
      "content": "以下示例将直接在池中创建一个新的数据库：",
      "pos": [
        11234,
        11254
      ]
    },
    {
      "content": "列出弹性数据库池中的所有数据库",
      "pos": [
        12024,
        12039
      ]
    },
    {
      "content": "以下示例将列出池中的所有数据库：",
      "pos": [
        12041,
        12057
      ]
    },
    {
      "content": "示例控制台应用程序",
      "pos": [
        12430,
        12439
      ]
    },
    {
      "content": "其他资源",
      "pos": [
        22097,
        22101
      ]
    },
    {
      "content": "SQL 数据库",
      "pos": [
        22105,
        22112
      ]
    },
    {
      "content": "Azure 资源管理 API",
      "pos": [
        22155,
        22169
      ]
    },
    {
      "pos": [
        22234,
        22306
      ],
      "content": "<bpt id=\"p1\">[</bpt>弹性数据库池参考<ept id=\"p1\">](/documentation/articles/sql-database-elastic-pool-reference)</ept>。"
    }
  ],
  "content": "<properties\n    pageTitle=\"C# 数据库开发：弹性数据库池 | Azure\"\n    description=\"使用 C# 数据库开发技术创建 Azure SQL 数据库弹性数据库池，以便可以在多个数据库之间共享资源。\"\n    services=\"sql-database\"\n    keywords=\"c# 数据库,sql 开发\"\n    documentationCenter=\"\"\n    authors=\"stevestein\"\n    manager=\"jeffreyg\"\n    editor=\"\"/>\n\n<tags\n    ms.service=\"sql-database\"\n    ms.date=\"12/01/2015\"\n    wacn.date=\"01/29/2016\"/>\n\n# C&#x23; 数据库开发：为 SQL 数据库创建和配置弹性数据库池\n\n> [AZURE.SELECTOR]\n- [Azure 门户](/documentation/articles/sql-database-elastic-pool-portal)\n- [C#](/documentation/articles/sql-database-elastic-pool-csharp)\n- [PowerShell](/documentation/articles/sql-database-elastic-pool-powershell)\n\n\n本文说明如何使用 C# 数据库开发技术，通过应用程序为 SQL 数据库创建[弹性数据库池](/documentation/articles/sql-database-elastic-pool)。\n\n> [AZURE.NOTE] 弹性数据库池目前为预览版，仅适用于 SQL 数据库 V12 服务器。如果你有一个 SQL 数据库 V11 服务器，可以通过一个步骤[使用 PowerShell 升级到 V12 并创建池](/documentation/articles/sql-database-upgrade-server)。\n\n这些示例使用了[适用于 .NET 的 Azure SQL 数据库库](https://www.nuget.org/packages/Microsoft.Azure.Management.Sql)。\n为简明起见，我们已分开列出各个代码段，并在本文底部的某个部分中提供了一个示例控制台应用程序，其中结合了所有命令。\n\n适用于 .NET 的 Azure SQL 数据库库提供了基于 [Azure 资源管理器](/documentation/articles/resource-group-overview)的 API，用于包装[基于资源管理器的 SQL 数据库 REST API](https://msdn.microsoft.com/zh-cn/library/azure/mt163571.aspx)。此客户端库遵循基于资源管理器的客户端库的通用模式。资源管理器需要资源组，并要求使用 [Azure Active Directory](https://msdn.microsoft.com/zh-cn/library/azure/mt168838.aspx) (AAD) 进行身份验证。\n\n<br>\n\n> [AZURE.NOTE] 适用于 .NET 的 Azure SQL 数据库库目前以预览版提供。\n\n<br>\n\n如果你需要 Azure 订阅，只需单击本页顶部的“试用”，然后再回来完成本文的相关操作即可。如需 Visual Studio 的免费副本，请参阅 [Visual Studio 下载](https://www.visualstudio.com/downloads/download-visual-studio-vs)页。\n\n## 安装所需的库\n\n使用[包管理器控制台](http://docs.nuget.org/Consume/Package-Manager-Console)安装以下包，即可获取所需的管理库用于在 SQL 上进行开发：\n\n    Install-Package Microsoft.Azure.Management.Sql –Pre\n    Install-Package Microsoft.Azure.Management.Resources –Pre\n    Install-Package Microsoft.Azure.Common.Authentication –Pre\n\n\n## 使用 Azure Active Directory 配置身份验证\n\n在开始使用 C# 进行 SQL 开发之前，必须在 Azure 门户中完成一些任务。首先请通过设置所需的身份验证，使应用程序能够访问 REST API。\n\n[Azure 资源管理器 REST API](https://msdn.microsoft.com/zh-cn/library/azure/dn948464.aspx) 使用 Azure Active Directory 进行身份验证，而不是早期 Azure 服务管理 REST API 使用的证书。\n\n若要基于当前的用户对客户端应用程序进行身份验证，你必须先将该应用程序注册到与创建了 Azure 资源的订阅关联的 AAD 域中。如果 Azure 订阅是以 Microsoft 帐户而不是工作或学校帐户创建的，则你已经有了默认的 AAD 域。可以在[经典门户](https://manage.windowsazure.cn)中完成应用程序的注册。\n\n若要创建新应用程序并将其注册到正确的 Active Directory 中，请执行以下操作：\n\n1. 滚动左侧的菜单，找到 **Active Directory** 服务并将它打开。\n\n    ![C# SQL 数据库开发：Active Directory 设置][1]\n\n2. 选择用于对应用程序进行身份验证的目录，然后单击该目录的**名称**。\n\n    ![选择目录。][4]\n\n3. 在目录页上，单击“应用程序”。\n\n    ![单击“应用程序”。][5]\n\n4. 单击“添加”以创建新的应用程序。\n\n    ![单击“添加”按钮：创建 C# 应用程序。][6]\n\n5. 选择“添加我的组织正在开发的应用程序”。\n\n5. 提供应用的“名称”，然后选择“本机客户端应用程序”。\n\n    ![添加应用程序][7]\n\n6. 提供“重定向 URI”。它不需要是实际的终结点，只要是有效的 URI 即可。\n\n    ![添加应用程序][8]\n\n7. 完成创建应用，单击“配置”，然后复制“客户端 ID”（后面需要在代码中使用客户端 ID）。\n\n    ![获取客户端 ID][9]\n\n\n1. 在页面底部单击“添加应用程序”。\n1. 选择“Microsoft 应用”。\n1. 选择“Azure 服务管理 API”，然后完成向导。\n2. 选择 API 之后，需要通过选择“访问 Azure 服务管理(预览)”，授予访问此 API 所需的特定权限。\n\n    ![设置权限][2]\n\n2. 单击“保存”。\n\n\n\n### 标识域名\n\n代码中需要用到域名。轻松标识正确域名的一种方式是：\n\n1. 转到 [Azure 门户](https://manage.windowsazure.cn)。\n2. 将鼠标悬停在右上角的名称上，并记下弹出窗口中显示的域。将以下代码段中的 **domain.partner.onmschina.cn** 替换为你帐户的值。\n\n    ![标识域名][3]\n\n\n\n**其他 AAD 资源**\n\n在[这篇有用的博客文章](http://www.cloudidentity.com/blog/2013/09/12/active-directory-authentication-library-adal-v1-for-net-general-availability)中，可以找到有关使用 Azure Active Directory 进行身份验证的其他信息。\n\n\n### 检索当前用户的访问令牌\n\n客户端应用程序必须检索当前用户的应用程序访问令牌。当用户首次执行代码时，系统会提示用户输入其用户凭据，生成的令牌将在本地缓存。后续的执行将从缓存中检索令牌，并且仅在令牌已过期时才提示用户登录。\n\n\n    /// <summary>\n    /// Prompts for user credentials when first run or if the cached credentials have expired.\n    /// </summary>\n    /// <returns>The access token from AAD.</returns>\n    private static AuthenticationResult GetAccessToken()\n    {\n        AuthenticationContext authContext = new AuthenticationContext\n            (\"https://login.chinacloudapi.cn/\" /* AAD URI */\n                + \"domain.partner.onmschina.cn\" /* Tenant ID or AAD domain */);\n\n        AuthenticationResult token = authContext.AcquireToken\n            (\"https://management.azure.com/\"/* the Azure Resource Management endpoint */,\n                \"aa00a0a0-a0a0-0000-0a00-a0a00000a0aa\" /* application client ID from AAD*/,\n        new Uri(\"urn:ietf:wg:oauth:2.0:oob\") /* redirect URI */,\n        PromptBehavior.Auto /* with Auto user will not be prompted if an unexpired token is cached */);\n\n        return token;\n    }\n\n\n\n> [AZURE.NOTE] 本文中的示例使用每个 API 请求的同步形式，并会一直阻塞，直到对基础服务的 REST 调用完成。有可用的异步方法。\n\n\n\n## 创建资源组\n\n使用资源管理器时，必须在资源组中创建所有资源。资源组是一个容器，包含应用程序的相关资源。若要创建弹性数据库池，现有资源组中需有一个 Azure SQL 数据库服务器。运行以下 C# 代码创建资源组：\n\n\n    // Create a resource management client\n    ResourceManagementClient resourceClient = new ResourceManagementClient(new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /*subscription id*/, token.AccessToken ));\n\n    // Resource group parameters\n    ResourceGroup resourceGroupParameters = new ResourceGroup()\n    {\n        Location = \"China East\"\n    };\n\n    //Create a resource group\n    var resourceGroupResult = resourceClient.ResourceGroups.CreateOrUpdate(\"resourcegroup-name\", resourceGroupParameters);\n\n\n\n## 创建服务器\n\n弹性数据库池将包含在 Azure SQL 数据库服务器中，因此下一步就是创建服务器。服务器名称在所有 Azure SQL Server 中必须全局唯一，因此，如果该服务器名称已被使用，你将会收到错误。还必须指出的是，该命令可能需要数分钟才能运行完毕。为了使应用程序能够连接到服务器，你还必须在服务器上创建防火墙规则，以允许从客户端 IP 地址进行访问。\n\n\n    // Create a SQL Database management client\n    SqlManagementClient sqlClient = new SqlManagementClient(new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* Subscription id*/, token.AccessToken));\n\n    // Create a server\n    ServerCreateOrUpdateParameters serverParameters = new ServerCreateOrUpdateParameters()\n    {\n        Location = \"China East\",\n        Properties = new ServerCreateOrUpdateProperties()\n        {\n            AdministratorLogin = \"ServerAdmin\",\n            AdministratorLoginPassword = \"P@ssword1\",\n            Version = \"12.0\"\n        }\n    };\n\n    var serverResult = sqlClient.Servers.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", serverParameters);\n\n\n\n\n## 创建服务器防火墙规则，以允许对服务器进行访问\n\n默认情况下，服务器没有防火墙规则，因此无法从任何位置连接到服务器。为了连接到服务器或者服务器上的任何数据库，必须定义[防火墙规则](/documentation/articles/sql-database-firewall-configure)以允许从客户端 IP 地址进行访问。\n\n以下示例将创建一个服务器防火墙规则，用于实现从任何 IP 地址对服务器进行访问。建议你创建适当的 SQL 登录名和密码来保护数据库，并且不要依赖防火墙规则作为防范入侵的主要防御机制。有关详细信息，请参阅[管理 Azure SQL 数据库的数据库和登录名](/documentation/articles/sql-database-manage-logins)。\n\n\n    // Create a firewall rule on the server to allow TDS connection\n    FirewallRuleCreateOrUpdateParameters firewallParameters = new FirewallRuleCreateOrUpdateParameters()\n    {\n        Properties = new FirewallRuleCreateOrUpdateProperties()\n        {\n            StartIpAddress = \"0.0.0.0\",\n            EndIpAddress = \"255.255.255.255\"\n        }\n    };\n\n    var firewallResult = sqlClient.FirewallRules.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"FirewallRule1\", firewallParameters);\n\n\n\n\n若要允许其他 Azure 服务访问服务器，请添加一个防火墙规则并将 tartIpAddress 和 EndIpAddress 都设置为 0.0.0.0。请注意，这会允许来自*任何* Azure 订阅的 Azure 流量访问该服务器。\n\n\n## 创建数据库\n\n以下示例创建一个新的基本数据库；如果服务器上已有同名的数据库，将会更新现有的数据库。\n\n        // Create a database\n\n        // Retrieve the server on which the database will be created\n        Server currentServer = sqlClient.Servers.Get(\"resourcegroup-name\", \"server-name\").Server;\n\n        // Create a database: configure create or update parameters and properties explicitly\n        DatabaseCreateOrUpdateParameters newDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n        {\n            Location = currentServer.Location,\n            Properties = new DatabaseCreateOrUpdateProperties()\n            {\n                Edition = \"Basic\",\n                RequestedServiceObjectiveName = \"Basic\",\n                MaxSizeBytes = 2147483648,\n                Collation = \"SQL_Latin1_General_CP1_CI_AS\"\n            }\n        };\n\n        var dbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", newDatabaseParameters);\n\n\n\n## 创建弹性数据库池\n\n以下示例将创建一个新的弹性数据库池：\n\n\n\n    // Create elastic pool: configure create or update parameters and properties explicitly\n    ElasticPoolCreateOrUpdateParameters newPoolParameters = new ElasticPoolCreateOrUpdateParameters()\n    {\n        Location = \"China East\",\n        Properties = new ElasticPoolCreateOrUpdateProperties()\n        {\n            Edition = \"Standard\",\n            Dtu = 100,  // alternatively set StorageMB, if both are specified they must agree based on the eDTU:storage ratio of the edition\n            DatabaseDtuMin = 0,\n            DatabaseDtuMax = 100\n         }\n    };\n\n    // Create the pool\n    var newPoolResponse = sqlClient.ElasticPools.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", newPoolParameters);\n\n\n## 更新弹性数据库池\n\n以下示例将更新现有弹性数据库池的性能特征：\n\n    // Retrieve existing pool properties\n    var currentPool = sqlClient.ElasticPools.Get(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\").ElasticPool;\n\n    // Configure create or update parameters with existing property values, override those to be changed.\n    ElasticPoolCreateOrUpdateParameters updatePoolParameters = new ElasticPoolCreateOrUpdateParameters()\n    {\n        Location = currentPool.Location,\n        Properties = new ElasticPoolCreateOrUpdateProperties()\n        {\n            Edition = currentPool.Properties.Edition,\n            DatabaseDtuMax = 50, /* Setting DatabaseDtuMax to 50 limits the eDTUs that any one database can consume */\n            DatabaseDtuMin = 10, /* Setting DatabaseDtuMin above 0 limits the number of databases that can be stored in the pool */\n            Dtu = (int)currentPool.Properties.Dtu,\n            StorageMB = currentPool.Properties.StorageMB,  /* For a Standard pool there is 1 GB of storage per eDTU. */\n        }\n    };\n\n    newPoolResponse = sqlClient.ElasticPools.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", newPoolParameters);\n\n\n\n## 将现有数据库移入弹性数据库池\n\n*创建一个池后，你还可以使用 Transact-SQL 将现有数据库移入和移出一个池。有关详细信息，请参阅[弹性数据库池参考 - Transact-SQL](/documentation/articles/sql-database-elastic-pool-reference/#Transact-SQL)。*\n\n以下示例将现有的 Azure SQL 数据库移到池中：\n\n\n    // Update database service objective to add the database to a pool\n\n    // Retrieve current database properties\n    currentDatabase = sqlClient.Databases.Get(\"resourcegroup-name\", \"server-name\", \"Database1\").Database;\n\n    // Configure create or update parameters with existing property values, override those to be changed.\n    DatabaseCreateOrUpdateParameters updatePooledDbParameters = new DatabaseCreateOrUpdateParameters()\n    {\n        Location = currentDatabase.Location,\n        Properties = new DatabaseCreateOrUpdateProperties()\n        {\n            Edition = \"Standard\",\n            RequestedServiceObjectiveName = \"ElasticPool\",\n            ElasticPoolName = \"ElasticPool1\",\n            MaxSizeBytes = currentDatabase.Properties.MaxSizeBytes,\n            Collation = currentDatabase.Properties.Collation,\n        }\n    };\n\n    // Update the database\n    var dbUpdateResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", updatePooledDbParameters);\n\n\n\n\n## 在弹性数据库池中创建新数据库\n\n*创建一个池后，你还可以使用 Transact-SQL 在池中创建新的弹性数据库。有关详细信息，请参阅[弹性数据库池参考 - Transact-SQL](/documentation/articles/sql-database-elastic-pool-reference/#Transact-SQL)。*\n\n以下示例将直接在池中创建一个新的数据库：\n\n\n    // Create a new database in the pool\n\n    // Create a database: configure create or update parameters and properties explicitly\n    DatabaseCreateOrUpdateParameters newPooledDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n    {\n        Location = currentServer.Location,\n        Properties = new DatabaseCreateOrUpdateProperties()\n        {\n            Edition = \"Standard\",\n            RequestedServiceObjectiveName = \"ElasticPool\",\n            ElasticPoolName = \"ElasticPool1\",\n            MaxSizeBytes = 268435456000, // 250 GB,\n            Collation = \"SQL_Latin1_General_CP1_CI_AS\"\n        }\n    };\n\n    var poolDbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database2\", newPooledDatabaseParameters);\n\n\n\n## 列出弹性数据库池中的所有数据库\n\n以下示例将列出池中的所有数据库：\n\n    //List databases in the elastic pool\n    DatabaseListResponse dbListInPool = sqlClient.ElasticPools.ListDatabases(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\");\n    Console.WriteLine(\"Databases in Elastic Pool {0}\", \"server-name.ElasticPool1\");\n    foreach (Database db in dbListInPool)\n    {\n        Console.WriteLine(\"  Database {0}\", db.Name);\n    }\n\n\n\n\n## 示例控制台应用程序\n\n\n    using Microsoft.Azure;\n    using Microsoft.Azure.Management.Resources;\n    using Microsoft.Azure.Management.Resources.Models;\n    using Microsoft.Azure.Management.Sql;\n    using Microsoft.Azure.Management.Sql.Models;\n    using Microsoft.IdentityModel.Clients.ActiveDirectory;\n    using System;\n    using System.Security;\n\n    namespace AzureSqlDatabaseRestApiExamples\n    {\n    class Program\n    {\n        /// <summary>\n        /// Prompts for user credentials when first run or if the cached credentials have expired.\n        /// </summary>\n        /// <returns>The access token from AAD.</returns>\n        private static AuthenticationResult GetAccessToken()\n        {\n            AuthenticationContext authContext = new AuthenticationContext\n                (\"https://login.chinacloudapi.cn/\" /* AAD URI */\n                + \"domain.partner.onmschina.cn\" /* Tenant ID or AAD domain */);\n\n            AuthenticationResult token = authContext.AcquireToken\n                (\"https://management.azure.com/\"/* the Azure Resource Management endpoint */,\n                \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* application client ID from AAD*/,\n                new Uri(\"urn:ietf:wg:oauth:2.0:oob\") /* redirect URI */,\n                PromptBehavior.Auto /* with Auto user will not be prompted if an unexpired token is cached */);\n\n            return token;\n        }\n\n        private static AuthenticationResult GetAccessTokenUsingUserCredentials(UserCredential userCredential)\n        {\n            AuthenticationContext authContext = new AuthenticationContext\n                (\"https://login.chinacloudapi.cn/\" /* AAD URI */\n                + \"YOU.partner.onmschina.cn\" /* Tenant ID or AAD domain */);\n\n            AuthenticationResult token = authContext.AcquireToken(\n                \"https://management.azure.com/\"/* the Azure Resource Management endpoint */,\n                \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* application client ID from AAD*/,\n                userCredential);\n\n            return token;\n        }\n        private static SecureString convertToSecureString(string secret)\n        {\n            var secureStr = new SecureString();\n            if (secret.Length > 0)\n            {\n                foreach (var c in secret.ToCharArray()) secureStr.AppendChar(c);\n            }\n            return secureStr;\n        }\n\n        static void Main(string[] args)\n        {\n            var token = GetAccessToken();\n\n            // Who am I?\n            Console.WriteLine(\"Identity is {0} {1}\", token.UserInfo.GivenName, token.UserInfo.FamilyName);\n            Console.WriteLine(\"Token expires on {0}\", token.ExpiresOn);\n            Console.WriteLine(\"\");\n\n            // Create a resource management client\n            ResourceManagementClient resourceClient = new ResourceManagementClient(new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /*subscription id*/, token.AccessToken));\n\n            // Resource group parameters\n            ResourceGroup resourceGroupParameters = new ResourceGroup()\n            {\n                Location = \"China East\"\n            };\n\n            //Create a resource group\n            var resourceGroupResult = resourceClient.ResourceGroups.CreateOrUpdate(\"resourcegroup-name\", resourceGroupParameters);\n\n            Console.WriteLine(\"Resource group {0} create or update completed with status code {1} \", resourceGroupResult.ResourceGroup.Name, resourceGroupResult.StatusCode);\n\n            //create a SQL Database management client\n            TokenCloudCredentials tokenCredentials = new TokenCloudCredentials(\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\" /* Subscription id*/, token.AccessToken);\n\n            SqlManagementClient sqlClient = new SqlManagementClient(tokenCredentials);\n\n            // Create a server\n            ServerCreateOrUpdateParameters serverParameters = new ServerCreateOrUpdateParameters()\n            {\n                Location = \"China East\",\n                Properties = new ServerCreateOrUpdateProperties()\n                {\n                    AdministratorLogin = \"ServerAdmin\",\n                    AdministratorLoginPassword = \"P@ssword1\",\n                    Version = \"12.0\"\n                }\n            };\n\n            var serverResult = sqlClient.Servers.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", serverParameters);\n\n            var serverGetResult = sqlClient.Servers.Get(\"resourcegroup-name\", \"server-name\");\n\n\n            Console.WriteLine(\"Server {0} create or update completed with status code {1}\", serverResult.Server.Name, serverResult.StatusCode);\n\n            // Create a firewall rule on the server to allow TDS connection\n\n            FirewallRuleCreateOrUpdateParameters firewallParameters = new FirewallRuleCreateOrUpdateParameters()\n            {\n                Properties = new FirewallRuleCreateOrUpdateProperties()\n                {\n                    StartIpAddress = \"0.0.0.0\",\n                    EndIpAddress = \"255.255.255.255\"\n                }\n            };\n\n            var firewallResult = sqlClient.FirewallRules.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"FirewallRule1\", firewallParameters);\n\n            Console.WriteLine(\"Firewall rule {0} create or update completed with status code {1}\", firewallResult.FirewallRule.Name, firewallResult.StatusCode);\n\n\n            var dbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database1\", newDatabaseParameters);\n\n            Console.WriteLine(\"Database {0} create or update completed with status code {1}. Service Objective {2} \", dbResponse.Database.Name, dbResponse.StatusCode, dbResponse.Database.Properties.ServiceObjective);\n\n\n           // Create an elastic database pool\n            var newPoolResponse = sqlClient.ElasticPools.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", newPoolParameters);\n\n            Console.WriteLine(\"Elastic pool {0} create or update completed with status code {1}.\", newPoolResponse.ElasticPool.Name, newPoolResponse.StatusCode);\n\n            // Update pool: retrieve existing pool properties\n            var currentPool = sqlClient.ElasticPools.Get(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\").ElasticPool;\n\n            // Update pool: configure create or update parameters with existing property values, override those to be changed.\n            ElasticPoolCreateOrUpdateParameters updatePoolParameters = new ElasticPoolCreateOrUpdateParameters()\n            {\n                Location = currentPool.Location,\n                Properties = new ElasticPoolCreateOrUpdateProperties()\n                {\n                    Edition = currentPool.Properties.Edition,\n                    DatabaseDtuMax = 50, /* Setting DatabaseDtuMax to 50 limits the eDTUs that any one database can consume */\n                    DatabaseDtuMin = 10, /* Setting DatabaseDtuMin above 0 limits the number of databases that can be stored in the pool */\n                    Dtu = (int)currentPool.Properties.Dtu,\n                    StorageMB = currentPool.Properties.StorageMB,  /* For a Standard pool there is 1 GB of storage per eDTU. */\n                }\n            };\n            newPoolResponse = sqlClient.ElasticPools.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"ElasticPool1\", newPoolParameters);\n\n            Console.WriteLine(\"Elastic pool {0} create or update completed with status code {1}.\", newPoolResponse.ElasticPool.Name, newPoolResponse.StatusCode);\n\n            // Update a databases service objective to add the database to a pool\n\n            // Update database: retrieve current database properties\n            currentDatabase = sqlClient.Databases.Get(\"resourcegroup-name\", \"server-name\", \"Database1\").Database;\n\n            // Update database: configure create or update parameters with existing property values, override those to be changed.\n            DatabaseCreateOrUpdateParameters updatePooledDbParameters = new DatabaseCreateOrUpdateParameters()\n            {\n                Location = currentDatabase.Location,\n                Properties = new DatabaseCreateOrUpdateProperties()\n                {\n                    Edition = \"Standard\",\n                    RequestedServiceObjectiveName = \"ElasticPool\",\n                    ElasticPoolName = \"ElasticPool1\",\n                    MaxSizeBytes = currentDatabase.Properties.MaxSizeBytes,\n                    Collation = currentDatabase.Properties.Collation,\n                }\n            };\n\n\n            // Create a new database in the pool\n\n            // Create a database: configure create or update parameters and properties explicitly\n            DatabaseCreateOrUpdateParameters newPooledDatabaseParameters = new DatabaseCreateOrUpdateParameters()\n            {\n                Location = currentServer.Location,\n                Properties = new DatabaseCreateOrUpdateProperties()\n                {\n                    Edition = \"Standard\",\n                    RequestedServiceObjectiveName = \"ElasticPool\",\n                    ElasticPoolName = \"ElasticPool1\",\n                    MaxSizeBytes = 268435456000, // 250 GB,\n                    Collation = \"SQL_Latin1_General_CP1_CI_AS\"\n                }\n            };\n\n            var poolDbResponse = sqlClient.Databases.CreateOrUpdate(\"resourcegroup-name\", \"server-name\", \"Database2\", newPooledDatabaseParameters);\n\n            Console.WriteLine(\"Database {0} create or update completed with status code {1}. Service Objective: {2}({3}) \", poolDbResponse.Database.Name, poolDbResponse.StatusCode, poolDbResponse.Database.Properties.ServiceObjective, poolDbResponse.Database.Properties.ElasticPoolName);\n      }\n    }\n\n\n\n\n\n\n\n## 其他资源\n\n\n[SQL 数据库](/documentation/services/sql-databases)\n\n[Azure 资源管理 API](https://msdn.microsoft.com/zh-cn/library/azure/dn948464.aspx)\n\n[弹性数据库池参考](/documentation/articles/sql-database-elastic-pool-reference)。\n\n\n<!--Image references-->\n[1]: ./media/sql-database-elastic-pool-csharp/aad.png\n[2]: ./media/sql-database-elastic-pool-csharp/permissions.png\n[3]: ./media/sql-database-elastic-pool-csharp/getdomain.png\n[4]: ./media/sql-database-elastic-pool-csharp/aad2.png\n[5]: ./media/sql-database-elastic-pool-csharp/aad-applications.png\n[6]: ./media/sql-database-elastic-pool-csharp/add.png\n[7]: ./media/sql-database-elastic-pool-csharp/add-application.png\n[8]: ./media/sql-database-elastic-pool-csharp/add-application2.png\n[9]: ./media/sql-database-elastic-pool-csharp/clientid.png\n\n<!---HONumber=Mooncake_0118_2016-->\n"
}