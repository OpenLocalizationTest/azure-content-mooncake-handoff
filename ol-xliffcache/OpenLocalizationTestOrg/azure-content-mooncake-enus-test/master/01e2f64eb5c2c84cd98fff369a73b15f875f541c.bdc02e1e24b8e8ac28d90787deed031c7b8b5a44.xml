{"nodes":[{"content":"在 Azure Web 应用中创建 .NET Web 作业 | Azure","pos":[27,64]},{"content":"使用 ASP.NET MVC 和 Azure 创建多层应用。","pos":[83,113]},{"content":"前端在 Azure 的 Web 应用中运行，后端以 Web 作业的形式运行。","pos":[113,151]},{"content":"应用程序使用实体框架、SQL 数据库和 Azure 存储队列和 Blob。","pos":[151,188]},{"content":"在 Azure Web 应用中创建 .NET Web 作业","pos":[411,440]},{"pos":[442,550],"content":"本教程说明了如何为使用 <bpt id=\"p1\">[</bpt>WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 的简单多层 ASP.NET MVC 5 应用程序编写代码。","source":"本教程说明了如何为使用 [WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk) 的简单多层 ASP.NET MVC 5 应用程序编写代码。"},{"content":"<bpt id=\"p1\">[</bpt>WebJobs SDK<ept id=\"p1\">](/documentation/articles/websites-webjobs-resources)</ept> 的用途是简化针对 Web 作业可以执行的常见任务（例如，图像处理、队列处理、RSS 聚合、文件维护和发送电子邮件）编写的代码。","pos":[552,681],"source":"[WebJobs SDK](/documentation/articles/websites-webjobs-resources) 的用途是简化针对 Web 作业可以执行的常见任务（例如，图像处理、队列处理、RSS 聚合、文件维护和发送电子邮件）编写的代码。"},{"content":"WebJobs SDK 中的内置功能使用 Azure 存储空间和 Service Bus，用于计划任务和处理错误，以及用于许多其他常见方案。","pos":[681,751]},{"content":"此外，它还设计为可扩展并且有<bpt id=\"p1\">[</bpt>用于扩展的开源存储库<ept id=\"p1\">](https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Binding-Extensions-Overview)</ept>。","pos":[751,866],"source":"此外，它还设计为可扩展并且有[用于扩展的开源存储库](https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Binding-Extensions-Overview)。"},{"content":"示例应用程序是一个广告公告板。","pos":[868,883]},{"content":"用户可以上载广告的图像，后端进程会将图像转换成缩略图。","pos":[883,910]},{"content":"广告列表页将显示缩略图，而广告详细信息页则显示完整大小的图像。","pos":[910,941]},{"content":"下面是屏幕快照：","pos":[941,949]},{"content":"广告列表","pos":[953,957]},{"pos":[1047,1051],"content":"先决条件"},{"pos":[1053,1171],"content":"本教程假设你知道如何处理 Visual Studio 中的 <bpt id=\"p1\">[</bpt>ASP.NET MVC 5<ept id=\"p1\">](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)</ept> 项目。","source":"本教程假设你知道如何处理 Visual Studio 中的 [ASP.NET MVC 5](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started) 项目。"},{"content":"本教程是针对 Visual Studio 2013 编写的。","pos":[1173,1203]},{"content":"如果你尚未安装 Visual Studio，当你安装 Azure SDK for .NET 时会自动安装 Visual Studio。","pos":[1203,1270]},{"pos":[1272,1462],"content":"本教程可以配合 Visual Studio 2015 使用，但在本地运行应用程序之前，必须将 Web.config 和 App.config 文件中 SQL Server LocalDB 连接字符串的 <ph id=\"ph1\">`Data Source`</ph> 部分从 <ph id=\"ph2\">`Data Source=(localdb)\\v11.0`</ph> 更改为 <ph id=\"ph3\">`Data Source=(LocalDb)\\MSSQLLocalDB`</ph>。","source":"本教程可以配合 Visual Studio 2015 使用，但在本地运行应用程序之前，必须将 Web.config 和 App.config 文件中 SQL Server LocalDB 连接字符串的 `Data Source` 部分从 `Data Source=(localdb)\\v11.0` 更改为 `Data Source=(LocalDb)\\MSSQLLocalDB`。"},{"pos":[1552,1556],"content":"学习内容"},{"content":"本教程说明如何执行以下任务：","pos":[1558,1572]},{"content":"通过安装 Azure SDK 来使计算机进行 Azure 开发。","pos":[1576,1608]},{"content":"创建一个控制台应用程序项目，当你部署关联的 Web 项目时，该应用程序项目将自动部署为 Azure Web 作业。","pos":[1611,1668]},{"content":"在开发计算机上本地测试 WebJobs SDK 后端。","pos":[1671,1698]},{"content":"使用 WebJobs 后端将应用程序发布到 Azure 中的 Web 应用。","pos":[1701,1739]},{"content":"上载文件并将其存储在 Azure Blob 服务中。","pos":[1742,1768]},{"content":"使用 Azure WebJobs SDK 来处理 Azure 存储队列和 Blob。","pos":[1771,1813]},{"pos":[1841,1849],"content":"应用程序体系结构"},{"pos":[1851,2045],"content":"示例应用程序使用<bpt id=\"p1\">[</bpt>以队列为中心的工作模式<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)</ept>来减轻创建缩略图到后端进程的 CPU 密集型工作。","source":"示例应用程序使用[以队列为中心的工作模式](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)来减轻创建缩略图到后端进程的 CPU 密集型工作。"},{"content":"该应用程序将广告存储在 SQL 数据库中，通过使用实体框架 Code First 创建表和访问数据。","pos":[2047,2097]},{"content":"对于每个广告，数据库存储两个 URL，一个用于完全尺寸的图像，一个用于缩略图。","pos":[2097,2136]},{"content":"广告表","pos":[2140,2143]},{"content":"当用户上载图像时， Web 应用将在 <bpt id=\"p1\">[</bpt>Azure Blob<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage)</ept> 中存储图像，并将广告信息存储在具有指向 Blob 的 URL 的数据库中。","pos":[2207,2423],"source":"当用户上载图像时， Web 应用将在 [Azure Blob](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage) 中存储图像，并将广告信息存储在具有指向 Blob 的 URL 的数据库中。"},{"content":"同时，它将一条消息写入 Azure 队列。","pos":[2423,2444]},{"content":"在作为 Azure Web 作业运行的后端进程中，WebJobs SDK 将轮询新消息的队列。","pos":[2444,2491]},{"content":"显示新消息时，Web 作业将创建该图像的缩略图，并为该广告更新缩略图 URL 数据库字段。","pos":[2491,2536]},{"content":"下图介绍应用程序各部分之间如何交互：","pos":[2536,2554]},{"content":"Contoso 广告体系结构","pos":[2558,2572]},{"content":"本教程中的说明不适用于 Azure SDK for .NET 2.7.1 或更高版本。","pos":[2713,2756]},{"pos":[2781,2794],"content":"创建 Azure 存储帐户"},{"content":"Azure 存储帐户提供在云中存储队列和 Blob 数据的资源。","pos":[2796,2828]},{"content":"它还由 WebJobs SDK 用来存储仪表板的日志记录数据。","pos":[2828,2859]},{"content":"在实际应用程序中，你通常会为记录数据的应用程序数据创建单独的帐户，并且为生产数据的测试数据创建单独帐户。","pos":[2861,2913]},{"content":"对于本教程，你将只使用一个帐户。","pos":[2913,2929]},{"content":"在 Visual Studio 中打开“服务器资源管理器”窗口。","pos":[2934,2966]},{"content":"右键单击“Azure”节点，然后单击“连接到 Azure”。","pos":[2971,3001]},{"content":"连接到 Azure","pos":[3009,3018]},{"content":"使用你的 Azure 凭据登录。","pos":[3084,3100]},{"content":"在 Azure 节点下右键单击“存储”，然后单击“创建存储帐户”。","pos":[3105,3138]},{"content":"创建存储帐户","pos":[3146,3152]},{"content":"在“创建存储帐户”对话框中，输入存储帐户的名称。","pos":[3222,3246]},{"content":"该名称必须是唯一的（其他 Azure 存储帐户都不可以使用该名称）。","pos":[3252,3286]},{"content":"如果输入的名称已被使用，你可以进行更改。","pos":[3286,3306]},{"pos":[3312,3357],"content":"用于访问存储帐户的 URL 为 <bpt id=\"p1\">*</bpt>{名称}<ept id=\"p1\">*</ept>.core.chinacloudapi.cn。","source":"用于访问存储帐户的 URL 为 *{名称}*.core.chinacloudapi.cn。"},{"content":"将“区域或地缘组”设置为离你最近的区域。","pos":[3362,3382]},{"content":"此设置指定哪个 Azure 数据中心将托管你的存储帐户。","pos":[3388,3416]},{"content":"对于本教程，你做的选择不会带来明显的差异。","pos":[3416,3437]},{"content":"但是，对于生产 Web 应用，你希望 Web 服务器和存储帐户处于同一区域，以最大程度地减少延迟和数据传出费用。","pos":[3437,3493]},{"content":"（稍后要创建的） Web 应用数据中心应尽可能靠近访问 Web 应用的浏览器，以最大程度地减少延迟。","pos":[3493,3543]},{"content":"将“复制”下拉列表设置为“本地冗余”。","pos":[3548,3567]},{"content":"为存储帐户启用地域复制时，会将存储内容复制到辅助数据中心，这样就能够在主要位置发生重大灾难时将故障转移到该位置。","pos":[3573,3629]},{"content":"地域复制可能会产生额外的成本。","pos":[3629,3644]},{"content":"对于测试和开发帐户，你通常不希望因为地域复制而付款。","pos":[3644,3670]},{"content":"有关详细信息，请参阅<bpt id=\"p1\">[</bpt>创建、管理或删除存储帐户<ept id=\"p1\">](/documentation/articles/storage-create-storage-account#replication-options)</ept>。","pos":[3670,3771],"source":"有关详细信息，请参阅[创建、管理或删除存储帐户](/documentation/articles/storage-create-storage-account#replication-options)。"},{"content":"单击“创建”。","pos":[3776,3783]},{"content":"新的存储帐户","pos":[3791,3797]},{"pos":[3888,3894],"content":"下载应用程序"},{"pos":[3899,3983],"content":"下载并解压缩<bpt id=\"p1\">[</bpt>已完成的解决方案<ept id=\"p1\">](http://code.msdn.microsoft.com/Simple-Azure-Website-with-b4391eeb)</ept>。","source":"下载并解压缩[已完成的解决方案](http://code.msdn.microsoft.com/Simple-Azure-Website-with-b4391eeb)。"},{"content":"启动 Visual Studio。","pos":[3988,4005]},{"content":"从“文件”菜单中，选择“打开”&gt;“项目/解决方案”，导航到下载解决方案的位置，然后打开解决方案文件。","pos":[4010,4060],"source":"从“文件”菜单中，选择“打开”>“项目/解决方案”，导航到下载解决方案的位置，然后打开解决方案文件。"},{"content":"按 CTRL+SHIFT+B 生成解决方案。","pos":[4065,4087]},{"content":"默认情况下，Visual Studio 会自动还原 NuGet 包的内容，它未包括在 <bpt id=\"p1\">*</bpt>.zip<ept id=\"p1\">*</ept> 文件中。","pos":[4093,4147],"source":"默认情况下，Visual Studio 会自动还原 NuGet 包的内容，它未包括在 *.zip* 文件中。"},{"content":"如果包未还原，请转到“管理解决方案的 NuGet 程序包”对话框并单击右上角的“还原”按钮手动进行安装。","pos":[4147,4199]},{"content":"在“解决方案资源管理器”中，请确保选择“ContosoAdsWeb”作为启动项目。","pos":[4204,4245]},{"pos":[4369,4385],"content":"将应用程序配置为使用你的存储帐户"},{"pos":[4390,4432],"content":"打开 ContosoAdsWeb 项目中的应用程序 <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> 文件。","source":"打开 ContosoAdsWeb 项目中的应用程序 *Web.config* 文件。"},{"content":"该文件包含一个用于处理 Blob 和队列的 SQL 连接字符串和 Azure 存储连接字符串。","pos":[4438,4485]},{"pos":[4491,4591],"content":"SQL 连接字符串指向 <bpt id=\"p1\">[</bpt>SQL Server Express LocalDB<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/hh510202.aspx)</ept> 数据库。","source":"SQL 连接字符串指向 [SQL Server Express LocalDB](http://msdn.microsoft.com/zh-cn/library/hh510202.aspx) 数据库。"},{"content":"存储连接字符串是一个示例，其中包含存储帐户名称和访问密钥的占位符。","pos":[4597,4630]},{"content":"你需要将此字符串替换为包含你的存储帐户的名称和密钥的连接字符串。","pos":[4630,4662]},{"pos":[4668,5141],"content":"<pre class=\"prettyprint\">&lt;connectionStrings&gt;\n   &lt;add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\" providerName=\"System.Data.SqlClient\" /&gt;\n   &lt;add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/&gt;\n &lt;/connectionStrings&gt;</pre>","leadings":["","   ","   ","   "],"nodes":[{"content":"connectionStrings<ph id=\"ph1\">&amp;gt;\n</ph>   <ph id=\"ph2\">&amp;lt;</ph>add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\" providerName=\"System.Data.SqlClient\" /<ph id=\"ph3\">&amp;gt;\n</ph>   <ph id=\"ph4\">&amp;lt;</ph>add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<ph id=\"ph5\">&lt;mark&gt;</ph>[accountname]<ph id=\"ph6\">&lt;/mark&gt;</ph>;AccountKey=<ph id=\"ph7\">&lt;mark&gt;</ph>[accesskey]<ph id=\"ph8\">&lt;/mark&gt;</ph>\"/<ph id=\"ph9\">&amp;gt;\n</ph> <ph id=\"ph10\">&amp;lt;</ph>/connectionStrings","pos":[29,454],"source":"connectionStrings&gt;\n   &lt;add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\" providerName=\"System.Data.SqlClient\" /&gt;\n   &lt;add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/&gt;\n &lt;/connectionStrings"}]},{"content":"存储连接字符串命名为 AzureWebJobsStorage，因为这是 WebJobs SDK 默认情况下使用的名称。","pos":[5147,5206]},{"content":"此处之所以使用相同的名称，是因为你只需在 Azure 环境中设置一个连接字符串值。","pos":[5206,5247]},{"content":"在“服务器资源管理器”中，右键单击存储帐户下的“存储”节点，然后单击“属性”。","pos":[5252,5291]},{"content":"单击存储帐户属性","pos":[5299,5307]},{"content":"在“属性”窗口中，单击“存储帐户密钥”，然后单击省略号。","pos":[5375,5403]},{"content":"新的存储帐户","pos":[5411,5417]},{"content":"复制“连接字符串”。","pos":[5487,5497]},{"content":"“存储帐户密钥”对话框","pos":[5505,5516]},{"content":"将 <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> 文件中的存储连接字符串替换为你刚刚复制的连接字符串。","pos":[5580,5621],"source":"将 *Web.config* 文件中的存储连接字符串替换为你刚刚复制的连接字符串。"},{"content":"在粘贴之前，请确保选择引号括住的所有内容，但不包括引号本身。","pos":[5621,5651]},{"pos":[5656,5697],"content":"打开 ContosoAdsWebJob 项目中的 <bpt id=\"p1\">*</bpt>App.config<ept id=\"p1\">*</ept> 文件。","source":"打开 ContosoAdsWebJob 项目中的 *App.config* 文件。"},{"pos":[5703,6838],"content":"此文件包含两个存储连接字符串，一个用于应用程序数据，另一个用于日志记录。可以对应用程序数据和日志记录使用单独的存储帐户，并且可以[对数据使用多个存储帐户](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)。对于本教程，你将使用单个存储帐户。连接字符串包含存储帐户密钥的占位符。\n <pre class=\"prettyprint\">&lt;configuration&gt; <br/>\n     &lt;connectionStrings&gt; <br/>\n         &lt;add name=\"AzureWebJobsDashboard\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/&gt; <br/>\n         &lt;add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/&gt; <br/>\n         &lt;add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)\\\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\"/&gt; <br/>\n     &lt;/connectionStrings&gt;<br/>\n     &lt;startup&gt; <br/>\n         &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" /&gt; <br/>\n     &lt;/startup&gt; <br/>\n&lt;/configuration&gt;</pre>","leadings":["","   ","   ","   ","   ","   ","   ","   ","   ","   ",""],"nodes":[{"content":"此文件包含两个存储连接字符串，一个用于应用程序数据，另一个用于日志记录。可以对应用程序数据和日志记录使用单独的存储帐户，并且可以[对数据使用多个存储帐户](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)。对于本教程，你将使用单个存储帐户。连接字符串包含存储帐户密钥的占位符。\n","pos":[0,258],"nodes":[{"content":"此文件包含两个存储连接字符串，一个用于应用程序数据，另一个用于日志记录。","pos":[0,36]},{"content":"可以对应用程序数据和日志记录使用单独的存储帐户，并且可以<bpt id=\"p1\">[</bpt>对数据使用多个存储帐户<ept id=\"p1\">](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)</ept>。","pos":[36,222],"source":"可以对应用程序数据和日志记录使用单独的存储帐户，并且可以[对数据使用多个存储帐户](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)。"},{"content":"对于本教程，你将使用单个存储帐户。","pos":[222,239]},{"content":"连接字符串包含存储帐户密钥的占位符。","pos":[239,257]}]},{"content":"configuration","pos":[288,301]},{"content":"connectionStrings","pos":[321,338]},{"content":"add name=\"AzureWebJobsDashboard\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<ph id=\"ph1\">&lt;mark&gt;</ph>[accountname]<ph id=\"ph2\">&lt;/mark&gt;</ph>;AccountKey=<ph id=\"ph3\">&lt;mark&gt;</ph>[accesskey]<ph id=\"ph4\">&lt;/mark&gt;</ph>\"/","pos":[362,520],"source":"add name=\"AzureWebJobsDashboard\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/"},{"content":"add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<ph id=\"ph1\">&lt;mark&gt;</ph>[accountname]<ph id=\"ph2\">&lt;/mark&gt;</ph>;AccountKey=<ph id=\"ph3\">&lt;mark&gt;</ph>[accesskey]<ph id=\"ph4\">&lt;/mark&gt;</ph>\"/","pos":[544,700],"source":"add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/"},{"content":"add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)<ph id=\"ph1\">\\\\</ph>v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\"/","pos":[724,887],"source":"add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)\\\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\"/"},{"content":"/connectionStrings","pos":[907,925]},{"content":"startup","pos":[944,951]},{"content":"supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" /","pos":[975,1041]},{"content":"/startup","pos":[1061,1069]},{"content":"/configuration","pos":[1084,1098]}]},{"content":"默认情况下，WebJobs SDK 将查找名为 AzureWebJobsStorage 和 AzureWebJobsDashboard 的连接字符串。","pos":[6844,6919]},{"content":"作为替代方法，你可以根据需要<bpt id=\"p1\">[</bpt>存储该连接字符串，并显式将它传递给 <ph id=\"ph1\">`JobHost`</ph> 对象<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#config)</ept>。","pos":[6919,7048],"source":"作为替代方法，你可以根据需要[存储该连接字符串，并显式将它传递给 `JobHost` 对象](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#config)。"},{"content":"将两个存储连接字符串替换为先前复制的连接字符串。","pos":[7053,7077]},{"content":"保存所做更改。","pos":[7082,7089]},{"pos":[7110,7119],"content":"在本地运行应用程序"},{"content":"若要启动应用程序的 Web 前端，请按 CTRL+F5。","pos":[7124,7152]},{"content":"默认浏览器将打开主页。","pos":[7158,7169]},{"content":"（Web 项目将会运行，因为你已将它设为启动项目。","pos":[7169,7194]},{"content":"）","pos":[7194,7195]},{"content":"Contoso 广告主页","pos":[7203,7215]},{"content":"若要启动应用程序的 Web 作业后端，请在“解决方案资源管理器”中右键单击 ContosoAdsWebJob 项目，然后单击“调试”&gt;“启动新实例”。","pos":[7279,7354],"source":"若要启动应用程序的 Web 作业后端，请在“解决方案资源管理器”中右键单击 ContosoAdsWebJob 项目，然后单击“调试”>“启动新实例”。"},{"content":"此时将打开一个控制台应用程序窗口，其中显示了指示 WebJobs SDK JobHost 对象已开始运行的日志记录消息。","pos":[7360,7420]},{"content":"显示后端正在运行的控制台应用程序窗口","pos":[7428,7446]},{"content":"在浏览器中，单击“创建一个广告”。","pos":[7520,7537]},{"content":"输入一些测试数据并选择一个要上载的图像，然后单击“创建”。","pos":[7542,7571]},{"content":"创建页面","pos":[7579,7583]},{"content":"该应用程序转到索引页，但它不显示新广告的缩略图，因为该处理尚未发生。","pos":[7650,7684]},{"content":"在经过片刻等待后，控制台应用程序窗口中的日志记录消息将显示已收到并已处理某个队列消息。","pos":[7690,7733]},{"content":"显示队列消息已处理的控制台应用程序窗口","pos":[7741,7760]},{"content":"在查看控制台应用程序窗口中的日志记录消息后，请刷新“索引”页以查看缩略图。","pos":[7831,7868]},{"content":"索引页面","pos":[7876,7880]},{"content":"单击广告的“详细信息”查看实际尺寸的图像。","pos":[7944,7965]},{"content":"详细信息页","pos":[7973,7978]},{"content":"你已在本地计算机上运行应用程序，并且该应用程序正在使用计算机上的 SQL Server 数据库，但在处理云中的队列和 Blob。","pos":[8042,8106]},{"content":"在下一部分，你将使用云数据库以及云 Blob 和队列在云中运行该应用程序。","pos":[8106,8143]},{"pos":[8171,8180],"content":"在云中运行应用程序"},{"content":"你将执行以下步骤，以便在云中运行应用程序：","pos":[8182,8203]},{"content":"部署到 Web 应用。","pos":[8207,8218]},{"content":"Visual Studio 将自动在 Azure Web 应用中创建一个新的 Web 应用和一个 SQL 数据库实例。","pos":[8218,8277]},{"content":"将 Web 应用配置为使用你的 Azure SQL 数据库和存储帐户。","pos":[8280,8315]},{"content":"在云中运行时创建一些广告后，请查看 WebJobs SDK 仪表板，以了解该仪表板提供的丰富功能。","pos":[8317,8366]},{"content":"部署到 Web 应用","pos":[8372,8382]},{"content":"关闭浏览器和控制台应用程序窗口。","pos":[8387,8403]},{"pos":[8408,8474],"content":"转到 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](http://manage.windowsazure.cn/)</ept>，然后单击具有数据库的 Web 应用。","source":"转到 [Azure 管理门户](http://manage.windowsazure.cn/)，然后单击具有数据库的 Web 应用。"},{"pos":[8479,8505],"content":"转到 Web 应用的<bpt id=\"p1\">**</bpt>仪表板<ept id=\"p1\">**</ept>，下载发布配置文件","source":"转到 Web 应用的**仪表板**，下载发布配置文件"},{"content":"在“解决方案资源管理器”中，右键单击 ContosoAdsWeb 项目，然后单击“发布”。","pos":[8510,8555]},{"content":"在“发布 Web”向导的“配置文件”步骤中，单击“导入”。","pos":[8560,8589]},{"content":"选择在上一步中下载的配置文件。","pos":[8589,8604]},{"content":"在“发布 Web”向导的“连接”步骤中，单击“下一步”。","pos":[8610,8638]},{"content":"连接步骤","pos":[8646,8650]},{"content":"在“设置”步骤中，清除“在运行时使用此连接字符串”复选框，然后单击“下一步”。","pos":[8719,8758]},{"content":"设置步骤","pos":[8766,8770]},{"content":"你不需要使用发布对话框来设置 SQL 连接字符串，因为你稍后将在 Azure 环境中设置该值。","pos":[8843,8890]},{"content":"你可以忽略此页上的警告。","pos":[8896,8908]},{"content":"通常，在 Azure 中运行时使用的存储帐户不同于在本地运行时使用的存储帐户，但对于本教程，你将在两个环境中使用相同的存储帐户。","pos":[8916,8980]},{"content":"因此，不需要转换 AzureWebJobsStorage 连接字符串。","pos":[8980,9015]},{"content":"即使你确实想要在云中使用不同的存储帐户，也无需转换连接字符串，因为应用程序在 Azure 中运行时将使用 Azure 环境设置。","pos":[9015,9079]},{"content":"稍后你将在教程中看到这种情况。","pos":[9079,9094]},{"content":"对于本教程，你不需要用于 ContosoAdsContext 数据库的数据模型进行更改，因此，无需使用 Entity Framework Code First 迁移进行部署。","pos":[9102,9189]},{"content":"当应用程序首次尝试访问 SQL 数据时，Code First 将自动创建一个新的数据库。","pos":[9189,9233]},{"content":"对于本教程，“文件发布选项”下的选项默认值是合适的。","pos":[9239,9265]},{"content":"在“预览”步骤中，单击“开始预览”。","pos":[9271,9289]},{"content":"单击“开始预览”","pos":[9297,9305]},{"content":"你可以忽略有关未发布数据库的警告。","pos":[9377,9394]},{"content":"Entity Framework Code First 将创建数据库；不需要发布该数据库。","pos":[9394,9439]},{"pos":[9445,9519],"content":"预览窗口显示 Web 作业项目中的二进制文件和配置文件将复制到 Web 应用的 <bpt id=\"p1\">*</bpt>app<ph id=\"ph1\">\\_</ph>data<ph id=\"ph2\">\\\\</ph>jobs<ph id=\"ph3\">\\\\</ph>continuous<ept id=\"p1\">*</ept> 文件夹。","source":"预览窗口显示 Web 作业项目中的二进制文件和配置文件将复制到 Web 应用的 *app\\_data\\\\jobs\\\\continuous* 文件夹。"},{"content":"预览窗口中的 Web 作业文件","pos":[9527,9542]},{"content":"单击“发布”。","pos":[9617,9624]},{"content":"Visual Studio 将部署该应用程序，并在浏览器中打开主页 URL。","pos":[9630,9668]},{"content":"只有在下一部分中在 Azure 环境中设置了连接字符串后，你才可以使用该 Web 应用。","pos":[9674,9718]},{"content":"你将会看到错误页或主页，具体取决于你在前面选择的 Web 应用和数据库创建选项。","pos":[9718,9758]},{"content":"将 Web 应用配置为使用你的 Azure SQL 数据库和存储帐户。","pos":[9764,9799]},{"content":"最佳安全做法是<bpt id=\"p1\">[</bpt>避免将敏感信息（如连接字符串）放置在源代码存储库中存储的文件内<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control#secrets)</ept>。","pos":[9801,9986],"source":"最佳安全做法是[避免将敏感信息（如连接字符串）放置在源代码存储库中存储的文件内](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control#secrets)。"},{"content":"Azure 提供了一种方法来做到这一点：你可以在 Azure 环境中设置连接字符串和其他设置值，在 Azure 中运行应用程序时，ASP.NET 配置 API 将自动提取这些值。","pos":[9986,10075]},{"content":"你可以使用<bpt id=\"p1\">**</bpt>服务器资源管理器<ept id=\"p1\">**</ept>、Azure 管理门户、Windows PowerShell 或跨平台命令行界面在 Azure 中设置这些值。","pos":[10075,10147],"source":"你可以使用**服务器资源管理器**、Azure 管理门户、Windows PowerShell 或跨平台命令行界面在 Azure 中设置这些值。"},{"content":"有关详细信息，请参阅<bpt id=\"p1\">[</bpt>应用程序字符串和连接字符串的工作原理<ept id=\"p1\">](http://azure.microsoft.com/zh-cn/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/)</ept>。","pos":[10147,10305],"source":"有关详细信息，请参阅[应用程序字符串和连接字符串的工作原理](http://azure.microsoft.com/zh-cn/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/)。"},{"pos":[10307,10347],"content":"在本部分中，你将使用<bpt id=\"p1\">**</bpt>服务器资源管理器<ept id=\"p1\">**</ept>在 Azure 中设置连接字符串值。","source":"在本部分中，你将使用**服务器资源管理器**在 Azure 中设置连接字符串值。"},{"content":"在“服务器资源管理器”中，右键单击“Azure”&gt;“{你的资源组}”下的 Web 应用，然后单击“查看设置”。","pos":[10352,10407],"source":"在“服务器资源管理器”中，右键单击“Azure”>“{你的资源组}”下的 Web 应用，然后单击“查看设置”。"},{"content":"“Azure Web 应用”窗口将在“配置”选项卡上打开。","pos":[10413,10442]},{"content":"将 DefaultConnection 连接字符串的名称更改为 ContosoAdsContext。","pos":[10447,10497]},{"content":"当你使用关联的数据库创建 Web 应用时，Azure 已自动创建此连接字符串，因此它已具有正确的连接字符串值。","pos":[10503,10558]},{"content":"你只需将名称更改为代码将要查找的值。","pos":[10558,10576]},{"content":"添加名为 AzureWebJobsStorage 和 AzureWebJobsDashboard 的两个新连接字符串。","pos":[10581,10640]},{"content":"将类型设置为“自定义”，并将连接字符串值设置为你前面针对 <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>App.config<ept id=\"p2\">*</ept> 文件使用的相同值。","pos":[10640,10706],"source":"将类型设置为“自定义”，并将连接字符串值设置为你前面针对 *Web.config* 和 *App.config* 文件使用的相同值。"},{"content":"（确保包括整个连接字符串而不仅仅是访问密钥，并且不要包括引号。","pos":[10706,10737]},{"content":"）","pos":[10737,10738]},{"content":"WebJobs SDK 将使用这些连接字符串，一个用于应用程序数据，另一个用于日志记录。","pos":[10744,10788]},{"content":"如前面所看到的，用于应用程序数据的连接字符串也由 Web 前端代码使用。","pos":[10788,10824]},{"content":"单击“保存”。","pos":[10829,10836]},{"content":"Azure 管理门户中的连接字符串","pos":[10844,10861]},{"content":"在“服务器资源管理器”中右键单击该 Web 应用，然后单击“停止”。","pos":[10931,10965]},{"content":"在 Web 应用停止后，再次右键单击该 Web 应用，然后单击“启动”。","pos":[10971,11007]},{"content":"Web 作业在你发布时会自动启动，但在你进行配置更改时会停止。","pos":[11013,11044]},{"content":"若要重新启动它，可以重新启动 Web 应用或者在 <bpt id=\"p1\">[</bpt>Azure 管理门户<ept id=\"p1\">](https://manage.windowsazure.cn/)</ept>中重新启动 Web 作业。","pos":[11044,11127],"source":"若要重新启动它，可以重新启动 Web 应用或者在 [Azure 管理门户](https://manage.windowsazure.cn/)中重新启动 Web 作业。"},{"content":"一般而言，建议你在配置更改后重新启动 Web 应用。","pos":[11127,11153]},{"content":"刷新地址栏中包含 Web 应用 URL 的浏览器窗口。","pos":[11158,11185]},{"content":"此时将显示主页。","pos":[11191,11199]},{"content":"就像在本地运行应用程序时一样创建一个广告。","pos":[11205,11226]},{"content":"“索引”页一开始不会显示缩略图。","pos":[11232,11248]},{"content":"几秒钟后请刷新页面，随后将会显示缩略图。","pos":[11254,11274]},{"content":"如果未显示缩略图，你可能需要等待一分钟左右，让 Web 作业重新启动。","pos":[11280,11315]},{"content":"如果经过一段时间后刷新页面时仍未显示缩略图，原因可能是 Web 作业未自动启动。","pos":[11315,11355]},{"content":"在此情况下，转到 Web 应用的“<bpt id=\"p1\">[</bpt>管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>”页中的“Web 作业”选项卡，然后单击“启动”。","pos":[11355,11435],"source":"在此情况下，转到 Web 应用的“[管理门户](https://manage.windowsazure.cn)”页中的“Web 作业”选项卡，然后单击“启动”。"},{"pos":[11486,11497],"content":"“Web 作业”选项卡"},{"pos":[11502,11555],"content":"在<bpt id=\"p1\">[</bpt>管理门户<ept id=\"p1\">](https://manage.windowsazure.cn)</ept>中，选择你的 Web 应用。","source":"在[管理门户](https://manage.windowsazure.cn)中，选择你的 Web 应用。"},{"content":"单击“Web 作业”选项卡。","pos":[11560,11574]},{"content":"单击 Web 作业“日志”列中的 URL。","pos":[11579,11600]},{"content":"“Web 作业”选项卡","pos":[11608,11619]},{"content":"WebJobs SDK 仪表板中将打开一个新的浏览器选项卡。","pos":[11685,11715]},{"content":"仪表板显示 Web 作业正在运行，并显示 WebJobs SDK 触发的代码中的函数列表。","pos":[11715,11760]},{"content":"单击某个函数可以查看有关其执行的详细信息。","pos":[11765,11786]},{"content":"WebJobs SDK 仪表板","pos":[11794,11809]},{"content":"WebJobs SDK 仪表板","pos":[11887,11902]},{"content":"单击此页上的“重放函数”会导致 WebJobs SDK 框架再次调用该函数，使你可以首先更改传递给该函数的数据。","pos":[11980,12036]},{"content":"完成测试后，请删除 Web 应用和 SQL 数据库实例。","pos":[12052,12080]},{"content":"Web 应用是免费的，但 SQL 数据库实例和存储帐户是计费的（由于较小，因此费用很低）。","pos":[12081,12126]},{"content":"此外，如果保持 Web 应用运行，则找到你的 URL 的任何人都可以创建和查看广告。","pos":[12126,12168]},{"content":"在管理门户中，转到 Web 应用的“仪表板”选项卡，然后单击页面底部的“删除”按钮。","pos":[12168,12210]},{"content":"然后，你可以选中用于同时删除 SQL 数据库实例的复选框。","pos":[12210,12239]},{"content":"如果你只是想要暂时防止其他人访问 Web 应用，请改为单击“停止”。","pos":[12239,12273]},{"content":"在这种情况下，SQL 数据库和存储帐户会继续计费。","pos":[12273,12298]},{"content":"当你不再需要 SQL 数据库和存储帐户时，可以遵循类似的过程将其删除。","pos":[12298,12333]},{"pos":[12357,12367],"content":"从头开始创建应用程序"},{"content":"在本节中，你将执行以下任务：","pos":[12369,12383]},{"content":"创建一个包含 Web 项目的 Visual Studio 解决方案。","pos":[12387,12421]},{"content":"为前端和后端之间共享的数据访问层添加一个类库项目。","pos":[12424,12449]},{"content":"在启用 Web 作业部署的情况下，为后端添加一个控制台应用程序项目。","pos":[12452,12486]},{"content":"添加 NuGet 包。","pos":[12489,12500]},{"content":"设置项目引用。","pos":[12503,12510]},{"content":"从你在学习本教程前面部分时使用的已下载应用程序中复制应用程序代码和配置文件。","pos":[12513,12551]},{"content":"查看用于处理 Azure Blob 和队列及 WebJobs SDK 的代码部分。","pos":[12554,12595]},{"content":"创建一个包含 Web 项目的 Visual Studio 解决方案和类库项目","pos":[12601,12639]},{"content":"在 Visual Studio 的“文件”菜单中选择“新建”&gt;“项目”。","pos":[12644,12680],"source":"在 Visual Studio 的“文件”菜单中选择“新建”>“项目”。"},{"content":"在“新建项目”对话框中，选择“Visual C#”&gt;“Web”&gt;“ASP.NET  Web 应用”。","pos":[12685,12735],"source":"在“新建项目”对话框中，选择“Visual C#”>“Web”>“ASP.NET  Web 应用”。"},{"content":"将项目命名为 ContosoAdsWeb，将解决方案命名为 ContosoAdsWebJobsSDK（如果你要将解决方案放置在与下载的解决方案相同的文件夹中，请更改此解决方案名称），然后单击“确定”。","pos":[12740,12840]},{"content":"新建项目","pos":[12848,12852]},{"content":"在“新建 ASP.NET 项目”对话框中选择 MVC 模板，然后清除“Azure”下的“在云中托管”复选框。","pos":[12922,12976]},{"content":"选中“在云中托管”可让 Visual Studio 自动创建新的 Azure Web 应用和 SQL 数据库。","pos":[12982,13037]},{"content":"由于前面已创建这些 Web 应用和数据库，因此现在创建项目时，你不需要执行此操作。","pos":[13037,13078]},{"content":"如果要新建，请选中该复选框。","pos":[13078,13092]},{"content":"然后，请像前面部署应用程序时一样配置新 Web 应用和 SQL 数据库。","pos":[13092,13128]},{"content":"单击“更改身份验证”。","pos":[13133,13144]},{"content":"更改身份验证","pos":[13152,13158]},{"content":"在“更改身份验证”对话框中，选择“无身份验证”，然后单击“确定”。","pos":[13225,13258]},{"content":"无身份验证","pos":[13266,13271]},{"content":"在“新建 ASP.NET 项目”对话框中，单击“确定”。","pos":[13337,13365]},{"content":"Visual Studio 将创建解决方案和 Web 项目。","pos":[13371,13401]},{"content":"在“解决方案资源管理器”中，右键单击该解决方案（不是项目），然后选择“添加”&gt;“新建项目”。","pos":[13406,13452],"source":"在“解决方案资源管理器”中，右键单击该解决方案（不是项目），然后选择“添加”>“新建项目”。"},{"content":"在“添加新项目”对话框中，选择“Visual C#”&gt;“Windows 桌面”&gt;“类库”模板。","pos":[13458,13505],"source":"在“添加新项目”对话框中，选择“Visual C#”>“Windows 桌面”>“类库”模板。"},{"pos":[13511,13546],"content":"将项目命名为 <bpt id=\"p1\">*</bpt>ContosoAdsCommon<ept id=\"p1\">*</ept>，然后单击“确定”。","source":"将项目命名为 *ContosoAdsCommon*，然后单击“确定”。"},{"content":"此项目将包含前端和后端将要使用的实体框架上下文与数据模型。","pos":[13552,13581]},{"content":"或者，你也可以在 Web 项目中定义 EF 相关的类，并从 Web 作业项目引用该项目。","pos":[13581,13625]},{"content":"但是，这样会使 Web 作业项目引用它不需要的 Web 程序集。","pos":[13625,13657]},{"content":"在启用 Web 作业部署的情况下添加控制台应用程序项目","pos":[13663,13690]},{"content":"右键单击 Web 项目（不是解决方案或类库项目），然后单击“添加”&gt;“新建 Azure Web 作业项目”。","pos":[13695,13749],"source":"右键单击 Web 项目（不是解决方案或类库项目），然后单击“添加”>“新建 Azure Web 作业项目”。"},{"content":"“新建 Azure Web 作业项目”菜单选项","pos":[13757,13780]},{"content":"在“添加 Azure Web 作业”对话框中，输入 ContosoAdsWebJob 作为“项目名称”和“Web 作业名称”。","pos":[13847,13910]},{"content":"将“Web 作业运行模式”保留设置为“连续运行”。","pos":[13910,13935]},{"pos":[13941,13952],"content":"单击<bpt id=\"p1\">**</bpt>“确定”<ept id=\"p1\">**</ept>。","source":"单击**“确定”**。"},{"content":"Visual Studio 将创建一个控制台应用程序，每当你部署 Web 项目时，该应用程序就会部署为 Web 作业。","pos":[13958,14017]},{"content":"为此，它将在创建项目后执行以下任务：","pos":[14017,14035]},{"pos":[14043,14109],"content":"在 Web 作业项目的 Properties 文件夹中添加一个 <bpt id=\"p1\">*</bpt>webjob-publish-settings.json<ept id=\"p1\">*</ept> 文件。","source":"在 Web 作业项目的 Properties 文件夹中添加一个 *webjob-publish-settings.json* 文件。"},{"pos":[14116,14169],"content":"在 Web 项目的 Properties 文件夹中添加一个 <bpt id=\"p1\">*</bpt>webjobs-list.json<ept id=\"p1\">*</ept> 文件。","source":"在 Web 项目的 Properties 文件夹中添加一个 *webjobs-list.json* 文件。"},{"content":"在 Web 作业项目中安装 Microsoft.Web.WebJobs.Publish NuGet 包。","pos":[14176,14228]},{"pos":[14234,14336],"content":"有关这些更改的详细信息，请参阅<bpt id=\"p1\">[</bpt>如何使用 Visual Studio 部署 Web 作业<ept id=\"p1\">](/documentation/articles/websites-dotnet-deploy-webjobs)</ept>。","source":"有关这些更改的详细信息，请参阅[如何使用 Visual Studio 部署 Web 作业](/documentation/articles/websites-dotnet-deploy-webjobs)。"},{"content":"添加 NuGet 包","pos":[14342,14352]},{"pos":[14354,14489],"content":"Web 作业的 new-project 模板会自动安装 WebJobs SDK NuGet 包 <bpt id=\"p1\">[</bpt>Microsoft.Azure.WebJobs<ept id=\"p1\">](http://www.nuget.org/packages/Microsoft.Azure.WebJobs)</ept> 及其依赖项。","source":"Web 作业的 new-project 模板会自动安装 WebJobs SDK NuGet 包 [Microsoft.Azure.WebJobs](http://www.nuget.org/packages/Microsoft.Azure.WebJobs) 及其依赖项。"},{"content":"在 Web 作业项目中自动安装的 WebJobs SDK 依赖项之一是 Azure 存储客户端库 (SCL)。","pos":[14491,14546]},{"content":"但是，若要处理 Blob 和队列，你需要将此依赖项添加到 Web 项目。","pos":[14546,14582]},{"content":"打开解决方案的“管理 NuGet 包”对话框。","pos":[14587,14610]},{"content":"在左窗格中，选择“已安装的包”。","pos":[14615,14631]},{"pos":[14636,14663],"content":"找到 <bpt id=\"p1\">*</bpt>Azure 存储空间<ept id=\"p1\">*</ept> 包，然后单击“管理”。","source":"找到 *Azure 存储空间* 包，然后单击“管理”。"},{"content":"在“选择项目”框中，选中“ContosoAdsWeb”复选框，然后单击“确定”。","pos":[14668,14708]},{"content":"所有三个项目都使用实体框架来处理 SQL 数据库中的数据。","pos":[14714,14743]},{"content":"在左窗格中，选择“联机”。","pos":[14748,14761]},{"pos":[14766,14809],"content":"找到 <bpt id=\"p1\">*</bpt>EntityFramework<ept id=\"p1\">*</ept> NuGet 包，并将其安装在所有三个项目中。","source":"找到 *EntityFramework* NuGet 包，并将其安装在所有三个项目中。"},{"content":"设置项目引用","pos":[14816,14822]},{"content":"Web 项目和 Web 作业项目都会处理 SQL 数据库，因此两者都需要引用 ContosoAdsCommon 项目。","pos":[14824,14883]},{"content":"在 ContosoAdsWeb 项目中，设置对 ContosoAdsCommon 项目的引用。","pos":[14888,14935]},{"content":"（右键单击 ContosoAdsWeb 项目，然后单击“添加”&gt;“引用”。","pos":[14935,14972],"source":"（右键单击 ContosoAdsWeb 项目，然后单击“添加”>“引用”。"},{"content":"在“引用管理器”对话框中，选择“解决方案”&gt;“项目”&gt;“ContosoAdsCommon”，然后单击“确定”。","pos":[14972,15027],"source":"在“引用管理器”对话框中，选择“解决方案”>“项目”>“ContosoAdsCommon”，然后单击“确定”。"},{"content":"）","pos":[15027,15028]},{"content":"在 ContosoAdsWebJob 项目中，设置对 ContosAdsCommon 项目的引用。","pos":[15033,15082]},{"content":"WebJob 项目需要通过引用来处理图像和访问连接字符串。","pos":[15088,15117]},{"pos":[15122,15195],"content":"在 ContosoAdsWebJob 项目中，设置对 <ph id=\"ph1\">`System.Drawing`</ph> 和 <ph id=\"ph2\">`System.Configuration`</ph> 的引用。","source":"在 ContosoAdsWebJob 项目中，设置对 `System.Drawing` 和 `System.Configuration` 的引用。"},{"content":"添加代码和配置文件","pos":[15201,15210]},{"content":"本教程未说明如何<bpt id=\"p1\">[</bpt>使用基架创建 MVC 控制器和视图<ept id=\"p1\">](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)</ept>、如何<bpt id=\"p2\">[</bpt>编写适用于 SQL Server 数据库的实体框架代码<ept id=\"p2\">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc)</ept>，或者<bpt id=\"p3\">[</bpt>在 ASP.NET 4.5 中的异步编程基础知识<ept id=\"p3\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/web-development-best-practices#async)</ept>。","pos":[15212,15596],"source":"本教程未说明如何[使用基架创建 MVC 控制器和视图](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)、如何[编写适用于 SQL Server 数据库的实体框架代码](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc)，或者[在 ASP.NET 4.5 中的异步编程基础知识](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/web-development-best-practices#async)。"},{"content":"因此，余下的所有操作就是将已下载解决方案中的代码和配置文件复制到新解决方案中。","pos":[15596,15635]},{"content":"在完成该操作后，以下部分将演示并说明代码的关键部分。","pos":[15635,15661]},{"content":"若要将文件添加到某个项目或文件夹，请右键单击该项目或文件夹，然后单击“添加”&gt;“现有项”。","pos":[15663,15708],"source":"若要将文件添加到某个项目或文件夹，请右键单击该项目或文件夹，然后单击“添加”>“现有项”。"},{"content":"选择所需的文件，然后单击“添加”。","pos":[15708,15725]},{"content":"如果询问你是否想要替换现有文件，请单击“是”。","pos":[15725,15748]},{"pos":[15753,15814],"content":"在 ContosoAdsCommon 项目中，删除 <bpt id=\"p1\">*</bpt>Class1.cs<ept id=\"p1\">*</ept> 文件，并在其原位置添加已下载项目中的以下文件。","source":"在 ContosoAdsCommon 项目中，删除 *Class1.cs* 文件，并在其原位置添加已下载项目中的以下文件。"},{"content":"Ad.cs","pos":[15823,15828]},{"content":"ContosoAdscontext.cs","pos":[15837,15857]},{"content":"BlobInformation.cs","pos":[15866,15884]},{"content":"在 ContosoAdsWeb 项目中，从下载的项目添加以下文件。","pos":[15900,15933]},{"content":"Web.config","pos":[15942,15952]},{"content":"Global.asax.cs","pos":[15961,15975]},{"pos":[15985,16024],"content":"在 <bpt id=\"p1\">*</bpt>Controllers<ept id=\"p1\">*</ept> 文件夹中： <bpt id=\"p2\">*</bpt>AdController.cs<ept id=\"p2\">*</ept>","source":"在 *Controllers* 文件夹中： *AdController.cs*"},{"pos":[16031,16074],"content":"在 <bpt id=\"p1\">*</bpt>Views/Shared<ept id=\"p1\">*</ept> 文件夹中： <bpt id=\"p2\">*</bpt><ph id=\"ph1\">\\_</ph>Layout.cshtml<ept id=\"p2\">*</ept> 文件","source":"在 *Views/Shared* 文件夹中： *\\_Layout.cshtml* 文件"},{"pos":[16081,16116],"content":"在 <bpt id=\"p1\">*</bpt>Views/Home<ept id=\"p1\">*</ept> 文件夹中： <bpt id=\"p2\">*</bpt>Index.cshtml<ept id=\"p2\">*</ept>","source":"在 *Views/Home* 文件夹中： *Index.cshtml*"},{"content":"在 <bpt id=\"p1\">*</bpt>Views/Ad<ept id=\"p1\">*</ept> 文件夹（首先创建该文件夹）中：五个 <bpt id=\"p2\">*</bpt>.cshtml<ept id=\"p2\">*</ept> 文件","pos":[16123,16166],"source":"在 *Views/Ad* 文件夹（首先创建该文件夹）中：五个 *.cshtml* 文件"},{"content":"在 ContosoAdsWebJob 项目中，添加已下载项目中的以下文件。","pos":[16181,16218]},{"pos":[16226,16258],"content":"<bpt id=\"p1\">*</bpt>App.config<ept id=\"p1\">*</ept> （将文件类型筛选器更改为“所有文件”）","source":"*App.config* （将文件类型筛选器更改为“所有文件”）"},{"content":"Program.cs","pos":[16266,16276]},{"content":"Functions.cs","pos":[16285,16297]},{"content":"现在，你可以根据本教程前面所述生成、运行和部署应用程序。","pos":[16300,16328]},{"content":"但是，在执行此操作之前，请在部署到的第一个 Web 应用中停止正在运行的 Web 作业。","pos":[16328,16372]},{"content":"否则，Web 作业将处理本地创建的，或者新 Web 应用运行的应用创建的队列消息，因为所有消息均使用相同的存储帐户。","pos":[16372,16430]},{"pos":[16452,16460],"content":"查看应用程序代码"},{"content":"以下部分解释了与处理 WebJobs SDK 和 Azure 存储 Blob 与队列相关的代码。","pos":[16462,16510]},{"pos":[16527,16596],"content":"对于特定于 WebJobs SDK 的代码，请转到 <bpt id=\"p1\">[</bpt>Program.cs 和 Functions.cs<ept id=\"p1\">](#programcs)</ept> 部分。","source":" 对于特定于 WebJobs SDK 的代码，请转到 [Program.cs 和 Functions.cs](#programcs) 部分。"},{"content":"ContosoAdsCommon - Ad.cs","pos":[16602,16626]},{"content":"Ad.cs 文件为 ad 类别定义一个枚举，为 ad 信息定义一个 POCO 实体类。","pos":[16628,16671]},{"content":"ContosoAdsCommon - ContosoAdsContext.cs","pos":[17790,17829]},{"content":"ContosoAdsContext 类指定 DbSet 集合中使用的 Ad 类，实体框架将存储在 SQL 数据库中。","pos":[17831,17889]},{"content":"类具有两个构造函数。","pos":[18248,18258]},{"content":"第一个由 Web 项目使用，并指定存储在 Web.config 文件或 Azure 运行时环境中的连接字符串的名称。","pos":[18258,18316]},{"content":"第二个构造函数允许你在实际的连接字符串中传递。","pos":[18316,18339]},{"content":"程序需要 Web 作业项目，因为它没有 Web.config 文件。","pos":[18339,18373]},{"content":"你以前看到存储此连接字符串的位置，并且稍后你将看到连接字符串在实例化 DbContext 类时代码如何检索它。","pos":[18373,18428]},{"content":"ContosoAdsCommon - BlobInformation.cs","pos":[18434,18471]},{"pos":[18491,18516],"content":"类用于在队列消息中存储有关图像 Blob 的信息。"},{"content":"ContosoAdsWeb - Global.asax.cs","pos":[19068,19098]},{"content":"从 <ph id=\"ph1\">`Application_Start`</ph> 方法调用的代码创建 <bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept> Blob 容器和 <bpt id=\"p2\">*</bpt>图像<ept id=\"p2\">*</ept> 队列（如果它们尚不存在）。","pos":[19100,19164],"source":"从 `Application_Start` 方法调用的代码创建 *图像* Blob 容器和 *图像* 队列（如果它们尚不存在）。"},{"content":"这确保只要你开始使用新的存储帐户，就自动创建所需的 Blob 容器和队列。","pos":[19164,19201]},{"pos":[19203,19260],"content":"此代码通过使用 <bpt id=\"p1\">*</bpt>Web.config<ept id=\"p1\">*</ept> 文件或 Azure 运行时环境中的存储连接字符串获取存储帐户的访问权限。","source":"此代码通过使用 *Web.config* 文件或 Azure 运行时环境中的存储连接字符串获取存储帐户的访问权限。"},{"content":"然后，它获取对 <bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept> Blob 容器的引用，创建尚不存在的容器，并在新容器上设置访问权限。","pos":[19406,19453],"source":"然后，它获取对 *图像* Blob 容器的引用，创建尚不存在的容器，并在新容器上设置访问权限。"},{"content":"默认情况下，新容器只允许带存储帐户凭据的客户端访问 Blob。","pos":[19453,19484]},{"content":"Web 应用需要 Blob 是公共的，以便它可以使用指向图像 Blob 的 Url 显示图像。","pos":[19485,19532]},{"content":"类似代码获取对 <bpt id=\"p1\">*</bpt>blobnamerequest<ept id=\"p1\">*</ept> 队列的引用并创建一个新队列。","pos":[19952,19992],"source":"类似代码获取对 *blobnamerequest* 队列的引用并创建一个新队列。"},{"content":"这种情况不需要权限更改。","pos":[19992,20004]},{"content":"本教程稍后的 <bpt id=\"p1\">[</bpt>ResolveBlobName<ept id=\"p1\">](#resolveblobname)</ept> 部分将说明为何只使用 Web 应用所写入到的队列来获取 Blob 名称而不生成缩略图。","pos":[20004,20090],"source":"本教程稍后的 [ResolveBlobName](#resolveblobname) 部分将说明为何只使用 Web 应用所写入到的队列来获取 Blob 名称而不生成缩略图。"},{"content":"ContosoAdsWeb - <ph id=\"ph1\">\\_</ph>Layout.cshtml","pos":[20294,20325],"source":"ContosoAdsWeb - \\_Layout.cshtml"},{"pos":[20327,20372],"content":"<bpt id=\"p1\">*</bpt><ph id=\"ph1\">\\_</ph>Layout.cshtml<ept id=\"p1\">*</ept> 文件设置页眉和页脚中的应用程序，并创建“广告”菜单项。","source":"*\\_Layout.cshtml* 文件设置页眉和页脚中的应用程序，并创建“广告”菜单项。"},{"content":"ContosoAdsWeb - Views<ph id=\"ph1\">\\\\</ph>Home<ph id=\"ph2\">\\\\</ph>Index.cshtml","pos":[20378,20419],"source":"ContosoAdsWeb - Views\\\\Home\\\\Index.cshtml"},{"content":"<bpt id=\"p1\">*</bpt>Views<ph id=\"ph1\">\\\\</ph>Home<ph id=\"ph2\">\\\\</ph>Index.cshtml<ept id=\"p1\">*</ept> 文件在主页上显示类别链接。","pos":[20421,20462],"source":"*Views\\\\Home\\\\Index.cshtml* 文件在主页上显示类别链接。"},{"content":"链接将查询字符串变量中的 <ph id=\"ph1\">`Category`</ph> 枚举的整数值传递到“广告索引”页面。","pos":[20462,20504],"source":"链接将查询字符串变量中的 `Category` 枚举的整数值传递到“广告索引”页面。"},{"pos":[20939,20970],"content":"ContosoAdsWeb - AdController.cs"},{"pos":[20972,21068],"content":"在 <bpt id=\"p1\">*</bpt>AdController.cs<ept id=\"p1\">*</ept> 文件中，构造函数调用 <ph id=\"ph1\">`InitializeStorage`</ph> 方法来创建 Azure 存储客户端库对象，它提供一个用于处理 Blob 和队列的 API。","source":"在 *AdController.cs* 文件中，构造函数调用 `InitializeStorage` 方法来创建 Azure 存储客户端库对象，它提供一个用于处理 Blob 和队列的 API。"},{"content":"然后，代码获取对 <bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept> Blob 容器的引用，正如你之前在 <bpt id=\"p2\">*</bpt>Global.asax.cs<ept id=\"p2\">*</ept> 中看到的。","pos":[21070,21124],"source":"然后，代码获取对 *图像* Blob 容器的引用，正如你之前在 *Global.asax.cs* 中看到的。"},{"content":"在执行该操作时，它设置适用于 Web 应用的默认<bpt id=\"p1\">[</bpt>重试策略<ept id=\"p1\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/transient-fault-handling)</ept>。","pos":[21124,21301],"source":"在执行该操作时，它设置适用于 Web 应用的默认[重试策略](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/transient-fault-handling)。"},{"content":"对于因暂时性故障反复重试超过一分钟的 Web 应用，默认指数回退重试策略可能将其挂起。","pos":[21301,21344]},{"content":"此处指定的重试策略将在每次尝试后等待 3 秒，最多可尝试 3 次。","pos":[21344,21377]},{"pos":[21619,21638],"content":"类似代码获取对 <bpt id=\"p1\">*</bpt>图像<ept id=\"p1\">*</ept> 队列的引用。","source":"类似代码获取对 *图像* 队列的引用。"},{"content":"大部分控制器代码通常用于使用 DbContext 类的实体框架数据模型。","pos":[21894,21930]},{"content":"例外情况是 HttpPost <ph id=\"ph1\">`Create`</ph> 方法，它上载文件并将其保存在 Blob 存储中。","pos":[21930,21978],"source":"例外情况是 HttpPost `Create` 方法，它上载文件并将其保存在 Blob 存储中。"},{"content":"模型联编程序为该方法提供一个 <bpt id=\"p1\">[</bpt>HttpPostedFileBase<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/system.web.httppostedfilebase.aspx)</ept> 对象。","pos":[21978,22093],"source":"模型联编程序为该方法提供一个 [HttpPostedFileBase](http://msdn.microsoft.com/zh-cn/library/system.web.httppostedfilebase.aspx) 对象。"},{"content":"如果用户选择要上载的文件，则代码上载该文件，将其保存在 Blob 中，并使用指向 Blob 的 URL 更新广告数据库记录。","pos":[22318,22380]},{"content":"执行上载的代码位于 <ph id=\"ph1\">`UploadAndSaveBlobAsync`</ph> 方法中。","pos":[22573,22612],"source":"执行上载的代码位于 `UploadAndSaveBlobAsync` 方法中。"},{"content":"它将创建 Blob 的 GUID 名称，上载和保存该文件，并将引用返回已保存的 Blob。","pos":[22612,22657]},{"pos":[23149,23217],"content":"HttpPost <ph id=\"ph1\">`Create`</ph> 方法上载 Blob 并更新数据库之后，将会创建队列消息，以通知后端进程图像已准备好转换为一个缩略图。","source":"HttpPost `Create` 方法上载 Blob 并更新数据库之后，将会创建队列消息，以通知后端进程图像已准备好转换为一个缩略图。"},{"pos":[23485,23549],"content":"HttpPost <ph id=\"ph1\">`Edit`</ph> 方法的代码和它类似，不同之处在于如果用户选择新图像文件，则必须删除此广告已存在的任何 Blob。","source":"HttpPost `Edit` 方法的代码和它类似，不同之处在于如果用户选择新图像文件，则必须删除此广告已存在的任何 Blob。"},{"content":"以下是删除 Blob 时删除广告的代码：","pos":[23794,23814]},{"content":"ContosoAdsWeb - Views<ph id=\"ph1\">\\\\</ph>Ad<ph id=\"ph2\">\\\\</ph>Index.cshtml 和 Details.cshtml","pos":[24579,24635],"source":"ContosoAdsWeb - Views\\\\Ad\\\\Index.cshtml 和 Details.cshtml"},{"pos":[24637,24669],"content":"<bpt id=\"p1\">*</bpt>Index.cshtml<ept id=\"p1\">*</ept> 文件显示带有其他广告数据的缩略图：","source":"*Index.cshtml* 文件显示带有其他广告数据的缩略图："},{"pos":[24724,24753],"content":"<bpt id=\"p1\">*</bpt>Details.cshtml<ept id=\"p1\">*</ept> 文件显示完全尺寸的图像：","source":"*Details.cshtml* 文件显示完全尺寸的图像："},{"content":"ContosoAdsWeb - Views<ph id=\"ph1\">\\\\</ph>Ad<ph id=\"ph2\">\\\\</ph>Create.cshtml 和 Edit.cshtml","pos":[24808,24862],"source":"ContosoAdsWeb - Views\\\\Ad\\\\Create.cshtml 和 Edit.cshtml"},{"pos":[24864,24937],"content":"<bpt id=\"p1\">*</bpt>Create.cshtml<ept id=\"p1\">*</ept> 和 <bpt id=\"p2\">*</bpt>Edit.cshtml<ept id=\"p2\">*</ept> 文件指定窗体编码，允许控制器获取 <ph id=\"ph1\">`HttpPostedFileBase`</ph> 对象。","source":"*Create.cshtml* 和 *Edit.cshtml* 文件指定窗体编码，允许控制器获取 `HttpPostedFileBase` 对象。"},{"pos":[25056,25073],"content":"元素通知浏览器提供文件选择对话框。"},{"pos":[25198,25227],"content":"ContosoAdsWebJob - Program.cs"},{"pos":[25229,25307],"content":"当 Web 作业启动时，<ph id=\"ph1\">`Main`</ph> 方法将调用 WebJobs SDK <ph id=\"ph2\">`JobHost.RunAndBlock`</ph> 方法，以开始执行当前线程上触发的函数。","source":"当 Web 作业启动时，`Main` 方法将调用 WebJobs SDK `JobHost.RunAndBlock` 方法，以开始执行当前线程上触发的函数。"},{"pos":[25478,25532],"content":"ContosoAdsWebJob - Functions.cs - GenerateThumbnail 方法"},{"content":"接收队列消息时，WebJobs SDK 将调用此方法。","pos":[25534,25561]},{"content":"该方法创建缩略图，并将缩略图放在数据库中的 URL。","pos":[25561,25587]},{"pos":[26713,26763],"content":"属性指示 WebJobs SDK thumbnailrequest 队列上接收到新消息时调用此方法。"},{"content":"队列消息中的 <ph id=\"ph1\">`BlobInformation`</ph> 对象是自动反序列化为 <ph id=\"ph2\">`blobInfo`</ph> 参数。","pos":[26839,26889],"source":"队列消息中的 `BlobInformation` 对象是自动反序列化为 `blobInfo` 参数。"},{"content":"当该方法完成时，将删除队列消息。","pos":[26889,26905]},{"content":"如果该方法将在完成之前失败，则不会删除队列消息；10 分钟租约过期后，会再次挑选发布和处理消息。","pos":[26905,26953]},{"content":"如果一条消息始终导致异常，则不会无限期地重复这一序列。","pos":[26953,26980]},{"content":"如果尝试处理某条消息 5 次都不成功，该消息将移到名为 {queuename}-poison 的队列。","pos":[26980,27031]},{"content":"可以配置最大尝试次数。","pos":[27031,27042]},{"pos":[27046,27113],"content":"这两个 <ph id=\"ph1\">`Blob`</ph> 属性提供绑定到 Blob 的对象：一个绑定到现有的图像 Blob，另一个绑定到该方法将创建的新缩略图 Blob。","source":"这两个 `Blob` 属性提供绑定到 Blob 的对象：一个绑定到现有的图像 Blob，另一个绑定到该方法将创建的新缩略图 Blob。"},{"content":"Blob 名称来自队列消息中收到的 <ph id=\"ph1\">`BlobInformation`</ph> 对象的属性（<ph id=\"ph2\">`BlobName`</ph> 和 <ph id=\"ph3\">`BlobNameWithoutExtension`</ph>）。","pos":[27280,27363],"source":"Blob 名称来自队列消息中收到的 `BlobInformation` 对象的属性（`BlobName` 和 `BlobNameWithoutExtension`）。"},{"content":"若要获取存储客户端库的完整功能，可以使用兼容 Blob 的 <ph id=\"ph1\">`CloudBlockBlob`</ph> 类。","pos":[27363,27412],"source":"若要获取存储客户端库的完整功能，可以使用兼容 Blob 的 `CloudBlockBlob` 类。"},{"content":"如果想要重用已编写的能够用于 <ph id=\"ph1\">`Stream`</ph> 对象的代码，你可以使用 <ph id=\"ph2\">`Stream`</ph> 类。","pos":[27412,27459],"source":"如果想要重用已编写的能够用于 `Stream` 对象的代码，你可以使用 `Stream` 类。"},{"content":"有关如何编写使用 WebJobs SDK 属性的函数的详细信息，请参阅以下资源：","pos":[27461,27501]},{"content":"如何通过 WebJobs SDK 使用 Azure 队列存储","pos":[27506,27536]},{"content":"如何通过 WebJobs SDK 使用 Azure Blob 存储","pos":[27616,27649]},{"content":"如何通过 WebJobs SDK 使用 Azure 表存储","pos":[27728,27757]},{"content":"如何通过 WebJobs SDK 使用 Azure 服务总线","pos":[27837,27867]},{"content":"如果在多个 VM 上运行 Web 应用，多个 Web 作业将同时运行，在某些情况下，这可能会导致相同的数据被处理多次。","pos":[27957,28016]},{"content":"如果使用内置队列、Blob 和服务总线触发器，则这不会造成问题。","pos":[28016,28048]},{"content":"SDK 可确保只会针对每个消息或 Blob 处理函数一次。","pos":[28048,28077]},{"pos":[28082,28190],"content":"有关如何实现正常关闭的信息，请参阅<bpt id=\"p1\">[</bpt>正常关闭<ept id=\"p1\">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#graceful)</ept>。","source":"有关如何实现正常关闭的信息，请参阅[正常关闭](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#graceful)。"},{"content":"为方便起见，<ph id=\"ph1\">`ConvertImageToThumbnailJPG`</ph> 方法中的代码（未显示）使用 <ph id=\"ph2\">`System.Drawing`</ph> 命名空间中的类。","pos":[28195,28269],"source":"为方便起见，`ConvertImageToThumbnailJPG` 方法中的代码（未显示）使用 `System.Drawing` 命名空间中的类。"},{"content":"但是，此命名空间中的类已设计用于 Windows 窗体。","pos":[28269,28297]},{"content":"不支持在 Windows 或 ASP.NET 服务中使用。","pos":[28297,28326]},{"content":"有关图像处理选项的详细信息，请参阅<bpt id=\"p1\">[</bpt>动态图像生成<ept id=\"p1\">](http://www.hanselman.com/blog/BackToBasicsDynamicImageGenerationASPNETControllersRoutingIHttpHandlersAndRunAllManagedModulesForAllRequests.aspx)</ept>和<bpt id=\"p2\">[</bpt>深入学习图像大小调整<ept id=\"p2\">](http://www.hanselminutes.com/313/deep-inside-image-resizing-and-scaling-with-aspnet-and-iis-with-imageresizingnet-author-na)</ept>。","pos":[28326,28635],"source":"有关图像处理选项的详细信息，请参阅[动态图像生成](http://www.hanselman.com/blog/BackToBasicsDynamicImageGenerationASPNETControllersRoutingIHttpHandlersAndRunAllManagedModulesForAllRequests.aspx)和[深入学习图像大小调整](http://www.hanselminutes.com/313/deep-inside-image-resizing-and-scaling-with-aspnet-and-iis-with-imageresizingnet-author-na)。"},{"pos":[28665,28669],"content":"后续步骤"},{"content":"在本教程中，你已了解了一个使用 WebJobs SDK 进行后端处理的简单多层应用程序。","pos":[28671,28715]},{"content":"本部分提供有关进一步了解 ASP.NET 多层应用程序和 Web 作业的一些建议。","pos":[28715,28756]},{"content":"缺少的功能","pos":[28762,28767]},{"content":"该应用程序有意保持入门教程的简单性。","pos":[28769,28787]},{"content":"在现实的应用程序中，你会实施<bpt id=\"p1\">[</bpt>依赖关系注入<ept id=\"p1\">](http://www.asp.net/mvc/tutorials/hands-on-labs/aspnet-mvc-4-dependency-injection)</ept>或<bpt id=\"p2\">[</bpt>存储库和单元的工作模式<ept id=\"p2\">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#repo)</ept>，使用<bpt id=\"p3\">[</bpt>日志记录接口<ept id=\"p3\">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log)</ept>，使用 <bpt id=\"p4\">[</bpt>EF Code First 迁移<ept id=\"p4\">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application)</ept>来管理数据模型更改，并使用 <bpt id=\"p5\">[</bpt>EF 连接复原<ept id=\"p5\">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/connection-resiliency-and-command-interception-with-the-entity-framework-in-an-asp-net-mvc-application)</ept>管理暂时性的网络错误。","pos":[28787,29579],"source":"在现实的应用程序中，你会实施[依赖关系注入](http://www.asp.net/mvc/tutorials/hands-on-labs/aspnet-mvc-4-dependency-injection)或[存储库和单元的工作模式](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#repo)，使用[日志记录接口](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log)，使用 [EF Code First 迁移](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application)来管理数据模型更改，并使用 [EF 连接复原](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/connection-resiliency-and-command-interception-with-the-entity-framework-in-an-asp-net-mvc-application)管理暂时性的网络错误。"},{"content":"缩放 Web 作业","pos":[29585,29594]},{"content":"Web 作业在 Web 应用的上下文中运行，并且不可单独缩放。","pos":[29596,29627]},{"content":"例如，如果你有一个标准 Web 应用实例，只运行了后台进程的一个实例，并且该实例正在使用某些服务器资源（CPU、内存等），而这些资源也可用于提供 Web 内容。","pos":[29627,29707]},{"content":"如果流量根据一天的时间或者星期变化，并且你需要执行的后端处理可以等待，则你可以将 Web 作业安排为在低流量期间运行。","pos":[29709,29768]},{"content":"如果该解决方案的负载仍然太高，可以在针对该用途专用的独立 Web 应用中以 Web 作业形式运行后端。","pos":[29768,29819]},{"content":"然后，可以独立于前端 Web 应用缩放你的后端 Web 应用。","pos":[29819,29850]},{"pos":[29852,29932],"content":"有关详细信息，请参阅<bpt id=\"p1\">[</bpt>缩放 Web 作业<ept id=\"p1\">](/documentation/articles/websites-webjobs-resources#scale)</ept>。","source":"有关详细信息，请参阅[缩放 Web 作业](/documentation/articles/websites-webjobs-resources#scale)。"},{"content":"避免因 Web 应用超时而导致其关闭","pos":[29938,29956]},{"pos":[29958,30192],"content":"若要确保 Web 作业始终在你的 Web 应用的所有实例上运行，你必须启用 <bpt id=\"p1\">[</bpt>AlwaysOn<ept id=\"p1\">](http://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx)</ept> 功能。","source":"若要确保 Web 作业始终在你的 Web 应用的所有实例上运行，你必须启用 [AlwaysOn](http://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx) 功能。"},{"content":"更多 Web 作业文档","pos":[30198,30209]},{"pos":[30211,30293],"content":"有关详细信息，请参阅<bpt id=\"p1\">[</bpt>Azure Web 作业文档资源<ept id=\"p1\">](/documentation/articles/websites-webjobs-resources/)</ept>。","source":"有关详细信息，请参阅[Azure Web 作业文档资源](/documentation/articles/websites-webjobs-resources/)。"}],"content":"<properties\n    pageTitle=\"在 Azure Web 应用中创建 .NET Web 作业 | Azure\"\n    description=\"使用 ASP.NET MVC 和 Azure 创建多层应用。前端在 Azure 的 Web 应用中运行，后端以 Web 作业的形式运行。应用程序使用实体框架、SQL 数据库和 Azure 存储队列和 Blob。\"\n    services=\"app-service\"\n    documentationCenter=\".net\"\n    authors=\"tdykstra\"\n    manager=\"wpickett\"\n    editor=\"mollybos\"/>\n\n<tags\n    ms.service=\"app-service\"\n    ms.date=\"12/14/2015\"\n    wacn.date=\"02/17/2016\"/>\n\n# 在 Azure Web 应用中创建 .NET Web 作业\n\n本教程说明了如何为使用 [WebJobs SDK](/documentation/articles/websites-dotnet-webjobs-sdk) 的简单多层 ASP.NET MVC 5 应用程序编写代码。\n\n[WebJobs SDK](/documentation/articles/websites-webjobs-resources) 的用途是简化针对 Web 作业可以执行的常见任务（例如，图像处理、队列处理、RSS 聚合、文件维护和发送电子邮件）编写的代码。WebJobs SDK 中的内置功能使用 Azure 存储空间和 Service Bus，用于计划任务和处理错误，以及用于许多其他常见方案。此外，它还设计为可扩展并且有[用于扩展的开源存储库](https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Binding-Extensions-Overview)。\n\n示例应用程序是一个广告公告板。用户可以上载广告的图像，后端进程会将图像转换成缩略图。广告列表页将显示缩略图，而广告详细信息页则显示完整大小的图像。下面是屏幕快照：\n\n![广告列表](./media/websites-dotnet-webjobs-sdk-get-started/list.png)\n\n## <a id=\"prerequisites\"></a>先决条件\n\n本教程假设你知道如何处理 Visual Studio 中的 [ASP.NET MVC 5](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started) 项目。\n\n本教程是针对 Visual Studio 2013 编写的。如果你尚未安装 Visual Studio，当你安装 Azure SDK for .NET 时会自动安装 Visual Studio。\n\n本教程可以配合 Visual Studio 2015 使用，但在本地运行应用程序之前，必须将 Web.config 和 App.config 文件中 SQL Server LocalDB 连接字符串的 `Data Source` 部分从 `Data Source=(localdb)\\v11.0` 更改为 `Data Source=(LocalDb)\\MSSQLLocalDB`。\n\n[AZURE.INCLUDE [free-trial-note](../includes/free-trial-note.md)]\n\n## <a id=\"learn\"></a>学习内容\n\n本教程说明如何执行以下任务：\n\n* 通过安装 Azure SDK 来使计算机进行 Azure 开发。\n* 创建一个控制台应用程序项目，当你部署关联的 Web 项目时，该应用程序项目将自动部署为 Azure Web 作业。\n* 在开发计算机上本地测试 WebJobs SDK 后端。\n* 使用 WebJobs 后端将应用程序发布到 Azure 中的 Web 应用。\n* 上载文件并将其存储在 Azure Blob 服务中。\n* 使用 Azure WebJobs SDK 来处理 Azure 存储队列和 Blob。\n\n## <a id=\"contosoads\"></a>应用程序体系结构\n\n示例应用程序使用[以队列为中心的工作模式](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)来减轻创建缩略图到后端进程的 CPU 密集型工作。\n\n该应用程序将广告存储在 SQL 数据库中，通过使用实体框架 Code First 创建表和访问数据。对于每个广告，数据库存储两个 URL，一个用于完全尺寸的图像，一个用于缩略图。\n\n![广告表](./media/websites-dotnet-webjobs-sdk-get-started/adtable.png)\n\n当用户上载图像时， Web 应用将在 [Azure Blob](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage) 中存储图像，并将广告信息存储在具有指向 Blob 的 URL 的数据库中。同时，它将一条消息写入 Azure 队列。在作为 Azure Web 作业运行的后端进程中，WebJobs SDK 将轮询新消息的队列。显示新消息时，Web 作业将创建该图像的缩略图，并为该广告更新缩略图 URL 数据库字段。下图介绍应用程序各部分之间如何交互：\n\n![Contoso 广告体系结构](./media/websites-dotnet-webjobs-sdk-get-started/apparchitecture.png)\n\n[AZURE.INCLUDE [install-sdk](../includes/install-sdk-2015-2013.md)]\n\n本教程中的说明不适用于 Azure SDK for .NET 2.7.1 或更高版本。\n\n## <a id=\"storage\"></a>创建 Azure 存储帐户\n\nAzure 存储帐户提供在云中存储队列和 Blob 数据的资源。它还由 WebJobs SDK 用来存储仪表板的日志记录数据。\n\n在实际应用程序中，你通常会为记录数据的应用程序数据创建单独的帐户，并且为生产数据的测试数据创建单独帐户。对于本教程，你将只使用一个帐户。\n\n1. 在 Visual Studio 中打开“服务器资源管理器”窗口。\n\n2. 右键单击“Azure”节点，然后单击“连接到 Azure”。\n\n    ![连接到 Azure](./media/websites-dotnet-webjobs-sdk-get-started/connaz.png)\n\n3. 使用你的 Azure 凭据登录。\n\n5. 在 Azure 节点下右键单击“存储”，然后单击“创建存储帐户”。\n\n    ![创建存储帐户](./media/websites-dotnet-webjobs-sdk-get-started/createstor.png)\n\n3. 在“创建存储帐户”对话框中，输入存储帐户的名称。\n\n    该名称必须是唯一的（其他 Azure 存储帐户都不可以使用该名称）。如果输入的名称已被使用，你可以进行更改。\n\n    用于访问存储帐户的 URL 为 *{名称}*.core.chinacloudapi.cn。\n\n5. 将“区域或地缘组”设置为离你最近的区域。\n\n    此设置指定哪个 Azure 数据中心将托管你的存储帐户。对于本教程，你做的选择不会带来明显的差异。但是，对于生产 Web 应用，你希望 Web 服务器和存储帐户处于同一区域，以最大程度地减少延迟和数据传出费用。（稍后要创建的） Web 应用数据中心应尽可能靠近访问 Web 应用的浏览器，以最大程度地减少延迟。\n\n6. 将“复制”下拉列表设置为“本地冗余”。\n\n    为存储帐户启用地域复制时，会将存储内容复制到辅助数据中心，这样就能够在主要位置发生重大灾难时将故障转移到该位置。地域复制可能会产生额外的成本。对于测试和开发帐户，你通常不希望因为地域复制而付款。有关详细信息，请参阅[创建、管理或删除存储帐户](/documentation/articles/storage-create-storage-account#replication-options)。\n\n5. 单击“创建”。\n\n    ![新的存储帐户](./media/websites-dotnet-webjobs-sdk-get-started/newstorage.png)\n\n## <a id=\"download\"></a>下载应用程序\n\n1. 下载并解压缩[已完成的解决方案](http://code.msdn.microsoft.com/Simple-Azure-Website-with-b4391eeb)。\n\n2. 启动 Visual Studio。\n\n3. 从“文件”菜单中，选择“打开”>“项目/解决方案”，导航到下载解决方案的位置，然后打开解决方案文件。\n\n4. 按 CTRL+SHIFT+B 生成解决方案。\n\n    默认情况下，Visual Studio 会自动还原 NuGet 包的内容，它未包括在 *.zip* 文件中。如果包未还原，请转到“管理解决方案的 NuGet 程序包”对话框并单击右上角的“还原”按钮手动进行安装。\n\n5. 在“解决方案资源管理器”中，请确保选择“ContosoAdsWeb”作为启动项目。\n\n## <a name=\"configure-storage\"></a><a name=\"configure-the-web-app-to-use-your-azure-sql-database-and-storage-account\"></a>将应用程序配置为使用你的存储帐户\n\n1. 打开 ContosoAdsWeb 项目中的应用程序 *Web.config* 文件。\n\n    该文件包含一个用于处理 Blob 和队列的 SQL 连接字符串和 Azure 存储连接字符串。\n\n    SQL 连接字符串指向 [SQL Server Express LocalDB](http://msdn.microsoft.com/zh-cn/library/hh510202.aspx) 数据库。\n\n    存储连接字符串是一个示例，其中包含存储帐户名称和访问密钥的占位符。你需要将此字符串替换为包含你的存储帐户的名称和密钥的连接字符串。\n\n    <pre class=\"prettyprint\">&lt;connectionStrings&gt;\n      &lt;add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\" providerName=\"System.Data.SqlClient\" /&gt;\n      &lt;add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/&gt;\n    &lt;/connectionStrings&gt;</pre>\n\n    存储连接字符串命名为 AzureWebJobsStorage，因为这是 WebJobs SDK 默认情况下使用的名称。此处之所以使用相同的名称，是因为你只需在 Azure 环境中设置一个连接字符串值。\n\n2. 在“服务器资源管理器”中，右键单击存储帐户下的“存储”节点，然后单击“属性”。\n\n    ![单击存储帐户属性](./media/websites-dotnet-webjobs-sdk-get-started/storppty.png)\n\n3. 在“属性”窗口中，单击“存储帐户密钥”，然后单击省略号。\n\n    ![新的存储帐户](./media/websites-dotnet-webjobs-sdk-get-started/newstorage.png)\n\n4. 复制“连接字符串”。\n\n    ![“存储帐户密钥”对话框](./media/websites-dotnet-webjobs-sdk-get-started/cpak.png)\n\n5. 将 *Web.config* 文件中的存储连接字符串替换为你刚刚复制的连接字符串。在粘贴之前，请确保选择引号括住的所有内容，但不包括引号本身。\n\n6. 打开 ContosoAdsWebJob 项目中的 *App.config* 文件。\n\n    此文件包含两个存储连接字符串，一个用于应用程序数据，另一个用于日志记录。可以对应用程序数据和日志记录使用单独的存储帐户，并且可以[对数据使用多个存储帐户](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)。对于本教程，你将使用单个存储帐户。连接字符串包含存储帐户密钥的占位符。\n    <pre class=\"prettyprint\">&lt;configuration&gt; <br/>\n        &lt;connectionStrings&gt; <br/>\n            &lt;add name=\"AzureWebJobsDashboard\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/&gt; <br/>\n            &lt;add name=\"AzureWebJobsStorage\" connectionString=\"DefaultEndpointsProtocol=https;AccountName=<mark>[accountname]</mark>;AccountKey=<mark>[accesskey]</mark>\"/&gt; <br/>\n            &lt;add name=\"ContosoAdsContext\" connectionString=\"Data Source=(localdb)\\\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;\"/&gt; <br/>\n        &lt;/connectionStrings&gt;<br/>\n        &lt;startup&gt; <br/>\n            &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" /&gt; <br/>\n        &lt;/startup&gt; <br/>\n&lt;/configuration&gt;</pre>\n\n    默认情况下，WebJobs SDK 将查找名为 AzureWebJobsStorage 和 AzureWebJobsDashboard 的连接字符串。作为替代方法，你可以根据需要[存储该连接字符串，并显式将它传递给 `JobHost` 对象](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#config)。\n\n7. 将两个存储连接字符串替换为先前复制的连接字符串。\n\n8. 保存所做更改。\n\n## <a id=\"run\"></a>在本地运行应用程序\n\n1. 若要启动应用程序的 Web 前端，请按 CTRL+F5。\n\n    默认浏览器将打开主页。（Web 项目将会运行，因为你已将它设为启动项目。）\n\n    ![Contoso 广告主页](./media/websites-dotnet-webjobs-sdk-get-started/home.png)\n\n2. 若要启动应用程序的 Web 作业后端，请在“解决方案资源管理器”中右键单击 ContosoAdsWebJob 项目，然后单击“调试”>“启动新实例”。\n\n    此时将打开一个控制台应用程序窗口，其中显示了指示 WebJobs SDK JobHost 对象已开始运行的日志记录消息。\n\n    ![显示后端正在运行的控制台应用程序窗口](./media/websites-dotnet-webjobs-sdk-get-started/backendrunning.png)\n\n3. 在浏览器中，单击“创建一个广告”。\n\n4. 输入一些测试数据并选择一个要上载的图像，然后单击“创建”。\n\n    ![创建页面](./media/websites-dotnet-webjobs-sdk-get-started/create.png)\n\n    该应用程序转到索引页，但它不显示新广告的缩略图，因为该处理尚未发生。\n\n    在经过片刻等待后，控制台应用程序窗口中的日志记录消息将显示已收到并已处理某个队列消息。\n\n    ![显示队列消息已处理的控制台应用程序窗口](./media/websites-dotnet-webjobs-sdk-get-started/backendlogs.png)\n\n5. 在查看控制台应用程序窗口中的日志记录消息后，请刷新“索引”页以查看缩略图。\n\n    ![索引页面](./media/websites-dotnet-webjobs-sdk-get-started/list.png)\n\n6. 单击广告的“详细信息”查看实际尺寸的图像。\n\n    ![详细信息页](./media/websites-dotnet-webjobs-sdk-get-started/details.png)\n\n你已在本地计算机上运行应用程序，并且该应用程序正在使用计算机上的 SQL Server 数据库，但在处理云中的队列和 Blob。在下一部分，你将使用云数据库以及云 Blob 和队列在云中运行该应用程序。\n\n## <a id=\"runincloud\"></a>在云中运行应用程序\n\n你将执行以下步骤，以便在云中运行应用程序：\n\n* 部署到 Web 应用。Visual Studio 将自动在 Azure Web 应用中创建一个新的 Web 应用和一个 SQL 数据库实例。\n* 将 Web 应用配置为使用你的 Azure SQL 数据库和存储帐户。\n\n在云中运行时创建一些广告后，请查看 WebJobs SDK 仪表板，以了解该仪表板提供的丰富功能。\n\n### 部署到 Web 应用\n\n1. 关闭浏览器和控制台应用程序窗口。\n\n2. 转到 [Azure 管理门户](http://manage.windowsazure.cn/)，然后单击具有数据库的 Web 应用。\n\n3. 转到 Web 应用的**仪表板**，下载发布配置文件\n\n2. 在“解决方案资源管理器”中，右键单击 ContosoAdsWeb 项目，然后单击“发布”。\n\n3. 在“发布 Web”向导的“配置文件”步骤中，单击“导入”。选择在上一步中下载的配置文件。\n\n14. 在“发布 Web”向导的“连接”步骤中，单击“下一步”。\n\n    ![连接步骤](./media/websites-dotnet-webjobs-sdk-get-started/connstep.png)\n\n15. 在“设置”步骤中，清除“在运行时使用此连接字符串”复选框，然后单击“下一步”。\n\n    ![设置步骤](./media/websites-dotnet-webjobs-sdk-get-started/settingsstep.png)\n\n    你不需要使用发布对话框来设置 SQL 连接字符串，因为你稍后将在 Azure 环境中设置该值。\n\n    你可以忽略此页上的警告。\n\n    * 通常，在 Azure 中运行时使用的存储帐户不同于在本地运行时使用的存储帐户，但对于本教程，你将在两个环境中使用相同的存储帐户。因此，不需要转换 AzureWebJobsStorage 连接字符串。即使你确实想要在云中使用不同的存储帐户，也无需转换连接字符串，因为应用程序在 Azure 中运行时将使用 Azure 环境设置。稍后你将在教程中看到这种情况。\n\n    * 对于本教程，你不需要用于 ContosoAdsContext 数据库的数据模型进行更改，因此，无需使用 Entity Framework Code First 迁移进行部署。当应用程序首次尝试访问 SQL 数据时，Code First 将自动创建一个新的数据库。\n\n    对于本教程，“文件发布选项”下的选项默认值是合适的。\n\n16. 在“预览”步骤中，单击“开始预览”。\n\n    ![单击“开始预览”](./media/websites-dotnet-webjobs-sdk-get-started/previewstep.png)\n\n    你可以忽略有关未发布数据库的警告。Entity Framework Code First 将创建数据库；不需要发布该数据库。\n\n    预览窗口显示 Web 作业项目中的二进制文件和配置文件将复制到 Web 应用的 *app\\_data\\\\jobs\\\\continuous* 文件夹。\n\n    ![预览窗口中的 Web 作业文件](./media/websites-dotnet-webjobs-sdk-get-started/previewwjfiles.png)\n\n17. 单击“发布”。\n\n    Visual Studio 将部署该应用程序，并在浏览器中打开主页 URL。\n\n    只有在下一部分中在 Azure 环境中设置了连接字符串后，你才可以使用该 Web 应用。你将会看到错误页或主页，具体取决于你在前面选择的 Web 应用和数据库创建选项。\n\n### 将 Web 应用配置为使用你的 Azure SQL 数据库和存储帐户。\n\n最佳安全做法是[避免将敏感信息（如连接字符串）放置在源代码存储库中存储的文件内](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control#secrets)。Azure 提供了一种方法来做到这一点：你可以在 Azure 环境中设置连接字符串和其他设置值，在 Azure 中运行应用程序时，ASP.NET 配置 API 将自动提取这些值。你可以使用**服务器资源管理器**、Azure 管理门户、Windows PowerShell 或跨平台命令行界面在 Azure 中设置这些值。有关详细信息，请参阅[应用程序字符串和连接字符串的工作原理](http://azure.microsoft.com/zh-cn/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/)。\n\n在本部分中，你将使用**服务器资源管理器**在 Azure 中设置连接字符串值。\n\n7. 在“服务器资源管理器”中，右键单击“Azure”>“{你的资源组}”下的 Web 应用，然后单击“查看设置”。\n\n    “Azure Web 应用”窗口将在“配置”选项卡上打开。\n\n9. 将 DefaultConnection 连接字符串的名称更改为 ContosoAdsContext。\n\n    当你使用关联的数据库创建 Web 应用时，Azure 已自动创建此连接字符串，因此它已具有正确的连接字符串值。你只需将名称更改为代码将要查找的值。\n\n9. 添加名为 AzureWebJobsStorage 和 AzureWebJobsDashboard 的两个新连接字符串。将类型设置为“自定义”，并将连接字符串值设置为你前面针对 *Web.config* 和 *App.config* 文件使用的相同值。（确保包括整个连接字符串而不仅仅是访问密钥，并且不要包括引号。）\n\n    WebJobs SDK 将使用这些连接字符串，一个用于应用程序数据，另一个用于日志记录。如前面所看到的，用于应用程序数据的连接字符串也由 Web 前端代码使用。\n\n9. 单击“保存”。\n\n    ![Azure 管理门户中的连接字符串](./media/websites-dotnet-webjobs-sdk-get-started/azconnstr.png)\n\n10. 在“服务器资源管理器”中右键单击该 Web 应用，然后单击“停止”。\n\n12. 在 Web 应用停止后，再次右键单击该 Web 应用，然后单击“启动”。\n\n    Web 作业在你发布时会自动启动，但在你进行配置更改时会停止。若要重新启动它，可以重新启动 Web 应用或者在 [Azure 管理门户](https://manage.windowsazure.cn/)中重新启动 Web 作业。一般而言，建议你在配置更改后重新启动 Web 应用。\n\n9. 刷新地址栏中包含 Web 应用 URL 的浏览器窗口。\n\n    此时将显示主页。\n\n10. 就像在本地运行应用程序时一样创建一个广告。\n\n    “索引”页一开始不会显示缩略图。\n\n11. 几秒钟后请刷新页面，随后将会显示缩略图。\n\n    如果未显示缩略图，你可能需要等待一分钟左右，让 Web 作业重新启动。如果经过一段时间后刷新页面时仍未显示缩略图，原因可能是 Web 作业未自动启动。在此情况下，转到 Web 应用的“[管理门户](https://manage.windowsazure.cn)”页中的“Web 作业”选项卡，然后单击“启动”。\n\n###<a name=\"view-the-webjobs-sdk-dashboard\"></a> “Web 作业”选项卡\n\n1. 在[管理门户](https://manage.windowsazure.cn)中，选择你的 Web 应用。\n\n2. 单击“Web 作业”选项卡。\n\n3. 单击 Web 作业“日志”列中的 URL。\n\n    ![“Web 作业”选项卡](./media/websites-dotnet-webjobs-sdk-get-started/wjtab.png)\n\n    WebJobs SDK 仪表板中将打开一个新的浏览器选项卡。仪表板显示 Web 作业正在运行，并显示 WebJobs SDK 触发的代码中的函数列表。\n\n4. 单击某个函数可以查看有关其执行的详细信息。\n\n    ![WebJobs SDK 仪表板](./media/websites-dotnet-webjobs-sdk-get-started/wjdashboardhome.png)\n\n    ![WebJobs SDK 仪表板](./media/websites-dotnet-webjobs-sdk-get-started/wjfunctiondetails.png)\n\n    单击此页上的“重放函数”会导致 WebJobs SDK 框架再次调用该函数，使你可以首先更改传递给该函数的数据。\n\n>[AZURE.NOTE] 完成测试后，请删除 Web 应用和 SQL 数据库实例。 Web 应用是免费的，但 SQL 数据库实例和存储帐户是计费的（由于较小，因此费用很低）。此外，如果保持 Web 应用运行，则找到你的 URL 的任何人都可以创建和查看广告。在管理门户中，转到 Web 应用的“仪表板”选项卡，然后单击页面底部的“删除”按钮。然后，你可以选中用于同时删除 SQL 数据库实例的复选框。如果你只是想要暂时防止其他人访问 Web 应用，请改为单击“停止”。在这种情况下，SQL 数据库和存储帐户会继续计费。当你不再需要 SQL 数据库和存储帐户时，可以遵循类似的过程将其删除。\n\n## <a id=\"create\"></a>从头开始创建应用程序\n\n在本节中，你将执行以下任务：\n\n* 创建一个包含 Web 项目的 Visual Studio 解决方案。\n* 为前端和后端之间共享的数据访问层添加一个类库项目。\n* 在启用 Web 作业部署的情况下，为后端添加一个控制台应用程序项目。\n* 添加 NuGet 包。\n* 设置项目引用。\n* 从你在学习本教程前面部分时使用的已下载应用程序中复制应用程序代码和配置文件。\n* 查看用于处理 Azure Blob 和队列及 WebJobs SDK 的代码部分。\n\n### 创建一个包含 Web 项目的 Visual Studio 解决方案和类库项目\n\n1. 在 Visual Studio 的“文件”菜单中选择“新建”>“项目”。\n\n2. 在“新建项目”对话框中，选择“Visual C#”>“Web”>“ASP.NET  Web 应用”。\n\n3. 将项目命名为 ContosoAdsWeb，将解决方案命名为 ContosoAdsWebJobsSDK（如果你要将解决方案放置在与下载的解决方案相同的文件夹中，请更改此解决方案名称），然后单击“确定”。\n\n    ![新建项目](./media/websites-dotnet-webjobs-sdk-get-started/newproject.png)\n\n5. 在“新建 ASP.NET 项目”对话框中选择 MVC 模板，然后清除“Azure”下的“在云中托管”复选框。\n\n    选中“在云中托管”可让 Visual Studio 自动创建新的 Azure Web 应用和 SQL 数据库。由于前面已创建这些 Web 应用和数据库，因此现在创建项目时，你不需要执行此操作。如果要新建，请选中该复选框。然后，请像前面部署应用程序时一样配置新 Web 应用和 SQL 数据库。\n\n5. 单击“更改身份验证”。\n\n    ![更改身份验证](./media/websites-dotnet-webjobs-sdk-get-started/chgauth.png)\n\n7. 在“更改身份验证”对话框中，选择“无身份验证”，然后单击“确定”。\n\n    ![无身份验证](./media/websites-dotnet-webjobs-sdk-get-started/noauth.png)\n\n8. 在“新建 ASP.NET 项目”对话框中，单击“确定”。\n\n    Visual Studio 将创建解决方案和 Web 项目。\n\n9. 在“解决方案资源管理器”中，右键单击该解决方案（不是项目），然后选择“添加”>“新建项目”。\n\n11. 在“添加新项目”对话框中，选择“Visual C#”>“Windows 桌面”>“类库”模板。\n\n10. 将项目命名为 *ContosoAdsCommon*，然后单击“确定”。\n\n    此项目将包含前端和后端将要使用的实体框架上下文与数据模型。或者，你也可以在 Web 项目中定义 EF 相关的类，并从 Web 作业项目引用该项目。但是，这样会使 Web 作业项目引用它不需要的 Web 程序集。\n\n### 在启用 Web 作业部署的情况下添加控制台应用程序项目\n\n1. 右键单击 Web 项目（不是解决方案或类库项目），然后单击“添加”>“新建 Azure Web 作业项目”。\n\n    ![“新建 Azure Web 作业项目”菜单选项](./media/websites-dotnet-webjobs-sdk-get-started/newawjp.png)\n\n2. 在“添加 Azure Web 作业”对话框中，输入 ContosoAdsWebJob 作为“项目名称”和“Web 作业名称”。将“Web 作业运行模式”保留设置为“连续运行”。\n\n3.  单击**“确定”**。\n\n    Visual Studio 将创建一个控制台应用程序，每当你部署 Web 项目时，该应用程序就会部署为 Web 作业。为此，它将在创建项目后执行以下任务：\n\n    * 在 Web 作业项目的 Properties 文件夹中添加一个 *webjob-publish-settings.json* 文件。\n    * 在 Web 项目的 Properties 文件夹中添加一个 *webjobs-list.json* 文件。\n    * 在 Web 作业项目中安装 Microsoft.Web.WebJobs.Publish NuGet 包。\n\n    有关这些更改的详细信息，请参阅[如何使用 Visual Studio 部署 Web 作业](/documentation/articles/websites-dotnet-deploy-webjobs)。\n\n### 添加 NuGet 包\n\nWeb 作业的 new-project 模板会自动安装 WebJobs SDK NuGet 包 [Microsoft.Azure.WebJobs](http://www.nuget.org/packages/Microsoft.Azure.WebJobs) 及其依赖项。\n\n在 Web 作业项目中自动安装的 WebJobs SDK 依赖项之一是 Azure 存储客户端库 (SCL)。但是，若要处理 Blob 和队列，你需要将此依赖项添加到 Web 项目。\n\n1. 打开解决方案的“管理 NuGet 包”对话框。\n\n2. 在左窗格中，选择“已安装的包”。\n\n3. 找到 *Azure 存储空间* 包，然后单击“管理”。\n\n4. 在“选择项目”框中，选中“ContosoAdsWeb”复选框，然后单击“确定”。\n\n    所有三个项目都使用实体框架来处理 SQL 数据库中的数据。\n\n5. 在左窗格中，选择“联机”。\n\n6. 找到 *EntityFramework* NuGet 包，并将其安装在所有三个项目中。\n\n\n### 设置项目引用\n\nWeb 项目和 Web 作业项目都会处理 SQL 数据库，因此两者都需要引用 ContosoAdsCommon 项目。\n\n1. 在 ContosoAdsWeb 项目中，设置对 ContosoAdsCommon 项目的引用。（右键单击 ContosoAdsWeb 项目，然后单击“添加”>“引用”。在“引用管理器”对话框中，选择“解决方案”>“项目”>“ContosoAdsCommon”，然后单击“确定”。）\n\n1. 在 ContosoAdsWebJob 项目中，设置对 ContosAdsCommon 项目的引用。\n\n    WebJob 项目需要通过引用来处理图像和访问连接字符串。\n\n3. 在 ContosoAdsWebJob 项目中，设置对 `System.Drawing` 和 `System.Configuration` 的引用。\n\n### 添加代码和配置文件\n\n本教程未说明如何[使用基架创建 MVC 控制器和视图](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)、如何[编写适用于 SQL Server 数据库的实体框架代码](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc)，或者[在 ASP.NET 4.5 中的异步编程基础知识](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/web-development-best-practices#async)。因此，余下的所有操作就是将已下载解决方案中的代码和配置文件复制到新解决方案中。在完成该操作后，以下部分将演示并说明代码的关键部分。\n\n若要将文件添加到某个项目或文件夹，请右键单击该项目或文件夹，然后单击“添加”>“现有项”。选择所需的文件，然后单击“添加”。如果询问你是否想要替换现有文件，请单击“是”。\n\n1. 在 ContosoAdsCommon 项目中，删除 *Class1.cs* 文件，并在其原位置添加已下载项目中的以下文件。\n\n    - *Ad.cs*\n    - *ContosoAdscontext.cs*\n    - *BlobInformation.cs*<br/><br/>\n\n2. 在 ContosoAdsWeb 项目中，从下载的项目添加以下文件。\n\n    - *Web.config*\n    - *Global.asax.cs*  \n    - 在 *Controllers* 文件夹中： *AdController.cs*\n    - 在 *Views/Shared* 文件夹中： *\\_Layout.cshtml* 文件\n    - 在 *Views/Home* 文件夹中： *Index.cshtml*\n    - 在 *Views/Ad* 文件夹（首先创建该文件夹）中：五个 *.cshtml* 文件<br/><br/>\n\n3. 在 ContosoAdsWebJob 项目中，添加已下载项目中的以下文件。\n\n    - *App.config* （将文件类型筛选器更改为“所有文件”）\n    - *Program.cs*\n    - *Functions.cs*\n\n现在，你可以根据本教程前面所述生成、运行和部署应用程序。但是，在执行此操作之前，请在部署到的第一个 Web 应用中停止正在运行的 Web 作业。否则，Web 作业将处理本地创建的，或者新 Web 应用运行的应用创建的队列消息，因为所有消息均使用相同的存储帐户。\n\n## <a id=\"code\"></a>查看应用程序代码\n\n以下部分解释了与处理 WebJobs SDK 和 Azure 存储 Blob 与队列相关的代码。\n\n> [AZURE.NOTE] 对于特定于 WebJobs SDK 的代码，请转到 [Program.cs 和 Functions.cs](#programcs) 部分。\n\n### ContosoAdsCommon - Ad.cs\n\nAd.cs 文件为 ad 类别定义一个枚举，为 ad 信息定义一个 POCO 实体类。\n\n        public enum Category\n        {\n            Cars,\n            [Display(Name=\"Real Estate\")]\n            RealEstate,\n            [Display(Name = \"Free Stuff\")]\n            FreeStuff\n        }\n\n        public class Ad\n        {\n            public int AdId { get; set; }\n\n            [StringLength(100)]\n            public string Title { get; set; }\n\n            public int Price { get; set; }\n\n            [StringLength(1000)]\n            [DataType(DataType.MultilineText)]\n            public string Description { get; set; }\n\n            [StringLength(1000)]\n            [DisplayName(\"Full-size Image\")]\n            public string ImageURL { get; set; }\n\n            [StringLength(1000)]\n            [DisplayName(\"Thumbnail\")]\n            public string ThumbnailURL { get; set; }\n\n            [DataType(DataType.Date)]\n            [DisplayFormat(DataFormatString = \"{0:yyyy-MM-dd}\", ApplyFormatInEditMode = true)]\n            public DateTime PostedDate { get; set; }\n\n            public Category? Category { get; set; }\n            [StringLength(12)]\n            public string Phone { get; set; }\n        }\n\n### ContosoAdsCommon - ContosoAdsContext.cs\n\nContosoAdsContext 类指定 DbSet 集合中使用的 Ad 类，实体框架将存储在 SQL 数据库中。\n\n        public class ContosoAdsContext : DbContext\n        {\n            public ContosoAdsContext() : base(\"name=ContosoAdsContext\")\n            {\n            }\n            public ContosoAdsContext(string connString)\n                : base(connString)\n            {\n            }\n            public System.Data.Entity.DbSet<Ad> Ads { get; set; }\n        }\n\n类具有两个构造函数。第一个由 Web 项目使用，并指定存储在 Web.config 文件或 Azure 运行时环境中的连接字符串的名称。第二个构造函数允许你在实际的连接字符串中传递。程序需要 Web 作业项目，因为它没有 Web.config 文件。你以前看到存储此连接字符串的位置，并且稍后你将看到连接字符串在实例化 DbContext 类时代码如何检索它。\n\n### ContosoAdsCommon - BlobInformation.cs\n\n`BlobInformation` 类用于在队列消息中存储有关图像 Blob 的信息。\n\n        public class BlobInformation\n        {\n            public Uri BlobUri { get; set; }\n\n            public string BlobName\n            {\n                get\n                {\n                    return BlobUri.Segments[BlobUri.Segments.Length - 1];\n                }\n            }\n            public string BlobNameWithoutExtension\n            {\n                get\n                {\n                    return Path.GetFileNameWithoutExtension(BlobName);\n                }\n            }\n            public int AdId { get; set; }\n        }\n\n\n### ContosoAdsWeb - Global.asax.cs\n\n从 `Application_Start` 方法调用的代码创建 *图像* Blob 容器和 *图像* 队列（如果它们尚不存在）。这确保只要你开始使用新的存储帐户，就自动创建所需的 Blob 容器和队列。\n\n此代码通过使用 *Web.config* 文件或 Azure 运行时环境中的存储连接字符串获取存储帐户的访问权限。\n\n        var storageAccount = CloudStorageAccount.Parse\n            (ConfigurationManager.ConnectionStrings[\"AzureWebJobsStorage\"].ToString());\n\n然后，它获取对 *图像* Blob 容器的引用，创建尚不存在的容器，并在新容器上设置访问权限。默认情况下，新容器只允许带存储帐户凭据的客户端访问 Blob。 Web 应用需要 Blob 是公共的，以便它可以使用指向图像 Blob 的 Url 显示图像。\n\n        var blobClient = storageAccount.CreateCloudBlobClient();\n        var imagesBlobContainer = blobClient.GetContainerReference(\"images\");\n        if (imagesBlobContainer.CreateIfNotExists())\n        {\n            imagesBlobContainer.SetPermissions(\n                new BlobContainerPermissions\n                {\n                    PublicAccess = BlobContainerPublicAccessType.Blob\n                });\n        }\n\n类似代码获取对 *blobnamerequest* 队列的引用并创建一个新队列。这种情况不需要权限更改。本教程稍后的 [ResolveBlobName](#resolveblobname) 部分将说明为何只使用 Web 应用所写入到的队列来获取 Blob 名称而不生成缩略图。\n\n        CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n        var imagesQueue = queueClient.GetQueueReference(\"blobnamerequest\");\n        imagesQueue.CreateIfNotExists();\n\n### ContosoAdsWeb - \\_Layout.cshtml\n\n*\\_Layout.cshtml* 文件设置页眉和页脚中的应用程序，并创建“广告”菜单项。\n\n### ContosoAdsWeb - Views\\\\Home\\\\Index.cshtml\n\n*Views\\\\Home\\\\Index.cshtml* 文件在主页上显示类别链接。链接将查询字符串变量中的 `Category` 枚举的整数值传递到“广告索引”页面。\n\n        <li>@Html.ActionLink(\"Cars\", \"Index\", \"Ad\", new { category = (int)Category.Cars }, null)</li>\n        <li>@Html.ActionLink(\"Real estate\", \"Index\", \"Ad\", new { category = (int)Category.RealEstate }, null)</li>\n        <li>@Html.ActionLink(\"Free stuff\", \"Index\", \"Ad\", new { category = (int)Category.FreeStuff }, null)</li>\n        <li>@Html.ActionLink(\"All\", \"Index\", \"Ad\", null, null)</li>\n\n###<a name=\"resolveblobname\"></a> ContosoAdsWeb - AdController.cs\n\n在 *AdController.cs* 文件中，构造函数调用 `InitializeStorage` 方法来创建 Azure 存储客户端库对象，它提供一个用于处理 Blob 和队列的 API。\n\n然后，代码获取对 *图像* Blob 容器的引用，正如你之前在 *Global.asax.cs* 中看到的。在执行该操作时，它设置适用于 Web 应用的默认[重试策略](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/transient-fault-handling)。对于因暂时性故障反复重试超过一分钟的 Web 应用，默认指数回退重试策略可能将其挂起。此处指定的重试策略将在每次尝试后等待 3 秒，最多可尝试 3 次。\n\n        var blobClient = storageAccount.CreateCloudBlobClient();\n        blobClient.DefaultRequestOptions.RetryPolicy = new LinearRetry(TimeSpan.FromSeconds(3), 3);\n        imagesBlobContainer = blobClient.GetContainerReference(\"images\");\n\n类似代码获取对 *图像* 队列的引用。\n\n        CloudQueueClient queueClient = storageAccount.CreateCloudQueueClient();\n        queueClient.DefaultRequestOptions.RetryPolicy = new LinearRetry(TimeSpan.FromSeconds(3), 3);\n        imagesQueue = queueClient.GetQueueReference(\"blobnamerequest\");\n\n大部分控制器代码通常用于使用 DbContext 类的实体框架数据模型。例外情况是 HttpPost `Create` 方法，它上载文件并将其保存在 Blob 存储中。模型联编程序为该方法提供一个 [HttpPostedFileBase](http://msdn.microsoft.com/zh-cn/library/system.web.httppostedfilebase.aspx) 对象。\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Create(\n            [Bind(Include = \"Title,Price,Description,Category,Phone\")] Ad ad,\n            HttpPostedFileBase imageFile)\n\n如果用户选择要上载的文件，则代码上载该文件，将其保存在 Blob 中，并使用指向 Blob 的 URL 更新广告数据库记录。\n\n        if (imageFile != null && imageFile.ContentLength != 0)\n        {\n            blob = await UploadAndSaveBlobAsync(imageFile);\n            ad.ImageURL = blob.Uri.ToString();\n        }\n\n执行上载的代码位于 `UploadAndSaveBlobAsync` 方法中。它将创建 Blob 的 GUID 名称，上载和保存该文件，并将引用返回已保存的 Blob。\n\n        private async Task<CloudBlockBlob> UploadAndSaveBlobAsync(HttpPostedFileBase imageFile)\n        {\n            string blobName = Guid.NewGuid().ToString() + Path.GetExtension(imageFile.FileName);\n            CloudBlockBlob imageBlob = imagesBlobContainer.GetBlockBlobReference(blobName);\n            using (var fileStream = imageFile.InputStream)\n            {\n                await imageBlob.UploadFromStreamAsync(fileStream);\n            }\n            return imageBlob;\n        }\n\nHttpPost `Create` 方法上载 Blob 并更新数据库之后，将会创建队列消息，以通知后端进程图像已准备好转换为一个缩略图。\n\n        BlobInformation blobInfo = new BlobInformation() { AdId = ad.AdId, BlobUri = new Uri(ad.ImageURL) };\n        var queueMessage = new CloudQueueMessage(JsonConvert.SerializeObject(blobInfo));\n        await thumbnailRequestQueue.AddMessageAsync(queueMessage);\n\nHttpPost `Edit` 方法的代码和它类似，不同之处在于如果用户选择新图像文件，则必须删除此广告已存在的任何 Blob。\n\n        if (imageFile != null && imageFile.ContentLength != 0)\n        {\n            await DeleteAdBlobsAsync(ad);\n            imageBlob = await UploadAndSaveBlobAsync(imageFile);\n            ad.ImageURL = imageBlob.Uri.ToString();\n        }\n\n以下是删除 Blob 时删除广告的代码：\n\n        private async Task DeleteAdBlobsAsync(Ad ad)\n        {\n            if (!string.IsNullOrWhiteSpace(ad.ImageURL))\n            {\n                Uri blobUri = new Uri(ad.ImageURL);\n                await DeleteAdBlobAsync(blobUri);\n            }\n            if (!string.IsNullOrWhiteSpace(ad.ThumbnailURL))\n            {\n                Uri blobUri = new Uri(ad.ThumbnailURL);\n                await DeleteAdBlobAsync(blobUri);\n            }\n        }\n        private static async Task DeleteAdBlobAsync(Uri blobUri)\n        {\n            string blobName = blobUri.Segments[blobUri.Segments.Length - 1];\n            CloudBlockBlob blobToDelete = imagesBlobContainer.GetBlockBlobReference(blobName);\n            await blobToDelete.DeleteAsync();\n        }\n\n### ContosoAdsWeb - Views\\\\Ad\\\\Index.cshtml 和 Details.cshtml\n\n*Index.cshtml* 文件显示带有其他广告数据的缩略图：\n\n        <img  src=\"@Html.Raw(item.ThumbnailURL)\" />\n\n*Details.cshtml* 文件显示完全尺寸的图像：\n\n        <img src=\"@Html.Raw(Model.ImageURL)\" />\n\n### ContosoAdsWeb - Views\\\\Ad\\\\Create.cshtml 和 Edit.cshtml\n\n*Create.cshtml* 和 *Edit.cshtml* 文件指定窗体编码，允许控制器获取 `HttpPostedFileBase` 对象。\n\n        @using (Html.BeginForm(\"Create\", \"Ad\", FormMethod.Post, new { enctype = \"multipart/form-data\" }))\n\n`<input>` 元素通知浏览器提供文件选择对话框。\n\n        <input type=\"file\" name=\"imageFile\" accept=\"image/*\" class=\"form-control fileupload\" />\n\n### <a id=\"programcs\"></a>ContosoAdsWebJob - Program.cs\n\n当 Web 作业启动时，`Main` 方法将调用 WebJobs SDK `JobHost.RunAndBlock` 方法，以开始执行当前线程上触发的函数。\n\n        static void Main(string[] args)\n        {\n            JobHost host = new JobHost();\n            host.RunAndBlock();\n        }\n\n### <a id=\"generatethumbnail\"></a>ContosoAdsWebJob - Functions.cs - GenerateThumbnail 方法\n\n接收队列消息时，WebJobs SDK 将调用此方法。该方法创建缩略图，并将缩略图放在数据库中的 URL。\n\n        public static void GenerateThumbnail(\n        [QueueTrigger(\"thumbnailrequest\")] BlobInformation blobInfo,\n        [Blob(\"images/{BlobName}\", FileAccess.Read)] Stream input,\n        [Blob(\"images/{BlobNameWithoutExtension}_thumbnail.jpg\")] CloudBlockBlob outputBlob)\n        {\n            using (Stream output = outputBlob.OpenWrite())\n            {\n                ConvertImageToThumbnailJPG(input, output);\n                outputBlob.Properties.ContentType = \"image/jpeg\";\n            }\n\n            // Entity Framework context class is not thread-safe, so it must\n            // be instantiated and disposed within the function.\n            using (ContosoAdsContext db = new ContosoAdsContext())\n            {\n                var id = blobInfo.AdId;\n                Ad ad = db.Ads.Find(id);\n                if (ad == null)\n                {\n                    throw new Exception(String.Format(\"AdId {0} not found, can't create thumbnail\", id.ToString()));\n                }\n                ad.ThumbnailURL = outputBlob.Uri.ToString();\n                db.SaveChanges();\n            }\n        }\n\n* `QueueTrigger` 属性指示 WebJobs SDK thumbnailrequest 队列上接收到新消息时调用此方法。\n\n        [QueueTrigger(\"thumbnailrequest\")] BlobInformation blobInfo,\n\n    队列消息中的 `BlobInformation` 对象是自动反序列化为 `blobInfo` 参数。当该方法完成时，将删除队列消息。如果该方法将在完成之前失败，则不会删除队列消息；10 分钟租约过期后，会再次挑选发布和处理消息。如果一条消息始终导致异常，则不会无限期地重复这一序列。如果尝试处理某条消息 5 次都不成功，该消息将移到名为 {queuename}-poison 的队列。可以配置最大尝试次数。\n\n* 这两个 `Blob` 属性提供绑定到 Blob 的对象：一个绑定到现有的图像 Blob，另一个绑定到该方法将创建的新缩略图 Blob。\n\n        [Blob(\"images/{BlobName}\", FileAccess.Read)] Stream input,\n        [Blob(\"images/{BlobNameWithoutExtension}_thumbnail.jpg\")] CloudBlockBlob outputBlob)\n\n    Blob 名称来自队列消息中收到的 `BlobInformation` 对象的属性（`BlobName` 和 `BlobNameWithoutExtension`）。若要获取存储客户端库的完整功能，可以使用兼容 Blob 的 `CloudBlockBlob` 类。如果想要重用已编写的能够用于 `Stream` 对象的代码，你可以使用 `Stream` 类。\n\n有关如何编写使用 WebJobs SDK 属性的函数的详细信息，请参阅以下资源：\n\n* [如何通过 WebJobs SDK 使用 Azure 队列存储](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to)\n* [如何通过 WebJobs SDK 使用 Azure Blob 存储](/documentation/articles/websites-dotnet-webjobs-sdk-storage-blobs-how-to)\n* [如何通过 WebJobs SDK 使用 Azure 表存储](/documentation/articles/websites-dotnet-webjobs-sdk-storage-tables-how-to)\n* [如何通过 WebJobs SDK 使用 Azure 服务总线](/documentation/articles/websites-dotnet-webjobs-sdk-service-bus)\n\n> [AZURE.NOTE]\n> \n> * 如果在多个 VM 上运行 Web 应用，多个 Web 作业将同时运行，在某些情况下，这可能会导致相同的数据被处理多次。如果使用内置队列、Blob 和服务总线触发器，则这不会造成问题。SDK 可确保只会针对每个消息或 Blob 处理函数一次。\n> * 有关如何实现正常关闭的信息，请参阅[正常关闭](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#graceful)。\n> * 为方便起见，`ConvertImageToThumbnailJPG` 方法中的代码（未显示）使用 `System.Drawing` 命名空间中的类。但是，此命名空间中的类已设计用于 Windows 窗体。不支持在 Windows 或 ASP.NET 服务中使用。有关图像处理选项的详细信息，请参阅[动态图像生成](http://www.hanselman.com/blog/BackToBasicsDynamicImageGenerationASPNETControllersRoutingIHttpHandlersAndRunAllManagedModulesForAllRequests.aspx)和[深入学习图像大小调整](http://www.hanselminutes.com/313/deep-inside-image-resizing-and-scaling-with-aspnet-and-iis-with-imageresizingnet-author-na)。\n\n##<a name=\"next-steps\"></a> 后续步骤\n\n在本教程中，你已了解了一个使用 WebJobs SDK 进行后端处理的简单多层应用程序。本部分提供有关进一步了解 ASP.NET 多层应用程序和 Web 作业的一些建议。\n\n### 缺少的功能\n\n该应用程序有意保持入门教程的简单性。在现实的应用程序中，你会实施[依赖关系注入](http://www.asp.net/mvc/tutorials/hands-on-labs/aspnet-mvc-4-dependency-injection)或[存储库和单元的工作模式](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#repo)，使用[日志记录接口](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log)，使用 [EF Code First 迁移](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application)来管理数据模型更改，并使用 [EF 连接复原](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/connection-resiliency-and-command-interception-with-the-entity-framework-in-an-asp-net-mvc-application)管理暂时性的网络错误。\n\n### 缩放 Web 作业\n\nWeb 作业在 Web 应用的上下文中运行，并且不可单独缩放。例如，如果你有一个标准 Web 应用实例，只运行了后台进程的一个实例，并且该实例正在使用某些服务器资源（CPU、内存等），而这些资源也可用于提供 Web 内容。\n\n如果流量根据一天的时间或者星期变化，并且你需要执行的后端处理可以等待，则你可以将 Web 作业安排为在低流量期间运行。如果该解决方案的负载仍然太高，可以在针对该用途专用的独立 Web 应用中以 Web 作业形式运行后端。然后，可以独立于前端 Web 应用缩放你的后端 Web 应用。\n\n有关详细信息，请参阅[缩放 Web 作业](/documentation/articles/websites-webjobs-resources#scale)。\n\n### 避免因 Web 应用超时而导致其关闭\n\n若要确保 Web 作业始终在你的 Web 应用的所有实例上运行，你必须启用 [AlwaysOn](http://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx) 功能。\n\n### 更多 Web 作业文档\n\n有关详细信息，请参阅[Azure Web 作业文档资源](/documentation/articles/websites-webjobs-resources/)。\n\n<!---HONumber=Mooncake_0118_2016-->"}