{
  "nodes": [
    {
      "content": "开始使用表存储和 Visual Studio 连接服务 (ASP.NET) | Azure",
      "pos": [
        28,
        73
      ]
    },
    {
      "content": "在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的 ASP.NET 项目中使用 Azure 表存储",
      "pos": [
        92,
        168
      ]
    },
    {
      "content": "&lt;tags ms.service=\"storage\"",
      "pos": [
        281,
        307
      ]
    },
    {
      "content": "开始使用表存储和 Visual Studio 连接服务 (ASP.NET)",
      "pos": [
        366,
        403
      ]
    },
    {
      "content": "概述",
      "pos": [
        408,
        410
      ]
    },
    {
      "pos": [
        411,
        756
      ],
      "content": "本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 项目中创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure 表存储。本文向你展示如何使用 Azure 表执行常见任务，包括创建和删除表以及使用表实体。示例是用 C# 代码编写的，并使用了 <bpt id=\"p1\">[</bpt>Azure .NET 存储客户端库<ept id=\"p1\">](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)</ept>。有关使用 Azure 表存储的更多常规信息，请参阅<bpt id=\"p2\">[</bpt>如何通过 .NET 使用表存储<ept id=\"p2\">](/documentation/articles/storage-dotnet-how-to-use-tables)</ept>。"
    },
    {
      "content": "Azure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。",
      "pos": [
        759,
        851
      ]
    },
    {
      "content": "使用代码访问表",
      "pos": [
        857,
        864
      ]
    },
    {
      "pos": [
        869,
        905
      ],
      "content": "请确保 C# 文件顶部的命名空间声明包括这些 <bpt id=\"p1\">**</bpt>using<ept id=\"p1\">**</ept> 语句。"
    },
    {
      "pos": [
        1095,
        1171
      ],
      "content": "获取表示存储帐户信息的 <bpt id=\"p1\">**</bpt>CloudStorageAccount<ept id=\"p1\">**</ept> 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。"
    },
    {
      "pos": [
        1356,
        1387
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意<ept id=\"p1\">**</ept> - 在下列示例中，在代码的前面使用上述全部代码。"
    },
    {
      "pos": [
        1392,
        1432
      ],
      "content": "获取 <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> 对象，以引用存储帐户中的表对象。"
    },
    {
      "pos": [
        1554,
        1588
      ],
      "content": "获取 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 引用对象，以引用特定的表和实体。"
    },
    {
      "content": "使用代码创建表",
      "pos": [
        1725,
        1732
      ]
    },
    {
      "pos": [
        1734,
        1795
      ],
      "content": "若要创建 Azure 表，只需在前面的代码中添加对 <bpt id=\"p1\">**</bpt>CreateIfNotExistsAsync()<ept id=\"p1\">**</ept> 的调用即可。"
    },
    {
      "content": "插入一批实体",
      "pos": [
        1894,
        1900
      ]
    },
    {
      "pos": [
        1902,
        2056
      ],
      "content": "您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（“Jeff Smith”和“Ben Smith”），使用 Insert 方法将它们添加到 <bpt id=\"p1\">**</bpt>TableBatchOperation<ept id=\"p1\">**</ept> 对象，然后通过调用 <bpt id=\"p2\">**</bpt>CloudTable.ExecuteBatchAsync<ept id=\"p2\">**</ept> 启动操作。"
    },
    {
      "content": "获取分区中的所有实体",
      "pos": [
        2937,
        2947
      ]
    },
    {
      "pos": [
        2948,
        3044
      ],
      "content": "若要查询表以获取分区中的所有实体，请使用 <bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept> 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。"
    },
    {
      "content": "获取单个实体",
      "pos": [
        3957,
        3963
      ]
    },
    {
      "pos": [
        3964,
        4137
      ],
      "content": "您可以编写查询以获取单个特定实体。以下代码使用 <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> 对象来指定名为“Ben Smith”的客户。此方法仅返回一个实体，而不是一个集合，并且 <bpt id=\"p2\">**</bpt>TableResult.Result<ept id=\"p2\">**</ept> 中的返回值是一个 <bpt id=\"p3\">**</bpt>CustomerEntity<ept id=\"p3\">**</ept> 对象。在查询中同时指定分区键和行键是从表服务中检索单个实体的最快方法。"
    },
    {
      "content": "删除实体",
      "pos": [
        4794,
        4798
      ]
    },
    {
      "content": "您可以在找到实体后将其删除。以下代码将查找名为“Ben Smith”的客户实体，如果找到，会将其删除。",
      "pos": [
        4799,
        4850
      ]
    },
    {
      "content": "后续步骤",
      "pos": [
        5744,
        5748
      ]
    }
  ],
  "content": "<properties \n    pageTitle=\"开始使用表存储和 Visual Studio 连接服务 (ASP.NET) | Azure\"\n    description=\"在使用 Visual Studio 连接服务连接到存储帐户后，如何开始在 Visual Studio 的 ASP.NET 项目中使用 Azure 表存储\"\n    services=\"storage\"\n    documentationCenter=\"\"\n    authors=\"TomArcher\"\n    manager=\"douge\"\n    editor=\"\"/>\n\n<tags ms.service=\"storage\"\n\n    ms.date=\"12/16/2015\"\n    wacn.date=\"01/14/2016\"/>\n\n# 开始使用表存储和 Visual Studio 连接服务 (ASP.NET)\n\n## 概述\n本文介绍通过使用 Visual Studio 中的“添加连接服务”对话框在 ASP.NET 项目中创建或引用 Azure 存储帐户之后，如何开始在 Visual Studio 中使用 Azure 表存储。本文向你展示如何使用 Azure 表执行常见任务，包括创建和删除表以及使用表实体。示例是用 C# 代码编写的，并使用了 [Azure .NET 存储客户端库](https://msdn.microsoft.com/zh-cn/library/azure/dn261237.aspx)。有关使用 Azure 表存储的更多常规信息，请参阅[如何通过 .NET 使用表存储](/documentation/articles/storage-dotnet-how-to-use-tables)。\n\n\nAzure 表存储服务使用户可以存储大量结构化数据。该服务是一个 NoSQL 数据存储，接受来自 Azure 云内部和外部的通过验证的呼叫。Azure 表最适合存储结构化非关系型数据。\n\n\n## 使用代码访问表\n\n1. 请确保 C# 文件顶部的命名空间声明包括这些 **using** 语句。\n\n         using Microsoft.Azure;\n         using Microsoft.WindowsAzure.Storage;\n         using Microsoft.WindowsAzure.Storage.Auth;\n         using Microsoft.WindowsAzure.Storage.Table;\n\n2. 获取表示存储帐户信息的 **CloudStorageAccount** 对象。使用下面的代码获取存储连接字符串和 Azure 服务配置中的存储帐户信息。\n\n         CloudStorageAccount storageAccount = CloudStorageAccount.Parse(\n           CloudConfigurationManager.GetSetting(\"<storage-account-name>_AzureStorageConnectionString\"));\n\n    **注意** - 在下列示例中，在代码的前面使用上述全部代码。\n\n3. 获取 **CloudTableClient** 对象，以引用存储帐户中的表对象。\n\n        // Create the table client.\n        CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n\n4. 获取 **CloudTable** 引用对象，以引用特定的表和实体。\n\n        // Get a reference to a table named \"peopleTable\"\n        CloudTable table = tableClient.GetTableReference(\"peopleTable\");\n\n## 使用代码创建表\n\n若要创建 Azure 表，只需在前面的代码中添加对 **CreateIfNotExistsAsync()** 的调用即可。\n\n    // Create the CloudTable if it does not exist\n    await table.CreateIfNotExistsAsync();\n\n\n## 插入一批实体\n\n您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（“Jeff Smith”和“Ben Smith”），使用 Insert 方法将它们添加到 **TableBatchOperation** 对象，然后通过调用 **CloudTable.ExecuteBatchAsync** 启动操作。\n\n    // Get a reference to a CloudTable object named 'peopleTable' as described in \"Access a table in code\"\n\n    // Create the batch operation.\n    TableBatchOperation batchOperation = new TableBatchOperation();\n\n    // Create a customer entity and add it to the table.\n    CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\n    customer1.Email = \"Jeff@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0104\";\n\n    // Create another customer entity and add it to the table.\n    CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n    customer2.Email = \"Ben@contoso.com\";\n    customer2.PhoneNumber = \"425-555-0102\";\n\n    // Add both customer entities to the batch insert operation.\n    batchOperation.Insert(customer1);\n    batchOperation.Insert(customer2);\n\n    // Execute the batch operation.\n    await peopleTable.ExecuteBatchAsync(batchOperation);\n\n## 获取分区中的所有实体\n若要查询表以获取分区中的所有实体，请使用 **TableQuery** 对象。以下代码示例指定了一个筛选器，以筛选分区键为“Smith”的实体。此示例会将查询结果中每个实体的字段输出到控制台。\n\n    // Get a reference to a CloudTable object named 'peopleTable' as described in \"Access a table in code\"\n\n    // Construct the query operation for all customer entities where PartitionKey=\"Smith\".\n    TableQuery<CustomerEntity> query = new TableQuery<CustomerEntity>().Where(TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"));\n\n    // Print the fields for each customer.\n    TableContinuationToken token = null;\n    do\n    {\n        TableQuerySegment<CustomerEntity>\n        resultSegment = await peopleTable.ExecuteQuerySegmentedAsync(query, token);\n        token = resultSegment.ContinuationToken;\n\n        foreach (CustomerEntity entity in resultSegment.Results)\n        {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n        entity.Email, entity.PhoneNumber);\n        }\n        } while (token != null);\n\n        return View();\n\n\n## 获取单个实体\n您可以编写查询以获取单个特定实体。以下代码使用 **TableOperation** 对象来指定名为“Ben Smith”的客户。此方法仅返回一个实体，而不是一个集合，并且 **TableResult.Result** 中的返回值是一个 **CustomerEntity** 对象。在查询中同时指定分区键和行键是从表服务中检索单个实体的最快方法。\n\n        // Get a reference to a CloudTable object named 'peopleTable' as described in \"Access a table in code\"\n\n        // Create a retrieve operation that takes a customer entity.\n        TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the retrieve operation.\n    TableResult retrievedResult = await peopleTable.ExecuteAsync(retrieveOperation);\n\n    // Print the phone number of the result.\n    if (retrievedResult.Result != null)\n       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);\n    else\n       Console.WriteLine(\"The phone number could not be retrieved.\");\n\n## 删除实体\n您可以在找到实体后将其删除。以下代码将查找名为“Ben Smith”的客户实体，如果找到，会将其删除。\n\n    // Get a reference to a CloudTable object named 'peopleTable' as described in \"Access a table in code\"\n\n    // Create a retrieve operation that expects a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n\n    // Execute the operation.\n    TableResult retrievedResult = peopleTable.Execute(retrieveOperation);\n\n    // Assign the result to a CustomerEntity object.\n    CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;\n\n    // Create the Delete TableOperation and then execute it.\n    if (deleteEntity != null)\n    {\n       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);\n\n       // Execute the operation.\n       await peopleTable.ExecuteAsync(deleteOperation);\n\n       Console.WriteLine(\"Entity deleted.\");\n    }\n\n    else\n       Console.WriteLine(\"Couldn't delete the entity.\");\n\n## 后续步骤\n\n[AZURE.INCLUDE [vs-storage-dotnet-tables-next-steps](../includes/vs-storage-dotnet-tables-next-steps.md)]\n\n<!---HONumber=Mooncake_0104_2016-->"
}