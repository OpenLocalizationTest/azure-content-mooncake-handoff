{
  "nodes": [
    {
      "content": "创建表",
      "pos": [
        5,
        8
      ]
    },
    {
      "content": "利用 <bpt id=\"p1\">**</bpt>CloudTableClient<ept id=\"p1\">**</ept> 对象，您可以获得表和实体的引用对象。以下代码将创建 <bpt id=\"p2\">**</bpt>CloudTableClient<ept id=\"p2\">**</ept> 对象并使用它创建新表。该代码将尝试引用名为\"people\"的表。如果找不到该名称的表，它将创建一个。",
      "pos": [
        9,
        130
      ]
    },
    {
      "pos": [
        132,
        204
      ],
      "content": "<bpt id=\"p1\">**</bpt>注意：<ept id=\"p1\">**</ept>指南中的所有代码假定将构建的应用程序是 Azure 云服务项目，并且使用存储在 Azure 应用程序的服务配置中的存储连接字符串。"
    },
    {
      "content": "将实体添加到表",
      "pos": [
        465,
        472
      ]
    },
    {
      "content": "若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义了将客户的名字和姓氏分别用作行键和分区键的 <bpt id=\"p1\">**</bpt>CustomerEntity<ept id=\"p1\">**</ept> 实体类。",
      "pos": [
        473,
        549
      ]
    },
    {
      "pos": [
        915,
        1123
      ],
      "content": "将使用您之前在\"创建表\"中创建的 <bpt id=\"p1\">**</bpt>CloudTable<ept id=\"p1\">**</ept> 对象完成涉及实体的表操作。<bpt id=\"p2\">**</bpt>TableOperation<ept id=\"p2\">**</ept> 对象表示将完成的操作。以下代码示例演示如何创建 <bpt id=\"p3\">**</bpt>CloudTable<ept id=\"p3\">**</ept> 对象以及 <bpt id=\"p4\">**</bpt>CustomerEntity<ept id=\"p4\">**</ept> 对象。为准备此操作，会创建一个 <bpt id=\"p5\">**</bpt>TableOperation<ept id=\"p5\">**</ept> 以将客户实体插入该表中。最后，将通过调用 CloudTable.Execute 执行此操作。"
    },
    {
      "content": "插入一批实体",
      "pos": [
        1687,
        1693
      ]
    },
    {
      "content": "您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（\"Jeff Smith\"和\"Ben Smith\"），使用 Insert 方法将它们添加到 <bpt id=\"p1\">**</bpt>TableBatchOperation<ept id=\"p1\">**</ept> 对象，然后通过调用 CloudTable.Execute 启动操作。",
      "pos": [
        1694,
        1834
      ]
    },
    {
      "content": "获取分区中的所有实体",
      "pos": [
        2749,
        2759
      ]
    },
    {
      "content": "若要查询表以获取分区中的所有实体，请使用 <bpt id=\"p1\">**</bpt>TableQuery<ept id=\"p1\">**</ept> 对象。以下代码示例指定了一个筛选器，以筛选分区键为  'Smith' 的实体。此示例会将查询结果中每个实体的字段输出到控制台。",
      "pos": [
        2760,
        2859
      ]
    },
    {
      "content": "获取单个实体",
      "pos": [
        3519,
        3525
      ]
    },
    {
      "content": "您可以编写查询以获取单个特定实体。以下代码使用 <bpt id=\"p1\">**</bpt>TableOperation<ept id=\"p1\">**</ept> 对象来指定名为  'Ben Smith' 的客户。此方法仅返回一个实体，而不是一个集合，并且 TableResult.Result 中的返回值是一个 <bpt id=\"p2\">**</bpt>CustomerEntity<ept id=\"p2\">**</ept> 对象。在查询中同时指定分区键和行键是从<bpt id=\"p3\">**</bpt>表<ept id=\"p3\">**</ept>服务中检索单个实体的最快方法。",
      "pos": [
        3526,
        3702
      ]
    },
    {
      "content": "删除实体",
      "pos": [
        4373,
        4377
      ]
    },
    {
      "content": "您可以在找到实体后将其删除。以下代码将查找名为\"Ben Smith\"的客户实体，如果找到，会将其删除。",
      "pos": [
        4378,
        4429
      ]
    },
    {
      "content": "了解有关 Azure 存储的详细信息",
      "pos": [
        5348,
        5366
      ]
    },
    {
      "content": "另请参阅<bpt id=\"p1\">[</bpt>在服务器资源管理器中浏览存储资源<ept id=\"p1\">](http://msdn.microsoft.com/zh-cn/library/azure/ff683677.aspx)</ept>.",
      "pos": [
        5407,
        5491
      ]
    }
  ],
  "content": "#####创建表\n利用 **CloudTableClient** 对象，您可以获得表和实体的引用对象。以下代码将创建 **CloudTableClient** 对象并使用它创建新表。该代码将尝试引用名为\"people\"的表。如果找不到该名称的表，它将创建一个。\n\n**注意：**指南中的所有代码假定将构建的应用程序是 Azure 云服务项目，并且使用存储在 Azure 应用程序的服务配置中的存储连接字符串。\n\n    // Create the table client.\n    CloudTableClient tableClient = storageAccount.CreateCloudTableClient();\n    \n    // Create the table if it doesn't exist.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    table.CreateIfNotExists();\n\n#####将实体添加到表\n若要将实体添加到表，请创建用于定义实体的属性的类。以下代码定义了将客户的名字和姓氏分别用作行键和分区键的 **CustomerEntity** 实体类。\n\n    public class CustomerEntity : TableEntity\n    {\n        public CustomerEntity(string lastName, string firstName)\n        {\n            this.PartitionKey = lastName;\n            this.RowKey = firstName;\n        }\n    \n        public CustomerEntity() { }\n    \n        public string Email { get; set; }\n    \n        public string PhoneNumber { get; set; }\n    }\n\n将使用您之前在\"创建表\"中创建的 **CloudTable** 对象完成涉及实体的表操作。**TableOperation** 对象表示将完成的操作。以下代码示例演示如何创建 **CloudTable** 对象以及 **CustomerEntity** 对象。为准备此操作，会创建一个 **TableOperation** 以将客户实体插入该表中。最后，将通过调用 CloudTable.Execute 执行此操作。\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Create a new customer entity.\n    CustomerEntity customer1 = new CustomerEntity(\"Harp\", \"Walter\");\n    customer1.Email = \"Walter@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0101\";\n    \n    // Create the TableOperation that inserts the customer entity.\n    TableOperation insertOperation = TableOperation.Insert(customer1);\n    \n    // Execute the insert operation.\n    table.Execute(insertOperation);\n\n#####插入一批实体\n您可以通过单个写入操作将多个实体插入表中。以下代码示例将创建两个实体对象（\"Jeff Smith\"和\"Ben Smith\"），使用 Insert 方法将它们添加到 **TableBatchOperation** 对象，然后通过调用 CloudTable.Execute 启动操作。\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Create the batch operation.\n    TableBatchOperation batchOperation = new TableBatchOperation();\n    \n    // Create a customer entity and add it to the table.\n    CustomerEntity customer1 = new CustomerEntity(\"Smith\", \"Jeff\");\n    customer1.Email = \"Jeff@contoso.com\";\n    customer1.PhoneNumber = \"425-555-0104\";\n    \n    // Create another customer entity and add it to the table.\n    CustomerEntity customer2 = new CustomerEntity(\"Smith\", \"Ben\");\n    customer2.Email = \"Ben@contoso.com\";\n    customer2.PhoneNumber = \"425-555-0102\";\n    \n    // Add both customer entities to the batch insert operation.\n    batchOperation.Insert(customer1);\n    batchOperation.Insert(customer2);\n    \n    // Execute the batch operation.\n    table.ExecuteBatch(batchOperation);\n\n#####获取分区中的所有实体\n若要查询表以获取分区中的所有实体，请使用 **TableQuery** 对象。以下代码示例指定了一个筛选器，以筛选分区键为  'Smith' 的实体。此示例会将查询结果中每个实体的字段输出到控制台。\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Construct the query operation for all customer entities where PartitionKey=\"Smith\".\n    TableQuery<CustomerEntity> query = new TableQuery<CustomerEntity>().Where(TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Smith\"));\n    \n    // Print the fields for each customer.\n    foreach (CustomerEntity entity in table.ExecuteQuery(query))\n    {\n        Console.WriteLine(\"{0}, {1}\\t{2}\\t{3}\", entity.PartitionKey, entity.RowKey,\n            entity.Email, entity.PhoneNumber);\n    }\n\n#####获取单个实体\n您可以编写查询以获取单个特定实体。以下代码使用 **TableOperation** 对象来指定名为  'Ben Smith' 的客户。此方法仅返回一个实体，而不是一个集合，并且 TableResult.Result 中的返回值是一个 **CustomerEntity** 对象。在查询中同时指定分区键和行键是从**表**服务中检索单个实体的最快方法。\n\n    // Create the CloudTable object that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Create a retrieve operation that takes a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n    \n    // Execute the retrieve operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n    \n    // Print the phone number of the result.\n    if (retrievedResult.Result != null)\n       Console.WriteLine(((CustomerEntity)retrievedResult.Result).PhoneNumber);\n    else\n       Console.WriteLine(\"The phone number could not be retrieved.\");\n\n#####删除实体\n您可以在找到实体后将其删除。以下代码将查找名为\"Ben Smith\"的客户实体，如果找到，会将其删除。\n\n    // Create the CloudTable that represents the \"people\" table.\n    CloudTable table = tableClient.GetTableReference(\"people\");\n    \n    // Create a retrieve operation that expects a customer entity.\n    TableOperation retrieveOperation = TableOperation.Retrieve<CustomerEntity>(\"Smith\", \"Ben\");\n    \n    // Execute the operation.\n    TableResult retrievedResult = table.Execute(retrieveOperation);\n    \n    // Assign the result to a CustomerEntity object.\n    CustomerEntity deleteEntity = (CustomerEntity)retrievedResult.Result;\n    \n    // Create the Delete TableOperation and then execute it.\n    if (deleteEntity != null)\n    {\n       TableOperation deleteOperation = TableOperation.Delete(deleteEntity);\n    \n       // Execute the operation.\n       table.Execute(deleteOperation);\n    \n       Console.WriteLine(\"Entity deleted.\");\n    }\n    \n    else\n       Console.WriteLine(\"Couldn't delete the entity.\");\n\n[了解有关 Azure 存储的详细信息](/zh-cn/documentation/services/storage)\n另请参阅[在服务器资源管理器中浏览存储资源](http://msdn.microsoft.com/zh-cn/library/azure/ff683677.aspx).<!--HONumber=41-->\n"
}