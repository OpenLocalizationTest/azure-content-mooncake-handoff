<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eae7a770535fb40687487acf703a492253b00724</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure Web 应用上的操作系统功能</source>
          <target state="new">Azure Web 应用上的操作系统功能</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解 Azure Web 应用上可供 Web 应用、移动应用后端和 API 应用使用的 OS 功能</source>
          <target state="new">了解 Azure Web 应用上可供 Web 应用、移动应用后端和 API 应用使用的 OS 功能</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure 上的操作系统功能</source>
          <target state="new">Azure 上的操作系统功能</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本文介绍可用于在 <bpt id="p1">[</bpt>Azure Web 应用<ept id="p1">](/documentation/services/web-sites/)</ept>上运行的所有应用的常见基准操作系统功能。这些功能包括文件、网络和注册表访问以及诊断日志和事件。</source>
          <target state="new">本文介绍可用于在 <bpt id="p1">[</bpt>Azure Web 应用<ept id="p1">](/documentation/services/web-sites/)</ept>上运行的所有应用的常见基准操作系统功能。这些功能包括文件、网络和注册表访问以及诊断日志和事件。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="tiers"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> App Service 计划层</source>
          <target state="new"><ph id="ph1">&lt;a id="tiers"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> App Service 计划层</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Azure 在多租户托管环境中运行客户应用。部署在“免费”和“共享”层中的应用在共享虚拟机上的辅助进程中运行，而部署在“标准”和“高级”层中的应用在专用于与单个客户关联的应用的虚拟机上运行。</source>
          <target state="new">Azure 在多租户托管环境中运行客户应用。部署在“免费”和“共享”层中的应用在共享虚拟机上的辅助进程中运行，而部署在“标准”和“高级”层中的应用在专用于与单个客户关联的应用的虚拟机上运行。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>由于 Azure 支持不同层之间的无缝缩放体验，因此，为 Azure Web 应用实施的安全配置将保持不变。这可以确保 App Service 计划在切换不同的层时，应用不会突然发生行为上的变化，并且不会以意外的方式失败。</source>
          <target state="new">由于 Azure 支持不同层之间的无缝缩放体验，因此，为 Azure Web 应用实施的安全配置将保持不变。这可以确保 App Service 计划在切换不同的层时，应用不会突然发生行为上的变化，并且不会以意外的方式失败。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="developmentframeworks"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 开发框架</source>
          <target state="new"><ph id="ph1">&lt;a id="developmentframeworks"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 开发框架</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Azure 定价层控制可用于应用的计算资源量（CPU、磁盘存储、内存和网络出口）。但是，可用于应用的框架功能范围保持不变，而与缩放层无关。</source>
          <target state="new">Azure 定价层控制可用于应用的计算资源量（CPU、磁盘存储、内存和网络出口）。但是，可用于应用的框架功能范围保持不变，而与缩放层无关。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Azure 支持多种开发框架，包括 ASP.NET、经典 ASP、node.js、PHP 和 Python – 它们全都作为 IIS 中的扩展运行。为了简化和标准化安全配置，Azure Web 应用通常使用其默认设置运行不同的开发框架。用于配置应用的一个方法可能是为每个单独的开发框架自定义 API 外围应用和功能。而 Azure 则是通过实现操作系统功能的公共基准，采用更通用的方法，与应用的开发框架无关。</source>
          <target state="new">Azure 支持多种开发框架，包括 ASP.NET、经典 ASP、node.js、PHP 和 Python – 它们全都作为 IIS 中的扩展运行。为了简化和标准化安全配置，Azure Web 应用通常使用其默认设置运行不同的开发框架。用于配置应用的一个方法可能是为每个单独的开发框架自定义 API 外围应用和功能。而 Azure 则是通过实现操作系统功能的公共基准，采用更通用的方法，与应用的开发框架无关。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>以下部分概述了可用于 Azure Web 应用的一般类型的操作系统功能。</source>
          <target state="new">以下部分概述了可用于 Azure Web 应用的一般类型的操作系统功能。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="FileAccess"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>文件访问</source>
          <target state="new"><ph id="ph1">&lt;a id="FileAccess"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>文件访问</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Azure Web 应用中存在各种不同的驱动器，包括本地驱动器和网络驱动器。</source>
          <target state="new">Azure Web 应用中存在各种不同的驱动器，包括本地驱动器和网络驱动器。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="LocalDrives"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 本地驱动器</source>
          <target state="new"><ph id="ph1">&lt;a id="LocalDrives"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 本地驱动器</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>就其核心而言，Azure 是在 Azure PaaS（平台即服务）基础结构的基础上运行的服务。因此，“附加到”虚拟机的本地驱动器是可用于在 Azure 中运行的任何辅助角色的相同驱动器类型。这包括操作系统驱动器（D:\\ 驱动器）、包含 Azure 专用（客户不可访问）的 Azure 程序包 cspkg 文件的应用程序驱动器，以及其大小因 VM 大小而异的“user”驱动器（C:\\ 驱动器）。</source>
          <target state="new">就其核心而言，Azure 是在 Azure PaaS（平台即服务）基础结构的基础上运行的服务。因此，“附加到”虚拟机的本地驱动器是可用于在 Azure 中运行的任何辅助角色的相同驱动器类型。这包括操作系统驱动器（D:\\ 驱动器）、包含 Azure 专用（客户不可访问）的 Azure 程序包 cspkg 文件的应用程序驱动器，以及其大小因 VM 大小而异的“user”驱动器（C:\\ 驱动器）。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="NetworkDrives"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 网络驱动器（即 UNC 共享）</source>
          <target state="new"><ph id="ph1">&lt;a id="NetworkDrives"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 网络驱动器（即 UNC 共享）</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Azure 中有一个独具特色的方面能够简化应用的部署和维护，这就是所有用户内容都存储在一组 UNC 共享中。此模型非常好地映射到具有多个负载平衡服务器的本地 Web 托管环境所用内容存储的公共模式。</source>
          <target state="new">Azure 中有一个独具特色的方面能够简化应用的部署和维护，这就是所有用户内容都存储在一组 UNC 共享中。此模型非常好地映射到具有多个负载平衡服务器的本地 Web 托管环境所用内容存储的公共模式。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>在 Azure Web 应用中，每个数据中心都创建了许多 UNC 共享。在每个数据中心针对所有客户的某个百分比的用户内容将分配给各 UNC 共享。此外，针对单个客户订阅的所有文件内容将始终置于相同的 UNC 共享中。</source>
          <target state="new">在 Azure Web 应用中，每个数据中心都创建了许多 UNC 共享。在每个数据中心针对所有客户的某个百分比的用户内容将分配给各 UNC 共享。此外，针对单个客户订阅的所有文件内容将始终置于相同的 UNC 共享中。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>请注意，由于云服务的工作方式，负责承载 UNC 共享的特定虚拟机将随着时间而更改。应确保将由不同虚拟机装入 UNC 共享，因为在正常云操作过程中它们将会启动和关闭。因此，应用应该永远不会作出这样的硬编码的假定，即 UNC 文件路径中的计算机信息将在一段时间后保持不变。相反，它们应使用 Azure 提供的方便的 <bpt id="p1">*</bpt>faux<ept id="p1">*</ept> 绝对路径 <bpt id="p2">**</bpt>D:\\home\\site<ept id="p2">**</ept>。此 faux 绝对路径为引用自己的网站提供可移植的应用到用户未知方法。通过使用 <bpt id="p3">**</bpt>D:\\home\\site<ept id="p3">**</ept>，可以在应用之间传输共享文件，而不必为每次传输都配置新的绝对路径。</source>
          <target state="new">请注意，由于云服务的工作方式，负责承载 UNC 共享的特定虚拟机将随着时间而更改。应确保将由不同虚拟机装入 UNC 共享，因为在正常云操作过程中它们将会启动和关闭。因此，应用应该永远不会作出这样的硬编码的假定，即 UNC 文件路径中的计算机信息将在一段时间后保持不变。相反，它们应使用 Azure 提供的方便的 <bpt id="p1">*</bpt>faux<ept id="p1">*</ept> 绝对路径 <bpt id="p2">**</bpt>D:\\home\\site<ept id="p2">**</ept>。此 faux 绝对路径为引用自己的网站提供可移植的应用到用户未知方法。通过使用 <bpt id="p3">**</bpt>D:\\home\\site<ept id="p3">**</ept>，可以在应用之间传输共享文件，而不必为每次传输都配置新的绝对路径。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="TypesOfFileAccess"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 向应用授予的文件访问的类型</source>
          <target state="new"><ph id="ph1">&lt;a id="TypesOfFileAccess"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 向应用授予的文件访问的类型</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>每个客户的订阅都在一个数据中心内的特定 UNC 共享上具有保留的目录结构。客户可以在特定数据中心内创建多个应用，因此，属于单个客户订阅的所有目录都在同一个 UNC 共享上创建。该共享可以包含目录（例如针对内容、错误和诊断日志的目录）以及源代码管理创建的应用的更早版本。按照预期，客户的应用目录可用于在运行时由应用的应用程序代码进行读写访问。</source>
          <target state="new">每个客户的订阅都在一个数据中心内的特定 UNC 共享上具有保留的目录结构。客户可以在特定数据中心内创建多个应用，因此，属于单个客户订阅的所有目录都在同一个 UNC 共享上创建。该共享可以包含目录（例如针对内容、错误和诊断日志的目录）以及源代码管理创建的应用的更早版本。按照预期，客户的应用目录可用于在运行时由应用的应用程序代码进行读写访问。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>在附加到运行应用的虚拟机的本地驱动器上，Azure 在 C:\\ 驱动器上为特定于应用的临时本地存储预留一块空间。尽管应用对自己的临时本地存储具有完全读/写访问权限，但该存储实际上并不旨在直接供应用程序代码使用。而是用于为 IIS 和 Web 应用程序框架提供临时文件存储。Azure 还限制可用于每个应用的临时本地存储量，以免单个应用占用过多的本地文件存储量。</source>
          <target state="new">在附加到运行应用的虚拟机的本地驱动器上，Azure 在 C:\\ 驱动器上为特定于应用的临时本地存储预留一块空间。尽管应用对自己的临时本地存储具有完全读/写访问权限，但该存储实际上并不旨在直接供应用程序代码使用。而是用于为 IIS 和 Web 应用程序框架提供临时文件存储。Azure 还限制可用于每个应用的临时本地存储量，以免单个应用占用过多的本地文件存储量。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>说明 Azure 如何使用临时本地存储的两个示例是针对临时 ASP.NET 文件的目录和针对 IIS 压缩文件的目录。ASP.NET 编译系统使用“临时 ASP.NET 文件”目录作为临时编译缓存位置。IIS 使用“IIS 临时压缩文件”目录存储压缩的响应输出。在 Azure 中，这两种类型的文件使用（以及其他使用）都重新映射到按应用临时本地存储。此重新映射确保该功能按预期延续。</source>
          <target state="new">说明 Azure 如何使用临时本地存储的两个示例是针对临时 ASP.NET 文件的目录和针对 IIS 压缩文件的目录。ASP.NET 编译系统使用“临时 ASP.NET 文件”目录作为临时编译缓存位置。IIS 使用“IIS 临时压缩文件”目录存储压缩的响应输出。在 Azure 中，这两种类型的文件使用（以及其他使用）都重新映射到按应用临时本地存储。此重新映射确保该功能按预期延续。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Azure 中的每个应用作为随机的唯一低权限辅助进程标识运行，该标识名为“应用程序池标识”，以下网页做了进一步的介绍：<bpt id="p1">[</bpt>http://www.iis.net/learn/manage/configuring-security/application-pool-identities<ept id="p1">](http://www.iis.net/learn/manage/configuring-security/application-pool-identities)</ept>。应用程序代码将此标识由于对操作系统驱动器（D:\\ 驱动器）的基本的只读访问。这意味着应用程序代码可以列出公共目录结构并且读取操作系统驱动器上的公共文件。尽管这可能看上去就好像是一种较为广泛的访问级别，但当你在 Azure 托管服务中设置某一辅助角色并且读取驱动器内容时，相同的目录和文件是可访问的。</source>
          <target state="new">Azure 中的每个应用作为随机的唯一低权限辅助进程标识运行，该标识名为“应用程序池标识”，以下网页做了进一步的介绍：<bpt id="p1">[</bpt>http://www.iis.net/learn/manage/configuring-security/application-pool-identities<ept id="p1">](http://www.iis.net/learn/manage/configuring-security/application-pool-identities)</ept>。应用程序代码将此标识由于对操作系统驱动器（D:\\ 驱动器）的基本的只读访问。这意味着应用程序代码可以列出公共目录结构并且读取操作系统驱动器上的公共文件。尽管这可能看上去就好像是一种较为广泛的访问级别，但当你在 Azure 托管服务中设置某一辅助角色并且读取驱动器内容时，相同的目录和文件是可访问的。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="multipleinstances"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 跨多个实例的文件访问</source>
          <target state="new"><ph id="ph1">&lt;a name="multipleinstances"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 跨多个实例的文件访问</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>主目录包含应用的内容，并且应用程序代码可以写入该目录。如果应用在多个实例上运行，则主目录在所有实例间共享，以便所有实例都看到同一个目录。所以，举例来说，如果应用将上载的文件保存到主目录，则所有实例都可以立即使用那些文件。</source>
          <target state="new">主目录包含应用的内容，并且应用程序代码可以写入该目录。如果应用在多个实例上运行，则主目录在所有实例间共享，以便所有实例都看到同一个目录。所以，举例来说，如果应用将上载的文件保存到主目录，则所有实例都可以立即使用那些文件。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="NetworkAccess"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 网络访问</source>
          <target state="new"><ph id="ph1">&lt;a id="NetworkAccess"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 网络访问</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>应用程序代码可以使用基于 TCP/IP 和 UDP 的协议建立与公开外部服务的 Internet 可访问终结点的出站网络连接。应用可以使用这些相同协议连接到 Azure 内的服务&amp;#151;例如，建立与 SQL 数据库的 HTTPS 连接即可实现此目的。</source>
          <target state="new">应用程序代码可以使用基于 TCP/IP 和 UDP 的协议建立与公开外部服务的 Internet 可访问终结点的出站网络连接。应用可以使用这些相同协议连接到 Azure 内的服务&amp;#151;例如，建立与 SQL 数据库的 HTTPS 连接即可实现此目的。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>还有有限容量以便为应用建立一个本地环回连接，并且让应用侦听该本地环回套接字。此功能存在主要是为了实现作为其功能的一部分侦听本地环回套接字的应用。请注意，每个应用都将看到“私有”环回连接；应用“A”无法侦听应用“B”建立的本地环回套接字。</source>
          <target state="new">还有有限容量以便为应用建立一个本地环回连接，并且让应用侦听该本地环回套接字。此功能存在主要是为了实现作为其功能的一部分侦听本地环回套接字的应用。请注意，每个应用都将看到“私有”环回连接；应用“A”无法侦听应用“B”建立的本地环回套接字。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>还支持命名管道作为共同运行应用的不同进程之间的进程间通信 (IPC) 机制。例如，IIS FastCGI 模块依赖命名管道协调运行 PHP 页的单独进程。</source>
          <target state="new">还支持命名管道作为共同运行应用的不同进程之间的进程间通信 (IPC) 机制。例如，IIS FastCGI 模块依赖命名管道协调运行 PHP 页的单独进程。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Code"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 代码执行、进程和内存</source>
          <target state="new"><ph id="ph1">&lt;a id="Code"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 代码执行、进程和内存</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>如前所述，应用使用随机应用程序池标识在低权限辅助进程内运行。应用程序代码有权访问与辅助进程相关联的内存空间，以及可由 CGI 处理器或其他应用程序生成的任何子进程。但是，一个应用不能访问另一个应用的内存或数据，即使它们位于同一个虚拟机上。</source>
          <target state="new">如前所述，应用使用随机应用程序池标识在低权限辅助进程内运行。应用程序代码有权访问与辅助进程相关联的内存空间，以及可由 CGI 处理器或其他应用程序生成的任何子进程。但是，一个应用不能访问另一个应用的内存或数据，即使它们位于同一个虚拟机上。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>应用可以运行使用支持的 Web 开发框架编写的脚本或页面。Azure 不将任何 Web 框架设置配置为更受限制的模式。例如，在 Azure 上运行的 ASP.NET 应用以“完全”信任运行，与更受限制的信任模式相反。Web 框架（包括经典 ASP 和 ASP.NET）可以调用进程中 COM 组件（但不能调用进程外 COM 组件），例如在 Windows 操作系统上默认注册的 ADO（ActiveX 数据对象）。</source>
          <target state="new">应用可以运行使用支持的 Web 开发框架编写的脚本或页面。Azure 不将任何 Web 框架设置配置为更受限制的模式。例如，在 Azure 上运行的 ASP.NET 应用以“完全”信任运行，与更受限制的信任模式相反。Web 框架（包括经典 ASP 和 ASP.NET）可以调用进程中 COM 组件（但不能调用进程外 COM 组件），例如在 Windows 操作系统上默认注册的 ADO（ActiveX 数据对象）。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>应用可以生成和运行任意代码。允许应用执行诸如生成命令外壳程序或运行 PowerShell 脚本之类的任务。但是，即使可以从应用生成任意代码和进程，可执行程序和脚本仍会被限制为授予父应用程序池的权限。例如，应用可以生成发出出站 HTTP 调用的可执行文件，但同一个可执行文件不能尝试从其 NIC 取消绑定某个虚拟机的 IP 地址。允许向低权限的代码发出出站网络调用，但尝试在虚拟机上重新配置网络设置要求管理权限。</source>
          <target state="new">应用可以生成和运行任意代码。允许应用执行诸如生成命令外壳程序或运行 PowerShell 脚本之类的任务。但是，即使可以从应用生成任意代码和进程，可执行程序和脚本仍会被限制为授予父应用程序池的权限。例如，应用可以生成发出出站 HTTP 调用的可执行文件，但同一个可执行文件不能尝试从其 NIC 取消绑定某个虚拟机的 IP 地址。允许向低权限的代码发出出站网络调用，但尝试在虚拟机上重新配置网络设置要求管理权限。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Diagnostics"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 诊断日志和事件</source>
          <target state="new"><ph id="ph1">&lt;a id="Diagnostics"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 诊断日志和事件</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>日志信息是某些应用尝试访问的另外一组数据。可用于在 Azure 中运行的代码的日志信息类型包括应用生成的诊断和日志信息，这些信息对于应用而言也是可以轻松进行访问的。</source>
          <target state="new">日志信息是某些应用尝试访问的另外一组数据。可用于在 Azure 中运行的代码的日志信息类型包括应用生成的诊断和日志信息，这些信息对于应用而言也是可以轻松进行访问的。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>例如，某一活动应用生成的 W3C HTTP 日志既可以在为该应用创建的网络共享位置中的日志目录上提供，也可以在 blob 存储中提供（如果客户已经将 W3C 日志记录设置到存储中）。后者能够收集大量日志，而没有超出与某一网络共享相关联的文件存储限制的风险。</source>
          <target state="new">例如，某一活动应用生成的 W3C HTTP 日志既可以在为该应用创建的网络共享位置中的日志目录上提供，也可以在 blob 存储中提供（如果客户已经将 W3C 日志记录设置到存储中）。后者能够收集大量日志，而没有超出与某一网络共享相关联的文件存储限制的风险。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>在类似情况下，还可以使用 .NET 跟踪和诊断基础结构将来自 .NET 应用的实时诊断信息记入日志，并且可以选择是将跟踪信息写入应用的网络共享还是写入 blob 存储位置。</source>
          <target state="new">在类似情况下，还可以使用 .NET 跟踪和诊断基础结构将来自 .NET 应用的实时诊断信息记入日志，并且可以选择是将跟踪信息写入应用的网络共享还是写入 blob 存储位置。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>诊断日志记录和跟踪中不可用于应用的领域是 Windows ETW 事件以及常见的 Windows 事件日志（例如系统、应用程序和安全事件日志）。因为 ETW 跟踪信息可能在计算机范围中是可查看的（具有正确的 ACL），所以，将阻止对 ETW 事件的读写访问。开发人员可能会注意到，对读取和写入 ETW 事件和常见 Windows 事件日志的 API 调用好像在起作用，这是因为 Azure 在“伪装”这些调用，让它们看起来很成功。实际上，应用程序代码对于此事件数据没有访问权限。</source>
          <target state="new">诊断日志记录和跟踪中不可用于应用的领域是 Windows ETW 事件以及常见的 Windows 事件日志（例如系统、应用程序和安全事件日志）。因为 ETW 跟踪信息可能在计算机范围中是可查看的（具有正确的 ACL），所以，将阻止对 ETW 事件的读写访问。开发人员可能会注意到，对读取和写入 ETW 事件和常见 Windows 事件日志的 API 调用好像在起作用，这是因为 Azure 在“伪装”这些调用，让它们看起来很成功。实际上，应用程序代码对于此事件数据没有访问权限。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="RegistryAccess"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 注册表访问</source>
          <target state="new"><ph id="ph1">&lt;a id="RegistryAccess"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 注册表访问</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>应用对于它们在其上运行的虚拟机的注册表的大部分内容（尽管不是全部内容）具有只读访问权限。实际上，这意味着应用可以访问允许对本地用户组进行只读访问的注册表项。当前不支持读写访问的注册表的一个方面是 HKEY\_CURRENT\_USER Hive。</source>
          <target state="new">应用对于它们在其上运行的虚拟机的注册表的大部分内容（尽管不是全部内容）具有只读访问权限。实际上，这意味着应用可以访问允许对本地用户组进行只读访问的注册表项。当前不支持读写访问的注册表的一个方面是 HKEY\_CURRENT\_USER Hive。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>对注册表的写访问被阻止，包括对任何按用户注册表项的访问。从应用角度来说，对注册表的写访问永远不应依赖于 Azure 环境，因为应用可以（并且也是这样做的）跨不同虚拟机进行迁移。应用可依赖的唯一持久可写入存储是在 Azure UNC 共享上存储的按应用内容目录结构。</source>
          <target state="new">对注册表的写访问被阻止，包括对任何按用户注册表项的访问。从应用角度来说，对注册表的写访问永远不应依赖于 Azure 环境，因为应用可以（并且也是这样做的）跨不同虚拟机进行迁移。应用可依赖的唯一持久可写入存储是在 Azure UNC 共享上存储的按应用内容目录结构。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>