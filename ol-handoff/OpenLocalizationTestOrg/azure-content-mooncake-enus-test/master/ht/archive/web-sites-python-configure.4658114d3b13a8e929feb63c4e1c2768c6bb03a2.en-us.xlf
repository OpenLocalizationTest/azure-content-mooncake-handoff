<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd6985298362a8859cde0500e14398c667ad63e7</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用 Azure Web Apps 配置 Python</source>
          <target state="new">使用 Azure Web Apps 配置 Python</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>本教程介绍用于在 Azure Web Apps 上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。</source>
          <target state="new">本教程介绍用于在 Azure Web Apps 上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用 Azure Web Apps 配置 Python</source>
          <target state="new">使用 Azure Web Apps 配置 Python</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本教程介绍用于在 <bpt id="p1">[</bpt>Azure Web Apps<ept id="p1">](/documentation/services/web-sites/)</ept> 上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。</source>
          <target state="new">本教程介绍用于在 <bpt id="p1">[</bpt>Azure Web Apps<ept id="p1">](/documentation/services/web-sites/)</ept> 上创作并配置符合基本 Web 服务器网关接口 (WSGI) 的 Python 应用程序的选项。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>其中描述了 Git 部署的其他功能，如使用 requirements.txt 安装虚拟环境和包。</source>
          <target state="new">其中描述了 Git 部署的其他功能，如使用 requirements.txt 安装虚拟环境和包。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="bottle-django-flask"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Bottle、Django 还是 Flask？</source>
          <target state="new"><ph id="ph1">&lt;a name="bottle-django-flask"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Bottle、Django 还是 Flask？</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Azure 应用商店包含用于 Bottle、Django 和 Flask 框架的模板。如果你正在 Azure 中开发第一个 Web 应用，或者你不熟悉 Git，我们建议你遵循以下教程之一，其中包括用于从 Windows 或 Mac 使用 Git 部署从库构建工作应用程序的分步说明：</source>
          <target state="new">Azure 应用商店包含用于 Bottle、Django 和 Flask 框架的模板。如果你正在 Azure 中开发第一个 Web 应用，或者你不熟悉 Git，我们建议你遵循以下教程之一，其中包括用于从 Windows 或 Mac 使用 Git 部署从库构建工作应用程序的分步说明：</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>使用 Bottle 创建 Web 应用</source>
          <target state="new">使用 Bottle 创建 Web 应用</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>使用 Django 创建 Web 应用</source>
          <target state="new">使用 Django 创建 Web 应用</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>使用 Flask 创建 Web 应用</source>
          <target state="new">使用 Flask 创建 Web 应用</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="website-creation-on-portal"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 在 Azure 管理门户中创建 Web 应用</source>
          <target state="new"><ph id="ph1">&lt;a name="website-creation-on-portal"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 在 Azure 管理门户中创建 Web 应用</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>本教程使用现有 Azure 订阅以及对 Azure 管理门户的访问权限。</source>
          <target state="new">本教程使用现有 Azure 订阅以及对 Azure 管理门户的访问权限。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>如果你没有现成的 Web 应用，则可从 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>创建一个。单击左下角的“新建”按钮。将出现一个窗口。依次单击“计算”、“Web 应用”和“快速创建”。</source>
          <target state="new">如果你没有现成的 Web 应用，则可从 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>创建一个。单击左下角的“新建”按钮。将出现一个窗口。依次单击“计算”、“Web 应用”和“快速创建”。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="git-publishing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Git 发布</source>
          <target state="new"><ph id="ph1">&lt;a name="git-publishing"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> Git 发布</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>按照<bpt id="p1">[</bpt>在 Azure Web 应用中使用 GIT 进行连续部署<ept id="p1">](/documentation/articles/web-sites-publish-source-control)</ept>中的说明为新创建的 Web 应用配置 Git 发布。本教程使用 Git 来创建、管理 Python Web 应用以及将其发布到 Azure Web 应用。</source>
          <target state="new">按照<bpt id="p1">[</bpt>在 Azure Web 应用中使用 GIT 进行连续部署<ept id="p1">](/documentation/articles/web-sites-publish-source-control)</ept>中的说明为新创建的 Web 应用配置 Git 发布。本教程使用 Git 来创建、管理 Python Web 应用以及将其发布到 Azure Web 应用。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在设置 Git 发布之后，将创建 Git 存储库并使其与你的 Web 应用相关联。将显示该存储库的 URL，并且之后可将其用于将数据从本地开发环境推送到云。若要通过 Git 发布应用程序，请确保还安装了 Git 客户端，并使用提供的说明将你的 Web 应用内容推送到 Azure Web 应用。</source>
          <target state="new">在设置 Git 发布之后，将创建 Git 存储库并使其与你的 Web 应用相关联。将显示该存储库的 URL，并且之后可将其用于将数据从本地开发环境推送到云。若要通过 Git 发布应用程序，请确保还安装了 Git 客户端，并使用提供的说明将你的 Web 应用内容推送到 Azure Web 应用。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="application-overview"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 应用程序概述</source>
          <target state="new"><ph id="ph1">&lt;a name="application-overview"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 应用程序概述</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>在接下来的各节中，将创建以下文件。这些文件应放在 Git 存储库的根目录中。</source>
          <target state="new">在接下来的各节中，将创建以下文件。这些文件应放在 Git 存储库的根目录中。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="wsgi-handler"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> WSGI 处理程序</source>
          <target state="new"><ph id="ph1">&lt;a name="wsgi-handler"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> WSGI 处理程序</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>WSGI 是 <bpt id="p1">[</bpt>PEP 3333<ept id="p1">](http://www.python.org/dev/peps/pep-3333/)</ept> 描述的 Python 标准，用于定义 Web 服务器和 Python 之间的接口。它提供了用于使用 Python 编写各种 Web 应用程序和框架的标准化接口。当今常用的 Python Web 框架都使用 WSGI。Azure Web Apps 支持任何此类框架；此外，高级用户甚至可以创作自己的框架，只要自定义处理程序遵循 WSGI 规范准则即可。</source>
          <target state="new">WSGI 是 <bpt id="p1">[</bpt>PEP 3333<ept id="p1">](http://www.python.org/dev/peps/pep-3333/)</ept> 描述的 Python 标准，用于定义 Web 服务器和 Python 之间的接口。它提供了用于使用 Python 编写各种 Web 应用程序和框架的标准化接口。当今常用的 Python Web 框架都使用 WSGI。Azure Web Apps 支持任何此类框架；此外，高级用户甚至可以创作自己的框架，只要自定义处理程序遵循 WSGI 规范准则即可。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>下面是定义自定义处理程序的 <ph id="ph1">`app.py`</ph> 的一个示例：</source>
          <target state="new">下面是定义自定义处理程序的 <ph id="ph1">`app.py`</ph> 的一个示例：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>可以使用 <ph id="ph1">`python app.py`</ph> 在本地运行此应用程序，然后在 Web 浏览器中浏览到 <ph id="ph2">`http://localhost:5555`</ph>。</source>
          <target state="new">可以使用 <ph id="ph1">`python app.py`</ph> 在本地运行此应用程序，然后在 Web 浏览器中浏览到 <ph id="ph2">`http://localhost:5555`</ph>。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>虚拟环境</source>
          <target state="new">虚拟环境</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>尽管上面的示例应用程序不需要任何外部包，则您的应用程序很可能需要一些外部包。</source>
          <target state="new">尽管上面的示例应用程序不需要任何外部包，则您的应用程序很可能需要一些外部包。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>为了帮助管理外部包依赖项，Azure Git 部署支持创建虚拟环境。</source>
          <target state="new">为了帮助管理外部包依赖项，Azure Git 部署支持创建虚拟环境。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>当 Azure 在存储库的根目录中检测到 requirements.txt 文件时，将自动创建名为 <ph id="ph1">`env`</ph> 的虚拟环境。仅在第一次部署进执行此操作，或者在所选的 Python 运行时发生更改后进行任何部署的过程中执行此操作。</source>
          <target state="new">当 Azure 在存储库的根目录中检测到 requirements.txt 文件时，将自动创建名为 <ph id="ph1">`env`</ph> 的虚拟环境。仅在第一次部署进执行此操作，或者在所选的 Python 运行时发生更改后进行任何部署的过程中执行此操作。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>您可能需要创建虚拟环境用于开发，但不将其包括在 Git 存储库中。</source>
          <target state="new">您可能需要创建虚拟环境用于开发，但不将其包括在 Git 存储库中。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>包管理</source>
          <target state="new">包管理</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Requirements.txt 中列出的包将使用 pip 自动安装在虚拟环境中。在每次部署时都会发生这种情况，但如果已安装包，则 pip 将跳过安装。</source>
          <target state="new">Requirements.txt 中列出的包将使用 pip 自动安装在虚拟环境中。在每次部署时都会发生这种情况，但如果已安装包，则 pip 将跳过安装。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>示例 <ph id="ph1">`requirements.txt`</ph>：</source>
          <target state="new">示例 <ph id="ph1">`requirements.txt`</ph>：</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Python 版本</source>
          <target state="new">Python 版本</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>示例 <ph id="ph1">`runtime.txt`</ph>：</source>
          <target state="new">示例 <ph id="ph1">`runtime.txt`</ph>：</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Web.config</source>
          <target state="new">Web.config</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>需要创建一个 web.config 文件以指定服务器应如何处理请求。</source>
          <target state="new">需要创建一个 web.config 文件以指定服务器应如何处理请求。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>请注意，如果在存储库中有一个 Web.x.y 文件，其中 x.y 与所选的 Python 运行时匹配，则 Azure 会自动将相应的文件复制为 web.config。</source>
          <target state="new">请注意，如果在存储库中有一个 Web.x.y 文件，其中 x.y 与所选的 Python 运行时匹配，则 Azure 会自动将相应的文件复制为 web.config。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>以下 web.config 示例依赖于某个虚拟环境代理脚本下（下一节中介绍）。它们与上面的示例 <ph id="ph1">`app.py`</ph> 中所用的 WSGI 处理程序配合使用。</source>
          <target state="new">以下 web.config 示例依赖于某个虚拟环境代理脚本下（下一节中介绍）。它们与上面的示例 <ph id="ph1">`app.py`</ph> 中所用的 WSGI 处理程序配合使用。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Python 2.7 的示例 <ph id="ph1">`web.config`</ph>：</source>
          <target state="new">Python 2.7 的示例 <ph id="ph1">`web.config`</ph>：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Python 3.4 的示例 <ph id="ph1">`web.config`</ph>：</source>
          <target state="new">Python 3.4 的示例 <ph id="ph1">`web.config`</ph>：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>静态文件将由 Web 服务器直接处理，无需通过 Python 代码，从而可提高性能。</source>
          <target state="new">静态文件将由 Web 服务器直接处理，无需通过 Python 代码，从而可提高性能。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>在上面的示例中，磁盘上的静态文件的位置应与 URL 中的位置匹配。也就是说，对 <ph id="ph1">`http://pythonapp.chinacloudsites.cn/static/site.css`</ph> 的请求将为磁盘上 <ph id="ph2">`\static\site.css`</ph> 处的文件服务。</source>
          <target state="new">在上面的示例中，磁盘上的静态文件的位置应与 URL 中的位置匹配。也就是说，对 <ph id="ph1">`http://pythonapp.chinacloudsites.cn/static/site.css`</ph> 的请求将为磁盘上 <ph id="ph2">`\static\site.css`</ph> 处的文件服务。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`WSGI_ALT_VIRTUALENV_HANDLER`</ph> 是指定 WSGI 处理程序的位置。在上面的示例中，该位置为 <ph id="ph2">`app.wsgi_app`</ph>，因为处理程序是根文件夹中的 <ph id="ph3">`app.py`</ph> 中一个名为 <ph id="ph4">`wsgi_app`</ph> 的函数。</source>
          <target state="new"><ph id="ph1">`WSGI_ALT_VIRTUALENV_HANDLER`</ph> 是指定 WSGI 处理程序的位置。在上面的示例中，该位置为 <ph id="ph2">`app.wsgi_app`</ph>，因为处理程序是根文件夹中的 <ph id="ph3">`app.py`</ph> 中一个名为 <ph id="ph4">`wsgi_app`</ph> 的函数。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>可以自定义 <ph id="ph1">`PYTHONPATH`</ph>，但是，如果通过在 requirements.txt 中指定所有依赖项将全部安装在虚拟环境中，则不需要对其更改。</source>
          <target state="new">可以自定义 <ph id="ph1">`PYTHONPATH`</ph>，但是，如果通过在 requirements.txt 中指定所有依赖项将全部安装在虚拟环境中，则不需要对其更改。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>虚拟环境代理</source>
          <target state="new">虚拟环境代理</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>使用以下脚本可检索 WSGI 处理程序、激活虚拟环境以及记录错误。该脚本用于一般目的，无需修改即可使用。</source>
          <target state="new">使用以下脚本可检索 WSGI 处理程序、激活虚拟环境以及记录错误。该脚本用于一般目的，无需修改即可使用。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ptvs_virtualenv_proxy.py`</ph> 的内容：</source>
          <target state="new"><ph id="ph1">`ptvs_virtualenv_proxy.py`</ph> 的内容：</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>自定义 Git 部署</source>
          <target state="new">自定义 Git 部署</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>故障排除 - 软件包安装</source>
          <target state="new">故障排除 - 软件包安装</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>故障排除 - 虚拟环境</source>
          <target state="new">故障排除 - 虚拟环境</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅 <bpt id="p1">[</bpt>Python 开发人员中心<ept id="p1">](/develop/python/)</ept>。</source>
          <target state="new">有关详细信息，请参阅 <bpt id="p1">[</bpt>Python 开发人员中心<ept id="p1">](/develop/python/)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>