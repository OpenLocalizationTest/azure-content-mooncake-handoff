<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bc142c1d3c8c4272491ea5e24ca3fc1e02dd65b9</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 Azure Web 应用中使用 ASP.NET Web API 和 SQL 数据库创建 REST 服务</source>
          <target state="new">在 Azure Web 应用中使用 ASP.NET Web API 和 SQL 数据库创建 REST 服务</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>本教程将向您介绍如何通过使用 Visual Studio 将使用 ASP.NET Web API 的应用程序部署到 Azure Web 应用。</source>
          <target state="new">本教程将向您介绍如何通过使用 Visual Studio 将使用 ASP.NET Web API 的应用程序部署到 Azure Web 应用。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 Azure Web 应用中使用 ASP.NET Web API 和 SQL 数据库创建 REST 服务</source>
          <target state="new">在 Azure Web 应用中使用 ASP.NET Web API 和 SQL 数据库创建 REST 服务</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本教程介绍如何使用 Visual Studio 2013 或 Visual Studio 2013 Community Edition 中的“发布 Web”向导将 ASP.NET Web 应用部署到 <bpt id="p1">[</bpt>Azure Web 应用<ept id="p1">](/documentation/services/web-sites/)</ept>。</source>
          <target state="new">本教程介绍如何使用 Visual Studio 2013 或 Visual Studio 2013 Community Edition 中的“发布 Web”向导将 ASP.NET Web 应用部署到 <bpt id="p1">[</bpt>Azure Web 应用<ept id="p1">](/documentation/services/web-sites/)</ept>。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>你可以免费注册一个 Azure 帐户，而且，如果你还没有 Visual Studio 2013，则此 SDK 会自动安装 Visual Studio 2013 for Web Express。这样你就能够完全免费地开始针对 Azure 进行开发了。</source>
          <target state="new">你可以免费注册一个 Azure 帐户，而且，如果你还没有 Visual Studio 2013，则此 SDK 会自动安装 Visual Studio 2013 for Web Express。这样你就能够完全免费地开始针对 Azure 进行开发了。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>本教程假定你之前未使用过 Azure。完成本教程之后，你将能够在云中启动并运行简单的 Web 应用。</source>
          <target state="new">本教程假定你之前未使用过 Azure。完成本教程之后，你将能够在云中启动并运行简单的 Web 应用。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>学习内容：</source>
          <target state="new">学习内容：</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>如何通过安装 Azure SDK 来让你的计算机可以进行 Azure 开发。</source>
          <target state="new">如何通过安装 Azure SDK 来让你的计算机可以进行 Azure 开发。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>如何创建 Visual Studio ASP.NET MVC 5 项目并将其发布到 Azure 应用。</source>
          <target state="new">如何创建 Visual Studio ASP.NET MVC 5 项目并将其发布到 Azure 应用。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>如何使用 ASP.NET Web API 实现 Restful API 调用。</source>
          <target state="new">如何使用 ASP.NET Web API 实现 Restful API 调用。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>如何使用 SQL 数据库在 Azure 中存储数据。</source>
          <target state="new">如何使用 SQL 数据库在 Azure 中存储数据。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>如何将应用程序更新发布到 Azure。</source>
          <target state="new">如何将应用程序更新发布到 Azure。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>你将生成一个简单的联系人列表 Web 应用，该 Web 应用基于 ASP.NET MVC 5 构建并使用 ADO.NET Entity Framework 进行数据库访问。下图演示了完整的应用程序：</source>
          <target state="new">你将生成一个简单的联系人列表 Web 应用，该 Web 应用基于 ASP.NET MVC 5 构建并使用 ADO.NET Entity Framework 进行数据库访问。下图演示了完整的应用程序：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Web 应用屏幕截图</source>
          <target state="new">Web 应用屏幕截图</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>创建项目</source>
          <target state="new">创建项目</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>启动 Visual Studio 2013。</source>
          <target state="new">启动 Visual Studio 2013。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>在“文件”菜单中，单击“新建项目”。</source>
          <target state="new">在“文件”菜单中，单击“新建项目”。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>在“新建项目”对话框中，展开“Visual C#”并选择“Web”，然后选择“ASP.NET Web 应用”。将该应用程序命名为 <bpt id="p1">**</bpt>ContactManager<ept id="p1">**</ept>，然后单击“确定”。</source>
          <target state="new">在“新建项目”对话框中，展开“Visual C#”并选择“Web”，然后选择“ASP.NET Web 应用”。将该应用程序命名为 <bpt id="p1">**</bpt>ContactManager<ept id="p1">**</ept>，然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>“新建项目”对话框</source>
          <target state="new">“新建项目”对话框</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>在“新建 ASP.NET 项目”对话框中，选择“MVC”模板，选中“Web API”，确保“在云中托管”处于未选中状态，然后单击“确定”。</source>
          <target state="new">在“新建 ASP.NET 项目”对话框中，选择“MVC”模板，选中“Web API”，确保“在云中托管”处于未选中状态，然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>“新建 ASP.NET 项目”对话框</source>
          <target state="new">“新建 ASP.NET 项目”对话框</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>如果你在 Azure 中还没有 Web 应用，则可以转到 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](http://manage.windowsazure.cn)</ept>创建一个。创建 Web 应用后，请转到“仪表板”，在“速览”下可以下载发布配置文件。在本文的发布部分中，你将需要它。</source>
          <target state="new">如果你在 Azure 中还没有 Web 应用，则可以转到 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](http://manage.windowsazure.cn)</ept>创建一个。创建 Web 应用后，请转到“仪表板”，在“速览”下可以下载发布配置文件。在本文的发布部分中，你将需要它。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>如果你有数据库服务器，请使用它来创建新的数据库。数据库服务器是非常宝贵的资源，而且你通常会想要在同一台服务器上创建多个数据库来进行测试和开发，而不是在每个数据库中各创建一个数据库服务器。请确保你的 Web 应用和数据库位于相同区域中。</source>
          <target state="new">如果你有数据库服务器，请使用它来创建新的数据库。数据库服务器是非常宝贵的资源，而且你通常会想要在同一台服务器上创建多个数据库来进行测试和开发，而不是在每个数据库中各创建一个数据库服务器。请确保你的 Web 应用和数据库位于相同区域中。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>设置页眉和页脚</source>
          <target state="new">设置页眉和页脚</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，展开 <bpt id="p1">*</bpt>Views\\Shared<ept id="p1">*</ept> 文件夹并打开 <bpt id="p2">*</bpt>\_Layout.cshtml<ept id="p2">*</ept> 文件。</source>
          <target state="new">在“解决方案资源管理器”中，展开 <bpt id="p1">*</bpt>Views\\Shared<ept id="p1">*</ept> 文件夹并打开 <bpt id="p2">*</bpt>\_Layout.cshtml<ept id="p2">*</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>\_Layout.cshtml in Solution Explorer</source>
          <target state="new">\_Layout.cshtml in Solution Explorer</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">*</bpt>Views\\Shared\_Layout.cshtml<ept id="p1">*</ept> 文件的内容替换为以下代码：</source>
          <target state="new">将 <bpt id="p1">*</bpt>Views\\Shared\_Layout.cshtml<ept id="p1">*</ept> 文件的内容替换为以下代码：</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>上面的标记会将应用程序名称从 "My ASP.NET App" 更改为 "Contact Manager"，并移除到“主页”、“关于”以及“联系人”的链接。</source>
          <target state="new">上面的标记会将应用程序名称从 "My ASP.NET App" 更改为 "Contact Manager"，并移除到“主页”、“关于”以及“联系人”的链接。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>在本地运行应用程序</source>
          <target state="new">在本地运行应用程序</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>按 Ctrl+F5 运行应用程序。</source>
          <target state="new">按 Ctrl+F5 运行应用程序。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>随后在默认浏览器中显示该应用程序主页。</source>
          <target state="new">随后在默认浏览器中显示该应用程序主页。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>到待办事项列表主页</source>
          <target state="new">到待办事项列表主页</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>这就是你创建将要部署到 Azure 的应用程序目前所需的全部操作。稍后你将添加数据库功能。</source>
          <target state="new">这就是你创建将要部署到 Azure 的应用程序目前所需的全部操作。稍后你将添加数据库功能。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>将应用程序部署到 Azure</source>
          <target state="new">将应用程序部署到 Azure</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，在“解决方案资源管理器”中右键单击该项目，从上下文菜单中选择“发布”。</source>
          <target state="new">在 Visual Studio 中，在“解决方案资源管理器”中右键单击该项目，从上下文菜单中选择“发布”。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>项目上下文菜单中的“发布”</source>
          <target state="new">项目上下文菜单中的“发布”</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>“发布 Web”向导将打开。</source>
          <target state="new">“发布 Web”向导将打开。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>单击“发布”。点击“导入”，并选择之前下载的“发布配置文件”。</source>
          <target state="new">单击“发布”。点击“导入”，并选择之前下载的“发布配置文件”。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>“设置”选项卡</source>
          <target state="new">“设置”选项卡</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Visual Studio 开始执行将文件复制到 Azure 服务器的过程。“输出”窗口将显示已执行的部署操作并报告已成功完成部署。</source>
          <target state="new">Visual Studio 开始执行将文件复制到 Azure 服务器的过程。“输出”窗口将显示已执行的部署操作并报告已成功完成部署。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>默认浏览器会自动打开，并指向所部署站点的 URL。</source>
          <target state="new">默认浏览器会自动打开，并指向所部署站点的 URL。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>你创建的应用程序现在在云中运行。</source>
          <target state="new">你创建的应用程序现在在云中运行。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>在 Azure 中运行的待办事项列表主页</source>
          <target state="new">在 Azure 中运行的待办事项列表主页</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>向应用程序添加数据库</source>
          <target state="new">向应用程序添加数据库</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>接下来，你将更新 MVC 应用程序以添加显示和更新联系人以及在数据库中存储数据的功能。应用程序将使用 Entity Framework 创建数据库并读取和更新数据库中的数据。</source>
          <target state="new">接下来，你将更新 MVC 应用程序以添加显示和更新联系人以及在数据库中存储数据的功能。应用程序将使用 Entity Framework 创建数据库并读取和更新数据库中的数据。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>为联系人添加数据模型类</source>
          <target state="new">为联系人添加数据模型类</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>首先，使用代码创建一个简单的数据模型。</source>
          <target state="new">首先，使用代码创建一个简单的数据模型。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击 Models 文件夹，单击“添加”，然后单击“类”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击 Models 文件夹，单击“添加”，然后单击“类”。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Models 文件夹上下文菜单中的“添加类”</source>
          <target state="new">Models 文件夹上下文菜单中的“添加类”</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>在“添加新项”对话框中，将新的类文件命名为 <bpt id="p1">*</bpt>Contact.cs<ept id="p1">*</ept> ，然后单击“添加”。</source>
          <target state="new">在“添加新项”对话框中，将新的类文件命名为 <bpt id="p1">*</bpt>Contact.cs<ept id="p1">*</ept> ，然后单击“添加”。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>“添加新项”对话框</source>
          <target state="new">“添加新项”对话框</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>将 Contacts.cs 文件的内容替换为以下代码。</source>
          <target state="new">将 Contacts.cs 文件的内容替换为以下代码。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Contact<ept id="p1">**</ept> 类定义你将为每个联系人存储的数据以及数据库需要的主键 ContactID。你可以在本教程末尾的<bpt id="p2">[</bpt>后续步骤<ept id="p2">](#nextsteps)</ept>部分中获取有关数据模型的详细信息。</source>
          <target state="new"><bpt id="p1">**</bpt>Contact<ept id="p1">**</ept> 类定义你将为每个联系人存储的数据以及数据库需要的主键 ContactID。你可以在本教程末尾的<bpt id="p2">[</bpt>后续步骤<ept id="p2">](#nextsteps)</ept>部分中获取有关数据模型的详细信息。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>创建使应用程序用户可以使用联系人的网页</source>
          <target state="new">创建使应用程序用户可以使用联系人的网页</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>ASP.NET MVC 基架功能可以自动生成用于执行创建、读取、更新和删除 (CRUD) 操作的代码。</source>
          <target state="new">ASP.NET MVC 基架功能可以自动生成用于执行创建、读取、更新和删除 (CRUD) 操作的代码。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>为数据添加控制器和视图</source>
          <target state="new">为数据添加控制器和视图</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，展开“控制器”文件夹。</source>
          <target state="new">在“解决方案资源管理器”中，展开“控制器”文件夹。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>生成项目 <bpt id="p1">**</bpt>(Ctrl+Shift+B)<ept id="p1">**</ept>。（在使用基架机制前必须生成项目。）</source>
          <target state="new">生成项目 <bpt id="p1">**</bpt>(Ctrl+Shift+B)<ept id="p1">**</ept>。（在使用基架机制前必须生成项目。）</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>右键单击“控制器”文件夹，单击“添加”，然后单击“控制器”。</source>
          <target state="new">右键单击“控制器”文件夹，单击“添加”，然后单击“控制器”。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Controllers 文件夹上下文菜单中的“添加控制器”</source>
          <target state="new">Controllers 文件夹上下文菜单中的“添加控制器”</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>在“添加基架”对话框中，选择“包含视图的 MVC 控制器(使用 Entity Framework)”并单击“添加”。</source>
          <target state="new">在“添加基架”对话框中，选择“包含视图的 MVC 控制器(使用 Entity Framework)”并单击“添加”。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>添加控制器</source>
          <target state="new">添加控制器</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>将控制器名设置为 <bpt id="p1">**</bpt>HomeController<ept id="p1">**</ept>。选择“联系人”作为模型类。单击“新建数据上下文”按钮并接受默认的“ContactManager.Models.ContactManagerContext”为“新的数据上下文类型”。单击<bpt id="p2">**</bpt>“添加”<ept id="p2">**</ept>。</source>
          <target state="new">将控制器名设置为 <bpt id="p1">**</bpt>HomeController<ept id="p1">**</ept>。选择“联系人”作为模型类。单击“新建数据上下文”按钮并接受默认的“ContactManager.Models.ContactManagerContext”为“新的数据上下文类型”。单击<bpt id="p2">**</bpt>“添加”<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>“添加控制器”对话框</source>
          <target state="new">“添加控制器”对话框</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>将出现一个提示对话框：“名为 HomeController 的文件已存在。是否希望将其替换？”。单击<bpt id="p1">**</bpt>“是”<ept id="p1">**</ept>。我们正在覆盖使用新项目创建的主控制器。我们将为联系人列表使用新的主控制器。</source>
          <target state="new">将出现一个提示对话框：“名为 HomeController 的文件已存在。是否希望将其替换？”。单击<bpt id="p1">**</bpt>“是”<ept id="p1">**</ept>。我们正在覆盖使用新项目创建的主控制器。我们将为联系人列表使用新的主控制器。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Visual Studio 将为 <bpt id="p1">**</bpt>Contact<ept id="p1">**</ept> 对象的 CRUD 数据库操作创建控制器方法和视图。</source>
          <target state="new">Visual Studio 将为 <bpt id="p1">**</bpt>Contact<ept id="p1">**</ept> 对象的 CRUD 数据库操作创建控制器方法和视图。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>启用迁移、创建数据库、添加示例数据和数据初始值设定项</source>
          <target state="new">启用迁移、创建数据库、添加示例数据和数据初始值设定项</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>接下来的任务是启用 <bpt id="p1">[</bpt>Code First 迁移<ept id="p1">](http://curah.microsoft.com/55220)</ept>功能以便基于你创建的数据模型创建数据库。</source>
          <target state="new">接下来的任务是启用 <bpt id="p1">[</bpt>Code First 迁移<ept id="p1">](http://curah.microsoft.com/55220)</ept>功能以便基于你创建的数据模型创建数据库。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>在“工具”菜单中，依次选择“库包管理器”和“包管理器控制台”。</source>
          <target state="new">在“工具”菜单中，依次选择“库包管理器”和“包管理器控制台”。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>“工具”菜单中的“程序包管理器控制台”</source>
          <target state="new">“工具”菜单中的“程序包管理器控制台”</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>在“包管理器控制台”窗口中，输入以下命令：</source>
          <target state="new">在“包管理器控制台”窗口中，输入以下命令：</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>enable-migrations<ept id="p1">**</ept> 命令将创建一个 <bpt id="p2">*</bpt>Migrations<ept id="p2">*</ept> 文件夹，并在该文件夹中放入一个可编辑以配置 Migrations 的 <bpt id="p3">*</bpt>Configuration.cs<ept id="p3">*</ept> 文件。</source>
          <target state="new"><bpt id="p1">**</bpt>enable-migrations<ept id="p1">**</ept> 命令将创建一个 <bpt id="p2">*</bpt>Migrations<ept id="p2">*</ept> 文件夹，并在该文件夹中放入一个可编辑以配置 Migrations 的 <bpt id="p3">*</bpt>Configuration.cs<ept id="p3">*</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>在“包管理器控制台”窗口中，输入以下命令：</source>
          <target state="new">在“包管理器控制台”窗口中，输入以下命令：</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>add-migration Initial<ept id="p1">**</ept> 命令将生成一个创建数据库的名为 <bpt id="p2">**</bpt>&amp;lt;date\_stamp&amp;gt;Initial<ept id="p2">**</ept> 的类。第一个参数 (<bpt id="p3">*</bpt>Initial<ept id="p3">*</ept>) 是任意参数并将用于创建文件名称。你可以在“解决方案资源管理器”中查看新的类文件。</source>
          <target state="new"><bpt id="p1">**</bpt>add-migration Initial<ept id="p1">**</ept> 命令将生成一个创建数据库的名为 <bpt id="p2">**</bpt>&amp;lt;date\_stamp&amp;gt;Initial<ept id="p2">**</ept> 的类。第一个参数 (<bpt id="p3">*</bpt>Initial<ept id="p3">*</ept>) 是任意参数并将用于创建文件名称。你可以在“解决方案资源管理器”中查看新的类文件。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>Initial<ept id="p1">**</ept> 类中，<bpt id="p2">**</bpt>Up<ept id="p2">**</ept> 方法用于创建 Contacts 表，而 <bpt id="p3">**</bpt>Down<ept id="p3">**</ept> 方法（在你想要返回到以前的状态时使用）用于删除该表。</source>
          <target state="new">在 <bpt id="p1">**</bpt>Initial<ept id="p1">**</ept> 类中，<bpt id="p2">**</bpt>Up<ept id="p2">**</ept> 方法用于创建 Contacts 表，而 <bpt id="p3">**</bpt>Down<ept id="p3">**</ept> 方法（在你想要返回到以前的状态时使用）用于删除该表。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>打开 <bpt id="p1">*</bpt>Migrations\\Configuration.cs<ept id="p1">*</ept> 文件。</source>
          <target state="new">打开 <bpt id="p1">*</bpt>Migrations\\Configuration.cs<ept id="p1">*</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>添加以下命名空间。</source>
          <target state="new">添加以下命名空间。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">*</bpt>Seed<ept id="p1">*</ept> 方法替换为以下代码：</source>
          <target state="new">将 <bpt id="p1">*</bpt>Seed<ept id="p1">*</ept> 方法替换为以下代码：</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>上面这段代码将用联系人信息初始化数据库。有关对数据库进行种子设定的更多信息，请参阅调试 <bpt id="p1">[</bpt>Entity Framework (EF) 数据库<ept id="p1">](http://blogs.msdn.com/b/rickandy/archive/2013/02/12/seeding-and-debugging-entity-framework-ef-dbs.aspx)</ept>。</source>
          <target state="new">上面这段代码将用联系人信息初始化数据库。有关对数据库进行种子设定的更多信息，请参阅调试 <bpt id="p1">[</bpt>Entity Framework (EF) 数据库<ept id="p1">](http://blogs.msdn.com/b/rickandy/archive/2013/02/12/seeding-and-debugging-entity-framework-ef-dbs.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>在“包管理器控制台”中输入以下命令：</source>
          <target state="new">在“包管理器控制台”中输入以下命令：</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>“程序包管理器控制台”命令</source>
          <target state="new">“程序包管理器控制台”命令</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>update-database<ept id="p1">**</ept> 用于运行将创建数据库的初始迁移。默认情况下，将以 SQL Server Express LocalDB 数据库的形式创建数据库。</source>
          <target state="new"><bpt id="p1">**</bpt>update-database<ept id="p1">**</ept> 用于运行将创建数据库的初始迁移。默认情况下，将以 SQL Server Express LocalDB 数据库的形式创建数据库。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>按 Ctrl+F5 运行应用程序。</source>
          <target state="new">按 Ctrl+F5 运行应用程序。</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>应用程序将显示种子数据并提供编辑、详细信息和删除链接。</source>
          <target state="new">应用程序将显示种子数据并提供编辑、详细信息和删除链接。</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>数据的 MVC 视图</source>
          <target state="new">数据的 MVC 视图</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>编辑视图</source>
          <target state="new">编辑视图</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>打开 <bpt id="p1">*</bpt>Views\\Home\\Index.cshtml<ept id="p1">*</ept> 文件。在下一步中，我们将生成的标记替换为使用 <bpt id="p2">[</bpt>jQuery<ept id="p2">](http://jquery.com/)</ept> 和 <bpt id="p3">[</bpt>Knockout.js<ept id="p3">](http://knockoutjs.com/)</ept> 的代码。此新代码将使用 Web API 和 JSON 检索联系人列表，然后使用 knockout.js 将联系人数据绑定至 UI。有关详细信息，请参阅本教程末尾的<bpt id="p4">[</bpt>后续步骤<ept id="p4">](#nextsteps)</ept>部分。</source>
          <target state="new">打开 <bpt id="p1">*</bpt>Views\\Home\\Index.cshtml<ept id="p1">*</ept> 文件。在下一步中，我们将生成的标记替换为使用 <bpt id="p2">[</bpt>jQuery<ept id="p2">](http://jquery.com/)</ept> 和 <bpt id="p3">[</bpt>Knockout.js<ept id="p3">](http://knockoutjs.com/)</ept> 的代码。此新代码将使用 Web API 和 JSON 检索联系人列表，然后使用 knockout.js 将联系人数据绑定至 UI。有关详细信息，请参阅本教程末尾的<bpt id="p4">[</bpt>后续步骤<ept id="p4">](#nextsteps)</ept>部分。</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>将文件的内容替换为以下代码。</source>
          <target state="new">将文件的内容替换为以下代码。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>右键单击 Content 文件夹并单击“添加”，然后单击“新建项...”。</source>
          <target state="new">右键单击 Content 文件夹并单击“添加”，然后单击“新建项...”。</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>在 Content 文件夹上下文菜单中添加样式表</source>
          <target state="new">在 Content 文件夹上下文菜单中添加样式表</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>在“添加新项”对话框中，在右上的搜索框中输入 <bpt id="p1">**</bpt>Style<ept id="p1">**</ept>，然后选择“样式表”。</source>
          <target state="new">在“添加新项”对话框中，在右上的搜索框中输入 <bpt id="p1">**</bpt>Style<ept id="p1">**</ept>，然后选择“样式表”。</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><ph id="ph1"> ![</ph>“添加新项”对话框<ph id="ph2">][rxStyle]</ph></source>
          <target state="new"><ph id="ph1"> ![</ph>“添加新项”对话框<ph id="ph2">][rxStyle]</ph></target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>将文件命名为 <bpt id="p1">*</bpt>Contacts.css<ept id="p1">*</ept> 并单击“添加”。将文件的内容替换为以下代码。</source>
          <target state="new">将文件命名为 <bpt id="p1">*</bpt>Contacts.css<ept id="p1">*</ept> 并单击“添加”。将文件的内容替换为以下代码。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>该样式表将用作联系人管理器应用程序的布局、颜色和样式。</source>
          <target state="new">该样式表将用作联系人管理器应用程序的布局、颜色和样式。</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>打开 <bpt id="p1">*</bpt>App\_Start\\BundleConfig.cs<ept id="p1">*</ept> 文件。</source>
          <target state="new">打开 <bpt id="p1">*</bpt>App\_Start\\BundleConfig.cs<ept id="p1">*</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>添加以下代码以注册 <bpt id="p1">[</bpt>Knockout<ept id="p1">]</ept><bpt id="p2">(http://knockoutjs.com/index.html "</bpt>KO<ept id="p2">")</ept> 插件。</source>
          <target state="new">添加以下代码以注册 <bpt id="p1">[</bpt>Knockout<ept id="p1">]</ept><bpt id="p2">(http://knockoutjs.com/index.html "</bpt>KO<ept id="p2">")</ept> 插件。</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>此示例使用 knockout 来简化处理屏幕模板的动态 JavaScript 代码。</source>
          <target state="new">此示例使用 knockout 来简化处理屏幕模板的动态 JavaScript 代码。</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>修改 contents/css 条目以注册 <bpt id="p1">*</bpt>contacts.css<ept id="p1">*</ept> 样式表。将以下行</source>
          <target state="new">修改 contents/css 条目以注册 <bpt id="p1">*</bpt>contacts.css<ept id="p1">*</ept> 样式表。将以下行</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>更改为：</source>
          <target state="new">更改为：</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>在“程序包管理器控制台”中运行以下命令以安装 Knockout。</source>
          <target state="new">在“程序包管理器控制台”中运行以下命令以安装 Knockout。</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>为 Web API Restful 接口添加控制器</source>
          <target state="new">为 Web API Restful 接口添加控制器</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击“控制器”，然后依次单击“添加”和“控制器....”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击“控制器”，然后依次单击“添加”和“控制器....”。</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>在“添加基架”对话框中，进入“包含操作的 Web API 2 控制器(使用 Entity Framework)”并单击“添加”。</source>
          <target state="new">在“添加基架”对话框中，进入“包含操作的 Web API 2 控制器(使用 Entity Framework)”并单击“添加”。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>添加 API 控制器</source>
          <target state="new">添加 API 控制器</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>在“添加控制器”对话框中，输入“ContactsController”作为控制器名称。为“模型类”选择“Contact (ContactManager.Models)”。保留“数据上下文类”的默认值。</source>
          <target state="new">在“添加控制器”对话框中，输入“ContactsController”作为控制器名称。为“模型类”选择“Contact (ContactManager.Models)”。保留“数据上下文类”的默认值。</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>单击<bpt id="p1">**</bpt>“添加”<ept id="p1">**</ept>。</source>
          <target state="new">单击<bpt id="p1">**</bpt>“添加”<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>在本地运行应用程序</source>
          <target state="new">在本地运行应用程序</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>按 Ctrl+F5 运行应用程序。</source>
          <target state="new">按 Ctrl+F5 运行应用程序。</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>索引页面</source>
          <target state="new">索引页面</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>输入联系人信息并单击“添加”。该应用程序将返回主页并显示刚才输入的联系人信息。</source>
          <target state="new">输入联系人信息并单击“添加”。该应用程序将返回主页并显示刚才输入的联系人信息。</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>包含待办事项列表项的索引页面</source>
          <target state="new">包含待办事项列表项的索引页面</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>在浏览器中，将 <bpt id="p1">**</bpt>/api/contacts<ept id="p1">**</ept> 追加到 URL。</source>
          <target state="new">在浏览器中，将 <bpt id="p1">**</bpt>/api/contacts<ept id="p1">**</ept> 追加到 URL。</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>生成的 URL 将类似于 http://localhost:1234/api/contacts。添加的 RESTful Web API 将返回存储的联系人。Firefox 和 Chrome 将以 XML 格式显示数据。</source>
          <target state="new">生成的 URL 将类似于 http://localhost:1234/api/contacts。添加的 RESTful Web API 将返回存储的联系人。Firefox 和 Chrome 将以 XML 格式显示数据。</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>包含待办事项列表项的索引页面</source>
          <target state="new">包含待办事项列表项的索引页面</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>添加 XSRF 保护</source>
          <target state="new">添加 XSRF 保护</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>跨站点请求伪造（也称为 XSRF 或 CSRF）是一种针对 Web 托管型应用程序的攻击，恶意 Web 应用凭此可以影响客户端浏览器与受该浏览器信任的 Web 应用之间的交互。这些攻击出现的原因可能是 Web 浏览器针对每一个对 Web 应用的请求自动发送身份验证令牌。典型示例是身份验证 cookie，如 ASP.NET 的表单身份验证票证。然而，使用任何持久身份验证（如 Windows Authentication、Basic 等）的 Web 应用也可能成为受攻击目标。</source>
          <target state="new">跨站点请求伪造（也称为 XSRF 或 CSRF）是一种针对 Web 托管型应用程序的攻击，恶意 Web 应用凭此可以影响客户端浏览器与受该浏览器信任的 Web 应用之间的交互。这些攻击出现的原因可能是 Web 浏览器针对每一个对 Web 应用的请求自动发送身份验证令牌。典型示例是身份验证 cookie，如 ASP.NET 的表单身份验证票证。然而，使用任何持久身份验证（如 Windows Authentication、Basic 等）的 Web 应用也可能成为受攻击目标。</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>XSRF 攻击不同于网络钓鱼攻击。网络钓鱼攻击需要与受害者进行交互。在网络钓鱼攻击中，恶意 Web 应用将仿冒目标 Web 应用，受到欺骗的受害者会向攻击者提供敏感信息。在 XSRF 攻击中，通常不必与受害者进行交互。相反，浏览器自动向目标 Web 应用发送所有相关 Cookie 为攻击者提供了可乘之机。</source>
          <target state="new">XSRF 攻击不同于网络钓鱼攻击。网络钓鱼攻击需要与受害者进行交互。在网络钓鱼攻击中，恶意 Web 应用将仿冒目标 Web 应用，受到欺骗的受害者会向攻击者提供敏感信息。在 XSRF 攻击中，通常不必与受害者进行交互。相反，浏览器自动向目标 Web 应用发送所有相关 Cookie 为攻击者提供了可乘之机。</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅<bpt id="p1">[</bpt>打开 Web 应用安全项目<ept id="p1">](https://www.owasp.org/index.php/Main_Page)</ept> (OWASP) <bpt id="p2">[</bpt>XSRF<ept id="p2">](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))</ept>。</source>
          <target state="new">有关详细信息，请参阅<bpt id="p1">[</bpt>打开 Web 应用安全项目<ept id="p1">](https://www.owasp.org/index.php/Main_Page)</ept> (OWASP) <bpt id="p2">[</bpt>XSRF<ept id="p2">](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF))</ept>。</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击“ContactManager”项目并单击“添加”，然后单击“类”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击“ContactManager”项目并单击“添加”，然后单击“类”。</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>将文件命名为 <bpt id="p1">*</bpt>ValidateHttpAntiForgeryTokenAttribute.cs<ept id="p1">*</ept> 并添加以下代码：</source>
          <target state="new">将文件命名为 <bpt id="p1">*</bpt>ValidateHttpAntiForgeryTokenAttribute.cs<ept id="p1">*</ept> 并添加以下代码：</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>将以下 <bpt id="p1">*</bpt>using<ept id="p1">*</ept> 语句添加到联系人控制器以便你可以访问 <bpt id="p2">**</bpt>[ValidateHttpAntiForgeryToken]<ept id="p2">**</ept> 属性。</source>
          <target state="new">将以下 <bpt id="p1">*</bpt>using<ept id="p1">*</ept> 语句添加到联系人控制器以便你可以访问 <bpt id="p2">**</bpt>[ValidateHttpAntiForgeryToken]<ept id="p2">**</ept> 属性。</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">**</bpt>[ValidateHttpAntiForgeryToken]<ept id="p1">**</ept> 属性添加到 <bpt id="p2">**</bpt>ContactsController<ept id="p2">**</ept> 的 Post 方法以保护其免受 XSRF 威胁。将其添加到 "PutContact"、"PostContact" 和 <bpt id="p3">**</bpt>DeleteContact<ept id="p3">**</ept> 操作方法。</source>
          <target state="new">将 <bpt id="p1">**</bpt>[ValidateHttpAntiForgeryToken]<ept id="p1">**</ept> 属性添加到 <bpt id="p2">**</bpt>ContactsController<ept id="p2">**</ept> 的 Post 方法以保护其免受 XSRF 威胁。将其添加到 "PutContact"、"PostContact" 和 <bpt id="p3">**</bpt>DeleteContact<ept id="p3">**</ept> 操作方法。</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>更新 <bpt id="p1">*</bpt>Views\\Home\\Index.cshtml<ept id="p1">*</ept> 文件的 <bpt id="p2">*</bpt>Scripts<ept id="p2">*</ept> 部分以包含代码，从而获取 XSRF 令牌。</source>
          <target state="new">更新 <bpt id="p1">*</bpt>Views\\Home\\Index.cshtml<ept id="p1">*</ept> 文件的 <bpt id="p2">*</bpt>Scripts<ept id="p2">*</ept> 部分以包含代码，从而获取 XSRF 令牌。</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>将应用程序更新发布到 Azure 和 SQL 数据库</source>
          <target state="new">将应用程序更新发布到 Azure 和 SQL 数据库</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>若要发布应用程序，可重复之前遵循的过程。</source>
          <target state="new">若要发布应用程序，可重复之前遵循的过程。</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击项目并选择“发布”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击项目并选择“发布”。</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>发布</source>
          <target state="new">发布</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>单击“导入”，然后选择上面下载的发布配置文件。</source>
          <target state="new">单击“导入”，然后选择上面下载的发布配置文件。</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>ContactsManagerContext(ContactsManagerContext)<ept id="p1">**</ept> 之下，单击 <bpt id="p2">**</bpt>v<ept id="p2">**</ept> 图标将<bpt id="p3">*</bpt>远程连接字符串<ept id="p3">*</ept>更改为联系人数据库的连接字符串。单击“ContactDB”。</source>
          <target state="new">在 <bpt id="p1">**</bpt>ContactsManagerContext(ContactsManagerContext)<ept id="p1">**</ept> 之下，单击 <bpt id="p2">**</bpt>v<ept id="p2">**</ept> 图标将<bpt id="p3">*</bpt>远程连接字符串<ept id="p3">*</ept>更改为联系人数据库的连接字符串。单击“ContactDB”。</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>设置</source>
          <target state="new">设置</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>选中“执行代码优先迁移(应用程序启动时运行)”复选框。</source>
          <target state="new">选中“执行代码优先迁移(应用程序启动时运行)”复选框。</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>单击“下一步”，然后单击“预览”。Visual Studio 将显示一个需要添加或更新的文件列表。</source>
          <target state="new">单击“下一步”，然后单击“预览”。Visual Studio 将显示一个需要添加或更新的文件列表。</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>单击“发布”。</source>
          <target state="new">单击“发布”。</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>部署完成后，浏览器将打开该应用程序的主页。</source>
          <target state="new">部署完成后，浏览器将打开该应用程序的主页。</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>没有任何联系人的索引页面</source>
          <target state="new">没有任何联系人的索引页面</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Visual Studio 发布过程自动将部署的 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 文件中的连接字符串配置为指向 SQL 数据库。其还配置了代码优先迁移，以在部署后应用程序首次访问数据库时自动将数据库升级至最新版本。</source>
          <target state="new">Visual Studio 发布过程自动将部署的 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 文件中的连接字符串配置为指向 SQL 数据库。其还配置了代码优先迁移，以在部署后应用程序首次访问数据库时自动将数据库升级至最新版本。</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>由于这种配置，通过运行之前创建的 <bpt id="p1">**</bpt>Initial<ept id="p1">**</ept> 类中的代码，代码优先创建了数据库。其会在应用程序在部署后首次尝试访问数据库时进行。</source>
          <target state="new">由于这种配置，通过运行之前创建的 <bpt id="p1">**</bpt>Initial<ept id="p1">**</ept> 类中的代码，代码优先创建了数据库。其会在应用程序在部署后首次尝试访问数据库时进行。</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>在本地运行应用程序时按之前所做输入一个联系人以验证数据库部署是否成功。</source>
          <target state="new">在本地运行应用程序时按之前所做输入一个联系人以验证数据库部署是否成功。</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>当看到输入的项得到了保存并显示在联系人管理器页面，你就可以知晓其已存储在数据库中。</source>
          <target state="new">当看到输入的项得到了保存并显示在联系人管理器页面，你就可以知晓其已存储在数据库中。</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>包含联系人的索引页面</source>
          <target state="new">包含联系人的索引页面</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>该应用程序现在是运行在云中，使用 SQL 数据库存储其数据。在 Azure 中测试应用程序完成后，将其删除。该应用程序是公开的并且没有限制访问的机制。</source>
          <target state="new">该应用程序现在是运行在云中，使用 SQL 数据库存储其数据。在 Azure 中测试应用程序完成后，将其删除。该应用程序是公开的并且没有限制访问的机制。</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="nextsteps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</source>
          <target state="new"><ph id="ph1">&lt;a name="nextsteps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>后续步骤</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>实际的应用程序需要身份验证和授权，你可以使用成员资格数据库实现此目的。教程<bpt id="p1">[</bpt>使用 OAuth、成员资格以及 SQL 数据库部署安全的 ASP.NET MVC 应用程序<ept id="p1">](/documentation/articles/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database)</ept>基于本教程，其中介绍了如何部署包含成员资格数据库的 Web 应用。</source>
          <target state="new">实际的应用程序需要身份验证和授权，你可以使用成员资格数据库实现此目的。教程<bpt id="p1">[</bpt>使用 OAuth、成员资格以及 SQL 数据库部署安全的 ASP.NET MVC 应用程序<ept id="p1">](/documentation/articles/web-sites-dotnet-deploy-aspnet-mvc-app-membership-oauth-sql-database)</ept>基于本教程，其中介绍了如何部署包含成员资格数据库的 Web 应用。</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>另一种在 Azure 应用程序中存储数据的方法是使用 Azure 存储，该方法以 Blob 和表的形式提供非关系数据存储。以下链接提供了更多有关 Web API、ASP.NET MVC 以及 Window Azure 的信息。</source>
          <target state="new">另一种在 Azure 应用程序中存储数据的方法是使用 Azure 存储，该方法以 Blob 和表的形式提供非关系数据存储。以下链接提供了更多有关 Web API、ASP.NET MVC 以及 Window Azure 的信息。</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>使用 MVC 的 Entity Framework 入门</source>
          <target state="new">使用 MVC 的 Entity Framework 入门</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>ASP.NET MVC 5 简介</source>
          <target state="new">ASP.NET MVC 5 简介</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>你的第一个 ASP.NET Web API</source>
          <target state="new">你的第一个 ASP.NET Web API</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>调试 WAWS</source>
          <target state="new">调试 WAWS</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>本教程和示例应用程序由 <bpt id="p1">[</bpt>Rick Anderson<ept id="p1">](http://blogs.msdn.com/b/rickandy/)</ept> 在 Tom Dykstra 和 Barry Dorrans 的帮助下编写完成。</source>
          <target state="new">本教程和示例应用程序由 <bpt id="p1">[</bpt>Rick Anderson<ept id="p1">](http://blogs.msdn.com/b/rickandy/)</ept> 在 Tom Dykstra 和 Barry Dorrans 的帮助下编写完成。</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>请提供有关你喜欢的内容或者你希望看到改善的内容的反馈，不仅关于教程本身，也关于它所演示的产品。你的反馈将帮助我们确定优先改进哪些方面。我们特别希望确定大家对于对配置和部署成员资格数据库的流程进行更多自动化的兴趣有多大。</source>
          <target state="new">请提供有关你喜欢的内容或者你希望看到改善的内容的反馈，不仅关于教程本身，也关于它所演示的产品。你的反馈将帮助我们确定优先改进哪些方面。我们特别希望确定大家对于对配置和部署成员资格数据库的流程进行更多自动化的兴趣有多大。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>