<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01e2f64eb5c2c84cd98fff369a73b15f875f541c</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 Azure Web 应用中创建 .NET Web 作业 | Azure</source>
          <target state="new">在 Azure Web 应用中创建 .NET Web 作业 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>使用 ASP.NET MVC 和 Azure 创建多层应用。前端在 Azure 的 Web 应用中运行，后端以 Web 作业的形式运行。应用程序使用实体框架、SQL 数据库和 Azure 存储队列和 Blob。</source>
          <target state="new">使用 ASP.NET MVC 和 Azure 创建多层应用。前端在 Azure 的 Web 应用中运行，后端以 Web 作业的形式运行。应用程序使用实体框架、SQL 数据库和 Azure 存储队列和 Blob。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 Azure Web 应用中创建 .NET Web 作业</source>
          <target state="new">在 Azure Web 应用中创建 .NET Web 作业</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本教程说明了如何为使用 <bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 的简单多层 ASP.NET MVC 5 应用程序编写代码。</source>
          <target state="new">本教程说明了如何为使用 <bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk)</ept> 的简单多层 ASP.NET MVC 5 应用程序编写代码。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](/documentation/articles/websites-webjobs-resources)</ept> 的用途是简化针对 Web 作业可以执行的常见任务（例如，图像处理、队列处理、RSS 聚合、文件维护和发送电子邮件）编写的代码。WebJobs SDK 中的内置功能使用 Azure 存储空间和 Service Bus，用于计划任务和处理错误，以及用于许多其他常见方案。此外，它还设计为可扩展并且有<bpt id="p2">[</bpt>用于扩展的开源存储库<ept id="p2">](https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Binding-Extensions-Overview)</ept>。</source>
          <target state="new"><bpt id="p1">[</bpt>WebJobs SDK<ept id="p1">](/documentation/articles/websites-webjobs-resources)</ept> 的用途是简化针对 Web 作业可以执行的常见任务（例如，图像处理、队列处理、RSS 聚合、文件维护和发送电子邮件）编写的代码。WebJobs SDK 中的内置功能使用 Azure 存储空间和 Service Bus，用于计划任务和处理错误，以及用于许多其他常见方案。此外，它还设计为可扩展并且有<bpt id="p2">[</bpt>用于扩展的开源存储库<ept id="p2">](https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Binding-Extensions-Overview)</ept>。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>示例应用程序是一个广告公告板。用户可以上载广告的图像，后端进程会将图像转换成缩略图。广告列表页将显示缩略图，而广告详细信息页则显示完整大小的图像。下面是屏幕快照：</source>
          <target state="new">示例应用程序是一个广告公告板。用户可以上载广告的图像，后端进程会将图像转换成缩略图。广告列表页将显示缩略图，而广告详细信息页则显示完整大小的图像。下面是屏幕快照：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>广告列表</source>
          <target state="new">广告列表</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="prerequisites"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>先决条件</source>
          <target state="new"><ph id="ph1">&lt;a id="prerequisites"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>先决条件</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>本教程假设你知道如何处理 Visual Studio 中的 <bpt id="p1">[</bpt>ASP.NET MVC 5<ept id="p1">](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)</ept> 项目。</source>
          <target state="new">本教程假设你知道如何处理 Visual Studio 中的 <bpt id="p1">[</bpt>ASP.NET MVC 5<ept id="p1">](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)</ept> 项目。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>本教程是针对 Visual Studio 2013 编写的。如果你尚未安装 Visual Studio，当你安装 Azure SDK for .NET 时会自动安装 Visual Studio。</source>
          <target state="new">本教程是针对 Visual Studio 2013 编写的。如果你尚未安装 Visual Studio，当你安装 Azure SDK for .NET 时会自动安装 Visual Studio。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>本教程可以配合 Visual Studio 2015 使用，但在本地运行应用程序之前，必须将 Web.config 和 App.config 文件中 SQL Server LocalDB 连接字符串的 <ph id="ph1">`Data Source`</ph> 部分从 <ph id="ph2">`Data Source=(localdb)\v11.0`</ph> 更改为 <ph id="ph3">`Data Source=(LocalDb)\MSSQLLocalDB`</ph>。</source>
          <target state="new">本教程可以配合 Visual Studio 2015 使用，但在本地运行应用程序之前，必须将 Web.config 和 App.config 文件中 SQL Server LocalDB 连接字符串的 <ph id="ph1">`Data Source`</ph> 部分从 <ph id="ph2">`Data Source=(localdb)\v11.0`</ph> 更改为 <ph id="ph3">`Data Source=(LocalDb)\MSSQLLocalDB`</ph>。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="learn"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>学习内容</source>
          <target state="new"><ph id="ph1">&lt;a id="learn"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>学习内容</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>本教程说明如何执行以下任务：</source>
          <target state="new">本教程说明如何执行以下任务：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>通过安装 Azure SDK 来使计算机进行 Azure 开发。</source>
          <target state="new">通过安装 Azure SDK 来使计算机进行 Azure 开发。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>创建一个控制台应用程序项目，当你部署关联的 Web 项目时，该应用程序项目将自动部署为 Azure Web 作业。</source>
          <target state="new">创建一个控制台应用程序项目，当你部署关联的 Web 项目时，该应用程序项目将自动部署为 Azure Web 作业。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>在开发计算机上本地测试 WebJobs SDK 后端。</source>
          <target state="new">在开发计算机上本地测试 WebJobs SDK 后端。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>使用 WebJobs 后端将应用程序发布到 Azure 中的 Web 应用。</source>
          <target state="new">使用 WebJobs 后端将应用程序发布到 Azure 中的 Web 应用。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>上载文件并将其存储在 Azure Blob 服务中。</source>
          <target state="new">上载文件并将其存储在 Azure Blob 服务中。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>使用 Azure WebJobs SDK 来处理 Azure 存储队列和 Blob。</source>
          <target state="new">使用 Azure WebJobs SDK 来处理 Azure 存储队列和 Blob。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="contosoads"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>应用程序体系结构</source>
          <target state="new"><ph id="ph1">&lt;a id="contosoads"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>应用程序体系结构</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>示例应用程序使用<bpt id="p1">[</bpt>以队列为中心的工作模式<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)</ept>来减轻创建缩略图到后端进程的 CPU 密集型工作。</source>
          <target state="new">示例应用程序使用<bpt id="p1">[</bpt>以队列为中心的工作模式<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/queue-centric-work-pattern)</ept>来减轻创建缩略图到后端进程的 CPU 密集型工作。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>该应用程序将广告存储在 SQL 数据库中，通过使用实体框架 Code First 创建表和访问数据。对于每个广告，数据库存储两个 URL，一个用于完全尺寸的图像，一个用于缩略图。</source>
          <target state="new">该应用程序将广告存储在 SQL 数据库中，通过使用实体框架 Code First 创建表和访问数据。对于每个广告，数据库存储两个 URL，一个用于完全尺寸的图像，一个用于缩略图。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>广告表</source>
          <target state="new">广告表</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>当用户上载图像时， Web 应用将在 <bpt id="p1">[</bpt>Azure Blob<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage)</ept> 中存储图像，并将广告信息存储在具有指向 Blob 的 URL 的数据库中。同时，它将一条消息写入 Azure 队列。在作为 Azure Web 作业运行的后端进程中，WebJobs SDK 将轮询新消息的队列。显示新消息时，Web 作业将创建该图像的缩略图，并为该广告更新缩略图 URL 数据库字段。下图介绍应用程序各部分之间如何交互：</source>
          <target state="new">当用户上载图像时， Web 应用将在 <bpt id="p1">[</bpt>Azure Blob<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/unstructured-blob-storage)</ept> 中存储图像，并将广告信息存储在具有指向 Blob 的 URL 的数据库中。同时，它将一条消息写入 Azure 队列。在作为 Azure Web 作业运行的后端进程中，WebJobs SDK 将轮询新消息的队列。显示新消息时，Web 作业将创建该图像的缩略图，并为该广告更新缩略图 URL 数据库字段。下图介绍应用程序各部分之间如何交互：</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Contoso 广告体系结构</source>
          <target state="new">Contoso 广告体系结构</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>本教程中的说明不适用于 Azure SDK for .NET 2.7.1 或更高版本。</source>
          <target state="new">本教程中的说明不适用于 Azure SDK for .NET 2.7.1 或更高版本。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="storage"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>创建 Azure 存储帐户</source>
          <target state="new"><ph id="ph1">&lt;a id="storage"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>创建 Azure 存储帐户</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Azure 存储帐户提供在云中存储队列和 Blob 数据的资源。它还由 WebJobs SDK 用来存储仪表板的日志记录数据。</source>
          <target state="new">Azure 存储帐户提供在云中存储队列和 Blob 数据的资源。它还由 WebJobs SDK 用来存储仪表板的日志记录数据。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>在实际应用程序中，你通常会为记录数据的应用程序数据创建单独的帐户，并且为生产数据的测试数据创建单独帐户。对于本教程，你将只使用一个帐户。</source>
          <target state="new">在实际应用程序中，你通常会为记录数据的应用程序数据创建单独的帐户，并且为生产数据的测试数据创建单独帐户。对于本教程，你将只使用一个帐户。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中打开“服务器资源管理器”窗口。</source>
          <target state="new">在 Visual Studio 中打开“服务器资源管理器”窗口。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>右键单击“Azure”节点，然后单击“连接到 Azure”。</source>
          <target state="new">右键单击“Azure”节点，然后单击“连接到 Azure”。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>连接到 Azure</source>
          <target state="new">连接到 Azure</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>使用你的 Azure 凭据登录。</source>
          <target state="new">使用你的 Azure 凭据登录。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>在 Azure 节点下右键单击“存储”，然后单击“创建存储帐户”。</source>
          <target state="new">在 Azure 节点下右键单击“存储”，然后单击“创建存储帐户”。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>创建存储帐户</source>
          <target state="new">创建存储帐户</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>在“创建存储帐户”对话框中，输入存储帐户的名称。</source>
          <target state="new">在“创建存储帐户”对话框中，输入存储帐户的名称。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>该名称必须是唯一的（其他 Azure 存储帐户都不可以使用该名称）。如果输入的名称已被使用，你可以进行更改。</source>
          <target state="new">该名称必须是唯一的（其他 Azure 存储帐户都不可以使用该名称）。如果输入的名称已被使用，你可以进行更改。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>用于访问存储帐户的 URL 为 <bpt id="p1">*</bpt>{名称}<ept id="p1">*</ept>.core.chinacloudapi.cn。</source>
          <target state="new">用于访问存储帐户的 URL 为 <bpt id="p1">*</bpt>{名称}<ept id="p1">*</ept>.core.chinacloudapi.cn。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>将“区域或地缘组”设置为离你最近的区域。</source>
          <target state="new">将“区域或地缘组”设置为离你最近的区域。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>此设置指定哪个 Azure 数据中心将托管你的存储帐户。对于本教程，你做的选择不会带来明显的差异。但是，对于生产 Web 应用，你希望 Web 服务器和存储帐户处于同一区域，以最大程度地减少延迟和数据传出费用。（稍后要创建的） Web 应用数据中心应尽可能靠近访问 Web 应用的浏览器，以最大程度地减少延迟。</source>
          <target state="new">此设置指定哪个 Azure 数据中心将托管你的存储帐户。对于本教程，你做的选择不会带来明显的差异。但是，对于生产 Web 应用，你希望 Web 服务器和存储帐户处于同一区域，以最大程度地减少延迟和数据传出费用。（稍后要创建的） Web 应用数据中心应尽可能靠近访问 Web 应用的浏览器，以最大程度地减少延迟。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>将“复制”下拉列表设置为“本地冗余”。</source>
          <target state="new">将“复制”下拉列表设置为“本地冗余”。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>为存储帐户启用地域复制时，会将存储内容复制到辅助数据中心，这样就能够在主要位置发生重大灾难时将故障转移到该位置。地域复制可能会产生额外的成本。对于测试和开发帐户，你通常不希望因为地域复制而付款。有关详细信息，请参阅<bpt id="p1">[</bpt>创建、管理或删除存储帐户<ept id="p1">](/documentation/articles/storage-create-storage-account#replication-options)</ept>。</source>
          <target state="new">为存储帐户启用地域复制时，会将存储内容复制到辅助数据中心，这样就能够在主要位置发生重大灾难时将故障转移到该位置。地域复制可能会产生额外的成本。对于测试和开发帐户，你通常不希望因为地域复制而付款。有关详细信息，请参阅<bpt id="p1">[</bpt>创建、管理或删除存储帐户<ept id="p1">](/documentation/articles/storage-create-storage-account#replication-options)</ept>。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>单击“创建”。</source>
          <target state="new">单击“创建”。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>新的存储帐户</source>
          <target state="new">新的存储帐户</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="download"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>下载应用程序</source>
          <target state="new"><ph id="ph1">&lt;a id="download"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>下载应用程序</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>下载并解压缩<bpt id="p1">[</bpt>已完成的解决方案<ept id="p1">](http://code.msdn.microsoft.com/Simple-Azure-Website-with-b4391eeb)</ept>。</source>
          <target state="new">下载并解压缩<bpt id="p1">[</bpt>已完成的解决方案<ept id="p1">](http://code.msdn.microsoft.com/Simple-Azure-Website-with-b4391eeb)</ept>。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>启动 Visual Studio。</source>
          <target state="new">启动 Visual Studio。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>从“文件”菜单中，选择“打开”&gt;“项目/解决方案”，导航到下载解决方案的位置，然后打开解决方案文件。</source>
          <target state="new">从“文件”菜单中，选择“打开”&gt;“项目/解决方案”，导航到下载解决方案的位置，然后打开解决方案文件。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>按 CTRL+SHIFT+B 生成解决方案。</source>
          <target state="new">按 CTRL+SHIFT+B 生成解决方案。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>默认情况下，Visual Studio 会自动还原 NuGet 包的内容，它未包括在 <bpt id="p1">*</bpt>.zip<ept id="p1">*</ept> 文件中。如果包未还原，请转到“管理解决方案的 NuGet 程序包”对话框并单击右上角的“还原”按钮手动进行安装。</source>
          <target state="new">默认情况下，Visual Studio 会自动还原 NuGet 包的内容，它未包括在 <bpt id="p1">*</bpt>.zip<ept id="p1">*</ept> 文件中。如果包未还原，请转到“管理解决方案的 NuGet 程序包”对话框并单击右上角的“还原”按钮手动进行安装。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，请确保选择“ContosoAdsWeb”作为启动项目。</source>
          <target state="new">在“解决方案资源管理器”中，请确保选择“ContosoAdsWeb”作为启动项目。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="configure-storage"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph><ph id="ph3">&lt;a name="configure-the-web-app-to-use-your-azure-sql-database-and-storage-account"&gt;</ph><ph id="ph4">&lt;/a&gt;</ph>将应用程序配置为使用你的存储帐户</source>
          <target state="new"><ph id="ph1">&lt;a name="configure-storage"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph><ph id="ph3">&lt;a name="configure-the-web-app-to-use-your-azure-sql-database-and-storage-account"&gt;</ph><ph id="ph4">&lt;/a&gt;</ph>将应用程序配置为使用你的存储帐户</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>打开 ContosoAdsWeb 项目中的应用程序 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 文件。</source>
          <target state="new">打开 ContosoAdsWeb 项目中的应用程序 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>该文件包含一个用于处理 Blob 和队列的 SQL 连接字符串和 Azure 存储连接字符串。</source>
          <target state="new">该文件包含一个用于处理 Blob 和队列的 SQL 连接字符串和 Azure 存储连接字符串。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>SQL 连接字符串指向 <bpt id="p1">[</bpt>SQL Server Express LocalDB<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/hh510202.aspx)</ept> 数据库。</source>
          <target state="new">SQL 连接字符串指向 <bpt id="p1">[</bpt>SQL Server Express LocalDB<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/hh510202.aspx)</ept> 数据库。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>存储连接字符串是一个示例，其中包含存储帐户名称和访问密钥的占位符。你需要将此字符串替换为包含你的存储帐户的名称和密钥的连接字符串。</source>
          <target state="new">存储连接字符串是一个示例，其中包含存储帐户名称和访问密钥的占位符。你需要将此字符串替换为包含你的存储帐户的名称和密钥的连接字符串。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>&amp;lt;connectionStrings&amp;gt;</source>
          <target state="new">&amp;lt;connectionStrings&amp;gt;</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>&amp;lt;add name="ContosoAdsContext" connectionString="Data Source=(localdb)\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;" providerName="System.Data.SqlClient" /&amp;gt;</source>
          <target state="new">&amp;lt;add name="ContosoAdsContext" connectionString="Data Source=(localdb)\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;" providerName="System.Data.SqlClient" /&amp;gt;</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>&amp;lt;add name="AzureWebJobsStorage" connectionString="DefaultEndpointsProtocol=https;AccountName=</source>
          <target state="new">&amp;lt;add name="AzureWebJobsStorage" connectionString="DefaultEndpointsProtocol=https;AccountName=</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>[accountname]</source>
          <target state="new">[accountname]</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>;AccountKey=</source>
          <target state="new">;AccountKey=</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>[accesskey]</source>
          <target state="new">[accesskey]</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>"/&amp;gt;</source>
          <target state="new">"/&amp;gt;</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>&amp;lt;/connectionStrings&amp;gt;</source>
          <target state="new">&amp;lt;/connectionStrings&amp;gt;</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>存储连接字符串命名为 AzureWebJobsStorage，因为这是 WebJobs SDK 默认情况下使用的名称。此处之所以使用相同的名称，是因为你只需在 Azure 环境中设置一个连接字符串值。</source>
          <target state="new">存储连接字符串命名为 AzureWebJobsStorage，因为这是 WebJobs SDK 默认情况下使用的名称。此处之所以使用相同的名称，是因为你只需在 Azure 环境中设置一个连接字符串值。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>在“服务器资源管理器”中，右键单击存储帐户下的“存储”节点，然后单击“属性”。</source>
          <target state="new">在“服务器资源管理器”中，右键单击存储帐户下的“存储”节点，然后单击“属性”。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>单击存储帐户属性</source>
          <target state="new">单击存储帐户属性</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>在“属性”窗口中，单击“存储帐户密钥”，然后单击省略号。</source>
          <target state="new">在“属性”窗口中，单击“存储帐户密钥”，然后单击省略号。</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>新的存储帐户</source>
          <target state="new">新的存储帐户</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>复制“连接字符串”。</source>
          <target state="new">复制“连接字符串”。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>“存储帐户密钥”对话框</source>
          <target state="new">“存储帐户密钥”对话框</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 文件中的存储连接字符串替换为你刚刚复制的连接字符串。在粘贴之前，请确保选择引号括住的所有内容，但不包括引号本身。</source>
          <target state="new">将 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 文件中的存储连接字符串替换为你刚刚复制的连接字符串。在粘贴之前，请确保选择引号括住的所有内容，但不包括引号本身。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>打开 ContosoAdsWebJob 项目中的 <bpt id="p1">*</bpt>App.config<ept id="p1">*</ept> 文件。</source>
          <target state="new">打开 ContosoAdsWebJob 项目中的 <bpt id="p1">*</bpt>App.config<ept id="p1">*</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>此文件包含两个存储连接字符串，一个用于应用程序数据，另一个用于日志记录。可以对应用程序数据和日志记录使用单独的存储帐户，并且可以<bpt id="p1">[</bpt>对数据使用多个存储帐户<ept id="p1">](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)</ept>。对于本教程，你将使用单个存储帐户。连接字符串包含存储帐户密钥的占位符。</source>
          <target state="new">此文件包含两个存储连接字符串，一个用于应用程序数据，另一个用于日志记录。可以对应用程序数据和日志记录使用单独的存储帐户，并且可以<bpt id="p1">[</bpt>对数据使用多个存储帐户<ept id="p1">](https://github.com/Azure/azure-webjobs-sdk/blob/master/test/Microsoft.Azure.WebJobs.Host.EndToEndTests/MultipleStorageAccountsEndToEndTests.cs)</ept>。对于本教程，你将使用单个存储帐户。连接字符串包含存储帐户密钥的占位符。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>&amp;lt;configuration&amp;gt;</source>
          <target state="new">&amp;lt;configuration&amp;gt;</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>&amp;lt;connectionStrings&amp;gt;</source>
          <target state="new">&amp;lt;connectionStrings&amp;gt;</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>&amp;lt;add name="AzureWebJobsDashboard" connectionString="DefaultEndpointsProtocol=https;AccountName=</source>
          <target state="new">&amp;lt;add name="AzureWebJobsDashboard" connectionString="DefaultEndpointsProtocol=https;AccountName=</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>[accountname]</source>
          <target state="new">[accountname]</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>;AccountKey=</source>
          <target state="new">;AccountKey=</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>[accesskey]</source>
          <target state="new">[accesskey]</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>"/&amp;gt;</source>
          <target state="new">"/&amp;gt;</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>&amp;lt;add name="AzureWebJobsStorage" connectionString="DefaultEndpointsProtocol=https;AccountName=</source>
          <target state="new">&amp;lt;add name="AzureWebJobsStorage" connectionString="DefaultEndpointsProtocol=https;AccountName=</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>[accountname]</source>
          <target state="new">[accountname]</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>;AccountKey=</source>
          <target state="new">;AccountKey=</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>[accesskey]</source>
          <target state="new">[accesskey]</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>"/&amp;gt;</source>
          <target state="new">"/&amp;gt;</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>&amp;lt;add name="ContosoAdsContext" connectionString="Data Source=(localdb)\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;"/&amp;gt;</source>
          <target state="new">&amp;lt;add name="ContosoAdsContext" connectionString="Data Source=(localdb)\\v11.0; Initial Catalog=ContosoAds; Integrated Security=True; MultipleActiveResultSets=True;"/&amp;gt;</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>&amp;lt;/connectionStrings&amp;gt;</source>
          <target state="new">&amp;lt;/connectionStrings&amp;gt;</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>&amp;lt;startup&amp;gt;</source>
          <target state="new">&amp;lt;startup&amp;gt;</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>&amp;lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" /&amp;gt;</source>
          <target state="new">&amp;lt;supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" /&amp;gt;</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>&amp;lt;/startup&amp;gt;</source>
          <target state="new">&amp;lt;/startup&amp;gt;</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>&amp;lt;/configuration&amp;gt;</source>
          <target state="new">&amp;lt;/configuration&amp;gt;</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>默认情况下，WebJobs SDK 将查找名为 AzureWebJobsStorage 和 AzureWebJobsDashboard 的连接字符串。作为替代方法，你可以根据需要<bpt id="p1">[</bpt>存储该连接字符串，并显式将它传递给 <ph id="ph1">`JobHost`</ph> 对象<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#config)</ept>。</source>
          <target state="new">默认情况下，WebJobs SDK 将查找名为 AzureWebJobsStorage 和 AzureWebJobsDashboard 的连接字符串。作为替代方法，你可以根据需要<bpt id="p1">[</bpt>存储该连接字符串，并显式将它传递给 <ph id="ph1">`JobHost`</ph> 对象<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#config)</ept>。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>将两个存储连接字符串替换为先前复制的连接字符串。</source>
          <target state="new">将两个存储连接字符串替换为先前复制的连接字符串。</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>保存所做更改。</source>
          <target state="new">保存所做更改。</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="run"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在本地运行应用程序</source>
          <target state="new"><ph id="ph1">&lt;a id="run"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在本地运行应用程序</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>若要启动应用程序的 Web 前端，请按 CTRL+F5。</source>
          <target state="new">若要启动应用程序的 Web 前端，请按 CTRL+F5。</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>默认浏览器将打开主页。（Web 项目将会运行，因为你已将它设为启动项目。）</source>
          <target state="new">默认浏览器将打开主页。（Web 项目将会运行，因为你已将它设为启动项目。）</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Contoso 广告主页</source>
          <target state="new">Contoso 广告主页</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>若要启动应用程序的 Web 作业后端，请在“解决方案资源管理器”中右键单击 ContosoAdsWebJob 项目，然后单击“调试”&gt;“启动新实例”。</source>
          <target state="new">若要启动应用程序的 Web 作业后端，请在“解决方案资源管理器”中右键单击 ContosoAdsWebJob 项目，然后单击“调试”&gt;“启动新实例”。</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>此时将打开一个控制台应用程序窗口，其中显示了指示 WebJobs SDK JobHost 对象已开始运行的日志记录消息。</source>
          <target state="new">此时将打开一个控制台应用程序窗口，其中显示了指示 WebJobs SDK JobHost 对象已开始运行的日志记录消息。</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>显示后端正在运行的控制台应用程序窗口</source>
          <target state="new">显示后端正在运行的控制台应用程序窗口</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>在浏览器中，单击“创建一个广告”。</source>
          <target state="new">在浏览器中，单击“创建一个广告”。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>输入一些测试数据并选择一个要上载的图像，然后单击“创建”。</source>
          <target state="new">输入一些测试数据并选择一个要上载的图像，然后单击“创建”。</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>创建页面</source>
          <target state="new">创建页面</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>该应用程序转到索引页，但它不显示新广告的缩略图，因为该处理尚未发生。</source>
          <target state="new">该应用程序转到索引页，但它不显示新广告的缩略图，因为该处理尚未发生。</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>在经过片刻等待后，控制台应用程序窗口中的日志记录消息将显示已收到并已处理某个队列消息。</source>
          <target state="new">在经过片刻等待后，控制台应用程序窗口中的日志记录消息将显示已收到并已处理某个队列消息。</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>显示队列消息已处理的控制台应用程序窗口</source>
          <target state="new">显示队列消息已处理的控制台应用程序窗口</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>在查看控制台应用程序窗口中的日志记录消息后，请刷新“索引”页以查看缩略图。</source>
          <target state="new">在查看控制台应用程序窗口中的日志记录消息后，请刷新“索引”页以查看缩略图。</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>索引页面</source>
          <target state="new">索引页面</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>单击广告的“详细信息”查看实际尺寸的图像。</source>
          <target state="new">单击广告的“详细信息”查看实际尺寸的图像。</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>详细信息页</source>
          <target state="new">详细信息页</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>你已在本地计算机上运行应用程序，并且该应用程序正在使用计算机上的 SQL Server 数据库，但在处理云中的队列和 Blob。在下一部分，你将使用云数据库以及云 Blob 和队列在云中运行该应用程序。</source>
          <target state="new">你已在本地计算机上运行应用程序，并且该应用程序正在使用计算机上的 SQL Server 数据库，但在处理云中的队列和 Blob。在下一部分，你将使用云数据库以及云 Blob 和队列在云中运行该应用程序。</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="runincloud"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在云中运行应用程序</source>
          <target state="new"><ph id="ph1">&lt;a id="runincloud"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>在云中运行应用程序</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>你将执行以下步骤，以便在云中运行应用程序：</source>
          <target state="new">你将执行以下步骤，以便在云中运行应用程序：</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>部署到 Web 应用。Visual Studio 将自动在 Azure Web 应用中创建一个新的 Web 应用和一个 SQL 数据库实例。</source>
          <target state="new">部署到 Web 应用。Visual Studio 将自动在 Azure Web 应用中创建一个新的 Web 应用和一个 SQL 数据库实例。</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>将 Web 应用配置为使用你的 Azure SQL 数据库和存储帐户。</source>
          <target state="new">将 Web 应用配置为使用你的 Azure SQL 数据库和存储帐户。</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>在云中运行时创建一些广告后，请查看 WebJobs SDK 仪表板，以了解该仪表板提供的丰富功能。</source>
          <target state="new">在云中运行时创建一些广告后，请查看 WebJobs SDK 仪表板，以了解该仪表板提供的丰富功能。</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>部署到 Web 应用</source>
          <target state="new">部署到 Web 应用</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>关闭浏览器和控制台应用程序窗口。</source>
          <target state="new">关闭浏览器和控制台应用程序窗口。</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>转到 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](http://manage.windowsazure.cn/)</ept>，然后单击具有数据库的 Web 应用。</source>
          <target state="new">转到 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](http://manage.windowsazure.cn/)</ept>，然后单击具有数据库的 Web 应用。</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>转到 Web 应用的<bpt id="p1">**</bpt>仪表板<ept id="p1">**</ept>，下载发布配置文件</source>
          <target state="new">转到 Web 应用的<bpt id="p1">**</bpt>仪表板<ept id="p1">**</ept>，下载发布配置文件</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击 ContosoAdsWeb 项目，然后单击“发布”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击 ContosoAdsWeb 项目，然后单击“发布”。</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>在“发布 Web”向导的“配置文件”步骤中，单击“导入”。选择在上一步中下载的配置文件。</source>
          <target state="new">在“发布 Web”向导的“配置文件”步骤中，单击“导入”。选择在上一步中下载的配置文件。</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>在“发布 Web”向导的“连接”步骤中，单击“下一步”。</source>
          <target state="new">在“发布 Web”向导的“连接”步骤中，单击“下一步”。</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>连接步骤</source>
          <target state="new">连接步骤</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>在“设置”步骤中，清除“在运行时使用此连接字符串”复选框，然后单击“下一步”。</source>
          <target state="new">在“设置”步骤中，清除“在运行时使用此连接字符串”复选框，然后单击“下一步”。</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>设置步骤</source>
          <target state="new">设置步骤</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>你不需要使用发布对话框来设置 SQL 连接字符串，因为你稍后将在 Azure 环境中设置该值。</source>
          <target state="new">你不需要使用发布对话框来设置 SQL 连接字符串，因为你稍后将在 Azure 环境中设置该值。</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>你可以忽略此页上的警告。</source>
          <target state="new">你可以忽略此页上的警告。</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>通常，在 Azure 中运行时使用的存储帐户不同于在本地运行时使用的存储帐户，但对于本教程，你将在两个环境中使用相同的存储帐户。因此，不需要转换 AzureWebJobsStorage 连接字符串。即使你确实想要在云中使用不同的存储帐户，也无需转换连接字符串，因为应用程序在 Azure 中运行时将使用 Azure 环境设置。稍后你将在教程中看到这种情况。</source>
          <target state="new">通常，在 Azure 中运行时使用的存储帐户不同于在本地运行时使用的存储帐户，但对于本教程，你将在两个环境中使用相同的存储帐户。因此，不需要转换 AzureWebJobsStorage 连接字符串。即使你确实想要在云中使用不同的存储帐户，也无需转换连接字符串，因为应用程序在 Azure 中运行时将使用 Azure 环境设置。稍后你将在教程中看到这种情况。</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>对于本教程，你不需要用于 ContosoAdsContext 数据库的数据模型进行更改，因此，无需使用 Entity Framework Code First 迁移进行部署。当应用程序首次尝试访问 SQL 数据时，Code First 将自动创建一个新的数据库。</source>
          <target state="new">对于本教程，你不需要用于 ContosoAdsContext 数据库的数据模型进行更改，因此，无需使用 Entity Framework Code First 迁移进行部署。当应用程序首次尝试访问 SQL 数据时，Code First 将自动创建一个新的数据库。</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>对于本教程，“文件发布选项”下的选项默认值是合适的。</source>
          <target state="new">对于本教程，“文件发布选项”下的选项默认值是合适的。</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>在“预览”步骤中，单击“开始预览”。</source>
          <target state="new">在“预览”步骤中，单击“开始预览”。</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>单击“开始预览”</source>
          <target state="new">单击“开始预览”</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>你可以忽略有关未发布数据库的警告。Entity Framework Code First 将创建数据库；不需要发布该数据库。</source>
          <target state="new">你可以忽略有关未发布数据库的警告。Entity Framework Code First 将创建数据库；不需要发布该数据库。</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>预览窗口显示 Web 作业项目中的二进制文件和配置文件将复制到 Web 应用的 <bpt id="p1">*</bpt>app\_data\\jobs\\continuous<ept id="p1">*</ept> 文件夹。</source>
          <target state="new">预览窗口显示 Web 作业项目中的二进制文件和配置文件将复制到 Web 应用的 <bpt id="p1">*</bpt>app\_data\\jobs\\continuous<ept id="p1">*</ept> 文件夹。</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>预览窗口中的 Web 作业文件</source>
          <target state="new">预览窗口中的 Web 作业文件</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>单击“发布”。</source>
          <target state="new">单击“发布”。</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Visual Studio 将部署该应用程序，并在浏览器中打开主页 URL。</source>
          <target state="new">Visual Studio 将部署该应用程序，并在浏览器中打开主页 URL。</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>只有在下一部分中在 Azure 环境中设置了连接字符串后，你才可以使用该 Web 应用。你将会看到错误页或主页，具体取决于你在前面选择的 Web 应用和数据库创建选项。</source>
          <target state="new">只有在下一部分中在 Azure 环境中设置了连接字符串后，你才可以使用该 Web 应用。你将会看到错误页或主页，具体取决于你在前面选择的 Web 应用和数据库创建选项。</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>将 Web 应用配置为使用你的 Azure SQL 数据库和存储帐户。</source>
          <target state="new">将 Web 应用配置为使用你的 Azure SQL 数据库和存储帐户。</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>最佳安全做法是<bpt id="p1">[</bpt>避免将敏感信息（如连接字符串）放置在源代码存储库中存储的文件内<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control#secrets)</ept>。Azure 提供了一种方法来做到这一点：你可以在 Azure 环境中设置连接字符串和其他设置值，在 Azure 中运行应用程序时，ASP.NET 配置 API 将自动提取这些值。你可以使用<bpt id="p2">**</bpt>服务器资源管理器<ept id="p2">**</ept>、Azure 管理门户、Windows PowerShell 或跨平台命令行界面在 Azure 中设置这些值。有关详细信息，请参阅<bpt id="p3">[</bpt>应用程序字符串和连接字符串的工作原理<ept id="p3">](http://azure.microsoft.com/zh-cn/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/)</ept>。</source>
          <target state="new">最佳安全做法是<bpt id="p1">[</bpt>避免将敏感信息（如连接字符串）放置在源代码存储库中存储的文件内<ept id="p1">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/source-control#secrets)</ept>。Azure 提供了一种方法来做到这一点：你可以在 Azure 环境中设置连接字符串和其他设置值，在 Azure 中运行应用程序时，ASP.NET 配置 API 将自动提取这些值。你可以使用<bpt id="p2">**</bpt>服务器资源管理器<ept id="p2">**</ept>、Azure 管理门户、Windows PowerShell 或跨平台命令行界面在 Azure 中设置这些值。有关详细信息，请参阅<bpt id="p3">[</bpt>应用程序字符串和连接字符串的工作原理<ept id="p3">](http://azure.microsoft.com/zh-cn/blog/2013/07/17/windows-azure-web-sites-how-application-strings-and-connection-strings-work/)</ept>。</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>在本部分中，你将使用<bpt id="p1">**</bpt>服务器资源管理器<ept id="p1">**</ept>在 Azure 中设置连接字符串值。</source>
          <target state="new">在本部分中，你将使用<bpt id="p1">**</bpt>服务器资源管理器<ept id="p1">**</ept>在 Azure 中设置连接字符串值。</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>在“服务器资源管理器”中，右键单击“Azure”&gt;“{你的资源组}”下的 Web 应用，然后单击“查看设置”。</source>
          <target state="new">在“服务器资源管理器”中，右键单击“Azure”&gt;“{你的资源组}”下的 Web 应用，然后单击“查看设置”。</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>“Azure Web 应用”窗口将在“配置”选项卡上打开。</source>
          <target state="new">“Azure Web 应用”窗口将在“配置”选项卡上打开。</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>将 DefaultConnection 连接字符串的名称更改为 ContosoAdsContext。</source>
          <target state="new">将 DefaultConnection 连接字符串的名称更改为 ContosoAdsContext。</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>当你使用关联的数据库创建 Web 应用时，Azure 已自动创建此连接字符串，因此它已具有正确的连接字符串值。你只需将名称更改为代码将要查找的值。</source>
          <target state="new">当你使用关联的数据库创建 Web 应用时，Azure 已自动创建此连接字符串，因此它已具有正确的连接字符串值。你只需将名称更改为代码将要查找的值。</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>添加名为 AzureWebJobsStorage 和 AzureWebJobsDashboard 的两个新连接字符串。将类型设置为“自定义”，并将连接字符串值设置为你前面针对 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 和 <bpt id="p2">*</bpt>App.config<ept id="p2">*</ept> 文件使用的相同值。（确保包括整个连接字符串而不仅仅是访问密钥，并且不要包括引号。）</source>
          <target state="new">添加名为 AzureWebJobsStorage 和 AzureWebJobsDashboard 的两个新连接字符串。将类型设置为“自定义”，并将连接字符串值设置为你前面针对 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 和 <bpt id="p2">*</bpt>App.config<ept id="p2">*</ept> 文件使用的相同值。（确保包括整个连接字符串而不仅仅是访问密钥，并且不要包括引号。）</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>WebJobs SDK 将使用这些连接字符串，一个用于应用程序数据，另一个用于日志记录。如前面所看到的，用于应用程序数据的连接字符串也由 Web 前端代码使用。</source>
          <target state="new">WebJobs SDK 将使用这些连接字符串，一个用于应用程序数据，另一个用于日志记录。如前面所看到的，用于应用程序数据的连接字符串也由 Web 前端代码使用。</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>单击“保存”。</source>
          <target state="new">单击“保存”。</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Azure 管理门户中的连接字符串</source>
          <target state="new">Azure 管理门户中的连接字符串</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>在“服务器资源管理器”中右键单击该 Web 应用，然后单击“停止”。</source>
          <target state="new">在“服务器资源管理器”中右键单击该 Web 应用，然后单击“停止”。</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>在 Web 应用停止后，再次右键单击该 Web 应用，然后单击“启动”。</source>
          <target state="new">在 Web 应用停止后，再次右键单击该 Web 应用，然后单击“启动”。</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Web 作业在你发布时会自动启动，但在你进行配置更改时会停止。若要重新启动它，可以重新启动 Web 应用或者在 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](https://manage.windowsazure.cn/)</ept>中重新启动 Web 作业。一般而言，建议你在配置更改后重新启动 Web 应用。</source>
          <target state="new">Web 作业在你发布时会自动启动，但在你进行配置更改时会停止。若要重新启动它，可以重新启动 Web 应用或者在 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">](https://manage.windowsazure.cn/)</ept>中重新启动 Web 作业。一般而言，建议你在配置更改后重新启动 Web 应用。</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>刷新地址栏中包含 Web 应用 URL 的浏览器窗口。</source>
          <target state="new">刷新地址栏中包含 Web 应用 URL 的浏览器窗口。</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>此时将显示主页。</source>
          <target state="new">此时将显示主页。</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>就像在本地运行应用程序时一样创建一个广告。</source>
          <target state="new">就像在本地运行应用程序时一样创建一个广告。</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>“索引”页一开始不会显示缩略图。</source>
          <target state="new">“索引”页一开始不会显示缩略图。</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>几秒钟后请刷新页面，随后将会显示缩略图。</source>
          <target state="new">几秒钟后请刷新页面，随后将会显示缩略图。</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>如果未显示缩略图，你可能需要等待一分钟左右，让 Web 作业重新启动。如果经过一段时间后刷新页面时仍未显示缩略图，原因可能是 Web 作业未自动启动。在此情况下，转到 Web 应用的“<bpt id="p1">[</bpt>管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>”页中的“Web 作业”选项卡，然后单击“启动”。</source>
          <target state="new">如果未显示缩略图，你可能需要等待一分钟左右，让 Web 作业重新启动。如果经过一段时间后刷新页面时仍未显示缩略图，原因可能是 Web 作业未自动启动。在此情况下，转到 Web 应用的“<bpt id="p1">[</bpt>管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>”页中的“Web 作业”选项卡，然后单击“启动”。</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="view-the-webjobs-sdk-dashboard"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> “Web 作业”选项卡</source>
          <target state="new"><ph id="ph1">&lt;a name="view-the-webjobs-sdk-dashboard"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> “Web 作业”选项卡</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>在<bpt id="p1">[</bpt>管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>中，选择你的 Web 应用。</source>
          <target state="new">在<bpt id="p1">[</bpt>管理门户<ept id="p1">](https://manage.windowsazure.cn)</ept>中，选择你的 Web 应用。</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>单击“Web 作业”选项卡。</source>
          <target state="new">单击“Web 作业”选项卡。</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>单击 Web 作业“日志”列中的 URL。</source>
          <target state="new">单击 Web 作业“日志”列中的 URL。</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>“Web 作业”选项卡</source>
          <target state="new">“Web 作业”选项卡</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>WebJobs SDK 仪表板中将打开一个新的浏览器选项卡。仪表板显示 Web 作业正在运行，并显示 WebJobs SDK 触发的代码中的函数列表。</source>
          <target state="new">WebJobs SDK 仪表板中将打开一个新的浏览器选项卡。仪表板显示 Web 作业正在运行，并显示 WebJobs SDK 触发的代码中的函数列表。</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>单击某个函数可以查看有关其执行的详细信息。</source>
          <target state="new">单击某个函数可以查看有关其执行的详细信息。</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>WebJobs SDK 仪表板</source>
          <target state="new">WebJobs SDK 仪表板</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>WebJobs SDK 仪表板</source>
          <target state="new">WebJobs SDK 仪表板</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>单击此页上的“重放函数”会导致 WebJobs SDK 框架再次调用该函数，使你可以首先更改传递给该函数的数据。</source>
          <target state="new">单击此页上的“重放函数”会导致 WebJobs SDK 框架再次调用该函数，使你可以首先更改传递给该函数的数据。</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 完成测试后，请删除 Web 应用和 SQL 数据库实例。 Web 应用是免费的，但 SQL 数据库实例和存储帐户是计费的（由于较小，因此费用很低）。此外，如果保持 Web 应用运行，则找到你的 URL 的任何人都可以创建和查看广告。在管理门户中，转到 Web 应用的“仪表板”选项卡，然后单击页面底部的“删除”按钮。然后，你可以选中用于同时删除 SQL 数据库实例的复选框。如果你只是想要暂时防止其他人访问 Web 应用，请改为单击“停止”。在这种情况下，SQL 数据库和存储帐户会继续计费。当你不再需要 SQL 数据库和存储帐户时，可以遵循类似的过程将其删除。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 完成测试后，请删除 Web 应用和 SQL 数据库实例。 Web 应用是免费的，但 SQL 数据库实例和存储帐户是计费的（由于较小，因此费用很低）。此外，如果保持 Web 应用运行，则找到你的 URL 的任何人都可以创建和查看广告。在管理门户中，转到 Web 应用的“仪表板”选项卡，然后单击页面底部的“删除”按钮。然后，你可以选中用于同时删除 SQL 数据库实例的复选框。如果你只是想要暂时防止其他人访问 Web 应用，请改为单击“停止”。在这种情况下，SQL 数据库和存储帐户会继续计费。当你不再需要 SQL 数据库和存储帐户时，可以遵循类似的过程将其删除。</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="create"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>从头开始创建应用程序</source>
          <target state="new"><ph id="ph1">&lt;a id="create"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>从头开始创建应用程序</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>在本节中，你将执行以下任务：</source>
          <target state="new">在本节中，你将执行以下任务：</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>创建一个包含 Web 项目的 Visual Studio 解决方案。</source>
          <target state="new">创建一个包含 Web 项目的 Visual Studio 解决方案。</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>为前端和后端之间共享的数据访问层添加一个类库项目。</source>
          <target state="new">为前端和后端之间共享的数据访问层添加一个类库项目。</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>在启用 Web 作业部署的情况下，为后端添加一个控制台应用程序项目。</source>
          <target state="new">在启用 Web 作业部署的情况下，为后端添加一个控制台应用程序项目。</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>添加 NuGet 包。</source>
          <target state="new">添加 NuGet 包。</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>设置项目引用。</source>
          <target state="new">设置项目引用。</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>从你在学习本教程前面部分时使用的已下载应用程序中复制应用程序代码和配置文件。</source>
          <target state="new">从你在学习本教程前面部分时使用的已下载应用程序中复制应用程序代码和配置文件。</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>查看用于处理 Azure Blob 和队列及 WebJobs SDK 的代码部分。</source>
          <target state="new">查看用于处理 Azure Blob 和队列及 WebJobs SDK 的代码部分。</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>创建一个包含 Web 项目的 Visual Studio 解决方案和类库项目</source>
          <target state="new">创建一个包含 Web 项目的 Visual Studio 解决方案和类库项目</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 的“文件”菜单中选择“新建”&gt;“项目”。</source>
          <target state="new">在 Visual Studio 的“文件”菜单中选择“新建”&gt;“项目”。</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>在“新建项目”对话框中，选择“Visual C#”&gt;“Web”&gt;“ASP.NET  Web 应用”。</source>
          <target state="new">在“新建项目”对话框中，选择“Visual C#”&gt;“Web”&gt;“ASP.NET  Web 应用”。</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>将项目命名为 ContosoAdsWeb，将解决方案命名为 ContosoAdsWebJobsSDK（如果你要将解决方案放置在与下载的解决方案相同的文件夹中，请更改此解决方案名称），然后单击“确定”。</source>
          <target state="new">将项目命名为 ContosoAdsWeb，将解决方案命名为 ContosoAdsWebJobsSDK（如果你要将解决方案放置在与下载的解决方案相同的文件夹中，请更改此解决方案名称），然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>新建项目</source>
          <target state="new">新建项目</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>在“新建 ASP.NET 项目”对话框中选择 MVC 模板，然后清除“Azure”下的“在云中托管”复选框。</source>
          <target state="new">在“新建 ASP.NET 项目”对话框中选择 MVC 模板，然后清除“Azure”下的“在云中托管”复选框。</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>选中“在云中托管”可让 Visual Studio 自动创建新的 Azure Web 应用和 SQL 数据库。由于前面已创建这些 Web 应用和数据库，因此现在创建项目时，你不需要执行此操作。如果要新建，请选中该复选框。然后，请像前面部署应用程序时一样配置新 Web 应用和 SQL 数据库。</source>
          <target state="new">选中“在云中托管”可让 Visual Studio 自动创建新的 Azure Web 应用和 SQL 数据库。由于前面已创建这些 Web 应用和数据库，因此现在创建项目时，你不需要执行此操作。如果要新建，请选中该复选框。然后，请像前面部署应用程序时一样配置新 Web 应用和 SQL 数据库。</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>单击“更改身份验证”。</source>
          <target state="new">单击“更改身份验证”。</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>更改身份验证</source>
          <target state="new">更改身份验证</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>在“更改身份验证”对话框中，选择“无身份验证”，然后单击“确定”。</source>
          <target state="new">在“更改身份验证”对话框中，选择“无身份验证”，然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>无身份验证</source>
          <target state="new">无身份验证</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>在“新建 ASP.NET 项目”对话框中，单击“确定”。</source>
          <target state="new">在“新建 ASP.NET 项目”对话框中，单击“确定”。</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Visual Studio 将创建解决方案和 Web 项目。</source>
          <target state="new">Visual Studio 将创建解决方案和 Web 项目。</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中，右键单击该解决方案（不是项目），然后选择“添加”&gt;“新建项目”。</source>
          <target state="new">在“解决方案资源管理器”中，右键单击该解决方案（不是项目），然后选择“添加”&gt;“新建项目”。</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>在“添加新项目”对话框中，选择“Visual C#”&gt;“Windows 桌面”&gt;“类库”模板。</source>
          <target state="new">在“添加新项目”对话框中，选择“Visual C#”&gt;“Windows 桌面”&gt;“类库”模板。</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>将项目命名为 <bpt id="p1">*</bpt>ContosoAdsCommon<ept id="p1">*</ept>，然后单击“确定”。</source>
          <target state="new">将项目命名为 <bpt id="p1">*</bpt>ContosoAdsCommon<ept id="p1">*</ept>，然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>此项目将包含前端和后端将要使用的实体框架上下文与数据模型。或者，你也可以在 Web 项目中定义 EF 相关的类，并从 Web 作业项目引用该项目。但是，这样会使 Web 作业项目引用它不需要的 Web 程序集。</source>
          <target state="new">此项目将包含前端和后端将要使用的实体框架上下文与数据模型。或者，你也可以在 Web 项目中定义 EF 相关的类，并从 Web 作业项目引用该项目。但是，这样会使 Web 作业项目引用它不需要的 Web 程序集。</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>在启用 Web 作业部署的情况下添加控制台应用程序项目</source>
          <target state="new">在启用 Web 作业部署的情况下添加控制台应用程序项目</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>右键单击 Web 项目（不是解决方案或类库项目），然后单击“添加”&gt;“新建 Azure Web 作业项目”。</source>
          <target state="new">右键单击 Web 项目（不是解决方案或类库项目），然后单击“添加”&gt;“新建 Azure Web 作业项目”。</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>“新建 Azure Web 作业项目”菜单选项</source>
          <target state="new">“新建 Azure Web 作业项目”菜单选项</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>在“添加 Azure Web 作业”对话框中，输入 ContosoAdsWebJob 作为“项目名称”和“Web 作业名称”。将“Web 作业运行模式”保留设置为“连续运行”。</source>
          <target state="new">在“添加 Azure Web 作业”对话框中，输入 ContosoAdsWebJob 作为“项目名称”和“Web 作业名称”。将“Web 作业运行模式”保留设置为“连续运行”。</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>单击<bpt id="p1">**</bpt>“确定”<ept id="p1">**</ept>。</source>
          <target state="new">单击<bpt id="p1">**</bpt>“确定”<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Visual Studio 将创建一个控制台应用程序，每当你部署 Web 项目时，该应用程序就会部署为 Web 作业。为此，它将在创建项目后执行以下任务：</source>
          <target state="new">Visual Studio 将创建一个控制台应用程序，每当你部署 Web 项目时，该应用程序就会部署为 Web 作业。为此，它将在创建项目后执行以下任务：</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>在 Web 作业项目的 Properties 文件夹中添加一个 <bpt id="p1">*</bpt>webjob-publish-settings.json<ept id="p1">*</ept> 文件。</source>
          <target state="new">在 Web 作业项目的 Properties 文件夹中添加一个 <bpt id="p1">*</bpt>webjob-publish-settings.json<ept id="p1">*</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>在 Web 项目的 Properties 文件夹中添加一个 <bpt id="p1">*</bpt>webjobs-list.json<ept id="p1">*</ept> 文件。</source>
          <target state="new">在 Web 项目的 Properties 文件夹中添加一个 <bpt id="p1">*</bpt>webjobs-list.json<ept id="p1">*</ept> 文件。</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>在 Web 作业项目中安装 Microsoft.Web.WebJobs.Publish NuGet 包。</source>
          <target state="new">在 Web 作业项目中安装 Microsoft.Web.WebJobs.Publish NuGet 包。</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>有关这些更改的详细信息，请参阅<bpt id="p1">[</bpt>如何使用 Visual Studio 部署 Web 作业<ept id="p1">](/documentation/articles/websites-dotnet-deploy-webjobs)</ept>。</source>
          <target state="new">有关这些更改的详细信息，请参阅<bpt id="p1">[</bpt>如何使用 Visual Studio 部署 Web 作业<ept id="p1">](/documentation/articles/websites-dotnet-deploy-webjobs)</ept>。</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>添加 NuGet 包</source>
          <target state="new">添加 NuGet 包</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Web 作业的 new-project 模板会自动安装 WebJobs SDK NuGet 包 <bpt id="p1">[</bpt>Microsoft.Azure.WebJobs<ept id="p1">](http://www.nuget.org/packages/Microsoft.Azure.WebJobs)</ept> 及其依赖项。</source>
          <target state="new">Web 作业的 new-project 模板会自动安装 WebJobs SDK NuGet 包 <bpt id="p1">[</bpt>Microsoft.Azure.WebJobs<ept id="p1">](http://www.nuget.org/packages/Microsoft.Azure.WebJobs)</ept> 及其依赖项。</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>在 Web 作业项目中自动安装的 WebJobs SDK 依赖项之一是 Azure 存储客户端库 (SCL)。但是，若要处理 Blob 和队列，你需要将此依赖项添加到 Web 项目。</source>
          <target state="new">在 Web 作业项目中自动安装的 WebJobs SDK 依赖项之一是 Azure 存储客户端库 (SCL)。但是，若要处理 Blob 和队列，你需要将此依赖项添加到 Web 项目。</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>打开解决方案的“管理 NuGet 包”对话框。</source>
          <target state="new">打开解决方案的“管理 NuGet 包”对话框。</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>在左窗格中，选择“已安装的包”。</source>
          <target state="new">在左窗格中，选择“已安装的包”。</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>找到 <bpt id="p1">*</bpt>Azure 存储空间<ept id="p1">*</ept> 包，然后单击“管理”。</source>
          <target state="new">找到 <bpt id="p1">*</bpt>Azure 存储空间<ept id="p1">*</ept> 包，然后单击“管理”。</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>在“选择项目”框中，选中“ContosoAdsWeb”复选框，然后单击“确定”。</source>
          <target state="new">在“选择项目”框中，选中“ContosoAdsWeb”复选框，然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>所有三个项目都使用实体框架来处理 SQL 数据库中的数据。</source>
          <target state="new">所有三个项目都使用实体框架来处理 SQL 数据库中的数据。</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>在左窗格中，选择“联机”。</source>
          <target state="new">在左窗格中，选择“联机”。</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>找到 <bpt id="p1">*</bpt>EntityFramework<ept id="p1">*</ept> NuGet 包，并将其安装在所有三个项目中。</source>
          <target state="new">找到 <bpt id="p1">*</bpt>EntityFramework<ept id="p1">*</ept> NuGet 包，并将其安装在所有三个项目中。</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>设置项目引用</source>
          <target state="new">设置项目引用</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Web 项目和 Web 作业项目都会处理 SQL 数据库，因此两者都需要引用 ContosoAdsCommon 项目。</source>
          <target state="new">Web 项目和 Web 作业项目都会处理 SQL 数据库，因此两者都需要引用 ContosoAdsCommon 项目。</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>在 ContosoAdsWeb 项目中，设置对 ContosoAdsCommon 项目的引用。（右键单击 ContosoAdsWeb 项目，然后单击“添加”&gt;“引用”。在“引用管理器”对话框中，选择“解决方案”&gt;“项目”&gt;“ContosoAdsCommon”，然后单击“确定”。）</source>
          <target state="new">在 ContosoAdsWeb 项目中，设置对 ContosoAdsCommon 项目的引用。（右键单击 ContosoAdsWeb 项目，然后单击“添加”&gt;“引用”。在“引用管理器”对话框中，选择“解决方案”&gt;“项目”&gt;“ContosoAdsCommon”，然后单击“确定”。）</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>在 ContosoAdsWebJob 项目中，设置对 ContosAdsCommon 项目的引用。</source>
          <target state="new">在 ContosoAdsWebJob 项目中，设置对 ContosAdsCommon 项目的引用。</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>WebJob 项目需要通过引用来处理图像和访问连接字符串。</source>
          <target state="new">WebJob 项目需要通过引用来处理图像和访问连接字符串。</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>在 ContosoAdsWebJob 项目中，设置对 <ph id="ph1">`System.Drawing`</ph> 和 <ph id="ph2">`System.Configuration`</ph> 的引用。</source>
          <target state="new">在 ContosoAdsWebJob 项目中，设置对 <ph id="ph1">`System.Drawing`</ph> 和 <ph id="ph2">`System.Configuration`</ph> 的引用。</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>添加代码和配置文件</source>
          <target state="new">添加代码和配置文件</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>本教程未说明如何<bpt id="p1">[</bpt>使用基架创建 MVC 控制器和视图<ept id="p1">](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)</ept>、如何<bpt id="p2">[</bpt>编写适用于 SQL Server 数据库的实体框架代码<ept id="p2">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc)</ept>，或者<bpt id="p3">[</bpt>在 ASP.NET 4.5 中的异步编程基础知识<ept id="p3">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/web-development-best-practices#async)</ept>。因此，余下的所有操作就是将已下载解决方案中的代码和配置文件复制到新解决方案中。在完成该操作后，以下部分将演示并说明代码的关键部分。</source>
          <target state="new">本教程未说明如何<bpt id="p1">[</bpt>使用基架创建 MVC 控制器和视图<ept id="p1">](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started)</ept>、如何<bpt id="p2">[</bpt>编写适用于 SQL Server 数据库的实体框架代码<ept id="p2">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc)</ept>，或者<bpt id="p3">[</bpt>在 ASP.NET 4.5 中的异步编程基础知识<ept id="p3">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/web-development-best-practices#async)</ept>。因此，余下的所有操作就是将已下载解决方案中的代码和配置文件复制到新解决方案中。在完成该操作后，以下部分将演示并说明代码的关键部分。</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>若要将文件添加到某个项目或文件夹，请右键单击该项目或文件夹，然后单击“添加”&gt;“现有项”。选择所需的文件，然后单击“添加”。如果询问你是否想要替换现有文件，请单击“是”。</source>
          <target state="new">若要将文件添加到某个项目或文件夹，请右键单击该项目或文件夹，然后单击“添加”&gt;“现有项”。选择所需的文件，然后单击“添加”。如果询问你是否想要替换现有文件，请单击“是”。</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>在 ContosoAdsCommon 项目中，删除 <bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> 文件，并在其原位置添加已下载项目中的以下文件。</source>
          <target state="new">在 ContosoAdsCommon 项目中，删除 <bpt id="p1">*</bpt>Class1.cs<ept id="p1">*</ept> 文件，并在其原位置添加已下载项目中的以下文件。</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Ad.cs</source>
          <target state="new">Ad.cs</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>ContosoAdscontext.cs</source>
          <target state="new">ContosoAdscontext.cs</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>BlobInformation.cs</source>
          <target state="new">BlobInformation.cs</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>在 ContosoAdsWeb 项目中，从下载的项目添加以下文件。</source>
          <target state="new">在 ContosoAdsWeb 项目中，从下载的项目添加以下文件。</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Web.config</source>
          <target state="new">Web.config</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Global.asax.cs</source>
          <target state="new">Global.asax.cs</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">*</bpt>Controllers<ept id="p1">*</ept> 文件夹中： <bpt id="p2">*</bpt>AdController.cs<ept id="p2">*</ept></source>
          <target state="new">在 <bpt id="p1">*</bpt>Controllers<ept id="p1">*</ept> 文件夹中： <bpt id="p2">*</bpt>AdController.cs<ept id="p2">*</ept></target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">*</bpt>Views/Shared<ept id="p1">*</ept> 文件夹中： <bpt id="p2">*</bpt>\_Layout.cshtml<ept id="p2">*</ept> 文件</source>
          <target state="new">在 <bpt id="p1">*</bpt>Views/Shared<ept id="p1">*</ept> 文件夹中： <bpt id="p2">*</bpt>\_Layout.cshtml<ept id="p2">*</ept> 文件</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">*</bpt>Views/Home<ept id="p1">*</ept> 文件夹中： <bpt id="p2">*</bpt>Index.cshtml<ept id="p2">*</ept></source>
          <target state="new">在 <bpt id="p1">*</bpt>Views/Home<ept id="p1">*</ept> 文件夹中： <bpt id="p2">*</bpt>Index.cshtml<ept id="p2">*</ept></target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">*</bpt>Views/Ad<ept id="p1">*</ept> 文件夹（首先创建该文件夹）中：五个 <bpt id="p2">*</bpt>.cshtml<ept id="p2">*</ept> 文件</source>
          <target state="new">在 <bpt id="p1">*</bpt>Views/Ad<ept id="p1">*</ept> 文件夹（首先创建该文件夹）中：五个 <bpt id="p2">*</bpt>.cshtml<ept id="p2">*</ept> 文件</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>在 ContosoAdsWebJob 项目中，添加已下载项目中的以下文件。</source>
          <target state="new">在 ContosoAdsWebJob 项目中，添加已下载项目中的以下文件。</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>App.config<ept id="p1">*</ept> （将文件类型筛选器更改为“所有文件”）</source>
          <target state="new"><bpt id="p1">*</bpt>App.config<ept id="p1">*</ept> （将文件类型筛选器更改为“所有文件”）</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Program.cs</source>
          <target state="new">Program.cs</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Functions.cs</source>
          <target state="new">Functions.cs</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>现在，你可以根据本教程前面所述生成、运行和部署应用程序。但是，在执行此操作之前，请在部署到的第一个 Web 应用中停止正在运行的 Web 作业。否则，Web 作业将处理本地创建的，或者新 Web 应用运行的应用创建的队列消息，因为所有消息均使用相同的存储帐户。</source>
          <target state="new">现在，你可以根据本教程前面所述生成、运行和部署应用程序。但是，在执行此操作之前，请在部署到的第一个 Web 应用中停止正在运行的 Web 作业。否则，Web 作业将处理本地创建的，或者新 Web 应用运行的应用创建的队列消息，因为所有消息均使用相同的存储帐户。</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="code"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>查看应用程序代码</source>
          <target state="new"><ph id="ph1">&lt;a id="code"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>查看应用程序代码</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>以下部分解释了与处理 WebJobs SDK 和 Azure 存储 Blob 与队列相关的代码。</source>
          <target state="new">以下部分解释了与处理 WebJobs SDK 和 Azure 存储 Blob 与队列相关的代码。</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 对于特定于 WebJobs SDK 的代码，请转到 <bpt id="p1">[</bpt>Program.cs 和 Functions.cs<ept id="p1">](#programcs)</ept> 部分。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 对于特定于 WebJobs SDK 的代码，请转到 <bpt id="p1">[</bpt>Program.cs 和 Functions.cs<ept id="p1">](#programcs)</ept> 部分。</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>ContosoAdsCommon - Ad.cs</source>
          <target state="new">ContosoAdsCommon - Ad.cs</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Ad.cs 文件为 ad 类别定义一个枚举，为 ad 信息定义一个 POCO 实体类。</source>
          <target state="new">Ad.cs 文件为 ad 类别定义一个枚举，为 ad 信息定义一个 POCO 实体类。</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>ContosoAdsCommon - ContosoAdsContext.cs</source>
          <target state="new">ContosoAdsCommon - ContosoAdsContext.cs</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>ContosoAdsContext 类指定 DbSet 集合中使用的 Ad 类，实体框架将存储在 SQL 数据库中。</source>
          <target state="new">ContosoAdsContext 类指定 DbSet 集合中使用的 Ad 类，实体框架将存储在 SQL 数据库中。</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>类具有两个构造函数。第一个由 Web 项目使用，并指定存储在 Web.config 文件或 Azure 运行时环境中的连接字符串的名称。第二个构造函数允许你在实际的连接字符串中传递。程序需要 Web 作业项目，因为它没有 Web.config 文件。你以前看到存储此连接字符串的位置，并且稍后你将看到连接字符串在实例化 DbContext 类时代码如何检索它。</source>
          <target state="new">类具有两个构造函数。第一个由 Web 项目使用，并指定存储在 Web.config 文件或 Azure 运行时环境中的连接字符串的名称。第二个构造函数允许你在实际的连接字符串中传递。程序需要 Web 作业项目，因为它没有 Web.config 文件。你以前看到存储此连接字符串的位置，并且稍后你将看到连接字符串在实例化 DbContext 类时代码如何检索它。</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>ContosoAdsCommon - BlobInformation.cs</source>
          <target state="new">ContosoAdsCommon - BlobInformation.cs</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`BlobInformation`</ph> 类用于在队列消息中存储有关图像 Blob 的信息。</source>
          <target state="new"><ph id="ph1">`BlobInformation`</ph> 类用于在队列消息中存储有关图像 Blob 的信息。</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>ContosoAdsWeb - Global.asax.cs</source>
          <target state="new">ContosoAdsWeb - Global.asax.cs</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>从 <ph id="ph1">`Application_Start`</ph> 方法调用的代码创建 <bpt id="p1">*</bpt>图像<ept id="p1">*</ept> Blob 容器和 <bpt id="p2">*</bpt>图像<ept id="p2">*</ept> 队列（如果它们尚不存在）。这确保只要你开始使用新的存储帐户，就自动创建所需的 Blob 容器和队列。</source>
          <target state="new">从 <ph id="ph1">`Application_Start`</ph> 方法调用的代码创建 <bpt id="p1">*</bpt>图像<ept id="p1">*</ept> Blob 容器和 <bpt id="p2">*</bpt>图像<ept id="p2">*</ept> 队列（如果它们尚不存在）。这确保只要你开始使用新的存储帐户，就自动创建所需的 Blob 容器和队列。</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>此代码通过使用 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 文件或 Azure 运行时环境中的存储连接字符串获取存储帐户的访问权限。</source>
          <target state="new">此代码通过使用 <bpt id="p1">*</bpt>Web.config<ept id="p1">*</ept> 文件或 Azure 运行时环境中的存储连接字符串获取存储帐户的访问权限。</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>然后，它获取对 <bpt id="p1">*</bpt>图像<ept id="p1">*</ept> Blob 容器的引用，创建尚不存在的容器，并在新容器上设置访问权限。默认情况下，新容器只允许带存储帐户凭据的客户端访问 Blob。 Web 应用需要 Blob 是公共的，以便它可以使用指向图像 Blob 的 Url 显示图像。</source>
          <target state="new">然后，它获取对 <bpt id="p1">*</bpt>图像<ept id="p1">*</ept> Blob 容器的引用，创建尚不存在的容器，并在新容器上设置访问权限。默认情况下，新容器只允许带存储帐户凭据的客户端访问 Blob。 Web 应用需要 Blob 是公共的，以便它可以使用指向图像 Blob 的 Url 显示图像。</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>类似代码获取对 <bpt id="p1">*</bpt>blobnamerequest<ept id="p1">*</ept> 队列的引用并创建一个新队列。这种情况不需要权限更改。本教程稍后的 <bpt id="p2">[</bpt>ResolveBlobName<ept id="p2">](#resolveblobname)</ept> 部分将说明为何只使用 Web 应用所写入到的队列来获取 Blob 名称而不生成缩略图。</source>
          <target state="new">类似代码获取对 <bpt id="p1">*</bpt>blobnamerequest<ept id="p1">*</ept> 队列的引用并创建一个新队列。这种情况不需要权限更改。本教程稍后的 <bpt id="p2">[</bpt>ResolveBlobName<ept id="p2">](#resolveblobname)</ept> 部分将说明为何只使用 Web 应用所写入到的队列来获取 Blob 名称而不生成缩略图。</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>ContosoAdsWeb - \_Layout.cshtml</source>
          <target state="new">ContosoAdsWeb - \_Layout.cshtml</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>\_Layout.cshtml<ept id="p1">*</ept> 文件设置页眉和页脚中的应用程序，并创建“广告”菜单项。</source>
          <target state="new"><bpt id="p1">*</bpt>\_Layout.cshtml<ept id="p1">*</ept> 文件设置页眉和页脚中的应用程序，并创建“广告”菜单项。</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>ContosoAdsWeb - Views\\Home\\Index.cshtml</source>
          <target state="new">ContosoAdsWeb - Views\\Home\\Index.cshtml</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Views\\Home\\Index.cshtml<ept id="p1">*</ept> 文件在主页上显示类别链接。链接将查询字符串变量中的 <ph id="ph1">`Category`</ph> 枚举的整数值传递到“广告索引”页面。</source>
          <target state="new"><bpt id="p1">*</bpt>Views\\Home\\Index.cshtml<ept id="p1">*</ept> 文件在主页上显示类别链接。链接将查询字符串变量中的 <ph id="ph1">`Category`</ph> 枚举的整数值传递到“广告索引”页面。</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="resolveblobname"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> ContosoAdsWeb - AdController.cs</source>
          <target state="new"><ph id="ph1">&lt;a name="resolveblobname"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> ContosoAdsWeb - AdController.cs</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">*</bpt>AdController.cs<ept id="p1">*</ept> 文件中，构造函数调用 <ph id="ph1">`InitializeStorage`</ph> 方法来创建 Azure 存储客户端库对象，它提供一个用于处理 Blob 和队列的 API。</source>
          <target state="new">在 <bpt id="p1">*</bpt>AdController.cs<ept id="p1">*</ept> 文件中，构造函数调用 <ph id="ph1">`InitializeStorage`</ph> 方法来创建 Azure 存储客户端库对象，它提供一个用于处理 Blob 和队列的 API。</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>然后，代码获取对 <bpt id="p1">*</bpt>图像<ept id="p1">*</ept> Blob 容器的引用，正如你之前在 <bpt id="p2">*</bpt>Global.asax.cs<ept id="p2">*</ept> 中看到的。在执行该操作时，它设置适用于 Web 应用的默认<bpt id="p3">[</bpt>重试策略<ept id="p3">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/transient-fault-handling)</ept>。对于因暂时性故障反复重试超过一分钟的 Web 应用，默认指数回退重试策略可能将其挂起。此处指定的重试策略将在每次尝试后等待 3 秒，最多可尝试 3 次。</source>
          <target state="new">然后，代码获取对 <bpt id="p1">*</bpt>图像<ept id="p1">*</ept> Blob 容器的引用，正如你之前在 <bpt id="p2">*</bpt>Global.asax.cs<ept id="p2">*</ept> 中看到的。在执行该操作时，它设置适用于 Web 应用的默认<bpt id="p3">[</bpt>重试策略<ept id="p3">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/transient-fault-handling)</ept>。对于因暂时性故障反复重试超过一分钟的 Web 应用，默认指数回退重试策略可能将其挂起。此处指定的重试策略将在每次尝试后等待 3 秒，最多可尝试 3 次。</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>类似代码获取对 <bpt id="p1">*</bpt>图像<ept id="p1">*</ept> 队列的引用。</source>
          <target state="new">类似代码获取对 <bpt id="p1">*</bpt>图像<ept id="p1">*</ept> 队列的引用。</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>大部分控制器代码通常用于使用 DbContext 类的实体框架数据模型。例外情况是 HttpPost <ph id="ph1">`Create`</ph> 方法，它上载文件并将其保存在 Blob 存储中。模型联编程序为该方法提供一个 <bpt id="p1">[</bpt>HttpPostedFileBase<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/system.web.httppostedfilebase.aspx)</ept> 对象。</source>
          <target state="new">大部分控制器代码通常用于使用 DbContext 类的实体框架数据模型。例外情况是 HttpPost <ph id="ph1">`Create`</ph> 方法，它上载文件并将其保存在 Blob 存储中。模型联编程序为该方法提供一个 <bpt id="p1">[</bpt>HttpPostedFileBase<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/system.web.httppostedfilebase.aspx)</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>如果用户选择要上载的文件，则代码上载该文件，将其保存在 Blob 中，并使用指向 Blob 的 URL 更新广告数据库记录。</source>
          <target state="new">如果用户选择要上载的文件，则代码上载该文件，将其保存在 Blob 中，并使用指向 Blob 的 URL 更新广告数据库记录。</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>执行上载的代码位于 <ph id="ph1">`UploadAndSaveBlobAsync`</ph> 方法中。它将创建 Blob 的 GUID 名称，上载和保存该文件，并将引用返回已保存的 Blob。</source>
          <target state="new">执行上载的代码位于 <ph id="ph1">`UploadAndSaveBlobAsync`</ph> 方法中。它将创建 Blob 的 GUID 名称，上载和保存该文件，并将引用返回已保存的 Blob。</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>HttpPost <ph id="ph1">`Create`</ph> 方法上载 Blob 并更新数据库之后，将会创建队列消息，以通知后端进程图像已准备好转换为一个缩略图。</source>
          <target state="new">HttpPost <ph id="ph1">`Create`</ph> 方法上载 Blob 并更新数据库之后，将会创建队列消息，以通知后端进程图像已准备好转换为一个缩略图。</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>HttpPost <ph id="ph1">`Edit`</ph> 方法的代码和它类似，不同之处在于如果用户选择新图像文件，则必须删除此广告已存在的任何 Blob。</source>
          <target state="new">HttpPost <ph id="ph1">`Edit`</ph> 方法的代码和它类似，不同之处在于如果用户选择新图像文件，则必须删除此广告已存在的任何 Blob。</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>以下是删除 Blob 时删除广告的代码：</source>
          <target state="new">以下是删除 Blob 时删除广告的代码：</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>ContosoAdsWeb - Views\\Ad\\Index.cshtml 和 Details.cshtml</source>
          <target state="new">ContosoAdsWeb - Views\\Ad\\Index.cshtml 和 Details.cshtml</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Index.cshtml<ept id="p1">*</ept> 文件显示带有其他广告数据的缩略图：</source>
          <target state="new"><bpt id="p1">*</bpt>Index.cshtml<ept id="p1">*</ept> 文件显示带有其他广告数据的缩略图：</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Details.cshtml<ept id="p1">*</ept> 文件显示完全尺寸的图像：</source>
          <target state="new"><bpt id="p1">*</bpt>Details.cshtml<ept id="p1">*</ept> 文件显示完全尺寸的图像：</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>ContosoAdsWeb - Views\\Ad\\Create.cshtml 和 Edit.cshtml</source>
          <target state="new">ContosoAdsWeb - Views\\Ad\\Create.cshtml 和 Edit.cshtml</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>Create.cshtml<ept id="p1">*</ept> 和 <bpt id="p2">*</bpt>Edit.cshtml<ept id="p2">*</ept> 文件指定窗体编码，允许控制器获取 <ph id="ph1">`HttpPostedFileBase`</ph> 对象。</source>
          <target state="new"><bpt id="p1">*</bpt>Create.cshtml<ept id="p1">*</ept> 和 <bpt id="p2">*</bpt>Edit.cshtml<ept id="p2">*</ept> 文件指定窗体编码，允许控制器获取 <ph id="ph1">`HttpPostedFileBase`</ph> 对象。</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;input&gt;`</ph> 元素通知浏览器提供文件选择对话框。</source>
          <target state="new"><ph id="ph1">`&lt;input&gt;`</ph> 元素通知浏览器提供文件选择对话框。</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="programcs"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>ContosoAdsWebJob - Program.cs</source>
          <target state="new"><ph id="ph1">&lt;a id="programcs"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>ContosoAdsWebJob - Program.cs</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>当 Web 作业启动时，<ph id="ph1">`Main`</ph> 方法将调用 WebJobs SDK <ph id="ph2">`JobHost.RunAndBlock`</ph> 方法，以开始执行当前线程上触发的函数。</source>
          <target state="new">当 Web 作业启动时，<ph id="ph1">`Main`</ph> 方法将调用 WebJobs SDK <ph id="ph2">`JobHost.RunAndBlock`</ph> 方法，以开始执行当前线程上触发的函数。</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="generatethumbnail"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>ContosoAdsWebJob - Functions.cs - GenerateThumbnail 方法</source>
          <target state="new"><ph id="ph1">&lt;a id="generatethumbnail"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>ContosoAdsWebJob - Functions.cs - GenerateThumbnail 方法</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>接收队列消息时，WebJobs SDK 将调用此方法。该方法创建缩略图，并将缩略图放在数据库中的 URL。</source>
          <target state="new">接收队列消息时，WebJobs SDK 将调用此方法。该方法创建缩略图，并将缩略图放在数据库中的 URL。</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`QueueTrigger`</ph> 属性指示 WebJobs SDK thumbnailrequest 队列上接收到新消息时调用此方法。</source>
          <target state="new"><ph id="ph1">`QueueTrigger`</ph> 属性指示 WebJobs SDK thumbnailrequest 队列上接收到新消息时调用此方法。</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>队列消息中的 <ph id="ph1">`BlobInformation`</ph> 对象是自动反序列化为 <ph id="ph2">`blobInfo`</ph> 参数。当该方法完成时，将删除队列消息。如果该方法将在完成之前失败，则不会删除队列消息；10 分钟租约过期后，会再次挑选发布和处理消息。如果一条消息始终导致异常，则不会无限期地重复这一序列。如果尝试处理某条消息 5 次都不成功，该消息将移到名为 {queuename}-poison 的队列。可以配置最大尝试次数。</source>
          <target state="new">队列消息中的 <ph id="ph1">`BlobInformation`</ph> 对象是自动反序列化为 <ph id="ph2">`blobInfo`</ph> 参数。当该方法完成时，将删除队列消息。如果该方法将在完成之前失败，则不会删除队列消息；10 分钟租约过期后，会再次挑选发布和处理消息。如果一条消息始终导致异常，则不会无限期地重复这一序列。如果尝试处理某条消息 5 次都不成功，该消息将移到名为 {queuename}-poison 的队列。可以配置最大尝试次数。</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>这两个 <ph id="ph1">`Blob`</ph> 属性提供绑定到 Blob 的对象：一个绑定到现有的图像 Blob，另一个绑定到该方法将创建的新缩略图 Blob。</source>
          <target state="new">这两个 <ph id="ph1">`Blob`</ph> 属性提供绑定到 Blob 的对象：一个绑定到现有的图像 Blob，另一个绑定到该方法将创建的新缩略图 Blob。</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Blob 名称来自队列消息中收到的 <ph id="ph1">`BlobInformation`</ph> 对象的属性（<ph id="ph2">`BlobName`</ph> 和 <ph id="ph3">`BlobNameWithoutExtension`</ph>）。若要获取存储客户端库的完整功能，可以使用兼容 Blob 的 <ph id="ph4">`CloudBlockBlob`</ph> 类。如果想要重用已编写的能够用于 <ph id="ph5">`Stream`</ph> 对象的代码，你可以使用 <ph id="ph6">`Stream`</ph> 类。</source>
          <target state="new">Blob 名称来自队列消息中收到的 <ph id="ph1">`BlobInformation`</ph> 对象的属性（<ph id="ph2">`BlobName`</ph> 和 <ph id="ph3">`BlobNameWithoutExtension`</ph>）。若要获取存储客户端库的完整功能，可以使用兼容 Blob 的 <ph id="ph4">`CloudBlockBlob`</ph> 类。如果想要重用已编写的能够用于 <ph id="ph5">`Stream`</ph> 对象的代码，你可以使用 <ph id="ph6">`Stream`</ph> 类。</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>有关如何编写使用 WebJobs SDK 属性的函数的详细信息，请参阅以下资源：</source>
          <target state="new">有关如何编写使用 WebJobs SDK 属性的函数的详细信息，请参阅以下资源：</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>如何通过 WebJobs SDK 使用 Azure 队列存储</source>
          <target state="new">如何通过 WebJobs SDK 使用 Azure 队列存储</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>如何通过 WebJobs SDK 使用 Azure Blob 存储</source>
          <target state="new">如何通过 WebJobs SDK 使用 Azure Blob 存储</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>如何通过 WebJobs SDK 使用 Azure 表存储</source>
          <target state="new">如何通过 WebJobs SDK 使用 Azure 表存储</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>如何通过 WebJobs SDK 使用 Azure 服务总线</source>
          <target state="new">如何通过 WebJobs SDK 使用 Azure 服务总线</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>如果在多个 VM 上运行 Web 应用，多个 Web 作业将同时运行，在某些情况下，这可能会导致相同的数据被处理多次。如果使用内置队列、Blob 和服务总线触发器，则这不会造成问题。SDK 可确保只会针对每个消息或 Blob 处理函数一次。</source>
          <target state="new">如果在多个 VM 上运行 Web 应用，多个 Web 作业将同时运行，在某些情况下，这可能会导致相同的数据被处理多次。如果使用内置队列、Blob 和服务总线触发器，则这不会造成问题。SDK 可确保只会针对每个消息或 Blob 处理函数一次。</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>有关如何实现正常关闭的信息，请参阅<bpt id="p1">[</bpt>正常关闭<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#graceful)</ept>。</source>
          <target state="new">有关如何实现正常关闭的信息，请参阅<bpt id="p1">[</bpt>正常关闭<ept id="p1">](/documentation/articles/websites-dotnet-webjobs-sdk-storage-queues-how-to#graceful)</ept>。</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>为方便起见，<ph id="ph1">`ConvertImageToThumbnailJPG`</ph> 方法中的代码（未显示）使用 <ph id="ph2">`System.Drawing`</ph> 命名空间中的类。但是，此命名空间中的类已设计用于 Windows 窗体。不支持在 Windows 或 ASP.NET 服务中使用。有关图像处理选项的详细信息，请参阅<bpt id="p1">[</bpt>动态图像生成<ept id="p1">](http://www.hanselman.com/blog/BackToBasicsDynamicImageGenerationASPNETControllersRoutingIHttpHandlersAndRunAllManagedModulesForAllRequests.aspx)</ept>和<bpt id="p2">[</bpt>深入学习图像大小调整<ept id="p2">](http://www.hanselminutes.com/313/deep-inside-image-resizing-and-scaling-with-aspnet-and-iis-with-imageresizingnet-author-na)</ept>。</source>
          <target state="new">为方便起见，<ph id="ph1">`ConvertImageToThumbnailJPG`</ph> 方法中的代码（未显示）使用 <ph id="ph2">`System.Drawing`</ph> 命名空间中的类。但是，此命名空间中的类已设计用于 Windows 窗体。不支持在 Windows 或 ASP.NET 服务中使用。有关图像处理选项的详细信息，请参阅<bpt id="p1">[</bpt>动态图像生成<ept id="p1">](http://www.hanselman.com/blog/BackToBasicsDynamicImageGenerationASPNETControllersRoutingIHttpHandlersAndRunAllManagedModulesForAllRequests.aspx)</ept>和<bpt id="p2">[</bpt>深入学习图像大小调整<ept id="p2">](http://www.hanselminutes.com/313/deep-inside-image-resizing-and-scaling-with-aspnet-and-iis-with-imageresizingnet-author-na)</ept>。</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="next-steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 后续步骤</source>
          <target state="new"><ph id="ph1">&lt;a name="next-steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 后续步骤</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>在本教程中，你已了解了一个使用 WebJobs SDK 进行后端处理的简单多层应用程序。本部分提供有关进一步了解 ASP.NET 多层应用程序和 Web 作业的一些建议。</source>
          <target state="new">在本教程中，你已了解了一个使用 WebJobs SDK 进行后端处理的简单多层应用程序。本部分提供有关进一步了解 ASP.NET 多层应用程序和 Web 作业的一些建议。</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>缺少的功能</source>
          <target state="new">缺少的功能</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>该应用程序有意保持入门教程的简单性。在现实的应用程序中，你会实施<bpt id="p1">[</bpt>依赖关系注入<ept id="p1">](http://www.asp.net/mvc/tutorials/hands-on-labs/aspnet-mvc-4-dependency-injection)</ept>或<bpt id="p2">[</bpt>存储库和单元的工作模式<ept id="p2">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#repo)</ept>，使用<bpt id="p3">[</bpt>日志记录接口<ept id="p3">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log)</ept>，使用 <bpt id="p4">[</bpt>EF Code First 迁移<ept id="p4">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application)</ept>来管理数据模型更改，并使用 <bpt id="p5">[</bpt>EF 连接复原<ept id="p5">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/connection-resiliency-and-command-interception-with-the-entity-framework-in-an-asp-net-mvc-application)</ept>管理暂时性的网络错误。</source>
          <target state="new">该应用程序有意保持入门教程的简单性。在现实的应用程序中，你会实施<bpt id="p1">[</bpt>依赖关系注入<ept id="p1">](http://www.asp.net/mvc/tutorials/hands-on-labs/aspnet-mvc-4-dependency-injection)</ept>或<bpt id="p2">[</bpt>存储库和单元的工作模式<ept id="p2">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/advanced-entity-framework-scenarios-for-an-mvc-web-application#repo)</ept>，使用<bpt id="p3">[</bpt>日志记录接口<ept id="p3">](http://www.asp.net/aspnet/overview/developing-apps-with-windows-azure/building-real-world-cloud-apps-with-windows-azure/monitoring-and-telemetry#log)</ept>，使用 <bpt id="p4">[</bpt>EF Code First 迁移<ept id="p4">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/migrations-and-deployment-with-the-entity-framework-in-an-asp-net-mvc-application)</ept>来管理数据模型更改，并使用 <bpt id="p5">[</bpt>EF 连接复原<ept id="p5">](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/connection-resiliency-and-command-interception-with-the-entity-framework-in-an-asp-net-mvc-application)</ept>管理暂时性的网络错误。</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>缩放 Web 作业</source>
          <target state="new">缩放 Web 作业</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Web 作业在 Web 应用的上下文中运行，并且不可单独缩放。例如，如果你有一个标准 Web 应用实例，只运行了后台进程的一个实例，并且该实例正在使用某些服务器资源（CPU、内存等），而这些资源也可用于提供 Web 内容。</source>
          <target state="new">Web 作业在 Web 应用的上下文中运行，并且不可单独缩放。例如，如果你有一个标准 Web 应用实例，只运行了后台进程的一个实例，并且该实例正在使用某些服务器资源（CPU、内存等），而这些资源也可用于提供 Web 内容。</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>如果流量根据一天的时间或者星期变化，并且你需要执行的后端处理可以等待，则你可以将 Web 作业安排为在低流量期间运行。如果该解决方案的负载仍然太高，可以在针对该用途专用的独立 Web 应用中以 Web 作业形式运行后端。然后，可以独立于前端 Web 应用缩放你的后端 Web 应用。</source>
          <target state="new">如果流量根据一天的时间或者星期变化，并且你需要执行的后端处理可以等待，则你可以将 Web 作业安排为在低流量期间运行。如果该解决方案的负载仍然太高，可以在针对该用途专用的独立 Web 应用中以 Web 作业形式运行后端。然后，可以独立于前端 Web 应用缩放你的后端 Web 应用。</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅<bpt id="p1">[</bpt>缩放 Web 作业<ept id="p1">](/documentation/articles/websites-webjobs-resources#scale)</ept>。</source>
          <target state="new">有关详细信息，请参阅<bpt id="p1">[</bpt>缩放 Web 作业<ept id="p1">](/documentation/articles/websites-webjobs-resources#scale)</ept>。</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>避免因 Web 应用超时而导致其关闭</source>
          <target state="new">避免因 Web 应用超时而导致其关闭</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>若要确保 Web 作业始终在你的 Web 应用的所有实例上运行，你必须启用 <bpt id="p1">[</bpt>AlwaysOn<ept id="p1">](http://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx)</ept> 功能。</source>
          <target state="new">若要确保 Web 作业始终在你的 Web 应用的所有实例上运行，你必须启用 <bpt id="p1">[</bpt>AlwaysOn<ept id="p1">](http://weblogs.asp.net/scottgu/archive/2014/01/16/windows-azure-staging-publishing-support-for-web-sites-monitoring-improvements-hyper-v-recovery-manager-ga-and-pci-compliance.aspx)</ept> 功能。</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>更多 Web 作业文档</source>
          <target state="new">更多 Web 作业文档</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅<bpt id="p1">[</bpt>Azure Web 作业文档资源<ept id="p1">](/documentation/articles/websites-webjobs-resources/)</ept>。</source>
          <target state="new">有关详细信息，请参阅<bpt id="p1">[</bpt>Azure Web 作业文档资源<ept id="p1">](/documentation/articles/websites-webjobs-resources/)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>