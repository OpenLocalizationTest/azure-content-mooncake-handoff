<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">880ca9909d8b4ceb478ebd00f1d8e2943238a001</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>先前示例显示标准登录，这要求在此应用每次启动时客户端同时联系身份提供商和移动服务。此方法不仅效率低下，而且如果很多客户尝试同时启动您的应用，您会遇到关于使用率的问题。更好的方法是缓存移动服务返回的授权令牌，然后在使用基于提供商的登录之前首先尝试使用此令牌。</source>
          <target state="new">先前示例显示标准登录，这要求在此应用每次启动时客户端同时联系身份提供商和移动服务。此方法不仅效率低下，而且如果很多客户尝试同时启动您的应用，您会遇到关于使用率的问题。更好的方法是缓存移动服务返回的授权令牌，然后在使用基于提供商的登录之前首先尝试使用此令牌。</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>无论您使用客户端管理的还是服务管理的身份验证，都可以缓存由移动服务颁发的令牌。本教程使用服务管理的身份验证。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>无论您使用客户端管理的还是服务管理的身份验证，都可以缓存由移动服务颁发的令牌。本教程使用服务管理的身份验证。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>打开 ToDoActivity.java 文件并添加以下 import 语句：</source>
          <target state="new">打开 ToDoActivity.java 文件并添加以下 import 语句：</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>将以下成员添加到  <ph id="ph1">`ToDoActivity`</ph> 类。</source>
          <target state="new">将以下成员添加到  <ph id="ph1">`ToDoActivity`</ph> 类。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>在 ToDoActivity.java 文件中，为 <ph id="ph1">`cacheUserToken`</ph> 方法添加以下定义。</source>
          <target state="new">在 ToDoActivity.java 文件中，为 <ph id="ph1">`cacheUserToken`</ph> 方法添加以下定义。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>此方法将用户 ID 和令牌存储在标记为私有的首选项文件中。这应保护对缓存的访问，以便在设备上的其他应用没有令牌的访问权，因为将应用程序的首选项进行沙箱处理。但是，如果有人获取了设备的访问权，则它们可能会通过其他方式获得对令牌缓存的访问权。</source>
          <target state="new">此方法将用户 ID 和令牌存储在标记为私有的首选项文件中。这应保护对缓存的访问，以便在设备上的其他应用没有令牌的访问权，因为将应用程序的首选项进行沙箱处理。但是，如果有人获取了设备的访问权，则它们可能会通过其他方式获得对令牌缓存的访问权。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>如果对您数据的令牌访问被认为非常敏感，并且有人可能会获得对设备的访问权，则可以使用加密进一步保护令牌。但是，完全安全的解决方案超出了本教程的范围并且取决于您的安全要求。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>如果对您数据的令牌访问被认为非常敏感，并且有人可能会获得对设备的访问权，则可以使用加密进一步保护令牌。但是，完全安全的解决方案超出了本教程的范围并且取决于您的安全要求。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在 ToDoActivity.java 文件中，为 <ph id="ph1">`loadUserTokenCache`</ph> 方法添加以下定义。</source>
          <target state="new">在 ToDoActivity.java 文件中，为 <ph id="ph1">`loadUserTokenCache`</ph> 方法添加以下定义。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在  <bpt id="p1">*</bpt>ToDoActivity.java<ept id="p1">*</ept> 文件中，将  <ph id="ph1">`authenticate`</ph> 方法替换为使用令牌缓存的以下方法。如果您想要使用的帐户不是 Microsoft 帐户，请更改登录提供商。</source>
          <target state="new">在  <bpt id="p1">*</bpt>ToDoActivity.java<ept id="p1">*</ept> 文件中，将  <ph id="ph1">`authenticate`</ph> 方法替换为使用令牌缓存的以下方法。如果您想要使用的帐户不是 Microsoft 帐户，请更改登录提供商。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>构建此应用并使用有效帐户来测试验证。至少两次运行它。在第一次运行中，您应收到登录并创建令牌缓存的提示。此后，每次运行将尝试加载令牌缓存以进行身份验证，您不需要登录。</source>
          <target state="new">构建此应用并使用有效帐户来测试验证。至少两次运行它。在第一次运行中，您应收到登录并创建令牌缓存的提示。此后，每次运行将尝试加载令牌缓存以进行身份验证，您不需要登录。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>