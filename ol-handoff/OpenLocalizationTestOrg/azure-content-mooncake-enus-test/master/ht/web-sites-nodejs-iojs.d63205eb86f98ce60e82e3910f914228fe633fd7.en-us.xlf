<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4de32f7bc66a85ddc9aa0e768f606c1c00dc33e9</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何将 io.js 与 Azure Web 应用配合使用</source>
          <target state="new">如何将 io.js 与 Azure Web 应用配合使用</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何将 Azure 中的 Web 应用与 io.js 配合使用。</source>
          <target state="new">了解如何将 Azure 中的 Web 应用与 io.js 配合使用。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何将 io.js 与 Azure Web 应用配合使用</source>
          <target state="new">如何将 io.js 与 Azure Web 应用配合使用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>与 Joyent 的 Node.js 项目相比，流行的 Node 分叉 <bpt id="p1">[</bpt><ept id="p1">io.js]</ept> 具有许多不同的特性，包括更加开放的监管模型、更快的发行周期，和更快地采纳新的和试验性的 JavaScript 功能。</source>
          <target state="new">与 Joyent 的 Node.js 项目相比，流行的 Node 分叉 <bpt id="p1">[</bpt><ept id="p1">io.js]</ept> 具有许多不同的特性，包括更加开放的监管模型、更快的发行周期，和更快地采纳新的和试验性的 JavaScript 功能。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>虽然 Azure Web 应用预装了许多 Node.js 版本，但它还允许用户提供的 Node.js 二进制文件。本文将讨论在 Azure Web 应用上启用 io.js 的两种方法：使用扩展的部署脚本（自动将 Azure 配置为使用最新的可用 io.js 版本），以及手动上载 io.js 二进制文件。</source>
          <target state="new">虽然 Azure Web 应用预装了许多 Node.js 版本，但它还允许用户提供的 Node.js 二进制文件。本文将讨论在 Azure Web 应用上启用 io.js 的两种方法：使用扩展的部署脚本（自动将 Azure 配置为使用最新的可用 io.js 版本），以及手动上载 io.js 二进制文件。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>使用部署脚本</source>
          <target state="new">使用部署脚本</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>在部署 Node.js 应用程序后，Azure Web 应用将运行大量的小命令来确保正确配置环境。如果使用部署脚本，则可以将此过程自定义为包含 io.js 的下载和配置。</source>
          <target state="new">在部署 Node.js 应用程序后，Azure Web 应用将运行大量的小命令来确保正确配置环境。如果使用部署脚本，则可以将此过程自定义为包含 io.js 的下载和配置。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>GitHub 上提供了 <bpt id="p1">[</bpt><ept id="p1">io.js 部署脚本]</ept>。若要在 Web 应用上启用 io.js，只需将 <bpt id="p2">**</bpt>.deployment<ept id="p2">**</ept>、<bpt id="p3">**</bpt>deploy.cmd<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>IISNode.yml<ept id="p4">**</ept> 复制到应用程序文件夹的根目录，并将其部署到 Web 应用。</source>
          <target state="new">GitHub 上提供了 <bpt id="p1">[</bpt><ept id="p1">io.js 部署脚本]</ept>。若要在 Web 应用上启用 io.js，只需将 <bpt id="p2">**</bpt>.deployment<ept id="p2">**</ept>、<bpt id="p3">**</bpt>deploy.cmd<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>IISNode.yml<ept id="p4">**</ept> 复制到应用程序文件夹的根目录，并将其部署到 Web 应用。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>第一个文件 <bpt id="p1">**</bpt>.deployment<ept id="p1">**</ept> 指示 Web 应用在部署后要运行 <bpt id="p2">**</bpt>deploy.cmd<ept id="p2">**</ept>。此脚本将针对 Node.js 应用程序运行所有常见步骤，但还会下载最新版本的 io.js。最后，<bpt id="p3">**</bpt>IISNode.yml<ept id="p3">**</ept> 将 Web 应用配置为使用刚刚下载的 io.js 二进制文件，而不是预装的 Node.js 二进制文件。</source>
          <target state="new">第一个文件 <bpt id="p1">**</bpt>.deployment<ept id="p1">**</ept> 指示 Web 应用在部署后要运行 <bpt id="p2">**</bpt>deploy.cmd<ept id="p2">**</ept>。此脚本将针对 Node.js 应用程序运行所有常见步骤，但还会下载最新版本的 io.js。最后，<bpt id="p3">**</bpt>IISNode.yml<ept id="p3">**</ept> 将 Web 应用配置为使用刚刚下载的 io.js 二进制文件，而不是预装的 Node.js 二进制文件。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>若要更新使用的 io.js 二进制文件，只需重新部署你的应用程序 - 每次部署应用程序后，脚本将下载 io.js 的新版本。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>若要更新使用的 io.js 二进制文件，只需重新部署你的应用程序 - 每次部署应用程序后，脚本将下载 io.js 的新版本。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>使用手动安装</source>
          <target state="new">使用手动安装</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>手动安装自定义 io.js 版本只包括两个步骤。首先，直接从 <bpt id="p1">[</bpt><ept id="p1">io.js 分发包]</ept>中下载 <bpt id="p2">**</bpt>win-x64<ept id="p2">**</ept> 二进制文件。需要两个文件 - <bpt id="p3">**</bpt>iojs.exe<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>iojs.lib<ept id="p4">**</ept>。将两个文件保存到 Web 应用上的某个文件夹中，例如，保存在 <bpt id="p5">**</bpt>bin/iojs<ept id="p5">**</ept> 中。</source>
          <target state="new">手动安装自定义 io.js 版本只包括两个步骤。首先，直接从 <bpt id="p1">[</bpt><ept id="p1">io.js 分发包]</ept>中下载 <bpt id="p2">**</bpt>win-x64<ept id="p2">**</ept> 二进制文件。需要两个文件 - <bpt id="p3">**</bpt>iojs.exe<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>iojs.lib<ept id="p4">**</ept>。将两个文件保存到 Web 应用上的某个文件夹中，例如，保存在 <bpt id="p5">**</bpt>bin/iojs<ept id="p5">**</ept> 中。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>若要将 Web 应用配置为使用 <bpt id="p1">**</bpt>iojs.exe<ept id="p1">**</ept> 而不是预装的 Node 版本，请在应用程序的根目录中创建一个 <bpt id="p2">**</bpt>IISNode.yml<ept id="p2">**</ept> 文件，并添加以下行。</source>
          <target state="new">若要将 Web 应用配置为使用 <bpt id="p1">**</bpt>iojs.exe<ept id="p1">**</ept> 而不是预装的 Node 版本，请在应用程序的根目录中创建一个 <bpt id="p2">**</bpt>IISNode.yml<ept id="p2">**</ept> 文件，并添加以下行。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>在本文中，你已学习如何使用提供的部署脚本以及手动安装方法，将 io.js 与 Azure Web 应用配合使用。</source>
          <target state="new">在本文中，你已学习如何使用提供的部署脚本以及手动安装方法，将 io.js 与 Azure Web 应用配合使用。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>io.js 正在紧张的开发中，其更新频率超过了 Node.js。许多 Node.js 模块可能并不适用于 io.js - 若要进行故障排除，请查阅 <bpt id="p1">[</bpt><ept id="p1">GitHub 上的 io.js]</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>io.js 正在紧张的开发中，其更新频率超过了 Node.js。许多 Node.js 模块可能并不适用于 io.js - 若要进行故障排除，请查阅 <bpt id="p1">[</bpt><ept id="p1">GitHub 上的 io.js]</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>