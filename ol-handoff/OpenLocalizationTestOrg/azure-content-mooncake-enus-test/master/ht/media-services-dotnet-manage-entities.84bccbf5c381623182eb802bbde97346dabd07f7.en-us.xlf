<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d5a3686059c30ebed81bc37e9906f134f28cab5</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用媒体服务 .NET SDK 管理资产和相关的实体</source>
          <target state="new">使用媒体服务 .NET SDK 管理资产和相关的实体</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用适用于 .NET 的媒体服务 SDK 管理资产和相关的实体。</source>
          <target state="new">了解如何使用适用于 .NET 的媒体服务 SDK 管理资产和相关的实体。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用媒体服务 .NET SDK 管理资产和相关的实体</source>
          <target state="new">使用媒体服务 .NET SDK 管理资产和相关的实体</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>.NET</source>
          <target state="new">.NET</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>REST</source>
          <target state="new">REST</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>本主题演示了如何完成以下媒体服务管理任务：</source>
          <target state="new">本主题演示了如何完成以下媒体服务管理任务：</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>获取资产引用</source>
          <target state="new">获取资产引用</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>获取作业引用</source>
          <target state="new">获取作业引用</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>列出所有资产</source>
          <target state="new">列出所有资产</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>列出作业和资产</source>
          <target state="new">列出作业和资产</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>列出所有访问策略</source>
          <target state="new">列出所有访问策略</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>列出所有定位符</source>
          <target state="new">列出所有定位符</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>枚举大型实体集合</source>
          <target state="new">枚举大型实体集合</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>删除资产</source>
          <target state="new">删除资产</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>删除作业</source>
          <target state="new">删除作业</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>删除访问策略</source>
          <target state="new">删除访问策略</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>先决条件</source>
          <target state="new">先决条件</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>请参阅<bpt id="p1">[</bpt>设置你的环境<ept id="p1">](/documentation/articles/media-services-set-up-computer)</ept></source>
          <target state="new">请参阅<bpt id="p1">[</bpt>设置你的环境<ept id="p1">](/documentation/articles/media-services-set-up-computer)</ept></target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Get-an-asset-reference"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>获取资产引用</source>
          <target state="new"><ph id="ph1">&lt;a id="Get-an-asset-reference"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>获取资产引用</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>一个常见的任务是获取对媒体服务中某个现有资产的引用。以下代码示例演示了如何根据资产 ID，从服务器上下文对象上的资产集合中获取资产引用。</source>
          <target state="new">一个常见的任务是获取对媒体服务中某个现有资产的引用。以下代码示例演示了如何根据资产 ID，从服务器上下文对象上的资产集合中获取资产引用。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>以下代码示例使用 Linq 查询来获取对现有 IAsset 对象的引用。</source>
          <target state="new">以下代码示例使用 Linq 查询来获取对现有 IAsset 对象的引用。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Get-a-job-reference"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>获取作业引用</source>
          <target state="new"><ph id="ph1">&lt;a id="Get-a-job-reference"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>获取作业引用</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>处理媒体服务代码中的任务时，通常需要根据 ID 获取对现有作业的引用。以下代码示例演示了如何获取对作业集合中某个 IJob 对象的引用。警告：开始长时运行的编码作业时，你可能需要获取作业引用，并且需要检查线程上的作业状态。在这种情况下，当方法从某个线程返回时，你需要检索对作业的刷新引用。</source>
          <target state="new">处理媒体服务代码中的任务时，通常需要根据 ID 获取对现有作业的引用。以下代码示例演示了如何获取对作业集合中某个 IJob 对象的引用。警告：开始长时运行的编码作业时，你可能需要获取作业引用，并且需要检查线程上的作业状态。在这种情况下，当方法从某个线程返回时，你需要检索对作业的刷新引用。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="List-all-assets"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>列出所有资产</source>
          <target state="new"><ph id="ph1">&lt;a id="List-all-assets"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>列出所有资产</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>随着存储空间中的资产数量的增长，这对列出你的资产很有用。以下代码示例演示了如何循环访问服务器上下文对象上的资产集合。对于每个资产，该代码示例还会将其一些属性值写入控制台。例如，每个资产可以包含多个媒体文件。代码示例会写出与每个资产关联的所有文件。</source>
          <target state="new">随着存储空间中的资产数量的增长，这对列出你的资产很有用。以下代码示例演示了如何循环访问服务器上下文对象上的资产集合。对于每个资产，该代码示例还会将其一些属性值写入控制台。例如，每个资产可以包含多个媒体文件。代码示例会写出与每个资产关联的所有文件。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="List-jobs-and-assets"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>列出作业和资产</source>
          <target state="new"><ph id="ph1">&lt;a id="List-jobs-and-assets"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>列出作业和资产</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>在媒体服务中列出资产及其关联作业是一项重要的相关任务。以下代码示例演示了如何列出每个 IJob 对象，然后，针对每个作业，它会显示作业的相关属性、所有相关的任务、所有输入资产和所有输出资产。本示例中的代码对各种其他任务也有所帮助。例如，如果想要列出你先前运行的一个或多个编码作业的输出资产，本代码将演示如何访问输出资产。如果拥有对某个输出资产的引用，你可以通过下载或提供 URL 的方式，将内容传递给其他用户或应用程序。</source>
          <target state="new">在媒体服务中列出资产及其关联作业是一项重要的相关任务。以下代码示例演示了如何列出每个 IJob 对象，然后，针对每个作业，它会显示作业的相关属性、所有相关的任务、所有输入资产和所有输出资产。本示例中的代码对各种其他任务也有所帮助。例如，如果想要列出你先前运行的一个或多个编码作业的输出资产，本代码将演示如何访问输出资产。如果拥有对某个输出资产的引用，你可以通过下载或提供 URL 的方式，将内容传递给其他用户或应用程序。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>有关传递资产选项的详细信息，请参阅<bpt id="p1">[</bpt>使用适用于 .NET 的媒体服务 SDK 传递资产<ept id="p1">](/documentation/articles/media-services-deliver-streaming-content)</ept>。</source>
          <target state="new">有关传递资产选项的详细信息，请参阅<bpt id="p1">[</bpt>使用适用于 .NET 的媒体服务 SDK 传递资产<ept id="p1">](/documentation/articles/media-services-deliver-streaming-content)</ept>。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="List-all-access-policies"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>列出所有访问策略</source>
          <target state="new"><ph id="ph1">&lt;a id="List-all-access-policies"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>列出所有访问策略</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>在媒体服务中，可以对资产或其文件定义访问策略。访问策略定义文件或资产的权限（访问类型以及持续时间）。在媒体服务代码中，通常通过创建 IAccessPolicy 对象来定义访问策略对象，然后将其与现有资产相关联。然后创建一个 ILocator 对象，它允许你提供对媒体服务中的资产的直接访问。本文档系列随附的 Visual Studio 项目包含几个代码示例，这些代码示例演示如何创建和分配访问策略和定位符到资产。</source>
          <target state="new">在媒体服务中，可以对资产或其文件定义访问策略。访问策略定义文件或资产的权限（访问类型以及持续时间）。在媒体服务代码中，通常通过创建 IAccessPolicy 对象来定义访问策略对象，然后将其与现有资产相关联。然后创建一个 ILocator 对象，它允许你提供对媒体服务中的资产的直接访问。本文档系列随附的 Visual Studio 项目包含几个代码示例，这些代码示例演示如何创建和分配访问策略和定位符到资产。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>以下代码示例演示如何列出服务器上所有的访问策略，并显示与每个策略关联的权限类型。查看访问策略的另一个有用方法是列出服务器上的所有 ILocator 对象，然后针对每个定位符，可以使用其 AccessPolicy 属性列出其关联的访问策略。</source>
          <target state="new">以下代码示例演示如何列出服务器上所有的访问策略，并显示与每个策略关联的权限类型。查看访问策略的另一个有用方法是列出服务器上的所有 ILocator 对象，然后针对每个定位符，可以使用其 AccessPolicy 属性列出其关联的访问策略。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="List-All-Locators"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>列出所有定位符</source>
          <target state="new"><ph id="ph1">&lt;a id="List-All-Locators"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>列出所有定位符</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>定位符是一个 URL，提供访问资产的直接路径，以及定位符的关联访问策略所定义的对该资产的权限。每个资产都有一个在其定位符属性上与其关联的 ILocator 对象集合。服务器上下文还具有一个包含所有定位符的定位符集合。</source>
          <target state="new">定位符是一个 URL，提供访问资产的直接路径，以及定位符的关联访问策略所定义的对该资产的权限。每个资产都有一个在其定位符属性上与其关联的 ILocator 对象集合。服务器上下文还具有一个包含所有定位符的定位符集合。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>以下代码示例列出了服务器上的所有定位符。对于每个定位符，它将显示相关资产和访问策略的 ID。它也显示权限的类型、到期日期和访问资产的完整路径。</source>
          <target state="new">以下代码示例列出了服务器上的所有定位符。对于每个定位符，它将显示相关资产和访问策略的 ID。它也显示权限的类型、到期日期和访问资产的完整路径。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>请注意，访问资产的定位符路径仅仅是访问资产的基本 URL。若要创建用户或应用程序可以浏览到的单个文件的直接路径，你的代码必须将特定文件路径添加到定位符路径。有关如何进行操作的详细信息，请参阅主题<bpt id="p1">[</bpt>使用适用于 .NET 的媒体服务 SDK 传递资产<ept id="p1">](/documentation/articles/media-services-deliver-streaming-content)</ept>。</source>
          <target state="new">请注意，访问资产的定位符路径仅仅是访问资产的基本 URL。若要创建用户或应用程序可以浏览到的单个文件的直接路径，你的代码必须将特定文件路径添加到定位符路径。有关如何进行操作的详细信息，请参阅主题<bpt id="p1">[</bpt>使用适用于 .NET 的媒体服务 SDK 传递资产<ept id="p1">](/documentation/articles/media-services-deliver-streaming-content)</ept>。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>枚举大型实体集合</source>
          <target state="new">枚举大型实体集合</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>查询实体时，一次返回的实体数限制为 1000 个，因为公共 REST v2 将查询结果数限制为 1000 个。枚举大型实体集合时，需要使用 Skip 和 Take。</source>
          <target state="new">查询实体时，一次返回的实体数限制为 1000 个，因为公共 REST v2 将查询结果数限制为 1000 个。枚举大型实体集合时，需要使用 Skip 和 Take。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>以下函数将循环访问所提供的媒体服务帐户中的所有作业。媒体服务将在作业集合中返回 1000 个作业。该函数使用 Skip 和 Take 来确保枚举所有作业（如果你帐户中的作业超过 1000 个）。</source>
          <target state="new">以下函数将循环访问所提供的媒体服务帐户中的所有作业。媒体服务将在作业集合中返回 1000 个作业。该函数使用 Skip 和 Take 来确保枚举所有作业（如果你帐户中的作业超过 1000 个）。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Delete-an-asset"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>删除资产</source>
          <target state="new"><ph id="ph1">&lt;a id="Delete-an-asset"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>删除资产</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>以下示例删除了一个资产。</source>
          <target state="new">以下示例删除了一个资产。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Delete-a-job"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>删除作业</source>
          <target state="new"><ph id="ph1">&lt;a id="Delete-a-job"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>删除作业</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>若要删除某一作业，必须检查该作业的状态是否如“状态”属性中所示。可以删除已完成或已取消的作业，但是必须先取消处于其他状态（如已排队、已计划、或处理中）的作业，然后才可以删除这些作业。以下代码示例演示了一种删除作业的方法，通过检查作业状态，然后当作业状态为已完成或取消时，删除作业。此代码取决于本主题中的上一节，用于获取对作业的引用：获取作业引用。</source>
          <target state="new">若要删除某一作业，必须检查该作业的状态是否如“状态”属性中所示。可以删除已完成或已取消的作业，但是必须先取消处于其他状态（如已排队、已计划、或处理中）的作业，然后才可以删除这些作业。以下代码示例演示了一种删除作业的方法，通过检查作业状态，然后当作业状态为已完成或取消时，删除作业。此代码取决于本主题中的上一节，用于获取对作业的引用：获取作业引用。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Delete-an-access-policy"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>删除访问策略</source>
          <target state="new"><ph id="ph1">&lt;a id="Delete-an-access-policy"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph>删除访问策略</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>以下代码示例演示如何基于策略 ID，获取对访问策略的引用，然后删除该策略。</source>
          <target state="new">以下代码示例演示如何基于策略 ID，获取对访问策略的引用，然后删除该策略。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>