<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7b8fe590fcf6556386192362faab60407b2c85f8</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>通知中心突发新闻教程 - iOS</source>
          <target state="new">通知中心突发新闻教程 - iOS</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用 Azure 服务总线通知中心向 iOS 设备发送突发新闻通知。</source>
          <target state="new">了解如何使用 Azure 服务总线通知中心向 iOS 设备发送突发新闻通知。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用通知中心发送突发新闻</source>
          <target state="new">使用通知中心发送突发新闻</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本主题说明如何使用 Azure 通知中心将突发新闻通知广播到 iOS 应用程序。完成时，你可以注册感兴趣的突发新闻类别并仅接收这些类别的推送通知。此方案对于很多应用程序来说是常见模式，在其中必须将通知发送到以前声明过对它们感兴趣的一组用户，这样的应用程序有 RSS 阅读器、针对音乐迷的应用程序等。</source>
          <target state="new">本主题说明如何使用 Azure 通知中心将突发新闻通知广播到 iOS 应用程序。完成时，你可以注册感兴趣的突发新闻类别并仅接收这些类别的推送通知。此方案对于很多应用程序来说是常见模式，在其中必须将通知发送到以前声明过对它们感兴趣的一组用户，这样的应用程序有 RSS 阅读器、针对音乐迷的应用程序等。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>在创建通知中心的注册时，通过加入一个或多个<bpt id="p1">_</bpt>标记<ept id="p1">_</ept>来启用广播方案。将通知发送到标签时，已注册该标签的所有设备将接收通知。因为标签是简单的字符串，它们不必提前设置。有关标记的详细信息，请参阅<bpt id="p2">[</bpt><ept id="p2">通知中心指南]</ept>。</source>
          <target state="new">在创建通知中心的注册时，通过加入一个或多个<bpt id="p1">_</bpt>标记<ept id="p1">_</ept>来启用广播方案。将通知发送到标签时，已注册该标签的所有设备将接收通知。因为标签是简单的字符串，它们不必提前设置。有关标记的详细信息，请参阅<bpt id="p2">[</bpt><ept id="p2">通知中心指南]</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>先决条件</source>
          <target state="new">先决条件</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>本主题以你在<bpt id="p1">[</bpt>通知中心入门<ept id="p1">][get-started]</ept>中创建的应用程序为基础。在开始本教程之前，必须先阅读<bpt id="p2">[</bpt>通知中心入门<ept id="p2">][get-started]</ept>。</source>
          <target state="new">本主题以你在<bpt id="p1">[</bpt>通知中心入门<ept id="p1">][get-started]</ept>中创建的应用程序为基础。在开始本教程之前，必须先阅读<bpt id="p2">[</bpt>通知中心入门<ept id="p2">][get-started]</ept>。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>向应用程序中添加类别选择</source>
          <target state="new">向应用程序中添加类别选择</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>第一步是向现有 Storyboard 添加 UI 元素，这些元素允许用户选择要注册的类别。用户选择的类别存储在设备上。应用程序启动时，使用所选类别作为标签在你的通知中心创建设备注册。</source>
          <target state="new">第一步是向现有 Storyboard 添加 UI 元素，这些元素允许用户选择要注册的类别。用户选择的类别存储在设备上。应用程序启动时，使用所选类别作为标签在你的通知中心创建设备注册。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>在 MainStoryboard\_iPhone.storyboard 中，从对象库添加以下组件：</source>
          <target state="new">在 MainStoryboard\_iPhone.storyboard 中，从对象库添加以下组件：</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>具有“Breaking News”文本的标签</source>
          <target state="new">具有“Breaking News”文本的标签</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>具有“World”、“Politics”、“Business”、“Technology”、“Science”、“Sports”类别文本的标签</source>
          <target state="new">具有“World”、“Politics”、“Business”、“Technology”、“Science”、“Sports”类别文本的标签</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>六个开关，每个类别一个。默认情况下，每个开关的 <bpt id="p1">**</bpt>State<ept id="p1">**</ept> 设置为 <bpt id="p2">**</bpt>Off<ept id="p2">**</ept>。</source>
          <target state="new">六个开关，每个类别一个。默认情况下，每个开关的 <bpt id="p1">**</bpt>State<ept id="p1">**</ept> 设置为 <bpt id="p2">**</bpt>Off<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>一个标有“Subscribe”的按钮</source>
          <target state="new">一个标有“Subscribe”的按钮</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Storyboard 应类似于：</source>
          <target state="new">Storyboard 应类似于：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>在助手编辑器中，为所有开关创建插座并称它们为“WorldSwitch”、“PoliticsSwitch”、“BusinessSwitch”、“TechnologySwitch”、“ScienceSwitch”、“SportsSwitch”</source>
          <target state="new">在助手编辑器中，为所有开关创建插座并称它们为“WorldSwitch”、“PoliticsSwitch”、“BusinessSwitch”、“TechnologySwitch”、“ScienceSwitch”、“SportsSwitch”</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>为名为“subscribe”的按钮创建一个操作。ViewController.h 应包含以下内容：</source>
          <target state="new">为名为“subscribe”的按钮创建一个操作。ViewController.h 应包含以下内容：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>创建名为 <ph id="ph1">`Notifications`</ph> 的新 <bpt id="p1">**</bpt>Cocoa Touch 类<ept id="p1">**</ept>。在文件 Notifications.h 的接口部分中复制以下代码：</source>
          <target state="new">创建名为 <ph id="ph1">`Notifications`</ph> 的新 <bpt id="p1">**</bpt>Cocoa Touch 类<ept id="p1">**</ept>。在文件 Notifications.h 的接口部分中复制以下代码：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>将以下导入指令添加到 Notifications.m：</source>
          <target state="new">将以下导入指令添加到 Notifications.m：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>在文件 Notifications.m 的实现部分中复制以下代码。</source>
          <target state="new">在文件 Notifications.m 的实现部分中复制以下代码。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>此类使用本地存储区存储和检索此设备将要接收的新闻类别。此外，它还包含了一个方法用于通过<bpt id="p1">[</bpt>模板<ept id="p1">](/documentation/articles/notification-hubs-templates)</ept>注册来注册这些类别。</source>
          <target state="new">此类使用本地存储区存储和检索此设备将要接收的新闻类别。此外，它还包含了一个方法用于通过<bpt id="p1">[</bpt>模板<ept id="p1">](/documentation/articles/notification-hubs-templates)</ept>注册来注册这些类别。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>在 AppDelegate.h 文件中，添加 Notifications.h 的导入语句，并添加 Notifications 类实例的属性：</source>
          <target state="new">在 AppDelegate.h 文件中，添加 Notifications.h 的导入语句，并添加 Notifications 类实例的属性：</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>在 AppDelegate.m 的 <bpt id="p1">**</bpt>didFinishLaunchingWithOptions<ept id="p1">**</ept> 方法中，于方法开头添加代码来初始化 notifications 实例：</source>
          <target state="new">在 AppDelegate.m 的 <bpt id="p1">**</bpt>didFinishLaunchingWithOptions<ept id="p1">**</ept> 方法中，于方法开头添加代码来初始化 notifications 实例：</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>在 hubinfo.h 中定义的 <ph id="ph1">`HUBNAME`</ph> 和 <ph id="ph2">`HUBLISTENACCESS`</ph> 内，<ph id="ph3">`&lt;hub name&gt;`</ph> 和 <ph id="ph4">`&lt;connection string with listen access&gt;`</ph> 占位符应已替换为你的通知中心的名称和你之前获取的 <bpt id="p1">*</bpt>DefaultListenSharedAccessSignature<ept id="p1">*</ept> 的连接字符串。</source>
          <target state="new">在 hubinfo.h 中定义的 <ph id="ph1">`HUBNAME`</ph> 和 <ph id="ph2">`HUBLISTENACCESS`</ph> 内，<ph id="ph3">`&lt;hub name&gt;`</ph> 和 <ph id="ph4">`&lt;connection string with listen access&gt;`</ph> 占位符应已替换为你的通知中心的名称和你之前获取的 <bpt id="p1">*</bpt>DefaultListenSharedAccessSignature<ept id="p1">*</ept> 的连接字符串。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>由于使用客户端应用程序分发的凭据通常是不安全的，你只应使用客户端应用程序分发具有侦听访问权限的密钥。侦听访问权限允许应用程序注册通知，但是无法修改现有注册，也无法发送通知。在受保护的后端服务中使用完全访问权限密钥，以便发送通知和更改现有注册。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>由于使用客户端应用程序分发的凭据通常是不安全的，你只应使用客户端应用程序分发具有侦听访问权限的密钥。侦听访问权限允许应用程序注册通知，但是无法修改现有注册，也无法发送通知。在受保护的后端服务中使用完全访问权限密钥，以便发送通知和更改现有注册。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>在 AppDelegate.m 的 <bpt id="p1">**</bpt>didRegisterForRemoteNotificationsWithDeviceToken<ept id="p1">**</ept> 方法中，使用以下代码来替换方法中的代码，以将设备令牌传递给 notifications 类。notifications 类将通知注册到类别。如果用户更改类别选择，我们将调用 <ph id="ph1">`subscribeWithCategories`</ph> 方法以响应“订阅”按钮来进行更新。</source>
          <target state="new">在 AppDelegate.m 的 <bpt id="p1">**</bpt>didRegisterForRemoteNotificationsWithDeviceToken<ept id="p1">**</ept> 方法中，使用以下代码来替换方法中的代码，以将设备令牌传递给 notifications 类。notifications 类将通知注册到类别。如果用户更改类别选择，我们将调用 <ph id="ph1">`subscribeWithCategories`</ph> 方法以响应“订阅”按钮来进行更新。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>由于 Apple 推送通知服务 (APNS) 分配的设备标记随时可能更改，因此你应该经常注册通知以避免通知失败。此示例在每次应用程序启动时注册通知。对于经常运行（一天一次以上）的应用程序，如果每次注册间隔时间不到一天，你可以跳过注册来节省带宽。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>由于 Apple 推送通知服务 (APNS) 分配的设备标记随时可能更改，因此你应该经常注册通知以避免通知失败。此示例在每次应用程序启动时注册通知。对于经常运行（一天一次以上）的应用程序，如果每次注册间隔时间不到一天，你可以跳过注册来节省带宽。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>请注意，此时 <bpt id="p1">**</bpt>didRegisterForRemoteNotificationsWithDeviceToken<ept id="p1">**</ept> 方法中应没有其他代码。</source>
          <target state="new">请注意，此时 <bpt id="p1">**</bpt>didRegisterForRemoteNotificationsWithDeviceToken<ept id="p1">**</ept> 方法中应没有其他代码。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>完成<bpt id="p1">[</bpt>通知中心入门<ept id="p1">][get-started]</ept>教程时，以下方法应已经出现在 AppDelegate.m 中。否则，请添加这些方法。</source>
          <target state="new">完成<bpt id="p1">[</bpt>通知中心入门<ept id="p1">][get-started]</ept>教程时，以下方法应已经出现在 AppDelegate.m 中。否则，请添加这些方法。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>此方法通过显示简单的 <bpt id="p1">**</bpt>UIAlert<ept id="p1">**</ept> 处理运行应用程序时收到的通知。</source>
          <target state="new">此方法通过显示简单的 <bpt id="p1">**</bpt>UIAlert<ept id="p1">**</ept> 处理运行应用程序时收到的通知。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>在 ViewController.m 中，添加 AppDelegate.h 的导入语句，并将以下代码复制到 XCode 生成的 <bpt id="p1">**</bpt>subscribe<ept id="p1">**</ept> 方法中。此代码将更新通知注册，以使用用户在用户界面中选择的新类别标记。</source>
          <target state="new">在 ViewController.m 中，添加 AppDelegate.h 的导入语句，并将以下代码复制到 XCode 生成的 <bpt id="p1">**</bpt>subscribe<ept id="p1">**</ept> 方法中。此代码将更新通知注册，以使用用户在用户界面中选择的新类别标记。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>此方法创建一个类别的 <bpt id="p1">**</bpt>NSMutableArray<ept id="p1">**</ept> 并使用 <bpt id="p2">**</bpt>Notifications<ept id="p2">**</ept> 类将该列表存储在本地存储区中，将相应的标记注册到你的通知中心。更改类别时，使用新类别重新创建注册。</source>
          <target state="new">此方法创建一个类别的 <bpt id="p1">**</bpt>NSMutableArray<ept id="p1">**</ept> 并使用 <bpt id="p2">**</bpt>Notifications<ept id="p2">**</ept> 类将该列表存储在本地存储区中，将相应的标记注册到你的通知中心。更改类别时，使用新类别重新创建注册。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>在 ViewController.m 中，于 <bpt id="p1">**</bpt>viewDidLoad<ept id="p1">**</ept> 方法中添加以下代码，以根据前面保存的类别来设置用户界面。</source>
          <target state="new">在 ViewController.m 中，于 <bpt id="p1">**</bpt>viewDidLoad<ept id="p1">**</ept> 方法中添加以下代码，以根据前面保存的类别来设置用户界面。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>应用程序现在可以在设备的本地存储区中存储一组类别，每当应用程序启动时，将使用这些类别注册到通知中心。用户可以在运行时更改选择的类别，然后单击 <bpt id="p1">**</bpt>subscribe<ept id="p1">**</ept> 方法来更新设备注册。接下来，你将更新应用程序，以直接从应用本身发送突发新闻通知。</source>
          <target state="new">应用程序现在可以在设备的本地存储区中存储一组类别，每当应用程序启动时，将使用这些类别注册到通知中心。用户可以在运行时更改选择的类别，然后单击 <bpt id="p1">**</bpt>subscribe<ept id="p1">**</ept> 方法来更新设备注册。接下来，你将更新应用程序，以直接从应用本身发送突发新闻通知。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>（可选）发送带标记的通知</source>
          <target state="new">（可选）发送带标记的通知</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>如果你无权访问 Visual Studio，可以跳到下一部分，并从应用内部发送通知。你还可以在 [Azure 经典门户] 中使用通知中心的调试选项卡发送适当的模板通知。</source>
          <target state="new">如果你无权访问 Visual Studio，可以跳到下一部分，并从应用内部发送通知。你还可以在 [Azure 经典门户] 中使用通知中心的调试选项卡发送适当的模板通知。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>（可选）从设备发送通知</source>
          <target state="new">（可选）从设备发送通知</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>通常，通知将由后端服务发送，但你也可以直接从应用发送突发新闻通知。为此，我们需要更新<bpt id="p1">[</bpt>通知中心入门<ept id="p1">][get-started]</ept>教程中所定义的 <ph id="ph1">`SendNotificationRESTAPI`</ph> 方法。</source>
          <target state="new">通常，通知将由后端服务发送，但你也可以直接从应用发送突发新闻通知。为此，我们需要更新<bpt id="p1">[</bpt>通知中心入门<ept id="p1">][get-started]</ept>教程中所定义的 <ph id="ph1">`SendNotificationRESTAPI`</ph> 方法。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>在 ViewController.m 中，按如下所示更新 <ph id="ph1">`SendNotificationRESTAPI`</ph> 方法，使其接受类别标记的参数并发送适当的<bpt id="p1">[</bpt>模板<ept id="p1">](/documentation/articles/notification-hubs-templates)</ept>通知。</source>
          <target state="new">在 ViewController.m 中，按如下所示更新 <ph id="ph1">`SendNotificationRESTAPI`</ph> 方法，使其接受类别标记的参数并发送适当的<bpt id="p1">[</bpt>模板<ept id="p1">](/documentation/articles/notification-hubs-templates)</ept>通知。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>在 ViewController.m 中，更新“发送通知”操作（如以下代码所示）。因此，它将使用每个标记分别发送通知，并发送到多个平台。</source>
          <target state="new">在 ViewController.m 中，更新“发送通知”操作（如以下代码所示）。因此，它将使用每个标记分别发送通知，并发送到多个平台。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>重新生成项目，并确定没有生成错误。</source>
          <target state="new">重新生成项目，并确定没有生成错误。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>运行应用并生成通知</source>
          <target state="new">运行应用并生成通知</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>按“运行”按钮生成项目并启动应用程序。选择要订阅的一些突发新闻选项，然后按“订阅”按钮。你应会看到一个对话框，表示已订阅通知。</source>
          <target state="new">按“运行”按钮生成项目并启动应用程序。选择要订阅的一些突发新闻选项，然后按“订阅”按钮。你应会看到一个对话框，表示已订阅通知。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>选择“订阅”时，应用程序将所选类别转换为标记并针对所选标签从通知中心请求注册新设备。</source>
          <target state="new">选择“订阅”时，应用程序将所选类别转换为标记并针对所选标签从通知中心请求注册新设备。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>输入要以突发新闻形式发送的消息，然后按“发送通知”按钮。或者，运行 .NET 控制台应用以生成通知。</source>
          <target state="new">输入要以突发新闻形式发送的消息，然后按“发送通知”按钮。或者，运行 .NET 控制台应用以生成通知。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>每个订阅突发新闻的设备都会收到刚刚发送的突发新闻通知。</source>
          <target state="new">每个订阅突发新闻的设备都会收到刚刚发送的突发新闻通知。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>在本教程中，我们了解了如何按类别广播突发消息。请考虑学习侧重说明其他高级通知中心方案的以下教程之一：</source>
          <target state="new">在本教程中，我们了解了如何按类别广播突发消息。请考虑学习侧重说明其他高级通知中心方案的以下教程之一：</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>使用通知中心广播本地化的突发新闻</source>
          <target state="new">使用通知中心广播本地化的突发新闻</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>了解如何扩展突发新闻应用程序以允许发送本地化的通知。</source>
          <target state="new">了解如何扩展突发新闻应用程序以允许发送本地化的通知。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>