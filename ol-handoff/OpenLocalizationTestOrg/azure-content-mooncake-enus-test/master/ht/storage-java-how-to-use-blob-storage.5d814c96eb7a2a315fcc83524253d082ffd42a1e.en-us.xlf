<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75d24d896a824dc25668954d06d30554f0287d9b</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何通过 Java 使用 Azure Blob 存储 | Azure</source>
          <target state="new">如何通过 Java 使用 Azure Blob 存储 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用 Azure Blob 存储上载、下载、列出和删除 Blob 内容。用 Java 编写的示例。</source>
          <target state="new">了解如何使用 Azure Blob 存储上载、下载、列出和删除 Blob 内容。用 Java 编写的示例。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何通过 Java 使用 Blob 存储</source>
          <target state="new">如何通过 Java 使用 Blob 存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本文将演示如何使用 Azure Blob 存储执行常见任务。这些示例用 Java 编写并使用 <bpt id="p1">[</bpt>Azure Storage SDK for Java<ept id="p1">][]</ept>。涉及的任务包括<bpt id="p2">**</bpt>上传<ept id="p2">**</ept>、<bpt id="p3">**</bpt>列出<ept id="p3">**</ept>、<bpt id="p4">**</bpt>下载<ept id="p4">**</ept>和<bpt id="p5">**</bpt>删除<ept id="p5">**</ept> Blob。有关 Blob 的详细信息，请参阅<bpt id="p6">[</bpt>后续步骤<ept id="p6">](#NextSteps)</ept>部分。</source>
          <target state="new">本文将演示如何使用 Azure Blob 存储执行常见任务。这些示例用 Java 编写并使用 <bpt id="p1">[</bpt>Azure Storage SDK for Java<ept id="p1">][]</ept>。涉及的任务包括<bpt id="p2">**</bpt>上传<ept id="p2">**</ept>、<bpt id="p3">**</bpt>列出<ept id="p3">**</ept>、<bpt id="p4">**</bpt>下载<ept id="p4">**</ept>和<bpt id="p5">**</bpt>删除<ept id="p5">**</ept> Blob。有关 Blob 的详细信息，请参阅<bpt id="p6">[</bpt>后续步骤<ept id="p6">](#NextSteps)</ept>部分。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> SDK 提供给在 Android 设备上使用 Azure 存储空间的开发人员。有关详细信息，请参阅 <bpt id="p1">[</bpt>Azure Storage SDK for Android<ept id="p1">][]</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> SDK 提供给在 Android 设备上使用 Azure 存储空间的开发人员。有关详细信息，请参阅 <bpt id="p1">[</bpt>Azure Storage SDK for Android<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a name="CreateApplication"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>创建 Java 应用程序</source>
          <target state="new"><ph id="ph1">&lt;a name="CreateApplication"&gt;</ph> <ph id="ph2">&lt;/a&gt;</ph>创建 Java 应用程序</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>在本文中，你将使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。</source>
          <target state="new">在本文中，你将使用存储功能，这些功能可在本地 Java 应用程序中运行，或在 Azure 的 Web 角色或辅助角色中通过运行的代码来运行。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>为此，你将需要安装 Java 开发工具包 (JDK)，并在你的 Azure 订阅中创建一个 Azure 存储帐户。完成此操作后，你将需要验证开发系统满足最低要求和 GitHub 上的 <bpt id="p1">[</bpt>Azure Storage SDK for Java<ept id="p1">][]</ept> 存储库中列出的依赖项。如果你的系统满足这些要求，你可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。完成这些任务后，您将能够创建一个 Java 应用程序，以便使用本文中的示例。</source>
          <target state="new">为此，你将需要安装 Java 开发工具包 (JDK)，并在你的 Azure 订阅中创建一个 Azure 存储帐户。完成此操作后，你将需要验证开发系统满足最低要求和 GitHub 上的 <bpt id="p1">[</bpt>Azure Storage SDK for Java<ept id="p1">][]</ept> 存储库中列出的依赖项。如果你的系统满足这些要求，你可以按照说明下载和安装系统中该存储库的 Azure Storage Libraries for Java。完成这些任务后，您将能够创建一个 Java 应用程序，以便使用本文中的示例。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>配置你的应用程序以访问 Blob 存储</source>
          <target state="new">配置你的应用程序以访问 Blob 存储</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>将下列导入语句添加到要在其中使用 Azure 存储 API 以访问 Blob 的 Java 文件的顶部：</source>
          <target state="new">将下列导入语句添加到要在其中使用 Azure 存储 API 以访问 Blob 的 Java 文件的顶部：</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>设置 Azure 存储连接字符串</source>
          <target state="new">设置 Azure 存储连接字符串</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 <bpt id="p1">*</bpt>AccountName<ept id="p1">*</ept> 和 <bpt id="p2">*</bpt>AccountKey<ept id="p2">*</ept> 值使用<bpt id="p3">[</bpt>管理门户<ept id="p3">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的名称和存储帐户的主访问密钥。下面的示例演示如何声明一个静态字段以保存连接字符串。</source>
          <target state="new">Azure 存储客户端使用存储连接字符串来存储用于访问数据管理服务的终结点和凭据。在客户端应用程序中运行时，必须提供以下格式的存储连接字符串，并对 <bpt id="p1">*</bpt>AccountName<ept id="p1">*</ept> 和 <bpt id="p2">*</bpt>AccountKey<ept id="p2">*</ept> 值使用<bpt id="p3">[</bpt>管理门户<ept id="p3">](https://manage.windowsazure.cn)</ept>中列出的存储帐户的名称和存储帐户的主访问密钥。下面的示例演示如何声明一个静态字段以保存连接字符串。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件  <bpt id="p1">*</bpt>ServiceConfiguration.cscfg<ept id="p1">*</ept> 中，并可通过调用 <bpt id="p2">**</bpt>RoleEnvironment.getConfigurationSettings<ept id="p2">**</ept> 方法进行访问。下面的示例从服务配置文件中名为  <bpt id="p3">*</bpt>StorageConnectionString<ept id="p3">*</ept> 的 <bpt id="p4">**</bpt>Setting<ept id="p4">**</ept> 元素获取连接字符串</source>
          <target state="new">在 Azure 的角色中运行的应用程序中，此字符串可存储在服务配置文件  <bpt id="p1">*</bpt>ServiceConfiguration.cscfg<ept id="p1">*</ept> 中，并可通过调用 <bpt id="p2">**</bpt>RoleEnvironment.getConfigurationSettings<ept id="p2">**</ept> 方法进行访问。下面的示例从服务配置文件中名为  <bpt id="p3">*</bpt>StorageConnectionString<ept id="p3">*</ept> 的 <bpt id="p4">**</bpt>Setting<ept id="p4">**</ept> 元素获取连接字符串</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>下面的示例假定你使用了这两个方法之一来获取存储连接字符串。</source>
          <target state="new">下面的示例假定你使用了这两个方法之一来获取存储连接字符串。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>创建容器</source>
          <target state="new">创建容器</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>利用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 对象，可以获得容器和 Blob 的引用对象。以下代码将创建 <bpt id="p2">**</bpt>CloudBlobClient<ept id="p2">**</ept> 对象。</source>
          <target state="new">利用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 对象，可以获得容器和 Blob 的引用对象。以下代码将创建 <bpt id="p2">**</bpt>CloudBlobClient<ept id="p2">**</ept> 对象。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph> 还有其他方式来创建 <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> 对象；有关详细信息，请参阅 <bpt id="p2">[</bpt><ept id="p2">Azure 存储空间客户端 SDK 参考]</ept>中的 <bpt id="p3">**</bpt>CloudStorageAccount<ept id="p3">**</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph> 还有其他方式来创建 <bpt id="p1">**</bpt>CloudStorageAccount<ept id="p1">**</ept> 对象；有关详细信息，请参阅 <bpt id="p2">[</bpt><ept id="p2">Azure 存储空间客户端 SDK 参考]</ept>中的 <bpt id="p3">**</bpt>CloudStorageAccount<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 对象获取对你要使用的容器的引用。可使用 <bpt id="p2">**</bpt>createIfNotExists<ept id="p2">**</ept> 方法创建容器（如果不存在），否则将返回现有容器。默认情况下，新容器是专用容器，因此您必须指定存储访问密钥（如之前所做的那样）才能从该容器下载 Blob。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>CloudBlobClient<ept id="p1">**</ept> 对象获取对你要使用的容器的引用。可使用 <bpt id="p2">**</bpt>createIfNotExists<ept id="p2">**</ept> 方法创建容器（如果不存在），否则将返回现有容器。默认情况下，新容器是专用容器，因此您必须指定存储访问密钥（如之前所做的那样）才能从该容器下载 Blob。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>可选：配置进行公共访问的容器</source>
          <target state="new">可选：配置进行公共访问的容器</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>默认情况下，容器的权限已配置为允许进行私有访问，但你也可以轻松地将容器的权限配置为允许 Internet 上的用户进行公开的、只读的访问：</source>
          <target state="new">默认情况下，容器的权限已配置为允许进行私有访问，但你也可以轻松地将容器的权限配置为允许 Internet 上的用户进行公开的、只读的访问：</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>将 Blob 上传到容器中</source>
          <target state="new">将 Blob 上传到容器中</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>若要将文件上传到 Blob，请获取容器引用，并使用它获取 Blob 引用。获取 Blob 引用后，可以通过对该 Blob 引用调用 upload 来上传任何数据流。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的代码示例演示了这一点，并假定已创建容器。</source>
          <target state="new">若要将文件上传到 Blob，请获取容器引用，并使用它获取 Blob 引用。获取 Blob 引用后，可以通过对该 Blob 引用调用 upload 来上传任何数据流。此操作将创建 Blob（如果该 Blob 不存在），或者覆盖它（如果该 Blob 存在）。下面的代码示例演示了这一点，并假定已创建容器。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>列出容器中的 Blob</source>
          <target state="new">列出容器中的 Blob</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>若要列出容器中的 Blob，请先获取容器引用，就像上传 Blob 时执行的操作一样。可将容器的 <bpt id="p1">**</bpt>listBlobs<ept id="p1">**</ept> 方法用于 <bpt id="p2">**</bpt>for<ept id="p2">**</ept> 循环。以下代码将容器中每个 Blob 的 URI 输出到控制台。</source>
          <target state="new">若要列出容器中的 Blob，请先获取容器引用，就像上传 Blob 时执行的操作一样。可将容器的 <bpt id="p1">**</bpt>listBlobs<ept id="p1">**</ept> 方法用于 <bpt id="p2">**</bpt>for<ept id="p2">**</ept> 循环。以下代码将容器中每个 Blob 的 URI 输出到控制台。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>请注意，你可以命名 Blob，并在其名称中包含路径信息。这将创建一个虚拟目录结构，你可以像传统文件系统一样组织和遍历。注意，该目录结构仅仅是虚拟的 - Blob 存储中唯一可用的资源是容器和 Blob。但是，客户端库提供 <bpt id="p1">**</bpt>CloudBlobDirectory<ept id="p1">**</ept> 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。</source>
          <target state="new">请注意，你可以命名 Blob，并在其名称中包含路径信息。这将创建一个虚拟目录结构，你可以像传统文件系统一样组织和遍历。注意，该目录结构仅仅是虚拟的 - Blob 存储中唯一可用的资源是容器和 Blob。但是，客户端库提供 <bpt id="p1">**</bpt>CloudBlobDirectory<ept id="p1">**</ept> 对象来引用虚拟目录，并简化了以这种方式组织的 Blob 的使用过程。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>例如，你可以创建一个名为“photos”的容器，你可以在其中上传名为“rootphoto1”、“2010/photo1”、“2010/photo2”和“2011/photo1”的 Blob。这将在“photos”容器中创建虚拟目录“2010”和“2011”。当你对“photos”容器调用 <bpt id="p1">**</bpt>listBlobs<ept id="p1">**</ept> 时，返回的集合将包含表示最高层中所含目录和 Blob 的 <bpt id="p2">**</bpt>CloudBlobDirectory<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>CloudBlob<ept id="p3">**</ept> 对象。在本例中，将返回目录“2010”和“2011”以及照片“rootphoto1”。可使用 <bpt id="p4">**</bpt>instanceof<ept id="p4">**</ept> 运算符来区分这些对象。</source>
          <target state="new">例如，你可以创建一个名为“photos”的容器，你可以在其中上传名为“rootphoto1”、“2010/photo1”、“2010/photo2”和“2011/photo1”的 Blob。这将在“photos”容器中创建虚拟目录“2010”和“2011”。当你对“photos”容器调用 <bpt id="p1">**</bpt>listBlobs<ept id="p1">**</ept> 时，返回的集合将包含表示最高层中所含目录和 Blob 的 <bpt id="p2">**</bpt>CloudBlobDirectory<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>CloudBlob<ept id="p3">**</ept> 对象。在本例中，将返回目录“2010”和“2011”以及照片“rootphoto1”。可使用 <bpt id="p4">**</bpt>instanceof<ept id="p4">**</ept> 运算符来区分这些对象。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>还可以向 <bpt id="p1">**</bpt>listBlobs<ept id="p1">**</ept> 方法传入参数，并将 <bpt id="p2">**</bpt>useFlatBlobListing<ept id="p2">**</ept> 参数设置为 true。这将导致返回每个 Blob，而无论目录如何。有关详细信息，请参阅 <bpt id="p3">[</bpt><ept id="p3">Azure 存储空间客户端 SDK 参考]</ept>中的 <bpt id="p4">**</bpt>CloudBlobContainer.listBlobs<ept id="p4">**</ept>。</source>
          <target state="new">还可以向 <bpt id="p1">**</bpt>listBlobs<ept id="p1">**</ept> 方法传入参数，并将 <bpt id="p2">**</bpt>useFlatBlobListing<ept id="p2">**</ept> 参数设置为 true。这将导致返回每个 Blob，而无论目录如何。有关详细信息，请参阅 <bpt id="p3">[</bpt><ept id="p3">Azure 存储空间客户端 SDK 参考]</ept>中的 <bpt id="p4">**</bpt>CloudBlobContainer.listBlobs<ept id="p4">**</ept>。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>下载 Blob</source>
          <target state="new">下载 Blob</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>若要下载 Blob，请执行之前用于上传 Blob 的相同步骤以获取 Blob 引用。在上传示例中，您对 Blob 对象调用了 upload。在下面的示例中，调用 download 以将 Blob 内容传输到可用于将 Blob 保存到本地文件的流对象（如 <bpt id="p1">**</bpt>FileOutputStream<ept id="p1">**</ept>）。</source>
          <target state="new">若要下载 Blob，请执行之前用于上传 Blob 的相同步骤以获取 Blob 引用。在上传示例中，您对 Blob 对象调用了 upload。在下面的示例中，调用 download 以将 Blob 内容传输到可用于将 Blob 保存到本地文件的流对象（如 <bpt id="p1">**</bpt>FileOutputStream<ept id="p1">**</ept>）。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>删除 Blob</source>
          <target state="new">删除 Blob</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>若要删除 Blob，请获取 Blob 引用，然后调用 <bpt id="p1">**</bpt>deleteIfExists<ept id="p1">**</ept>。</source>
          <target state="new">若要删除 Blob，请获取 Blob 引用，然后调用 <bpt id="p1">**</bpt>deleteIfExists<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>删除 Blob 容器</source>
          <target state="new">删除 Blob 容器</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>最后，若要删除 Blob 容器，请获取 Blob 容器引用，然后调用 <bpt id="p1">**</bpt>deleteIfExists<ept id="p1">**</ept>。</source>
          <target state="new">最后，若要删除 Blob 容器，请获取 Blob 容器引用，然后调用 <bpt id="p1">**</bpt>deleteIfExists<ept id="p1">**</ept>。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>现在，你已了解有关 Blob 存储的基础知识，可单击下面的链接来了解更复杂的存储任务。</source>
          <target state="new">现在，你已了解有关 Blob 存储的基础知识，可单击下面的链接来了解更复杂的存储任务。</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Azure Storage SDK for Java</source>
          <target state="new">Azure Storage SDK for Java</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Azure 存储客户端 SDK 参考</source>
          <target state="new">Azure 存储客户端 SDK 参考</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Azure 存储 REST API</source>
          <target state="new">Azure 存储 REST API</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Azure 存储团队博客</source>
          <target state="new">Azure 存储团队博客</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>