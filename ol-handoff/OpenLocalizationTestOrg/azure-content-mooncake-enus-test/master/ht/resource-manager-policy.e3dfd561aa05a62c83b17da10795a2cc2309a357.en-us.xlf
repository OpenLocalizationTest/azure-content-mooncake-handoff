<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f36be8aff915973f7b21f35fbf872b0a94d6b88</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure 资源管理器策略 | Azure</source>
          <target state="new">Azure 资源管理器策略 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>介绍如何使用 Azure 资源管理器策略来防止订阅、资源组或单个资源等不同的范围发生冲突。</source>
          <target state="new">介绍如何使用 Azure 资源管理器策略来防止订阅、资源组或单个资源等不同的范围发生冲突。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用策略来管理资源和控制访问</source>
          <target state="new">使用策略来管理资源和控制访问</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure 资源管理器现在可让你通过自定义策略来控制访问。使用策略可以防止组织中的用户违反管理组织资源所需的惯例。</source>
          <target state="new">Azure 资源管理器现在可让你通过自定义策略来控制访问。使用策略可以防止组织中的用户违反管理组织资源所需的惯例。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>你可以创建策略定义来描述会明确遭到拒绝的操作或资源。你可以在所需范围（例如订阅、资源组或是单个资源）分配这些策略定义。</source>
          <target state="new">你可以创建策略定义来描述会明确遭到拒绝的操作或资源。你可以在所需范围（例如订阅、资源组或是单个资源）分配这些策略定义。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>在本文中，我们将说明可用于创建策略的策略定义语言的基本结构。然后说明如何在不同范围应用这些策略，最后演示有关如何通过 REST API 实现此目的的一些示例。</source>
          <target state="new">在本文中，我们将说明可用于创建策略的策略定义语言的基本结构。然后说明如何在不同范围应用这些策略，最后演示有关如何通过 REST API 实现此目的的一些示例。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>策略当前以预览版提供。</source>
          <target state="new">策略当前以预览版提供。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>策略与 RBAC 有什么不同？</source>
          <target state="new">策略与 RBAC 有什么不同？</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>策略与基于角色的访问控制之间有几个重要的差别，但首先你必须了解策略是和 RBAC 一起工作的。若要使用策略，用户必须通过 RBAC 完成身份验证。不同于 RBAC，策略是默认的允许和明确拒绝系统。</source>
          <target state="new">策略与基于角色的访问控制之间有几个重要的差别，但首先你必须了解策略是和 RBAC 一起工作的。若要使用策略，用户必须通过 RBAC 完成身份验证。不同于 RBAC，策略是默认的允许和明确拒绝系统。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>RBAC 着重于<bpt id="p1">**</bpt>用户<ept id="p1">**</ept>在不同的范围可执行的操作。例如，将特定用户添加到所需范围的资源组的参与者角色后，该用户便可对该资源组做出更改。</source>
          <target state="new">RBAC 着重于<bpt id="p1">**</bpt>用户<ept id="p1">**</ept>在不同的范围可执行的操作。例如，将特定用户添加到所需范围的资源组的参与者角色后，该用户便可对该资源组做出更改。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>策略着重于各种范围的<bpt id="p1">**</bpt>资源<ept id="p1">**</ept>操作。例如，通过策略，你可以控制可预配的资源类型，或限制可以预配资源的位置。</source>
          <target state="new">策略着重于各种范围的<bpt id="p1">**</bpt>资源<ept id="p1">**</ept>操作。例如，通过策略，你可以控制可预配的资源类型，或限制可以预配资源的位置。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>常见方案</source>
          <target state="new">常见方案</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>一个常见方案是为了费用分摊而要求提供部门标记。组织可能只想在有关联的适当成本中心时允许操作，否则将拒绝请求。这将帮助它们向适当的成本中心对所执行的操作收费。</source>
          <target state="new">一个常见方案是为了费用分摊而要求提供部门标记。组织可能只想在有关联的适当成本中心时允许操作，否则将拒绝请求。这将帮助它们向适当的成本中心对所执行的操作收费。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>另一个常见方案是组织可能想要控制创建资源的位置。或者它们可能想要通过仅允许预配特定类型的资源，来控制对资源的访问。</source>
          <target state="new">另一个常见方案是组织可能想要控制创建资源的位置。或者它们可能想要通过仅允许预配特定类型的资源，来控制对资源的访问。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>同样地，组织可以控制服务类别或为资源强制运行所需的命名约定。</source>
          <target state="new">同样地，组织可以控制服务类别或为资源强制运行所需的命名约定。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>使用策略可轻松实现这些方案，如下所述。</source>
          <target state="new">使用策略可轻松实现这些方案，如下所述。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>策略定义结构</source>
          <target state="new">策略定义结构</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>策略定义是使用 JSON 创建的。它包含定义操作和效果的一个或多个条件/逻辑运算符，告诉你满足条件时产生的效果。</source>
          <target state="new">策略定义是使用 JSON 创建的。它包含定义操作和效果的一个或多个条件/逻辑运算符，告诉你满足条件时产生的效果。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>简单而言，策略包含以下各项：</source>
          <target state="new">简单而言，策略包含以下各项：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>条件/逻辑运算符：<ept id="p1">**</ept>包含可通过一组逻辑运算符操作的条件集。</source>
          <target state="new"><bpt id="p1">**</bpt>条件/逻辑运算符：<ept id="p1">**</ept>包含可通过一组逻辑运算符操作的条件集。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>效果：<ept id="p1">**</ept>描述当满足条件时产生的效果 – 拒绝或审核。审核效果将发出警告事件服务日志。例如，管理员可以创建策略，如果有任何人创建大型 VM，则此策略会引发审核，然后管理员可以审查日志。</source>
          <target state="new"><bpt id="p1">**</bpt>效果：<ept id="p1">**</ept>描述当满足条件时产生的效果 – 拒绝或审核。审核效果将发出警告事件服务日志。例如，管理员可以创建策略，如果有任何人创建大型 VM，则此策略会引发审核，然后管理员可以审查日志。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>逻辑运算符</source>
          <target state="new">逻辑运算符</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>下面列出了支持的逻辑运算符和语法：</source>
          <target state="new">下面列出了支持的逻辑运算符和语法：</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>运算符名称</source>
          <target state="new">运算符名称</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>语法</source>
          <target state="new">语法</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Not</source>
          <target state="new">Not</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>"not" : {&amp;lt;condition or operator &amp;gt;}</source>
          <target state="new">"not" : {&amp;lt;condition or operator &amp;gt;}</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>And</source>
          <target state="new">And</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>"allOf" : [ {&amp;lt;condition or operator &amp;gt;},{&amp;lt;condition or operator &amp;gt;}]</source>
          <target state="new">"allOf" : [ {&amp;lt;condition or operator &amp;gt;},{&amp;lt;condition or operator &amp;gt;}]</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>或</source>
          <target state="new">或</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>"anyOf" : [ {&amp;lt;condition or operator &amp;gt;},{&amp;lt;condition or operator &amp;gt;}]</source>
          <target state="new">"anyOf" : [ {&amp;lt;condition or operator &amp;gt;},{&amp;lt;condition or operator &amp;gt;}]</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>资源管理器可让你通过嵌套的运算符在策略中指定复杂逻辑。例如，你可以拒绝在指定资源类型的特定位置创建资源。下面显示了嵌套运算符的示例。</source>
          <target state="new">资源管理器可让你通过嵌套的运算符在策略中指定复杂逻辑。例如，你可以拒绝在指定资源类型的特定位置创建资源。下面显示了嵌套运算符的示例。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>条件</source>
          <target state="new">条件</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>条件评估<bpt id="p1">**</bpt>字段<ept id="p1">**</ept>或<bpt id="p2">**</bpt>源<ept id="p2">**</ept>是否符合特定的准则。下面列出了支持的条件名称和语法：</source>
          <target state="new">条件评估<bpt id="p1">**</bpt>字段<ept id="p1">**</ept>或<bpt id="p2">**</bpt>源<ept id="p2">**</ept>是否符合特定的准则。下面列出了支持的条件名称和语法：</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>条件名称</source>
          <target state="new">条件名称</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>语法</source>
          <target state="new">语法</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>等于</source>
          <target state="new">等于</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>"equals" : "&amp;lt;value&amp;gt;"</source>
          <target state="new">"equals" : "&amp;lt;value&amp;gt;"</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Like</source>
          <target state="new">Like</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>"like" : "&amp;lt;value&amp;gt;"</source>
          <target state="new">"like" : "&amp;lt;value&amp;gt;"</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Contains</source>
          <target state="new">Contains</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>"contains" : "&amp;lt;value&amp;gt;"</source>
          <target state="new">"contains" : "&amp;lt;value&amp;gt;"</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In</source>
          <target state="new">In</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>"in" : [ "&amp;lt;value1&amp;gt;","&amp;lt;value2&amp;gt;" ]</source>
          <target state="new">"in" : [ "&amp;lt;value1&amp;gt;","&amp;lt;value2&amp;gt;" ]</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>ContainsKey</source>
          <target state="new">ContainsKey</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>"containsKey" : "&amp;lt;keyName&amp;gt;"</source>
          <target state="new">"containsKey" : "&amp;lt;keyName&amp;gt;"</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>字段和源</source>
          <target state="new">字段和源</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>条件是使用字段和源构成的。字段表示资源请求负载中的属性。源表示请求本身的特征。</source>
          <target state="new">条件是使用字段和源构成的。字段表示资源请求负载中的属性。源表示请求本身的特征。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>支持以下字段和源：</source>
          <target state="new">支持以下字段和源：</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>字段：<bpt id="p1">**</bpt>name<ept id="p1">**</ept>、<bpt id="p2">**</bpt>kind<ept id="p2">**</ept>、<bpt id="p3">**</bpt>type<ept id="p3">**</ept>、<bpt id="p4">**</bpt>location<ept id="p4">**</ept>、<bpt id="p5">**</bpt>tags<ept id="p5">**</ept>、<bpt id="p6">**</bpt>tags.<ept id="p6">**</ept>*。</source>
          <target state="new">字段：<bpt id="p1">**</bpt>name<ept id="p1">**</ept>、<bpt id="p2">**</bpt>kind<ept id="p2">**</ept>、<bpt id="p3">**</bpt>type<ept id="p3">**</ept>、<bpt id="p4">**</bpt>location<ept id="p4">**</ept>、<bpt id="p5">**</bpt>tags<ept id="p5">**</ept>、<bpt id="p6">**</bpt>tags.<ept id="p6">**</ept>*。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>源：<bpt id="p1">**</bpt>action<ept id="p1">**</ept></source>
          <target state="new">源：<bpt id="p1">**</bpt>action<ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>策略定义示例</source>
          <target state="new">策略定义示例</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>现在让我们看一下如何定义策略，以实现以上所列的方案。</source>
          <target state="new">现在让我们看一下如何定义策略，以实现以上所列的方案。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>费用分摊：要求提供部门标记</source>
          <target state="new">费用分摊：要求提供部门标记</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>以下策略将拒绝不包含“costCenter”键标记的所有请求。</source>
          <target state="new">以下策略将拒绝不包含“costCenter”键标记的所有请求。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>地区法规遵循：确保资源位置</source>
          <target state="new">地区法规遵循：确保资源位置</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>以下示例显示的策略将拒绝位置不是欧洲北部或欧洲西部的所有请求。</source>
          <target state="new">以下示例显示的策略将拒绝位置不是欧洲北部或欧洲西部的所有请求。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>服务策展：选择服务目录</source>
          <target state="new">服务策展：选择服务目录</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>以下示例演示如何使用源。它显示只允许对 Microsoft.Resources/、Microsoft.Compute/<bpt id="p1">*</bpt>、Microsoft.Storage/<ept id="p1">*</ept>、Microsoft.Network/ 类型的服务执行的操作。其他任何请求将被拒绝。</source>
          <target state="new">以下示例演示如何使用源。它显示只允许对 Microsoft.Resources/、Microsoft.Compute/<bpt id="p1">*</bpt>、Microsoft.Storage/<ept id="p1">*</ept>、Microsoft.Network/ 类型的服务执行的操作。其他任何请求将被拒绝。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>命名约定</source>
          <target state="new">命名约定</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>以下示例演示如何使用“like”条件支持的通配符。该条件指明，如果名称符合所述模式 (namePrefix*nameSuffix)，则拒绝请求。</source>
          <target state="new">以下示例演示如何使用“like”条件支持的通配符。该条件指明，如果名称符合所述模式 (namePrefix*nameSuffix)，则拒绝请求。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>只要求存储资源的标记</source>
          <target state="new">只要求存储资源的标记</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>以下示例演示如何嵌套逻辑运算符，以便要求只对存储资源使用应用程序标记。</source>
          <target state="new">以下示例演示如何嵌套逻辑运算符，以便要求只对存储资源使用应用程序标记。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>策略分配</source>
          <target state="new">策略分配</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>策略可在不同的范围应用，如订阅、资源组和单个资源。策略由所有子资源继承。因此，如果将策略应用到资源组，则会将它应用到该资源组中的所有资源。</source>
          <target state="new">策略可在不同的范围应用，如订阅、资源组和单个资源。策略由所有子资源继承。因此，如果将策略应用到资源组，则会将它应用到该资源组中的所有资源。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>创建策略</source>
          <target state="new">创建策略</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>本部分提供有关如何使用 REST API 创建策略的详细信息。</source>
          <target state="new">本部分提供有关如何使用 REST API 创建策略的详细信息。</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>使用 REST API 创建策略定义</source>
          <target state="new">使用 REST API 创建策略定义</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>你可以使用<bpt id="p1">[</bpt>用于策略定义的 REST API<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/mt588471.aspx)</ept> 来创建策略。REST API 可让你创建和删除策略定义，以及获取现有定义的信息。</source>
          <target state="new">你可以使用<bpt id="p1">[</bpt>用于策略定义的 REST API<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/mt588471.aspx)</ept> 来创建策略。REST API 可让你创建和删除策略定义，以及获取现有定义的信息。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>若要创建新策略，请运行：</source>
          <target state="new">若要创建新策略，请运行：</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>使用类似于下面的请求正文：</source>
          <target state="new">使用类似于下面的请求正文：</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>策略定义可以定义为如上所示的示例之一。对于 api-version，请使用 <bpt id="p1">*</bpt>2015-10-01-preview<ept id="p1">*</ept>。有关示例与其他详细信息，请参阅<bpt id="p2">[</bpt>用于策略定义的 REST API<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/mt588471.aspx)</ept>。</source>
          <target state="new">策略定义可以定义为如上所示的示例之一。对于 api-version，请使用 <bpt id="p1">*</bpt>2015-10-01-preview<ept id="p1">*</ept>。有关示例与其他详细信息，请参阅<bpt id="p2">[</bpt>用于策略定义的 REST API<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/azure/mt588471.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>使用 PowerShell 创建策略定义</source>
          <target state="new">使用 PowerShell 创建策略定义</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>可以使用 New-AzureRmPolicyDefinition cmdlet 创建新的策略定义，如下所示。以下示例将创建一个策略，只允许欧洲北部和欧洲西部的资源。</source>
          <target state="new">可以使用 New-AzureRmPolicyDefinition cmdlet 创建新的策略定义，如下所示。以下示例将创建一个策略，只允许欧洲北部和欧洲西部的资源。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>执行输出将存储在 $policy 对象中，以便稍后可在分配策略期间使用。对于策略参数，也可以提供包含策略的 .json 文件的路径，而不是指定内联策略，如下所示。</source>
          <target state="new">执行输出将存储在 $policy 对象中，以便稍后可在分配策略期间使用。对于策略参数，也可以提供包含策略的 .json 文件的路径，而不是指定内联策略，如下所示。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>应用策略</source>
          <target state="new">应用策略</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>使用 REST API 分配策略</source>
          <target state="new">使用 REST API 分配策略</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>可以通过<bpt id="p1">[</bpt>用于策略分配的 REST API<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/mt588466.aspx)</ept>，在所需范围内应用策略定义。REST API 可让你创建和删除策略分配，以及获取现有分配的信息。</source>
          <target state="new">可以通过<bpt id="p1">[</bpt>用于策略分配的 REST API<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/mt588466.aspx)</ept>，在所需范围内应用策略定义。REST API 可让你创建和删除策略分配，以及获取现有分配的信息。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>若要创建新的策略分配，请运行：</source>
          <target state="new">若要创建新的策略分配，请运行：</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>{policy-assignment} 是策略分配的名称。对于 api-version，请使用 <bpt id="p1">*</bpt>2015-10-01-preview<ept id="p1">*</ept>。</source>
          <target state="new">{policy-assignment} 是策略分配的名称。对于 api-version，请使用 <bpt id="p1">*</bpt>2015-10-01-preview<ept id="p1">*</ept>。</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>使用类似于下面的请求正文：</source>
          <target state="new">使用类似于下面的请求正文：</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>有关示例与其他详细信息，请参阅<bpt id="p1">[</bpt>用于策略分配的 REST API<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/mt588466.aspx)</ept>。</source>
          <target state="new">有关示例与其他详细信息，请参阅<bpt id="p1">[</bpt>用于策略分配的 REST API<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/azure/mt588466.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>使用 PowerShell 分配策略</source>
          <target state="new">使用 PowerShell 分配策略</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>你可以使用 New-AzureRmPolicyAssignment cmdlet 将上面通过 PowerShell 创建的策略应用到所需的范围，如下所示：</source>
          <target state="new">你可以使用 New-AzureRmPolicyAssignment cmdlet 将上面通过 PowerShell 创建的策略应用到所需的范围，如下所示：</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>此处的 $policy 是执行 New-AzureRmPolicyDefinition cmdlet 后返回的策略对象，如下所示。此处的范围是指定的资源组的名称。</source>
          <target state="new">此处的 $policy 是执行 New-AzureRmPolicyDefinition cmdlet 后返回的策略对象，如下所示。此处的范围是指定的资源组的名称。</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>如果你要删除上述策略分配，可执行以下操作：</source>
          <target state="new">如果你要删除上述策略分配，可执行以下操作：</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>可以分别通过 Get-AzureRmPolicyDefinition、Set-AzureRmPolicyDefinition 和 Remove-AzureRmPolicyDefinition cmdlet 来获取、更改或删除策略定义。</source>
          <target state="new">可以分别通过 Get-AzureRmPolicyDefinition、Set-AzureRmPolicyDefinition 和 Remove-AzureRmPolicyDefinition cmdlet 来获取、更改或删除策略定义。</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>同样地，可以分别通过 Get-AzureRmPolicyAssignment、Set-AzureRmPolicyAssignment 和 Remove-AzureRmPolicyAssignment 来获取、更改或删除策略分配。</source>
          <target state="new">同样地，可以分别通过 Get-AzureRmPolicyAssignment、Set-AzureRmPolicyAssignment 和 Remove-AzureRmPolicyAssignment 来获取、更改或删除策略分配。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>策略审核事件</source>
          <target state="new">策略审核事件</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>在应用策略之后，即可看到与策略相关的事件。你可以转到门户，或使用 PowerShell 来获取此数据。</source>
          <target state="new">在应用策略之后，即可看到与策略相关的事件。你可以转到门户，或使用 PowerShell 来获取此数据。</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>若要查看拒绝效果相关的所有事件，可以使用以下命令。</source>
          <target state="new">若要查看拒绝效果相关的所有事件，可以使用以下命令。</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>若要查看审核效果相关的所有事件，可以使用以下命令。</source>
          <target state="new">若要查看审核效果相关的所有事件，可以使用以下命令。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>