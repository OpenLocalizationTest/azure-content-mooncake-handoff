<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa3acc20eca743df4efb6c4fc3395fc37ce04a39</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>先前示例显示标准登录，这要求在此应用每次启动时客户端同时联系标识提供商和移动服务。此方法不仅效率低下，而且如果很多客户尝试同时启动您的应用，您会遇到关于使用率的问题。更好的方法是缓存移动服务返回的授权令牌，然后在使用基于提供商的登录之前首先尝试使用此令牌。</source>
          <target state="new">先前示例显示标准登录，这要求在此应用每次启动时客户端同时联系标识提供商和移动服务。此方法不仅效率低下，而且如果很多客户尝试同时启动您的应用，您会遇到关于使用率的问题。更好的方法是缓存移动服务返回的授权令牌，然后在使用基于提供商的登录之前首先尝试使用此令牌。</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>无论您使用客户端管理的还是服务管理的身份验证，都可以缓存由移动服务颁发的令牌。本教程使用服务管理的身份验证。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>无论您使用客户端管理的还是服务管理的身份验证，都可以缓存由移动服务颁发的令牌。本教程使用服务管理的身份验证。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 MainPage.xaml.cs 项目文件中，添加以下 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句：</source>
          <target state="new">在 MainPage.xaml.cs 项目文件中，添加以下 <bpt id="p1">**</bpt>using<ept id="p1">**</ept> 语句：</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">**</bpt>AuthenticateAsync<ept id="p1">**</ept> 方法替换为以下代码：</source>
          <target state="new">将 <bpt id="p1">**</bpt>AuthenticateAsync<ept id="p1">**</ept> 方法替换为以下代码：</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>在此版本的 <bpt id="p1">**</bpt>AuthenticateAsync<ept id="p1">**</ept> 中，应用将尝试使用存储在 <bpt id="p2">**</bpt>PasswordVault<ept id="p2">**</ept> 中的凭证来访问移动服务。发送一个简单查询以验证存储的令牌是否未到期。返回 401 时，尝试了基于提供商的常规登录。没有存储任何凭证时，也执行常规登录。</source>
          <target state="new">在此版本的 <bpt id="p1">**</bpt>AuthenticateAsync<ept id="p1">**</ept> 中，应用将尝试使用存储在 <bpt id="p2">**</bpt>PasswordVault<ept id="p2">**</ept> 中的凭证来访问移动服务。发送一个简单查询以验证存储的令牌是否未到期。返回 401 时，尝试了基于提供商的常规登录。没有存储任何凭证时，也执行常规登录。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>此应用在登录过程中测试令牌是否到期，但正在使用此应用时，可能会在身份验证之后发生令牌到期。有关用于处理到期令牌相关的授权错误的解决方案，请参阅文章<bpt id="p1">[</bpt>在 Azure 移动服务托管 SDK 中缓存和处理到期令牌<ept id="p1">](http://blogs.msdn.com/b/carlosfigueira/archive/2014/03/13/caching-and-handling-expired-tokens-in-azure-mobile-services-managed-sdk.aspx)</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>此应用在登录过程中测试令牌是否到期，但正在使用此应用时，可能会在身份验证之后发生令牌到期。有关用于处理到期令牌相关的授权错误的解决方案，请参阅文章<bpt id="p1">[</bpt>在 Azure 移动服务托管 SDK 中缓存和处理到期令牌<ept id="p1">](http://blogs.msdn.com/b/carlosfigueira/archive/2014/03/13/caching-and-handling-expired-tokens-in-azure-mobile-services-managed-sdk.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>两次重新启动此应用。</source>
          <target state="new">两次重新启动此应用。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>请注意，在第一次启动时，再次需要使用此提供商进行登录。但是，在第二次重新启动时，将使用缓存的凭证，而绕过登录。</source>
          <target state="new">请注意，在第一次启动时，再次需要使用此提供商进行登录。但是，在第二次重新启动时，将使用缓存的凭证，而绕过登录。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>