<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">219803f1dab7811b6417bda54777161013b5b41d</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Azure AD Connect Sync：了解声明性设置表达式</source>
          <target state="new">Azure AD Connect Sync：了解声明性设置表达式</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>说明声明性设置表达式</source>
          <target state="new">说明声明性设置表达式</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Azure AD Connect 同步：了解声明性预配表达式</source>
          <target state="new">Azure AD Connect 同步：了解声明性预配表达式</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Azure AD Connect 同步构建在声明性预配的基础之上。该声明性预配是在 Forefront Identity Manager 2010 中首次引入的。利用该设置，你可以在无需编写编译代码的情况下，实现完整的标识集成业务逻辑。</source>
          <target state="new">Azure AD Connect 同步构建在声明性预配的基础之上。该声明性预配是在 Forefront Identity Manager 2010 中首次引入的。利用该设置，你可以在无需编写编译代码的情况下，实现完整的标识集成业务逻辑。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>声明性设置的一个重要组成部分是属性流中使用的表达式语言。所用的语言是 Microsoft® Visual Basic® for Applications (VBA) 的子集。Microsoft Office 中使用了这种语言，具有 VBScript 经验的用户都认识该语言。声明性设置表达式语言只使用函数，不属于结构化语言；它不提供任何方法或语句。函数将嵌套在表达式程序流中。</source>
          <target state="new">声明性设置的一个重要组成部分是属性流中使用的表达式语言。所用的语言是 Microsoft® Visual Basic® for Applications (VBA) 的子集。Microsoft Office 中使用了这种语言，具有 VBScript 经验的用户都认识该语言。声明性设置表达式语言只使用函数，不属于结构化语言；它不提供任何方法或语句。函数将嵌套在表达式程序流中。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅<bpt id="p1">[</bpt>欢迎使用适用于 Office 2013 的 Visual Basic 应用程序语言参考<ept id="p1">](https://msdn.microsoft.com/library/gg264383.aspx)</ept>。</source>
          <target state="new">有关详细信息，请参阅<bpt id="p1">[</bpt>欢迎使用适用于 Office 2013 的 Visual Basic 应用程序语言参考<ept id="p1">](https://msdn.microsoft.com/library/gg264383.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>属性属于强类型。需要单值字符串属性的函数不接受多值或不同类型的属性。它也区分大小写。函数名称和属性名称都必须具有正确的大小写，否则会引发错误</source>
          <target state="new">属性属于强类型。需要单值字符串属性的函数不接受多值或不同类型的属性。它也区分大小写。函数名称和属性名称都必须具有正确的大小写，否则会引发错误</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>语言定义和标识符</source>
          <target state="new">语言定义和标识符</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>函数名称后跟加括号的参数：FunctionName(argument 1,argument N)。</source>
          <target state="new">函数名称后跟加括号的参数：FunctionName(argument 1,argument N)。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>属性采用方括号标识，如 [attributeName]。</source>
          <target state="new">属性采用方括号标识，如 [attributeName]。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>参数通过百分比符号标识：%ParameterName%</source>
          <target state="new">参数通过百分比符号标识：%ParameterName%</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>字符串常量放在引号中：例如"Contoso"（注意：必须使用直引号 ""，而不能使用弯引号“”）</source>
          <target state="new">字符串常量放在引号中：例如"Contoso"（注意：必须使用直引号 ""，而不能使用弯引号“”）</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>数字值表示不带引号，并且应为十进制。十六进制值带有前缀 &amp;H。例如98052、&amp;HFF</source>
          <target state="new">数字值表示不带引号，并且应为十进制。十六进制值带有前缀 &amp;H。例如98052、&amp;HFF</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>表示布尔值的常量： True、 False。</source>
          <target state="new">表示布尔值的常量： True、 False。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>内置常量仅采用其名称表示：NULL、CRLF、IgnoreThisFlow</source>
          <target state="new">内置常量仅采用其名称表示：NULL、CRLF、IgnoreThisFlow</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>函数</source>
          <target state="new">函数</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>声明性预配使用许多函数来实现转换属性值的可能性。这些函数可以嵌套，因此，一个函数的结果将传递到另一个函数。</source>
          <target state="new">声明性预配使用许多函数来实现转换属性值的可能性。这些函数可以嵌套，因此，一个函数的结果将传递到另一个函数。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>函数还可以处理多值属性。在这种情况下，函数将处理各个值，并向每个值应用同一个函数。例如，<ph id="ph1">`Trim([proxyAddresses])`</ph> 将对 proxyAddress 属性中的每个值执行 Trim。</source>
          <target state="new">函数还可以处理多值属性。在这种情况下，函数将处理各个值，并向每个值应用同一个函数。例如，<ph id="ph1">`Trim([proxyAddresses])`</ph> 将对 proxyAddress 属性中的每个值执行 Trim。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>有关函数的完整列表，请参阅<bpt id="p1">[</bpt>函数参考<ept id="p1">](/documentation/articles/active-directory-aadconnectsync-functions-reference)</ept>。</source>
          <target state="new">有关函数的完整列表，请参阅<bpt id="p1">[</bpt>函数参考<ept id="p1">](/documentation/articles/active-directory-aadconnectsync-functions-reference)</ept>。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="new">Parameters</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>参数由连接器定义，或者由系统管理员使用 PowerShell 来设置。参数通常包含因系统不同而各异的值，例如用户所在域的名称。这些参数可在属性流中使用。</source>
          <target state="new">参数由连接器定义，或者由系统管理员使用 PowerShell 来设置。参数通常包含因系统不同而各异的值，例如用户所在域的名称。这些参数可在属性流中使用。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Active Directory 连接器为入站同步规则提供以下参数：</source>
          <target state="new">Active Directory 连接器为入站同步规则提供以下参数：</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>参数名称</source>
          <target state="new">参数名称</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>注释</source>
          <target state="new">注释</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Domain.Netbios</source>
          <target state="new">Domain.Netbios</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>当前正在导入的域的 Netbios 格式，例如 FABRIKAMSALES</source>
          <target state="new">当前正在导入的域的 Netbios 格式，例如 FABRIKAMSALES</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Domain.FQDN</source>
          <target state="new">Domain.FQDN</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>当前正在导入的域的 FQDN 格式，例如 sales.fabrikam.com</source>
          <target state="new">当前正在导入的域的 FQDN 格式，例如 sales.fabrikam.com</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Domain.LDAP</source>
          <target state="new">Domain.LDAP</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>当前正在导入的域的 LDAP 格式，例如 DC=sales,DC=fabrikam,DC=com</source>
          <target state="new">当前正在导入的域的 LDAP 格式，例如 DC=sales,DC=fabrikam,DC=com</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Forest.Netbios</source>
          <target state="new">Forest.Netbios</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>当前正在导入的林名称的 Netbios 格式，例如 FABRIKAMCORP</source>
          <target state="new">当前正在导入的林名称的 Netbios 格式，例如 FABRIKAMCORP</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Forest.FQDN</source>
          <target state="new">Forest.FQDN</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>当前正在导入的林名称的 FQDN 格式，例如 fabrikam.com</source>
          <target state="new">当前正在导入的林名称的 FQDN 格式，例如 fabrikam.com</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Forest.LDAP</source>
          <target state="new">Forest.LDAP</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>当前正在导入的林名称的 LDAP 格式，例如 DC=fabrikam,DC=com</source>
          <target state="new">当前正在导入的林名称的 LDAP 格式，例如 DC=fabrikam,DC=com</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>系统提供以下参数用于获取当前正在运行的连接器的标识符：</source>
          <target state="new">系统提供以下参数用于获取当前正在运行的连接器的标识符：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>使用用户所在域的 netbios 名称填充 Metaverse 属性域的示例：</source>
          <target state="new">使用用户所在域的 netbios 名称填充 Metaverse 属性域的示例：</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>运算符</source>
          <target state="new">运算符</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>可以使用以下运算符：</source>
          <target state="new">可以使用以下运算符：</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>比较<ept id="p1">**</ept>：&lt;、&lt;=、&lt;&gt;、=、&gt;、&gt;=</source>
          <target state="new"><bpt id="p1">**</bpt>比较<ept id="p1">**</ept>：&lt;、&lt;=、&lt;&gt;、=、&gt;、&gt;=</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>数学<ept id="p1">**</ept>：+、-、*、-</source>
          <target state="new"><bpt id="p1">**</bpt>数学<ept id="p1">**</ept>：+、-、*、-</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>字符串<ept id="p1">**</ept>：&amp;（连接）</source>
          <target state="new"><bpt id="p1">**</bpt>字符串<ept id="p1">**</ept>：&amp;（连接）</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>逻辑<ept id="p1">**</ept>：&amp;&amp;（和）、||（或）</source>
          <target state="new"><bpt id="p1">**</bpt>逻辑<ept id="p1">**</ept>：&amp;&amp;（和）、||（或）</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>计算顺序<ept id="p1">**</ept>：( )</source>
          <target state="new"><bpt id="p1">**</bpt>计算顺序<ept id="p1">**</ept>：( )</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>运算符从左到右进行求值，并具有相同的求值优先级。也就是说，<bpt id="p1">*</bpt>（乘号）不会在 -（减号）之前求值。2<ept id="p1">*</ept>(5+3) 与 2*5+3 不同。如果从左到右的求值顺序不适当，可以使用括号 () 来更改求值顺序。</source>
          <target state="new">运算符从左到右进行求值，并具有相同的求值优先级。也就是说，<bpt id="p1">*</bpt>（乘号）不会在 -（减号）之前求值。2<ept id="p1">*</ept>(5+3) 与 2*5+3 不同。如果从左到右的求值顺序不适当，可以使用括号 () 来更改求值顺序。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>常见方案</source>
          <target state="new">常见方案</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>属性的长度</source>
          <target state="new">属性的长度</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>字符串属性在默认情况下设置为可编制索引，并且最大长度为 448 个字符。如果你正在使用其中可能包含更多字符的字符串属性，则请确保属性流中包括以下内容：</source>
          <target state="new">字符串属性在默认情况下设置为可编制索引，并且最大长度为 448 个字符。如果你正在使用其中可能包含更多字符的字符串属性，则请确保属性流中包括以下内容：</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>更改 userPrincipalSuffix</source>
          <target state="new">更改 userPrincipalSuffix</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Active Directory 中的 userPrincipalName 属性并非始终被用户知晓，并且可能不适合作为登录名 ID。Azure AD Connect 同步安装向导允许选择不同的属性，例如 mail。但在某些情况下，必须计算该属性。例如：公司 Contoso 具有两个 Azure AD 目录，一个用于生产，另一个用于测试。他们希望测试租户中的用户只能更改登录 ID 中的后缀。</source>
          <target state="new">Active Directory 中的 userPrincipalName 属性并非始终被用户知晓，并且可能不适合作为登录名 ID。Azure AD Connect 同步安装向导允许选择不同的属性，例如 mail。但在某些情况下，必须计算该属性。例如：公司 Contoso 具有两个 Azure AD 目录，一个用于生产，另一个用于测试。他们希望测试租户中的用户只能更改登录 ID 中的后缀。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>在此表达式中，我们首先使用左侧所有内容 @-sign (Word)，并与固定字符串连接。</source>
          <target state="new">在此表达式中，我们首先使用左侧所有内容 @-sign (Word)，并与固定字符串连接。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>将多值转换为单值</source>
          <target state="new">将多值转换为单值</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Active Directory 中的某些属性在架构中是多值，不过它们在 Active Directory 用户和计算机中看上去是单值。一个示例就是说明属性。</source>
          <target state="new">Active Directory 中的某些属性在架构中是多值，不过它们在 Active Directory 用户和计算机中看上去是单值。一个示例就是说明属性。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>在此表达式中，如果属性具有值，我们会使用属性中的第一项 (Item)，删除前导空格和尾随空格 (Trim)，然后保留字符串中的前 448 个字符（左）。</source>
          <target state="new">在此表达式中，如果属性具有值，我们会使用属性中的第一项 (Item)，删除前导空格和尾随空格 (Trim)，然后保留字符串中的前 448 个字符（左）。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>高级概念</source>
          <target state="new">高级概念</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>NULL 和 IgnoreThisFlow</source>
          <target state="new">NULL 和 IgnoreThisFlow</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>对于入站同步规则，应始终使用常量 <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>。这表示流程没有要提供的值，并且另一个规则可以提供值。如果没有规则提供值，则会删除 metaverse 属性。</source>
          <target state="new">对于入站同步规则，应始终使用常量 <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>。这表示流程没有要提供的值，并且另一个规则可以提供值。如果没有规则提供值，则会删除 metaverse 属性。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>对于出站同步规则，有两个不同的常量可以使用：NULL 和 IgnoreThisFlow。两个常量均指示属性流没有要提供的内容，但不同之处是当其他规则都没有要提供的任何内容时会发生的情况。如果已连接目录中存在现有值，NULL 则会在删除它的属性上暂存删除，而 IgnoreThisFlow 则会保留现有值。</source>
          <target state="new">对于出站同步规则，有两个不同的常量可以使用：NULL 和 IgnoreThisFlow。两个常量均指示属性流没有要提供的内容，但不同之处是当其他规则都没有要提供的任何内容时会发生的情况。如果已连接目录中存在现有值，NULL 则会在删除它的属性上暂存删除，而 IgnoreThisFlow 则会保留现有值。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>ImportedValue</source>
          <target state="new">ImportedValue</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>函数 ImportedValues 不同于其他所有函数，因为属性名称必须放在引号内，而不是括在方括号中：ImportedValue(“proxyAddresses”)。</source>
          <target state="new">函数 ImportedValues 不同于其他所有函数，因为属性名称必须放在引号内，而不是括在方括号中：ImportedValue(“proxyAddresses”)。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>通常在同步期间，即使尚未导出或在导出过程中收到错误 (“top of the tower”)，属性也会使用预期值。入站同步会假定尚未到达已连接目录的属性最终会到达该目录。在某些情况下，仅同步由已连接目录已确认的值很重要，并且在这种情况下会使用函数 ImportedValue (“hologram and delta import tower”)。</source>
          <target state="new">通常在同步期间，即使尚未导出或在导出过程中收到错误 (“top of the tower”)，属性也会使用预期值。入站同步会假定尚未到达已连接目录的属性最终会到达该目录。在某些情况下，仅同步由已连接目录已确认的值很重要，并且在这种情况下会使用函数 ImportedValue (“hologram and delta import tower”)。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>可以从 Exchange 的现成同步规则 In from AD – User Common 中找到这种示例。其中，在混合 Exchange 中，如果已确认已成功导出由 Exchange Online 添加的值，则应该只同步该值：</source>
          <target state="new">可以从 Exchange 的现成同步规则 In from AD – User Common 中找到这种示例。其中，在混合 Exchange 中，如果已确认已成功导出由 Exchange Online 添加的值，则应该只同步该值：</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>有关函数的完整列表，请参阅 <bpt id="p1">[</bpt>Azure AD Connect Sync：函数引用<ept id="p1">](/documentation/articles/active-directory-aadconnectsync-functions-reference)</ept></source>
          <target state="new">有关函数的完整列表，请参阅 <bpt id="p1">[</bpt>Azure AD Connect Sync：函数引用<ept id="p1">](/documentation/articles/active-directory-aadconnectsync-functions-reference)</ept></target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>其他资源</source>
          <target state="new">其他资源</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Azure AD Connect Sync：自定义同步选项</source>
          <target state="new">Azure AD Connect Sync：自定义同步选项</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>将本地标识与 Azure Active Directory 集成</source>
          <target state="new">将本地标识与 Azure Active Directory 集成</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>