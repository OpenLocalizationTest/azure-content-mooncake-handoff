<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2594746b44e04e47a127f47d11661e7aafcc1e08</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用 Azure SDK for Java 在 Azure 中创建 Web 应用</source>
          <target state="new">使用 Azure SDK for Java 在 Azure 中创建 Web 应用</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何使用 Azure SDK for Java 以编程方式在 Azure Web 应用上创建 Web 应用。</source>
          <target state="new">了解如何使用 Azure SDK for Java 以编程方式在 Azure Web 应用上创建 Web 应用。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用 Azure SDK for Java 在 Azure 中创建 Web 应用</source>
          <target state="new">使用 Azure SDK for Java 在 Azure 中创建 Web 应用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本演练演示如何创建一个 Azure SDK for Java 应用程序，以便在 <bpt id="p1">[</bpt>Azure Web 应用<ept id="p1">][]</ept>中创建一个 Web 应用，然后将一个应用程序部署到该应用。它由两个部分组成：</source>
          <target state="new">本演练演示如何创建一个 Azure SDK for Java 应用程序，以便在 <bpt id="p1">[</bpt>Azure Web 应用<ept id="p1">][]</ept>中创建一个 Web 应用，然后将一个应用程序部署到该应用。它由两个部分组成：</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>第 1 部分演示如何生成创建 Web 应用的 Java 应用程序。</source>
          <target state="new">第 1 部分演示如何生成创建 Web 应用的 Java 应用程序。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>第 2 部分演示如何创建简单的 JSP "Hello World" 应用程序，然后使用 FTP 客户端将代码部署到 Azure Web 应用。</source>
          <target state="new">第 2 部分演示如何创建简单的 JSP "Hello World" 应用程序，然后使用 FTP 客户端将代码部署到 Azure Web 应用。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>先决条件</source>
          <target state="new">先决条件</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>软件安装</source>
          <target state="new">软件安装</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>本文中的 AzureWebDemo 应用程序代码是使用 Azure Java SDK 0.7.0 编写的，你可以使用 <bpt id="p1">[</bpt>Web 平台安装程序<ept id="p1">][]</ept> (WebPI) 进行安装。此外，请确保使用最新版本的 Azure Toolkit for Eclipse。安装 SDK 之后，通过在“Maven 存储库”中运行“更新索引”更新 Eclipse 项目中的依赖项，然后在“依赖项”窗口中重新添加每个包的最新版本。可以通过单击“帮助 &gt; 安装详细信息”验证 Eclipse 中已安装软件的版本；至少应具有以下版本：</source>
          <target state="new">本文中的 AzureWebDemo 应用程序代码是使用 Azure Java SDK 0.7.0 编写的，你可以使用 <bpt id="p1">[</bpt>Web 平台安装程序<ept id="p1">][]</ept> (WebPI) 进行安装。此外，请确保使用最新版本的 Azure Toolkit for Eclipse。安装 SDK 之后，通过在“Maven 存储库”中运行“更新索引”更新 Eclipse 项目中的依赖项，然后在“依赖项”窗口中重新添加每个包的最新版本。可以通过单击“帮助 &gt; 安装详细信息”验证 Eclipse 中已安装软件的版本；至少应具有以下版本：</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Package for Azure Libraries for Java 0.7.0.20150309</source>
          <target state="new">Package for Azure Libraries for Java 0.7.0.20150309</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Eclipse IDE for Java EE Developers 4.4.2.20150219</source>
          <target state="new">Eclipse IDE for Java EE Developers 4.4.2.20150219</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>在 Azure 中创建并配置云资源</source>
          <target state="new">在 Azure 中创建并配置云资源</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>在开始此过程之前，你需要拥有有效的 Azure 订阅，并在 Azure 上设置默认的 Active Directory (AD)。</source>
          <target state="new">在开始此过程之前，你需要拥有有效的 Azure 订阅，并在 Azure 上设置默认的 Active Directory (AD)。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>在 Azure 中创建 Active Directory (AD)</source>
          <target state="new">在 Azure 中创建 Active Directory (AD)</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>如果你的 Azure 订阅中还没有 Active Directory (AD)，请使用你的 Microsoft 帐户登录 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">][]</ept>。如果你有多个订阅，请单击“订阅”并选择要用于此项目的订阅的默认目录。然后单击“应用”切换到该订阅视图。</source>
          <target state="new">如果你的 Azure 订阅中还没有 Active Directory (AD)，请使用你的 Microsoft 帐户登录 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">][]</ept>。如果你有多个订阅，请单击“订阅”并选择要用于此项目的订阅的默认目录。然后单击“应用”切换到该订阅视图。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>从左侧菜单中选择“Active Directory”。单击“新建 &gt; 目录 &gt; 自定义创建”。</source>
          <target state="new">从左侧菜单中选择“Active Directory”。单击“新建 &gt; 目录 &gt; 自定义创建”。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>在“添加目录”中，选择“创建新目录”。</source>
          <target state="new">在“添加目录”中，选择“创建新目录”。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>在“名称”中输入目录名称。</source>
          <target state="new">在“名称”中输入目录名称。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>在“域”中输入域名。这是默认情况下你的目录附带的基本域名，它采用 <ph id="ph1">`&lt;domain_name&gt;.partner.onmschina.cn`</ph> 格式。可以根据目录名称或你拥有的其他域名将它命名。以后，可以添加你的组织已在使用的其他域名。</source>
          <target state="new">在“域”中输入域名。这是默认情况下你的目录附带的基本域名，它采用 <ph id="ph1">`&lt;domain_name&gt;.partner.onmschina.cn`</ph> 格式。可以根据目录名称或你拥有的其他域名将它命名。以后，可以添加你的组织已在使用的其他域名。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>在“国家或地区”中选择你的区域设置。</source>
          <target state="new">在“国家或地区”中选择你的区域设置。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>有关 AD 的详细信息，请参阅<bpt id="p1">[</bpt>什么是 Azure AD 目录<ept id="p1">][]</ept>？</source>
          <target state="new">有关 AD 的详细信息，请参阅<bpt id="p1">[</bpt>什么是 Azure AD 目录<ept id="p1">][]</ept>？</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>创建 Azure 的管理证书</source>
          <target state="new">创建 Azure 的管理证书</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Azure SDK for Java 使用管理证书在 Azure 订阅中进行身份验证。对于使用服务管理 API 代表订阅所有者管理订阅资源的客户端应用程序，你可以使用这些 X.509 v3 证书来对其进行身份验证。</source>
          <target state="new">Azure SDK for Java 使用管理证书在 Azure 订阅中进行身份验证。对于使用服务管理 API 代表订阅所有者管理订阅资源的客户端应用程序，你可以使用这些 X.509 v3 证书来对其进行身份验证。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>此过程中的代码使用自签名证书在 Azure 上进行身份验证。对于此过程，你需要事先创建一个证书并将其上载到 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">][]</ept>。这包括以下步骤：</source>
          <target state="new">此过程中的代码使用自签名证书在 Azure 上进行身份验证。对于此过程，你需要事先创建一个证书并将其上载到 <bpt id="p1">[</bpt>Azure 管理门户<ept id="p1">][]</ept>。这包括以下步骤：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>生成表示客户端证书的 PFX 文件，并将其保存在本地。</source>
          <target state="new">生成表示客户端证书的 PFX 文件，并将其保存在本地。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>从 PFX 文件生成管理证书（CER 文件）。</source>
          <target state="new">从 PFX 文件生成管理证书（CER 文件）。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>将 CER 文件上载到你的 Azure 订阅。</source>
          <target state="new">将 CER 文件上载到你的 Azure 订阅。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>将 PFX 文件转换为 JKS，因为 Java 以这种格式来使用证书进行身份验证。</source>
          <target state="new">将 PFX 文件转换为 JKS，因为 Java 以这种格式来使用证书进行身份验证。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>编写引用本地 JKS 文件的应用程序身份验证代码。</source>
          <target state="new">编写引用本地 JKS 文件的应用程序身份验证代码。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>完成此过程后，CER 证书将驻留在 Azure 订阅中，JKS 证书将驻留在本地驱动器中。有关管理证书的详细信息，请参阅<bpt id="p1">[</bpt>创建并上载 Azure 的管理证书<ept id="p1">][]</ept>。</source>
          <target state="new">完成此过程后，CER 证书将驻留在 Azure 订阅中，JKS 证书将驻留在本地驱动器中。有关管理证书的详细信息，请参阅<bpt id="p1">[</bpt>创建并上载 Azure 的管理证书<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>创建证书</source>
          <target state="new">创建证书</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>若要创建自己的自签名证书，请在操作系统上打开一个命令控制台并运行以下命令。</source>
          <target state="new">若要创建自己的自签名证书，请在操作系统上打开一个命令控制台并运行以下命令。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>运行此命令的计算机必须已安装 JDK。此外，keytool 的路径取决于安装 JDK 的位置。有关详细信息，请参阅 Java 联机文档中的<bpt id="p2">[</bpt>密钥和证书管理工具 (keytool)<ept id="p2">][]</ept>。</source>
          <target state="new"><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>运行此命令的计算机必须已安装 JDK。此外，keytool 的路径取决于安装 JDK 的位置。有关详细信息，请参阅 Java 联机文档中的<bpt id="p2">[</bpt>密钥和证书管理工具 (keytool)<ept id="p2">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>创建 .pfx 文件：</source>
          <target state="new">创建 .pfx 文件：</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>创建 .cer 文件：</source>
          <target state="new">创建 .cer 文件：</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>其中：</source>
          <target state="new">其中：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;java-install-dir&gt;`</ph> 是 Java 安装目录的路径。</source>
          <target state="new"><ph id="ph1">`&lt;java-install-dir&gt;`</ph> 是 Java 安装目录的路径。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;keystore-id&gt;`</ph> 是密钥库条目标识符（例如 <ph id="ph2">`AzureRemoteAccess`</ph>）。</source>
          <target state="new"><ph id="ph1">`&lt;keystore-id&gt;`</ph> 是密钥库条目标识符（例如 <ph id="ph2">`AzureRemoteAccess`</ph>）。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;cert-store-dir&gt;`</ph> 是要存储证书的目录的路径（例如 <ph id="ph2">`C:/Certificates`</ph>）。</source>
          <target state="new"><ph id="ph1">`&lt;cert-store-dir&gt;`</ph> 是要存储证书的目录的路径（例如 <ph id="ph2">`C:/Certificates`</ph>）。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;cert-file-name&gt;`</ph> 是证书文件的名称（例如 <ph id="ph2">`AzureWebDemoCert`</ph>）。</source>
          <target state="new"><ph id="ph1">`&lt;cert-file-name&gt;`</ph> 是证书文件的名称（例如 <ph id="ph2">`AzureWebDemoCert`</ph>）。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;password&gt;`</ph> 是选择用于保护证书的密码；它的长度必须至少为 6 个字符。可以不输入密码，但不建议这样做。</source>
          <target state="new"><ph id="ph1">`&lt;password&gt;`</ph> 是选择用于保护证书的密码；它的长度必须至少为 6 个字符。可以不输入密码，但不建议这样做。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;dname&gt;`</ph> 是要与别名关联的 X.500 可分辨名称，它用作自签名证书中的颁发者和使用者字段。</source>
          <target state="new"><ph id="ph1">`&lt;dname&gt;`</ph> 是要与别名关联的 X.500 可分辨名称，它用作自签名证书中的颁发者和使用者字段。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅<bpt id="p1">[</bpt>创建并上载 Azure 的管理证书<ept id="p1">][]</ept>。</source>
          <target state="new">有关详细信息，请参阅<bpt id="p1">[</bpt>创建并上载 Azure 的管理证书<ept id="p1">][]</ept>。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>上载证书</source>
          <target state="new">上载证书</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>若要将自签名证书上载到 Azure，请转到管理门户中的“设置”页，然后单击“管理证书”选项卡。单击页面底部的“上载”，然后导航到你创建的 CER 文件的所在位置。</source>
          <target state="new">若要将自签名证书上载到 Azure，请转到管理门户中的“设置”页，然后单击“管理证书”选项卡。单击页面底部的“上载”，然后导航到你创建的 CER 文件的所在位置。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>将 PFX 文件转换为 JKS</source>
          <target state="new">将 PFX 文件转换为 JKS</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>在 Windows 命令提示符下（以管理员身份运行），键入 cd 转到包含证书的目录，然后运行以下命令，其中，<ph id="ph1">`&lt;java-install-dir&gt;`</ph> 是计算机安装 Java 的目录：</source>
          <target state="new">在 Windows 命令提示符下（以管理员身份运行），键入 cd 转到包含证书的目录，然后运行以下命令，其中，<ph id="ph1">`&lt;java-install-dir&gt;`</ph> 是计算机安装 Java 的目录：</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>出现提示时，输入目标密钥库密码；这将是 JKS 文件的密码。</source>
          <target state="new">出现提示时，输入目标密钥库密码；这将是 JKS 文件的密码。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>出现提示时，输入源密钥库密码；这是你为 PFX 文件指定的密码。</source>
          <target state="new">出现提示时，输入源密钥库密码；这是你为 PFX 文件指定的密码。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>两个密码不一定要相同。可以不输入密码，但不建议这样做。</source>
          <target state="new">两个密码不一定要相同。可以不输入密码，但不建议这样做。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>构建 Web 应用创建应用程序</source>
          <target state="new">构建 Web 应用创建应用程序</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>创建 Eclipse 工作区和 Maven 项目</source>
          <target state="new">创建 Eclipse 工作区和 Maven 项目</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>在本部分中，你将要给名为 AzureWebDemo 的 Web 应用创建应用程序创建工作区和 Maven 项目。</source>
          <target state="new">在本部分中，你将要给名为 AzureWebDemo 的 Web 应用创建应用程序创建工作区和 Maven 项目。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>创建新的 Maven 项目。单击“文件 &gt; 新建 &gt; Maven 项目”。在“新建 Maven 项目”中，选择“创建简单项目”和“使用默认工作区位置”。</source>
          <target state="new">创建新的 Maven 项目。单击“文件 &gt; 新建 &gt; Maven 项目”。在“新建 Maven 项目”中，选择“创建简单项目”和“使用默认工作区位置”。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>在“新建 Maven 项目”的第二页上，指定以下信息：</source>
          <target state="new">在“新建 Maven 项目”的第二页上，指定以下信息：</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>组 ID：<ph id="ph1">`com.&lt;username&gt;.azure.webdemo`</ph></source>
          <target state="new">组 ID：<ph id="ph1">`com.&lt;username&gt;.azure.webdemo`</ph></target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>项目 ID：AzureWebDemo</source>
          <target state="new">项目 ID：AzureWebDemo</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>版本：0.0.1-SNAPSHOT</source>
          <target state="new">版本：0.0.1-SNAPSHOT</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>打包：jar</source>
          <target state="new">打包：jar</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>名称：AzureWebDemo</source>
          <target state="new">名称：AzureWebDemo</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>单击“完成”。</source>
          <target state="new">单击“完成”。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>在项目资源管理器中打开新项目的 pom.xml 文件。选择“依赖项”选项卡。由于这是一个新项目，因此尚未列出任何包。</source>
          <target state="new">在项目资源管理器中打开新项目的 pom.xml 文件。选择“依赖项”选项卡。由于这是一个新项目，因此尚未列出任何包。</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>打开“Maven 存储库”视图。单击“窗口 &gt; 显示视图 &gt; 其他 &gt; Maven &gt; Maven 存储库”，然后单击“确定”。“Maven 存储库”视图将出现在 IDE 的底部。</source>
          <target state="new">打开“Maven 存储库”视图。单击“窗口 &gt; 显示视图 &gt; 其他 &gt; Maven &gt; Maven 存储库”，然后单击“确定”。“Maven 存储库”视图将出现在 IDE 的底部。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>打开“全局存储库”，右键单击“中央”存储库，然后选择“重新生成索引”。</source>
          <target state="new">打开“全局存储库”，右键单击“中央”存储库，然后选择“重新生成索引”。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>此步骤可能需要几分钟时间，具体取决于你的连接速度。重新生成索引后，“中央”Maven 存储库中应会显示 Azure 包。</source>
          <target state="new">此步骤可能需要几分钟时间，具体取决于你的连接速度。重新生成索引后，“中央”Maven 存储库中应会显示 Azure 包。</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>在“依赖项”中，单击“添加”。在“输入组 ID...”中输入 <ph id="ph1">`azure-management`</ph>。选择基础管理和 Azure Web 应用管理的包：</source>
          <target state="new">在“依赖项”中，单击“添加”。在“输入组 ID...”中输入 <ph id="ph1">`azure-management`</ph>。选择基础管理和 Azure Web 应用管理的包：</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>如果在新版本发布后更新依赖项，</source>
          <target state="new"><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>如果在新版本发布后更新依赖项，</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>则需要重新添加此列表中的每个依赖项。</source>
          <target state="new">则需要重新添加此列表中的每个依赖项。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>单击“添加”后，选择每个依赖项，</source>
          <target state="new">单击“添加”后，选择每个依赖项，</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>则会在“依赖项”列表中显示新的版本号。</source>
          <target state="new">则会在“依赖项”列表中显示新的版本号。</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>单击<bpt id="p1">**</bpt>“确定”<ept id="p1">**</ept>。Azure 包随即会出现在“依赖项”列表中。</source>
          <target state="new">单击<bpt id="p1">**</bpt>“确定”<ept id="p1">**</ept>。Azure 包随即会出现在“依赖项”列表中。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>编写 Java 代码，以通过调用 Azure SDK 来创建 Web 应用</source>
          <target state="new">编写 Java 代码，以通过调用 Azure SDK 来创建 Web 应用</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>接下来，请编写调用 Azure SDK for Java 中的 API 的代码，以创建 Azure Web 应用。</source>
          <target state="new">接下来，请编写调用 Azure SDK for Java 中的 API 的代码，以创建 Azure Web 应用。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>创建一个 Java 类以用于包含主入口点代码。在项目资源管理器中，右键单击项目节点，然后选择“新建 &gt; 类”。</source>
          <target state="new">创建一个 Java 类以用于包含主入口点代码。在项目资源管理器中，右键单击项目节点，然后选择“新建 &gt; 类”。</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>在“新建 Java 类”中，将类命名为 <ph id="ph1">`WebCreator`</ph>，并选中“public static void main”复选框。所选内容应如下所示：</source>
          <target state="new">在“新建 Java 类”中，将类命名为 <ph id="ph1">`WebCreator`</ph>，并选中“public static void main”复选框。所选内容应如下所示：</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>单击“完成”。WebCreator.java 文件将在项目资源管理器中出现。</source>
          <target state="new">单击“完成”。WebCreator.java 文件将在项目资源管理器中出现。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>调用 Azure API 以创建 Azure Web 应用</source>
          <target state="new">调用 Azure API 以创建 Azure Web 应用</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>添加所需的导入</source>
          <target state="new">添加所需的导入</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>在 WebCreator.java 中添加以下导入；使用这些导入可以访问使用 Azure API 的管理库中的类：</source>
          <target state="new">在 WebCreator.java 中添加以下导入；使用这些导入可以访问使用 Azure API 的管理库中的类：</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>定义主入口点类</source>
          <target state="new">定义主入口点类</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>因为 AzureWebDemo 应用程序的目的是创建 Azure Web 应用，所以请将此应用程序的主类命名为 <ph id="ph1">`WebAppCreator`</ph>。此类提供调用 Azure 服务管理 API 的主入口点代码，以创建 Web 应用。</source>
          <target state="new">因为 AzureWebDemo 应用程序的目的是创建 Azure Web 应用，所以请将此应用程序的主类命名为 <ph id="ph1">`WebAppCreator`</ph>。此类提供调用 Azure 服务管理 API 的主入口点代码，以创建 Web 应用。</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>为 Web 应用和 Web 空间添加以下参数定义。你将需要提供你自己的 Azure 订阅 ID 和证书信息。</source>
          <target state="new">为 Web 应用和 Web 空间添加以下参数定义。你将需要提供你自己的 Azure 订阅 ID 和证书信息。</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>其中：</source>
          <target state="new">其中：</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;subscription-id&gt;`</ph> 是要用于创建资源的 Azure 订阅 ID。</source>
          <target state="new"><ph id="ph1">`&lt;subscription-id&gt;`</ph> 是要用于创建资源的 Azure 订阅 ID。</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;certificate-store-path&gt;`</ph> 是你的本地证书存储区目录中的 JKS 文件的路径和文件名。例如，对于 Linux，则为 <ph id="ph2">`C:/Certificates/CertificateName.jks`</ph>；对于 Windows，则为 <ph id="ph3">`C:\Certificates\CertificateName.jks`</ph>。</source>
          <target state="new"><ph id="ph1">`&lt;certificate-store-path&gt;`</ph> 是你的本地证书存储区目录中的 JKS 文件的路径和文件名。例如，对于 Linux，则为 <ph id="ph2">`C:/Certificates/CertificateName.jks`</ph>；对于 Windows，则为 <ph id="ph3">`C:\Certificates\CertificateName.jks`</ph>。</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`&lt;certificate-password&gt;`</ph> 是你在创建 JKS 证书时指定的密码。</source>
          <target state="new"><ph id="ph1">`&lt;certificate-password&gt;`</ph> 是你在创建 JKS 证书时指定的密码。</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`webAppName`</ph> 可以是你选择的任何名称；此过程使用名称 <ph id="ph2">`WebDemoWebApp`</ph>。完整的域名称是 <ph id="ph3">`webAppName`</ph>，并追加了 <ph id="ph4">`domainName`</ph>，因此在这种情况下，完整的域是 <ph id="ph5">`webdemowebapp.chinacloudsites.cn`</ph>。</source>
          <target state="new"><ph id="ph1">`webAppName`</ph> 可以是你选择的任何名称；此过程使用名称 <ph id="ph2">`WebDemoWebApp`</ph>。完整的域名称是 <ph id="ph3">`webAppName`</ph>，并追加了 <ph id="ph4">`domainName`</ph>，因此在这种情况下，完整的域是 <ph id="ph5">`webdemowebapp.chinacloudsites.cn`</ph>。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`domainName`</ph> 应按照以上所示进行指定。</source>
          <target state="new"><ph id="ph1">`domainName`</ph> 应按照以上所示进行指定。</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>每次运行此应用程序时，</source>
          <target state="new"><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>每次运行此应用程序时，</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>你需要更改 <ph id="ph1">`webAppName`</ph> 和 <ph id="ph2">`appServicePlanName`</ph> 的值（或在 Azure 门户上删除 Web 应用），</source>
          <target state="new">你需要更改 <ph id="ph1">`webAppName`</ph> 和 <ph id="ph2">`appServicePlanName`</ph> 的值（或在 Azure 门户上删除 Web 应用），</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>然后再次运行应用程序。否则，</source>
          <target state="new">然后再次运行应用程序。否则，</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>由于 Azure 上已存在相同的资源，所以执行会失败。</source>
          <target state="new">由于 Azure 上已存在相同的资源，所以执行会失败。</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>定义 Web 创建方法</source>
          <target state="new">定义 Web 创建方法</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>接下来，定义用于创建 Web 应用的方法。此方法 (<ph id="ph1">`createWebApp`</ph>) 指定 Web 应用的参数和 Web 空间。它还会创建并配置 Azure Web 应用管理客户端，该客户端由 <bpt id="p1">[</bpt>WebSiteManagementClient<ept id="p1">][]</ept> 对象进行定义。管理客户端对于创建 Web 应用至关重要。它提供 RESTful web 服务，使应用程序能够通过调用服务管理 API 来管理 Web 应用（执行创建、更新和删除等操作）。</source>
          <target state="new">接下来，定义用于创建 Web 应用的方法。此方法 (<ph id="ph1">`createWebApp`</ph>) 指定 Web 应用的参数和 Web 空间。它还会创建并配置 Azure Web 应用管理客户端，该客户端由 <bpt id="p1">[</bpt>WebSiteManagementClient<ept id="p1">][]</ept> 对象进行定义。管理客户端对于创建 Web 应用至关重要。它提供 RESTful web 服务，使应用程序能够通过调用服务管理 API 来管理 Web 应用（执行创建、更新和删除等操作）。</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>代码将输出指示成功或失败的 HTTP 响应状态；如果成功，则输出创建的 Web 应用的名称。</source>
          <target state="new">代码将输出指示成功或失败的 HTTP 响应状态；如果成功，则输出创建的 Web 应用的名称。</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>定义 main() 方法</source>
          <target state="new">定义 main() 方法</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>提供调用 createWebApp() 的 main() 方法代码，以创建 Web 应用。</source>
          <target state="new">提供调用 createWebApp() 的 main() 方法代码，以创建 Web 应用。</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>最后，从 <ph id="ph1">`main`</ph> 调用 <ph id="ph2">`createWebApp`</ph>：</source>
          <target state="new">最后，从 <ph id="ph1">`main`</ph> 调用 <ph id="ph2">`createWebApp`</ph>：</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>运行应用程序并验证 Web 应用创建</source>
          <target state="new">运行应用程序并验证 Web 应用创建</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>若要验证应用程序是否运行，请单击“运行 &gt; 运行”。在应用程序完成运行后，你应该会在 Eclipse 控制台中看到以下输出：</source>
          <target state="new">若要验证应用程序是否运行，请单击“运行 &gt; 运行”。在应用程序完成运行后，你应该会在 Eclipse 控制台中看到以下输出：</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Web app created - HTTP response 200</source>
          <target state="new">Web app created - HTTP response 200</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>登录到 Azure 管理门户并单击“Web Apps”。在数分钟内，新 Web 应用应会出现在“Web Apps”列表中。</source>
          <target state="new">登录到 Azure 管理门户并单击“Web Apps”。在数分钟内，新 Web 应用应会出现在“Web Apps”列表中。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>将应用程序部署到 Web 应用</source>
          <target state="new">将应用程序部署到 Web 应用</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>运行 AzureWebDemo 并创建新 Web 应用后，请登录管理门户，单击“Web Apps”，然后在“Web Apps”列表中选择“WebDemoWebApp”。在 Web 应用的仪表板页上，单击“浏览”（或单击 URL <ph id="ph1">`webdemowebapp.chinacloudsites.cn`</ph>）导航到该 Web 应用。你将会看到一个空白的占位符页，因为尚未将任何内容发布到 Web 应用。</source>
          <target state="new">运行 AzureWebDemo 并创建新 Web 应用后，请登录管理门户，单击“Web Apps”，然后在“Web Apps”列表中选择“WebDemoWebApp”。在 Web 应用的仪表板页上，单击“浏览”（或单击 URL <ph id="ph1">`webdemowebapp.chinacloudsites.cn`</ph>）导航到该 Web 应用。你将会看到一个空白的占位符页，因为尚未将任何内容发布到 Web 应用。</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>接下来，你要创建一个“Hello World”应用程序并将其部署到 Web 应用。</source>
          <target state="new">接下来，你要创建一个“Hello World”应用程序并将其部署到 Web 应用。</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>创建 JSP Hello World 应用程序</source>
          <target state="new">创建 JSP Hello World 应用程序</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>创建应用程序</source>
          <target state="new">创建应用程序</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>为了演示如何将应用程序部署到 Web，以下过程说明了如何创建简单的 "Hello World" Java 应用程序，并将其上载到应用程序创建的 Azure Web 应用。</source>
          <target state="new">为了演示如何将应用程序部署到 Web，以下过程说明了如何创建简单的 "Hello World" Java 应用程序，并将其上载到应用程序创建的 Azure Web 应用。</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>单击“文件 &gt; 新建 &gt; 动态 Web 项目”。将它命名为 <ph id="ph1">`JSPHello`</ph>。不需要在此对话框中更改其他任何设置。单击“完成”。</source>
          <target state="new">单击“文件 &gt; 新建 &gt; 动态 Web 项目”。将它命名为 <ph id="ph1">`JSPHello`</ph>。不需要在此对话框中更改其他任何设置。单击“完成”。</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>在项目资源管理器中，展开“JSPHello”项目，右键单击“WebContent”，然后单击“新建 &gt; JSP 文件”。在“新建 JSP 文件”对话框中，将新文件命名为 <ph id="ph1">`index.jsp`</ph>。单击“下一步”。</source>
          <target state="new">在项目资源管理器中，展开“JSPHello”项目，右键单击“WebContent”，然后单击“新建 &gt; JSP 文件”。在“新建 JSP 文件”对话框中，将新文件命名为 <ph id="ph1">`index.jsp`</ph>。单击“下一步”。</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>在“选择 JSP 模板”对话框中，选择“新建 JSP 文件 (html)”，然后单击“完成”。</source>
          <target state="new">在“选择 JSP 模板”对话框中，选择“新建 JSP 文件 (html)”，然后单击“完成”。</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>在 index.jsp 中，在 <ph id="ph1">`&lt;head&gt;`</ph> 和 <ph id="ph2">`&lt;body&gt;`</ph> 标记部分中添加以下代码：</source>
          <target state="new">在 index.jsp 中，在 <ph id="ph1">`&lt;head&gt;`</ph> 和 <ph id="ph2">`&lt;body&gt;`</ph> 标记部分中添加以下代码：</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>在 localhost 中运行 Hello World 应用程序</source>
          <target state="new">在 localhost 中运行 Hello World 应用程序</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>在运行此应用程序之前，你需要配置几个属性。</source>
          <target state="new">在运行此应用程序之前，你需要配置几个属性。</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>右键单击“JSPHello”项目并选择“属性”。</source>
          <target state="new">右键单击“JSPHello”项目并选择“属性”。</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>在“属性”对话框中：选择“Java 生成路径”，选择“顺序和导出”选项卡，选中“JRE 系统库”，然后单击“上移”将其移至列表顶部。</source>
          <target state="new">在“属性”对话框中：选择“Java 生成路径”，选择“顺序和导出”选项卡，选中“JRE 系统库”，然后单击“上移”将其移至列表顶部。</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>同样在“属性”对话框中：选择“目标运行时”，然后单击“新建”。</source>
          <target state="new">同样在“属性”对话框中：选择“目标运行时”，然后单击“新建”。</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>在“新建服务器运行时环境”对话框中，选择一个服务器（如“Apache Tomcat v7.0”），然后单击“下一步”。在“Tomcat 服务器”对话框中，将“名称”设置为 <ph id="ph1">`Apache Tomcat v7.0`</ph>，并将“Tomcat 安装目录”设置为在其中安装所要使用的 Tomcat 服务器版本的目录。</source>
          <target state="new">在“新建服务器运行时环境”对话框中，选择一个服务器（如“Apache Tomcat v7.0”），然后单击“下一步”。在“Tomcat 服务器”对话框中，将“名称”设置为 <ph id="ph1">`Apache Tomcat v7.0`</ph>，并将“Tomcat 安装目录”设置为在其中安装所要使用的 Tomcat 服务器版本的目录。</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>单击“完成”。</source>
          <target state="new">单击“完成”。</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>随后你将返回“属性”对话框的“目标运行时”页。选择“Apache Tomcat v7.0”，然后单击“确定”。</source>
          <target state="new">随后你将返回“属性”对话框的“目标运行时”页。选择“Apache Tomcat v7.0”，然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>在 Eclipse 的“运行”菜单中，单击“运行”。在“运行方式”对话框中，选择“在服务器上运行”。在“在服务器上运行”对话框中，选择“Tomcat v7.0 服务器”：</source>
          <target state="new">在 Eclipse 的“运行”菜单中，单击“运行”。在“运行方式”对话框中，选择“在服务器上运行”。在“在服务器上运行”对话框中，选择“Tomcat v7.0 服务器”：</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>单击“完成”。</source>
          <target state="new">单击“完成”。</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>当应用程序运行时，你应该会在 Eclipse (<ph id="ph1">`http://localhost:8080/JSPHello/`</ph>) 的 localhost 窗口中看到显示的“JSPHello”页，其中显示了以下消息：</source>
          <target state="new">当应用程序运行时，你应该会在 Eclipse (<ph id="ph1">`http://localhost:8080/JSPHello/`</ph>) 的 localhost 窗口中看到显示的“JSPHello”页，其中显示了以下消息：</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>将应用程序导出为 WAR</source>
          <target state="new">将应用程序导出为 WAR</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>将 Web 项目文件导出为 Web 存档 (WAR) 文件，以便可以将它部署到 Web 应用。以下 web 项目文件驻留在 WebContent 文件夹中：</source>
          <target state="new">将 Web 项目文件导出为 Web 存档 (WAR) 文件，以便可以将它部署到 Web 应用。以下 web 项目文件驻留在 WebContent 文件夹中：</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>右键单击 WebContent 文件夹并选择“导出”。</source>
          <target state="new">右键单击 WebContent 文件夹并选择“导出”。</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>在“导出选择”对话框中，单击“Web &gt; WAR 文件”，然后单击“下一步”。</source>
          <target state="new">在“导出选择”对话框中，单击“Web &gt; WAR 文件”，然后单击“下一步”。</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>在“WAR 导出”对话框中，选择当前项目中的 src 目录，并在末尾添加 WAR 文件名。例如：</source>
          <target state="new">在“WAR 导出”对话框中，选择当前项目中的 src 目录，并在末尾添加 WAR 文件名。例如：</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>有关部署 WAR 文件的详细信息，请参阅<bpt id="p1">[</bpt>将 Java 应用程序添加到 Azure Web 应用<ept id="p1">](/documentation/articles/web-sites-java-add-app)</ept>。</source>
          <target state="new">有关部署 WAR 文件的详细信息，请参阅<bpt id="p1">[</bpt>将 Java 应用程序添加到 Azure Web 应用<ept id="p1">](/documentation/articles/web-sites-java-add-app)</ept>。</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>使用 FTP 部署 Hello World 应用程序</source>
          <target state="new">使用 FTP 部署 Hello World 应用程序</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>选择第三方 FTP 客户端来发布应用程序。此过程将介绍FileZilla，这是一个带有便捷式图形 UI 的常用工具。</source>
          <target state="new">选择第三方 FTP 客户端来发布应用程序。此过程将介绍FileZilla，这是一个带有便捷式图形 UI 的常用工具。</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>Azure Toolkit for Eclipse 支持部署到存储帐户和云服务，但当前不支持部署到 Web 应用。你可以使用 Azure 部署项目部署到存储帐户和云服务，但不能部署到 Web 应用。使用其他方法（例如 FTP 或 GitHub）将文件传输到 Web 应用。</source>
          <target state="new"><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>Azure Toolkit for Eclipse 支持部署到存储帐户和云服务，但当前不支持部署到 Web 应用。你可以使用 Azure 部署项目部署到存储帐户和云服务，但不能部署到 Web 应用。使用其他方法（例如 FTP 或 GitHub）将文件传输到 Web 应用。</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>我们不建议通过 Windows 命令提示符（Windows 随附的命令行 FTP.EXE 实用工具）使用 FTP。使用活动 FTP 的 FTP 客户端（如 FTP.EXE）通常无法通过防火墙工作。活动 FTP 指定基于 LAN 的内部地址，FTP 服务器可能无法连接到该地址。</source>
          <target state="new"><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>我们不建议通过 Windows 命令提示符（Windows 随附的命令行 FTP.EXE 实用工具）使用 FTP。使用活动 FTP 的 FTP 客户端（如 FTP.EXE）通常无法通过防火墙工作。活动 FTP 指定基于 LAN 的内部地址，FTP 服务器可能无法连接到该地址。</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>有关使用 FTP 部署到 Azure Web 应用的详细信息，请参阅以下主题：</source>
          <target state="new">有关使用 FTP 部署到 Azure Web 应用的详细信息，请参阅以下主题：</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>使用 FTP 实用工具部署</source>
          <target state="new">使用 FTP 实用工具部署</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>设置部署凭据</source>
          <target state="new">设置部署凭据</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>确保已运行 <bpt id="p1">**</bpt>AzureWebDemo<ept id="p1">**</ept> 应用程序来创建 Web 应用。你会将文件转移到此位置。</source>
          <target state="new">确保已运行 <bpt id="p1">**</bpt>AzureWebDemo<ept id="p1">**</ept> 应用程序来创建 Web 应用。你会将文件转移到此位置。</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>登录到管理门户并单击“Web Apps”。确保“WebDemoWebApp”已显示在 Web Apps 列表中，并确保它正在运行。单击“WebDemoWebApp”以打开其“仪表板”页。</source>
          <target state="new">登录到管理门户并单击“Web Apps”。确保“WebDemoWebApp”已显示在 Web Apps 列表中，并确保它正在运行。单击“WebDemoWebApp”以打开其“仪表板”页。</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>在“仪表板”页的“速览”下，单击“设置部署凭据”（如果你已有部署凭据，则此选项应为“重置部署凭据”）。</source>
          <target state="new">在“仪表板”页的“速览”下，单击“设置部署凭据”（如果你已有部署凭据，则此选项应为“重置部署凭据”）。</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>部署凭据与某个 Microsoft 帐户关联。需要指定可用于使用 Git 和 FTP 进行部署的用户名和密码。可以使用这些凭据部署到与你的 Microsoft 帐户关联的所有 Azure 订阅中的任何 Web 应用。在对话框中提供 Git 和 FTP 部署凭据，并记下用户名和密码以供将来使用。</source>
          <target state="new">部署凭据与某个 Microsoft 帐户关联。需要指定可用于使用 Git 和 FTP 进行部署的用户名和密码。可以使用这些凭据部署到与你的 Microsoft 帐户关联的所有 Azure 订阅中的任何 Web 应用。在对话框中提供 Git 和 FTP 部署凭据，并记下用户名和密码以供将来使用。</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>获取 FTP 连接信息</source>
          <target state="new">获取 FTP 连接信息</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>若要使用 FTP 将应用程序文件部署到新建的 Web 应用，你需要获取连接信息。可通过两种方法获取连接信息。一种方法是访问 Web 应用的“仪表板”页；另一种方法是下载 Web 应用的发布配置文件。发布配置文件是一个 XML 文件，它提供 Azure 中 Web 应用的 FTP 主机名和登录凭据等信息。你可以使用此用户名和密码部署到与 Azure 帐户关联的所有订阅中的任何 Web 应用，而不仅仅是此 Web 应用。</source>
          <target state="new">若要使用 FTP 将应用程序文件部署到新建的 Web 应用，你需要获取连接信息。可通过两种方法获取连接信息。一种方法是访问 Web 应用的“仪表板”页；另一种方法是下载 Web 应用的发布配置文件。发布配置文件是一个 XML 文件，它提供 Azure 中 Web 应用的 FTP 主机名和登录凭据等信息。你可以使用此用户名和密码部署到与 Azure 帐户关联的所有订阅中的任何 Web 应用，而不仅仅是此 Web 应用。</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>从 Web 应用的“仪表板”页获取 FTP 连接信息：</source>
          <target state="new">从 Web 应用的“仪表板”页获取 FTP 连接信息：</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>在“速览”下，查找并复制“FTP 主机名”。这是类似于 <ph id="ph1">`ftp://cnws-prod-sha-001.ftp.chinacloudsites.chinacloudapi.cn`</ph> 的 URI。</source>
          <target state="new">在“速览”下，查找并复制“FTP 主机名”。这是类似于 <ph id="ph1">`ftp://cnws-prod-sha-001.ftp.chinacloudsites.chinacloudapi.cn`</ph> 的 URI。</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>在“速览”下，查找并复制“部署/FTP 用户”。此值的形式为 <bpt id="p1">*</bpt>WebsiteName\\DeploymentUsername<ept id="p1">*</ept>；例如 <ph id="ph1">`WebDemoWebsite\deployer77`</ph>。</source>
          <target state="new">在“速览”下，查找并复制“部署/FTP 用户”。此值的形式为 <bpt id="p1">*</bpt>WebsiteName\\DeploymentUsername<ept id="p1">*</ept>；例如 <ph id="ph1">`WebDemoWebsite\deployer77`</ph>。</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>从 Web 应用的发布配置文件获取 FTP 连接信息：</source>
          <target state="new">从 Web 应用的发布配置文件获取 FTP 连接信息：</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>在 Web 应用的“仪表板”中的“速览”下，单击“下载发布配置文件”。这会将一个 .publishsettings 文件下载到本地驱动器。</source>
          <target state="new">在 Web 应用的“仪表板”中的“速览”下，单击“下载发布配置文件”。这会将一个 .publishsettings 文件下载到本地驱动器。</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>在 XML 编辑器或文本编辑器中打开 .publishsettings 文件并找到包含 <ph id="ph1">`publishMethod="FTP"`</ph> 的 <ph id="ph2">`&lt;publishProfile&gt;`</ph> 元素。该元素应类似于：</source>
          <target state="new">在 XML 编辑器或文本编辑器中打开 .publishsettings 文件并找到包含 <ph id="ph1">`publishMethod="FTP"`</ph> 的 <ph id="ph2">`&lt;publishProfile&gt;`</ph> 元素。该元素应类似于：</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>请注意， Web 应用的 <ph id="ph1">`publishProfile`</ph> 设置将按如下所示映射到 FileZilla 站点管理员设置：</source>
          <target state="new">请注意， Web 应用的 <ph id="ph1">`publishProfile`</ph> 设置将按如下所示映射到 FileZilla 站点管理员设置：</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`publishUrl`</ph> 与你在“主机”中设置的“FTP 主机名”的值相同。</source>
          <target state="new"><ph id="ph1">`publishUrl`</ph> 与你在“主机”中设置的“FTP 主机名”的值相同。</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`publishMethod="FTP"`</ph> 表示你已将“协议”设置为“FTP - 文件传输协议”，已将“加密”设置为“使用普通 FTP”。</source>
          <target state="new"><ph id="ph1">`publishMethod="FTP"`</ph> 表示你已将“协议”设置为“FTP - 文件传输协议”，已将“加密”设置为“使用普通 FTP”。</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`userName`</ph> 和 <ph id="ph2">`userPWD`</ph> 是你在重置部署凭据时指定的实际用户名和密码值的密钥。<ph id="ph3">`userName`</ph> 与“部署/FTP 用户”相同。它们将映射到 FileZilla 中的“用户”和“密码”。</source>
          <target state="new"><ph id="ph1">`userName`</ph> 和 <ph id="ph2">`userPWD`</ph> 是你在重置部署凭据时指定的实际用户名和密码值的密钥。<ph id="ph3">`userName`</ph> 与“部署/FTP 用户”相同。它们将映射到 FileZilla 中的“用户”和“密码”。</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`ftpPassiveMode="True"`</ph> 表示 FTP 站点使用被动 FTP 传输；在“传输设置”选项卡上选择“被动”。</source>
          <target state="new"><ph id="ph1">`ftpPassiveMode="True"`</ph> 表示 FTP 站点使用被动 FTP 传输；在“传输设置”选项卡上选择“被动”。</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>配置 Web 应用以托管 Java 应用程序</source>
          <target state="new">配置 Web 应用以托管 Java 应用程序</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>发布应用程序之前，你需要更改几项配置设置，使 Web 应用可以托管 Java 应用程序。</source>
          <target state="new">发布应用程序之前，你需要更改几项配置设置，使 Web 应用可以托管 Java 应用程序。</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>在管理门户中，转到 Web 应用的“仪表板”页，然后单击“配置”。在“配置”页上指定以下设置。</source>
          <target state="new">在管理门户中，转到 Web 应用的“仪表板”页，然后单击“配置”。在“配置”页上指定以下设置。</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>在“Java 版本”中，默认值为“关闭”；选择你的应用程序所针对的 Java 版本，例如 1.7.0\_51。完成此操作后，还请确保“Web 容器”已设置为 Tomcat 服务器的版本。</source>
          <target state="new">在“Java 版本”中，默认值为“关闭”；选择你的应用程序所针对的 Java 版本，例如 1.7.0\_51。完成此操作后，还请确保“Web 容器”已设置为 Tomcat 服务器的版本。</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>在“默认文档”中，添加 index.jsp 并将其上移至列表的顶部。（ Web 应用的默认文件为 hostingstart.html。）</source>
          <target state="new">在“默认文档”中，添加 index.jsp 并将其上移至列表的顶部。（ Web 应用的默认文件为 hostingstart.html。）</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>单击“保存”。</source>
          <target state="new">单击“保存”。</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>使用 FileZilla 发布应用程序（可选）</source>
          <target state="new">使用 FileZilla 发布应用程序（可选）</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>可用于发布应用程序的另一个工具是 FileZilla，这是一个带有便捷式图形 UI 的常用第三方 FTP 客户端。如果尚未安装，则可以从 <bpt id="p1">[</bpt>http://filezilla-project.org/<ept id="p1">](http://filezilla-project.org/)</ept> 中下载并安装 FileZilla。有关使用客户端的详细信息，请参阅 <bpt id="p2">[</bpt>FileZilla 文档<ept id="p2">](https://wiki.filezilla-project.org/Documentation)</ept> 和 <bpt id="p3">[</bpt>FTP 客户端 - 第 4 部分：FileZilla<ept id="p3">](http://blogs.msdn.com/b/robert_mcmurray/archive/2008/12/17/ftp-clients-part-4-filezilla.aspx)</ept> 上的此博客条目。</source>
          <target state="new">可用于发布应用程序的另一个工具是 FileZilla，这是一个带有便捷式图形 UI 的常用第三方 FTP 客户端。如果尚未安装，则可以从 <bpt id="p1">[</bpt>http://filezilla-project.org/<ept id="p1">](http://filezilla-project.org/)</ept> 中下载并安装 FileZilla。有关使用客户端的详细信息，请参阅 <bpt id="p2">[</bpt>FileZilla 文档<ept id="p2">](https://wiki.filezilla-project.org/Documentation)</ept> 和 <bpt id="p3">[</bpt>FTP 客户端 - 第 4 部分：FileZilla<ept id="p3">](http://blogs.msdn.com/b/robert_mcmurray/archive/2008/12/17/ftp-clients-part-4-filezilla.aspx)</ept> 上的此博客条目。</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>在 FileZilla 中，单击“文件 &gt; 站点管理员”。</source>
          <target state="new">在 FileZilla 中，单击“文件 &gt; 站点管理员”。</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>在“站点管理员”对话框中，单击“新建站点”。随后，“选择条目”中会出现新的空白 FTP 站点，提示你提供名称。对于此过程，请将它命名为 <ph id="ph1">`AzureWebDemo-FTP`</ph>。</source>
          <target state="new">在“站点管理员”对话框中，单击“新建站点”。随后，“选择条目”中会出现新的空白 FTP 站点，提示你提供名称。对于此过程，请将它命名为 <ph id="ph1">`AzureWebDemo-FTP`</ph>。</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>在“常规”选项卡上，指定以下设置：</source>
          <target state="new">在“常规”选项卡上，指定以下设置：</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>-“主机”：输入从仪表板中复制的“FTP 主机名”</source>
          <target state="new">-“主机”：输入从仪表板中复制的“FTP 主机名”</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>-“端口”：（将其留空，因为这是被动传输并且服务器会确定使用的端口。）</source>
          <target state="new">-“端口”：（将其留空，因为这是被动传输并且服务器会确定使用的端口。）</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>-“协议”：FTP 文件传输协议</source>
          <target state="new">-“协议”：FTP 文件传输协议</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>-“加密”：使用普通的 FTP</source>
          <target state="new">-“加密”：使用普通的 FTP</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>-“登录类型”：普通</source>
          <target state="new">-“登录类型”：普通</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>-“用户”：输入从仪表板中复制的部署/FTP 用户。这是完整的 FTP 用户名，其形式为 <bpt id="p1">*</bpt>webappname\\username<ept id="p1">*</ept>。</source>
          <target state="new">-“用户”：输入从仪表板中复制的部署/FTP 用户。这是完整的 FTP 用户名，其形式为 <bpt id="p1">*</bpt>webappname\\username<ept id="p1">*</ept>。</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>-“密码”：输入在设置部署凭据时指定的密码。</source>
          <target state="new">-“密码”：输入在设置部署凭据时指定的密码。</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>在“传输设置”选项卡上，选择“被动”。</source>
          <target state="new">在“传输设置”选项卡上，选择“被动”。</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>单击“连接”。如果成功，FileZilla 的控制台则会显示 <ph id="ph1">`Status: Connected`</ph> 消息并发布 <ph id="ph2">`LIST`</ph> 命令，以列出目录内容。</source>
          <target state="new">单击“连接”。如果成功，FileZilla 的控制台则会显示 <ph id="ph1">`Status: Connected`</ph> 消息并发布 <ph id="ph2">`LIST`</ph> 命令，以列出目录内容。</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>在“本地”站点面板中，选择 JSPHello.war 文件所在的源目录；路径与以下路径类似：</source>
          <target state="new">在“本地”站点面板中，选择 JSPHello.war 文件所在的源目录；路径与以下路径类似：</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>在“远程”站点面板中，选择目标文件夹。WAR 文件将会部署到 Web 应用根目录下的 <ph id="ph1">`webapps`</ph> 目录中。导航到 <ph id="ph2">`/site/wwwroot`</ph>，右键单击 <ph id="ph3">`wwwroot`</ph>，然后选择“创建目录”。将目录命名为 <ph id="ph4">`webapps`</ph>，然后进入该目录。</source>
          <target state="new">在“远程”站点面板中，选择目标文件夹。WAR 文件将会部署到 Web 应用根目录下的 <ph id="ph1">`webapps`</ph> 目录中。导航到 <ph id="ph2">`/site/wwwroot`</ph>，右键单击 <ph id="ph3">`wwwroot`</ph>，然后选择“创建目录”。将目录命名为 <ph id="ph4">`webapps`</ph>，然后进入该目录。</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>将 JSPHello.war 传输到 <ph id="ph1">`/site/wwwroot/webapps`</ph>。在“本地”文件列表中选择 JSPHello.war，右键单击它，然后选择“上载”。随后它应该会出现在 <ph id="ph2">`/site/wwwroot/webapps`</ph> 中。</source>
          <target state="new">将 JSPHello.war 传输到 <ph id="ph1">`/site/wwwroot/webapps`</ph>。在“本地”文件列表中选择 JSPHello.war，右键单击它，然后选择“上载”。随后它应该会出现在 <ph id="ph2">`/site/wwwroot/webapps`</ph> 中。</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>将 JSPHello.war 复制到 webapps 目录后，Tomcat 服务器将自动解包（解压缩）该 WAR 文件中的文件。尽管 Tomcat 服务器马上就会解包，但文件可能需要在很长时间（可能是几小时）之后才会出现在 FTP 客户端中。</source>
          <target state="new">将 JSPHello.war 复制到 webapps 目录后，Tomcat 服务器将自动解包（解压缩）该 WAR 文件中的文件。尽管 Tomcat 服务器马上就会解包，但文件可能需要在很长时间（可能是几小时）之后才会出现在 FTP 客户端中。</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>在 Web 应用上运行 Hello World 应用程序</source>
          <target state="new">在 Web 应用上运行 Hello World 应用程序</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>上载 WAR 文件并确认 Tomcat 服务器已创建解包的 <ph id="ph1">`JSPHello`</ph> 目录后，请浏览到 <ph id="ph2">`http://webdemowebapp.chinacloudsites.cn/JSPHello`</ph> 以运行该应用程序。</source>
          <target state="new">上载 WAR 文件并确认 Tomcat 服务器已创建解包的 <ph id="ph1">`JSPHello`</ph> 目录后，请浏览到 <ph id="ph2">`http://webdemowebapp.chinacloudsites.cn/JSPHello`</ph> 以运行该应用程序。</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>如果从管理门户单击“浏览”，则可能获得默认网页，</source>
          <target state="new"><bpt id="p1">**</bpt>注意：<ept id="p1">**</ept>如果从管理门户单击“浏览”，则可能获得默认网页，</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>网页显示“已成功创建此基于 Java 的 Web 应用。</source>
          <target state="new">网页显示“已成功创建此基于 Java 的 Web 应用。</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>” 你可能需要刷新网页才能查看应用程序输出，</source>
          <target state="new">” 你可能需要刷新网页才能查看应用程序输出，</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>而不是默认网页。</source>
          <target state="new">而不是默认网页。</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>当应用程序运行时，你应会看到具有以下输出的网页：</source>
          <target state="new">当应用程序运行时，你应会看到具有以下输出的网页：</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>清理 Azure 资源</source>
          <target state="new">清理 Azure 资源</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>此过程创建 Azure Web 应用。只要 Web 应用存在，你就要支付资源的费用。除非你打算继续使用该 Web 应用进行测试或开发，否则应考虑停止或删除它。已停止的 Web 应用仍会产生较小的费用，但你随时可以重新启动它。删除某个 Web 应用会清除已上载到该 Web 应用的所有数据。</source>
          <target state="new">此过程创建 Azure Web 应用。只要 Web 应用存在，你就要支付资源的费用。除非你打算继续使用该 Web 应用进行测试或开发，否则应考虑停止或删除它。已停止的 Web 应用仍会产生较小的费用，但你随时可以重新启动它。删除某个 Web 应用会清除已上载到该 Web 应用的所有数据。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>