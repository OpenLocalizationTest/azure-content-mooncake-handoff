<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">262bc4cab4c6b578fb0d1d54fce45d9439dcc541</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用中继消息传送的服务总线 REST 教程 | Microsoft Azure</source>
          <target state="new">使用中继消息传送的服务总线 REST 教程 | Microsoft Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>生成一个简单的服务总线中继主机应用程序来公开基于 REST 的接口。</source>
          <target state="new">生成一个简单的服务总线中继主机应用程序来公开基于 REST 的接口。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>服务总线 REST 教程</source>
          <target state="new">服务总线 REST 教程</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本教程介绍了如何生成简单的服务总线主机应用程序来公开基于 REST 的接口。REST 使 Web 客户端（例如 Web 浏览器）可通过 HTTP 请求访问服务总线 API。</source>
          <target state="new">本教程介绍了如何生成简单的服务总线主机应用程序来公开基于 REST 的接口。REST 使 Web 客户端（例如 Web 浏览器）可通过 HTTP 请求访问服务总线 API。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本教程使用 Windows Communication Foundation (WCF) REST 编程模型在服务总线上构建 REST 服务。有关详细信息，请参阅 WCF 文档中的 <bpt id="p1">[</bpt>WCF REST 编程模型<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/bb412169.aspx)</ept>和<bpt id="p2">[</bpt>设计和实现服务<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/ms729746.aspx)</ept>。</source>
          <target state="new">本教程使用 Windows Communication Foundation (WCF) REST 编程模型在服务总线上构建 REST 服务。有关详细信息，请参阅 WCF 文档中的 <bpt id="p1">[</bpt>WCF REST 编程模型<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/bb412169.aspx)</ept>和<bpt id="p2">[</bpt>设计和实现服务<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/ms729746.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>步骤 1：注册 Azure 帐户</source>
          <target state="new">步骤 1：注册 Azure 帐户</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>第一步是创建服务命名空间并获取共享访问签名 (SAS) 密钥。命名空间为每个通过服务总线公开的应用程序提供应用程序边界。创建服务命名空间时，系统将自动生成 SAS 密钥。服务命名空间与 SAS 密钥的组合为服务总线提供了一个用于验证应用程序访问权限的凭据。</source>
          <target state="new">第一步是创建服务命名空间并获取共享访问签名 (SAS) 密钥。命名空间为每个通过服务总线公开的应用程序提供应用程序边界。创建服务命名空间时，系统将自动生成 SAS 密钥。服务命名空间与 SAS 密钥的组合为服务总线提供了一个用于验证应用程序访问权限的凭据。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>创建服务命名空间并获取 SAS 密钥</source>
          <target state="new">创建服务命名空间并获取 SAS 密钥</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>若要创建服务命名空间，请访问 [Azure 经典门户][]。单击左侧的“服务总线”，然后单击“创建”。为你的命名空间键入一个名称，然后单击复选标记。</source>
          <target state="new">若要创建服务命名空间，请访问 [Azure 经典门户][]。单击左侧的“服务总线”，然后单击“创建”。为你的命名空间键入一个名称，然后单击复选标记。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>在门户的主窗口中，单击在上一步中创建的服务命名空间的名称。</source>
          <target state="new">在门户的主窗口中，单击在上一步中创建的服务命名空间的名称。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>单击“配置”以查看服务命名空间的共享访问策略。</source>
          <target state="new">单击“配置”以查看服务命名空间的共享访问策略。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>记下 <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept> 策略的主键，或将其复制到剪贴板上。你将在本教程的后面部分使用此值。</source>
          <target state="new">记下 <bpt id="p1">**</bpt>RootManageSharedAccessKey<ept id="p1">**</ept> 策略的主键，或将其复制到剪贴板上。你将在本教程的后面部分使用此值。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>步骤 2：定义基于 REST 的 WCF 服务约定以用于服务总线</source>
          <target state="new">步骤 2：定义基于 REST 的 WCF 服务约定以用于服务总线</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>与其他服务总线服务一样，创建 REST 样式的服务时，必须定义约定。约定指定主机支持的操作。服务操作可以看作是 Web 服务方法。约定通过定义 C++、C# 或 Visual Basic 接口来创建。接口中的每个方法都对应一个特定的服务操作。必须将 <bpt id="p1">[</bpt>ServiceContractAttribute<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicecontractattribute.aspx)</ept> 属性应用到每个接口，且必须将 <bpt id="p2">[</bpt>OperationContractAttribute<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx)</ept> 属性应用到每个操作。如果具有 <bpt id="p3">[</bpt>ServiceContractAttribute<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicecontractattribute.aspx)</ept> 的接口中的方法没有 <bpt id="p4">[</bpt>OperationContractAttribute<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx)</ept>，则该方法是不公开的。该过程后面的示例中显示了这些任务所用的代码。</source>
          <target state="new">与其他服务总线服务一样，创建 REST 样式的服务时，必须定义约定。约定指定主机支持的操作。服务操作可以看作是 Web 服务方法。约定通过定义 C++、C# 或 Visual Basic 接口来创建。接口中的每个方法都对应一个特定的服务操作。必须将 <bpt id="p1">[</bpt>ServiceContractAttribute<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicecontractattribute.aspx)</ept> 属性应用到每个接口，且必须将 <bpt id="p2">[</bpt>OperationContractAttribute<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx)</ept> 属性应用到每个操作。如果具有 <bpt id="p3">[</bpt>ServiceContractAttribute<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicecontractattribute.aspx)</ept> 的接口中的方法没有 <bpt id="p4">[</bpt>OperationContractAttribute<ept id="p4">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx)</ept>，则该方法是不公开的。该过程后面的示例中显示了这些任务所用的代码。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>基本服务总线协定和 REST 样式的协定的主要区别在于是否向 <bpt id="p1">[</bpt>OperationContractAttribute<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx)</ept> 添加一个属性：<bpt id="p2">[</bpt>WebGetAttribute<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.web.webgetattribute.aspx)</ept>。此属性允许你将接口中的方法映射到该接口另一侧的方法。在此示例中，我们使用 <bpt id="p3">[</bpt>WebGetAttribute<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.web.webgetattribute.aspx)</ept> 将一个方法链接到 HTTP GET。这将使服务总线可以准确地检索并解释发送到接口的命令。</source>
          <target state="new">基本服务总线协定和 REST 样式的协定的主要区别在于是否向 <bpt id="p1">[</bpt>OperationContractAttribute<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.operationcontractattribute.aspx)</ept> 添加一个属性：<bpt id="p2">[</bpt>WebGetAttribute<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.web.webgetattribute.aspx)</ept>。此属性允许你将接口中的方法映射到该接口另一侧的方法。在此示例中，我们使用 <bpt id="p3">[</bpt>WebGetAttribute<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.web.webgetattribute.aspx)</ept> 将一个方法链接到 HTTP GET。这将使服务总线可以准确地检索并解释发送到接口的命令。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>使用接口创建服务总线约定</source>
          <target state="new">使用接口创建服务总线约定</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>以管理员身份打开 Visual Studio：在“开始”菜单中右键单击该程序，然后选择“以管理员身份运行”。</source>
          <target state="new">以管理员身份打开 Visual Studio：在“开始”菜单中右键单击该程序，然后选择“以管理员身份运行”。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>创建新的控制台应用程序项目。单击“文件”菜单并选择“新建”，然后单击“项目”。在“新建项目”对话框中，单击“Visual C#”（如果未显示“Visual C#”，则在“其他语言”下方查看），再选择“控制台应用程序”模板，并将其命名为“ImageListener”。使用默认“位置”。单击“确定”以创建该项目。</source>
          <target state="new">创建新的控制台应用程序项目。单击“文件”菜单并选择“新建”，然后单击“项目”。在“新建项目”对话框中，单击“Visual C#”（如果未显示“Visual C#”，则在“其他语言”下方查看），再选择“控制台应用程序”模板，并将其命名为“ImageListener”。使用默认“位置”。单击“确定”以创建该项目。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>对于 C# 项目，Visual Studio 会创建 <ph id="ph1">`Program.cs`</ph> 文件。此类包含一个空的 <ph id="ph2">`Main()`</ph> 方法，需要此方法才能正确生成控制台应用程序项目。</source>
          <target state="new">对于 C# 项目，Visual Studio 会创建 <ph id="ph1">`Program.cs`</ph> 文件。此类包含一个空的 <ph id="ph2">`Main()`</ph> 方法，需要此方法才能正确生成控制台应用程序项目。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>在项目中添加对 <bpt id="p1">**</bpt>System.ServiceModel.dll<ept id="p1">**</ept> 的引用：</source>
          <target state="new">在项目中添加对 <bpt id="p1">**</bpt>System.ServiceModel.dll<ept id="p1">**</ept> 的引用：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>a.在“解决方案资源管理器”中，右键单击项目文件夹下的“引用”文件夹，然后单击“添加引用”。</source>
          <target state="new">a.在“解决方案资源管理器”中，右键单击项目文件夹下的“引用”文件夹，然后单击“添加引用”。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>b.在“添加引用”对话框中选择“.NET”选项卡并向下滚动，直到看到“System.ServiceModel”。然后单击“确定”。</source>
          <target state="new">b.在“添加引用”对话框中选择“.NET”选项卡并向下滚动，直到看到“System.ServiceModel”。然后单击“确定”。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>重复上述步骤以添加对 <bpt id="p1">**</bpt>System.ServiceModel.Web.dll<ept id="p1">**</ept> 程序集的引用。</source>
          <target state="new">重复上述步骤以添加对 <bpt id="p1">**</bpt>System.ServiceModel.Web.dll<ept id="p1">**</ept> 程序集的引用。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>为 <bpt id="p1">**</bpt>System.ServiceModel<ept id="p1">**</ept>、<bpt id="p2">**</bpt>System.ServiceModel.Channels<ept id="p2">**</ept>、<bpt id="p3">**</bpt>System.ServiceModel.Web<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>System.IO<ept id="p4">**</ept> 命名空间添加 <ph id="ph1">`using`</ph> 语句。</source>
          <target state="new">为 <bpt id="p1">**</bpt>System.ServiceModel<ept id="p1">**</ept>、<bpt id="p2">**</bpt>System.ServiceModel.Channels<ept id="p2">**</ept>、<bpt id="p3">**</bpt>System.ServiceModel.Web<ept id="p3">**</ept> 和 <bpt id="p4">**</bpt>System.IO<ept id="p4">**</ept> 命名空间添加 <ph id="ph1">`using`</ph> 语句。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>System.ServiceModel<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.aspx)</ept> 是让你以通过编程方式访问 WCF 基本功能的命名空间。服务总线使用 WCF 的许多对象和属性来定义服务约定。你将在大多数服务总线中继应用程序中使用此命名空间。同样，<bpt id="p2">[</bpt>System.ServiceModel.Channels<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.channels.aspx)</ept> 可帮助定义通道，通道是用来与服务总线和客户端 Web 浏览器通信的对象。最后，<bpt id="p3">[</bpt>System.ServiceModel.Web<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.web.aspx)</ept> 包含的类型可用于创建基于 Web 的应用程序。</source>
          <target state="new"><bpt id="p1">[</bpt>System.ServiceModel<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.aspx)</ept> 是让你以通过编程方式访问 WCF 基本功能的命名空间。服务总线使用 WCF 的许多对象和属性来定义服务约定。你将在大多数服务总线中继应用程序中使用此命名空间。同样，<bpt id="p2">[</bpt>System.ServiceModel.Channels<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.channels.aspx)</ept> 可帮助定义通道，通道是用来与服务总线和客户端 Web 浏览器通信的对象。最后，<bpt id="p3">[</bpt>System.ServiceModel.Web<ept id="p3">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.web.aspx)</ept> 包含的类型可用于创建基于 Web 的应用程序。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>从 Visual Studio 重命名默认为 <bpt id="p1">**</bpt>Microsoft.ServiceBus.Samples<ept id="p1">**</ept> 的程序的命名空间。</source>
          <target state="new">从 Visual Studio 重命名默认为 <bpt id="p1">**</bpt>Microsoft.ServiceBus.Samples<ept id="p1">**</ept> 的程序的命名空间。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>在完成命名空间声明后，紧接着定义一个名为 <bpt id="p1">**</bpt>IImageContract<ept id="p1">**</ept> 的新接口，然后将 <bpt id="p2">**</bpt>ServiceContractAttribute<ept id="p2">**</ept> 属性应用于该接口，其值为 <ph id="ph1">`http://samples.microsoft.com/ServiceModel/Relay/`</ph>。该命名空间值不同于你在整个代码范围内使用的命名空间。该命名空间值将用作此约定的唯一标识符，并应有版本控制信息。有关详细信息，请参阅<bpt id="p3">[</bpt>服务版本控制<ept id="p3">](http://go.microsoft.com/fwlink/?LinkID=180498)</ept>。显式指定命名空间可防止将默认的命名空间值添加到约定名称中。</source>
          <target state="new">在完成命名空间声明后，紧接着定义一个名为 <bpt id="p1">**</bpt>IImageContract<ept id="p1">**</ept> 的新接口，然后将 <bpt id="p2">**</bpt>ServiceContractAttribute<ept id="p2">**</ept> 属性应用于该接口，其值为 <ph id="ph1">`http://samples.microsoft.com/ServiceModel/Relay/`</ph>。该命名空间值不同于你在整个代码范围内使用的命名空间。该命名空间值将用作此约定的唯一标识符，并应有版本控制信息。有关详细信息，请参阅<bpt id="p3">[</bpt>服务版本控制<ept id="p3">](http://go.microsoft.com/fwlink/?LinkID=180498)</ept>。显式指定命名空间可防止将默认的命名空间值添加到约定名称中。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`IImageContract`</ph> 接口中，为 <ph id="ph2">`IImageContract`</ph> 约定在接口中公开的单个操作声明一个方法，然后将 <ph id="ph3">`OperationContractAttribute`</ph> 属性应用到你希望将其作为公共服务总线约定的一部分进行公开的方法中。</source>
          <target state="new">在 <ph id="ph1">`IImageContract`</ph> 接口中，为 <ph id="ph2">`IImageContract`</ph> 约定在接口中公开的单个操作声明一个方法，然后将 <ph id="ph3">`OperationContractAttribute`</ph> 属性应用到你希望将其作为公共服务总线约定的一部分进行公开的方法中。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>紧接在 <bpt id="p1">**</bpt>OperationContract<ept id="p1">**</ept> 属性后面，应用 <bpt id="p2">**</bpt>WebGet<ept id="p2">**</ept> 属性。</source>
          <target state="new">紧接在 <bpt id="p1">**</bpt>OperationContract<ept id="p1">**</ept> 属性后面，应用 <bpt id="p2">**</bpt>WebGet<ept id="p2">**</ept> 属性。</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>这样做可以让服务总线将 HTTP GET 请求路由到 <bpt id="p1">**</bpt>GetImage<ept id="p1">**</ept>，并将 <bpt id="p2">**</bpt>GetImage<ept id="p2">**</ept> 的返回值转换为 HTTP GETRESPONSE 答复。稍后在本教程中，你将使用 Web 浏览器访问此方法，并将在浏览器中显示图像。</source>
          <target state="new">这样做可以让服务总线将 HTTP GET 请求路由到 <bpt id="p1">**</bpt>GetImage<ept id="p1">**</ept>，并将 <bpt id="p2">**</bpt>GetImage<ept id="p2">**</ept> 的返回值转换为 HTTP GETRESPONSE 答复。稍后在本教程中，你将使用 Web 浏览器访问此方法，并将在浏览器中显示图像。</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>直接在 <ph id="ph1">`IImageContract`</ph> 定义的后面，声明从 <ph id="ph2">`IImageContract`</ph> 和 <ph id="ph3">`IClientChannel`</ph> 接口继承的通道。</source>
          <target state="new">直接在 <ph id="ph1">`IImageContract`</ph> 定义的后面，声明从 <ph id="ph2">`IImageContract`</ph> 和 <ph id="ph3">`IClientChannel`</ph> 接口继承的通道。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>通道是服务和客户端用来互相传递信息的 WCF 对象。稍后，你将在主机应用程序中创建通道。然后服务总线将使用该通道将浏览器的 HTTP GET 请求传递到你的 <bpt id="p1">**</bpt>GetImage<ept id="p1">**</ept> 实现。服务总线还使用该通道获取 <bpt id="p2">**</bpt>GetImage<ept id="p2">**</ept> 返回值并将其转换为客户端浏览器的 HTTP GETRESPONSE。</source>
          <target state="new">通道是服务和客户端用来互相传递信息的 WCF 对象。稍后，你将在主机应用程序中创建通道。然后服务总线将使用该通道将浏览器的 HTTP GET 请求传递到你的 <bpt id="p1">**</bpt>GetImage<ept id="p1">**</ept> 实现。服务总线还使用该通道获取 <bpt id="p2">**</bpt>GetImage<ept id="p2">**</ept> 返回值并将其转换为客户端浏览器的 HTTP GETRESPONSE。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>在“生成”菜单中，单击“生成解决方案”以确认工作的准确性。</source>
          <target state="new">在“生成”菜单中，单击“生成解决方案”以确认工作的准确性。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>示例</source>
          <target state="new">示例</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>以下代码显示了一个用于定义服务总线协定的基本接口。</source>
          <target state="new">以下代码显示了一个用于定义服务总线协定的基本接口。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>步骤 3：实现基于 REST 的 WCF 服务约定以使用服务总线</source>
          <target state="new">步骤 3：实现基于 REST 的 WCF 服务约定以使用服务总线</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>创建 REST 样式的服务总线服务首先需要你创建使用接口定义的约定。下一步是实现该接口。此步骤包括创建名为 <bpt id="p1">**</bpt>ImageService<ept id="p1">**</ept> 的类，用于实现用户定义的 <bpt id="p2">**</bpt>IImageContract<ept id="p2">**</ept> 接口。实现约定后，即可使用 App.config 文件配置接口。该配置文件包含应用程序所需的信息，如服务的名称、约定的名称，以及用来与服务总线通信的协议类型。该过程后面的示例中提供了这些任务所用的代码。</source>
          <target state="new">创建 REST 样式的服务总线服务首先需要你创建使用接口定义的约定。下一步是实现该接口。此步骤包括创建名为 <bpt id="p1">**</bpt>ImageService<ept id="p1">**</ept> 的类，用于实现用户定义的 <bpt id="p2">**</bpt>IImageContract<ept id="p2">**</ept> 接口。实现约定后，即可使用 App.config 文件配置接口。该配置文件包含应用程序所需的信息，如服务的名称、约定的名称，以及用来与服务总线通信的协议类型。该过程后面的示例中提供了这些任务所用的代码。</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>与前面的步骤一样，实现 REST 样式的约定与实现基本服务总线约定之间的差别很小。</source>
          <target state="new">与前面的步骤一样，实现 REST 样式的约定与实现基本服务总线约定之间的差别很小。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>实现 REST 样式的服务总线约定</source>
          <target state="new">实现 REST 样式的服务总线约定</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>IImageContract<ept id="p1">**</ept> 接口定义的正下方创建名为 <bpt id="p2">**</bpt>ImageService<ept id="p2">**</ept> 的新类。<bpt id="p3">**</bpt>ImageService<ept id="p3">**</ept> 类实现 <bpt id="p4">**</bpt>IImageContract<ept id="p4">**</ept> 接口。。</source>
          <target state="new">在 <bpt id="p1">**</bpt>IImageContract<ept id="p1">**</ept> 接口定义的正下方创建名为 <bpt id="p2">**</bpt>ImageService<ept id="p2">**</ept> 的新类。<bpt id="p3">**</bpt>ImageService<ept id="p3">**</ept> 类实现 <bpt id="p4">**</bpt>IImageContract<ept id="p4">**</ept> 接口。。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>与其他接口实现类似，你可以在另一个文件中实现定义。但是，在本教程中，实现所在的文件与接口定义和 <ph id="ph1">`Main()`</ph> 方法所在的文件相同。</source>
          <target state="new">与其他接口实现类似，你可以在另一个文件中实现定义。但是，在本教程中，实现所在的文件与接口定义和 <ph id="ph1">`Main()`</ph> 方法所在的文件相同。</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">[</bpt>ServiceBehaviorAttribute<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicebehaviorattribute.aspx)</ept> 属性应用到 <bpt id="p2">**</bpt>IImageService<ept id="p2">**</ept> 类，以指示该类是 WCF 协定的实现。</source>
          <target state="new">将 <bpt id="p1">[</bpt>ServiceBehaviorAttribute<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/system.servicemodel.servicebehaviorattribute.aspx)</ept> 属性应用到 <bpt id="p2">**</bpt>IImageService<ept id="p2">**</ept> 类，以指示该类是 WCF 协定的实现。</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>如前所述，此命名空间不是传统的命名空间，而是用于标识约定的 WCF 体系结构的一部分。有关详细信息，请参阅 WCF 文档中的<bpt id="p1">[</bpt>数据约定名称<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/ms731045.aspx)</ept>主题。</source>
          <target state="new">如前所述，此命名空间不是传统的命名空间，而是用于标识约定的 WCF 体系结构的一部分。有关详细信息，请参阅 WCF 文档中的<bpt id="p1">[</bpt>数据约定名称<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/ms731045.aspx)</ept>主题。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>将一幅 .jpg 图像添加到项目中。</source>
          <target state="new">将一幅 .jpg 图像添加到项目中。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>这是服务在接收浏览器中显示的图片。右键单击你的项目并单击“添加”。然后单击“现有项”。使用“添加现有项”对话框浏览到相应的 .jpg，然后单击“添加”。</source>
          <target state="new">这是服务在接收浏览器中显示的图片。右键单击你的项目并单击“添加”。然后单击“现有项”。使用“添加现有项”对话框浏览到相应的 .jpg，然后单击“添加”。</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>添加文件时，请确保在“文件名:”旁的下拉列表中选择“所有文件(<bpt id="p1">*</bpt>.<ept id="p1">*</ept>)”。本教程的余下部分假定图像的名称为“image.jpg”。如果你的 .jpg 文件名不是这样，则必须重命名图像，或更改代码进行弥补。</source>
          <target state="new">添加文件时，请确保在“文件名:”旁的下拉列表中选择“所有文件(<bpt id="p1">*</bpt>.<ept id="p1">*</ept>)”。本教程的余下部分假定图像的名称为“image.jpg”。如果你的 .jpg 文件名不是这样，则必须重命名图像，或更改代码进行弥补。</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>为了确保正在运行的服务可以找到该图像文件，请在“解决方案资源管理器”中右键单击该图像文件。在“属性”窗格中，将“复制到输出目录”设置为“如果较新则复制”。</source>
          <target state="new">为了确保正在运行的服务可以找到该图像文件，请在“解决方案资源管理器”中右键单击该图像文件。在“属性”窗格中，将“复制到输出目录”设置为“如果较新则复制”。</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>在项目中添加对 <bpt id="p1">**</bpt>System.Drawing.dll<ept id="p1">**</ept>、<bpt id="p2">**</bpt>System.Runtime.Serialization.dll<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Microsoft.ServiceBus.dll<ept id="p3">**</ept> 程序集的引用，并添加以下关联的 <ph id="ph1">`using`</ph> 语句。</source>
          <target state="new">在项目中添加对 <bpt id="p1">**</bpt>System.Drawing.dll<ept id="p1">**</ept>、<bpt id="p2">**</bpt>System.Runtime.Serialization.dll<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>Microsoft.ServiceBus.dll<ept id="p3">**</ept> 程序集的引用，并添加以下关联的 <ph id="ph1">`using`</ph> 语句。</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>在 <bpt id="p1">**</bpt>ImageService<ept id="p1">**</ept> 类中定义以下构造函数，以便加载位图并准备将该位图发送到客户端浏览器。</source>
          <target state="new">在 <bpt id="p1">**</bpt>ImageService<ept id="p1">**</ept> 类中定义以下构造函数，以便加载位图并准备将该位图发送到客户端浏览器。</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>直接在上一代码后面，在 <bpt id="p1">**</bpt>ImageService<ept id="p1">**</ept> 类中添加以下 <bpt id="p2">**</bpt>GetImage<ept id="p2">**</ept> 方法，以返回包含该映像的 HTTP 消息。</source>
          <target state="new">直接在上一代码后面，在 <bpt id="p1">**</bpt>ImageService<ept id="p1">**</ept> 类中添加以下 <bpt id="p2">**</bpt>GetImage<ept id="p2">**</ept> 方法，以返回包含该映像的 HTTP 消息。</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>此实现使用 <bpt id="p1">**</bpt>MemoryStream<ept id="p1">**</ept> 检索映像并准备将其流式传输到浏览器。它将流位置设置为从零开始，将流内容声明为 jpeg，然后流式传输信息。</source>
          <target state="new">此实现使用 <bpt id="p1">**</bpt>MemoryStream<ept id="p1">**</ept> 检索映像并准备将其流式传输到浏览器。它将流位置设置为从零开始，将流内容声明为 jpeg，然后流式传输信息。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>在“生成”菜单中，单击“生成解决方案”。</source>
          <target state="new">在“生成”菜单中，单击“生成解决方案”。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>定义配置以便在服务总线上运行 Web 服务</source>
          <target state="new">定义配置以便在服务总线上运行 Web 服务</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>右键单击“ImageListener”项目。然后依次单击“添加”、“新建项”。</source>
          <target state="new">右键单击“ImageListener”项目。然后依次单击“添加”、“新建项”。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>在“解决方案资源管理器”中双击“App.config”，该文件当前包含以下 XML 元素。</source>
          <target state="new">在“解决方案资源管理器”中双击“App.config”，该文件当前包含以下 XML 元素。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>该配置文件与 WCF 配置文件类似，包括服务名称、终结点（即，服务总线公开的、让客户端和主机相互通信的位置）和绑定（用于通信的协议类型）。此处的主要差别在于，配置的服务终结点是指 <bpt id="p1">[</bpt>WebHttpRelayBinding<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.webhttprelaybinding.aspx)</ept> 绑定，它不是 .NET Framework 的一部分。有关如何配置服务总线应用程序的详细信息，请参阅<bpt id="p2">[</bpt> 配置 WCF 服务以注册到服务总线<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/ee173579.aspx)</ept>。</source>
          <target state="new">该配置文件与 WCF 配置文件类似，包括服务名称、终结点（即，服务总线公开的、让客户端和主机相互通信的位置）和绑定（用于通信的协议类型）。此处的主要差别在于，配置的服务终结点是指 <bpt id="p1">[</bpt>WebHttpRelayBinding<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/microsoft.servicebus.webhttprelaybinding.aspx)</ept> 绑定，它不是 .NET Framework 的一部分。有关如何配置服务总线应用程序的详细信息，请参阅<bpt id="p2">[</bpt> 配置 WCF 服务以注册到服务总线<ept id="p2">](https://msdn.microsoft.com/zh-cn/library/ee173579.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>在 App.config 文件中添加一个 <ph id="ph1">`&lt;system.serviceModel&gt;`</ph> XML 元素。该元素是一个 WCF 元素，用于定义一个或多个服务。在这里，它用于定义服务名称和终结点。</source>
          <target state="new">在 App.config 文件中添加一个 <ph id="ph1">`&lt;system.serviceModel&gt;`</ph> XML 元素。该元素是一个 WCF 元素，用于定义一个或多个服务。在这里，它用于定义服务名称和终结点。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`system.serviceModel`</ph> 元素中，添加包含以下内容的 <ph id="ph2">`&lt;bindings&gt;`</ph> 元素。这样就定义了应用程序中使用的绑定。你可以定义多个绑定，但在本教程中，你只要定义一个绑定。</source>
          <target state="new">在 <ph id="ph1">`system.serviceModel`</ph> 元素中，添加包含以下内容的 <ph id="ph2">`&lt;bindings&gt;`</ph> 元素。这样就定义了应用程序中使用的绑定。你可以定义多个绑定，但在本教程中，你只要定义一个绑定。</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`&lt;bindings&gt;`</ph> 元素后面添加 <ph id="ph2">`&lt;services&gt;`</ph> 元素。与绑定类似，可以在单个配置文件中定义多个服务。但是，在本教程中，你只要定义一个服务。</source>
          <target state="new">在 <ph id="ph1">`&lt;bindings&gt;`</ph> 元素后面添加 <ph id="ph2">`&lt;services&gt;`</ph> 元素。与绑定类似，可以在单个配置文件中定义多个服务。但是，在本教程中，你只要定义一个服务。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>此步骤将配置一个服务，该服务使用前面定义的默认 <bpt id="p1">**</bpt>webHttpRelayBinding<ept id="p1">**</ept>。此外，它还使用下一步骤中定义的默认 <bpt id="p2">**</bpt>sbTokenProvider<ept id="p2">**</ept>。</source>
          <target state="new">此步骤将配置一个服务，该服务使用前面定义的默认 <bpt id="p1">**</bpt>webHttpRelayBinding<ept id="p1">**</ept>。此外，它还使用下一步骤中定义的默认 <bpt id="p2">**</bpt>sbTokenProvider<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`&lt;services&gt;`</ph> 元素的后面，使用以下内容创建 <ph id="ph2">`&lt;behaviors&gt;`</ph> 元素，并将 “SAS\_KEY” 替换为你在通过 [Azure 经典门户][] 执行步骤 1 时获取的<bpt id="p1">*</bpt>共享访问签名<ept id="p1">*</ept> (SAS) 密钥。</source>
          <target state="new">在 <ph id="ph1">`&lt;services&gt;`</ph> 元素的后面，使用以下内容创建 <ph id="ph2">`&lt;behaviors&gt;`</ph> 元素，并将 “SAS\_KEY” 替换为你在通过 [Azure 经典门户][] 执行步骤 1 时获取的<bpt id="p1">*</bpt>共享访问签名<ept id="p1">*</ept> (SAS) 密钥。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>在“生成”菜单中，单击“生成解决方案”以生成整个解决方案。</source>
          <target state="new">在“生成”菜单中，单击“生成解决方案”以生成整个解决方案。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>示例</source>
          <target state="new">示例</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>以下代码演示了一个在服务总线上运行并使用 <bpt id="p1">**</bpt>WebHttpRelayBinding<ept id="p1">**</ept> 绑定的、基于 REST 的服务的约定和服务实现。</source>
          <target state="new">以下代码演示了一个在服务总线上运行并使用 <bpt id="p1">**</bpt>WebHttpRelayBinding<ept id="p1">**</ept> 绑定的、基于 REST 的服务的约定和服务实现。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>以下示例显示了与该服务关联的 App.config 文件。</source>
          <target state="new">以下示例显示了与该服务关联的 App.config 文件。</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>步骤 4：托管基于 REST 的 WCF 服务以使用服务总线</source>
          <target state="new">步骤 4：托管基于 REST 的 WCF 服务以使用服务总线</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>此步骤描述如何使用控制台应用程序在服务总线上运行 Web 服务。此步骤中编写的代码的完整列表将在过程后面的示例中提供。</source>
          <target state="new">此步骤描述如何使用控制台应用程序在服务总线上运行 Web 服务。此步骤中编写的代码的完整列表将在过程后面的示例中提供。</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>为服务创建基本地址</source>
          <target state="new">为服务创建基本地址</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>在 <ph id="ph1">`Main()`</ph> 函数声明中，创建一个变量以存储服务总线项目的服务命名空间。</source>
          <target state="new">在 <ph id="ph1">`Main()`</ph> 函数声明中，创建一个变量以存储服务总线项目的服务命名空间。</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>服务总线使用服务命名空间的名称来创建唯一 URI。</source>
          <target state="new">服务总线使用服务命名空间的名称来创建唯一 URI。</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>为基于服务命名空间的服务的基本地址创建 <ph id="ph1">`Uri`</ph> 实例。</source>
          <target state="new">为基于服务命名空间的服务的基本地址创建 <ph id="ph1">`Uri`</ph> 实例。</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>创建并配置 Web 服务主机</source>
          <target state="new">创建并配置 Web 服务主机</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>使用之前在本部分中创建的 URI 地址创建 Web 服务主机。</source>
          <target state="new">使用之前在本部分中创建的 URI 地址创建 Web 服务主机。</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>该服务主机是可实例化主机应用程序的 WCF 对象。本示例会将要创建的主机类型 (<bpt id="p1">**</bpt>ImageService<ept id="p1">**</ept>)，以及要公开主机应用程序的地址传递给它。</source>
          <target state="new">该服务主机是可实例化主机应用程序的 WCF 对象。本示例会将要创建的主机类型 (<bpt id="p1">**</bpt>ImageService<ept id="p1">**</ept>)，以及要公开主机应用程序的地址传递给它。</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>运行 Web 服务主机</source>
          <target state="new">运行 Web 服务主机</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>打开服务。</source>
          <target state="new">打开服务。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>服务现在正在运行。</source>
          <target state="new">服务现在正在运行。</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>显示表明服务正在运行以及如何停止服务的消息。</source>
          <target state="new">显示表明服务正在运行以及如何停止服务的消息。</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>完成后，关闭服务主机。</source>
          <target state="new">完成后，关闭服务主机。</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>示例</source>
          <target state="new">示例</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>以下示例包括本教程中前面步骤中使用的服务约定和实现，并将服务托管在控制台应用程序中。将以下代码编译到名为 ImageListener.exe 的可执行文件中。</source>
          <target state="new">以下示例包括本教程中前面步骤中使用的服务约定和实现，并将服务托管在控制台应用程序中。将以下代码编译到名为 ImageListener.exe 的可执行文件中。</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>编译代码</source>
          <target state="new">编译代码</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>生成解决方案之后，请执行以下代码来运行应用程序：</source>
          <target state="new">生成解决方案之后，请执行以下代码来运行应用程序：</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>从命令提示符运行服务 (ImageListener\\bin\\Debug\\ImageListener.exe)。</source>
          <target state="new">从命令提示符运行服务 (ImageListener\\bin\\Debug\\ImageListener.exe)。</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>将命令提示符中的地址复制并粘贴到浏览器中以查看图像。</source>
          <target state="new">将命令提示符中的地址复制并粘贴到浏览器中以查看图像。</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>后续步骤</source>
          <target state="new">后续步骤</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>在生成使用服务总线中继服务的应用程序后，请参阅以下文章了解有关中继消息传送的详细信息。</source>
          <target state="new">在生成使用服务总线中继服务的应用程序后，请参阅以下文章了解有关中继消息传送的详细信息。</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Azure 服务总线体系结构概述</source>
          <target state="new">Azure 服务总线体系结构概述</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>如何使用服务总线中继服务</source>
          <target state="new">如何使用服务总线中继服务</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>[Azure 经典门户]: http://manage.windowsazure.cn</source>
          <target state="new">[Azure 经典门户]: http://manage.windowsazure.cn</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>