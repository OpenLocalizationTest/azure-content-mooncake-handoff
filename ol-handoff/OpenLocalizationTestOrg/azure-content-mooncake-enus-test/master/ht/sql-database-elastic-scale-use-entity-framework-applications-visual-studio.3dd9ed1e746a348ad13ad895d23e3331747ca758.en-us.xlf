<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2df5f94676574e8be321e80b57e54608163a05d</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>将弹性数据库客户端库与实体框架配合使用 | Azure</source>
          <target state="new">将弹性数据库客户端库与实体框架配合使用 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>将弹性数据库客户端库和实体框架用于数据库编码</source>
          <target state="new">将弹性数据库客户端库和实体框架用于数据库编码</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>将弹性数据库客户端库与实体框架配合使用</source>
          <target state="new">将弹性数据库客户端库与实体框架配合使用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>此文档介绍与<bpt id="p1">[</bpt>弹性数据库工具<ept id="p1">](/documentation/articles/sql-database-elastic-scale-introduction)</ept>集成所需的实体框架应用程序中的更改。重点是使用实体框架的<bpt id="p2">**</bpt>代码优先<ept id="p2">**</ept>方法撰写<bpt id="p3">[</bpt>分片映射管理<ept id="p3">](/documentation/articles/sql-database-elastic-scale-shard-map-management)</ept>和<bpt id="p4">[</bpt>数据相关路由<ept id="p4">](/documentation/articles/sql-database-elastic-scale-data-dependent-routing)</ept>。<bpt id="p5">[</bpt>EF 的代码优先 – 新数据库<ept id="p5">](http://msdn.microsoft.com/data/jj193542.aspx)</ept>教程在本文档中充当运行示例。本文档附带的示例代码是 Visual Studio 代码示例中弹性数据库工具示例的一部分。</source>
          <target state="new">此文档介绍与<bpt id="p1">[</bpt>弹性数据库工具<ept id="p1">](/documentation/articles/sql-database-elastic-scale-introduction)</ept>集成所需的实体框架应用程序中的更改。重点是使用实体框架的<bpt id="p2">**</bpt>代码优先<ept id="p2">**</ept>方法撰写<bpt id="p3">[</bpt>分片映射管理<ept id="p3">](/documentation/articles/sql-database-elastic-scale-shard-map-management)</ept>和<bpt id="p4">[</bpt>数据相关路由<ept id="p4">](/documentation/articles/sql-database-elastic-scale-data-dependent-routing)</ept>。<bpt id="p5">[</bpt>EF 的代码优先 – 新数据库<ept id="p5">](http://msdn.microsoft.com/data/jj193542.aspx)</ept>教程在本文档中充当运行示例。本文档附带的示例代码是 Visual Studio 代码示例中弹性数据库工具示例的一部分。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>下载和运行示例代码</source>
          <target state="new">下载和运行示例代码</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>若要下载本文的代码：</source>
          <target state="new">若要下载本文的代码：</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>需要 Visual Studio 2012 或更高版本。</source>
          <target state="new">需要 Visual Studio 2012 或更高版本。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>启动 Visual Studio。</source>
          <target state="new">启动 Visual Studio。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>在 Visual Studio 中，选择“文件”-&gt;“新建项目”。</source>
          <target state="new">在 Visual Studio 中，选择“文件”-&gt;“新建项目”。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>在“新建项目”对话框中，导航到“Visual C#”的“联机示例”，然后在右上方的搜索框中键入“弹性数据库”。</source>
          <target state="new">在“新建项目”对话框中，导航到“Visual C#”的“联机示例”，然后在右上方的搜索框中键入“弹性数据库”。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>实体框架和弹性数据库示例应用</source>
          <target state="new">实体框架和弹性数据库示例应用</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>选择名为 <bpt id="p1">**</bpt>Azure SQL 的弹性数据库工具 – 实体框架集成<ept id="p1">**</ept>的示例。在接受许可证后，该示例将加载。</source>
          <target state="new">选择名为 <bpt id="p1">**</bpt>Azure SQL 的弹性数据库工具 – 实体框架集成<ept id="p1">**</ept>的示例。在接受许可证后，该示例将加载。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>若要运行该示例，您需要在 Azure SQL 数据库中创建三个空数据库：</source>
          <target state="new">若要运行该示例，您需要在 Azure SQL 数据库中创建三个空数据库：</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>分片映射管理器数据库</source>
          <target state="new">分片映射管理器数据库</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>分片 1 数据库</source>
          <target state="new">分片 1 数据库</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>分片 2 数据库</source>
          <target state="new">分片 2 数据库</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>创建这些数据库后，使用你的 Azure SQL DB 服务器名称、数据库名称和你的凭据填充 <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> 中的占位符以连接到数据库。在 Visual Studio 中构建解决方案。在构建过程中，Visual Studio 将下载弹性数据库客户端库、实体框架和暂时性故障处理所需的 NuGet 包。确保已为您的解决方案启用还原 NuGet 包。您可以通过右键单击 Visual Studio 解决方案资源管理器中的解决方案文件来启用此设置。</source>
          <target state="new">创建这些数据库后，使用你的 Azure SQL DB 服务器名称、数据库名称和你的凭据填充 <bpt id="p1">**</bpt>Program.cs<ept id="p1">**</ept> 中的占位符以连接到数据库。在 Visual Studio 中构建解决方案。在构建过程中，Visual Studio 将下载弹性数据库客户端库、实体框架和暂时性故障处理所需的 NuGet 包。确保已为您的解决方案启用还原 NuGet 包。您可以通过右键单击 Visual Studio 解决方案资源管理器中的解决方案文件来启用此设置。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>实体框架工作流</source>
          <target state="new">实体框架工作流</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>实体框架开发人员依靠以下四个工作流之一构建应用程序并确保应用程序对象的持久性：</source>
          <target state="new">实体框架开发人员依靠以下四个工作流之一构建应用程序并确保应用程序对象的持久性：</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>代码优先（新数据库）<ept id="p1">**</ept>：EF 开发人员在应用程序代码中创建模型，然后 EF 从其生成数据库。</source>
          <target state="new"><bpt id="p1">**</bpt>代码优先（新数据库）<ept id="p1">**</ept>：EF 开发人员在应用程序代码中创建模型，然后 EF 从其生成数据库。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>代码优先（现有数据库）<ept id="p1">**</ept>：开发人员让 EF 从现有数据库生成模型的应用程序代码。</source>
          <target state="new"><bpt id="p1">**</bpt>代码优先（现有数据库）<ept id="p1">**</ept>：开发人员让 EF 从现有数据库生成模型的应用程序代码。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>模型优先<ept id="p1">**</ept>：开发人员在 EF 设计器中创建模型，然后 EF 从该模型创建数据库。</source>
          <target state="new"><bpt id="p1">**</bpt>模型优先<ept id="p1">**</ept>：开发人员在 EF 设计器中创建模型，然后 EF 从该模型创建数据库。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>数据库优先<ept id="p1">**</ept>：开发人员使用 EF 工具从现有数据库推断模型。</source>
          <target state="new"><bpt id="p1">**</bpt>数据库优先<ept id="p1">**</ept>：开发人员使用 EF 工具从现有数据库推断模型。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>所有这些方法依靠 DbContext 类为应用程序透明管理数据库连接和数据库架构。DbContext 基类上的不同构造函数允许对连接创建、数据库引导和架构创建的不同控制级别，我们将在本文档的后面部分中进行更详细地讨论。挑战主要产生于这一事实：由 EF 提供的数据库连接管理与弹性数据库客户端库提供的数据相关的路由接口的连接管理功能交叉。</source>
          <target state="new">所有这些方法依靠 DbContext 类为应用程序透明管理数据库连接和数据库架构。DbContext 基类上的不同构造函数允许对连接创建、数据库引导和架构创建的不同控制级别，我们将在本文档的后面部分中进行更详细地讨论。挑战主要产生于这一事实：由 EF 提供的数据库连接管理与弹性数据库客户端库提供的数据相关的路由接口的连接管理功能交叉。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>弹性数据库工具假设条件</source>
          <target state="new">弹性数据库工具假设条件</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>有关术语定义，请参阅<bpt id="p1">[</bpt>弹性数据库工具词汇表<ept id="p1">](/documentation/articles/sql-database-elastic-scale-glossary)</ept>。</source>
          <target state="new">有关术语定义，请参阅<bpt id="p1">[</bpt>弹性数据库工具词汇表<ept id="p1">](/documentation/articles/sql-database-elastic-scale-glossary)</ept>。</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>借助弹性数据库客户端库，你可以定义称为 shardlet 的应用程序数据分区。Shardlet 由分片键标识，并且映射到特定数据库。应用程序可以具有任意所需数量的数据库，并根据当前业务需求分发 shardlet 以提供足够的容量或性能。分片键值到数据库的映射由弹性数据库客户端 API 提供的分片映射存储。我们将此功能称为<bpt id="p1">**</bpt>分片映射管理<ept id="p1">**</ept>或简称为 SMM。分片映射还为带有分片键的请求充当数据库连接的代理。我们将此功能称为<bpt id="p2">**</bpt>数据相关的路由<ept id="p2">**</ept>。</source>
          <target state="new">借助弹性数据库客户端库，你可以定义称为 shardlet 的应用程序数据分区。Shardlet 由分片键标识，并且映射到特定数据库。应用程序可以具有任意所需数量的数据库，并根据当前业务需求分发 shardlet 以提供足够的容量或性能。分片键值到数据库的映射由弹性数据库客户端 API 提供的分片映射存储。我们将此功能称为<bpt id="p1">**</bpt>分片映射管理<ept id="p1">**</ept>或简称为 SMM。分片映射还为带有分片键的请求充当数据库连接的代理。我们将此功能称为<bpt id="p2">**</bpt>数据相关的路由<ept id="p2">**</ept>。</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>分片映射管理器防止用户在 shardlet 数据中出现不一致视图，当发生并发 shardlet 管理操作时（例如将数据从一个分片重新分配到另一个分片）可能发生此情况。为此，客户端库管理的分片映射将会代理应用程序的数据库连接。当分片管理操作可能影响为其创建数据库连接的 shardlet 时，此操作允许分片映射功能自动终止该连接。此方法需要与一些 EF 的功能集成，例如从现有连接创建新连接以检查数据库是否存在。在通常情况下，我们观察到标准 DbContext 构造函数仅对可安全克隆用于 EF 工作的关闭数据库连接有效。弹性数据库的设计原则是仅代理打开的连接。有人可能认为，在交付给 EF DbContext 之前关闭由客户端库代理的连接可能解决此问题。但是，通过关闭连接并依靠 EF 重新打开它，将放弃由该库执行的验证和一致性检查。但是，EF 中的迁移功能使用这些连接以对应用程序透明的方式管理基础数据库架构。理想情况下，我们希望在相同的应用程序中保留和合并所有这些来自弹性数据库客户端库和 EF 的功能。以下部分将更详细地讨论这些属性和要求。</source>
          <target state="new">分片映射管理器防止用户在 shardlet 数据中出现不一致视图，当发生并发 shardlet 管理操作时（例如将数据从一个分片重新分配到另一个分片）可能发生此情况。为此，客户端库管理的分片映射将会代理应用程序的数据库连接。当分片管理操作可能影响为其创建数据库连接的 shardlet 时，此操作允许分片映射功能自动终止该连接。此方法需要与一些 EF 的功能集成，例如从现有连接创建新连接以检查数据库是否存在。在通常情况下，我们观察到标准 DbContext 构造函数仅对可安全克隆用于 EF 工作的关闭数据库连接有效。弹性数据库的设计原则是仅代理打开的连接。有人可能认为，在交付给 EF DbContext 之前关闭由客户端库代理的连接可能解决此问题。但是，通过关闭连接并依靠 EF 重新打开它，将放弃由该库执行的验证和一致性检查。但是，EF 中的迁移功能使用这些连接以对应用程序透明的方式管理基础数据库架构。理想情况下，我们希望在相同的应用程序中保留和合并所有这些来自弹性数据库客户端库和 EF 的功能。以下部分将更详细地讨论这些属性和要求。</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>要求</source>
          <target state="new">要求</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>在使用弹性数据库客户端库和实体框架 API 时，我们希望保留以下属性：</source>
          <target state="new">在使用弹性数据库客户端库和实体框架 API 时，我们希望保留以下属性：</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>向外缩放<ept id="p1">**</ept>：我们需要根据应用程序的容量需求，在分片应用程序的数据层中添加或删除数据库。这意味着对数据库的创建和删除的控制，以及使用弹性数据库分片映射管理器 API 管理数据库和 shardlet 的映射。</source>
          <target state="new"><bpt id="p1">**</bpt>向外缩放<ept id="p1">**</ept>：我们需要根据应用程序的容量需求，在分片应用程序的数据层中添加或删除数据库。这意味着对数据库的创建和删除的控制，以及使用弹性数据库分片映射管理器 API 管理数据库和 shardlet 的映射。</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>一致性<ept id="p1">**</ept>：应用程序利用分片，并且使用客户端库的数据相关路由功能。若要避免损坏或错误的查询结果，连接通过分片映射管理器进行代理。此操作还会保留验证和一致性。</source>
          <target state="new"><bpt id="p1">**</bpt>一致性<ept id="p1">**</ept>：应用程序利用分片，并且使用客户端库的数据相关路由功能。若要避免损坏或错误的查询结果，连接通过分片映射管理器进行代理。此操作还会保留验证和一致性。</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>代码优先<ept id="p1">**</ept>：保留 EF 的代码优先范例的便利性。在“代码优先”中，应用程序中的类透明映射到基础数据库结构。应用程序代码与 DbSet 交互以为基础数据处理中涉及的大部分方面提供掩码。</source>
          <target state="new"><bpt id="p1">**</bpt>代码优先<ept id="p1">**</ept>：保留 EF 的代码优先范例的便利性。在“代码优先”中，应用程序中的类透明映射到基础数据库结构。应用程序代码与 DbSet 交互以为基础数据处理中涉及的大部分方面提供掩码。</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>架构<ept id="p1">**</ept>：实体框架通过迁移处理初始数据库架构创建和后续架构演变。通过保留这些功能，随着数据的演变调整您的应用很容易。</source>
          <target state="new"><bpt id="p1">**</bpt>架构<ept id="p1">**</ept>：实体框架通过迁移处理初始数据库架构创建和后续架构演变。通过保留这些功能，随着数据的演变调整您的应用很容易。</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>以下指南指导如何满足使用弹性数据库工具的“代码优先”应用程序的这些要求。</source>
          <target state="new">以下指南指导如何满足使用弹性数据库工具的“代码优先”应用程序的这些要求。</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>使用 EF DbContext 的数据相关路由</source>
          <target state="new">使用 EF DbContext 的数据相关路由</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>使用实体框架的数据库连接通常通过 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 的子类来管理。通过从 <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> 派生创建这些子类。这是你定义你的 <bpt id="p3">**</bpt>DbSet<ept id="p3">**</ept> 的位置，它可为你的应用程序实现支持数据库的 CLR 对象的集合。在数据依赖路由的上下文中，我们可以标识多个有用的属性，这些属性不一定会为其他 EF 代码优先应用程序方案保存：</source>
          <target state="new">使用实体框架的数据库连接通常通过 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 的子类来管理。通过从 <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> 派生创建这些子类。这是你定义你的 <bpt id="p3">**</bpt>DbSet<ept id="p3">**</ept> 的位置，它可为你的应用程序实现支持数据库的 CLR 对象的集合。在数据依赖路由的上下文中，我们可以标识多个有用的属性，这些属性不一定会为其他 EF 代码优先应用程序方案保存：</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>数据库已经存在，并且已在弹性数据库分片映射中注册。</source>
          <target state="new">数据库已经存在，并且已在弹性数据库分片映射中注册。</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>该应用程序的架构已部署到数据库（如下说明）。</source>
          <target state="new">该应用程序的架构已部署到数据库（如下说明）。</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>到数据库的数据相关路由连接由分片映射代理。</source>
          <target state="new">到数据库的数据相关路由连接由分片映射代理。</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>将 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 与数据相关的路由集成以向外缩放：</source>
          <target state="new">将 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 与数据相关的路由集成以向外缩放：</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>通过分片映射管理器的弹性数据库客户端接口创建物理数据库连接，</source>
          <target state="new">通过分片映射管理器的弹性数据库客户端接口创建物理数据库连接，</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 子类包装该连接。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 子类包装该连接。</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>将该连接向下传递到 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 基类以确保 EF 一侧上的所有处理也全部发生。</source>
          <target state="new">将该连接向下传递到 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 基类以确保 EF 一侧上的所有处理也全部发生。</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>以下代码示例演示了此方法。（附带的 Visual Studio 项目中也提供此代码）</source>
          <target state="new">以下代码示例演示了此方法。（附带的 Visual Studio 项目中也提供此代码）</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>要点</source>
          <target state="new">要点</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>新的构造函数将替换 DbContext 子类中的默认构造函数</source>
          <target state="new">新的构造函数将替换 DbContext 子类中的默认构造函数</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>新的构造函数采用数据相关路由通过弹性数据库客户端库所需的参数：</source>
          <target state="new">新的构造函数采用数据相关路由通过弹性数据库客户端库所需的参数：</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>用于访问数据依赖路由接口的分片映射，</source>
          <target state="new">用于访问数据依赖路由接口的分片映射，</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>用于标识 shardlet 的分片键，</source>
          <target state="new">用于标识 shardlet 的分片键，</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>带有到该分片的数据依赖路由连接的凭据的连接字符串。</source>
          <target state="new">带有到该分片的数据依赖路由连接的凭据的连接字符串。</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>对基类构造函数的调用需要绕行到静态方法，以执行数据依赖路由所需的所有步骤。</source>
          <target state="new">对基类构造函数的调用需要绕行到静态方法，以执行数据依赖路由所需的所有步骤。</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>它使用分片映射上的弹性数据库客户端接口的 OpenConnectionForKey 调用来建立开放连接。</source>
          <target state="new">它使用分片映射上的弹性数据库客户端接口的 OpenConnectionForKey 调用来建立开放连接。</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>分片映射创建到保存特定分片键的 shardlet 的分片的开放连接。</source>
          <target state="new">分片映射创建到保存特定分片键的 shardlet 的分片的开放连接。</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>此开放连接将传递回 DbContext 的基类构造函数以指示此连接将由 EF 使用，而不是让 EF 自动创建新连接。这样，该连接已由弹性数据库客户端 API 标记，以便它可以保证分片映射管理操作下的一致性。</source>
          <target state="new">此开放连接将传递回 DbContext 的基类构造函数以指示此连接将由 EF 使用，而不是让 EF 自动创建新连接。这样，该连接已由弹性数据库客户端 API 标记，以便它可以保证分片映射管理操作下的一致性。</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>为您的 DbContext 子类使用新的构造函数而不是您的代码中的默认构造函数。下面是一个示例：</source>
          <target state="new">为您的 DbContext 子类使用新的构造函数而不是您的代码中的默认构造函数。下面是一个示例：</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>新的构造函数将打开到该分片的连接，该分片保存由 <bpt id="p1">**</bpt>tenantid1<ept id="p1">**</ept> 的值标识的 shardlet 的数据。<bpt id="p2">**</bpt>using<ept id="p2">**</ept> 块中的代码保持不变以访问 <bpt id="p3">**</bpt>DbSet<ept id="p3">**</ept>，进而获取有关对 <bpt id="p4">**</bpt>tenantid1<ept id="p4">**</ept> 的分片使用 EF 的博客。这改变了 using 块中的代码的语义，因此所有数据库操作的范围现在设置为保留 <bpt id="p5">**</bpt>tenantid1<ept id="p5">**</ept> 的单个分片。例如，博客 <bpt id="p6">**</bpt>DbSet<ept id="p6">**</ept> 上的 LINQ 查询将仅返回当前分片上存储的博客，不返回存储在其他分片上的博客。</source>
          <target state="new">新的构造函数将打开到该分片的连接，该分片保存由 <bpt id="p1">**</bpt>tenantid1<ept id="p1">**</ept> 的值标识的 shardlet 的数据。<bpt id="p2">**</bpt>using<ept id="p2">**</ept> 块中的代码保持不变以访问 <bpt id="p3">**</bpt>DbSet<ept id="p3">**</ept>，进而获取有关对 <bpt id="p4">**</bpt>tenantid1<ept id="p4">**</ept> 的分片使用 EF 的博客。这改变了 using 块中的代码的语义，因此所有数据库操作的范围现在设置为保留 <bpt id="p5">**</bpt>tenantid1<ept id="p5">**</ept> 的单个分片。例如，博客 <bpt id="p6">**</bpt>DbSet<ept id="p6">**</ept> 上的 LINQ 查询将仅返回当前分片上存储的博客，不返回存储在其他分片上的博客。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>暂时性故障处理</source>
          <target state="new">暂时性故障处理</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Microsoft 模式和实践团队已发布<bpt id="p1">[</bpt>暂时性故障处理应用程序块<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/dn440719.aspx)</ept>。该库通过弹性缩放客户端库与 EF 结合使用。但是，确保任何暂时性异常返回到我们可以确保新构造函数在暂时性故障后被使用的位置，以便任何新连接尝试使用我们微调过的构造函数来进行。否则，不保证连接到正确分片，并且无法保证当分片映射发生更改时保持连接。</source>
          <target state="new">Microsoft 模式和实践团队已发布<bpt id="p1">[</bpt>暂时性故障处理应用程序块<ept id="p1">](https://msdn.microsoft.com/zh-cn/library/dn440719.aspx)</ept>。该库通过弹性缩放客户端库与 EF 结合使用。但是，确保任何暂时性异常返回到我们可以确保新构造函数在暂时性故障后被使用的位置，以便任何新连接尝试使用我们微调过的构造函数来进行。否则，不保证连接到正确分片，并且无法保证当分片映射发生更改时保持连接。</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>以下代码示例演示如何围绕新的 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 子类构造函数使用 SQL 重试策略：</source>
          <target state="new">以下代码示例演示如何围绕新的 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 子类构造函数使用 SQL 重试策略：</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>上述代码中的 <bpt id="p1">**</bpt>SqlDatabaseUtils.SqlRetryPolicy<ept id="p1">**</ept> 定义为 <bpt id="p2">**</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id="p2">**</ept>，重试计数为 10，每两次重试的等待时间为 5 秒。此方法类似于 EF 和用户启动事务的指南（请参阅<bpt id="p3">[</bpt>重试执行策略的限制（从 EF6 开始）<ept id="p3">](http://msdn.microsoft.com/data/dn307226)</ept>。这两种情况都要求应用程序控制返回暂时性异常的范围：重新打开事务，或者（如下所示）从使用弹性数据库客户端库的适当构造函数重新创建上下文。</source>
          <target state="new">上述代码中的 <bpt id="p1">**</bpt>SqlDatabaseUtils.SqlRetryPolicy<ept id="p1">**</ept> 定义为 <bpt id="p2">**</bpt>SqlDatabaseTransientErrorDetectionStrategy<ept id="p2">**</ept>，重试计数为 10，每两次重试的等待时间为 5 秒。此方法类似于 EF 和用户启动事务的指南（请参阅<bpt id="p3">[</bpt>重试执行策略的限制（从 EF6 开始）<ept id="p3">](http://msdn.microsoft.com/data/dn307226)</ept>。这两种情况都要求应用程序控制返回暂时性异常的范围：重新打开事务，或者（如下所示）从使用弹性数据库客户端库的适当构造函数重新创建上下文。</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>需要控制其中暂时性异常返回范围还使该列不能使用 EF 随附的内置 <bpt id="p1">**</bpt>SqlAzureExecutionStrategy<ept id="p1">**</ept>。<bpt id="p2">**</bpt>SqlAzureExecutionStrategy<ept id="p2">**</ept> 将重新打开连接，但不会使用 <bpt id="p3">**</bpt>OpenConnectionForKey<ept id="p3">**</ept>，从而绕过了调用 <bpt id="p4">**</bpt>OpenConnectionForKey<ept id="p4">**</ept> 期间执行的所有验证。该代码示例使用的是 EF 也已随附的内置 <bpt id="p5">**</bpt>DefaultExecutionStrategy<ept id="p5">**</ept>。与 <bpt id="p6">**</bpt>SqlAzureExecutionStrategy<ept id="p6">**</ept> 相反，它能与暂时性故障处理中的重试策略配合工作。执行策略在 <bpt id="p7">**</bpt>ElasticScaleDbConfiguration<ept id="p7">**</ept> 类中设置。请注意，我们决定不使用 <bpt id="p8">**</bpt>DefaultSqlExecutionStrategy<ept id="p8">**</ept>，因为在发生暂时性异常时，最好使用 <bpt id="p9">**</bpt>SqlAzureExecutionStrategy<ept id="p9">**</ept> - 这会导致所述的错误行为。有关不同重试策略和 EF 的详细信息，请参阅 <bpt id="p10">[</bpt>EF 中的连接弹性<ept id="p10">](http://msdn.microsoft.com/data/dn456835.aspx)</ept>。</source>
          <target state="new">需要控制其中暂时性异常返回范围还使该列不能使用 EF 随附的内置 <bpt id="p1">**</bpt>SqlAzureExecutionStrategy<ept id="p1">**</ept>。<bpt id="p2">**</bpt>SqlAzureExecutionStrategy<ept id="p2">**</ept> 将重新打开连接，但不会使用 <bpt id="p3">**</bpt>OpenConnectionForKey<ept id="p3">**</ept>，从而绕过了调用 <bpt id="p4">**</bpt>OpenConnectionForKey<ept id="p4">**</ept> 期间执行的所有验证。该代码示例使用的是 EF 也已随附的内置 <bpt id="p5">**</bpt>DefaultExecutionStrategy<ept id="p5">**</ept>。与 <bpt id="p6">**</bpt>SqlAzureExecutionStrategy<ept id="p6">**</ept> 相反，它能与暂时性故障处理中的重试策略配合工作。执行策略在 <bpt id="p7">**</bpt>ElasticScaleDbConfiguration<ept id="p7">**</ept> 类中设置。请注意，我们决定不使用 <bpt id="p8">**</bpt>DefaultSqlExecutionStrategy<ept id="p8">**</ept>，因为在发生暂时性异常时，最好使用 <bpt id="p9">**</bpt>SqlAzureExecutionStrategy<ept id="p9">**</ept> - 这会导致所述的错误行为。有关不同重试策略和 EF 的详细信息，请参阅 <bpt id="p10">[</bpt>EF 中的连接弹性<ept id="p10">](http://msdn.microsoft.com/data/dn456835.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>构造函数重写</source>
          <target state="new">构造函数重写</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>上方的代码示例演示你的应用程序所需的默认构造函数重写，以将数据相关路由与实体框架一起使用。下表将此方法一般化到其他构造函数。</source>
          <target state="new">上方的代码示例演示你的应用程序所需的默认构造函数重写，以将数据相关路由与实体框架一起使用。下表将此方法一般化到其他构造函数。</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>当前构造函数</source>
          <target state="new">当前构造函数</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>为数据重写构造函数</source>
          <target state="new">为数据重写构造函数</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>基构造函数</source>
          <target state="new">基构造函数</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>说明</source>
          <target state="new">说明</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>MyContext()</source>
          <target state="new">MyContext()</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey)</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>DbContext(DbConnection, bool)</source>
          <target state="new">DbContext(DbConnection, bool)</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>该连接需要是分片映射和数据依赖路由键的一个函数。您需要通过 EF 绕过自动连接创建，并改用分片映射代理该连接。</source>
          <target state="new">该连接需要是分片映射和数据依赖路由键的一个函数。您需要通过 EF 绕过自动连接创建，并改用分片映射代理该连接。</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>MyContext(string)</source>
          <target state="new">MyContext(string)</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey)</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>DbContext(DbConnection, bool)</source>
          <target state="new">DbContext(DbConnection, bool)</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>该连接是分片映射和数据依赖路由键的一个函数。固定数据库名称或连接字符串将在它们通过分片映射绕过验证时不起作用。</source>
          <target state="new">该连接是分片映射和数据依赖路由键的一个函数。固定数据库名称或连接字符串将在它们通过分片映射绕过验证时不起作用。</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>MyContext(DbCompiledModel)</source>
          <target state="new">MyContext(DbCompiledModel)</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, DbCompiledModel)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, DbCompiledModel)</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>DbContext(DbConnection, DbCompiledModel, bool)</source>
          <target state="new">DbContext(DbConnection, DbCompiledModel, bool)</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>将为给定分片映射和分片键创建连接，并提供模型。编译后的模型将传递到基构造函数。</source>
          <target state="new">将为给定分片映射和分片键创建连接，并提供模型。编译后的模型将传递到基构造函数。</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>MyContext(DbConnection, bool)</source>
          <target state="new">MyContext(DbConnection, bool)</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, bool)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, bool)</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>DbContext(DbConnection, bool)</source>
          <target state="new">DbContext(DbConnection, bool)</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>该连接需要从分片映射和键推断。无法将其作为输入提供（除非该输入已经在使用分片映射和键）。将传递布尔值。</source>
          <target state="new">该连接需要从分片映射和键推断。无法将其作为输入提供（除非该输入已经在使用分片映射和键）。将传递布尔值。</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>MyContext(string, DbCompiledModel)</source>
          <target state="new">MyContext(string, DbCompiledModel)</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, DbCompiledModel)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, DbCompiledModel)</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>DbContext(DbConnection, DbCompiledModel, bool)</source>
          <target state="new">DbContext(DbConnection, DbCompiledModel, bool)</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>该连接需要从分片映射和键推断。无法将其作为输入提供（除非该输入正在使用分片映射和键）。将传递编译后的模型。</source>
          <target state="new">该连接需要从分片映射和键推断。无法将其作为输入提供（除非该输入正在使用分片映射和键）。将传递编译后的模型。</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>MyContext(ObjectContext, bool)</source>
          <target state="new">MyContext(ObjectContext, bool)</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, ObjectContext, bool)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, ObjectContext, bool)</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>DbContext(ObjectContext, bool)</source>
          <target state="new">DbContext(ObjectContext, bool)</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>新的构造函数需要确保 ObjectContext 中作为输入传递的任何连接重新路由到由灵活扩展管理的连接。ObjectContext 的更详细讨论不在本文档的范围内。</source>
          <target state="new">新的构造函数需要确保 ObjectContext 中作为输入传递的任何连接重新路由到由灵活扩展管理的连接。ObjectContext 的更详细讨论不在本文档的范围内。</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>MyContext(DbConnection, DbCompiledModel,bool)</source>
          <target state="new">MyContext(DbConnection, DbCompiledModel,bool)</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>ElasticScaleContext(ShardMap, TKey, DbCompiledModel, bool)</source>
          <target state="new">ElasticScaleContext(ShardMap, TKey, DbCompiledModel, bool)</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>DbContext(DbConnection, DbCompiledModel, bool)；</source>
          <target state="new">DbContext(DbConnection, DbCompiledModel, bool)；</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>该连接需要从分片映射和键推断。无法将连接作为输入提供（除非该输入已经在使用分片映射和键）。模型和布尔值将传递到基类构造函数。</source>
          <target state="new">该连接需要从分片映射和键推断。无法将连接作为输入提供（除非该输入已经在使用分片映射和键）。模型和布尔值将传递到基类构造函数。</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>通过 EF 迁移分片架构部署</source>
          <target state="new">通过 EF 迁移分片架构部署</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>自动架构管理是实体框架提供的一项便利。在使用弹性数据库工具的应用程序的上下文中，我们希望保留此功能以在数据库添加到分片应用程序时，将架构自动设置为新创建的分片。主要的使用案例是增加使用 EF 的分片应用程序的数据层的容量。依靠 EF 的架构管理功能可减少在 EF 上构建的分片应用程序的数据库管理工作。</source>
          <target state="new">自动架构管理是实体框架提供的一项便利。在使用弹性数据库工具的应用程序的上下文中，我们希望保留此功能以在数据库添加到分片应用程序时，将架构自动设置为新创建的分片。主要的使用案例是增加使用 EF 的分片应用程序的数据层的容量。依靠 EF 的架构管理功能可减少在 EF 上构建的分片应用程序的数据库管理工作。</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>通过 EF 迁移的架构部署对于<bpt id="p1">**</bpt>未打开的连接<ept id="p1">**</ept>效果最佳。这与依靠由弹性数据库客户端 API 提供的打开连接的数据相关的路由方案相反。另一个区别是一致性要求：尽管确保所有数据相关的路由连接的一致性以防止并发分片映射操作是可取的，但是对于到尚未在分片映射中注册以及尚未分配为保存 shardlet 的新数据库的初始架构部署，这不是问题。因此，针对此方案我们可以依靠常规数据库连接，与数据依赖路由相反。</source>
          <target state="new">通过 EF 迁移的架构部署对于<bpt id="p1">**</bpt>未打开的连接<ept id="p1">**</ept>效果最佳。这与依靠由弹性数据库客户端 API 提供的打开连接的数据相关的路由方案相反。另一个区别是一致性要求：尽管确保所有数据相关的路由连接的一致性以防止并发分片映射操作是可取的，但是对于到尚未在分片映射中注册以及尚未分配为保存 shardlet 的新数据库的初始架构部署，这不是问题。因此，针对此方案我们可以依靠常规数据库连接，与数据依赖路由相反。</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>这将导致一种方法，在此方法中通过 EF 迁移的架构部署将与新数据库的注册紧密耦合，以作为应用程序的分片映射中的一个分片。这依靠以下先决条件：</source>
          <target state="new">这将导致一种方法，在此方法中通过 EF 迁移的架构部署将与新数据库的注册紧密耦合，以作为应用程序的分片映射中的一个分片。这依靠以下先决条件：</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>该数据库已创建。</source>
          <target state="new">该数据库已创建。</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>该数据库为空 - 它未保存任何用户架构和用户数据。</source>
          <target state="new">该数据库为空 - 它未保存任何用户架构和用户数据。</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>该数据库无法通过数据相关的路由的弹性数据库客户端 API 访问。</source>
          <target state="new">该数据库无法通过数据相关的路由的弹性数据库客户端 API 访问。</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>具备这些先决条件后，我们可以创建一个常规的未打开的 <bpt id="p1">**</bpt>SqlConnection<ept id="p1">**</ept> 以便为架构部署启动 EF 迁移。以下代码示例演示了此方法。</source>
          <target state="new">具备这些先决条件后，我们可以创建一个常规的未打开的 <bpt id="p1">**</bpt>SqlConnection<ept id="p1">**</ept> 以便为架构部署启动 EF 迁移。以下代码示例演示了此方法。</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>此示例演示方法 <bpt id="p1">**</bpt>RegisterNewShard<ept id="p1">**</ept>，此方法注册分片映射中的分片，通过 EF 迁移部署架构并将分片键的映射存储到该分片。它依靠 <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> 子类的构造函数（在本示例中为 <bpt id="p3">**</bpt>ElasticScaleContext<ept id="p3">**</ept>），此构造函数采用 SQL 连接字符串作为输入。此构造函数的代码很简单，如以下示例所示：</source>
          <target state="new">此示例演示方法 <bpt id="p1">**</bpt>RegisterNewShard<ept id="p1">**</ept>，此方法注册分片映射中的分片，通过 EF 迁移部署架构并将分片键的映射存储到该分片。它依靠 <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> 子类的构造函数（在本示例中为 <bpt id="p3">**</bpt>ElasticScaleContext<ept id="p3">**</ept>），此构造函数采用 SQL 连接字符串作为输入。此构造函数的代码很简单，如以下示例所示：</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>有人可能使用了从基类继承的构造函数版本。但是该代码需要确保在连接时使用 EF 的默认初始化程序。因此在调用带有连接字符串的基类构造函数前，需短暂绕行到静态方法。请注意，分片的注册应该在不同的应用域或进程中运行，以确保 EF 的初始化程序设置不冲突。</source>
          <target state="new">有人可能使用了从基类继承的构造函数版本。但是该代码需要确保在连接时使用 EF 的默认初始化程序。因此在调用带有连接字符串的基类构造函数前，需短暂绕行到静态方法。请注意，分片的注册应该在不同的应用域或进程中运行，以确保 EF 的初始化程序设置不冲突。</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>限制</source>
          <target state="new">限制</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>本文档中概述的方法存在一些限制：</source>
          <target state="new">本文档中概述的方法存在一些限制：</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>使用 <bpt id="p1">**</bpt>LocalDb<ept id="p1">**</ept> 的 EF 应用程序在使用弹性数据库客户端库之前，需要先迁移到常规 SQL Server 数据库。使用弹性缩放通过分片向外扩展应用程序不适用于 <bpt id="p2">**</bpt>LocalDb<ept id="p2">**</ept>。请注意，开发仍然可以使用 <bpt id="p3">**</bpt>LocalDb<ept id="p3">**</ept>。</source>
          <target state="new">使用 <bpt id="p1">**</bpt>LocalDb<ept id="p1">**</ept> 的 EF 应用程序在使用弹性数据库客户端库之前，需要先迁移到常规 SQL Server 数据库。使用弹性缩放通过分片向外扩展应用程序不适用于 <bpt id="p2">**</bpt>LocalDb<ept id="p2">**</ept>。请注意，开发仍然可以使用 <bpt id="p3">**</bpt>LocalDb<ept id="p3">**</ept>。</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>任何意味着数据库架构更改的应用程序更改需要在所有分片上通过 EF 迁移。本文档的示例代码不演示如何执行此操作。考虑使用带有 ConnectionString 参数的 Update-Database 循环访问所有分片，或使用 Update-Database 与 –Script 选项提取 T-SQL 脚本用于挂起的迁移，并将 T-SQL 脚本应用到您的分片。</source>
          <target state="new">任何意味着数据库架构更改的应用程序更改需要在所有分片上通过 EF 迁移。本文档的示例代码不演示如何执行此操作。考虑使用带有 ConnectionString 参数的 Update-Database 循环访问所有分片，或使用 Update-Database 与 –Script 选项提取 T-SQL 脚本用于挂起的迁移，并将 T-SQL 脚本应用到您的分片。</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>给定一个请求，假设它所有的数据库处理包含在单个分片内，如该请求所提供的分片键所标识的那样。但是，此假设并不总是有效。例如，当无法提供分片键时。为解决此问题，客户端库提供 <bpt id="p1">**</bpt>MultiShardQuery<ept id="p1">**</ept> 类，此类可实现连接抽象以用于在多个分片上查询。学习结合使用 <bpt id="p2">**</bpt>MultiShardQuery<ept id="p2">**</ept> 和 EF 不在本文档的范围内。</source>
          <target state="new">给定一个请求，假设它所有的数据库处理包含在单个分片内，如该请求所提供的分片键所标识的那样。但是，此假设并不总是有效。例如，当无法提供分片键时。为解决此问题，客户端库提供 <bpt id="p1">**</bpt>MultiShardQuery<ept id="p1">**</ept> 类，此类可实现连接抽象以用于在多个分片上查询。学习结合使用 <bpt id="p2">**</bpt>MultiShardQuery<ept id="p2">**</ept> 和 EF 不在本文档的范围内。</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>结论</source>
          <target state="new">结论</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>实体框架应用程序可以轻松享用 Azure SQL 数据库中的弹性数据库工具带来的好处。通过本文档中概述的步骤，EF 应用程序可以通过重构 EF 应用程序中使用的 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 子类的构造函数来使用弹性数据库客户端库的数据相关路由功能。这将所需的更改限制到 <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> 类已经存在的位置。此外，EF 应用程序可以通过将调用必要的 EF 迁移的步骤与新分片的注册和分片映射中的映射进行结合，来继续从自动架构部署中受益。</source>
          <target state="new">实体框架应用程序可以轻松享用 Azure SQL 数据库中的弹性数据库工具带来的好处。通过本文档中概述的步骤，EF 应用程序可以通过重构 EF 应用程序中使用的 <bpt id="p1">**</bpt>DbContext<ept id="p1">**</ept> 子类的构造函数来使用弹性数据库客户端库的数据相关路由功能。这将所需的更改限制到 <bpt id="p2">**</bpt>DbContext<ept id="p2">**</ept> 类已经存在的位置。此外，EF 应用程序可以通过将调用必要的 EF 迁移的步骤与新分片的注册和分片映射中的映射进行结合，来继续从自动架构部署中受益。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>