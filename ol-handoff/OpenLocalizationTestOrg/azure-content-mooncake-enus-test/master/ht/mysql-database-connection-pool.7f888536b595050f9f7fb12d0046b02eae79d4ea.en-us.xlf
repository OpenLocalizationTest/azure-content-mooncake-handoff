<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">98c543084fa5d196e14785fb8b2baad136d9bdae</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何高效连接到MySQL Database on Azure- Azure 微软云</source>
          <target state="new">如何高效连接到MySQL Database on Azure- Azure 微软云</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>合理的利用连接池访问MySQL Database on Azure会优化性能。本文介绍如何使用连接池有效地访问MySQL Database on Azure，并给出以JAVA和PHP为例的示例代码供参考。</source>
          <target state="new">合理的利用连接池访问MySQL Database on Azure会优化性能。本文介绍如何使用连接池有效地访问MySQL Database on Azure，并给出以JAVA和PHP为例的示例代码供参考。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何高效连接到MySQL Database on Azure<ph id="ph1">&lt;sup style="color: #a5ce00; font-weight: bold; text-transform: uppercase; font-family: '微软雅黑'; font-size: 20px;" class="wa-previewTag"&gt;</ph><ph id="ph2">&lt;/sup&gt;</ph></source>
          <target state="new">如何高效连接到MySQL Database on Azure<ph id="ph1">&lt;sup style="color: #a5ce00; font-weight: bold; text-transform: uppercase; font-family: '微软雅黑'; font-size: 20px;" class="wa-previewTag"&gt;</ph><ph id="ph2">&lt;/sup&gt;</ph></target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>[AZURE.SELECTOR]</source>
          <target state="new">[AZURE.SELECTOR]</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>中文版</source>
          <target state="new">中文版</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>英文版</source>
          <target state="new">英文版</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>数据库连接是一种有限的资源，合理的利用连接池访问MySQL Database on Azure会优化性能。本文介绍如何使用连接池或长连接高效效地访问MySQL Database on Azure。</source>
          <target state="new">数据库连接是一种有限的资源，合理的利用连接池访问MySQL Database on Azure会优化性能。本文介绍如何使用连接池或长连接高效效地访问MySQL Database on Azure。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>通过连接池访问数据库 （推荐）</source>
          <target state="new">通过连接池访问数据库 （推荐）</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>由于在发起连接时，MySQL Database on Azure会做更多的验证工作，导致发起连接的开销相对于本地数据库更大。对于数据库连接的管理能够显著影响到整个应用程序的性能。为了使您的程序能够达到性能最优，目标是降低发起连接的次数，把发起连接的时间不放在关键的代码路径上。我们强烈建议您使用数据库连接池(connection pool)或长连接(persistent connection)连接MySQL Database on Azure。</source>
          <target state="new">由于在发起连接时，MySQL Database on Azure会做更多的验证工作，导致发起连接的开销相对于本地数据库更大。对于数据库连接的管理能够显著影响到整个应用程序的性能。为了使您的程序能够达到性能最优，目标是降低发起连接的次数，把发起连接的时间不放在关键的代码路径上。我们强烈建议您使用数据库连接池(connection pool)或长连接(persistent connection)连接MySQL Database on Azure。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>数据库连接池负责建立，管理和分配数据库连接。 当应用程序申请一个数据库连接时，它优先分配一个现有的空闲的数据库连接，而不是重新建立一个。当数据库连接使用完毕后，它会回收该连接以备再次使用，而不是直接关闭该连接。</source>
          <target state="new">数据库连接池负责建立，管理和分配数据库连接。 当应用程序申请一个数据库连接时，它优先分配一个现有的空闲的数据库连接，而不是重新建立一个。当数据库连接使用完毕后，它会回收该连接以备再次使用，而不是直接关闭该连接。</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>为了更好地说明，本文提供<bpt id="p1">[</bpt>以JAVA为例的一段示例代码<ept id="p1">](http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/documents/MySQLConnectionPool.java )</ept>，供参考，您也可以参考<bpt id="p2">[</bpt>Apache common DBCP<ept id="p2">](http://commons.apache.org/proper/commons-dbcp/)</ept>来了解更多。</source>
          <target state="new">为了更好地说明，本文提供<bpt id="p1">[</bpt>以JAVA为例的一段示例代码<ept id="p1">](http://wacnstorage.blob.core.chinacloudapi.cn/marketing-resource/documents/MySQLConnectionPool.java )</ept>，供参考，您也可以参考<bpt id="p2">[</bpt>Apache common DBCP<ept id="p2">](http://commons.apache.org/proper/commons-dbcp/)</ept>来了解更多。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph><bpt id="p1">**</bpt>服务器端会设置超时机制，如果一个连接在一段时间内处于闲置状态，服务器就会关闭这个链接，以释放不必要的资源占用。因此为了保障在您使用时，您的长链接的有效性，请设置验证机制，具体配置可参考<bpt id="p2">[</bpt>如何在客户端配置验证机制确认长连接有效性<ept id="p2">](/documentation/articles/mysql-database-validationquery)</ept><ept id="p1">**</ept></source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph><bpt id="p1">**</bpt>服务器端会设置超时机制，如果一个连接在一段时间内处于闲置状态，服务器就会关闭这个链接，以释放不必要的资源占用。因此为了保障在您使用时，您的长链接的有效性，请设置验证机制，具体配置可参考<bpt id="p2">[</bpt>如何在客户端配置验证机制确认长连接有效性<ept id="p2">](/documentation/articles/mysql-database-validationquery)</ept><ept id="p1">**</ept></target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>通过长连接访问数据库 （推荐）</source>
          <target state="new">通过长连接访问数据库 （推荐）</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>PHP中建议您使用长连接，长连接的概念与连接池的概念类似。需要注意的是PHP目前有三种驱动，除Mysqli外，其他两种驱动均支持Persistent Connection.</source>
          <target state="new">PHP中建议您使用长连接，长连接的概念与连接池的概念类似。需要注意的是PHP目前有三种驱动，除Mysqli外，其他两种驱动均支持Persistent Connection.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>查看<bpt id="p1">[</bpt>利用PDO建立长连接<ept id="p1">](http://php.net/manual/en/pdo.connections.php)</ept>；</source>
          <target state="new">查看<bpt id="p1">[</bpt>利用PDO建立长连接<ept id="p1">](http://php.net/manual/en/pdo.connections.php)</ept>；</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>查看<bpt id="p1">[</bpt>利用MySQL引擎建立长连接<ept id="p1">](http://php.net/manual/en/function.mysql-pconnect.php)</ept>。</source>
          <target state="new">查看<bpt id="p1">[</bpt>利用MySQL引擎建立长连接<ept id="p1">](http://php.net/manual/en/function.mysql-pconnect.php)</ept>。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>将短连接修改至长连接对于代码的改动不大，但是对于性能的提高在很多典型应用场景有很大的作用。</source>
          <target state="new">将短连接修改至长连接对于代码的改动不大，但是对于性能的提高在很多典型应用场景有很大的作用。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>通过等待重试机制短连接访问数据库</source>
          <target state="new">通过等待重试机制短连接访问数据库</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>基于资源的有效性，我们强烈推荐您使用连接池或是长连接访问数据库。但如果您使用短连接，在并发连接数接近上限，连接出现失败的情况下，我们建议您尝试多次连接，可以适当设定等待时间，初次等待时间可以较短，后可以进行多次的随机事件的等待。</source>
          <target state="new">基于资源的有效性，我们强烈推荐您使用连接池或是长连接访问数据库。但如果您使用短连接，在并发连接数接近上限，连接出现失败的情况下，我们建议您尝试多次连接，可以适当设定等待时间，初次等待时间可以较短，后可以进行多次的随机事件的等待。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>