<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7dd4413100d31b342da3832431220f0e2a7a74e3</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>使用 MSDeploy、主机名和 SSL 证书部署 Web 应用</source>
          <target state="new">使用 MSDeploy、主机名和 SSL 证书部署 Web 应用</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>通过使用 MSDeploy 并设置自定义主机名和 SSL 证书，在 Azure 资源管理器模板中部署 Web 应用</source>
          <target state="new">通过使用 MSDeploy 并设置自定义主机名和 SSL 证书，在 Azure 资源管理器模板中部署 Web 应用</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>使用 MSDeploy、自定义主机名和 SSL 证书部署 Web 应用</source>
          <target state="new">使用 MSDeploy、自定义主机名和 SSL 证书部署 Web 应用</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>本指南逐步说明如何通过利用 MSDeploy，以及将自定义主机名和 SSL 证书添加到 ARM 模板，来创建 Azure Web 应用的端到端部署。</source>
          <target state="new">本指南逐步说明如何通过利用 MSDeploy，以及将自定义主机名和 SSL 证书添加到 ARM 模板，来创建 Azure Web 应用的端到端部署。</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>有关创建模板的详细信息，请参阅<bpt id="p1">[</bpt>创作 Azure 资源管理器模板<ept id="p1">](/documentation/articles/resource-group-authoring-templates)</ept>。</source>
          <target state="new">有关创建模板的详细信息，请参阅<bpt id="p1">[</bpt>创作 Azure 资源管理器模板<ept id="p1">](/documentation/articles/resource-group-authoring-templates)</ept>。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>创建示例应用程序</source>
          <target state="new">创建示例应用程序</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>你将部署一个 ASP.NET Web 应用程序。第一步是创建简单的 Web 应用程序（或者，可以选择使用现有的应用程序 - 在这种情况下，可以跳过此步骤）。</source>
          <target state="new">你将部署一个 ASP.NET Web 应用程序。第一步是创建简单的 Web 应用程序（或者，可以选择使用现有的应用程序 - 在这种情况下，可以跳过此步骤）。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>打开 Visual Studio 2015，然后选择“文件”&gt;“新建项目”。在出现的对话框中，选择“Web”&gt;“ASP.NET Web 应用程序”。在“模板”下选择“Web”，然后选择 MVC 模板。在“更改身份验证类型”中，选择“无身份验证”。这是为了尽量简化示例应用程序。</source>
          <target state="new">打开 Visual Studio 2015，然后选择“文件”&gt;“新建项目”。在出现的对话框中，选择“Web”&gt;“ASP.NET Web 应用程序”。在“模板”下选择“Web”，然后选择 MVC 模板。在“更改身份验证类型”中，选择“无身份验证”。这是为了尽量简化示例应用程序。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>此时，你将获得一个可随时在部署过程中使用的基本 ASP.Net Web 应用。</source>
          <target state="new">此时，你将获得一个可随时在部署过程中使用的基本 ASP.Net Web 应用。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>创建 MSDeploy 包</source>
          <target state="new">创建 MSDeploy 包</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>下一步是创建用于将 Web 应用部署到 Azure 的包。为此，请保存你的项目，然后从命令行运行以下命令：</source>
          <target state="new">下一步是创建用于将 Web 应用部署到 Azure 的包。为此，请保存你的项目，然后从命令行运行以下命令：</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>这将在 PackageLocation 文件夹下创建一个压缩包。现在，应用程序可供部署，你可以构建 Azure 资源管理器模板来执行此操作。</source>
          <target state="new">这将在 PackageLocation 文件夹下创建一个压缩包。现在，应用程序可供部署，你可以构建 Azure 资源管理器模板来执行此操作。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>创建 ARM 模板</source>
          <target state="new">创建 ARM 模板</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>首先，让我们创建一个基本的 ARM 模板，以便创建 Web 应用程序和托管计划（请注意，为求简洁，此处并未显示参数和变量）。</source>
          <target state="new">首先，让我们创建一个基本的 ARM 模板，以便创建 Web 应用程序和托管计划（请注意，为求简洁，此处并未显示参数和变量）。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>接下来，需要修改 Web 应用资源，以使用嵌套的 MSDeploy 资源。这样便可以引用前面创建的包，并指示 Azure 资源管理器使用 MSDeploy 将包部署到 Azure WebApp。下面显示了包含嵌套 MSDeploy 资源的 Microsoft.Web/sites 资源：</source>
          <target state="new">接下来，需要修改 Web 应用资源，以使用嵌套的 MSDeploy 资源。这样便可以引用前面创建的包，并指示 Azure 资源管理器使用 MSDeploy 将包部署到 Azure WebApp。下面显示了包含嵌套 MSDeploy 资源的 Microsoft.Web/sites 资源：</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>现在，你会注意到 MSDeploy 资源使用了如下定义的 <bpt id="p1">**</bpt>packageUri<ept id="p1">**</ept> 属性：</source>
          <target state="new">现在，你会注意到 MSDeploy 资源使用了如下定义的 <bpt id="p1">**</bpt>packageUri<ept id="p1">**</ept> 属性：</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>此 <bpt id="p1">**</bpt>packageUri<ept id="p1">**</ept> 使用的存储帐户 URI 指向包 zip 所要上载到的存储帐户。当你部署模板时，Azure 资源管理器会利用<bpt id="p2">[</bpt>共享访问签名<ept id="p2">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>从存储帐户将包提取到本地。此过程将会通过一个 PowerShell 脚本自动化，该脚本将上载包，调用 Azure 管理 API 以创建所需的密钥，然后将这些密钥作为参数传入模板（ <bpt id="p3">*</bpt>\_artifactsLocation<ept id="p3">*</ept> 和 <bpt id="p4">*</bpt>\_artifactsLocationSasToken<ept id="p4">*</ept> ）。你需要针对存储容器下包所上载到的文件夹和文件名定义参数。</source>
          <target state="new">此 <bpt id="p1">**</bpt>packageUri<ept id="p1">**</ept> 使用的存储帐户 URI 指向包 zip 所要上载到的存储帐户。当你部署模板时，Azure 资源管理器会利用<bpt id="p2">[</bpt>共享访问签名<ept id="p2">](/documentation/articles/storage-dotnet-shared-access-signature-part-1)</ept>从存储帐户将包提取到本地。此过程将会通过一个 PowerShell 脚本自动化，该脚本将上载包，调用 Azure 管理 API 以创建所需的密钥，然后将这些密钥作为参数传入模板（ <bpt id="p3">*</bpt>\_artifactsLocation<ept id="p3">*</ept> 和 <bpt id="p4">*</bpt>\_artifactsLocationSasToken<ept id="p4">*</ept> ）。你需要针对存储容器下包所上载到的文件夹和文件名定义参数。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>接下来，需要加入其他嵌套资源，以设置主机名绑定来利用自定义域。首先，需要确保拥有该主机名，然后对它进行设置，使 Azure 能够验证你是否拥有它 - 请参阅<bpt id="p1">[</bpt>在 Azure Web 应用中配置自定义域名<ept id="p1">](/documentation/articles/web-sites-custom-domain-name)</ept>。完成此操作后，可以将以下内容添加到模板中的 Microsoft.Web/sites 资源部分下：</source>
          <target state="new">接下来，需要加入其他嵌套资源，以设置主机名绑定来利用自定义域。首先，需要确保拥有该主机名，然后对它进行设置，使 Azure 能够验证你是否拥有它 - 请参阅<bpt id="p1">[</bpt>在 Azure Web 应用中配置自定义域名<ept id="p1">](/documentation/articles/web-sites-custom-domain-name)</ept>。完成此操作后，可以将以下内容添加到模板中的 Microsoft.Web/sites 资源部分下：</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>最后，需要添加另一个顶级资源，即 Microsoft.Web/certificates。此资源将包含你的 SSL 证书，并与 Web 应用和托管计划位于同一级别。</source>
          <target state="new">最后，需要添加另一个顶级资源，即 Microsoft.Web/certificates。此资源将包含你的 SSL 证书，并与 Web 应用和托管计划位于同一级别。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>需要具备有效的 SSL 证书才能设置此资源。获得有效的证书后，需要提取 base64 字符串形式的 pfx 字节。提取此信息的方法之一是使用以下 PowerShell 命令：</source>
          <target state="new">需要具备有效的 SSL 证书才能设置此资源。获得有效的证书后，需要提取 base64 字符串形式的 pfx 字节。提取此信息的方法之一是使用以下 PowerShell 命令：</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>然后，可将此信息作为参数传递给 ARM 部署模板。</source>
          <target state="new">然后，可将此信息作为参数传递给 ARM 部署模板。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>至此，ARM 模板已准备就绪。</source>
          <target state="new">至此，ARM 模板已准备就绪。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>部署模板</source>
          <target state="new">部署模板</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>最后一步是将上述所有组成部分整合为完整的端到端部署。若要简化部署，可以利用你在 Visual Studio 中创建 Azure 资源组项目时添加的 <bpt id="p1">**</bpt>Deploy-AzureResourceGroup.ps1 PowerShell<ept id="p1">**</ept> 脚本来上载模板中所需的任何项目。为此，必须事先创建你要使用的存储帐户。在本示例中，我已针对要上载的 package.zip 创建了一个共享存储帐户。脚本将利用 AzCopy 将该包上载到存储帐户。在传入项目文件夹位置后，脚本会自动将该目录中的所有文件上载到指定的存储容器。调用 Deploy-AzureResourceGroup.ps1 之后，必须更新 SSL 绑定，以映射自定义主机名与 SSL 证书。</source>
          <target state="new">最后一步是将上述所有组成部分整合为完整的端到端部署。若要简化部署，可以利用你在 Visual Studio 中创建 Azure 资源组项目时添加的 <bpt id="p1">**</bpt>Deploy-AzureResourceGroup.ps1 PowerShell<ept id="p1">**</ept> 脚本来上载模板中所需的任何项目。为此，必须事先创建你要使用的存储帐户。在本示例中，我已针对要上载的 package.zip 创建了一个共享存储帐户。脚本将利用 AzCopy 将该包上载到存储帐户。在传入项目文件夹位置后，脚本会自动将该目录中的所有文件上载到指定的存储容器。调用 Deploy-AzureResourceGroup.ps1 之后，必须更新 SSL 绑定，以映射自定义主机名与 SSL 证书。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>以下 PowerShell 显示了调用 Deploy-AzureResourceGroup.ps1 的完整部署：</source>
          <target state="new">以下 PowerShell 显示了调用 Deploy-AzureResourceGroup.ps1 的完整部署：</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>此时，应用程序应已部署，你可以通过 https://www.yourcustomdomain.com 浏览它</source>
          <target state="new">此时，应用程序应已部署，你可以通过 https://www.yourcustomdomain.com 浏览它</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>