<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58973b0b4ae5ce02cbb89a8e23b039489711fe27</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>在 Azure 存储中管理并发</source>
          <target state="new">在 Azure 存储中管理并发</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>如何管理 Blob、队列、表和文件服务的并发</source>
          <target state="new">如何管理 Blob、队列、表和文件服务的并发</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>在 Azure 存储中管理并发</source>
          <target state="new">在 Azure 存储中管理并发</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>通常情况下，基于 Internet 的新型应用程序允许多名用户同时查看和更新数据。这就要求应用程序开发人员仔细考虑如何为他们的最终用户提供可预测的体验，尤其是在多名用户可以更新相同数据的情况下。开发人员通常将考虑下面三个主要数据并发策略：</source>
          <target state="new">通常情况下，基于 Internet 的新型应用程序允许多名用户同时查看和更新数据。这就要求应用程序开发人员仔细考虑如何为他们的最终用户提供可预测的体验，尤其是在多名用户可以更新相同数据的情况下。开发人员通常将考虑下面三个主要数据并发策略：</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>乐观并发 – 执行更新的应用程序在更新过程中要验证数据是否自该应用程序上次读取该数据起已发生更改。例如，如果两名查看 wiki 页的用户对同一页进行更新，则 wiki 平台必须确保第二次更新不会覆盖第一次更新，并且两名用户都了解他们的更新成功与否。此策略最常用于 Web 应用中。</source>
          <target state="new">乐观并发 – 执行更新的应用程序在更新过程中要验证数据是否自该应用程序上次读取该数据起已发生更改。例如，如果两名查看 wiki 页的用户对同一页进行更新，则 wiki 平台必须确保第二次更新不会覆盖第一次更新，并且两名用户都了解他们的更新成功与否。此策略最常用于 Web 应用中。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>悲观并发 – 要执行更新的应用程序将对对象获取一个锁，以防其他用户在该锁释放前更新数据。例如，在主/从数据复制情况下，如果只有主对象要执行更新，则该对象通常将在长时间内对数据持有一个独占锁，以确保其他任何用户都不能更新该数据。</source>
          <target state="new">悲观并发 – 要执行更新的应用程序将对对象获取一个锁，以防其他用户在该锁释放前更新数据。例如，在主/从数据复制情况下，如果只有主对象要执行更新，则该对象通常将在长时间内对数据持有一个独占锁，以确保其他任何用户都不能更新该数据。</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>上次编写者赢 – 一种方法，即允许任何更新操作继续进行，而不需要验证其他任何应用程序是否自应用程序首次读取数据起已更新该数据。此策略（或缺乏正式策略）通常用于以下情况：以多名用户不可能访问相同数据的方式对数据进行分区。该策略可能还适用于正在处理短期数据流的情况。</source>
          <target state="new">上次编写者赢 – 一种方法，即允许任何更新操作继续进行，而不需要验证其他任何应用程序是否自应用程序首次读取数据起已更新该数据。此策略（或缺乏正式策略）通常用于以下情况：以多名用户不可能访问相同数据的方式对数据进行分区。该策略可能还适用于正在处理短期数据流的情况。</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>本文概述 Azure 存储平台如何通过为所有这三个并发策略提供一类支持来简化开发。</source>
          <target state="new">本文概述 Azure 存储平台如何通过为所有这三个并发策略提供一类支持来简化开发。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Azure 存储 – 简化云开发</source>
          <target state="new">Azure 存储 – 简化云开发</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Azure 存储服务支持所有三个策略，尽管它具有独特的功能，可以为乐观并发和悲观并发提供完全支持，因为该服务旨在采用强大的一致性模型，该模型用于保证，当存储服务提交数据插入或更新操作时，所有对该数据的进一步访问都将显示最新更新。存储平台如果使用最终一致性模型，则在一名用户执行写入与其他用户可以查看已更新的数据之间存在着时滞，因而会使客户端应用程序开发复杂化，以防不一致性影响最终用户。</source>
          <target state="new">Azure 存储服务支持所有三个策略，尽管它具有独特的功能，可以为乐观并发和悲观并发提供完全支持，因为该服务旨在采用强大的一致性模型，该模型用于保证，当存储服务提交数据插入或更新操作时，所有对该数据的进一步访问都将显示最新更新。存储平台如果使用最终一致性模型，则在一名用户执行写入与其他用户可以查看已更新的数据之间存在着时滞，因而会使客户端应用程序开发复杂化，以防不一致性影响最终用户。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>除了选择相应的并发策略，开发人员还应了解存储平台如何隔离更改，尤其是对跨事务的相同对象的更改。Azure 存储服务使用快照隔离允许在单个分区中并发执行读取操作与写入操作。与其他隔离级别不同，快照隔离保证，所有读取操作看到的数据快照是一致的，即使在执行更新时也是如此。事实上，这是通过在处理更新事务时返回上次提交的值实现的。</source>
          <target state="new">除了选择相应的并发策略，开发人员还应了解存储平台如何隔离更改，尤其是对跨事务的相同对象的更改。Azure 存储服务使用快照隔离允许在单个分区中并发执行读取操作与写入操作。与其他隔离级别不同，快照隔离保证，所有读取操作看到的数据快照是一致的，即使在执行更新时也是如此。事实上，这是通过在处理更新事务时返回上次提交的值实现的。</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>在 Blob 服务中管理并发</source>
          <target state="new">在 Blob 服务中管理并发</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>你可以选择使用乐观并发模型或悲观并发模型，来管理对 Blob 服务中的 Blob 和容器的访问。如果你没有明确指定策略，则上次编写者赢是默认策略。</source>
          <target state="new">你可以选择使用乐观并发模型或悲观并发模型，来管理对 Blob 服务中的 Blob 和容器的访问。如果你没有明确指定策略，则上次编写者赢是默认策略。</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Blob 和容器的乐观并发</source>
          <target state="new">Blob 和容器的乐观并发</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>存储服务会为每个存储对象分配一个标识符。只要对对象执行更新操作，就会更新此标识符。在使用 HTTP 协议中定义的 ETag（实体标记）标头的情况下，该标识符作为 HTTP GET 响应的一部分返回到客户端。对此类对象执行更新的用户，可以连同条件标头一起在原始 ETag 中发送，以确保仅当已满足特定条件时才会进行更新 – 在这种情况下，该条件是“If-Match”标头，该标头要求存储服务确保在更新请求中指定的 ETag 值与存储服务中存储的值相同。</source>
          <target state="new">存储服务会为每个存储对象分配一个标识符。只要对对象执行更新操作，就会更新此标识符。在使用 HTTP 协议中定义的 ETag（实体标记）标头的情况下，该标识符作为 HTTP GET 响应的一部分返回到客户端。对此类对象执行更新的用户，可以连同条件标头一起在原始 ETag 中发送，以确保仅当已满足特定条件时才会进行更新 – 在这种情况下，该条件是“If-Match”标头，该标头要求存储服务确保在更新请求中指定的 ETag 值与存储服务中存储的值相同。</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>此进程的概述如下：</source>
          <target state="new">此进程的概述如下：</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>从存储服务检索 Blob，响应包括用于在存储服务中标识对象当前版本的 HTTP ETag 标头值。</source>
          <target state="new">从存储服务检索 Blob，响应包括用于在存储服务中标识对象当前版本的 HTTP ETag 标头值。</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>在更新 Blob 时，应将您在步骤 1 中获得的 ETag 值包括在发送到服务的请求的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 条件标头中。</source>
          <target state="new">在更新 Blob 时，应将您在步骤 1 中获得的 ETag 值包括在发送到服务的请求的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 条件标头中。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>该服务会将请求中的 ETag 值与 Blob 的当前 ETag 值进行比较。</source>
          <target state="new">该服务会将请求中的 ETag 值与 Blob 的当前 ETag 值进行比较。</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>如果 Blob 的当前 ETag 值与请求的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 条件标头中的 ETag 的版本不同，则该服务将 412 错误返回到客户端。这向客户端表明，其他进程自客户端检索到 Blob 起已更新该 Blob。</source>
          <target state="new">如果 Blob 的当前 ETag 值与请求的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 条件标头中的 ETag 的版本不同，则该服务将 412 错误返回到客户端。这向客户端表明，其他进程自客户端检索到 Blob 起已更新该 Blob。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>如果 Blob 的当前 ETag 值与请求的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 条件标头中的 ETag 的版本相同，则该服务将执行请求的操作，并更新该 Blob 的当前 ETag 值，以说明它已创建新版本。</source>
          <target state="new">如果 Blob 的当前 ETag 值与请求的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 条件标头中的 ETag 的版本相同，则该服务将执行请求的操作，并更新该 Blob 的当前 ETag 值，以说明它已创建新版本。</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>以下 C# 代码段（使用客户端存储库 4.2.0）显示一个简单示例，说明如何根据从以前检索到或插入的 Blob 访问的 ETag 值构造 <bpt id="p1">**</bpt>If-Match AccessCondition<ept id="p1">**</ept>。然后，在更新该 Blob 时使用 <bpt id="p2">**</bpt>AccessCondition<ept id="p2">**</ept> 对象：<bpt id="p3">**</bpt>AccessCondition<ept id="p3">**</ept> 对象将 <bpt id="p4">**</bpt>If-Match<ept id="p4">**</ept> 标头添加到请求中。如果其他进程已更新该 Blob，则 Blob 服务将返回 HTTP 412 (不满足前提条件) 状态消息。可在<bpt id="p5">[</bpt>此处<ept id="p5">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。</source>
          <target state="new">以下 C# 代码段（使用客户端存储库 4.2.0）显示一个简单示例，说明如何根据从以前检索到或插入的 Blob 访问的 ETag 值构造 <bpt id="p1">**</bpt>If-Match AccessCondition<ept id="p1">**</ept>。然后，在更新该 Blob 时使用 <bpt id="p2">**</bpt>AccessCondition<ept id="p2">**</ept> 对象：<bpt id="p3">**</bpt>AccessCondition<ept id="p3">**</ept> 对象将 <bpt id="p4">**</bpt>If-Match<ept id="p4">**</ept> 标头添加到请求中。如果其他进程已更新该 Blob，则 Blob 服务将返回 HTTP 412 (不满足前提条件) 状态消息。可在<bpt id="p5">[</bpt>此处<ept id="p5">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>存储服务还包括支持其他条件标头，例如 <bpt id="p1">**</bpt>If-Modified-Since<ept id="p1">**</ept>、<bpt id="p2">**</bpt>If-Unmodified-Since<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>If-None-Match<ept id="p3">**</ept>，以及这些标头的组合。有关详细信息，请参阅 MSDN 上的<bpt id="p4">[</bpt>为 Blob 服务操作指定条件标头<ept id="p4">](http://msdn.microsoft.com/zh-cn/library/dd179371.aspx)</ept>。</source>
          <target state="new">存储服务还包括支持其他条件标头，例如 <bpt id="p1">**</bpt>If-Modified-Since<ept id="p1">**</ept>、<bpt id="p2">**</bpt>If-Unmodified-Since<ept id="p2">**</ept> 和 <bpt id="p3">**</bpt>If-None-Match<ept id="p3">**</ept>，以及这些标头的组合。有关详细信息，请参阅 MSDN 上的<bpt id="p4">[</bpt>为 Blob 服务操作指定条件标头<ept id="p4">](http://msdn.microsoft.com/zh-cn/library/dd179371.aspx)</ept>。</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>下表概述接受条件标头（例如请求中的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept>）的容器操作，以及在响应中返回 ETag 值的容器操作。</source>
          <target state="new">下表概述接受条件标头（例如请求中的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept>）的容器操作，以及在响应中返回 ETag 值的容器操作。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>操作</source>
          <target state="new">操作</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>返回容器的 ETag 值</source>
          <target state="new">返回容器的 ETag 值</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>接受条件标头</source>
          <target state="new">接受条件标头</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>创建容器</source>
          <target state="new">创建容器</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>获取容器属性</source>
          <target state="new">获取容器属性</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>获取容器元数据</source>
          <target state="new">获取容器元数据</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>设置容器元数据</source>
          <target state="new">设置容器元数据</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>获取容器 ACL</source>
          <target state="new">获取容器 ACL</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>设置容器 ACL</source>
          <target state="new">设置容器 ACL</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>是 (*)</source>
          <target state="new">是 (*)</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>删除容器</source>
          <target state="new">删除容器</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>租赁容器</source>
          <target state="new">租赁容器</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>列出 Blob</source>
          <target state="new">列出 Blob</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>(*) 将缓存由 SetContainerACL 定义的权限，传播这些权限的更新需要 30 秒的时间，在此期间，不保证更新是一致的。</source>
          <target state="new">(*) 将缓存由 SetContainerACL 定义的权限，传播这些权限的更新需要 30 秒的时间，在此期间，不保证更新是一致的。</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>下表概述接受条件标头（例如请求中的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept>）的 Blob 操作，以及在响应中返回 ETag 值的 Blob 操作。</source>
          <target state="new">下表概述接受条件标头（例如请求中的 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept>）的 Blob 操作，以及在响应中返回 ETag 值的 Blob 操作。</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>操作</source>
          <target state="new">操作</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>返回 ETag 值</source>
          <target state="new">返回 ETag 值</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>接受条件标头</source>
          <target state="new">接受条件标头</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>放置 Blob</source>
          <target state="new">放置 Blob</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>获取 Blob</source>
          <target state="new">获取 Blob</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>获取 Blob 属性</source>
          <target state="new">获取 Blob 属性</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>设置 Blob 属性</source>
          <target state="new">设置 Blob 属性</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>获取 Blob 元数据</source>
          <target state="new">获取 Blob 元数据</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>设置 Blob 元数据</source>
          <target state="new">设置 Blob 元数据</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>租赁 Blob (*)</source>
          <target state="new">租赁 Blob (*)</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>制作 Blob 快照</source>
          <target state="new">制作 Blob 快照</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>复制 Blob</source>
          <target state="new">复制 Blob</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>是（用于源 Blob 和目标 Blob）</source>
          <target state="new">是（用于源 Blob 和目标 Blob）</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>中止复制 Blob</source>
          <target state="new">中止复制 Blob</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>删除 Blob</source>
          <target state="new">删除 Blob</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>放置块</source>
          <target state="new">放置块</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>放置块列表</source>
          <target state="new">放置块列表</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>获取块列表</source>
          <target state="new">获取块列表</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>放置页面</source>
          <target state="new">放置页面</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>获取页面范围</source>
          <target state="new">获取页面范围</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>(*) 租赁 Blob 不更改 Blob 中的 ETag。</source>
          <target state="new">(*) 租赁 Blob 不更改 Blob 中的 ETag。</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Blob 的悲观并发</source>
          <target state="new">Blob 的悲观并发</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>若要锁定 Blob 以供独占使用，您可以对该 Blob 获得<bpt id="p1">[</bpt>租约<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx)</ept>。在获取租约时，可以指定需要该租约的时长：该值可以介于 15 到 60 秒之间，也可以是无限期（相当于独占锁）。你可以续订有限期租约来延展该租约，也可以在租约完成后将其释放。Blob 服务在有限期租约到期时会自动释放这些租约。</source>
          <target state="new">若要锁定 Blob 以供独占使用，您可以对该 Blob 获得<bpt id="p1">[</bpt>租约<ept id="p1">](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx)</ept>。在获取租约时，可以指定需要该租约的时长：该值可以介于 15 到 60 秒之间，也可以是无限期（相当于独占锁）。你可以续订有限期租约来延展该租约，也可以在租约完成后将其释放。Blob 服务在有限期租约到期时会自动释放这些租约。</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>租约允许支持各种同步策略，包括独占写入/共享读取、独占写入/独占读取和共享写入/独占读取。如果租约存在，则存储服务会强制执行独占写入（放置、设置和删除操作），但是，若要确保读取操作的独占性，开发人员需要确保所有客户端应用程序都使用一个租约 ID，并且一次只有一个客户端具有有效的租约 ID。不包括租约 ID 的读取操作会导致共享读取。</source>
          <target state="new">租约允许支持各种同步策略，包括独占写入/共享读取、独占写入/独占读取和共享写入/独占读取。如果租约存在，则存储服务会强制执行独占写入（放置、设置和删除操作），但是，若要确保读取操作的独占性，开发人员需要确保所有客户端应用程序都使用一个租约 ID，并且一次只有一个客户端具有有效的租约 ID。不包括租约 ID 的读取操作会导致共享读取。</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>以下 C# 代码段显示一个示例，说明如何在 30 秒内对 Blob 获取独占租约，更新 Blob 的内容，然后释放该租约。当你尝试获取新租约时，如果 Blob 中已经存在有效租约，则 Blob 服务将返回“HTTP (409) 冲突”状态结果。在发出请求以在存储服务中更新 Blob 时，下面的代码段使用 <bpt id="p1">**</bpt>AccessCondition<ept id="p1">**</ept> 对象封装租约信息。可在<bpt id="p2">[</bpt>此处<ept id="p2">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。</source>
          <target state="new">以下 C# 代码段显示一个示例，说明如何在 30 秒内对 Blob 获取独占租约，更新 Blob 的内容，然后释放该租约。当你尝试获取新租约时，如果 Blob 中已经存在有效租约，则 Blob 服务将返回“HTTP (409) 冲突”状态结果。在发出请求以在存储服务中更新 Blob 时，下面的代码段使用 <bpt id="p1">**</bpt>AccessCondition<ept id="p1">**</ept> 对象封装租约信息。可在<bpt id="p2">[</bpt>此处<ept id="p2">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>如果你尝试对租赁的 Blob 执行写入操作，而不传递租约 ID，则请求将失败，显示 412 错误。请注意，如果该租约在调用 <bpt id="p1">**</bpt>UploadText<ept id="p1">**</ept> 方法前到期，但您仍传递租约 ID，则请求也将失败，显示 <bpt id="p2">**</bpt>412<ept id="p2">**</ept> 错误。有关如何管理租约到期时间和租约 ID 的详细信息，请参阅<bpt id="p3">[</bpt>租赁 Blob<ept id="p3">](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx)</ept> REST 说明文档。</source>
          <target state="new">如果你尝试对租赁的 Blob 执行写入操作，而不传递租约 ID，则请求将失败，显示 412 错误。请注意，如果该租约在调用 <bpt id="p1">**</bpt>UploadText<ept id="p1">**</ept> 方法前到期，但您仍传递租约 ID，则请求也将失败，显示 <bpt id="p2">**</bpt>412<ept id="p2">**</ept> 错误。有关如何管理租约到期时间和租约 ID 的详细信息，请参阅<bpt id="p3">[</bpt>租赁 Blob<ept id="p3">](http://msdn.microsoft.com/zh-cn/library/azure/ee691972.aspx)</ept> REST 说明文档。</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>以下 Blob 操作可以使用租约来管理悲观并发：</source>
          <target state="new">以下 Blob 操作可以使用租约来管理悲观并发：</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>放置 Blob</source>
          <target state="new">放置 Blob</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>获取 Blob</source>
          <target state="new">获取 Blob</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>获取 Blob 属性</source>
          <target state="new">获取 Blob 属性</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>设置 Blob 属性</source>
          <target state="new">设置 Blob 属性</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>获取 Blob 元数据</source>
          <target state="new">获取 Blob 元数据</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>设置 Blob 元数据</source>
          <target state="new">设置 Blob 元数据</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>删除 Blob</source>
          <target state="new">删除 Blob</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>放置块</source>
          <target state="new">放置块</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>放置块列表</source>
          <target state="new">放置块列表</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>获取阻止列表</source>
          <target state="new">获取阻止列表</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>放置页面</source>
          <target state="new">放置页面</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>获取页面范围</source>
          <target state="new">获取页面范围</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>制作 Blob 快照 - 可选租约 ID（如果租约存在）</source>
          <target state="new">制作 Blob 快照 - 可选租约 ID（如果租约存在）</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>复制 Blob - 如果目标 Blob 中存在租约，则需要提供租约 ID</source>
          <target state="new">复制 Blob - 如果目标 Blob 中存在租约，则需要提供租约 ID</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>中止复制 Blob - 如果目标 Blob 中存在无限期租约，则需要提供租约 ID</source>
          <target state="new">中止复制 Blob - 如果目标 Blob 中存在无限期租约，则需要提供租约 ID</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>租赁 Blob</source>
          <target state="new">租赁 Blob</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>容器的悲观并发</source>
          <target state="new">容器的悲观并发</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>同 Blob 中的租约一样，容器中的租约可以实现对同步策略（独占写入/共享读取、独占写入/独占读取和共享写入/独占读取）的支持，但是，与 Blob 不同，存储服务仅对删除操作强制实施独占性。若要删除具有活动租约的容器，客户端必须将活动租约 ID 包括在删除请求中。在不包括租约 ID 的情况下，对租赁容器的其他所有容器操作都将成功，在这种情况下，这些操作是共享操作。如果需要更新（放置或设置）或读取操作的独占性，则开发人员应确保所有客户端都使用一个租约 ID，而且一次只有一个客户端具有有效的租约 ID。</source>
          <target state="new">同 Blob 中的租约一样，容器中的租约可以实现对同步策略（独占写入/共享读取、独占写入/独占读取和共享写入/独占读取）的支持，但是，与 Blob 不同，存储服务仅对删除操作强制实施独占性。若要删除具有活动租约的容器，客户端必须将活动租约 ID 包括在删除请求中。在不包括租约 ID 的情况下，对租赁容器的其他所有容器操作都将成功，在这种情况下，这些操作是共享操作。如果需要更新（放置或设置）或读取操作的独占性，则开发人员应确保所有客户端都使用一个租约 ID，而且一次只有一个客户端具有有效的租约 ID。</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>以下容器操作可以使用租约来管理悲观并发：</source>
          <target state="new">以下容器操作可以使用租约来管理悲观并发：</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>删除容器</source>
          <target state="new">删除容器</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>获取容器属性</source>
          <target state="new">获取容器属性</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>获取容器元数据</source>
          <target state="new">获取容器元数据</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>设置容器元数据</source>
          <target state="new">设置容器元数据</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>获取容器 ACL</source>
          <target state="new">获取容器 ACL</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>设置容器 ACL</source>
          <target state="new">设置容器 ACL</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>租赁容器</source>
          <target state="new">租赁容器</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅：</source>
          <target state="new">有关详细信息，请参阅：</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>为 Blob 服务操作指定条件标头</source>
          <target state="new">为 Blob 服务操作指定条件标头</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>租赁容器</source>
          <target state="new">租赁容器</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>租赁 Blob</source>
          <target state="new">租赁 Blob</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>在表服务中管理并发</source>
          <target state="new">在表服务中管理并发</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>在处理实体时，表服务使用乐观并发检查作为默认行为，而 Blob 服务不同，你必须明确选择执行乐观并发检查。表服务与 Blob 服务之间的另一个区别在于，使用表服务，你只能管理实体的并发行为，而使用 Blob 服务，你既可以管理容器的并发，又可以管理 Blob 的并发。</source>
          <target state="new">在处理实体时，表服务使用乐观并发检查作为默认行为，而 Blob 服务不同，你必须明确选择执行乐观并发检查。表服务与 Blob 服务之间的另一个区别在于，使用表服务，你只能管理实体的并发行为，而使用 Blob 服务，你既可以管理容器的并发，又可以管理 Blob 的并发。</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>若要使用乐观并发，并检查其他进程是否自你从表存储服务检索到实体起修改了该实体，你可以使用在表服务返回实体时获得的 ETag 值。此进程的概述如下：</source>
          <target state="new">若要使用乐观并发，并检查其他进程是否自你从表存储服务检索到实体起修改了该实体，你可以使用在表服务返回实体时获得的 ETag 值。此进程的概述如下：</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>从表存储服务检索实体，响应包括用于标识与存储服务中的该实体关联的当前标识符的 ETag 值。</source>
          <target state="new">从表存储服务检索实体，响应包括用于标识与存储服务中的该实体关联的当前标识符的 ETag 值。</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>在更新实体时，应将您在步骤 1 中获得的 ETag 值包括在发送到服务的请求的必需 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 标头中。</source>
          <target state="new">在更新实体时，应将您在步骤 1 中获得的 ETag 值包括在发送到服务的请求的必需 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 标头中。</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>该服务会将请求中的 ETag 值与实体的当前 ETag 值进行比较。</source>
          <target state="new">该服务会将请求中的 ETag 值与实体的当前 ETag 值进行比较。</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>如果实体的当前 ETag 值与请求的必需 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 标头中的 Etag 不同，则该服务将 412 错误返回到客户端。这向客户端表明，其他进程自该客户端检索到实体起已更新该实体。</source>
          <target state="new">如果实体的当前 ETag 值与请求的必需 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 标头中的 Etag 不同，则该服务将 412 错误返回到客户端。这向客户端表明，其他进程自该客户端检索到实体起已更新该实体。</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>如果实体的当前 ETag 值与请求中的必需 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 标头内的 ETag 相同，或者 <bpt id="p2">**</bpt>If-Match<ept id="p2">**</ept> 标头包含通配符 (*)，则服务执行请求的操作并更新实体的当前 ETag 值以指出已更新该值。</source>
          <target state="new">如果实体的当前 ETag 值与请求中的必需 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 标头内的 ETag 相同，或者 <bpt id="p2">**</bpt>If-Match<ept id="p2">**</ept> 标头包含通配符 (*)，则服务执行请求的操作并更新实体的当前 ETag 值以指出已更新该值。</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>请注意，与 Blob 服务不同，表服务要求客户端将 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 标头包括在更新请求中。但是，如果客户端在请求中将 <bpt id="p2">**</bpt>If-Match<ept id="p2">**</ept> 标头设置为通配符 (*)，则可以强制执行非条件更新（“以最后写入者为准”策略）并绕过并发检查。</source>
          <target state="new">请注意，与 Blob 服务不同，表服务要求客户端将 <bpt id="p1">**</bpt>If-Match<ept id="p1">**</ept> 标头包括在更新请求中。但是，如果客户端在请求中将 <bpt id="p2">**</bpt>If-Match<ept id="p2">**</ept> 标头设置为通配符 (*)，则可以强制执行非条件更新（“以最后写入者为准”策略）并绕过并发检查。</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>以下 C# 代码段显示以前创建或检索到的客户实体是如何更新其电子邮件地址的。初始插入或检索操作将 ETag 值存储在客户对象中，因为示例在执行替换操作时使用相同的对象实例，所以将 ETag 值自动发送回表服务，从而使该服务可以检查是否存在并发违规情况。如果其他进程已更新表存储中的实体，则该服务将返回 HTTP 412 (不满足前提条件) 状态消息。可在<bpt id="p1">[</bpt>此处<ept id="p1">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。</source>
          <target state="new">以下 C# 代码段显示以前创建或检索到的客户实体是如何更新其电子邮件地址的。初始插入或检索操作将 ETag 值存储在客户对象中，因为示例在执行替换操作时使用相同的对象实例，所以将 ETag 值自动发送回表服务，从而使该服务可以检查是否存在并发违规情况。如果其他进程已更新表存储中的实体，则该服务将返回 HTTP 412 (不满足前提条件) 状态消息。可在<bpt id="p1">[</bpt>此处<ept id="p1">](http://code.msdn.microsoft.com/windowsazure/Managing-Concurrency-using-56018114)</ept>下载完整示例。</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>若要明确禁用并发检查，您应该在执行替换操作前，将 <bpt id="p1">**</bpt>employee<ept id="p1">**</ept> 对象的 <bpt id="p2">**</bpt>ETag<ept id="p2">**</ept> 属性设置为“*”。</source>
          <target state="new">若要明确禁用并发检查，您应该在执行替换操作前，将 <bpt id="p1">**</bpt>employee<ept id="p1">**</ept> 对象的 <bpt id="p2">**</bpt>ETag<ept id="p2">**</ept> 属性设置为“*”。</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>customer.ETag = "*"；</source>
          <target state="new">customer.ETag = "*"；</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>下表概述表实体操作是如何使用 ETag 值的：</source>
          <target state="new">下表概述表实体操作是如何使用 ETag 值的：</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>操作</source>
          <target state="new">操作</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>返回 ETag 值</source>
          <target state="new">返回 ETag 值</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>需要 If-Match 请求标头</source>
          <target state="new">需要 If-Match 请求标头</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>查询实体</source>
          <target state="new">查询实体</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>插入实体</source>
          <target state="new">插入实体</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>更新实体</source>
          <target state="new">更新实体</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>合并实体</source>
          <target state="new">合并实体</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>删除实体</source>
          <target state="new">删除实体</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>插入或替换实体</source>
          <target state="new">插入或替换实体</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>插入或合并实体</source>
          <target state="new">插入或合并实体</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>是</source>
          <target state="new">是</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>否</source>
          <target state="new">否</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>请注意，<bpt id="p1">**</bpt>插入或替换实体<ept id="p1">**</ept>和<bpt id="p2">**</bpt>插入或合并实体<ept id="p2">**</ept>操作不可以执行任何并发检查，因为这些操作<bpt id="p3">*</bpt>不会<ept id="p3">*</ept>将 ETag 值发送到表服务。</source>
          <target state="new">请注意，<bpt id="p1">**</bpt>插入或替换实体<ept id="p1">**</ept>和<bpt id="p2">**</bpt>插入或合并实体<ept id="p2">**</ept>操作不可以执行任何并发检查，因为这些操作<bpt id="p3">*</bpt>不会<ept id="p3">*</ept>将 ETag 值发送到表服务。</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>一般情况下，使用表的开发人员应依靠乐观并发来开发可伸缩的应用程序。如果需要悲观锁定，则开发人员在访问表时可采用的一种方法是，为每个表分配指定的 Blob，并在对该表执行操作前获取 Blob 中的租约。这种方法要求应用程序确保在对表执行操作前，所有数据访问路径都获得租约。你还应注意，最短租赁时间为 15 秒，这要求你慎重考虑可伸缩性。</source>
          <target state="new">一般情况下，使用表的开发人员应依靠乐观并发来开发可伸缩的应用程序。如果需要悲观锁定，则开发人员在访问表时可采用的一种方法是，为每个表分配指定的 Blob，并在对该表执行操作前获取 Blob 中的租约。这种方法要求应用程序确保在对表执行操作前，所有数据访问路径都获得租约。你还应注意，最短租赁时间为 15 秒，这要求你慎重考虑可伸缩性。</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅：</source>
          <target state="new">有关详细信息，请参阅：</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>对实体的操作</source>
          <target state="new">对实体的操作</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>在队列服务中管理并发</source>
          <target state="new">在队列服务中管理并发</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>在队列服务中考虑并发的一种情况是，多个客户端正从一个队列检索消息。在从队列检索消息时，响应包括消息和 pop 接收方值，这是删除该消息所必需的。该消息不会从队列中自动删除，但是在检索到后，该消息在 visibilitytimeout 参数指定的时间间隔内不显示给其他客户端。检索消息的客户端应在消息处理后、响应的 TimeNextVisible 元素指定的时间前删除该消息，该时间是根据 visibilitytimeout 参数的值计算的。若要确定 TimeNextVisible 的值，可将 visibilitytimeout 的值添加到消息的检索时间。</source>
          <target state="new">在队列服务中考虑并发的一种情况是，多个客户端正从一个队列检索消息。在从队列检索消息时，响应包括消息和 pop 接收方值，这是删除该消息所必需的。该消息不会从队列中自动删除，但是在检索到后，该消息在 visibilitytimeout 参数指定的时间间隔内不显示给其他客户端。检索消息的客户端应在消息处理后、响应的 TimeNextVisible 元素指定的时间前删除该消息，该时间是根据 visibilitytimeout 参数的值计算的。若要确定 TimeNextVisible 的值，可将 visibilitytimeout 的值添加到消息的检索时间。</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>队列服务不支持乐观并发或悲观并发，因此，处理从队列检索到的消息的客户端应确保以幂等方式处理消息。上次编写者赢策略用于更新操作，例如 SetQueueServiceProperties、SetQueueMetaData、SetQueueACL 和 UpdateMessage。</source>
          <target state="new">队列服务不支持乐观并发或悲观并发，因此，处理从队列检索到的消息的客户端应确保以幂等方式处理消息。上次编写者赢策略用于更新操作，例如 SetQueueServiceProperties、SetQueueMetaData、SetQueueACL 和 UpdateMessage。</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅：</source>
          <target state="new">有关详细信息，请参阅：</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>队列服务 REST API</source>
          <target state="new">队列服务 REST API</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>获取消息</source>
          <target state="new">获取消息</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>在文件服务中管理并发</source>
          <target state="new">在文件服务中管理并发</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>文件服务可以使用下面两个不同的协议终结点访问：SMB 和 REST。REST 服务不支持乐观锁定或悲观锁定，并且所有更新将遵循上次编写者赢策略。SMB 客户端如果装载文件共享，则可以充分利用文件系统锁定机制来管理对共享文件的访问，包括可以执行悲观锁定。在打开文件后，SMB 客户端会同时指定文件访问权限和共享模式。如果将“文件访问权限”选项设置为“读取”或“读取/写入”，同时将“文件共享”模式设置为“无”，则将导致文件在关闭前被 SMB 客户端锁定。如果尝试对 SMB 客户端已锁定的文件执行 REST 操作，则 REST 服务将返回状态代码 409 (冲突)，以及错误代码 SharingViolation。</source>
          <target state="new">文件服务可以使用下面两个不同的协议终结点访问：SMB 和 REST。REST 服务不支持乐观锁定或悲观锁定，并且所有更新将遵循上次编写者赢策略。SMB 客户端如果装载文件共享，则可以充分利用文件系统锁定机制来管理对共享文件的访问，包括可以执行悲观锁定。在打开文件后，SMB 客户端会同时指定文件访问权限和共享模式。如果将“文件访问权限”选项设置为“读取”或“读取/写入”，同时将“文件共享”模式设置为“无”，则将导致文件在关闭前被 SMB 客户端锁定。如果尝试对 SMB 客户端已锁定的文件执行 REST 操作，则 REST 服务将返回状态代码 409 (冲突)，以及错误代码 SharingViolation。</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>当 SMB 客户端打开文件以进行删除时，会将该文件标记为待删除，直到该文件上的其他所有 SMB 客户端打开句柄关闭为止。当文件标记为待删除时，对该文件执行的任何 REST 操作将返回状态代码 409 (冲突)，以及错误代码 SMBDeletePending。不返回状态代码 404 (找不到)，因为 SMB 客户端在关闭文件前，可能无法删除待删除标志。换而言之，仅当删除文件后，才应返回状态代码 404 (找不到)。请注意，当文件处于 SMB 待删除状态时，“列出文件”结果中将不包含该文件。另请注意，“REST 删除文件”和“REST 删除目录”操作以原子方式提交，并且不会导致待删除状态。</source>
          <target state="new">当 SMB 客户端打开文件以进行删除时，会将该文件标记为待删除，直到该文件上的其他所有 SMB 客户端打开句柄关闭为止。当文件标记为待删除时，对该文件执行的任何 REST 操作将返回状态代码 409 (冲突)，以及错误代码 SMBDeletePending。不返回状态代码 404 (找不到)，因为 SMB 客户端在关闭文件前，可能无法删除待删除标志。换而言之，仅当删除文件后，才应返回状态代码 404 (找不到)。请注意，当文件处于 SMB 待删除状态时，“列出文件”结果中将不包含该文件。另请注意，“REST 删除文件”和“REST 删除目录”操作以原子方式提交，并且不会导致待删除状态。</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>有关详细信息，请参阅：</source>
          <target state="new">有关详细信息，请参阅：</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>管理文件锁</source>
          <target state="new">管理文件锁</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>摘要和后续步骤</source>
          <target state="new">摘要和后续步骤</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>经过精心设计，Azure 存储服务可以满足最复杂的在线应用程序需要，而不会迫使开发人员对主要设计假设做出妥协或重新思考，例如他们视为理所当然的并发和数据一致性。</source>
          <target state="new">经过精心设计，Azure 存储服务可以满足最复杂的在线应用程序需要，而不会迫使开发人员对主要设计假设做出妥协或重新思考，例如他们视为理所当然的并发和数据一致性。</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>对于本博客中引用的完整示例应用程序：</source>
          <target state="new">对于本博客中引用的完整示例应用程序：</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>使用 Azure 存储管理并发 - 示例应用程序</source>
          <target state="new">使用 Azure 存储管理并发 - 示例应用程序</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>有关 Azure 存储的详细信息，请参阅：</source>
          <target state="new">有关 Azure 存储的详细信息，请参阅：</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Azure 存储主页</source>
          <target state="new">Azure 存储主页</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Azure 存储简介</source>
          <target state="new">Azure 存储简介</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Blob<ept id="p1">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>、<bpt id="p2">[</bpt>表<ept id="p2">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-tables)</ept>和<bpt id="p3">[</bpt>队列<ept id="p3">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-queues)</ept>的存储使用入门</source>
          <target state="new"><bpt id="p1">[</bpt>Blob<ept id="p1">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-blobs)</ept>、<bpt id="p2">[</bpt>表<ept id="p2">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-tables)</ept>和<bpt id="p3">[</bpt>队列<ept id="p3">](/zh-cn/documentation/articles/storage-dotnet-how-to-use-queues)</ept>的存储使用入门</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>存储体系结构 - <bpt id="p1">[</bpt>Azure 存储：具有高度一致性的高可用云存储服务<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/11/20/windows-azure-storage-a-highly-available-cloud-storage-service-with-strong-consistency.aspx)</ept></source>
          <target state="new">存储体系结构 - <bpt id="p1">[</bpt>Azure 存储：具有高度一致性的高可用云存储服务<ept id="p1">](http://blogs.msdn.com/b/windowsazurestorage/archive/2011/11/20/windows-azure-storage-a-highly-available-cloud-storage-service-with-strong-consistency.aspx)</ept></target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>