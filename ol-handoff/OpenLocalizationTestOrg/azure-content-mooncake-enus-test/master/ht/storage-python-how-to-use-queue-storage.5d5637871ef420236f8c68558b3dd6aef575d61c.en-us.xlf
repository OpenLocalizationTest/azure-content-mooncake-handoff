<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="en-us">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47a1e5dfec4e6461db1144086d7c81bc842533f6</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-02a95cf" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>如何通过 Python 使用队列存储 | Azure</source>
          <target state="new">如何通过 Python 使用队列存储 | Azure</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>了解如何通过 Python 使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。</source>
          <target state="new">了解如何通过 Python 使用 Azure 队列服务创建和删除队列，以及插入、获取和删除消息。</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>如何通过 Python 使用队列存储</source>
          <target state="new">如何通过 Python 使用队列存储</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>概述</source>
          <target state="new">概述</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>本指南演示如何使用 Azure 队列存储服务执行常见方案。相关示例是使用 Python 编写的，并使用 [Python Azure 存储服务包][]。介绍的方案包括“插入”、“查看”、“获取”和“删除”队列消息以及“创建和删除队列”。有关队列的详细信息，请参阅 <bpt id="p1">[</bpt>后续步骤<ept id="p1">](#Next-Steps)</ept> 部分。</source>
          <target state="new">本指南演示如何使用 Azure 队列存储服务执行常见方案。相关示例是使用 Python 编写的，并使用 [Python Azure 存储服务包][]。介绍的方案包括“插入”、“查看”、“获取”和“删除”队列消息以及“创建和删除队列”。有关队列的详细信息，请参阅 <bpt id="p1">[</bpt>后续步骤<ept id="p1">](#Next-Steps)</ept> 部分。</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><ph id="ph1">[AZURE.NOTE]</ph>如果您需要安装 Python 或 <bpt id="p1">[</bpt>Python Azure 包<ept id="p1">][]</ept>，请参阅 <bpt id="p2">[</bpt>Python 安装指南<ept id="p2">](/documentation/articles/python-how-to-install)</ept>。</source>
          <target state="new"><ph id="ph1">[AZURE.NOTE]</ph>如果您需要安装 Python 或 <bpt id="p1">[</bpt>Python Azure 包<ept id="p1">][]</ept>，请参阅 <bpt id="p2">[</bpt>Python 安装指南<ept id="p2">](/documentation/articles/python-how-to-install)</ept>。</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>如何：创建队列</source>
          <target state="new">如何：创建队列</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>可以通过 <bpt id="p1">**</bpt>QueueService<ept id="p1">**</ept> 对象来处理队列。以下代码创建 <bpt id="p2">**</bpt>QueueService<ept id="p2">**</ept> 对象。在你希望在其中以编程方式访问 Azure 存储空间的任何 Python 文件中，将以下代码添加到文件的顶部附近：</source>
          <target state="new">可以通过 <bpt id="p1">**</bpt>QueueService<ept id="p1">**</ept> 对象来处理队列。以下代码创建 <bpt id="p2">**</bpt>QueueService<ept id="p2">**</ept> 对象。在你希望在其中以编程方式访问 Azure 存储空间的任何 Python 文件中，将以下代码添加到文件的顶部附近：</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>以下代码使用存储帐户名称和帐户密钥创建 <bpt id="p1">**</bpt>QueueService<ept id="p1">**</ept> 对象。使用实际帐户和密钥替换“myaccount”和“mykey”。</source>
          <target state="new">以下代码使用存储帐户名称和帐户密钥创建 <bpt id="p1">**</bpt>QueueService<ept id="p1">**</ept> 对象。使用实际帐户和密钥替换“myaccount”和“mykey”。</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>如何：在队列中插入消息</source>
          <target state="new">如何：在队列中插入消息</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>若要在队列中插入消息，可使用 <bpt id="p1">**</bpt>put_message<ept id="p1">**</ept> 方法创建一条新消息并将其添加到队列中。</source>
          <target state="new">若要在队列中插入消息，可使用 <bpt id="p1">**</bpt>put_message<ept id="p1">**</ept> 方法创建一条新消息并将其添加到队列中。</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>如何：扫视下一条消息</source>
          <target state="new">如何：扫视下一条消息</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>通过调用 <bpt id="p1">**</bpt>peek_messages<ept id="p1">**</ept> 方法，可以查看队列前面的消息，而不必从队列中将其删除。默认情况下，<bpt id="p2">**</bpt>peek_messages<ept id="p2">**</ept> 扫视单条消息。</source>
          <target state="new">通过调用 <bpt id="p1">**</bpt>peek_messages<ept id="p1">**</ept> 方法，可以查看队列前面的消息，而不必从队列中将其删除。默认情况下，<bpt id="p2">**</bpt>peek_messages<ept id="p2">**</ept> 扫视单条消息。</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>如何：取消对下一条消息的排队</source>
          <target state="new">如何：取消对下一条消息的排队</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>你的代码分两步从队列中删除消息。在调用 <bpt id="p1">**</bpt>get_messages<ept id="p1">**</ept> 时，默认情况下你会获得队列中的下一条消息。从 <bpt id="p2">**</bpt>get_messages<ept id="p2">**</ept> 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要完成从队列中删除消息，你还必须调用 <bpt id="p3">**</bpt>delete_message<ept id="p3">**</ept>。此删除消息的两步过程可确保当您的代码因硬件或软件故障而无法处理消息时，您的其他代码实例可以获取同一消息并重试。你的代码在处理消息后会立即调用 <bpt id="p4">**</bpt>delete_message<ept id="p4">**</ept>。</source>
          <target state="new">你的代码分两步从队列中删除消息。在调用 <bpt id="p1">**</bpt>get_messages<ept id="p1">**</ept> 时，默认情况下你会获得队列中的下一条消息。从 <bpt id="p2">**</bpt>get_messages<ept id="p2">**</ept> 返回的消息变得对从此队列读取消息的任何其他代码不可见。默认情况下，此消息将持续 30 秒不可见。若要完成从队列中删除消息，你还必须调用 <bpt id="p3">**</bpt>delete_message<ept id="p3">**</ept>。此删除消息的两步过程可确保当您的代码因硬件或软件故障而无法处理消息时，您的其他代码实例可以获取同一消息并重试。你的代码在处理消息后会立即调用 <bpt id="p4">**</bpt>delete_message<ept id="p4">**</ept>。</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>如何：更改已排队消息的内容</source>
          <target state="new">如何：更改已排队消息的内容</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用 <bpt id="p1">**</bpt>update_message<ept id="p1">**</ept> 方法来更新消息。</source>
          <target state="new">你可以更改队列中现有消息的内容。如果消息表示工作任务，则你可以使用此功能来更新该工作任务的状态。以下代码使用 <bpt id="p1">**</bpt>update_message<ept id="p1">**</ept> 方法来更新消息。</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>如何：用于对消息取消排队的其他选项</source>
          <target state="new">如何：用于对消息取消排队的其他选项</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，您可以设置更长或更短的不可见超时时间，从而允许您的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id="p1">**</bpt>get_messages<ept id="p1">**</ept> 方法来在一次调用中获取 16 条消息。然后，它会使用 for 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。</source>
          <target state="new">你可以通过两种方式自定义队列中的消息检索。首先，你可以获取一批消息（最多 32 个）。其次，您可以设置更长或更短的不可见超时时间，从而允许您的代码使用更多或更少时间来完全处理每个消息。以下代码示例使用 <bpt id="p1">**</bpt>get_messages<ept id="p1">**</ept> 方法来在一次调用中获取 16 条消息。然后，它会使用 for 循环处理每条消息。它还将每条消息的不可见超时时间设置为 5 分钟。</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>如何：获取队列长度</source>
          <target state="new">如何：获取队列长度</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>你可以获取队列中消息的估计数。<bpt id="p1">**</bpt>get_queue_metadata<ept id="p1">**</ept> 方法要求队列服务返回有关队列的元数据，并且 <bpt id="p2">**</bpt>x-ms-approximate-messages-count<ept id="p2">**</ept> 应用作返回的字典中的索引以查找计数。结果仅是近似值，因为在队列服务响应您的请求之后，可能添加或删除了消息。</source>
          <target state="new">你可以获取队列中消息的估计数。<bpt id="p1">**</bpt>get_queue_metadata<ept id="p1">**</ept> 方法要求队列服务返回有关队列的元数据，并且 <bpt id="p2">**</bpt>x-ms-approximate-messages-count<ept id="p2">**</ept> 应用作返回的字典中的索引以查找计数。结果仅是近似值，因为在队列服务响应您的请求之后，可能添加或删除了消息。</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>如何：删除队列</source>
          <target state="new">如何：删除队列</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>若要删除队列及其中包含的所有消息，请调用 <bpt id="p1">**</bpt>delete_queue<ept id="p1">**</ept> 方法。</source>
          <target state="new">若要删除队列及其中包含的所有消息，请调用 <bpt id="p1">**</bpt>delete_queue<ept id="p1">**</ept> 方法。</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;a id="Next-Steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 后续步骤</source>
          <target state="new"><ph id="ph1">&lt;a id="Next-Steps"&gt;</ph><ph id="ph2">&lt;/a&gt;</ph> 后续步骤</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>现在，您已了解有关队列存储的基础知识，请按照下面的链接了解更复杂的存储任务。</source>
          <target state="new">现在，您已了解有关队列存储的基础知识，请按照下面的链接了解更复杂的存储任务。</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>访问 <bpt id="p1">[</bpt>Azure 存储空间团队博客<ept id="p1">][]</ept></source>
          <target state="new">访问 <bpt id="p1">[</bpt>Azure 存储空间团队博客<ept id="p1">][]</ept></target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>有关详细信息，另请参阅 <bpt id="p1">[</bpt>Python 开发人员中心<ept id="p1">](/develop/python/)</ept>。</source>
          <target state="new">有关详细信息，另请参阅 <bpt id="p1">[</bpt>Python 开发人员中心<ept id="p1">](/develop/python/)</ept>。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>